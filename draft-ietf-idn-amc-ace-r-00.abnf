codept ==  45      ;
c1 = *s1;
c2 = *s2;
b = k << 2;
max_out = *output_size;
next_out = 0;
literal = 0;

codept = input[i];
literal = 1;
shift = uppercase_flags && uppercase_flags[i] ? 32 : 0;
delta = codept - refpoint[k];
literal = 0;

out = next_out + k - 1;
max_out = *output_length;
next_out = 0;
in = input;
literal = 0;
literal = !literal;
c = *++in;
c = *(in += 2);
c = *++in;
delta = 0;
first = in;

q = base32_decode(c);
delta = (delta << 4) | (q & 0xF);
c = *++in;
input_size = in - input + 1;
scratch_size = input_size;
status = amc_ace_r_encode(next_out, output, uppercase_flags,
                            &scratch_size, scratch_space);
unicode_max_length = 256,
ace_max_size = 256,
test_case_sensitivity = case_insensitive  /* good for host names */
input_length = 0;

c0 = getchar();
c1 = getchar();
c2 = getchar();
c3 = getchar();
output_size = ace_max_size;
status = amc_ace_r_encode(input_length, input, uppercase_flags,
                              &output_size, output);
r = fputs(output,stdout);
output_length = unicode_max_length;
status = amc_ace_r_decode(test_case_sensitivity, scratch, input,
                              &output_length, output, uppercase_flags);
r = putchar(uppercase_flags[i] ? 0x80 : 0);
codept = output[i];
r = putchar(codept >> 16);
r = putchar((codept >> 8) & 0xFF);
r = putchar(codept & 0xFF);
