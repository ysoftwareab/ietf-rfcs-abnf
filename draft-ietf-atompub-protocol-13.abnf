xmlns="http://www.w3.org/2005/Atom"
fixed="yes" scheme="http://example.com/cats/big3">
atomCategory =
       element atom:category {
          atomCommonAttributes,
          attribute term { text },
          attribute scheme { atomURI }?,
          attribute label { text }?,
          undefinedContent
       }

appInlineCategories =
       element app:categories {
           attribute fixed { "yes" | "no" }?,
           attribute scheme { atomURI }?,
           (atomCategory*)
       }

appOutOfLineCategories =
       element app:categories {
           attribute href { atomURI },
           undefinedContent
       }

appCategories = appInlineCategories | appOutOfLineCategories
href="http://example.org/reilly/main" >
href="http://example.com/cats/forMain.cats" />
href="http://example.org/reilly/pic" >
href="http://example.org/reilly/list" >
scheme="http://example.org/extra-cats/"
term="joke" />
scheme="http://example.org/extra-cats/"
term="serious" />
start = appService


appService =
      element app:service {
         appCommonAttributes,
         ( appWorkspace+
           & extensionElement* )
      }

appWorkspace =
      element app:workspace {
         appCommonAttributes,
         ( atomTitle
           & appCollection*
           & extensionSansTitleElement* )
      }

atomTitle = element atom:title { atomTextConstruct }
appCollection =
      element app:collection {
         appCommonAttributes,
         attribute href { atomURI  },
         ( atomTitle
           & appAccept?
           & appCategories*
           & extensionSansTitleElement* )
      }

appAccept =
      element app:accept {
            appCommonAttributes,
            ( appTypeValue? )
      }


appTypeValue = ( "entry" | media-type |entry-or-media-type  )
media-type = xsd:string { pattern = "entry,(.+/.+,?)*" }
entry-or-media-type = xsd:string { pattern = "(.+/.+,?)*" }

atomCategory =
       element atom:category {
          atomCommonAttributes,
          attribute term { text },
          attribute scheme { atomURI }?,
          attribute label { text }?,
          undefinedContent
       }

appInlineCategories =
       element app:categories {
           attribute fixed { "yes" | "no" }?,
           attribute scheme { atomURI }?,
           (atomCategory*)
       }

appOutOfLineCategories =
       element app:categories {
           attribute href { atomURI },
           undefinedContent
       }

appCategories = appInlineCategories | appOutOfLineCategories

href="http://example.org/edit/first-post.atom"/>
src="http://media.example.org/the_beach.png"/>
href="http://media.example.org/edit/the_beach.png" />
href="http://example.org/media/edit/the_beach.atom" />
src="http://media.example.org/the_beach.png"/>
href="http://media.example.org/edit/the_beach.png" />
href="http://example.org/media/edit/the_beach.atom" />
src="http://media.example.org/the_beach.png"/>
href="http://media.example.org/edit/the_beach.png" />
href="http://example.org/media/edit/the_beach.atom" />
src="http://media.example.org/the_pier.png"/>
href="http://media.example.org/edit/the_pier.png" />
href="http://example.org/media/edit/the_pier.atom" />
src="http://media.example.org/the_beach.png"/>
src="http://media.example.org/the_pier.png"/>
src="http://media.example.org/the_beach.png"/>
src="http://media.example.org/the_pier.png"/>
href="http://example.org/blog/edit/a-day-at-the-beach.atom"/>
href="http://example.org/blog/a-day-at-the-beach.xhtml"/>
Slug = "Slug" ":" *TEXT

href="http://example.org/entries/go" />
href="http://example.org/entries/2" />
href="http://example.org/entries/10" />
href="http://example.org/entries/go" />
href="http://example.org/entries/go" />
href="http://example.org/entries/3" />
href="http://example.org/entries/10" />
appEdited = element app:edited ( atomDateConstruct )

type = "entry" / "feed"

pubControl =
       element app:control {
       atomCommonAttributes,
       pubDraft?
       & extensionElement
pubDraft =
      element app:draft { "yes" | "no" }

start = appService

atomURI = text

appCommonAttributes =
      attribute xml:base { atomURI }?,
      attribute xml:lang { atomLanguageTag }?,
      undefinedAttribute*


atomCommonAttributes = appCommonAttributes

undefinedAttribute =
     attribute * - (xml:base | xml:lang | local:*) { text }



atomLanguageTag = xsd:string {
pattern = "[A-Za-z]{1,8}(-[A-Za-z0-9]{1,8})*"
atomDateConstruct =
       appCommonAttributes,
       xsd:dateTime
appService =
      element app:service {
         appCommonAttributes,
         ( appWorkspace+
           & extensionElement* )
      }

appWorkspace =
      element app:workspace {
         appCommonAttributes,
         ( atomTitle
           & appCollection*
           & extensionSansTitleElement* )
      }

atomTitle = element atom:title { atomTextConstruct }

appCollection =
      element app:collection {
         appCommonAttributes,
         attribute href { atomURI  },
         ( atomTitle
           & appAccept?
           & appCategories*
           & extensionSansTitleElement* )
      }

atomCategory =
       element atom:category {
          atomCommonAttributes,
          attribute term { text },
          attribute scheme { atomURI }?,
          attribute label { text }?,
          undefinedContent
       }

appInlineCategories =
       element app:categories {
           attribute fixed { "yes" | "no" }?,
           attribute scheme { atomURI }?,
           (atomCategory*)
       }

appOutOfLineCategories =
       element app:categories {
           attribute href { atomURI },
           undefinedContent
       }

appCategories = appInlineCategories | appOutOfLineCategories


appAccept =
      element app:accept {
            appCommonAttributes,
            ( appTypeValue? )
      }


appTypeValue = ( "entry" | media-type |entry-or-media-type  )
media-type = xsd:string { pattern = "entry,(.+/.+,?)*" }
entry-or-media-type = xsd:string { pattern = "(.+/.+,?)*" }
simpleSansTitleExtensionElement =
      element * - (app:*|atom:title) {
         text
      }

simpleExtensionElement =
      element * - (app:*) {
         text
      }


structuredSansTitleExtensionElement =
      element * - (app:*|atom:title) {
         (attribute * { text }+,
            (text|anyElement)*)
       | (attribute * { text }*,
          (text?, anyElement+, (text|anyElement)*))
      }

structuredExtensionElement =
      element * - (app:*) {
         (attribute * { text }+,
            (text|anyElement)*)
       | (attribute * { text }*,
          (text?, anyElement+, (text|anyElement)*))
      }

extensionSansTitleElement =
    simpleSansTitleExtensionElement|structuredSansTitleExtensionElement


extensionElement =
      simpleExtensionElement | structuredExtensionElement

undefinedContent = (text|anyForeignElement)*

anyElement =
      element * {
         (attribute * { text }
          | text
          | anyElement)*
      }

anyForeignElement =
       element * - app:* {
          (attribute * { text }
           | text
           | anyElement)*
       }

atomPlainTextConstruct =
       atomCommonAttributes,
       attribute type { "text" | "html" }?,
       text

atomXHTMLTextConstruct =
       atomCommonAttributes,
       attribute type { "xhtml" },
       xhtmlDiv

atomTextConstruct = atomPlainTextConstruct | atomXHTMLTextConstruct
anyXHTML = element xhtml:* {
       (attribute * { text }
        | text
        | anyXHTML)*
xhtmlDiv = element xhtml:div {
     (attribute * { text }
      | text
      | anyXHTML)*
start = appCategories

atomCommonAttributes =
      attribute xml:base { atomURI }?,
      attribute xml:lang { atomLanguageTag }?,
      undefinedAttribute*

undefinedAttribute =
     attribute * - (xml:base | xml:lang | local:*) { text }

atomURI = text

atomLanguageTag = xsd:string {
pattern = "[A-Za-z]{1,8}(-[A-Za-z0-9]{1,8})*"
atomCategory =
       element atom:category {
          atomCommonAttributes,
          attribute term { text },
          attribute scheme { atomURI }?,
          attribute label { text }?,
          undefinedContent
       }

appInlineCategories =
       element app:categories {
           attribute fixed { "yes" | "no" }?,
           attribute scheme { atomURI }?,
           (atomCategory*)
       }

appOutOfLineCategories =
       element app:categories {
           attribute href { atomURI },
           (empty)
       }

appCategories = appInlineCategories | appOutOfLineCategories


undefinedContent = (text|anyForeignElement)*

anyElement =
      element * {
         (attribute * { text }
          | text
          | anyElement)*
      }

anyForeignElement =
       element * - atom:* {
          (attribute * { text }
           | text
           | anyElement)*
       }

