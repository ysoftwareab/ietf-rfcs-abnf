E1 = 17 % 3
          = 2

E1 = 2.  It finds the difference between s.e1 and E1 using modulo 3
URG = 1, this 16 bit field keeps its original name and definition
RL1=1 ,>  ,--- RL2=4 -->
RL2=1 ,>                  (RL1 = 0)
ci   = 0    // CE counter
w_ci = 0    // internal 'weight' variable for CI
r_ci = 0    // internal count of how often CI has been repeated
e1   = 0    // ECT(1) counter
w_e1 = 0    // internal 'weight' variable for E1
r_e1 = 0    // internal count of how often E1 has been repeated
ni   = 0    // Not-ECT counter

w_ci = ci * r_e1,
w_e1 = e1 * r_ci.

ci   = 0        // CE counter
q_ci = 0        // queue of CI's to repeat
nxt_ci = TRUE   // Signal E1 next if FALSE
e1   = 0        // ECT(1) counter
q_e1 = 0        // queue of E1's to repeat
ni   = 0        // Not-ECT counter

q_ci = 2
q_e1 = 2
q_e1 = max(0, q_e1 - 1)
q_ci = max(0, q_ci - 1)
nxt_ci = !nxt_ci    // Toggle the next signal
Top-ACE = Int(cntr / ACE_base) % 16,
ACE_cntr = cntr % ACE_base.

Top-ACE = INT(73 / 4) % 16
               = 2
               = 0b0010
ACE_cntr = 73 % 4
                = 1

ACE = 0b001.

Top-ACE = INT(75 / 3) % 16
               = 9
               = 0b1001
ACE_cntr = 75 % 3
                = 0

ACE = 0b100.

Top-ACE = INT(43 / 1) % 16
               = 11
               = 0b1011
ACE_cntr = 43 % 1
                = 0               // Anything modulo 1 is 0

ACE = 0b111.

cntr = Top-ACE * ACE_base + ACE_cntr.

E1 = cntr = 7 * 3 + 1
                 = 22

delta_e1 = (E1 + 48 - snd_e1 % 48) % 48

DEFAULT = ECT0      // Any ECN codepoint except Not-ECT
DACK_T_MAX = 500    // Max time to delay an ACK [ms]
RL_MAX = 7          // Max run-length that can fit in 3-bit field
DACK_SEG_MAX = 2    // Max full-sized delayed ACK segments:
MSS = 1500          // Example max segment size [B]
DACK_B_MAX = DACK_SEG_MAX * MSS     // Max deferred bytes

sp = mk1 = DEFAULT  // 2-bit ECN codepoints: space and mark
rl1 = rl2 = 0       // 3-bit run-lengths
dack_b = 0          // deferred bytes

tmp = read(pkt.ip.ecn)      // Store incoming ECN field
mk2 = tmp               // Assign incoming ECN to mk2
sp = tmp                // Initialise with a space in run2
mk1 = sp            // Shift run2 to run1, making mk1=sp
rl1 = rl2
rl2 = 1
mk1 = tmp
rl1 = rl2
rl2 = 0
mk1 = sp            // If so, swap marks with spaces
sp = tmp
rl1 = 1
rl2 = 2
mk2 = tmp           // Assign the incoming ECN to mk2
mk2 = sp    // copy it into mk2
mk2 = mk1   // copy mk1 into mk2
rl2 = rl1-- // shift run1 into run2 without mk1
rl1 = 0
sp = mk1 = DEFAULT
rl1 = rl2 = 0
