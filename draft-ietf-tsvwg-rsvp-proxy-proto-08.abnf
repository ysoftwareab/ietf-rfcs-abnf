NotifyD = Notify message containing a downstream notification


     Figure 4: Reservation Failure With Sender Notification via Direct
                                  Notify

   Operation of the Path-Triggered RSVP Receiver Proxy in the case of an
   admission control failure, using sender notification via Indirect
   Notify, is illustrated in Figure 5.
NotifyD = Notify message containing a downstream notification

NotifyU = Notify message containing an upstream notification


    Figure 5: Reservation Failure With Sender Notification via Indirect
                                  Notify

   For local failures on the Receiver Proxy node, if a similar failure
   on an RSVP midpoint would cause the generation of a ResvErr (for
   example, admission control failure), the Receiver Proxy MUST generate
   a Notify towards the sender.  The Receiver Proxy MAY additionally
   generate a Notify upon local failures that would not ordinarily cause
   generation of a ResvErr message, such as described in Appendix B of
   [RFC2205].

   When the method of sender notification via Notify message is used, it
   is RECOMMENDED that the RSVP Receiver Proxy also issue a sender
   notification via a PathErr message.  This maximizes the chances that
   the notification will reach the sender in all situations (e.g., even
   if some RSVP routers do not support the Notify procedure, or if a
   Notify message gets dropped).  However, for controlled environments
   (e.g., where all RSVP routers are known to support Notify procedures)
   and where it is desirable to minimize the volume of signaling, the
   RSVP Receiver Proxy MAY rely exclusively on sender notification via
   Notify message and thus not issue sender notification via PathErr
   message.

   In environments where there are both RSVP-capable receivers and RSVP
   Receiver Proxies acting on behalf of non RSVP-capable receivers, a
   sender does not know whether a given reservation is established with
   an RSVP-capable receiver or with an RSVP Receiver Proxy.  Thus, a
   sender that supports the procedures defined in this section may
   include a Notify Request object in Path messages for a reservation
   that happens to be controlled by an RSVP-capable receiver.  This
   document does not define, nor expect, any change in existing receiver
   behavior.  As a result, in this case, the sender will not receive
   Notify messages conveying downstream notifications.  However, this is
   perfectly fine because the synchronization between the RSVP
   reservation state and the application requirement can be performed by
   the actual receiver in this case as per the regular end-to-end RSVP
   model, so that in this case, the sender need not care about
   downstream notifications.

   A sender that does not support the procedures defined in this section
   might include a Notify Request object in Path messages for a
   reservation simply because it is interested in getting upstream
   notifications faster.  If the reservation is controlled by an RSVP
   Receiver Proxy supporting the procedures defined in this section, the
   sender will also receive unexpected Notify messages containing
   downstream notifications.  It is expected that such a sender will
   simply naturally drop such downstream notifications as invalid.
   Because it is RECOMMENDED above that the RSVP Receiver Proxy also
   issues sender notification via a PathErr message even when sender
   notification is effected via a Notify message, the sender will still
   be notified of a reservation failure in accordance with the "sender
   notification via PathErr" method.  In summary, activating the
   OPTIONAL "sender notification via Notify" method on a Receiver Proxy,
   does not prevent a sender that does not support this method, to rely
   on the MANDATORY "sender notification via PathErr" method.  It would,
   however, allow a sender supporting the "sender notification via
   Notify" method to take advantage of this OPTIONAL method.

   With Direct Notification, the downstream notification generated by
   the RSVP router where the failure occurs is sent to the IP address
   contained in the Notification Request Object of the corresponding
   Resv message.  In the presence of multiple senders towards the same
   session, it cannot be generally assumed that a separate Resv message
   is used for each sender (in fact with WF and SE there is a single
   Resv message for all senders, and with FF the downstream router has
   the choice of generating separate Resv messages or a single one).
   Hence, in the presence of multiple senders, Direct Notification
   cannot guarantee notification of all affected senders.  Therefore,
   Direct Notification is better suited to single sender applications.

   With Indirect Notification, the RSVP Receiver Proxy can generate
   Notify messages with the same logic that is used to generate PathErr
   messages in the "Sender Notification via PathErr" method (in fact
   those are conveying the same error information, only the Notify is
   directly addressed to the sender while the PathErr travels hop-by-
   hop).  Therefore, operations of Indirect Notify method in the
   presence of multiple senders is similar to that of the PathErr method
   as discussed in Section 3.1: with FF (respectively, SE) a Notify MUST
   be sent to the sender (respectively, the set of affected senders).
   With WF, the RSVP Receiver Proxy SHOULD send a Notify to each sender,
   again resulting in a somewhat over-conservative behavior in the
   presence of multiple senders.
