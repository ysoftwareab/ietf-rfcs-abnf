example1 = MkInternetHeader 4 5 0 21 111 0 0 123 1
n = pad 32 options => padding = bitVector =>
No = Int

Data = String

NoxData = (No, Data)

packetsToSend = Port "Packets To Send" NoxData Both

nextSend = Place "NextSend" No (pure 1)

a = Port "A" NoxData Out

d = Port "D" No In

sender = MkModule "Sender"
     |> AddPort packetsToSend
     |> AddPlace nextSend
     |> AddPort a
     |> AddPort d
     |> AddTransition (MkTransition "Send Packet"
       [MkInput packetsToSend (No, Data) pure,
        MkInput nextSend No pure]
       [MkOutput (No, Data) packetsToSend pure,
        MkOutput No nextSend pure,
        MkOutput (No, Data) a pure]
       (\((n, d), n') => if n == n'
                            then pure ((n, d), n, (n, d))
                            else empty))
     |> AddTransition (MkTransition "Receive Ack"
       [MkInput nextSend No pure,
        MkInput d No pure]
       [MkOutput No nextSend pure]
       (\(k, n) => pure n))
packetsToSend = Place "Packets To Send" NoxData [(1, "COL"),
     (2, "OUR"), (3, "ED "), (4, "PET"), (5, "RI "), (6, "NET")]

dataReceived = Place "Data Received" Data (pure "")

a = Place "A" NoxData empty

b = Place "B" NoxData empty

    : Ellipse
c = Place "C" No empty

d = Place "D" No empty

top = MkInstance (MkModule "top module"
     |> AddPlace packetsToSend
     |> AddPlace dataReceived
     |> AddPlace a
     |> AddPlace b
     |> AddPlace c
     |> AddPlace d
     |> AddInstance (MkInstance sender [packetsToSend, a, d])
     |> AddInstance (MkInstance network [a, b, c, d])
     |> AddInstance (MkInstance receiver [b, dataReceived, c])
     ) []
names = MkPdu `{{MkInternetHeader}} [
     MkField "Version",
     MkField "IHL",
     MKField "Type of Service",
     MkField "Total Length",
     MkField "Identification",
     MkField "Flags",
     MkField "Fragment Offset",
     MkField "Time to Live",
     MkField "Protocol"]
test = Init
          |> SendPacket ((1, "COL"), 1)
          |> TransmitPacket ((1, "COL"), True)
          |> ReceivePacket ((1, "COL"), "", 1)
          |> TransmitAck 1
          |> ReceiveAck (1, 1)
sdp = MkSyntax [
     "session-description" `Eq` (Concat (TermName "version-field")
       (TermName "origin-field") [
         TermName "session-name-field",
         Optional (TermName "information-field"),
         Optional (TermName "uri-field"),
         Repeat Nothing Nothing (TermName "email-field"),
         Repeat Nothing Nothing (TermName "phone-field"),
         Optional (TermName "connection-field"),
         Repeat Nothing Nothing (TermName "bandwidth-field"),
         Repeat (Just 1) Nothing (TermName "time-description"),
         Optional (TermName "key-field"),
         Repeat Nothing Nothing (TermName "attribute-field"),
         Repeat Nothing Nothing (TermName "media-description")
         ]),
     ...
     ]

same = MkIso to from toFrom fromTo
     where
       to : Sdp -> SessionDescription

       from : SessionDescription -> Abnf

       toFrom : (x : SessionDescription ) -> to (from x) = x

       fromTo : (x : Sdp) -> from (to x) = x
rulename = "rulename" `Eq` (Concat (TermDec 97 []) (TermDec 98 [])
     [TermDec 99 []])
rulename = %d97 %d98 %d99

                                  Figure 2

internetHeader = `[
n = pad 32 options => padding = bitVector =>
n = pad 32 options => padding = bitVector =>
dscp = `[
version = [O, I, O, O] => (ihl : (Unsigned 4, Data)) ->
U = ()
B = Bool
INT = Int
INTINF = Integer
R = Double
S = String
P = (U, I)
INTlist = Type
INTlist = List INT
WholeNumber = INT

DayOff = Weekend
packetsToSend = Place "Packets To Send" NoxData [(1, "COL"),
     (2, "OUR"), (3, "ED "), (4, "PET"), (5, "RI "), (6, "NET")]
isSocratesMortal = \h => \f => f h
