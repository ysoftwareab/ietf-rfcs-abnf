representation-data-digest = digest-algorithm "="
                                   <encoded digest output>
Digest = 1#representation-data-digest

sha-512=WZDPaVn/7XgHaAy8pmojAkGWoRx2UFChF41A2svX+TaPm
                   AbwAgBWnrIiYllu7BNNyealdVLvRwE\nmTHWXvJwew==

Content-Digest = 1#content-digest
content-digest = digest-algorithm "="
                       <encoded digest output>

sha-512=WZDPaVn/7XgHaAy8pmojAkGWoRx2UFChF41A2svX+TaPm
                           AbwAgBWnrIiYllu7BNNyealdVLvRwE\nmTHWXvJwew==

Want-Digest = 1#want-digest-value
Want-Content-Digest = 1#want-digest-value
want-digest-value = digest-algorithm [ ";" "q" "=" qvalue]

digest-algorithm = token

adler32=03da0195 and adler32=3DA0195 are both valid checksums
sha-256=47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=

iwgAla3RXA==

       Figure 5: Partial response from a gzip-encoded representation

iwiAeyJoZWxsbyI6ICJ3b3JsZCJ9Aw==

            Figure 17: Response with Digest of encoded response
sha-512=pxo7aYzcGI88pnDnoSmAnaOEVys0MABhgvHY9+VI+ElE6
                   0jBCwnMPyA/s3NF3ZO5oIWA7lf8ukk+\n5KJzm3p5og==

iwiAeyJoZWxsbyI6ICJ3b3JsZCJ9Aw==

             Figure 20: Response with Digest of Encoded Content

log = logging.getLogger()

indent = 2 if isinstance(item, dict) and len(item) > 1 else None
json_bytes = json.dumps(item, indent=indent).encode()
checksum_bytes = algorithm(bytes_).digest()
content_encoded = encode_item(item, encoding)
item = {"hello": "world"}

