tmp = stod (line);
filename1 = argv[1];
filename2 = argv[2];
vec1 = read_file_sort(filename1);
vec2 = read_file_sort(filename2);

k = 2;
n_sample1 = vec1.size() - 1;
n_sample2 = vec2.size() - 1;

n_total = n_sample1 + n_sample2;

val_eq_z_samp1 = 1;

val_eq_z_samp2 = 1;

val_st_z_samp1 = 0;

val_st_z_samp2 = 0;

sum_adk_samp1 = 0;
sum_adk_samp2 = 0;
j = 1;

equal_z_both_samples = false;

next_z_sample2 = false;

stop_loop1 = n_sample1 + 1;

stop_loop2 = n_sample2 + 1;
stop_loop3 = n_total + 1;

z = vec1[val_eq_z_samp1];

val_eq_z_samp1 = 0;
val_st_z_samp1 = n_sample1;

z_aux = vec2[val_eq_z_samp2];

z = z_aux;
next_z_sample2 = true;
equal_z_both_samples = true;
z = z_aux;
next_z_sample2 = true;
val_eq_z_samp2 = 0;
val_st_z_samp2 = n_sample2;
hj = val_eq_z_samp1 - val_st_z_samp1
                 + val_eq_z_samp2 - val_st_z_samp2;

H_j = val_st_z_samp1 + val_st_z_samp2 + hj / 2;

F1j = val_st_z_samp1 + (double)
                     (val_eq_z_samp1 - val_st_z_samp1) / 2;

F2j = val_st_z_samp2 + (double)
                    (val_eq_z_samp2 - val_st_z_samp2) / 2;

val_st_z_samp1 = val_eq_z_samp1;

val_st_z_samp2 = val_eq_z_samp2;
hj = val_eq_z_samp2 - val_st_z_samp2;

H_j = val_st_z_samp1 + val_st_z_samp2 + hj / 2;

F1j = val_st_z_samp1;

F2j = val_st_z_samp2 + (double)
                        (val_eq_z_samp2 - val_st_z_samp2) / 2;

val_st_z_samp2 = val_eq_z_samp2;

val_eq_z_samp1 = stop_loop1;
hj = val_eq_z_samp1 - val_st_z_samp1;

H_j = val_st_z_samp1 + val_st_z_samp2 + hj / 2;

F1j = val_st_z_samp1 + (double)
                       (val_eq_z_samp1 - val_st_z_samp1) / 2;

F2j = val_st_z_samp2;

val_st_z_samp1 = val_eq_z_samp1;
val_eq_z_samp2 = stop_loop2;
denom_1_aux = n_total * F1j - n_sample1 * H_j;
denom_2_aux = n_total * F2j - n_sample2 * H_j;

sum_adk_samp1 = sum_adk_samp1 + hj
                           * (denom_1_aux * denom_1_aux) /
                           (H_j * (n_total - H_j)
                           - n_total * hj / 4);
sum_adk_samp2 = sum_adk_samp2 + hj
                           * (denom_2_aux * denom_2_aux) /
                           (H_j * (n_total - H_j)
                           - n_total * hj / 4);

next_z_sample2 = false;
equal_z_both_samples = false;

adk_result = (double) (n_total - 1) / (n_total
              * n_total * (k - 1))
               * (sum_adk_samp1 / n_sample1
               + sum_adk_samp2 / n_sample2);


