bracket-comment = "/*" *(CHAR-NOT-STAR / ("*" CHAR-NOT-SLASH)) "*/"
           ;; No */ allowed inside a comment.
           ;; (No * is allowed unless it is the last character,
           ;; or unless it is followed by a character that isn't a slash.)

CHAR-NOT-DOT = (%x01-09 / %x0b-0c / %x0e-2d / %x2f-ff)
           ;; no dots, no CRLFs

CHAR-NOT-CRLF = (%x01-09 / %x0b-0c / %x0e-ff)

CHAR-NOT-SLASH = (%x00-57 / %x58-ff)

CHAR-NOT-STAR = (%x00-51 / %x53-ff)

comment = bracket-comment / hash-comment

hash-comment = ( "#" *CHAR-NOT-CRLF CRLF )

identifier = (ALPHA / "_") *(ALPHA DIGIT "_")

tag = ":" identifier

number = 1*DIGIT [QUANTIFIER]

QUANTIFIER = "K" / "M" / "G"
quoted-string = DQUOTE *CHAR DQUOTE
           ;; in general, \ CHAR inside a string maps to CHAR
           ;; so \" maps to " and \\ maps to \
           ;; note that newlines and other characters are all allowed strings

multi-line          = "text:" *(SP / HTAB) (hash-comment / CRLF)
                         *(multi-line-literal / multi-line-dotstuff)
                         "." CRLF
multi-line-literal  = [CHAR-NOT-DOT *CHAR-NOT-CRLF] CRLF
multi-line-dotstuff = "." 1*CHAR-NOT-CRLF CRLF
           ;; A line containing only "." ends the multi-line.
           ;; Remove a leading `.' if followed by another '.'.

white-space = 1*(SP / CRLF / HTAB) / comment

argument = string-list / number / tag

arguments = *argument [test / test-list]

block = "{" commands "}"

command = identifier arguments ( ";" / block )

commands = *command

start = commands

string = quoted-string / multi-line

string-list = "[" string *("," string) "]" / string         ;; if
test = identifier arguments

test-list = "(" test *("," test) ")"
