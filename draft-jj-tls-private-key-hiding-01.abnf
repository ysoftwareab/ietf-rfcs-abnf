N = p * q

e = encryption key

d = private key which satisfies e*d = 1 mod (p-1)(q-1)

d = d_1 * d_2 mod (p-1)*(q-1)

s_1 = H(signed_params)^d_1 mod N, where d_1 is PPKU. Finally UTE
g = h^((p-1)/q) mod p, where h is any integer with 1 < h < (p-1) such
y = g^x mod p.








x = x_1 + x_2 mod q, where x_1 is a random or pseudorandom number
s_1 = (k^(-1)*(H(signed_params) + x_1*r)) mod q

r = (g^k mod p) mod q

dh_X = x_1 * x_2 mod p-1, where x_1 is a random or pseudorandom
Q = d X G: Q is the public key, where X is the elliptic curve point
d = d_1 + d_2 mod n, where d_1 is a random or pseudorandom number in
r = x_1 mod n, where (x_1, y_1) = k X G








s_1 = k^(-1)*(e + r*d_1) mod n, where e= H(ClientHello.random +
d = d_1 * d_2 mod n, where d_1 is a random or pseudorandom number in
