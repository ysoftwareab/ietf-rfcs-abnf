p = p + alpha*(est_del-target_del) + beta*(est_del-est_del_old);

est_del_old = est_del. 


p = p;
est_del = qlen/depart_rate; 

burst_allowance = max_burst;

burst_allowance = burst_allowance - Tupdate;

p = p*0.98;    //1- 1/64 is sufficient

rate_measurement = TRUE; 

start = now;

dq_count = dq_count + deque_pkt_size;

depart_rate = dq_count/(now-start); 

dq_count=0;

start = now

burst_allowance = MAX_BURST;

burst_allowance = burst_allowance - Tupdate;

        	
burst_allowance = MAX_BURST;
qdelay = PIE->current_qdelay_;

p = alpha*(qdelay - QDELAY_REF) + \
           beta*(qdelay-PIE->qdelay_old_);
 




p = p/128
p = p/16;
p = p/2;
p = p;
qdelay = queue_.byte_length() * avg_dq_time_/DQ_THRESHOLD;

p = alpha*(qdelay - QDELAY_REF) + \
           beta*(qdelay-PIE->qdelay_old_);

p = p/128
p = p/16;
p = p/2;
p = p;
p = 0.02;
dq_time = now - PIE->measurement_start_;
weight = DQ_THRESHOLD/2^16
