append          = "APPEND" SP mailbox 1*append-message
                       ;; only a single append-message may appear
                       ;; if MULTIAPPEND [MULTIAPPEND] capability
                       ;; is not present
     
append-message  = append-opts SP append-data
     
append-ext      = <for extension only>
                       ;; This rule exists solely to be augmented by
                       ;; extensions via incremental alternative
                       ;; ("=/") rules.  It is strongly recommended
                       ;; that such extensions match a subset of the
                       ;; tagged-ext rule syntax
     
append-data     = literal / literal8
                       ;; IMAP extensions extending append-data
                       ;; should use the tagged-ext syntax,
                       ;; i.e. a mandatory label followed
                       ;; by parameters.
     
append-opts     = [SP flag-list] [SP date-time] *(SP append-ext)
     
     
create          = "CREATE" SP mailbox
                       [create-params]
                       ;; Use of INBOX gives a NO error
     
create-params   = SP "(" create-param *( SP create-param) ")"
     
create-param-name = tagged-ext-label
     
create-param      = create-param-name SP create-param-value
     
create-param-value= <for extension only>
                       ;; This rule exists solely to be augmented by
                       ;; extensions via incremental alternative
                       ;; ("=/") rules.  It is strongly recommended
                       ;; that such extensions match a subset of the
                       ;; tagged-ext-val rule syntax
     
esearch-response  = "ESEARCH" [search-correlator] [SP "UID"]
                          *(SP search-return-data)
                        ;; Note that SEARCH and ESEARCH responses
                        ;; SHOULD be mutually exclusive,
                        ;; i.e. only one of them should be
                        ;; returned as a result of a command.
     
     
examine         = "EXAMINE" SP mailbox [select-params]
                       ;; modifies the original IMAP EXAMINE command
                       ;; to accept optional parameters
     
fetch           = "FETCH" SP sequence-set SP ("ALL" / "FULL" /
                       "FAST" / fetch-att /
                       "(" fetch-att *(SP fetch-att) ")")
                       [SP fetch-modifiers]
                       ;; modifies the original IMAP4 FETCH command to
                       ;; accept optional modifiers
     
fetch-modifiers = "(" fetch-modifier *(SP fetch-modifier) ")"
     
fetch-modifier  = fetch-modifier-name [ SP fetch-modif-params ]
                       ;; Note that the original syntax defined
                       ;; in CONDSTORE was extended to allow
                       ;; for "()"
     
fetch-modif-params  = <for extension only>
                       ;; This rule exists solely to be augmented by
                       ;; extensions via incremental alternative
                       ;; ("=/") rules.  It is strongly recommended
                       ;; that such extensions match a subset of the
                       ;; tagged-ext-val rule syntax
     
fetch-modifier-name = tagged-ext-label
     
literal8        = "~{" number ["+"] "}" CRLF *OCTET
                        ;; A string that might contain NULs.
                        ;; <number> represents the number of OCTETs
                        ;; in the response string.
                        ;; The "+" is only allowed when both LITERAL+
                        ;; and BINARY are present.
     
     
mailbox-data      =/ Namespace-Response /
                          esearch-response
     
Namespace         = nil / "(" 1*Namespace-Descr ")"
     
Namespace-Command = "NAMESPACE"
     
Namespace-Descr   = "(" string SP
                            (DQUOTE QUOTED-CHAR DQUOTE / nil)
                             *(Namespace-Response-Extension) ")"
     
Namespace-Response-Extension = SP string SP
                       "(" string *(SP string) ")"
     
Namespace-Response = "NAMESPACE" SP Namespace
                          SP Namespace SP Namespace
           ;; The first Namespace is the Personal Namespace(s)
           ;; The second Namespace is the Other Users' Namespace(s)
           ;; The third Namespace is the Shared Namespace(s)
     
rename          = "RENAME" SP mailbox SP mailbox
                       [rename-params]
                       ;; Use of INBOX as a destination gives
                       ;; a NO error
     
rename-params     = SP "(" rename-param *( SP rename-param) ")"
     
rename-param      = rename-param-name SP rename-param-value
     
rename-param-name = tagged-ext-label
     
rename-param-value= <for extension only>
                       ;; This rule exists solely to be augmented by
                       ;; extensions via incremental alternative
                       ;; ("=/") rules.  It is strongly recommended
                       ;; that such extensions match a subset of the
                       ;; tagged-ext-val rule syntax
     
response-data   = "*" SP response-payload CRLF
     
response-payload= resp-cond-state / resp-cond-bye /
                       mailbox-data / message-data / capability-data
     
search          = "SEARCH" [search-return-opts]
                       search-program
     
     
search-correlator  = SP "(" "TAG" SP tag-string ")"
     
search-program     = [SP "CHARSET" SP astring] 1*(SP search-key)
                          ;; CHARSET argument to SEARCH MUST be
                          ;; registered with IANA
     
search-return-data = search-modifier-name SP search-return-value
                          ;; Note that not every SEARCH return option
                          ;; is required to have the corresponding
                          ;; ESEARCH return data
     
search-return-opts = "RETURN" SP "(" [search-return-opt
                          *(SP search-return-opt)] ")"
     
search-return-opt = search-modifier-name [SP search-mod-params]
     
search-return-value= tagged-ext-val
                          ;; data for the returned search option.
                          ;; A single "nz-number"/"number" value
                          ;; can be returned as an atom (i.e. without
                          ;; quoting). A sequence-set can be returned
                          ;; as an atom as well.
     
search-modifier-name = tagged-ext-label
     
search-mod-params = <for extension only>
                       ;; This rule exists solely to be augmented by
                       ;; extensions via incremental alternative
                       ;; ("=/") rules.  It is strongly recommended
                       ;; that such extensions match a subset of the
                       ;; tagged-ext-val rule syntax
     
select          = "SELECT" SP mailbox [select-params]
                       ;; modifies the original IMAP SELECT command to
                       ;; accept optional parameters
     
select-params   = SP "(" select-param *(SP select-param) ")"
     
select-param    = select-param-name SP select-param-value
                       ;; parameters to SELECT may contain one or
                       ;; more atoms or strings - multiple items
                       ;; are always parenthesised
     
select-param-name= tagged-ext-label
     
select-param-value= <for extension only>
                       ;; This rule exists solely to be augmented by
                       ;; extensions via incremental alternative
                       ;; ("=/") rules.  It is strongly recommended
                       ;; that such extensions match a subset of the
                       ;; tagged-ext-val rule syntax
     
status-att-list = status-att-val *(SP status-att-val)
                       ;; Redefines status-att-list from RFC 3501.
                       ;; status-att-val is defined in RFC 3501 errata
     
status-att-val  = ("MESSAGES" SP number) /
                       ("RECENT" SP number) /
                       ("UIDNEXT" SP nz-number) /
                       ("UIDVALIDITY" SP nz-number) /
                       ("UNSEEN" SP number)
                       ;; Extensions to the STATUS responses
                       ;; should extend this production.
                       ;; Extensions should use the generic
                       ;; syntax defined by tagged-ext.
     
store           = "STORE" SP sequence-set store-modifiers
                       SP store-att-flags
                       ;; extend [IMAP4] STORE command syntax
                       ;; to allow for optional store-modifiers
     
store-modifiers = [ SP "(" store-modifier *(SP store-modifier)
                         ")" ]
     
store-modifier  = store-modifier-name [SP store-modif-params]
     
store-modif-params = <for extension only>
                       ;; This rule exists solely to be augmented by
                       ;; extensions via incremental alternative
                       ;; ("=/") rules.  It is strongly recommended
                       ;; that such extensions match a subset of the
                       ;; tagged-ext-val rule syntax
     
store-modifier-name = tagged-ext-label
     
tag-string         = string
                          ;; tag of the command that caused
                          ;; the ESEARCH response, sent as
                          ;; a string.
     
tagged-ext          = tagged-ext-label SP tagged-ext-val
                            ;; recommended overarching syntax for
                            ;; extensions
     
tagged-ext-label    = atom
                           ;; <<or should this be astring?>>
     
tagged-ext-comp     = astring /
                           tagged-ext-comp *(SP tagged-ext-comp) /
                           "(" tagged-ext-comp ")"
                            ;; extensions that follow this general
                            ;; syntax should use nstring instead of
                            ;; astring when appropriate in the context
                            ;; of the extension
     
tagged-ext-val      = astring / "(" [tagged-ext-comp] ")"
     

