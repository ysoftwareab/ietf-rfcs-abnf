C509Certificate = [
       TBSCertificate,
       issuerSignatureValue : any,
TBSCertificate = (
       c509CertificateType: int,
       certificateSerialNumber: CertificateSerialNumber,
       issuer: Name,
       validityNotBefore: Time,
       validityNotAfter: Time,
       subject: Name,
       subjectPublicKeyAlgorithm: AlgorithmIdentifier,
       subjectPublicKey: any,
       extensions: Extensions,
       issuerSignatureAlgorithm: AlgorithmIdentifier,
CertificateSerialNumber = ~biguint

Name = [ * RelativeDistinguishedName ] / text / bytes

RelativeDistinguishedName = Attribute / [ 2* Attribute ]

Attribute = ( attributeType: int, attributeValue: text ) //
                ( attributeType: ~oid, attributeValue: bytes )

Time = ~time / null

AlgorithmIdentifier = int / ~oid /
                        [ algorithm: ~oid, parameters: bytes ]

Extensions = [ * Extension ] / int

Extension = ( extensionID: int, extensionValue: any ) //
                ( extensionID: ~oid, ? critical: true,
                  extensionValue: bytes )

                    Figure 1: CDDL for C509Certificate.
KeyIdentifier = bytes
SubjectKeyIdentifier = KeyIdentifier

KeyUsage = int

PolicyMappings = [
        + (issuerDomainPolicy: ~oid, subjectDomainPolicy: ~oid)
extensionValue = -2, if 'cA' = true and 'pathLenConstraint' is not
BasicConstraints = int

PolicyConstraints = [
        requireExplicitPolicy: uint / null,
        inhibitPolicyMapping: uint / null,
KeyPurposeId = int / ~oid
ExtKeyUsageSyntax = [ 2* KeyPurposeId ] / KeyPurposeId

InhibitAnyPolicy = uint

GeneralName = ( GeneralNameType : int, GeneralNameValue : any )
GeneralNames = [ + GeneralName ]
SubjectAltName = GeneralNames / text

IssuerAltName  = GeneralNames / text

DistributionPointName = [ 2* text ] / text
CRLDistributionPoints = [ + DistributionPointName ]

FreshestCRL = CRLDistributionPoints

AccessDescription = ( accessMethod: int / ~oid , uri: text )
AuthorityInfoAccessSyntax = [ + AccessDescription ]
SubjectInfoAccessSyntax = AuthorityInfoAccessSyntax

KeyIdentifierArray = [
        keyIdentifier: KeyIdentifier,
        authorityCertIssuer: GeneralNames,
        authorityCertSerialNumber: CertificateSerialNumber
AuthorityKeyIdentifier = KeyIdentifierArray / KeyIdentifier

PolicyIdentifier = int / ~oid
PolicyQualifierInfo = (
        policyQualifierId: int / ~oid,
        qualifier: text,
CertificatePolicies = [
        + ( PolicyIdentifier, ? [ + PolicyQualifierInfo ] )
GeneralSubtree = [ GeneralName, minimum: uint, ? maximum: uint ]
NameConstraints = [
        permittedSubtrees: GeneralSubtree,
        excludedSubtrees: GeneralSubtree,
Attributes = ( attributeType: int, attributeValue: [+text] ) //
                   ( attributeType: ~oid, attributeValue: [+bytes] )
SubjectDirectoryAttributes = Attributes

AsIdsOrRanges = uint / [uint, uint]
ASIdentifiers = [ + AsIdsOrRanges ] / null

Address = bytes / uint,
AddressPrefix = (Address, unusedBits: uint)
AddressRange =  [Address, Address]
IPAddressOrRange = AddressPrefix / AddressRange
IPAddressChoice = [ + IPAddressOrRange ] / null
IPAddrBlocks = [ AFI: uint, IPAddressChoice ]

SignedCerticateTimestamp = (
        logID: bytes,
        timestamp: int,
        sigAlg: AlgorithmIdentifier,
        sigValue: any,
SignedCertificateTimestamps = [ + SignedCerticateTimestamp ]

c509CertificateSigningRequestType = 0 requests a c509CertificateType
c509CertificateType = 1 . subjectProofOfPossessionAlgorithm can be a
C509CertificateSigningRequest = [
       TBSCertificateSigningRequest,
       subjectProofOfPossessionValue: any,
TBSCertificateSigningRequest = (
       c509CertificateSigningRequestType: int,
       subject: Name,
       subjectPublicKeyAlgorithm: AlgorithmIdentifier,
       subjectPublicKey: any,
       extensionsRequest : Extensions,
       subjectProofOfPossessionAlgorithm: AlgorithmIdentifier,
C509CertificateRevocationList = [
       TBSCertificateRevocationList,
       issuerSignatureValue : any,
TBSCertificateSigningRequest = (
       C509CertificateRevocationListType: int,
       issuer: Name,
       thisUpdate: Time,
       nextUpdate: Time,
       revokedCertificates: RevokedCertificates,
       crlExtensions: Extensions,
       issuerSignatureAlgorithm: AlgorithmIdentifier,
RevokedCertificates = [
        userCertificate: CertificateSerialNumber,
        revocationDate: Time,
        crlEntryExtensions: Extensions,
COSE_C509 = C509Certificate / [ 2* C509Certificate ]
