

Network Working Group                                        M. Nakhjiri
Internet-Draft                                                Huawei USA
Expires: December 20, 2007                                       Y. Ohba
                                                                 Toshiba
                                                           June 18, 2007


 Derivation and management of EAP based key hierarchy for handover and
                           re-authentication
                 draft-nakhjiri-hokey-hierarchy-mgm-00

Status of this Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on December 20, 2007.

Copyright Notice

   Copyright (C) The IETF Trust (2007).

Abstract

   This document describes a generic delivery framework for usage and/
   or domain specific keys, derived as part of an EAP EMSK hierarchy,
   from an EAP server to an intended third party key holder.  The
   framework description includes different scenarios for key delivery,
   depending on the type of keys being delivered.  It also includes,
   specification of derivation of keys required for security protection



Nakhjiri & Ohba         Expires December 20, 2007               [Page 1]

Internet-Draft               Hokey hierarchy                   June 2007


   of key requests and delivery signaling.  The key delivery framework
   also includes proper specification and conveyance of the context and
   scope of the keys being delivered.  All keys generated directly from
   EMSK as part of the EMSK key hierarchy are derived following the
   guidelines described in [I-D.ietf-hokey-emsk-hierarchy].  Derivation
   of the EMSK based handover root key (HRK) and domain specific
   handover root keys (DSHRK) for use in the problem of handover keying
   and re-authentication is also described.


Table of Contents

   1.  Introduction and Problem statement . . . . . . . . . . . . . .  3
   2.  Terminology  . . . . . . . . . . . . . . . . . . . . . . . . .  4
   3.  EMSK key delivery architecture . . . . . . . . . . . . . . . .  6
   4.  Key derivation . . . . . . . . . . . . . . . . . . . . . . . .  8
     4.1.  keys for protecting the key delivery exchanges . . . . . .  9
     4.2.  Root Key derivation scenarios for multi-domain
           operation  . . . . . . . . . . . . . . . . . . . . . . . .  9
       4.2.1.  Domain independent Handover root key . . . . . . . . .  9
       4.2.2.  Domain Specific Root key . . . . . . . . . . . . . . . 10
       4.2.3.  Domain Specific Handover Root key  . . . . . . . . . . 11
   5.  3 party Key distribution exchange (KDE)  . . . . . . . . . . . 11
   6.  Security report Card . . . . . . . . . . . . . . . . . . . . . 15
   7.  Security Considerations  . . . . . . . . . . . . . . . . . . . 15
   8.  IANA consideration . . . . . . . . . . . . . . . . . . . . . . 15
   9.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 15
   10. References . . . . . . . . . . . . . . . . . . . . . . . . . . 16
     10.1. Normative References . . . . . . . . . . . . . . . . . . . 16
     10.2. Informative references . . . . . . . . . . . . . . . . . . 17
   Appendix A.  Appendix A: Roaming hieararchy based on HRK . . . . . 17
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 18
   Intellectual Property and Copyright Statements . . . . . . . . . . 20


















Nakhjiri & Ohba         Expires December 20, 2007               [Page 2]

Internet-Draft               Hokey hierarchy                   June 2007


1.  Introduction and Problem statement

   Extensible Authentication Protocol (EAP) framework ([RFC3748] )
   provides a flexible access control authentication framework that
   allows incorporation of almost any desired authentication method.
   The ability of many EAP authentication methods in generating keying
   material such as EAP master session key (MSK) and EAP extended master
   session key (EMSK) has led to the idea of using key material resulted
   from EAP authentication to bootstrap further keys for a variety of
   security mechanisms ([I-D.ietf-eap-keying]).  For instance, the use
   of MSK for bootstrapping the security associations for the wireless
   link between the peer and the network is well understood and
   described.  However, current use of MSK in a AAA-based key management
   framework leads to a number of issues for deployment scenarios, where
   mobility performance and agility is of paramount value.  These issues
   are described in several problem statements
   ([I-D.nakhjiri-aaa-hokey-ps], [I-D.ohba-hokey-3party-keydist-ps] and
   [I-D.ietf-hokey-reauth-ps]).

   On the other hand, the wide deployment of EAP for network access
   control and initial network setup, has led to recent efforts on using
   EAP EMSK for bootstrapping of security associations for other network
   procedures, such as IP mobility provisioning signaling.  However, use
   of EAP EMSK is not as well harmonized and understood.  A general
   guideline document ([I-D.ietf-hokey-emsk-hierarchy]) will describe
   how one can use EMSK to generate the so called Usage specific root
   keys (USRK) for a usage, a domain specific root keys (DSRK) for an
   administrative domain, or a domain specific and usage specific root
   key (DSUSRK) that is specific for a usage within a domain.  Among
   other things, the guidelines describe how the knowledge related to a
   specific usage or an administrative domain can be used as
   standardized format input data into a cryptographic function that
   generate USRKs, DSRK and DSUSRKs.  The guidelines also assure that
   different child keys generated from the EMSK are cryptographically
   separate from each other, so that compromise any EMSK child key does
   not lead to compromise of the parent EMSK or the sibling child keys.

   Since EAP authentication is a 2 party protocol, additional measures
   should be taken to properly utilize the EAP generated keys in a 3
   party key management arrangement.  While USRK, DSRK and DSUSRK are
   typically stored and utilized at third party key holders (e.g.  AAA
   servers/ entities) logically or physically separate from the EAP
   server or peer, the security restrictions ([I-D.ietf-eap-keying])
   forbid against transport of EMSK outside the EAP server/ layer.  This
   will imply that the input data required for creation of the USRK,
   DSRK or DSUSRK needs to be delivered to the EAP server, performing
   the derivation function, followed by a secure delivery of the
   resulting keys to these third party key holders.  It is the purpose



Nakhjiri & Ohba         Expires December 20, 2007               [Page 3]

Internet-Draft               Hokey hierarchy                   June 2007


   of this document to show how such input data can be delivered to the
   EAP server, and how the generated key material is delivered to the
   third party key holder in a secure manner, while considering the
   security requirements and principles defined in
   [I-D.housley-aaa-key-mgmt] and [I-D.ohba-hokey-3party-keydist-ps]
   into account.  Thus, the specification includes derivation of key
   material required for secure key delivery and channel binding
   procedures to ensure that not only the keys are not exposed to
   unintended parties during delivery, but also the scope and usage
   context for the key is properly understood and agreed upon by the
   initial parties.

   TBD: requirement on verification of key sources still exists?

   To provide a complete solution for the problem of handover keying and
   re-authentication, the key hierarchy specified in this document
   includes specification of use of EMSK in derivation of top level
   handover root keys (HRK), domain specific root keys (DSRK) and the
   DSUSRK specifically for handover, called domain specific handover
   root key (DSHRK), according to [I-D.ietf-hokey-emsk-hierarchy] and
   the delivery of these keys to the intended third parties.  Further
   usage of these keys at these third parties to solve re-authentication
   and keying problems within a domain is outside scope of this document

   Madjid note: I am taking the below HRK/DSRK part of key hierarchy out
   per Charles request.  However, since we are discussing DSRK or DSHRKs
   here, the scenario discussing delivery of DSRK and DSUSRK has a use
   case which is roaming between the domains.  The specifics of the
   signaling are of course covered in EAP-ERX.

   The purpose of this document is not to provide exact syntax for the
   signaling, only the general semantics for the parameters involved are
   defined.  The exact syntax for these parameters when carried by
   specific protocols, such as AAA protocols or EAP protocols are out of
   scope of this document.


2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   HRK:  Handover root key is a key that will be used as the root key to
      solve the handover keying and re-authentication problem.  The HRK
      is considered a usage specific root key (USRK) (defined in
      [I-D.ietf-hokey-emsk-hierarchy]) and is derived directly from
      EMSK.  HRK is a domain independent specific root key for re-



Nakhjiri & Ohba         Expires December 20, 2007               [Page 4]

Internet-Draft               Hokey hierarchy                   June 2007


      authentication and handover, meaning that it can be used to create
      domain-specific HRK for various domains (DSHRK).  HRK is generated
      using a Pseudo random function (PRF) that complies with
      requirements and guidance in [I-D.ietf-hokey-emsk-hierarchy].  For
      simplicity we refer to this PRF as USRK_PRF.

   IK and CK:  Integrity and cipher keys, used to protect the key
      delivery signaling between the peer and the EAP server (Madjid:
      used to be HOKEY server).

   USRK holder (USR-KH):  For the purpose of the key delivery mechanism
      specified in this document, this is an entity acting as a
      recipient of the usage specific root key (USRK) derived from the
      EMSK and delivered from the EAP server.  Also, for the purpose of
      the key delivery mechanism, the USR-KH has a interface with the
      EAP server and is responsible for delivering the usage specific
      input data required for derivation of USRK from EMSK to the EAP
      server.  Thus USR-KH is responsible for receiving, holding and
      protection of the USRK derived directly from EMSK.  The USR-KH is
      possibly responsible for derivation and distribution of any child
      keys derived from USRK for that specific usage.

   DSRK holder (DSR-KH):  For the purpose of the key delivery mechanism
      specified in this document, this is an entity acting as a
      recipient of the domain specific root key (DSRK) derived from the
      EMSK and delivered from the EAP server.  Also, for the purpose of
      the key delivery mechanism, the DSR-KH has a interface with the
      EAP server and is responsible for delivering the domain specific
      input data required for derivation of DSRK from EMSK to the EAP
      server.Thus DSR-KH is responsible for receiving, holding and
      protection of the DSRK derived directly from EMSK.  The DSR-KH is
      possibly responsible for derivation and distribution of any child
      keys derived from DSRK for that specific domain.  The most likely
      realization of DSR-KH is a AAA server in the corresponding domain,
      responsible for setting the policies for usage of DSRK within the
      domain.

   DSUSRK holder (DSUSR-KH):  For the purpose of the key delivery
      mechanism specified in this document, this is an entity acting as
      a recipient of the domain specific and usage specific root key
      (DSUSRK) derived from the EMSK and delivered from the EAP server.
      Also, for the purpose of the key delivery mechanism, the DSUSR-KH
      has a interface with the EAP server and is responsible for
      delivering the domain and usage specific input data required for
      derivation of USRK from EMSK to the EAP server.Thus DSUSR-KH is
      responsible for receiving, holding and protection of the DSUSRK
      derived directly from EMSK.  The DSUSR-KH is possibly responsible
      for derivation and distribution of any child keys derived from



Nakhjiri & Ohba         Expires December 20, 2007               [Page 5]

Internet-Draft               Hokey hierarchy                   June 2007


      DSUSRK for that specific domain and usage.  The most likely
      realization of DSUSR-KH is a AAA server in the corresponding
      domain, responsible for the service offered within the domain for
      the specific usage at hand.

   HOKEY server:  This is essentially a usage specific AAA server, that
      deals with handover and re-authentication as specific usage.  For
      the purpose of this document, a HOKEY server interacts directly
      with EAP server to receive either an HRK or a DSHRK from EAP
      server.  In the former scenario, the HOKEY server is domain
      independent, acting as a USR-KH for HOKEY usage (holding HRK).  In
      the latter scenario, the server is a domain HOKEY server, acting
      as DSUSR-KH (holding a domain specific HRK, DSHRK).  Specification
      of delivery of DSHRK to a HOKEY server that receives the DSHRK
      from a DSR-KH is out of scope of this document.  A domain
      independent HOKEY server can hold HRK and can act authorization
      server for service to all domains, delivering domain specific HRK
      (DSHRK) to each domain as needed.  A domain dependent HOKEY server
      is only responsible for receiving DSHRK and authorization and
      delivery of handover keying and re-authentication services within
      that domain.


3.  EMSK key delivery architecture

   Upon successful completion of the EAP authentication method, the peer
   and the EAP server generate the EAP EMSK as defined by the EAP method
   that was executed.  The EMSK hierarchy specification
   ([I-D.ietf-hokey-emsk-hierarchy]) specifies derivation of three
   categories of child keys:

   USRK:  Usage Specific Root key.  A root key generated from EMSK and
      is used for a specific usage that is authorized for a peer,
      following an EAP authentication.  USRK is domain independent.

   DSRK:  Domain Specific Root key.  A root key generated from EMSK and
      is used within a specific domain that peer is authorized to
      receive services from or roam into, following an EAP
      authentication.  DSRK is usage independent.

   DSUSRK:  Domain Specific Usage Specific Root key.  A root key
      generated from EMSK and is used for a specific usage within a
      specific domain that peer is authorized to receive services from,
      following an EAP authentication.  DSUSRK is both usage and domain
      dependent.






Nakhjiri & Ohba         Expires December 20, 2007               [Page 6]

Internet-Draft               Hokey hierarchy                   June 2007





                       EMSK
          ________________|___________________________________________
          |        |            |      |        |       |     |       |
          DSRK1 .. DSRKn      USRK1..USRKm  DSUSRK1 DSUSRKj  CK     IK


             Figure 1: Different categories of EMSK Child keys

   However, To ensure the security of EMSK, the EAP keying framework
   ([I-D.ietf-eap-keying]) forbids against transport of EMSK outside the
   EAP server/ layer.  On the other hand, the EAP server is expected to
   only perform EAP authentication, without being involved in any
   service authorization decisions.  Provisioning of services for a
   specific usage or within a domain typically falls outside of the
   responsibilities of an EAP server and is handled by AAA server.  To
   keep the generality of the specification of the key delivery
   mechanism, we introduce the notion of key holders, namely, USRK
   holder (USR-KH), DSRK holder (DSR-KH) and DSUSRK holder (DSUSR-KH)
   and assume that key delivery mechanism delivers each of these keys to
   the corresponding key holder.  To protect the key delivery
   mechanisms, a pair of keys: Cipher key (CK) and Integrity Key (IK)
   can also be generated from EMSK as domain independent USRKs.

   In a general case, we can assume that the EAP server at the time of
   authentication is unaware of any future service authorization
   requests from the peer.  Thus, the EAP server caches EMSK and creates
   each of the EMSK child keys based on request, using its cache of
   EMSK.  Thus, the key holder needs to provide the EAP server with
   proper input data before receiving the requested key.  For instance a
   visited domain HOKEY server, needs to authorize the peer for handover
   keying and re-authentication service, and then request a handover
   root key for its domain (visited domain HRK, VHRK) from the EAP
   server.  A home domain may also operate a home HOKEY server that uses
   a home handover root key (HHRK) to serve the peer's re-authentication
   and handover keying needs within home domain.  The following figure
   shows the assumed logical architecture:












Nakhjiri & Ohba         Expires December 20, 2007               [Page 7]

Internet-Draft               Hokey hierarchy                   June 2007


               +-+-+-+-+-+-+                                +-+-+-+-+-+-+
               | EAP server|                                | EAP server|
               +-+-+-+-+-+-+                                +-+-+-+-+-+-+
         USRK1  /           \ USRK2                        /  DSUSRK1   \ DSUSRK2
         (HRK) /             \  (XYZ)                    / (HHRK)      \ (VHRK)
      +-+-+-+-+-+-+-+-+   +-+-+-+-+-+-+            +-+-+-+-+-+-+-+        +-+-+-+-+-+-+-+-+
      |   USR-KH1     |   |   USR-KH2 |            | Domain 1    |        | Domain 2      |
      | HOKEY server  |   | XYZ server|            | DSUSR-KH    |        | DSUSR-KH      |
      +-+-+-+-+-+-+-+-+   +-+-+-+-+-+-+            |(home domain |        |(visited domain|
                                                   |HOKEY server)|        |HOKEY server)  |
                                                   +-+-+-+-+-+-+-+        +-+-+-+-+-+-+-+-+

                 +-+-+-+-+-+-+                              +-+-+-+-+-+-+
                 |   peer    |                              |   peer    |
                 +-+-+-+-+-+-+                              +-+-+-+-+-+-+
                          (A)                                      (B)

                               +-+-+-+-+-+-+-+-+-+
                               | EAP server      |
                               +-+-+-+-+-+-+-+-+-+
                               /  DSRK1            \ DSRK2
                             /                       \
                     +-+-+-+-+-+-+         +-+-+-+-+-+-+-+
                     |   DSR-KH1 |         | DSR-KH2     |
                     +-+-+-+-+-+-+         +-+-+-+-+-+-+-+

                                   +-+-+-+-+-+-+
                                  |   peer    |
                                   +-+-+-+-+-+-+
                                   (C)



        Figure 2: Key delivery for various EMSK child key cateories


4.  Key derivation

   Assuming a prior successful EAP authentication, whose state is still
   valid, the EMSK can be used for deriving keys belonging to each of
   the aforementioned categories,The guidelines for choosing the pseudo
   random function (PRF) that is used for generation of USRKs, DSRKs,
   DSUSRKs, from EMSK is described in ([I-D.ietf-hokey-emsk-hierarchy]).
   As mentioned in that document, this PRF can be negotiated, pre-
   configured based on network policy.  We refer to this PRF as USRK-
   PRF, DSRK-PRF or DSUSRK-PRF (depending on the case) in the rest of
   this document and assume that it can generate Z bits of output.




Nakhjiri & Ohba         Expires December 20, 2007               [Page 8]

Internet-Draft               Hokey hierarchy                   June 2007


4.1.  keys for protecting the key delivery exchanges

   In order to be able to perform the key delivery exchange, the parties
   involved in the exchange will need to be able to have access (or
   derive??) to the CK and IK to protect the key delivery signaling.

   IK | IK_name_key=USRK-PRF (HRK, "Integrity Key" | NULL | peer_ID |
   Key_length )

   IK_name=First(128, HMAC_SHA256(IK_name_key "Integrity Key"| NULL|
   peer_ID)

   CK | CK_name_key=USRK-PRF (HRK, "Cipher Key" | NULL | peer_ID |
   Key_length )

   CK_name=First(128, HMAC_SHA256(CK_name_key, "Cipher Key" | NULL |
   peer_ID)

   Where, First (N, X) refers to the first N bits of X and it is assumed
   that USRK_PRF generates Z=X+Y bits, where the first X bits are used
   for key itself, while the remaining Y bits are used for key_name_key,
   which is used to create temporal uniqueness in the key name
   generation.  Choice of Z and X are outside scope of this document.

   The "Usage_label" value is to be assigned by IANA to the strings
   "Integrity Key" and "Cipher Key".

   NULL as domain label, since the IK and CK are considered to be a
   usage specific, but domain independent keys.  Thus domain label is
   wild carded.

   Peer_ID is the identifier for the peer.  This identifier is exchanged
   in the key distribution exchange (KDE) as described shortly.

4.2.  Root Key derivation scenarios for multi-domain operation

   This section specifies derivation of a top level root keys for
   solving a multi-domain keying problem.  We will use handover keying
   and re-authentication problem is chosen for this document.  Depending
   on the deployment and trust models, several key hierarchy models can
   be considered for solving the handover and re-authentication problem,
   based on the category of the EMSK child key categories used.

4.2.1.  Domain independent Handover root key

   A domain independent HOKEY server is deployed as a USR-KH.  This
   scenario is illustrated by picture (A) in figure above.  In this case
   a domain-independent handover root key (HRK) is generated from the



Nakhjiri & Ohba         Expires December 20, 2007               [Page 9]

Internet-Draft               Hokey hierarchy                   June 2007


   EMSK as a USRK.  The domain independent HOKEY server, then generates
   domain specific HRKs (DSHRK) for various domains, for instance a home
   HRK (HHRK) for the home HOKEY server or AAA server and a visited HRK
   (VHRK) for the visited HOKEY server or AAA server.  HRK is generated
   by the EAP server and delivered to domain independent HOKEY server,
   while DSHRK are generated by the domain independent HOKEY server.
   From the EMSK, the EAP server generates the HRK as follows

   HRK | HRK_name_Key=USRK-PRF (EMSK, Usage_label | NULL | Peer_ID |
   Key_length)

   HRK_name=First (128, HMAC_SHA256(HRK_name_Key, "Usage_label | NULL |
   peer_ID))

   Again, it is assumed that USRK_PRF generates Z=X+Y bits, where the
   first X bits are used for HRK, while the remaining Y bits are used
   for HRK_name_key, which is used to create temporal uniqueness in the
   key name generation.

   The "Usage_label" value is to be assigned by IANA to the string
   "Handover Root Key".

   NULL as domain label, since the HRK is considered to be a usage
   specific (for handover keying and re-authentication) but domain
   independent root key.  Thus domain label is wild carded.  This way
   the same HRK can be used to create root keys for all visited and home
   domains.

   Peer_ID is the identifier for the peer as known to the server
   generating HRK.  This identifier is exchanged in the key distribution
   exchange (KDE) as described shortly.

   The HRK is stored at this HOKEY server database.  We can call this
   database the HRK key holder (HRK-KH).

4.2.2.  Domain Specific Root key

   A domain server acts as an authority for authorizing services,
   holding the usage independent DSRK (DSR-KH) and can authorize HOKEY
   server and derive DSHRK as needed.  In this model each domain server
   needs to refer to the EAP server to derive DSRK directly from the
   EMSK.

   DSRK | DSRK_name_Key=DSRK_PRF(EMSK, NULL | Domain_ID | Peer_ID |
   Key_length)

   DSRK_name=First (128, HMAC_SHA256(DSRK_name_Key, NULL | peer_ID))




Nakhjiri & Ohba         Expires December 20, 2007              [Page 10]

Internet-Draft               Hokey hierarchy                   June 2007


   Where Usage label is wild carded by inserting a NULL.

   the Domain_ID is the identifier of the domain for which the DSRK is
   being derived, e.g.  Home_domain_ID for HDSRK.

   When roaming from one domain to the next, a domain specific root key
   (DSRK) needs to be requested and generated from the EMSK and based on
   the knowledge of peer and domain server identities.

4.2.3.  Domain Specific Handover Root key

   A domain server can act as domain HOKEY server, holding the DSUSRK
   for HOKEY usage (DSUSR-KH).  In this model each domain HOKEY server
   needs to refer to the EAP server to derive DSHRK directly from the
   EMSK.

   DSHRK | DSHRK_name_Key=DSUSRK_PRF(EMSK, Usage_lable| Domain_ID |
   Peer_ID | Key_length)

   DSHRK_name=First (128, HMAC_SHA256(DSHRK_name_Key, Usage_label |
   peer_ID))

   Where Usage label is "Domain Handover Root Key".

   the Domain_ID is the identifier of the domain for which the DSHRK is
   being derived, e.g.  Home_domain_ID for HHRK.

   When roaming from one domain to the next, a domain specific handover
   root key (DSHRK) needs to be requested and generated from the EMSK
   and based on the knowledge of peer and domain server identities.


5.   3 party Key distribution exchange (KDE)

   EAP authentication method signaling and the following EMSK generation
   is performed between the peer and the EAP server in a manner that is
   almost transparent to all intermediaries.  However, providing a
   keying service, such as the handover keying and re-authentication
   services, involves a set of key management services, including
   creation of a key hierarchy and installation of specific keys at one
   or more of such third party intermediaries (figure 2).  Requirements
   for such AAA/ EAP based key management procedures are stated in
   several documents ([I-D.housley-aaa-key-mgmt],
   [I-D.ietf-hokey-reauth-ps], [I-D.ohba-hokey-3party-keydist-ps] ).
   Requirements such as well-defined key scope and authentication of all
   parties are addressed by the following 3 party key distribution
   mechanism, which allows distribution of a key, initially only known
   to two parties (typically directly and mutually authenticated), to a



Nakhjiri & Ohba         Expires December 20, 2007              [Page 11]

Internet-Draft               Hokey hierarchy                   June 2007


   well-identified third party.  The following scenarios can be
   envisioned for distribution of a key to a 3rd party.  All scenarios
   assume the peer and the EAP server have mutually authenticated to
   each other using an EAP method and have generated an EMSK.

   EAP server to USR-KH:  However, since the service requested by the
      peer (e.g.  Handover keying and re-authentication keying service)
      is provided by the a server other than the EAP server (e.g. a
      HOKEY server), an USRK needs to be generated and delivered to that
      server (e.g. a HRK needs to be delivered to a HOKEY server).  For
      the purpose of this document, we assume this server is the USRK
      holder (USR-KH).  The USR-KH is domain independent.  It is
      possible that this USR-KH server is not physically disjunct from
      the EAP server and thus is identified with the same identity as
      the EAP server.  In such cases, the existence of USR-KH server is
      to off-load the EAP server from the need to handle usage specific
      services, such as HOKEY service, for multiple domains.  For
      instance, the USR-KH can use USRK to generate DSUSRK for other
      domains.  When EAP server and USR-KH, HRK may be delivered from
      EAP server to HOKEY server, without the need for specific
      authentication between peer and the HOKEY server.  Security
      Requirements for delivery of USRK from EAP server to a collocated
      USR-KH is currently TBD.  On the other hand, when EAP server and
      USR-KH are physically separate, the KDE mechanism needs to be
      used.  The trigger and mechanism for key delivery may however
      involve a specific request from the peer and another intermediary
      (such as authenticator) for HOKEY service.

   EAP server to DSR-KH  In this scenario, a domain server, typically a
      domain AAA server requires delivery of a DSRK for all allowed
      usage within the domain.  DSR-KH are EAP server are physically
      disjunct.  Thus deployment of 3 party key distribution exchange is
      required.

   USR-KH to DSUSR-KH:  This stage assumes that both peer and USR-KH
      server possess USRK, and further operation between peer and the
      domain that the peer intends to attach to, depends on delivery of
      a domain specific USRK (DSUSRK) to the DSUSR-KH.  It is best to
      assume that the USR-KH and DSUSR-KH HOKEY are physically separate
      and thus deployment of the 3 party KDE is required for the
      delivery of DSUSRK.

   domain specific key management operations  An example is delivery of
      per-authenticator keys from domain HOKEY server to an
      authenticator.  This action also requires deployment of 3 party
      key distribution exchange described in this document, while the
      details are outside scope of this document.




Nakhjiri & Ohba         Expires December 20, 2007              [Page 12]

Internet-Draft               Hokey hierarchy                   June 2007


   As seen above handover keying and re-authentication service requires
   distribution of keys a variety of intermediaries.  In the following
   we describe the mechanism for a 3 party key distribution exchange
   (KDE), where a key is distributed from a network server (with parent
   key holder) to a generic third party.  The following shows a generic
   trust model for the 3 party key distribution mechanism.  The peer (P)
   and a parent key holder, called "server" (S) in this model share a
   parent key from the key hierarchy.  From this parent key, a key (Kpt)
   is to be generated and distributed to a third party intermediary (T).
   We keep the generation of Kpt out of the general description of the
   KDE (key distribution exchange) as the goal is show the process for
   distribution of Kpt from S to T. To support the key distribution
   mechanism, we assume that the peer and the server share a set of
   security associations, including keys for integrity and privacy
   protection of the signaling between the peer and the server (KIps and
   KCps for integrity and privacy protection).  We also assume that the
   server (S) and the third party (T) share a similar set security
   association (KIts, KCts).

            +-+-+-+-+                              +-+-+-+-+-+-+-+
            |       |            shared SA1        |             |
            |       |------------------------------|    server   |
            | Peer  |                              |  KH         |
            +-+-+-+-+                              +-+-+-+-+-+-+-+
                                                          |
                                +-+-+-+-+-+-+             V
                                | 3 rd party |             |   SA2 (Kpt)
                                |       KH  |   ----------|
                                +-+-+-+-+-+-+

   Figure 3: Distribution of a child key from a parent key key holder to
                     a 3rd party child key key holder

   The key distribution mechanism described below is a modified version
   of the Otway-Rees protocol that meets the requirements for such
   3-party lay-out.  The description below can be carried over a generic
   transport and thus is independent of the exact type of protocol that
   is used.  However for the purpose of this document the assumption is
   that the 3 party mechanism parameters are carried for EAP messages
   that are themselves encapsulated over a lower layer such as a AAA
   protocol or an access protocol.

   The exchange proposed below is to perform a channel binding and avoid
   the lying intermediary scenario, where the intermediary announces a
   down link ID to the peer (DTID) and a different uplink ID to the
   server (UTID).  The peer uses DTID in its token towards the server,
   while the intermediary uses its UTID in its token to the server.
   Server must use the UTID from peer token to calculate the MIC in the



Nakhjiri & Ohba         Expires December 20, 2007              [Page 13]

Internet-Draft               Hokey hierarchy                   June 2007


   third party token ([PID, UTID]KIts) and if there is a match, then the
   server can verify that DTID and UTID are the same as the TID and
   proceed with generating and provisioning of Kpt, otherwise the server
   MUST return a failure code instead of generating an Kpt.

   The 3 party key distribution basically consists of 1 exchange, i.e. 2
   messages between the peer and the server.  However, in most scenarios
   each message traverses through the intermediary, i.e.  Over two
   logical hops (peer-third party) and (third party-server) even though
   the exchange seems to consist of 4 logical messages.  It should be
   noted that the information in message 0 is typically conveyed as an
   advertisement through other means.

   0  Third party to peer: (DTID, DID)

   1  Peer to Third party: Int[ KIps, (PID, DTID, DID, Np,KN_KIps)]

   2  Third party to Server: Int[KIts, (PID, UTID)], Int[ KIps, (PID,
      DTID, DID, Np,KN_KIps)]

   3  Server to third party: {PID,TID,KN_Kpt, KLpt, Kpt}KCas,Int[ KIps,
      (PID, TID, DID, Np+1,KN_KIpt,KLpt, KN_KIps)]

   4  Third party to Peer: Int[KIps, (PID, TID, DID, Np+1, KN_Kpt,KLpt,
      KNps)]

   the notation is as follows:

   PID: peer ID.  The information is expected by carried by an existing
   attribute within EAP and/or AAA protocols.

   DID: Domain ID, used for generation of domain specific keys, such as
   HHRK (see key generation).

   TID: third party ID (obtained by the peer through beacon
   announcements or other means)

   DTID: third party ID as perceived by the peer (down link ID)

   UTID: third party ID as perceived by the server (uplink ID)

   {X}K: X encrypted with key K

   Int[K, X]: X || MIC (K, X), where MIC Message Integrity Code over X
   with key K.

   KIps: A symmetric key shared between peer and Server for signing and
   identified by KN_KIps.



Nakhjiri & Ohba         Expires December 20, 2007              [Page 14]

Internet-Draft               Hokey hierarchy                   June 2007


   KCps: A symmetric key shared between peer and Server for encryption
   and identified by KN_KCps

   KCts: A symmetric key shared between third party and Server for
   encryption (provisioned out of band).

   KIts: A symmetric key between third party and server for signing
   (provisioned out of band).

   Kpt: A symmetric key to be shared between peer and third party (key
   to be distributed to third party).  The key is named as KN_Kpt.

   KLx : Key lifetime for key x

   KN_Kx: Key name for Key x, e.g.  KN_KIas: key name for KIas

   Nx : Nonce provided by the party X

   left over text for IK and CK: Roaming between two administrative
   domains, e.g. from home domain to visited domain, while mid-session,
   would require involvement of a top level HOKEY server, so that it can
   generate a domain-specific HRK (DSHRK) for that domain.


6.  Security report Card


7.  Security Considerations


8.  IANA consideration

   This document defines new usage labels, such as those used in
   generation of CK, IK, HRK.  The corresponsing labels (e.g.
   "Integrity Key" and "Cipher key") need to be assigned numerical
   values by IANA.


9.  Acknowledgements

   The author would like to thank XX feedback.


10.  References







Nakhjiri & Ohba         Expires December 20, 2007              [Page 15]

Internet-Draft               Hokey hierarchy                   June 2007


10.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC3748]  Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and H.
              Levkowetz, "Extensible Authentication Protocol (EAP)",
              RFC 3748, June 2004.

   [I-D.ietf-eap-keying]
              Aboba, B., "Extensible Authentication Protocol (EAP) Key
              Management Framework", draft-ietf-eap-keying-18 (work in
              progress), February 2007.

   [I-D.nakhjiri-aaa-hokey-ps]
              Nakhjiri, M., "AAA based Keying for Wireless Handovers:
              Problem Statement", draft-nakhjiri-aaa-hokey-ps-03 (work
              in progress), June 2006.

   [I-D.ietf-hokey-reauth-ps]
              Clancy, C., "Handover Key Management and Re-authentication
              Problem Statement", draft-ietf-hokey-reauth-ps-01 (work in
              progress), January 2007.

   [I-D.ietf-hokey-emsk-hierarchy]
              Salowey, J., "Specification for the Derivation of Usage
              Specific Root Keys (USRK) from an  Extended Master Session
              Key (EMSK)", draft-ietf-hokey-emsk-hierarchy-00 (work in
              progress), January 2007.

   [I-D.ohba-hokey-3party-keydist-ps]
              Ohba, Y., "Problem Statement and Requirements on a 3-Party
              Key Distribution Protocol  for Handover Keying",
              draft-ohba-hokey-3party-keydist-ps-01 (work in progress),
              March 2007.

   [I-D.nakhjiri-hokey-hierarchy]
              Nakhjiri, M., "Keying and signaling for wireless access
              and handover using EAP (EAP-HR)",
              draft-nakhjiri-hokey-hierarchy-04 (work in progress),
              April 2007.

   [RFC3579]  Aboba, B. and P. Calhoun, "RADIUS (Remote Authentication
              Dial In User Service) Support For Extensible
              Authentication Protocol (EAP)", RFC 3579, September 2003.

   [RFC4072]  Eronen, P., Hiller, T., and G. Zorn, "Diameter Extensible
              Authentication Protocol (EAP) Application", RFC 4072,



Nakhjiri & Ohba         Expires December 20, 2007              [Page 16]

Internet-Draft               Hokey hierarchy                   June 2007


              August 2005.

10.2.  Informative references

   [I-D.housley-aaa-key-mgmt]
              Housley, R. and B. Aboba, "Guidance for AAA Key
              Management", draft-housley-aaa-key-mgmt-09 (work in
              progress), February 2007.


Appendix A.  Appendix A: Roaming hieararchy based on HRK

   The HOKEY server can use HRK to generate separate domain specific
   handover root keys (DSHRK) for each domain, e.g. a home HRK (HHRK)
   for home domain and a visited HRK (VHRK) for each visited domain.

   HHRK | HHRK_name_Key=HO_PRF(HRK, Peer_ID | home_domain_ID |
   Key_length)

   VHRK | VHRK_name_Key=HO_PRF(HRK, Peer_ID | visited_domain_ID |
   Key_length)

   Since HHRK and VHRK are no longer derived from the EMSK, the PRF used
   for generating these keys may or may need to comply with the
   requirements in [I-D.ietf-hokey-emsk-hierarchy] and thus we have used
   the notion of HO_PRF to indicate this flexibility.

   HHRK_name=First (128, HMAC_SHA256(HHRK_name_Key, "domain handover
   root key derivation"| peer_ID))

   VHRK_name=First (128, HMAC_SHA256(VHRK_name_Key, "domain handover
   root key derivation"| peer_ID))

   Home_domain_ID or the Visited_domain_ID are the identifier for the
   home or visited domain as known to both peer and the HOKEY server
   generating HHRK or VHRK.  When roaming from one domain to the next,
   the peer needs to request for the domain specific handover root key
   (DSHRK) to be generated from the HRK and exchange its own identity as
   well as the domain identity with the server.

   It should be mentioned that HHRK and VHRKs can be generated directly
   from EMSK as usage and specific root keys (USDSRK).  In that case it
   would be the EAP server that has to generate such domain specific
   handover root keys (DSHRK), which means each DSHRK request needs to
   be made directly to the EAP server, along with domain_label for the
   domain.  The preferred method is to generate DSHRK from HRK instead.

   Domain specific HRKs (DSHRK) are delivered to the domain HOKEY



Nakhjiri & Ohba         Expires December 20, 2007              [Page 17]

Internet-Draft               Hokey hierarchy                   June 2007


   servers through secure transport and cached at domain HOKEY servers,
   at a so called DSHRK key holder (DSHRK-KH).  Proper care needs to be
   taken to assure that DSHRK is bound to the identity of the HOKEY
   server caching the DSHRK.  This is described later on.

   In case the peer is at home domain, HHRK is delivered to the home
   HOKEY server.

   Providing re-authentication and handover keying service within each
   domain is upon the HOKEY server within that domain.  This means
   integrity and cipher keys (IK and CK) for re-authentication and
   handover keying signaling can be domain specific (DSIK and CSIK).
   Also the mobility domain master session keys (MDMSK) passed to the
   authenticators within the administrative domain are also domain
   specific.  This means DSHRK is used for calculation of these keys.
   It should be obvious that DSHRK, DSIK and DSCK are only accessible to
   the peer and domain HOKEY server, but not to the authenticator within
   the domain.  The following describes derivation of IK and CK for home
   domain (HIK and CIK) from HHRK:

      HIK | HIK_name_key=HO-PRF (HHRK, "domain integrity Key" | peer_ID
      | Home_domain_ID | Key_length )

      HIK_name=First(128, HMAC_SHA256(HIK_name_key "domain integrity
      Key"| peer_ID)

      HCK | HCK_name_key=HO-PRF (HHRK, "domain cipher Key" | peer_ID |
      Home_domain_ID | Key_length )

      HCK_name=First(128, HMAC_SHA256(HCK_name_key, "domain cipher Key"|
      peer_ID)




Authors' Addresses

   Madjid Nakhjiri
   Huawei USA


   Email: mnakhjiri@huawei.com









Nakhjiri & Ohba         Expires December 20, 2007              [Page 18]

Internet-Draft               Hokey hierarchy                   June 2007


   Yoshihiro Ohba
   Toshiba


   Email: yohba@tari.toshiba.com














































Nakhjiri & Ohba         Expires December 20, 2007              [Page 19]

Internet-Draft               Hokey hierarchy                   June 2007


Full Copyright Statement

   Copyright (C) The IETF Trust (2007).

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND
   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.


Acknowledgment

   Funding for the RFC Editor function is provided by the IETF
   Administrative Support Activity (IASA).





Nakhjiri & Ohba         Expires December 20, 2007              [Page 20]


