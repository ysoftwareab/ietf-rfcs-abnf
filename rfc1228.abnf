pdu_length =   length of version field and string tag (4 bytes)
             +   length of community length field (1 byte)
             +   length of community name (depends...)
             +   length of SNMP GET request (29 bytes)

             =   34 + length of community name
pdu_length =   length of version field and string tag (4 bytes)
             +   length of community length field (1 byte)
             +   length of community name (depends...)
             +   length of SNMP RESPONSE (31 bytes)

             =   36 + length of community name

len = len_bfr[0] * 256 + len_bfr[1];
bfr = malloc(len);
cp = mkDPIresponse(SNMP_NO_SUCH_NAME,0);

data = "a string to be returned";
ret_value = mkDPIset(obj_id,SNMP_TYPE_STRING,
                        strlen(data)+1,data);
cp = mkDPIresponse(0,ret_value);

cp = mkDPIregister("1.3.6.1.2.1.1.2.");

port = query_DPI_port(hostname, community_name);

packet = mkDPIregister("1.3.6.1.2.1.1.1.");

len = *packet * 256 + *(packet + 1);
set_value = mkDPIset(obj_id, type, length, value);

packet = mkDPIresponse(error_code, ret_value);

len = *packet * 256 + *(packet + 1);
packet = mkDPItrap(generic, specific, ret_value);

len = *packet * 256 + *(packet + 1);
data = 3;  /* interface number = 3 */
if_index_value = mkDPIset("1.3.6.1.2.1.2.2.1.1", SNMP_TYPE_NUMBER,
             sizeof(unsigned long), &data);
packet = mkDPItrap(2, 0, if_index_value);
len = *packet * 256 + *(packet + 1);
hdr = pDPIpacket(packet)

community_len = strlen(community_name);

rc = _query_DPI_port(hostname, community_name, community_len);
host_addr = lookup_host(hostname);
packet_len = 0;
remaining_len = sizeof(version) + 1 +
        community_len + sizeof(request);

fd = socket(AF_INET, SOCK_DGRAM, 0);
rc = bind(fd, &sock, sizeof(sock));
tries = 0;
rc = sendto(fd, packet, packet_len, 0, &dest_sock,
               sizeof(dest_sock));
read_mask = 1 << fd;
rc = select(read_mask + 1, &read_mask, 0, 0, &timeout);
sock_len = sizeof(dest_sock);
packet_len = recvfrom(fd, packet, sizeof(packet), 0,
                      &dest_sock, &sock_len);
rc = extract_DPI_port(packet, packet_len);
offset = len - 2;
port = (packet[offset] << 8) + packet[offset + 1];
hdr = (struct snmp_dpi_hdr *) malloc(sizeof(struct snmp_dpi_hdr));
len = (packet[0] << 8) + packet[1];
offset = 2;
get = (struct dpi_get_packet *)
        malloc(sizeof(struct dpi_get_packet));
l = strlen(packet) + 1;
next = (struct dpi_next_packet *)
        malloc(sizeof(struct dpi_next_packet));
cp = packet;
l = strlen(cp) + 1;
l = strlen(cp) + 1;
set = (struct dpi_set_packet *)
        malloc(sizeof(struct dpi_set_packet));
cp = packet;
l = strlen(cp) + 1;
l = (*(cp++) << 8);
trap = (struct dpi_trap_packet *)
        malloc(sizeof(struct dpi_trap_packet));
resp = (struct dpi_resp_packet *)
        malloc(sizeof(struct dpi_resp_packet));
get = hdr->packet_body.dpi_get;
next = hdr->packet_body.dpi_next;
set = hdr->packet_body.dpi_set;
trap = hdr->packet_body.dpi_trap;
set = trap->info;
resp = hdr->packet_body.dpi_response;
set = resp->ret_data;
packet_len = 2;
rc = cDPIget(hdr->packet_body.dpi_get);
rc = cDPInext(hdr->packet_body.dpi_next);
rc = cDPIset(hdr->packet_body.dpi_set);
rc = cDPItrap(hdr->packet_body.dpi_trap);
rc = cDPIresponse(hdr->packet_body.dpi_response);
len = packet_len - 2;
len = set->value_len >> 8;
rc = cDPIset(resp->ret_data);
rc = 0;
rc = cDPIset(trap->info);
rc = 0;
hdr = mkDPIhdr(cmd);
cp = cDPIpacket(hdr);
hdr = mkDPIhdr(SNMP_DPI_RESPONSE);
resp = (struct dpi_resp_packet *)
        malloc(sizeof(struct dpi_resp_packet));
cp = cDPIpacket(hdr);
hdr = mkDPIhdr(SNMP_DPI_TRAP);
trap = (struct dpi_trap_packet *)
        malloc(sizeof(struct dpi_trap_packet));
cp = cDPIpacket(hdr);
hdr = (struct snmp_dpi_hdr *) malloc(sizeof(struct snmp_dpi_hdr));
get = (struct dpi_get_packet *)
        malloc(sizeof(struct dpi_get_packet));
l = strlen(oid_name) + 1;
next = (struct dpi_next_packet *)
        malloc(sizeof(struct dpi_next_packet));
l = strlen(oid_name) + 1;
l = strlen(group_oid) + 1;
set = (struct dpi_set_packet *)
        malloc(sizeof(struct dpi_set_packet));
l = strlen(oid_name) + 1;
