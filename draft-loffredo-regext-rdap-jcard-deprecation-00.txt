



Registration Protocols Extensions                            M. Loffredo
Internet-Draft                                       IIT-CNR/Registro.it
Intended status: Best Current Practice                          G. Brown
Expires: September 24, 2020                         CentralNic Group plc
                                                          March 23, 2020


    Using JSContact in Registration Data Access Protocol (RDAP) JSON
                               Responses
            draft-loffredo-regext-rdap-jcard-deprecation-00

Abstract

   This document describes how RDAP servers can represent entity contact
   information in JSON responses using JSContact.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on September 24, 2020.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.




Loffredo & Brown       Expires September 24, 2020               [Page 1]

Internet-Draft           Using JSContact in RDAP              March 2020


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Rationale . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.2.  Conventions Used in This Document . . . . . . . . . . . .   3
   2.  JSContact . . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Using JSCard objects in RDAP Responses  . . . . . . . . . . .   4
   4.  Migration from JCard to JSCard  . . . . . . . . . . . . . . .   4
     4.1.  Best Practices for deprecating a REST API features  . . .   5
     4.2.  RDAP Features Supporting a Deprecation Process  . . . . .   5
     4.3.  jCard Deprecation Procedure . . . . . . . . . . . . . . .   6
       4.3.1.  Stages  . . . . . . . . . . . . . . . . . . . . . . .   6
       4.3.2.  Length  . . . . . . . . . . . . . . . . . . . . . . .   9
       4.3.3.  Goals . . . . . . . . . . . . . . . . . . . . . . . .   9
   5.  Implementation Status . . . . . . . . . . . . . . . . . . . .  10
     5.1.  IIT-CNR/Registro.it . . . . . . . . . . . . . . . . . . .  10
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  11
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  11
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  11
     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  11
     8.2.  Informative References  . . . . . . . . . . . . . . . . .  12
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  12

1.  Introduction

   This document specifies how RDAP servers can use JSContact
   ([draft-ietf-jmap-jscontact]) to represent the contact information
   associated with entities in RDAP responses, instead of jCard
   ([RFC7095]).  It also describes the process by which an RDAP server
   can migrate from jCard to JSContact.

1.1.  Rationale

   According to the feedback from RDAP Pilot Working Group
   ([RDAP-PILOT-WG], a group of RDAP server implementers representing
   registries and registrars of generic TLDs), the most commonly raised
   implementation concern, for both servers and clients related to the
   use of jCard ([RFC7095]) to represent the contact information
   associated with entities.  Working Group members reported jCard to be
   unintuitive, complicated to implement for both clients and servers,
   and incompatible with best practices for RESTful APIs.

   JSContact ([draft-ietf-jmap-jscontact]) provides a simpler and more
   efficient representation for contact information.  In addition, it
   provides a means to represent internationalised and unstructured
   contact information which cannot currently be represented using
   jCard.  Support for internationalised contact information has been




Loffredo & Brown       Expires September 24, 2020               [Page 2]

Internet-Draft           Using JSContact in RDAP              March 2020


   recognised being necessary to facilitate the future
   internationalisation of registration data directory services.

1.2.  Conventions Used in This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

2.  JSContact

   The JSContact specification defines a data model and JSON
   representation of contact information that can be used for data
   storage and exchange in address book or directory applications.  It
   aims to be an alternative to the vCard data format ([RFC6350]) and to
   be unambiguous, extendable and simple to process.  In contrast with
   jCard, it is not a direct mapping from the vCard data model and
   expands semantics where appropriate.

   The JSContact specification declares two main object types: "JSCard",
   which represents a single contact "card", and "JSCardGroup" which
   represents a collection of JSCard objects.  For the purpose of this
   document, only JSCard obejcts are considered.

   JSCard differs from jCard in that it:

   o  follows an object-oriented rather than array-oriented approach;

   o  is simple to process;

   o  requires no extra work in serialization/deserialization from/to a
      data model;

   o  includes no "jagged" arrays;

   o  prefers maps rather than arrays to implement collections;

   o  is able to represent redacted contacts (both "name" and "fullName"
      properties are optional).

   [draft-loffredo-jmap-jscontact-vcard] provides informational guidance
   on the conversion of jCard objects into JSCard objects, and vice
   versa.








Loffredo & Brown       Expires September 24, 2020               [Page 3]

Internet-Draft           Using JSContact in RDAP              March 2020


3.  Using JSCard objects in RDAP Responses

   Entity objects in RDAP responses MAY include a "jscard" property
   whose value is a JSCard object, in addition, or instead of, the
   "vCardArray" property defined in RFC 7483.

   Example of an entity object containing a "jscard" property:

   {
     "objectClassName": "entity",
     "handle": "entity-12345",
     "roles": ["registrant"],
     "status": ["validated"],
     "jscard": {
       "uid": "entity-12345",
       "fullName": "John Doe",
       "organization": [
         {
           "value": "Example Inc"
         }
       ],
       "addresses": [
         {
           "street": "123 Example Street",
           "locality": "Exampleton",
           "region": "Exampleshire",
           "postcode": "EX1 2AM",
           "country": "Exampletania"
         }
       ],
       "phones": [
         {
           "value": "tel:+12.3456789"
         }
       ],
       "emails": [
         {
           "value": "jdoe@example.com"
         }
       ]
     }
   }

4.  Migration from JCard to JSCard







Loffredo & Brown       Expires September 24, 2020               [Page 4]

Internet-Draft           Using JSContact in RDAP              March 2020


4.1.  Best Practices for deprecating a REST API features

   Deprecation of a REST API feature is a process that should be
   executed as smartly as possible.  Before introducing the basic
   principles guiding a deprecation process, it could be useful to
   clarify about the terms deprecation and sunsetting:

   o  Deprecating an API means it is not usable in its current form for
      the purpose intended.  This usually means that a new version has
      been created, or the API provider no longer intends to support it.

   o  Sunsetting is merely a period of time leading up to a deprecation.
      It is a period of limited support, while deprecation is the period
      in which support officially ends.  In the meantime, the support
      for an alternate feature replacing the old one might be provided.
      A sunsetting plan can be set up months or even years in advance of
      the deprecation announcement.

   That being said, here are a few guidelines to deprecate a REST API
   feature:

   o  "Communicating": REST API providers should announce the intended
      deprecation communicating the timeline and any other helpful
      information.

   o  "Planning a long enough sunset period": a good sunset period is
      important as it gives API consumers time to work on their clients.
      Such a period could consist of API updates to fit the future
      version.

   o  "Providing alternatives": when entering the sunset period, there
      may be a provision for elements like redirect URIs, migration
      endpoints, etc., but, at the same time, the API might still
      respond to old fashioned requests in order to guarantee backward
      compatibility for a limited period.

4.2.  RDAP Features Supporting a Deprecation Process

   RDAP enables servers to communicate service information to clients
   through notices.  A notice can include a set of links which can be
   used to provide clients with references and documentation.  For the
   purpose of this document, two link relation types are used:

   o  "deprecation" as described in [draft-dalal-deprecation-header];

   o  "alternate" as described in [RFC8288].





Loffredo & Brown       Expires September 24, 2020               [Page 5]

Internet-Draft           Using JSContact in RDAP              March 2020


   The information about the specifications used in the construction of
   the response is also described by the "rdapConformance" tags.

   Clients are able to ask servers for RDAP features by using
   appropriate query parameters as described in [RFC7482].

4.3.  jCard Deprecation Procedure

   The procedure for jCard to JSCard migration consists of four
   contiguous stages, each one corresponding to as many alternatives in
   providing the contact card.  During the procedure, the presence of
   "jscard_level_0" tag in the rdapConformance array means that JSCard
   is returned instead of jCard.  The time format used in notifying
   clients about this procedure is defined in [RFC3339].

4.3.1.  Stages

   Here in the following the four stages are reported in detail:

      Stage 1 - JSCard unimplemented

      This stage corresponds to providing jCard as default contact card
      ([RFC7483]).  The RDAP server is not able to provide an alternate
      contact card.  The rdapConformance array contains only the
      "rdap_level_0" tag.


      Stage 2 - JSCard sunset

      This stage corresponds to providing jCard as default contact card
      but the RDAP server is able to alternatively return JSCard if the
      client sets the query parameter "jscard" to 1/true/yes.  The
      rdapConformance array contains the "rdap_level_0" tag but also the
      "jscard_level_0" tag if JSCard is requested.

      The RDAP server is recommended to return a notice titled "JSCard
      sunset end".  Such a notice should include a description reporting
      the JSCard sunset end time and two links:

      *  "deprecation": a link to a URI-identified resource documenting
         the jCard deprecation;

      *  "alternate": if JSCard is not requested, a link to the JSCard
         version of same resource as identified by the current query
         string plus the parameter "jscard" set to 1/true/yes
         (Figure 1); otherwise, only the "deprecation" link is provided
         (Figure 2).




Loffredo & Brown       Expires September 24, 2020               [Page 6]

Internet-Draft           Using JSContact in RDAP              March 2020


   "notices": [
     {
       "title": "JSCard sunset end",
       "description": ["2020-07-01T00:00:00Z"],
       "links": [{
           "value": "http://example.net/entity/XXXX",
           "rel": "deprecation",
           "type": "text/html",
           "href": "http://www.example.com/jcard_deprecation.html"
         },
         {
           "value": "http://example.net/entity/XXXX",
           "rel": "alternate",
           "type": "text/html",
           "href": " http://example.net/entity/XXXX?jscard=1"
         }
       ]
     }
   ]

              Figure 1: JSCard sunset - JSCard not requested

   "notices": [
     {
       "title": "JSCard sunset end",
       "description": ["2020-07-01T00:00:00Z"],
       "links": [
         {
           "value": "http://example.net/entity/XXXX?jscard=1",
           "rel": "deprecation",
           "type": "text/html",
           "href": "http://www.example.com/jcard_deprecation.html"
         }
       ]
     }
   ]

                Figure 2: JSCard sunset - JSCard requested

      Stage 3 - jCard deprecation

      This stage corresponds to the provisioning of JSCard as default
      contact card but the RDAP server is able to alternatively return
      jCard if the client sets the query parameter "jcard" to 1/true/
      yes.  The rdapConformance array contains both "rdap_level_0" and
      "jscard_level_0" tags unless jCard is requested.  The "jscard"
      query parameter is ignored.




Loffredo & Brown       Expires September 24, 2020               [Page 7]

Internet-Draft           Using JSContact in RDAP              March 2020


      The RDAP server is recommended to return a notice titled "jCard
      deprecation end".  Such a notice should include a description
      reporting the jCard deprecation end time and two links:

      *  "deprecation": a link to a URI-identified resource documenting
         the jCard deprecation;

      *  "alternate": if jCard is not requested, a link to the jCard
         version of the same resource as identified by the current query
         string plus the parameter "jcard" set to 1/true/yes (Figure 3);
         otherwise, a link to the JSCard version of the same resource as
         identified by the current query string without the parameter
         "jcard" (Figure 4).

   "notices": [
     {
       "title": "jCard deprecation end",
       "description": ["2020-12-31T23:59:59Z"],
       "links": [
         {
           "value": "http://example.net/entity/XXXX",
           "rel": "deprecation",
           "type": "text/html",
           "href": "http://www.example.com/jcard_deprecation.html"
         },
         {
           "value": "http://example.net/entity/XXXX",
           "rel": "alternate",
           "type": "text/html",
           "href": " http://example.net/entity/XXXX?jcard=1"
         }
       ]
     }
   ]

             Figure 3: jCard deprecation - jCard not requested















Loffredo & Brown       Expires September 24, 2020               [Page 8]

Internet-Draft           Using JSContact in RDAP              March 2020


   "notices": [
     {
       "title": "jCard deprecation end",
       "description": ["2020-12-31T23:59:59Z"],
       "links": [
         {
           "value": "http://example.net/entity/XXXX?jcard=1",
           "rel": "deprecation",
           "type": "text/html",
           "href": "http://www.example.com/jcard_deprecation.html"
         },
         {
           "value": "http://example.net/entity/XXXX?jcard=1",
           "rel": "alternate",
           "type": "text/html",
           "href": " http://example.net/entity/XXXX"
         }
       ]
     }
   ]

               Figure 4: jCard deprecation - jCard requested

      Stage 4 - jCard deprecated

      This stage corresponds to providing JSCard as default contact
      card.  The RDAP server is not able to provide an alternate contact
      card.  The rdapConformance array always contains both
      "rdap_level_0" and "jscard_level_0" tags.  The RDAP server doesn't
      include any notice about the jCard deprecation process.  Both
      "jscard" and "jcard" query parameters are ignored.

4.3.2.  Length

   The length of both JSCard sunset and jCard deprecation periods are
   not fixed by this specification.  Best practices in REST API
   deprecation suggest that, depending on the deprecated API's reach,
   user base and service offering, a convenient time could be anywhere
   between 3 - 8 months.  Anyway, RDAP providers are recommended to
   monitor the server log to figure out whether declared times need to
   be changed to meet client requirements.

4.3.3.  Goals

   The procedure described in this document achieves the following
   goals:

   o  only one contact representation would be included in the response;



Loffredo & Brown       Expires September 24, 2020               [Page 9]

Internet-Draft           Using JSContact in RDAP              March 2020


   o  the response would always be compliant to RFC7483;

   o  clients would be informed about the transition timeline;

   o  the backward compatibility would be guaranteed throughout the
      transition;

   o  servers and clients could execute their transitions independently.

5.  Implementation Status

   NOTE: Please remove this section and the reference to RFC 7942 prior
   to publication as an RFC.

   This section records the status of known implementations of the
   protocol defined by this specification at the time of posting of this
   Internet-Draft, and is based on a proposal described in RFC 7942
   [RFC7942].  The description of implementations in this section is
   intended to assist the IETF in its decision processes in progressing
   drafts to RFCs.  Please note that the listing of any individual
   implementation here does not imply endorsement by the IETF.
   Furthermore, no effort has been spent to verify the information
   presented here that was supplied by IETF contributors.  This is not
   intended as, and must not be construed to be, a catalog of available
   implementations or their features.  Readers are advised to note that
   other implementations may exist.

   According to RFC 7942, "this will allow reviewers and working groups
   to assign due consideration to documents that have the benefit of
   running code, which may serve as evidence of valuable experimentation
   and feedback that have made the implemented protocols more mature.
   It is up to the individual working groups to use this information as
   they see fit".

5.1.  IIT-CNR/Registro.it

      Responsible Organization: Institute of Informatics and Telematics
      of National Research Council (IIT-CNR)/Registro.it

      Location: https://rdap.pubtest.nic.it/

      Description: This implementation includes support for RDAP queries
      using data from the public test environment of .it ccTLD.

      Level of Maturity: This is a "proof of concept" research
      implementation.





Loffredo & Brown       Expires September 24, 2020              [Page 10]

Internet-Draft           Using JSContact in RDAP              March 2020


      Coverage: This implementation includes all of the features
      described in this specification.

      Contact Information: Mario Loffredo, mario.loffredo@iit.cnr.it

6.  IANA Considerations

   This document has no actions for IANA.

7.  Security Considerations

   This document doesn't report any security consideration.

8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC3339]  Klyne, G. and C. Newman, "Date and Time on the Internet:
              Timestamps", RFC 3339, DOI 10.17487/RFC3339, July 2002,
              <https://www.rfc-editor.org/info/rfc3339>.

   [RFC6350]  Perreault, S., "vCard Format Specification", RFC 6350,
              DOI 10.17487/RFC6350, August 2011,
              <https://www.rfc-editor.org/info/rfc6350>.

   [RFC7095]  Kewisch, P., "jCard: The JSON Format for vCard", RFC 7095,
              DOI 10.17487/RFC7095, January 2014,
              <https://www.rfc-editor.org/info/rfc7095>.

   [RFC7482]  Newton, A. and S. Hollenbeck, "Registration Data Access
              Protocol (RDAP) Query Format", RFC 7482,
              DOI 10.17487/RFC7482, March 2015,
              <https://www.rfc-editor.org/info/rfc7482>.

   [RFC7483]  Newton, A. and S. Hollenbeck, "JSON Responses for the
              Registration Data Access Protocol (RDAP)", RFC 7483,
              DOI 10.17487/RFC7483, March 2015,
              <https://www.rfc-editor.org/info/rfc7483>.

   [RFC7942]  Sheffer, Y. and A. Farrel, "Improving Awareness of Running
              Code: The Implementation Status Section", BCP 205,
              RFC 7942, DOI 10.17487/RFC7942, July 2016,
              <https://www.rfc-editor.org/info/rfc7942>.



Loffredo & Brown       Expires September 24, 2020              [Page 11]

Internet-Draft           Using JSContact in RDAP              March 2020


   [RFC8288]  Nottingham, M., "Web Linking", RFC 8288,
              DOI 10.17487/RFC8288, October 2017,
              <https://www.rfc-editor.org/info/rfc8288>.

8.2.  Informative References

   [draft-dalal-deprecation-header]
              Dalal, S. and E. Wilde, "The Deprecation HTTP Header
              Field", <https://datatracker.ietf.org/doc/draft-dalal-
              deprecation-header/>.

   [draft-ietf-jmap-jscontact]
              Stepanek, R. and M. Loffredo, "JSContact: A JSON
              representation of contact data",
              <https://datatracker.ietf.org/doc/draft-ietf-jmap-
              jscontact/>.

   [draft-loffredo-jmap-jscontact-vcard]
              Loffredo, M. and R. Stepanek, "JSContact: Converting from
              and to vCard", <https://datatracker.ietf.org/doc/draft-
              loffredo-jmap-jscontact-vcard/>.

   [RDAP-PILOT-WG]
              ICANN RDAP Pilot WG, "RDAP Pilot Report", April 2019,
              <https://www.icann.org/en/system/files/files/rdap-pilot-
              report-25apr19-en.pdf>.

Authors' Addresses

   Mario Loffredo
   IIT-CNR/Registro.it
   Via Moruzzi,1
   Pisa  56124
   IT

   Email: mario.loffredo@iit.cnr.it
   URI:   http://www.iit.cnr.it


   Gavin Brown
   CentralNic Group plc
   Saddlers House, 44 Gutter Lane
   London, England  EC2V 6BR
   GB

   Phone: +44 20 33 88 0600
   Email: gavin.brown@centralnic.com
   URI:   https://www.centralnic.com



Loffredo & Brown       Expires September 24, 2020              [Page 12]
