CR         =  <ASCII CR, carriage return>  ; (15, 13.)
LF         =  <ASCII LF, linefeed>         ; (12,10.)
CRLF               =  CR LF
SPACE      =  <ASCII SP, space>            ; (40,32.)
HTAB       =  <ASCII HT, horizontal-tab>        ; (11,9.)
                vCard Application/Directory Content Type


ws           = 1*(SPACE / HTAB)
        ; _whitespace,_ one or more spaces or tabs

wsls         = 1*(SPACE / HTAB / CRLF)
        ; whitespace with line separators

word         = <any printable 7bit us-ascii except []=:., >

groups       = groups _._ word
                 / word

vcard_entity = 1*([wsls] vcard [wsls])

vcard        = _BEGIN_ [ws] _:_ [ws] _VCARD_ [ws] 1*CRLF
                 items *CRLF
                 _END_ [ws] _:_ [ws] _VCARD_ 1*CRLF

items        = items *CRLF item
                 / item
        ; these may be _folded_

item         = [groups _._] name
                  [params] _:_ value CRLF
                / [groups _._] _ADR_
                  [params] _:_ addressparts CRLF
                / [groups _._] _ORG_
                  [params] _:_ orgparts CRLF
                / [groups _._] _N_
                  [params] _:_ nameparts CRLF
                / [groups _._] _AGENT_
                  [params] _:_ vcard CRLF
        ; these may be _folded_

name         = _LOGO_ / _PHOTO_ / _LABEL_ / _FN_ / _TITLE_
                / _SOUND_ / _VERSION_ / _TEL_ / _EMAIL_ / _TZ_
                / _GEO_ / _NOTE_
                / _URL_ / _BDAY_ / _ROLE_ / _REV_ / _UID_ / _KEY_
                / _MAILER_ / _X-_ word
        ; these may be _folded_

value        = 7bit / quoted-printable / base64

quoted-printable = <MIME RFC 1521 quoted-printable text>

base64       = <MIME RFC 1521 base64 text>
        ; the end of the text is marked with two CRLF sequences
        ; this results in one blank line before the start of the next
        ; property
                vCard Application/Directory Content Type


params       = _;_ [ws] paramlist

paramlist    = paramlist [ws] _;_ [ws] param
                / param

param        = _TYPE_ [ws] _=_ [ws] ptypeval
                / _VALUE_ [ws] _=_ [ws] pvalueval
                / _ENCODING_ [ws] _=_ [ws] pencodingval
                / _CHARSET_ [ws] _=_ [ws] charsetval
                / _LANGUAGE_ [ws] _=_ [ws] langval
                / _X-_ word [ws] _=_ [ws] word
                / knowntype

ptypeval     = knowntype / _X-_ word

pvalueval    = _INLINE_ / _URL_ / _CONTENT-ID_ / _CID_ / _X-_ word

pencodingval = _7BIT_ /  8BIT                           _    _ / _QUOTED-PRINTABLE_ / _BASE64_
                         / _X-_ word

charsetval   = <a character set string as defined in Section 7.1 of
                RFC 1521>

langval      = <a language string as defined in RFC 1766>

addressparts = 0*6(strnosemi _;_) strnosemi
        ; PO Box, Extended Addr, Street, Locality, Region, Postal Code,
        ; Country Name

orgparts     = *(strnosemi _;_) strnosemi
        ; First is Organization Name, remainder are Organization Units.

nameparts    = 0*4(strnosemi _;_) strnosemi
        ; Family, Given, Middle, Prefix, Suffix.
        ; Example:Public;John;Q.;Reverend Dr.;III, Esq.

strnosemi    = *(*nonsemi (_\;_ / _\_ CRLF)) *nonsemi
        ; To include a semicolon in this string, it must be escaped
        ; with a _\_ character.

nonsemi      = <any non-control ASCII except _;_>

knowntype    = _DOM_ / _INTL_ / _POSTAL_ / _PARCEL_ / _HOME_ / _WORK_
                / _PREF_ / _VOICE_ / _FAX_ / _MSG_ / _CELL_ / _PAGER_
                / _BBS_ / _MODEM_ / _CAR_ / _ISDN_ / _VIDEO_
                / _INTERNET_ / _GIF_ / _JPEG_ / _PCM_ / _WAVE_
                / _X509_ / _PGP_

