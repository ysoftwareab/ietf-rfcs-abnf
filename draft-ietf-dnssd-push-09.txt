



Internet Engineering Task Force                              T. Pusateri
Internet-Draft                                       Seeking affiliation
Intended status: Standards Track                             S. Cheshire
Expires: May 4, 2017                                          Apple Inc.
                                                        October 31, 2016


                         DNS Push Notifications
                        draft-ietf-dnssd-push-09

Abstract

   The Domain Name System (DNS) was designed to return matching records
   efficiently for queries for data that is relatively static.  When
   those records change frequently, DNS is still efficient at returning
   the updated results when polled.  But there exists no mechanism for a
   client to be asynchronously notified when these changes occur.  This
   document defines a mechanism for a client to be notified of such
   changes to DNS records, called DNS Push Notifications.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 4, 2017.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must



Pusateri & Cheshire        Expires May 4, 2017                  [Page 1]

Internet-Draft           DNS Push Notifications             October 2016


   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   3
   2.  Motivation  . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Overview  . . . . . . . . . . . . . . . . . . . . . . . . . .   4
   4.  Transport . . . . . . . . . . . . . . . . . . . . . . . . . .   6
   5.  State Considerations  . . . . . . . . . . . . . . . . . . . .   6
   6.  Protocol Operation  . . . . . . . . . . . . . . . . . . . . .   7
     6.1.  Discovery . . . . . . . . . . . . . . . . . . . . . . . .   8
     6.2.  DNS Push Notification SUBSCRIBE . . . . . . . . . . . . .  10
       6.2.1.  SUBSCRIBE Request . . . . . . . . . . . . . . . . . .  11
       6.2.2.  SUBSCRIBE Response  . . . . . . . . . . . . . . . . .  14
     6.3.  DNS Push Notification Update Messages . . . . . . . . . .  18
       6.3.1.  PUSH Message format . . . . . . . . . . . . . . . . .  18
     6.4.  DNS Push Notification UNSUBSCRIBE . . . . . . . . . . . .  21
       6.4.1.  UNSUBSCRIBE Request . . . . . . . . . . . . . . . . .  22
       6.4.2.  UNSUBSCRIBE Response  . . . . . . . . . . . . . . . .  24
     6.5.  DNS Session Signaling Push Notification RECONFIRM . . . .  26
     6.6.  Client-Initiated Termination  . . . . . . . . . . . . . .  28
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  28
     7.1.  Security Services . . . . . . . . . . . . . . . . . . . .  29
     7.2.  TLS Name Authentication . . . . . . . . . . . . . . . . .  29
     7.3.  TLS Compression . . . . . . . . . . . . . . . . . . . . .  30
     7.4.  TLS Session Resumption  . . . . . . . . . . . . . . . . .  30
   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  30
   9.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  30
   10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  31
     10.1.  Normative References . . . . . . . . . . . . . . . . . .  31
     10.2.  Informative References . . . . . . . . . . . . . . . . .  32
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  34

1.  Introduction

   DNS records may be updated using DNS Update [RFC2136].  Other
   mechanisms such as a Hybrid Proxy [I-D.ietf-dnssd-hybrid] can also
   generate changes to a DNS zone.  This document specifies a protocol
   for DNS clients to subscribe to receive asynchronous notifications of
   changes to RRSets of interest.  It is immediately relevant in the
   case of DNS Service Discovery [RFC6763] but is not limited to that
   use case, and provides a general DNS mechanism for DNS record change
   notifications.  Familiarity with the DNS protocol and DNS packet
   formats is assumed [RFC1034] [RFC1035] [RFC6895].




Pusateri & Cheshire        Expires May 4, 2017                  [Page 2]

Internet-Draft           DNS Push Notifications             October 2016


1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   "Key words for use in RFCs to Indicate Requirement Levels" [RFC2119].

2.  Motivation

   As the domain name system continues to adapt to new uses and changes
   in deployment, polling has the potential to burden DNS servers at
   many levels throughout the network.  Other network protocols have
   successfully deployed a publish/subscribe model to state changes
   following the Observer design pattern [obs].  XMPP Publish-Subscribe
   [XEP0060] and Atom [RFC4287] are examples.  While DNS servers are
   generally highly tuned and capable of a high rate of query/response
   traffic, adding a publish/subscribe model for tracking changes to DNS
   records can result in more timely notification of changes with
   reduced CPU usage and lower network traffic.

   Multicast DNS [RFC6762] implementations always listen on a well known
   link-local IP multicast group, and new services and updates are sent
   for all group members to receive.  Therefore, Multicast DNS already
   has asynchronous change notification capability.  However, when DNS
   Service Discovery [RFC6763] is used across a wide area network using
   Unicast DNS (possibly facilitated via a Hybrid Proxy
   [I-D.ietf-dnssd-hybrid]) it would be beneficial to have an equivalent
   capability for Unicast DNS, to allow clients to learn about DNS
   record changes in a timely manner without polling.

   DNS Long-Lived Queries (LLQ) [I-D.sekar-dns-llq] is an existing
   deployed solution to provide asynchronous change notifications.  Even
   though it can be used over TCP, LLQ is defined primarily as a UDP-
   based protocol, and as such it defines its own equivalents of
   existing TCP features like the three-way handshake, flow control, and
   reliability.  This document builds on experience gained with the LLQ
   protocol, with an improved design.  Instead of using UDP, this
   specification uses long-lived TCP connections
   [I-D.ietf-dnsop-session-signal], and therefore doesn't need to
   reinvent existing TCP functionality.  Instead of inventing a new
   vocabulary of messages to communicate DNS zone changes, this
   specification adopts the syntax and semantics of DNS Update messages
   [RFC2136].

   DNS Push Notifications impose less load on the responding server than
   rapid polling would, but Push Notifications do still have a cost, so
   DNS Push Notification clients MUST NOT recklessly create an excessive
   number of Push Notification subscriptions.  A subscription SHOULD



Pusateri & Cheshire        Expires May 4, 2017                  [Page 3]

Internet-Draft           DNS Push Notifications             October 2016


   only be active when there is a valid reason to need live data (for
   example, an on-screen display is currently showing the results to the
   user) and the subscription SHOULD be cancelled as soon as the need
   for that data ends (for example, when the user dismisses that
   display).  Implementations MAY want to implement idle timeouts, so
   that if the user ceases interacting with the device, the display
   showing the result of the DNS Push Notification subscription is
   automatically dismissed after a certain period of inactivity.  For
   example, if a user presses the "Print" button on their smartphone,
   and then leaves the phone showing the printer discovery screen until
   the phone goes to sleep, then the printer discovery screen should be
   automatically dismissed as the device goes to sleep.  If the user
   does still intend to print, this will require them to press the
   "Print" button again when they wake their phone up.

   A DNS Push Notification client MUST NOT routinely keep a DNS Push
   Notification subscription active 24 hours a day 7 days a week just to
   keep a list in memory up to date so that it will be really fast if
   the user does choose to bring up an on-screen display of that data.
   DNS Push Notifications are designed to be fast enough that there is
   no need to pre-load a "warm" list in memory just in case it might be
   needed later.

   Generally, a client SHOULD NOT keep a connection to a server open
   indefinitely if it has no active subscriptions on that connection.
   After 30 seconds with no active subscriptions the client SHOULD close
   the idle connection, and, if needed in the future, open a new
   connection.

3.  Overview

   The existing DNS Update protocol [RFC2136] provides a mechanism for
   clients to add or delete individual resource records (RRs) or entire
   resource record sets (RRSets) on the zone's server.

   This specification adopts a simplified subset of these existing
   syntax and semantics, and uses them for DNS Push Notification
   messages going in the opposite direction, from server to client, to
   communicate changes to a zone.  The client subscribes for Push
   Notifications by connecting to the server and sending DNS message(s)
   indicating the RRSet(s) of interest.  When the client loses interest
   in updates to these records, it unsubscribes.

   The DNS Push Notification server for a zone is any server capable
   of generating the correct change notifications for a name.
   It may be a master, slave, or stealth name server [RFC1996].
   Consequently, the "_dns-push-tls._tcp.<zone>" SRV record for a




Pusateri & Cheshire        Expires May 4, 2017                  [Page 4]

Internet-Draft           DNS Push Notifications             October 2016


   zone MAY reference the same target host and port as that zone's
   "_dns-update-tls._tcp.<zone>" SRV record.  When the same target host
   and port is offered for both DNS Updates and DNS Push Notifications,
   a client MAY use a single TCP connection to that server for both DNS
   Updates and DNS Push Notification Queries.

   Supporting DNS Updates and DNS Push Notifications on the same server
   is OPTIONAL.  A DNS Push Notification server does NOT also have to
   support DNS Update.

   DNS Updates and DNS Push Notifications may be handled on different
   ports on the same target host, in which case they are not considered
   to be the "same server" for the purposes of this specification, and
   communications with these two ports are handled independently.

   Standard DNS Queries MAY be sent over a DNS Push Notification
   connection, provided that these are queries for names falling within
   the server's zone (the <zone> in the "_dns-push-tls._tcp.<zone>" SRV
   record).  The RD (Recursion Desired) bit MUST be zero.

   DNS Push Notification clients are NOT required to implement DNS
   Update Prerequisite processing.  Prerequisites are used to perform
   tentative atomic test-and-set type operations when a client updates
   records on a server, and that concept has no applicability when it
   comes to an authoritative server informing a client of changes to DNS
   records.

   This DNS Push Notification specification includes support for DNS
   classes, for completeness.  However, in practice, it is anticipated
   that for the foreseeable future the only DNS class in use will be DNS
   class "IN", as is the reality today with existing DNS servers and
   clients.  A DNS Push Notification server MAY choose to implement only
   DNS class "IN".


















Pusateri & Cheshire        Expires May 4, 2017                  [Page 5]

Internet-Draft           DNS Push Notifications             October 2016


4.  Transport

   Implementations of DNS Update [RFC2136] MAY use either User Datagram
   Protocol (UDP) [RFC0768] or Transmission Control Protocol (TCP)
   [RFC0793] as the transport protocol, in keeping with the historical
   precedent that DNS queries must first be sent over UDP [RFC1123].
   This requirement to use UDP has subsequently been relaxed [RFC7766].

   In keeping with the more recent precedent, DNS Push Notification is
   defined only for TCP.  DNS Push Notification clients MUST use TLS
   over TCP.

   Connection setup over TCP ensures return reachability and alleviates
   concerns of state overload at the server through anonymous
   subscriptions.  All subscribers are guaranteed to be reachable by the
   server by virtue of the TCP three-way handshake.  Flooding attacks
   are possible with any protocol, and a benefit of TCP is that there
   are already established industry best practices to guard against SYN
   flooding and similar attacks [IPJ.9-4-TCPSYN] [RFC4953].

   Use of TCP also allows DNS Push Notifications to take advantage of
   current and future developments in TCP, such as Multipath TCP (MPTCP)
   [RFC6824], TCP Fast Open (TFO) [RFC7413], Tail Loss Probe (TLP)
   [I-D.dukkipati-tcpm-tcp-loss-probe], and so on.

   Transport Layer Security (TLS) [RFC5246] is well understood and
   deployed across many protocols running over TCP.  It is designed to
   prevent eavesdropping, tampering, or message forgery.  TLS is
   REQUIRED for every connection between a client subscriber and server
   in this protocol specification.  Additional security measures such as
   client authentication during TLS negotiation MAY also be employed to
   increase the trust relationship between client and server.

   Additional authentication of the SRV target using DNSSEC verification
   and DANE TLSA records [RFC7673] is strongly encouraged.  See below in
   Section 7.2 for details.

5.  State Considerations

   Each DNS Push Notification server is capable of handling some finite
   number of Push Notification subscriptions.  This number will vary
   from server to server and is based on physical machine
   characteristics, network bandwidth, and operating system resource
   allocation.  After a client establishes a connection to a DNS server,
   each record subscription is individually accepted or rejected.
   Servers may employ various techniques to limit subscriptions to a
   manageable level.  Correspondingly, the client is free to establish
   simultaneous connections to alternate DNS servers that support DNS



Pusateri & Cheshire        Expires May 4, 2017                  [Page 6]

Internet-Draft           DNS Push Notifications             October 2016


   Push Notifications for the zone and distribute record subscriptions
   at its discretion.  In this way, both clients and servers can react
   to resource constraints.  Token bucket rate limiting schemes are also
   effective in providing fairness by a server across numerous client
   requests.

6.  Protocol Operation

   The DNS Push Notification protocol is a session-oriented protocol,
   and makes use of DNS Session Signaling
   [I-D.ietf-dnsop-session-signal].

   DNS Push Notification clients and servers MUST support DNS Session
   Signaling, but the server must not issue any DNS Session Signaling
   operations until after the client has first initiated a DNS Session
   Signaling operation of its own.  A single server can support DNS
   Queries, DNS Updates, and DNS Push Notifications (using DNS Session
   Signaling) on the same TCP port, and until the client has sent at
   least one DNS Session Signaling operation the server does not know
   what kind of client has connected to it.  Once the client has
   indicated willingness to use DNS Session Signaling operations by
   sending one of its own, either side of the connection may then
   initiate further Session Signaling operations at any time.

   A DNS Push Notification exchange begins with the client discovering
   the appropriate server, using the procedure described in Section 6.1,
   and then making a TLS/TCP connection to it.

   A typical DNS Push Notification client will immediately issue a DNS
   Session Signaling Idle Timeout operation to request a session timeout
   longer than the the 30-second default, but this is NOT REQUIRED.  A
   DNS Push Notification client MAY issue other requests on the
   connection first, and only issue a DNS Session Signaling Idle Timeout
   operation later if it determines that to be necessary.

   Once the connection is made, the client may then add and remove Push
   Notification subscriptions.  In accordance with the current set of
   active subscriptions the server sends relevant asynchronous Push
   Notifications to the client.  Note that a client MUST be prepared to
   receive (and silently ignore) Push Notifications for subscriptions it
   has previously removed, since there is no way to prevent the
   situation where a Push Notification is in flight from server to
   client while the client's UNSUBSCRIBE message cancelling that
   subscription is simultaneously in flight from client to server.

   The exchange between client and server terminates when either end
   closes the TCP connection with a TCP FIN or RST.




Pusateri & Cheshire        Expires May 4, 2017                  [Page 7]

Internet-Draft           DNS Push Notifications             October 2016


6.1.  Discovery

   The first step in DNS Push Notification subscription is to discover
   an appropriate DNS server that supports DNS Push Notifications for
   the desired zone.  The client MUST also determine which TCP port on
   the server is listening for connections, which need not be (and often
   is not) the typical TCP port 53 used for conventional DNS, or TCP
   port 853 used for DNS over TLS [RFC7858].

   1.  The client begins the discovery by sending a DNS query to the
       local resolver with record type SOA [RFC1035] for the name of the
       record it wishes to subscribe.

   2.  If the SOA record exists, it MUST be returned in the Answer
       Section of the response.  If not, the local resolver SHOULD
       include the SOA record for the zone of the requested name in the
       Authority Section.

   3.  If no SOA record is returned, the client then strips off the
       leading label from the requested name.  If the resulting name has
       at least one label in it, the client sends a new SOA query and
       processing continues at step 2 above.  If the resulting name is
       empty (the root label) then this is a network configuration error
       and the client gives up.  The client MAY retry the operation at a
       later time.

   4.  Once the SOA is known (either by virtue of being seen in the
       Answer Section, or in the Authority Section), the client sends a
       DNS query with type SRV [RFC2782] for the record name
       "_dns-push-tls._tcp.<zone>", where <zone> is the owner name of
       the discovered SOA record.

   5.  If the zone in question does not offer DNS Push Notifications
       then SRV record MUST NOT exist and the SRV query will return a
       negative answer.

   6.  If the zone in question is set up to offer DNS Push Notifications
       then this SRV record MUST exist.  The SRV "target" contains the
       name of the server providing DNS Push Notifications for the zone.
       The port number on which to contact the server is in the SRV
       record "port" field.  The address(es) of the target host MAY be
       included in the Additional Section, however, the address records
       SHOULD be authenticated before use as described below in
       Section 7.2 [RFC7673].

   7.  More than one SRV record may be returned.  In this case, the
       "priority" and "weight" values in the returned SRV records are
       used to determine the order in which to contact the servers for



Pusateri & Cheshire        Expires May 4, 2017                  [Page 8]

Internet-Draft           DNS Push Notifications             October 2016


       subscription requests.  As described in the SRV specification
       [RFC2782], the server with the lowest "priority" is first
       contacted.  If more than one server has the same "priority", the
       "weight" indicates the weighted probability that the client
       should contact that server.  Higher weights have higher
       probabilities of being selected.  If a server is not reachable or
       is not willing to accept a subscription request, then a
       subsequent server is to be contacted.

   Each time a client makes a new DNS Push Notification subscription
   connection, it SHOULD repeat the discovery process in order to
   determine the preferred DNS server for subscriptions at that time.

   Note that this repeated discovery step is typically very fast and
   typically results in no queries on the network.  The client device
   MUST respect the DNS TTL values on records it receives, and store
   them in its local cache with this lifetime.  This means that, as long
   as the DNS TTL values on the authoritative records were set to
   reasonable values, repeated application of this discovery process can
   be completed nearly instantaneously by the client, using only
   locally-stored data.






























Pusateri & Cheshire        Expires May 4, 2017                  [Page 9]

Internet-Draft           DNS Push Notifications             October 2016


6.2.  DNS Push Notification SUBSCRIBE

   After connecting, and requesting a longer idle timeout if necessary,
   a DNS Push Notification client then indicates its desire to receive
   DNS Push Notifications for a given domain name by sending a SUBSCRIBE
   request over the established TLS connection to the server.  A
   SUBSCRIBE request is encoded in a DNS Session Signaling
   [I-D.ietf-dnsop-session-signal] message.  This specification defines
   a new DNS Session Signaling TLV for DNS Push Notification SUBSCRIBE
   Requests/Responses (tentatively Session Signaling Type Code 64).

   A server may not initiate a SUBSCRIBE request.







































Pusateri & Cheshire        Expires May 4, 2017                 [Page 10]

Internet-Draft           DNS Push Notifications             October 2016


6.2.1.  SUBSCRIBE Request

   A SUBSCRIBE request message begins with the standard DNS Session
   Signaling 4-byte header [I-D.ietf-dnsop-session-signal], followed by
   the SUBSCRIBE TLV.

                                             1  1  1  1  1  1
               0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                  MESSAGE ID                   |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |QR|   Opcode  |          Z         |   RCODE   |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |             SSOP-TYPE (SUBSCRIBE)             |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                  SSOP-LENGTH                  |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                                               |
             \                     QNAME                     \
             \                                               \
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                     QTYPE                     |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                    QCLASS                     |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

                                 Figure 1

   The MESSAGE ID field MUST be set to a unique value, that the client
   is not using for any other active operation on this connection.  For
   the purposes here, a MESSAGE ID is in use on this connection if the
   client has used it in a request for which it has not yet received a
   response, or if if the client has used it for a subscription which it
   has not yet cancelled using UNSUBSCRIBE.  In the SUBSCRIBE response
   the server MUST echo back the MESSAGE ID value unchanged.

   In a request the DNS Header QR bit MUST be zero.

   The DNS Header Opcode field holds the Session Signaling Opcode value
   (tentatively 6).

   The Z bits MUST be zero on transmission, and MUST be silently ignored
   on reception.

   The return code (RCODE) field MUST be set to 0 in a request.






Pusateri & Cheshire        Expires May 4, 2017                 [Page 11]

Internet-Draft           DNS Push Notifications             October 2016


   In the SUBSCRIBE TLV the SSOP-TYPE is SUBSCRIBE (tentatively 64).
   The SSOP-LENGTH is the length of the data that follows, which
   specifies the name, type, and class of the record(s) being sought.

   A SUBSCRIBE request MUST contain exactly one question.  There is no
   QCOUNT field to specify more than one question.  Since SUBSCRIBE
   requests are sent over TCP, multiple SUBSCRIBE requests can be
   concatenated in a single TCP stream and packed efficiently into TCP
   segments.

   If accepted, the subscription will stay in effect until the client
   cancels the subscription using UNSUBSCRIBE or until the connection
   between the client and the server is closed.

   SUBSCRIBE requests on a given connection MUST be unique.  A client
   MUST NOT send a SUBSCRIBE message that duplicates the QNAME, QTYPE
   and QCLASS of an existing active subscription on that TLS/TCP
   connection.  For the purpose of this matching, the established DNS
   case-insensitivity for US-ASCII letters applies (e.g., "foo.com" and
   "Foo.com" are the same).  If a server receives such a duplicate
   SUBSCRIBE message this is an error and the server MUST immediately
   close the TCP connection.

   DNS wildcarding is not supported.  That is, a wildcard ("*") in a
   SUBSCRIBE message matches only a literal wildcard character ("*") in
   the zone, and nothing else.

   Aliasing is not supported.  That is, a CNAME in a SUBSCRIBE message
   matches only a literal CNAME record in the zone, and nothing else.

   A client may SUBSCRIBE to records that are unknown to the server at
   the time of the request (providing that the name falls within one of
   the zone(s) the server is responsible for) and this is not an error.
   The server MUST accept these requests and send Push Notifications if
   and when matching records are found in the future.

   If neither QTYPE nor QCLASS are ANY (255) then this is a specific
   subscription to changes for the given QNAME, QTYPE and QCLASS.  If
   one or both of QTYPE or QCLASS are ANY (255) then this subscription
   matches any type and/or any class, as appropriate.

   NOTE: A little-known quirk of DNS is that in DNS QUERY requests,
   QTYPE and QCLASS 255 mean "ANY" not "ALL".  They indicate that the
   server should respond with ANY matching records of its choosing, not
   necessarily ALL matching records.  This can lead to some surprising
   and unexpected results, were a query returns some valid answers but
   not all of them, and makes QTYPE=ANY queries less useful than people
   sometimes imagine.



Pusateri & Cheshire        Expires May 4, 2017                 [Page 12]

Internet-Draft           DNS Push Notifications             October 2016


   When used in conjunction with SUBSCRIBE, QTYPE and QCLASS 255 should
   be interpreted to mean "ALL", not "ANY".  After accepting a
   subscription where one or both of QTYPE or QCLASS are 255, the server
   MUST send Push Notification Updates for ALL record changes that match
   the subscription, not just some of them.














































Pusateri & Cheshire        Expires May 4, 2017                 [Page 13]

Internet-Draft           DNS Push Notifications             October 2016


6.2.2.  SUBSCRIBE Response

   Each SUBSCRIBE request generates exactly one SUBSCRIBE response from
   the server.

   A SUBSCRIBE response message begins with the standard DNS Session
   Signaling 4-byte header [I-D.ietf-dnsop-session-signal], possibly
   followed by one or more optional modifier TLVs such as a Terminate
   modifier TLV [I-D.ietf-dnsop-session-signal].

                                             1  1  1  1  1  1
               0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                  MESSAGE ID                   |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |QR|   Opcode  |          Z         |   RCODE   |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

                                 Figure 2

   The MESSAGE ID field MUST echo the value given in the ID field of the
   SUBSCRIBE request.  This is how the client knows which request is
   being responded to.

   In a response the DNS Header QR bit MUST be one.
   If the QR bit is not one the message is not a response.

   The DNS Header Opcode field holds the Session Signaling Opcode value
   (tentatively 6).

   The Z bits MUST be zero on transmission, and MUST be silently ignored
   on reception.



















Pusateri & Cheshire        Expires May 4, 2017                 [Page 14]

Internet-Draft           DNS Push Notifications             October 2016


   In the SUBSCRIBE response the RCODE indicates whether or not the
   subscription was accepted.  Supported RCODEs are as follows:

   +------------+-------+----------------------------------------------+
   | Mnemonic   | Value | Description                                  |
   +------------+-------+----------------------------------------------+
   | NOERROR    |   0   | SUBSCRIBE successful.                        |
   | FORMERR    |   1   | Server failed to process request due to a    |
   |            |       | malformed request.                           |
   | SERVFAIL   |   2   | Server failed to process request due to      |
   |            |       | resource exhaustion.                         |
   | NXDOMAIN   |   3   | NOT APPLICABLE. DNS Push Notification        |
   |            |       | servers MUST NOT return NXDOMAIN errors in   |
   |            |       | response to SUBSCRIBE requests.              |
   | NOTIMP     |   4   | Server does not recognize DNS Session        |
   |            |       | Signaling Opcode.                            |
   | REFUSED    |   5   | Server refuses to process request for policy |
   |            |       | or security reasons.                         |
   | NOTAUTH    |   9   | Server is not authoritative for the          |
   |            |       | requested name.                              |
   | SSOPNOTIMP |   11  | SUBSCRIBE operation not supported.           |
   +------------+-------+----------------------------------------------+

                         SUBSCRIBE Response codes

   This document specifies only these RCODE values for SUBSCRIBE
   Responses.  Servers sending SUBSCRIBE Responses SHOULD use one of
   these values.  However, future circumstances may create situations
   where other RCODE values are appropriate in SUBSCRIBE Responses, so
   clients MUST be prepared to accept SUBSCRIBE Responses with any RCODE
   value.




















Pusateri & Cheshire        Expires May 4, 2017                 [Page 15]

Internet-Draft           DNS Push Notifications             October 2016


   If the server sends a nonzero RCODE in the SUBSCRIBE response, either
   the client is (at least partially) misconfigured or the server
   resources are exhausted.  In either case, the client shouldn't retry
   the subscription right away.  Either end can terminate the
   connection, but the client may want to try this subscription again or
   it may have other successful subscriptions that it doesn't want to
   abandon.  If the server sends a nonzero RCODE then it SHOULD append a
   Terminate modifier TLV [I-D.ietf-dnsop-session-signal] to the
   response specifying a delay before the client attempts this operation
   again.  Recommended values for the delay for different RCODE values
   are given below:

      For RCODE = 1 (FORMERR) the delay may be any value selected by the
      implementer.  A value of five minutes is RECOMMENDED, to avoid
      high load from defective clients.

      For RCODE = 2 (SERVFAIL), which occurs due to resource exhaustion,
      the delay should be chosen according to the level of server
      overload and the anticipated duration of that overload.  By
      default, a value of one minute is RECOMMENDED.

      For RCODE = 4 (NOTIMP), which occurs on a server that doesn't
      implement DNS Session Signaling [I-D.ietf-dnsop-session-signal],
      it is unlikely that the server will begin supporting DNS Session
      Signaling in the next few minutes, so the retry delay SHOULD be
      one hour.

      For RCODE = 5 (REFUSED), which occurs on a server that implements
      DNS Push Notifications, but is currently configured to disallow
      DNS Push Notifications, the retry delay may be any value selected
      by the implementer and/or configured by the operator.
      This is a misconfiguration, since this server is listed in a
      "_dns-push-tls._tcp.<zone>" SRV record, but the server itself is
      not currently configured to support DNS Push Notifications.  Since
      it is possible that the misconfiguration may be repaired at any
      time, the retry delay should not be set too high.  By default, a
      value of 5 minutes is RECOMMENDED.

      For RCODE = 9 (NOTAUTH), which occurs on a server that implements
      DNS Push Notifications, but is not configured to be authoritative
      for the requested name, the retry delay may be any value selected
      by the implementer and/or configured by the operator.
      This is a misconfiguration, since this server is listed in a
      "_dns-push-tls._tcp.<zone>" SRV record, but the server itself is
      not currently configured to support DNS Push Notifications for
      that zone.  Since it is possible that the misconfiguration may be
      repaired at any time, the retry delay should not be set too high.
      By default, a value of 5 minutes is RECOMMENDED.



Pusateri & Cheshire        Expires May 4, 2017                 [Page 16]

Internet-Draft           DNS Push Notifications             October 2016


      For RCODE = 11 (DNS Push SUBSCRIBE operation not supported), which
      occurs on a server that doesn't implement DNS Push Notifications,
      it is unlikely that the server will begin supporting DNS Push
      Notifications in the next few minutes, so the retry delay SHOULD
      be one hour.

      For other RCODE values, the retry delay should be set by the
      server as appropriate for that error condition.  By default, a
      value of 5 minutes is RECOMMENDED.

   For RCODE = 9 (NOTAUTH), the time delay applies to requests for other
   names falling within the same zone.  Requests for names falling
   within other zones are not subject to the delay.  For all other
   RCODEs the time delay applies to all subsequent requests to this
   server.

   After sending an error response the server MAY allow the connection
   to remain open, or MAY send a DNS Push Notification Terminate Session
   operation TLV and then close the TCP connection, as described in the
   DNS Session Signaling specification [I-D.ietf-dnsop-session-signal].
   Clients MUST correctly handle both cases.






























Pusateri & Cheshire        Expires May 4, 2017                 [Page 17]

Internet-Draft           DNS Push Notifications             October 2016


6.3.  DNS Push Notification Update Messages

   Once a subscription has been successfully established, the server
   generates PUSH messages to send to the client as appropriate.  An
   initial PUSH message will be sent immediately in the case that the
   answer set was non-empty at the moment the subscription was
   established.  Subsequent changes to the answer set are then
   communicated to the client in subsequent PUSH messages.

6.3.1.  PUSH Message format

   A PUSH message begins with the standard DNS Session Signaling 4-byte
   header [I-D.ietf-dnsop-session-signal], followed by the PUSH TLV.

   The format of PUSH messages borrows from the existing DNS Update
   [RFC2136] protocol, with some simplifications.

                                             1  1  1  1  1  1
               0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                  MESSAGE ID                   |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |QR|   Opcode  |          Z         |   RCODE   |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |               SSOP-TYPE (PUSH)                |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                  SSOP-LENGTH                  |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                    UPCOUNT                    |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                                               |
             \              Resource Records...              \
             \                                               \
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

                                 Figure 3

   The MESSAGE ID field MUST be set to zero on transmission, and
   silently ignored on reception.  A PUSH message could potentially
   match more than one subscription, or could relate to a subscription
   that the client has just cancelled with an UNSUBSCRIBE message, so
   the MESSAGE ID field serves no useful purpose.

   In a PUSH message the DNS Header QR bit MUST be zero.

   The DNS Header Opcode field holds the Session Signaling Opcode value
   (tentatively 6).




Pusateri & Cheshire        Expires May 4, 2017                 [Page 18]

Internet-Draft           DNS Push Notifications             October 2016


   The Z bits MUST be zero on transmission, and MUST be silently ignored
   on reception.

   The return code (RCODE) field MUST be set to 0 in a request.

   In the PUSH message TLV the SSOP-TYPE is PUSH (tentatively 65).  The
   SSOP-LENGTH is the length of the SSOP-DATA that follows.

   The SSOP-DATA contains a two-byte count of the number of records that
   follow, followed by the records, in customary Resource Record format
   (as used in DNS Update [RFC2136] messages).

   The SSOP-DATA contains the relevant change information for the
   client, formatted identically to a DNS Update [RFC2136].  To recap:

      Delete all RRsets from a name:
      TTL=0, CLASS=ANY, RDLENGTH=0, TYPE=ANY.

      Delete an RRset from a name:
      TTL=0, CLASS=ANY, RDLENGTH=0;
      TYPE specifies the RRset being deleted.

      Delete an individual RR from a name:
      TTL=0, CLASS=NONE;
      TYPE, RDLENGTH and RDATA specifies the RR being deleted.

      Add to an RRset:
      TTL, CLASS, TYPE, RDLENGTH and RDATA specifies the RR being added.

   When processing the records received in a PUSH Message, the receiving
   client MUST validate that the records being added or deleted
   correspond with at least one currently active subscription on that
   connection.  Specifically, the record name MUST match the name given
   in the SUBSCRIBE request, subject to the usual established DNS case-
   insensitivity for US-ASCII letters.  If the QTYPE in the SUBSCRIBE
   request was not ANY (255) then the TYPE of the record must match the
   QTYPE given in the SUBSCRIBE request.  If the QCLASS in the SUBSCRIBE
   request was not ANY (255) then the CLASS of the record must match the
   QCLASS given in the SUBSCRIBE request.  If a matching active
   subscription on that connection is not found, then that individual
   record addition/deletion is silently ignored.  Processing of other
   additions and deletions in this message is not affected.  The TCP
   connection is not closed.  This is to allow for the unavoidable race
   condition where a client sends an outbound UNSUBSCRIBE while inbound
   PUSH messages for that subscription from the server are still in
   flight.





Pusateri & Cheshire        Expires May 4, 2017                 [Page 19]

Internet-Draft           DNS Push Notifications             October 2016


   In the case where a single change affects more than one active
   subscription, only one PUSH message is sent.  For example, a PUSH
   message adding a given record may match both a SUBSCRIBE request with
   the same QTYPE and a different SUBSCRIBE request with QTYPE=ANY.  It
   is not the case that two PUSH messages are sent because the new
   record matches two active subscriptions.

   The server SHOULD encode change notifications in the most efficient
   manner possible.  For example, when three AAAA records are deleted
   from a given name, and no other AAAA records exist for that name, the
   server SHOULD send a "delete an RRset from a name" PUSH message, not
   three separate "delete an individual RR from a name" PUSH messages.
   Similarly, when both an SRV and a TXT record are deleted from a given
   name, and no other records of any kind exist for that name, the
   server SHOULD send a "delete all RRsets from a name" PUSH message,
   not two separate "delete an RRset from a name" PUSH messages.

   A server SHOULD combine multiple change notifications in a single
   PUSH message when possible, even if those change notifications apply
   to different subscriptions.  Conceptually, a PUSH messages is a
   connection-level concept, not a subscription-level concept.

   Reception of a PUSH message does not directly generate a response
   back to the server.  (Updates may indirectly generate other
   operations; e.g., a Push Notification Update Message declaring the
   appearance of a PTR record could lead to a query for the SRV record
   named in the rdata of that PTR record [RFC6763].)

   The TTL of an added record is stored by the client and decremented as
   time passes, with the caveat that for as long as a relevant
   subscription is active, the TTL does not decrement below 1 second.
   For as long as a relevant subscription remains active, the client
   SHOULD assume that when a record goes away the server will notify it
   of that fact.  Consequently, a client does not have to poll to verify
   that the record is still there.  Once a subscription is cancelled
   (individually, or as a result of the TCP connection being closed)
   record ageing resumes and records are removed from the local cache
   when their TTL reaches zero.













Pusateri & Cheshire        Expires May 4, 2017                 [Page 20]

Internet-Draft           DNS Push Notifications             October 2016


6.4.  DNS Push Notification UNSUBSCRIBE

   To cancel an individual subscription without closing the entire
   connection, the client sends an UNSUBSCRIBE message over the
   established TCP connection to the server.  The UNSUBSCRIBE message is
   encoded in a DNS Session Signaling [I-D.ietf-dnsop-session-signal]
   message.  This specification defines a new DNS Session Signaling TLV
   for DNS Push Notification UNSUBSCRIBE Requests/Responses (tentatively
   Session Signaling Type Code 66).

   A server may not initiate an UNSUBSCRIBE request.








































Pusateri & Cheshire        Expires May 4, 2017                 [Page 21]

Internet-Draft           DNS Push Notifications             October 2016


6.4.1.  UNSUBSCRIBE Request

   An UNSUBSCRIBE request message begins with the standard DNS Session
   Signaling 4-byte header [I-D.ietf-dnsop-session-signal], followed by
   the UNSUBSCRIBE TLV.

                                             1  1  1  1  1  1
               0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                  MESSAGE ID                   |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |QR|   Opcode  |          Z         |   RCODE   |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |            SSOP-TYPE (UNSUBSCRIBE)            |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                SSOP-LENGTH (0)                |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

                                 Figure 4

   The MESSAGE ID field MUST match the value given in the ID field of an
   active SUBSCRIBE request.  This is how the server knows which
   SUBSCRIBE request is being cancelled.  After receipt of the
   UNSUBSCRIBE request, the SUBSCRIBE request is no longer active.  If a
   server receives an UNSUBSCRIBE message where the MESSAGE ID does not
   match the ID of an active SUBSCRIBE request this is an error and the
   the server MUST return a response containing RCODE = 1 (FORMERR).  In
   the UNSUBSCRIBE response the server MUST echo back the MESSAGE ID
   value unchanged.  It is allowable for the client to issue an
   UNSUBSCRIBE request for a previous SUBSCRIBE request for which the
   client has not yet received a SUBSCRIBE response.  This is to allow
   for the case where a client starts and stops a subscription in less
   than the round-trip time to the server.  The client is NOT required
   to wait for the SUBSCRIBE response before issuing the UNSUBSCRIBE
   request.

   In a request the DNS Header QR bit MUST be zero.

   The DNS Header Opcode field holds the Session Signaling Opcode value
   (tentatively 6).

   The Z bits MUST be zero on transmission, and MUST be silently ignored
   on reception.

   The return code (RCODE) field MUST be set to 0 in a request.

   In the UNSUBSCRIBE TLV the SSOP-TYPE is UNSUBSCRIBE (tentatively 66).




Pusateri & Cheshire        Expires May 4, 2017                 [Page 22]

Internet-Draft           DNS Push Notifications             October 2016


   The SSOP-LENGTH is zero.


















































Pusateri & Cheshire        Expires May 4, 2017                 [Page 23]

Internet-Draft           DNS Push Notifications             October 2016


6.4.2.  UNSUBSCRIBE Response

   Each UNSUBSCRIBE request generates exactly one UNSUBSCRIBE response
   from the server.

   An UNSUBSCRIBE response message contains with the standard DNS
   Session Signaling 4-byte header [I-D.ietf-dnsop-session-signal].

                                             1  1  1  1  1  1
               0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                  MESSAGE ID                   |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |QR|   Opcode  |          Z         |   RCODE   |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

                                 Figure 5

   The MESSAGE ID field MUST echo the value given in the ID field of the
   UNSUBSCRIBE request.  This is how the client knows which request is
   being responded to.

   In a response the DNS Header QR bit MUST be one.
   If the QR bit is not one the message is not a response.

   The DNS Header Opcode field holds the Session Signaling Opcode value
   (tentatively 6).

   The Z bits MUST be zero on transmission, and MUST be silently ignored
   on reception.

   In the UNSUBSCRIBE response the RCODE indicates whether or not the
   unsubscribe request was successful.  Supported RCODEs are as follows:

   +------------+-------+----------------------------------------------+
   | Mnemonic   | Value | Description                                  |
   +------------+-------+----------------------------------------------+
   | NOERROR    |   0   | UNSUBSCRIBE successful.                      |
   | FORMERR    |   1   | Server failed to process request due to a    |
   |            |       | malformed request.                           |
   | NOTIMP     |   4   | Server does not recognize DNS Session        |
   |            |       | Signaling Opcode.                            |
   | SSOPNOTIMP |   11  | UNSUBSCRIBE operation not supported.         |
   +------------+-------+----------------------------------------------+

                        UNSUBSCRIBE Response codes





Pusateri & Cheshire        Expires May 4, 2017                 [Page 24]

Internet-Draft           DNS Push Notifications             October 2016


   This document specifies only these RCODE values for UNSUBSCRIBE
   Responses.  Servers sending UNSUBSCRIBE Responses SHOULD use one of
   these values.  However, future circumstances may create situations
   where other RCODE values are appropriate in UNSUBSCRIBE Responses, so
   clients MUST be prepared to accept UNSUBSCRIBE Responses with any
   RCODE value.

   Having being successfully revoked with a correctly-formatted
   UNSUBSCRIBE message (resulting in a response with RCODE NOERROR) the
   previously referenced subscription is no longer active and the server
   MAY discard the state associated with it immediately, or later, at
   the server's discretion.

   Nonzero RCODE values signal some kind of error.

   RCODE value FORMERR indicates an incorrect MESSAGE ID or other
   message format error.

   RCODE values NOTIMP and SSOPNOTIMP should not occur in practice.

   A server would only generate NOTIMP if it did not support Session
   Signaling, and if the server does not support Session Signaling then
   it should not be possible for a client to have an active subscription
   to cancel.

   Similarly, a server would only generate SSOPNOTIMP if it did not
   support Push Notifications, and if the server does not support Push
   Notifications then it should not be possible for a client to have an
   active subscription to cancel.

   All nonzero RCODE values indicate a serious problem with the client.
   After sending an error response, the server SHOULD send a DNS Push
   Notification Terminate Session operation TLV and then close the TCP
   connection, as described in the DNS Session Signaling specification
   [I-D.ietf-dnsop-session-signal].
















Pusateri & Cheshire        Expires May 4, 2017                 [Page 25]

Internet-Draft           DNS Push Notifications             October 2016


6.5.  DNS Session Signaling Push Notification RECONFIRM

   Sometimes, particularly when used with a Hybrid Proxy
   [I-D.ietf-dnssd-hybrid], a DNS Zone may contain stale data.  When a
   client encounters data that it believe may be stale (e.g., an SRV
   record referencing a target host+port that is not responding to
   connection requests) the client can send a RECONFIRM message to
   request that the server re-verify that the data is still valid.  For
   a Hybrid Proxy, this causes it to issue new Multicast DNS requests to
   ascertain whether the target device is still present.  For other
   types of DNS server, the RECONFIRM operation is currently undefined
   and SHOULD be silently ignored.

   A RECONFIRM request is formatted identically to a SUBSCRIBE request,
   except that the TLV type is RECONFIRM (tentatively 67) instead of
   SUBSCRIBE.  Additionally, QTYPE MUST NOT be the value ANY (255) and
   QCLASS MUST NOT be the value ANY (255).

   Like all DNS Session Signaling [I-D.ietf-dnsop-session-signal]
   requests, a RECONFIRM request MUST contain a unique MESSAGE ID, not
   currently in use in this session.

   A RECONFIRM request generates exactly one RECONFIRM response from the
   server, formatted identically to a SUBSCRIBE response, which echoes
   back the unique MESSAGE ID from the RECONFIRM request.

   In the RECONFIRM response the RCODE indicates whether or not the
   request was successful.  Supported RCODEs are as follows:

   +------------+-------+----------------------------------------------+
   | Mnemonic   | Value | Description                                  |
   +------------+-------+----------------------------------------------+
   | NOERROR    |   0   | RECONFIRM successful.                        |
   | FORMERR    |   1   | Server failed to process request due to a    |
   |            |       | malformed request.                           |
   | NOTIMP     |   4   | Server does not recognize DNS Session        |
   |            |       | Signaling Opcode.                            |
   | SSOPNOTIMP |   11  | RECONFIRM operation not supported.           |
   +------------+-------+----------------------------------------------+

                         RECONFIRM Response codes

   This document specifies only these RCODE values for RECONFIRM
   Responses.  Servers sending RECONFIRM Responses SHOULD use one of
   these values.  However, future circumstances may create situations
   where other RCODE values are appropriate in RECONFIRM Responses, so
   clients MUST be prepared to accept RECONFIRM Responses with any RCODE
   value.



Pusateri & Cheshire        Expires May 4, 2017                 [Page 26]

Internet-Draft           DNS Push Notifications             October 2016


   A correctly-formatted RECONFIRM message results in a response with
   RCODE NOERROR.

   Nonzero RCODE values signal some kind of error.  If the server sends
   a nonzero RCODE then it SHOULD append a Terminate modifier TLV
   [I-D.ietf-dnsop-session-signal] to the response specifying a delay
   before the client attempts this operation again.  The RECOMMENDED
   value for the delay is five minutes.  For serious errors, after
   sending the error response, the server SHOULD send a DNS Push
   Notification Terminate Session operation TLV and then close the TCP
   connection, as described in the DNS Session Signaling specification
   [I-D.ietf-dnsop-session-signal].

   If, after receiving a valid RECONFIRM request, the server determines
   that the records are in fact no longer valid, then subsequent DNS
   PUSH Messages will be generated to inform interested clients.  Thus,
   one client discovering that a previously-advertised printer is no
   longer present has the side effect of informing all other interested
   clients that the printer in question is now gone.
































Pusateri & Cheshire        Expires May 4, 2017                 [Page 27]

Internet-Draft           DNS Push Notifications             October 2016


6.6.  Client-Initiated Termination

   An individual subscription is terminated by sending an UNSUBSCRIBE
   TLV for that specific subscription, or all subscriptions can be
   cancelled at once by the client closing the connection.  When a
   client terminates an individual subscription (via UNSUBSCRIBE) or all
   subscriptions on that connection (by closing the connection) it is
   signaling to the server that it is longer interested in receiving
   those particular updates.  It is informing the server that the server
   may release any state information it has been keeping with regards to
   these particular subscriptions.

   After terminating its last subscription on a connection via
   UNSUBSCRIBE, a client MAY close the connection immediately, or it may
   keep it open if it anticipates performing further operations on that
   connection in the future.  If a client wishes to keep an idle
   connection open, it MUST continue to meet its keepalive obligations
   [I-D.ietf-dnsop-session-signal] or the server is entitled to close
   the connection (see below).

   If a client plans to terminate one or more subscriptions on a
   connection and doesn't intend to keep that connection open, then as
   an efficiency optimization it MAY instead choose to simply close the
   connection, which implicitly terminates all subscriptions on that
   connection.  This may occur because the client computer is being shut
   down, is going to sleep, the application requiring the subscriptions
   has terminated, or simply because the last active subscription on
   that connection has been cancelled.

   When closing a connection, a client will generally do an abortive
   disconnect, sending a TCP RST.  This immediately discards all
   remaining inbound and outbound data, which is appropriate if the
   client no longer has any interest in this data.  In the BSD Sockets
   API, sending a TCP RST is achieved by setting the SO_LINGER option
   with a time of 0 seconds and then closing the socket.

   If a client has performed operations on this connection that it would
   not want lost (like DNS updates) then the client SHOULD do an orderly
   disconnect, sending a TCP FIN.  In the BSD Sockets API, sending a TCP
   FIN is achieved by calling "shutdown(s,SHUT_WR)" and keeping the
   socket open until all remaining data has been read from it.

7.  Security Considerations

   TLS support is REQUIRED in DNS Push Notifications.  There is no
   provision for opportunistic encryption using a mechanism like
   "STARTTLS".




Pusateri & Cheshire        Expires May 4, 2017                 [Page 28]

Internet-Draft           DNS Push Notifications             October 2016


   DNSSEC is RECOMMENDED for DNS Push Notifications.  TLS alone does not
   provide complete security.  TLS certificate verification can provide
   reasonable assurance that the client is really talking to the server
   associated with the desired host name, but since the desired host
   name is learned via a DNS SRV query, if the SRV query is subverted
   then the client may have a secure connection to a rogue server.
   DNSSEC can provided added confidence that the SRV query has not been
   subverted.

7.1.  Security Services

   It is the goal of using TLS to provide the following security
   services:

   Confidentiality:  All application-layer communication is encrypted
      with the goal that no party should be able to decrypt it except
      the intended receiver.

   Data integrity protection:  Any changes made to the communication in
      transit are detectable by the receiver.

   Authentication:  An end-point of the TLS communication is
      authenticated as the intended entity to communicate with.

   Deployment recommendations on the appropriate key lengths and cypher
   suites are beyond the scope of this document.  Please refer to TLS
   Recommendations [RFC7525] for the best current practices.  Keep in
   mind that best practices only exist for a snapshot in time and
   recommendations will continue to change.  Updated versions or errata
   may exist for these recommendations.

7.2.  TLS Name Authentication

   As described in Section 6.1, the client discovers the DNS Push
   Notification server using an SRV lookup for the record name
   "_dns-push-tls._tcp.<zone>".  The server connection endpoint SHOULD
   then be authenticated using DANE TLSA records for the associated SRV
   record.  This associates the target's name and port number with a
   trusted TLS certificate [RFC7673].  This procedure uses the TLS Sever
   Name Indication (SNI) extension [RFC6066] to inform the server of the
   name the client has authenticated through the use of TLSA records.
   Therefore, if the SRV record passes DNSSEC validation and a TLSA
   record matching the target name is useable, an SNI extension MUST be
   used for the target name to ensure the client is connecting to the
   server it has authenticated.  If the target name does not have a
   usable TLSA record, then the use of the SNI extension is optional.





Pusateri & Cheshire        Expires May 4, 2017                 [Page 29]

Internet-Draft           DNS Push Notifications             October 2016


7.3.  TLS Compression

   In order to reduce the chances of compression-related attacks, TLS-
   level compression SHOULD be disabled when using TLS versions 1.2 and
   earlier.  In the draft version of TLS 1.3 [I-D.ietf-tls-tls13], TLS-
   level compression has been removed completely.

7.4.  TLS Session Resumption

   TLS Session Resumption is permissible on DNS Push Notification
   servers.  The server may keep TLS state with Session IDs [RFC5246] or
   operate in stateless mode by sending a Session Ticket [RFC5077] to
   the client for it to store.  However, once the connection is closed,
   any existing subscriptions will be dropped.  When the TLS session is
   resumed, the DNS Push Notification server will not have any
   subscription state and will proceed as with any other new connection.
   Use of TLS Session Resumption allows a new TLS connection to be set
   up more quickly, but the client will still have to recreate any
   desired subscriptions.

8.  IANA Considerations

   This document defines the service name: "_dns-push-tls._tcp".
   It is only applicable for the TCP protocol.
   This name is to be published in the IANA Service Name Registry.

   This document defines three DNS Session Signaling TLV types:
   SUBSCRIBE with (tentative) value 64, PUSH with (tentative) value 65,
   UNSUBSCRIBE with (tentative) value 66, and RECONFIRM with (tentative)
   value 67.

9.  Acknowledgements

   The authors would like to thank Kiren Sekar and Marc Krochmal for
   previous work completed in this field.

   This draft has been improved due to comments from Ran Atkinson, Tim
   Chown, Mark Delany, Ralph Droms, Bernie Volz, Jan Komissar, Manju
   Shankar Rao, Markus Stenberg, Dave Thaler, and Soraia Zlatkovic.












Pusateri & Cheshire        Expires May 4, 2017                 [Page 30]

Internet-Draft           DNS Push Notifications             October 2016


10.  References

10.1.  Normative References

   [I-D.ietf-dnsop-session-signal]
              Bellis, R., Cheshire, S., Dickinson, J., Dickinson, S.,
              Mankin, A., and T. Pusateri, "DNS Session Signaling",
              draft-ietf-dnsop-session-signal-00 (work in progress),
              August 2016.

   [I-D.ietf-tls-tls13]
              Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", draft-ietf-tls-tls13-18 (work in progress),
              October 2016.

   [RFC0768]  Postel, J., "User Datagram Protocol", STD 6, RFC 768,
              DOI 10.17487/RFC0768, August 1980,
              <http://www.rfc-editor.org/info/rfc768>.

   [RFC0793]  Postel, J., "Transmission Control Protocol", STD 7,
              RFC 793, DOI 10.17487/RFC0793, September 1981,
              <http://www.rfc-editor.org/info/rfc793>.

   [RFC1034]  Mockapetris, P., "Domain names - concepts and facilities",
              STD 13, RFC 1034, DOI 10.17487/RFC1034, November 1987,
              <http://www.rfc-editor.org/info/rfc1034>.

   [RFC1035]  Mockapetris, P., "Domain names - implementation and
              specification", STD 13, RFC 1035, DOI 10.17487/RFC1035,
              November 1987, <http://www.rfc-editor.org/info/rfc1035>.

   [RFC1123]  Braden, R., Ed., "Requirements for Internet Hosts -
              Application and Support", STD 3, RFC 1123,
              DOI 10.17487/RFC1123, October 1989,
              <http://www.rfc-editor.org/info/rfc1123>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC2136]  Vixie, P., Ed., Thomson, S., Rekhter, Y., and J. Bound,
              "Dynamic Updates in the Domain Name System (DNS UPDATE)",
              RFC 2136, DOI 10.17487/RFC2136, April 1997,
              <http://www.rfc-editor.org/info/rfc2136>.






Pusateri & Cheshire        Expires May 4, 2017                 [Page 31]

Internet-Draft           DNS Push Notifications             October 2016


   [RFC2782]  Gulbrandsen, A., Vixie, P., and L. Esibov, "A DNS RR for
              specifying the location of services (DNS SRV)", RFC 2782,
              DOI 10.17487/RFC2782, February 2000,
              <http://www.rfc-editor.org/info/rfc2782>.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,
              DOI 10.17487/RFC5246, August 2008,
              <http://www.rfc-editor.org/info/rfc5246>.

   [RFC6066]  Eastlake 3rd, D., "Transport Layer Security (TLS)
              Extensions: Extension Definitions", RFC 6066,
              DOI 10.17487/RFC6066, January 2011,
              <http://www.rfc-editor.org/info/rfc6066>.

   [RFC6895]  Eastlake 3rd, D., "Domain Name System (DNS) IANA
              Considerations", BCP 42, RFC 6895, DOI 10.17487/RFC6895,
              April 2013, <http://www.rfc-editor.org/info/rfc6895>.

   [RFC7673]  Finch, T., Miller, M., and P. Saint-Andre, "Using DNS-
              Based Authentication of Named Entities (DANE) TLSA Records
              with SRV Records", RFC 7673, DOI 10.17487/RFC7673, October
              2015, <http://www.rfc-editor.org/info/rfc7673>.

   [RFC7766]  Dickinson, J., Dickinson, S., Bellis, R., Mankin, A., and
              D. Wessels, "DNS Transport over TCP - Implementation
              Requirements", RFC 7766, DOI 10.17487/RFC7766, March 2016,
              <http://www.rfc-editor.org/info/rfc7766>.

10.2.  Informative References

   [I-D.dukkipati-tcpm-tcp-loss-probe]
              Dukkipati, N., Cardwell, N., Cheng, Y., and M. Mathis,
              "Tail Loss Probe (TLP): An Algorithm for Fast Recovery of
              Tail Losses", draft-dukkipati-tcpm-tcp-loss-probe-01 (work
              in progress), February 2013.

   [I-D.ietf-dnssd-hybrid]
              Cheshire, S., "Hybrid Unicast/Multicast DNS-Based Service
              Discovery", draft-ietf-dnssd-hybrid-03 (work in progress),
              February 2016.

   [I-D.sekar-dns-llq]
              Sekar, K., "DNS Long-Lived Queries", draft-sekar-dns-
              llq-01 (work in progress), August 2006.






Pusateri & Cheshire        Expires May 4, 2017                 [Page 32]

Internet-Draft           DNS Push Notifications             October 2016


   [IPJ.9-4-TCPSYN]
              Eddy, W., "Defenses Against TCP SYN Flooding Attacks", The
              Internet Protocol Journal, Cisco Systems, Volume 9,
              Number 4, December 2006.

   [obs]      "Observer Pattern", <https://en.wikipedia.org/wiki/
              Observer_pattern>.

   [RFC1996]  Vixie, P., "A Mechanism for Prompt Notification of Zone
              Changes (DNS NOTIFY)", RFC 1996, DOI 10.17487/RFC1996,
              August 1996, <http://www.rfc-editor.org/info/rfc1996>.

   [RFC4287]  Nottingham, M., Ed. and R. Sayre, Ed., "The Atom
              Syndication Format", RFC 4287, DOI 10.17487/RFC4287,
              December 2005, <http://www.rfc-editor.org/info/rfc4287>.

   [RFC4953]  Touch, J., "Defending TCP Against Spoofing Attacks",
              RFC 4953, DOI 10.17487/RFC4953, July 2007,
              <http://www.rfc-editor.org/info/rfc4953>.

   [RFC5077]  Salowey, J., Zhou, H., Eronen, P., and H. Tschofenig,
              "Transport Layer Security (TLS) Session Resumption without
              Server-Side State", RFC 5077, DOI 10.17487/RFC5077,
              January 2008, <http://www.rfc-editor.org/info/rfc5077>.

   [RFC6762]  Cheshire, S. and M. Krochmal, "Multicast DNS", RFC 6762,
              DOI 10.17487/RFC6762, February 2013,
              <http://www.rfc-editor.org/info/rfc6762>.

   [RFC6763]  Cheshire, S. and M. Krochmal, "DNS-Based Service
              Discovery", RFC 6763, DOI 10.17487/RFC6763, February 2013,
              <http://www.rfc-editor.org/info/rfc6763>.

   [RFC6824]  Ford, A., Raiciu, C., Handley, M., and O. Bonaventure,
              "TCP Extensions for Multipath Operation with Multiple
              Addresses", RFC 6824, DOI 10.17487/RFC6824, January 2013,
              <http://www.rfc-editor.org/info/rfc6824>.

   [RFC7413]  Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, "TCP
              Fast Open", RFC 7413, DOI 10.17487/RFC7413, December 2014,
              <http://www.rfc-editor.org/info/rfc7413>.

   [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,
              "Recommendations for Secure Use of Transport Layer
              Security (TLS) and Datagram Transport Layer Security
              (DTLS)", BCP 195, RFC 7525, DOI 10.17487/RFC7525, May
              2015, <http://www.rfc-editor.org/info/rfc7525>.




Pusateri & Cheshire        Expires May 4, 2017                 [Page 33]

Internet-Draft           DNS Push Notifications             October 2016


   [RFC7858]  Hu, Z., Zhu, L., Heidemann, J., Mankin, A., Wessels, D.,
              and P. Hoffman, "Specification for DNS over Transport
              Layer Security (TLS)", RFC 7858, DOI 10.17487/RFC7858, May
              2016, <http://www.rfc-editor.org/info/rfc7858>.

   [XEP0060]  Millard, P., Saint-Andre, P., and R. Meijer, "Publish-
              Subscribe", XSF XEP 0060, July 2010.

Authors' Addresses

   Tom Pusateri
   Seeking affiliation
   Hilton Head Island, SC
   USA

   Phone: +1 843 473 7394
   Email: pusateri@bangj.com


   Stuart Cheshire
   Apple Inc.
   1 Infinite Loop
   Cupertino, CA  95014
   USA

   Phone: +1 408 974 3207
   Email: cheshire@apple.com
























Pusateri & Cheshire        Expires May 4, 2017                 [Page 34]
