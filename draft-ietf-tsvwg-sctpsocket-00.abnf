sd = socket(PF_INET, SOCK_SEQPACKET, IPPROTO_SCTP);

sd = socket(PF_INET6, SOCK_SEQPACKET, IPPROTO_SCTP);

ret = bind(int sd, struct sockaddr *addr, int addrlen);

ret = close(int sd);

       sd      - the socket descriptor of the associations to be closed.

sd = socket(PF_INET, SOCK_STREAM, IPPROTO_SCTP);

sd = socket(PF_INET6, SOCK_STREAM, IPPROTO_SCTP);

ret = bind(int sd, struct sockaddr *addr, int addrlen);

      sd      - the socket descriptor returned by socket() call.
      addr    - the address structure (either struct sockaddr_in or struct
                sockaddr_in6 defined in [RFC 2553]).
      addrlen - the size of the address structure.
ret = listen(int sd, int backlog);

      sd      - the socket descriptor of the SCTP endpoint.
      backlog - this specifies the max number of outstanding associations
                allowed in the socket's accept queue.  These are the
                associations that have finished the four-way initiation
                handshake (see Section 5 of [SCTP]) and are in the
                ESTABLISHED state.

new_sd = accept(int sd, struct sockaddr *addr, socklen_t *addrlen);

ret = connect(int sd, const struct sockaddr *addr, int addrlen);

      sd      - the socket descriptor of the endpoint.
      addr    - the peer's address.
      addrlen - the size of the address.

ret = close(int sd);

      sd      - the socket descriptor of the association to be closed.

cmsgptr = CMSG_NXTHDR(&msg, cmsgptr)) {
ptr = CMSG_DATA(cmsgptr);
total = CMSG_SPACE(sizeof (struct sctp_sndrcvinfo)) +
            CMSG_SPACE(sizeof (struct in6_pktinfo));
buf = malloc(total);

ret = getsockopt(int sd, int level, int optname, void *optval,
                     size_t *optlen);
ret = setsockopt(int sd, int level, int optname, const void *optval,
                     size_t optlen);

      sd      - the socket descript.
      level   - set to IPPROTO_SCTP for all SCTP options.
      optname - the option name.
      optval  - the buffer to store the value of the option.
      optlen  - the size of the buffer (or the length of  the option
                returned).

new_sd = sctp_peeloff(int sd, sctp_assoc_t *assoc_id, int *addrlen)

snp = buf;

sac = &snp->sn_assoc_change;
ssf = &snp->sn_send_failed;
spc = &snp->sn_intf_change;
sin = (struct sockaddr_in *)&spc->spc_addr;
ap = inet_ntop(AF_INET, &sin->sin_addr, addrbuf,
                            INET6_ADDRSTRLEN);
sin6 = (struct sockaddr_in6 *)&spc->spc_addr;
ap = inet_ntop(AF_INET6, &sin6->sin6_addr, addrbuf,
                            INET6_ADDRSTRLEN);
sre = &snp->sn_remote_error;
buf = realloc(buf, *buflen * 2);
buflen = BUFLEN;
cmsg = (struct cmsghdr *)cbuf;
sri = (struct sctp_sndrcvinfo *)(cmsg + 1);

