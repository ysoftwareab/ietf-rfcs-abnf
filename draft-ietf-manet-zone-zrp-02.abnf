A  ===> B      information passed from protocol A to protocol B

next_hop_1=dest
best_route = get_shortest_route(Intrazone_Routing_Table,d)
mask       = get_mask(Intrazone_Routing_Table, d)
hop_count=1
hop_count=INF
former_best_route = get_shortest_route(Intrazone_Routing_Table,dest)

link_metric  = get_metric(Intrazone_Routing_Table, next_hop_1)
route_metric = add_metric(route_metric, link_metric)
best_route = get_shortest_route(Intrazone_Routing_Table,dest)
my_link_changed = FALSE
link_source = MY_ID
pk_source   = MY_ID
state_id    = MY_LINK_STATE_ID
radius      = MY_ROUTING_ZONE_RADIUS

full_link_state = 0
current_update  = COMPLETE
all_updates     = COMPLETE

link_status = UP
link_status = DOWN

my_link_changed = TRUE
status = add(Link_State_Table,link_source, link_dest, mask, radius,
                     link_metric, state_id, flags)
cum_status = UPDATE_IN_PROGRESS
cum_status == UPDATE_IN_PROGRESS)
rebuild = TRUE;
rebuild = update(Link_State_Table);
cum_status = UPDATE_COMPLETE;

upstream   = 0
downstream = 1

num_dests = |dests|
num_nodes = |routes|

repair_link = FALSE
removal_timer = ROUTE_QUERY_TIMEOUT
repair_link = TRUE
removal_timer = 0
dests = lost_host
TTL              = MAX_REPAIR_HOPS
bad_link_source  = MY_ID
TTL              = MAX_FULL_QUERY_HOPS
bad_link_source  = NULL
query_id = MY_QUERY_ID++
type = ROUTE_REPLY
reply_id = MY_REPLY_ID++
IERP_next = bad_link_source
IERP_next = source
type = QUERY_EXTENSION
IERP_next = dest
type = ROUTE_ACCUMULATION
IERP_next=source
type = ROUTE_ACCUMULATION
IERP_next = dest
repair_src_ptr = get_index(route, bad_link_source)
repair_src_ptr = 0

bad_link    = {bad_link_source,dest}
path_repair = {bad_link_source,
                                   route(repair_src_ptr+1:|route|),
                                   dest}
IERP_next = dest
IERP_next = source

type = ROUTE_OPTIMIZATION
num_dests = |dests|
num_nodes = |routes|

IERP_prev = MY_ID
route = reverse(Interzone_Routing_Table(source))
route = {route, MY_ID}
route = NULL

current_hop_ptr = |route|

BRP_next=get_shortest_route(Intrazone_Routing_Table,
                                                  IERP_next)->next_hop
metric  =get_metric(Intrazone_Routing_Table,BRP_next)
BRP_next=get_shortest_route(Intrazone_Routing_Table,
                                            IERP_next)->next_hop
prev_hops = route(1: current_hop_ptr-1)
next_hops = route(current_hop_ptr+1 : |route|)
prev_hops=reverse(Interzone_Routing_Table[IERP_next])

prev_hops = NULL
BRP_next = IERP_next
BRP_next = prev_hops(|prev_hops|)
BRP_next = prev_hops(|prev_hops|)

prev_hops={prev_hops,get_route(Intrazone_Routing_Table,
                                                   BRP_next)}
BRP_next = prev_hops(|prev_hops|)
metric  =get_metric(Intrazone_Routing_Table,BRP_next)
current_hop_ptr = |prev_hops|+1
route = {prev_hops, MY_ID, next_hops}
BRP_next = route(|route|)
current_hop_ptr = |route|+1
BRP_next = route(1)
current_hop_ptr = 0
ROF = NULL
ROF = {ROF,1}
ROF = {ROF,0}
BRP_next = route(1)
current_hop_ptr = 0
BRP_next = route(|route|)
current_hop_ptr = |route|+1
prev_hops = route(1 : current_hop_ptr)
next_hops = route(current_hop_ptr+1 : |route|)

status =
status = add(Interzone_Routing_Table,BRP,source,
                                   prev_hops,metric)
prev_hops = NULL
metric = compress_metric(metric)
route = {prev_hops, MY_ID, next_hops}
current_hop_ptr = |prev_hops|+1

d = dests (BELONGING TO) Intrazone_Routing_Table
BRP_next=get_shortest_route(
                                                   Intrazone_Routing_Table,
                                                   IERP_next)->next_hop

metric = {metric,get_metric(
                                                   Intrazone_Routing_Table,
                                                   BRP_next)}
prev_hops = route(1: current_hop_ptr)
next_hops = route(current_hop_ptr+1 : |route|)

status =
status = add(Interzone_Routing_Table,BRP,source,
                                   prev_hops,metric)
prev_hops = NULL
metric = compress_metric(metric)
route = {prev_hops, MY_ID, next_hops}
current_hop_ptr = |prev_hops|+1

BRP_next=get_shortest_route(Intrazone_Routing_Table,
                                                       IERP_next)->next_hop
metric =
prev_hops = route(1: current_hop_ptr-1)
next_hops = route(current_hop_ptr : |route|)
status=add(Interzone_Routing_Table,BRP,dest,
                               next_hops,metric)
next_hops = NULL
metric = compress_metric(metric)
prev_hops=reverse(Interzone_Routing_Table[IERP_next])

prev_hops == NULL)
prev_hops = NULL
BRP_next = IERP_next
BRP_next = prev_hops(|prev_hops|)
BRP_next = prev_hops(|prev_hops|)

prev_hops={prev_hops,get_route(Intrazone_Routing_Table,
                                                       BRP_next)}
BRP_next = prev_hops(|prev_hops|)
current_hop_ptr = 0
metric = {metric,get_metric(Intrazone_Routing_Table,
                                                    BRP_next)}
route = {prev_hops, MY_ID, next_hops}
current_hop_ptr = |prev_hops|+1
prev_hops = route(1: current_hop_ptr-1)
next_hops = route(current_hop_ptr : |route|)

prev_hops=reverse(Interzone_Routing_Table[IERP_next])

                        if(prev_hops(1) == IERP_next (OR) prev_hops == NULL)
                        {
prev_hops = NULL
BRP_next = IERP_next
BRP_next = prev_hops(|prev_hops|)
BRP_next = prev_hops(|prev_hops|)

prev_hops = route(1: current_hop_ptr)
next_hops = route(current_hop_ptr+1 : |route|)

next_hops=Interzone_Routing_Table[IERP_next])

next_hops == NULL)
next_hops = NULL
BRP_next = IERP_next
BRP_next = next_hops(1)
BRP_next = next_hops(1)
metric = {metric,get_metric(Intrazone_Routing_Table,
                                                    BRP_next)}
route = {prev_hops, MY_ID, next_hops}
current_hop_ptr = |prev_hops|+1
f = NULL
f = {f,1}
f = {f,0}
prev_hops = route(1: current_hop_ptr-1)
next_hops = route(current_hop_ptr+1 : |route|)
BRP_next = prev_hops(|prev_hops|)
ROF = {f,ROF}
prev_hops = route(1: current_hop_ptr-1)
next_hops = route(current_hop_ptr+1 : |route|)
BRP_next = next_hops(1)
ROF = {ROF,f}
