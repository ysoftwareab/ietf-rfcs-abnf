example_structure ===
uc_format = field_1,
                   field_2,
                        :
                        :
                   field_n;

control_fields = ctrl_field_1,
                        ctrl_field_2,
                          :
                          :
                        ctrl_field_n;

default_methods =
co_format_0 = field_a,
                       :
                       :
                     field_b
co_format_1 = field_c,
                       :
                       :
                     field_d
co_format_n = field_y,
                       :
                       :
                     field_z
ipv4_header           ===
uc_format   =   version,         %[  4 ]
                       header_length,   %[  4 ]
                       tos,             %[  6 ]
                       ecn,             %[  2 ]
                       length,          %[ 16 ]
                       id,              %[ 16 ]
                       reserved,        %[  1 ]
                       dont_frag,       %[  1 ]
                       more_fragments,  %[  1 ]
                       offset,          %[ 13 ]
                       ttl,             %[  8 ]
                       protocol,        %[  8 ]
                       checksum,        %[ 16 ]
                       src_addr,        %[ 32 ]
                       dest_addr;       %[ 32 ]

co_format  =  src_addr,        %[ 32 ]
                     dest_addr,       %[ 32 ]
                     length,          %[ 16 ]
                     id,              %[ 16 ]
                     ttl,             %[  8 ]
                     protocol,        %[  8 ]
                     tos,             %[  6 ]
                     ecn,             %[  2 ]
                     dont_frag        %[  1 ]
SOME_CONSTANT = 3;

o  ==, !=, for equality and its negative. "x == y" returns true if x
      is equal to y.  Returns false otherwise. "x != y" returns true if
      x is not equal to y.  Returns false otherwise.
uc_format   =   discriminator,    %[  8 ]
                     tcp.seq_number,   %[ 32 ]
                     tcp.flags.ecn,    %[  2 ]

offset_param = 0 then the field value can only stay the same or
offset_param = -1 then it can only increase, whereas if offset_param
bit_pattern = 0xe0

bit_pattern = 0x79

bit_pattern = 0x06

compound_encoding_method ===
uc_format   =   field_1, %[  4 ]
                       field_2; %[ 12 ]

co_format   =   field_2, %[  0 ]
                       field_1  %[  4 ]
compound_encoding_method ===
uc_format  =   field_1,  %[  4 ]
                      field_2;  %[ 12 ]

co_format  =   field_1   %[  4 ]
uc_format   =   constant_bits,
                       variable_bits;

co_format   =   variable_bits
default_methods =
co_format_1 = field_4
co_format_2 = field_4
co_format_3 = field_4
co_format_4 = field_4
test_multiple_formats  ===
uc_format   =   field_1,    %[  4 ]
                       field_2,    %[  4 ]
                       field_3;    %[ 24 ]

default_methods =
co_format_0   =   discriminator,    %[ 1 ]
                         field_3           %[ 4 ]
co_format_1   =   discriminator,    %[  1 ]
                         field_1,          %[  4 ]
                         field_3           %[ 24 ]
ipv4 ===
uc_format =   version,     %[ 4 ]
                         hdr_length,  %[ 4 ]
                         protocol,    %[ 8 ]
                         tos_tc,      %[ 6 ]
                         ip_ecn_flags,%[ 2 ]
                         ttl_hopl,    %[ 8 ]
                         df,          %[ 1 ]
                         mf,          %[ 1 ]
                         rf,          %[ 1 ]
                         frag_offset, %[ 13 ]
                         ip_id,       %[ 16 ]
                         src_addr,    %[ 32 ]
                         dst_addr,    %[ 32 ]
                         checksum,    %[ 16 ]
                         length;      %[ 16 ]

control_fields  = ip_id_behavior;    %[ 2 ]
                 :
                 :
example_structure ===
uc_format = field_1;

control_fields = scaled_field;

co_format = scaled_field
eg_header ===
uc_format             =   version_no,    %[ 2 ]
                               type,          %[ 2 ]
                               flow_id,       %[ 4 ]
                               sequence_no,   %[ 4 ]
                               flag_bits;     %[ 4 ]

co_format_initial     =   version_no,    %[ 2 ]
                               type,          %[ 2 ]
                               flow_id,       %[ 4 ]
                               sequence_no,   %[ 4 ]
                               flag_bits      %[ 4 ]
eg_header ===
uc_format             =   version_no,    %[ 2 ]
                               type,          %[ 2 ]
                               flow_id,       %[ 4 ]
                               sequence_no,   %[ 4 ]
                               abc_flag_bits, %[ 3 ]
                               reserved_flag; %[ 1 ]

co_format_basic       =   version_no,    %[ 0 ]
                               type,          %[ 2 ]
                               flow_id,       %[ 4 ]
                               sequence_no,   %[ 4 ]
                               abc_flag_bits, %[ 3 ]
                               reserved_flag  %[ 0 ]
eg_header  ===
uc_format             =   version_no,    %[ 2 ]
                               type,          %[ 2 ]
                               flow_id,       %[ 4 ]
                               sequence_no,   %[ 4 ]
                               abc_flag_bits, %[ 3 ]
                               reserved_flag; %[ 1 ]

co_format_obvious     =   type,          %[ 2 ]
                               abc_flag_bits  %[ 3 ]
eg_header  ===
uc_format             =   version_no,    %[ 2 ]
                               type,          %[ 2 ]
                               flow_id,       %[ 4 ]
                               sequence_no,   %[ 4 ]
                               abc_flag_bits, %[ 3 ]
                               reserved_flag; %[ 1 ]

co_format_irregular   =   discriminator,     %[ 1 ]
                               type,              %[ 2 ]
                               flow_id,           %[ 4 ]
                               sequence_no,       %[ 4 ]
                               abc_flag_bits      %[ 3 ]
co_format_compressed  =   discriminator,       %[ 1 ]
                               type,                %[ 2 ]
                               sequence_no          %[ 2 ]
eg_header  ===
uc_format             =   version_no,    %[ 2 ]
                               type,          %[ 2 ]
                               flow_id,       %[ 4 ]
                               sequence_no,   %[ 4 ]
                               abc_flag_bits, %[ 3 ]
                               reserved_flag; %[ 1 ]

co_format_irregular   =   discriminator,     %[ 2 ]
                               type,              %[ 2 ]
                               flow_id,           %[ 4 ]
                               sequence_no,       %[ 4 ]
                               abc_flag_bits      %[ 3 ]
co_format_flags_set   =   discriminator,     %[ 2 ]
                               type,              %[ 2 ]
                               sequence_no        %[ 2 ]
co_format_flags_static =  discriminator,     %[ 1 ]
                               type,              %[ 2 ]
                               sequence_no        %[ 2 ]
eg_header  ===
uc_format     =   version_no,    %[ 2 ]
                       type,          %[ 2 ]
                       flow_id,       %[ 4 ]
                       sequence_no,   %[ 4 ]
                       abc_flag_bits, %[ 3 ]
                       reserved_flag; %[ 1 ]

default_methods =
co_format_irregular   =   discriminator,     %[ 2 ]
                               type,              %[ 2 ]
                               flow_id,           %[ 4 ]
                               sequence_no,       %[ 4 ]
                               abc_flag_bits      %[ 3 ]
co_format_flags_set   =   discriminator,     %[ 2 ]
                               type,              %[ 2 ]
                               sequence_no        %[ 2 ]
co_format_flags_static   =   discriminator,     %[ 1 ]
                                  type,              %[ 2 ]
                                  sequence_no        %[ 2 ]
eg_header  ===
uc_format     =   version_no,    %[ 2 ]
                       type,          %[ 2 ]
                       flow_id,       %[ 4 ]
                       sequence_no,   %[ 4 ]
                       abc_flag_bits, %[ 3 ]
                       reserved_flag; %[ 1 ]

control_fields = scaled_seq_no
default_methods =
co_format_irregular   =   discriminator,     %[ 2 ]
                               type,              %[ 2 ]
                               flow_id,           %[ 4 ]
                               scaled_seq_no,     %[ 4 ]
                               abc_flag_bits      %[ 3 ]
co_format_flags_set   =   discriminator,     %[ 2 ]
                               type,              %[ 2 ]
                               scaled_seq_no      %[ 1 ]
co_format_flags_static   =   discriminator,     %[ 1 ]
                                  type,              %[ 2 ]
                                  scaled_seq_no      %[ 1 ]
eg_header  ===
uc_format     =   version_no,    %[ 2 ]
                       type,          %[ 2 ]
                       flow_id,       %[ 4 ]
                       sequence_no,   %[ 4 ]
                       abc_flag_bits, %[ 3 ]
                       reserved_flag; %[ 1 ]

control_fields = scaled_seq_no   %[ 4 ]
default_methods       =
co_format_irregular   =   discriminator,     %[ 2 ]
                               type,              %[ 2 ]
                               flow_id,           %[ 4 ]
                               scaled_seq_no,     %[ 4 ]
                               abc_flag_bits      %[ 3 ]
co_format_flags_set   =   discriminator,     %[ 2 ]
                               scaled_seq_no      %[ 1 ]
co_format_flags_static   =   discriminator,     %[ 1 ]
                                  type,              %[ 2 ]
                                  scaled_seq_no      %[ 1 ]
