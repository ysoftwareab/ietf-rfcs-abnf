Lumas-parameter  =  simple-param  /  compound-param

simple-param = simple-type WS name [ OWS cardinality ] 
                                         [ WS "as" WS explicit-tag ]
                                         [ WS "plugin" ]  ";"

simple-type = "void" / "bool" / "ipv4" / "ipv6" /   
                    "date" / "time" / "oid" /
                    integer-type / string-type / bytes-type /
                    embedded-type / const-type / reference

integer-type  =  "int" OWS "<"  int-constraint  ">"

string-type  =  ( "ascii" / "unquoted-ascii" / "unicode" ) 
                      [ OWS "<" string-constraint ">" ]

const-type = "const" OWS "<" first-safe-char *( safe-char ) ">"
                       ; See the section 'Notes on Comments' below

bytes-type = "bytes" [ OWS "<" length-constraint ">" ]

embedded-type = "embedded" [ OWS "<" length-constraint ">" ]

reference = [ module-name "::" ] name   ; Refers to a type defined 
                                              ; elsewhere

      

int-constraint = [  min-int-constraint  ".."  ]
min-int-constraint  =  ["-"] pos-number

max-int-constraint  =  ["-"] pos-number

use-leading-zero-marker = "z"

string-constraint = length-constraint [ OWS pattern-constraint ]
length-constraint = [ min-len-constraint  ".." ]
min-len-constraint  =  pos-number

max-len-constraint  =  (  pos-number  /  "*"  )

pos-number = 1*DIGIT /       ; Decimal number

                   "0x" 1*HEX /    ; Hex number

                   1*2DIGIT "b"   ; Specifies number of binary bits

pattern-constraint = *( constraint-char quantifier ) 
                          [ '.' quantifier ]
                          ; '.' matches any character
constraint-char = char | character-class
char = single-char | special-char 
single-char = %x20-%xff | escaped-char
escaped-char = '\\'     ; Matches \
                   | '\['     ; Matches [
                   | '\?'     ; Matches ?
                   | '\*'     ; Matches *
                   | '\+'     ; Matches +
                   | '\{'     ; Matches {
                   | '\.'     ; Matches .
special-char = '\r'     ; Matches the return character
                   | '\n'     ; Matches the new line character
                   | '\t'     ; Matches the tab character
                   | '\f'     ; Matches the form feed character
                   | '\s'     ; Matches white space [ \t\r\n\f]
                   | '\d'     ; Matches any digit [0-9]
                   | '\w'     ; Matches any word character [a-zA-Z_0-9]
                   | '\S'     ; Matches anything not matched by \s
                   | '\D'     ; Matches anything not matched by \d
                   | '\W'     ; Matches anything not matched by \w

character-class = matching-character-class | inverse-character-class
matching-character-class = '[' *(class-char | class-range) ']'
inverse-character-class = '[^' *(class-char | class-range) ']'

class-char = class-single-char | special-char 
class-single-char = %x20-%xff | class-escaped-char
class-escaped-char = 
                   '\-'       ; Matches -
                   | '\]'     ; Matches ]
class-range = class-single-char '-' class-single-char

quantifier = '' | '?' | '*' | '+' | '{' 1*DIGIT [ ',' [ 1*DIGIT ] ] '}'

name  =  ALPHA  *(  ALPHA / DIGIT  /  "-"  /  "_"  )

cardinality = "[" [ min-occurrences ".." ] max-occurrences "]" /

                      "?"           ; Short hand for [0..1]

                      "*"           ; Short hand for [0..*]

                      "+"           ; Short hand for [1..*]

min-occurrences  =  1*DIGIT
max-occurrences  =  1*DIGIT / "*"

explicit-tag = tag      ; tag defined in common definitions

compound-param  =  struct-param  /  union-param / constructed-param

struct-param  =  "struct" WS name [ OWS cardinality ] 
                                        [ WS "as" WS explicit-tag ] 
                                        [ WS "pluggable" ]
                                        [ WS "plugin" ] 
                                OWS "{" struct-body "}" OWS ";"

union-param = "union" name [ OWS cardinality ] 
                                        [ WS "as" WS explicit-tag ]
                                        [ WS "pluggable" ]
                                        [ WS "plugin" ]
                                OWS "{" union-body "}" OWS ";"

contructed-param = "constructed" name [ OWS cardinality ] 
                                        [ WS "as" WS explicit-tag ]
                                        [ WS "plugin" ]
                                OWS "{" constructed-body "}" OWS ";"

struct-body = *( untagged-lumas-parameter )
                    *( lumas-parameter ) 
                    *( struct-extension )

untagged-Lumas-parameter  =  untagged-simple-param  / 
                                      untagged-compound-param

untagged-simple-type = simple-type WS name [ OWS cardinality ] WS 
                                                     "as" WS "?" OWS ";"

untagged-compound-param = untagged-struct-param / 
                                     untagged-union-param /
                                     untagged-constructed-param

untagged-struct-param = 
                           "struct" WS name [ OWS cardinality ] 
                                      WS "as" WS "?"  
                                      [ WS "pluggable" ]
                                      OWS "{" struct-body "}" OWS ";"

untagged-union-param = "union" WS name [ OWS cardinality ] 
                                      WS "as" WS "?"
                                      [ WS "pluggable" ]
                                      OWS "{" union-body  "}" OWS ";"

untagged-constructed-param = 
                              "constructed" WS name [ OWS cardinality ] 
                                      WS "as" WS "?"
                                      OWS "{" constructed-body  "}" OWS ";"

struct-extension = "[" 1*( Lumas-parameter ) "]"

union-body = [  integer-type WS name WS "as" WS "?" OWS ";" ]
                   *( singular-Lumas-parameter ) 
                   *( union-extension )
      

select = 12

select = *

singular-Lumas-parameter  =  singular-simple-param  / 
                                 singular-compound-param

singular-simple-param = simple-type WS name 
                                        [ WS "as" WS explicit-tag ] 
                                        [ WS  "plugin"  ] OWS ";"

singular-compound-param = singular-struct-param / 
                                singular-union-param /
                                singular-constructed-param

singular-struct-param = "struct" WS name [ WS "as" WS explicit-tag ]
                                               [ WS "pluggable" ]
                                               [ WS "plugin" ] 
                                OWS "{" struct-body "}" OWS  ";"

singular-union-param = "union" WS name [ WS "as" WS explicit-tag ] 
                                             [ WS "pluggable" ]
                                             [ WS "plugin" ]
                                OWS "{" union-body "}" OWS ";"

singular-constructed-param = "constructed" WS name 
                                             [ WS "as" WS explicit-tag ] 
                                             [ WS "plugin" ]
                                OWS "{" constructed-body "}" OWS ";"
      

union-extension = "[" 1*( singular-Lumas-parameter ) "]"

constructed-body = *( constructed-simple-type WS name ";" )

constructed-simple-type = integer-type / const-type / 
                       "unquoted-ascii" OWS "<" 1*DIGIT ">"

referenced-Lumas-parameter  =  referenced-simple-param  / 
                                   referenced-compound-param

referenced-simple-param = simple-type  WS   name  ";"

referenced-compound-param = referenced-struct-param / 
                                 referenced-union-param /
                                 referenced-constructed-param 

referenced-struct-param = "struct" WS name [ WS "pluggable" ]
                                OWS "{" struct-body "}" OWS ";"

referenced-union-param = "union" WS name [ WS "pluggable" ]
                                OWS "{" union-body "}" OWS ";"

referenced-constructed-param = "constructed" WS name
                                OWS "{" constructed-body "}" OWS ";"

      

third-party-extension = "plug" WS
                               tp-struct-extension / 
                                    tp-union-extension
                              "into" WS name *( "::" name )
                                    *( COMMA name *( "::" name ) ) OWS ";"

tp-struct-extension = Lumas-parameter
tp-union-extension = singular-Lumas-parameter
      

Lumas-directive = OWS
            [ "module" WS module-name OWS ";" OWS ]
            [ "extends" WS module-name [ WS "as" WS name ] OWS ";" OWS ]
            *( "import" WS module-name [ WS "as" WS name ] OWS ";" OWS )

module-name = name *( "." name )
      

Lumas-definition  =  Lumas-directives
                         1* ( referenced-Lumas-parameter /
                              third-party-extension )
      
Lumas-definition  =  Lumas-directives
                         1* ( referenced-Lumas-parameter /
                              third-party-extension )

Lumas-directive = OWS
            [ "module" WS module-name OWS ";" OWS ]
            [ "extends" WS module-name [ WS "as" WS name ] OWS ";" OWS ]
            *( "import" WS module-name [ WS "as" WS name ] OWS ";" OWS )

module-name = name *( "." name )
referenced-Lumas-parameter  =  referenced-simple-param  / 
                                   referenced-compound-param

referenced-simple-param = simple-type  WS   name  ";"

simple-type = "void" / "bool" / "ipv4" / "ipv6" / 
                    "date" / "time" / "oid" /
                    integer-type / string-type / bytes-type / 
                    embedded-type / const-type / reference

integer-type = "int" OWS "<" int-constraint ">"

string-type = ( "ascii" / "unquoted-ascii" / "unicode" ) 
                                [ OWS "<"  string-constraint ">" ]

bytes-type = "bytes" [ OWS "<" length-constraint ">" ]

const-type = "const" OWS "<" first-safe-char *( safe-char ) ">"
                       ; See the section 'Notes on Comments' below

embedded-type = "embedded" [ OWS "<" length-constraint ">" ]

reference = [ module-name "::" ] name     ; Refers to a type 
                                                ; defined elsewhere

int-constraint = [  min-int-constraint  ".."  ]
min-int-constraint  =  ["-"] pos-number
max-int-constraint  =  ["-"] pos-number
use-leading-zero-marker = "z"
string-constraint = length-constraint [ OWS pattern-constraint ]
length-constraint = [ min-len-constraint  ".." ]
min-len-constraint  =  pos-number
max-len-constraint  =  (  pos-number  /  "*"  )
pos-number = 1*DIGIT /       ; Decimal number
                   "0x" 1*HEX /    ; Hex number
                   1*2DIGIT "b"   ; Specifies number of binary bits

pattern-constraint = *( constraint-char quantifier ) 
                          [ '.' quantifier ]
                          ; '.' matches any character
constraint-char = char | character-class
char = single-char | special-char 
single-char = %x20-%xff | escaped-char
escaped-char = '\\'     ; Matches \
                   | '\['     ; Matches [
                   | '\?'     ; Matches ?
                   | '\*'     ; Matches *
                   | '\+'     ; Matches +
                   | '\{'     ; Matches {
                   | '\.'     ; Matches .
special-char = '\r'     ; Matches the return character
                   | '\n'     ; Matches the new line character
                   | '\t'     ; Matches the tab character
                   | '\f'     ; Matches the form feed character
                   | '\s'     ; Matches white space [ \t\r\n\f]
                   | '\d'     ; Matches any digit [0-9]
                   | '\w'     ; Matches any word character [a-zA-Z_0-9]
                   | '\S'     ; Matches anything not matched by \s
                   | '\D'     ; Matches anything not matched by \d
                   | '\W'     ; Matches anything not matched by \w

character-class = matching-character-class |
matching-character-class = '[' *(class-char | class-range) ']'
inverse-character-class = '[^' *(class-char | class-range) ']'

class-char = class-single-char | special-char 
class-single-char = %x20-%xff | class-escaped-char
class-escaped-char = 
                   '\-'       ; Matches -
                   | '\]'     ; Matches ]
class-range = class-single-char '-' class-single-char

quantifier = '' | '?' | '*' | '+' | '{' 1*DIGIT [ ',' [ 1*DIGIT ]
name  =  ALPHA  *(  ALPHANUM  /  "-"  /  "_"  )

referenced-compound-param = referenced-struct-param / 
                                 referenced-union-param /
                                 referenced-constructed-param 
referenced-struct-param = "struct" WS name [ WS "pluggable" ]
                                OWS "{" struct-body "}" OWS ";"

struct-body = *( untagged-Lumas-parameter )
                    *( Lumas-parameter ) 
                    *( struct-extension )

referenced-union-param = "union" WS name [ WS "pluggable" ]
                                OWS "{" union-body "}" OWS ";"

union-body = [  integer-type WS name WS "as" WS "?" OWS ";" ]
                   *( singular-Lumas-parameter ) 
                   *( union-extension )

referenced-constructed-param = "constructed" WS name
                                OWS "{" constructed-body "}" OWS ";"

constructed-body = *( constructed-simple-type WS name ";" )

constructed-simple-type = integer-type / const-type / 
                       "unquoted-ascii" OWS "<" 1*DIGIT ">"

untagged-Lumas-parameter  =  untagged-simple-param  / 
                                      untagged-compound-param

untagged-simple-type = simple-type WS name [ OWS cardinality ]
                                                WS "as" WS  "?"  ";"

untagged-compound-param = untagged-struct-param / 
                                     untagged-union-param /
                                     untagged-constructed-param

untagged-struct-param = 
                           "struct" WS name [ OWS cardinality ]
                                    WS "as" WS "?"  
                                    [ WS "pluggable" ]
                                OWS "{" struct-body "}" OWS ";"

untagged-union-param = 
                           "union" WS name [ OWS cardinality ]
                                    WS "as" WS "?"
                                    [ WS "pluggable" ]
                                OWS "{" union-body "}" OWS ";"

untagged-constructed-param = 
                              "constructed" WS name [ OWS cardinality ] 
                                      WS "as" WS "?"
                                      [ WS "pluggable" ]
                                      OWS "{" constructed-body  "}" OWS
Lumas-parameter  =  simple-param  /  compound-param
simple-param = simple-type  WS  name [ OWS cardinality ]  
                                    [ WS "as" WS  explicit-tag  ]  
                                    [  WS  "plugin"  ]  ";"

cardinality = "[" [ min-occurrences ".." ] max-occurrences "]" /
                      "?"           ; Short hand for [0..1]
                      "*"           ; Short hand for [0..*]
                      "+"           ; Short hand for [1..*]
min-occurrences  =  1*DIGIT
max-occurrences  =  1*DIGIT  /  "*"

explicit-tag = tag      ; tag defined in common definitions

compound-param  =  struct-param  /  union-param /
struct-param = "struct" WS name [ OWS cardinality ] 
                                      [ WS "as" WS explicit-tag ] 
                                      [ WS "pluggable" ]
                                      [ WS "plugin" ] 
                                OWS "{" struct-body "}" OWS ";"
union-param = "union" WS name [ OWS cardinality ] 
                                    [ WS "as" WS explicit-tag ]
                                    [ WS "pluggable" ]
                                    [ WS "plugin" ]
                                OWS "{" union-body "}" OWS ";"

contructed-param = "constructed" name [ OWS cardinality ] 
                                        [ WS "as" WS explicit-tag ]
                                        [ WS "plugin" ]
                                OWS "{" constructed-body "}" OWS ";"

struct-extension = "[" 1*( Lumas-parameter ) "]"

singular-Lumas-parameter  =  singular-simple-param  / 
                                 singular-compound-param

singular-simple-param = type WS name [ WS "as" WS explicit-tag ] 
                                           [ WS "plugin" ]  ";"

singular-compound-param = singular-struct-param / 
                                singular-union-param /
                                singular-constructed-param

singular-struct-param = "struct" WS name 
                                             [ WS "as" WS explicit-tag ]
                                             [ WS "pluggable" ]
                                             [ WS "plugin" ] 
                                "{" struct-body "}"  ";"

singular-union-param = "union" WS name [ WS "as" explicit-tag ] 
                                             [ WS "pluggable" ]
                                             [ WS "plugin" ]
                                "{" union-body "}" ";"

singular-constructed-param = "constructed" WS name 
                                             [ WS "as" WS explicit-tag ]
      
                                             [ WS "plugin" ]
                                OWS "{" constructed-body "}" OWS ";"

third-party-extension = "plug" WS
                               tp-struct-extension / 
                                    tp-union-extension
                              "into" WS name *( "::" name )
                                        *( "," name *( "::" name ) ) ";"

tp-struct-extension = Lumas-parameter
tp-union-extension = singular-Lumas-parameter

tag  =  value

tag  =  value, value, value

join = { 'Alice' }  
msg = { to = 2, 5, 8, 58  
msg = 'Where are we going for dinner' }  

Lumas-text-message  = ( struct-body  /
                          union-body )

struct-body = OWS
                    *( value *( COMMA value ) WS )
                    *( ( tag WS ) /              ; For a void parameter
                       ( tag  EQUAL  value *(  COMMA  value ) WS ) )
                    ; WS not required if it's the last item

union-body =  OWS (integer-value WS /
                    tag WS /               ; For a void parameter
                    ( tag EQUAL value WS ) )

value = simple-value / compound-value

simple-value = bool-value / integer-value / oid-value /
                     ipv4-value / ipv6-value  /   
                     ascii-value / unquoted-ascii-value / unicode-value /
                     const-value / embedded-value / bytes-value / 
                     date-value / time-value

bool-value = "True" / "False" / "T" / "F"

int-value = [ "-" ] 1*DIGIT

oid-value = 1*DIGIT *( "~" 1*DIGIT )    

                     ; Only the oid's numerical parts are represented

ipv4-value = 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT

ipv6-value = hexseq / hexseq "::" [ hexseq ] / "::" [ hexseq ]
hexseq         =  hex4 *( ":" hex4)
hex4           =  1*4HEXDIG

date-value = date-year "-" date-month "-" date-day
date-year = 4DIGIT                  ; e.g. 2002
date-month = 2DIGIT                 ; With leading zeros, e.g. 02
date-day = 2DIGIT                   ; With leading zeros, e.g. 05

time-value = time-hours ":" time-minutes ":" time-seconds
time-hours = 2DIGIT                 ; With leading zeros, e.g. 02
time-minutes = 2DIGIT               ; With leading zeros, e.g. 02
time-seconds = 2DIGIT               ; With leading zeros, e.g. 02
                                          ; Uses 24 hour clock notation
                                          ; All times presented in UTC

      

ascii-value = 
           "'" *( %x00-26 / %x28-5B / %x2D-x7F / "\\" / "\'" ) "'"

unquoted-ascii-value =  first-safe-char *( safe-char )
                       ; See the section 'Notes on Comments' below

unicode-value = DQUOTE
                 *( %x00-21 / %x23-5B / %x5D-xFF / "\\" / "\" DQUOTE ) 
                  DQUOTE
                             ; DQUOTE defined in RFC 2234

bytes-value = "^" BASE64
BASE64 = *( 4BASE64-CHAR ) 
                  ( 
                  ( 4BASE64-CHAR ) /
                  ( 3BASE64-CHAR "=" ) /
                  ( 2BASE64-CHAR "=" "=" )
                  )
BASE64-CHAR = ALPHA / DIGIT / "+" / "/"

const-value = first-safe-char *( safe-char )
                       ; See the section 'Notes on Comments' below

embedded-value = "(" *(%x00-FF) ")" 
                  ; any occurrence of '(' within embedded message must be
                  ; matched by a corresponding ')'.

compound-value = struct-value / union-value / constructed-value

struct-value = "{" struct-body "}" 

union-value = union-body

constructed-value = unquoted-ascii-value   ; On the wire these

                                                 ; types are equivalent
EQUAL = OWS "=" OWS
COMMA = OWS "," OWS
      

delimited-Lumas-text-message = Lumas-text-message ( "}" / ")" )

my-bool = True

my-int = 5643

my-ipv4 = 10.0.0.1

my-ipv6 = 201:123::0

my-date = 2002-02-28

my-time = 12:00:00

my-oid = 1~2~840~113549~2~5

my-ascii = 'Lumas'

my-unquoted-ascii = Lumas

my-unicode = "Lumas"

my-const = Lumas

my-bytes = ^01AF3C==

my-embedded = ( my-other-int=5 single-closing-bracket-text=')' )
my-struct = { 5434 All time=98787654654 }

my-union = 5434

my-union1 = Switch

my-union2 = Volume = 11

tag = [ "?" ] first-tag-safe-char *( safe-char )

first-tag-safe-char = %x21 / 
                  ; Not "
                  %x23-26 / 
                  ; Not ' ( )
                  %28-2B
                  ; Not , -
                  %x2E-2F /
                  ; Not 0 1 2 3 4 5 6 7 8 9
                  %x3A-3C / 
                  ; Not =
                  %x3E-5D
                  ; Not ^
                  %x5F-7A /
                  ; Not {
                  %7C /
                  ; Not }
                  %7E-7F
                        ; Visible characters except = , " ' { } ( ) ^ -
                        ; and digits (tag must not get confused with number)

first-safe-char = first-tag-safe-char / DIGIT / "-"

safe-char = first-safe-char / DQUOTE / "'" / "{" / "(" / "^"
                        ; Not = } ) ,

OWS = [ WS ]                ; Optional white space
WS = comment / " " / HTAB / CR / LF 
                                  ; HTAB, CR, LF defined in RFC-2234
comment = c-comment / cpp-comment
c-comment = "/*" <any except */> (nested-end / hard-end )
nested-end = "*/"
hard-end = "**/"
cpp-comment = "//" *( HTAB / %x20-%7f ) ( CR / LF )
                       ; A comment is treated as a single space for the 
                       ; purposes of parsing

ascii-value = /*This-is-a-comment*/This-is-the-value

ascii-value = and-//this-is-part-of-the-value

