



NETCONF Working Group                                          K. Watsen
Internet-Draft                                          Juniper Networks
Intended status: Standards Track                        J. Schoenwaelder
Expires: March 26, 2015                         Jacobs University Bremen
                                                      September 22, 2014


                   NETCONF Server Configuration Model
                   draft-ietf-netconf-server-model-03

Abstract

   This draft defines a NETCONF server configuration data model.  This
   data model enables configuration of the NETCONF service itself,
   including which transports it supports, what ports they listen on,
   whether they support device-initiated connections, and associated
   parameters.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 26, 2015.

Copyright Notice

   Copyright (c) 2014 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of




Watsen & Schoenwaelder   Expires March 26, 2015                 [Page 1]

Internet-Draft     NETCONF Server Configuration Model     September 2014


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
     1.2.  Tree Diagrams . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Objectives  . . . . . . . . . . . . . . . . . . . . . . . . .   3
     2.1.  Support all NETCONF Transports  . . . . . . . . . . . . .   3
     2.2.  Align Transport-Specific Configurations . . . . . . . . .   3
     2.3.  Support both Listening for Connections and Call Home  . .   4
     2.4.  For Call Home Connections . . . . . . . . . . . . . . . .   4
       2.4.1.  Support More than One Application . . . . . . . . . .   4
       2.4.2.  Support Applications Having More than One Server  . .   4
       2.4.3.  Support a Reconnection Strategy . . . . . . . . . . .   4
       2.4.4.  Support both Persistent and Periodic Connections  . .   4
       2.4.5.  Reconnection Strategy for Periodic Connections  . . .   5
       2.4.6.  Keep-Alives for Persistent Connections  . . . . . . .   5
       2.4.7.  Customizations for Periodic Connections . . . . . . .   5
   3.  Data Model  . . . . . . . . . . . . . . . . . . . . . . . . .   6
     3.1.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .   6
     3.2.  YANG Module . . . . . . . . . . . . . . . . . . . . . . .   8
   4.  Keep-Alives for SSH and TLS . . . . . . . . . . . . . . . . .  21
     4.1.  SSH . . . . . . . . . . . . . . . . . . . . . . . . . . .  21
     4.2.  TLS . . . . . . . . . . . . . . . . . . . . . . . . . . .  22
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .  22
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  23
   7.  Other Considerations  . . . . . . . . . . . . . . . . . . . .  23
   8.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  23
   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  24
     9.1.  Normative References  . . . . . . . . . . . . . . . . . .  24
     9.2.  Informative References  . . . . . . . . . . . . . . . . .  25
   Appendix A.  Examples . . . . . . . . . . . . . . . . . . . . . .  26
     A.1.  SSH Transport Configuration . . . . . . . . . . . . . . .  26
     A.2.  TLS Transport Configuration . . . . . . . . . . . . . . .  26
   Appendix B.  Change Log . . . . . . . . . . . . . . . . . . . . .  27
     B.1.  00 to 01  . . . . . . . . . . . . . . . . . . . . . . . .  28
     B.2.  01 to 02  . . . . . . . . . . . . . . . . . . . . . . . .  28
     B.3.  02 to 03  . . . . . . . . . . . . . . . . . . . . . . . .  28
   Appendix C.  Open Issues  . . . . . . . . . . . . . . . . . . . .  28

1.  Introduction

   This draft defines a NETCONF [RFC6241] server configuration data
   model.  This data model enables configuration of the NETCONF service
   itself, including which transports are supported, what ports does the




Watsen & Schoenwaelder   Expires March 26, 2015                 [Page 2]

Internet-Draft     NETCONF Server Configuration Model     September 2014


   server listen on, whether call-home is supported, and associated
   parameters.

1.1.  Terminology

   The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

1.2.  Tree Diagrams

   A simplified graphical representation of data models is used in this
   document.  The meaning of the symbols in these diagrams is as
   follows:

   o  Brackets "[" and "]" enclose list keys.

   o  Abbreviations before data node names: "rw" means configuration
      (read-write) and "ro" state data (read-only).

   o  Symbols after data node names: "?" means an optional node, "!"
      means a presence container, and "*" denotes a list and leaf-list.

   o  Parentheses enclose choice and case nodes, and case nodes are also
      marked with a colon (":").

2.  Objectives

   The primary purpose of the YANG module defined herein is to enable
   the configuration of the NETCONF service on the device.  This scope
   includes the following objectives:

2.1.  Support all NETCONF Transports

   The YANG module should support all current NETCONF transports, namely
   NETCONF over SSH [RFC6242] and NETCONF over TLS [rfc5539bis], and be
   extensible to support future transports as necessary.

   Since implementations may not support all transports, the module
   should use YANG "feature" statements so that implementations can
   accurately advertise which transports are supported.

2.2.  Align Transport-Specific Configurations

   While each transport is unique in its protocol and may have some
   distinct configurations, there remains a significant overlap between
   them.  Thus the YANG module should use "grouping" statements so that
   the common aspects can be configured similarly.



Watsen & Schoenwaelder   Expires March 26, 2015                 [Page 3]

Internet-Draft     NETCONF Server Configuration Model     September 2014


2.3.  Support both Listening for Connections and Call Home

   NETCONF has always supported the server opening a port to listen for
   client connections.  More recently the NETCONF working group defined
   support for call-home ([draft-ietf-netconf-call-home]).  The module
   should configure both listening for connections and call-home.

   Since implementations may not support both listening for connections
   and call home, YANG "feature" statements should be used so that
   implementation can accurately advertise the connection types it
   supports.

2.4.  For Call Home Connections

   The following objectives only pertain to call home connections.

2.4.1.  Support More than One Application

   A device may be managed by more than one northbound application.  For
   instance, a deployment may have one application for provisioning and
   another for fault monitoring.  Therefore, when it is desired for a
   device to initiate call home connections, it should be able to do so
   for more than one application.

2.4.2.  Support Applications Having More than One Server

   An application managing a device may implement a high-availability
   strategy employing a multiplicity of active and/or passive servers.
   Therefore, when it is desired for a device to initiate call home
   connections, it should be able to connect to any of the applications
   servers.

2.4.3.  Support a Reconnection Strategy

   Assuming an application has more than one server, then it becomes
   necessary to configure how a device should reconnect to the
   application should it lose its connection to the application's
   servers.  Of primary interest is if the device should start with
   first server defined in a user-ordered list of servers or with the
   last server it was connected to.  Secondary settings might specify
   the frequency of attempts and number of attempts per server.
   Therefore, a reconnection strategy should be configurable.

2.4.4.  Support both Persistent and Periodic Connections

   Applications may vary greatly on how frequently they need to interact
   with a device, how responsive interactions with devices need to be,
   and how many simultaneous connections they can support.  Some



Watsen & Schoenwaelder   Expires March 26, 2015                 [Page 4]

Internet-Draft     NETCONF Server Configuration Model     September 2014


   applications may need a persistent connection to devices to optimize
   real-time interactions, while others are satisfied with periodic
   interactions and reduced resources required.  Therefore, when it is
   necessary for devices to initiate connections, the type of connection
   desired should be configured.

2.4.5.  Reconnection Strategy for Periodic Connections

   The reconnection strategy should apply to both persistent and
   periodic connections.  How it applies to periodic connections becomes
   clear when considering that a periodic "connection" is a logical
   connection to a single server.  That is, the periods of
   unconnectedness are intentional as opposed to due to external
   reasons.  A periodic "connection" should always reconnect to the same
   server until it is no longer able to, at which time the reconnection
   strategy guides how to connect to another server.

2.4.6.  Keep-Alives for Persistent Connections

   If a persistent connection is desired, it is the responsibility of
   the connection-initiator to actively test the aliveness of the
   connection.  The connection initiator must immediately work to
   reestablish a persistent connection as soon as the connection is
   lost.  How often the connection should be tested is driven by
   applications requirements, and therefore keep-alive settings should
   be configurable on a per-application basis.

2.4.7.  Customizations for Periodic Connections

   If a periodic connection is desired, it is necessary for the device
   to know how often it should connect.  This delay essentially
   determines how long the application might have to wait to send data
   to the device.  This setting does not constrain how often the device
   must wait to send data to the application, as the device should
   immediately connect to the application whenever it has data to send
   to it.

   A common communication pattern is that one data transmission is many
   times closely followed by another.  For instance, if the device needs
   to send a notification message, there's a high probability that it
   will send another shortly thereafter.  Likewise, the application may
   have a sequence of pending messages to send.  Thus, it should be
   possible for a device to hold a connection open until some amount of
   time of no data being transmitted as transpired.







Watsen & Schoenwaelder   Expires March 26, 2015                 [Page 5]

Internet-Draft     NETCONF Server Configuration Model     September 2014


3.  Data Model

3.1.  Overview

   The following subtree illustrates how this YANG module enables
   configuration for listening for remote connections, as described in
   [RFC6242] and [rfc5539bis].  Feature statements are used to limit
   both if listening is supported at all as well as for which
   transports.  If listening for connections is supported, then the
   model enables configuring a list of listening endpoints, each
   configured with a user-specified name (the key field), the transport
   to use (i.e.  SSH, TLS), and the IP address and port to listen on.
   The port field is optional, defaulting to the transport-specific port
   when not configured.

   module: ietf-netconf-server
      +--rw netconf-server
         +--rw listen* [name]
            +--rw name    string
            +--rw (transport)
               +--:(ssh) {ssh-listen}?
               |  +--rw ssh
               |     +--rw address    inet:host
               |     +--rw port?      inet:port-number
               +--:(tls) {tls-listen}?
                  +--rw tls
                     +--rw address    inet:host
                     +--rw port?      inet:port-number

   The following subtree illustrates how this YANG module enables
   configuration for call home, as described in
   [draft-ietf-netconf-call-home].  Feature statements are used to limit
   both if call-home is supported at all as well as for which
   transports, if it is.  If call-home is supported, then the model
   supports configuring a list of applications to connect to.  Each
   application is configured with a user-specified name (the key field),
   the transport to be used (i.e.  SSH, TLS), and a list of remote
   endpoints, each having a name, an IP address, and an optional port.
   Additionally, the configuration for each remote application indicates
   the connection-type (persistent vs. periodic) and associated
   parameters, as well as the reconnection strategy to use.










Watsen & Schoenwaelder   Expires March 26, 2015                 [Page 6]

Internet-Draft     NETCONF Server Configuration Model     September 2014


   module: ietf-netconf-server
      +--rw netconf-server
         +--rw call-home* [name]
            +--rw name                  string
            +--rw (transport)
            |  +--:(ssh) {ssh-call-home}?
            |  |  +--rw ssh
            |  |     +--rw endpoints
            |  |     |  +--rw endpoint* [name]
            |  |     |     +--rw name       string
            |  |     |     +--rw address    inet:host
            |  |     |     +--rw port?      inet:port-number
            |  |     +--rw host-key* [name]
            |  |        +--rw name    string
            |  +--:(tls) {tls-call-home}?
            |     +--rw tls
            |        +--rw endpoints
            |           +--rw endpoint* [name]
            |              +--rw name       string
            |              +--rw address    inet:host
            |              +--rw port?      inet:port-number
            +--rw connection-type
            |  +--rw (connection-type)?
            |     +--:(persistent-connection)
            |     |  +--rw persistent
            |     |     +--rw keep-alives
            |     |        +--rw interval-secs?   uint8
            |     |        +--rw count-max?       uint8
            |     +--:(periodic-connection)
            |        +--rw periodic
            |           +--rw timeout-mins?   uint8
            |           +--rw linger-secs?    uint8
            +--rw reconnect-strategy
               +--rw start-with?      enumeration
               +--rw interval-secs?   uint8
               +--rw count-max?       uint8

   The following subtree illustrates how this YANG module enables
   authentication of TLS client certificates and mapping TLS clients to
   NETCONF user names.  More specifically, the "trusted-ca-certs" and
   "trusted-client-certs" containers are used to authenticate TLS client
   certificates, while "cert-maps" and "psk-maps" are used to map TLS
   clients to NETCONF user names.








Watsen & Schoenwaelder   Expires March 26, 2015                 [Page 7]

Internet-Draft     NETCONF Server Configuration Model     September 2014


   module: ietf-netconf-server
      +--rw netconf-server
         +--rw tls-client-auth
            +--rw trusted-ca-certs
            |  +--rw trusted-ca-cert*   binary
            +--rw trusted-client-certs
            |  +--rw trusted-client-cert*   binary
            +--rw cert-maps {tls-map-certificates}?
            |  +--rw cert-to-name* [id]
            |     +--rw id             uint32
            |     +--rw fingerprint    x509c2n:tls-fingerprint
            |     +--rw map-type       identityref
            |     +--rw name           string
            +--rw psk-maps {tls-map-pre-shared-keys}?
               +--rw psk-map* [psk-identity]
                  +--rw psk-identity        string
                  +--rw user-name           nacm:user-name-type
                  +--rw not-valid-before?   yang:date-and-time
                  +--rw not-valid-after?    yang:date-and-time
                  +--rw key                 yang:hex-string

3.2.  YANG Module

   This YANG module imports YANG types from [RFC6991], [RFC6536], and
   [draft-ietf-netmod-snmp-cfg].

      RFC Ed.: update the date below with the date of RFC publication
      and remove this note.

      <CODE BEGINS> file "ietf-netconf-server@YYYY-MM-DD.yang"

   module ietf-netconf-server {

     namespace "urn:ietf:params:xml:ns:yang:ietf-netconf-server";
     prefix "ncserver";

     import ietf-inet-types {
       prefix inet;                // RFC 6991
     }
     import ietf-yang-types {
       prefix yang;                // RFC 6991
     }
     import ietf-netconf-acm {
       prefix nacm;                // RFC 6536
     }
     import ietf-x509-cert-to-name {
       prefix x509c2n;             // draft-ietf-netmod-snmp-cfg
     }



Watsen & Schoenwaelder   Expires March 26, 2015                 [Page 8]

Internet-Draft     NETCONF Server Configuration Model     September 2014


     organization
      "IETF NETCONF (Network Configuration) Working Group";

     contact
      "WG Web:   <http://tools.ietf.org/wg/netconf/>
       WG List:  <mailto:netconf@ietf.org>

       WG Chair: Mehmet Ersue
                 <mailto:mehmet.ersue@nsn.com>

       WG Chair: Bert Wijnen
                 <mailto:bertietf@bwijnen.net>

       Editor:   Kent Watsen
                 <mailto:kwatsen@juniper.net>";


     description
      "This module contains a collection of YANG definitions for
       configuring NETCONF servers.

       Copyright (c) 2014 IETF Trust and the persons identified as
       authors of the code. All rights reserved.

       Redistribution and use in source and binary forms, with or
       without modification, is permitted pursuant to, and subject
       to the license terms contained in, the Simplified BSD
       License set forth in Section 4.c of the IETF Trust's
       Legal Provisions Relating to IETF Documents
       (http://trustee.ietf.org/license-info).

       This version of this YANG module is part of RFC XXXX; see
       the RFC itself for full legal notices.";
     // RFC Ed.: replace XXXX with actual RFC number and
     // remove this note

     // RFC Ed.: please update the date to the date of publication

     revision "YYYY-MM-DD" {
       description
        "Initial version";
       reference
        "RFC XXXX: NETCONF Server Configuration Model";
     }


     // Features




Watsen & Schoenwaelder   Expires March 26, 2015                 [Page 9]

Internet-Draft     NETCONF Server Configuration Model     September 2014


     feature ssh-listen {
       description
        "The ssh-listen feature indicates that the NETCONF server can
         open a port to listen for incoming client connections.";
     }

     feature ssh-call-home {
       description
        "The ssh-call-home feature indicates that the NETCONF server can
         connect to a client.";
       reference
        "RFC XXXX: Reverse Secure Shell (Reverse SSH)";
     }

     feature tls-listen {
       description
        "The tls-listen feature indicates that the NETCONF server can
         open a port to listen for incoming client connections.";
     }

     feature tls-call-home {
       description
        "The tls-call-home feature indicates that the NETCONF server can
         connect to a client.";
     }

     feature tls-map-certificates {
       description
        "The tls-map-certificates feature indicates that the
         NETCONF server implements mapping X.509 certificates to NETCONF
         usernames.";
     }

     feature tls-map-pre-shared-keys {
       description
        "The tls-map-pre-shared-keys feature indicates that the
         NETCONF server implements mapping TLS pre-shared keys
         to NETCONF usernames.";
     }



     // Module's top-level container
     container netconf-server {
       description
         "Top-level container for NETCONF server configuration.";
       list listen {
         key name;



Watsen & Schoenwaelder   Expires March 26, 2015                [Page 10]

Internet-Draft     NETCONF Server Configuration Model     September 2014


         description
           "List of endpoints to listen for connections on.";
         //if-feature "(ssh-listen or tls-listen)";
         uses listen-config;
       }
       list call-home {
         key name;
         description
           "List of applications to call-home to.";
         //if-feature "(ssh-call-home or tls-call-home)";
         uses call-home-config;
       }
       container tls-client-auth {
         //if-feature "(tls-listen or tls-call-home)";
         description
           "Container for TLS client authentication configuration.";
         uses trusted-ca-certs-grouping;
         uses trusted-client-certs-grouping;
         uses cert-maps-grouping;
         uses psk-maps-grouping;
       }
     }



     // Groupings

     grouping listen-config {
       description
         "Grouping for listen configuration.";
       leaf name {
         type string;
         description
           "An arbitrary name for the listen endpoint.";
       }
       choice transport {
         mandatory true;
         description
           "Selects between SSH and TLS transports.";
         case ssh {
           if-feature ssh-listen;
           container ssh {
             description
               "SSH-specific listening configuration for inbound
                connections.";
             uses listen-per-transport-config {
               refine port {
                 default 830;



Watsen & Schoenwaelder   Expires March 26, 2015                [Page 11]

Internet-Draft     NETCONF Server Configuration Model     September 2014


               }
             }
           }
         }
         case tls {
           if-feature tls-listen;
           container tls {
             description
               "TLS-specific listening configuration for inbound
                connections.";
             uses listen-per-transport-config {
               refine port {
                 default 6513;
               }
             }
           }
         }
       }
     }

     grouping listen-per-transport-config {
       description
         "Provides the configuration of the NETCONF server to
          open one or more ports to listen for incoming client
          connections.";
       leaf address {
         type inet:host;
         mandatory true;
         description
          "The local IP address/name of the interface to listen on.";
       }
       leaf port {
         type inet:port-number;
         description
          "The local port number on this interface the
           NETCONF server listens on.";
       }
     }

     grouping call-home-config {
       description
         "Grouping for call-home configuration.";
       leaf name {
         type string;
         description
           "An arbitrary name for the remote application.";
       }
       uses call-home-transport-config;



Watsen & Schoenwaelder   Expires March 26, 2015                [Page 12]

Internet-Draft     NETCONF Server Configuration Model     September 2014


       uses call-home-connection-type-config;
       uses call-home-reconnection-strategy-config;
     }

     grouping call-home-transport-config {
       description
         "Grouping for call-home specific transport selection.";
       choice transport {
         mandatory true;
         description
           "Selects between SSH and TLS transports.";
         case ssh {
           if-feature ssh-call-home;
           container ssh {
             description
               "Specifies SSH-specific call-home transport
                configuration.";
             uses call-home-per-transport-config {
               refine endpoints/endpoint/port {
                 default 9999;  // pending IANA assignment
               }
             }
             list host-key {
               key name;
               min-elements 1;
               ordered-by user;
               description
                 "User-ordered list of host-keys the SSH server
                  should advertise.";
               leaf name {
                 type string;
                 mandatory true;
                 description
                   "The name of a host key the device should
                    advertise during the SSH key exchange.";
               }
             }
           }
         }
         case tls {
           if-feature tls-call-home;
           container tls {
             description
               "Specifies TLS-specific call-home transport
                configuration.";
             uses call-home-per-transport-config {
               refine endpoints/endpoint/port {
                 default 9999;  // pending IANA assignment



Watsen & Schoenwaelder   Expires March 26, 2015                [Page 13]

Internet-Draft     NETCONF Server Configuration Model     September 2014


               }
             }
           }
         }
       }
     }

     grouping call-home-per-transport-config {
       description
         "Grouping for transport-specific configuration for
          call-home connections.";
       container endpoints {
         description
           "Container for the list of endpoints.";
         list endpoint {
           key name;
           min-elements 1;
           ordered-by user;
           description
             "User-ordered list of endpoints for this application.
              Defining more than one enables high-availability.";
           leaf name {
             type string;
             description
               "An arbitrary name for the endpoint to connect to.";
           }
           leaf address {
             type inet:host;
             mandatory true;
             description
              "The hostname or IP address of the endpoint.
              If a hostname is provided and DNS resolves to
              more than one IP address, the device SHOULD
              try all of the ones it can based on how its
              networking stack is configured (e.g. v4, v6,
              dual-stack).";
           }
           leaf port {
             type inet:port-number;
             description
              "The IP port for this endpoint. The device will use
               the IANA-assigned well-known port if not specified.";
           }
         }
       }
     }





Watsen & Schoenwaelder   Expires March 26, 2015                [Page 14]

Internet-Draft     NETCONF Server Configuration Model     September 2014


     grouping call-home-connection-type-config {
       description
         "Grouping to define connection-type for call-home
          based connections.";
       container connection-type {
         description
          "Indicates the network manager's preference for how the
           device's connection is maintained.";
         choice connection-type {
           default persistent-connection;
           description
             "Selects between persistent and periodic connections.";
           case persistent-connection {
             container persistent {
               description
                "Maintain a persistent connection to the
                 network manager. If the connection goes down,
                 immediately start trying to reconnect to it,
                 using the reconnection strategy.

                 This connection type minimizes any
                 manager-to-device data-transfer delay,
                 albeit at the expense of holding resources
                 longer.";
               container keep-alives {
                 description
                   "Configures keep-alive policy, to proactively
                    detect when a persistent connection to an
                    endpoint has dropped.";
                 leaf interval-secs {
                   type uint8;
                   units seconds;
                   default 15;
                   description
                    "Sets a timeout interval in seconds after which
                     if no data has been received from the manager's
                     endpoint, a message will be sent to request a
                     response from the endpoint.  A value of '0'
                     indicates that no keep-alive messages should
                     be sent.";
                 }
                 leaf count-max {
                   type uint8;
                   default 3;
                   description
                    "Sets the number of keep-alive messages that may
                     be sent without receiving any data from the
                     manager's endpoint before assuming the endpoint



Watsen & Schoenwaelder   Expires March 26, 2015                [Page 15]

Internet-Draft     NETCONF Server Configuration Model     September 2014


                     is no longer alive.  If this threshold is
                     reached, the transport-level connection will be
                     disconnected (thus triggering the reconnection
                     strategy).  The interval timer is reset after
                     each transmission, thus an unresponsive
                     endpoint will be disconnected after about
                     count-max * interval-secs seconds.";
                 }
               }
             }
           }
           case periodic-connection {
             container periodic {
               description
                "Periodically connect to network manager, using the
                 reconnection strategy, so it can flush any pending
                 data it may be holding. This connection type
                 minimizes resources held open, albeit at the
                 expense of longer manager-to-device data-transfer
                 delay.  Note that for device-to-manager data, the
                 data should be sent immediately, connecting to
                 network manager first if not already.";
               leaf timeout-mins {
                 type uint8;
                 units minutes;
                 default 5;
                 description
                  "The maximum amount of unconnected time the
                   device will wait until establishing a
                   connection to the network manager again. The
                   device MAY establish a connection before this
                   time if it has data it needs to send to the
                   network manager. Note: this value differs from
                   the reconnection strategy's interval-secs
                   value.";
               }
               leaf linger-secs {
                 type uint8;
                 units seconds;
                 default 30;
                 description
                  "The amount of time the device should wait after
                   last receiving data from or sending data to the
                   network manager's endpoint before closing its
                   connection to it.  This is an optimization to
                   prevent unnecessary connections.";
               }
             }



Watsen & Schoenwaelder   Expires March 26, 2015                [Page 16]

Internet-Draft     NETCONF Server Configuration Model     September 2014


           }
         }
       }
     }

     grouping call-home-reconnection-strategy-config {
       description
         "Grouping for reconnection strategy.";
       container reconnect-strategy {
         description
          "The reconnection strategy guides how a device reconnects
           to an application, after losing a connection to it,
           even if due to a reboot.  The device starts with the
           specified endpoint, tries to connect to it count-max
           times, waiting interval-secs between each connection
           attempt, before trying the next endpoint in the list
           (round robin).";
         leaf start-with {
           type enumeration {
             enum first-listed {
               description
                 "Indicates that reconnections should start with
                  the first endpoint listed.";
             }
             enum last-connected {
               description
                 "Indicates that reconnections should start with
                  the endpoint last connected to.";
             }
           }
           default first-listed;
           description
            "Specifies which of the application's endpoints the
             device should start with when trying to connect to
             the application.  If no previous connection has
             ever been established, last-connected defaults to
             the first endpoint listed.";
         }
         leaf interval-secs {
           type uint8;
           units seconds;
           default 5;
           description
            "Specifies the time delay between connection attempts
             to the same endpoint.  Note: this value differs from
             the periodic-connection's timeout-mins value.";
         }
         leaf count-max {



Watsen & Schoenwaelder   Expires March 26, 2015                [Page 17]

Internet-Draft     NETCONF Server Configuration Model     September 2014


           type uint8;
           default 3;
           description
            "Specifies the number times the device tries to
             connect to a specific endpoint before moving on to
             the next endpoint in the list (round robin).";
         }
       }
     }


     grouping trusted-ca-certs-grouping {
       description
         "Grouping for trusted-ca-certs container.";
       container trusted-ca-certs {
         description
           "A list of Certificate Authority (CA) certificates that a
            NETCONF server can use to authenticate a NETCONF client's
            certificate.  A client's certificate is authenticated if
            its Issuer matches one of the configured trusted CA
            certificates.";
         leaf-list trusted-ca-cert {
           type binary;
           ordered-by system;
           description
             "The binary certificate structure, as
              specified by RFC 5246, Section 7.4.6, i.e.,:

                opaque ASN.1Cert<1..2^24>;

             ";
           reference
             "RFC 5246: The Transport Layer Security (TLS)
                        Protocol Version 1.2";
         }
       }
     }

     grouping trusted-client-certs-grouping {
       description
         "Grouping for trusted-client-certs container.";
       container trusted-client-certs {
         description
           "A list of client certificates that a NETCONF server can
            use to authenticate a NETCONF client's certificate.  A
            client's certificate is authenticated if it is an exact
            match to a configured trusted client certificates.";
         leaf-list trusted-client-cert {



Watsen & Schoenwaelder   Expires March 26, 2015                [Page 18]

Internet-Draft     NETCONF Server Configuration Model     September 2014


           type binary;
           ordered-by system;
           description
             "The binary certificate structure, as
              specified by RFC 5246, Section 7.4.6, i.e.,:

                opaque ASN.1Cert<1..2^24>;

             ";
           reference
             "RFC 5246: The Transport Layer Security (TLS)
                        Protocol Version 1.2";
         }
       }
     }

     // Objects for deriving NETCONF usernames from X.509
     // certificates.
     grouping cert-maps-grouping {
       description
         "Grouping for cert-maps container.";
       container cert-maps {
         if-feature tls-map-certificates;
         uses x509c2n:cert-to-name;
         description
          "The cert-maps container is used by a NETCONF server to
           map the NETCONF client's presented X.509 certificate to
           a NETCONF username.

           If no matching and valid cert-to-name list entry can be
           found, then the NETCONF server MUST close the connection,
           and MUST NOT accept NETCONF messages over it.";
       }
     }

     // Objects for deriving NETCONF usernames from TLS
     // pre-shared keys.
     grouping psk-maps-grouping {
       description
         "Grouping for psk-maps container.";
       container psk-maps {
         if-feature tls-map-pre-shared-keys;
         description
           "During the TLS Handshake, the client indicates which
            key to use by including a PSK identity in the TLS
            ClientKeyExchange message. On the NETCONF server side,
            this PSK identity is used to look up an entry in the psk-map
            list. If such an entry is found, and the pre-shared keys



Watsen & Schoenwaelder   Expires March 26, 2015                [Page 19]

Internet-Draft     NETCONF Server Configuration Model     September 2014


            match, then the client is authenticated. The NETCONF
            server uses the value from the user-name leaf in the
            psk-map list as the NETCONF username.  If the NETCONF
            server cannot find an entry in the psk-map list, or if
            the pre-shared keys do not match, then the NETCONF
            server terminates the connection.";
         reference
           "RFC 4279: Pre-Shared Key Ciphersuites for Transport Layer
                      Security (TLS)";

         list psk-map {
           key psk-identity;
           description
             "List a pre-shared key mappings.";

           leaf psk-identity {
             type string;
             description
               "The PSK identity encoded as a UTF-8 string. For
                details how certain common PSK identity formats can
                be encoded in UTF-8, see section 5.1. of RFC 4279.";
             reference
               "RFC 4279: Pre-Shared Key Ciphersuites for Transport
                Layer Security (TLS)";
           }
           leaf user-name {
             type nacm:user-name-type;
             mandatory true;
             description
               "The NETCONF username associated with this PSK
                identity.";
           }
           leaf not-valid-before {
             type yang:date-and-time;
             description
               "This PSK identity is not valid before the given date
                and time.";
           }
           leaf not-valid-after {
             type yang:date-and-time;
             description
               "This PSK identity is not valid after the given date
                and time.";
           }
           leaf key {
             type yang:hex-string;
             mandatory true;
             nacm:default-deny-all;



Watsen & Schoenwaelder   Expires March 26, 2015                [Page 20]

Internet-Draft     NETCONF Server Configuration Model     September 2014


             description
               "The key associated with the PSK identity";
             reference
               "RFC 4279: Pre-Shared Key Ciphersuites for Transport
                Layer Security (TLS)";
           }
         }
       }
     }

   }

      <CODE ENDS>


4.  Keep-Alives for SSH and TLS

   One the objectives listed above, Keep-Alives for Persistent
   Connections (Section 2.4.6) indicates a need for a "keep-alive"
   mechanism.  This section specifies how the NETCONF keep-alive
   mechanism is to be implemented.

   Both SSH and TLS have the ability to support keep-alives.  Using
   these mechanisms, the keep-alive messages are sent inside the
   encrypted tunnel, thus thwarting spoof attacks.

4.1.  SSH

   The SSH keep-alive solution that is expected to be used when
   configured using the data model defined in this document is
   ubiquitous in practice, though never being explicitly defined in an
   RFC.  The strategy used is to purposely send a malformed request
   message with a flag set to ensure a response.  More specifically, per
   section 4 of [RFC4253], either SSH peer can send a
   SSH_MSG_GLOBAL_REQUEST message with "want reply" set to '1' and that,
   if there is an error, will get back a SSH_MSG_REQUEST_FAILURE
   response.  Similarly, section 5 of [RFC4253] says that either SSH
   peer can send a SSH_MSG_CHANNEL_REQUEST message with "want reply" set
   to '1' and that, if there is an error, will get back a
   SSH_MSG_CHANNEL_FAILURE response.

   To ensure that the request will fail, current implementations send an
   invalid "request name" or "request type", respectively.  Abiding to
   the extensibility guidelines specified in Section 6 of [RFC4251],
   these implementations use the "name@domain".  For instance, when
   configured to send keep-alives, OpenSSH sends the string
   "keepalive@openssh.com".  In order to remain compatible with existing




Watsen & Schoenwaelder   Expires March 26, 2015                [Page 21]

Internet-Draft     NETCONF Server Configuration Model     September 2014


   implementations, this draft does not require a specific "request
   name" or "request type" string be used.

4.2.  TLS

   The TLS keep-alive solution is defined in [RFC6520].  This solution
   allows both peers to advertise if they can receive heartbeat request
   messages from its peer.  For standard NETCONF over TLS connections,
   devices SHOULD advertise "peer_allowed_to_send", as per [RFC6520].
   This advertisement is not a "MUST" in order to grandfather existing
   NETCONF over TLS implementations.  For NETCONF over TLS Call Home,
   the network management system MUST advertise "peer_allowed_to_send"
   per [RFC6520].  This is a "MUST" so as to ensure devices can depend
   in it always being there for call home connections, which is
   conveniently when keep-alives are needed the most.

5.  Security Considerations

   The YANG modules defined in this memo are designed to be accessed via
   the NETCONF protocol [RFC6241].  Authorization for access to specific
   portions of conceptual data and operations within this module is
   provided by the NETCONF access control model (NACM) [RFC6536].

   There are a number of data nodes defined in the "ietf-netconf-server"
   and "ietf-system-tls-auth" YANG modules which are writable/creatable/
   deletable (i.e., config true, which is the default).  These data
   nodes may be considered sensitive or vulnerable in some network
   environments.  Write and read operations to these data nodes can have
   a negative effect on network operations.  It is thus important to
   control write and read access to these data nodes.  Below are the
   data nodes and their sensitivity/vulnerability.

   ietf-netconf-server:

   o  None.

   ietf-system-tls-auth:

   o  /system/authentication/tls/psk-maps/psk-map/user-name: This leaf
      node contains a user name that some deployments may consider
      sensitive information.

   o  /system/authentication/tls/psk-maps/psk-map/key: This leaf node
      contains a shared key that remote clients use to authenticate
      themselves to the system.  This value should not be readable or
      writable by anyone by default.





Watsen & Schoenwaelder   Expires March 26, 2015                [Page 22]

Internet-Draft     NETCONF Server Configuration Model     September 2014


6.  IANA Considerations

   This document registers two URIs in the IETF XML registry [RFC2119].
   Following the format in [RFC3688], the following registrations are
   requested:

         URI: urn:ietf:params:xml:ns:yang:ietf-netconf-server
         Registrant Contact: The NETCONF WG of the IETF.
         XML: N/A, the requested URI is an XML namespace.

         URI: urn:ietf:params:xml:ns:yang:ietf-system-tle-auth
         Registrant Contact: The NETCONF WG of the IETF.
         XML: N/A, the requested URI is an XML namespace.

   This document registers two YANG modules in the YANG Module Names
   registry [RFC6020].

      name:         ietf-netconf-server
      namespace:    urn:ietf:params:xml:ns:yang:ietf-netconf-server
      prefix:       ncserver
      reference:    RFC XXXX

      name:         ietf-system-tls-auth
      namespace:    urn:ietf:params:xml:ns:yang:ietf-system-tls-auth
      prefix:       sys-tls-auth
      reference:    RFC XXXX

7.  Other Considerations

   The YANG module define herein does not itself support virtual routing
   and forwarding (VRF).  It is expected that external modules will
   augment in VRF designations when needed.

8.  Acknowledgements

   The authors would like to thank for following for lively discussions
   on list and in the halls (ordered by last name): Andy Bierman, Martin
   Bjorklund, Benoit Claise, David Lamparter, Alan Luchuk, Ladislav
   Lhotka, Radek Krejci, Tom Petch, and Phil Shafer.

   Juergen Schoenwaelder and was partly funded by Flamingo, a Network of
   Excellence project (ICT-318488) supported by the European Commission
   under its Seventh Framework Programme.








Watsen & Schoenwaelder   Expires March 26, 2015                [Page 23]

Internet-Draft     NETCONF Server Configuration Model     September 2014


9.  References

9.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC4251]  Ylonen, T. and C. Lonvick, "The Secure Shell (SSH)
              Protocol Architecture", RFC 4251, January 2006.

   [RFC4253]  Ylonen, T. and C. Lonvick, "The Secure Shell (SSH)
              Transport Layer Protocol", RFC 4253, January 2006.

   [RFC6020]  Bjorklund, M., "YANG - A Data Modeling Language for the
              Network Configuration Protocol (NETCONF)", RFC 6020,
              October 2010.

   [RFC6241]  Enns, R., Bjorklund, M., Schoenwaelder, J., and A.
              Bierman, "Network Configuration Protocol (NETCONF)", RFC
              6241, June 2011.

   [RFC6242]  Wasserman, M., "Using the NETCONF Protocol over Secure
              Shell (SSH)", RFC 6242, June 2011.

   [RFC6520]  Seggelmann, R., Tuexen, M., and M. Williams, "Transport
              Layer Security (TLS) and Datagram Transport Layer Security
              (DTLS) Heartbeat Extension", RFC 6520, February 2012.

   [RFC6536]  Bierman, A. and M. Bjorklund, "Network Configuration
              Protocol (NETCONF) Access Control Model", RFC 6536, March
              2012.

   [RFC6991]  Schoenwaelder, J., "Common YANG Data Types", RFC 6991,
              July 2013.

   [draft-ietf-netconf-call-home]
              Watsen, K., "NETCONF Call Home", draft-ieft-netconf-call-
              home-00 (work in progress), 2014.

   [draft-ietf-netmod-snmp-cfg]
              Bjorklund, M. and J. Schoenwaelder, "A YANG Data Model for
              SNMP Configuration", draft-ietf-netmod-snmp-cfg-03 (work
              in progress), November 2013.








Watsen & Schoenwaelder   Expires March 26, 2015                [Page 24]

Internet-Draft     NETCONF Server Configuration Model     September 2014


   [rfc5539bis]
              Badra, M., Luchuk, A., and J. Schoenwaelder, "Using the
              NETCONF Protocol over Transport Layer Security (TLS)",
              draft-ietf-netconf-rfc5539bis-04 (work in progress),
              October 2013.

9.2.  Informative References

   [RFC3688]  Mealling, M., "The IETF XML Registry", BCP 81, RFC 3688,
              January 2004.









































Watsen & Schoenwaelder   Expires March 26, 2015                [Page 25]

Internet-Draft     NETCONF Server Configuration Model     September 2014


Appendix A.  Examples

A.1.  SSH Transport Configuration

<netconf-server xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-server">
  <listen>
    <name>foo bar</name>
    <ssh>
      <port>831</port>
    </ssh>
  </listen>
  <call-home>
    <name>config-mgr</name>
    <ssh>
      <endpoints>
        <endpoint>
          <name>east-data-center</name>
          <address>11.22.33.44</address>
        </endpoint>
        <endpoint>
          <name>west-data-center</name>
          <address>55.66.77.88</address>
        </endpoint>
      </endpoints>
     </ssh>
  </call-home>
</netconf-server>

A.2.  TLS Transport Configuration

<netconf-server xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-server">
  <listen>
    <name>foo bar</name>
    <ssh>
      <port>831</port>
    </ssh>
  </listen>
  <call-home>
    <name>config-mgr</name>
    <tls>
      <endpoints>
        <endpoint>
          <name>east-data-center</name>
          <address>11.22.33.44</address>
        </endpoint>
        <endpoint>
          <name>west-data-center</name>
          <address>55.66.77.88</address>



Watsen & Schoenwaelder   Expires March 26, 2015                [Page 26]

Internet-Draft     NETCONF Server Configuration Model     September 2014


        </endpoint>
      </endpoints>
     </tls>
  </call-home>
  <tls-client-auth>
    <trusted-ca-certs>
      <trusted-ca-cert>
        QW4gRWFzdGVyIGVnZywgZm9yIHRob3NlIHdobyBtaWdodCBsb29rICA6KQo=
      </trusted-ca-cert>
    </trusted-ca-certs>
    <trusted-client-certs>
      <trusted-client-cert>
        SSBhbSB0aGUgZWdnIG1hbiwgdGhleSBhcmUgdGhlIGVnZyBtZW4uCg==
      </trusted-client-cert>
      <trusted-client-cert>
        SSBhbSB0aGUgd2FscnVzLCBnb28gZ29vIGcnam9vYi4K
      </trusted-client-cert>
    </trusted-client-certs>
    <cert-maps>
      <cert-to-name>
        <id>1</id>
        <fingerprint>11:0A:05:11:00</fingerprint>
        <map-type>x509c2n:san-any</map-type>
      </cert-to-name>
      <cert-to-name>
        <id>2</id>
        <fingerprint>11:0A:05:11:00</fingerprint>
        <map-type>x509c2n:specified</map-type>
        <name>Joe Cool</name>
      </cert-to-name>
    </cert-maps>
    <psk-maps>
      <psk-map>
        <psk-identity>a8gc8]klh59</psk-identity>
        <user-name>admin</user-name>
        <not-valid-before>2013-01-01T00:00:00Z</not-valid-before>
        <not-valid-after>2014-01-01T00:00:00Z</not-valid-after>
      </psk-map>
    </psk-maps>
  </tls-client-auth>
</netconf-server>

Appendix B.  Change Log








Watsen & Schoenwaelder   Expires March 26, 2015                [Page 27]

Internet-Draft     NETCONF Server Configuration Model     September 2014


B.1.  00 to 01

   o  Restructured document so it flows better

   o  Added trusted-ca-certs and trusted-client-certs objects into the
      ietf-system-tls-auth module

B.2.  01 to 02

   o  removed the "one-to-many" construct

   o  removed "address" as a key field

   o  removed "network-manager" terminology

   o  moved open issues to github issues

   o  brought TLS client auth back into model

B.3.  02 to 03

   o  fixed tree diagrams and surrounding text

Appendix C.  Open Issues

   Please see: https://github.com/netconf-wg/server-model/issues.

Authors' Addresses

   Kent Watsen
   Juniper Networks

   EMail: kwatsen@juniper.net


   Juergen Schoenwaelder
   Jacobs University Bremen

   EMail: j.schoenwaelder@jacobs-university.de












Watsen & Schoenwaelder   Expires March 26, 2015                [Page 28]
