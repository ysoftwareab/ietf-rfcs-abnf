nonce-type = bstr .size (8..64)

nonce-claim = (
nonce => nonce-type / [ 2* nonce-type ]
ueid-type = bstr .size (7..33)

ueid-claim = (
ueid => ueid-type
origination-claim = (
origination => string-or-uri
oemid-claim = (
oemid => bstr
chip-version-claim = (
chip-version => tstr
chip-version-scheme-claim = (
chip-version-scheme => $version-scheme
board-version-claim = (
board-version => tstr
board-version-scheme-claim = (
board-version-scheme => $version-scheme
device-version-claim = (
device-version => tstr
device-version-scheme-claim = (
device-version-scheme => $version-scheme
ean-type = text .regexp "[0-9]{13}"

ean-chip-version-claim = (
ean-chip-version => ean-type
ean-board-version-claim = (
ean-board-version => ean-type
ean-device-version-claim = (
ean-device-version => ean-type
hardware-version-claims = (
       ? chip-version-claim,
       ? board-version-claim,
       ? device-version-claim,
       ? chip-version-scheme-claim,
       ? board-version-scheme-claim,
       ? device-version-scheme-claim,
       ? ean-chip-version-claim,
       ? ean-board-version-claim,
       ? ean-device-version-claim,
security-level-type = &(
       unrestricted: 1,
       restricted: 2,
       secure-restricted: 3,
       hardware: 4
security-level-claim = (
security-level => security-level-type
secure-boot-claim = (
secure-boot => bool
debug-status-type = &(
       enabled: 0,
       disabled: 1,
       disabled-since-boot: 2,
       disabled-permanently: 3,
       disabled-fully-and-permanently: 4
debug-status-claim = (
debug-status => debug-status-type
location-type = {
latitude => number,
longitude => number,
latitude = 1
longitude = 2
altitude = 3
accuracy = 4
altitude-accuracy = 5
heading = 6
speed = 7
timestamp = 8
age = 9

location-claim = (
location => location-type
uptime-claim = (
uptime => uint
boot-seed-claim = (
boot-seed => bytes
intended-use-type = &(
       generic: 1,
       registration: 2,
       provisioning: 3,
       csr: 4,
       pop:  5
intended-use-claim = (
intended-use => intended-use-type
profile-claim = (
profile => ~uri / ~oid
submods-part = (
submods => submods-type
submods-type = { + submod-type }


submod-type = (
submod-name => eat-claim-set / nested-token
nested-token = bstr / tstr;


submod-name = tstr



string-or-uri = tstr

time-int = #6.1(int)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7


eat-claim-set = {
    ? ueid-claim,
    ? nonce-claim,
    ? origination-claim,
    ? oemid-claim,
    ? hardware-version-claims,
    ? security-level-claim,
    ? secure-boot-claim,
    ? debug-status-claim,
    ? location-claim,
    ? uptime-claim,
    ? submods-part,
    * $$eat-extension,
eat-token = EAT_Tagged_Message / EAT_Untagged_Message / JWT_Message
EAT_Tagged_Message = #6.61(COSE_Tagged_Message) / #6.601(eat-claim-set)


EAT_Untagged_Message = COSE_Tagged_Message / COSE_Untagged_Message / UCCS_Untagged_Message


UCCS_Untagged_Message = eat-claim-set

string-or-uri = tstr

time-int = #6.1(int)
issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7

debug-status-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
debug-status-claim = (
debug-status => debug-status-type
location-type = {
latitude => number,
longitude => number,
latitude = 1
longitude = 2
altitude = 3
accuracy = 4
altitude-accuracy = 5
heading = 6
speed = 7
timestamp = 8
age = 9

location-claim = (
location => location-type
nonce-type = bstr .size (8..64)

nonce-claim = (
nonce => nonce-type / [ 2* nonce-type ]
oemid-claim = (
oemid => bstr
multipartnumeric = 1
multipartnumeric-suffix = 2
alphanumeric = 3
decimal = 4
semver = 16384

chip-version-claim = (
chip-version => tstr
chip-version-scheme-claim = (
chip-version-scheme => $version-scheme
board-version-claim = (
board-version => tstr
board-version-scheme-claim = (
board-version-scheme => $version-scheme
device-version-claim = (
device-version => tstr
device-version-scheme-claim = (
device-version-scheme => $version-scheme
ean-type = text .regexp "[0-9]{13}"

ean-chip-version-claim = (
ean-chip-version => ean-type
ean-board-version-claim = (
ean-board-version => ean-type
ean-device-version-claim = (
ean-device-version => ean-type
hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
    ? ean-chip-version-claim,
    ? ean-board-version-claim,
    ? ean-device-version-claim,
origination-claim = (
origination => string-or-uri
secure-boot-claim = (
secure-boot => bool
security-level-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
security-level-claim = (
security-level => security-level-type
submods-part = (
submods => submods-type
submods-type = { + submod-type }


submod-type = (
submod-name => eat-claim-set / nested-token
nested-token = bstr / tstr;


submod-name = tstr


ueid-type = bstr .size (7..33)

ueid-claim = (
ueid => ueid-type
intended-use-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
intended-use-claim = (
intended-use => intended-use-type
uptime-claim = (
uptime => uint
nonce = 10
ueid = 11
oemid = 13
security-level = 14
secure-boot = 15
debug-status = 16
location = 17
profile = 18
submods = 20

origination = <TBD30>
uptime = <TBD31>
chip-version = <TBD32>
board-version = <TBD33>
device-version = <TBD34>
chip-version-scheme = <TBD35>
board-version-scheme = <TBD36>
device-version-scheme = <TBD37>
ean-chip-version = <TBD38>
ean-board-version = <TBD39>
ean-device-version = <TBD40>
intended-use = <TBD41>
p = 1 - e^{-k^2/(2n)}

p = k^2 / 2n

t = 1 / ((k / 10) * p)

