value="//dhcp:interface-filter/dhcp:interface"/>
xmlns="http://relaxng.org/ns/structure/1.0"
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
name="pattern">([a-zA-Z][a-zA-Z0-9\-\+\.]*:|\.\./|\./|#).*</param>
        </data>
context="/nmt:netmod-tree/nmt:data/dhcp:dhcp/dhcp:default-lease-time"
    <sch:assert test=". &lt;= ../dhcp:max-lease-time">
      default-lease-time must be less than max-lease-time
    </sch:assert>
start = element-dml

element-dml = element dml {
    dmlVersionAttribute? &
    dml-contents
dmlVersionAttribute = attribute dmlVersion { "1.0" }

dml-contents = (
    dataModelVersion &
    organization* &
    contact-info* &
    list-order* &
    data-category* &
    mustUse-flag* &
    container-existence* &
    manual-validation* &
    units* &
    conformStatus* &
    mustUnderstand*
dataModelVersion = element version { xsd:string }

organization = element organization { string-with-lang }
contact-info = element contact { xsd:anyURI }

unique = element unique { xsd:anyURI }
key = element key { xsd:anyURI }
keyref = element keyref { xsd:anyURI }

data-category = element infoType {
    attribute minAccess { list { access-strings }}?,
    attribute maxAccess { list { access-strings }}?,





    ("config" | "status" | "statistics" | "action" | "notify")
    >> dsrl:default-content ["config"]
access-strings = ( "read" | "write" | "create" | "delete" | "execute" )

mustUse-flag = element mustUse { xsd:boolean
                >> dsrl:default-content ["false"]
manual-validation = element manual-validation-rule { string-with-lang }

list-order = element order {
   ("any-order" | "user-order")
   >> dsrl:default-content ["any-order"]
container-existence = element existence { empty }

units = element units {
   xsd:string { pattern="[^: \n\r\t]+" }
   # allow familiar units, but no whitespace or absolute URIs here
   |
   xsd:anyURI { pattern="([a-zA-Z][a-zA-Z0-9\-\+\.]*:|\.\./|\./|#).*" }
   # allow absolute URIs, plus relative URIs with ./ or ../
   # prohibit relative URIs that could look like a unit, ex: m/s
string-with-lang = (
    attribute xml:lang { xsd:language },
    xsd:string
conformStatus = element status {
    "active" | "deprecated" | "obsolete"
    >> dsrl:default-content ["active"]
mustUnderstand = element mustUnderstand { list { xsd:NCName } }

dml-netconf-error-app-tag =
    attribute netconf-error-app-tag { xsd:string }

dml-phase-attribute = attribute phase { "fragment" | "std" | "full" }





dml-moduleDefault = attribute moduleDefault {
   xsd:boolean >> dsrl:default-content ["false"]
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
ns="http://example.com/ns/dhcp">
start =

     ## configuration and operational parameters for a DHCP server.
     element dhcp {
       [ dml:units = "seconds" ]
       element max-lease-time {
         xsd:unsignedInt >> dsrl:default-content [ "7200" ]
       }?,
       [ dml:units = "seconds" ]





       element default-lease-time {
         xsd:unsignedInt
         >> sch:assert [
test = ". <= ../max-lease-time"
inet-types__ip-address =
     inet-types__ipv4-address | inet-types__ipv6-address
inet-types__ipv4-address =
     xsd:string {
pattern =
         "... IPv4 address regexp ..."
inet-types__ipv6-address =
     xsd:string {
pattern =
         "... IPv6 address regexp ..."
yang-types__date-and-time =
     xsd:string {
pattern =
         "... date-and-time regexp ..."
yang-types__phys-address = xsd:string






inet-types__ip-prefix =
     inet-types__ipv4-prefix | inet-types__ipv6-prefix
inet-types__ipv4-prefix =
     xsd:string {
pattern =
         "... IPv4 prefix regexp ..."
inet-types__ipv6-prefix =
     xsd:string {
pattern =
         "... IPv6 prefix regexp ..."
inet-types__host = inet-types__ip-address | inet-types__domain-name
inet-types__domain-name =
     xsd:string { pattern = "([\p{L}\p{N}]+\.)*[\p{L}\p{N}]" }










