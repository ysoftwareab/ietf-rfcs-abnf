

                                                        Thomas D. Nadeau
                                                     Cisco Systems, Inc.
                                                                        
                                                             Luyuan Fang 
                                                    Harmen Van Der Linde
                                                                    AT&T

                                                      Stephen J. Brannon
                                                                        
                                                        Fabio M. Chiussi
                                                     Lucent Technologies
                                                                        
                                                             Joseph Dube
                                                     Avici Systems, Inc.
                                                                        
                                                           Martin Tatham
                                                         British Telecom
   
IETF Internet Draft
Expires: December 2001
Document: draft-nadeau-mpls-vpn-mib-02.txt                      June 2001
   
   
   
         MPLS/BGP Virtual Private Network Management Information
                            Base Using SMIv2
   



Status of this Memo
   
   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC2026. Internet-Drafts are
   Working documents of the Internet Engineering Task Force (IETF), its
   areas, and its working groups.  Note that other groups may also
   distribute working documents as Internet-Drafts.
   
   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time. It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."
   
   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.
   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.
   
   
Contents

1.0 Abstract..........................................................2
2.0 Introduction......................................................2



Nadeau et al.              Expires December 2001             [Page 1]

Internet Draft               MPLS VPN MIB               June 19, 2001



3.0 Terminology.......................................................3
4.0 The SNMP Management Framework.....................................3
5.0 Oobject Definitions...............................................4
6.0 Feature Checklist.................................................4
7.0 Assumptions and Prerequisites.....................................5
8.0 Application of the Interfaces Group to MPLS.......................6
9.0 Brief Description of MIB Objects.................................7
9.1 MplsVpnVrfConfTable..............................................7
9.2 MplsVpnInterfaceConfTable........................................7
9.3 MplsVpnPerfTable.................................................8
9.4 MplsVpnVrfRouteTable.............................................8
9.5 MplsVpnRouteTargetTable..........................................8
10.0 Example of MPLS/BGP VPN Setup....................................8
11.0 MPLS/BGP VPN MIB Definitions....................................10
12.0 Acknowledgements................................................37
13.0 References......................................................37
14.0 Authors' Addresses..............................................40
15.0 Dedication......................................................41
16.0 Full Copyright Statement........................................41



1.0  Abstract
   
   This memo defines an experimental portion of the Management
   Information Base  (MIB) for use with network management protocols in
   the Internet community.  In particular, in response to customer
   demands and strong input from vendors, it describes managed objects
   for modeling and managing Multi-Protocol Label Switching (MPLS)
   [MPLSArch]/Border Gateway Protocol (BGP) Virtual Private Networks
   (VPNs) [RFC2547bis].
   

2.0  Introduction

   This memo defines an experimental portion of the Management
   Information Base (MIB) for use with network management protocols in
   the Internet community.  In particular, it describes managed objects
   for modeling a Multi-Protocol Label Switching [MPLSArch,
   MPLSFW]/Border Gateway Protocol Virtual Private Networks.
   
   Comments should be made directly to the MPLS mailing list at
   mpls@uu.net and the Provider-Provisioned VPN (PPVPN) WG at
   ppvpn@ietf.org.
   
   This memo does not, in its draft form, specify a standard for the
   Internet community.
   
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",



Nadeau et al.              Expires December 2001             [Page 2]

Internet Draft               MPLS VPN MIB               June 19, 2001



   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119, reference
   [BCP14].
   

3.0  Terminology

   This document uses terminology from the document describing the MPLS
   architecture [MPLSArch] and from the document describing MPLS/BGP
   VPNs [MPLSBGPVPN].
   
   Throughout this document, the use of the terms "Provider Edge (PE)
   and Customer Edge (CE) or PE/CE" will be replaced by PE in all cases
   except when a network device is a CE when used in the carrier of
   carriers model.


4.0  The SNMP Management Framework

   The SNMP Management Framework presently consists of five major
   components:
   
   -  An overall architecture, as described in RFC 2271 [SNMPArch].
   
   -  Mechanisms for describing and naming objects and events for the
      purpose of management.  The first version of this Structure of
      Management Information (SMI) is called SMIv1 and described in RFC
      1155 [SMIv1], RFC 1212 [SNMPv1MIBDef] and RFC 1215 [SNMPv1Traps].
      The second version, called SMIv2, is described in RFC 1902
      [SMIv2], RFC 1903 [SNMPv2TC] and RFC 1904 [SNMPv2Conf].
   
   -  Message protocols for transferring management information. The
      first version of the SNMP message protocol is called SNMPv1 and
      described in RFC 1157 [SNMPv1].  A second version of the SNMP
      message protocol, which is not an Internet standards track
      protocol, is called SNMPv2c and described in RFC 1901 [SNMPv2c]
      and RFC 1906 [SNMPv2TM].  The third version of the message
      protocol is called SNMPv3 and described in RFC 1906 [SNMPv2TM],
      RFC 2272 [SNMPv3MP] and RFC 2574 [SNMPv3USM].
   
   -  Protocol operations for accessing management information.  The
      first set of protocol operations and associated PDU formats is
      described in RFC 1157 [SNMPv1].  A second set of protocol
      operations and associated PDU formats is described in RFC 1905
      [SNMPv2PO].
   
   -  A set of fundamental applications described in RFC 2273
      [SNMPv3App] and the view-based access control mechanism described
      in RFC 2575 [SNMPv3VACM].
   



Nadeau et al.              Expires December 2001             [Page 3]

Internet Draft               MPLS VPN MIB               June 19, 2001



   Managed objects are accessed via a virtual information store, termed
   the Management Information Base or MIB.  Objects in the MIB are
   defined using the mechanisms defined in the SMI.  This memo specifies
   a MIB module that is compliant to the SMIv2.  A MIB conforming to the
   SMIv1 can be produced through the appropriate translations.  The
   resulting translated MIB must be semantically equivalent, except
   where objects or events are omitted because no translation is
   possible (use of Counter64).  Some machine-readable information in
   SMIv2 will be converted into textual descriptions in SMIv1 during the
   translation process.  However, this loss of machine-readable
   information is not considered to change the semantics of the MIB.


5.0  Object Definitions

   Managed objects are accessed via a virtual information store, termed
   the Management Information Base or MIB.  Objects in the MIB are
   defined using the subset of Abstract Syntax Notation One  (ASN.1)
   defined in the SMI.  In particular, each object type is named by an
   OBJECT IDENTIFIER, an administratively assigned name. The object type
   together with an object instance serves to uniquely identify a
   specific instantiation of the object.  For human convenience, we
   often use a textual string, termed the descriptor, to also refer to
   the object type.
   

6.0  Feature Checklist
   
   The MPLS/BGP Virtual Private Network MIB (MPLS-VPN-MIB) is designed
   to satisfy the following requirements and constraints:

     1.   The MIB must support the BGP/MPLS Virtual Private Networks as
          described in [RFC2547bis]. It does not support other
          generalized network-based VPN solutions such as IPSec VPNs 
          [RFC2547bis].
     
     2.   The MIB must support the operation of BGP/MPLS VPN based on either
          an IP backbone that contains only routers/switches, or a layer-2
          backbone (e.g. Frame Relay, ATM).
     
     3.   The MIB must support BGP/MPLS VPN service as Enterprise VPN,
          Carrier's Carrier VPN, or Inter-provider Backbone VPN.
     
     4.   The MIB must support the configuration of BGP/MPLS VPNs under the
          scope listed above in 1, 2, and 3. It can be used for
          service creation and validation, or building the
          configuration tools to achieve MPLS VPN service creation automation.
     
     5.   The MIB must support the maintenance and troubleshooting of
          BGP/MPLS VPN under the scope listed in 1, 2, and 3. It can



Nadeau et al.              Expires December 2001             [Page 4]

Internet Draft               MPLS VPN MIB               June 19, 2001



          be used, in conjunction with other MIBs to build monitoring
          and troubleshooting network management tools.
     
     6.   The MIB must support BGP/MPLS VPNs that are configured on a
          particular physical or sub-interface if the interface can be divided
          (e.g. Frame Relay or ATM) by the router. The PE or CE (in the case of
          carrier of carriers) will determine the forwarding table to be used
          based on the particular interface or sub-interface information.
     
     7.   The MIB must be supported by PE/CEs and shall be used to configure
          and maintain one or more VPN Routing and Forwarding Tables (VRFs).
     
     8.   The MIB must be supported by each interface or sub-interface on a
          PE/CE that can be configured for a single VPN only.

     9.   The MIB must support a configuration where each interface belonging
          to a particular VPN on the PE router can be configured to import or
          export the information from the same VPN at different sites. These
          interfaces must also be capable of being configured to
          import or export the routing information from the different
          VPNs at the different sites.


7.0  Assumptions and Prerequisites

   It is assumed that certain things are configured and operational in
   order for the tables and objects described in this MIB to work
   correctly. These things are outlined below:
   
   - MPLS in general, must be configured and operational.
   
   - LDP paths configured between PEs and CEs.
   
   - Underlying MPLS interfaces on which the MPLS-VPN interfaces are
     run "on top of" must be configured and operational.
   

8.0  Application of the Interfaces Group to MPLS
   
   The Interfaces Group of MIB II defines generic managed objects for
   managing interfaces.  This memo contains the media-specific
   extensions to the Interfaces Group for managing MPLS interfaces.
   
   This memo assumes the interpretation of the Interfaces Group to be in
   accordance with [IFMIB] which states that the interfaces table
   (ifTable) contains information on the managed resource's interfaces
   and that each sub-layer below the internetwork layer of a network
   interface is considered an interface. Thus, the MPLS VPN-enabled
   interface is represented as an entry in the ifTable. This entry is
   then "stacked" upon an underlying ifType = mpls(166) interface



Nadeau et al.              Expires December 2001             [Page 5]

Internet Draft               MPLS VPN MIB               June 19, 2001



   [LSRMIB]. It is also possible that in the case where MPLS TE
   Tunnels are used to transport MPLS BGP/VPN traffic that an MPLS VPN
   interface be 'stacked' upon an interface of ifType =
   mplsTunnel(150) [TEMIB] that is in-turn 'stacked' upon an MPLS-type
   interface. The inter-relation of entries in the ifTable is defined
   by the Interfaces Stack Group defined in [IFMIB]. The VPN interface
   should keep track of statistics and other interface related
   information for that VPN interface only. This interface statistics
   should be a subset of those maintained on the underlying MPLS
   interface(s). For example, the bytes received on the MPLS VPN
   interface should be less than or equal to those noted as received
   on the MPLS interface onto which the VPN interface is stacked.
   
   When using MPLS VPN-enabled interfaces, the interface stack table
   should appear as follows:
   
      +-------------------------------------------+
      | MPLS/BGP VPN    ifType = mplsVpn(T.B.D.)  |
      +-------------------------------------------+
      | MPLS-interface ifType = mpls(166)         +
      +-------------------------------------------+
      | Underlying Layer...                       +
      +-------------------------------------------+
   
   In the above diagram, "Underlying Layer..." refers to the ifIndex of
   any interface type, which has been defined for MPLS interworking and
   onto which the MPLS-layer is stacked upon. Examples include ATM,
   Frame Relay, Ethernet, etc.
   
   It is also possible that the interface stack table appear as follows
   in the case that MPLS TE Tunnels are used to transport the MPLS VPN
   traffic:

   
      +-------------------------------------------+
      | MPLS/BGP VPN    ifType = mplsVpn(T.B.D.)  |
      +-------------------------------------------+
      | MPLS TE Tunnel  ifType = mplsTunnel(150)  |
      +-------------------------------------------+
      | MPLS-interface ifType = mpls(166)         +
      +-------------------------------------------+
      | Underlying Layer...                       +
      +-------------------------------------------+
   
   

9.0  Brief Description of MIB Objects

   The following subsections describe the purpose of each of the objects
   contained in the MPLS-VPN-MIB.



Nadeau et al.              Expires December 2001             [Page 6]

Internet Draft               MPLS VPN MIB               June 19, 2001




9.1  mplsVpnVrfConfTable

   This table represents the MPLS/BGP VPNs that are configured.
   An operator or Network Management System (NMS) creates an
   entry in this table for every MPLS/BGP VPN configured to run
   in this MPLS domain. A VRF represents an instance of a VPN
   supported by one or more PE Routers. The collection of VRFs
   from all network devices comprises the actual VPN.
   
   It should be noted that the VPN that is configured at
   a particular device represents an instance of that VPN
   and not the entire VPN. The collective set of VPN instances comprises
   the actual VPN. This information is typically
   only known in its entirety at the NMS.

9.2  mplsVPNInterfaceConfTable

   This table represents the MPLS/BGP VPN-enabled interfaces.
   Each entry in this table corresponds to an entry in the
   Interfaces MIB. In addition, each entry extends its
   corresponding entry in the Interface MIB to contain
   specific BGP/MPLS VPN information. Due to this
   correspondence, certain objects such as traffic counters
   are not found in this MIB to avoid overlap, and instead
   are found in the Interfaces MIB.

9.3  mplsVPNPerfTable

   This table contains objects to measure the performance of
   MPLS/BGP VPNs and augments the mplsVPNConfTable. High
   capacity counters are provided for objects that are likely
   to wrap around quickly on objects such as high-speed interface
   counters.


9.4  mplsVpnVrfRouteTable

   The table contains the objects necessary to configure and monitor
   routes for a particular VRF.

9.5  MplsVpnRouteTargetTable

   The table contains the objects necessary to configure and monitor
   route targets for a particular VRF.

10.0 Example of MPLS/BGP VPN Setup

   In this section, we provide a brief example of using the MIB
   objects described in the following section. While this example



Nadeau et al.              Expires December 2001             [Page 7]

Internet Draft               MPLS VPN MIB               June 19, 2001



   is not meant to illustrate very nuance of the MIB, it is intended
   as an aid to understanding some of the key concepts.  It is our
   intent that it is read only after the reader has gone through
   the MIB itself.
   
   This configuration is under the assumption that 1) MPLS has been pre-
   configured in the network, through enabling LDP or RSVP-TE. 2) OSPF
   or ISIS has been pre-configured. 3) BGP sessions have been
   established between PEs.
   
   Defining the VPN:


In mplsVpnVrfConfTable:
{
   mplsVpnVrfName               = "RED",
   mplsVpnVrfDescription        = "Intranet of Company ABC",
   mplsVpnVrfRouteDistinguisher = 100:1,
   }

In mplsVpnVrfRouteTargetTable
   mplsVpnVrfRouteTargetImport  = 100:2,
   mplsVpnVrfRouteTargetExport  = 100:1,
   }

   Configuring PE to PE BGP Routing Session with BGP
   extended family
   
In mplsVpnVrfConfTable:
   {
   mplsVpnVrfBgpAddrFamilyVpnv4Unicast = true (1),
   mplsVpnVrfBgpAFNeighborPEAddr       = 10.10.10.1 {the other PE},
   mplsVpnVrfBgpAFNeighborPEType       = IpV4
   }

   Configuring PE to CE BGP Routing Sessions:
   
In mplsVpnVrfConfTable:
   {
   mplsVpnVrfName                      = "RED",
   mplsVpnVrfBgpAddrFamilyVpnv4Unicast = true (1),
   mplsVpnVrfBgpAFNeighborCEAddr       = 192.123.123.1 {adjacent CE},
   mplsVpnVrfBgpAFNeighborCEType       = IpV4
   }
   
   (or Configuring PE to CE RIP Routing Sessions)

In mplsVpnVrfConfTable:
   {
   mplsVpnVrfName                      = "RED",



Nadeau et al.              Expires December 2001             [Page 8]

Internet Draft               MPLS VPN MIB               June 19, 2001



   mplsVpnVrfNetType                   = rip(2),
   mplsVpnVrfRipNetPrefix              = 192.123.123.4 {the network
                                         prefix  to the adjacent CE),
   }

   (or Configuring PE to CE Static Routing Sessions)
   
In mplsVpnVrfConfTable:
   {
   mplsVpnVrfName                    = "RED",
   mplsVpnVrfIpRouteVrfForwByType    = IpV4 (1)
   mplsVpnVrfIpRouteVrfDest        = 192.123.210.1 {destination},
   mplsVpnVrfIpRouteVrfForwByAddr    = 192.123.123.1 {forwarded by},
   mplsVpnVrfIpRouteRedistributeConn = true (1)
   }

   Note that this example assumes that the P routers are configured with
   MPLS LDP and RSVP TE tunnels using existing MIBs.
   
   
   Ed Notes:
   
   Need to add route target table here.
   
   Step 1: create VRF; result (VRF + I/F associations + BGP peers,
   routes etc)
   
   Step 2: verification; how
   
   Also a monitoring example would be helpful
   

11.0 MPLS/BGP VPN MIB Definitions

MPLS-VPN-MIB DEFINITIONS ::= BEGIN

IMPORTS
   MODULE-IDENTITY, OBJECT-TYPE, NOTIFICATION-TYPE,
   experimental, Integer32, Counter32, Unsigned32,
   TimeTicks
      FROM SNMPv2-SMI

   MODULE-COMPLIANCE, OBJECT-GROUP, NOTIFICATION-GROUP
      FROM SNMPv2-CONF

   TEXTUAL-CONVENTION, TruthValue, RowStatus, StorageType,
   TimeStamp, DisplayString
      FROM SNMPv2-TC

   InterfaceIndex



Nadeau et al.              Expires December 2001             [Page 9]

Internet Draft               MPLS VPN MIB               June 19, 2001



      FROM IF-MIB

   SnmpAdminString
      FROM SNMP-FRAMEWORK-MIB

   InetAddress, InetAddressType
      FROM INET-ADDRESS-MIB;

mplsVpnMIB MODULE-IDENTITY
   LAST-UPDATED "200106191200Z"  -- 19 June 2001 12:00:00 GMT
   ORGANIZATION "Provider Provisioned Virtual Private
                 Networks Working Group."
   CONTACT-INFO
          "        Thomas D. Nadeau
                   tnadeau@cisco.com

                   Luyuan Fang
                   luyuanfang@att.com

                   Stephen Brannon

                   Fabio M. Chiussi
                   fabio@bell-labs.com

                   Joseph Dube
                   jdube@avici.com

                   Martin Tatham
                   martin.tatham@bt.com

                   Harmen Van Der Linde
                   hvdl@att.com

                   Comments and discussion to ppvpn@ietf.org"

   DESCRIPTION
        "This MIB contains managed object definitions for the
         Multiprotocol Label Switching (MPLS)/Border Gateway
         Protocol (BGP) Virtual Private Networks (VPNs) as
         defined in : Rosen, E., Viswanathan, A., and R.
         Callon, Multiprotocol Label Switching Architecture,
         Internet Draft <draft-ietf-mpls-arch-06.txt>,
         August 1999."

  -- Revision history.

  REVISION
        "200106191200Z"  -- 19 June 2001 12:00:00 GMT
   DESCRIPTION
        "Fixed several compile errors."



Nadeau et al.             Expires December 2001             [Page 10]

Internet Draft               MPLS VPN MIB               June 19, 2001



  REVISION
       "200105301200Z"  -- 30 May 2001 12:00:00 EST
   DESCRIPTION
        "Updated most of document and MIB to reflect comments from WG."
  REVISION
       "200009301200Z"  -- 30 September 2000 12:00:00 EST
   DESCRIPTION
      "Initial draft version."
   ::= { experimental 99 } -- To be assigned

-- Textual Conventions.

MplsVpnId ::= TEXTUAL-CONVENTION
   STATUS        current
   DESCRIPTION
       "An identifier that is assigned to each MPLS/BGP VPN and
        is used to uniquely identify it. This is assigned by the
        system operator or NMS and SHOULD be unique throughout
        the MPLS domain. If this is the case, then this identifier
        can then be used at any LSR within a specific MPLS domain
        to identify this MPLS/BGP VPN. It may also be possible to
        preserve the uniqueness of this identifier across MPLS
        domain boundaries, in which case this identifier can then
        be used to uniquely identify MPLS/BGP VPNs on a more global
        basis."
   REFERENCE
        "RFC 2685 [VPN-RFC2685] Fox B., et al, 'Virtual Private
        Networks Identifier', September 1999."
   SYNTAX SnmpAdminString (SIZE (0..31))

MplsVpnRouteDistinguisher ::= TEXTUAL-CONVENTION
   STATUS        current
   DESCRIPTION
       "A route distinguisher."
   SYNTAX  OCTET STRING(SIZE (0..256))


-- Top level components of this MIB.
mplsVpnNotifications OBJECT IDENTIFIER ::= { mplsVpnMIB 0 }
mplsVpnObjects       OBJECT IDENTIFIER ::= { mplsVpnMIB 1 }
mplsVpnScalars       OBJECT IDENTIFIER ::= { mplsVpnObjects 1 }
mplsVpnConf          OBJECT IDENTIFIER ::= { mplsVpnObjects 2 }
mplsVpnPerf          OBJECT IDENTIFIER ::= { mplsVpnObjects 3 }
mplsVpnRoute         OBJECT IDENTIFIER ::= { mplsVpnObjects 4 }
mplsVpnConformance   OBJECT IDENTIFIER ::= { mplsVpnMIB 3 }

-- Scalar Objects
mplsVpnConfiguredVrfs OBJECT-TYPE
   SYNTAX        Unsigned32




Nadeau et al.             Expires December 2001             [Page 11]

Internet Draft               MPLS VPN MIB               June 19, 2001



   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "The number of VRFs which are configured on this node."
::= { mplsVpnScalars 1 }

mplsVpnActiveVrfs OBJECT-TYPE
   SYNTAX        Unsigned32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "The number of VRFs which are active on this node.
        That is, those whose operStatus = Up (1)."
::= { mplsVpnScalars 2 }

mplsVpnTrapEnable OBJECT-TYPE
   SYNTAX        TruthValue
   MAX-ACCESS    read-write
   STATUS        current
   DESCRIPTION
        "If this object is true, then it enables the
         generation of mplsVpnUp and mplsVpnDown traps,
         otherwise these traps are not emitted."
   DEFVAL { false }
   ::= { mplsVpnScalars 3 }

-- VPN Interface Configuration Table

mplsVpnInterfaceConfTable  OBJECT-TYPE
   SYNTAX        SEQUENCE OF MplsVpnInterfaceConfEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This table specifies per-interface MPLS capability
        and associated information."
   ::= { mplsVpnConf 1 }

mplsVpnInterfaceConfEntry OBJECT-TYPE
   SYNTAX        MplsVpnInterfaceConfEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "An entry in this table is created by an LSR for
        every interface capable of supporting MPLS/BGP VPN.
        Each entry in this table is meant to correspond to
        an entry in the Interfaces Table."
   INDEX       { mplsVpnInterfaceConfIndex }
      ::= { mplsVpnInterfaceConfTable 1 }

MplsVpnInterfaceConfEntry ::= SEQUENCE {



Nadeau et al.             Expires December 2001             [Page 12]

Internet Draft               MPLS VPN MIB               June 19, 2001



  mplsVpnInterfaceConfIndex             InterfaceIndex,
  mplsVpnInterfaceLabelEdgeType         INTEGER,
  mplsVpnInterfaceVpnClassification     INTEGER,
  mplsVpnInterfaceConfStorageType       StorageType
}

mplsVpnInterfaceConfIndex OBJECT-TYPE
   SYNTAX        InterfaceIndex
   MAX-ACCESS    accessible-for-notify
   STATUS        current
   DESCRIPTION
       "This is a unique index for an entry in the
        MplsVPNInterfaceConfTable. A non-zero index for an
        entry indicates the ifIndex for the corresponding
        interface entry in the MPLS-VPN-layer in the ifTable.
        Note that this table does not necessarily correspond
        one-to-one with all entries in the Interface MIB
        having an ifType of MPLS-layer; rather, only those
        which are enabled for MPLS/BGP VPN functionality."
   REFERENCE
       "RFC 2233 - The Interfaces Group MIB using SMIv2,
        McCloghrie, K., and F. Kastenholtz, Nov. 1997"
   ::= { mplsVpnInterfaceConfEntry 1 }

mplsVpnInterfaceLabelEdgeType OBJECT-TYPE
   SYNTAX  INTEGER { providerEdge (1),
                     customerEdge (2)
                   }
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Either the providerEdge(0) (PE) or customerEdge(1)
       (CE) bit MUST be set."
::= { mplsVpnInterfaceConfEntry 2 }

mplsVpnInterfaceVpnClassification OBJECT-TYPE
   SYNTAX        INTEGER { carrierOfCarrier (1),
                           enterprise (2),
                           interProvider (3)
   }
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Denotes whether this link participates in a
        carrier-of-carrier's, enterprise, or inter-provider
        scenario."
::= { mplsVpnInterfaceConfEntry 3 }

mplsVpnInterfaceConfStorageType  OBJECT-TYPE
   SYNTAX      StorageType



Nadeau et al.             Expires December 2001             [Page 13]

Internet Draft               MPLS VPN MIB               June 19, 2001



   MAX-ACCESS  read-create
   STATUS      current
   DESCRIPTION
       "The storage type for this entry."
   ::= { mplsVpnInterfaceConfEntry 4 }

-- VRF Configuration Table

mplsVpnVrfConfTable  OBJECT-TYPE
   SYNTAX        SEQUENCE OF MplsVpnVrfConfEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This table specifies per-interface MPLS/BGP VPN
        VRF Table capability and associated information.
        Entries in this table define VRF routing instances
        associated with MPLS/VPN interfaces. Note that
        multiple interfaces can belong to the same VRF
        instance. The collection of all VRF instances
        comprises an actual VPN."
   ::= { mplsVpnConf 2 }

mplsVpnVrfConfEntry OBJECT-TYPE
   SYNTAX        MplsVpnVrfConfEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "An entry in this table is created by an LSR for
        every VRF capable of supporting MPLS/BGP VPN. The
        indexing provides an ordering of VRFs per-VPN
        interface."
   INDEX       { mplsVpnVrfName }
      ::= { mplsVpnVrfConfTable 1 }

MplsVpnVrfConfEntry ::= SEQUENCE {
  mplsVpnVrfName                      MplsVpnId,
  mplsVpnVrfDescription               SnmpAdminString,
  mplsVpnVrfRouteDistinguisher        MplsVpnRouteDistinguisher,
  mplsVpnVrfRouteSiteOrigin           MplsVpnRouteDistinguisher,
  mplsVpnVrfCreationTime              TimeStamp,
  mplsVpnVrfUpTime                    TimeTicks,
  mplsVpnVrfNetPrefixType             INTEGER,
  mplsVpnVrfRipNetPrefix              InetAddress,
  mplsVpnVrfOspfNetPrefix             InetAddress,
  mplsVpnVrfIsisNetPrefix             InetAddress,
  mplsVpnVrfIpRouteVrfForwByType      InetAddressType,
  mplsVpnVrfIpRouteVrfForwByAddr      InetAddress,
  mplsVpnVrfBgpAddrFamilyVpnv4Unicast TruthValue,
  mplsVpnVrfBgpAFNeighborPEAct        TruthValue,
  mplsVpnVrfIpRouteRedistributeConn   TruthValue,



Nadeau et al.             Expires December 2001             [Page 14]

Internet Draft               MPLS VPN MIB               June 19, 2001



  mplsVpnVrfConfMidRouteThreshold     Unsigned32,
  mplsVpnVrfConfHighRouteThreshold    Unsigned32,
  mplsVpnVrfConfMaxRoutes             Unsigned32,
  mplsVpnVrfConfMaxPossibleRoutes     Unsigned32,
  mplsVpnVrfConfLastChanged           TimeTicks,
  mplsVpnVrfIpRouteVrfDest            InetAddress,
  mplsVpnVrfBgpAFNeighborPEAddr       InetAddress,
  mplsVpnVrfBgpAFNeighborPEType       InetAddressType,
  mplsVpnVrfBgpAFNeighborCEAddr       InetAddress,
  mplsVpnVrfBgpAFNeighborCEType       InetAddressType,
  mplsVpnVrfConfRowStatus             RowStatus,
  mplsVpnVrfConfStorageType           StorageType
}

mplsVpnVrfName OBJECT-TYPE
   SYNTAX        MplsVpnId
   MAX-ACCESS    accessible-for-notify
   STATUS        current
   DESCRIPTION
       "The human-readable name of this VPN. This MAY
        be equivalent to the RFC2685 VPN-ID."

   REFERENCE
       "RFC 2685 [VPN-RFC2685] Fox B., et al, `Virtual
        Private Networks Identifier`, September 1999."
::= { mplsVpnVrfConfEntry 1 }

mplsVpnVrfDescription OBJECT-TYPE
   SYNTAX        SnmpAdminString
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "The human-readable description of this VRF."
::= { mplsVpnVrfConfEntry 2 }

mplsVpnVrfRouteDistinguisher OBJECT-TYPE
   SYNTAX        MplsVpnRouteDistinguisher
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "The route distinguisher for this VRF."
::= { mplsVpnVrfConfEntry 3 }

mplsVpnVrfRouteSiteOrigin OBJECT-TYPE
   SYNTAX        MplsVpnRouteDistinguisher
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
      "The site origin distribution policy."
::= { mplsVpnVrfConfEntry 4 }



Nadeau et al.             Expires December 2001             [Page 15]

Internet Draft               MPLS VPN MIB               June 19, 2001




mplsVpnVrfCreationTime OBJECT-TYPE
   SYNTAX        TimeStamp
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "The time at which this VRF entry was created."
::= { mplsVpnVrfConfEntry 5 }

mplsVpnVrfUpTime OBJECT-TYPE
   SYNTAX        TimeTicks
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "The amount of time that this VRF entry has been
        operational."
::= { mplsVpnVrfConfEntry 6 }

mplsVpnVrfNetPrefixType  OBJECT-TYPE
   SYNTAX        INTEGER { other(1),
                           rip(2),
                           ospf(3),
                           isis(4)
                         }
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Denotes the type network prefix in use for the
        PE-CE connections. If this value is set to rip(2),
        then the operators should consult the value found
        in mplsVpnVrfRipNetPrefix. If the value is set to
        ospf(2), the operator should consult
        mplsVpnVrfOspfNetPrefix. If the value is set to
        isis(4), then the administrator should see
        mplsVpnVrfIsisNetPrefix. In all cases, when a
        particular value is selected, the other remaining
        two values should ignored as their values MAY be
        invalid."
  ::= { mplsVpnVrfConfEntry 7 }

mplsVpnVrfRipNetPrefix   OBJECT-TYPE
   SYNTAX        InetAddress
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Denotes the RIP network prefix for the
        PE-CE connections."
  ::= { mplsVpnVrfConfEntry 8 }

mplsVpnVrfOspfNetPrefix  OBJECT-TYPE



Nadeau et al.             Expires December 2001             [Page 16]

Internet Draft               MPLS VPN MIB               June 19, 2001



   SYNTAX        InetAddress
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Denotes the OSPF network prefix for the
        PE-CE connections."
  ::= { mplsVpnVrfConfEntry 9 }

mplsVpnVrfIsisNetPrefix  OBJECT-TYPE
   SYNTAX        InetAddress
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Denotes the IS-IS network prefix for the
        PE-CE connections."
  ::= { mplsVpnVrfConfEntry 10 }

mplsVpnVrfIpRouteVrfForwByType OBJECT-TYPE
   SYNTAX        InetAddressType
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Denotes the address family of the BGP
        forwarding address."
  ::= { mplsVpnVrfConfEntry 11 }

mplsVpnVrfIpRouteVrfForwByAddr OBJECT-TYPE
   SYNTAX        InetAddress
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Denotes the BGP forwarding address."
  ::= { mplsVpnVrfConfEntry 12 }

mplsVpnVrfBgpAddrFamilyVpnv4Unicast OBJECT-TYPE
   SYNTAX        TruthValue
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
     "Defines an IBGP parameter for VPNv4 NLRI
      exchange, true for Unicast, false for Multicast."
  ::= { mplsVpnVrfConfEntry 13 }

mplsVpnVrfBgpAFNeighborPEAct OBJECT-TYPE
   SYNTAX        TruthValue
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
     "Denotes the activation of the advertisement of
      the VPNv4 address family for PE-CE connection."



Nadeau et al.             Expires December 2001             [Page 17]

Internet Draft               MPLS VPN MIB               June 19, 2001



  ::= { mplsVpnVrfConfEntry 14 }

mplsVpnVrfIpRouteRedistributeConn OBJECT-TYPE
   SYNTAX        TruthValue
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
     "Denotes the redistribution of directly connected
      networks into the VRF BGP table."
  ::= { mplsVpnVrfConfEntry 15 }

mplsVpnVrfConfMidRouteThreshold     OBJECT-TYPE
   SYNTAX        Unsigned32
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
     "Denotes mid-level water marker for the number
      of routes which  this VRF may hold."
  ::= { mplsVpnVrfConfEntry 16 }

mplsVpnVrfConfHighRouteThreshold  OBJECT-TYPE
   SYNTAX        Unsigned32
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
     "Denotes high-level water marker for the number of
      routes which  this VRF may hold."
  ::= { mplsVpnVrfConfEntry 17 }

mplsVpnVrfConfMaxRoutes  OBJECT-TYPE
   SYNTAX        Unsigned32
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
     "Denotes maximum number of routes which this VRF is
      configured to hold. This value MUST be less than or
      equal to mplsVrfMaxPossibleRoutes."
  ::= { mplsVpnVrfConfEntry 18 }

mplsVpnVrfConfMaxPossibleRoutes  OBJECT-TYPE
   SYNTAX        Unsigned32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
     "Denotes maximum number of routes which the device
      will allow any one VRF to hold."
  ::= { mplsVpnVrfConfEntry 19 }

mplsVpnVrfConfLastChanged  OBJECT-TYPE
   SYNTAX        TimeTicks



Nadeau et al.             Expires December 2001             [Page 18]

Internet Draft               MPLS VPN MIB               June 19, 2001



   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
     "The value of sysUpTime at the time of the last
      creation or deletion of an entry in this table.
      If the number of entries has been unchanged since the
      last re-initialization of the local network management
      subsystem, then this object contains a zero value."
  ::= { mplsVpnVrfConfEntry 20 }

mplsVpnVrfIpRouteVrfDest  OBJECT-TYPE
   SYNTAX        InetAddress
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "The destination prefix when defining static route parameters
        for the PE-CE session."
  ::= { mplsVpnVrfConfEntry 21 }

mplsVpnVrfBgpAFNeighborPEAddr  OBJECT-TYPE
   SYNTAX        InetAddress
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "The PE prefix under the VPN ipv4 address-family when defining
        an EBGP session between PE and CE routers."
  ::= { mplsVpnVrfConfEntry 22 }

mplsVpnVrfBgpAFNeighborPEType  OBJECT-TYPE
   SYNTAX        InetAddressType
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "The address type of the mplsVpnVrfBgpAFNeighborPEAddr
        entry."
  ::= { mplsVpnVrfConfEntry 23 }

mplsVpnVrfBgpAFNeighborCEAddr  OBJECT-TYPE
   SYNTAX        InetAddress
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "The CE prefix under the VPN ipv4 address-family when defining
        an EBGP session between PE and CE routers."
  ::= { mplsVpnVrfConfEntry 24 }

mplsVpnVrfBgpAFNeighborCEType  OBJECT-TYPE
   SYNTAX        InetAddressType
   MAX-ACCESS    read-create
   STATUS        current



Nadeau et al.             Expires December 2001             [Page 19]

Internet Draft               MPLS VPN MIB               June 19, 2001



   DESCRIPTION
       "The address type of the mplsVpnVrfBgpAFNeighborCEAddr
        entry."
  ::= { mplsVpnVrfConfEntry 25 }

mplsVpnVrfConfRowStatus OBJECT-TYPE
   SYNTAX        RowStatus
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "This variable is used to create, modify, and/or
        delete a row in this table."
  ::= { mplsVpnVrfConfEntry 26 }

mplsVpnVrfConfStorageType  OBJECT-TYPE
   SYNTAX      StorageType
   MAX-ACCESS  read-create
   STATUS      current
   DESCRIPTION
       "The storage type for this entry."
   ::= { mplsVpnVrfConfEntry 27 }

-- MplsVpnRouteTargetTable

   mplsVpnVrfRouteTargetTable OBJECT-TYPE
      SYNTAX        SEQUENCE OF MplsVpnVrfRouteTargetEntry
      MAX-ACCESS    not-accessible
      STATUS        current
      DESCRIPTION
          "This table specifies per-VRF route target association"
      ::= { mplsVpnConf 3 }

   mplsVpnVrfRouteTargetEntry OBJECT-TYPE
      SYNTAX        MplsVpnVrfRouteTargetEntry
      MAX-ACCESS    not-accessible
      STATUS        current
      DESCRIPTION
          " An entry in this table is created by an LSR for
           each route target configured for a VRF supporting
           a MPLS/BGP VPN instance. The indexing provides an
           ordering per-VRF instance."
      INDEX  { mplsVpnVrfName, mplsVpnVrfRouteTargetImport,
               mplsVpnVrfRouteTargetImport }
         ::= { mplsVpnVrfRouteTargetTable 1 }

   MplsVpnVrfRouteTargetEntry ::= SEQUENCE {
     mplsVpnVrfRouteTargetImport     MplsVpnRouteDistinguisher,
     mplsVpnVrfRouteTargetExport     MplsVpnRouteDistinguisher,
     mplsVpnVrfRouteTargetDescr      DisplayString,
     mplsVpnVrfRouteTargetRowStatus  RowStatus



Nadeau et al.             Expires December 2001             [Page 20]

Internet Draft               MPLS VPN MIB               June 19, 2001



   }

mplsVpnVrfRouteTargetImport OBJECT-TYPE
   SYNTAX        MplsVpnRouteDistinguisher
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "The route target import distribution policy."
   ::= { mplsVpnVrfRouteTargetEntry 1 }

mplsVpnVrfRouteTargetExport OBJECT-TYPE
   SYNTAX        MplsVpnRouteDistinguisher
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "The route target export distribution policy."
   ::= { mplsVpnVrfRouteTargetEntry 2 }

mplsVpnVrfRouteTargetDescr OBJECT-TYPE
   SYNTAX        DisplayString
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Description of the route target."
   ::= { mplsVpnVrfRouteTargetEntry 3 }

mplsVpnVrfRouteTargetRowStatus OBJECT-TYPE
   SYNTAX        RowStatus
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Row status for this entry."
   ::= { mplsVpnVrfRouteTargetEntry 4 }

-- MplsVpnVrfBgpNbrAddrTable

-- Ed Note: how does this table relate to the BGP peering table;
--          this is only EBGP; what about IBGP info?
--          route/tag distributions

   mplsVpnVrfBgpNbrAddrTable OBJECT-TYPE
      SYNTAX        SEQUENCE OF MplsVpnVrfBgpNbrAddrEntry
      MAX-ACCESS    not-accessible
      STATUS        current
      DESCRIPTION
          "This table specifies per-interface MPLS/BGP neighbor
           addresses for both PEs and CEs."
      ::= { mplsVpnConf 4 }

   mplsVpnVrfBgpNbrAddrEntry OBJECT-TYPE



Nadeau et al.             Expires December 2001             [Page 21]

Internet Draft               MPLS VPN MIB               June 19, 2001



      SYNTAX        MplsVpnVrfBgpNbrAddrEntry
      MAX-ACCESS    not-accessible
      STATUS        current
      DESCRIPTION
          "An entry in this table is created by an LSR for
           every VRF capable of supporting MPLS/BGP VPN. The
           indexing provides an ordering of VRFs per-VPN
           interface."
      INDEX  { mplsVpnVrfName, mplsVpnInterfaceConfIndex,
               mplsVpnVrfBgpNbrIndex }
         ::= { mplsVpnVrfBgpNbrAddrTable 1 }

   MplsVpnVrfBgpNbrAddrEntry ::= SEQUENCE {
     mplsVpnVrfBgpNbrIndex        Unsigned32,
     mplsVpnVrfBgpNbrRole         INTEGER,
     mplsVpnVrfBgpNbrType         InetAddressType,
     mplsVpnVrfBgpNbrAddr         InetAddress,
     mplsVpnVrfBgpNbrRowStatus    RowStatus,
     mplsVpnVrfBgpNbrStorageType  StorageType
   }

   mplsVpnVrfBgpNbrIndex OBJECT-TYPE
      SYNTAX        Unsigned32
      MAX-ACCESS    not-accessible
      STATUS        current
      DESCRIPTION
          "This is a unique tertiary index for an entry in the
           MplsVpnVrfBgpNbrAddrEntry Table."
      ::= { mplsVpnVrfBgpNbrAddrEntry 1 }

   mplsVpnVrfBgpNbrRole  OBJECT-TYPE
      SYNTAX        INTEGER { ce(1), pe(2), both(3) }
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "Denotes the role played by this BGP neighbor
           with respect to this VRF."
     ::= { mplsVpnVrfBgpNbrAddrEntry 2 }

   mplsVpnVrfBgpNbrType  OBJECT-TYPE
      SYNTAX        InetAddressType
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "Denotes the address family of the PE address."
     ::= { mplsVpnVrfBgpNbrAddrEntry 3 }

   mplsVpnVrfBgpNbrAddr  OBJECT-TYPE
      SYNTAX        InetAddress
      MAX-ACCESS    read-create



Nadeau et al.             Expires December 2001             [Page 22]

Internet Draft               MPLS VPN MIB               June 19, 2001



      STATUS        current
      DESCRIPTION
          "Denotes the BGP neighbor address."
     ::= { mplsVpnVrfBgpNbrAddrEntry 4 }

   mplsVpnVrfBgpNbrRowStatus OBJECT-TYPE
      SYNTAX        RowStatus
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "This variable is used to create, modify, and/or
           delete a row in this table."
      ::= { mplsVpnVrfBgpNbrAddrEntry 5 }

   mplsVpnVrfBgpNbrStorageType OBJECT-TYPE
      SYNTAX      StorageType
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "The storage type for this entry."
      ::= { mplsVpnVrfBgpNbrAddrEntry 6 }

-- Ed Note: What still needed:
-- EBGP traffic counts, state, last reported error;
-- We need additional BGP traps right now only state change traps
-- also error traps Same deal for IBGP stuff; make clear
-- linkage with the BGP MIB (1657)

-- VRF Security Table

mplsVpnVrfSecTable  OBJECT-TYPE
   SYNTAX        SEQUENCE OF MplsVpnVrfSecEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This table specifies per MPLS/BGP VPN VRF Table security
        features."
   ::= { mplsVpnConf 5 }

mplsVpnVrfSecEntry OBJECT-TYPE
   SYNTAX        MplsVpnVrfSecEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "An entry in this table is created by an LSR for
        every VRF capable of supporting MPLS/BGP VPN. Each
        entry in this table is used to indicate security-related
        information for each VRF entry."
   AUGMENTS      { mplsVpnVrfConfEntry }
      ::= { mplsVpnVrfSecTable 1 }



Nadeau et al.             Expires December 2001             [Page 23]

Internet Draft               MPLS VPN MIB               June 19, 2001




MplsVpnVrfSecEntry ::= SEQUENCE {
  mplsVpnVrfSecViolations     Counter32
}

mplsVpnVrfSecViolations OBJECT-TYPE
   SYNTAX        Counter32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Indicates the number of security violations on this VPN/VRF."
   ::= { mplsVpnVrfSecEntry 1 }

-- VRF Performance Table

mplsVpnVrfPerfTable  OBJECT-TYPE
   SYNTAX        SEQUENCE OF MplsVpnVrfPerfEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This table specifies per MPLS/BGP VPN VRF Table performance
        information."
   ::= { mplsVpnPerf 1 }

mplsVpnVrfPerfEntry OBJECT-TYPE
   SYNTAX        MplsVpnVrfPerfEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "An entry in this table is created by an LSR for
        every VRF capable of supporting MPLS/BGP VPN."
   AUGMENTS      { mplsVpnVrfConfEntry }
      ::= { mplsVpnVrfPerfTable 1 }

MplsVpnVrfPerfEntry ::= SEQUENCE {
   mplsVpnVrfPerfRoutesAdded       Counter32,
   mplsVpnVrfPerfRoutesDeleted     Counter32,
   mplsVpnVrfPerfCurrNumRoutes     Unsigned32
}

mplsVpnVrfPerfRoutesAdded OBJECT-TYPE
   SYNTAX        Counter32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Indicates the number of routes added to this VPN/VRF over the
        coarse of its lifetime."
   ::= { mplsVpnVrfPerfEntry 1 }

mplsVpnVrfPerfRoutesDeleted OBJECT-TYPE



Nadeau et al.             Expires December 2001             [Page 24]

Internet Draft               MPLS VPN MIB               June 19, 2001



   SYNTAX        Counter32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Indicates the number of routes removed from this VPN/VRF."
   ::= { mplsVpnVrfPerfEntry 2 }

mplsVpnVrfPerfCurrNumRoutes     OBJECT-TYPE
   SYNTAX        Unsigned32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Indicates the number of routes currently used by this VRF."
   ::= { mplsVpnVrfPerfEntry 3 }

-- VRF Routing Table

mplsVpnVrfRouteTable  OBJECT-TYPE
   SYNTAX        SEQUENCE OF MplsVpnVrfRouteEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This table specifies per-interface MPLS/BGP VPN VRF Table
        routing information. Entries in this table define VRF routing
        entries associated with the specified MPLS/VPN interfaces. Note
        that this table contains both BGP and IGP routes, as both may
        appear in the same VRF."
    REFERENCE
       "1.  RFC 1213 Section 6.6, The IP Group.
        2.  RFC 2096 "
   ::= { mplsVpnRoute 1 }

mplsVpnVrfRouteEntry OBJECT-TYPE
   SYNTAX        MplsVpnVrfRouteEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "An entry in this table is created by an LSR for every route
        present configured (either dynamically or statically) within
        the context of a specific VRF capable of supporting MPLS/BGP
        VPN. The indexing provides an ordering of VRFs per-VPN
        interface."
      INDEX  { mplsVpnVrfName, mplsVpnVrfRouteDest,
               mplsVpnVrfRouteMask, mplsVpnVrfRouteTos,
               mplsVpnVrfRouteNextHop }
      ::= { mplsVpnVrfRouteTable 1 }

MplsVpnVrfRouteEntry ::= SEQUENCE {
       mplsVpnVrfRouteDest               InetAddress,
       mplsVpnVrfRouteDestAddrType       InetAddressType,



Nadeau et al.             Expires December 2001             [Page 25]

Internet Draft               MPLS VPN MIB               June 19, 2001



       mplsVpnVrfRouteMask               InetAddress,
       mplsVpnVrfRouteMaskAddrType       InetAddressType,
       mplsVpnVrfRouteTos                Unsigned32,
       mplsVpnVrfRouteNextHop            InetAddress,
       mplsVpnVrfRouteNextHopAddrType    InetAddressType,
       mplsVpnVrfRouteIfIndex            InterfaceIndex,
       mplsVpnVrfRouteType               INTEGER,
       mplsVpnVrfRouteProto              INTEGER,
       mplsVpnVrfRouteAge                Unsigned32,
       mplsVpnVrfRouteInfo               OBJECT IDENTIFIER,
       mplsVpnVrfRouteNextHopAS          Unsigned32,
       mplsVpnVrfRouteMetric1            Integer32,
       mplsVpnVrfRouteMetric2            Integer32,
       mplsVpnVrfRouteMetric3            Integer32,
       mplsVpnVrfRouteMetric4            Integer32,
       mplsVpnVrfRouteMetric5            Integer32,
       mplsVpnVrfRouteRowStatus          RowStatus,
       mplsVpnVrfRouteStorageType        StorageType
   }

mplsVpnVrfRouteDest  OBJECT-TYPE
      SYNTAX        InetAddress
      MAX-ACCESS    not-accessible
      STATUS        current
      DESCRIPTION
          "The destination IP address of this route.
           This object may not take a Multicast (Class D)
           address value.

           Any assignment (implicit or otherwise) of an
           instance of this object to a value x must be
           rejected if the bit-wise logical-AND of x with
           the value of the corresponding instance of the
           mplsVpnVrfRouteMask object is not equal to x."
      ::= { mplsVpnVrfRouteEntry 1 }

mplsVpnVrfRouteDestAddrType  OBJECT-TYPE
      SYNTAX        InetAddressType
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "The address type of the mplsVpnVrfRouteDest
           entry."
      ::= { mplsVpnVrfRouteEntry 2 }

mplsVpnVrfRouteMask  OBJECT-TYPE
      SYNTAX        InetAddress
      MAX-ACCESS    not-accessible
      STATUS        current
      DESCRIPTION



Nadeau et al.             Expires December 2001             [Page 26]

Internet Draft               MPLS VPN MIB               June 19, 2001



          "Indicate the mask to be logical-ANDed with the
           destination  address  before  being compared to
           the value  in  the  mplsVpnVrfRouteDest field.
           For those  systems  that  do  not support
           arbitrary subnet masks, an agent constructs the
           value of the mplsVpnVrfRouteMask by reference
           to the IP Address Class.

           Any assignment (implicit or otherwise) of an
           instance of this object to a value x must be
           rejected if the bit-wise logical-AND of x with
           the value of the corresponding instance of the
           mplsVpnVrfRouteDest object is not equal to
           mplsVpnVrfRouteDest."
      ::= { mplsVpnVrfRouteEntry 3 }

mplsVpnVrfRouteMaskAddrType  OBJECT-TYPE
      SYNTAX        InetAddressType
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "The address type of mplsVpnVrfRouteMask."
      ::= { mplsVpnVrfRouteEntry 4 }

mplsVpnVrfRouteTos  OBJECT-TYPE
      SYNTAX        Unsigned32
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
         "The IP TOS Field is used to specify the policy to
          be applied to this route.  The encoding of IP TOS
          is as specified  by  the  following convention.
          Zero indicates the default path if no more
          specific policy applies.

          +-----+-----+-----+-----+-----+-----+-----+-----+
          |                 |                       |     |
          |   PRECEDENCE    |    TYPE OF SERVICE    |  0  |
          |                 |                       |     |
          +-----+-----+-----+-----+-----+-----+-----+-----+

                     IP TOS                IP TOS
                Field     Policy      Field     Policy
                Contents    Code      Contents    Code
                0 0 0 0  ==>   0      0 0 0 1  ==>   2
                0 0 1 0  ==>   4      0 0 1 1  ==>   6
                0 1 0 0  ==>   8      0 1 0 1  ==>  10
                0 1 1 0  ==>  12      0 1 1 1  ==>  14

Nadeau et al.             Expires December 2001             [Page 27]



Nadeau et al.             Expires December 2001             [Page 27]

Internet Draft               MPLS VPN MIB               June 19, 2001




Internet Draft                MPLS VPN MIB               June 07, 2001

                1 0 0 0  ==>  16      1 0 0 1  ==>  18
                1 0 1 0  ==>  20      1 0 1 1  ==>  22
                1 1 0 0  ==>  24      1 1 0 1  ==>  26
                1 1 1 0  ==>  28      1 1 1 1  ==>  30."
      ::= { mplsVpnVrfRouteEntry 5 }

mplsVpnVrfRouteNextHop  OBJECT-TYPE
      SYNTAX        InetAddress
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "On remote routes, the address of the next
           system en route; Otherwise, 0.0.0.0. ."
      ::= { mplsVpnVrfRouteEntry 6 }

mplsVpnVrfRouteNextHopAddrType  OBJECT-TYPE
      SYNTAX        InetAddressType
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "The address type of the mplsVpnVrfRouteNextHopAddrType
           object."
      ::= { mplsVpnVrfRouteEntry 7 }

mplsVpnVrfRouteIfIndex  OBJECT-TYPE
      SYNTAX        InterfaceIndex
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "The ifIndex value that identifies the local
           interface  through  which  the next hop of this
           route should be reached."
      ::= { mplsVpnVrfRouteEntry 8 }

mplsVpnVrfRouteType  OBJECT-TYPE
      SYNTAX  INTEGER {
                       other  (1), -- not specified
                       reject (2), -- route to discard traffic
                       local  (3), -- local interface
                       remote (4)  -- remote destination
                      }
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "The type of route.  Note that local(3)  refers
           to a route for which the next hop is the final
           destination; remote(4) refers to a route for



Nadeau et al.             Expires December 2001             [Page 28]

Internet Draft               MPLS VPN MIB               June 19, 2001



           that the next  hop is not the final destination.
           Routes which do not result in traffic forwarding or
           rejection should not be displayed even if the
           implementation keeps them stored internally.

           reject (2) refers to a route which, if matched,
           discards the message as unreachable. This is used
           in some protocols as a means of correctly aggregating
           routes."
      ::= { mplsVpnVrfRouteEntry 9 }

mplsVpnVrfRouteProto  OBJECT-TYPE
      SYNTAX INTEGER {
                   other     (1),  -- not specified
                   local     (2),  -- local interface
                   netmgmt   (3),  -- static route
                   icmp      (4),  -- result of ICMP Redirect

                           -- the following are all dynamic
                           -- routing protocols

                   egp        (5),  -- Exterior Gateway Protocol
                   ggp        (6),  -- Gateway-Gateway Protocol
                   hello      (7),  -- FuzzBall HelloSpeak
                   rip        (8),  -- Berkeley RIP or RIP-II
                   isIs       (9),  -- Dual IS-IS
                   esIs       (10), -- ISO 9542
                   ciscoIgrp  (11), -- Cisco IGRP
                   bbnSpfIgp  (12), -- BBN SPF IGP
                   ospf       (13), -- Open Shortest Path First
                   bgp        (14), -- Border Gateway Protocol
                   idpr       (15), -- InterDomain Policy Routing
                   ciscoEigrp (16)  -- Cisco EIGRP
                }

      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "The routing mechanism via which this route was
           learned.  Inclusion of values for gateway rout-
           ing protocols is not  intended  to  imply  that
           hosts should support those protocols."
      ::= { mplsVpnVrfRouteEntry 10 }

mplsVpnVrfRouteAge                OBJECT-TYPE
      SYNTAX        Unsigned32
      MAX-ACCESS    read-only
      STATUS        current
      DESCRIPTION
          "The number of seconds since this route was



Nadeau et al.             Expires December 2001             [Page 29]

Internet Draft               MPLS VPN MIB               June 19, 2001



           last updated or otherwise determined to be
           correct. Note that no semantics of `too old'
           can be implied except through knowledge of the
           routing protocol by which the route was
           learned."
      ::= { mplsVpnVrfRouteEntry 11 }

mplsVpnVrfRouteInfo               OBJECT-TYPE
      SYNTAX        OBJECT IDENTIFIER
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "A reference to MIB definitions specific to the
           particular routing protocol which is responsi-
           ble for this route, as determined by the  value
           specified  in the route's mplsVpnVrfRouteProto
           value. If this information is not present, its
           value SHOULD be set to the OBJECT IDENTIFIER
           { 0 0 }, which is a syntactically valid object
           identif-ier, and any implementation conforming
           to ASN.1 and the Basic Encoding Rules must be
           able to generate and recognize this value."
      ::= { mplsVpnVrfRouteEntry 12 }

mplsVpnVrfRouteNextHopAS          OBJECT-TYPE
      SYNTAX        Unsigned32
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "The Autonomous System Number of the Next Hop.
           The semantics of this object are determined by
           the routing-protocol specified in the route's
           mplsVpnVrfRouteProto value. When this object is
           unknown or not relevant its value should be set
           to zero."
      ::= { mplsVpnVrfRouteEntry 13 }

mplsVpnVrfRouteMetric1  OBJECT-TYPE
      SYNTAX        Integer32
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "The primary routing metric for this route.
           The semantics of this metric are determined by
           the routing-protocol specified in  the  route's
           mplsVpnVrfRouteProto value. If this metric is not
           used, its value should be set to -1."
      ::= { mplsVpnVrfRouteEntry 14 }

mplsVpnVrfRouteMetric2  OBJECT-TYPE



Nadeau et al.             Expires December 2001             [Page 30]

Internet Draft               MPLS VPN MIB               June 19, 2001



      SYNTAX        Integer32
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "An alternate routing metric for this route.
           The semantics of this metric are determined by
           the routing-protocol specified in  the  route's
           mplsVpnVrfRouteProto value. If this metric is not
           used, its value should be set to -1."
      ::= { mplsVpnVrfRouteEntry 15 }

mplsVpnVrfRouteMetric3  OBJECT-TYPE
      SYNTAX        Integer32
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "An alternate routing metric for this route.
           The semantics of this metric are determined by
           the routing-protocol specified in  the  route's
           mplsVpnVrfRouteProto value. If this metric is not
           used, its value should be set to -1."
      ::= { mplsVpnVrfRouteEntry 16 }

mplsVpnVrfRouteMetric4  OBJECT-TYPE
      SYNTAX        Integer32
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "An alternate routing metric for this route.
           The semantics of this metric are determined by
           the routing-protocol specified in  the  route's
           mplsVpnVrfRouteProto value. If this metric is not
           used, its value should be set to -1."
      ::= { mplsVpnVrfRouteEntry 17 }

mplsVpnVrfRouteMetric5  OBJECT-TYPE
      SYNTAX        Integer32
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "An alternate routing metric for this route.
           The semantics of this metric are determined by
           the routing-protocol specified in  the  route's
           mplsVpnVrfRouteProto value. If this metric is not
           used, its value should be set to -1."
      ::= { mplsVpnVrfRouteEntry 18 }

mplsVpnVrfRouteRowStatus  OBJECT-TYPE
      SYNTAX        RowStatus
      MAX-ACCESS    read-create



Nadeau et al.             Expires December 2001             [Page 31]

Internet Draft               MPLS VPN MIB               June 19, 2001



      STATUS        current
      DESCRIPTION
          "Row status for this table. It is used according
           to row installation and removal conventions."
      ::= { mplsVpnVrfRouteEntry 19 }

mplsVpnVrfRouteStorageType  OBJECT-TYPE
      SYNTAX        StorageType
      MAX-ACCESS    read-create
      STATUS        current
      DESCRIPTION
          "Storage type value."
      ::= { mplsVpnVrfRouteEntry 20 }

-- MPLS/BGP VPN Notifications

mplsVrfUp NOTIFICATION-TYPE
   OBJECTS     { mplsVpnInterfaceConfIndex,
                 mplsVpnVrfName
               }
   STATUS      current
   DESCRIPTION
       "This notification is generated when the specified VRF is
        initialized or its status changes into the up state."
   ::= { mplsVpnNotifications 1 }

mplsVrfDown NOTIFICATION-TYPE
   OBJECTS     { mplsVpnInterfaceConfIndex,
                 mplsVpnVrfName
               }
   STATUS      current
   DESCRIPTION
       "This notification is generated when the specified VRF
        initialized or its status goes from the up state."
   ::= { mplsVpnNotifications 2 }

mplsNumVrfRouteMidThreshExceeded NOTIFICATION-TYPE
   OBJECTS     { mplsVpnInterfaceConfIndex,
                 mplsVpnVrfName,
                 mplsVpnVrfPerfCurrNumRoutes
               }
   STATUS      current
   DESCRIPTION
       "This notification is generated when the number of routes
        contained by the specified VRF exceeds the value indicated by
        mplsVrfMidRouteThreshold."
   ::= { mplsVpnNotifications 3 }

mplsNumVrfRouteMaxThreshExceeded NOTIFICATION-TYPE
   OBJECTS     { mplsVpnInterfaceConfIndex,



Nadeau et al.             Expires December 2001             [Page 32]

Internet Draft               MPLS VPN MIB               June 19, 2001



                 mplsVpnVrfName,
                 mplsVpnVrfPerfCurrNumRoutes
               }
   STATUS      current
   DESCRIPTION
       "This notification is generated when the number of routes
        contained by the specified VRF reaches or attempts to exceed
        the maximum allowed value as indicated by
        mplsVrfMaxRouteThreshold."
   ::= { mplsVpnNotifications 4 }

mplsNumVrfSecViolationThreshExceeded NOTIFICATION-TYPE
   OBJECTS     { mplsVpnInterfaceConfIndex,
                 mplsVpnVrfName,
                 mplsVpnVrfSecViolations
               }
   STATUS      current
   DESCRIPTION
       "This notification is generated when the number of security
        violations on a VRF have exceeded the prescribed amount."
   ::= { mplsVpnNotifications 5 }

-- Conformance Statement
mplsVpnGroups
      OBJECT IDENTIFIER ::= { mplsVpnConformance 1 }

mplsVpnCompliances
      OBJECT IDENTIFIER ::= { mplsVpnConformance 2 }

-- Module Compliance

mplsVpnModuleCompliance MODULE-COMPLIANCE
      STATUS current
      DESCRIPTION
          "Compliance statement for agents that support the
           MPLS VPN MIB."
      MODULE -- this module

         -- The mandatory groups have to be implemented
         -- by all LSRs supporting MPLS BGP/VPNs. However,
         -- they may all be supported
         -- as read-only objects in the case where manual
         -- configuration is unsupported.

         MANDATORY-GROUPS    { mplsVpnScalars,
                               mplsVpnVrfConfGroup,
                               mplsVpnInterfaceGroup,
                               mplsVpnPerfGroup,
                               mplsVpnVrfBgpNbrGroup,
                               mplsVpnVrfRouteGroup,



Nadeau et al.             Expires December 2001             [Page 33]

Internet Draft               MPLS VPN MIB               June 19, 2001



                               mplsVpnVrfRouteTargetGroup
                             }

   ::= { mplsVpnCompliances 1 }

   -- Units of conformance.

   mplsVpnScalarGroup OBJECT-GROUP
      OBJECTS { mplsVpnConfiguredVrfs,
                mplsVpnActiveVrfs,
                mplsVpnTrapEnable
             }

      STATUS  current
      DESCRIPTION
             "Collection of scalar objects required for MPLS VPN
              management."
      ::= { mplsVpnGroups 1 }

   mplsVpnVrfConfGroup OBJECT-GROUP
      OBJECTS { mplsVpnVrfName,
                mplsVpnVrfDescription,
                mplsVpnVrfRouteDistinguisher,
                mplsVpnVrfRouteSiteOrigin,
                mplsVpnVrfCreationTime,
                mplsVpnVrfUpTime,
                mplsVpnVrfNetPrefixType,
                mplsVpnVrfRipNetPrefix,
                mplsVpnVrfOspfNetPrefix,
                mplsVpnVrfIsisNetPrefix,
                mplsVpnVrfIpRouteVrfForwByType,
                mplsVpnVrfIpRouteVrfForwByAddr,
                mplsVpnVrfBgpAddrFamilyVpnv4Unicast,
                mplsVpnVrfBgpAFNeighborPEAct,
                mplsVpnVrfIpRouteRedistributeConn,
                mplsVpnVrfConfMidRouteThreshold,
                mplsVpnVrfConfHighRouteThreshold,
                mplsVpnVrfConfMaxRoutes,
                mplsVpnVrfConfMaxPossibleRoutes,
                mplsVpnVrfConfLastChanged,
                mplsVpnVrfIpRouteVrfDest,
                mplsVpnVrfBgpAFNeighborPEAddr,
                mplsVpnVrfBgpAFNeighborPEType,
                mplsVpnVrfBgpAFNeighborCEAddr,
                mplsVpnVrfBgpAFNeighborCEType,
                mplsVpnVrfConfStorageType,
                mplsVpnVrfConfRowStatus
     }

      STATUS  current



Nadeau et al.             Expires December 2001             [Page 34]

Internet Draft               MPLS VPN MIB               June 19, 2001



      DESCRIPTION
             "Collection of objects needed for MPLS VPN VRF
              management."
      ::= { mplsVpnGroups 2 }

   mplsVpnInterfaceGroup OBJECT-GROUP
        OBJECTS { mplsVpnInterfaceConfIndex,
                  mplsVpnInterfaceLabelEdgeType,
                  mplsVpnInterfaceVpnClassification,
                  mplsVpnInterfaceConfStorageType
           }

      STATUS  current
      DESCRIPTION
             "Collection of objects needed for MPLS VPN interface
              management."
      ::= { mplsVpnGroups 3 }

   mplsVpnPerfGroup OBJECT-GROUP

      OBJECTS { mplsVpnVrfPerfRoutesAdded,
                mplsVpnVrfPerfRoutesDeleted,
                mplsVpnVrfPerfCurrNumRoutes
             }

      STATUS  current
      DESCRIPTION
             "Collection of objects needed for MPLS VPN
              performance information."
      ::= { mplsVpnGroups 4 }

   mplsVpnVrfBgpNbrGroup OBJECT-GROUP

      OBJECTS { mplsVpnVrfBgpNbrRowStatus,
                mplsVpnVrfBgpNbrStorageType
              }

      STATUS  current
      DESCRIPTION
             "Collection of objects needed for MPLS VPN
              bgp neighbor-related information."
      ::= { mplsVpnGroups 5 }
   mplsVpnSecGroup OBJECT-GROUP
      OBJECTS { mplsVpnVrfSecViolations }

      STATUS  current
      DESCRIPTION
             "Collection of objects needed for MPLS VPN
              security-related information."
      ::= { mplsVpnGroups 6 }



Nadeau et al.             Expires December 2001             [Page 35]

Internet Draft               MPLS VPN MIB               June 19, 2001




   mplsVpnVrfRouteGroup OBJECT-GROUP
      OBJECTS { mplsVpnVrfRouteDestAddrType,
                mplsVpnVrfRouteMaskAddrType,
                mplsVpnVrfRouteTos,
                mplsVpnVrfRouteNextHop,
                mplsVpnVrfRouteNextHopAddrType,
                mplsVpnVrfRouteIfIndex,
                mplsVpnVrfRouteType,
                mplsVpnVrfRouteProto,
                mplsVpnVrfRouteAge,
                mplsVpnVrfRouteInfo,
                mplsVpnVrfRouteNextHopAS,
                mplsVpnVrfRouteMetric1,
                mplsVpnVrfRouteMetric2,
                mplsVpnVrfRouteMetric3,
                mplsVpnVrfRouteMetric4,
                mplsVpnVrfRouteMetric5,
                mplsVpnVrfRouteRowStatus,
                mplsVpnVrfRouteStorageType
              }
      STATUS  current
      DESCRIPTION
             "Objects required for VRF route table management."
   ::= { mplsVpnGroups 7 }

   mplsVpnVrfRouteTargetGroup OBJECT-GROUP
      OBJECTS { mplsVpnVrfRouteTargetDescr,
                mplsVpnVrfRouteTargetRowStatus
              }
      STATUS  current
      DESCRIPTION
             "Objects required for VRF route target management."
   ::= { mplsVpnGroups 8 }

   mplsVpnNotificationGroup NOTIFICATION-GROUP
       NOTIFICATIONS { mplsVrfUp,
                       mplsVrfDown,
                       mplsNumVrfRouteMidThreshExceeded,
                       mplsNumVrfRouteMaxThreshExceeded,
                       mplsNumVrfSecViolationThreshExceeded
                     }
      STATUS  current
      DESCRIPTION
             "Objects required for MPLS VPN notifications."
   ::= { mplsVpnGroups 9 }

-- End of MPLS-VPN-MIB
END




Nadeau et al.             Expires December 2001             [Page 36]

Internet Draft               MPLS VPN MIB               June 19, 2001

















12.0 Acknowledgments
   
   This document has benefited from discussions and input from
   Bill Fenner, Gerald Ash, Sumit Mukhopadhyay.


13.0 References

      [RFC2547bis]  Rosen, E., Rekhter, Y., Bogovic, T., Brannon, S.,
                    Carugi, M., Chase, C., Chung, T., De Clercq, J.,
                    Dean, E., Hitchin, P., Leelanivas, M., Marshall, D.,
                    Martini, L., Srinivasan, V., Vedrenne, A., "BGP/MPLS
                    VPNs", Internet Draft <draft-rosen-rfc2547bis-
                    03.txt>, February 2001.
   
      [MPLSArch]    Rosen, E., Viswanathan, A., and R. Callon,
                    "Multiprotocol Label Switching Architecture",
                    RFC3031, January 2001.

      [VPN-RFC2685] Fox B., et al, "Virtual Private Networks
                    Identifier", RFC 2685, September 1999.

      [LSRMIB]      Srinivasan, C., Viswanathan, A. and T. Nadeau, 
                    "MPLS Label Switch Router Management Information
                    Base Using SMIv2", Internet Draft 
                    <draft-ietf-mpls-lsr-mib-07.txt>, January 2001.

      [LSRMIB]      Srinivasan, C., Viswanathan, A. and T. Nadeau, 
                    "MPLS Traffic Engineering Management Information
                    Base Using SMIv2", Internet Draft 
                    <draft-ietf-mpls-te-mib-06.txt>, March 2001.
   
      [Assigned]    Reynolds, J., and J. Postel, "Assigned Numbers",
                    RFC 1700, October 1994. See also:
                    http://www.isi.edu/in-notes/iana/assignments/smi-
                    numbers



Nadeau et al.             Expires December 2001             [Page 37]

Internet Draft               MPLS VPN MIB               June 19, 2001



   
      [IANAFamily]  Internet Assigned Numbers Authority (IANA), ADDRESS
                    FAMILY NUMBERS,(http://www.isi.edu/in-
                    notes/iana/assignements/address-family-numbers),
                    for MIB see:
                    ftp://ftp.isi.edu/mib/ianaaddressfamilynumbers.mib
   
      [SNMPArch]    Harrington, D., Presuhn, R., and B. Wijnen, "An
                    Architecture for Describing SNMP Management
                    Frameworks", RFC 2271, January 1998.
   
      [SMIv1]       Rose, M., and K. McCloghrie, "Structure and
                    Identification of Management Information for
                    TCP/IP-based Internets", RFC 1155, May 1990.
   
      [SNMPv1MIBDef]Rose, M., and K. McCloghrie, "Concise MIB
                    Definitions", RFC 1212, March 1991.
   
      [SNMPv1Traps] M. Rose, "A Convention for Defining Traps for use
                    with the SNMP", RFC 1215, March 1991.
   
      [RFC2572]     Case, J., Harrington D., Presuhn R., and B. Wijnen,
                    "Message Processing and Dispatching for the Simple
                    Network Management Protocol (SNMP)", RFC 2572,
                    April 1999.
   
      [RFC2574]     Blumenthal, U., and B. Wijnen, "User-based Security
                    Model (USM) for version 3 of the Simple Network
                    Management Protocol (SNMPv3)", RFC 2574, April
                    1999.
   
      [RFC1905]     Case, J., McCloghrie, K., Rose, M., and S.
                    Waldbusser, "Protocol Operations for Version 2 of
                    the Simple Network Management Protocol (SNMPv2)",
                    RFC 1905, January 1996.
   
      [RFC2573]     Levi, D., Meyer, P., and B. Stewart, "SNMPv3
                    Applications", RFC 2573, April 1999.
   
      [RFC2575]     Wijnen, B., Presuhn, R., and K. McCloghrie, "View-
                    based Access Control Model (VACM) for the Simple
                    Network Management Protocol (SNMP)", RFC 2575,
                    April 1999.
   
      [RFC2570]     Case, J., Mundy, R., Partain, D., and B. Stewart,
                    "Introduction to Version 3 of the Internet-standard
                    Network Management Framework", RFC 2570, April
                    1999.
   
      [SMIv2]       Case, J., McCloghrie, K., Rose, M., and S.



Nadeau et al.             Expires December 2001             [Page 38]

Internet Draft               MPLS VPN MIB               June 19, 2001



                    Waldbusser, "Structure of Management Information
                    for Version 2 of the Simple Network Management
                    Protocol (SNMPv2)", RFC 1902, January 1996.
   
      [SNMPv2TC]    Case, J., McCloghrie, K., Rose, M., and S.
                    Waldbusser, "Textual Conventions for Version 2 of
                    the Simple Network Management Protocol (SNMPv2)",
                    RFC 1903, SNMP Research, Inc., Cisco Systems, Inc.,
                    January 1996.
   
      [SNMPv2Conf]  Case, J., McCloghrie, K., Rose, M., and S.
                    Waldbusser, "Conformance Statements for Version 2
                    of the Simple Network Management Protocol
                    (SNMPv2)", RFC 1904, January 1996.
   
      [SNMPv1]      Case, J., Fedor, M., Schoffstall, M., and J. Davin,
                    "Simple Network Management Protocol", RFC 1157, May
                    1990.
   
      [SNMPv2c]     Case, J., McCloghrie, K., Rose, M., and S.
                    Waldbusser, "Introduction to Community-based
                    SNMPv2", RFC 1901, January 1996.
   
      [SNMPv2TM]    Case, J., McCloghrie, K., Rose, M., and S.
                    Waldbusser, "Transport Mappings for Version 2 of
                    the Simple Network Management Protocol (SNMPv2)",
                    RFC 1906, January 1996.
   
      [SNMPv3MP]    Case, J., Harrington D., Presuhn R., and B. Wijnen,
                    "Message Processing and Dispatching for the Simple
                    Network Management Protocol (SNMP)", RFC 2272,
                    January 1998.
   
      [SNMPv3USM]   Blumenthal, U., and B. Wijnen, "User-based Security
                    Model (USM) for version 3 of the Simple Network
                    Management Protocol (SNMPv3)", RFC 2574, April
                    1999.
   
      [SNMPv2PO]    Case, J., McCloghrie, K., Rose, M., and S.
                    Waldbusser, "Protocol Operations for Version 2 of
                    the Simple Network Management Protocol (SNMPv2)",
                    RFC 1905, January 1996.
   
      [SNMPv3App]   Levi, D., Meyer, P., and B. Stewart, "SNMPv3
                    Applications", RFC 2273, January 1998.
   
      [SNMPv3VACM]  Wijnen, B., Presuhn, R., and K. McCloghrie, "View-
                    based Access Control Model (VACM) for the Simple
                    Network Management Protocol (SNMP)", RFC 2575,
                    April 1999.



Nadeau et al.             Expires December 2001             [Page 39]

Internet Draft               MPLS VPN MIB               June 19, 2001



   
      [IPSEC]       Kent, S., and Atkinson, R., "Security Architecture
                    for the Internet Protocol", RFC 2401, November
                    1998.
   
      [IFMIB]       McCloghrie, K., and F. Kastenholtz, "The Interfaces
                    Group MIB using SMIv2", RFC 2233, Nov. 1997
   
      [BCP14]       Bradner, S., "Key words for use in RFCs to Indicate
                    Requirement Levels", BCP 14, RFC 2119, March 1997.

      [RFC1213]     McCloghrie, K., and M. Rose, "Management
                    Information Base for Network Management of
                    TCP/IP-based internets: MIB-II", RFC1213, 
                    March 1991.

      [RFC2096]     Baker, F., "IP Forwarding Table MIB", RFC2096,
                    January 1997.


14.0  Authors' Addresses

   Thomas D. Nadeau
   Cisco Systems, Inc.
   250 Apollo Drive
   Chelmsford, MA 01824
   Phone: +1-978-244-3051
   Email: tnadeau@cisco.com
   
   Luyuan Fang
   AT&T
   200 Laurel Ave
   Middletown, NJ 07748
   Phone: +1-732-420-1921
   Email: luyuanfang@att.com
   
   Fabio M. Chiussi
   Bell Laboratories, Lucent Technologies
   101 Crawfords Corner Road, Room 4D-521
   Holmdel, NJ 07733
   Phone: +1-732-949-2407
   Email: fabio@bell-labs.com

   Joseph Dube
   Avici Systems, Inc.
   101 Billerica Avenue
   North Billerica, MA 01862
   Phone: +1-978-964-2258
   Email: jdube@avici.com
   



Nadeau et al.             Expires December 2001             [Page 40]

Internet Draft               MPLS VPN MIB               June 19, 2001



   Martin Tatham
   British Telecom
   BT Adastal Park,
   Martlesham Heath,
   Ipswich, IP5 3RE
   UK
   Tel: +44 1473 606349
   Fax: +44 1473 606727
   Email: martin.tatham@bt.com

   Harmen van der Linde
   AT&T - Frame Relay Network Mgnt Platform Planning 
   Room C2-3C34
   200 Laurel Ave
   Middletown, NJ 07748
   Tel: +1-732-420-1916 
   Email: hvdl@att.com


15.0 Dedication

   Steve Brannon passed away suddenly on January 30, 2001. We would like
   to dedicate our efforts in this area and this document to his memory.

16.0  Full Copyright Statement

Copyright (C) The Internet Society (2000).  All Rights Reserved.
This document and translations of it may be copied and furnished to
others, and derivative works that comment on or otherwise explain it or
assist in its implementation may be prepared, copied, published and
distributed, in whole or in part, without restriction of any kind,
provided that the above copyright notice and this paragraph are included
on all such copies and derivative works. However, this document itself
may not be modified in any way, such as by removing the copyright notice
or references to the Internet Society or other Internet organizations,
except as needed for the  purpose of developing Internet standards in
which case the procedures for copyrights defined in the Internet
Standards process must be followed, or as required to translate it into
languages other than English.
   
The limited permissions granted above are perpetual and will not be
revoked by the Internet Society or its successors or assigns. This
document and the information contained herein is provided on an "AS IS"
basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK FORCE
DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE
ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A
PARTICULAR PURPOSE.





Nadeau et al.             Expires December 2001             [Page 41]

