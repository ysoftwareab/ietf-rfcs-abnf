saltp = enctype-name | 0x00 | salt
tkey = random-to-key(PBKDF2(passphrase, saltp,
                              iter_count, keylength))
key = KDF-HMAC-SHA2(tkey, "kerberos") where "kerberos" is the
           byte string {0x6b65726265726f73}.

K1 = HMAC-SHA-256(key, 00 00 00 01 | constant | 0x00 | 00 00 00 80)
k = 192
K1 = HMAC-SHA-384(key, 00 00 00 01 | constant | 0x00 | 00 00 00 C0)
k = 256
K1 = HMAC-SHA-384(key, 00 00 00 01 | constant | 0x00 | 00 00 01 00)
Kc = KDF-HMAC-SHA2(base-key, usage | 0x99)
Ke = KDF-HMAC-SHA2(base-key, usage | 0xAA)
Ki = KDF-HMAC-SHA2(base-key, usage | 0x55)

h = size of truncated HMAC
c = block size of the encryption algorithm
zeroblock = one block (length c) of zeros
N = random nonce of length 128 bits
IV = N XOR cipherState
PC = 0
C = E(Ke, P', IV)
              // using CBC-CS3-Encrypt defined
              // in [SP800-38A+]
PC = c - L(P)
C = E(Ke, P' XOR IV)
              // using ECB mode
H = HMAC(Ki, N' | C')
ciphertext =  N' | C' | H[1..h]
cipherState = N

 




IV = N' XOR cipherState
P = D(Ke, C', IV)
              // using CBC-CS3-Decrypt defined
              // in [SP800-38A+]
cipherState = N'
PC = c - L(C')
C = C' | N'[c - PC:PC]
N = N'[0:c -PC] | (P' XOR cipherState)[c - PC:PC]
IV = N XOR cipherState
P = (P' XOR IV)[0:PC]
cipherState = N
Kp  = KDF-HMAC-SHA2(protocol-key, "prf")
PRF = HMAC(Kp, octet-string)

