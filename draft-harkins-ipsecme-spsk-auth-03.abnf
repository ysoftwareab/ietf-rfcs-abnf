a = prf(b, c)
       The string "b" and "c" are given to a pseudo-random function to
       produce a fixed-length output "a".
Z = scalar-op(x, Y) = x*Y

Z = element-op(X, Y) = X + Y

Y = scalar-op(x, Y), for x = 1
Y = scalar-op(x, Y) = element-op(scalar-op(x-1, Y), for x > 1

Z = scalar-op(x, Y) = Y^x mod p

Z = element-op(X, Y) = (X * Y) mod p

ske-seed = prf(Ni | Nr, psk | counter)

ske-value = prf+(ske-seed, "IKE SKE Hunting And Pecking")

found = 0
counter = 1
ske-seed = prf(Ni | Nr, psk | counter)
ske-value = prf+(ske-seed, "IKE SKE Hunting And Pecking")
x = ske-value
SKE = (x,y)
SKE = (x, p-y)
found = 1
counter = counter + 1
found = 0
counter = 1
ske-seed = prf(Ni | Nr, psk | counter)
ske-value = prf+(swd-seed, "IKE SKE Hunting And Pecking")
SKE = ske-value ^ ((p-1)/r) mod p
found = 1
counter = counter + 1
scalar = (private + mask) mod r

Element = inverse(scalar-op(mask, SKE))

skey = F(scalar-op(private,
                           element-op(peer-element,
                                      scalar-op(peer-scalar, SKE))))

ss = prf(Ni | Nr, skey | "Secure PSK Authentication in IKE")

SKEYID = prf(Ni_b | Nr_b, g^xy)
HASH_I = prf(SKEYID, ss | g^xi | g^xr | CKY-I | CKY-R |
                       SA_ib | IDii_b)

HASH_R = prf(SKEYID, ss | g^xr | g^xi | CKY-R | CKY-I |
                       SA_ib | IDir_b)

AUTH = prf(ss, <msg octets>)

