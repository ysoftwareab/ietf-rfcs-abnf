

S/MIME Working Group                                         J. Schaad
Internet Draft                                 Soaring Hawk Consulting
Document: draft-ietf-smime-aes-alg-01.txt                   R. Housley
Expires: September 2, 2001                            RSA Laboratories
                                                            March 2001


            Use of the Advanced Encryption Algorithm in CMS


Status of this Memo

   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC2026 [1].

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups. Note that
   other groups may also distribute working documents as Internet-
   Drafts. Internet-Drafts are draft documents valid for a maximum of
   six months and may be updated, replaced, or obsoleted by other
   documents at any time. It is inappropriate to use Internet- Drafts
   as reference material or to cite them other than as "work in
   progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   Comments or suggestions for improvement may be made on the "ietf-
   smime" mailing list, or directly to the author.

Abstract

   This document specifies how to incorporate the Advanced Encryption
   Standard (AES) algorithm [AES] and RSAES-OAEP key transport method of
   key management into the S/MIME Cryptographic Message Syntax [CMS] as
   additional algorithms.

Conventions used in this document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in
   this document are to be interpreted as described in RFC-2119 [2].

1. Overview

   This document describes the conventions for using the RSAES-OAEP key
   transport algorithm and Advanced Encryption Standard (AES) content
   encryption algorithm with the Cryptographic Message Syntax [CMS]
   enveloped-data, encrypted-data and authenticated-data content types.

   While this document presents the use of the two algorithms together,
   that fact does not imply that they cannot be used independently.
Schaad, Housley                                                      1
                   Use of the AES Algorithm in CMS      November 2000


   They are presented together simply because the initial usage of each
   will be as a matched pair.

   When the variant of the RSA key transport algorithm specified in PKCS
   #1 Version 1.5 [PKCS#1v1.5] is used for key management, it is
   vulnerable to adaptive chosen ciphertext attacks.  This attack is
   explained in [RSALAB] and [CRYPTO98].  The use of PKCS #1 Version 1.5
   key transport in interactive applications is especially vulnerable.
   Exploitation of this identified vulnerability, revealing the result
   of a particular RSA decryption, requires access to an oracle which
   will respond to hundreds of thousands of ciphertexts, which are
   constructed adaptively in response to previously-received replies
   providing information on the successes or failures of attempted
   decryption operations.

   The attack appears significantly less feasible in store-and-forward
   environments, such as S/MIME.  When PKCS #1 Version 1.5 key transport
   is applied as an intermediate encryption layer within an interactive
   request-response communications environment, exploitation could be
   more feasible.  However, Secure Sockets Layer (SSL) [SSL] and
   Transport Layer Security (TLS) [TLS] protocol implementations could
   include countermeasures that detect and prevent Bleichenbacher's and
   other chosen-ciphertext attacks, without changing the way the RSA key
   transport algorithm is used.  These countermeasures are performed
   within the protocol level.  In the interest of long-term security
   assurance, it is prudent to adopt an improved cryptographic technique
   rather than embedding countermeasures within protocols.

   An updated version of PKCS #1 has been published, PKCS #1 Version 2.0
   [PKCS#1v2.0].  This new document supersedes RFC 2313.  PKCS #1
   Version 2.0 preserves support for the encryption padding format
   defined in PKCS #1 Version 1.5 [PKCS#1v1.5], and it also defines a
   new alternative.  To resolve the adaptive chosen ciphertext
   vulnerability, the PKCS #1 Version 2.0 specifies and recommends use
   of Optimal Asymmetric Encryption Padding (OAEP) when RSA encryption
   is used to provide confidentiality, such as key transport.

   This document specifies the use of RSAES-OAEP key transport algorithm
   in the Cryptographic Message Syntax (CMS) [CMS].  CMS can be used in
   either a store-and-forward or an interactive request-response
   environment.

   CMS supports variety of architectures for certificate-based key
   management, particularly the one defined by the PKIX working group
   [PROFILE].  PKCS #1 Version 1.5 and PKCS #1 Version 2.0 require the
   same RSA public key information.  Thus, a certified RSA public key
   may be used with either RSA key transport technique.

   CMS values are generated using ASN.1 [X.208-88], using the Basic
   Encoding Rules (BER) [X.209-88] and the Distinguished Encoding Rules
   (DER) [X.509-88].

2. Enveloped-data Conventions

 Schaad, Housley                2
                   Use of the AES Algorithm in CMS      November 2000


   The CMS enveloped-data content type consists of encrypted content and
   wrapped content-encryption keys for one or more recipients.  The
   RSAES-OAEP key transport algorithm is used to wrap the content-
   encryption key for one recipient.  The AES algorithm is used to
   encrypt the content.

   Compliant software MUST meet the requirements for constructing an
   enveloped-data content type stated in [CMS] Section 6, "Enveloped-
   data Content Type".

   A content-encryption key MUST be randomly generated for each instance
   of an enveloped-data content type.  The content-encryption key is
   used to encipher the content.

   AES can be used with the enveloped-data content type using any of the
   following key management techniques defined in [CMS] Section 6.

   1) Key Transport: The AES CEK is uniquely wrapped for each recipient
   using the recipient's public RSA key and other values.  Section 2.XX
   provides additional details.  RSAES-OEAP is a key transport algorithm
   and it∆s usage is described here.

   2) Key Agreement: The AES CEK is uniquely wrapped for each recipient
   using a pairwise symmetric key-encryption key (KEK) generated using
   DH-ES using the a randomly generated private key value for the
   originator, the recipient's public DH key and other values.  Section
   2.XX provides additional details.

   3) "Previously Distributed" Symmetric KEK:  The AES CEK is wrapped
   using a "previously distributed" symmetric KEK (such as a Mail List
   Key).  The methods by which the symmetric KEK is generated and
   distributed are beyond the scope of this document.  Section 2.XXX
   provides more details.

2.1 EnvelopedData Fields

   The enveloped-data content type is ASN.1 encoded using the
   EnvelopedData syntax.  The fields of the EnvelopedData syntax must be
   populated as follows:

   The EnvelopedData version MUST be either 0 or 2.

   The EnvelopedData originatorInfo field is not used for the RSAES-OAEP
   key transport algorithm.  However, this field MAY be present to
   support recipients using other key management algorithms.

   The EnvelopedData recipientInfos CHOICE is dependent on the key
   managment technique used.  Section 2.2, 2.3 and 2.4 provide more
   inforamtion.

   The EnvelopedData encryptedContentInfo contentEncryptionAlgorithm
   field MUST specify a symmetric encryption algorithm. Implementations
   MUST support the encryption of AES keys, but implementations MAY
   support other algorithms as well.
 Schaad, Housley                3
                   Use of the AES Algorithm in CMS      November 2000



   The EnvelopedData unprotectedAttrs MAY be present.

2.2 KeyTransRecipientInfo Fields

   The enveloped-data content type is ASN.1 encoded using the
   EnvelopedData syntax.  The fields of the EnvelopedData syntax must be
   populated as follows:

   The KeyTransRecipientInfo version MUST be either 0 or 2.  If the
   RecipientIdentifier is the CHOICE issuerAndSerialNumber, then the
   version MUST be 0.  If the RecipientIdentifier is
   subjectKeyIdentifier, then the version MUST be 2.

   The KeyTransRecipientInfo RecipientIdentifier provides two
   alternatives for specifying the recipient's certificate, and thereby
   the recipient's public key.  The recipient's certificate must contain
   a RSA public key.  The content-encryption key is encrypted with the
   recipient's RSA public key.  The issuerAndSerialNumber alternative
   identifies the recipient's certificate by the issuer's distinguished
   name and the certificate serial number; the subjectKeyIdentifier
   identifies the recipient's certificate by the X.509
   subjectKeyIdentifier extension value.

   The KeyTransRecipientInfo keyEncryptionAlgorithm specifies that the
   RSAES-OAEP algorithm, and its associated parameters, was used to
   encrypt the content-encryption key for the recipient.  The key-
   encryption process is described in [PKCS#1v2.0].  See section 3 of
   this document for the algorithm identifier and the parameter syntax.

   The KeyTransRecipientInfo encryptedKey is the result of encrypting
   the content-encryption key in the recipient's RSA public key using
   the RSAES-OAEP algorithm. When using a Triple-DES content-encryption
   key, implementations MUST adjust the parity bits for each DES key
   comprising the Triple-DES key prior to RSAES-OAEP encryption.

2.3 KeyAgreeRecipientInfo Fields

   This section describes the conventions for using ES-DH and AES with
   the CMS enveloped-data content type to support key agreement. When
   key agreement is used, then the RecipientInfo keyAgreeRecipientInfo
   CHOICE MUST be used.

   The KeyAgreeRecipient version MUST be 3.

   The EnvelopedData originatorInfo field must be the originatorKey
   alternative.  The originatoryKey algorithm fields MUST contain the
   dh-public-number object identifier with absent parameters.  The
   originatorKey publicKey MUST contain the sender∆s ephemeral public
   key.

   The EnvelopedData ukm MAY be absent.


 Schaad, Housley                4
                   Use of the AES Algorithm in CMS      November 2000


   The EnvelopedData keyEncrytionAlgorithm MUST be the id-alg-ESDH
   algorithm identifier.

2.3.1 ES-DH/AES Key Derivation

   Generation of the an AES key used in doing AES-KeyWrap is done using
   the method in [DH] with the following modifications:

   The Hash function H will be [SHA-256] rather than SHA-1.

   NOTE: 2 examples to be provided at this location.

2.3.2 AES CEK Wrap Process

   To be supplied.

2.4 KEKRecipientInfo Fields

   This section describes the conventions for using AES with the CMS
   enveloped-data content type to support "previously distributed"
   symmetric KEKs.  When a "previously distributed" symmetric KEK is
   used to wrap the AES CEK, then the RecipientInfo KEKRecipientInfo
   CHOICE MUST be used. The methods used to generate and distribute the
   symmetric KEK are beyond the scope of this document.

   The KEKRecipientInfo fields MUST be populated as specified in [CMS]
   Section 6.2.3, "KEKRecipientInfo Type". The KEKRecipientInfo
   keyEncryptionAlgorithm algorithm field MUST be the id-NIST-AES-KEY-
   WRAP OID indicating that the AES wrap function is used to wrap the
   AES CEK. The KEKRecipientInfo keyEncryptionAlgorithm parameters field
   MUST be absent. The KEKRecipientInfo encryptedKey field MUST include
   the AES CEK wrapped using the "previously distributed" symmetric KEK
   as input to the AES wrap function.

   To Be Decided ˚ Do we have multiple sizes of key wrap algorithms.

3. Encrypted-data Conventions

   To be supplied.

4. Authenticated-data Conventions

   To be supplied.

5. Algorithm Identifiers and Parameters

5.1 RSAES-OAEP Algorithm Identifiers and Parameters

   The RSAES-OAEP key transport algorithm is the RSA encryption scheme
   defined in RFC 2437 [PKCS#1v2.0], where the message to be encrypted
   is the content-encryption key.  The algorithm identifier for RSAES-
   OAEP is:

      id-RSAES-OAEP  OBJECT IDENTIFIER  ::=

 Schaad, Housley                5
                   Use of the AES Algorithm in CMS      November 2000


         iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)
         7  }

   The AlgorithmIdentifier parameters field must be present, and the
   parameters field must contain RSAES-OAEP-params.  RSAES-OAEP-params
   have the following syntax:

      RSAES-OAEP-params  ::=  SEQUENCE

         hashFunc [0] AlgorithmIdentifier DEFAULT sha1Identifier,
         maskGenFunc [1] AlgorithmIdentifier DEFAULT mgf1SHA1Identifier,
         pSourceFunc [2] AlgorithmIdentifier DEFAULT
   pSpecifiedEmptyIdentifier  }

      sha1Identifier  ::=  AlgorithmIdentifier

         id-sha1, NULL  }

      mgf1SHA1Identifier  ::=  AlgorithmIdentifier

         id-mgf1, sha1Identifier  }

      pSpecifiedEmptyIdentifier  ::=  AlgorithmIdentifier

         id-pSpecified, OCTET STRING SIZE (0)  }

      id-sha1  OBJECT IDENTIFIER ::=

         iso(1) identified-organization(3) oiw(14) secsig(3)
         algorithms(2) 26  }

      id-mgf1  OBJECT IDENTIFIER  ::=

         iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)
         8  }

      id-pSpecified  OBJECT IDENTIFIER  ::=

         iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)
         9  }

   The fields of type RSAES-OAEP-params have the following meanings:

      hashFunc identifies the one-way hash function.  Implementations
   MUST support SHA-1 [SHA1].  The SHA-1 algorithm identifier is
   comprised of the id-sha1 object identifier and a parameter of NULL.
   Implementations that perform encryption MUST omit the hashFunc field
   when SHA-1 is used, indicating that the default algorithm was used.
   Implementations that perform decryption MUST recognize both the id-
   sha1 object identifier and an absent hashFunc field as an indication
   that SHA-1 was used.

      maskGenFunc identifies the mask generation function.
   Implementations MUST support MFG1 [PKCS#1v2.0].  MFG1 requires a one-
   way hash function, and it is identified in the parameter field of the
   MFG1 algorithm identifier.  Implementations MUST support SHA-1
   [SHA1].  The MFG1 algorithm identifier is comprised of the id-mgf1
   object identifier and a parameter that contains the algorithm
   identifier of the one-way hash function employed with MFG1.  The SHA-
   1 algorithm identifier is comprised of the id-sha1 object identifier
   and a parameter of NULL.  Implementations that perform encryption
 Schaad, Housley                6
                   Use of the AES Algorithm in CMS      November 2000


   MUST omit the maskGenFunc field when MFG1 with SHA-1 is used,
   indicating that the default algorithm was used.  Implementations that
   perform decryption MUST recognize both the id-mgf1 and id-sha1 object
   identifiers as well as an absent maskGenFunc field as an indication
   that MFG1 with SHA-1 was used.

      pSourceFunc identifies the source (and possibly the value) of the
   encoding parameters, commonly called P.  Implementations MUST
   represent P by an algorithm identifier, id-pSpecified, indicating
   that P is explicitly provided as an OCTET STRING in the parameters.
   The default value for P is an empty string.  In this case, pHash in
   EME-OAEP contains the hash of a zero length string.  Implementations
   MUST support a zero length P value.  Implementations that perform
   encryption MUST omit the pSourceFunc field when a zero length P value
   is used, indicating that the default value was used.  Implementations
   that perform decryption MUST recognize both the id-pSpecified object
   identifier and an absent pSourceFunc field as an indication that a
   zero length P value was used.

5.2 AES Algorithm Identifiers and Parameters

   AES is added to the set of symmetric content encryption algorithms in
   CMS.  The AES content-encryption algorithm in Cipher Block Chaining
   (CBC) mode for the three different key sizes are identified by the
   OID:

       id-aes128-CBC OBJECT IDENTIFIER ::= { aes 2 }
       id-aes192-CBC OBJECT IDENTIFIER ::= { aes 22 }
       id-aes256-CBC OBJECT IDENTIFIER ::= { aes 42 }

   The AlgorithmIdentifier parameters field MUST be present, and the
   parameters field MUST contain a AES-IV associated with this OID
   contains the initialization vector IV:

       AES-IV ::= OCTET STRING (SIZE(16))


6 SMIMECapabilities Attribute Conventions

   An S/MIME client SHOULD announce the set of cryptographic functions
   it supports by using the S/MIME capabilities attribute. This
   attribute provides a partial list of OIDs of cryptographic functions
   and MUST be signed by the client. The algorithm OIDs SHOULD be
   logically separated in functional categories and MUST be ordered with
   respect to their preference.

   RFC 2633, Section 2.5.2 defines the SMIMECapabilities signed
   attribute (defined as a SEQUENCE of SMIMECapability SEQUENCEs) to be
   used to specify a partial list of algorithms that the software
   announcing the SMIMECapabilities can support.

6.1 RSAES-OEAP SMIMECapability Attribute


 Schaad, Housley                7
                   Use of the AES Algorithm in CMS      November 2000


   When constructing a signedData object, compliant software MAY include
   the SMIMECapabilities signed attribute announcing that it supports
   the RSAES-OAEP algorithm.

   The SMIMECapability SEQUENCE representing RSAES-OAEP MUST include the
   id-RSAES-OAEP object identifier in the capabilityID field and MUST
   include the RSAES-OAEP-Default-Identifier SEQUENCE in the parameters
   field.

      RSAES-OAEP-Default-Identifier  ::=  AlgorithmIdentifier

        id-RSAES-OAEP,

          sha1Identifier, mgf1SHA1Identifier, pSpecifiedEmptyIdentifier
   }  }

   When all of the default settings are selected, the SMIMECapability
   SEQUENCE representing RSAES-OAEP MUST be DER-encoded as:

         30 0D 06 09 2A 86 48 86 F7 0D 01 01 07 30 00

6.2 AES S/MIME Capability Attributes

   If an S/MIME client is required to support symmetric encryption with
   AES, the capabilities attribute MUST contain the AES OID specified
   above in the category of symmetric algorithms.  The parameter
   associated with this OID MUST is AESSMimeCapability.

       AESSMimeCapabilty ::= NULL

   The encodings for the mandatory key sizes are:

         Key Size                   Capability
          128          30 0D 06 09 60 86 48 01 65 03 04 01 02 30 00
          196          30 0D 06 09 60 86 48 01 65 03 04 01 16 30 00
          256          30 0D 06 09 60 86 48 01 65 03 04 01 2A 30 00

   When a sending agent creates an encrypted message, it has to decide
   which type of encryption algorithm to use. In general the decision
   process involves information obtained from the capabilities lists
   included in messages received from the recipient, as well as other
   information such as private agreements, user preferences, legal
   restrictions, and so on. If users require AES for symmetric
   encryption, the S/MIME clients on both the sending and receiving side
   MUST support it, and it MUST be set in the user preferences.


7. Security Considerations

   Note on mix of OEAP and v1.5 RSA encryption from RFC 2437

   Implementations must protect the RSA private key and the content-
   encryption key.  Compromise of the RSA private key may result in the
   disclosure of all messages protected with that key.  Compromise of
   the content-encryption key may result in disclosure of the associated
   encrypted content.
 Schaad, Housley                8
                   Use of the AES Algorithm in CMS      November 2000



   Implementations must protect the key management private key and the
   message-authentication key.  Compromise of the key management private
   key permits masquerade of authenticated data.  Compromise of the
   message-authentication key may result in undetectable modification of
   the authenticated content.

   The generation of RSA public/private key pairs relies on a random
   numbers.  The use of inadequate pseudo-random number generators
   (PRNGs) to generate cryptographic keys can result in little or no
   security.  An attacker may find it much easier to reproduce the PRNG
   environment that produced the keys, searching the resulting small set
   of possibilities, rather than brute force searching the whole key
   space.  The generation of quality random numbers is difficult.  RFC
   1750 [RANDOM] offers important guidance in this area.

8.  Open Issues

   - Key wrap algorithm is undetermined.
   - Mandatory key sizes for Key Wrap
   - Mandatory key sizes for AES algorithm
   - Supplying any patent and licensing statements.
   - References to each algorithm that would be acceptable to the RFC
   editor.
   - Does the oid for key derivation need to be changed since we are
   using SHA-256 not SHA-1?

References


   CMS         Housley, R.  Cryptographic Message Syntax.  RFC 2630.
               June 1999.

   CRYPTO98    Bleichenbacher, D.  "Chosen Ciphertext Attacks Against
               Protocols Based on the RSA Encryption Standard PKCS #1,"
               in H. Krawczyk (editor), Advances in Cryptology - CRYPTO
   '98
               Proceedings, Lecture Notes in Computer Science 1462
   (1998),
               Springer-Verlag, pp. 1-12.

   DH          E. Rescorla, ÙDiffie-Hellman Key Agreement Methodˆ, RFC
               2631, June 1999.

   MUSTSHOULD  Bradner, S.   Key Words for Use in RFCs to Indicate
               Requirement Levels.  BCP 14, RFC 2119.  March 1997.

   PKCS#1v1.5  Kaliski, B.  PKCS #1: RSA Encryption, Version 1.5.
               RFC 2313.  March 1998.

   PKCS#1v2.0  Kaliski, B.  PKCS #1: RSA Encryption, Version 2.0.
               RFC 2437.  October 1998.

   PROFILE     Housley, R., W. Ford, W. Polk, and D. Solo.  Internet
 Schaad, Housley                9
                   Use of the AES Algorithm in CMS      November 2000


               X.509 Public Key Infrastructure: Certificate and CRL
               Profile.  RFC 2459.  January 1999.

   RANDOM      Eastlake, D., S. Crocker, and J. Schiller.  Randomness
               Recommendations for Security.  RFC 1750.  December 1994.

   RSALABS     Bleichenbacher, D., B. Kaliski, and J. Staddon.
               Recent Results on PKCS #1: RSA Encryption Standard.
               RSA Laboratories' Bulletin No. 7, June 26, 1998.
               [Available at
   http://www.rsasecurity.com/rsalabs/bulletins]

   SHA1        National Institute of Standards and Technology.
               FIPS Pub 180-1: Secure Hash Standard.  17 April 1995.

   SSL         Freier, A., P. Karlton, and P. Kocher.  The SSL
   Protocol,
               Version 3.0.  Netscape Communications.  November 1996.
               [Available at http://draft-freier-ssl-version3-02.txt]

   TLS         Dierks, T. and C. Allen.  The TLS Protocol Version 1.0.
               RFC 2246.  January 1999.

   X.208-88    CCITT.  Recommendation X.208: Specification of Abstract
               Syntax Notation One (ASN.1).  1988.

   X.209-88    CCITT.  Recommendation X.209: Specification of Basic
   Encoding
               Rules for Abstract Syntax Notation One (ASN.1).  1988.

   X.509-88    CCITT.  Recommendation X.509: The Directory -
   Authentication
               Framework.  1988.


Acknowledgements

   This document is the result of contributions from many
   professionals. We appreciate the hard work of all members of the
   IETF S/MIME Working Group.  We wish to extend a special thanks to
   Burt Kaliski.

Author's Addresses

   Jim Schaad
   Soaring Hawk Consulting
   Email: jimsch@exmsft.com

   Russell Housley
   RSA Laboratories
   918 Spring Knoll Drive
   Herndon, VA 20170
   USA

 Schaad, Housley                10
                   Use of the AES Algorithm in CMS      November 2000


   rhousley@rsasecurity.com

   1  Bradner, S., "The Internet Standards Process -- Revision 3", BCP
      9, RFC 2026, October 1996.

   2  Bradner, S., "Key words for use in RFCs to Indicate Requirement
      Levels", BCP 14, RFC 2119, March 1997















































 Schaad, Housley                11

