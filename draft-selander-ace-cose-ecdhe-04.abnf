message_1 = {
     N_U : bstr,
     E_U : COSE_Key,
     ALG_U : alg_arr
     }

alg_arr = [
     ECDH_arr : alg_array,
     AEAD_arr : alg_array,
     SIG_arr : alg_array,
     MAC_arr : alg_array
     ]

alg_array = [ + alg : bstr/int ]

nonce-array = [
     N_U: bstr,
     N_V: bstr
     ]

payl_2_rpk = [
     N_U: bstr,
     N_V: bstr,
     E_V: COSE_Key,
     ID_V: bstr
     ]

payl_2_cert = [
     N_U: bstr,
     N_V: bstr,
     E_V: COSE_Key,
     C_V: bstr
     ]

payl_3_rpk = [
     N_V : bstr,
     N_U : bstr,
     E_U : COSE_Key,
     ALG_U : alg_arr,
     ID_V : bstr
     ]

payl_3_cert = [
     N_V : bstr,
     N_U : bstr,
     E_U : COSE_Key,
     ALG_U : alg_arr,
     C_V : bstr
     ]

COSE_KDF_Context = [
          AlgorithmID : AEAD / MAC,
          PartyUInfo : [ PartyInfo_U ],
          PartyVInfo : [ PartyInfo_V ],
          SuppPubInfo : [
              keyDataLength : uint,      ; length
              protected : bstr,          ; zero length bstr
              other : bstr               ; Hash(message_1 ||
                                            COSE Headers of COSE_Encrypt
                                            (message_2) ||
                                            "PartyU"/"PartyV")
          ]
PartyInfo_U = (
       nonce : N_U
       )

PartyInfo_V = (
       nonce : N_V
       )

message_1 = {
     N_U : bstr,
     E_U : COSE_Key,
     KID: bstr,
     ALG_U : alg_arr
     }

alg_arr = [
     ECDH_arr : alg_array,
     AEAD_arr : alg_array,
     MAC_arr : alg_array
     ]

alg_array = [
     + alg : bstr/int
     ]

nonce-array = [
     N_U: bstr,
     N_V: bstr
     ]

payl_2_psk = [
     N_U: bstr,
     N_V: bstr,
     E_V: COSE_Key,
     KID: bstr,        ; has value kid_psk
     ID_V: bstr,
     ALG_V: alg_array  ; (ECDH, AEAD, MAC)
     ]

payl_3_psk = [
     N_V: bstr,
     N_U: bstr,
     E_U: COSE_Key,
     KID: bstr,      ; has value kid_psk
     ID_V: bstr,
     ALG_U : alg_arr
     ]

COSE_KDF_Context = [
          AlgorithmID : MAC,
          PartyUInfo : [ PartyInfo_U_psk ],
          PartyVInfo : [ PartyInfo_V_psk ],
          SuppPubInfo : [
              keyDataLength : uint,      ; length
              protected : bstr,          ; zero length bstr
              other : bstr               ; Hash(message_1 ||
                                             COSE Headers of COSE_MAC
                                             (message_2) ||
                                             "PartyU"/"PartyV")
          ]
PartyInfo_U_psk = (
       nonce : N_U
       )

PartyInfo_V_psk = (
       nonce : N_V
       identity: ID_V
       )

COSE_KDF_Context = [
          AlgorithmID : AEAD,
          PartyUInfo : [ PartyInfo_U ],
          PartyVInfo : [ PartyInfo_V ],
          SuppPubInfo : [
              keyDataLength : uint,      ; length
              protected : bstr,          ; zero length bstr
              other : bstr               ; Hash(message_1 ||
                                                message_2 ||
                                                message_3)
          ]
PartyInfo_U = (
       nonce : N_U,
       identity: ID_U / C_U
       )

PartyInfo_V = (
       nonce : N_V,
       identity: ID_V / C_V
       )

