cp-params  =  class-param | duplex-param |
                 feature-param | language-param | media-param |
                 mobility-param | other-param
class-param     =  "class" "=" <"> [<!>] 1#class-conjunction <">
duplex-param    =  "duplex" "=" <"> [<!>] 1#duplex-conjunction <">
feature-param   =  "feature" "=" <"> [<!>] 1#feature-conjunction <">
language-param  =  "language" "=" <"> [<!>] 1#language-conjunction <">
media-param     =  "media" "=" <"> [<!>] 1#media-conjunction <">
mobility-param  =  "mobility" "=" <"> [<!>] 1#mobility-conjunction <">

other-param     =  other-name "=" <"> [<!>] 1#other-conjunction <">

mobility-conjunction   =  mobility-value ["&" mobility-conjunction]
mobility-value         =  "fixed" | "mobile" | other-value
class-conjunction      =  class-value ["&" class-conjunction]
class-value            =  "personal" | "business" | other-value
duplex-conjunction     =  duplex-value ["&" duplex-conjunction]
duplex-value           =  "full" | "half" | "receive-only" |
                             "send-only" | other-value
media-conjunction      =  media-value ["&" media-conjunction]
media-value            =  ( "*/*" | (type "/" "*") |
                             (type "/" subtype) )
feature-conjunction    =  feature-value ["&" feature-conjunction]
feature-value          =  "voice-mail" | "attendant" | other-value
language-conjunction   =  language-tag ["&" language-conjunction]
other-conjunction      =  other-value ["&" other-conjunction]
other-name             =  UTF8-TOKEN
other-value            =  UTF8-TOKEN
UTF8-TOKEN             =  <any UTF-8 character encoding
                              except separator, ampersand, CTL, and LWS>



priority-param     =  "priority" "=" <"> priority-value <">
description-param  =  "description" "=" quoted-string
methods-param      =  "methods" "=" <"> 1#methods-value <">
methods-value      =  ( "INVITE" | "OPTIONS" | "BYE" | "REGISTER"
                              | token)


Accept-Contact  =  ("Accept-Contact" | "a") ":" 1# rule
rule            =  ( name-addr | addr-spec | "*")
                           [ *( ";" (cp-params | q-param | scheme-param |
                           strength)) ]
q-param         =  "q" "=" qvalue
scheme-param    =  "scheme" "=" <"> [<!>] 1#scheme <">
strength        =  "only" "=" "true"


Reject-Contact  =  ("Reject-Contact" | "j") ":"
                           1# ( ( name-addr | addr-spec | "*")
                           [ *( ";" cp-params | scheme-param ) ] )


extension-attribute  =  (cp-params |
                                priority-param | methods-param |
                                description-param |
                                (extension-name [ "=" extension-value]))
Request-Disposition  =  ( "Request-Disposition" | "d" ) ":"
                                1# (proxy-feature | cancel-feature |
                                fork-feature | recurse-feature |
                                parallel-feature | queue-feature)
proxy-feature        =  "proxy" | "redirect"
cancel-feature       =  "cancel" | "no-cancel"
fork-feature         =  "fork" | "no-fork"
recurse-feature      =  "recurse" | "no-recurse"
parallel-feature     =  "parallel" | "sequential"
queue-feature        =  "queue" | "no-queue"


myArg = malloc(strlen(arg) + 1);
sz = 1;
conj = calloc(1,sz+1);

start = 0;
sz = 0;
start = i+1;
p = calloc(1, sizeof(parameter_t));
conj = getConjunction(rule[i]);
match = TRUE;
present = FALSE;
present = TRUE;
match = FALSE;
match = FALSE;
match = TRUE;
match = TRUE;

match=(((strcasecmp(r->URI->host, "x") == 0) ||
                  (strcasecmp(r->URI->host, e->URI->host) == 0)) &&
                 ((r->URI->userinfo == NULL) ||
                  ((e->URI->userinfo != NULL) &&
                   (strcmp(r->URI->userinfo, e->URI->userinfo) == 0))));

match = matchUriParameters(r->URI->params, e->URI->params);
p = r->para[i];

