LoST-URI = "lost:" host

include="uri service serviceNumber displayName serviceBoundary">
profile="urn:ietf:params:lost:location-profile:geodetic-2d">
profile="urn:ietf:params:lost:location-profile:geodetic-2d">
recursive="true"
include="uri serviceNumber displayName serviceBoundary" >
profile="urn:ietf:params:lost:location-profile:basic-civic">
xmlns="urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr">
xmlns="urn:ietf:params:xml:ns:lost1" timeToLive="3600">
profile="urn:ietf:params:lost:location-profile:basic-civic">
xmlns="urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr">
xmlns="urn:ietf:params:xml:ns:lost1" timeToLive="3600">
profile="urn:ietf:params:lost:location-profile:basic-civic">
xmlns="urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr">
xmlns="urn:ietf:params:xml:ns:lost1">
profile="urn:ietf:params:lost:location-profile:basic-civic">
xmlns="urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr">
start =
     findService
     | listServices
     | getServiceBoundary
     | findServiceResponse
     | listServicesResponse
     | getServiceBoundaryResponse

findService =
       element ns1:findService {
         query,
         attribute include {
           list {
             ("uri"
              | "serviceNumber"
              | "displayName"
              | "service"
              | "valid"
              | "invalid"
              | "unchecked"
              | "serviceBoundary"
              | "serviceBoundaryReference")*
           }
           >> a:defaultValue [ "uri serviceNumber" ]
         }?
       }
listServices = element ns1:listServices { query }
getServiceBoundary =
       element ns1:getServiceBoundary {
         serviceBoundaryKey, extensionPoint
       }
findServiceResponse =
       element ns1:findServiceResponse {
         via,
         ((locationProfileError?, serviceSubstitution?, serviceResult)
          | badRequest
          | internalError
          | forbidden
          | notFound
          | serviceNotImplemented
          | serverTimeout
          | serverError
          | movedPermenantly
          | movedTemporarily
          | iterativeSearchExhausted),
         extensionPoint
       }
listServicesResponse =
       element ns1:listServicesResponse {
         via,
         ((locationProfileError?,
           element ns1:serviceList {
             list { xsd:anyURI* }
           })),
         extensionPoint
       }
getServiceBoundaryResponse =
       element ns1:getServiceBoundaryResponse {
         (serviceBoundary
          | badRequest
          | internalError
          | forbidden
          | notFound),
         extensionPoint
       }
query =
       element ns1:location { locationInformation }+,
       element ns1:service { xsd:anyURI }?,
       extensionPoint,
       attribute recursive { xsd:boolean >> a:defaultValue [ "true" ] }?
locationInformation =
       extensionPoint+,
       attribute profile { xsd:anyURI }
serviceBoundary = element ns1:serviceBoundary
       { locationInformation }+
serviceBoundaryKey =
       attribute key {
         xsd:string { pattern = "[a-zA-Z0-9/+=]+" }
       }
via = element ns1:via { xsd:anyURI }*
timeToLive = attribute timeToLive { xsd:positiveInteger }
qnameList = list { xsd:QName* }
serviceResult =
       element ns1:displayName {
         xsd:string,
         attribute xml:lang { xsd:language }
       }?,
       element ns1:service { xsd:anyURI }?,
       (serviceBoundary
        | element ns1:serviceBoundaryReference { serviceBoundaryKey })?,
       element ns1:uri { xsd:anyURI }*,
       element ns1:serviceNumber {
         xsd:string { pattern = "[0-9]+" }
       }?,
       element ns1:valid { qnameList }?,
       element ns1:invalid { qnameList }?,
       element ns1:unchecked { qnameList }?,
       extensionPoint,
       timeToLive,
       message
error = message, extensionPoint
badRequest = element ns1:badRequest { error }
internalError = element ns1:internalError { error }
serviceSubstitution = element ns1:serviceSubstitution { error }
recursionError =
       attribute failedReferral { xsd:anyURI }?,
       (findService | listServices | getServiceBoundary)?,
       error
forbidden =
       element ns1:forbidden { recursionError },
       timeToLive
notFound =
       element ns1:notFound { recursionError },
       timeToLive
serviceNotImplemented =
       element ns1:serviceNotImplemented { recursionError },
       timeToLive
serverTimeout =
       element ns1:serverTimeout { recursionError },
       timeToLive
serverError =
       element ns1:serverError { recursionError },
       timeToLive
locationProfileError =
       element ns1:locationProfileError {
         attribute unsupportedProfiles {
           list { xsd:anyURI* }
         },
         recursionError
       }
redirect =
       attribute redirect { xsd:anyURI },
       error
movedPermenantly = element ns1:movedPermanently { redirect }
movedTemporarily =
       element ns1:movedTemporarily { redirect },
       timeToLive
iterativeSearchExhausted =
       element ns1:iterativeSearchExhausted { redirect },
       timeToLive
message =
       (attribute message { xsd:string },
        attribute xml:lang { xsd:language })?
notLost = element * - (ns1:* | ns1:*) { anyElement }

anyElement =
       (element * { anyElement }
        | attribute * { text }
        | text)*

extensionPoint = notLost*

point2d =
       element position {
         element Point {
           attribute srsName { "urn:ogc:def:crs:EPSG:4326" },
           element pos { text }
         }
       }

linearRing =
       element LinearRing {
         element pos { text }
       }

polygon =
       element Polygon {
         attribute srsName { "urn:ogc:def:crs:EPSG:4979" },
         element exterior { linearRing },
         element interior { linearRing }*
       }
content="text/html;charset=iso-8859-1"/>
xmlns="http://relaxng.org/ns/structure/1.0"
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

