name = definition

      The name of a rule is simply the name itself (without any
      enclosing "<" and ">") and is separated from its definition by the
      equal "=" character.  White space is only significant in that
      indentation of continuation lines is used to indicate a rule
      definition that spans more than one line.  Certain basic rules are
      in uppercase, such as SP, LWS, HTAB, CRLF, DIGIT, ALPHA, etc.
      Angle brackets are used within definitions whenever their presence





      will facilitate discerning the use of rule names.

OCTET          = %x00-FF
                      ; any 8-bit sequence of data
CHAR           = %x01-7F
                      ; any US-ASCII character, excluding NUL
ALPHA          = %x41-5A | %x61-7A
                      ; A-Z | a-z
DIGIT          = %x30-39
                      ; any US-ASCII digit "0".."9"
CTL            = %x00-1F | %x7F
                      ; (octets 0 - 31) and DEL (127)
CR             = %x0D
                      ; US-ASCII CR, carriage return (13)
LF             = %x0A
                      ; US-ASCII LF, linefeed (10)
SP             = %x20
                      ; US-ASCII SP, space (32)
HTAB           = %x09
                      ; US-ASCII HT, horizontal-tab (9)
DQUOTE         = %x22
                      ; US-ASCII double-quote mark (34)

CRLF           = CR LF

LWS            = [CRLF] 1*( SP | HTAB )

TEXT           = %x20-7E | %x80-FF | LWS
                    ; any OCTET except CTLs, but including LWS

HEX            = "A" | "B" | "C" | "D" | "E" | "F"
                    | "a" | "b" | "c" | "d" | "e" | "f" | DIGIT

separators     = "(" | ")" | "<" | ">" | "@"
                    | "," | ";" | ":" | "\" | DQUOTE
                    | "/" | "[" | "]" | "?" | "="
                    | "{" | "}" | SP | HTAB

tchar          = "!" | "#" | "$" | "%" | "&" | "'" | "*"
                    | "+" | "-" | "." | "^" | "_" | "`" | "|" | "~"
                    | DIGIT | ALPHA
                    ; any CHAR except CTLs or separators

token          = 1*tchar

comment        = "(" *( ctext | quoted-pair | comment ) ")"
ctext          = <any TEXT excluding "(" and ")">

quoted-string  = ( DQUOTE *(qdtext | quoted-pair ) DQUOTE )
qdtext         = <any TEXT excluding DQUOTE and "\">

quoted-pair    = "\" CHAR










request-header =  <request-header, defined in [Part2], Section 4>
response-header = <response-header, defined in [Part2], Section 6>


accept-params   = <accept-params, defined in [Part3], Section 6.1>
entity-body     = <entity-body, defined in [Part3], Section 4.2>
entity-header   = <entity-header, defined in [Part3], Section 4.1>


Cache-Control   = <Cache-Control, defined in [Part6], Section 16.4>
Pragma          = <Pragma, defined in [Part6], Section 16.4>
Warning         = <Warning, defined in [Part6], Section 16.6>


HTTP-Version   = "HTTP" "/" 1*DIGIT "." 1*DIGIT

absoluteURI   = <absoluteURI, defined in [RFC2396], Section 3>
authority     = <authority, defined in [RFC2396], Section 3.2>
fragment      = <fragment, defined in [RFC2396], Section 4.1>
path-absolute = <abs_path, defined in [RFC2396], Section 3>
port          = <port, defined in [RFC2396], Section 3.2.2>
query         = <query, defined in [RFC2396], Section 3.4>
relativeURI   = <relativeURI, defined in [RFC2396], Section 5>
uri-host      = <host, defined in [RFC2396], Section 3.2.2>

http-URL = "http:" "//" uri-host [ ":" port ]
                [ path-absolute [ "?" query ]]

HTTP-date    = rfc1123-date | rfc850-date | asctime-date
rfc1123-date = wkday "," SP date1 SP time SP "GMT"
rfc850-date  = weekday "," SP date2 SP time SP "GMT"
asctime-date = wkday SP date3 SP time SP 4DIGIT
date1        = 2DIGIT SP month SP 4DIGIT
                    ; day month year (e.g., 02 Jun 1982)
date2        = 2DIGIT "-" month "-" 2DIGIT
                    ; day-month-year (e.g., 02-Jun-82)
date3        = month SP ( 2DIGIT | ( SP 1DIGIT ))
                    ; month day (e.g., Jun  2)
time         = 2DIGIT ":" 2DIGIT ":" 2DIGIT
                    ; 00:00:00 - 23:59:59
wkday        = "Mon" | "Tue" | "Wed"
                  | "Thu" | "Fri" | "Sat" | "Sun"
weekday      = "Monday" | "Tuesday" | "Wednesday"
                  | "Thursday" | "Friday" | "Saturday" | "Sunday"
month        = "Jan" | "Feb" | "Mar" | "Apr"
                  | "May" | "Jun" | "Jul" | "Aug"
                  | "Sep" | "Oct" | "Nov" | "Dec"

transfer-coding         = "chunked" | transfer-extension
transfer-extension      = token *( ";" parameter )

parameter               = attribute "=" value
attribute               = token
value                   = token | quoted-string

Chunked-Body   = *chunk
                      last-chunk
                      trailer-part
                      CRLF

chunk          = chunk-size [ chunk-extension ] CRLF
                      chunk-data CRLF
chunk-size     = 1*HEX
last-chunk     = 1*("0") [ chunk-extension ] CRLF

chunk-extension= *( ";" chunk-ext-name [ "=" chunk-ext-val ] )
chunk-ext-name = token
chunk-ext-val  = token | quoted-string
chunk-data     = 1*OCTET ; a sequence of chunk-size octets
trailer-part   = *(entity-header CRLF)

product         = token ["/" product-version]
product-version = token

HTTP-message   = Request | Response     ; HTTP/1.1 messages

generic-message = start-line
                       *(message-header CRLF)
                       CRLF
                       [ message-body ]
start-line      = Request-Line | Status-Line

message-header = field-name ":" [ field-value ]
field-name     = token
field-value    = *( field-content | LWS )
field-content  = <field content>
                      ; the OCTETs making up the field-value
                      ; and consisting of either *TEXT or combinations
                      ; of token, separators, and quoted-string

message-body = entity-body
                  | <entity-body encoded as per Transfer-Encoding>

general-header = Cache-Control            ; [Part6], Section 16.2
                    | Connection               ; Section 8.1
                    | Date                     ; Section 8.3
                    | Pragma                   ; [Part6], Section 16.4
                    | Trailer                  ; Section 8.6
                    | Transfer-Encoding        ; Section 8.7
                    | Upgrade                  ; Section 8.8
                    | Via                      ; Section 8.9
                    | Warning                  ; [Part6], Section 16.6

Request       = Request-Line              ; Section 5.1
                     *(( general-header        ; Section 4.5
                      | request-header         ; [Part2], Section 4
                      | entity-header ) CRLF)  ; [Part3], Section 4.1
                     CRLF
                     [ message-body ]          ; Section 4.3

Request-Line   = Method SP Request-URI SP HTTP-Version CRLF







Method         = token

Request-URI    = "*"
                    | absoluteURI
                    | ( path-absolute [ "?" query ] )
                    | authority

Response      = Status-Line               ; Section 6.1
                     *(( general-header        ; Section 4.5
                      | response-header        ; [Part2], Section 6
                      | entity-header ) CRLF)  ; [Part3], Section 4.1
                     CRLF
                     [ message-body ]          ; Section 4.3

Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF

Status-Code    = 3DIGIT
Reason-Phrase  = *<TEXT, excluding CR, LF>


Connection = "Connection" ":" 1#(connection-token)
connection-token  = token

Content-Length    = "Content-Length" ":" 1*DIGIT

Date  = "Date" ":" HTTP-date

Host = "Host" ":" uri-host [ ":" port ] ; Section 3.2.2

TE        = "TE" ":" #( t-codings )
t-codings = "trailers" | ( transfer-extension [ accept-params ] )

Trailer  = "Trailer" ":" 1#field-name

Transfer-Encoding       = "Transfer-Encoding" ":" 1#transfer-coding

Upgrade        = "Upgrade" ":" 1#product

Via =  "Via" ":" 1#( received-protocol received-by [ comment ] )
received-protocol = [ protocol-name "/" ] protocol-version
protocol-name     = token
protocol-version  = token
received-by       = ( uri-host [ ":" port ] ) | pseudonym
pseudonym         = token

