Network Working Group                                  Dave Thaler
Internet-Draft                                           Microsoft
Expires: April 2000                                21 October 1999

                      Subtree Retrieval MIB
             <draft-irtf-nmrg-get-subtree-mib-00.txt>

Status of this Memo

This document is an Internet-Draft and is in full conformance with
all provisions of Section 10 of RFC2026.

Internet-Drafts are working documents of the Internet Engineering
Task Force (IETF), its areas, and its working groups.  Note that
other groups may also distribute working documents as Internet-
Drafts.

Internet-Drafts are draft documents valid for a maximum of six
months and may be updated, replaced, or obsoleted by other
documents at any time.  It is inappropriate to use Internet-
Drafts as reference material or to cite them other than as "work
in progress."

The list of current Internet-Drafts can be accessed at
http://www.ietf.org/ietf/1id-abstracts.txt

The list of Internet-Draft Shadow Directories can be accessed at
http://www.ietf.org/shadow.html.

Copyright Notice

Copyright (C) The Internet Society (1999).  All Rights Reserved.

Expires April 2000                                        [Page 1]

Draft                     GET-SUBTREE MIB             October 1999

1.  Introduction

This memo defines a portion of the Management Information Base
(MIB) for use with network management protocols in the Internet
community.  In particular, it describes managed objects used for
retrieving a subtree of MIB objects without the overshoot problems
of the SNMP GetBulkRequest operation.

2.  The SNMP Network Management Framework

The SNMP Management Framework presently consists of five major
components:

o    An overall architecture, described in RFC 2571 [1].

o    Mechanisms for describing and naming objects and events for
     the purpose of management. The first version of this
     Structure of Management Information (SMI) is called SMIv1 and
     described in RFC 1155 [2], RFC 1212 [3] and RFC 1215 [4]. The
     second version, called SMIv2, is described in RFC 2578 [5],
     RFC 2579 [6] and RFC 2580 [7].

o    Message protocols for transferring management information.
     The first version of the SNMP message protocol is called
     SNMPv1 and described in RFC 1157 [8]. A second version of the
     SNMP message protocol, which is not an Internet standards
     track protocol, is called SNMPv2c and described in RFC 1901
     [9] and RFC 1906 [10].  The third version of the message
     protocol is called SNMPv3 and described in RFC 1906 [10], RFC
     2572 [11] and RFC 2574 [12].

o    Protocol operations for accessing management information. The
     first set of protocol operations and associated PDU formats
     is described in RFC 1157 [8]. A second set of protocol
     operations and associated PDU formats is described in RFC
     1905 [13].

o    A set of fundamental applications described in RFC 2573 [14]
     and the view-based access control mechanism described in RFC
     2575 [15].

Managed objects are accessed via a virtual information store,
termed the Management Information Base or MIB.  Objects in the MIB
are defined using the mechanisms defined in the SMI.

Expires April 2000                                        [Page 2]

Draft                     GET-SUBTREE MIB             October 1999

This memo specifies a MIB module that is compliant to the SMIv2. A
MIB conforming to the SMIv1 can be produced through the
appropriate translations. The resulting translated MIB must be
semantically equivalent, except where objects or events are
omitted because no translation is possible (use of Counter64).
Some machine readable information in SMIv2 will be converted into
textual descriptions in SMIv1 during the translation process.
However, this loss of machine readable information is not
considered to change the semantics of the MIB.

3.  Overview

The GetBulkRequest operation in SNMP [13] aims to minimize the
number of protocol exchanges required to retrieve a large amount
of management information by returning a series of variable
bindings in a single response.  The requester is required to
specify a "max-repetitions" count, and the agent then fills in as
many variable bindings as it can without exceeding either this
count, or the maximum message size.

One problem with retrieving tables with GetBulkRequest is that the
manager typically does not know the number of rows in the table,
and hence cannot set max-repetitions to the optimal value.  As a
result, the manager must either set max-repetitions to some huge
value, resulting in a potentially large waste of bandwidth when
many more variable bindings are returned than are needed
(sometimes called "overshoot"), or else must issue multiple
GetBulkRequests sequentially to traverse a large table such as the
routing table in a backbone router.

This document describes a MIB than can be used by an application
to retrieve subtrees of information, without any change to the
SNMP protocol or SNMP protocol engines, as follows.  The
application must have been pre-configured as a legal notification
target in the SNMP-TARGET-MIB [14].

The MIB described herein provides a table of outstanding
GetSubtree operations which allows row creation.  To begin a
retrieval, an application issues a SetRequest to perform a row
creation in this table, which identifies the application
(represented by an entry in the snmpTargetAddrTable) as the
response destination.  This row creation triggers the agent to
begin sending Traps containing the requested information to the
application.  Each trap contains a sequence number object (which

Expires April 2000                                        [Page 3]

Draft                     GET-SUBTREE MIB             October 1999

can be used to detect losses), and an flag object signalling
whether the trap is the final one in the sequence.  Once all
information has been sent, the conceptual row is automatically
deleted.

Furthermore, if the request was in error (e.g., a human entered a
different OID from what was intended, causing the application to
receive large amounts of unwanted data), the MIB also provides a
way to halt an operation in progress, if the agent is able to
support this.  Halting an operation in progress is accomplished
simply by allowing the application to delete the conceptual row
corresponding to the outstanding operation.

3.1.  Limitations

The limitations of this approach that come with not changing SNMP
include:

o    To use this MIB to retrieve subtrees of information, the
     application must be able to issue SETs (at least to this
     MIB), not just GETs.

o    The command responder and notification originator need to be
     tightly coupled, as well as the command generator and
     notification responder.

o    The subagent implementing this MIB must be able to call back
     into the SNMP engine to walk other MIBs, without causing a
     deadlock.

Expires April 2000                                        [Page 4]

Draft                     GET-SUBTREE MIB             October 1999

4.  Definitions

GET-SUBTREE-MIB DEFINITIONS ::= BEGIN

IMPORTS
    MODULE-IDENTITY, OBJECT-TYPE, NOTIFICATION-TYPE,
    Unsigned32, Counter32             FROM SNMPv2-SMI
    RowStatus, TruthValue             FROM SNMPv2-TC
    MODULE-COMPLIANCE, OBJECT-GROUP,
    NOTIFICATION-GROUP                FROM SNMPv2-CONF
    SnmpAdminString                   FROM SNMP-FRAMEWORK-MIB;

getSubtreeMIB MODULE-IDENTITY
    LAST-UPDATED "9907161200Z"
    ORGANIZATION "IRTF Network Management Research Group"
    CONTACT-INFO
            " Dave Thaler
              Microsoft Corporation
              One Microsoft Way
              Redmond, WA  98052-6399
              EMail: dthaler@dthaler.microsoft.com"
    DESCRIPTION
            "This MIB module provides the ability to retrieve an arbitary
            subtree of OIDs by receiving traps."
    ::= { XXX }

getSubtreeMIBObjects OBJECT IDENTIFIER ::= { getSubtreeMIB 1 }

getSubtree           OBJECT IDENTIFIER ::= { getSubtreeMIBObjects 1 }
getSubtreeTraps      OBJECT IDENTIFIER ::= { getSubtreeMIBObjects 2 }

getSubtreeTable OBJECT-TYPE
    SYNTAX     SEQUENCE OF GetSubtreeEntry
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
            "The (conceptual) table containing information on
            GET-SUBTREE operations in progress."
    ::= { getSubtree 1 }

getSubtreeEntry OBJECT-TYPE
    SYNTAX     GetSubtreeEntry
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION

Expires April 2000                                        [Page 5]

Draft                     GET-SUBTREE MIB             October 1999

            "An entry (conceptual row) containing the information on a
            particular GET-SUBTREE operation in progress."
    INDEX      { getSubtreeIndex }
    ::= { getSubtreeTable 1 }

GetSubtreeEntry ::= SEQUENCE {
    getSubtreeIndex            Unsigned32,
    getSubtreeTargetAddrName   SnmpAdminString,
    getSubtreeRootOid          OBJECT IDENTIFIER,
    getSubtreeSequenceNumber   Counter32,
    getSubtreeDone             TruthValue,
    getSubtreeStatus           RowStatus
}

getSubtreeIndex OBJECT-TYPE
    SYNTAX     Unsigned32
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
            "An integer uniquely identifying the GET-SUBTREE operation in
            progress.  This value should be randomly generated by a
            manager before attempting to create the row."
    ::= { getSubtreeEntry 1 }

getSubtreeTargetAddrName OBJECT-TYPE
    SYNTAX     SnmpAdminString
    MAX-ACCESS read-create
    STATUS     current
    DESCRIPTION
            "This object selects a management target defined in the
            snmpTargetAddrTable (in the SNMP-TARGET-MIB).  The
            selected target is defined by an entry in the
            snmpTargetAddrTable whose index value (snmpTargetAddrName)
            is equal to this object."
    ::= { getSubtreeEntry 2 }

getSubtreeRootOid OBJECT-TYPE
    SYNTAX     OBJECT IDENTIFIER
    MAX-ACCESS read-create
    STATUS     current
    DESCRIPTION
            "The OID of the subtree to be sent."
    ::= { getSubtreeEntry 3 }

getSubtreeSequenceNumber OBJECT-TYPE

Expires April 2000                                        [Page 6]

Draft                     GET-SUBTREE MIB             October 1999

    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
            "The number of trap responses previously sent for this request."
    ::= { getSubtreeEntry 4 }

getSubtreeDone OBJECT-TYPE
    SYNTAX     TruthValue
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
            "This is set to true in the last trap sent, and is set to
            false otherwise."
    ::= { getSubtreeEntry 5 }

getSubtreeStatus OBJECT-TYPE
    SYNTAX     RowStatus
    MAX-ACCESS read-create
    STATUS     current
    DESCRIPTION
            "The status of this row, by which new entries may be
            created, or old entries deleted from this table.  Once
            created, the row may be deleted, but other objects in the
            row may not be modified.  A row will be deleted automatically
            by the agent once the operation has completed.

            Creating a row will cause the subtree retrieval operation
            to commence.  If the agent allows aborting operations in
            progress, deleting a row will cause the operation to halt."
    ::= { getSubtreeEntry 6 }

-- traps

getSubtreeTrapPrefix OBJECT IDENTIFIER ::= { getSubtreeTraps 0 }

getSubtreeResponse NOTIFICATION-TYPE
    OBJECTS { getSubtreeSequenceNumber, getSubtreeDone }
    STATUS current
    DESCRIPTION
           "In addition to the two objects above, this trap also
           contains a series of varbinds containing the next chunk of
           the subtree.  The generating entity will append, in order,
           as many variables to the variable-bindings field as it can
           without exceeding the maximum message size, and without going

Expires April 2000                                        [Page 7]

Draft                     GET-SUBTREE MIB             October 1999

           beyond the subtree of OIDs requested.  A series of such
           traps will be generated until the end of the subtree is
           reached."
    ::= { getSubtreeTrapPrefix 1 }

-- conformance information

getSubtreeMIBConformance
                  OBJECT IDENTIFIER ::= { getSubtreeMIB 2 }
getSubtreeMIBCompliances
                  OBJECT IDENTIFIER ::= { getSubtreeMIBConformance 1 }
getSubtreeMIBGroups  OBJECT IDENTIFIER ::= { getSubtreeMIBConformance 2 }

-- compliance statements

getSubtreeMIBCompliance MODULE-COMPLIANCE
    STATUS  current
    DESCRIPTION
            "The compliance statement for the GetSubtree MIB."
    MODULE  -- this module
    MANDATORY-GROUPS { getSubtreeObjectGroup,
                       getSubtreeNotificationGroup }
   ::= { getSubtreeMIBCompliances 1 }

-- units of conformance

getSubtreeObjectGroup OBJECT-GROUP
    OBJECTS { getSubtreeTargetAddrName, getSubtreeRootOid,
              getSubtreeSequenceNumber, getSubtreeDone,
              getSubtreeStatus }
    STATUS  current
    DESCRIPTION
            "A collection of objects to support requests for
            subtree retrieval operations."
    ::= { getSubtreeMIBGroups 1 }

getSubtreeNotificationGroup NOTIFICATION-GROUP
    NOTIFICATIONS { getSubtreeResponse }
    STATUS  current
    DESCRIPTION
           "The notification which an entity is required to implement."
    ::= { getSubtreeMIBGroups 2 }

END

Expires April 2000                                        [Page 8]

Draft                     GET-SUBTREE MIB             October 1999

5.  Security Considerations

While unauthorized read access to the objects in this MIB is
relatively innocuous, unauthorized write access could trigger
sending of a potentially large amount of data to an authorized
notification receiver, which could be viewed as a denial-of-
service attack.

Hence, the support for SNMP operations in a non-secure environment
without proper protection can have a negative effect on network
operations.

SNMPv1 by itself is such an insecure environment.  Even if the
network itself is secure (for example by using IPSec [16]), even
then, there is no control as to who on the secure network is
allowed to access and SET (change/create/delete) the objects in
this MIB.

It is recommended that the implementers consider the security
features as provided by the SNMPv3 framework.  Specifically, the
use of the User-based Security Model RFC 2274 [12] and the View-
based Access Control Model RFC 2275 [15] is recommended.

It is then a customer/user responsibility to ensure that the SNMP
entity giving access to this MIB, is properly configured to give
access to those objects only to those principals (users) that have
legitimate rights to access them.

6.  Authors' Addresses

     Dave Thaler
     Microsoft Corporation
     One Microsoft Way
     Redmond, WA  98052-6399
     Phone: +1 425 703 8835
     EMail: dthaler@microsoft.com

7.  References

[1]  Wijnen, B., Harrington, D., and R. Presuhn, "An Architecture
     for Describing SNMP Management Frameworks", RFC 2571,
     Cabletron Systems, Inc., BMC Software, Inc., IBM T. J. Watson
     Research, April 1999.

Expires April 2000                                        [Page 9]

Draft                     GET-SUBTREE MIB             October 1999

[2]  Rose, M., and K. McCloghrie, "Structure and Identification of
     Management Information for TCP/IP-based Internets", STD 16,
     RFC 1155, Performance Systems International, Hughes LAN
     Systems, May 1990.

[3]  Rose, M., and K. McCloghrie, "Concise MIB Definitions", STD
     16, RFC 1212, Performance Systems International, Hughes LAN
     Systems, March 1991.

[4]  M. Rose, "A Convention for Defining Traps for use with the
     SNMP", RFC 1215, Performance Systems International, March
     1991.

[5]  McCloghrie, K., Perkins, D., and J. Schoenwaelder, "Structure
     of Management Information Version 2 (SMIv2)", STD 58, RFC
     2578, April 1999.

[6]  McCloghrie, K., Perkins, D., and J. Schoenwaelder, "Textual
     Conventions for SMIv2", STD 58, RFC 2579, April 1999.

[7]  McCloghrie, K., Perkins, D., and J. Schoenwaelder,
     "Conformance Statements for SMIv2", STD 58, RFC 2580, April
     1999.

[8]  Case, J., Fedor, M., Schoffstall, M., and J. Davin, "Simple
     Network Management Protocol", STD 15, RFC 1157, SNMP
     Research, Performance Systems International, Performance
     Systems International, MIT Laboratory for Computer Science,
     May 1990.

[9]  Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,
     "Introduction to Community-based SNMPv2", RFC 1901, SNMP
     Research, Inc., Cisco Systems, Inc., Dover Beach Consulting,
     Inc., International Network Services, January 1996.

[10] Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,
     "Transport Mappings for Version 2 of the Simple Network
     Management Protocol (SNMPv2)", RFC 1906, SNMP Research, Inc.,
     Cisco Systems, Inc., Dover Beach Consulting, Inc.,
     International Network Services, January 1996.

[11] Case, J., Harrington D., Presuhn R., and B. Wijnen, "Message
     Processing and Dispatching for the Simple Network Management
     Protocol (SNMP)", RFC 2572, SNMP Research, Inc., Cabletron
     Systems, Inc., BMC Software, Inc., IBM T. J. Watson Research,

Expires April 2000                                       [Page 10]

Draft                     GET-SUBTREE MIB             October 1999

     April 1999.

[12] Blumenthal, U., and B. Wijnen, "User-based Security Model
     (USM) for version 3 of the Simple Network Management Protocol
     (SNMPv3)", RFC 2574, IBM T. J. Watson Research, April 1999.

[13] Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,
     "Protocol Operations for Version 2 of the Simple Network
     Management Protocol (SNMPv2)", RFC 1905, SNMP Research, Inc.,
     Cisco Systems, Inc., Dover Beach Consulting, Inc.,
     International Network Services, January 1996.

[14] Levi, D., Meyer, P., and B. Stewart, "SNMPv3 Applications",
     RFC 2573, SNMP Research, Inc., Secure Computing Corporation,
     Cisco Systems, April 1999.

[15] Wijnen, B., Presuhn, R., and K. McCloghrie, "View-based
     Access Control Model (VACM) for the Simple Network Management
     Protocol (SNMP)", RFC 2575, IBM T. J. Watson Research, BMC
     Software, Inc., Cisco Systems, Inc., April 1999.

8.  Full Copyright Statement

Copyright (C) The Internet Society (1999).  All Rights Reserved.

This document and translations of it may be copied and furnished
to others, and derivative works that comment on or otherwise
explain it or assist in its implmentation may be prepared, copied,
published and distributed, in whole or in part, without
restriction of any kind, provided that the above copyright notice
and this paragraph are included on all such copies and derivative
works.  However, this document itself may not be modified in any
way, such as by removing the copyright notice or references to the
Internet Society or other Internet organizations, except as needed
for the purpose of developing Internet standards in which case the
procedures for copyrights defined in the Internet Standards
process must be followed, or as required to translate it into
languages other than English.

The limited permissions granted above are perpetual and will not
be revoked by the Internet Society or its successors or assigns.

This document and the information contained herein is provided on
an "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET

Expires April 2000                                       [Page 11]

Draft                     GET-SUBTREE MIB             October 1999

ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Expires April 2000                                       [Page 12]
