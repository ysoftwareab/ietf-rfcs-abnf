sts-text-record = sts-version 1*(field-delim sts-field) [field-delim]

sts-field       = sts-id /                        ; Note that sts-id record
                  sts-extension                   ; is required.

field-delim     = *WSP ";" *WSP

sts-version     = %s"v=STSv1"

sts-id          = %s"id=" 1*32(ALPHA / DIGIT)     ; id=...

sts-extension   = sts-ext-name "=" sts-ext-value  ; name=value

sts-ext-name    = (ALPHA / DIGIT) *31(ALPHA / DIGIT / "_" / "-" / ".")

sts-ext-value   = 1*(%x21-3A / %x3C / %x3E-7E)    ; chars excluding "=",
                                                  ; ";", SP, and control
                                                  ; chars

   If multiple TXT records for "_mta-sts" are returned by the resolver,
   records which do not begin with "v=STSv1;" are discarded.  If the
   number of resulting records is not one, senders MUST assume the
   recipient domain does not implement MTA-STS and skip the remaining
   steps of policy discovery.  If the resulting TXT record contains
   multiple strings, then the record MUST be treated as if those strings
   are concatenated together without adding spaces.

sts-policy-record        = *WSP sts-policy-field *WSP
                           *(CRLF *WSP sts-policy-field *WSP)
                           [CRLF]

sts-policy-field         = sts-policy-version /           ; required once
                           sts-policy-mode    /           ; required once
                           sts-policy-max-age /           ; required once
                           0*(sts-policy-mx *WSP CRLF) /  ; required at
                                                          ; least once
                                                          ; except when mode
                                                          ; is "none"
                           sts-policy-extension           ; other fields

field-delim              = ":" *WSP

sts-policy-version       = sts-policy-version-field field-delim
                           sts-policy-version-value

sts-policy-version-field = %s"version"

sts-policy-version-value = %s"STSv1"

sts-policy-mode          = sts-policy-mode-field field-delim
                           sts-policy-mode-value

sts-policy-mode-field    = %s"mode"

sts-policy-model-value   =  %s"report" / %s"enforce" / %s"none"

sts-policy-mx            = sts-policy-mx-field field-delim
                           sts-policy-mx-value

sts-policy-mx-field      = %s"mx"

sts-policy-mx-value      = 1*(ALPHA / DIGIT / "_" / "-" / ".")

sts-policy-max-age       = sts-policy-max-age-field field-delim
                           sts-policy-max-age-value

sts-policy-max-age-field = %s"max_age"

sts-policy-max-age-value = 1*10(DIGIT)

sts-policy-extension     = sts-policy-ext-name field-delim ; additional
                           sts-policy-ext-value            ; extension
                                                           ; fields

sts-policy-ext-name      = (ALPHA / DIGIT) *31(ALPHA / DIGIT / "_" / "-" / ".")

sts-policy-ext-value     = 1*(%x21-3A / %x3C / %x3E-7E)    ; chars excluding
                                                           ; "=", ";", SP,
                                                           ; and control
                                                           ; chars
   Parsers MUST accept TXT records and policy files which are
   syntactically valid (i.e. valid key/value pairs separated by semi-
   colons for TXT records) and but containing additional key/value pairs
   not specified in this document, in which case unknown fields SHALL be
   ignored.  If any non-repeated field--i.e. all fields excepting "mx"--
   is duplicated, all entries except for the first SHALL be ignored.  If
   any field is not specified, the policy SHALL be treated as invalid.

parts = SplitN(host, '.', 2)  // Split on the first '.'.
san = san[1:]
secure = false
secure = false
policy = tryGetCachedPolicy(domain)
