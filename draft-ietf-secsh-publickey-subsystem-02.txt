

Secure Shell Working Group                                  J. Galbraith
Internet-Draft                                               J. Van Dyke
Expires: September 18, 2005                                   B. McClure
                                                        VanDyke Software
                                                               J. Bright
                                                          Silicon Circus
                                                          March 17, 2005


                   Secure Shell Public-Key Subsystem
              draft-ietf-secsh-publickey-subsystem-02.txt

Status of this Memo

   This document is an Internet-Draft and is subject to all provisions
   of Section 3 of RFC 3667.  By submitting this Internet-Draft, each
   author represents that any applicable patent or other IPR claims of
   which he or she is aware have been or will be disclosed, and any of
   which he or she become aware will be disclosed, in accordance with
   RFC 3668.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as
   Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on September 18, 2005.

Copyright Notice

   Copyright (C) The Internet Society (2005).

Abstract

   SECSH defines an authentication mechanism that is based on public
   keys, but does not define any mechanism for key distribution.  No
   common key management solution exists in current implementations.



Galbraith, et al.      Expires September 18, 2005               [Page 1]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


   This document describes a protocol that can be used to configure
   public keys in an implementation-independent fashion, allowing client
   software to take on the burden of this configuration.

   This protocol is intended to be used from the Secure Shell Connection
   Protocol [4] as a subsystem, as described in the Section "Starting a
   Shell or a Command".  The subsystem name used with this protocol is
   "publickey".

   The public-key subsystem provides a server-independent mechanism for
   clients to add public keys, remove public keys, and list the current
   public keys known by the server.  Rights to manage public keys are
   specific and limited to the authenticated user.

   A public key may also be associated with various restrictions,
   including a mandatory command or subsystem.



































Galbraith, et al.      Expires September 18, 2005               [Page 2]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
   2.  Public-Key Subsystem Overview  . . . . . . . . . . . . . . . .  5
     2.1   Opening the Public-Key Subsystem . . . . . . . . . . . . .  5
     2.2   Requests . . . . . . . . . . . . . . . . . . . . . . . . .  6
     2.3   Responses  . . . . . . . . . . . . . . . . . . . . . . . .  6
       2.3.1   The Status Response  . . . . . . . . . . . . . . . . .  6
   3.  Public-Key Subsystem Operations  . . . . . . . . . . . . . . .  8
     3.1   Version Packet . . . . . . . . . . . . . . . . . . . . . .  8
     3.2   Adding a public key  . . . . . . . . . . . . . . . . . . .  8
     3.3   Removing a public key  . . . . . . . . . . . . . . . . . . 11
     3.4   Listing public keys  . . . . . . . . . . . . . . . . . . . 11
     3.5   Listing server capabilities  . . . . . . . . . . . . . . . 11
   4.  Security Considerations  . . . . . . . . . . . . . . . . . . . 13
   5.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 14
     5.1   Registrations  . . . . . . . . . . . . . . . . . . . . . . 14
     5.2   Names  . . . . . . . . . . . . . . . . . . . . . . . . . . 14
       5.2.1   Conventions for Names  . . . . . . . . . . . . . . . . 14
       5.2.2   Future Assignments of Names  . . . . . . . . . . . . . 14
     5.3   Request names  . . . . . . . . . . . . . . . . . . . . . . 15
     5.4   Response names . . . . . . . . . . . . . . . . . . . . . . 15
     5.5   Attribute names  . . . . . . . . . . . . . . . . . . . . . 15
     5.6   Status codes . . . . . . . . . . . . . . . . . . . . . . . 16
       5.6.1   Conventions  . . . . . . . . . . . . . . . . . . . . . 16
       5.6.2   Initial Assignments  . . . . . . . . . . . . . . . . . 16
       5.6.3   Future Assignments . . . . . . . . . . . . . . . . . . 16
   6.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 17
     6.1   Normative References . . . . . . . . . . . . . . . . . . . 17
     6.2   Informative References . . . . . . . . . . . . . . . . . . 17
       Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . 17
       Intellectual Property and Copyright Statements . . . . . . . . 19



















Galbraith, et al.      Expires September 18, 2005               [Page 3]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


1.  Introduction

   SECSH is a protocol for secure remote login and other secure network
   services over an insecure network.  SECSH defines an authentication
   mechanism that is based on public keys, but does not define any
   mechanism for key distribution.  Common practice is to authenticate
   once with password authentication and transfer the public key to the
   server.  However, to date no two implementations use the same
   mechanism to configure a public key for use.

   This document describes a subsystem that can be used to configure
   public keys in an implementation-independent fashion.  This approach
   allows client software to take on the burden of this configuration.
   The public-key subsystem protocol is designed for extreme simplicity
   in implementation.  It is not intended as a PKIX replacement.

   The Secure Shell Public-Key subsystem has been designed to run on top
   of the SECSH transport layer [2] and user authentication protocols
   [3].  It provides a simple mechanism for the client to manage public
   keys on the server.

   This document should be read only after reading the SECSH
   architecture [1] and SECSH connection [4] documents.

   This protocol requires that the user be able to authenticate in some
   fashion before it can be used.  If password authentication is used,
   servers SHOULD provide a configuration option to disable the use of
   password authentication after the first public key is added.























Galbraith, et al.      Expires September 18, 2005               [Page 4]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


2.  Public-Key Subsystem Overview

   The public-key subsystem provides a server-independent mechanism for
   clients to add public keys, remove public keys, and list the current
   public keys known by the server.  The subsystem name is "publickey".

   The public keys added, removed, and listed using this protocol are
   specific and limited to those of the authenticated user.

   The operations to add, remove and list the authenticated user's
   public keys are performed as request packets sent to the server.  The
   server sends response packets that indicate success or failure as
   well as provide specific response data.

   The format of public-key blobs are detailed in the SSH Transport
   Protocol document [2].

2.1  Opening the Public-Key Subsystem

   The public-key subsystem is opened when the clients sends a
   SSH_MSG_CHANNEL_REQUEST over an existing session.

   The details of how a session is opened are described in the SSH
   Connection Protocol document [4] in the section "Opening a Session".

   To open the public-key subsystem, the client sends:

        byte      SSH_MSG_CHANNEL_REQUEST
        uint32    recipient channel
        string    "subsystem"
        boolean   want reply
        string    "publickey"

   Client implementations SHOULD reject this request; it is normally
   only sent by the client.

   If want reply is TRUE, the server MUST respond with
   SSH_MSG_CHANNEL_SUCCESS if the public-key subsystem was successfully
   started or SSH_MSG_CHANNEL_FAILURE if the server failed to start or
   does not support the public-key subsystem.

   The server SHOULD respond with SSH_MSG_CHANNEL_FAILURE if the user
   authenticated with a restricted public key that does not allow access
   to the publickey subsystem.

   It is RECOMMENDED that clients request and check the reply for this
   request.




Galbraith, et al.      Expires September 18, 2005               [Page 5]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


2.2  Requests

   All public-key subsystem requests are sent in the following form:

        uint32    length
        string    request-name
        ... request specific data follows

   The length field describes the length of the request-name field and
   the request-specific data, but not of the length field itself.  The
   client MUST receive acknowledgement of each request prior to sending
   a new request.

   All requests described in Section 3 are a description of the
   'request-name' and 'data' portion of the packet.

2.3  Responses

   All public-key subsystem responses are sent in the following form:

        uint32    length
        string    response-name
        ... response specific data follows


2.3.1  The Status Response

   A request is acknowledged by sending a status packet.  If there is
   data in response to the request, the status packet is sent after all
   data has been sent.

        string    "status"
        uint32    status code
        string    description [RFC-2279]
        string    language tag [RFC-1766]

   A status message MUST be sent for any unrecognized packets and the
   request SHOULD NOT close the subsystem.

2.3.1.1  Status Codes

   The status code gives the status in a more machine-readable format
   (suitable for localization), and can have the following values:

        SSH_PUBLICKEY_SUCCESS                      0
        SSH_PUBLICKEY_ACCESS_DENIED                1
        SSH_PUBLICKEY_STORAGE_EXCEEDED             2
        SSH_PUBLICKEY_VERSION_NOT_SUPPORTED        3



Galbraith, et al.      Expires September 18, 2005               [Page 6]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


        SSH_PUBLICKEY_KEY_NOT_FOUND                4
        SSH_PUBLICKEY_KEY_NOT_SUPPORTED            5
        SSH_PUBLICKEY_KEY_ALREADY_PRESENT          6
        SSH_PUBLICKEY_GENERAL_FAILURE              7
        SSH_PUBLICKEY_REQUEST_NOT_SUPPORTED        8














































Galbraith, et al.      Expires September 18, 2005               [Page 7]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


3.  Public-Key Subsystem Operations

   The public-key subsystem currently defines four operations: add,
   remove, list, and listattributes.

3.1  Version Packet

   Both sides MUST start by sending a version packet that indicates the
   version of the protocol they are using.

        string "version"
        uint32 protocol-version-number

   The version of the protocol described by this document is version 2.

   Both sides send the highest version that they implement.  The lower
   of the version numbers is the version of the protocol to use.  If
   either side can't support the lower version, it should close the
   subsystem and notify the other side by sending an
   SSH_MSG_CHANNEL_CLOSE message.  Before closing the subsystem, a
   status message with the status SSH_PUBLICKEY_VERSION_NOT_SUPPORTED
   SHOULD be sent.

   Both sides MUST wait to receive this version before continuing.  The
   "version" packet MUST NOT be sent again after this initial exchange.

3.2  Adding a public key

   If the client wishes to add a public key, the client sends:

        string    "add"
        string    public-key algorithm name
        string    public-key blob
        boolean   overwrite
        uint32    attribute-count
         string    attrib-name
         string    attrib-value
         bool      mandatory
        repeated attribute-count times

   The server MUST attempt to store the public key for the user in the
   appropriate location so the public key can be used for subsequent
   public-key authentications.  If the overwrite field is false and the
   specified key already exists, the server MUST return
   SSH_PUBLICKEY_KEY_ALREADY_PRESENT.  If the server returns this, the
   client SHOULD provide an option to the user to overwrite the key.  If
   the overwrite field is true and the specified key already exists but
   cannot be overwritten, the server MUST return



Galbraith, et al.      Expires September 18, 2005               [Page 8]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


   SSH_PUBLICKEY_ACCESS_DENIED

   Attribute names are defined following the same scheme laid out for
   algorithm names in [1].  If the server does not implement a mandatory
   attribute, it MUST fail the add.  For the purposes of a mandatory
   attribute, storage of the attribute is not sufficient, but requires
   that the server understand and implement the intent of the attribute.

   The following attributes are currently defined:

   "comment"

   The value of the comment attribute contains user-specified text about
   the public key.  The server SHOULD make every effort to preserve this
   value and return it with the key during any subsequent list
   operation.  The server MUST NOT attempt to interpret or act upon the
   content of the comment field in any way.  The comment attribute must
   be specified in UTF-8 format [6].

   The comment field is useful so the user can identify the key without
   resorting to comparing its fingerprint.  This attribute SHOULD NOT be
   mandatory.

   "comment-language"

   If this attribute is specified, it MUST immediately follow a
   "comment" attribute and specifies the language for that attribute
   [5].  The client MAY specify more than comment if it additionally
   specifies a different language for each of those comments.  The
   server SHOULD attempt to store each comment, together with that
   comment's lanuage attribute.  This attribute SHOULD NOT be mandatory.

   "command-override"

   "command-override" specifies a command to be executed when this key
   is in use.  The command should be executed by the server when it
   receives an "exec" or "shell" request from the client, in place of
   the command or shell which would otherwise have been executed as a
   result of that request.  If the command string is empty, both "exec"
   and "shell" requests should be denied.  If no "command-override"
   attribute is specified, all "exec" and "shell" requests should be
   permitted (as long as they satisfy other security or authorisation
   checks the server may perform).  This attribute SHOULD be mandatory.

   "subsystem"

   "subsystem" specifies a comma-separated list of subsystems that may
   be started (using a "subsystem" request) when this key is in use.



Galbraith, et al.      Expires September 18, 2005               [Page 9]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


   This attribute SHOULD be mandatory.  If the value is empty, no
   subsystems may be started.

   "x11"

   "x11" specifies that X11 forwarding may not be performed when this
   key is in use.  The attribute-value field SHOULD be empty for this
   attribute.  This attribute SHOULD be mandatory.

   "shell"

   "shell" specifies that session channel "shell" requests should be
   denied when this key is in use.  The attribute-value field SHOULD be
   empty for this attribute.  This attribute SHOULD be mandatory.

   "exec"

   "exec" specifies that session channel "exec" requests should be
   denied when this key is in use.  The attribute-value field SHOULD be
   empty for this attribute.  This attribute SHOULD be mandatory.

   "agent"

   "agent" specifies that session channel "auth-agent-req" requests
   should be denied when this key is in use.  The attribute-value field
   SHOULD be empty for this attribute.  This attribute SHOULD be
   mandatory.

   "env"

   "env" specifies that session channel "env" requests should be denied
   when this key is in use.  The attribute-value field SHOULD be empty
   for this attribute.  This attribute SHOULD be mandatory.

   "from"

   "from" specifies a comma-separated list of hosts from which the key
   may be used.  If a host not in this list attempts to use this key for
   authorisation purposes, the authorisation attempt MUST be denied.
   The server SHOULD make a log entry regarding this.

   "port-forward"

   "port-forward" specifies that no "direct-tcpip" requests should be
   accepted, except to those hosts specified in the comma-separated list
   supplied as a value to this attribute.  If the value of this
   attribute is empty, all "direct-tcpip" requests should be refused
   when using this key.  This attribute SHOULD be mandatory.



Galbraith, et al.      Expires September 18, 2005              [Page 10]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


   "reverse-forward"

   "reverse-forward" specifies that no "tcpip-forward" requests should
   be accepted, accept for the port numbers in the comma-separated list
   supplied as a value to this attribute.  If the value of this
   attribute is empty, all "tcpip-forward" requests should be refused
   when using this key.  This attribute SHOULD be mandatory.

   In addition to the attributes specified by the client, the server MAY
   provide a method for administrators to compulsorily enforce certain
   attributes.

3.3  Removing a public key

   If the client wishes to remove a public key, the client sends:

        string    "remove"
        string    public-key algorithm name
        string    public-key blob

   The server MUST attempt to remove the public key for the user from
   the appropriate location, so that the public key cannot be used for
   subsequent authentications.

3.4  Listing public keys

   If the client wishes to list the known public keys, the client sends:

        string    "list"

   The server will respond with zero or more of the following responses:

        string    "publickey"
        string    public-key algorithm name
        string    public-key blob
        uint32    attribute-count
         string    attrib-name
         string    attrib-value
        repeated attribute-count times

   Following the last "publickey" response, a status packet MUST be
   sent.

   An implementation MAY choose not to support this request.

3.5  Listing server capabilities

   If the client wishes to know which key attributes the server



Galbraith, et al.      Expires September 18, 2005              [Page 11]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


   supports, it sends:

        string    "listattributes"

   The server will respond with zero or more of the following responses:

        string    "attribute"
        string    attribute name
        boolean   compulsory

   The "compulsory" field indicates whether this attribute will be
   compulsorily applied to any added keys (irrespective of whether the
   attribute has been specified by the client) due to administrative
   settings on the server.  If the server does not support
   administrative settings of this nature, it MUST return false in the
   compulsory field.  An example of use of the "compulsory" attribute
   would be a server with a configuration file specifying that the user
   is not permitted shell access.  Given this, the server would return
   the "shell" attribute, with "compulsory" marked true.  Whatever
   attributes the user subsequently asked the server to apply to their
   key, the server would also apply the "shell" attribute, rendering it
   impossible for the user to use a shell.

   Following the last "attribute" response, a status packet MUST be
   sent.

   An implementation MAY choose not to support this request.
























Galbraith, et al.      Expires September 18, 2005              [Page 12]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


4.  Security Considerations

   This protocol assumes that it is run over a secure channel and that
   the endpoints of the channel have been authenticated.  Thus, this
   protocol assumes that it is externally protected from network-level
   attacks.

   This protocol provides a mechanism that allows client authentication
   data to be uploaded and manipulated.  It is the responsibility of the
   server implementation to enforce any access controls that may be
   required to limit the access allowed for any particular user (the
   user being authenticated externally to this protocol, typically using
   the SSH User Authentication Protocol [3]).  In particular, it is
   possible for users to overwrite an existing key on the server with
   this protocol, whilst at the same time specifying fewer restrictions
   for the new key than were previously present.  Servers should take
   care that when doing this, clients are not able to override presets
   from the server's administrator.

   This protocol requires the client to assume that the server will
   correctly implement and observe attributes applied to keys.
   Implementation errors in the server could cause clients to authorise
   keys for access they were not intended to have, or to apply fewer
   restrictions than were intended.



























Galbraith, et al.      Expires September 18, 2005              [Page 13]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


5.  IANA Considerations

   This section contains conventions used in naming the namespaces, the
   initial state of the registry, and instructions for future
   assignments.

5.1  Registrations

   Consistent with section 7 of [1], this document makes the following
   registration:

   The subsystem name "publickey".

5.2  Names

   In the following sections, the values for the name spaces are
   textual.  The conventions and instructions to the IANA for future
   assignments are given in this section.  The initial assignments are
   given in their respective sections.

5.2.1  Conventions for Names

   All names registered by the IANA in the following sections MUST be
   printable US-ASCII strings, and MUST NOT contain the characters
   at-sign ("@"), comma (","), or whitespace or control characters
   (ASCII codes 32 or less).  Names are case-sensitive, and MUST NOT be
   longer than 64 characters.

   A provision is made here for locally extensible names.  The IANA will
   not register, and will not control names with the at-sign in them.
   Names with the at-sign in them will have the format of
   "name@domainname" (without the double quotes) where the part
   preceeding the at-sign is the name.  The format of the part preceding
   the at-sign is not specified, however these names MUST be printable
   US-ASCII strings, and MUST NOT contain the comma character (","), or
   whitespace, or control characters (ASCII codes 32 or less).  The part
   following the at-sign MUST be a valid, fully qualified internet
   domain name [8] controlled by the person or organization defining the
   name.  Names are case-sensitive, and MUST NOT be longer than 64
   characters.  It is up to each domain how it manages its local
   namespace.  It has been noted that these names resemble STD 11 [7]
   email addresses.  This is purely coincidental and actually has
   nothing to do with STD 11 [7].  An example of a locally defined name
   is "ourcipher-cbc@example.com" (without the double quotes).

5.2.2  Future Assignments of Names

   Requests for assignments of new Names MUST be done through the IETF



Galbraith, et al.      Expires September 18, 2005              [Page 14]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


   CONSENSUS method as described in [9].

5.3  Request names

   The following table lists the initial assignments of Request names

           Request Name
           -------------
           version
           add
           remove
           list
           listattributes


5.4  Response names

   The following table lists the initial assignments of Response names

           Response Name
           --------------
           version
           status
           publickey
           attribute


5.5  Attribute names

   Attributes are used to define properties or restrictions for public
   keys.  The following table lists the initial assignments of Response
   names

           Attribute Name
           ---------------
           comment
           comment-language
           command-override
           subsystem
           x11
           shell
           exec
           agent
           env
           from
           port-forward
           reverse-forward




Galbraith, et al.      Expires September 18, 2005              [Page 15]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


5.6  Status codes

   The status code is a byte value, describing the status of a request.

5.6.1  Conventions

   Status responses have status codes in the range 0 to 255.  These
   numbers are allocated as follows.  Of these, the range 192 to 255 is
   reserved for use by local, private extensions.

5.6.2  Initial Assignments

   The following table identifies the initial assignments of the status
   code values.

           Status code                           Value    Reference
           ------------                          -----    ---------
           SSH_PUBLICKEY_SUCCESS                   0
           SSH_PUBLICKEY_ACCESS_DENIED             1
           SSH_PUBLICKEY_STORAGE_EXCEEDED          2
           SSH_PUBLICKEY_VERSION_NOT_SUPPORTED     3
           SSH_PUBLICKEY_KEY_NOT_FOUND             4
           SSH_PUBLICKEY_KEY_NOT_SUPPORTED         5
           SSH_PUBLICKEY_KEY_ALREADY_PRESENT       6
           SSH_PUBLICKEY_GENERAL_FAILURE           7
           SSH_PUBLICKEY_REQUEST_NOT_SUPPORTED     8


5.6.3  Future Assignments

   Requests for assignments of new message numbers in the range of 0 to
   191 MUST be done through the STANDARDS ACTION method as described in
   [9].

   The IANA will not control the message numbers range of 192 through
   255.  This range will be left for PRIVATE USE.















Galbraith, et al.      Expires September 18, 2005              [Page 16]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


6.  References

6.1  Normative References

   [1]  Lonvick, C., "SSH Protocol Architecture",
        Internet-Draft draft-ietf-secsh-architecture-22, March 2005.

   [2]  Lonvick, C., "SSH Transport Layer Protocol",
        Internet-Draft draft-ietf-secsh-transport-24, March 2005.

   [3]  Lonvick, C., "SSH Authentication Protocol",
        Internet-Draft draft-ietf-secsh-userauth-27, March 2005.

   [4]  Lonvick, C., "SSH Connection Protocol",
        Internet-Draft draft-ietf-secsh-connect-25, March 2005.

   [5]  Alvestrand, H., "Tags for the Identification of Languages",
        RFC 1766, March 1995.

   [6]  Yergeau, F., "UTF-8, a transformation format of ISO 10646",
        RFC 2279, January 1998.

6.2  Informative References

   [7]  Crocker, D., "Standard for the format of ARPA Internet text
        messages", STD 11, RFC 822, August 1982.

   [8]  Mockapetris, P., "Domain names - concepts and facilities",
        STD 13, RFC 1034, November 1987.

   [9]  Narten, T. and H. Alvestrand, "Guidelines for Writing an IANA
        Considerations Section in RFCs", BCP 26, RFC 2434, October 1998.


Authors' Addresses

   Joseph Galbraith
   VanDyke Software
   4848 Tramway Ridge Blvd
   Suite 101
   Albuquerque, NM  87111
   US

   Phone: +1 505 332 5700
   Email: galb-list@vandyke.com






Galbraith, et al.      Expires September 18, 2005              [Page 17]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


   Jeff P. Van Dyke
   VanDyke Software
   4848 Tramway Ridge Blvd
   Suite 101
   Albuquerque, NM  87111
   US

   Phone: +1 505 332 5700
   Email: jpv@vandyke.com


   Brent McClure
   VanDyke Software
   4848 Tramway Ridge Blvd
   Suite 101
   Albuquerque, NM  87111
   US

   Phone: +1 505 332 5700
   Email: bdm@vandyke.com


   Jon Bright
   Silicon Circus
   24 Jubilee Road
   Chichester, West Sussex  PO19 7XB
   UK

   Phone: +49 172 524 0521
   Email: jon@siliconcircus.com

Trademark notice

   "ssh" is a registered trademark in the United States and/or other
   countries.
















Galbraith, et al.      Expires September 18, 2005              [Page 18]

Internet-Draft      Secure Shell Public-Key Subsystem         March 2005


Intellectual Property Statement

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.


Disclaimer of Validity

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Copyright Statement

   Copyright (C) The Internet Society (2005).  This document is subject
   to the rights, licenses and restrictions contained in BCP 78, and
   except as set forth therein, the authors retain all their rights.


Acknowledgment

   Funding for the RFC Editor function is currently provided by the
   Internet Society.




Galbraith, et al.      Expires September 18, 2005              [Page 19]


