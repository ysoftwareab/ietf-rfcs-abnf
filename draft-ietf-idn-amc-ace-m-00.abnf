offset = ((offsetB >> 3) + n) << 3 and count the number of code
offsetC = (offsetB >> 12) << 12, and encode B and A as three or
c1 = *a1;
c2 = *a2;
input_end = input + input_length;

B = 0xD8;
offsetB = special_row_offset[0];
max = 0;

offset = special_row_offset[n];
count = 0;

B = 0xD8 + n;
offsetB = offset;
max = count;
n = *pp >> 8;
count = 0;

B = n;
offsetB = n << 8;
max = count;
A = 0;
max = 0;

offset = ((offsetB >> 3) + n) << 3;
count = 0;

A = n;
offsetA = offset;
max = count;
C = 0;
max = 0;

count = 0;
n = *pp >> 11;
offset = n << 11;

C = n;
max = count;
offsetC = (offsetB >> 12) << 12;
count = 3 + (B > 0xFF);

max = count;

offsetC = C << 11;
count =  B <= 0xFF && C <= 0x1F ?  3 :  5;

wide = (count < max);

max_out = *output_size;
next_out = 0;

offsetC = C << 11;
offsetC = (offsetB >> 12) << 12;

literal = 0;

codept = input[next_in];

literal = 1;
literal = 0;
diff = codept - offsetA;

codelen = 1;
diff = codept - offsetB;

codelen = 2;
diff = codept - offsetC;

codelen = 3;
diff = codept - offsetC - 0x1000;

codelen = 1;
morebits = diff & 0x3FF;
diff = codept;
codelen = 4;
diff = codept - 0x10000;
codelen =  5;

i = codelen - 1;
c = base32[diff & 0xF];
next_in = input;
q = base32_decode(*next_in++);
wide = q >> 4;
large = (q >> 3) & 1;
B = q & 7;
q = base32_decode(*next_in++);
B = (B << 5) | q;

q = base32_decode(*next_in++);
B = (B << 5) | q;
q = base32_decode(*next_in++);
offset = q << 11;

q = base32_decode(*next_in++);
offset = (offset << 5) | q;
max_out = *output_length;
next_out = 0;
literal = 0;

c = *next_in++;
literal = !literal;
diff = 0;
codelen = 1;

q = base32_decode(c);
diff = (diff << 4) | (q & 0xF);
c = *next_in++;
q = base32_decode(*next_in++);
diff = (diff << 5) | q;
q = base32_decode(*next_in++);
diff = (diff << 5) | q;
offset = offsets[codelen];
input_size = next_in - input;
scratch_size = input_size;
status = amc_ace_m_encode(next_out, output, uppercase_flags,
                            &scratch_size, scratch_space);
unicode_max_length = 256,
ace_max_size = 256,
test_case_sensitivity = case_insensitive
input_length = 0;

c0 = getchar();
c1 = getchar();
c2 = getchar();
c3 = getchar();

output_size = ace_max_size;
status = amc_ace_m_encode(input_length, input, uppercase_flags,
                              &output_size, output);
n = fread(input, 1, ace_max_size, stdin);
output_length = unicode_max_length;
status = amc_ace_m_decode(test_case_sensitivity, scratch, input,
                              &output_length, output, uppercase_flags);
codept = output[i];
