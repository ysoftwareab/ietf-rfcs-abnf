d= This specifies the "domain of the signing entity".  It is a
         domain name and is combined with the selector to form a DNS
         query.  A receive-side DKIM verifier needs to communicate the
         Signing Domain Identifier (d=) to a consuming Identity Assessor
         module and can also communicate the User Agent Identifier (i=)
         if present.

s= This tag specifies the selector.  It is used to discriminate
         among different keys that can be used for the same d= domain
         name.  As discussed in Section 4.3 of [RFC5585], "If verifiers
         were to employ the selector as part of an assessment mechanism,
         then there would be no remaining mechanism for making a
         transition from an old, or compromised, key to a new one".
         Consequently, the selector is not appropriate for use as part
         or all of the identifier used to make assessments.

i= This tag is optional and provides the "[t]he Agent or User
         Identifier (AUID) on behalf of which the SDID is taking
         responsibility" [RFC5672].  The identity can be in the syntax
         of an entire email address or only a domain name.  The domain
         name can be the same as for d= or it can be a sub-name of the
d= name.

i= string might provide a useful adjunct value for additional
p= field, and verifying against a missing key selector: both
d=domain.example.

d=companya.example).  If there is a desire to associate additional
dkim=all or dkim=discardable, any email with an RFC5322.From address
d=marketing.companyA.example, that message will fail the ADSP check
d=benefits.companya.example.  Note that the RFC5322.From address is
d=espa.example and i=@clienta.espa.example (or
i=clienta@espa.example).

g= granularity of the key:  In both DK and DKIM, this is an optional
      field that is used to constrain which sending address(es) can
      legitimately use this selector.  Unfortunately, the treatment of
      an empty field ("g=;") is different.  DKIM allows wildcards where
      DK does not.  For DK, an empty field is the same as a missing
      value, and is treated as allowing any sending address.  For DKIM,
      an empty field only matches an empty local part.  In DKIM, both a
      missing value and "g=*;" mean to allow any sending address.

      Also, in DomainKeys, the "g" field is required to match the
      address in "From:"/"Sender:", while in DKIM, it is required to
      match i=.  This might or might not affect transition.

      If your DK DNS key record has an empty "g" field in it ("g=;"),
      your best course of action is to modify the record to remove the
      empty field.  In that way, the DK semantics will remain the same,
      and the DKIM semantics will match.
      If your DNS key record does not have an empty "g" field in it
      ("g=;"), it's probable that the record can be left alone.  But the
      best course of action would still be to make sure that it has a
      "v" field.  When the decision is made to stop supporting
      DomainKeys and to only support DKIM, it is important to verify
      that the "g" field is compatible with DKIM, and typically having
      "v=DKIM1;" in it.  It is strongly encouraged that if use of an
      empty "g" field in the DKIM selector, include the "v" field.

g= granularity of the key:  In both DK and DKIM, this is an optional
      field that is used to constrain which sending address(es) can
      legitimately use this selector.  Unfortunately, the treatment of
      an empty field ("g=;") is different.  For DK, an empty field is
      the same as a missing value, and is treated as allowing any
      sending address.  For DKIM, an empty field only matches an empty
      local part.

v= version of the selector  It is advised that a DKIM selector have
      "v=DKIM1;" at its beginning, but it is not required.

