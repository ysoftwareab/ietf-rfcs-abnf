



Network Working Group                                      M. Nottingham
Internet-Draft                                              May 11, 2017
Obsoletes: 3205 (if approved)
Intended status: Best Current Practice
Expires: November 12, 2017


                   On the use of HTTP as a Substrate
                      draft-nottingham-bcp56bis-00

Abstract

   HTTP is often used as a substrate for other application protocols.
   This document specifies best practices for these protocols' use of
   HTTP.

Note to Readers

   The issues list for this draft can be found at
   https://github.com/mnot/I-D/labels/bcp56bis .

   The most recent (often, unpublished) draft is at
   https://mnot.github.io/I-D/bcp56bis/ .

   Recent changes are listed at https://github.com/mnot/I-D/commits/gh-
   pages/bcp56bis .

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 12, 2017.








Nottingham              Expires November 12, 2017               [Page 1]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Notational Conventions  . . . . . . . . . . . . . . . . .   4
   2.  Is HTTP Being Used? . . . . . . . . . . . . . . . . . . . . .   4
   3.  What's Important About HTTP . . . . . . . . . . . . . . . . .   5
     3.1.  Generic Semantics . . . . . . . . . . . . . . . . . . . .   5
     3.2.  Links . . . . . . . . . . . . . . . . . . . . . . . . . .   6
     3.3.  Getting Value from HTTP . . . . . . . . . . . . . . . . .   6
   4.  Best Practices for Using HTTP . . . . . . . . . . . . . . . .   7
     4.1.  Specifying the Use of HTTP  . . . . . . . . . . . . . . .   7
     4.2.  Defining HTTP Resources . . . . . . . . . . . . . . . . .   8
     4.3.  HTTP URLs . . . . . . . . . . . . . . . . . . . . . . . .   9
       4.3.1.  Initial URL Discovery . . . . . . . . . . . . . . . .   9
       4.3.2.  URL Schemes . . . . . . . . . . . . . . . . . . . . .   9
       4.3.3.  Transport Ports . . . . . . . . . . . . . . . . . . .  10
     4.4.  Authentication and Application State  . . . . . . . . . .  10
     4.5.  HTTP Methods  . . . . . . . . . . . . . . . . . . . . . .  10
     4.6.  HTTP Status Codes . . . . . . . . . . . . . . . . . . . .  11
     4.7.  HTTP Header Fields  . . . . . . . . . . . . . . . . . . .  12
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  12
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .  12
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  13
     7.1.  Normative References  . . . . . . . . . . . . . . . . . .  13
     7.2.  Informative References  . . . . . . . . . . . . . . . . .  14
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  16

1.  Introduction

   HTTP [RFC7230] is often used as a substrate for other application
   protocols.  This is done for a variety of reasons, including:





Nottingham              Expires November 12, 2017               [Page 2]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


   o  familiarity by implementers, specifiers, administrators,
      developers and users,

   o  availability of a variety of client, server and proxy
      implementations,

   o  ease of use,

   o  ubiquity of Web browsers,

   o  reuse of existing mechanisms like authentication and encryption,

   o  presence of HTTP servers and clients in target deployments, and

   o  its ability to traverse firewalls.

   The Internet community has a long tradition of protocol reuse, dating
   back to the use of Telnet [RFC0854] as a substrate for FTP [RFC0959]
   and SMTP [RFC2821].  However, layering new protocols over HTTP brings
   its own set of issues:

   o  Should an application using HTTP define a new URL scheme?  Use new
      ports?

   o  Should it use standard HTTP methods and status codes, or define
      new ones?

   o  How can the maximum value be extracted from the use of HTTP?

   o  How does it coexist with other uses of HTTP - especially Web
      browsing?

   o  How can interoperability problems and "protocol dead ends" be
      avoided?

   This document contains best current practices regarding the use of
   HTTP by applications other than Web browsing.  Section 2 defines what
   applications it applies to; Section 3 surveys the properties of HTTP
   that are important to preserve, and Section 4 conveys best practices
   for those applications that do use HTTP.

   It is written primarily to guide IETF efforts, but might be
   applicable in other situations.  Note that the requirements herein do
   not necessarily apply to the development of generic HTTP extensions.







Nottingham              Expires November 12, 2017               [Page 3]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

2.  Is HTTP Being Used?

   Different applications have different goals when using HTTP.  In this
   document, we say an application is _using HTTP_ when any of the
   following conditions are true:

   o  The transport port in use is 80 or 443,

   o  The URL scheme "http" or "https" is used,

   o  The ALPN protocol ID [RFC7301] "http/1.1", "h2" or "h2c" is used,
      or

   o  The message formats described in [RFC7320] and/or [RFC7540] are
      used in conjunction with the IANA registries defined for HTTP.

   When an application is using HTTP, all of the requirements of the
   HTTP protocol suite (including but not limited to [RFC7320],
   [RFC7321], [RFC7322], [RFC7233], [RFC7234], [RFC7325] and [RFC7540])
   are in force.

   An application might not be _using HTTP_ according to this
   definition, but still relying upon the HTTP specifications in some
   manner.  For example, an application might wish to avoid re-
   specifying parts of the message format, but change others; or, it
   might want to use a different set of methods.

   Such applications are referred to as _protocols based upon HTTP_ in
   this document.  These have more freedom to modify protocol operation,
   but are also likely to lose at least a portion of the benefits
   outlined above, as most HTTP implementations won't be easily
   adaptable to these changes, and as the protocol diverges from HTTP,
   the benefit of mindshare will be lost.

   Protocols that are based upon HTTP MUST NOT reuse HTTP's URL schemes,
   transport ports, ALPN protocol IDs or IANA registries; rather, they
   are encouraged to establish their own.








Nottingham              Expires November 12, 2017               [Page 4]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


3.  What's Important About HTTP

   There are many ways that HTTP applications are defined and deployed,
   and sometimes they are brought to the IETF for standardisation.  In
   that process, what might be workable for deployment in a limited
   fashion isn't appropriate for standardisation and the corresponding
   broader deployment.

   This section examines the facets of the protocol that are important
   to preserve in these situations.

3.1.  Generic Semantics

   When writing an application's specification, it's often tempting to
   specify exactly how HTTP is to be implemented, supported and used.

   However, this can easily lead to an unintended profile of HTTP's
   behaviour.  For example, it's common to see specifications with
   language like this:

A `200 OK` response means that the widget has successfully been updated.

   This sort of specification is bad practice, because it is adding new
   semantics to HTTP's status codes and methods, respectively; a
   recipient - whether it's an origin server, client library,
   intermediary or cache - now has to know these extra semantics to
   understand the message.

   Some applications even require specific behaviours, such as:

   A `POST` request MUST result in a `201 Created` response.

   This forms an expectation in the client that the response will always
   be "201 Created", when in fact there are a number of reasons why the
   status code might differ in a real deployment.  If the client does
   not anticipate this, the application's deployment is brittle.

   Much of the value of HTTP is in its _generic semantics_ - that is,
   the protocol elements defined by HTTP are potentially applicable to
   every resource, not specific to a particular context.  Application-
   specific semantics are expressed in the payload; mostly, in the body,
   but also in header fields.

   This allows a HTTP message to be examined by generic HTTP software
   (e.g., HTTP servers, intermediaries, client implementatiions), and
   its handling to be correctly determined.  It also allows people to
   leverage their knowledge of HTTP semantics without special-casing
   them for a particular application.



Nottingham              Expires November 12, 2017               [Page 5]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


   Therefore, applications that use HTTP MUST NOT re-define, refine or
   overlay the semantics of defined protocol elements.  Instead, they
   SHOULD focus their specifications on protocol elements that are
   specific to them; namely their HTTP resources.

   See Section 4.2 for details.

3.2.  Links

   Another common practice is assuming that the HTTP server's name space
   (or a portion thereof) is exclusively for the use of a single
   application.  This effectively overlays special, application-specific
   semantics onto that space, precludes other applications from using
   it.

   As explained in [RFC7320], such "squatting" on a part of the URL
   space by a standard usurps the server's authority over its own
   resources, can cause deployment issues, and is therefore bad practice
   in standards.

   Instead of statically defining URL paths, it is RECOMMENDED that
   applications using HTTP define links in payloads, to allow
   flexibility in deployment.

   Using runtime links in this fashion has a number of other benefits.
   For example, navigating with a link allows a request to be routed to
   a different server without the overhead of a redirection, thereby
   supporting deployment across machines well.  It becomes possible to
   "mix" different applications on the same server, and offers a natural
   path for extensibility, versioning and capability management.

3.3.  Getting Value from HTTP

   The simplest possible use of HTTP is to POST data to a single URL,
   thereby effectively tunnelling through the protocol.

   This "RPC" style of communication does get some benefit from using
   HTTP - namely, message framing and the availability of
   implementations - but fails to realise many others:

   o  Caching for server scalability, latency and bandwidth reduction,
      and reliability;

   o  Authentication and access control;

   o  Automatic redirection;

   o  Partial content to selectively request part of a response;



Nottingham              Expires November 12, 2017               [Page 6]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


   o  Natural support for extensions and versioning through protocol
      extension; and

   o  The ability to interact with the application easily using a Web
      browser.

   Using such a high-level protocol to tunnel simple semantics has
   downsides too; because of its more advanced capabilities, breadth of
   deployment and age, HTTP's complexity can cause interoperability
   problems that could be avoided by using a simpler substrate (e.g.,
   WebSockets [RFC6455], if browser support is necessary, or TCP
   [RFC0793] if not), or making the application be _based upon HTTP_,
   instead of using it (as defined in Section 2).

   Applications that use HTTP are encouraged to accommodate the various
   features that the protocol offers, so that their users receive the
   maximum benefit from it.  This document does not require specific
   features to be used, since the appropriate design tradeoffs are
   highly specific to a given situation.  However, following the
   practices in Section 4 will help make them available.

4.  Best Practices for Using HTTP

   This section contains best practices regarding the use of HTTP by
   applications, including practices for specific HTTP protocol
   elements.

4.1.  Specifying the Use of HTTP

   When specifying the use of HTTP, an application SHOULD use [RFC7230]
   as the primary reference; it is not necessary to reference all of the
   specifications in the HTTP suite unless there are specific reasons to
   do so (e.g., a particular feature is called out).

   Applications using HTTP MAY specify a minimum version to be supported
   (HTTP/1.1 is suggested), and MUST NOT specify a maximum version.

   Likewise, applications need not specify what HTTP mechanisms - such
   as redirection, caching, authentication, proxy authentication, and so
   on - are to be supported.  Full featured support for HTTP SHOULD be
   taken for granted in servers and clients, and the application's
   function SHOULD degrade gracefully if they are not (although this
   might be achieved by informing the user that their task cannot be
   completed).

   For example, an application can specify that it uses HTTP like this:





Nottingham              Expires November 12, 2017               [Page 7]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


   Foo Application uses HTTP {{RFC7230}}. Implementations MUST support
   HTTP/1.1, and MAY support later versions. Support for common HTTP
   mechanisms such as redirection and caching are assumed.

4.2.  Defining HTTP Resources

   HTTP Applications SHOULD focus on defining the following application-
   specific protocol elements:

   o  Media types [RFC6838], often based upon a format convention such
      as JSON [RFC7159],

   o  HTTP header fields, as per Section 4.7, and

   o  The behaviour of resources, as identified by link relations
      [RFC5988].

   By composing these protocol elements, an application can define a set
   of resources, identified by link relations, that implement specified
   behaviours, including:

   o  Retrieval of their state using GET, in one or more formats
      identified by media type;

   o  Resource creation or update using POST or PUT, with an
      appropriately identified request body format;

   o  Data processing using POST and identified request and response
      body format(s); and

   o  Resource deletion using DELETE.

   For example, an application might specify:

   Resources linked to with the "example-widget" link relation type are
   Widgets. The state of a Widget can be fetched in the
   "application/example-widget+json" format, and can be updated by PUT
   to the same link. Widget resources can be deleted.

   The "Example-Count" response header field on Widget representations
   indicates how many Widgets are held by the sender.

   The "application/example-widget+json" format is a JSON {{RFC7159}}
   format representing the state of a Widget. It contains links to
   related information in the link indicated by the Link header field
   value with the "example-other-info" link relation type.





Nottingham              Expires November 12, 2017               [Page 8]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


4.3.  HTTP URLs

   In HTTP, URLs are opaque identifiers under the control of the server.
   As outlined in [RFC7320], standards cannot usurp this space, since it
   might conflict with existing resources, and constrain implementation
   and deployment.

   In other words, applications that use HTTP MUST NOT associate
   application semantics with specific URL paths.  For example,
   specifying that a "GET to the URL /foo retrieves a bar document" is
   bad practice.  Likewise, specifying "The widget API is at the path
   /bar" violates [RFC7320].

   Instead, applications that use HTTP are encouraged to use typed links
   [RFC5988] to convey the URIs that are in use, as well as the
   semantics of the resources that they identify.  See Section 4.2 for
   details.

4.3.1.  Initial URL Discovery

   Generally, a client with begin interacting with a given application
   server by requesting an initial document that contains information
   about that particular deployment, potentially including links to
   other relevant resources.

   Applications that use HTTP SHOULD allow an arbitrary URL to be used
   as that entry point.  For example, rather than specifying "the
   initial document is at "/foo/v1", they should allow a deployment to
   use any URL as the entry point for the application.

   In cases where doing so is impractical (e.g., it is not possible to
   convey a whole URL, but only a hostname) applications that use HTTP
   MAY define a well-known URL [RFC5785] as an entry point.

4.3.2.  URL Schemes

   Applications that use HTTP MUST allow use of the "https" URL scheme,
   and SHOULD NOT allow use of the "http" URL scheme, unless
   interoperability considerations with existing deployments require it.
   They MUST NOT use other URL schemes.

   "https" is preferred to mitigate pervasive monitoring attacks
   [RFC7258].

   Using other schemes to denote an application using HTTP makes it more
   difficult to use with existing implementations (e.g., Web browsers),
   and is likely to fail to meet the requirements of [RFC7595].




Nottingham              Expires November 12, 2017               [Page 9]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


   If it is necessary to advertise the application in use, this SHOULD
   be done in message payloads, not the URL scheme.

4.3.3.  Transport Ports

   Applications that use HTTP SHOULD use the default port for the URL
   scheme in use.  If it is felt that networks might need to distinguish
   the application's traffic for operational reasons, it MAY register a
   separate port, but be aware that this has privacy implications for
   that protocol's users.  The impact of doing so MUST be documented in
   Security Considerations.

4.4.  Authentication and Application State

   Applications that use HTTP MAY use stateful cookies [RFC6265] to
   identify a client and/or store client-specific data to contextualise
   requests.

   If it is only necessary to identify clients, applications that use
   HTTP MAY use HTTP authentication [RFC7235]; if the Basic
   authentication scheme [RFC7617] is used, it MUST NOT be used with the
   'http' URL scheme.

   In either case, it is important to carefully specify the scoping and
   use of these mechanisms; if they expose sensitive data or
   capabilities (e.g., by acting as an ambiant authority), exploits are
   possible.  Mitigations include using a request-specific token to
   assure the intent of the client.

4.5.  HTTP Methods

   Applications that use HTTP MUST confine themselves to using
   registered HTTP methods such as GET, POST, PUT, DELETE, and PATCH.

   New HTTP methods are rare; they are required to be registered with
   IETF Review (see [RFC7232]), and are also required to be _generic_.
   That means that they need to be potentially applicable to all
   resources, not just those of one application.

   While historically some applications (e.g., [RFC6352] and [RFC4791])
   have defined non-generic methods, [RFC7231] now forbids this.

   When it is believed that a new method is required, authors are
   encouraged to engage with the HTTP community early, and document
   their proposal as a separate HTTP extension, rather than as part of
   an application's specification.





Nottingham              Expires November 12, 2017              [Page 10]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


4.6.  HTTP Status Codes

   Applications that use HTTP MUST only use registered HTTP status
   codes.

   As with methods, new HTTP status codes are rare, and required (by
   [RFC7231]) to be registered with IETF review.  Similarly, HTTP status
   codes are generic; they are required (by [RFC7231]) to be potentially
   applicable to all resources, not just to those of one application.

   When it is believed that a new status code is required, authors are
   encouraged to engage with the HTTP community early, and document
   their proposal as a separate HTTP extension, rather than as part of
   an application's specification.

   Status codes' primary function is to convey HTTP semantics for the
   benefit of generic HTTP software, not application-specific semantics.
   Therefore, applications MUST NOT specify additional semantics or
   refine existing semantics for status codes.

   In particular, specifying that a particular status code has a
   specific meaning in the context of an application is harmful, as
   these are not generic semantics, since the consumer needs to be in
   the context of the application to understand them.

   Furthermore, applications using HTTP MUST NOT re-specify the
   semantics of HTTP status codes, even if it is only by copying their
   definition.  They MUST NOT require specific status phrases to be
   used; the status phrase has no function in HTTP, and is not
   guaranteed to be preserved by implementations.

   Typically, applications using HTTP will convey application-specific
   information in the message body and/or HTTP header fields, not the
   status code.

   Specifications sometimes also create a "laundry list" of potential
   status codes, in an effort to be helpful.  The problem with doing so
   is that such a list is never complete; for example, if a network
   proxy is interposed, the client might encounter a "407 Proxy
   Authentication Required" response; or, if the server is rate limiting
   the client, it might receive a "429 Too Many Requests" response.

   Since the list of HTTP status codes can be added to, it's safer to
   refer to it directly, and point out that clients SHOULD be able to
   handle all applicable protocol elements gracefully (i.e., falling
   back to the generic "n00" semantics of a given status code; e.g.,
   "499" can be safely handled as "400" by clients that don't recognise
   it).



Nottingham              Expires November 12, 2017              [Page 11]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


4.7.  HTTP Header Fields

   Applications that use HTTP MAY define new HTTP header fields,
   following the advice in [RFC7321], Section 8.3.1.

   Typically, using HTTP header fields is appropriate in a few different
   situations:

   o  Their content is useful to intermediaries (who often wish to avoid
      parsing the body), and/or

   o  Their content is useful to generic HTTP software (e.g., clients,
      servers), and/or

   o  It is not possible to include their content in the message body
      (usually because a format does not allow it).

   If none of these motivations apply, using a header field is NOT
   RECOMMENDED.

   New header fields MUST be registered, as per [RFC7231] and [RFC3864].

   It is RECOMMENDED that header field names be short (even when HTTP/2
   header compression is in effect, there is an overhead) but
   appropriately specific.  In particular, if a header field is specific
   to an application, an identifier for that application SHOULD form a
   prefix to the header field name, separated by a "-".

   The semantics of existing HTTP header fields MUST NOT be re-defined
   without updating their registration or defining an extension to them
   (if allowed).  For example, an application using HTTP cannot specify
   that the "Location" header has a special meaning in a certain
   context.

   See Section 4.4 for requirements regarding header fields that carry
   application state (e.g,. Cookie).

5.  IANA Considerations

   This document has no requirements for IANA.

6.  Security Considerations

   Section 4.4 discusses the impact of using stateful mechanisms in the
   protocol as ambiant authority, and suggests a mitigation.

   Section 4.3.2 requires support for 'https' URLs, and discourages the
   use of 'http' URLs, to mitigate pervasive monitoring attacks.



Nottingham              Expires November 12, 2017              [Page 12]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


7.  References

7.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC3864]  Klyne, G., Nottingham, M., and J. Mogul, "Registration
              Procedures for Message Header Fields", BCP 90, RFC 3864,
              DOI 10.17487/RFC3864, September 2004,
              <http://www.rfc-editor.org/info/rfc3864>.

   [RFC5988]  Nottingham, M., "Web Linking", RFC 5988,
              DOI 10.17487/RFC5988, October 2010,
              <http://www.rfc-editor.org/info/rfc5988>.

   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, "Media Type
              Specifications and Registration Procedures", BCP 13,
              RFC 6838, DOI 10.17487/RFC6838, January 2013,
              <http://www.rfc-editor.org/info/rfc6838>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <http://www.rfc-editor.org/info/rfc7230>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <http://www.rfc-editor.org/info/rfc7231>.

   [RFC7232]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Conditional Requests", RFC 7232,
              DOI 10.17487/RFC7232, June 2014,
              <http://www.rfc-editor.org/info/rfc7232>.

   [RFC7233]  Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,
              "Hypertext Transfer Protocol (HTTP/1.1): Range Requests",
              RFC 7233, DOI 10.17487/RFC7233, June 2014,
              <http://www.rfc-editor.org/info/rfc7233>.

   [RFC7234]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "Hypertext Transfer Protocol (HTTP/1.1): Caching",
              RFC 7234, DOI 10.17487/RFC7234, June 2014,
              <http://www.rfc-editor.org/info/rfc7234>.




Nottingham              Expires November 12, 2017              [Page 13]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


   [RFC7301]  Friedl, S., Popov, A., Langley, A., and E. Stephan,
              "Transport Layer Security (TLS) Application-Layer Protocol
              Negotiation Extension", RFC 7301, DOI 10.17487/RFC7301,
              July 2014, <http://www.rfc-editor.org/info/rfc7301>.

   [RFC7320]  Nottingham, M., "URI Design and Ownership", BCP 190,
              RFC 7320, DOI 10.17487/RFC7320, July 2014,
              <http://www.rfc-editor.org/info/rfc7320>.

   [RFC7321]  McGrew, D. and P. Hoffman, "Cryptographic Algorithm
              Implementation Requirements and Usage Guidance for
              Encapsulating Security Payload (ESP) and Authentication
              Header (AH)", RFC 7321, DOI 10.17487/RFC7321, August 2014,
              <http://www.rfc-editor.org/info/rfc7321>.

   [RFC7322]  Flanagan, H. and S. Ginoza, "RFC Style Guide", RFC 7322,
              DOI 10.17487/RFC7322, September 2014,
              <http://www.rfc-editor.org/info/rfc7322>.

   [RFC7325]  Villamizar, C., Ed., Kompella, K., Amante, S., Malis, A.,
              and C. Pignataro, "MPLS Forwarding Compliance and
              Performance Requirements", RFC 7325, DOI 10.17487/RFC7325,
              August 2014, <http://www.rfc-editor.org/info/rfc7325>.

   [RFC7540]  Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext
              Transfer Protocol Version 2 (HTTP/2)", RFC 7540,
              DOI 10.17487/RFC7540, May 2015,
              <http://www.rfc-editor.org/info/rfc7540>.

   [RFC7595]  Thaler, D., Ed., Hansen, T., and T. Hardie, "Guidelines
              and Registration Procedures for URI Schemes", BCP 35,
              RFC 7595, DOI 10.17487/RFC7595, June 2015,
              <http://www.rfc-editor.org/info/rfc7595>.

7.2.  Informative References

   [RFC0793]  Postel, J., "Transmission Control Protocol", STD 7,
              RFC 793, DOI 10.17487/RFC0793, September 1981,
              <http://www.rfc-editor.org/info/rfc793>.

   [RFC0854]  Postel, J. and J. Reynolds, "Telnet Protocol
              Specification", STD 8, RFC 854, DOI 10.17487/RFC0854, May
              1983, <http://www.rfc-editor.org/info/rfc854>.

   [RFC0959]  Postel, J. and J. Reynolds, "File Transfer Protocol",
              STD 9, RFC 959, DOI 10.17487/RFC0959, October 1985,
              <http://www.rfc-editor.org/info/rfc959>.




Nottingham              Expires November 12, 2017              [Page 14]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


   [RFC2821]  Klensin, J., Ed., "Simple Mail Transfer Protocol",
              RFC 2821, DOI 10.17487/RFC2821, April 2001,
              <http://www.rfc-editor.org/info/rfc2821>.

   [RFC4791]  Daboo, C., Desruisseaux, B., and L. Dusseault,
              "Calendaring Extensions to WebDAV (CalDAV)", RFC 4791,
              DOI 10.17487/RFC4791, March 2007,
              <http://www.rfc-editor.org/info/rfc4791>.

   [RFC5785]  Nottingham, M. and E. Hammer-Lahav, "Defining Well-Known
              Uniform Resource Identifiers (URIs)", RFC 5785,
              DOI 10.17487/RFC5785, April 2010,
              <http://www.rfc-editor.org/info/rfc5785>.

   [RFC6265]  Barth, A., "HTTP State Management Mechanism", RFC 6265,
              DOI 10.17487/RFC6265, April 2011,
              <http://www.rfc-editor.org/info/rfc6265>.

   [RFC6352]  Daboo, C., "CardDAV: vCard Extensions to Web Distributed
              Authoring and Versioning (WebDAV)", RFC 6352,
              DOI 10.17487/RFC6352, August 2011,
              <http://www.rfc-editor.org/info/rfc6352>.

   [RFC6455]  Fette, I. and A. Melnikov, "The WebSocket Protocol",
              RFC 6455, DOI 10.17487/RFC6455, December 2011,
              <http://www.rfc-editor.org/info/rfc6455>.

   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <http://www.rfc-editor.org/info/rfc7159>.

   [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Authentication", RFC 7235,
              DOI 10.17487/RFC7235, June 2014,
              <http://www.rfc-editor.org/info/rfc7235>.

   [RFC7258]  Farrell, S. and H. Tschofenig, "Pervasive Monitoring Is an
              Attack", BCP 188, RFC 7258, DOI 10.17487/RFC7258, May
              2014, <http://www.rfc-editor.org/info/rfc7258>.

   [RFC7617]  Reschke, J., "The 'Basic' HTTP Authentication Scheme",
              RFC 7617, DOI 10.17487/RFC7617, September 2015,
              <http://www.rfc-editor.org/info/rfc7617>.








Nottingham              Expires November 12, 2017              [Page 15]

Internet-Draft      On the use of HTTP as a Substrate           May 2017


Author's Address

   Mark Nottingham

   Email: mnot@mnot.net
   URI:   https://www.mnot.net/













































Nottingham              Expires November 12, 2017              [Page 16]
