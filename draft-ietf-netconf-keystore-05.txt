



NETCONF Working Group                                          K. Watsen
Internet-Draft                                          Juniper Networks
Intended status: Standards Track                            June 4, 2018
Expires: December 6, 2018


          YANG Data Model for a Centralized Keystore Mechanism
                     draft-ietf-netconf-keystore-05

Abstract

   This document defines a YANG 1.1 module called "ietf-keystore" that
   enables centralized configuration of asymmetric keys and their
   associated certificates, and notification for when configured
   certificates are about to expire.

Editorial Note (To be removed by RFC Editor)

   This draft contains many placeholder values that need to be replaced
   with finalized values at the time of publication.  This note
   summarizes all of the substitutions that are needed.  No other RFC
   Editor instructions are specified elsewhere in this document.

   Artwork in this document contains shorthand references to drafts in
   progress.  Please apply the following replacements:

   o  "VVVV" --> the assigned RFC value for this draft

   Artwork in this document contains placeholder values for the date of
   publication of this draft.  Please apply the following replacement:

   o  "2018-06-04" --> the publication date of this draft

   The following Appendix section is to be removed prior to publication:

   o  Appendix A.  Change Log

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.





Watsen                  Expires December 6, 2018                [Page 1]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 6, 2018.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Requirements Language . . . . . . . . . . . . . . . . . . . .   3
   3.  The Keystore Model  . . . . . . . . . . . . . . . . . . . . .   4
     3.1.  Tree Diagram  . . . . . . . . . . . . . . . . . . . . . .   4
     3.2.  Example Usage . . . . . . . . . . . . . . . . . . . . . .   6
     3.3.  YANG Module . . . . . . . . . . . . . . . . . . . . . . .  12
   4.  Security Considerations . . . . . . . . . . . . . . . . . . .  21
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  23
     5.1.  The IETF XML Registry . . . . . . . . . . . . . . . . . .  23
     5.2.  The YANG Module Names Registry  . . . . . . . . . . . . .  23
   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  23
     6.1.  Normative References  . . . . . . . . . . . . . . . . . .  23
     6.2.  Informative References  . . . . . . . . . . . . . . . . .  24
   Appendix A.  Change Log . . . . . . . . . . . . . . . . . . . . .  26
     A.1.  00 to 01  . . . . . . . . . . . . . . . . . . . . . . . .  26
     A.2.  01 to 02  . . . . . . . . . . . . . . . . . . . . . . . .  26
     A.3.  02 to 03  . . . . . . . . . . . . . . . . . . . . . . . .  26
     A.4.  03 to 04  . . . . . . . . . . . . . . . . . . . . . . . .  26
     A.5.  04 to 05  . . . . . . . . . . . . . . . . . . . . . . . .  27
   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  27
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  27






Watsen                  Expires December 6, 2018                [Page 2]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


1.  Introduction

   This document defines a YANG 1.1 [RFC7950] module called "ietf-
   keystore" that enables centralized configuration of asymmetric keys
   and their associated certificates, and notification for when
   configured certificates are about to expire.

   This module also defines Six groupings designed for maximum reuse.
   These groupings include one for the public half of an asymmetric key,
   one for both the public and private halves of an asymmetric key, one
   for both halves of an asymmetric key and a list of associated
   certificates, one for an asymmetric key that may be configured
   locally or via a reference to an asymmetric key in the keystore, one
   for a trust anchor certificate and, lastly, one for an end entity
   certificate.

   Special consideration has been given for systems that have
   cryptographic hardware, such as a Trusted Protection Module (TPM).
   These systems are unique in that the cryptographic hardware
   completely hides the private keys and must perform all private key
   operations.  To support such hardware, the "private-key" can be the
   special value "hardware-protected" and the actions "generate-private-
   key" and "generate-certificate-signing-request" can be used to direct
   these operations to the hardware .

   This document in compliant with Network Management Datastore
   Architecture (NMDA) [RFC8342].  For instance, to support keys and
   associated certificates installed during manufacturing (e.g., for a
   IDevID [Std-802.1AR-2009] certificate), it is expected that such data
   may appear only in <operational>.

   While only asymmetric keys are currently supported, the module has
   been designed to enable other key types to be introduced in the
   future.

   The module does not support protecting the contents of the keystore
   (e.g., via encryption), though it could be extended to do so in the
   future.

   It is not required that a system has an operating system level
   keystore utility to implement this module.

2.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP




Watsen                  Expires December 6, 2018                [Page 3]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  The Keystore Model

3.1.  Tree Diagram

   This section provides a tree diagrams [RFC8340] for the "ietf-
   keystore" module that presents both the protocol-accessible
   "keystore" as well the all the groupings intended for external usage.

   module: ietf-keystore
     +--rw keystore
        +--rw asymmetric-keys
           +--rw asymmetric-key* [name]
           |  +--rw name                                    string
           |  +--rw algorithm
           |  |       ct:key-algorithm-ref
           |  +--rw public-key                              binary
           |  +--rw private-key                             union
           |  +--rw certificates
           |  |  +--rw certificate* [name]
           |  |     +--rw name                      string
           |  |     +--rw cert
           |  |     |       ct:end-entity-cert-cms
           |  |     +---n certificate-expiration
           |  |        +-- expiration-date?   yang:date-and-time
           |  +---x generate-certificate-signing-request
           |     +---w input
           |     |  +---w subject       binary
           |     |  +---w attributes?   binary
           |     +--ro output
           |        +--ro certificate-signing-request    binary
           +---x generate-asymmetric-key
              +---w input
                 +---w name         string
                 +---w algorithm    ct:key-algorithm-ref

     grouping end-entity-cert-grouping
       +-- cert                      ct:end-entity-cert-cms
       +---n certificate-expiration
          +-- expiration-date?   yang:date-and-time
     grouping local-or-keystore-end-entity-certificate-grouping
       +-- (local-or-keystore)
          +--:(local)
          |  +-- algorithm                 ct:key-algorithm-ref
          |  +-- public-key                binary
          |  +-- private-key               union



Watsen                  Expires December 6, 2018                [Page 4]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


          |  +-- cert                      ct:end-entity-cert-cms
          |  +---n certificate-expiration
          |     +-- expiration-date?   yang:date-and-time
          +--:(keystore) {keystore-implemented}?
             +-- reference
                     ks:asymmetric-key-certificate-ref
     grouping local-or-keystore-asymmetric-key-with-certs-grouping
       +-- (local-or-keystore)
          +--:(local)
          |  +-- algorithm
          |  |       ct:key-algorithm-ref
          |  +-- public-key                              binary
          |  +-- private-key                             union
          |  +-- certificates
          |  |  +-- certificate* [name]
          |  |     +-- name?                     string
          |  |     +-- cert                      ct:end-entity-cert-cms
          |  |     +---n certificate-expiration
          |  |        +-- expiration-date?   yang:date-and-time
          |  +---x generate-certificate-signing-request
          |     +---w input
          |     |  +---w subject       binary
          |     |  +---w attributes?   binary
          |     +--ro output
          |        +--ro certificate-signing-request    binary
          +--:(keystore) {keystore-implemented}?
             +-- reference
                     ks:asymmetric-key-ref
     grouping trust-anchor-cert-grouping
       +-- cert    ct:trust-anchor-cert-cms
     grouping asymmetric-key-pair-grouping
       +-- algorithm      ct:key-algorithm-ref
       +-- public-key     binary
       +-- private-key    union
     grouping public-key-grouping
       +-- algorithm     ct:key-algorithm-ref
       +-- public-key    binary
     grouping asymmetric-key-pair-with-certs-grouping
       +-- algorithm                               ct:key-algorithm-ref
       +-- public-key                              binary
       +-- private-key                             union
       +-- certificates
       |  +-- certificate* [name]
       |     +-- name?                     string
       |     +-- cert                      ct:end-entity-cert-cms
       |     +---n certificate-expiration
       |        +-- expiration-date?   yang:date-and-time
       +---x generate-certificate-signing-request



Watsen                  Expires December 6, 2018                [Page 5]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


          +---w input
          |  +---w subject       binary
          |  +---w attributes?   binary
          +--ro output
             +--ro certificate-signing-request    binary
     grouping local-or-keystore-asymmetric-key-grouping
       +-- (local-or-keystore)
          +--:(local)
          |  +-- algorithm      ct:key-algorithm-ref
          |  +-- public-key     binary
          |  +-- private-key    union
          +--:(keystore) {keystore-implemented}?
             +-- reference      ks:asymmetric-key-ref

3.2.  Example Usage

   The following example illustrates what a fully configured keystore
   might look like in <operational>, as described by Section 5.3 in
   [RFC8342].  This datastore view illustrates data set by the
   manufacturing process alongside conventional configuration.  This
   keystore instance has three keys, two having one associated
   certificate and one having two associated certificates.

   <keystore xmlns="urn:ietf:params:xml:ns:yang:ietf-keystore"
             xmlns:or="urn:ietf:params:xml:ns:yang:ietf-origin"
             xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types">
     <asymmetric-keys>

       <asymmetric-key or:origin="or:intended">
         <name>ex-rsa-key</name>
         <algorithm>ct:rsa1024</algorithm>
         <private-key>base64encodedvalue==</private-key>
         <public-key>base64encodedvalue==</public-key>
         <certificates>
           <certificate>
             <name>ex-rsa-cert</name>
             <cert>base64encodedvalue==</cert>
           </certificate>
         </certificates>
       </asymmetric-key>

       <asymmetric-key or:origin="or:intended">
         <name>tls-ec-key</name>
         <algorithm>ct:secp256r1</algorithm>
         <private-key>base64encodedvalue==</private-key>
         <public-key>base64encodedvalue==</public-key>
         <certificates>
           <certificate>



Watsen                  Expires December 6, 2018                [Page 6]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


             <name>tls-ec-cert</name>
             <cert>base64encodedvalue==</cert>
           </certificate>
         </certificates>
       </asymmetric-key>

       <asymmetric-key or:origin="or:system">
         <name>tpm-protected-key</name>
         <algorithm>ct:rsa2048</algorithm>
         <private-key>hardware-protected</private-key>
         <public-key>base64encodedvalue==</public-key>
         <certificates>
           <certificate>
             <name>builtin-idevid-cert</name>
             <cert>base64encodedvalue==</cert>
           </certificate>
           <certificate or:origin="or:intended">
             <name>my-ldevid-cert</name>
             <cert>base64encodedvalue==</cert>
           </certificate>
         </certificates>
       </asymmetric-key>

     </asymmetric-keys>
   </keystore>

   The following example illustrates the "generate-private-key" action
   in use with the NETCONF protocol.























Watsen                  Expires December 6, 2018                [Page 7]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


   REQUEST
   -------
   <rpc message-id="101"
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <action xmlns="urn:ietf:params:xml:ns:yang:1">
       <keystore xmlns="urn:ietf:params:xml:ns:yang:ietf-keystore">
         <asymmetric-keys>
           <generate-asymmetric-key>
             <name>ex-key-sect571r1</name>
             <algorithm
              xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types">
                 ct:secp521r1
             </algorithm>
           </generate-asymmetric-key>
         </asymmetric-keys>
       </keystore>
     </action>
   </rpc>

   RESPONSE
   --------
   <rpc-reply message-id="101"
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <ok/>
   </rpc-reply>

   The following example illustrates the "generate-certificate-signing-
   request" action in use with the NETCONF protocol.























Watsen                  Expires December 6, 2018                [Page 8]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


   REQUEST
   -------
   <rpc message-id="101"
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <action xmlns="urn:ietf:params:xml:ns:yang:1">
       <keystore xmlns="urn:ietf:params:xml:ns:yang:ietf-keystore">
         <asymmetric-keys>
           <asymmetric-key>
             <name>ex-key-sect571r1</name>
             <generate-certificate-signing-request>
               <subject>base64encodedvalue==</subject>
               <attributes>base64encodedvalue==</attributes>
             </generate-certificate-signing-request>
           </asymmetric-key>
         </asymmetric-keys>
       </keystore>
     </action>
   </rpc>

   RESPONSE
   --------
   <rpc-reply message-id="101"
      xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
      <certificate-signing-request
        xmlns="urn:ietf:params:xml:ns:yang:ietf-keystore">
        base64encodedvalue==
      </certificate-signing-request>
   </rpc-reply>


   The following example illustrates the "certificate-expiration"
   notification in use with the NETCONF protocol.



















Watsen                  Expires December 6, 2018                [Page 9]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


   <notification
     xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
     <eventTime>2018-05-25T00:01:00Z</eventTime>
     <keystore xmlns="urn:ietf:params:xml:ns:yang:ietf-keystore">
       <asymmetric-keys>
         <asymmetric-key>
           <name>tpm-protected-key</name>
           <certificates>
             <certificate>
               <name>my-ldevid-cert</name>
               <certificate-expiration>
                 <expiration-date>
                   2018-08-05T14:18:53-05:00
                 </expiration-date>
               </certificate-expiration>
             </certificate>
           </certificates>
         </asymmetric-key>
       </asymmetric-keys>
     </keystore>
   </notification>


   The following example module has been constructed to illustrate the
   "local-or-keystore-asymmetric-key-grouping" grouping defined in the
   "ietf-keystore" module.

























Watsen                  Expires December 6, 2018               [Page 10]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


   module ex-keystore-usage {
     yang-version 1.1;

     namespace "http://example.com/ns/example-keystore-usage";
     prefix "eku";

     import ietf-keystore {
       prefix ks;
       reference
         "RFC VVVV: YANG Data Model for a 'Keystore' Mechanism";
     }

     organization
      "Example Corporation";

     contact
      "Author: YANG Designer <mailto:yang.designer@example.com>";

     description
      "This module illustrates the grouping defined in the keystore
       draft called 'local-or-keystore-asymmetric-key-grouping'.";

     revision "YYYY-MM-DD" {
       description
        "Initial version";
       reference
        "RFC XXXX: YANG Data Model for a 'Keystore' Mechanism";
     }

     container keys {
       description
         "A container of keys.";
       list key {
         key name;
         leaf name {
           type string;
           description
             "An arbitrary name for this key.";
         }
         uses ks:local-or-keystore-asymmetric-key-grouping;
         description
           "A key which may be configured locally or be a reference to
            a key in the keystore.";
       }
     }
   }





Watsen                  Expires December 6, 2018               [Page 11]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


   The following example illustrates what two configured keys, one local
   and the other remote, might look like.  This example consistent with
   other examples above (i.e., the referenced key is in an example
   above).

   <keys xmlns="http://example.com/ns/example-keystore-usage">
     <key>
       <name>locally-defined key</name>
       <algorithm
         xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types">
         ct:secp521r1
       </algorithm>
       <private-key>base64encodedvalue==</private-key>
       <public-key>base64encodedvalue==</public-key>
     </key>
     <key>
       <name>keystore-defined key</name>
       <reference>ex-rsa-key</reference>
     </key>
   </keys>

3.3.  YANG Module

   This YANG module imports modules defined in [RFC6536], [RFC6991], and
   [I-D.ietf-netconf-crypto-types].  This module uses data types defined
   in [RFC2986], [RFC3447], [RFC5652], [RFC5915], [RFC6125], and
   [ITU.X690.2015].

   <CODE BEGINS> file "ietf-keystore@2018-06-04.yang"
   module ietf-keystore {
     yang-version 1.1;

     namespace "urn:ietf:params:xml:ns:yang:ietf-keystore";
     prefix "ks";

     import ietf-yang-types {
       prefix yang;
       reference
         "RFC 6991: Common YANG Data Types";
     }

     import ietf-crypto-types {
       prefix ct;
       reference
         "RFC CCCC: Common YANG Data Types for Cryptography";
     }

     organization



Watsen                  Expires December 6, 2018               [Page 12]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


      "IETF NETCONF (Network Configuration) Working Group";

     contact
      "WG Web:   <http://datatracker.ietf.org/wg/netconf/>
       WG List:  <mailto:netconf@ietf.org>

       Author:   Kent Watsen
                 <mailto:kwatsen@juniper.net>";


     description
      "This module defines a keystore to centralize management
       of security credentials.

       Copyright (c) 2018 IETF Trust and the persons identified
       as authors of the code. All rights reserved.

       Redistribution and use in source and binary forms, with
       or without modification, is permitted pursuant to, and
       subject to the license terms contained in, the Simplified
       BSD License set forth in Section 4.c of the IETF Trust's
       Legal Provisions Relating to IETF Documents
       (http://trustee.ietf.org/license-info).

       This version of this YANG module is part of RFC VVVV; see
       the RFC itself for full legal notices.";

     revision "2018-06-04" {
       description
        "Initial version";
       reference
        "RFC VVVV: YANG Data Model for a 'Keystore' Mechanism";
     }

     // Features

     feature keystore-implemented {
       description
        "The 'keystore-implemented' feature indicates that the server
         implements the keystore, and therefore groupings defined in
         this module that reference the keystore are usable.";
     }


     // Typedefs

     typedef asymmetric-key-ref {
       type leafref {



Watsen                  Expires December 6, 2018               [Page 13]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


         path "/ks:keystore/ks:asymmetric-keys/ks:asymmetric-key"
              + "/ks:name";
         require-instance false;
       }
       description
         "This typedef enables modules to easily define a reference
          to an asymmetric key stored in the keystore. The require
          instance attribute is false to enable the referencing of
          asymmetric keys that exist only in <operational>.";
       reference
         "RFC 8342: Network Management Datastore Architecture (NMDA)";
     }

     typedef asymmetric-key-certificate-ref {
       type leafref {
         path "/ks:keystore/ks:asymmetric-keys/ks:asymmetric-key"
              + "/ks:certificates/ks:certificate/ks:name";
         require-instance false;
       }
       description
         "This typedef enables modules to easily define a reference
          to a specific certificate associated with an asymmetric key
          stored in the keystore.  The require instance attribute is
          false to enable the referencing of certificates that exist
          only in <operational>.";
       reference
         "RFC 8342: Network Management Datastore Architecture (NMDA)";
     }


     // Groupings
     //
     // These groupings are factored out more than needed for
     // reusability purposes.

     grouping public-key-grouping {
       description
         "A public key.";
       leaf algorithm {
         type ct:key-algorithm-ref;
         mandatory true;
         description
           "Identifies the key's algorithm.  More specifically,
            this leaf specifies how the 'public-key' binary leaf
            is encoded.";
         reference
           "RFC CCCC: Common YANG Data Types for Cryptography";
       }



Watsen                  Expires December 6, 2018               [Page 14]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


       leaf public-key {
         type binary;
         mandatory true;
         description
           "A binary that contains the value of the public key.  The
            interpretation of the content is defined by the key
            algorithm.  For example, a DSA key is an integer, an RSA
            key is represented as RSAPublicKey as defined in
            RFC 3447, and an Elliptic Curve Cryptography (ECC) key
            is represented using the 'publicKey' described in
            RFC 5915.";
         reference
           "RFC 3447: Public-Key Cryptography Standards (PKCS) #1:
                      RSA Cryptography Specifications Version 2.1.
            RFC 5915: Elliptic Curve Private Key Structure.";
       }
     }

     grouping asymmetric-key-pair-grouping {
       description
         "A private/public key pair.";
       uses public-key-grouping;
       leaf private-key {
         type union {
           type binary;
           type enumeration {
             enum "hardware-protected" {
               description
                "The private key is inaccessible due to being
                 protected by a cryptographic hardware module
                 (e.g., a TPM).";
             }
           }
         }
         mandatory true;
         description
           "A binary that contains the value of the private key.  The
            interpretation of the content is defined by the key
            algorithm.  For example, a DSA key is an integer, an RSA
            key is represented as RSAPrivateKey as defined in
            RFC 3447, and an Elliptic Curve Cryptography (ECC) key
            is represented as ECPrivateKey as defined in RFC 5915.";
         reference
           "RFC 3447: Public-Key Cryptography Standards (PKCS) #1:
                      RSA Cryptography Specifications Version 2.1.
            RFC 5915: Elliptic Curve Private Key Structure.";
       }
     }



Watsen                  Expires December 6, 2018               [Page 15]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


     grouping trust-anchor-cert-grouping {
       description
        "A certificate, and a notification for when it might expire.";
       leaf cert {
         type ct:trust-anchor-cert-cms;
         mandatory true;
         description
          "The binary certificate data for this certificate.";
         reference
          "RFC YYYY: Common YANG Data Types for Cryptography";
       }
     }

     grouping end-entity-cert-grouping {
       description
        "A certificate, and a notification for when it might expire.";
       leaf cert {
         type ct:end-entity-cert-cms;
         mandatory true;
         description
          "The binary certificate data for this certificate.";
         reference
           "RFC YYYY: Common YANG Data Types for Cryptography";
       }
       notification certificate-expiration {
         description
           "A notification indicating that the configured certificate
            is either about to expire or has already expired.  When to
            send notifications is an implementation specific decision,
            but it is RECOMMENDED that a notification be sent once a
            month for 3 months, then once a week for four weeks, and
            then once a day thereafter until the issue is resolved.";
         leaf expiration-date {
           type yang:date-and-time;
           //mandatory true;
           description
             "Identifies the expiration date on the certificate.";
         }
       }
     }

     grouping asymmetric-key-pair-with-certs-grouping {
       description
         "A private/public key pair and associated certificates.";
       uses asymmetric-key-pair-grouping;
       container certificates {
         description
           "Certificates associated with this asymmetric key.



Watsen                  Expires December 6, 2018               [Page 16]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


            More than one certificate supports, for instance,
            a TPM-protected asymmetric key that has both IDevID
            and LDevID certificates associated.";
         list certificate {
           key name;
           description
             "A certificate for this asymmetric key.";
           leaf name {
             type string;
             description
               "An arbitrary name for the certificate.";
           }
           uses end-entity-cert-grouping;
         } // end certifcate
       } // end certificates
       action generate-certificate-signing-request {
         description
           "Generates a certificate signing request structure for
            the associated asymmetric key using the passed subject
            and attribute values.  The specified assertions need
            to be appropriate for the certificate's use.  For
            example, an entity certificate for a TLS server
            SHOULD have values that enable clients to satisfy
            RFC 6125 processing.";
         input {
           leaf subject {
             type binary;
             mandatory true;
             description
              "The 'subject' field per the CertificationRequestInfo
                structure as specified by RFC 2986, Section 4.1
                encoded using the ASN.1 distinguished encoding
                rules (DER), as specified in ITU-T X.690.";
             reference
               "RFC 2986:
                  PKCS #10: Certification Request Syntaxi
                            Specification Version 1.7.
                ITU-T X.690:
                  Information technology - ASN.1 encoding rules:
                  Specification of Basic Encoding Rules (BER),
                  Canonical Encoding Rules (CER) and Distinguished
                  Encoding Rules (DER).";
           }
           leaf attributes {
             type binary;
             description
               "The 'attributes' field from the structure
                CertificationRequestInfo as specified by RFC 2986,



Watsen                  Expires December 6, 2018               [Page 17]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


                Section 4.1 encoded using the ASN.1 distinguished
                encoding rules (DER), as specified in ITU-T X.690.";
             reference
               "RFC 2986:
                  PKCS #10: Certification Request Syntax
                            Specification Version 1.7.
                ITU-T X.690:
                  Information technology - ASN.1 encoding rules:
                  Specification of Basic Encoding Rules (BER),
                  Canonical Encoding Rules (CER) and Distinguished
                  Encoding Rules (DER).";
           }
         }
         output {
           leaf certificate-signing-request {
             type binary;
             mandatory true;
             description
               "A CertificationRequest structure as specified by
                RFC 2986, Section 4.2 encoded using the ASN.1
                distinguished encoding rules (DER), as specified
                in ITU-T X.690.";
             reference
               "RFC 2986:
                  PKCS #10: Certification Request Syntax
                            Specification Version 1.7.
                ITU-T X.690:
                  Information technology - ASN.1 encoding rules:
                  Specification of Basic Encoding Rules (BER),
                  Canonical Encoding Rules (CER) and Distinguished
                  Encoding Rules (DER).";

           }
         } // end output
       } // end generate-certificate-signing-request
     }

     grouping local-or-keystore-asymmetric-key-grouping {
       description
         "A grouping that expands to allow the key to be either stored
          locally within the using data model, or be a reference to an
          asymmetric key stored in the keystore.";
       choice local-or-keystore {
         mandatory true;
         case local {
           uses asymmetric-key-pair-grouping;
         }
         case keystore {



Watsen                  Expires December 6, 2018               [Page 18]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


           if-feature "keystore-implemented";
           leaf reference {
             type ks:asymmetric-key-ref;
             mandatory true;
             description
               "A reference to a value that exists in the keystore.";
           }
         }
         description
           "A choice between an inlined definition and a definition
            that exists in the keystore.";
       }
     }

     grouping local-or-keystore-asymmetric-key-with-certs-grouping {
       description
         "A grouping that expands to allow the key to be either stored
          locally within the using data model, or be a reference to an
          asymmetric key stored in the keystore.";
       choice local-or-keystore {
         mandatory true;
         case local {
           uses asymmetric-key-pair-with-certs-grouping;
         }
         case keystore {
           if-feature "keystore-implemented";
           leaf reference {
             type ks:asymmetric-key-ref;
             mandatory true;
             description
               "A reference to a value that exists in the keystore.";
           }
         }
         description
           "A choice between an inlined definition and a definition
            that exists in the keystore.";
       }
     }

     grouping local-or-keystore-end-entity-certificate-grouping {
       description
         "A grouping that expands to allow the end-entity certificate
          (and the associated private key) to be either stored locally
          within the using data model, or be a reference to a specific
          certificate in the keystore.";
       choice local-or-keystore {
         mandatory true;
         case local {



Watsen                  Expires December 6, 2018               [Page 19]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


           uses ks:asymmetric-key-pair-grouping;
           uses ks:end-entity-cert-grouping;
         }
         case keystore {
           if-feature "keystore-implemented";
           leaf reference {
             type ks:asymmetric-key-certificate-ref;
             mandatory true;
             description
               "A reference to a value that exists in the keystore.";
           }
         }
         description
           "A choice between an inlined definition and a definition
            that exists in the keystore.";
       }
     }


     // protocol accessible nodes

     container keystore {
       description
         "The keystore contains a list of keys.";

       container asymmetric-keys {
         description
           "A list of asymmetric keys.";
         list asymmetric-key {
           key name;
           description
             "An asymmetric key.";
           leaf name {
             type string;
             description
               "An arbitrary name for the asymmetric key.";
           }
           uses asymmetric-key-pair-with-certs-grouping;
         } // end asymmetric-key

         action generate-asymmetric-key {
           description
             "Requests the device to generate an asymmetric key using
              the specified asymmetric key algorithm.  This action is
              primarily to support cryptographic processors that must
              generate the asymmetric key themselves.  The resulting
              asymmetric key is considered operational state and hence
              present only in <operational>.";



Watsen                  Expires December 6, 2018               [Page 20]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


           input {
             leaf name {
               type string;
               mandatory true;
               description
                 "The name the asymmetric key should have when listed
                  in /keystore/asymmetric-keys/asymmetric-key, in
                  <operational>.";
             }
             leaf algorithm {
               type ct:key-algorithm-ref;
               mandatory true;
               description
                 "The algorithm to be used when generating the
                  asymmetric key.";
               reference
                 "RFC CCCC: Common YANG Data Types for Cryptography";
             }
           }
         } // end generate-asymmetric-key
       } // end asymmetric-keys
     } // end keystore


   }
   <CODE ENDS>

4.  Security Considerations

   The YANG module defined in this document is designed to be accessed
   via YANG based management protocols, such as NETCONF [RFC6241] and
   RESTCONF [RFC8040].  Both of these protocols have mandatory-to-
   implement secure transport layers (e.g., SSH, TLS) with mutual
   authentication.

   The NETCONF access control model (NACM) [RFC6536] provides the means
   to restrict access for particular users to a pre-configured subset of
   all available protocol operations and content.

   There are a number of data nodes defined in this YANG module that are
   writable/creatable/deletable (i.e., config true, which is the
   default).  These data nodes may be considered sensitive or vulnerable
   in some network environments.  Write operations (e.g., edit-config)
   to these data nodes without proper protection can have a negative
   effect on network operations.  These are the subtrees and data nodes
   and their sensitivity/vulnerability:





Watsen                  Expires December 6, 2018               [Page 21]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


      /: The entire data tree defined by this module is sensitive to
         write operations.  For instance, the addition or removal of
         keys, certificates, trusted anchors, etc., can dramatically
         alter the implemented security policy.  However, no NACM
         annotations are applied as the data SHOULD be editable by users
         other than a designated 'recovery session'.

      /keystore/asymmetric-keys/asymmetric-key/private-key:  When
         writing this node, implementations MUST ensure that the
         strength of the key being configured is not greater than the
         strength of the underlying secure transport connection over
         which it is communicated.  Implementations SHOULD fail the
         write-request if ever the strength of the private key is
         greater then the strength of the underlying transport, and
         alert the client that the strength of the key may have been
         compromised.  Additionally, when deleting this node,
         implementations SHOULD automatically (without explicit request)
         zeroize these keys in the most secure manner available, so as
         to prevent the remnants of their persisted storage locations
         from being analyzed in any meaningful way.

   Some of the readable data nodes in this YANG module may be considered
   sensitive or vulnerable in some network environments.  It is thus
   important to control read access (e.g., via get, get-config, or
   notification) to these data nodes.  These are the subtrees and data
   nodes and their sensitivity/vulnerability:

      /keystore/asymmetric-keys/asymmetric-key/private-key:  This node
         is additionally sensitive to read operations such that, in
         normal use cases, it should never be returned to a client.  The
         best reason for returning this node is to support backup/
         restore type workflows.  However, no NACM annotations are
         applied as the data SHOULD be editable by users other than a
         designated 'recovery session'.

   Some of the operations in this YANG module may be considered
   sensitive or vulnerable in some network environments.  It is thus
   important to control access to these operations.  These are the
   operations and their sensitivity/vulnerability:

      generate-certificate-signing-request:  For this action, it is
         RECOMMENDED that implementations assert channel binding
         [RFC5056], so as to ensure that the application layer that sent
         the request is the same as the device authenticated when the
         secure transport layer was established.

   This document uses PKCS #10 [RFC2986] for the "generate-certificate-
   signing-request" action.  The use of Certificate Request Message



Watsen                  Expires December 6, 2018               [Page 22]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


   Format (CRMF) [RFC4211] was considered, but is was unclear if there
   was market demand for it.  If it is desired to support CRMF in the
   future, placing a "choice" statement in both the input and output
   statements, along with an "if-feature" statement on the CRMF option,
   would enable a backwards compatible solution.

5.  IANA Considerations

5.1.  The IETF XML Registry

   This document registers one URI in the IETF XML registry [RFC3688].
   Following the format in [RFC3688], the following registration is
   requested:

      URI: urn:ietf:params:xml:ns:yang:ietf-keystore
      Registrant Contact: The NETCONF WG of the IETF.
      XML: N/A, the requested URI is an XML namespace.

5.2.  The YANG Module Names Registry

   This document registers one YANG module in the YANG Module Names
   registry [RFC6020].  Following the format in [RFC6020], the the
   following registration is requested:

      name:         ietf-keystore
      namespace:    urn:ietf:params:xml:ns:yang:ietf-keystore
      prefix:       ks
      reference:    RFC VVVV


6.  References

6.1.  Normative References

   [I-D.ietf-netconf-crypto-types]
              Watsen, K., "Common YANG Data Types for Cryptography",
              draft-ietf-netconf-crypto-types-00 (work in progress),
              June 2018.

   [ITU.X690.2015]
              International Telecommunication Union, "Information
              Technology - ASN.1 encoding rules: Specification of Basic
              Encoding Rules (BER), Canonical Encoding Rules (CER) and
              Distinguished Encoding Rules (DER)", ITU-T Recommendation
              X.690, ISO/IEC 8825-1, August 2015,
              <https://www.itu.int/rec/T-REC-X.690/>.





Watsen                  Expires December 6, 2018               [Page 23]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC2986]  Nystrom, M. and B. Kaliski, "PKCS #10: Certification
              Request Syntax Specification Version 1.7", RFC 2986,
              DOI 10.17487/RFC2986, November 2000,
              <https://www.rfc-editor.org/info/rfc2986>.

   [RFC3447]  Jonsson, J. and B. Kaliski, "Public-Key Cryptography
              Standards (PKCS) #1: RSA Cryptography Specifications
              Version 2.1", RFC 3447, DOI 10.17487/RFC3447, February
              2003, <https://www.rfc-editor.org/info/rfc3447>.

   [RFC5652]  Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
              RFC 5652, DOI 10.17487/RFC5652, September 2009,
              <https://www.rfc-editor.org/info/rfc5652>.

   [RFC5915]  Turner, S. and D. Brown, "Elliptic Curve Private Key
              Structure", RFC 5915, DOI 10.17487/RFC5915, June 2010,
              <https://www.rfc-editor.org/info/rfc5915>.

   [RFC6020]  Bjorklund, M., Ed., "YANG - A Data Modeling Language for
              the Network Configuration Protocol (NETCONF)", RFC 6020,
              DOI 10.17487/RFC6020, October 2010,
              <https://www.rfc-editor.org/info/rfc6020>.

   [RFC6536]  Bierman, A. and M. Bjorklund, "Network Configuration
              Protocol (NETCONF) Access Control Model", RFC 6536,
              DOI 10.17487/RFC6536, March 2012,
              <https://www.rfc-editor.org/info/rfc6536>.

   [RFC6991]  Schoenwaelder, J., Ed., "Common YANG Data Types",
              RFC 6991, DOI 10.17487/RFC6991, July 2013,
              <https://www.rfc-editor.org/info/rfc6991>.

   [RFC7950]  Bjorklund, M., Ed., "The YANG 1.1 Data Modeling Language",
              RFC 7950, DOI 10.17487/RFC7950, August 2016,
              <https://www.rfc-editor.org/info/rfc7950>.

6.2.  Informative References

   [RFC3688]  Mealling, M., "The IETF XML Registry", BCP 81, RFC 3688,
              DOI 10.17487/RFC3688, January 2004,
              <https://www.rfc-editor.org/info/rfc3688>.





Watsen                  Expires December 6, 2018               [Page 24]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


   [RFC4211]  Schaad, J., "Internet X.509 Public Key Infrastructure
              Certificate Request Message Format (CRMF)", RFC 4211,
              DOI 10.17487/RFC4211, September 2005,
              <https://www.rfc-editor.org/info/rfc4211>.

   [RFC5056]  Williams, N., "On the Use of Channel Bindings to Secure
              Channels", RFC 5056, DOI 10.17487/RFC5056, November 2007,
              <https://www.rfc-editor.org/info/rfc5056>.

   [RFC6125]  Saint-Andre, P. and J. Hodges, "Representation and
              Verification of Domain-Based Application Service Identity
              within Internet Public Key Infrastructure Using X.509
              (PKIX) Certificates in the Context of Transport Layer
              Security (TLS)", RFC 6125, DOI 10.17487/RFC6125, March
              2011, <https://www.rfc-editor.org/info/rfc6125>.

   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,
              and A. Bierman, Ed., "Network Configuration Protocol
              (NETCONF)", RFC 6241, DOI 10.17487/RFC6241, June 2011,
              <https://www.rfc-editor.org/info/rfc6241>.

   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, "RESTCONF
              Protocol", RFC 8040, DOI 10.17487/RFC8040, January 2017,
              <https://www.rfc-editor.org/info/rfc8040>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8340]  Bjorklund, M. and L. Berger, Ed., "YANG Tree Diagrams",
              BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,
              <https://www.rfc-editor.org/info/rfc8340>.

   [RFC8342]  Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,
              and R. Wilton, "Network Management Datastore Architecture
              (NMDA)", RFC 8342, DOI 10.17487/RFC8342, March 2018,
              <https://www.rfc-editor.org/info/rfc8342>.

   [Std-802.1AR-2009]
              IEEE SA-Standards Board, "IEEE Standard for Local and
              metropolitan area networks - Secure Device Identity",
              December 2009, <http://standards.ieee.org/findstds/
              standard/802.1AR-2009.html>.








Watsen                  Expires December 6, 2018               [Page 25]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


Appendix A.  Change Log

A.1.  00 to 01

   o  Replaced the 'certificate-chain' structures with PKCS#7
      structures.  (Issue #1)

   o  Added 'private-key' as a configurable data node, and removed the
      'generate-private-key' and 'load-private-key' actions.  (Issue #2)

   o  Moved 'user-auth-credentials' to the ietf-ssh-client module.
      (Issues #4 and #5)

A.2.  01 to 02

   o  Added back 'generate-private-key' action.

   o  Removed 'RESTRICTED' enum from the 'private-key' leaf type.

   o  Fixed up a few description statements.

A.3.  02 to 03

   o  Changed draft's title.

   o  Added missing references.

   o  Collapsed sections and levels.

   o  Added RFC 8174 to Requirements Language Section.

   o  Renamed 'trusted-certificates' to 'pinned-certificates'.

   o  Changed 'public-key' from config false to config true.

   o  Switched 'host-key' from OneAsymmetricKey to definition from RFC
      4253.

A.4.  03 to 04

   o  Added typedefs around leafrefs to common keystore paths

   o  Now tree diagrams reference ietf-netmod-yang-tree-diagrams

   o  Removed Design Considerations section

   o  Moved key and certificate definitions from data tree to groupings




Watsen                  Expires December 6, 2018               [Page 26]

Internet-Draft      A Centralized Keystore Mechanism           June 2018


A.5.  04 to 05

   o  FIXME

   o  FIXME

   o  FIXME

Acknowledgements

   The authors would like to thank for following for lively discussions
   on list and in the halls (ordered by last name): Andy Bierman, Martin
   Bjorklund, Benoit Claise, Mehmet Ersue, Balazs Kovacs, David
   Lamparter, Alan Luchuk, Ladislav Lhotka, Mahesh Jethanandani, Radek
   Krejci, Reshad Rahman, Tom Petch, Juergen Schoenwaelder, Phil Shafer,
   Sean Turner, Eric Voit, Bert Wijnen, and Liang Xia.

Author's Address

   Kent Watsen
   Juniper Networks

   EMail: kwatsen@juniper.net




























Watsen                  Expires December 6, 2018               [Page 27]
