sd = socket(PF_INET, SOCK_SEQPACKET, IPPROTO_SCTP);

sd = socket(PF_INET6, SOCK_SEQPACKET, IPPROTO_SCTP);

ret = bind(int sd, struct sockaddr *addr, socklen_t addrlen);

ret = close(int sd);

       sd      - the socket descriptor of the associations to be closed.

ret = connect(int sd, const struct sockaddr *nam, socklen_t len);

new_sd = accept(int sd, struct sockaddr *addr, socklen_t *addrlen);

cmsgptr = CMSG_NXTHDR(&msg, cmsgptr)) {
ptr = CMSG_DATA(cmsgptr);
total = CMSG_SPACE(sizeof (struct sctp_sndrcvinfo)) +
           CMSG_SPACE(sizeof (struct in6_pktinfo));

buf = malloc(total);

ret = getsockopt(int sd, int level, int optname, void *optval,
                    size_t *optlen);
ret = setsockopt(int sd, int level, int optname, const void *optval,
                    size_t optlen);

     sd      - the socket descript.
     level   - set to IPPROTO_SCTP for all SCTP options.
     optname - the option name.
     optval  - the buffer to store the value of the option.
     optlen  - the size of the buffer (or the length of  the option
               returned).


new_sd = sctp_peeloff(int sd, sctp_assoc_t *assoc_id);

      the new socket descriptor representing the branched-off
      association.

      the original UDP-style socket descriptor returned from the
      socket() system call (see Section 3.1.1).

      the specified identifier of the association that is to be branched
      off to a separate file descriptor (Note, in a traditional
      TCP-style accept() call, this would be an out parameter, but for
      the UDP-style call, this is an in parameter).


snp = buf;

sac = &snp->sn_assoc_change;
ssf = &snp->sn_send_failed;
spc = &snp->sn_paddr_change; /* mt changed */
sin = (struct sockaddr_in *)&spc->spc_aaddr;
ap = inet_ntop(AF_INET, &sin->sin_addr,
                                    addrbuf, INET6_ADDRSTRLEN);
sin6 = (struct sockaddr_in6 *)&spc->spc_aaddr;
ap = inet_ntop(AF_INET6, &sin6->sin6_addr,
                                    addrbuf, INET6_ADDRSTRLEN);
sre = &snp->sn_remote_error;
nnr = recvmsg(fd, msg, 0);
buf = realloc(buf, *buflen * 2);
buflen = BUFLEN;
cmsg = (struct cmsghdr *)cbuf;
sri = (struct sctp_sndrcvinfo *)(cmsg + 1);

