generic-message  =  start-line
                            *message-header
                            CRLF
                            [ message-body ]


v=0
o=carol 28908764872 28908764872 IN IP4 10.3.6.6
s=-
t=0 0
c=IN IP4 10.3.6.6
m=audio 0 RTP/AVP 0 1 3 99
a=rtpmap:0 PCMU/8000
a=rtpmap:1 1016/8000
a=rtpmap:3 GSM/8000
a=rtpmap:99 SX7300/8000
m=video 0 RTP/AVP 31 34
a=rtpmap:31 H261/90000
a=rtpmap:34 H263/90000



URI  =  SIP-URL


digest-uri-value  =  Request-URI ; as defined in
nonce="84a4cc6f3082121f32b42a2187831a9e",
response="7587245234b3434cc3412213e5f113a5432"



domain="sip:ss1.carrier.com",
nonce="f84f1cec41e6cbe5aea9c8e88d359",
opaque="", stale=FALSE, algorithm=MD5
nonce="c60f3082ee1212b402a21831ae",
response="245f23415f11432b3434341c022"



domain="sip:boxesbybob.com",
nonce="f84f1cec41e6cbe5aea9c8e88d359",
opaque="", stale=FALSE, algorithm=MD5



name  =  definition


OCTET     =  %x00-ff ; any 8-bit sequence of data
CHAR      =  %x00-7f ; any US-ASCII character (octets 0 - 127)
upalpha   =  "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" |
                     "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" |
                     "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
lowalpha  =  "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" |
                     "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" |
                     "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
alpha     =  lowalpha | upalpha
DIGIT     =  "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |
                     "8" | "9"
alphanum  =  alpha | DIGIT
CTL       =  %x00-1f | %x7f ; (octets 0 -- 31) and DEL (127)
CR        =  %d13 ; US-ASCII CR, carriage return character
LF        =  %d10 ; US-ASCII LF, line feed character
SP        =  %d32 ; US-ASCII SP, space character
HT        =  %d09 ; US-ASCII HT, horizontal tab character
CRLF      =  CR LF ; typically the end of a line


unreserved  =  alphanum | mark
mark        =  "-" | "_" | "." | "!" | "~" | "*" | "'"
                   |   "(" | ")"
escaped     =  "%" hex hex


LWS  =  *( SP | HT ) [CRLF] 1*( SP | HT ) ; linear whitespace


HCOLON  =  *( SP | HT ) ":" LWS


TEXT-UTF8       =  *(TEXT-UTF8char | LWS)
TEXT-UTF8-TRIM  =  *TEXT-UTF8char *(*LWS TEXT-UTF8char)
TEXT-UTF8char   =  %x21-7e
                        |  UTF8-NONASCII
UTF8-NONASCII   =  %xc0-df 1UTF8-CONT
                        |  %xe0-ef 2UTF8-CONT
                        |  %xf0-f7 3UTF8-CONT
                        |  %xf8-fb 4UTF8-CONT
                        |  %xfc-fd 5UTF8-CONT
UTF8-CONT       =  %x80-bf


LHEX  =  digit | "a" | "b" | "c" | "d" | "e" | "f"


hex  =  LHEX | "A" | "B" | "C" | "D" | "E" | "F"


token                            =  1*(alphanum | "-" | "." | "!" | "%" | "*"
separators                       =  "(" | ")" | "<" | ">" | "@" |
                                            "," | ";" | ":" | "\" | <"> |
                                            "/" | "[" | "]" | "?" | "=" |
                                            "{" | "}" | SP | HT


MINUS    =  LWS "-" LWS ; minus
DOT      =  LWS "." LWS ; period
PERCENT  =  LWS "%" LWS ; percent
BANG     =  LWS "!" LWS ; exclamation
PLUS     =  LWS "+" LWS ; plus
STAR     =  LWS "*" LWS ; askerisk
TILDE    =  LWS " LWS ; tilde
EQUAL    =  LWS "=" LWS ; equal
LPAREN   =  LWS "(" LWS ; left parenthesis
RPAREN   =  LWS ")" LWS ; right parenthesis
LANGLE   =  LWS "<" LWS ; left angle bracket
RAQUOT   =  ">" LWS ; right angle quote
LAQUOT   =  LWS "<"; left angle quote
RANGLE   =  LWS ">" LWS ; right angle bracket
BAR      =  LWS "|" LWS ; vertical bar
ATSIGN   =  LWS "@" LWS ; atsign
COMMA    =  LWS "," LWS ; comma
SEMI     =  LWS ";" LWS ; semicolon
COLON    =  LWS ":" LWS ; colon
DQUOT    =  LWS <"> LWS ; double quotation mark
LDQUOT   =  LWS <">; open double quotation mark
RDQUOT   =  <"> LWS ; close double quotation mark
LBRACK   =  LWS "{" LWS ; left square bracket
RBRACK   =  LWS "}" LWS ; right square bracket


comment  =  LPAREN *(ctext | quoted-pair | comment) RPAREN
ctext    =  < any TEXT-UTF8  excluding "("  and ")">


quoted-string  =  ( LWS <"> *(qdtext | quoted-pair ) <"> )
qdtext         =  LWS | %x21 | %x23-5b | %x5d-7e
                          |                                         UTF8-NONASCII
quoted-pair  =  "\" (%x00 - %x09 | %x0b | %x0c | %x0e - %x7f)




SIP-URL          =  "sip:" [ userinfo "@" ] hostport
                            url-parameters [ headers ]
userinfo         =  [ user | telephone-subscriber [ ":" password ]]
user             =  *( unreserved | escaped | user-unreserved )
user-unreserved  =  "                                               " | "=" | "+" | "$" | "," | ";" | "?" | "/"
password         =  *( unreserved | escaped |
                            "                                               " | "=" | "+" | "$" | "," )
hostport         =  host [ ":" port ]
host             =  hostname | IPv4address | IPv6reference
hostname         =  *( domainlabel "." ) toplabel [ "." ]
domainlabel      =  alphanum
                            | alphanum *( alphanum | "-" ) alphanum
toplabel         =  alpha | alpha *( alphanum | "-" ) alphanum




IPv4address    =  1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT
IPv6reference  =  "[" IPv6address "]"
IPv6address    =  hexpart [ ":" IPv4address ]
hexpart        =  hexseq | hexseq "::" [ hexseq ] | "::" [ hexseq ]
hexseq         =  hex4 *( ":" hex4)
hex4           =  1*4HEX
port           =  1*DIGIT




url-parameters    =  *( ";" url-parameter)
url-parameter     =  transport-param | user-param | method-param
                             |ttl-param | maddr-param | other-param
transport-param   =  "transport="
                             ( "udp" | "tcp" | "sctp" | "tls"
                             | other-transport)
other-transport   =  token
user-param        =  "user=" ( "phone" | "ip" | other-user)
other-user        =  token
method-param      =  "method=" Method
ttl-param         =  "ttl=" ttl
maddr-param       =  "maddr=" host
other-param       =  pname [ "=" pvalue ]
pname             =  1*paramchar
pvalue            =  1*paramchar
paramchar         =  param-unreserved | unreserved | escaped
param-unreserved  =  "[" | "]" | "/" | ":" | "                   " | "+" | "$"




headers         =  "?" header *( "                             " header )
header          =  hname "=" hvalue
hname           =  1*( hnv-unreserved | unreserved | escaped )
hvalue          =  *( hnv-unreserved | unreserved | escaped )
hnv-unreserved  =  "[" | "]" | "/" | "?" | ":" | "+" | "$"




SIP-message   =  Request | Response
Request       =  Request-Line
                         *( message-header )
                         CRLF
                         [ message-body ]
Request-Line  =  Method SP Request-URI SP SIP-Version CRLF
Request-URI   =  SIP-URL | absoluteURI
SIP-Version   =  "SIP/2.0"




Method            =  "INVITE" | "ACK" | "OPTIONS" | "BYE"
                             | "CANCEL" | "REGISTER" | extension-method
extension-method  =  token
option-tag        =  token
Status-Line     =  SIP-version SP Status-Code SP Reason-Phrase CRLF
extension-code  =  3DIGIT




Success  =  "200"  ;  OK




Redirection  =  "300"  ;  Multiple Choices
                    |   "301"  ;  Moved Permanently
                    |   "302"  ;  Moved Temporarily
                    |   "305"  ;  Use Proxy
                    |   "380"  ;  Alternative Service




Client-Error  =  "400"  ;  Bad Request
                     |   "401"  ;  Unauthorized
                     |   "402"  ;  Payment Required
                     |   "403"  ;  Forbidden
                     |   "404"  ;  Not Found
                     |   "405"  ;  Method Not Allowed
                     |   "406"  ;  Not Acceptable
                     |   "407"  ;  Proxy Authentication Required
                     |   "408"  ;  Request Timeout
                     |   "409"  ;  Conflict
                     |   "410"  ;  Gone
                     |   "413"  ;  Request Entity Too Large
                     |   "414"  ;  Request-URI Too Large
                     |   "415"  ;  Unsupported Media Type
                     |   "420"  ;  Bad Extension
                     |   "480"  ;  Temporarily not available
                     |   "481"  ;  Call Leg/Transaction Does Not Exist
                     |   "482"  ;  Loop Detected
                     |   "483"  ;  Too Many Hops
                     |   "484"  ;  Address Incomplete
                     |   "485"  ;  Ambiguous
                     |   "486"  ;  Busy Here
                     |   "487"  ;  Request Terminated
                     |   "488"  ;  Not Acceptable Here




Server-Error  =  "500"  ;  Internal Server Error
                     |   "501"  ;  Not Implemented
                     |   "502"  ;  Bad Gateway
                     |   "503"  ;  Service Unavailable
                     |   "504"  ;  Server Time-out
                     |   "505"  ;  SIP Version not supported




Global-Failure  =  "600"  ;  Busy Everywhere
                       |   "603"  ;  Decline
                       |   "604"  ;  Does not exist anywhere
                       |   "606"  ;  Not Acceptable




Accept            =  "Accept" HCOLON
                             #( media-range [ accept-params ] )
media-range       =  ( "*/*"
                             | ( type LWS "/" "*" LWS )
                             | ( type SLASH subtype )
                             ) *( SEMI parameter )
accept-params     =  SEMI "q" EQUAL qvalue *( accept-extension )
accept-extension  =  SEMI token [ EQUAL ( token | quoted-string ) ]
Accept-Encoding  =  "Accept-Encoding" HCOLON
                            1#( codings [ SEMI "q" EQUAL qvalue ] LWS )
codings          =  ( content-coding | "*" )
content-coding   =  token
qvalue           =  ( "0" [ "." 0*3DIGIT ] )
                            | ( "1" [ "." 0*3("0") ] )




Accept-Language  =  "Accept-Language" HCOLON
                            1#( language-range [ SEMI "q" EQUAL qvalue ] )
language-range   =  ( ( 1*8ALPHA *( MINUS 1*8ALPHA ) ) | "*" )




Alert-Info     =  "Alert-Info" HCOLON #
                          ( LAQUOT URI RAQUOT *( COLON generic-param ))
generic-param  =  token [ EQUAL ( token | host |
                          quoted-string ) ]




Allow  =  "Allow" HCOLON 1#Method




Authorization     =  "Authorization" HCOLON credentials
credentials       =  LWS "Digest" digest-response
digest-response   =  1#( username | realm | nonce | digest-uri
                             | dresponse | [ algorithm ] | [cnonce]
                             | [opaque] | [message-qop]
                             | [nonce-count] | [auth-param] )
username          =  "username" EQUAL username-value
username-value    =  quoted-string
digest-uri        =  "uri" EQUAL digest-uri-value
digest-uri-value  =  request-uri ; As specified by HTTP/1.1
message-qop       =  "qop" EQUAL qop-value
cnonce            =  "cnonce" EQUAL cnonce-value
cnonce-value      =  nonce-value
nonce-count       =  "nc" EQUAL nc-value
dresponse         =  "response" EQUAL request-digest
request-digest    =  LDQUOT 32LHEX RDQUOT
AuthenticationInfo  =  "Authentication-info" HCOLON 1#( digest | nextnonce )
nextnonce           =  "nextnonce" EQUAL nonce-value
callid              =  token [ ATSIGN token ]




Call-ID  =  ( "Call-ID" | "i" ) HCOLON callid




Call-Info   =  "Call-Info" HCOLON # ( LAQUOT URI RAQUOT
                       *( SEMI info-param) )
info-param  =  "purpose" EQUAL ( "icon" | "info"
                       | "card" | token ) | generic-param


Contact       =  ( "Contact" | "m" ) HCOLON
                         (STAR | (1# (( name-addr | addr-spec )
                         *( SEMI contact-params ))))
name-addr     =  [ display-name ] LAQUOT addr-spec RAQUOT
addr-spec     =  SIP-URL | URI
display-name  =  LWS (*token | quoted-string)



contact-params    =   "q"                         EQUAL  qvalue
                     |   "action"                    EQUAL  "proxy" | "redirect"
                     |   "expires"                   EQUAL  delta-seconds |
                         LDQUOT SIP-date RDQUOT
                     |   contact-extension
contact-extension =   generic-param
qvalue             =  ( "0" [ "." 0*3DIGIT ] )
                         | ( "1" [ "." 0*3("0") ] )



delta-seconds  =  1*DIGIT




Content-Disposition   =  "Content-Disposition" HCOLON
                                 disposition-type *( SEMI disposition-param )
disposition-type      =  "render" | "session" | "icon" | "alert"
                                 | disp-extension-token
disposition-param     =  "handling" EQUAL
                                 ( "optional" | "required" |
                                 other-handling ) | generic-param
other-handling        =  token
disp-extension-token  =  token




Content-Encoding  =  ( "Content-Encoding" | "e" ) HCOLON
                             1#content-coding




Content-Language  =  "Content-Language" HCOLON 1#language-tag
language-tag      =  primary-tag *( MINUS subtag )
primary-tag       =  1*8ALPHA
subtag            =  1*8ALPHA




Content-Length  =  ( "Content-Length" | "l" ) HCOLON 1*DIGIT




Content-Type  =  ( "Content-Type" | "c" ) HCOLON media-type




CSeq  =  "CSeq" HCOLON 1*DIGIT Method




Date          =  "Date" HCOLON SIP-date
SIP-date      =  rfc1123-date
rfc1123-date  =  wkday COMMA SP date1 SP time SP "GMT"
date1         =  2DIGIT SP month SP 4DIGIT
                         ; day month year (e.g., 02 Jun 1982)
time          =  2DIGIT ":" 2DIGIT ":" 2DIGIT
                         ; 00:00:00 - 23:59:59
wkday         =  "Mon" | "Tue" | "Wed"
                         | "Thu" | "Fri" | "Sat" | "Sun"
month         =  "Jan" | "Feb" | "Mar" | "Apr"
                         | "May" | "Jun" | "Jul" | "Aug"
                         | "Sep" | "Oct" | "Nov" | "Dec"




Error-Info  =  "Error-Info" HCOLON #
                       ( LAQUOT URI RAQUOT
                       *( SEMI generic-param ))




Expires     =  "Expires" HCOLON ( SIP-date | delta-seconds )
From        =  ( "From" | "f" ) HCOLON
                       ( name-addr | addr-spec )
                       *( SEMI from-param )
from-param  =  tag-param | generic-param
tag-param   =  "tag" EQUAL token




In-Reply-To  =  "In-Reply-To" HCOLON 1# callid




Max-Forwards  =  "Max-Forwards" HCOLON 1*DIGIT




MIME-Version  =  "MIME-Version" HCOLON 1*DIGIT "." 1*DIGIT




Organization  =  "Organization" HCOLON TEXT-UTF8-TRIM




Priority        =  "Priority" HCOLON priority-value
priority-value  =  "emergency" | "urgent" | "normal"
                           |                                  "non-urgent" | other-priority
other-priority  =  token
Proxy-Authenticate  =  "Proxy-Authenticate" HCOLON 1#challenge
challenge           =  LWS "Digest" digest-challenge
digest-challenge    =  1#( realm | [ domain ] | nonce |
                               [ opaque ] | [ stale ] | [ algorithm ] |
                               [ qop-options ] | [auth-param] )
realm               =  "realm" EQUALS realm-value
realm-value         =  quoted-string
domain              =  "domain" EQUAL LDQUOT URI
                               ( 1*SP URI ) RDQUOT
URI                 =  absoluteURI | abs_path
nonce               =  "nonce" EQUAL nonce-value
nonce-value         =  quoted-string
opaque              =  "opaque" EQUAL quoted-string
stale               =  "stale" EQUAL ( "true" | "false" )
algorithm           =  "algorithm" EQUAL ( "MD5" | "MD5-sess" |
                               token )
qop-options         =  "qop" EQUAL LDQUOT 1#qop-value RDQUOT
qop-value           =  "auth" | "auth-int" | token




Proxy-Authorization  =  "Proxy-Authorization" HCOLON credentials




Proxy-Require  =  "Proxy-Require" HCOLON 1#option-tag




Record-Route  =  "Record-Route" HCOLON 1#
                         ( name-addr *( SEMI rr-param ))
rr-param      =  generic-param
Require       =  "Require" HCOLON 1#option-tag




Retry-After  =  "Retry-After" HCOLON
                        ( SIP-date | delta-seconds )
                        [ comment ] *( SEMI retry-param )
retry-param  =  "duration" EQUAL delta-seconds |
                        generic-param
Route  =  "Route" HCOLON 1# ( name-addr
                  *( SEMI rr-param ))




Server           =  "Server" HCOLON 1*( product | comment )
product          =  token [SLASH product-version]
product-version  =  token




Subject  =  ( "Subject" | "s" ) HCOLON TEXT-UTF8-TRIM




Supported  =  ( "Supported" | "k" ) HCOLON 0#option-tag




Timestamp  =  "Timestamp" HCOLON *(DIGIT)
                      [ "." *(DIGIT) ] [ delay ]
delay      =  *(DIGIT) [ "." *(DIGIT) ]




To        =  ( "To" | "t" ) HCOLON ( name-addr |
                     addr-spec ) *( SEMI to-param )
to-param  =  tag-param | generic-param




Unsupported  =  "Unsupported" HCOLON 1#option-tag




User-Agent  =  "User-Agent" HCOLON 1*( product | comment )




Via               =  ( "Via" | "v" ) HCOLON
                             1#( sent-protocol sent-by
                             *( SEMI via-params ) [ comment ] )
via-params        =  via-hidden | via-ttl | via-maddr
                             | via-received | via-branch
                             | via-extension
via-hidden        =  "hidden"
via-ttl           =  "ttl" EQUAL ttl
via-maddr         =  "maddr" EQUAL host
via-received      =  "received" EQUAL host
via-branch        =  "branch" EQUAL token
via-extension     =  generic-param
sent-protocol     =  protocol-name SLASH protocol-version
                             SLASH transport
protocol-name     =  "SIP" | token
protocol-version  =  token
transport         =  "UDP" | "TCP" | "TLS" | "SCTP"
                             | other-transport
sent-by           =  host [ COLON port ]
ttl               =  1*3DIGIT                               ; 0 to 255




Warning        =  "Warning" HCOLON 1#warning-value
warning-value  =  warn-code SP warn-agent SP warn-text
warn-code      =  3DIGIT
warn-agent     =  ( host [ COLON port ] ) | pseudonym
                          ;  the name or pseudonym of the server adding
                          ;  the Warning header, for use in debugging
warn-text      =  quoted-string
pseudonym      =  token




WWW-Authenticate  =  "WWW-Authenticate" HCOLON challenge


Foo        =  "Foo" ":" something *( ";" foo-param )
foo-param  =  "bar" "=" token
                       |   generic-param


