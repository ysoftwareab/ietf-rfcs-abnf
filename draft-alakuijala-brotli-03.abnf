code = 0;
code = (code + bl_count[bits-1]) << 1;
len = tree[n].Len;
POSTFIX_MASK = ((1 << NPOSTFIX) - 1)

ndistbits = 1 + ((dcode - NDIRECT - 16) >> (NPOSTFIX + 1))

hcode = (dcode - NDIRECT - 16) >> NPOSTFIX
lcode = (dcode - NDIRECT - 16) & POSTFIX_MASK
offset = ((2 + (hcode & 1)) << ndistbits) - 4;
distance = ((offset + dextra) << NPOSTFIX) + lcode + NDIRECT + 1

DICTSIZE = DOFFSET[24] + 24 * NWORDS[24]

word_id = distance - (max allowed distance + 1)
index = word_id % NWORDS[length]
base_word = DICT[offset(length, index)..offset(length, index+1)-1]
transform_id = word_id >> NDBITS[length]

i = 0
i = i + 1
i = i + 2
i = i + 3

