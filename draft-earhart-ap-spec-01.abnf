ATOM-CHAR        = "!" / %x23-27 / %x2A-5B / %x5D-7A / %x7C-7E
                         ; Any CHAR except ATOM-SPECIALS

ATOM-SPECIALS    = "(" / ")" / "{" / SPACE / CTL / QUOTED-SPECIALS

DIGIT-NZ         = %x31-39
                           ; 1-9

QUOTED-CHAR      = SAFE-UTF8-CHAR / "\" QUOTED-SPECIALS

QUOTED-SPECIALS  = <"> / "\"

SAFE-CHAR        = %x01-09 / %x0B-0C / %x0E-21 /
                         %x23-5B / %x5D-7F
                         ; Any CHAR except CR, LF, or QUOTED-SPECIALS

SAFE-UTF8-CHAR   = SAFE-CHAR / UTF8-2 / UTF8-3 / UTF8-4 /
                         UTF8-5 / UTF8-6
TAG-CHAR         = %x21 / %x23-27 / %x2C-5B / %x5D-7A / %x7C-7E
                         ; Any ATOM-CHAR except "*" or "+"

TEXT-UTF8-CHAR   = SAFE-UTF8-CHAR / QUOTED-SPECIALS

UTF8-1           = %x80-BF

UTF8-2           = %xC0-DF UTF8-1

UTF8-3           = %xE0-EF 2UTF8-1

UTF8-4           = %xF0-F7 3UTF8-1

UTF8-5           = %xF8-FB 4UTF8-1

UTF8-6           = %xFC-FD 5UTF8-1

UTF8-CHAR        = TEXT-UTF8-CHAR / CR / LF

argument         = atom
                       / string
                       / number
                       / "(" [argument *(SP argument)] ")"

atom             = 1*1024ATOM-CHAR
auth-type        = <"> auth-type-name <">

auth-type-name   = iana-token
                         ; As defined in [SASL]

capability       =/ "IMPLEMENTATION" SP "(" quoted ")"

capability       =/ "SASL" SP "(" auth-type *(SP auth-type) ")"

           ; Other capabilities MAY be defined by protocols using AP,
           ; but MUST syntactically match capability-generic

capability-arg   = atom
                       / quoted
                       / "(" [capability-arg *(SP capability-arg)] ")"

capability-generic = atom [SP "(" [capability-arg] ")"]

command-client   = tag SP command CRLF

command          =/ "NOOP"

command          =/ "LOGOUT"

command          =/ "AUTHENTICATE" SP auth-type
                          [SP string] *(CRLF string)

           ; Other commands MAY be defined by protocols using AP,
           ; but MUST syntactically match command-generic

command-generic  = atom *(SP argument)

iana-token       = atom
                         ; MUST be registered with IANA

literal          = "{" number [ "+" ] "}" CRLF *OCTET
                         ; The number represents the number of octets

literal-utf8     = "{" number [ "+" ] "}" CRLF *UTF8-CHAR
                         ; The number represents the number of octets,
                         ; not the number of characters

nil              = "NIL"

number           = 1*DIGIT

nz-number        = DIGIT-NZ *DIGIT
quoted           = <"> *QUOTED-CHAR <">

resp-argument    = atom
                       / quoted
                       / number
                       / "(" [resp-argument *(SP resp-argument)] ")"

resp-body        = SP ["(" resp-code ")" SP] quoted

resp-code        =/ "AUTH-TOO-WEAK"

resp-code        =/ "ENCRYPT-NEEDED"

resp-code        =/ "SASL"

resp-code        =/ "TRANSITION-NEEDED"

resp-code        =/ "TRYLATER"

           ; Other resp-codes MAY be defined by protocols using AP,
           ; but MUST syntactically match resp-code-generic

resp-code-generic = atom *(SP resp-argument)

response          =/ "AP" *(SP capability)

response          =/ status-response

           ; Other responses MAY be defined by protocols using AP,
           ; but MUST syntactically match response-generic

response-generic = atom *(SP argument)

response-server  = (tag / "*") response CRLF

status-response  =/ "OK" resp-body

status-response  =/ "NO" resp-body

status-response  =/ "BAD" resp-body

status-response  =/ "BYE" resp-body

status-response  =/ "ALERT" resp-body

           ; Other status-responses MAY be defined by protocols using AP,
           ; but MUST syntactically match status-response-generic
status-response-generic = atom resp-body

string           = quoted / literal

string-utf8      = quoted / literal-utf8

tag              = 1*32TAG-CHAR


