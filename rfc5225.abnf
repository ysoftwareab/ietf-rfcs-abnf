ts_scaled =:= timer_based_lsb(<time_stride_param>,
                                   <num_lsbs_param>, <offset_param>)

tsc_ref_advanced = tsc_ref + (a_n - a_ref) / time_stride.
unscaled_value = delta_msn * stride + reference_unscaled_value

timestamp = delta_msn * ts_stride + reference_timestamp

control_crc3 =:=
           crc(3, 0x06, 0x07, ctrl_data_value, ctrl_data_length) [ 3 ];
IP-ID = delta_msn + reference_IP_ID_value

PS = 0 indicates 4-bit XI fields;

PS = 1 indicates 8-bit XI fields.

PS = 0: | X |   Index   |
                 +---+---+---+---+

                   0   1   2   3   4   5   6   7
                 +---+---+---+---+---+---+---+---+
PS = 1: | X | Reserved  |     Index     |
                 +---+---+---+---+---+---+---+---+

X = 1 indicates that the item corresponding to the Index is
X = 0 indicates that the item corresponding to the Index is
IP_ID_BEHAVIOR_SEQUENTIAL         = 0;
IP_ID_BEHAVIOR_SEQUENTIAL_SWAPPED = 1;
IP_ID_BEHAVIOR_RANDOM             = 2;
IP_ID_BEHAVIOR_ZERO               = 3;

UDP_LITE_COVERAGE_INFERRED  = 0;
UDP_LITE_COVERAGE_STATIC    = 1;
UDP_LITE_COVERAGE_IRREGULAR = 2;
REORDERING_NONE          = 0;
REORDERING_QUARTER       = 1;
REORDERING_HALF          = 2;
REORDERING_THREEQUARTERS = 3;

PROFILE_RTP_0101     = 0x0101;
PROFILE_UDP_0102     = 0x0102;
PROFILE_ESP_0103     = 0x0103;
PROFILE_IP_0104      = 0x0104;
PROFILE_RTP_0107     = 0x0107; // With UDP-LITE
PROFILE_UDPLITE_0108 = 0x0108; // Without RTP

TS_STRIDE_DEFAULT    = 160;
TIME_STRIDE_DEFAULT  = 0;

field =:= irregular(width) [ width ];
field =:= static [ 0 ];
item =:= irregular(32) [ 32 ];
item =:= compressed_value(0, 0) [ 0 ];
discriminator =:= '0' [ 1 ];
discriminator =:= '10'   [  2 ];
discriminator =:= '110'  [  3 ];
discriminator =:= '1110'  [  4 ];
discriminator =:= '11111111'  [  8 ];
field =:= static;
discriminator =:= '0' [ 1 ];
discriminator =:= '10'   [  2 ];
discriminator =:= '110'  [  3 ];
discriminator =:= '1110'  [  4 ];
discriminator =:= '11111111'  [  8 ];
field =:= uncompressed_value(32, default_value);
discriminator =:= '0'                       [  1 ];
item          =:= lsb(7, ((2^7) / 4) - 1)   [  7 ];
discriminator =:= '1'                       [  1 ];
item          =:= lsb(31, ((2^31) / 4) - 1) [ 31 ];
crc_value =:= crc(3, 0x06, 0x07, data_value, data_length) [ 3 ];
crc_value =:= crc(7, 0x79, 0x7f, data_value, data_length) [ 7 ];
length      =:= static;
next_header =:= static;
value       =:= static;
next_header =:= irregular(8) [ 8 ];
length      =:= irregular(8) [ 8 ];
value =:=
      irregular(length.UVALUE * 64 + 48) [ length.UVALUE * 64 + 48 ];
length      =:= static;
next_header =:= static;
value       =:= static;
next_header =:= irregular(8) [ 8 ];
length      =:= irregular(8) [ 8 ];
value =:=
      irregular(length.UVALUE*64+48) [ length.UVALUE * 64 + 48 ];
length      =:= static;
next_header =:= static;
value       =:= static;
next_header =:= irregular(8)                   [ 8 ];
length      =:= irregular(8)                   [ 8 ];
value       =:=
      irregular(length.UVALUE*64+48) [ length.UVALUE * 64 + 48 ];
item =:= lsb_7_or_31 [ 8, 32 ];
item =:= compressed_value(0, 0) [ 0 ];
value     =:= irregular(16)             [ 16 ];
reserved1 =:= uncompressed_value(16, 0) [  0 ];
value     =:= compressed_value(0, 0) [ 0 ];
reserved1 =:= compressed_value(0, 0) [ 0 ];
discriminator =:= '0'                            [ 1 ];
protocol      =:= uncompressed_value(16, 0x0800) [ 0 ];
discriminator =:= '1'                            [ 1 ];
protocol      =:= uncompressed_value(16, 0x86DD) [ 0 ];
r_flag    =:= uncompressed_value(1, 0) [  1 ];
reserved0 =:= uncompressed_value(9, 0) [  9 ];
version   =:= uncompressed_value(3, 0) [  3 ];
c_flag           =:= static;
k_flag           =:= static;
s_flag           =:= static;
protocol         =:= static;
key              =:= static;
sequence_number  =:= static;
protocol =:= gre_proto                  [ 1 ];
c_flag   =:= irregular(1)               [ 1 ];
k_flag   =:= irregular(1)               [ 1 ];
s_flag   =:= irregular(1)               [ 1 ];
padding  =:= compressed_value(4, 0)     [ 4 ];
key      =:= optional_32(k_flag.UVALUE) [ 0, 32 ];
checksum_and_res =:=
      optional_checksum(c_flag.UVALUE)              [ 0, 16 ];
sequence_number  =:= optional_32(s_flag.UVALUE) [ 0, 32 ];
checksum_and_res =:= optional_checksum(c_flag.UVALUE) [ 0, 16 ];
sequence_number  =:=
      optional_lsb_7_or_31(s_flag.UVALUE)           [ 0, 8, 32 ];
next_header =:= static;
s_bit       =:= static;
res_bits    =:= static;
checksum    =:= inferred_mine_header_checksum;
orig_dest   =:= static;
orig_src    =:= static;
next_header =:= irregular(8)              [  8 ];
s_bit       =:= irregular(1)              [  1 ];
res_bits    =:= irregular(7)              [  7 ];
orig_dest   =:= irregular(32)             [ 32 ];
orig_src    =:= optional_32(s_bit.UVALUE) [ 0, 32 ];
res_bits =:= uncompressed_value(16, 0) [ 16 ];
next_header     =:= static;
length          =:= static;
spi             =:= static;
sequence_number =:= static;
next_header =:= irregular(8)      [  8 ];
length      =:= irregular(8)      [  8 ];
spi         =:= irregular(32)     [ 32 ];
sequence_number =:= irregular(32) [ 32 ];
icv       =:=
      irregular(length.UVALUE*32-32)  [ length.UVALUE*32-32 ];
sequence_number =:= lsb_7_or_31   [ 8, 32 ];
icv       =:=
      irregular(length.UVALUE*32-32)  [ length.UVALUE*32-32 ];
discriminator =:= '0'                       [ 1 ];
flow_label    =:= uncompressed_value(20, 0) [ 0 ];
reserved      =:= '0000'                    [ 4 ];
discriminator =:= '1'           [  1 ];
flow_label    =:= irregular(20) [ 20 ];
version         =:= uncompressed_value(4, 6) [   4 ];
tos_tc         =:= static;
flow_label     =:= static;
payload_length =:= inferred_ip_v6_length;
next_header    =:= static;
ttl_hopl       =:= static;
src_addr       =:= static;
dst_addr       =:= static;
version_flag        =:= '1'              [   1 ];
innermost_ip        =:= irregular(1)     [   1 ];
reserved            =:= '0'              [   1 ];
flow_label          =:= fl_enc           [ 5, 21 ];
next_header         =:= irregular(8)     [   8 ];
src_addr            =:= irregular(128)   [ 128 ];
dst_addr            =:= irregular(128)   [ 128 ];
tos_tc        =:= irregular(8)           [  8 ];
ttl_hopl      =:= irregular(8)           [  8 ];
reserved      =:= compressed_value(6, 0) [  6 ];
reorder_ratio =:= irregular(2)           [  2 ];
msn           =:= irregular(16)          [ 16 ];
tos_tc       =:= irregular(8) [ 8 ];
ttl_hopl     =:= irregular(8) [ 8 ];
tos_tc       =:=
        static_or_irreg(outer_ip_flag, 8) [ 0, 8 ];
ttl_hopl     =:=
        static_or_irreg(outer_ip_flag, 8) [ 0, 8 ];
ip_id =:= irregular(16) [ 16 ];
ip_id =:= irregular(16) [ 16 ];
ip_id =:= uncompressed_value(16, 0) [ 0 ];
ip_id =:= irregular(16) [ 16 ];
ip_id =:= uncompressed_value(16, 0) [ 0 ];
version     =:= uncompressed_value(4, 4)       [  4 ];
hdr_length  =:= uncompressed_value(4, 5)       [  4 ];
length      =:= inferred_ip_v4_length          [ 16 ];
rf          =:= uncompressed_value(1, 0)       [  1 ];
mf          =:= uncompressed_value(1, 0)       [  1 ];
frag_offset =:= uncompressed_value(13, 0)      [ 13 ];
checksum    =:= inferred_ip_v4_header_checksum [ 16 ];
tos_tc               =:= static;
df                   =:= static;
ttl_hopl             =:= static;
protocol             =:= static;
src_addr             =:= static;
dst_addr             =:= static;
ip_id_behavior_outer =:= static;
version_flag        =:= '0'                    [  1 ];
innermost_ip        =:= irregular(1)           [  1 ];
reserved            =:= '000000'               [  6 ];
protocol            =:= irregular(8)           [  8 ];
src_addr            =:= irregular(32)          [ 32 ];
dst_addr            =:= irregular(32)          [ 32 ];
reserved       =:= '000'                                 [  3 ];
reorder_ratio  =:= irregular(2)                          [  2 ];
df             =:= irregular(1)                          [  1 ];
ip_id_behavior_innermost =:= irregular(2)                [  2 ];
tos_tc         =:= irregular(8)                          [  8 ];
ttl_hopl       =:= irregular(8)                          [  8 ];
ip_id =:= ip_id_enc_dyn(ip_id_behavior_innermost.UVALUE) [ 0, 16 ];
msn            =:= irregular(16)                         [ 16 ];
reserved       =:= '00000'                               [ 5 ];
df             =:= irregular(1)                          [ 1 ];
ip_id_behavior_innermost =:= irregular(2)                [ 2 ];
tos_tc         =:= irregular(8)                          [ 8 ];
ttl_hopl       =:= irregular(8)                          [ 8 ];
ip_id =:= ip_id_enc_dyn(ip_id_behavior_innermost.UVALUE) [ 0, 16 ];
reserved       =:= '00000'                             [ 5 ];
df             =:= irregular(1)                        [ 1 ];
ip_id_behavior_outer =:=     irregular(2)              [ 2 ];
tos_tc         =:= irregular(8)                        [ 8 ];
ttl_hopl       =:= irregular(8)                        [ 8 ];
ip_id =:= ip_id_enc_dyn(ip_id_behavior_outer.UVALUE)   [ 0, 16 ];
ip_id    =:=
      ip_id_enc_irreg(ip_id_behavior_outer.UVALUE)      [ 0, 16 ];
tos_tc   =:= static_or_irreg(outer_ip_flag, 8)      [  0, 8 ];
ttl_hopl =:= static_or_irreg(outer_ip_flag, 8)      [  0, 8 ];
ip_id =:=
      ip_id_enc_irreg(ip_id_behavior_innermost.UVALUE)  [ 0, 16 ];
udp_length =:= inferred_udp_length [ 16 ];
src_port      =:= static;
dst_port      =:= static;
checksum_used =:= static;
src_port   =:= irregular(16) [ 16 ];
dst_port   =:= irregular(16) [ 16 ];
checksum      =:= irregular(16)          [ 16 ];
msn           =:= irregular(16)          [ 16 ];
reserved      =:= compressed_value(6, 0) [  6 ];
reorder_ratio =:= irregular(2)           [  2 ];
checksum =:= irregular(16) [ 16 ];
checksum =:= uncompressed_value(16, 0)   [ 0 ];
checksum =:= irregular(16) [ 16 ];
csrc_list =:= uncompressed_value(0, 0) [ 0 ];
csrc_list =:= list_csrc(cc_value) [ VARIABLE ];
rtp_version =:= uncompressed_value(2, 0) [  2 ];
dummy_field =:= field_scaling(ts_stride.UVALUE,
      ts_scaled.UVALUE, timestamp.UVALUE, ts_offset.UVALUE) [ 0 ];
ts_stride     =:= uncompressed_value(32, TS_STRIDE_DEFAULT);
time_stride   =:= uncompressed_value(32, TIME_STRIDE_DEFAULT);
pad_bit         =:= static;
extension       =:= static;
cc              =:= static;
marker          =:= static;
payload_type    =:= static;
sequence_number =:= static;
timestamp       =:= static;
ssrc            =:= static;
csrc_list       =:= static;
ts_stride       =:= static;
time_stride     =:= static;
ts_scaled       =:= static;
ts_offset       =:= static;
ssrc            =:= irregular(32)  [ 32 ];
reserved        =:= compressed_value(1, 0)       [  1 ];
reorder_ratio   =:= irregular(2)                 [  2 ];
list_present    =:= irregular(1)                 [  1 ];
tss_indicator   =:= irregular(1)                 [  1 ];
tis_indicator   =:= irregular(1)                 [  1 ];
pad_bit         =:= irregular(1)                 [  1 ];
extension       =:= irregular(1)                 [  1 ];
marker          =:= irregular(1)                 [  1 ];
payload_type    =:= irregular(7)                 [  7 ];
sequence_number =:= irregular(16)                [ 16 ];
timestamp       =:= irregular(32)                [ 32 ];
ts_stride       =:= sdvl_or_default(tss_indicator.CVALUE,
      TS_STRIDE_DEFAULT)                             [ VARIABLE ];
time_stride     =:= sdvl_or_default(tis_indicator.CVALUE,
      TIME_STRIDE_DEFAULT)                           [ VARIABLE ];
csrc_list   =:= csrc_list_dynchain(list_present.CVALUE,
      cc.UVALUE)                                     [ VARIABLE ];
checksum_coverage =:= inferred_udp_length [  0 ];
checksum_coverage =:= irregular(16)       [ 16 ];
checksum_coverage =:= irregular(16)       [ 16 ];
checksum_coverage =:= inferred_udp_length [  0 ];
checksum_coverage =:= static              [  0 ];
checksum_coverage =:= irregular(16)       [ 16 ];
src_port          =:= static;
dst_port          =:= static;
coverage_behavior =:= static;
src_port   =:= irregular(16) [ 16 ];
dst_port   =:= irregular(16) [ 16 ];
reserved =:= compressed_value(4, 0)                      [  4 ];
coverage_behavior =:= irregular(2)                       [  2 ];
reorder_ratio     =:= irregular(2)                       [  2 ];
checksum_coverage =:=
      checksum_coverage_dynchain(coverage_behavior.UVALUE)   [ 16 ];
checksum          =:= irregular(16)                      [ 16 ];
msn               =:= irregular(16)                      [ 16 ];
coverage_behavior =:= irregular(2)                       [  2 ];
reserved =:= compressed_value(6, 0)                      [  6 ];
checksum_coverage =:=
        checksum_coverage_dynchain(coverage_behavior.UVALUE) [ 16 ];
checksum =:= irregular(16)                               [ 16 ];
checksum_coverage =:=
      checksum_coverage_irregular(coverage_behavior.UVALUE) [ 0, 16 ];
checksum          =:= irregular(16)                     [ 16 ];
spi             =:= static;
sequence_number =:= static;
spi =:= irregular(32)                         [ 32 ];
sequence_number =:= irregular(32)             [ 32 ];
reserved        =:= compressed_value(6, 0)    [  6 ];
reorder_ratio   =:= irregular(2)              [  2 ];
master =:= lsb(k, 1);
master =:= lsb(k, ((2^k) / 4) - 1);
master =:= lsb(k, ((2^k) / 2) - 1);
master =:= lsb(k, (((2^k) * 3) / 4) - 1);
ip_id_offset =:= lsb(k, ((2^k) / 4) - 1) [ k ];
ip_id_offset =:= lsb(k, ((2^k) / 4) - 1) [ k ];
ip_id =:= ip_id_lsb(behavior, 8) [ 8 ];
ip_id =:= irregular(16)  [ 16 ];
df =:= irregular(1) [ 1 ];
unused =:= compressed_value(1, 0) [ 1 ];
payload_type =:= static [ 0 ];
reserved     =:= compressed_value(1, 0) [ 1 ];
payload_type =:= irregular(7)           [ 7 ];
csrc_list =:= static [ 0 ];
csrc_list =:= list_csrc(cc_value) [ VARIABLE ];
timestamp =:= timer_based_lsb(time_stride_value, k,
                                  ((2^k) / 2) - 1);
timestamp =:= lsb(k, ((2^k) / 4) - 1);
discriminator =:= '0'   [ 1 ];
field =:= msn_lsb(7)    [ 7 ];
discriminator =:= '10'  [  2 ];
field =:= msn_lsb(14)   [ 14 ];
discriminator =:= '110'  [  3 ];
field =:= msn_lsb(21)    [ 21 ];
discriminator =:= '1110' [  4 ];
field =:= msn_lsb(28)    [ 28 ];
discriminator =:= '11111111'        [  8 ];
field =:= irregular(field_width)    [ field_width ];
discriminator =:= '0'               [ 1 ];
field =:= lsb(7, ((2^7) / 4) - 1)   [ 7 ];
discriminator =:= '10'              [  2 ];
field =:= lsb(14, ((2^14) / 4) - 1) [ 14 ];
discriminator =:= '110'             [  3 ];
field =:= lsb(21, ((2^21) / 4) - 1) [ 21 ];
discriminator =:= '1110'            [  4 ];
field =:= lsb(28, ((2^28) / 4) - 1) [ 28 ];
discriminator =:= '11111111'        [  8 ];
field =:= irregular(field_width)    [ field_width ];
discriminator =:= '0'                     [  1 ];
field =:= scaled_ts_lsb(time_stride, 7)   [  7 ];
discriminator =:= '10'                    [  2 ];
field =:= scaled_ts_lsb(time_stride, 14)  [ 14 ];
discriminator =:= '110'                   [  3 ];
field =:= scaled_ts_lsb(time_stride, 21)  [ 21 ];
discriminator =:= '1110'                  [  4 ];
field =:= scaled_ts_lsb(time_stride, 28)  [ 28 ];
discriminator =:= '11111111'              [  8 ];
field =:= irregular(32)                   [ 32 ];
scaled_value =:= sdvl_scaled_ts_lsb(time_stride) [ VARIABLE ];
timestamp =:= sdvl_lsb(32);
df                   =:= static;
ip_id_behavior       =:= static;
reorder_ratio        =:= static;
ip_outer_indicator  =:= irregular(1)                [ 1 ];
ttl_hopl_indicator  =:= irregular(1)                [ 1 ];
tos_tc_indicator    =:= irregular(1)                [ 1 ];
df                  =:= dont_fragment(ip_version)   [ 1 ];
ip_id_behavior      =:= irregular(2)                [ 2 ];
reorder_ratio       =:= irregular(2)                [ 2 ];
pad_bit      =:= static;
extension    =:= static;
list_indicator =:= irregular(1)                  [ 1 ];
pt_indicator   =:= irregular(1)                  [ 1 ];
time_stride_indicator =:= irregular(1)           [ 1 ];
pad_bit        =:= irregular(1)                  [ 1 ];
extension      =:= irregular(1)                  [ 1 ];
reserved       =:= compressed_value(3, 0)        [ 3 ];
df                 =:= static;
ip_id_behavior     =:= static;
ip_outer_indicator =:= irregular(1)              [ 1 ];
df                 =:= dont_fragment(ip_version) [ 1 ];
ip_id_behavior     =:= irregular(2)              [ 2 ];
reserved           =:= compressed_value(4, 0)    [ 4 ];
df                  =:= static;
ip_id_behavior      =:= static;
coverage_behavior   =:= static;
reserved            =:= compressed_value(2, 0)      [ 2 ];
ip_outer_indicator  =:= irregular(1)                [ 1 ];
df                  =:= dont_fragment(ip_version)   [ 1 ];
ip_id_behavior      =:= irregular(2)                [ 2 ];
coverage_behavior   =:= irregular(2)                [ 2 ];
pad_bit             =:= static;
extension           =:= static;
coverage_behavior   =:= static;
reserved       =:= compressed_value(1, 0)      [ 1 ];
list_indicator =:= irregular(1)                [ 1 ];
pt_indicator   =:= irregular(1)                [ 1 ];
time_stride_indicator =:= irregular(1)         [ 1 ];
pad_bit        =:= irregular(1)                [ 1 ];
extension      =:= irregular(1)                [ 1 ];
coverage_behavior =:= irregular(2)             [ 2 ];
outer_headers  =:= baseheader_outer_headers        [ VARIABLE ];
ip_version     =:= uncompressed_value(4, 4)        [  4 ];
header_length  =:= uncompressed_value(4, 5)        [  4 ];
length         =:= inferred_ip_v4_length           [ 16 ];
rf             =:= uncompressed_value(1, 0)        [  1 ];
mf             =:= uncompressed_value(1, 0)        [  1 ];
frag_offset    =:= uncompressed_value(13, 0)       [ 13 ];
ip_checksum =:= inferred_ip_v4_header_checksum     [ 16 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
udp_length  =:= inferred_udp_length                [ 16 ];
rtp_version =:= uncompressed_value(2, 2)           [  2 ];
outer_headers  =:= baseheader_outer_headers        [ VARIABLE ];
ip_version     =:= uncompressed_value(4, 6)        [   4 ];
payload_length =:= inferred_ip_v6_length           [  16 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
udp_length     =:= inferred_udp_length             [  16 ];
rtp_version    =:= uncompressed_value(2, 2)        [   2 ];
df    =:= uncompressed_value(0,0)                  [   0 ];
ip_id =:= uncompressed_value(0,0)                  [   0 ];
dummy_field =:= field_scaling(ts_stride.UVALUE,
      ts_scaled.UVALUE, timestamp.UVALUE, ts_offset.UVALUE) [ 0 ];
ts_stride     =:= uncompressed_value(32, TS_STRIDE_DEFAULT);
time_stride   =:= uncompressed_value(32, TIME_STRIDE_DEFAULT);
tos_tc          =:= static;
dest_addr       =:= static;
ttl_hopl        =:= static;
src_addr        =:= static;
df              =:= static;
flow_label      =:= static;
next_header     =:= static;
src_port        =:= static;
dst_port        =:= static;
pad_bit         =:= static;
extension       =:= static;
cc              =:= static;
marker          =:= uncompressed_value(1, 0);
payload_type    =:= static;
sequence_number =:= static;
timestamp       =:= static;
ssrc            =:= static;
csrc_list       =:= static;
ts_stride       =:= static;
time_stride     =:= static;
ts_scaled       =:= static;
ts_offset       =:= static;
reorder_ratio   =:= static;
ip_id_behavior_innermost =:= static;
discriminator        =:= '11111010'                    [ 8 ];
marker               =:= irregular(1)                  [ 1 ];
header_crc   =:= crc7(THIS.UVALUE, THIS.ULENGTH)       [ 7 ];
flags1_indicator     =:= irregular(1)                  [ 1 ];
flags2_indicator     =:= irregular(1)                  [ 1 ];
tsc_indicator        =:= irregular(1)                  [ 1 ];
tss_indicator        =:= irregular(1)                  [ 1 ];
ip_id_indicator      =:= irregular(1)                  [ 1 ];
control_crc3         =:= control_crc3_encoding         [ 3 ];

extension =:= profile_1_flags2_enc(
        flags2_indicator.CVALUE)                           [ 0, 8 ];
tos_tc =:= static_or_irreg(tos_tc_indicator.CVALUE, 8) [ 0, 8 ];
ttl_hopl =:= static_or_irreg(ttl_hopl_indicator.CVALUE,
      ttl_hopl.ULENGTH)                                    [ 0, 8 ];
payload_type =:= pt_irr_or_static(pt_indicator)        [ 0, 8 ];
sequence_number =:=
      sdvl_sn_lsb(sequence_number.ULENGTH)                [ VARIABLE ];
ip_id =:= ip_id_sequential_variable(
      ip_id_behavior_innermost.UVALUE,
      ip_id_indicator.CVALUE) [ 0, 8, 16 ];
ts_scaled =:= variable_scaled_timestamp(tss_indicator.CVALUE,
      tsc_indicator.CVALUE, ts_stride.UVALUE,
      time_stride.UVALUE)                                 [ VARIABLE ];
timestamp =:= variable_unscaled_timestamp(tss_indicator.CVALUE,
      tsc_indicator.CVALUE)                               [ VARIABLE ];
ts_stride =:= sdvl_or_static(tss_indicator.CVALUE)    [ VARIABLE ];
time_stride =:= sdvl_or_static(tis_indicator.CVALUE)  [ VARIABLE ];
csrc_list =:= csrc_list_presence(list_indicator.CVALUE,
      cc.UVALUE)                                          [ VARIABLE ];
discriminator =:= '0'                             [ 1 ];
msn           =:= msn_lsb(4)                      [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
timestamp     =:= inferred_scaled_field           [ 0 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '1000'                          [ 4 ];
msn           =:= msn_lsb(5)                      [ 5 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
timestamp     =:= inferred_scaled_field           [ 0 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '101'                                [ 3 ];
marker        =:= irregular(1)                         [ 1 ];
msn           =:= msn_lsb(4)                           [ 4 ];
ts_scaled     =:= scaled_ts_lsb(time_stride.UVALUE, 5) [ 5 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH)      [ 3 ];
discriminator =:= '1001'                                [ 4 ];
ip_id =:= ip_id_lsb(ip_id_behavior_innermost.UVALUE, 4) [ 4 ];
msn           =:= msn_lsb(5)                            [ 5 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH)       [ 3 ];
timestamp     =:= inferred_scaled_field                 [ 0 ];
discriminator =:= '101'                                [ 3 ];
marker        =:= irregular(1)                         [ 1 ];
msn           =:= msn_lsb(4)                           [ 4 ];
ts_scaled     =:= scaled_ts_lsb(time_stride.UVALUE, 5) [ 5 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH)      [ 3 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '110'                                [ 3 ];
msn           =:= msn_lsb(7)                           [ 7 ];
ts_scaled     =:= scaled_ts_lsb(time_stride.UVALUE, 6) [ 6 ];
marker        =:= irregular(1)                         [ 1 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH)      [ 7 ];
discriminator =:= '11000'                               [ 5 ];
msn           =:= msn_lsb(7)                            [ 7 ];
ip_id =:= ip_id_lsb(ip_id_behavior_innermost.UVALUE, 5) [ 5 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH)       [ 7 ];
timestamp     =:= inferred_scaled_field                 [ 0 ];
discriminator =:= '11001'                               [ 5 ];
msn           =:= msn_lsb(7)                            [ 7 ];
ip_id =:= ip_id_lsb(ip_id_behavior_innermost.UVALUE, 5) [ 5 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH)       [ 7 ];
ts_scaled     =:= scaled_ts_lsb(time_stride.UVALUE, 7)  [ 7 ];
marker        =:= irregular(1)                          [ 1 ];
discriminator =:= '1101'                               [ 4 ];
msn           =:= msn_lsb(7)                           [ 7 ];
ts_scaled     =:= scaled_ts_lsb(time_stride.UVALUE, 5) [ 5 ];
marker        =:= irregular(1)                         [ 1 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH)      [ 7 ];
ip_id         =:= inferred_sequential_ip_id            [ 0 ];
outer_headers  =:= baseheader_outer_headers        [ VARIABLE ];
ip_version     =:= uncompressed_value(4, 4)        [  4 ];
header_length  =:= uncompressed_value(4, 5)        [  4 ];
length         =:= inferred_ip_v4_length           [ 16 ];
rf             =:= uncompressed_value(1, 0)        [  1 ];
mf             =:= uncompressed_value(1, 0)        [  1 ];
frag_offset    =:= uncompressed_value(13, 0)       [ 13 ];
ip_checksum =:= inferred_ip_v4_header_checksum     [ 16 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
udp_length     =:= inferred_udp_length             [ 16 ];
outer_headers  =:= baseheader_outer_headers        [ VARIABLE ];
ip_version     =:= uncompressed_value(4, 6)        [  4 ];
payload_length =:= inferred_ip_v6_length           [ 16 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
udp_length     =:= inferred_udp_length             [ 16 ];
df    =:= uncompressed_value(0,0)                  [  0 ];
ip_id =:= uncompressed_value(0,0)                  [  0 ];
tos_tc         =:= static;
dest_addr      =:= static;
ip_version     =:= static;
ttl_hopl       =:= static;
src_addr       =:= static;
df             =:= static;
flow_label     =:= static;
next_header    =:= static;
src_port       =:= static;
dst_port       =:= static;
reorder_ratio  =:= static;
ip_id_behavior_innermost =:= static;
discriminator        =:= '11111010'                    [ 8 ];
ip_id_indicator      =:= irregular(1)                  [ 1 ];
header_crc   =:= crc7(THIS.UVALUE, THIS.ULENGTH)       [ 7 ];
flags_indicator      =:= irregular(1)                  [ 1 ];
ttl_hopl_indicator   =:= irregular(1)                  [ 1 ];
tos_tc_indicator     =:= irregular(1)                  [ 1 ];
reorder_ratio        =:= irregular(2)                  [ 2 ];
control_crc3         =:= control_crc3_encoding         [ 3 ];
tos_tc =:= static_or_irreg(tos_tc_indicator.CVALUE, 8) [ 0, 8 ];
ttl_hopl =:= static_or_irreg(ttl_hopl_indicator.CVALUE,
      ttl_hopl.ULENGTH)                                    [ 0, 8 ];
msn                  =:= msn_lsb(8)                    [ 8 ];
ip_id =:= ip_id_sequential_variable(ip_id_behavior_innermost.UVALUE,
      ip_id_indicator.CVALUE)                          [ 0, 8, 16 ];
discriminator =:= '0'                             [ 1 ];
msn           =:= msn_lsb(4)                      [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '100'                           [ 3 ];
msn           =:= msn_lsb(6)                      [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '101'                                 [ 3 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH)       [ 3 ];
msn           =:= msn_lsb(6)                            [ 6 ];
ip_id =:= ip_id_lsb(ip_id_behavior_innermost.UVALUE, 4) [ 4 ];
discriminator =:= '110'                                 [ 3 ];
ip_id =:= ip_id_lsb(ip_id_behavior_innermost.UVALUE, 6) [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH)       [ 7 ];
msn           =:= msn_lsb(8)                            [ 8 ];
outer_headers  =:= baseheader_outer_headers        [ VARIABLE ];
ip_version     =:= uncompressed_value(4, 4)        [  4 ];
header_length  =:= uncompressed_value(4, 5)        [  4 ];
length         =:= inferred_ip_v4_length           [ 16 ];
rf             =:= uncompressed_value(1, 0)        [  1 ];
mf             =:= uncompressed_value(1, 0)        [  1 ];
frag_offset    =:= uncompressed_value(13, 0)       [ 13 ];
ip_checksum =:= inferred_ip_v4_header_checksum     [ 16 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
outer_headers  =:= baseheader_outer_headers        [ VARIABLE ];
ip_version     =:= uncompressed_value(4, 6)        [   4 ];
payload_length =:= inferred_ip_v6_length           [  16 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
df    =:= uncompressed_value(0,0)                  [   0 ];
ip_id =:= uncompressed_value(0,0)                  [   0 ];
tos_tc          =:= static;
dest_addr       =:= static;
ttl_hopl        =:= static;
src_addr        =:= static;
df              =:= static;
flow_label      =:= static;
next_header     =:= static;
spi             =:= static;
sequence_number =:= static;
reorder_ratio   =:= static;
ip_id_behavior_innermost =:= static;
discriminator        =:= '11111010'                    [ 8 ];
ip_id_indicator      =:= irregular(1)                  [ 1 ];
header_crc   =:= crc7(THIS.UVALUE, THIS.ULENGTH)       [ 7 ];
flags_indicator      =:= irregular(1)                  [ 1 ];
ttl_hopl_indicator   =:= irregular(1)                  [ 1 ];
tos_tc_indicator     =:= irregular(1)                  [ 1 ];
reorder_ratio        =:= irregular(2)                  [ 2 ];
control_crc3         =:= control_crc3_encoding         [ 3 ];

tos_tc =:= static_or_irreg(tos_tc_indicator.CVALUE, 8) [ 0, 8 ];
ttl_hopl =:= static_or_irreg(ttl_hopl_indicator.CVALUE,
      ttl_hopl.ULENGTH)                                    [ 0, 8 ];
sequence_number =:=
      sdvl_sn_lsb(sequence_number.ULENGTH)             [ VARIABLE ];
ip_id =:= ip_id_sequential_variable(ip_id_behavior_innermost.UVALUE,
      ip_id_indicator.CVALUE)                          [ 0, 8, 16 ];
discriminator   =:= '0'                             [ 1 ];
sequence_number =:= msn_lsb(4)                      [ 4 ];
header_crc      =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
ip_id           =:= inferred_sequential_ip_id       [ 0 ];
discriminator   =:= '100'                           [ 3 ];
sequence_number =:= msn_lsb(6)                      [ 6 ];
header_crc      =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
ip_id           =:= inferred_sequential_ip_id       [ 0 ];
discriminator   =:= '101'                               [ 3 ];
header_crc      =:= crc3(THIS.UVALUE, THIS.ULENGTH)     [ 3 ];
sequence_number =:= msn_lsb(6)                          [ 6 ];
ip_id =:= ip_id_lsb(ip_id_behavior_innermost.UVALUE, 4) [ 4 ];
discriminator   =:= '110'                               [ 3 ];
ip_id =:= ip_id_lsb(ip_id_behavior_innermost.UVALUE, 6) [ 6 ];
header_crc      =:= crc7(THIS.UVALUE, THIS.ULENGTH)     [ 7 ];
sequence_number =:= msn_lsb(8)                          [ 8 ];
outer_headers  =:= baseheader_outer_headers        [ VARIABLE ];
ip_version     =:= uncompressed_value(4, 4)        [  4 ];
header_length  =:= uncompressed_value(4, 5)        [  4 ];
length         =:= inferred_ip_v4_length           [ 16 ];
rf             =:= uncompressed_value(1, 0)        [  1 ];
mf             =:= uncompressed_value(1, 0)        [  1 ];
frag_offset    =:= uncompressed_value(13, 0)       [ 13 ];
ip_checksum =:= inferred_ip_v4_header_checksum     [ 16 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
outer_headers     =:= baseheader_outer_headers     [ VARIABLE ];
ip_version        =:= uncompressed_value(4, 6)     [   4 ];
payload_length    =:= inferred_ip_v6_length        [  16 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
df    =:= uncompressed_value(0,0)                  [   0 ];
ip_id =:= uncompressed_value(0,0)                  [   0 ];
tos_tc         =:= static;
dest_addr      =:= static;
ttl_hopl       =:= static;
src_addr       =:= static;
df             =:= static;
flow_label     =:= static;
next_header    =:= static;
reorder_ratio  =:= static;
ip_id_behavior_innermost =:= static;
discriminator        =:= '11111010'                    [ 8 ];
ip_id_indicator      =:= irregular(1)                  [ 1 ];
header_crc   =:= crc7(THIS.UVALUE, THIS.ULENGTH)       [ 7 ];
flags_indicator      =:= irregular(1)                  [ 1 ];
ttl_hopl_indicator   =:= irregular(1)                  [ 1 ];
tos_tc_indicator     =:= irregular(1)                  [ 1 ];
reorder_ratio        =:= irregular(2)                  [ 2 ];
control_crc3         =:= control_crc3_encoding         [ 3 ];
tos_tc =:= static_or_irreg(tos_tc_indicator.CVALUE, 8) [ 0, 8 ];
ttl_hopl =:= static_or_irreg(ttl_hopl_indicator.CVALUE,
      ttl_hopl.ULENGTH)                                    [ 0, 8 ];
msn                  =:= msn_lsb(8)                    [ 8 ];
ip_id =:= ip_id_sequential_variable(ip_id_behavior_innermost.UVALUE,
      ip_id_indicator.CVALUE)                          [ 0, 8, 16 ];
discriminator =:= '0'                             [ 1 ];
msn           =:= msn_lsb(4)                      [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '100'                           [ 3 ];
msn           =:= msn_lsb(6)                      [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '101'                                 [ 3 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH)       [ 3 ];
msn           =:= msn_lsb(6)                            [ 6 ];
ip_id =:= ip_id_lsb(ip_id_behavior_innermost.UVALUE, 4) [ 4 ];
discriminator =:= '110'                                 [ 3 ];
ip_id =:= ip_id_lsb(ip_id_behavior_innermost.UVALUE, 6) [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH)       [ 7 ];
msn           =:= msn_lsb(8)                            [ 8 ];
outer_headers  =:= baseheader_outer_headers        [ VARIABLE ];
ip_version     =:= uncompressed_value(4, 4)        [  4 ];
header_length  =:= uncompressed_value(4, 5)        [  4 ];
length         =:= inferred_ip_v4_length           [ 16 ];
rf             =:= uncompressed_value(1, 0)        [  1 ];
mf             =:= uncompressed_value(1, 0)        [  1 ];
frag_offset    =:= uncompressed_value(13, 0)       [ 13 ];
ip_checksum =:= inferred_ip_v4_header_checksum     [ 16 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
rtp_version    =:= uncompressed_value(2, 2)        [  2 ];
outer_headers  =:= baseheader_outer_headers        [ VARIABLE ];
ip_version     =:= uncompressed_value(4, 6)        [   4 ];
payload_length =:= inferred_ip_v6_length           [  16 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
rtp_version =:= uncompressed_value(2, 2)           [   2 ];
df    =:= uncompressed_value(0,0)                  [   0 ];
ip_id =:= uncompressed_value(0,0)                  [   0 ];
dummy_field =:= field_scaling(ts_stride.UVALUE,
      ts_scaled.UVALUE, timestamp.UVALUE, ts_offset.UVALUE) [ 0 ];
ts_stride     =:= uncompressed_value(32, TS_STRIDE_DEFAULT);
time_stride   =:= uncompressed_value(32, TIME_STRIDE_DEFAULT);
tos_tc            =:= static;
dest_addr         =:= static;
ttl_hopl          =:= static;
src_addr          =:= static;
df                =:= static;
flow_label        =:= static;
next_header       =:= static;
src_port          =:= static;
dst_port          =:= static;
pad_bit           =:= static;
extension         =:= static;
cc                =:= static;
marker            =:= uncompressed_value(1, 0);
payload_type      =:= static;
sequence_number   =:= static;
timestamp         =:= static;
ssrc              =:= static;
csrc_list         =:= static;
ts_stride         =:= static;
time_stride       =:= static;
ts_scaled         =:= static;
ts_offset         =:= static;
reorder_ratio     =:= static;
ip_id_behavior_innermost =:= static;
discriminator        =:= '11111010'                    [ 8 ];
marker               =:= irregular(1)                  [ 1 ];
header_crc   =:= crc7(THIS.UVALUE, THIS.ULENGTH)       [ 7 ];
flags1_indicator     =:= irregular(1)                  [ 1 ];
flags2_indicator     =:= irregular(1)                  [ 1 ];
tsc_indicator        =:= irregular(1)                  [ 1 ];
tss_indicator        =:= irregular(1)                  [ 1 ];
ip_id_indicator      =:= irregular(1)                  [ 1 ];
control_crc3         =:= control_crc3_encoding         [ 3 ];

tos_tc =:= static_or_irreg(tos_tc_indicator.CVALUE, 8) [ 0, 8 ];
ttl_hopl =:=
      static_or_irreg(ttl_hopl_indicator.CVALUE, 8)        [ 0, 8 ];
payload_type =:= pt_irr_or_static(pt_indicator.CVALUE) [ 0, 8 ];
sequence_number =:=
      sdvl_sn_lsb(sequence_number.ULENGTH)               [ VARIABLE ];
ip_id =:= ip_id_sequential_variable(ip_id_behavior_innermost.UVALUE,
      ip_id_indicator.CVALUE)                            [ 0, 8, 16 ];
ts_scaled =:= variable_scaled_timestamp(tss_indicator.CVALUE,
      tsc_indicator.CVALUE, ts_stride.UVALUE,
      time_stride.UVALUE)                                [ VARIABLE ];
timestamp =:= variable_unscaled_timestamp(tss_indicator.CVALUE,
      tsc_indicator.CVALUE)                              [ VARIABLE ];
ts_stride =:= sdvl_or_static(tss_indicator.CVALUE)   [ VARIABLE ];
time_stride =:= sdvl_or_static(tis_indicator.CVALUE) [ VARIABLE ];
csrc_list            =:=
        csrc_list_presence(list_indicator.CVALUE,
          cc.UVALUE)                                     [ VARIABLE ];
discriminator =:= '0'                             [ 1 ];
msn           =:= msn_lsb(4)                      [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
timestamp     =:= inferred_scaled_field           [ 0 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '1000'                          [ 4 ];
msn           =:= msn_lsb(5)                      [ 5 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
timestamp     =:= inferred_scaled_field           [ 0 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '101'                                [ 3 ];
marker        =:= irregular(1)                         [ 1 ];
msn           =:= msn_lsb(4)                           [ 4 ];
ts_scaled     =:= scaled_ts_lsb(time_stride.UVALUE, 5) [ 5 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH)      [ 3 ];
discriminator =:= '1001'                                [ 4 ];
ip_id =:= ip_id_lsb(ip_id_behavior_innermost.UVALUE, 4) [ 4 ];
msn           =:= msn_lsb(5)                            [ 5 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH)       [ 3 ];
timestamp     =:= inferred_scaled_field                 [ 0 ];
discriminator =:= '101'                                [ 3 ];
marker        =:= irregular(1)                         [ 1 ];
msn           =:= msn_lsb(4)                           [ 4 ];
ts_scaled     =:= scaled_ts_lsb(time_stride.UVALUE, 5) [ 5 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH)      [ 3 ];
ip_id         =:= inferred_sequential_ip_id            [ 0 ];
discriminator =:= '110'                                [ 3 ];
msn           =:= msn_lsb(7)                           [ 7 ];
ts_scaled     =:= scaled_ts_lsb(time_stride.UVALUE, 6) [ 6 ];
marker        =:= irregular(1)                         [ 1 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH)      [ 7 ];
discriminator =:= '11000'                               [ 5 ];
msn           =:= msn_lsb(7)                            [ 7 ];
ip_id =:= ip_id_lsb(ip_id_behavior_innermost.UVALUE, 5) [ 5 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH)       [ 7 ];
timestamp     =:= inferred_scaled_field                 [ 0 ];
discriminator =:= '11001'                               [ 5 ];
msn           =:= msn_lsb(7)                            [ 7 ];
ip_id =:= ip_id_lsb(ip_id_behavior_innermost.UVALUE, 5) [ 5 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH)       [ 7 ];
ts_scaled     =:= scaled_ts_lsb(time_stride.UVALUE, 7)  [ 7 ];
marker        =:= irregular(1)                          [ 1 ];
discriminator =:= '1101'                               [ 4 ];
msn           =:= msn_lsb(7)                           [ 7 ];
ts_scaled     =:= scaled_ts_lsb(time_stride.UVALUE, 5) [ 5 ];
marker        =:= irregular(1)                         [ 1 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH)      [ 7 ];
ip_id         =:= inferred_sequential_ip_id            [ 0 ];
outer_headers  =:= baseheader_outer_headers        [ VARIABLE ];
ip_version     =:= uncompressed_value(4, 4)        [  4 ];
header_length  =:= uncompressed_value(4, 5)        [  4 ];
length         =:= inferred_ip_v4_length           [ 16 ];
rf             =:= uncompressed_value(1, 0)        [  1 ];
mf             =:= uncompressed_value(1, 0)        [  1 ];
frag_offset    =:= uncompressed_value(13, 0)       [ 13 ];
ip_checksum =:= inferred_ip_v4_header_checksum     [ 16 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
outer_headers  =:= baseheader_outer_headers        [ VARIABLE ];
ip_version     =:= uncompressed_value(4, 6)        [   4 ];
payload_length =:= inferred_ip_v6_length           [  16 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
df    =:= uncompressed_value(0,0)                  [   0 ];
ip_id =:= uncompressed_value(0,0)                  [   0 ];
tos_tc            =:= static;
dest_addr         =:= static;
ttl_hopl          =:= static;
src_addr          =:= static;
df                =:= static;
flow_label        =:= static;
next_header       =:= static;
src_port          =:= static;
dst_port          =:= static;
reorder_ratio     =:= static;
ip_id_behavior_innermost =:= static;
discriminator        =:= '11111010'                    [ 8 ];
ip_id_indicator      =:= irregular(1)                  [ 1 ];
header_crc   =:= crc7(THIS.UVALUE, THIS.ULENGTH)       [ 7 ];
flags_indicator      =:= irregular(1)                  [ 1 ];
ttl_hopl_indicator   =:= irregular(1)                  [ 1 ];
tos_tc_indicator     =:= irregular(1)                  [ 1 ];
reorder_ratio        =:= irregular(2)                  [ 2 ];
control_crc3         =:= control_crc3_encoding         [ 3 ];
coverage_behavior  =:=
tos_tc =:= static_or_irreg(tos_tc_indicator.CVALUE, 8) [ 0, 8 ];
ttl_hopl =:= static_or_irreg(ttl_hopl_indicator.CVALUE,
      ttl_hopl.ULENGTH)                                    [ 0, 8 ];
msn                  =:= msn_lsb(8)                    [ 8 ];
ip_id =:= ip_id_sequential_variable(ip_id_behavior_innermost.UVALUE,
      ip_id_indicator.CVALUE)                          [ 0, 8, 16 ];
discriminator =:= '0'                             [ 1 ];
msn           =:= msn_lsb(4)                      [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '100'                           [ 3 ];
msn           =:= msn_lsb(6)                      [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '101'                                 [ 3 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH)       [ 3 ];
msn           =:= msn_lsb(6)                            [ 6 ];
ip_id =:= ip_id_lsb(ip_id_behavior_innermost.UVALUE, 4) [ 4 ];
discriminator =:= '110'                                 [ 3 ];
ip_id =:= ip_id_lsb(ip_id_behavior_innermost.UVALUE, 6) [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH)       [ 7 ];
msn           =:= msn_lsb(8)                            [ 8 ];
Max_Jitter_BC =
            max {|(T_n - T_j) - ((a_n - a_j) / time_stride)|,
               for all headers j in the sliding window}

