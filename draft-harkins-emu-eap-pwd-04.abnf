y = H(x)
       The binary string x is given to a function H which produces an
       output y.

y = g^x mod p

       the generator taken to the x-th power modulo the prime returns an
       element in the group.

Y = x*P

       the point P is multiplied x-times to produce another point on the
       curve, Y.

i = 1
L = length
res = PRF(key, i | label | L)
i = i + 1
res = res | K(i)
pwd-seed = H(peer-ID | server-ID | password | counter)

pwd-value = KDF(pwd-seed, "EAP-pwd Hunting And Pecking", len(p))

pwd-value = pwd-value mod p

found = 0
counter = 1
pwd-seed = H(peer-ID | server-ID | password | counter)
pwd-value = KDF(pwd-seed, "EAP-pwd Hunting And Pecking", len(p))
x = pwd-value mod p
PWE = (x,y)
PWE = (x, p-y)
P = f*PWE
found = 1
counter = counter + 1
pwd-seed = H(peer-ID | server-ID | password)

pwd-value = KDF(pwd-seed, "EAP-pwd Affixing the PWE", len(p))

pwd-value = pwd-value mod p

pwe = pwd-value ^ ((p-1)/r) mod p

MK = H(ks | F(Element_S+Element_P) | (Scalar_S+Scalar_P) mod r)

MK = H(kp | F(Element_P+Element_S) | (Scalar_P+Scalar_S) mod r)


MK = H(ks | (Element_S + Element_P) mod r |
            (Scalar_S + Scalar_P) mod r)

MK = H(kp | (Element_P + Element_S) mod r |
            (Scalar_P + Scalar_S) mod r)


Method-ID = H(Ciphersuite | Scalar_P | Scalar_S)

Session-ID = Type-Code | Method-ID
PWE = q * G, for an elliptic curve group

pwe = g^q mod p, for an modular exponentiation group

KS = (Scalar_P * q + p_mask) * s_rand * G
