vobjects = 1*vobject

vobject = "BEGIN:" comp-name CRLF
             *contentline
             *vobject
             "END:" comp-name CRLF

comp-name = name
prop-name = name

prop-values = prop-value / prop-list / prop-structured

prop-value = VALUE-CHAR

prop-list = prop-value *("," prop-value)
     ; An unordered list containing multiple property values

prop-structured = prop-value *(";" prop-value)
     ; A structured list that consist of multiple property fields
     ; for multiple property values

contentline = [group "."] prop-name params ":" prop-values CRLF
     ; Folding and unfolding procedures described in Section 3.2 of
     ; <<RFC6350>> applies:
     ;   * When parsing a content line, folded lines *MUST* first be
     ;     unfolded accordingly.
     ;   * When generating a content line, lines longer than 75
     ;     characters *SHOULD* be folded accordingly.
     ;   * When normalizing a content line, the content line *MUST*
     ;     be folded when the line is longer than 75 characters.

group = name

params = *(";" param)

param = name "=" param-value *("," param-value)
     ; Allowed parameters depend on property name.

name = 1*(ALPHA / DIGIT / "-")

param-value = *SAFE-CHAR / DQUOTE *QSAFE-CHAR DQUOTE
param-values = param-value *("," param-single-value)

NON-ASCII = UTF8-2 / UTF8-3 / UTF8-4
     ; UTF8-{2,3,4} are defined in <<RFC3629>>
     ; TODO: generalize this to UTF-32

QSAFE-CHAR = WSP / "!" / %x23-7E / NON-ASCII
     ; Any character except CTLs, DQUOTE

SAFE-CHAR = WSP / "!" / %x23-39 / %x3C-7E / NON-ASCII
     ; Any character except CTLs, DQUOTE, ";", ":"

VALUE-CHAR = WSP / VCHAR / NON-ASCII
     ; Any textual character
text       = *(TSAFE-CHAR / ":" / DQUOTE / ESCAPED-CHAR)
     ; Folded according to description above

ESCAPED-CHAR = ("\\" / "\;" / "\," / "\N" / "\n")
     ; \\ encodes \, \N or \n encodes newline
     ; \; encodes ;, \, encodes ,

TSAFE-CHAR = WSP / %x21 / %x23-2B / %x2D-39 / %x3C-5B /
               %x5D-7E / NON-US-ASCII
     ; Any character except CONTROLs not needed by the current
     ; character set, DQUOTE, ";", ":", "\", ","
uri = <As defined in Section 3 of [RFC3986]>

boolean    = "TRUE" / "FALSE"
integer = (["+"] / "-") 1*DIGIT

float = (["+"] / "-") 1*DIGIT ["." 1*DIGIT]

binary = *(4b-char) [b-end]
     ; A "BASE64" encoded character string, as defined by [RFC4648].

b-end  = (2b-char "==") / (3b-char "=")

b-char = ALPHA / DIGIT / "+" / "/"

assign-key    = *(TSAFE-CHAR)
assign-value  = prop-values

assign        = assign-key "=" assign-value

iso-date               = iso-date-value
iso-date-value         = iso-date-fullyear iso-date-month iso-date-mday
iso-date-fullyear      = 4DIGIT
iso-date-month         = 2DIGIT   ;01-12
iso-date-mday          = 2DIGIT   ;01-28, 01-29, 01-30, 01-31
                                   ;based on month/year

iso-date-flex   = iso-date /
                     iso-date-reduced /
                     iso-date-truncated

iso-date-reduced = iso-date-fullyear / iso-date-year-month
iso-date-year-month = iso-date-fullyear "-" iso-date-month

iso-date-truncated =  iso-date-truncated-month-day /
                         iso-date-truncated-month-only /
                         iso-date-truncated-day-only

iso-date-truncated-month-day  = "--" iso-date-month iso-date-mday
iso-date-truncated-month-only =  "--" iso-date-month
iso-date-truncated-day-only   =  "---" iso-date-mday
iso-time = time-hour time-minute time-second
              [iso-time-utc / iso-utc-offset]

iso-time-hour    = 2DIGIT        ;00-23
iso-time-minute  = 2DIGIT        ;00-59
iso-time-second  = 2DIGIT        ;00-60
iso-time-utc     = "Z"

iso-time-basic = iso-time-hour iso-time-minute iso-time-second
                    [iso-time-utc]

iso-time-flex = iso-time /
                  iso-time-reduced /
                  iso-time-truncated

iso-time-zone = iso-time-utc / iso-time-utc-offset

iso-time-reduced =  iso-time-reduced-hour-minute /
                      iso-time-hour

iso-time-reduced-hour-minute = iso-time-hour iso-time-minute

iso-time-truncated =  iso-time-truncated-minute-second /
                        iso-time-truncated-minute-only /
                        iso-time-truncated-second-only
iso-time-truncated-minute-second = "-" iso-time-minute iso-time-second
iso-time-truncated-minute-only = "-" iso-time-minute
iso-time-truncated-second-only = "--" iso-time-second

sign = "+" / "-"
iso-utc-offset = sign iso-time-hour [iso-time-minute]

cal-utc-offset = sign iso-time-hour iso-time-minute [iso-time-second]

iso-date-time  = iso-date "T" iso-time

iso-date-time-no-zone  = iso-date "T" iso-time-basic

iso-date-time-flex = iso-date-time-flex-date "T" iso-date-time-flex-time

iso-date-time-flex-date = iso-date / iso-date-truncated
iso-date-time-flex-time = iso-time / iso-time-reduced

iso-date-and-or-time = iso-date-flex /
                          "T" iso-time-flex /
                          iso-date-time-flex

iso-duration-sign = ["+"] / "-"
iso-duration  = ( iso-duration-sign ) "P" iso-duration-value

iso-duration-value =  iso-duration-date / iso-duration-week

iso-duration-date   = iso-duration-day "T" iso-duration-time

iso-duration-week   = 1*DIGIT "W"

iso-duration-year   = 1*DIGIT "Y"
iso-duration-month  = 1*DIGIT "M"
iso-duration-day    = 1*DIGIT "D"

iso-duration-time   = iso-duration-hour iso-duration-minute
                         iso-duration-second

iso-duration-hour   = 1*DIGIT "H"
iso-duration-minute = 1*DIGIT "M"
iso-duration-second = 1*DIGIT "S"

cal-duration         = cal-duration-sign cal-duration-no-sign
cal-duration-sign    = (["+"] / "-")
cal-duration-no-sign = "P" cal-duration-value

cal-duration-value   = ( cal-duration-date /
                            cal-duration-time /
                            cal-duration-week )

cal-duration-date   = cal-duration-day [cal-duration-time]

cal-duration-time   = "T" ( cal-duration-hour /
                               cal-duration-minute /
                               cal-duration-second )

cal-duration-week   = 1*DIGIT "W"
cal-duration-hour   = 1*DIGIT "H" [cal-duration-minute]
cal-duration-minute = 1*DIGIT "M" [cal-duration-second]
cal-duration-second = 1*DIGIT "S"
cal-duration-day    = 1*DIGIT "D"

iso-interval     = iso-interval-explicit / iso-interval-start

iso-interval-explicit = iso-date-time "/" iso-date-time
iso-interval-start    = iso-date-time "/" iso-duration-no-sign

cal-interval     = cal-interval-explicit / cal-interval-start

cal-interval-explicit = iso-date-time-no-zone "/" iso-date-time-no-zone
cal-interval-start    = iso-date-time-no-zone "/" cal-duration-no-sign

   Description
      This value format accepts a time interval representation,
      specified in [ISO.8601.2004] Section 4.4.  "Time Interval"
      tailored for calendaring purposes.

   The value can be represented in two ways.

   As an interval with start and end:

   o  "YYYYMMDDThhmmss/YYYYMMDDThhmmss" [ISO.8601.2004] 4.4.4.1 Complete
      representation, "Representations of time intervals identified by
      start and end", basic format, first entry.  The start *MUST* be
      before the end.

   As an interval with start and duration (positive duration only):

   o  "YYYYMMDDThhmmss/PnnDTnnHnnMnnS" [ISO.8601.2004] 4.4.4.3 Complete
      representation, "Representations of time interval identified by
      start and duration", first basic format, modified to omit the
      "nnYnnM", which is the "cal-duration" period format.

   o  "YYYYMMDDThhmmss/PnnW" [ISO.8601.2004] 4.4.4.5 Other complete
      representations, third item, allowing the expression
      "PnnYnnMnnDTnnHnnMnnS" to be substituted with "PnnW"
      [ISO.8601.2004] 4.4.3.2.
   o  "YYYYMMDDThhmmss/PnnDTnnHnnM" with the duration specified in
      reduced accuracy with omission of seconds as in (#cal-duration).

   o  "YYYYMMDDThhmmss/PnnDTnnH" with the duration specified in reduced
      accuracy with omission of minutes as in (#cal-duration).

   o  "YYYYMMDDThhmmss/PnnD" with the duration specified in reduced
      accuracy with omission of hours as in (#cal-duration).

   In accordance with [ISO.8601.2004] Section 4.4.5, representations for
   UTC included with the component preceding the solidus shall be
   assumed to apply to the component following the solidus, unless a
   corresponding alternative is included.

   Example

      *  19970101T180000Z/19970102T070000Z

      *  19850412T232050/19850625T103000

      *  19970101T180000Z/PT5H30M

      *  19850412T232050/P15DT12H30M0S

      *  19850412T232050/P00010215T123000

      *  Both components are in UTC: 19850412T232050Z/19850625T103000

      *  Former component in local time, latter in UTC:
         19850412T232050/19850625T103000

param-value   = paramtext / quoted-string

paramtext     = *SAFE-CHAR
quoted-string = DQUOTE *QSAFE-CHAR DQUOTE

QSAFE-CHAR    = WSP / %x21 / %x23-7E / NON-US-ASCII
       ; Any character except CONTROL and DQUOTE

SAFE-CHAR     = WSP / %x21 / %x23-2B / %x2D-39 / %x3C-7E
                / NON-US-ASCII
       ; Any character except CONTROL, DQUOTE, ";", ":", ","

NON-US-ASCII  = UTF8-2 / UTF8-3 / UTF8-4
        ; UTF8-2, UTF8-3, and UTF8-4 are defined in [RFC3629]

CONTROL       = %x00-08 / %x0A-1F / %x7F
        ; All the controls except HTAB

RECURMAP = MAP(
     KEYVALUE(FREQ, TEXT),
     KEYVALUE(UNTIL, ISO-DATE-COMPLETE / ISO-DATE-TIME-BASIC),
     KEYVALUE(COUNT, INTEGER),
     KEYVALUE(INTERVAL, INTEGER),
     KEYVALUE(BYSECOND, LIST(INTEGER)),
     KEYVALUE(BYMINUTE, LIST(INTEGER)),
     KEYVALUE(BYHOUR, LIST(INTEGER)),
     KEYVALUE(BYDAY, LIST(INTEGER)),
     KEYVALUE(BYMONTHDAY, LIST(INTEGER)),
     KEYVALUE(BYYEARDAY, LIST(INTEGER)),
     KEYVALUE(BYWEEKNO, LIST(INTEGER)),
     KEYVALUE(BYMONTH, LIST(INTEGER)),
     KEYVALUE(BYSETPOS, INTEGER),
     KEYVALUE(WKST, TEXT)
