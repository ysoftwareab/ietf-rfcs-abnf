saltp = enctype-name | 0x00 | salt
tkey = random-to-key(PBKDF2(passphrase, saltp,
                              iter_count, keylength))
key = KDF-HMAC-SHA2(tkey, "kerberos") where "kerberos" is the
           byte string {0x6b65726265726f73}.

K1 = HMAC-SHA-256(key, 00 00 00 01 | constant | 0x00 | 00 00 00 80)
k = 192
K1 = HMAC-SHA-384(key, 00 00 00 01 | constant | 0x00 | 00 00 00 C0)
k = 256
K1 = HMAC-SHA-384(key, 00 00 00 01 | constant | 0x00 | 00 00 01 00)
Kc = KDF-HMAC-SHA2(base-key, usage | 0x99)
Ke = KDF-HMAC-SHA2(base-key, usage | 0xAA)
Ki = KDF-HMAC-SHA2(base-key, usage | 0x55)

N = random nonce of length c (128 bits) 
IV = N XOR cipherState
pad = Shortest string of non-zero length to bring the plaintext 
            to a length that is a multiple of c.  The value of each 
            added octet equals the number of octets that are added.
C = E(Ke, plaintext | pad, IV)
H = HMAC(Ki, N | C)
ciphertext =  N | C | H[1..h]
cipherState = N

IV = N XOR cipherState
cipherState = N

 




Kp  = KDF-HMAC-SHA2(protocol-key, "prf")
PRF = HMAC(Kp, octet-string)

