a=zrtp-hash defined in Section 8 SHOULD be used in all offers and
rs1IDr = MAC(rs1, "Responder")

rs2IDr = MAC(rs2, "Responder")

auxsecretIDr = MAC(auxsecret, Responder's H3)

pbxsecretIDr = MAC(pbxsecret, "Responder")

rs1IDi = MAC(rs1, "Initiator")

rs2IDi = MAC(rs2, "Initiator")

auxsecretIDi = MAC(auxsecret, Initiator's H3)

pbxsecretIDi = MAC(pbxsecret, "Initiator")

s1 = rs1, s2 will be null, and s3 = pbxsecret.
pvi = g^svi mod p

hvi = hash(initiator's DHPart2 message ||
                            responder's Hello message)

pvr = g^svr mod p

DHResult = pvi^svr mod p

DHResult = pvr^svi mod p

total_hash = hash(Hello of responder || Commit || DHPart1 ||
                          DHPart2)

s0 = hash(counter || DHResult || "ZRTP-HMAC-KDF" || ZIDi ||
                ZIDr || total_hash || len(s1) || s1 || len(s2) ||
                s2 || len(s3) || s3)
KDF_Context = (ZIDi || ZIDr || total_hash)

preshared_key = hash(len(rs1) || rs1 || len(auxsecret) || auxsecret ||
                       len(pbxsecret) || pbxsecret)

   All of the explicit length fields, len(), in the above hash are 32-
   bit big-endian integers, giving the length in octets of the field
   that follows.  Some members of the set of shared secrets (rs1,
   auxsecret, and pbxsecret) may have lengths of zero if they are null
   (not available), and are each preceded by a 4-octet length field.
   For example, if auxsecret is null, len(auxsecret) is 0x00000000, and
   auxsecret itself would be absent from the hash calculation, which
   means len(pbxsecret) would immediately follow len(auxsecret).

   In place of hvi in the Commit message, two smaller fields are
   inserted by the initiator:

      - A random nonce of length 4 words (16 octets).

      - A keyID = MAC(preshared_key, "Prsh") truncated to 64 bits.

      Note: Since the nonce is used to calculate different SRTP key and
      salt pairs for each session, a duplication will result in the same
      key and salt being generated for the two sessions, which would
      have disastrous security consequences.

total_hash = hash(Hello of responder || Commit)
KDF_Context = (ZIDi || ZIDr || total_hash)

s0 = KDF(preshared_key, "ZRTP PSK", KDF_Context,
                 negotiated hash length)

total_hash = hash(Hello of responder || Commit)

KDF_Context = (ZIDi || ZIDr || total_hash)

s0 = KDF(ZRTPSess, "ZRTP MSK", KDF_Context,
                            negotiated hash length)

ZRTPSess = KDF(s0, "ZRTP Session Key", KDF_Context,
                       negotiated hash length)

sashash = KDF(s0, "SAS", KDF_Context, 256)

sasvalue = sashash [truncated to leftmost 32 bits]

ExportedKey = KDF(s0, "Exported key", KDF_Context,
                           negotiated hash length)

srtpkeyi = KDF(s0, "Initiator SRTP master key", KDF_Context,
                     negotiated AES key length)

srtpsalti = KDF(s0, "Initiator SRTP master salt", KDF_Context, 112)

srtpkeyr = KDF(s0, "Responder SRTP master key", KDF_Context,
                     negotiated AES key length)

srtpsaltr = KDF(s0, "Responder SRTP master salt", KDF_Context, 112)

mackeyi = KDF(s0, "Initiator HMAC key", KDF_Context,
                      negotiated hash length)

mackeyr = KDF(s0, "Responder HMAC key", KDF_Context,
                      negotiated hash length)

zrtpkeyi = KDF(s0, "Initiator ZRTP key", KDF_Context,
                      negotiated AES key length)

zrtpkeyr = KDF(s0, "Responder ZRTP key", KDF_Context,
                      negotiated AES key length)

flagoctet =  (E * 2^3) + (V * 2^2) + (A * 2^1) + (D * 2^0)

confirm_mac = MAC(mackeyr, encrypted part of Confirm1)

confirm_mac = MAC(mackeyi, encrypted part of Confirm2)

rs1 = KDF(s0, "retained secret", KDF_Context, 256)

clear_mac = MAC(mackeyi, "GoClear ")

clear_mac = MAC(mackeyr, "GoClear ")

ZRTPSess = KDF(ZRTPSess, "New ZRTP Session", (ZIDi || ZIDr),
                       negotiated hash length)

a=zrtp-hash SDP attributes, one based on SHA-256 for ZRTP version
EndpointHash = hash(ZID || SIP URI of the endpoint)

EndpointHash = hash(ZID || PBX extension number of the endpoint)

EndpointHash = hash(ZID || local IP address of the endpoint)
pbxsecret = KDF(ZRTPSess, "Trusted MiTM key", (ZIDi || ZIDr), 256)

a=keymgt [RFC4567] or a=crypto [RFC4568] attribute can be used as a
zrtp-attribute   = "a=zrtp-hash:" zrtp-version zrtp-hash-value

zrtp-version     = token

zrtp-hash-value  = 1*(HEXDIG)

v=0
o=bob 2890844527 2890844527 IN IP4 client.biloxi.example.com
s=
c=IN IP4 client.biloxi.example.com
t=0 0
m=audio 3456 RTP/AVP 97 33
a=rtpmap:97 iLBC/8000
a=rtpmap:33 no-op/8000
a=zrtp-hash:1.10 fe30efd02423cb054e50efd0248742ac7a52c8f91bc2
a=zrtp-hash SDP attribute, when coupled with the hash chaining
a=zrtp-hash attribute without any tampering by a third party, and if
srtps = KDF(SRTP master key, "SRTP Secret", (ZIDi || ZIDr ||
                    SRTP master salt), 256)

H0 = 256-bit random nonce (different for each party)

H1 = hash (H0)

H2 = hash (H1)

H3 = hash (H2)

