

Network Working Group                    Mark A West, Siemens/Roke Manor 
INTERNET-DRAFT                        Stephen McCann, Siemens/Roke Manor 
Expires: May 2002                                                        
                                                                         
                                                                         
 
                                                                         
                                                       14 November, 2001 
    
                           TCP/IP field behavior 
                  <draft-west-tcpip-field-behavior-00.txt> 
    
Status of this Memo 
 
   This document is an Internet-Draft and is in full conformance with 
   all provisions of Section 10 of [RFC 2026]. 
    
   Internet-Drafts are working documents of the Internet Engineering 
   Task Force (IETF), its areas, and its working groups. Note that other 
   groups may also distribute working documents as Internet-Drafts. 
    
   Internet-Drafts are draft documents valid for a maximum of six months 
   and may be updated, replaced, or obsoleted by other documents at any 
   time. It is inappropriate to use Internet-Drafts as reference 
   material or to cite them other than as "work in progress." 
    
   The list of current Internet-Drafts can be accessed at 
   http://www.ietf.org/ietf/1id-abstracts.txt 
    
   The list of Internet-Draft Shadow Directories can be accessed at 
   http://www.ietf.org/shadow.html. 
    
   This document is a submission to the IETF ROHC WG. Comments should be 
   directed to the mailing list of ROHC, rohc@cdt.luth.se. 
    
Abstract 
    
   This draft describes TCP/IP field behavior in the context of header 
   compression. 
    
   Header compression is possible thanks to the fact that most header 
   fields do not vary randomly from packet to packet. Many of the 
   fields exhibit static behavior or change in a more or less 
   predictable way. When designing a header compression scheme, it is 
   of fundamental importance to understand the behavior of the fields 
   in detail.  
    








Westie et al.                                                 [PAGE 1] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
Table of contents 
    
   1.  Introduction.................................................3 
   2.  Terminology..................................................4 
   3.  General classification.......................................4 
   3.1. IP header fields............................................4 
   3.1.1. IPv6 header fields........................................4 
   3.1.2. IPv4 header fields........................................6  
   3.2. TCP header fields...........................................8 
   3.3. Summary for IP/TCP..........................................9 
   4. Analysis of change patterns of header fields..................9 
   4.1. IP header fields...........................................11 
   4.1.1. IP Traffic-Class / Type-Of-Service (TOS).................11 
   4.1.2. ECN Flags................................................12 
   4.1.3. IP Identification........................................12 
   4.1.4. Don't Fragment (DF) flag.................................14 
   4.1.5. IP Hop-Limit / Time-To-Live (TTL)........................14 
   4.2. TCP header fields..........................................14 
   4.2.1. Sequence number..........................................14 
   4.2.2. Acknowledgement number...................................15 
   4.2.3. Reserved.................................................15 
   4.2.4. Flags....................................................17 
   4.2.5. Checksum.................................................17 
   4.2.6. Window...................................................17 
   4.2.7. Urgent pointer...........................................17 
   4.3. Options....................................................18  
   4.3.1. Options overview.........................................18 
   4.3.2. Option field behavior....................................19 
   5.  Other observations..........................................24 
   5.1. Implicit acknowledgements..................................24 
   5.2. Shared data................................................24 
   5.2.1. TCP header overhead.....................................25 
   5.3. Short-lived flows..........................................25 
   6.  Security considerations.....................................26 
   7.  Acknowledgements............................................26 
   8.  References..................................................26 
   9.  AuthorsÆ addresses..........................................27


















West et al.                                                   [PAGE 2] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
    
1. Introduction 
    
   This document describes TCP/IP field behavior, as it is essential to 
   under this before correct assumptions about header compression can be 
   made. 
    
   Since the IP header does exhibit some slightly different behavior 
   from that previously presented in [RFC 3095] for the RTP case, it is 
   also included in this document. 
    
   It is intentional that much of the classification text from [RFC 
   3095] has been borrowed. This is for easier reading rather than 
   inserting many references to that document. 
    
   Again based on the format presented in [RFC 3095] TCP/IP header 
   fields are classified and analyzed in two steps. First, we have a 
   general classification in Section 3. where the fields are classified 
   on the basis of stable knowledge and assumptions. The general 
   classification does not take into account the change characteristics 
   of changing fields because those will vary more or less depending on 
   the implementation and on the application used. A less stable but 
   more detailed analysis of the change characteristics is then done in 
   Section 4. Finally, Section 5 summarizes this appendix with 
   conclusions about how the various header fields should be handled by 
   the header compression scheme to optimize compression and 
   functionality. 
    
   A general question raised by this analysis is that of what æbaselineÆ 
   definition of all possible TCP/IP implementations are to be 
   considered?  For the purposes of this document, a relatively up-to-
   date (as of the time of writing) is considered, with a view to 
   ensuring compatibility with legacy implementations. 
    
   The general requirement for transparency is also seen to be more 
   interesting.  A number of recent proposals for extensions to TCP make 
   use of some of the previously æreservedÆ bits.  It is therefore clear 
   that a æreservedÆ bit cannot be taken to have a guaranteed zero 
   value, but may change.  Ideally, this should be accommodated by the 
   compression profile. 
    
    
    
    
    
    
    
 
    
    
    
    
    
    

West et al.                                                   [PAGE 3] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
    
2. Terminology 
    
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", 
   "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this 
   document are to be interpreted as described in [RFC 2119]. 
 
3. General classification 
    
   Definitions (and some text) copied from [RFC 3095] Appendix A. 
   Differences between IP field behavior between [RFC 3095] (i.e. 
   IP/UDP/RTP behavior for audio and video applications) and this 
   document have been identified. 
    
   At a general level, the header fields are separated into 5 classes: 
    
   INFERRED     These fields contain values that can be inferred from  
                other values, for example the size of the frame 
                carrying the packet, and thus do not have to be handled 
                at all by the compression scheme. 
    
   STATIC       These fields are expected to be constant throughout the 
                lifetime of the packet stream. Static information must 
                in some way be communicated once. 
    
   STATIC-DEF   STATIC fields whose values define a packet stream. They 
                are in general handled as STATIC. 
    
   STATIC-KNOWN These STATIC fields are expected to have well-known 
                values and therefore do not need to be communicated at 
                all. 
    
   CHANGING     These fields are expected to vary in some way: 
                randomly, within a limited value set or range, or in 
                some other manner. 
    
   In this section, each of the IP and TCP header fields is assigned to 
   one of these classes. For all fields except those classified as 
   CHANGING, the motives for the classification are also stated. In 
   section 4, CHANGING fields are further examined and classified on 
   the basis of their expected change behavior. 
    
    
3.1. IP header fields 
    
3.1.1. IPv6 header fields 
    
          +---------------------+-------------+----------------+ 
          |        Field        | Size (bits) |      Class     | 
          +---------------------+-------------+----------------+ 
          | Version             |      4      |     STATIC     | 
          | Traffic Class*      |      6      |    CHANGING    | 
          ª ECT flag*           ª      1      ª    CHANGING    ª 
          ª CE  flag*           ª      1      ª    CHANGING    ª 

West et al.                                                   [PAGE 4] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
          | Flow Label          |     20      |   STATIC-DEF   | 
          | Payload Length      |     16      |    INFERRED    | 
          | Next Header         |      8      |     STATIC     | 
          | Hop Limit           |      8      |    CHANGING    | 
          | Source Address      |    128      |   STATIC-DEF   | 
          | Destination Address |    128      |   STATIC-DEF   | 
          +---------------------+-------------+----------------+  
    
   * differs from [RFC 3095] 
    
   Version       
    
        The version field states which IP version is used. Packets with 
   different values in this field must be handled by different IP 
   stacks. All packets of a packet stream must therefore be of the same 
   IP version. Accordingly, the field is classified as STATIC. 
    
   Flow Label    
    
        This field may be used to identify packets belonging to a 
   specific packet stream. If not used, the value should be set to 
   zero. Otherwise, all packets belonging to the same stream must have 
   the same value in this field, it being one of the fields that define 
   the stream. The field is therefore classified as STATIC-DEF. 
    
   Payload Length 
    
        Information about packet length (and, consequently, payload 
   length) is expected to be provided by the link layer. The field is 
   therefore classified as INFERRED. 
    
   Next Header 
    
        This field will usually have the same value in all packets of a 
   packet stream. It encodes the type of the subsequent header. Only 
   when extension headers are sometimes present and sometimes not, will 
   the field change its value during the lifetime of the stream. The 
   field is therefore classified as STATIC. 
    
   Source and Destination addresses     These fields are part of the 
   definition of a stream and must thus be constant for all packets in 
   the stream. The fields are therefore classified as STATIC-DEF. 
    
   Total size of the fields in each class: 
    
                      +--------------+--------------+  
                      | Class        | Size (octets)|  
                      +--------------+--------------+  
                      | INFERRED     |       2      | 
                      | STATIC       |      1.5     | 
                      | STATIC-DEF   |     34.5     | 
                      | CHANGING     |       2      |  
                      +--------------+--------------+  
    

West et al.                                                   [PAGE 5] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
    
    
    
    
    
    
3.1.2. IPv4 header fields  
    
           +---------------------+-------------+----------------+  
           | Field               | Size (bits) |      Class     |  
           +---------------------+-------------+----------------+  
           | Version             |      4      |      STATIC    |  
           | Header Length       |      4      |   STATIC-KNOWN |  
           | Type of Service*    |      6      |     CHANGING   | 
           ª ECT flag*           ª      1      ª     CHANGING   ª 
           ª CE  flag*           ª      1      ª     CHANGING   ª 
           | Packet Length       |     16      |     INFERRED   |  
           | Identification      |     16      |     CHANGING   |  
           | Reserved flag*      |      1      |     CHANGING   |  
           | Don't Fragment flag*|      1      |     CHANGING   |  
           | More Fragments flag |      1      |   STATIC-KNOWN |  
           | Fragment Offset     |     13      |   STATIC-KNOWN |  
           | Time To Live        |      8      |     CHANGING   |  
           | Protocol            |      8      |      STATIC    |  
           | Header Checksum     |     16      |     INFERRED   |  
           | Source Address      |     32      |    STATIC-DEF  |  
           | Destination Address |     32      |    STATIC-DEF  |  
           +---------------------+-------------+----------------+  
    
   * differs from [RFC 3095] 
    
   Version       
         
        The version field states which IP version is used. Packets with 
   different values in this field must be handled by different IP 
   stacks. All packets of a packet stream must therefore be of the same 
   IP version. Accordingly, the field is classified as STATIC. 
    
   Header Length         
         
        As long no options are present in the IP header, the header 
   length is constant and well known. If there are options, the fields 
   would be STATIC, but it is assumed here that there are no options. 
   The field is therefore classified as STATIC-KNOWN. 
    
   Packet Length 
    
        Information about packet length is expected to be provided by 
   the link layer. The field is therefore classified as INFERRED. 
    
   Flags 
    
        The Reserved flag must be set to zero, as defined in [RFC 791].  
        In [RFC 3095] the field is therefore classified as STATIC-

West et al.                                                   [PAGE 6] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
        KNOWN.  However, it is expected that reserved fields may be 
        used at some future point.  It appears unwise to select an 
        encoding that would preclude the use of a compression profile 
        for a future change in the use of reserved fields.  For this 
        reason the alternative encoding of CHANGING is suggested.  It 
        would also be possible to have more than one compression 
        profile, in one of which this field was considered to be 
        STATIC-KNOWN. 
 
        The More Fragments (MF) flag is expected to be zero because 
        fragmentation is generally not expected.  As discussed in the 
        RTP case, only the first fragment will contain the transport 
        layer protocol header; subsequent fragments would have to be 
        compressed with a different profile.  In terms of the effect of 
        header overhead, if fragmentation does occur then the first 
        fragment, by definition, should be relatively large, minimizing 
        the header overhead.  In the case of TCP, fragmentation should 
        not be common due to a combination of initial MSS negotiation 
        and subsequent use of path-MTU discovery. The More Fragments 
        flag is therefore classified as STATIC-KNOWN.   
        However, a profile could accept that this flag may be set in 
        order to cope with fragmentation. 
    
   Fragment Offset 
         
        Under the assumption that no fragmentation occurs, the fragment 
   offset is always zero. The field is therefore classified as STATIC-
   KNOWN.  Even if fragmentation were to be further considered, then 
   only the first fragment would contain the TCP header and would still 
   be zero. 
    
   Protocol  
         
        This field will usually have the same value in all packets of a 
   packet stream. It encodes the type of the subsequent header. Only 
   when extension headers are sometimes present and sometimes not, will 
   the field change its value during the lifetime of a stream. The 
   field is therefore classified as STATIC.  
 
   Header Checksum  
    
        The header checksum protects individual hops from processing a 
   corrupted header. When almost all IP header information is 
   compressed away, there is no point in having this additional 
   checksum; instead it can be regenerated at the decompressor side. 
   The field is therefore classified as INFERRED. 
    
   Source and Destination addresses  
    
        These fields are part of the definition of a stream and must 
   thus be constant for all packets in the stream. The fields are 
   therefore classified as STATIC-DEF. 
 
   Total size of the fields in each class: 

West et al.                                                   [PAGE 7] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
     
                       +--------------+----------------+  
                       | Class        | Size (octets)  |  
                       +--------------+----------------+  
                       | INFERRED     |        4       |  
                       | STATIC*      |    1 + 4 bits  |  
                       | STATIC-DEF   |        8       |  
                       | STATIC-KNOWN*|    2 + 2 bits  |  
                       | CHANGING*    |    4 + 2 bits  |  
                       +--------------+----------------+ 
    
   * differs from [RFC 3095] 
    
    
3.2. TCP header fields 
    
          +---------------------+-------------+----------------+  
          | Field               | Size (bits) |      Class     |  
          +---------------------+-------------+----------------+  
          | Source Port         |     16      |    STATIC-DEF  |  
          | Destination Port    |     16      |    STATIC-DEF  |  
          | Sequence Number     |     32      |     CHANGING   |  
          | Acknowledgement Num |     32      |     CHANGING   |  
          | Data Offset         |      4      |     INFERRED   |  
          | Reserved            |      4      |     CHANGING   | 
          | ECN flags           |      2      |     CHANGING   | 
          | CWR flag            |      1      |     CHANGING   | 
          | ECE flag            |      1      |     CHANGING   | 
          | URG flag            |      1      |     CHANGING   | 
          | ACK flag            |      1      |     CHANGING   | 
          | PSH flag            |      1      |     CHANGING   | 
          | RST flag            |      1      |     CHANGING   | 
          | SYN flag            |      1      |     CHANGING   | 
          | FIN flag            |      1      |     CHANGING   | 
          | Window              |     16      |     CHANGING   |  
          | Checksum            |     16      |     CHANGING   |  
          | Urgent Pointer      |     16      |     CHANGING   |   
          | Options             |   0(-352)   |     CHANGING   |   
          +---------------------+-------------+----------------+  
    
   Source and Destination ports 
         
        These fields are part of the definition of a stream and must 
   thus be constant for all packets in the stream. The fields are 
   therefore classified as STATIC-DEF. 
         
   Data Offset 
        
       The number of 4 octet words in the TCP header, thus indicating 
   The start of the data. It is always a multiple of 4 octets. It can 
   be re-constructed from the length of any options and is not 
   necessary. The field is therefore classified as INFERRED. 
    
    

West et al.                                                   [PAGE 8] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
3.3. Summary for IP/TCP 
    
   Summarizing this for IP/TCP one obtains  
    
          +----------------+----------------+----------------+  
          | Class \ IP ver | IPv6 (octets)  | IPv4 (octets)  |  
          +----------------+----------------+----------------+  
          | INFERRED       |   2 + 4 bits   |   4 + 4 bits   |  
          | STATIC         |   1 + 4 bits   |   1 + 4 bits   |  
          | STATIC-DEF     |  38 + 4 bits   |      12        |  
          | STATIC-KNOWN   |       -        |   2 + 2 bits   |  
          | CHANGING       |  17 + 6 bits   |      17        | 
          |                |(- 61 + 6 bits) |    (- 61)      |  
          +----------------+----------------+----------------+  
          | Totals         |  60 + 2 bits   |  37 + 2 bits   | 
          |                |(- 104 + 2 bits)|(- 81 + 2 bits) |  
          +----------------+----------------+----------------+  
 
4. Analysis of change patterns of header fields 
    
   To design suitable mechanisms for efficient compression of all 
   header fields, their change patterns must be analyzed. For this 
   reason, an extended classification is done based on the general 
   classification in 2, considering the fields which were labeled 
   CHANGING in that classification. Different applications will use the 
   fields in different ways, which may affect their behavior. For the 
   fields whose behavior is variable, typical behavior for 
   conversational audio and video will be discussed.  
    
   The CHANGING fields are separated into five different subclasses:  
    
   STATIC       These are fields that were classified as CHANGING on a 
   general basis, but are classified as STATIC here due to certain 
   additional assumptions.  
    
   SEMISTATIC   These fields are STATIC most of the time. However, 
   occasionally the value changes but reverts to its original value 
   after a known number of packets.  
    
   RARELY-CHANGING (RC) These are fields that change their values 
   occasionally and then keep their new values.  
    
   ALTERNATING  These fields alternate between a small number of 
   different values.  
    
   IRREGULAR    These, finally, are the fields for which no useful 
   change pattern can be identified.  
    
   To further expand the classification possibilities without 
   increasing complexity, the classification can be done either 
   according to the values of the field and/or according to the values 
   of the deltas for the field.  
    


West et al.                                                   [PAGE 9] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
   When the classification is done, other details are also stated 
   regarding possible additional knowledge about the field values 
   and/or field deltas, according to the classification. For fields 
   classified as STATIC or SEMISTATIC, the case could be that the value 
   of the field is not only STATIC but also well KNOWN a priori (two 
   states for SEMISTATIC fields). For fields with non-irregular change 
   behavior, it could be known that changes usually are within a 
   LIMITED range compared to the maximal change for the field. For 
   other fields, the values are completely UNKNOWN.  
    
   Table 1 classifies all the CHANGING fields on the basis of their 
   expected change patterns. (4) refers to IPv4 fields and (6) refers 
   to IPv6. 
    
    
   +------------------------+-------------+-------------+-------------+ 
   | Field                  | Value/Delta |    Class    |  Knowledge  | 
   +========================+=============+=============+=============+ 
   | IP TOS(4) / Tr.Class(6)| Value       |      RC     |   UNKNOWN   | 
   +------------------------+-------------+-------------+-------------+ 
   | IP ECT flag(4)         | Value       |      RC     |   UNKNOWN   | 
   +------------------------+-------------+-------------+-------------+ 
   | IP CE flag(4)          | Value       |      RC     |   UNKNOWN   | 
   +------------------------+-------------+-------------+-------------+ 
   |             Sequential | Delta       |    STATIC   |    KNOWN    | 
   |             -----------+-------------+-------------+-------------+  
   | IP Id(4)     Seq. jump | Delta       |      RC     |   LIMITED   | 
   |             -----------+-------------+-------------+-------------+ 
   |                 Random | Value       |  IRREGULAR  |   UNKNOWN   | 
   +------------------------+-------------+-------------+-------------+ 
   | IP DF flag(4)          | Value       |      RC     |   UNKNOWN   | 
   +------------------------+-------------+-------------+-------------+ 
   | IP TTL(4) / Hop Lim(6) | Value       | ALTERNATING |   LIMITED   | 
   +------------------------+-------------+-------------+-------------+ 
   | TCP Sequence Number    ª Delta       ª  IRREGULAR  ª   LIMITED   ª   
   +------------------------+-------------+-------------+-------------+  
   ª TCP Acknowledgement Numª Delta       ª  IRREGULAR  ª   LIMITED   ª 
   +------------------------+-------------+-------------+-------------+  
   ª TCP Reserved           ª Value       ª      RC     ª   UNKNOWN   ª 
   +------------------------+-------------+-------------+-------------+  
   ª TCP ECN flags          ª Value       ª  IRREGULAR  ª   UNKNOWN   ª 
   +------------------------+-------------+-------------+-------------+ 
   ª TCP CWR flag           ª Value       ª  IRREGULAR  ª   UNKNOWN   ª 
   +------------------------+-------------+-------------+-------------+ 
   ª TCP ECE flag           ª Value       ª  IRREGULAR  ª   UNKNOWN   ª 
   +------------------------+-------------+-------------+-------------+  
   ª TCP URG flag           ª Value       ª  IRREGULAR  ª   UNKNOWN   ª 
   +------------------------+-------------+-------------+-------------+ 
   ª TCP ACK flag           ª Value       ª  SEMISTATIC ª    KNOWN    ª 
   +------------------------+-------------+-------------+-------------+ 
   ª TCP PSH flag           ª Value       ª  IRREGULAR  ª   UNKNOWN   ª 
   +------------------------+-------------+-------------+-------------+ 
   ª TCP RST flag           ª Value       ª  IRREGULAR  ª   UNKNOWN   ª 
   +------------------------+-------------+-------------+-------------+ 

West et al.                                                  [PAGE 10] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
   ª TCP SYN flag           ª Value       ª  SEMISTATIC ª    KNOWN    ª 
   +------------------------+-------------+-------------+-------------+  
   ª TCP FIN flag           ª Value       ª  SEMISTATIC ª    KNOWN    ª 
   +------------------------+-------------+-------------+-------------+ 
   ª TCP Window             ª Value       ª ALTERNATING ª    KNOWN    ª 
   +------------------------+-------------+-------------+-------------+ 
   ª TCP Checksum           ª Value       ª  IRREGULAR  ª   UNKNOWN   ª 
   +------------------------+-------------+-------------+-------------+ 
   ª TCP Urgent Pointer     ª Value       ª  IRREGULAR  ª    KNOWN    ª 
   +------------------------+-------------+-------------+-------------+  
   ª TCP Options            ª Value       ª  IRREGULAR  ª   UNKNOWN   ª 
   +------------------------+-------------+-------------+-------------+ 
    
    
            Table 1 : Classification of CHANGING header fields 
    
   The following subsections discuss the various header fields in 
   detail. Note that table 1 and the discussions below do not consider 
   changes caused by loss or reordering before the compression point. 
    
4.1. IP header fields 
    
4.1.1. IP Traffic-Class / Type-Of-Service (TOS) 
    
   The Traffic-Class (IPv6) or Type-Of-Service (IPv4) field might be 
   expected to change during the lifetime of a packet stream.  This 
   analysis considers several RFCs that describe modifications to the 
   original [RFC 791]. 
 
   The TOS byte was initially described in [RFC 791] as 3 bits of 
   precedence followed by 3 bits of TOS and 2 reserved bits (defined to 
   be 0).  [RFC 1122] extended this to specify 5 bits of TOS, although 
   the meanings of the additional 2 bits were not defined.  [RFC 1349] 
   defined the 4th bit of TOS to be 'minimize monetary cost'.   
   The next significant change was in [RFC 2474] which reworked the TOS 
   octet as 6 bits of DSCP (DiffServ Code Point) plus 2 unused bits. 
   Most recently [RFC 2780] identified the 2 reserved bits in the TOS 
   or traffic class octet for experimental use with ECN. 
    
   For the purposes of this classification, it is therefore proposed to 
   classify the TOS (or traffic class) octet as 6 bits for the DSCP and 
   2 additional bits.  This may be expected to be 0 or to contain ECN 
   data.  From a future proofing perspective, it is preferable to 
   assume the use of ECN, especially with respect to TCP. 
    
   It is also considered important that the profile works with legacy 
   stacks, since these will be in existence for some considerable time 
   to come.  For simplicity, this will be considered as 6 bits of TOS 
   information and 2 bits of ECN data, so the fields are always 
   considered to be structured the same way. 
 
   The DSCP (as for TOS in ROHC RTP) is not expected to change 
   frequently. 
    

West et al.                                                  [PAGE 11] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
4.1.2. ECN Flags 
    
   Initially we describe the ECN flags as specified in [RFC 2481].  
   Subsequently, a suggested update is described which would alter the 
   behaviour of the flags. 
    
   In [RFC 2481] there are 2 separate flags, the ECT (ECN Capable 
   Transport) flag and the CE (Congestion Experienced) flag. 
   The ECT flag, if negotiated by the TCP stack, will be æ1Æ for all 
   data packets and æ0Æ for all 'pure acknowledgement' packets.  This 
   means that the behavior of the ECT flag is linked to behavior in the 
   TCP stack.  Whether this can be exploited for compression is not 
   clear. 
    
   The CE flag is only used if ECT is set to æ1Æ and indicates 
   congestion in the network.  The CE flag is expected to be randomly 
   (and comparatively rarely, although this is dependent upon the 
   network congestion state) set to '1'. 
    
   A recent draft [nonce] suggests an alternative view of these 2 bits.  
   This considers the two bits together as having 4 possible 
   codepoints.  Meanings are then assigned to the codepoints: 
    
        00      Not ECN capable 
        01      ECN capable, no congestion [known as ECT(0)] 
        10      ECN capable, no congestion [known as ECT(1)] 
        11      Congestion experienced 
    
   The use of 2 codepoints for signaling ECT allows the sender to 
   detect when a receiver is not reliably echoing congestion 
   information. 
    
   For the purposes of compression, this update means that ECT(0) and 
   ECT(1) are equally likely (for an ECN capable flow) and that æ11Æ 
   will be relatively rarely seen. 
 
4.1.3. IP Identification 
 
   The Identification field (IP ID) of the IPv4 header is there to 
   identify which fragments constitute a datagram when reassembling 
   fragmented datagrams. The IPv4 specification does not specify 
   exactly how this field is to be assigned values, only that each 
   packet should get an IP ID that is unique for the source-destination 
   pair and protocol for the time the datagram (or any of its 
   fragments) could be alive in the network. This means that assignment 
   of IP ID values can be done in various ways, which we have separated 
   into three classes: 
    
   Sequential jump  
         
        This is the most common assignment policy in today's IP stacks. 
   A single IP ID counter is used for all packet streams. When the 
   sender is running more than one packet stream simultaneously, the IP 
   ID can increase by more than one between packets in a stream. The IP 

West et al.                                                  [PAGE 12] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
   ID values will be much more predictable and require less bits to 
   transfer than random values, and the packet-to-packet increment 
   (determined by the number of active outgoing packet streams and 
   sending frequencies) will usually be limited.  
    
   Random  
    
        Some IP stacks assign IP ID values using a pseudo-random number 
   generator. There is thus no correlation between the ID values of 
   subsequent datagrams. Therefore there is no way to predict the IP ID 
   value for the next datagram. For header compression purposes, this 
   means that the IP ID field needs to be sent uncompressed with each 
   datagram, resulting in two extra octets of header. IP stacks in 
   cellular terminals SHOULD NOT use this IP ID assignment policy. 
         
         
   Sequential  
    
        This assignment policy keeps a separate counter for each 
   outgoing packet stream and thus the IP ID value will increment by 
   one for each packet in the stream, except at wrap around. Therefore, 
   the delta value of the field is constant and well known a priori. 
   This assignment policy is the most desirable for header compression 
   purposes. However, its usage is not as common as it perhaps should 
   be. 
         
   In order to avoid violating [IPv4], packets sharing the same IP 
   address pair and IP protocol number cannot use the same IP ID 
   values. Therefore, implementations of sequential policies must make 
   the ID number spaces disjoint for packet streams of the same IP 
   protocol going between the same pair of nodes. This can be done in a 
   number of ways, all of which introduce occasional jumps, and thus 
   makes the policy less than perfectly sequential. For header 
   compression purposes less frequent jumps are preferred. 
    
   It should be noted that the ID is an IPv4 mechanism and is therefore 
   not a problem for IPv6. For IPv4 the ID could be handled in three 
   different ways. First, we have the inefficient but reliable solution 
   where the ID field is sent as-is in all packets, increasing the 
   compressed headers by two octets. This is the best way to handle the 
   ID field if the sender uses random assignment of the ID field. 
   Second, there can be solutions with more flexible mechanisms 
   requiring less bits for the ID handling as long as sequential jump 
   assignment is used. Such solutions will probably require even more 
   bits if random assignment is used by the sender. Knowledge about the 
   sender's assignment policy could therefore be useful when choosing 
   between the two solutions above. Finally, even for IPv4, header 
   compression could be designed without any additional information for 
   the ID field included in compressed headers. To use such schemes, it 
   must be known which assignment policy for the ID field is being used 
   by the sender. That might not be possible to know, which implies 
   that the applicability of such solutions is very uncertain. However, 
   designers of IPv4 stacks for cellular terminals SHOULD use an 
   assignment policy close to sequential. 

West et al.                                                  [PAGE 13] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
    
   With regard to TCP compression, the behavior of the IP ID field is 
   considered to be essentially the same.  However, it is noted that 
   the IP ID was generally inferred from the RTP Sequence Number.  
   There is no obvious candidate in the TCP case for a field to offer 
   this æmaster sequence numberÆ role. 
    
   Clearly from a busy server the observed behavior may well be quite 
   erratic.  This is a case where the ability to share the IP 
   compression context between a number of flows (between the same end-
   points) would offer potential benefits. 
    
4.1.4. Don't Fragment (DF) flag 
    
   Due to the use of path-MTU discovery [RFC 1191], the value is more 
   likely to be '1', than found in UDP/RTP streams since DF should be 
   periodically set to check for fragmentation in the end-to-end path.  
   In practice it is hard to predict the behavior of this field.  
   However, it is considered that the most likely case is that it will 
   generally stay at either æ0Æ (periodically being set to æ1Æ) or æ1Æ. 
    
4.1.5. IP Hop-Limit / Time-To-Live (TTL) 
    
   The Hop-Limit (IPv6) or Time-To-Live (IPv4) field is expected to be 
   constant during the lifetime of a packet stream or to alternate 
   between a limited number of values due to route changes. 
    
4.2. TCP header fields 
    
   Any discussion of compressability of TCP fields borrows heavily from 
   [RFC 1144].  However, the premise of how the compression is 
   performed is slightly different and the protocol has evolved 
   slightly in the intervening time. 
    
4.2.1. Sequence number 
    
   An understanding of the sequence and acknowledgement number behavior 
   are essential for a TCP compression scheme. 
    
   At the simplest level the behavior of the sequence number can be 
   described relatively easily.  However, there are a number of 
   complicating factors that also need to be considered. 
    
   For transferring in-sequence data packets, the sequence number will 
   increment for each packet by between 0 and an upper limit defined by 
   the MSS (Maximum Segment Size). 
    
   However, at any point on the path (i.e. wherever a compressor might 
   be deployed), the sequence number can be anywhere within a range 
   defined by the TCP window.  This is a combination of a number of 
   values (buffer space at the sender; advertised buffer size at the 
   receiver; and TCP congestion control algorithms).  Missing packets 
   or retransmissions can cause the TCP sequence number to fluctuate 
   within the limits of this window. 

West et al.                                                  [PAGE 14] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
 
   It would also be desirable to be able to predict the sequence number 
   from some regularity.  However, this also appears to be difficult to 
   do.  For example, during bulk data transfer the sequence number will 
   tend to go up by 1 MSS per packet (assuming no packet loss).  Higher 
   level values have been seen to have an impact as well, where 
   sequence number behavior has been observed with an 8 kbyte repeating 
   pattern - 5 segments of 1460 bytes followed by 1 segment of 892 
   bytes.  It appears that implementation and how data is presented to 
   the stack can affect the sequence number.  
    
   It has been suggested that the TCP window can be tracked by the 
   compressor, allowing it to bound the size of these jumps. 
    
   For interactive flows (for example telnet), the sequence number will 
   change by small irregular amounts.  In this case the Nagle algorithm 
   commonly applies, coalescing small packets where possible to reduce 
   the basic header overhead.  This may also mean that is less likely 
   that predictable changes in the sequence number will occur. 
    
   It is also noted that the SYN and FIN flags (which have to be 
   acknowledged) consume 1 byte of sequence space. 
    
4.2.2. Acknowledgement number 
    
   Much of the information about the sequence number applies equally to 
   the acknowledgement number.  However, there are some important 
   differences. 
    
   For bulk data transfers there will tend to be 1 acknowledgement for 
   every 2 data segments.  It may be seen from this that the delta for 
   the acknowledgement number is roughly twice that of the sequence 
   number.  This is not always the case and the discussion about 
   sequence number irregularity should be applied. 
    
   As an aside, a common implementation bug was æstretch ACKsÆ 
   (acknowledgements may be generated less frequently than every two 
   full-size data segments). 
 
   Since the acknowledgement number is cumulative, dropped packets in 
   the forward path will result in the acknowledgement number remaining 
   constant for a time in the reverse direction.  Retransmission of a 
   dropped segment can then cause a substantial jump in the 
   acknowledgement number.  These jumps in acknowledgement number are 
   bounded by the TCP window, just as for the jumps in sequence number. 
    
4.2.3. Reserved 
    
   This field is reserved and as such might be expected to be zero.  
   This can no longer be assumed due to future proofing as it is only a 
   matter of time before a suggestion for using the flag is made. 
 
 
 

West et al.                                                  [PAGE 15] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
4.2.4. Flags 
    
   ECN-E (Explicit Congestion Notification) 
        '1' to echo CE bit in IP header.  Will be set in several 
   consecutive headers (until 'acknowledged' by CWR) 
    
        If ECN nonces get used, then there will be a 'nonce-sum' (NS) 
   bit in the flags, as well.  Again, transparency of the reserved bits 
   is crucial for future-proofing this compression scheme...  From an 
   efficiency/compression standpoint, the NS bit will either be unused 
   [always 0] or randomly changing) 
    
   CWR  (Congestion Window Reduced) 
    
        '1' to signal congestion window reduced on ECN. Will generally 
   be set in individual packets 
    
   ECE  (Echo Congestion Experience) 
    
        If æcongestion experiencedÆ is signaled on a received IP 
   header, this is echoed through the ECE bit in segments sent by the 
   receiver until acknowledged by seeing the CWR bit set. 
 
   During connection open (SYN and SYN/ACK packets) the ECN bits have 
   special meaning: 
    
        CWR + ECN-E are both set with SYN to indicate desire to use ECN 
        CWR only is set in SYN-ACK to agree ECN 
   (The difference in bit-patterns for the negotiation is so that it 
   will work with broken stacks that reflect the value of reserved 
   bits) 
    
   URG  (Urgent Flag) 
    
        '1' to indicate urgent data [unlikely with any flag other than 
   ACK] 
    
   ACK  (Acknowledgement) 
    
        '1' for all except the initial 'SYN' packet 
    
   PSH  (Push Function Field) 
    
        generally accepted to be randomly '0' or '1'. However, may be 
   biased more to one value than the other (this is largely down to the 
   implementation of the stack) 
    
   RST  (Reset Connection) 
    
        '1' to reset a connection [unlikely with any flag other than 
   ACK] 
    
   SYN  (Synchronize Sequence Number) 
    

West et al.                                                  [PAGE 16] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
        '1' for the SYN/SYN-ACK only at the start of a connection 
    
    
   FIN  (End of Data : FINished) 
    
        '1' to indicate 'no more data' [unlikely with any flag other 
   than ACK] 
 
4.2.5. Checksum 
    
   Carried as the end-to-end check for the TCP data.  See [RFC 1144] 
   for a discussion of why this should be carried.  There may be more 
   complex interactions with error detection and robustness that would 
   have to be addressed in a TCP header compression scheme.  The TCP 
   checksum has to be considered as randomly changing. 
    
4.2.6. Window 
    
   May oscillate randomly between 0 and the receiverÆs window limit 
   (for the connection). 
    
   In practice, the window would not change, or may alternate between a 
   relatively small number of values.  Particularly when closing (the 
   value is getting smaller), the change in window is likely to be 
   related to the segment size, but it not clear that this necessarily 
   offers any compression advantage.  When the window is opening, the 
   effect of æSilly-Window SyndromeÆ avoidance should be remembered.  
   This prevents the window opening by small amounts that would 
   encourage the sender to clock out small segments.   
    
   When thinking about what fields might change in a sequence of TCP 
   segments, it should be noted that the receiver can generate 'window 
   update' segments in which only the window advertisement changes. 
 
4.2.7. Urgent pointer 
    
   From a compression point of view, the Urgent Pointer is interesting 
   because it offers an example where æsemantically identicalÆ 
   compression is not the same as æbitwise identicalÆ.  This is because 
   the value of the Urgent Pointer is only valid if the URG flag is 
   set. 
    
   However, from the discussion of the TCP Checksum above, it should be 
   realized that this enforces bitwise transparency of the scheme and 
   so this argument is not particularly important. 
    
   If the URG flag is set, then this pointer indicates the end of the 
   urgent data and so can be point to anywhere in the window.  This may 
   be set (and changing) over several segments.  Note that urgent data 
   is rarely used, since it is not a particularly clean way of managing 
   out-of-band data. 
    
    
    

West et al.                                                  [PAGE 17] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
4.3. Options 
    
   Options occupy space at the end of the TCP header. All options are 
   included in the checksum. An option may begin on any byte boundary. 
   The TCP header must be padded with zeros to make the header length a 
   multiple of 32 bits. 
    
   Optional header fields are identified by an option kind field. 
   Options 0 and 1 are exactly one octet that is their kind field. All 
   other options have their one octet kind field, followed by a one 
   octet length field, followed by length-2 octets of option data. 
    
4.3.1. Options overview 
    
   Table 2 classifies the IANA known options together with their 
   associated RFCs, if applicable [IANA] 
 
   +------+--------+------------------------------------+------------+  
   ª Kind ª Length ª               Meaning              ª     RFC    ª 
   ª      ª(octets)ª                                    ª            ª 
   +------+--------+------------------------------------+------------+ 
   ª   0  ª    -   ª End of Option List                 ª [RFC 793]  ª 
   ª   1  ª    -   ª No-Operation                       ª [RFC 793]  ª 
   ª   2  ª    4   ª Maximum Segment Size               ª [RFC 793]  ª 
   ª   3  ª    3   ª WSopt - Window Scale               ª [RFC 1323] ª  
   ª   4  ª    2   ª SACK Permitted                     ª [RFC 2018] ª  
   ª   5  ª    N   ª SACK                               ª [RFC 2018] ª  
   ª   6  ª    6   ª Echo (obsoleted by option 8)       ª [RFC 1072] ª  
   ª   7  ª    6   ª Echo Reply (obsoleted by option 8) ª [RFC 1072] ª 
   ª   8  ª   10   ª TSopt - Time Stamp Option          ª [RFC 1323] ª   
   ª   9  ª    2   ª Partial Order Connection Permitted ª [RFC 1693] ª  
   ª  10  ª    3   ª Partial Order Service Profile      ª [RFC 1693] ª  
   ª  11  ª    6   ª CC                                 ª [RFC 1644] ª  
   ª  12  ª    6   ª CC.NEW                             ª [RFC 1644] ª  
   ª  13  ª    6   ª CC.ECHO                            ª [RFC 1644] ª  
   ª  14  ª    3   ª Alternate Checksum Request         ª [RFC 1146] ª  
   ª  15  ª    N   ª Alternate Checksum Data            ª [RFC 1146] ª  
   ª  16  ª        ª Skeeter                            ª            ª 
   ª  17  ª        ª Bubba                              ª            ª 
   ª  18  ª    3   ª Trailer Checksum Option            ª            ª  
   ª  19  ª   18   ª MD5 Signature Option               ª [RFC 2385] ª  
   ª  20  ª        ª SCPS Capabilities                  ª            ª 
   ª  21  ª        ª Selective Negative Acknowledgementsª            ª  
   ª  22  ª        ª Record Boundaries                  ª            ª 
   ª  23  ª        ª Corruption experienced             ª            ª 
   ª  24  ª        ª SNAP                               ª            ª 
   ª  25  ª        ª Unassigned (released 12/18/00)     ª            ª 
   ª  26  ª        ª TCP Compression Filter             ª            ª 
   +------+--------+------------------------------------+------------+ 
 
                 Table 2 Description of common TCP options 
    
    
    

West et al.                                                  [PAGE 18] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
4.3.2. Option field behavior 
    
   Generally speaking all option fields have been classified as 
   changing. This section describes the behavior of each option 
   referenced within an RFC, listed by ôkindö indicator. 
    
   0. End of option list 
    
        This option code indicates the end of the option list. This 
   might not coincide with the end of the TCP header according to the 
   Data Offset field. This is used at the end of all options, not the 
   end of each option, and need only be used if the end of the options 
   would not otherwise coincide with the end of the TCP header. [RFC 
   793] 
    
   There is no data associated with this option, a compression scheme 
   must simply be able to encode its presence. 
    
   1. No-Operation  
    
        This option code may be used between options, for example, to 
   align the beginning of a subsequent option on a word boundary. There 
   is no guarantee that senders will use this option, so receivers must 
   be prepared to process options even if they do not begin on a word 
   boundary [RFC 793]. 
    
   There is no data associated with this option, a compression scheme 
   must simply be able to encode its presence. 
    
   2. Maximum Segment Size  
    
        If this option is present, then it communicates the maximum 
   receive segment size at the TCP that sends this segment. This field 
   must only be sent in the initial connection request (i.e., in 
   segments with the SYN control bit set). If this option is not used, 
   any segment size is allowed [RFC 793]. 
         
        This option is very common.  The segment size is a 16-bit 
   quantity.  Theoretically this could take any value, however there 
   are a number of values that are more common.  For example, 1460 
   bytes are very common for TCP/IPv4 over Ethernet.  536 bytes is the 
   default MSS value.  This may allow for common values to be encoded 
   more efficiently. 
         
   3. Window Scale Option (WSopt) 
    
        This option may be sent in a SYN segment by TCP : 
    
   (1)  to indicate that it is prepared to do both send and receive 
        window scaling, and  
    
   (2)  to communicate a scale factor to be applied to its receive 
        window. 
 

West et al.                                                  [PAGE 19] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
        The scale factor is encoded logarithmically, as a power of 2 
   (presumably to be implemented by binary shifts). Note: the window in 
   the SYN segment itself is never scaled [RFC 1072]. 
         
        This option may be sent in an initial segment (i.e., a segment 
   with the SYN bit on and the ACK bit off). It may also be sent in a 
   segment, but only if a Window Scale option was received in the 
   initial segment. A Window Scale option in a segment without a SYN 
   bit should be ignored. The Window field in a SYN segment itself is 
   never scaled [RFC 1323] 
         
        The use of window scaling does not affect the encoding of any 
   other field during the life-time of the flow.  It is only the 
   encoding of the window scaling option itself that is important. 
         
        The window scale must be between 0 and 14 (inclusive).  
   Generally smaller values would be expected (a window scale of 14 
   allows for a 1Gbyte window, which is extremely large). 
          
   4. SACK-Permitted 
    
        This option may be sent in a SYN by a TCP that has been 
   extended to receive (and presumably process) the SACK option once 
   the connection has opened [RFC 2018]. 
         
        There is no data in this option, all that is required is for 
   the presence of the option to be encoded. 
         
   5. SACK 
         
        This option is to be used to convey extended acknowledgment 
   information over an established connection. Specifically, it is to 
   be sent by a data receiver to inform the data transmitter of non-
   contiguous blocks of data that have been received and queued. The 
   data receiver is awaiting the receipt of data in later 
   retransmissions to fill the gaps in sequence space between these 
   blocks.  
         
        At that time, the data receiver will acknowledge the data 
   normally by advancing the left window edge in the Acknowledgment 
   Number field of the TCP header. It is important to understand that 
   the SACK option will not change the meaning of the Acknowledgment 
   Number field, whose value will still specify the left window edge, 
   i.e., one byte beyond the last sequence number of fully-received 
   data [RFC 2018]. 
         
        If SACK has been negotiated (through an exchange of SACK-
   Permitted options), then this option may occur when dropped segments 
   are noticed by the receiver.  Because this identifies ranges of 
   blocks within the receiverÆs window, this can be viewed as a base 
   value with a number of offsets.  There can be up to 4 SACK blocks in 
   a single option.  SACK blocks may occur in a number of segments (if 
   there is more out-of-order data æon the wireÆ) and this will 
   typically extend the size of or add to the existing blocks. 

West et al.                                                  [PAGE 20] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
         
        Alternative proposals such as DSACK [RFC 2883] do not 
   fundamentally change the behavior of the SACK block, from the point 
   of view of the information contained within it. 
         
   6. Echo 
         
        This option carries information that the receiving TCP may send 
   back in a subsequent TCP Echo Reply option (see below). A TCP may 
   send the TCP Echo option in any segment, but only if a TCP Echo 
   option was received in a SYN segment for the connection. When the 
   TCP echo option is used for RTT measurement, it will be included in 
   data segments, and the four information bytes will define the time 
   at which the data segment was transmitted in any format convenient 
   to the sender [RFC 1072]. 
         
        The Echo option is generally not used in practice û it is 
   obsoleted by the Timestamp option.  However, for transparency it is 
   desirable that a compression scheme be able to encode it. 
         
   7. Echo Reply 
    
        A TCP that receives a TCP Echo option containing four 
   information bytes will return these same bytes in a TCP Echo Reply 
   option. This TCP Echo Reply option must be returned in the next 
   segment (e.g., an ACK segment) that is sent. If more than one Echo 
   option is received before a reply segment is sent, the TCP must 
   choose only one of the options to echo, ignoring the others; 
   specifically, it must choose the newest segment with the oldest 
   sequence number (see [RFC 1072]). 
    
        The Echo option is generally not used in practice û it is 
   obsoleted by the Timestamp option.  However, for transparency it is 
   desirable that a compression scheme be able to encode it. 
         
   8. Timestamps 
    
        This option carries two four-byte timestamp fields. The 
   Timestamp Value field (TSval) contains the current value of the 
   timestamp clock of the TCP sending the option. The Timestamp Echo 
   Reply field (TSecr) is only valid if the ACK bit is set in the TCP 
   header; if it is valid, it echoes a timestamp value that was sent by 
   the remote TCP in the TSval field of a Timestamps option. When TSecr 
   is not valid, its value must be zero. The TSecr value will generally 
   be from the most recent Timestamp option that was received; however, 
   there are exceptions that are explained below. A TCP may send the 
   Timestamps option (TSopt) in an initial segment (i.e., segment 
   containing a SYN bit and no ACK bit), and may send a TSopt in other 
   segments only if it received a TSopt in the initial segment for the 
   connection [RFC 1323]. 
         
        Timestamps are quite commonly used.  If timestamp options are 
   exchanged in the connection set-up phase, then they will appear on 


West et al.                                                  [PAGE 21] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
   all subsequent segments.  If this exchange does not happen, then 
   they will not appear for the remainder of the flow. 
         
        Because the value being carried is a timestamp, it is logical 
   to expect that the entire value need not be carried.  There is no 
   obvious pattern of increments that might be expected, however. 
         
        An important reason for using the timestamp option is to allow 
   detection of sequence space wrap-around (Protection Against Wrapped 
   Sequence-number, or PAWS [RFC 1323]).  It is not expected that this 
   is serious concern on the links that TCP header compression would be 
   deployed on, but it is important that the integrity of this option 
   is maintained. 
         
   9. Partial Order Connection (POC) permitted 
    
        This option represents a simple indicator communicated between 
   the two peer transport entities to establish the operation of the 
   POC protocol [RFC 1693] 
         
        The Partial Order Connection option is in practice never seen, 
   and so the only requirement is that the header compression scheme 
   should be able to encode it. 
         
   10. POC service profile  
    
        This option serves to communicate the information necessary to 
   carry out the job of the protocol - the type of information that is 
   typically found in the header of a TCP segment. 
         
        The Partial Order Connection option is in practice never seen, 
   and so the only requirement is that the header compression scheme 
   should be able to encode it. 
    
   11. Connection Count (CC) 
         
        This option is part of the implementation of TCP Accelerated 
   Open (TAO) that effectively bypasses the TCP Three-Way Handshake 
   (3WHS). TAO introduces a 32-bit incarnation number, called a 
   "connection count" (CC) that is carried in a TCP option in each 
   segment. A distinct CC value is assigned to each direction of an 
   open connection. The implementation assigns monotonically increasing 
   CC values to successive connections that it opens actively or 
   passively [RFC 1644]. 
         
        This option is in practice never seen, and so the only 
   requirement is that the header compression scheme should be able to 
   encode it. 
         
   12. CC.NEW  
    
        Correctness of the TAO mechanism requires that clients generate 
   monotonically increasing CC values for successive connection 


West et al.                                                  [PAGE 22] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
   initiations.  Receiving a CC.NEW causes the server to invalidate its 
   cache entry and do a 3WHS. [RFC 1644]. 
         
        This option is in practice never seen, and so the only 
   requirement is that the header compression scheme should be able to 
   encode it. 
    
   13. CC.ECHO  
    
        When a server host sends a segment, it echoes the connection 
   count from the initial in a CC.ECHO option, which is used by the 
   client host to validate the segment [RFC 1644]. 
         
        This option is in practice never seen, and so the only 
   requirement is that the header compression scheme should be able to 
   encode it. 
         
   14. Alternate Checksum Request 
    
        This option may be sent in a SYN segment by a TCP to indicate 
   that the TCP is prepared to both generate and receive checksums 
   based on an alternate algorithm. During communication, the alternate 
   checksum replaces the regular TCP checksum in the checksum field of 
   the TCP header. Should the alternate checksum require more than 2 
   octets to transmit, the checksum may either be moved into a TCP 
   Alternate Checksum Data Option and the checksum field of the TCP 
   header be sent as 0, or the data may be split between the header 
   field and the option. Alternate checksums are computed over the same 
   data as the regular TCP checksum [RFC 1146] 
         
        This option is in practice never seen, and so the only 
   requirement is that the header compression scheme should be able to 
   encode it.  It would only occur in connection set-up (SYN) packets. 
         
        Even if this option were used, it would not affect the handling 
   of the checksum, since this should be carried transparently in any 
   case. 
 
   15. Alternate Checksum Data 
         
        This field is used only when the alternate checksum that is 
   negotiated is longer than 16 bits. These checksums will not fit in 
   the checksum field of the TCP header and thus at least part of them 
   must be put in an option. Whether the checksum is split between the 
   checksum field in the TCP header and the option or the entire 
   checksum is placed in the option is determined on a checksum by 
   checksum basis. The length of this option will depend on the choice 
   of alternate checksum algorithm for this connection [RFC 1146]. 
         
        If an alternative checksum were negotiated in the connection 
   set-up, then this option may appear on all subsequent packets (if 
   needed to carry the checksum data).  However, this option is in 
   practice never seen, and so the only requirement is that the header 
   compression scheme should be able to encode it. 

West et al.                                                  [PAGE 23] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
         
   16. û 18. Are non-RFC references and are not considered in this 
   document. 
         
   19. MD5 Digest 
         
        Every segment sent on a TCP connection to be protected against 
   spoofing will contain the 16-byte MD5 digest produced by applying 
   the MD5 algorithm to a concatenated block of data.  
         
        Upon receiving a signed segment, the receiver must validate it 
   by calculating its own digest from the same data (using its own key) 
   and comparing the two digest. A failing comparison must result in 
   the segment being dropped and must not produce any response back to 
   the sender. Logging the failure is probably advisable.  
         
        Unlike other TCP extensions (e.g., the Window Scale option [RFC 
   1323]), the absence of the option in the SYN, ACK segment must not 
   cause the sender to disable its sending of signatures. This 
   negotiation is typically done to prevent some TCP implementations 
   from misbehaving upon receiving options in non-SYN segments. This is 
   not a problem for this option, since the SYN, ACK sent during 
   connection negotiation will not be signed and will thus be ignored. 
   The connection will never be made, and non-SYN segments with options 
   will never be sent. More importantly, the sending of signatures must 
   be under the complete control of the application, not at the mercy 
   of the remote host not understanding the option. 
         
        MD5 digest information should, like any cryptographically 
   secure data, be incompressible.  Therefore the compression scheme 
   must simply transparently carry this option, if it occurs. 
         
   20. û 26. Are non-RFC references and are not considered in this 
   document. 
 
5. Other observations 
    
5.1. Implicit acknowledgements 
    
   There may be a small number of cues for 'implicit acknowledgements' 
   in a TCP flow.  Even if the compressor only sees the data transfer 
   direction, for example, then seeing a packet without the SYN flag 
   set implies that the SYN packet has been received. 
    
   It may be that there are other such cues that may be used in certain 
   circumstances to improve compression efficiency. 
    
5.2. Shared data 
    
   At the risk of drifting into solution space, it can be seen that 
   there are two distinct deployments - one where the forward and 
   reverse paths share a link and one where they do not.   
    


West et al.                                                  [PAGE 24] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
   In the former case it may be the case that a compressor and 
   decompressor could be co-located.  It may then be possible for the 
   compressor and decompressor at each end of the link to exchange 
   information.  This could lead to possible optimizations.   
    
   For example, acknowledgement numbers are generally taken from the 
   sequence numbers in the opposite direction.  Since an 
   acknowledgement cannot be generated for a packet that has not passed 
   across the link, this offers an efficient way of encoding 
   acknowledgements. 
    
5.2.1. TCP header overhead 
    
   For a TCP bulk data-transfer the overhead is not that onerous, 
   particularly compared to the typical RTP voice case.  Although 
   spectral efficiency is clearly an important goal, it does not seem 
   critical to extract every last bit of compression gain.   
    
   However, in the acknowledgement direction (i.e. for 'pure' 
   acknowledgement headers) the overhead could be said to be infinite 
   (since there is no data being carried).  This is why optimizations 
   for the acknowledgement path may be considered useful. 
    
5.3. Short-lived flows 
    
   It is hard to see what can be done to improve performance for a 
   single, unpredictable, short-lived connection.  However, there are 
   commonly cases where there will be multiple TCP connections between 
   the same pair of hosts.  As a particular example, consider web 
   browsing (this is more the case with HTTP/1.0 than HTTP/1.1). 
    
   When a connection closes, it is either the last connection between 
   that pair of hosts or it is likely that another connection will open 
   within a relatively short space of time.  In this case, the IP 
   header part of the context will probably be almost identical.  
   Certain aspects of the TCP context may also be similar. 
    
   For example, it may be that one of the port numbers will stay the 
   same (the service port) and the other will change by a small amount 
   relative to the just-closed connection (the ephemeral port).  Also, 
   unless [RFC 1948] ISN selection is implemented, the initial sequence 
   number for the SYN packet may be 'close' to the sequence number 
   range used for the closed connection. 
    
   Thus, support for sub-context sharing, or initializing one context 
   from another offers useful optimizations for a sequence of short-
   lived connections. 
    
   It is noted that although TCP is connection oriented, it is hard to 
   tell at a middle-box whether or not a TCP flow has finished.  For 
   example, even in the 'bi-directional' link case, seeing a FIN and 
   the ACK of the FIN at the compressor/decompressor does not mean that 
   the FIN cannot be retransmitted.  Thus it may be more useful to 


West et al.                                                  [PAGE 25] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
   think about initializing a new context from an existing one, rather 
   than re-using an existing one. 
 
6.  Security considerations 
    
   Since this document only describes TCP field behavior there are no 
   direct security concerns raised by it. 
    
7.  Acknowledgements 
    
   Many IP and TCP RFCs (hopefully all of which have been collated 
   below) have been sources of ideas and knowledge, together with header 
   compression schemes from [RFC 1144], [RFC 2509] and [RFC 3095], and 
   of course the detailed analysis of RTP/UDP/IP in [RFC 3095]. 
    
   This draft also benefited from discussion on the rohc mailing list 
   about some key issues; special thanks to Qian Zhang. 
    
   Any remaining misrepresentation or misinterpretation of information 
   is entirely the fault of the authors of this draft. 
    
8.  References 
    
   [RFC 791]    Postel, J., "Internet Protocol", STD 5, September 1981. 
    
  [RFC 793]    Postel, J., "Transmission Control Protocol", STD 7, 
  DARPA, September 1981. 
    
   [RFC 1072]   Jacobson, V., and R. Braden, "TCP Extensions for Long-
   Delay Paths", LBL, ISI, October 1988. 
     
   [RFC 1144]    Jacobson, V.,"Compressing TCP/IP Headers for Low-Speed 
   Serial Linksö, February 1990 
    
   [RFC 1146]   Zweig, J., and C. Partridge, "TCP Alternate Checksum 
   Options", UIUC, BBN, March 1990. 
     
   [RFC 1323]   Jacobson, V., Braden, R., and D. Borman, "TCP 
   Extensions for High Performance", LBL, ISI, Cray Research, May 1992. 
    
   [RFC 1644]   Braden, R. "T/TCP -- TCP Extensions for Transactions 
   Functional Specification", ISI, July 1994. 
    
   [RFC 1693]   Connolly, T., et al, "An Extension to TCP : Partial 
   Order Service", University of Delaware, November 1994. 
    
   [RFC 2001]   Stevens, W., ôTCP Slow Start, Congestion Avoidance, 
   Fast Retransmit, and Fast Recovery Algorithmsö, NOAO, January 1997 
    
   [RFC 2018]   Mathis, M., Mahdavi, J., Floyd, S., and Romanow, A., 
   ôTCP Selective Acknowledgement Optionsö, April 1996. 
    
   [RFC 2026]   Bradner, S., "The Internet Standards Process - Revision 
   3", October 1996 

West et al.                                                  [PAGE 26] 

INTERNET-DRAFT          TCP/IP Field Behavior       14 November, 2001 
 
     
   [RFC 2385]   Heffernan, A., "Protection of BGP Sessions via the TCP 
   MD5 Signature Option", Cisco Systems, August 1998. 
    
   [RFC 2474]   Nichols, K., et al ôDefinition of the Differentiated 
   Services Field (DS Field) in the IPv4 and IPv6 Headersö, December 
   1998 
   [RFC 2481]   Ramakrishnan, K., Floyd, S., ôA Proposal to add 
   Explicit Congestion Notification (ECN) to IPô, AT&T Labs Research, 
   LBNL, January 1999 
    
   [RFC 2507]   Degermark, M., et al, ôIP Header Compressionö, February 
   1999 
    
   [RFC 2508]   Casner, S., Jacobson, V., ôCompressing IP/UDP/RTP 
   Headers for Low-Speed Serial Linksö, Cisco Systems, February 1999 
    
   [RFC 2509]   Engan, M., et al, ôIP Header Compression over PPPö, 
   February 1999 
    
   [RFC 2581]   Allman, M., et al, ôTCP Congestion Controlö, April 1999 
    
   [RFC 2883]   Floyd, S., et al, ôAn Extension to the Selective 
   Acknowledgement (SACK) Option for TCPô, July 2000 
    
   [RFC 3095]   Bormann, C., et al, "RObust Header Compression (ROHC)", 
   July 2001 
    
   [ECN-X]      Spring, N., Wetherall, D., Ely, D., ôRobust ECN 
   Signaling with Noncesö, draft-ietf-tsvwg-tcp-nonce-02.txt, 
   University of Washington, October 2001. 

                   

   [IANA]       http://www.iana.org/assignments/tcp-parameters 
    
9. Authors' addresses 
    
   Mark A West          Tel: +44 1794 833311 
   Email:               mark.a.west@roke.co.uk 
    
   Stephen McCann       Tel: +44 1794 833341 
   Email:               stephen.mccann@roke.co.uk  
    
   Roke Manor Research Ltd 
   Romsey, Hants, SO51 0ZN 
   United Kingdom 










West et al.                                                  [PAGE 27] 

