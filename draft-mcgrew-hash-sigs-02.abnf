e = 2^w - 1
sum = 0
sum = sum + (2^w - 1) - coef(S, i, w)
V = ( H(message) || C(H(message)) )
a = coef(V, i, w)
V = ( H(message) || C(H(message)) )
a = (2^w - 1) - coef(V, i, w)
ots_reserved        = 0,
ldwm_sha256_m20_w1  = 0x01000001,
ldwm_sha256_m20_w2  = 0x02000002,
ldwm_sha256_m20_w4  = 0x03000003,
ldwm_sha256_m20_w8  = 0x04000004,
ldwm_sha256_m32_w1  = 0x05000005,
ldwm_sha256_m32_w2  = 0x06000006,
ldwm_sha256_m32_w4  = 0x07000007,
ldwm_sha256_m32_w8  = 0x08000008,
ldwm_sha512_m64_w1  = 0x09000009,
ldwm_sha512_m64_w2  = 0x0a00000a,
ldwm_sha512_m64_w4  = 0x0b00000b,
ldwm_sha512_m64_w8  = 0x0c00000c
m=32 and p=265 for ldwm_sha256_m32_w1.

level = 0;
siblings = ""
siblings = (pop(data stack) || siblings)
level = pop(integer stack)
public_key = pop(data stack)

n = node number
v = leaf
step = 0
position = n % k
v = hash_final()
n = floor(n/k)
step = step + (k-1)
mts_reserved      = 0x00000000,
mts_sha256_k2_h20 = 0x01000001,
mts_sha256_k4_h10 = 0x02000002,
mts_sha256_k8_h7  = 0x03000003,
mts_sha256_k16_h5 = 0x04000004,
mts_sha512_k2_h20 = 0x05000005,
mts_sha512_k4_h10 = 0x06000006,
mts_sha512_k8_h7  = 0x07000007,
mts_sha512_k16_h5 = 0x08000008
c = C(H(message)) (see Section 3.7).  To attempt a forgery, an
a = coef(h, j, w), and

b = coef(c, k, w), and

u = ceil(8*n/w)
v = ceil((floor(lg((2^w - 1) * u)) + 1) / w)
ls = (number of bits in sum) - (v * w)
p = u + v

