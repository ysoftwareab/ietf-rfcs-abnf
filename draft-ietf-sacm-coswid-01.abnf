concise-software-identity = {
  global-attributes,
  ? entity-entry,
  ? evidence-entry,
  ? link-entry,
  ? software-meta-entry,
  ? payload-entry,
  ? any-element-entry,
  ? corpus,
  ? patch,
  ? media,
  swid-name,
  ? supplemental,
  tag-id,
  ? tag-version,
  ? version,
  ? version-scheme,
NMTOKEN = text
NMTOKENS = text

date-time = time
any-uri = text
label = text / int

any-attribute = (
label => text / int / [ 2* text ] / [ 2* int ]
any-element-map = {
  global-attributes,
  * label => any-element-map / [ 2* any-element-map ],
global-attributes = (
  ? lang,
  * any-attribute,
resource-collection = (
  ? directory-entry,
  ? file-entry,
  ? process-entry,
  ? resource-entry
  ? firmware-entry
file = {
  filesystem-item,
  ? size,
  ? version,
  ? file-hash,
filesystem-item = (
  global-attributes,
  ? key,
  ? location,
  fs-name,
  ? root,
directory = {
  filesystem-item,
  path-elements,
firmware = {
  firmware-name,                  ; inherited from RFC4108
  ? firmware-version,
  ? firmware-package-identifier,  ; inherited from RFC4108
  ? dependency,                   ; inherited from RFC4108
  ? component-index,              ; equivalent to RFC4108 fwPkgType
  ? block-device-identifier,
  ? target-hardware-identifier,   ; an RFC4108 alternative to model-label
  model-label,
  ? firmware-hash,                ; a hash for a single, incl. NI hash-algo index
  ? cms-firmware-package,         ; RCF4108, experimental, this is an actual firmware blob!
process = {
  global-attributes,
  process-name,
  ? pid,
resource = {
  global-attributes,
  type,
entity = {
  global-attributes,
  meta-elements,
  entity-name,
  ? reg-id,
  role,
  ? thumbprint,
evidence = {
  global-attributes,
  resource-collection,
  ? date,
  ? device-id,
link = {
  global-attributes,
  ? artifact,
  href,
  ? media,
  ? ownership,
  rel,
  ? type,
  ? use,
software-meta = {
  global-attributes,
  ? activation-status,
  ? channel-type,
  ? colloquial-version,
  ? description,
  ? edition,
  ? entitlement-data-required,
  ? entitlement-key,
  ? generator,
  ? persistent-id,
  ? product,
  ? product-family,
  ? revision,
  ? summary,
  ? unspsc-code,
  ? unspsc-version,
payload = {
  global-attributes,
  resource-collection,
tag-id = (0: text)
swid-name = (1: text)
entity-entry = (2: entity / [ 2* entity ])
evidence-entry = (3: evidence / [ 2* evidence ])
link-entry = (4: link / [ * link ])
software-meta-entry = (5: software-meta / [ 2* software-meta ])
payload-entry = (6: payload / [ 2* payload ])
any-element-entry = (7: any-element-map / [ 2* any-element-map ])
corpus = (8: bool)
patch = (9: bool)
media = (10: text)
supplemental = (11: bool)
tag-version = (12: integer)
version = (13: text)
version-scheme = (14: NMTOKEN)
lang = (15: text)
directory-entry = (16: directory / [ 2* directory ])
file-entry = (17: file / [ 2* file ])
process-entry = (18: process / [ 2* process ])
resource-entry = (19: resource / [ 2* resource ])
size = (20: integer)
key = (21: bool)
location = (22: text)
fs-name = (23: text)
root = (24: text)
path-elements = (25: { * directory-entry,
                       * file-entry,
                     }
                )
process-name = (26: text)
pid = (27: integer)
type = (28: text)
meta-elements = (29: any-element-map / [ 2* any-element-map ])
entity-name = (30: text)
reg-id = (31: any-uri)
role = (32: NMTOKENS)
thumbprint = (33: text)
date = (34: date-time)
device-id = (35: text)
artifact = (36: text)
href = (37: any-uri)
ownership = (38: "shared" / "private" / "abandon")
rel = (39: NMTOKEN)
use = (40: "optional" / "required" / "recommended")
activation-status = (41: text)
channel-type = (42: text)
colloquial-version = (43: text)
description = (44: text)
edition = (45: text)
entitlement-data-required = (46: bool)
entitlement-key = (47: text)
generator = (48: text)
persistent-id = (49: text)
product = (50: text)
product-family = (51: text)
revision = (52: text)
summary = (53: text)
unspsc-code = (54: text)
unspsc-version = (55: text)
file-hash = (56: [ hash-alg-id: int,
                   hash-value: bstr,
                 ]
            )

firmware-entry = (57: firmware / [ 2* firmware ])
firmware-hash = (58: [ hash-alg-id: int,
                      hash-value: bstr,
                     ]
                )
firmware-name = (59 : text)
firmware-version = (60 : text / int)
component-index = (61 : int)
model-label = (62: text / int)
block-device-identifier = (63 : text / int)
cms-firmware-package = (64: bstr)
firmware-package-identifier = (65: text)
target-hardware-identifier = (66: text)
dependency = (67: { ? firmware-name,
                    ? firmware-version,
                    ? firmware-package-identifier,
                  }
             )
signed-coswid = #6.997(COSE-Sign1-coswid) ; see TBS7 in current COSE I-D

label = int / tstr  ; see COSE I-D 1.4.
values = any        ; see COSE I-D 1.4.

unprotected-signed-coswid-header = {
    1 => int,                   ; algorithm identifier
    3 => "application/coswid",  ; request for CoAP IANA registry to become an int
    * label => values,
protected-signed-coswid-header = {
    4 => bstr,                  ; key identifier
    * label => values,
COSE-Sign1-coswid = [
    protected: bstr .cbor protected-signed-coswid-header,
    unprotected: unprotected-signed-coswid-header,
    payload: bstr .cbor concise-software-identity,
    signature: bstr,
