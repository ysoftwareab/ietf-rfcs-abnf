start = element conference-info { conference-type }
conference-type =
     attribute entity { text },
     attribute version { xsd:unsignedInt }?,
     attribute state { state-type }?,
     conference-description-type,
     element host-info { host-type }?,
     element conference-state { conference-state-type }?,
     element floor-information { floor-information-type }?,
     element users { users-type },
     element sidebars-by-ref { sidebars-by-ref-type }?,
     element sidebars-by-val { sidebars-by-val-type }?,
     anyElement*
conference-description-type =
     element conference-description {
       attribute xml:lang { xsd:language }?,
       attribute state { state-type }?,
       element display-text { text }?,
       element subject { text }?,
       element free-text { text }?,
       element keywords {
         list { xsd:string* }
       }?,
       element allow-sidebars { xsd:boolean }?,
       element conference-time { conferencetime-type }?,
       element conf-uris { uris-type }?,
       element service-uris { uris-type }?,
       element maximum-user-count { xsd:int }?,
       element available-media { conference-media-type }?,
       anyElement*
     }
conferencetime-type =
     element entry {
       element base { text }?,
       element mixing-start-offset {
         xsd:dateTime { pattern = ".+T.+Z.*" },
         attribute required-participant { single-role-type },
         anyAttribute
       }?,
       element mixing-end-offset {
         xsd:dateTime { pattern = ".+T.+Z.*" },
         attribute required-participant { single-role-type },
         anyAttribute
       }?,
       element can-join-after-offset {
         xsd:dateTime { pattern = ".+T.+Z.*" }
       }?,
       element must-join-before-offset {
         xsd:dateTime { pattern = ".+T.+Z.*" }
       }?,
       element notify-end-of-conference { xsd:int }?,
       element allowed-extend-mixing-end-offset {
         allowed-extend-mixing-values
       }?,
       anyElement*
     }*,
     anyElement*
allowed-extend-mixing-values =
     xsd:string "allowed" | xsd:string "denied"
uris-type =
     attribute state { state-type }?,
     (element entry { uri-type }*
      & element H323 { H323-type }*
      & element PSTN-ISDN { PSTN-type }*),
     anyElement*
uri-type =
     (element uri { xsd:anyURI },
      element display-text { text }?,
      element purpose { text }?,
      anyElement*)*
H323-type =
     element H.323-alias { text }?,
     element H.323-URI { xsd:anyURI }?,
     anyElement*
PSTN-type =
     attribute PIN-code { xsd:unsignedInt },
     attribute purpose { xsd:unsignedInt },
     (element phone-number { xsd:unsignedInt },
      anyElement*)+
conference-media-type =
     attribute state { state-type }?,
     element entry { conference-medium-type }*,
     anyElement*
conference-medium-type =
     attribute label { text },
     element display-text { text }?,
     element type { text }?,
     element status { media-status-type }?,
     element mixing-mode { mix-mode-type }?,
     element mix-level { xsd:unsignedInt }?,
     element codecs { codecs-type }?,
     element controls { controls-type }?,
     anyElement*
controls-type =
     attribute state { state-type }?,
     element control { control-type }*,
     anyElement*
mix-mode-type =
     xsd:string "moderator-controlled"
     | xsd:string "FCFS"
     | xsd:string "automatic"
codecs-type =
     attribute decision { decision-type },
     element codec { codec-type }*,
     anyElement*
codec-type =
     attribute name { text },
     attribute policy { policy-type }
decision-type =
     xsd:string "automatic" | xsd:string "moderator-controlled"
policy-type = xsd:string "allowed" | xsd:string "disallowed"
control-type =
     element mute { xsd:boolean }
     | element pause-video { xsd:boolean }
     | element gain {
         xsd:int { minInclusive = "-127" maxInclusive = "127" }
       }
     | element video-layout {
         xsd:string "single-view"
         | xsd:string "dual-view"
         | xsd:string "dual-view-crop"
         | xsd:string "dual-view-2x1"
         | xsd:string "dual-view-2x1-crop"
         | xsd:string "quad-view"
         | xsd:string "multiple-3x3"
         | xsd:string "multiple-4x4"
         | xsd:string "multiple-5x1"
         | xsd:string "automatic"
       }
     | anyElement*
host-type =
     (element display-text { text },
      element web-page { xsd:anyURI },
      element uris { uris-type },
      anyElement*)*
conference-state-type =
     element allow-conference-event-subscription { xsd:boolean }?,
     element user-count { xsd:unsignedInt }?,
     element active { xsd:boolean }?,
     element locked { xsd:boolean }?,
     anyElement*
floor-information-type =
     (element conference-ID { xsd:unsignedInt },
      element allow-floor-events { xsd:boolean },
      element floor-request-handling { floor-request-type },
      element conference-floor-policy { Conference-floor-policy },
      anyElement*)*
floor-request-type = xsd:string "block" | xsd:string "confirm"
Conference-floor-policy =
     element floor {
       attribute moderator-controlled { xsd:boolean },
       attribute label { text },
       anyAttribute,
       (element media-types {
          xsd:string "video"
          | xsd:string "audio"
          | xsd:string "application"
          | xsd:string "data"
          | xsd:string "control"
          | xsd:string "message"
          | xsd:string "text"
        },
        element algorithm {
          xsd:string "moderator-controlled"
          | xsd:string "FCFS"
          | xsd:string "random"
        },
        element max-floor-users { xsd:nonNegativeInteger },
        element chair-id { xsd:anyURI },
        anyElement*)*
     }+
users-type =
     attribute state { state-type }?,
     element join-handling { join-handling-type }?,
     element user-admission-policy { user-admission-policy-type }?,
     element user-must-be-specified { xsd:boolean }?,
     element allowed-users-list { UserList }?,
     element user { user-type }*,
     anyElement*
user-admission-policy-type =
     xsd:string "closedAuthenticated"
     | xsd:string "openAuthenticated"
     | xsd:string "anonymous"
join-handling-type =
     xsd:string "block"
     | xsd:string "allow"
     | xsd:string "confirm"
     | xsd:string "IVR"
     | xsd:string "directed-operator"
UserList =
     element target { target-type }*,
     anyElement*
target-type =
     attribute uri { xsd:anyURI },
     attribute method { method-type }
method-type =
     xsd:string "dial-in" | xsd:string "dial-out" | xsd:string "refer"
user-type =
     attribute entity { xsd:anyURI },
     attribute state { state-type }?,
     element display-text { text }?,
     element associated-aors { uris-type }?,
     element provide-anonymity { xsd:boolean }?,
     element roles { roles-type }?,
     element languages {
       list { xsd:language }
     }?,
     element cascaded-focus { xsd:anyURI }?,
     element allow-refer-users-dynamically { xsd:boolean }?,
     element allow-invite-users-dynamically { xsd:boolean }?,
     element allow-remove-users-dynamically { xsd:boolean }?,
     element endpoint { endpoint-type }*,
     anyElement*
endpoint-type =
     attribute entity { text },
     attribute state { state-type }?,
     element display-text { text }?,
     element referred { conference-info-urn* }?,
     element status { endpoint-status-type }?,
     element joining-method { joining-type }?,
     element joining-info { conference-info-urn* }?,
     element disconnection-method { disconnection-type }?,
     element disconnection-info { conference-info-urn* }?,
     element media { media-type }*,
     element call-info { conference-info-urn* }?,
     anyElement*
media-type =
     attribute id { xsd:int },
     attribute state { state-type }?,
     anyAttribute,
     element display-text { text }?,
     element type { text }?,
     element label { text }?,
     element src-id { text }?,
     element status { media-status-type }?,
     element to-mixer { mixer-type }?,
     element from-mixer { mixer-type }?,
     anyElement*
mixer-type =
     attribute state { state-type }?,
     (element floor { xsd:boolean },
      element controls { controls-type })?,
     anyElement*
sidebars-by-ref-type =
     attribute state { state-type }?,
     element entry { uri-type }*,
     anyElement*
sidebars-by-val-type =
     attribute state { state-type }?,
     element entry { conference-type }*,
     anyElement*
roles-type =
     element entry { single-role-type }*,
     anyElement*
single-role-type =
     xsd:string "administrator"
     | xsd:string "creator"
     | xsd:string "moderator"
     | xsd:string "participant"
     | xsd:string "observer"
anyElement =
     element * {
       (attribute * { text }
        | text
        | anyElement)*
     }
anyAttribute =
     attribute * - (entity
                    | version
                    | state
                    | xml:lang
                    | required-participant
                    | PIN-code
                    | purpose
                    | role
                    | type
                    | min
                    | max
                    | label
                    | decision
                    | name
                    | policy
                    | moderator-controlled
                    | uri
                    | method
                    | id
                    | domain
                    | local:*
                    | ns2:*) { text }*
conference-info-urn =
     element ns1:* {
       (attribute * { text }
        | conference-info-urn)*
     }
state-type = "full" | "partial" | "deleted"
media-status-type = "recvonly" | "sendonly" | "sendrecv" | "inactive"
endpoint-status-type =
     "pending"
     | "dialing-out"
     | "dialing-in"
     | "alerting"
     | "on-hold"
     | "connected"
     | "muted-via-focus"
     | "disconnecting"
     | "disconnected"
joining-type = "dialed-in" | "dialed-out" | "focus-owner"
disconnection-type = "departed" | "booted" | "failed" | "busy"



entity="conference123@example.com" state="full">
disconnection-type = "departed" | "booted" | "failed" | "busy"


XCON_URI = "xcon" ":" [conf-object-id "@"] hostport
                              ; hostport as defined in RFC3261

conf-object-id = 1*( unreserved / "+" / "=" / "/" )
                              ; unreserved as defined in RFC3986
XCON_USERID = "xcon_userid" ":" conf-object-id

conf-object-id = 1*( unreserved / "+" / "=" / "/" )
                              ; unreserved as defined in RFC3986



xmlns="http://relaxng.org/ns/structure/1.0"
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
