Received: by ATHENA-PO-2.MIT.EDU (5.45/4.7) id AA14913; Wed, 6 Mar 91 18:35:01 EST
Received: from MTIGATE.MTI.COM by MIT.EDU with SMTP
	id AA16804; Wed, 6 Mar 91 18:34:34 EST
Received: by mtigate.mti.com id AA03689
  (5.65+/IDA-1.3.5 for tom@MIT.EDU); Wed, 6 Mar 91 13:55:14 -0800
Received: from PO2.ANDREW.CMU.EDU by mtigate.mti.com with SMTP id AA03685
  (5.65+/IDA-1.3.5 for /usr/lib/sendmail -oem -oi -frlanmib-request@mti.com rlanmib-real); Wed, 6 Mar 91 13:55:01 -0800
Received: by po2.andrew.cmu.edu (5.54/3.15) id <AA14214> for rlanmib@mti.com; Wed, 6 Mar 91 16:53:58 EST
Received: via switchmail; Wed,  6 Mar 91 16:53:57 -0500 (EST)
Received: from valkyries.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/service/mailqs/q001/QF.4bpKHVu00iU4M0QksC>;
          Wed,  6 Mar 91 16:53:38 -0500 (EST)
Received: from zeus.andrew.cmu.edu via qmail
          ID </afs/andrew.cmu.edu/usr5/sw0l/.Outgoing/QF.QbpKGwa00WArMLBv5H>;
          Wed,  6 Mar 91 16:53:00 -0500 (EST)
Received: from Messages.7.14.N.CUILIB.3.45.SNAP.NOT.LINKED.zeus.andrew.cmu.edu.sun4.40
          via MS.5.6.zeus.andrew.cmu.edu.sun4_40;
          Wed,  6 Mar 91 16:52:57 -0500 (EST)
Message-Id: <kbpKGt200WArALButI@andrew.cmu.edu>
Date: Wed,  6 Mar 91 16:52:57 -0500 (EST)
From: "Steven L. Waldbusser" <sw0l+@andrew.cmu.edu>
To: rlanmib@mti.com
Subject: 2nd Draft of the rlan MIB
In-Reply-To: <MbpEkkK00WArELBtVp@andrew.cmu.edu>
References: <9103060132.AA01013@lvs.Eng.Sun.COM>,
	<MbpEkkK00WArELBtVp@andrew.cmu.edu>


Here is the second draft of the rlan MIB.

What is here are:
free running ethernet counters
ethernet history table
per hosts stats
top "N" hosts based on rates
per conversation stats
filters
packet capture
notification


Steve

------------------------------
--  Version of Wednesday March 6
          RFCxxxx-MIB DEFINITIONS ::= BEGIN

          IMPORTS
                  experimental, OBJECT-TYPE, Counter, IpAddress
                          FROM RFC1155-SMI
                  DisplayString
                      FROM RFC1158-MIB
                  OBJECT-TYPE
                          FROM RFC-oooo;

          --  This MIB module uses the extended OBJECT-TYPE macro as
          --  defined in [9]


          --  Remote LAN Monitoring MIB

                  rlan    OBJECT IDENTIFIER ::= { experimental 99 }


                  etherStats	OBJECT IDENTIFIER ::= { rlan 1 }
                  etherHistory  OBJECT IDENTIFIER ::= { rlan 2 }
                  etherHosts	OBJECT IDENTIFIER ::= { rlan 3 }
		  etherMatrix	OBJECT IDENTIFIER ::= { rlan 4 }
		  filter	OBJECT IDENTIFIER ::= { rlan 5 }
		  notifications OBJECT IDNETIFIER ::= { rlan 6 }

-- The etherStats group

          etherStatsTable OBJECT-TYPE
                  SYNTAX SEQUENCE OF EtherStatsEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "The list of etherStats entries."
                  ::= { etherStats 1 }

          etherStatsEntry OBJECT-TYPE
                  SYNTAX EtherStatsEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      ""
                  INDEX { etherStatsIfIndex }
                  ::= { etherStatsTable 1 }

          EtherStatsEntry ::= SEQUENCE {
		etherStatsIfIndex		  INTEGER,
		etherStatsPkts			  Counter,
		etherStatsBroadcastPkts	  	  Counter,
		etherStatsMulticastPkts	  	  Counter,
		etherStatsCollisionFragments	  Counter,
		etherStatsRunts			  Counter,
                etherStatsCRCAlignErrors          Counter,
		etherStatsJabbers		  Counter,
		etherStatsOversize		  Counter,
		etherStatsCollisions		  Counter,
		etherStatsOctets		  Counter,
		etherStatsPkts64to127Octets	  Counter,
		etherStatsPkts128to255Octets	  Counter,
		etherStatsPkts256to511Octets	  Counter,
		etherStatsPkts512to1023Octets  	  Counter,
		etherStatsPkts1024to1518Octets 	  Counter,
		etherStatsDropEvents		  Counter
          }

          etherStatsIfIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "An index that uniquely identifies an interface
		      on this remote LAN monitoring device.  The
		      interface identified by a particular value of
		      this index is the same interface as identified
		      by the same value of ifIndex."
                  ::= { etherStatsEntry 1 }

          etherStatsPkts OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of packets (including error
		      packets) received."
                  ::= { etherStatsEntry 2 }

          etherStatsBroadcastPkts OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of good packets received that 
		      were directed to the broadcast address."
                  ::= { etherStatsEntry 3 }

          etherStatsMulticastPkts OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of good packets received that were
		      directed to a multicast address.  Note that this does
		      not include packets directed to the broadcast address."
                  ::= { etherStatsEntry 4 }

          etherStatsCollisionFragments OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of packets received that
                      were not an integral number of octets in length
                      or that had a bad Frame Check Sequence (FCS), and
		      were less than 64 octets in length."
                  ::= { etherStatsEntry 5 }

          etherStatsRunts OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of packets received that were
                      less than 64 octets long (including CRC) and
                      were otherwise well formed."
                  ::= { etherStatsEntry 6 }

          etherStatsCRCAlignErrors OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of packets received that
		      had a length (including CRC) of between 64 and 1518
		      octets, inclusive, but were not an integral number
		      of octets in length or had a bad Frame Check
		      Sequence (FCS)."
                  ::= { etherStatsEntry 7 }

          etherStatsJabbers OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of packets received that were
		      longer than 1518 octets (including CRC), and were
		      not an integral number of octets in length or had
		      a bad Frame Check Sequence (FCS)."
                  ::= { etherStatsEntry 8 }

          etherStatsOversize OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of packets received that were
                      longer than 1518 octets (including CRC) and were
		      otherwise well formed."
                  ::= { etherStatsEntry 9 }

          etherStatsCollisions OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of local collision events."
                  ::= { etherStatsEntry 8 }

          etherStatsOctets OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of octets received on the
		      network (including CRC octets)."
                  ::= { etherStatsEntry 9 }

          etherStatsPkts64to127Octets OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of packets received that were
		      between 64 and 127 octets in length, including CRC
		      octets."
                  ::= { etherStatsEntry 10 }

          etherStatsPkts128to255Octets OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of packets received that were
		      between 128 and 255 octets in length, including CRC
		      octets."
                  ::= { etherStatsEntry 11 }

          etherStatsPkts256to511Octets OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of packets received that were
		      between 256 and 511 octets in length, including CRC
		      octets."
                  ::= { etherStatsEntry 12 }

          etherStatsPkts512to1023Octets OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of packets received that were
		      between 512 and 1023 octets in length, including CRC
		      octets."
                  ::= { etherStatsEntry 13 }

          etherStatsDropEvents OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of events in which packets
		      were dropped by the probe due to lack of resources.
		      Note that this is not the number of packets dropped,
		      it is just the number of times this condition has been
		      detected."
                  ::= { etherStatsEntry 14 }

          etherStatsPkts1024to1518Octets OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of packets received that were
		      between 1024 and 1518 octets in length, including CRC
		      octets."
                  ::= { etherStatsEntry 14 }


          etherHistoryControlTable OBJECT-TYPE
                  SYNTAX SEQUENCE OF EtherHistoryControlEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "The list of etherHistoryControl entries."
                  ::= { etherHistory 1 }

          etherHistoryControlEntry OBJECT-TYPE
                  SYNTAX EtherHistoryControlEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      ""
                  INDEX { etherHistoryControlIndex }
                  ::= { etherHistoryControlTable 1 }

          EtherHistoryControlEntry ::= SEQUENCE {
		etherHistoryControlIndex    INTEGER,
		etherHistoryControlIfIndex  INTEGER,
		etherHistoryControlBuckets  INTEGER,
		etherHistoryControlInterval INTEGER,
		etherHistoryControlStatus   INTEGER
          }

          etherHistoryControlIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "An index that uniquely identifies an entry
		      in the etherHistoryControl table.  Each such
		      entry defines one log taken over a particular
		      interval for an interface on the device."
                  ::= { etherHistoryControlEntry 1 }

          etherHistoryControlIfIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The interface for which data is sampled
		      for each bucket in the part of the
		      etherHistory table associated with this
		      etherHistoryControl entry.  The interface
		      identified by a particular value of this
		      index is the same interface as identified
		      by the same value of ifIndex."
                  ::= { etherHistoryControlEntry 2 }

          etherHistoryControlBuckets OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The number of discrete time intervals over
		      which data is saved in the part of the 
		      etherHistory table associated with this
		      etherHistoryControl entry."
                  ::= { etherHistoryControlEntry 3 }

          etherHistoryControlInterval OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The interval in seconds over which the data is
		      sampled for each bucket in the part of the
		      etherHistory table associated with this
		      etherHistoryControl entry.  This interval can
		      be set to any number of seconds between 1 and
		      3600 (1 hour)."
                  ::= { etherHistoryControlEntry 4 }

          etherHistoryControlStatus OBJECT-TYPE
                  SYNTAX INTEGER {
			  valid(1),
			  invalid(2)
		  }
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
	    "The state of this etherHistoryControl entry.

	    Setting this object to the value invalid(2) has the
	    effect of invalidating the corresponding entry in the
	    etherHistoryControlTable.  That is, it effectively
	    disassociates the mapping identified with said entry.
	    It is an implementation-specific matter as to whether
	    the agent removes an invalidated entry from the table.
	    Accordingly, management stations must be prepared to
	    receive from agents tabular information corresponding
	    to entries not currently in use.  Proper
	    interpretation of such entries requires examination
	    of the relevant etherHistoryControlStatus object."
                  ::= { etherHistoryControlEntry 5 }

-- Ether History table

          etherHistoryTable OBJECT-TYPE
                  SYNTAX SEQUENCE OF EtherHistoryEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "The list of etherHistory entries.  Each entry
		      represents one sample taken from a particular
		      network."
                  ::= { etherHistory 2 }

          etherHistoryEntry OBJECT-TYPE
                  SYNTAX EtherHistoryEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      ""
                  INDEX { etherHistoryIndex , etherHistoryStartIndex }
                  ::= { etherHistoryTable 1 }

          EtherHistoryEntry ::= SEQUENCE {
		etherHistoryIndex		 INTEGER,
		etherHistoryStartIndex		 INTEGER,
		etherHistoryIntervalStart	 TimeTicks,
		etherHistoryPkts		 Counter,
		etherHistoryBroadcastPkts	 Counter,
		etherHistoryMulticastPkts	 Counter,
		etherHistoryCollisionFragments	 Counter,
		etherHistoryRunts		 Counter,
		etherHistoryCRCAlignErrors	 Counter,
		etherHistoryJabbers		 Counter,
		etherHistoryOversize		 Counter,
		etherHistoryCollisions		 Counter,
		etherHistoryOctets		 Counter,
		etherHistoryUtilization		 INTEGER,
		etherHistoryDropEvents		 Counter
          }

          etherHistoryIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The log of which this entry is a part.  The
		      log identified by a particular value of this
		      index is the same interface as identified
                      by the same value of etherHistoryControlIndex."
                  ::= { etherHistoryEntry 1 }

          etherHistoryStartIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
			"An index that uniquely identifies the particular
			sample that this entry represents among the other
			samples within this log.  This index starts at 1
			and increases monotonically as each new sample
			is taken."
                  ::= { etherHistoryEntry 2 }

          etherHistoryIntervalStart OBJECT-TYPE
                  SYNTAX TimeTicks
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The value of sysUptime at the start of the
		      interval over which this sample was measured.  If the
		      probe keeps track of the time of day, it should start
		      the first sample of the log at a time such that when
		      the next hour of the day begins, a sample is
		      started at that instant.  Note that this may require
		      the probe to delay collecting the first sample of the
		      log, as each sample must be of the same interval.
		      Also note that the sample which is currently being
		      collected is not accessible in this table until the
		      end of its interval."
                  ::= { etherHistoryEntry 3 }

          etherHistoryPkts OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets (including error packets)
		      received during this sampling interval."
                  ::= { etherHistoryEntry 4 }

          etherHistoryBroadcastPkts OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of good packets received during this
		      sampling interval that were directed to the
		      broadcast address."
                  ::= { etherHistoryEntry 5 }

          etherHistoryMulticastPkts OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of good packets received during this
		      sampling interval that were directed to a
		      multicast address.  Note that this does not include
		      packets addressed to the broadcast address."
                  ::= { etherHistoryEntry 6 }

          etherStatsCollisionFragments OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of packets received during this
		      sampling interval that were not an integral
		      number of octets in length or that
                      had a bad Frame Check Sequence (FCS), and
		      were less than 64 octets in length."
                  ::= { etherHistoryEntry 7 }

	  etherHistoryRunts OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets received during this
		      interval that were less than 64 octets long
		      (including CRC) and were otherwise well formed."
                  ::= { etherHistoryEntry 8 }

          etherHistoryCRCAlignErrors OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets received during this
		      sampling interval that had a length (including
		      CRC) between 64 and 1518 octets, inclusive,
		      but were not an integral number of octets in
		      length or had a bad Frame Check Sequence (FCS)."
                  ::= { etherHistoryEntry 9 }

	  etherHistoryJabbers OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets received during this
		      interval that were longer than 1518 octets
		      (including CRC), and were not an integral number
		      of octets in length or had a bad Frame Check
		      Sequence (FCS)."
                  ::= { etherHistoryEntry 10 }

	  etherHistoryOversize OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets received during this
		      interval that were longer than 1518 octets
		      (including CRC) but were otherwise well formed."
                  ::= { etherHistoryEntry 11 }

	  etherHistoryCollisions OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of local collision events
		      experienced during this interval."
                  ::= { etherHistoryEntry 12 }

	  etherHistoryOctets OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of octets (including CRC octets)
		      received on the interface during this interval."
                  ::= { etherHistoryEntry 13 }

	  etherHistoryUtilization OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The best estimate of the average physical layer
		      network utilization on this interface during this
		      interval, in tenths of a percent."
                  ::= { etherHistoryEntry 14 }

          etherHistoryDropEvents OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The total number of events in which packets
		      were dropped by the probe due to lack of resources
		      during this interval.  Note that this is not the
		      number of packets dropped, it is just the number
		      of times this condition has been detected."
                  ::= { etherHistoryEntry 15 }




-- Ether Host tables

          etherHostTableSize OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of etherHostEntries in the etherHostTable."
                  ::= { etherHosts 1 }

          etherHostTable OBJECT-TYPE
                  SYNTAX SEQUENCE OF EtherHostEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "The list of etherHost entries."
                  ::= { etherHosts 2 }

          etherHostEntry OBJECT-TYPE
                  SYNTAX EtherHostEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      ""
                  INDEX { etherHostIfIndex, etherHostAddress }
                  ::= { etherHostTable 1 }

          EtherHostEntry ::= SEQUENCE {
		etherHostAddress		 OCTET STRING,
		etherHostIfIndex		 INTEGER,
		etherHostPktsIn			 Counter,
		etherHostPktsOut		 Counter,
		etherHostOctetsIn		 Counter,
		etherHostOctetsOut		 Counter,
		etherHostErrorsOut		 Counter,
		etherHostBroadcastPktsOut	 Counter,
		etherHostMulticastPktsOut	 Counter
          }

          etherHostAddress OBJECT-TYPE
                  SYNTAX OCTET STRING
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The ethernet physical address of this host."
                  ::= { etherHostEntry 1 }

          etherHostIfIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The interface on which packets from this
		      host were heard.  The interface identified by a
		      particular value of this index is the same
		      interface as identified by the same value of
		      ifIndex."
                  ::= { etherHostEntry 2 }

          etherHostPktsIn OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets transmitted to this host,
		      except for those that contained errors."
                  ::= { etherHostEntry 3 }

          etherHostPktsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets transmitted by this host,
		      including those that contained errors."
                  ::= { etherHostEntry 4 }

          etherHostOctetsIn OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of octets transmitted to this host,
		      except for those in packets with errors."
                  ::= { etherHostEntry 5 }

          etherHostOctetsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of octets transmitted by this host,
		      including those in packets with errors."
                  ::= { etherHostEntry 6 }

          etherHostErrorsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of error packets transmitted by
		      this host."
                  ::= { etherHostEntry 7 }

          etherHostBroadcastPktsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets transmitted by this host
		      that were directed to the broadcast address."
                  ::= { etherHostEntry 8 }

          etherHostMulticastPktsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets transmitted by this host
		      that were directed to a multicast address.  Note that
		      this does not include packets directed to the broadcast
		      address."
                  ::= { etherHostEntry 9 }


-- The Top "N" etherHost Table

          etherHostTopNRateBase OBJECT-TYPE
                  SYNTAX INTEGER {
			etherHostTopNPktsIn(1),
			etherHostTopNPktsOut(2),
			etherHostTopNOctetsIn(3),
			etherHostTopNOctetsOut(4),
			etherHostTopNErrorsOut(5),
			etherHostTopNBroadcastPktsOut(6),
			etherHostTopNMulticastPktsOut(7)
		  }
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The variable within each entry that the
etherHostTopNRate
		      variable is based upon.  This is only changeable when
		      etherHostTopNRateControl is on(1), and when a change is made,
		      the etherHostTopNTime object and all etherHostTopNRate objects
		      shall be set to zero."
                  ::= { etherHosts 3 }

          etherHostTopNRateControl OBJECT-TYPE
                  SYNTAX INTEGER {
			on(1),
			off(2)
		  }
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "This controls whether the etherHostTopNRate object is
		      currently being updated.
                  ::= { etherHosts 4 }

          etherHostTopNSize OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The maximum number of hosts placed in the Top N table."
                  ::= { etherHosts 5 }

          etherHostTopNTime OBJECT-TYPE
                  SYNTAX TimeTicks
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The length of time that the
etherHostTopNRateControl has been
		      on during its last sample.  This is reset to zero whenever
		      etherHostTopNRateControl is set to on."
                  ::= { etherHosts 6 }

          etherHostTopNTable OBJECT-TYPE
                  SYNTAX SEQUENCE OF etherHostTopNEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "The list of etherHostTopN entries."
                  ::= { etherHosts 7 }

          etherHostTopNEntry OBJECT-TYPE
                  SYNTAX etherHostTopNEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      ""
                  INDEX { etherHostTopNIndex }
                  ::= { etherHostTopNTable 1 }

          etherHostTopNEntry ::= SEQUENCE {
		etherHostTopNIndex		 INTEGER,
		etherHostTopNAddress		 OCTET STRING,
		etherHostTopNIfIndex		 INTEGER,
		etherHostTopNPktsIn		 Counter,
		etherHostTopNPktsOut		 Counter,
		etherHostTopNOctetsIn		 Counter,
		etherHostTopNOctetsOut		 Counter,
		etherHostTopNErrorsOut		 Counter,
		etherHostTopNBroadcastPktsOut	 Counter,
		etherHostTopNMulticastPktsOut	 Counter,
		etherHostTopNRate		 INTEGER
          }

          etherHostTopNIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "An index that uniquely identifies an entry in
		      the etherHostTopN table.  This index is between
		      1 and N, where N is the number of entries in this
		      table.  Index 1 shall be assigned to the entry
		      that has the highest value of etherHostTopNRate,
		      and so on until index N is assigned to the lowest."
                  ::= { etherHostTopNEntry 1 }

          etherHostTopNAddress OBJECT-TYPE
                  SYNTAX OCTET STRING
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The ethernet physical address of this host."
                  ::= { etherHostTopNEntry 2 }

          etherHostTopNIfIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The interface on which packets from this
		      host were heard.  The interface identified by a
		      particular value of this index is the same
		      interface as identified by the same value of
		      ifIndex."
                  ::= { etherHostTopNEntry 3 }

          etherHostTopNPktsIn OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets transmitted to this host,
		      except for those that contained errors."
                  ::= { etherHostTopNEntry 4 }

          etherHostTopNPktsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets transmitted by this host,
		      including those that contained errors."
                  ::= { etherHostTopNEntry 5 }

          etherHostTopNOctetsIn OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of octets transmitted to this host,
		      except for those in packets with errors."
                  ::= { etherHostTopNEntry 6 }

          etherHostTopNOctetsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of octets transmitted by this host,
		      including those in packets with errors."
                  ::= { etherHostTopNEntry 7 }

          etherHostTopNErrorsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of error packets transmitted by
		      this host."
                  ::= { etherHostTopNEntry 9 }

          etherHostTopNBroadcastPktsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets transmitted by this host
		      that were directed to the broadcast address."
                  ::= { etherHostTopNEntry 10 }

          etherHostTopNMulticastPktsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets transmitted by this host
		      that were directed to a multicast address.  Note
		      that this does not include packets directed to the
		      broadcast address."
                  ::= { etherHostTopNEntry 11 }

          etherHostTopNRate OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of events of the selected variable that
		      have occurred during this sampling interval.  The selected
		      variable is this host's instance of the object selected by
		      etherTopNRateBase.  An event is that which would
		      cause the selected object to increment its counter.
		      This object only increments while etherHostTopNRateControl
		      is on."
                  ::= { etherHostTopNEntry 12 }


-----
          etherHostOrderTable OBJECT-TYPE
                  SYNTAX SEQUENCE OF EtherHostOrderEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "The list of etherHostOrder entries."
                  ::= { etherHosts 3 }

          etherHostOrderEntry OBJECT-TYPE
                  SYNTAX EtherHostOrderEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      ""
                  INDEX { etherHostOrderIndex }
                  ::= { etherHostOrderTable 1 }

          EtherHostOrderEntry ::= SEQUENCE {
		etherHostOrderIndex		 INTEGER,
		etherHostOrderAddress		 OCTET STRING,
		etherHostOrderIfIndex		 INTEGER,
		etherHostOrderPktsIn		 Counter,
		etherHostOrderPktsOut		 Counter,
		etherHostOrderOctetsIn		 Counter,
		etherHostOrderOctetsOut		 Counter,
		etherHostOrderErrorsOut		 Counter,
		etherHostOrderBroadcastPktsOut	 Counter,
		etherHostOrderMulticastPktsOut	 Counter
          }

          etherHostOrderIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "An index that uniquely identifies an entry in
		      the etherHostOrder table.  This index shall be between
		      1 and N, where N is the number of entries in this
		      table.  The ordering of the indexes is unimportant.
		      In fact, it is intended that the agent implementation
		      make use of this table to offer an efficient way of
		      retrieving variables from the table."
                  ::= { etherHostOrderEntry 1 }

          etherHostOrderAddress OBJECT-TYPE
                  SYNTAX OCTET STRING
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The ethernet physical address of this host."
                  ::= { etherHostOrderEntry 2 }

          etherHostOrderIfIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The interface on which packets from this
		      host were heard.  The interface identified by a
		      particular value of this index is the same
		      interface as identified by the same value of
		      ifIndex."
                  ::= { etherHostOrderEntry 3 }

          etherHostOrderPktsIn OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets transmitted to this host,
		      except for those that contained errors."
                  ::= { etherHostOrderEntry 4 }

          etherHostOrderPktsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets transmitted by this host,
		      including those that contained errors."
                  ::= { etherHostOrderEntry 5 }

          etherHostOrderOctetsIn OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of octets transmitted to this host,
		      except for those in packets with errors."
                  ::= { etherHostOrderEntry 6 }

          etherHostOrderOctetsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of octets transmitted by this host,
		      including those in packets with errors."
                  ::= { etherHostOrderEntry 7 }

          etherHostOrderErrorsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of error packets transmitted by
		      this host."
                  ::= { etherHostOrderEntry 9 }

          etherHostOrderBroadcastPktsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets transmitted by this host
		      that were directed to the broadcast address."
                  ::= { etherHostOrderEntry 10 }

          etherHostOrderMulticastPktsOut OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets transmitted by this host
		      that were directed to a multicast address.  Note
		      that this does not include packets directed to the
		      broadcast address."
                  ::= { etherHostOrderEntry 11 }


-- Ether traffic matrix tables

          etherSDTableSize OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of etherSDEntries in the etherSDTable.
		      This must also be the value of the number of entries
		      in the etherDSTable."
                  ::= { etherMatrix 1 }

          etherSDTable OBJECT-TYPE
                  SYNTAX SEQUENCE OF EtherSDEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "The list of traffic matrix entries indexed by
		      source and destination MAC address."
                  ::= { etherMatrix 2 }

          etherSDEntry OBJECT-TYPE
                  SYNTAX EtherSDEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      ""
                  INDEX { etherSDSourceAddress, etherSDDestAddress }
                  ::= { etherSDTable 1 }

          EtherSDEntry ::= SEQUENCE {
		etherSDSourceAddress	 OCTET STRING,
		etherSDDestAddress	 OCTET STRING,
		etherSDIfIndex		 INTEGER,
		etherSDPkts		 Counter,
		etherSDOctets		 Counter,
		etherSDErrors		 Counter
          }

          etherSDSourceAddress OBJECT-TYPE
                  SYNTAX OCTET STRING
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The ethernet physical address of the transmitting
		      host."
                  ::= { etherSDEntry 1 }

          etherSDDestAddress OBJECT-TYPE
                  SYNTAX OCTET STRING
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The ethernet physical address of the receiving
		      host."
                  ::= { etherSDEntry 2 }

          etherSDIfIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The interface on which packets from this
		      conversation were heard.  The interface
		      identified by a particular value of this
		      index is the same interface as identified
		      by the same value of ifIndex."
                  ::= { etherSDEntry 3 }

          etherSDPkts OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets transmitted from the
		      source host to the destination host."
                  ::= { etherSDEntry 4 }

          etherSDOctets OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of octets transmitted from the
		      source host to the destination host."
                  ::= { etherSDEntry 5 }

          etherSDErrors OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of error packets transmitted from
		      the source host to the destination host."
                  ::= { etherSDEntry 6 }


-- Ether traffic matrix tables from destination to source

          etherDSTable OBJECT-TYPE
                  SYNTAX SEQUENCE OF EtherDSEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "The list of traffic matrix entries indexed by
		      destination and source MAC address."
                  ::= { etherMatrix 2 }

          etherDSEntry OBJECT-TYPE
                  SYNTAX EtherDSEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      ""
                  INDEX { etherDSDestAddress, etherDSSourceAddress }
                  ::= { etherDSTable 1 }

          EtherDSEntry ::= SEQUENCE {
		etherDSSourceAddress	 OCTET STRING,
		etherDSDestAddress	 OCTET STRING,
		etherDSIfIndex		 INTEGER,
		etherDSPkts		 Counter,
		etherDSOctets		 Counter,
		etherDSErrors		 Counter
          }

          etherDSSourceAddress OBJECT-TYPE
                  SYNTAX OCTET STRING
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The ethernet physical address of the transmitting
		      host."
                  ::= { etherDSEntry 1 }

          etherDSDestAddress OBJECT-TYPE
                  SYNTAX OCTET STRING
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The ethernet physical address of the receiving
		      host."
                  ::= { etherDSEntry 2 }

          etherDSIfIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The interface on which packets from this
		      conversation were heard.  The interface
		      identified by a particular value of this
		      index is the same interface as identified
		      by the same value of ifIndex."
                  ::= { etherDSEntry 3 }

          etherDSPkts OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets transmitted from the
		      source host to the destination host."
                  ::= { etherDSEntry 4 }

          etherDSOctets OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of octets transmitted from the
		      source host to the destination host."
                  ::= { etherDSEntry 5 }

          etherDSErrors OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of error packets transmitted from
		      the source host to the destination host."
                  ::= { etherDSEntry 6 }

------------

          filterTable OBJECT-TYPE
                  SYNTAX SEQUENCE OF FilterEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "The list of packet filters applied to the network."
                  ::= { filter 1 }

          filterEntry OBJECT-TYPE
                  SYNTAX FilterEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      ""
                  INDEX { filterIndex }
                  ::= { filterTable 1 }

          FilterEntry ::= SEQUENCE {
		filterIndex			INTEGER,
		filterIfIndex			INTEGER,
		filterDescription		DisplayString,
		filterOffset			INTEGER,
		filter				OCTET STRING,
		filterMask			OCTET STRING,
		filterBufferControlIndex	INTEGER,
		filterNotificationIndex		INTEGER,
		filterMatchAction		INTEGER,
		filterMatchCount		Counter
          }

          filterIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "An index that uniquely identifies an entry
		      in the filter table.  Each such
		      entry defines one filter that is to be applied
		      to every packet received on an interface, with
		      specified actions taken when a match occurs."
                  ::= { filterEntry 1 }

          filterIfIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The interface for which every packet received
		      is checked against this filter.  The interface
		      identified by a particular value of this index
		      is the same interface as identified by the same
		      value of ifIndex."
                  ::= { filterEntry 2 }

          filterDescription OBJECT-TYPE
                  SYNTAX DisplayString
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "A comment describing this filter."
                  ::= { filterEntry 3 }

          filterOffset OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The offset from the beginning of each packet where
		      a match will be attempted.  This is measured from
		      the point in the physical layer packet after the
		      framing bits, if any.  For example, in an Ethernet
		      frame, this point is right before the beginning of
		      the destination MAC address."
                  ::= { filterEntry 4 }

          filter OBJECT-TYPE
                  SYNTAX OCTET STRING
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The octets that are to be matched with the input
		      packet.  For each packet received, this filter and
		      the accompanying mask will be adjusted for the offset,
		      the mask will be applied, and a match will be
		      attempted for whatever bits retain significance."
                  ::= { filterEntry 5 }

          filterMask OBJECT-TYPE
                  SYNTAX OCTET STRING
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The mask that is applied to the match process.
		      Only those bits that are set in this mask are
		      checked for equality with the filter.  The
		      offset is applied to filterMask in the same way
		      it is applied to the filter.  If the filter is
		      longer than filterMask, filterMask is extended
		      with 1 bits until it reaches the length of the filter."
                  ::= { filterEntry 6 }

          filterBufferControlIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The index of the bufferControlEntry that is affected
		      by the actions of this filter.  The interface
		      identified by a particular value of this index
		      is the same interface as identified by the same
		      value of bufferControlIndex.  If there is no
		      corresponding entry in the bufferControlTable, then
		      there is no action taken.  In fact, if no buffer action
		      is intended for this filter, filterBufferControlIndex
		      should be set to zero, a non-existent index."
                  ::= { filterEntry 7 }

          filterNotificationIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The index of the notificationEntry that is
		      used when this filter is matched.  The interface
		      identified by a particular value of this index
		      is the same interface as identified by the same
		      value of notificationIndex.  If there is no
		      corresponding entry in the notificationTable, then
		      no association exists.  In fact, if no notification
		      is intended for this filter, filterNotificationIndex
		      should be set to zero, a non-existent index."
                  ::= { filterEntry 8 }

          filterMatchAction OBJECT-TYPE
                  SYNTAX INTEGER {
			turnOn(1),
			turnOff(2),
			add(3),	-- add matched packet to buffer
			add-then-turnOff(4),
			turnOn-then-Add(5),
			none(6),
			invalid(7)
		  }
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The action to be taken when a match is made with
		      this filter."
                  ::= { filterEntry 9 }

          filterMatchCount OBJECT-TYPE
                  SYNTAX Counter
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The number of times this filter has matched a packet."
                  ::= { filterEntry 10 }

          bufferControlTable OBJECT-TYPE
                  SYNTAX SEQUENCE OF BufferControlEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "The list of buffers containing packets captured from
		      the network."
                  ::= { filter 2 }

          bufferControlEntry OBJECT-TYPE
                  SYNTAX BufferControlEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      ""
                  INDEX { bufferControlIndex }
                  ::= { bufferControlTable 1 }

          BufferControlEntry ::= SEQUENCE {
		bufferControlIndex		INTEGER,
		bufferControlState		INTEGER,
		bufferControlFullAction		INTEGER,
		bufferControlCaptureSliceSize	INTEGER,
		bufferControlUsedBuffers	INTEGER
          }

          bufferControlIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "An index that uniquely identifies an entry
		      in the bufferControl table.  The value of this
		      index shall never become zero.  Each such
		      entry defines one set of packets that is
		      captured and controlled by one or more filters."
                  ::= { bufferControlEntry 1 }


          bufferControlState OBJECT-TYPE
                  SYNTAX INTEGER {
			on(1),
			off(2)
		  }
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "This controls whether the buffer is accepting packets
		      that have passed through the filters.  If the state is
		      on(1), it will accept them and add them to the
		      captureBuffer.  Otherwise, if it is off(2), the
		      packet will be discarded from further processing by
		      this group.  If this variable is set to the on(1) state
		      from the off(2) state, all packets stored in the
		      captureBuffer for this entry shall be deleted."
                  ::= { bufferControlEntry 2 }

          bufferControlFullAction OBJECT-TYPE
                  SYNTAX INTEGER {
			stopWhenFull(1),
			wrapWhenFull(2)	-- FIFO
		  }
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "Controls the action of the buffer when it
		      reaches the full state.  In the stopWhenFull(1)
		      state, after the last packet is added to the
		      buffer, the bufferControlState will be set to
		      off(2) and capture to this buffer will stop."
                  ::= { bufferControlEntry 3 }

          bufferControlCaptureSliceSize OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The maximum number of octets of each packet
		      that will be saved in this capture buffer."
                  ::= { bufferControlEntry 4 }

          bufferControlUsedPackets OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The number of packets currently in this captureBuffer."
                  ::= { bufferControlEntry 5 }


          captureBufferTable OBJECT-TYPE
                  SYNTAX SEQUENCE OF CaptureBufferEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "The packets captured off of the network."
                  ::= { filter 3 }

          captureBufferEntry OBJECT-TYPE
                  SYNTAX CaptureBufferEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "A packet captured off of an attached network."
                  INDEX { bufferControlIndex, captureBufferIndex }
                  ::= { captureBufferTable 1 }

          CaptureBufferEntry ::= SEQUENCE {
		captureBufferBufferControlIndex	INTEGER,
		captureBufferIndex		INTEGER,
		captureBufferPacket		OCTET STRING,
		captureBufferLength		INTEGER,
		captureBufferTime		TimeTicks
          }

          captureBufferBufferControlIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The index of the bufferControlEntry with which
		      this packet is associated."
                  ::= { captureBufferEntry 1 }

          captureBufferIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "An index that uniquely identifies an entry
		      in the captureBuffer table associated with a
		      particular bufferControlEntry.  The value
		      of this index will start at 1 and increase
		      monotonically for each new packet added with the
		      same bufferControlIndex."
                  ::= { captureBufferEntry 2 }

          captureBufferPacket OBJECT-TYPE
                  SYNTAX OCTET STRING
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The data inside the packet, starting at the beginning
		      of the packet, and running until the end of the packet
		      or until the length of the bufferControlCaptureSliceSize
		      is exceeded."
                  ::= { captureBufferEntry 3 }

          captureBufferPacketLength OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The actual length (off the wire) of the packet stored
			in this entry."
                  ::= { captureBufferEntry 4 }

          captureBufferPacketTime OBJECT-TYPE
                  SYNTAX TimeTicks
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The value of sysUptime at the time this packet
		      was captured."
                  ::= { captureBufferEntry 5 }

-- The Notification group

          notificationTable OBJECT-TYPE
                  SYNTAX SEQUENCE OF NotificationEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "The list of notifications to be made."
                  ::= { notifications 1 }

          notificationEntry OBJECT-TYPE
                  SYNTAX NotificationEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      ""
                  INDEX { notificationIndex }
                  ::= { notificationTable 1 }

          NotificationEntry ::= SEQUENCE {
		notificationIndex	INTEGER,
		notificationDescription	DisplayString,
		notificationType	INTEGER,
		notificationTrapType	INTEGER
          }

          notificationIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "An index that uniquely identifies an entry
		      in the notification table.  Each such
		      entry defines one notification that is to be made
		      when the correct conditions occur."
                  ::= { notificationEntry 1 }

          notificationDescription OBJECT-TYPE
                  SYNTAX DisplayString
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "A comment describing this notification entry."
                  ::= { notificationEntry 2 }

          notificationType OBJECT-TYPE
                  SYNTAX INTEGER {
			log(1),
			snmp-trap(2),	-- send an SNMP trap
			log-and-trap(3),
			invalid(4)
		  }
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      ""
                  ::= { notificationEntry 3 }

          notificationTrapType OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "If an SNMP trap is to be sent, this integer is
used as the
		      entreprise-specific trap identifier inside the trap PDU."
                  ::= { notificationEntry 4 }

--
          logTable OBJECT-TYPE
                  SYNTAX SEQUENCE OF LogEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "The list of notifications to be made."
                  ::= { notifications 2 }

          logEntry OBJECT-TYPE
                  SYNTAX LogEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      ""
                  INDEX { logIndex }
                  ::= { logTable 1 }

          LogEntry ::= SEQUENCE {
		logIndex	INTEGER,
		logDescription	DisplayString,
		logTime		TimeTicks
          }

          logIndex OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "An index that uniquely identifies an entry
		      in the log table.  Each such
		      entry defines one log that has been made."
                  ::= { logEntry 1 }

          logDescription OBJECT-TYPE
                  SYNTAX DisplayString
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "A description of the event that activated this
		      log entry."
                  ::= { logEntry 1 }

          logTime OBJECT-TYPE
                  SYNTAX TimeTicks
                  ACCESS read-write
                  STATUS mandatory
                  DESCRIPTION
                      "The value of sysUpTime at the time this log entry
		      was created."
                  ::= { logEntry 1 }



END



