



TBD                                                          R. Stepanek
Internet-Draft                                                  FastMail
Intended status: Standards Track                             M. Loffredo
Expires: December 22, 2019                                       IIT-CNR
                                                           June 20, 2019


          JSContact: A JSON representation of addressbook data
                      draft-stepanek-jscontact-02

Abstract

   This specification defines a data model and JSON representation of
   contact information that can be used for data storage and exchange in
   address book or directory applications.  It aims to be an alternative
   to the vCard data format and to be unambiguous, extendable and simple
   to process.  In contrast to the JSON-based jCard format, it is not a
   direct mapping from the vCard data model and expands semantics where
   appropriate.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 22, 2019.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must



Stepanek & Loffredo     Expires December 22, 2019               [Page 1]

Internet-Draft                  JSContact                      June 2019


   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Relation to the xCard and jCard formats . . . . . . . . .   3
     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Contact . . . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Contact Group . . . . . . . . . . . . . . . . . . . . . . . .   8
   4.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   9
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .   9
   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   9
     6.1.  Normative References  . . . . . . . . . . . . . . . . . .   9
     6.2.  Informative References  . . . . . . . . . . . . . . . . .  10
     6.3.  URIs  . . . . . . . . . . . . . . . . . . . . . . . . . .  11
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  11

1.  Introduction

   This document defines a data model for contact data normally used in
   address book or directory applications and services.  It aims to be
   an alternative to the vCard data format [RFC6350] and to provide a
   JSON-based standard representation of contacts data.

   The key design considerations for this data model are as follows:

   o  Most of the initial set of attributes should be taken from the
      vCard data format [RFC6350] and extensions ([RFC6473], [RFC6474],
      [RFC6715], [RFC6869], [RFC8605]).  The specification should add
      new attributes or value types, or not support existing ones, where
      appropriate.  Conversion between the data formats need not fully
      preserve semantic meaning.

   o  The attributes of the contacts data represented must be described
      as a simple key-value pair, reducing complexity of its
      representation.

   o  The data model should avoid all ambiguities and make it difficult
      to make mistakes during implementation.

   o  Extensions, such as new properties and components, MUST NOT lead
      to requiring an update to this document.

   The representation of this data model is defined in the I-JSON format
   [RFC7493], which is a strict subset of the JavaScript Object Notation
   (JSON) Data Interchange Format [RFC8259].  Using JSON is mostly a



Stepanek & Loffredo     Expires December 22, 2019               [Page 2]

Internet-Draft                  JSContact                      June 2019


   pragmatic choice: its widespread use makes JSContact easier to adopt,
   and the availability of production-ready JSON implementations
   eliminates a whole category of parser-related interoperability
   issues.

1.1.  Relation to the xCard and jCard formats

   The xCard [RFC6351] and jCard [RFC7095] specifications define
   alternative representations for vCard data, in XML and JSON format
   respectively.  Both explicitly aim to not change the underlying data
   model.  Accordingly, they are regarded as equal to vCard in the
   context of this document.

1.2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Contact

   MIME type: "application/jscontact+json;type=jscontact"

   A JSContact object stores contact information about a person,
   organization or company.  It has the following properties:

   o  uid: String (mandatory).  An identifier, used to associate the
      object as the same across different systems, addressbooks and
      views.  [RFC4122] describes a range of established algorithms to
      generate universally unique identifiers (UUID), and the random or
      pseudo-random version is recommended.  For compatibility with
      [RFC6350] UIDs, implementations MUST accept both URI and free-form
      text.

   o  prodId: String (optional).  The identifier for the product that
      created the JSContact object.

   o  updated: String (mandatory).  The date and time when the data in
      this JSContact object was last modified.  The timestamp MUST be
      formatted as specified in [RFC3339].

   o  kind: String (optional).  The kind of the entity the Contact
      represents.  The value MUST be either one of the following values,
      registered in a future RFC, or a vendor-specific value:

      *  "individual": a single person



Stepanek & Loffredo     Expires December 22, 2019               [Page 3]

Internet-Draft                  JSContact                      June 2019


      *  "org": an organization

      *  "location": a named location

      *  "device": a device, such as appliances, computers, or network
         elements

      *  "application": a software application

   o  fullName: FullName[] (mandatory).  The full name(s) of a contact.
      A FullName object has the following properties:

      *  name: String (mandatory) The full name (e.g. the personal name
         and surname of an individual, the name of an organization).

      *  language: String (optional) The [RFC5646] language tag of this
         name, if any.

      *  isPreferred: Boolean (optional, default: "false").  Whether
         this FullName is the preferred name for this contact.

   o  structuredName: StructuredName (optional).  The name of this
      contact, structured by its constituents.  A StructuredName object
      has the following properties:

      *  prefix: String[] (optional).  The honorific title(s) of the
         contact (e.g.  "Mr", "Ms", "Dr").

      *  personalName: String[] (optional).  The personal name(s) of a
         contact (also known as "first name", "give name").

      *  surname: String[] (optional).  The surname(s) of a contact
         (also known as "last name", "family name").

      *  additionalName: String[] (optional).  The additional name(s) of
         a contact (also known as "middle name").

      *  suffix: String[] (optional).  The honorific suffix(es) of the
         contact (e.g.  "B.A.", "Esq.").

   o  nickname: String[] (optional).  The nickname(s) of the contact.

   o  birthday: String (optional).  The contact's birth date in the form
      "YYYY-MM-DD" (any part may be all 0s for unknown) or a [RFC3339]
      timestamp.

   o  birthPlace: String (optional).  The contact's birth place.




Stepanek & Loffredo     Expires December 22, 2019               [Page 4]

Internet-Draft                  JSContact                      June 2019


   o  deathDate: String (optional).  The contact's death date in the
      form "YYYY-MM-DD" (any part may be all 0s for unknown) or a
      [RFC3339] timestamp.

   o  deathPlace: String (optional).  The contact's death place.

   o  anniversary: String (optional).  The contact's anniversary date in
      the form "YYYY-MM-DD" (any part may be all 0s for unknown).

   o  organization: String[] (optional).  The company or organization
      name and units associated with this contact.  The first entry in
      the list names the organization, and any following entries name
      organizational units.

   o  jobTitle[]: String (optional).  The job title(s) or functional
      position(s) of the contact.

   o  role[]: String (optional).  The role(s), function(s) or part(s)
      played in a particular situation by the contact.  In contrast to a
      job title, the roles might differ for example in project contexts.

   o  emails: ContactMethod[] (optional).  An array of ContactMethod
      objects where the values are email addresses.  Types are:

      *  "personal" The address is for emailing the contact in a
         personal context.

      *  "work" The address is for emailing the contact in a
         professional context.

      *  "other" The address is for some other purpose.  A label
         property MAY be included to display next to the address to help
         the user identify its purpose.

   o  phones: ContactMethod[] (optional).  An array of ContactMethod
      objects where the values are phone numbers.  Types are:

      *  "voice" The number is for calling the contact.

      *  "fax" The number is for sending faxes to the contact.

      *  "pager" The number is for a pager or beeper associated with the
         contact.

      *  "other" The number is for some other purpose.  A label property
         MAY be included to display next to the number to help the user
         identify its purpose.
      The following labels are pre-defined for phone contact methods:



Stepanek & Loffredo     Expires December 22, 2019               [Page 5]

Internet-Draft                  JSContact                      June 2019


      *  "private" The phone number should be used in a private context.

      *  "work" The phone number should be used in a professional
         context

   o  online: ContactMethod[] (optional).  An array of ContactMethod
      objects where the values are URIs or usernames associated with the
      contact for online services.  Types are:

      *  "uri" The value is a URI, e.g. a website link.

      *  "username" The value is a username associated with the contact
         (e.g. for social media, or an IM client).  A label property
         SHOULD be included to identify what service this is for.  For
         compatibility between clients, this label SHOULD be the
         canonical service name, including capitalisation. e.g.
         "Twitter", "Facebook", "Skype", "GitHub", "XMPP".

      *  "other" The value is something else not covered by the above
         categories.  A label property MAY be included to display next
         to the number to help the user identify its purpose.

   o  preferredContactMethod: String (optional) Defines the preferred
      contact method.  The value MUST be the property name of one of the
      ContactMethod lists: "emails", "phones", "online", "other".

   o  addresses: Address[] (optional).  An array of Address objects,
      containing physical locations associated with the contact.

   o  personalInfo: PersonalInformation[] (optional).  A list of
      personal information about this contact.  A PersonalInformation
      object has the following properties:

      *  type: String (mandatory).  Specifies the type for this personal
         information.  Allowed values are:

         +  "expertise": a field of expertise or credential

         +  "hobby": a hobby of this contact

         +  "interest": an interest of this contact

         +  "other": an information not covered by the above categories

      *  value: String (mandatory).  The actual contact information.
         This generally is free-text, but future specifications MAY
         restrict allowed values depending on the type of this
         PersonalInformation.



Stepanek & Loffredo     Expires December 22, 2019               [Page 6]

Internet-Draft                  JSContact                      June 2019


      *  level: String (optional) Indicates the level of expertise, or
         engagement in hobby or interest.  Allowed values are: "high",
         "medium" and "low".

   o  notes: String (optional).  Arbitrary notes about the contact.

   o  categories: String[] (optional).  A list of free-text or URI
      categories that relate to the contact.

   A ContactMethod object has the following properties:

   o  type: String (mandatory).  Specifies the context of the contact
      method.  This MUST be taken from the set of values allowed
      depending on whether this is part of the phones, emails or online
      property (see above).

   o  label: String (optional).  A label describing the value in more
      detail, especially if the type property has value "other" (but MAY
      be included with any type).

   o  value: String (mandatory).  The actual contact method, e.g. the
      email address or phone number.

   o  isPreferred: Boolean (optional, default: "false").  Whether this
      ContactMethod is the preferred for its type.  This SHOULD only be
      one per type.

   An Address object has the following properties:

   o  type: String (mandatory).  Specifies the context of the address
      information.  The value MUST be either one of the following
      values, registered in a future RFC, or a vendor-specific value:

      *  "home" An address of a residence associated with the contact.

      *  "work" An address of a workplace associated with the contact.

      *  "billing" An address to be used with billing associated with
         the contact..

      *  "postal" An address to be used for delivering physical items to
         the contact.

      *  "other" An address not covered by the above categories.

   o  label: String (optional).  A label describing the value in more
      detail.




Stepanek & Loffredo     Expires December 22, 2019               [Page 7]

Internet-Draft                  JSContact                      June 2019


   o  fullAddress: String (optional).  The complete address, excluding
      type and label.  This property is mainly useful to represent
      addresses of which the individual address components are unknown.

   o  street: String (optional).  The street address.  This MAY be
      multiple lines; newlines MUST be preserved.

   o  extension: String (optional) The extended address, such as an
      apartment or suite number, or care-of address.

   o  postOfficeBox: String (optional) The post office box.

   o  locality: String (optional).  The city, town, village, post town,
      or other locality within which the street address may be found.

   o  region: String (optional).  The province, such as a state, county,
      or canton within which the locality may be found.

   o  postcode: String (optional).  The postal code, post code, ZIP code
      or other short code associated with the address by the relevant
      country's postal system.

   o  country: String (optional).  The country name.

   o  countryCode: String (optional).  The ISO-3166-1 country code.

   o  coordinates: String (optional) A [RFC5870] "geo:" URI for the
      address.

   o  timeZone: String (optional) Identifies the time zone this address
      is located in.  This SHOULD be a time zone name registered in the
      IANA Time Zone Database [1].  Unknown time zone identifiers MAY be
      ignored by implementations.

   o  isPreferred: Boolean (optional, default: "false").  Whether this
      Address is the preferred for its type.  This SHOULD only be one
      per type.

3.  Contact Group

   MIME type: "application/jscontact+json;type=jscontactgroup"

   A JSContactGroup object represents a named set of contacts.  It has
   the following properties:

   o  uid: String (mandatory).  A globally unique identifier.  The same
      requirements as for the JSContact uid property apply.




Stepanek & Loffredo     Expires December 22, 2019               [Page 8]

Internet-Draft                  JSContact                      June 2019


   o  name: String (optional).  The user-visible name for the group,
      e.g.  "Friends".  This may be any UTF-8 string of at least 1
      character in length and maximum 255 octets in size.  The same name
      may be used by two different groups.

   o  contactIds: String[] (mandatory).  The ids of the contacts in the
      group.  Implementations MUST preserve the order of list entries.

4.  IANA Considerations

   TBD

5.  Security Considerations

   TBD

6.  References

6.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC4122]  Leach, P., Mealling, M., and R. Salz, "A Universally
              Unique IDentifier (UUID) URN Namespace", RFC 4122,
              DOI 10.17487/RFC4122, July 2005,
              <https://www.rfc-editor.org/info/rfc4122>.

   [RFC5870]  Mayrhofer, A. and C. Spanring, "A Uniform Resource
              Identifier for Geographic Locations ('geo' URI)",
              RFC 5870, DOI 10.17487/RFC5870, June 2010,
              <https://www.rfc-editor.org/info/rfc5870>.

   [RFC6350]  Perreault, S., "vCard Format Specification", RFC 6350,
              DOI 10.17487/RFC6350, August 2011,
              <https://www.rfc-editor.org/info/rfc6350>.

   [RFC6351]  Perreault, S., "xCard: vCard XML Representation",
              RFC 6351, DOI 10.17487/RFC6351, August 2011,
              <https://www.rfc-editor.org/info/rfc6351>.

   [RFC7095]  Kewisch, P., "jCard: The JSON Format for vCard", RFC 7095,
              DOI 10.17487/RFC7095, January 2014,
              <https://www.rfc-editor.org/info/rfc7095>.





Stepanek & Loffredo     Expires December 22, 2019               [Page 9]

Internet-Draft                  JSContact                      June 2019


   [RFC7493]  Bray, T., Ed., "The I-JSON Message Format", RFC 7493,
              DOI 10.17487/RFC7493, March 2015,
              <https://www.rfc-editor.org/info/rfc7493>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8259]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", STD 90, RFC 8259,
              DOI 10.17487/RFC8259, December 2017,
              <https://www.rfc-editor.org/info/rfc8259>.

6.2.  Informative References

   [RFC3339]  Klyne, G. and C. Newman, "Date and Time on the Internet:
              Timestamps", RFC 3339, DOI 10.17487/RFC3339, July 2002,
              <https://www.rfc-editor.org/info/rfc3339>.

   [RFC5646]  Phillips, A., Ed. and M. Davis, Ed., "Tags for Identifying
              Languages", BCP 47, RFC 5646, DOI 10.17487/RFC5646,
              September 2009, <https://www.rfc-editor.org/info/rfc5646>.

   [RFC6473]  Saint-Andre, P., "vCard KIND:application", RFC 6473,
              DOI 10.17487/RFC6473, December 2011,
              <https://www.rfc-editor.org/info/rfc6473>.

   [RFC6474]  Li, K. and B. Leiba, "vCard Format Extensions: Place of
              Birth, Place and Date of Death", RFC 6474,
              DOI 10.17487/RFC6474, December 2011,
              <https://www.rfc-editor.org/info/rfc6474>.

   [RFC6715]  Cauchie, D., Leiba, B., and K. Li, "vCard Format
              Extensions: Representing vCard Extensions Defined by the
              Open Mobile Alliance (OMA) Converged Address Book (CAB)
              Group", RFC 6715, DOI 10.17487/RFC6715, August 2012,
              <https://www.rfc-editor.org/info/rfc6715>.

   [RFC6869]  Salgueiro, G., Clarke, J., and P. Saint-Andre, "vCard
              KIND:device", RFC 6869, DOI 10.17487/RFC6869, February
              2013, <https://www.rfc-editor.org/info/rfc6869>.

   [RFC8605]  Hollenbeck, S. and R. Carney, "vCard Format Extensions:
              ICANN Extensions for the Registration Data Access Protocol
              (RDAP)", RFC 8605, DOI 10.17487/RFC8605, May 2019,
              <https://www.rfc-editor.org/info/rfc8605>.





Stepanek & Loffredo     Expires December 22, 2019              [Page 10]

Internet-Draft                  JSContact                      June 2019


6.3.  URIs

   [1] https://www.iana.org/time-zones

Authors' Addresses

   Robert Stepanek
   FastMail
   PO Box 234, Collins St West
   Melbourne  VIC 8007
   Australia

   Email: rsto@fastmailteam.com


   Mario Loffredo
   IIT-CNR
   Via Moruzzi,1
   Pisa  56124
   Italy

   Email: mario.loffredo@iit.cnr.it





























Stepanek & Loffredo     Expires December 22, 2019              [Page 11]
