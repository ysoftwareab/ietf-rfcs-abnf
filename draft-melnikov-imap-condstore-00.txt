Internet Draft: IMAP Extension for Conditional STORE          A. Melnikov
Document: draft-melnikov-imap-condstore-00.txt                    S. Hole
Expires: August 2001                        ACI WorldWide/MessagingDirect
                                                            February 2001

                 IMAP Extension for Conditional STORE operation
    
Status of this Memo
    
    This document is an Internet-Draft and is in full conformance with
    all provisions of Section 10 of RFC2026.  Internet-Drafts are
    working documents of the Internet Engineering Task Force (IETF), its
    areas, and its working groups.  Note that other groups may also
    distribute working documents as Internet-Drafts.
    
    Internet-Drafts are draft documents valid for a maximum of six
    months and may be updated, replaced, or obsoleted by other documents
    at any time.  It is inappropriate to use Internet-Drafts as
    reference material or to cite them other than as "work in progress."
    
    The list of current Internet-Drafts can be accessed at
    http://www.ietf.org/ietf/1id-abstracts.txt.  The list of Internet-
    Draft Shadow Directories can be accessed at
    http://www.ietf.org/shadow.html.
    
    
Copyright Notice
    
     Copyright (C) The Internet Society 2001. All Rights Reserved.


0.1. Open issues


    1). modtime: timestamp or sequence counter?

    2). How specify different UNCHANGESINCE for different flags in the
	  same STORE?  Do we want such granularity anyway?

    3). The document assumes that each flag has a corresponding
	  ANNOTATE attribute. How to specify both entry name and
	  attribute in attr-name for annotations? This has to be
	  synchronized with ANNOTATE draft.

    4). What MODTIME has a user-defined flag that was never set? What
        about system flags?

    5). Untagged Modtime response used with FETCH/STORE to specify that
        client has all data till modtime? MODTIME Message Data Item in
        STATUS?

    6). Add support for SORT extension? 


                           Table of Contents

   <<To be completed later>>


1. Abstract

   There is a class of applications that wish to have multiple IMAP clients
   coordinate activities with a single shared mailbox. These applications
   need some mechanism to synchronize state changes for messages within the
   mailbox. They must be able to guaranty that only one client can change
   message state (e.g. message flags or annotations) at any point in time.
   An example of such an application is use of an IMAP mailbox as a message
   queue with multiple dequeueing clients.

   The Conditional Store facility provides a protected update mechanism for
   message state information that can detect and resolve conflicts between
   multiple writers.


2. Conventions Used in This Document
    
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
    document are to be interpreted as described in RFC 2119 [KEYWORDS].
    
    Formal syntax is defined using ABNF [ABNF] as modified by [IMAP4].
    
    In examples, "C:" and "S:" indicate lines sent by the client and
    server respectively.

    The term metadata or metadata item will be used throughout this
    document.  It references any system or user defined flag or an
    annotation [ANNOTATION].


3. Introduction and Overview
    
    The Conditional STORE extension is present in any IMAP4
    implementation which returns "CONDSTORE" as one of the supported
    capabilities in the CAPABILITY command response.

    Every read-write metadata of an IMAP message has an associated
    value called modification timestamp (modtime). This is an opaque
    value updated by the server whenever metadata item is modified.
    The value is intended to be used only for comparisons within a
    server, not as an accurate timestamp. However the server MUST
    guarantie that each STORE command (including simultaneous stores
    from different connections on different attributes) will use
    different modtime values. Modtime is described more fully in
    section 3.1.1 of [ACAP].

    Modtime allows the client that supports CONDSTORE extension to
    track whether the value of particular flag was changed since some
    moment in time. Whenever the state of a flag change (i.e. the flag
    is added and before it wasn't set or the flags is removed and
    before it was set) the value of modification timestamp for that
    flag MUST be updated. Adding the flag when it is already present
    of removing when it is not SHOULD NOT change modtime. Each flag
    SHOULD have separate modtime, for example change to \Draft flag
    SHOULD NOT affect modtime for \Deleted flag.

    When message is appended to mailbox (via APPEND command or using
    external mechanism) the server assigns the current server
    timestamp to every flag or annotation specified in the APPEND
    command.

    When an annotation is removed modtime SHOULD be preserved.

    This extension makes the following changes to the IMAP4 protocol:
    
        a) extends syntax of the STORE command for allowing to specify
           STORE modifiers

        b) adds MODIFIED response code that should be used with NO
           response to STORE

        c) adds a new MODTIME message data item for use in the FETCH
           command

        d) adds a new MODTIME message data item for use in the SEARCH
           command

    The rest of this document describes protocol changes more
    rigorously.


4. IMAP Protocol Changes
    
4.1.  STORE and UID STORE Commands

   Arguments:  message set
               OPTIONAL store modifiers
               message data item name
               value for message data item

   Responses:  untagged responses: FETCH

   Result:     OK - store completed
               NO - store error: can't store that data
               BAD - command unknown or arguments invalid


      This document extends syntax of the STORE (and UID STORE
      respectively) command (see section 6.4.6 of [IMAP]) to include
      optional STORE modifiers.  The document defines the following
      modifier:

        UNCHANGEDSINCE
           If the "modtime" of any metadata item specified in STORE
           operation for any message in the message set is greater
           than the unchangedsince value, then the store fails with a
           MODIFIED response code that includes message set of all
           messages that failed UNCHANGESINCE test.

           Example:
    
             C: a101 STORE 7,5,9 (UNCHANGEDSINCE "20000320162338")
                 +FLAGS.SILENT (\Deleted)
             S: a101 NO [MODIFIED 7,9] Conditional STORE failed
              
	   Use of UNCHANGEDSINCE with a time of "00000101000000" will
           always fail if the metadata item exists.

           Example:
    
             C: a102 STORE 12 (UNCHANGEDSINCE "00000101000000") 
                 +FLAGS.SILENT ($MDNSent)
             S: a102 NO [MODIFIED 12] Conditional STORE failed

           If operation is successful the server MUST update the
           "modtime" attribute for every metadata item that was
           changed. Untagged FETCH response MUST be sent even if
           .SILENT is specified and it MUST include MODTIME message
           data item as described in 4.2.

           Example:
    
             C: a103 UID STORE 6,4,8 (UNCHANGEDSINCE "200012121230045") 
                 +FLAGS.SILENT (\Deleted)
             S: * 1 FETCH (UID 4 MODTIME ("/message/flags/system/\\Deleted" "200012111230045"))
             S: * 2 FETCH (UID 6 MODTIME ("/message/flags/system/\\Deleted" "200012101230045"))
             S: * 4 FETCH (UID 8 MODTIME ("/message/flags/system/\\Deleted" "200012121130045"))
             S: a103 OK Store completed

           Example:
    
             C: a104 STORE * (UNCHANGEDSINCE "200012121230045") +FLAGS.SILENT (\Deleted $Processed)
             S: * 50 FETCH (MODTIME ("/message/flags/system/\\Deleted" "200012111230045"
			      "/message/flags/system/$Processed" "200012111230045"))
             S: a104 OK Store completed
    
           In the latter example UNCHANGEDSINCE value is checked
           against modtimes for both flags.

           Note: If the message is specified multiple times in the
           message set and the server doesn't internally eliminate
           duplicates from the message set it MUST NOT fail
           conditional STORE operation for the second occurence of the
           message in the message set if operation completed
           succesfully for the first occurence. For example, if the
           client specifies:

              a100 STORE 7,3:9 (UNCHANGEDSINCE "200012121230045")
               +FLAGS.SILENT (\Deleted)

           the server must not fail operation for the message 7 as a
           part of processing "3:9" if it succeeded when the message 7
           was processed the first time.


4.2. MODTIME message data item in FETCH Command
    
    This extension adds an MODTIME message data item to the FETCH
    command. This allows clients to retrieve modtime for various
    metadata items for a range of messages in the currently selected
    mailbox.
    
    MODTIME <attr-names>

        The MODTIME message data item, when used by the client in the
        FETCH command, takes a list of metadata items.  For a flag
        <flagname> the corresponding attr-name has a form
        "/message/flags/system/<flagname>"
    
    Example:
    
        C: a FETCH 1 (MODTIME ("/message/comment" "/message/flags/system/$MDNSent"))
        S: * 1 FETCH (MODTIME ("/message/comment" 112 "/message/flags/system/$MDNSent" 64))
        S: a OK Fetch complete
 

4.3 MODTIME criterion in SEARCH
    
    The MODTIME criterion for the SEARCH command allows a client to
    search for the specified modtime of a metadata item in a message.
    
        MODTIME <attr-name> <modtime-value>

            Messages that have modification counter for metadata item
            <attr-name> with value equal or greater than
            <modtime-value>. This allows a client, for example, to
            find out which messages contain metadata items that have
            changed since the last time it updated its disconnected
            cache.
    
    Examples:
        C: a SEARCH MODTIME "/message/flags/system/\\draft" "20010320162338" 
			 ANNOTATION "/message/comment" "value" "IMAP4"
        S: * SEARCH 2 3 5 7 11 13 17 19 23
        S: a OK Search complete
    
            In the above example, the message numbers of any messages
            containing the string "IMAP4" in the "value" attribute of
            the "/message/comment" entry and having modtime
            "20010320162338" for flag \Draft are returned in the
            search results.


5. Formal Syntax
    
    The following syntax specification uses the Augmented Backus-Naur
    Form (ABNF) notation as specified in [ABNF].
    
    Non-terminals referenced but not defined below are as defined by
    [IMAP4].
    
    Except as noted otherwise, all alphabetic characters are case-
    insensitive.  The use of upper or lower case characters to define
    token strings is for editorial clarity only.  Implementations MUST
    accept these strings in a case-insensitive fashion.

   store              = "STORE" SP set SP store-modifiers store-att-flags
   
   store-modifiers    = [ "(" 1*store-modifier ")" ]
    
   store-modifier     = "UNCHANGEDSINCE" time

   fetch-att          =/ fetch-modtime
                         ; modifies original IMAP4 fetch-att

   fetch-modtime      = "MODTIME" SP "(" 1*attr-name ")"

   fetch-mod-resp     = "MODTIME" SP "(" 1*(attr-name SP counter) ")"

   search-key         =/ search-modtime
                         ; modifies original IMAP4 search-key

   search-modtime     = "MODTIME" SP attr-name SP counter

   resp-text-code     =/ "MODIFIED" SP set

   attr-name          = "/message/flags/system/" attr-flag 
                        ;; each system or user defined flag <flag> is mapped to
                        ;; "/message/flags/system/<flag>"


<<Borrowed from IMAP4rev1 and modified accordingly:>>

   attr-flag          = "\\Answered" / "\\Flagged" / "\\Deleted" /
                        "\\Seen" / "\\Draft" / attr-flag-keyword / attr-flag-extension
                        ; Does not include "\Recent"

   attr-flag-extension = "\\" atom
                       ; Future expansion.  Client implementations
                       ; MUST accept flag-extension flags.  Server
                       ; implementations MUST NOT generate
                       ; flag-extension flags except as defined by
                       ; future standard or standards-track
                       ; revisions of this specification.

   attr-flag-keyword   = atom


<<Borrowed from ACAP:>>

   time               = <"> time-year time-month time-day time-hour
                        time-minute time-second time-subsecond <">
                        ;; Timestamp in UTC

   time-day           = 2DIGIT ;; 01-31

   time-hour          = 2DIGIT ;; 00-23

   time-minute        = 2DIGIT ;; 00-59

   time-month         = 2DIGIT ;; 01-12

   time-second        = 2DIGIT ;; 00-60

   time-subsecond     = *DIGIT

   time-year          = 4DIGIT


6. Security Considerations
    
    There are no known security issues with this extension.
    
    
7. References
    
    [ABNF] Crocker, Overell, "Augmented BNF for Syntax Specifications:
    ABNF", RFC 2234, Internet Mail Consortium, Demon Internet Ltd,
    November 1997.
    
    [IMAP4] Crispin, M., "Internet Message Access Protocol - Version
    4rev1", RFC 2060, University of Washington, December 1996.
    
    [KEYWORDS] Bradner, "Key words for use in RFCs to Indicate
    Requirement Levels", RFC 2119, Harvard University, March 1997.
    
    [ACAP] Newman, Myers, "ACAP -- Application Configuration Access
    Protocol", RFC 2244, Innosoft, Netscape, November 1997.
    <ftp://ftp.isi.edu/in-notes/rfc2244.txt>

    [ANNOTATION] Gellens, R., Daboo, C., "IMAP ANNOTATE Extension",
    work in progress.
    <http://www.ietf.org/internet-drafts/draft-ietf-imapext-annotate-xx.txt>

    [SORT-EXT] Crispin, M., "Internet Message Access Protocol -- SORT
    Extension", work in progress.
    <http://www.ietf.org/internet-drafts/draft-crispin-imapext-sort-xx.txt>

    
8. Full Copyright Statement
    
    Copyright (C) The Internet Society 2001.  All Rights Reserved.
    
    This document and translations of it may be copied and furnished to
    others, and derivative works that comment on or otherwise explain it
    or assist in its implementation may be prepared, copied, published
    and distributed, in whole or in part, without restriction of any
    kind, provided that the above copyright notice and this paragraph
    are included on all such copies and derivative works.  However, this
    document itself may not be modified in any way, such as by removing
    the copyright notice or references to the Internet Society or other
    Internet organizations, except as needed for the purpose of
    developing Internet standards in which case the procedures for
    copyrights defined in the Internet Standards process must be
    followed, or as required to translate it into languages other than
    English.
    
    The limited permissions granted above are perpetual and will not be
    revoked by the Internet Society or its successors or assigns.
    
    This document and the information contained herein is provided on an
    "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
    TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
    BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
    HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
    MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
