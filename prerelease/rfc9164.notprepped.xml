<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-cbor-network-addresses-13" number="9164" obsoletes="" updates="" submissionType="IETF" category="std" consensus="true" xml:lang="en" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  
  <!-- xml2rfc v2v3 conversion 3.10.0 -->

  <front>
    <title abbrev="CBOR Tags for IP">Concise Binary Object Representation (CBOR) Tags for IPv4 and IPv6 Addresses and Prefixes</title>
    <seriesInfo name="RFC" value="9164"/>
    <author initials="M." surname="Richardson" fullname="Michael Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
      </address>
    </author>
    <author initials="C." surname="Bormann" fullname="Carsten Bormann">
      <organization>Universit√§t Bremen TZI</organization>
      <address>
        <postal>
          <country>Germany</country>
        </postal>
        <email>cabo@tzi.org</email>
      </address>
    </author>
    <date year="2021" month="December"/>
    <area>Internet</area>
    <workgroup>CBOR Working Group</workgroup>
    <keyword>binary format</keyword>
    <keyword>data interchange format</keyword>
    <keyword>interface address</keyword>
    <keyword>zone identifier</keyword>

    <abstract>
      <t>This specification defines two Concise Binary Object Representation (CBOR) tags for use with IPv6 and IPv4 addresses and prefixes.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t><xref target="RFC8949" format="default"/> defines a number of CBOR tags for common items.
Tags 260 and 261 were later defined in documents listed with IANA <xref target="IANA.cbor-tags" format="default"/>.
These tags were intended to cover addresses (260) and prefixes (261).
Tag 260 distinguishes between IPv6, IPv4, and MAC <xref target="RFC7042" format="default"/> addresses only through the length of the  byte string, making it impossible, for example, to drop trailing zeros in the encoding of IP addresses.  Tag 261 was not documented well enough for use.</t>

<t>This specification defines tags 54 and 52 to explicitly
indicate use of IPv6 or IPv4 by the tag number.
These new tags are intended to be used in preference to tags 260 and
261.
They provide formats for IPv6 and IPv4 addresses, prefixes,
and addresses with prefixes, while explicitly indicating use of IPv6 or IPv4.
The prefix format omits trailing zeroes in the address part.
(Due to the complexity of testing, the value of omitting trailing
zeros for the pure address format was considered nonessential, and
support for that is not provided in this specification.)
This specification does not deal with MAC addresses (<xref section="2" sectionFormat="of" target="RFC7042" format="default"/>).</t>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL</bcp14>
NOT", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP&nbsp;14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they
appear in all capitals, as shown here.</t>
    </section>
    <section anchor="protocol" numbered="true" toc="default">
      <name>Protocol</name>
      <section anchor="three-forms" numbered="true" toc="default">
        <name>Three Forms</name>
        <section anchor="addresses" numbered="true" toc="default">
          <name>Addresses</name>
          <t>These tags can be applied to byte strings to represent a single address.</t>
          <t>This form is called the "Address Format".</t>
        </section>
        <section anchor="prefixes" numbered="true" toc="default">
          <name>Prefixes</name>
          <t>When applied to an array that starts with an unsigned integer, the tags represent a
CIDR-style prefix of that length.</t>
          <t>When the Address Format (i.e., without prefix) appears in a context where a prefix is expected, then it is to be assumed that all bits are relevant.
That is, for IPv4, a /32 is implied, and for IPv6, a /128 is implied.</t>
          <t>This form is called the "Prefix Format".</t>
        </section>
        <section anchor="interface-definition" numbered="true" toc="default">
          <name>Interface Definition</name>
          <t>When applied to an array that starts with a byte string, which stands
for an IP address, followed by an unsigned integer giving the bit
length of a prefix built out of the first <tt>length</tt> bits of the
address, the tags represent information that is commonly used to specify
both the network prefix and the IP address of an interface.</t>
          <t>The length of the byte string is always 16 bytes (for IPv6) and 4 bytes (for IPv4).</t>
          <t>This form is called the "Interface Format".</t>
          <t>Interface Format definitions support an optional third element to the array, which is to be used as the IPv6 link-local zone identifier from <xref section="6" sectionFormat="of" target="RFC4007" format="default"/>;
for symmetry, this is also provided for IPv4 as in <xref target="RFC4001" format="default"/> and <xref target="RFC6991" format="default"/>.
The zone identifier may be an integer, in which case it is to be interpreted as the interface index.
It may be a text string, in which case it is to be interpreted as an interface name.</t>
          <t>As explained in <xref target="RFC4007" format="default"/>, the zone identifiers are strictly local to the node.
They are useful for communications within a node about connected addresses (for instance, where a link-local peer is discovered by one daemon and another daemon needs to be informed).
They may also have utility in some management protocols.</t>
          <t>In the cases where the Interface Format is being used to represent
only an address with a zone identifier and no interface prefix information, the prefix length may be replaced with the CBOR "null" (0xF6).</t>
        </section>
      </section>
      <section anchor="ipv6" numbered="true" toc="default">
        <name>IPv6</name>
        <t>IANA has allocated tag 54 for IPv6 uses.
(This is the ASCII code for '6'.)</t>
        <t>An IPv6 address is to be encoded as a sixteen-byte byte string
(<xref section="3.1" sectionFormat="of" target="RFC8949" format="default"/>, major type 2), enclosed in tag number 54.</t>
        <t>For example:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
54(h'20010db81234deedbeefcafefacefeed')
]]></artwork>
        <t>An IPv6 prefix, such as 2001:db8:1234::/48, is to be encoded as a two-element array, with the length of the prefix first.
See <xref target="validity" format="default"/> for the detailed construction of the second element.</t>
        <t>For example:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
54([48, h'20010db81234'])
]]></artwork>
        <t>An IPv6 address combined with a prefix length, such as one used for
configuring an interface, is to be encoded as a two-element array,
with the (full-length) IPv6 address first and the length of the
associated network the prefix next; a third element can be added for
the zone identifier.</t>
        <t>For example:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
54([h'20010db81234deedbeefcafefacefeed', 56])
]]></artwork>
        <t>The address-with-prefix form can be reliably distinguished
from the prefix form only in the sequence of the array elements.</t>
        <t>An example of a link-local IPv6 address with a 64-bit prefix:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
54([h'fe8000000000020202fffffffe030303', 64, 'eth0'])
]]></artwork>
        <t>with a numeric zone identifier:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
54([h'fe8000000000020202fffffffe030303', 64, 42])
]]></artwork>
        <t>An IPv6 link-local address without a prefix length:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
54([h'fe8000000000020202fffffffe030303', null, 42])
]]></artwork>
        <t>Zone identifiers may be used with any kind of IP address, not just link-local addresses.
In particular, they are valid for multicast addresses, and there may still be some significance
for Globally Unique Addresses (GUAs).</t>
      </section>
      <section anchor="ipv4" numbered="true" toc="default">
        <name>IPv4</name>
        <t>IANA has allocated tag 52 for IPv4 uses.
(This is the ASCII code for '4'.)</t>
        <t>An IPv4 address is to be encoded as a four-byte byte string
(<xref section="3.1" sectionFormat="of" target="RFC8949" format="default"/>, major type 2), enclosed in tag number 52.</t>
        <t>For example:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
52(h'c0000201')
]]></artwork>
        <t>An IPv4 prefix, such as 192.0.2.0/24, is to be encoded as a two-element array, with the length of the prefix first.
See <xref target="validity" format="default"/> for the detailed construction of the second element.</t>
        <t>For example:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
52([24, h'c00002'])
]]></artwork>
        <t>An IPv4 address combined with a prefix length, such as being used for
configuring an interface, is to be encoded as a two-element array,
with the (full-length) IPv4 address first and the length of the
associated network the prefix next; a third element can be added for
the zone identifier.</t>
        <t>For example, 192.0.2.1/24 is to be encoded as a two-element array,
with the length of the prefix (implied 192.0.2.0/24) last.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
52([h'c0000201', 24])
]]></artwork>
        <t>The address-with-prefix form can be reliably distinguished
from the prefix form only in the sequence of the array elements.</t>
      </section>
    </section>
    <section anchor="validity" numbered="true" toc="default">
      <name>Tag Validity</name>
      <t>This section discusses when tag 54 or tag 52 is valid (<xref section="5.3.2" sectionFormat="of" target="RFC8949" format="default"/>).
As with all CBOR tags, validity checking can be handled in a generic
CBOR library or in the application.
A generic CBOR library needs to document whether and how it handles
validity checking.</t>
      <t>The rule <tt>ip-address-or-prefix</tt> in <xref target="cddl-types" format="default"/> shows how to check the
overall structure of these tags and their content, the ranges of
integer values, and the lengths of byte strings.
An instance of tag 52 or 54 is valid if it matches that rule and, for
ipv6-prefix and ipv4-prefix, the considerations of Sections
<xref format="counter" target="valid-encoder"/> and <xref format="counter" target="valid-decoder"/>.</t>
      <section anchor="deterministic-encoding" numbered="true" toc="default">
        <name>Deterministic Encoding</name>
        <t>The tag validity rules, combined with the rules in <xref section="4.2.1" sectionFormat="of" target="RFC8949" format="default"/>, lead to deterministic encoding for tags 54 and 52 and require
no further additional deterministic encoding considerations as per
<xref section="4.2.2" sectionFormat="of" target="RFC8949" format="default"/>.</t>
      </section>
      <section anchor="valid-encoder" numbered="true" toc="default">
        <name>Encoder Considerations for Prefixes</name>
        <t>For the byte strings used as the second element in the array
representing a prefix:</t>
        <t>(1) An encoder <bcp14>MUST</bcp14> set any unused bytes and any unused bits in the
	final byte, if any, to zero.
Unused bytes (or bits) are bytes (or bits) that are not covered by the prefix length given.
So, for example, <tt>2001:db8:1230::/44</tt> <bcp14>MUST</bcp14> be encoded as:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
54([44, h'20010db81230'])
]]></artwork>
        <t>even though variations like:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
54([44, h'20010db81233'])
54([44, h'20010db8123f'])
54([44, h'20010db8123012'])
]]></artwork>
        <t>start with the same 44 bits but are not valid.</t>
        <t>(Analogous examples can be constructed for IPv4 prefixes.)</t>
        <t>(2) An encoder <bcp14>MUST</bcp14> then omit any right-aligned (trailing) sequence of
bytes in which the bytes are all zeros.</t>
        <t>There is no relationship between the number of bytes omitted and the prefix length.
For instance, the prefix 2001:db8::/64 is encoded as:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
54([64, h'20010db8'])
]]></artwork>
      </section>
      <section anchor="valid-decoder" numbered="true" toc="default">
        <name>Decoder Considerations for Prefixes</name>
        <t>A decoder <bcp14>MUST</bcp14> check that all unused bits encoded in the byte string
ipv6-prefix-bytes/ipv4-prefix-bytes, i.e., the bits to the right of
the prefix length, are zero.</t>
        <t>A decoder <bcp14>MUST</bcp14> also check that the byte string does not end in a zero
byte.</t>
        <t>Since encoders are required to remove zero-valued trailing bytes, a
decoder <bcp14>MUST</bcp14> handle cases where a prefix length specifies that more
bits are relevant than are actually present in the byte string.</t>
        <t>As an example, ::/128 is encoded as</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
54([128, h''])
]]></artwork>
        <section anchor="example-implementation" numbered="true" toc="default">
          <name>Example Implementation</name>
          <t>A recommendation for prefix decoder implementations is to first create
	  an array of 16 (or 4) zero bytes.</t>
          <t>Then, taking whichever is smaller between (a) the length of the
included byte string and (b) the number of bytes covered by the
prefix length rounded up to the next multiple of 8, fail if that
number is greater than 16 (or 4) and then copy that many bytes from
the byte string into the byte array.</t>
          <t>Finally, when looking at the number of unused bits in the last byte (if
any) of the range covered by the prefix length, check that any unused
bits in the byte string are zero:</t>
          <sourcecode type="c"><![CDATA[
unused_bits = (8 - (prefix_length_in_bits % 8)) % 8;
if (length_in_bytes > 0 &&
    (address_bytes[length_in_bytes - 1] & ~(0xFF << unused_bits))
       != 0)
  fail();
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="cddl" numbered="true" toc="default">
      <name>CDDL</name>
      <t>For use with Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default"/>, the type names defined in <xref target="cddl-types" format="default"/>
are recommended:</t>
      <figure anchor="cddl-types">
        <name>CDDL Types for Tags 54 and 52</name>
        <sourcecode type="cddl"><![CDATA[
ip-address-or-prefix = ipv6-address-or-prefix /
                       ipv4-address-or-prefix

ipv6-address-or-prefix = #6.54(ipv6-address /
                               ipv6-address-with-prefix /
                               ipv6-prefix)
ipv4-address-or-prefix = #6.52(ipv4-address /
                               ipv4-address-with-prefix /
                               ipv4-prefix)

ipv6-address = bytes .size 16
ipv4-address = bytes .size 4

ipv6-address-with-prefix = [ipv6-address,
                            ipv6-prefix-length / null,
                            ?ip-zone-identifier]
ipv4-address-with-prefix = [ipv4-address,
                            ipv4-prefix-length / null,
                            ?ip-zone-identifier]

ipv6-prefix-length = 0..128
ipv4-prefix-length = 0..32

ipv6-prefix = [ipv6-prefix-length, ipv6-prefix-bytes]
ipv4-prefix = [ipv4-prefix-length, ipv4-prefix-bytes]

ipv6-prefix-bytes = bytes .size (uint .le 16)
ipv4-prefix-bytes = bytes .size (uint .le 4)

ip-zone-identifier = uint / text

]]></sourcecode>
      </figure>
    </section>
    <section anchor="security-considerations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>This document provides a CBOR encoding for IPv4 and IPv6 address information.
Any applications using these encodings will need to consider the security
implications of this data in their specific context.  For example, identifying
which byte sequences in a protocol are addresses may allow an attacker or
eavesdropper to better understand what parts of a packet to attack.</t>
      <t>Applications need to check the validity (<xref target="validity" format="default"/>) of a tag before
acting on any of its contents.
If the validity checking is not done in the generic CBOR decoder, it
needs to be done in the application; in any case, it needs to be done
before the tag is transformed into a platform-specific representation
that could conceal validity errors.</t>
      <t>The right-hand bits of the prefix, after the prefix length, are set to
zero by this protocol.
(Otherwise, a malicious party could use them to transmit covert data
in a way that would not affect the primary use of this encoding.
Such abuse is detected by tag validity checking and can also be
detected by examination of the raw protocol bytes.)</t>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>IANA has allocated two tags from the Specification Required <xref target="RFC8126"/> area of
the "Concise Binary Object Representation (CBOR) Tags" registry <xref target="IANA.cbor-tags" format="default"/>:</t>
      <section anchor="tag-54-ipv6" numbered="true" toc="default">
        <name>Tag 54 - IPv6</name>
<dl spacing="compact">
<dt>Data Item:</dt><dd> byte string or array</dd>
<dt>Semantics:</dt><dd> IPv6, [prefixlen,IPv6], [IPv6,prefixpart]</dd>
</dl>
      </section>
      <section anchor="tag-52-ipv4" numbered="true" toc="default">
        <name>Tag 52 - IPv4</name>
<dl spacing="compact">
<dt>Data Item:</dt><dd> byte string or array</dd>
<dt>Semantics:</dt><dd> IPv4, [prefixlen,IPv4], [IPv4,prefixpart]</dd>
</dl>
      </section>
      <section anchor="tags-260-and-261" numbered="true" toc="default">
        <name>Tags 260 and 261</name>
        <t>IANA has added the note "DEPRECATED in favor of 52 and 54 for IP addresses" to registrations 260 and 261.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8949.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8610.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>

      </references>
      <references>
        <name>Informative References</name>

        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>

<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4007.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4001.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6991.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7042.xml"/>

      </references>
    </references>
    <section numbered="false" anchor="acknowledgements" toc="default">
      <name>Acknowledgements</name>
      <t><contact fullname="Roman Danyliw"/>, <contact fullname="Donald Eastlake"/>, <contact fullname="Ben Kaduk"/>, <contact fullname="Barry Leiba"/>, and <contact fullname="√âric Vyncke"/> reviewed the document and provided suggested text.
<contact fullname="J√ºrgen Sch√∂nw√§lder"/> helped find the history of IPv4 zone identifiers.</t>
    </section>
  </back>
</rfc>
