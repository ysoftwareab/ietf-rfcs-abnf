<?xml version='1.0' encoding='utf-8'?>

<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc number="8707" xmlns:xi="http://www.w3.org/2001/XInclude" category="std"
     docName="draft-ietf-oauth-resource-indicators-08" ipr="trust200902"
     consensus="true" obsoletes="" updates="" submissionType="IETF" xml:lang="en"
     tocInclude="true" symRefs="true" sortRefs="true" version="3">

  <!-- xml2rfc v2v3 conversion 2.32.0 -->

  <front>
    <title abbrev="OAuth Resource Indicators">Resource Indicators for OAuth 2.0</title>
    <seriesInfo name="RFC" value="8707" />
    <author fullname="Brian Campbell" initials="B." surname="Campbell">
      <organization>Ping Identity</organization>
      <address>
        <email>brian.d.campbell@gmail.com</email>
      </address>
    </author>
    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization>Yubico</organization>
      <address>
        <email>ve7jtb@ve7jtb.com</email>
      </address>
    </author>
    <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <date month="February" year="2020" />
    <area>Security</area>

    <workgroup>OAuth Working Group</workgroup>
    <keyword>OAuth</keyword>
    <keyword>Resource</keyword>
    <keyword>Audience</keyword>

    <abstract>
      <t>
        This document specifies an extension to the OAuth 2.0
        Authorization Framework defining request parameters that enable a client
        to explicitly signal to an authorization server about the identity of the protected
        resource(s) to which it is requesting access.
      </t>
    </abstract>
  </front>
  <middle>
    <section anchor="Introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>
  Several years of deployment and implementation experience with the OAuth 2.0
  Authorization Framework <xref
  target="RFC6749" format="default"></xref>
  has uncovered a need (in some circumstances, such as an authorization server
  servicing a significant number of diverse resources) for the client to
  explicitly signal to the authorization server where it intends to use the
  access token it is requesting.
</t>
      <t>
  Knowing the protected resource (a.k.a. resource server, application, API, etc.) that will process the access token enables the authorization server to construct the token
  as necessary for that entity. Properly encrypting the token (or content within the token) to a particular resource, for example,
  requires knowing which resource will receive and decrypt the token. Furthermore, various resources oftentimes have
  different requirements with respect to the data contained in (or referenced by) the token, and knowing the resource
  where the client intends to use the
  token allows the authorization server to mint the token accordingly.
</t>
      <t>
  Specific knowledge of the intended recipient(s) of the access token also helps facilitate improved
  security characteristics of the token itself.
  Bearer tokens, currently the most commonly utilized type of OAuth access token,
  allow any party in possession of a token to get access to the associated resources.
  To prevent misuse, several important security assumptions must hold, one of which is that
  an access token must only be valid for use at a
  specific protected resource and for a specific scope of access.
  <xref target="RFC6750" sectionFormat="of" section="5.2"/>, for example,
  prescribes including the token's intended recipients within the token to prevent token redirect.
  When the authorization server is informed of
  the resource that will process the access token, it can restrict the intended audience of that token
  to the given resource such that the token cannot be used successfully at other resources.
</t>
      <t>
  OAuth scope, from <xref target="RFC6749" sectionFormat="of"
  section="3.3"/>, is sometimes overloaded to convey the location or identity
  of the protected resource, however, doing so isn't always feasible or
  desirable. Scope is typically about what access is being requested rather
  than where that access will be redeemed (e.g., <tt>email</tt>,
  <tt>admin:org</tt>, <tt>user_photos</tt>, <tt>channels:read</tt>, and
  <tt>channels:write</tt> are a small sample of scope values in use in the
  wild that convey only the type of access and not the location or identity).
</t>
      <t>
  In some circumstances and for some deployments, a means for the client to signal to the authorization server where it
  intends to use the access token it's requesting
  is important and useful. A number of implementations and deployments of OAuth 2.0 have already employed proprietary parameters
  toward that end.
  Going forward, this specification aspires to provide a standardized and interoperable alternative to the proprietary approaches.
</t>
      <section anchor="RNC" numbered="true" toc="default">
        <name>Requirements Notation and Conventions</name>

        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are
    to be interpreted as described in BCP&nbsp;14 <xref target="RFC2119"/>
    <xref target="RFC8174"/> when, and only when, they appear in all capitals,
    as shown here.
        </t>

      </section>
      <section anchor="Terminology" numbered="true" toc="default">
        <name>Terminology</name>
        <t>
        This specification uses the terms "access token", "refresh token",
        "authorization server", "resource server", "authorization endpoint",
        "authorization request", "authorization response", "token endpoint",
        "grant type", "access token request", "access token response", and
        "client" defined by The OAuth 2.0 Authorization Framework <xref
        target="RFC6749" format="default"></xref>.
        </t>
      </section>
    </section>
    <section anchor="ResourceParameter" numbered="true" toc="default">
      <name>Resource Parameter</name>
      <t>
        In requests to the authorization server, a client <bcp14>MAY</bcp14>
        indicate the protected resource (a.k.a. resource server, application,
        API, etc.) to which it is requesting access by including the following
        parameter in the request.

      </t>
      <dl newline="true" spacing="normal">
        <dt>resource</dt>
        <dd>
        Indicates the target service or resource to which access is being
        requested.  Its value <bcp14>MUST</bcp14> be an absolute URI, as
        specified by <xref target="RFC3986" sectionFormat="of"
        section="4.3"/>.  The URI <bcp14>MUST NOT</bcp14> include a fragment
        component. It <bcp14>SHOULD NOT</bcp14> include a query component, but
        it is recognized that there are cases that make a query component a
        useful and necessary part of the resource parameter, such as when one
        or more query parameters are used to scope requests to an application.
        The <tt>resource</tt> parameter URI value is an identifier
        representing the identity of the resource, which <bcp14>MAY</bcp14> be
        a locator that corresponds to a network-addressable location where the
        target resource is hosted.  Multiple <tt>resource</tt> parameters
        <bcp14>MAY</bcp14> be used to indicate that the requested token is
        intended to be used at multiple resources.
      </dd>
      </dl>
      <t>

        The parameter value identifies a resource to which the client is
        requesting access.  The parameter can carry the location of a
        protected resource, typically as an https URL or a more abstract
        identifier.  This enables the authorization server to apply policy as
        appropriate for the resource, such as determining the type and content
        of tokens to be issued, if and how tokens are encrypted, and applying
        appropriate audience restrictions.
      </t>
      <t>
        The client <bcp14>SHOULD</bcp14> provide the most specific URI that it
	can for the complete API or set of resources it intends to access.
        In practice, a client will know a base URI for the application or resource that it interacts with, which
        is appropriate to use as the value of the <tt>resource</tt> parameter.
        The client <bcp14>SHOULD</bcp14> use the base URI of the API as the <tt>resource</tt> parameter
        value unless specific knowledge of the resource dictates otherwise.
        For example, the value <tt>https://api.example.com/</tt> would be used
        for a resource that is the exclusive application on that host; however,
        if the resource is one of many applications on that host, something like
        <tt>https://api.example.com/app/</tt> would be used as a more specific
	value.

   Another example is when an API has multiple endpoints, e.g., when 
   System for Cross-domain Identity Management (SCIM) <xref target="RFC7644" format="default"></xref> has 
   endpoints such as <tt>https://apps.example.com/scim/Users</tt>,
   <tt>https://apps.example.com/scim/Groups</tt>, and
   <tt>https://apps.example.com/scim/Schemas</tt>.  The client would use
   <tt>https://apps.example.com/scim/</tt> as the resource so that the issued
   access token is valid for all the endpoints of the SCIM API.
      </t>
      <t>
        The following error code is provided for an authorization server to indicate problems with the requested resource(s)
        in response to an authorization request or access token request. It can also be used to inform the client that
        it has requested an invalid combination of resource and scope.
      </t>
      <dl newline="true" spacing="normal">
        <dt>invalid_target</dt>
        <dd>
            The requested resource is invalid, missing, unknown, or malformed.
          </dd>
      </dl>
      <t>
        The authorization server <bcp14>SHOULD</bcp14> audience-restrict
        issued access tokens to the resource(s) indicated by the
        <tt>resource</tt> parameter. Audience restrictions can be
        communicated in JSON Web Tokens <xref target="RFC7519"
        format="default"></xref> with the <tt>aud</tt> claim and the top-level
        member of the same name provides the audience restriction information
        in a Token Introspection <xref target="RFC7662"
        format="default"></xref> response. The authorization server may use
        the exact <tt>resource</tt> value as the audience or it may map from
        that value to a more general URI or abstract identifier for the given
        resource.
      </t>
      <section anchor="authz-req" numbered="true" toc="default">
        <name>Authorization Request</name>
        <t>
        When the <tt>resource</tt> parameter is used in an authorization
        request to the authorization endpoint, it indicates the identity of
        the protected resource(s) to which access is being requested.  When an
        access token will be returned directly from the authorization endpoint
        via the implicit flow (<xref target="RFC6749" sectionFormat="of"
        section="4.2">OAuth 2.0</xref>), the requested resource is applicable
        to that access token. In the code flow (<xref
        target="RFC6749" sectionFormat="of" section="4.1">OAuth 2.0</xref>) where an
        intermediate representation of the authorization grant (the
        authorization code) is returned from the authorization endpoint, the
        requested resource is applicable to the full authorization grant.
        </t>
        <t>
        For an authorization request sent as a JSON Web Token (JWT), such as
        when using the JWT Secured Authorization Request <xref target="I-D.ietf-oauth-jwsreq"
        format="default"></xref>, a single
        <tt>resource</tt> parameter value is represented as a JSON string
        while multiple values are represented as an array of strings.
        </t>
        <t>
        If the client omits the <tt>resource</tt> parameter when requesting
        authorization, the authorization server <bcp14>MAY</bcp14> process the
        request with no specific resource or by using a predefined default
	resource value.
        Alternatively, the authorization server <bcp14>MAY</bcp14> require clients to specify the resource(s) they intend to
        access and <bcp14>MAY</bcp14> fail requests that omit the parameter with an <tt>invalid_target</tt> error.
        The authorization server might use this data to inform the user about the resources the client
        is going to access on their behalf, to apply policy (e.g., refuse the request due to unknown resources),
        and to determine the set of resources that can be used in subsequent
	access token requests.
        </t>
        <t>
        If the authorization server fails to parse the
        provided value(s) or does not consider the resource(s) acceptable, it should reject the request with
        an error response using the error code <tt>invalid_target</tt> as the value of the
        <tt>error</tt> parameter and can provide additional
        information regarding the reasons for the error using the
        <tt>error_description</tt>.
        </t>
        <t>
        An example of an authorization request where the client tells the authorization server that it wants an access token for use at
        <tt>https://api.example.com/app/</tt> is shown in <xref target="authz-endpoint-example-token" format="default"/> below
        (extra line breaks and indentation are for display purposes only).

</t>
        <figure anchor="authz-endpoint-example-token">
          <name>Implicit Flow Authorization Request</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
  GET /as/authorization.oauth2?response_type=token
     &client_id=example-client
     &state=XzZaJlcwYew1u0QBrRv_Gw
     &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
     &resource=https%3A%2F%2Fapi.example.com%2Fapp%2F HTTP/1.1
  Host: authorization-server.example.com
]]></artwork>
        </figure>
        <t>
          Below in <xref target="authz-endpoint-example-code" format="default"/> is an example of an authorization request
          using the <tt>code</tt> response type
          where the client is requesting access to the resource owner's contacts and calendar data at
          <tt>https://cal.example.com/</tt> and <tt>https://contacts.example.com/</tt>
          (extra line breaks and indentation are for display purposes only).

        </t>
        <figure anchor="authz-endpoint-example-code">
          <name>Code Flow Authorization Request</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
  GET /as/authorization.oauth2?response_type=code
     &client_id=s6BhdRkqt3
     &state=tNwzQ87pC6llebpmac_IDeeq-mCR2wLDYljHUZUAWuI
     &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
     &scope=calendar%20contacts
     &resource=https%3A%2F%2Fcal.example.com%2F
     &resource=https%3A%2F%2Fcontacts.example.com%2F HTTP/1.1
  Host: authorization-server.example.com
]]></artwork>
        </figure>
      </section>
      <section anchor="token-req" numbered="true" toc="default">
        <name>Access Token Request</name>
        <t>
      When the <tt>resource</tt> parameter is used on an access token request made to the token endpoint,
      for all grant types, it indicates the target service or protected resource where the client intends to use
      the requested access token.
        </t>
        <t>
      The resource value(s) that is acceptable to an authorization server in fulfilling an access token request is
      at its sole discretion based on local policy or configuration. In the case of a
      <tt>refresh_token</tt> or <tt>authorization_code</tt> grant type request, such policy may limit the acceptable resources
      to those that were originally granted by the resource owner
      or a subset thereof.

      In the <tt>authorization_code</tt> case where the requested resources
      are a subset of the set of resources originally granted, the
      authorization server will issue an access token based on that subset of
      requested resources, whereas any refresh token that is returned is bound to
      the full original grant.
        </t>
        <t>
      When requesting a token, the client can indicate the desired target
      service(s) where it intends to use that token by way of the
      <tt>resource</tt> parameter and can indicate the desired scope of the
      requested token using the <tt>scope</tt> parameter.  The semantics of
      such a request are that the client is asking for a token with the
      requested scope that is usable at all the requested target services.
      Effectively, the requested access rights of the token are the cartesian
      product of all the scopes at all the target services.  To the extent
      possible, when issuing access tokens, the authorization server should
      downscope the scope value associated with an access token to the value
      the respective resource is able to process and needs to know. (Here,
      "downscope" means give fewer permissions than originally authorized by
      the resource owner.) This
      further improves privacy as a list of scope values is an indication that
      the resource owner uses the multiple various services listed;
      downscoping a token to only that which is needed for a particular
      service can limit the extent to which such information is revealed
      across different services.  As specified in <xref target="RFC6749"
      sectionFormat="of" section="5.1"/>, the authorization server must
      indicate the access token's effective scope to the client in the
      <tt>scope</tt> response parameter value when it differs from the scope
      requested by the client.
        </t>
        <t>
        Following from the code flow authorization request shown in <xref target="authz-endpoint-example-code" format="default"/>,
        the below examples show an <tt>authorization_code</tt> grant type access token request (<xref target="token-endpoint-example-ac" format="default"/>)
        and response (<xref target="response-example-ac" format="default"/>) where the client tells the authorization server that
        it wants the access token for use at <tt>https://cal.example.com/</tt>
        (extra line breaks and indentation are for display purposes only).

        </t>
        <figure anchor="token-endpoint-example-ac">
          <name>Access Token Request</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
  POST /as/token.oauth2 HTTP/1.1
  Host: authorization-server.example.com
  Authorization: Basic czZCaGRSa3F0Mzpoc3FFelFsVW9IQUU5cHg0RlNyNHlJ
  Content-Type: application/x-www-form-urlencoded

  grant_type=authorization_code
  &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
  &code=10esc29BWC2qZB0acc9v8zAv9ltc2pko105tQauZ
  &resource=https%3A%2F%2Fcal.example.com%2F]]></artwork>
        </figure>
        <figure anchor="response-example-ac">
          <name>Access Token Response</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
   HTTP/1.1 200 OK
   Content-Type: application/json
   Cache-Control: no-cache, no-store

   {
      "access_token":"eyJhbGciOiJFUzI1NiIsImtpZCI6Ijc3In0.eyJpc3MiOi
       JodHRwOi8vYXV0aG9yaXphdGlvbi1zZXJ2ZXIuZXhhbXBsZS5jb20iLCJzdWI
       iOiJfX2JfYyIsImV4cCI6MTU4ODQyMDgwMCwic2NvcGUiOiJjYWxlbmRhciIs
       ImF1ZCI6Imh0dHBzOi8vY2FsLmV4YW1wbGUuY29tLyJ9.nNWJ2dXSxaDRdMUK
       lzs-cYIj8MDoM6Gy7pf_sKrLGsAFf1C2bDhB60DQfW1DZL5npdko1_Mmk5sUf
       zkiQNVpYw",
      "token_type":"Bearer",
      "expires_in":3600,
      "refresh_token":"4LTC8lb0acc6Oy4esc1Nk9BWC0imAwH7kic16BDC2",
      "scope":"calendar"
   }]]></artwork>
        </figure>
        <t>
      A subsequent access token request, using the refresh token, where the client tells the authorization server that
      it wants an access token for use at
      <tt>https://contacts.example.com/</tt> is shown in <xref target="token-endpoint-example-rt" format="default"/> below
      with the response shown in <xref target="response-example-rt" format="default"/>
      (extra line breaks and indentation are for display purposes only).

</t>
        <figure anchor="token-endpoint-example-rt">
          <name>Access Token Request</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
  POST /as/token.oauth2 HTTP/1.1
  Host: authorization-server.example.com
  Authorization: Basic czZCaGRSa3F0Mzpoc3FFelFsVW9IQUU5cHg0RlNyNHlJ
  Content-Type: application/x-www-form-urlencoded

  grant_type=refresh_token
  &refresh_token=4LTC8lb0acc6Oy4esc1Nk9BWC0imAwH7kic16BDC2
  &resource=https%3A%2F%2Fcontacts.example.com%2F
]]></artwork>
        </figure>
        <figure anchor="response-example-rt">
          <name>Access Token Response</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
   HTTP/1.1 200 OK
   Content-Type: application/json
   Cache-Control: no-cache, no-store

   {
      "access_token":"eyJhbGciOiJFUzI1NiIsImtpZCI6Ijc3In0.eyJpc3MiOi
       JodHRwOi8vYXV0aG9yaXphdGlvbi1zZXJ2ZXIuZXhhbXBsZS5jb20iLCJzdWI
       iOiJfX2JfYyIsImV4cCI6MTU4ODQyMDgyNiwic2NvcGUiOiJjb250YWN0cyIs
       ImF1ZCI6Imh0dHBzOi8vY29udGFjdHMuZXhhbXBsZS5jb20vIn0.5f4yhqazc
       OSlJw4y94KPeWNEFQqj2cfeO8x4hr3YbHtIl3nQXnBMw5wREY5O1YbZED-GfH
       UowfmtNaA5EikYAw",
      "token_type":"Bearer",
      "expires_in":3600,
      "scope":"contacts"
   }]]></artwork>
        </figure>
      </section>
    </section>
    <section anchor="Security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>
        An audience-restricted access token that is legitimately presented to a
        resource cannot then be taken by that resource and presented elsewhere
        for illegitimate access to other resources.
        The <tt>resource</tt>
        parameter enables a client to indicate the protected resources where the requested access
        token will be used, which in turn enables the authorization server to apply the
        appropriate audience restrictions to the token.
      </t>
      <t>
        Some servers may host user content or be multi-tenant. In order to avoid attacks where one tenant uses an
        access token to illegitimately access resources owned by a different tenant,
        it is important to use a specific
        resource URI including any portion of the URI that identifies the
        tenant, such as a path component. This will allow access tokens to be audience-restricted in a way that identifies the tenant
        and prevents their use, due to an invalid audience, at resources owned by a different tenant.
      </t>
      <t>
        Although multiple occurrences of the <tt>resource</tt> parameter
        may be included in a token request, using only a single <tt>resource</tt> parameter
        is encouraged. 

   If a bearer token has multiple intended recipients 
   (audiences), then the token is valid at more than one 
   protected resource and can be used by any one of those
   resources to access any of the others.

Thus, a high degree of trust between the involved parties
        is needed when using access tokens with multiple audiences. Furthermore, an authorization server may
        be unwilling or unable to fulfill a token request with multiple resources.
      </t>
      <t>
        Whenever feasible, the <tt>resource</tt> parameter
        should correspond to the network-addressable location of the protected resource.
        This makes it possible for the client to validate that the resource being requested controls the corresponding 
        network location, reducing the risk of malicious endpoints obtaining tokens meant for other resources.
        If the <tt>resource</tt> parameter contains an abstract identifier, it is the client's 
        responsibility to validate out of band that any network endpoint to which tokens are sent are the intended audience for that identifier.
      </t>
    </section>
    <section anchor="Privacy" numbered="true" toc="default">
      <name>Privacy Considerations</name>
      <t>
        In typical OAuth deployments the authorization sever is in a position to observe and track a significant
        amount of user and client behavior. It is largely just inherent to the nature of OAuth, and this document
        does little to affect that. In some cases, however, such as when access token introspection is not being
        used, use of the resource parameter defined herein may allow for tracking behavior at a somewhat more
        granular and specific level than would otherwise be possible in its absence.
      </t>
    </section>
    <section anchor="IANA" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section numbered="true" toc="default">
        <name>OAuth Parameters Registration</name>
        <t>
          This specification updates the following value
          in the IANA "OAuth Parameters" registry
          <xref target="IANA.OAuth.Parameters" format="default"/>
          established by <xref target="RFC6749" format="default"/>.
        </t>
        <dl spacing="compact">
          <dt>Parameter name:</dt> <dd>resource</dd>
          <dt>Parameter usage location:</dt> <dd>authorization request, token request</dd>
          <dt>Change controller:</dt> <dd>IESG</dd>
          <dt>Specification document(s):</dt> <dd>RFC 8707</dd>
        </dl>
      </section>
      <section numbered="true" toc="default">
        <name>OAuth Extensions Error Registration</name>
        <t>
          This specification updates the following error in
          the IANA "OAuth Extensions Error Registry"
          <xref target="IANA.OAuth.Parameters" format="default"/>
          established by <xref target="RFC6749" format="default"/>.
        </t>
        <dl spacing="compact">
          <dt>Error name:</dt> <dd>invalid_target</dd>
          <dt>Error usage location:</dt> <dd>implicit grant error response, token error response</dd>
          <dt>Related protocol extension:</dt> <dd>resource parameter</dd>
          <dt>Change controller:</dt> <dd>IESG</dd>
          <dt>Specification document(s):</dt> <dd>RFC 8707</dd>
        </dl>
      </section>
    </section>
  </middle>
  <back>

<displayreference target="I-D.ietf-oauth-jwsreq" to="JWT-SAR"/>

    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>

        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>

        <reference anchor="IANA.OAuth.Parameters" target="https://www.iana.org/assignments/oauth-parameters">
          <front>
            <title>OAuth Parameters</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
      </references>

      <references>
        <name>Informative References</name>

        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7662.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7644.xml"/>

        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-jwsreq.xml"/>
      </references>
    </references>
    <section anchor="Acknowledgements" numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>
        This specification was developed within the OAuth Working Group
        under the chairmanship of <contact fullname="Hannes Tschofenig"/>
        and <contact fullname="Rifaat Shekh-Yusef"/> with <contact fullname="Eric
	Rescorla"/>, <contact fullname="Benjamin Kaduk"/>, and <contact fullname="Roman Danyliw"/>
        serving as Security Area Directors.  Additionally, the following
        individuals contributed ideas, feedback, and wording
        that helped shape this specification:</t>
      <t>
        <contact fullname="Vittorio Bertocci"/>,
        <contact fullname="Sergey Beryozkin"/>,
        <contact fullname="Roman Danyliw"/>,
        <contact fullname="William Denniss"/>,
        <contact fullname="Vladimir Dzhuvinov"/>,
        <contact fullname="George Fletcher"/>,
        <contact fullname="Dick Hardt"/>,
        <contact fullname="Phil Hunt"/>,
        <contact fullname="Michael Jones"/>,
        <contact fullname="Benjamin Kaduk"/>,
        <contact fullname="Barry Leiba"/>,
        <contact fullname="Torsten Lodderstedt"/>,
        <contact fullname="Anthony Nadalin"/>,
        <contact fullname="Justin Richer"/>,
        <contact fullname="Adam Roach"/>,
        <contact fullname="Nat Sakimura"/>,
        <contact fullname="Rifaat Shekh-Yusef"/>,
        <contact fullname="Filip Skokan"/>,
        <contact fullname="Éric Vyncke"/>,
        and
        <contact fullname="Hans Zandbelt"/>.
      </t>
    </section>
  </back>
</rfc>
