<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-babel-information-model-14" number="9046" obsoletes="" updates="" submissionType="IETF" category="info" consensus="true" xml:lang="en" tocInclude="true" tocDepth="4" symRefs="true" sortRefs="true" version="3">

  <front>
    <title>Babel Information Model</title>
    <seriesInfo name="RFC" value="9046"/>
    <author initials="B." surname="Stark" fullname="Barbara Stark">
      <organization>AT&amp;T</organization>
      <address>
        <postal>
          <street/>
          <city></city>
          <region>TX</region>
          <code/>
          <country>United States of America</country>
        </postal>
        <phone/>
        <email>barbara.stark@att.com</email>
      </address>
    </author>
    <author initials="M." surname="Jethanandani" fullname="Mahesh Jethanandani">
      <organization>Kloud Services</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <region>CA</region>
          <code/>
          <country>United States of America</country>
        </postal>
        <phone/>
        <email>mjethanandani@gmail.com</email>
      </address>
    </author>
    <date year="2021" month="June" />
    <area>Routing</area>
    <workgroup>Babel routing protocol</workgroup>
    <keyword>Babel</keyword>
    <abstract>
      <t>The Babel information model provides structured data elements
for a Babel implementation reporting its current state and may
allow limited configuration of some such data elements.
This information model can be used as a basis for creating data
models under various data modeling regimes. This information
model only includes parameters and parameter values useful for
managing Babel over IPv6.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>Babel is a loop-avoiding, distance-vector routing protocol defined in
<xref target="RFC8966" format="default"/>. <xref target="RFC8967" format="default"/> defines a security
mechanism that allows Babel packets to be cryptographically
authenticated, and <xref target="RFC8968" format="default"/> defines a security mechanism
that allows Babel packets to be both authenticated and encrypted.
This document describes an information model for Babel (including implementations
using one or both of these security mechanisms) that can be used to create management
protocol data models (such as a NETCONF <xref target="RFC6241" format="default"/> YANG <xref target="RFC7950" format="default"/> data model).</t>
      <t>Due to the simplicity of the Babel protocol, most of the information model
is focused on reporting the Babel protocol operational state, and very little of
that is considered mandatory to implement for an implementation claiming
compliance with this information model. Some parameters may be configurable.
However, it is up to the Babel implementation whether to allow any of these
to be configured within its implementation. Where the implementation does
not allow configuration of these parameters, it <bcp14>MAY</bcp14> still choose to expose
them as read-only.</t>
      <t>The information model is presented using a hierarchical structure. This does
not preclude a data model based on this information model from using a referential
or other structure.</t>
      <t>This information model only includes parameters and parameter values
useful for managing Babel over IPv6. This model has no parameters
or values specific to operating Babel over IPv4, even though
<xref target="RFC8966" format="default"/> does define a multicast group for
sending and listening to multicast announcements on IPv4.
There is less likelihood of breakage due to inconsistent
configuration and increased implementation simplicity if
Babel is operated always and only over IPv6. Running Babel
over IPv6 requires IPv6 at the link layer and does not need
advertised prefixes, router advertisements, or DHCPv6 to be
present in the network. Link-local IPv6 is widely supported
among devices where Babel is expected to be used. Note that
Babel over IPv6 can be used for configuration of both IPv4
and IPv6 routes.</t>
      <section anchor="requirements-language" numbered="true" toc="default">
        <name>Requirements Language</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
      </section>
      <section anchor="notation" numbered="true" toc="default">
        <name>Notation</name>

        <t>This document uses a programming-language-like notation to define the properties
of the objects of the information model. An optional property is enclosed
by square brackets, [ ], and a list property is indicated by two numbers
in angle brackets, &lt;m..n&gt;, where m indicates the minimal number
of list elements,
and n indicates the maximum number of list elements.  The symbol "*" for n
means there are no defined limits on the number of list elements. Each parameter
and object includes an indication of "ro" or "rw". "ro" means the parameter
or object is read-only. "rw" means it is read-write. For an object, read-write
means instances of the object can be created or deleted.
If an implementation is allowed to choose
to implement a "rw" parameter as read-only, this is noted in the parameter
	description.</t>
	
        <t>The object definitions use base types that are defined as follows:</t>
        <dl indent="14">
          <dt>
binary:  </dt>
          <dd>
            <t>A binary string (sequence of octets).</t>
          </dd>
          <dt>
boolean:  </dt>
          <dd>
            <t>A type representing a Boolean (true or false) value.</t>
          </dd>
          <dt>
datetime:  </dt>
          <dd>
            <t>A type representing a date and time using the Gregorian calendar. The datetime
format <bcp14>MUST</bcp14> conform to <xref target="RFC3339" sectionFormat="comma" section="5.6"/>.</t>
          </dd>
          <dt>
ip-address:  </dt>
          <dd>
            <t>A type representing an IP address. This type supports both IPv4 and IPv6
addresses.</t>
          </dd>
          <dt>
operation:  </dt>
          <dd>
            <t>A type representing a remote procedure call or other action that can be used
to manipulate data elements or system behaviors.</t>
          </dd>
          <dt>
reference:  </dt>
          <dd>
            <t>A type representing a reference to another information or data model element
or to some other device resource.</t>
          </dd>
          <dt>
string:  </dt>
          <dd>
            <t>A type representing a human-readable string consisting of a (possibly restricted)
subset of Unicode and ISO/IEC 10646 <xref target="ISO.10646" format="default"/> characters.</t>
          </dd>
          <dt>
uint:  </dt>
          <dd>
            <t>A type representing an unsigned integer number. This information
model does not define a precision.</t>
          </dd>
        </dl>
      </section>
    </section>
    <section anchor="overview" numbered="true" toc="default">
      <name>Overview</name>
      <t>The information model is hierarchically structured as follows:</t>
      <sourcecode name="" type=""><![CDATA[
+-- babel-information
   +-- babel-implementation-version
   +-- babel-enable
   +-- router-id
   +-- self-seqno
   +-- babel-metric-comp-algorithms
   +-- babel-security-supported
   +-- babel-mac-algorithms
   +-- babel-dtls-cert-types
   +-- babel-stats-enable
   +-- babel-stats-reset
   +-- babel-constants
   |  +-- babel-udp-port
   |  +-- babel-mcast-group
   +-- babel-interfaces
   |  +-- babel-interface-reference
   |  +-- babel-interface-enable
   |  +-- babel-interface-metric-algorithm
   |  +-- babel-interface-split-horizon
   |  +-- babel-mcast-hello-seqno
   |  +-- babel-mcast-hello-interval
   |  +-- babel-update-interval
   |  +-- babel-mac-enable
   |  +-- babel-if-mac-key-sets
   |  +-- babel-mac-verify
   |  +-- babel-dtls-enable
   |  +-- babel-if-dtls-cert-sets
   |  +-- babel-dtls-cached-info
   |  +-- babel-dtls-cert-prefer
   |  +-- babel-packet-log-enable
   |  +-- babel-packet-log
   |  +-- babel-if-stats
   |  |  +-- babel-sent-mcast-hello
   |  |  +-- babel-sent-mcast-update
   |  |  +-- babel-sent-ucast-hello
   |  |  +-- babel-sent-ucast-update
   |  |  +-- babel-sent-IHU
   |  |  +-- babel-received-packets
   |  +-- babel-neighbors
   |     +-- babel-neighbor-address
   |     +-- babel-hello-mcast-history
   |     +-- babel-hello-ucast-history
   |     +-- babel-txcost
   |     +-- babel-exp-mcast-hello-seqno
   |     +-- babel-exp-ucast-hello-seqno
   |     +-- babel-ucast-hello-seqno
   |     +-- babel-ucast-hello-interval
   |     +-- babel-rxcost
   |     +-- babel-cost
   +-- babel-routes
   |  +-- babel-route-prefix
   |  +-- babel-route-prefix-length
   |  +-- babel-route-router-id
   |  +-- babel-route-neighbor
   |  +-- babel-route-received-metric
   |  +-- babel-route-calculated-metric
   |  +-- babel-route-seqno
   |  +-- babel-route-next-hop
   |  +-- babel-route-feasible
   |  +-- babel-route-selected
   +-- babel-mac-key-sets
   |  +-- babel-mac-default-apply
   |  +-- babel-mac-keys
   |     +-- babel-mac-key-name
   |     +-- babel-mac-key-use-send
   |     +-- babel-mac-key-use-verify
   |     +-- babel-mac-key-value
   |     +-- babel-mac-key-algorithm
   |     +-- babel-mac-key-test
   +-- babel-dtls-cert-sets
      +-- babel-dtls-default-apply
      +-- babel-dtls-certs
         +-- babel-cert-name
         +-- babel-cert-value
         +-- babel-cert-type
         +-- babel-cert-private-key
]]></sourcecode>
      <t>Most parameters are read-only. The following is a descriptive list of the parameters that are not required to be read-only:</t>
      <ul spacing="normal">
        <li>enable/disable Babel</li>
        <li>create/delete Babel Message Authentication Code (MAC) Key sets</li>
        <li>create/delete Babel Certificate sets</li>
        <li>enable/disable statistics collection</li>
        <li>Constant: UDP port</li>
        <li>Constant: IPv6 multicast group</li>
        <li>Interface: enable/disable Babel on this interface</li>
        <li>Interface: metric algorithm</li>
        <li>Interface: split horizon</li>
        <li>Interface: sets of MAC keys</li>
        <li>Interface: verify received MAC packets</li>
        <li>Interface: set of certificates for use with DTLS</li>
        <li>Interface: use cached info extensions</li>
        <li>Interface: preferred order of certificate types</li>
        <li>Interface: enable/disable packet log</li>
        <li>MAC-keys: create/delete entries</li>
        <li>MAC-keys: key used for sent packets</li>
        <li>MAC-keys: key used to verify packets</li>
        <li>DTLS-certs: create/delete entries</li>
      </ul>
      <t>The following parameters are required to return no value when read:</t>
      <ul spacing="normal">
        <li>MAC key values</li>
        <li>DTLS private keys</li>
      </ul>
      <t>Note that this overview is intended simply to be informative and is not normative.
If there is any discrepancy between this overview and the detailed information
model definitions in subsequent sections, the error is in this overview.</t>
    </section>
    <section anchor="the-information-model" numbered="true" toc="default">
      <name>The Information Model</name>
      <section anchor="definition-of-babel-information-obj" numbered="true" toc="default">
        <name>Definition of babel-information-obj</name>
        <sourcecode name="" type=""><![CDATA[
object {
     string                    ro babel-implementation-version;
     boolean                   rw babel-enable;
     binary                    ro babel-self-router-id;
    [uint                      ro babel-self-seqno;]
     string                    ro babel-metric-comp-algorithms<1..*>;
     string                    ro babel-security-supported<0..*>;
    [string                    ro babel-mac-algorithms<1..*>;]
    [string                    ro babel-dtls-cert-types<1..*>;]
    [boolean                   rw babel-stats-enable;]
    [operation                    babel-stats-reset;]
     babel-constants-obj       ro babel-constants;
     babel-interface-obj       ro babel-interfaces<0..*>;
     babel-route-obj           ro babel-routes<0..*>;
    [babel-mac-key-set-obj     rw babel-mac-key-sets<0..*>;]
    [babel-dtls-cert-set-obj   rw babel-dtls-cert-sets<0..*>;]
} babel-information-obj;
]]></sourcecode>
        <dl>
          <dt>
babel-implementation-version:  </dt>
          <dd>
            <t>The name and version of this implementation of the Babel protocol.</t>
          </dd>
          <dt>
babel-enable:  </dt>
          <dd>
            <t>When written, it configures whether the protocol should be enabled
(true) or disabled (false).
A read from the running or intended datastore indicates the
configured administrative value of whether the protocol is enabled
(true) or not (false). A read from the operational datastore indicates whether
the protocol is actually running (true) or not (i.e., it indicates the
operational state of the protocol).
A data model that does not replicate parameters for running and operational
datastores can implement this as two separate parameters.
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
          <dt>
babel-self-router-id:  </dt>
          <dd>
            <t>The router-id used by this instance of the Babel protocol
to identify itself. <xref target="RFC8966" format="default"/>
describes this as an arbitrary string of 8 octets.</t>
          </dd>
          <dt>
babel-self-seqno:  </dt>
          <dd>
            <t>The current sequence number included in route updates for routes
originated by this node. This is a 16-bit unsigned integer.</t>
          </dd>
          <dt>
babel-metric-comp-algorithms:  </dt>
          <dd>
            <t>List of supported cost computation algorithms. Possible
values include "2-out-of-3", as described in <xref target="RFC8966" sectionFormat="comma" section="A.2.1"/>, and "ETX", as described in <xref target="RFC8966" sectionFormat="comma" section="A.2.2"/>. </t>
          </dd>
          <dt>
babel-security-supported:  </dt>
          <dd>
            <t>List of supported security mechanisms. Possible values include
"MAC" to indicate support of <xref target="RFC8967" format="default"/> and "DTLS"
to indicate support of <xref target="RFC8968" format="default"/>.</t>
          </dd>
          <dt>
babel-mac-algorithms:  </dt>
          <dd>
            <t>List of supported MAC computation algorithms. Possible values
include "HMAC-SHA256" and "BLAKE2s-128" to indicate support for
algorithms indicated in <xref target="RFC8967" format="default"/>.</t>
          </dd>
          <dt>
babel-dtls-cert-types:  </dt>
          <dd>
            <t>List of supported certificate types. Possible values include
"X.509" and "RawPublicKey" to indicate support for types
indicated in <xref target="RFC8968" format="default"/>.</t>
          </dd>
          <dt>
babel-stats-enable:  </dt>
          <dd>
            <t>Indicates whether statistics collection is enabled
(true) or disabled (false) on all interfaces. When
enabled, existing statistics values are not cleared
and will be incremented as new packets are counted.</t>
          </dd>
          <dt>
babel-stats-reset:  </dt>
          <dd>
            <t>An operation that resets all babel-if-stats
parameters to zero. This
operation has no input or output parameters.</t>
          </dd>
          <dt>
babel-constants:  </dt>
          <dd>
            <t>A babel-constants-obj object.</t>
          </dd>
          <dt>
babel-interfaces:  </dt>
          <dd>
            <t>A set of babel-interface-obj objects.</t>
          </dd>
          <dt>
babel-routes:  </dt>
          <dd>
            <t>A set of babel-route-obj objects. Contains the routes known to this
node.</t>
          </dd>
          <dt>
babel-mac-key-sets:  </dt>
          <dd>
            <t>A set of babel-mac-key-set-obj objects. If this
object is implemented, it
provides access to parameters related to the MAC security mechanism.
An implementation <bcp14>MAY</bcp14> choose
to expose this object as read-only ("ro").</t>
          </dd>
          <dt>
babel-dtls-cert-sets:  </dt>
          <dd>
            <t>A set of babel-dtls-cert-set-obj objects. If this
object is implemented, it
provides access to parameters related to the DTLS security mechanism.
An implementation <bcp14>MAY</bcp14> choose
to expose this object as read-only ("ro").</t>
          </dd>
        </dl>
      </section>
      <section anchor="definition-of-babel-constants-obj" numbered="true" toc="default">
        <name>Definition of babel-constants-obj</name>
        <sourcecode name="" type=""><![CDATA[
object {
     uint         rw babel-udp-port;
    [ip-address   rw babel-mcast-group;]
} babel-constants-obj;
]]></sourcecode>
        <dl>
          <dt>
babel-udp-port:  </dt>
          <dd>
            <t>UDP port for sending and listening for Babel packets. Default
is 6696. An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").
This is a 16-bit unsigned integer.</t>
          </dd>
          <dt>
babel-mcast-group:  </dt>
          <dd>
            <t>Multicast group for sending and listening to multicast
announcements on IPv6. Default is ff02::1:6.
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
        </dl>
      </section>
      <section anchor="definition-of-babel-interface-obj" numbered="true" toc="default">
        <name>Definition of babel-interface-obj</name>
        <sourcecode name="" type=""><![CDATA[
object {
     reference            ro babel-interface-reference;
    [boolean              rw babel-interface-enable;]
     string               rw babel-interface-metric-algorithm;
    [boolean              rw babel-interface-split-horizon;]
    [uint                 ro babel-mcast-hello-seqno;]
    [uint                 ro babel-mcast-hello-interval;]
    [uint                 ro babel-update-interval;]
    [boolean              rw babel-mac-enable;]
    [reference            rw babel-if-mac-key-sets<0..*>;]
    [boolean              rw babel-mac-verify;]
    [boolean              rw babel-dtls-enable;]
    [reference            rw babel-if-dtls-cert-sets<0..*>;]
    [boolean              rw babel-dtls-cached-info;]
    [string               rw babel-dtls-cert-prefer<0..*>;]
    [boolean              rw babel-packet-log-enable;]
    [reference            ro babel-packet-log;]
    [babel-if-stats-obj   ro babel-if-stats;]
     babel-neighbor-obj   ro babel-neighbors<0..*>;
} babel-interface-obj;
]]></sourcecode>
        <dl>
          <dt>
babel-interface-reference:  </dt>
          <dd>
            <t>Reference to an interface object that can be used to send and
receive IPv6 packets, as defined by
the data model (e.g., YANG <xref target="RFC7950" format="default"/> and Broadband Forum (BBF) <xref target="TR-181" format="default"/>).
Referencing syntax will be specific to the data model. If there is
no set of interface objects available, this should be a string that indicates
the interface name used by the underlying operating system.</t>
          </dd>
          <dt>
babel-interface-enable:  </dt>
          <dd>
            <t>When written, it configures whether the protocol should be enabled
(true) or disabled (false) on this interface.
A read from the running or intended datastore indicates the
configured administrative value of whether the protocol is enabled
(true) or not (false). A read from the operational datastore indicates whether
the protocol is actually running (true) or not (i.e., it indicates the
operational state of the protocol).
A data model that does not replicate parameters for running and operational
datastores can implement this as two separate parameters.
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
          <dt>
	  babel-interface-metric-algorithm:  </dt>

          <dd>
            <t>Indicates the metric computation algorithm used on this interface.
The value <bcp14>MUST</bcp14> be one of those listed in the babel-metric-comp-algorithms parameter.
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
          <dt>
babel-interface-split-horizon:  </dt>
          <dd>
            <t>Indicates whether or not the split-horizon optimization is used
when calculating metrics on this interface. A value of "true"
indicates split-horizon optimization is used.
Split-horizon optimization is described in
<xref target="RFC8966" sectionFormat="comma" section="3.7.4"/>.
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
          <dt>
babel-mcast-hello-seqno:  </dt>
          <dd>
            <t>The current sequence number in use for multicast
Hellos sent on this interface.
This is a 16-bit unsigned integer.</t>
          </dd>
          <dt>
babel-mcast-hello-interval:  </dt>
          <dd>
            <t>The current interval in use for multicast Hellos
sent on this interface. Units are centiseconds.
This is a 16-bit unsigned integer.</t>
          </dd>
          <dt>
babel-update-interval:  </dt>
          <dd>
            <t>The current interval in use for all updates (multicast
and unicast) sent on this interface. Units are centiseconds.
This is a 16-bit unsigned integer.</t>
          </dd>
          <dt>
babel-mac-enable:  </dt>
          <dd>
            <t>Indicates whether the MAC security mechanism is enabled
(true) or disabled (false).
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>


          <dt>
babel-if-mac-key-sets:  </dt>
          <dd>
            <t>List of references to the babel-mac-key-sets entries that apply to this
interface. When an interface instance is created, all babel-mac-key-sets
instances with babel-mac-default-apply "true" will be included
in this list.
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
          <dt>
babel-mac-verify:</dt>
          <dd>
            <t>A Boolean flag indicating whether MACs in incoming Babel packets
are required to be present and are verified. If this parameter is "true",
incoming packets are required to have a valid MAC.
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
          <dt>
babel-dtls-enable:  </dt>
          <dd>
            <t>Indicates whether the DTLS security mechanism is enabled
(true) or disabled (false).
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
          <dt>
babel-if-dtls-cert-sets:  </dt>
          <dd>
            <t>List of references to the babel-dtls-cert-sets entries that apply to this
interface. When an interface instance is created, all babel-dtls-cert-sets
instances with babel-dtls-default-apply "true" will be included
in this list.
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
          <dt>
babel-dtls-cached-info:  </dt>
          <dd>
            <t>Indicates whether the cached_info extension
(see <xref target="RFC8968" sectionFormat="comma" section="A"/>) is included in ClientHello
and ServerHello packets. The extension is included if the value
is "true".
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
          <dt>
babel-dtls-cert-prefer:  </dt>
          <dd>
            <t>List of supported certificate types, in order of preference.
The values <bcp14>MUST</bcp14> be among those
listed in the babel-dtls-cert-types parameter.
This list is used to populate the server_certificate_type
extension (see <xref target="RFC8968" sectionFormat="comma" section="A"/>)
in a ClientHello. Values that are present in
at least one instance in the babel-dtls-certs object of a
referenced babel-dtls instance and that have
a non-empty babel-cert-private-key will be used to populate
the client_certificate_type extension in a ClientHello.</t>
          </dd>
          <dt>
babel-packet-log-enable:  </dt>
          <dd>
            <t>Indicates whether packet logging is enabled
(true) or disabled (false) on this interface.</t>
          </dd>
          <dt>
babel-packet-log:  </dt>
          <dd>
            <t>A reference or URL link to a file that contains a timestamped log
of packets received and sent on babel-udp-port on this interface.
The <xref target="libpcap" format="default"/> file format with a .pcap file extension <bcp14>SHOULD</bcp14> be supported for
packet log files. Logging is
enabled/disabled by babel-packet-log-enable.
Implementations will need to carefully manage and limit
memory used by packet logs.</t>
          </dd>
          <dt>
babel-if-stats:  </dt>
          <dd>
            <t>Statistics collection object for this interface.</t>
          </dd>
          <dt>
babel-neighbors:  </dt>
          <dd>
            <t>A set of babel-neighbor-obj objects.</t>
          </dd>
        </dl>
      </section>
      <section anchor="definition-of-babel-if-stats-obj" numbered="true" toc="default">
        <name>Definition of babel-if-stats-obj</name>
        <sourcecode name="" type=""><![CDATA[
object {
     uint   ro babel-sent-mcast-hello;
     uint   ro babel-sent-mcast-update;
     uint   ro babel-sent-ucast-hello;
     uint   ro babel-sent-ucast-update;
     uint   ro babel-sent-IHU;
     uint   ro babel-received-packets;
} babel-if-stats-obj;
]]></sourcecode>
        <dl>
          <dt>
babel-sent-mcast-hello:  </dt>
          <dd>
            <t>A count of the number of multicast Hello packets sent on this interface.</t>
          </dd>
          <dt>
babel-sent-mcast-update:  </dt>
          <dd>
            <t>A count of the number of multicast update packets sent on this interface.</t>
          </dd>
          <dt>
babel-sent-ucast-hello:  </dt>
          <dd>
            <t>A count of the number of unicast Hello packets sent on this interface.</t>
          </dd>
          <dt>
babel-sent-ucast-update:  </dt>
          <dd>
            <t>A count of the number of unicast update packets sent on this interface.</t>
          </dd>
          <dt>
babel-sent-IHU:  </dt>
          <dd>
            <t>A count of the number of "I Heard You" (IHU) packets sent on this interface.</t>
          </dd>
          <dt>
babel-received-packets:  </dt>
          <dd>
            <t>A count of the number of Babel packets received on this interface.</t>
          </dd>
        </dl>
      </section>
      <section anchor="definition-of-babel-neighbor-obj" numbered="true" toc="default">
        <name>Definition of babel-neighbor-obj</name>
        <sourcecode name="" type=""><![CDATA[
object {
     ip-address   ro babel-neighbor-address;
    [binary       ro babel-hello-mcast-history;]
    [binary       ro babel-hello-ucast-history;]
     uint         ro babel-txcost;
     uint         ro babel-exp-mcast-hello-seqno;
     uint         ro babel-exp-ucast-hello-seqno;
    [uint         ro babel-ucast-hello-seqno;]
    [uint         ro babel-ucast-hello-interval;]
    [uint         ro babel-rxcost;]
    [uint         ro babel-cost;]
} babel-neighbor-obj;
]]></sourcecode>
        <dl>
          <dt>
babel-neighbor-address:  </dt>
          <dd>
            <t>IPv4 or IPv6 address the neighbor sends packets from.</t>
          </dd>
          <dt>
babel-hello-mcast-history:  </dt>
          <dd>
            <t>The multicast Hello history of whether or not
the multicast Hello packets prior to babel-exp-mcast-hello-seqno
were received.
A binary sequence where the most recently received Hello
is expressed as a "1" placed in the leftmost bit, with prior bits shifted
right (and "0" bits placed between prior Hello bits and most recent Hello
for any not-received Hellos). This value should be displayed using
hex digits ([0-9a-fA-F]). See <xref target="RFC8966" sectionFormat="comma" section="A.1"/>.</t>
          </dd>
          <dt>
babel-hello-ucast-history:  </dt>
          <dd>
            <t>The unicast Hello history of whether or not the
unicast Hello packets prior to babel-exp-ucast-hello-seqno were received.
A binary sequence where the most recently received Hello
is expressed as a "1" placed in the leftmost bit, with prior bits shifted
right (and "0" bits placed between prior Hello bits and the most recent Hello
for any not-received Hellos). This value should be displayed using
hex digits ([0-9a-fA-F]). See <xref target="RFC8966" sectionFormat="comma" section="A.1"/>.</t>
          </dd>
          <dt>
babel-txcost:  </dt>
          <dd>
            <t>Transmission cost value from the last IHU packet received from
this neighbor, or the maximum value to indicate the IHU hold timer
for this neighbor has expired. See <xref target="RFC8966" sectionFormat="comma" section="3.4.2"/>.
This is a 16-bit unsigned integer.</t>
          </dd>
          <dt>
babel-exp-mcast-hello-seqno:  </dt>
          <dd>
            <t>Expected multicast Hello sequence number of
next Hello to be received from this neighbor. If multicast Hello packets
are not expected or processing of multicast packets is not enabled, this
<bcp14>MUST</bcp14> be NULL.
This is a 16-bit unsigned integer; if the data model uses
zero (0) to represent NULL values for unsigned integers,
the data model <bcp14>MAY</bcp14> use a different data type that allows
differentiation between zero (0) and NULL.</t>
          </dd>
          <dt>
babel-exp-ucast-hello-seqno:  </dt>
          <dd>
            <t>Expected unicast Hello sequence number of next
Hello to be received from this neighbor. If unicast Hello packets are not
expected or processing of unicast packets is not enabled, this <bcp14>MUST</bcp14> be
NULL.
This is a 16-bit unsigned integer; if the data model uses
zero (0) to represent NULL values for unsigned integers,
the data model <bcp14>MAY</bcp14> use a different data type that allows
differentiation between zero (0) and NULL.</t>
          </dd>
          <dt>
babel-ucast-hello-seqno:  </dt>
          <dd>
            <t>The current sequence number in use for unicast Hellos
sent to this neighbor. If unicast Hellos are not being sent,
this <bcp14>MUST</bcp14> be NULL.
This is a 16-bit unsigned integer; if the data model uses
zero (0) to represent NULL values for unsigned integers,
the data model <bcp14>MAY</bcp14> use a different data type that allows
differentiation between zero (0) and NULL.</t>
          </dd>
          <dt>
babel-ucast-hello-interval:  </dt>
          <dd>
            <t>The current interval in use for unicast Hellos
sent to this neighbor. Units are centiseconds.
This is a 16-bit unsigned integer.</t>
          </dd>
          <dt>
babel-rxcost:  </dt>
          <dd>
            <t>Reception cost calculated for this neighbor. This value is
usually derived from the Hello history, which may be combined with other
data, such as statistics maintained by the link layer. The rxcost is sent
to a neighbor in each IHU. See <xref target="RFC8966" sectionFormat="comma" section="3.4.3"/>.
This is a 16-bit unsigned integer.</t>
          </dd>
          <dt>
babel-cost:  </dt>
          <dd>
            <t>The link cost, as computed from the values
maintained in the neighbor table: the statistics kept in the
neighbor table about the reception of Hellos and the txcost
computed from received IHU packets.
This is a 16-bit unsigned integer.</t>
          </dd>
        </dl>
      </section>
      <section anchor="definition-of-babel-route-obj" numbered="true" toc="default">
        <name>Definition of babel-route-obj</name>
        <sourcecode name="" type=""><![CDATA[
object {
     ip-address   ro babel-route-prefix;
     uint         ro babel-route-prefix-length;
     binary       ro babel-route-router-id;
     reference    ro babel-route-neighbor;
     uint         ro babel-route-received-metric;
     uint         ro babel-route-calculated-metric;
     uint         ro babel-route-seqno;
     ip-address   ro babel-route-next-hop;
     boolean      ro babel-route-feasible;
     boolean      ro babel-route-selected;
} babel-route-obj;
]]></sourcecode>
        <dl>
          <dt>
babel-route-prefix:  </dt>
          <dd>
            <t>Prefix (expressed in IP address format) for which this
route is advertised.</t>
          </dd>
          <dt>
babel-route-prefix-length:  </dt>
          <dd>
            <t>Length of the prefix for which this route is advertised.</t>
          </dd>
          <dt>
babel-route-router-id:  </dt>
          <dd>
            <t>The router-id of the router that originated this route.</t>
          </dd>
          <dt>
babel-route-neighbor:  </dt>
          <dd>
            <t>Reference to the babel-neighbors entry for the neighbor
that advertised this route.</t>
          </dd>
          <dt>
babel-route-received-metric:  </dt>
          <dd>

            <t>The metric with which this route was advertised
by the neighbor, or the maximum value to indicate the route was
recently retracted and is temporarily unreachable (see <xref target="RFC8966" sectionFormat="of" section="3.5.4"/>). This metric will be
NULL if the route was not received from a neighbor
but was generated through other means. At least one of the following 
<bcp14>MUST</bcp14> be non-NULL: babel-route-calculated-metric
or babel-route-received-metric.
Having both be non-NULL is expected for a route that is received and
subsequently advertised.
This is a 16-bit unsigned integer; if the data model uses
zero (0) to represent NULL values for unsigned integers,
the data model <bcp14>MAY</bcp14> use a different data type that allows
differentiation between zero (0) and NULL.</t>
          </dd>
          <dt>
babel-route-calculated-metric:  </dt>
          <dd>
            <t>A calculated metric for this route. How the
metric is calculated is implementation specific. The maximum value
indicates the route was recently retracted and is temporarily unreachable
(see <xref target="RFC8966" sectionFormat="of" section="3.5.4"/>).
At least one of the following <bcp14>MUST</bcp14> be non-NULL: babel-route-calculated-metric or babel-route-received-metric.
Having both be non-NULL is expected for a route that is received and
subsequently advertised.
This is a 16-bit unsigned integer; if the data model uses
zero (0) to represent NULL values for unsigned integers,
the data model <bcp14>MAY</bcp14> use a different data type that allows
differentiation between zero (0) and NULL.</t>
          </dd>
          <dt>
babel-route-seqno:  </dt>
          <dd>
            <t>The sequence number with which this route was advertised.
This is a 16-bit unsigned integer.</t>
          </dd>
          <dt>
babel-route-next-hop:  </dt>
          <dd>
            <t>The next-hop address of this route. This will be empty
if this route has no next-hop address.</t>
          </dd>
          <dt>
babel-route-feasible:  </dt>
          <dd>
            <t>A Boolean flag indicating whether this route is feasible,
as defined in <xref target="RFC8966" sectionFormat="of" section="3.5.1"/>).</t>
          </dd>
          <dt>
babel-route-selected:  </dt>
          <dd>
            <t>A Boolean flag indicating whether this route is selected
(i.e., whether it is currently being used for forwarding and
is being advertised).</t>
          </dd>
        </dl>
      </section>
      <section anchor="definition-of-babel-mac-key-set-obj" numbered="true" toc="default">
        <name>Definition of babel-mac-key-set-obj</name>
        <sourcecode name="" type=""><![CDATA[
object {
     boolean             rw babel-mac-default-apply;
     babel-mac-key-obj   rw babel-mac-keys<0..*>;
} babel-mac-key-set-obj;
]]></sourcecode>
        <dl>
          <dt>
babel-mac-default-apply:  </dt>
          <dd>
            <t>A Boolean flag indicating whether this object instance is
applied to all new babel-interfaces instances by default.
If "true", this instance is applied to
new babel-interfaces instances at the time they are created by including
it in the babel-if-mac-key-sets list.
If "false", this instance is not applied to new babel-interfaces
instances when they are created.
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
          <dt>
babel-mac-keys:  </dt>
          <dd>
            <t>A set of babel-mac-key-obj objects.</t>
          </dd>
        </dl>
      </section>
      <section anchor="definition-of-babel-mac-key-obj" numbered="true" toc="default">
        <name>Definition of babel-mac-key-obj</name>
        <sourcecode name="" type=""><![CDATA[
object {
     string      rw babel-mac-key-name;
     boolean     rw babel-mac-key-use-send;
     boolean     rw babel-mac-key-use-verify;
     binary      -- babel-mac-key-value;
     string      rw babel-mac-key-algorithm;
    [operation      babel-mac-key-test;]
} babel-mac-key-obj;
]]></sourcecode>
        <dl>
          <dt>
babel-mac-key-name:  </dt>
          <dd>
            <t>A unique name for this MAC key that can be used to identify
the key in this object instance since the key value is not
allowed to be read. This value <bcp14>MUST NOT</bcp14> be empty and can only be provided when this
instance is created (i.e., it is not subsequently writable).
The value <bcp14>MAY</bcp14> be auto-generated if not explicitly supplied when the instance is created.</t>
          </dd>
          <dt>
babel-mac-key-use-send:  </dt>
          <dd>
            <t>Indicates whether this key value is used to compute a MAC
and include that MAC in the sent Babel
packet. A MAC for sent packets is computed using this key if the value
is "true". If the value is "false", this key is not used to
compute a MAC to include in sent Babel packets.
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
          <dt>
babel-mac-key-use-verify:  </dt>
          <dd>
            <t>Indicates whether this key value is used to verify
incoming Babel packets. This key is used to verify
incoming packets if the value is "true". If the value
is "false", no MAC is computed from this key for
comparison with the MAC in an incoming packet.
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
          <dt>
babel-mac-key-value:  </dt>
          <dd>
            <t>The value of the MAC key. An implementation <bcp14>MUST NOT</bcp14> allow
this parameter to be read. This can be done by always providing
an empty string when read, through permissions, or by other means.
This value <bcp14>MUST</bcp14> be provided when this
instance is created and is not subsequently writable.
This value is of a length suitable for the associated
babel-mac-key-algorithm.
If the algorithm is based on the Hashed Message Authentication Code (HMAC) construction <xref target="RFC2104" format="default"/>,
the length <bcp14>MUST</bcp14> be between 0 and an upper limit that is at least
the size of the output length (where the "HMAC-SHA256" output length
is 32 octets as described in <xref target="RFC4868" format="default"/>). Longer lengths <bcp14>MAY</bcp14> be
supported but are not necessary if the management system has the
ability to generate a suitably random value (e.g., by randomly
generating a value or by using a key derivation technique as
recommended in the security considerations in <xref target="RFC8967" sectionFormat="of" section="7"/>). If the
algorithm is "BLAKE2s-128", the length <bcp14>MUST</bcp14> be between 0 and 32
bytes inclusive as specified by <xref target="RFC7693" format="default"/>.</t>
          </dd>
          <dt>
babel-mac-key-algorithm  </dt>
          <dd>
            <t>The name of the MAC algorithm used with this key.
The value <bcp14>MUST</bcp14> be the same as one of the enumerations
listed in the babel-mac-algorithms parameter.
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
          <dt>
babel-mac-key-test:  </dt>
          <dd>
            <t>An operation that allows the MAC key and MAC algorithm to
	    be tested to see if they produce an expected outcome. Input
to this operation is a binary string and a calculated MAC
(also in the format of a binary string) for the binary string.
The implementation is
expected to create a MAC over the binary string using the
babel-mac-key-value and the babel-mac-key-algorithm. The
output of this operation is a Boolean indication that the
calculated MAC matched the input MAC (true) or
the MACs did not match (false).</t>
          </dd>
        </dl>
      </section>
      <section anchor="definition-of-babel-dtls-cert-set-obj" numbered="true" toc="default">
        <name>Definition of babel-dtls-cert-set-obj</name>
        <sourcecode name="" type=""><![CDATA[
object {
     boolean               rw babel-dtls-default-apply;
     babel-dtls-cert-obj   rw babel-dtls-certs<0..*>;
} babel-dtls-cert-set-obj;
]]></sourcecode>
        <dl>
          <dt>
babel-dtls-default-apply:  </dt>
          <dd>
            <t>A Boolean flag indicating whether this object instance is
applied to all new babel-interfaces instances by default.
If "true", this instance is applied to
new babel-interfaces instances at the time they are created by including
it in the babel-interface-dtls-certs list.
If "false", this instance is not applied to new babel-interfaces
instances when they are created.
An implementation <bcp14>MAY</bcp14> choose
to expose this parameter as read-only ("ro").</t>
          </dd>
          <dt>
babel-dtls-certs:  </dt>
          <dd>
            <t>A set of babel-dtls-cert-obj objects. This contains both certificates
for this implementation to present for authentication and those to accept
from others. Certificates with a non-empty babel-cert-private-key can
be presented by this implementation for authentication.</t>
          </dd>
        </dl>
      </section>
      <section anchor="definition-of-babel-dtls-cert-obj" numbered="true" toc="default">
        <name>Definition of babel-dtls-cert-obj</name>
        <sourcecode name="" type=""><![CDATA[
object {
     string      rw babel-cert-name;
     string      rw babel-cert-value;
     string      rw babel-cert-type;
     binary      -- babel-cert-private-key;
} babel-dtls-cert-obj;
]]></sourcecode>
        <dl>
          <dt>
babel-cert-name:  </dt>
          <dd>
            <t>A unique name for this certificate that can be used to identify
the certificate in this object instance since the value is too long
to be useful for identification. This value <bcp14>MUST NOT</bcp14> be empty and can
only be provided when this instance is created (i.e., it is not
subsequently writable). The value <bcp14>MAY</bcp14> be auto-generated if not
explicitly supplied when the instance is created.</t>
          </dd>
          <dt>
babel-cert-value:  </dt>
          <dd>
            <t>The certificate in Privacy-Enhanced Mail (PEM) format <xref target="RFC7468" format="default"/>.
This value <bcp14>MUST</bcp14> be provided when this
instance is created and is not subsequently writable.</t>
          </dd>
          <dt>
babel-cert-type:  </dt>
          <dd>
            <t>The name of the certificate type of this object
instance. The value <bcp14>MUST</bcp14> be the same as one of the enumerations
listed in the babel-dtls-cert-types parameter.
This value can only be provided when this
instance is created and is not subsequently writable.</t>
          </dd>
          <dt>
babel-cert-private-key:  </dt>
          <dd>
            <t>The value of the private key. If this is non-empty, this
certificate can be used by this implementation
to provide a certificate during DTLS handshaking.
An implementation <bcp14>MUST NOT</bcp14> allow
this parameter to be read. This can be done by always providing
an empty string when read, through permissions, or by other means.
This value can only be provided when this
instance is created and is not subsequently writable.</t>
          </dd>
        </dl>
      </section>
    </section>
    <section anchor="extending-the-information-model" numbered="true" toc="default">
      <name>Extending the Information Model</name>
      <t>Implementations <bcp14>MAY</bcp14> extend this information model with other parameters or
objects. For example, an implementation <bcp14>MAY</bcp14> choose to expose Babel route
filtering rules by adding a route filtering object with parameters appropriate
to how route filtering is done in that implementation. The precise means
used to extend the information model would be specific to the data model
the implementation uses to expose this information.</t>
    </section>
    <section anchor="security-considerations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>This document defines a set of information model objects and parameters that
may be exposed and visible from other devices. Some of these information model objects and parameters may be configured. Securing access to and ensuring the integrity of this data
is in scope of and the responsibility of any data model derived from this
information model. Specifically, any YANG <xref target="RFC7950" format="default"/> data model is expected
to define security exposure of the various parameters, and a <xref target="TR-181" format="default"/> data model
will be secured by the mechanisms defined for the management protocol used to
transport it.</t>
      <t>Misconfiguration (whether unintentional or malicious) can prevent reachability
or cause poor network performance (increased latency, jitter, etc.).
Misconfiguration of security credentials can cause a denial-of-service condition
for the Babel routing protocol.
The information in this model discloses network topology, which can be used
to mount subsequent attacks on traffic traversing the network.</t>
      <t>This information model defines objects that can allow credentials (for this
device, for trusted devices, and for trusted certificate authorities) to
be added and deleted. Public keys may be exposed through
this model. This model requires that private keys and MAC
keys never be exposed. Certificates used by <xref target="RFC8968" format="default"/>
implementations use separate parameters to model the public
parts (including the public key) and the private key.</t>
      <t>MAC keys are allowed to be as short as zero length. This is
useful for testing. It is <bcp14>RECOMMENDED</bcp14> that network operators follow current best practices for key length and generation of
keys related to the MAC algorithm associated with the key.
Short (and zero-length) keys are highly susceptible to brute-force attacks
and therefore <bcp14>SHOULD NOT</bcp14> be used.
See the security considerations as described in <xref target="RFC8967" sectionFormat="of" section="7"/> 
for additional considerations related to MAC keys; note that there are some specific key value recommendations in the fifth paragraph.
It says that if it is necessary to derive keys from a human-readable
passphrase, "only the derived keys should be communicated to the routers"
and "the original passphrase itself should be kept on the host used to
perform the key generation" (which would be the management system in the
case of a remote management protocol). It also recommends that keys "should
have a length of 32 octets (both for HMAC-SHA256 and BLAKE2s), and be
chosen randomly".</t>
      <t>This information model uses key sets and certification sets to provide
      a means of grouping keys and certificates. This makes it easy to use
a different set per interface, use the same set for one or more interfaces, have
a default set in case a new interface is instantiated, and
change keys and certificates as needed.</t>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>This document has no IANA actions.</t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>

<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2104.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4868.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3339.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7468.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7693.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8966.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8967.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8968.xml"/>

        <reference anchor="ISO.10646">
          <front>
            <title>Information technology - Universal Coded Character Set (UCS)</title>
            <author>
              <organization>International Organization for Standardization</organization>
            </author>
            <date year="2014"/>
          </front>
          <seriesInfo name="ISO Standard" value="10646:2014"/>
        </reference>

	
        <reference anchor="libpcap" target="https://gitlab.com/wireshark/wireshark/-/wikis/Development/LibpcapFileFormat">
          <front>
            <title>Libpcap File Format</title>
            <author>
              <organization>GitLab</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
<refcontent>Wireshark Foundation</refcontent>
        </reference>
      </references>
      <references>
        <name>Informative References</name>

<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6241.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7950.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8193.xml"/>


        <reference anchor="TR-181" target="http://cwmp-data-models.broadband-forum.org/">
          <front>
            <title>Device Data Model</title>
            <author>
              <organization>Broadband Forum</organization>
            </author>
            <date month="November" year="2020"/>
          </front>
	  <refcontent>Issue: 2 Amendment 14</refcontent>
        </reference>
      </references>
    </references>
    <section anchor="Acknowledgements" numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t><contact fullname="Juliusz Chroboczek"/>, <contact fullname="Toke Høiland-Jørgensen"/>, <contact fullname="David Schinazi"/>,
<contact fullname="Antonin Décimo"/>, <contact fullname="Roman Danyliw"/>, <contact fullname="Benjamin Kaduk"/>, <contact fullname="Valery Smyslov"/>, <contact fullname="Alvaro Retana"/>, <contact fullname="Donald Eastlake"/>, <contact fullname="Martin Vigoureux"/>,
<contact fullname="Acee Lindem"/>, and <contact fullname="Carsten Bormann"/> have been very helpful in
refining this information model.</t>
      <t>The language in the <xref target="notation" format="none">"Notation"</xref> section was mostly taken from <xref target="RFC8193" format="default"/>.</t>
    </section>
  </back>
</rfc>
