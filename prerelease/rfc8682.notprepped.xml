<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" submissionType="IETF"
     category="std" consensus="yes" number="8682" ipr="trust200902"
     obsoletes="" updates="" xml:lang="en" tocInclude="true" symRefs="true"
     sortRefs="true" version="3" docName="draft-ietf-tsvwg-tinymt32-06">
  <!-- xml2rfc v2v3 conversion 2.34.0 -->
  <front>
    <title abbrev="TinyMT32 PRNG">TinyMT32 Pseudorandom Number Generator (PRNG)</title>
    <seriesInfo name="RFC" value="8682"/>
    <author fullname="Mutsuo Saito" initials="M" surname="Saito">
      <organization>Hiroshima University</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <country>Japan</country>
        </postal>
        <email>saito@math.sci.hiroshima-u.ac.jp</email>
      </address>
    </author>
    <author fullname="Makoto Matsumoto" initials="M" surname="Matsumoto">
      <organization>Hiroshima University</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <country>Japan</country>
        </postal>
        <email>m-mat@math.sci.hiroshima-u.ac.jp</email>
      </address>
    </author>
    <author fullname="Vincent Roca" initials="V" surname="Roca" role="editor">
      <organization>INRIA</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <code/>
	  <extaddr>Univ. Grenoble Alpes</extaddr>
          <country>France</country>
        </postal>
        <email>vincent.roca@inria.fr</email>
      </address>
    </author>
    <author fullname="Emmanuel Baccelli" initials="E" surname="Baccelli">
      <organization>INRIA</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <code/>
          <country>France</country>
        </postal>
        <email>emmanuel.baccelli@inria.fr</email>
      </address>
    </author>
    <date year="2020" month="January"/>
    <workgroup>TSVWG</workgroup>

    <abstract>

      <t>
This document describes the TinyMT32 Pseudorandom Number Generator (PRNG), which produces 32-bit pseudorandom unsigned integers and aims at having a simple-to-use and deterministic solution.
This PRNG is a small-sized variant of the Mersenne Twister (MT) PRNG.
The main advantage of TinyMT32 over MT is the use of a small internal state, compatible with most target platforms that include embedded devices, while keeping reasonably good randomness that represents a significant improvement compared to the Park-Miller Linear Congruential PRNG.
However, neither the TinyMT nor MT PRNG is meant to be used for cryptographic applications.
</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <!-- ====================== -->
      <t>
This document specifies the TinyMT32 PRNG as a specialization of the
reference implementation version 1.1 (2015/04/24) by Mutsuo Saito and Makoto
Matsumoto from Hiroshima University, which can be found at <xref target="TinyMT-web" format="default"/> (the TinyMT website) and <xref target="TinyMT-dev" format="default"/>
(the GitHub site).
This specialization aims at having a simple-to-use and deterministic PRNG, as explained below.
However, the TinyMT32 PRNG is not meant to be used for cryptographic applications.
</t>
      <t>
TinyMT is a new, small-sized variant of the Mersenne
Twister (MT) PRNG introduced in 2011 <xref target="MT98" format="default"/>.
This document focuses on the TinyMT32 variant (rather than TinyMT64) of the TinyMT PRNG, which outputs 32-bit unsigned integers.
</t>
      <t>
The purpose of TinyMT is not to replace the Mersenne Twister: TinyMT has a far shorter period (2<sup>127</sup> - 1) than MT.
The merit of TinyMT is in the small size of the 127-bit internal state, far smaller than the 19937 bits of MT.

The outputs of TinyMT satisfy several statistical tests for non-cryptographic randomness, including BigCrush
in TestU01 <xref target="TestU01" format="default"/> and AdaptiveCrush <xref target="AdaptiveCrush" format="default"/>, leaving it well placed
for non-cryptographic usage, especially given the small size of its internal state
(see <xref target="TinyMT-web" format="default"/>).

From this point of view, TinyMT32 represents a major improvement with respect
to the Park-Miller Linear Congruential PRNG (e.g., as specified in <xref
target="RFC5170" format="default"/>), which suffers from several known
limitations (see, for instance, <xref target="PTVF92" format="default"/>,
Section 7.1, p. 279 and <xref target="RFC8681" sectionFormat="comma" section="B"/>).
</t>
      <t>
The TinyMT32 PRNG initialization depends, among other things, on a parameter set, namely (mat1, mat2, tmat).
In order to facilitate the use of this PRNG and to make the sequence of pseudorandom numbers depend only on the seed value, this specification requires the use of a specific parameter set (see <xref target="tinymt32_source_code" format="default"/>).
This is a major difference with respect to the implementation version 1.1
(2015/04/24), which leaves this parameter set unspecified.
</t>
      <t>
Finally, the determinism of this PRNG for a given seed has been carefully checked (see <xref target="tinymt32_validation" format="default"/>).
This means that the same sequence of pseudorandom numbers should be generated, no matter the target execution platform and compiler, for a given initial seed value.
This determinism can be a key requirement, as is the case with <xref target="RFC8681" format="default"/>, which normatively depends on this specification.
</t>
      <!-- <section anchor="definitionsAndAbbreviations" title="Definitions and Abbreviations"> -->
      <section anchor="definitionsAndAbbreviations" numbered="true" toc="default">
        <name>Requirements Language</name>
        <!-- ====================== -->
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>",
    "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be
    interpreted as described in BCP&nbsp;14 <xref target="RFC2119"/> <xref
    target="RFC8174"/> when, and only when, they appear in all capitals, as
    shown here.
        </t>
        <!--
<t>This document uses the following definitions and abbreviations: <list style="hanging">

<t hangText="PRNG:">		pseudo-random number generator</t>
</list></t>
-->
      </section>
    </section>
    <!-- =========================================================================================== -->
    <section anchor="tinymt32_specs" numbered="true" toc="default">
      <name>TinyMT32 PRNG Specification</name>
      <!-- ====================== -->
      <section anchor="tinymt32_source_code" numbered="true" toc="default">
        <name>TinyMT32 Source Code</name>
        <!-- ====================== -->
        <t>
The TinyMT32 PRNG must be initialized with a parameter set that needs to be well chosen.
In this specification, for the sake of simplicity, the following parameter set <bcp14>MUST</bcp14> be used:
</t>
        <ul spacing="normal">
          <li>mat1 = 0x8f7011ee = 2406486510</li>
          <li>mat2 = 0xfc78ff1f = 4235788063</li>
          <li>tmat = 0x3793fdff = 932445695</li>
        </ul>
        <t>
This parameter set is the first entry of the precalculated parameter sets in tinymt32dc/tinymt32dc.0.1048576.txt by Kenji Rikitake, available at <xref target="TinyMT-params" format="default"/>.
This is also the parameter set used in <xref target="KR12" format="default"/>.
</t>
        <t>
The TinyMT32 PRNG reference implementation is reproduced in <xref target="fig_tinymt32" format="default"/>.
This is a C language implementation written for C99 <xref target="C99" format="default"/>.
This reference implementation differs from the original source code as follows:
</t>

        <ul spacing="normal">
          <li>The original authors, who are coauthors of this document, have
	  granted IETF
the rights to publish this version with a license and copyright that are in
accordance with BCP 78 and the IETF Trust's Legal Provisions Relating to IETF
Documents (http://trustee.ietf.org/license-info).</li>
          <li>The source code initially spread over the tinymt32.h and tinymt32.c files has been merged.</li>
          <li>The unused parts of the original source code have been removed.
	   This is the case of the tinymt32_init_by_array() alternative initialization function.
	   This is also the case of the period_certification() function after having checked it is not required with the chosen parameter set.</li>
          <li>The unused constants TINYMT32_MEXP and TINYMT32_MUL have been removed.</li>
          <li>The appropriate parameter set has been added to the initialization function.</li>
          <li>The function order has been changed.</li>
          <li>Certain internal variables have been renamed for compactness purposes.</li>
          <li>The const qualifier has been added to the constant definitions.</li>
          <li>The code that was dependent on the representation of negative integers by 2's complements has been replaced by a more portable version.</li>
        </ul>

        <figure anchor="fig_tinymt32">
          <name>TinyMT32 Reference Implementation</name>
          <sourcecode name="" type="c" markers="true"><![CDATA[
/**
 * Tiny Mersenne Twister: only 127-bit internal state.
 * Derived from the reference implementation version 1.1 (2015/04/24)
 * by Mutsuo Saito (Hiroshima University) and Makoto Matsumoto
 * (Hiroshima University).
 */
#include <stdint.h>

/**
 * tinymt32 internal state vector and parameters
 */
typedef struct {
    uint32_t status[4];
    uint32_t mat1;
    uint32_t mat2;
    uint32_t tmat;
} tinymt32_t;

static void tinymt32_next_state (tinymt32_t* s);
static uint32_t tinymt32_temper (tinymt32_t* s);

/**
 * Parameter set to use for this IETF specification. Don't change.
 * This parameter set is the first entry of the precalculated
 * parameter sets in tinymt32dc/tinymt32dc.0.1048576.txt by
 * Kenji Rikitake, available at:
 *    https://github.com/jj1bdx/tinymtdc-longbatch/.
 * It is also the parameter set used in:
 *    Rikitake, K., "TinyMT pseudo random number generator for
 *    Erlang", Proceedings of the 11th ACM SIGPLAN Erlang Workshop,
 *    September 2012.
 */
const uint32_t  TINYMT32_MAT1_PARAM = UINT32_C(0x8f7011ee);
const uint32_t  TINYMT32_MAT2_PARAM = UINT32_C(0xfc78ff1f);
const uint32_t  TINYMT32_TMAT_PARAM = UINT32_C(0x3793fdff);

/**
 * This function initializes the internal state array with a
 * 32-bit unsigned integer seed.
 * @param s     pointer to tinymt internal state.
 * @param seed  a 32-bit unsigned integer used as a seed.
 */
void tinymt32_init (tinymt32_t* s, uint32_t seed)
{
    const uint32_t    MIN_LOOP = 8;
    const uint32_t    PRE_LOOP = 8;
    s->status[0] = seed;
    s->status[1] = s->mat1 = TINYMT32_MAT1_PARAM;
    s->status[2] = s->mat2 = TINYMT32_MAT2_PARAM;
    s->status[3] = s->tmat = TINYMT32_TMAT_PARAM;
    for (int i = 1; i < MIN_LOOP; i++) {
        s->status[i & 3] ^= i + UINT32_C(1812433253)
            * (s->status[(i - 1) & 3]
               ^ (s->status[(i - 1) & 3] >> 30));
    }
    /*
     * NB: The parameter set of this specification warrants
     * that none of the possible 2^^32 seeds leads to an
     * all-zero 127-bit internal state. Therefore, the
     * period_certification() function of the original
     * TinyMT32 source code has been safely removed. If
     * another parameter set is used, this function will
     * have to be reintroduced here.
     */
    for (int i = 0; i < PRE_LOOP; i++) {
        tinymt32_next_state(s);
    }
}

/**
 * This function outputs a 32-bit unsigned integer from
 * the internal state.
 * @param s     pointer to tinymt internal state.
 * @return      32-bit unsigned integer r (0 <= r < 2^32).
 */
uint32_t tinymt32_generate_uint32 (tinymt32_t* s)
{
    tinymt32_next_state(s);
    return tinymt32_temper(s);
}

/**
 * Internal tinymt32 constants and functions.
 * Users should not call these functions directly.
 */
const uint32_t  TINYMT32_SH0 = 1;
const uint32_t  TINYMT32_SH1 = 10;
const uint32_t  TINYMT32_SH8 = 8;
const uint32_t  TINYMT32_MASK = UINT32_C(0x7fffffff);

/**
 * This function changes the internal state of tinymt32.
 * @param s     pointer to tinymt internal state.
 */
static void tinymt32_next_state (tinymt32_t* s)
{
    uint32_t x;
    uint32_t y;

    y = s->status[3];
    x = (s->status[0] & TINYMT32_MASK)
        ^ s->status[1]
        ^ s->status[2];
    x ^= (x << TINYMT32_SH0);
    y ^= (y >> TINYMT32_SH0) ^ x;
    s->status[0] = s->status[1];
    s->status[1] = s->status[2];
    s->status[2] = x ^ (y << TINYMT32_SH1);
    s->status[3] = y;
    /*
     * The if (y & 1) {...} block below replaces:
     *     s->status[1] ^= -((int32_t)(y & 1)) & s->mat1;
     *     s->status[2] ^= -((int32_t)(y & 1)) & s->mat2;
     * The adopted code is equivalent to the original code
     * but does not depend on the representation of negative
     * integers by 2's complements. It is therefore more
     * portable but includes an if branch, which may slow
     * down the generation speed.
     */
    if (y & 1) {
         s->status[1] ^= s->mat1;
         s->status[2] ^= s->mat2;
     }
}

/**
 * This function outputs a 32-bit unsigned integer from
 * the internal state.
 * @param s     pointer to tinymt internal state.
 * @return      32-bit unsigned pseudorandom number.
 */
static uint32_t tinymt32_temper (tinymt32_t* s)
{
    uint32_t t0, t1;
    t0 = s->status[3];
    t1 = s->status[0] + (s->status[2] >> TINYMT32_SH8);
    t0 ^= t1;
    /*
     * The if (t1 & 1) {...} block below replaces:
     *     t0 ^= -((int32_t)(t1 & 1)) & s->tmat;
     * The adopted code is equivalent to the original code
     * but does not depend on the representation of negative
     * integers by 2's complements. It is therefore more
     * portable but includes an if branch, which may slow
     * down the generation speed.
     */
    if (t1 & 1) {
        t0 ^= s->tmat;
    }
    return t0;
}
]]></sourcecode>
        </figure>
      </section>
      <section anchor="tinymt32_usage" numbered="true" toc="default">
        <name>TinyMT32 Usage</name>
        <!-- ====================== -->
        <t>
This PRNG <bcp14>MUST</bcp14> first be initialized with the following function:
</t>
        <ul empty="true" spacing="normal">
          <li>void   tinymt32_init (tinymt32_t* s, uint32_t seed);</li>
        </ul>
        <t>
It takes as input a 32-bit unsigned integer used as a seed (note that value 0 is permitted by TinyMT32).
This function also takes as input a pointer to an instance of a tinymt32_t
structure that needs to be allocated by the caller but is left uninitialized.
This structure will then be updated by the various TinyMT32 functions in order to keep the internal state of the PRNG.
The use of this structure admits several instances of this PRNG to be used in parallel, each of them having its own instance of the structure.
</t>
        <t>
Then, each time a new 32-bit pseudorandom unsigned integer between 0 and 2<sup>32</sup> - 1 inclusive is needed, the following function is used:
</t>
        <ul empty="true" spacing="normal">
          <li>uint32_t tinymt32_generate_uint32 (tinymt32_t * s);</li>
        </ul>
        <t>
Of course, the tinymt32_t structure must be left unchanged by the caller between successive calls to this function.
</t>
      </section>
      <section anchor="tinymt32_validation" numbered="true" toc="default">
        <name>Specific Implementation Validation and Deterministic Behavior</name>
        <!-- ====================== -->
        <t>
For a given seed, PRNG determinism can be a requirement (e.g., with <xref target="RFC8681" format="default"/>).
Consequently, any implementation of the TinyMT32 PRNG in line with this specification <bcp14>MUST</bcp14> have the same output as that provided by the reference implementation of <xref target="fig_tinymt32" format="default"/>.
In order to increase the compliancy confidence, this document proposes the following criteria.
Using a seed value of 1, the first 50 values returned by tinymt32_generate_uint32(s) as 32-bit unsigned integers
are equal to the values provided in <xref target="fig_tinymt32_out" format="default"/>, which
are to be read line by line.
Note that these values come from the tinymt/check32.out.txt file provided by the PRNG authors to validate implementations
of TinyMT32 as part of the MersenneTwister-Lab/TinyMT GitHub repository.
</t>

        <figure anchor="fig_tinymt32_out">
          <name>First 50 decimal values (to be read per line) returned by tinymt32_generate_uint32(s) as 32-bit unsigned integers, with a seed value of 1</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
2545341989  981918433 3715302833 2387538352 3591001365 
3820442102 2114400566 2196103051 2783359912  764534509 
 643179475 1822416315  881558334 4207026366 3690273640 
3240535687 2921447122 3984931427 4092394160   44209675 
2188315343 2908663843 1834519336 3774670961 3019990707 
4065554902 1239765502 4035716197 3412127188  552822483 
 161364450  353727785  140085994  149132008 2547770827 
4064042525 4078297538 2057335507  622384752 2041665899 
2193913817 1080849512   33160901  662956935  642999063 
3384709977 1723175122 3866752252  521822317 2292524454
]]></artwork>
        </figure>
        <t>
In particular, the deterministic behavior of the <xref target="fig_tinymt32" format="default"/> source code has been checked across several platforms:
high-end laptops running 64-bit Mac OS X and Linux/Ubuntu;
a board featuring a 32-bit ARM Cortex-A15 and running 32-bit Linux/Ubuntu;
several embedded cards featuring either an ARM Cortex-M0+, a Cortex-M3, or a Cortex-M4 32-bit microcontroller, all of them running RIOT <xref target="Baccelli18" format="default"/>;
two low-end embedded cards featuring either a 16-bit microcontroller (TI MSP430) or an 8-bit microcontroller (Arduino ATMEGA2560), both of them running RIOT.
</t>
        <t>
This specification only outputs 32-bit unsigned pseudorandom numbers and does not try to map this output to a smaller integer range (e.g., between 10 and 49 inclusive).
If a specific use case needs such a mapping, it will have to provide its own function.
In that case, if PRNG determinism is also required, the use of a floating point
(single or double precision) to perform this mapping should probably be
avoided, as these calculations may lead to different rounding errors across different target platforms.
Great care should also be taken to not introduce biases in the randomness of the mapped output (which may be the case with some mapping algorithms) incompatible with the use-case requirements.
The details of how to perform such a mapping are out of scope of this document.
</t>
      </section>
    </section>
    <!-- =========================================================================================== -->
    <section anchor="SecurityConsiderations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <!-- ====================== -->
      <t>
The authors do not believe the present specification generates specific
security risks per se. However, the TinyMT and MT PRNG must not be used for
cryptographic applications.
</t>
    </section>
    <section anchor="iana" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <!-- ====================== -->
      <t>
This document has no IANA actions.
</t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <!-- ====================== -->
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>

        <reference anchor="C99">
          <front>
            <title>Programming languages - C: C99, correction 3:2007</title>
            <seriesInfo name="ISO/IEC" value="9899:1999/Cor 3:2007"/>
            <author>
              <organization>International Organization for Standardization</organization>
            </author>
            <date month="November" year="2007"/>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <!-- ====================== -->
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5170.xml"/>

        <reference anchor="TinyMT-web" target="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/TINYMT/">
          <front>
            <title>Tiny Mersenne Twister (TinyMT)</title>
            <author fullname="Mutsuo Saito" initials="M" surname="Saito">
              <organization/>
            </author>
            <author fullname="Makoto Matsumoto" initials="M" surname="Matsumoto">
              <organization/>
            </author>
          </front>
        </reference>

        <reference anchor="TinyMT-dev" target="https://github.com/MersenneTwister-Lab/TinyMT">
          <front>
            <title>Tiny Mersenne Twister (TinyMT)</title>
            <seriesInfo name="commit" value="9d7ca3c"/>
            <author/>
            <date month="March" year="2018"/>
          </front>
        </reference>

        <reference anchor="TinyMT-params" target="https://github.com/jj1bdx/tinymtdc-longbatch">
          <front>
            <title>TinyMT pre-calculated parameter list</title>
            <seriesInfo name="commit" value="30079eb"/>
            <author/>
            <date month="March" year="2013"/>
          </front>
        </reference>


	<reference anchor="RFC8681" target="https://www.rfc-editor.org/info/rfc8681">
	  <front>
	    <title>Sliding Window Random Linear Code (RLC) Forward Erasure Correction
	    (FEC) Schemes for FECFRAME</title>
	    <seriesInfo name="RFC" value="8681"/>
	    <seriesInfo name="DOI" value="10.17487/RFC8681"/>
            <author initials="V" surname="Roca" fullname="Vincent Roca">
              <organization/>
            </author>
            <author initials="B" surname="Teibi" fullname="Belkacem Teibi">
              <organization/>
            </author>
	    <date month='January' year='2020'/>
	  </front>
	</reference>

        <reference anchor="MT98">
          <front>
            <title>Mersenne twister: A 623-dimensionally equidistributed uniform pseudo-random number generator</title>
            <seriesInfo name="DOI" value="10.1145/272991.272995"/>
            <author initials="M." surname="Matsumoto">
              <organization/>
            </author>
            <author initials="T." surname="Nishimura">
              <organization/>
            </author>
            <date month="January" year="1998"/>
          </front>
            <refcontent>ACM Transactions on Modeling and Computer Simulation (TOMACS), Volume 8, Issue 1, pp. 3-30</refcontent>

        </reference>

        <reference anchor="KR12">
          <front>
            <title>TinyMT pseudo random number generator for Erlang</title>
            <seriesInfo name="DOI" value="10.1145/2364489.2364504"/>
            <author initials="K." surname="Rikitake">
              <organization/>
            </author>
            <date month="September" year="2012"/>
          </front>
            <refcontent>Proceedings of the 11th ACM SIGPLAN Erlang Workshop, pp. 67-72</refcontent>
        </reference>

        <reference anchor="Baccelli18">
          <front>
            <title>RIOT: An Open Source Operating System for Low-End Embedded Devices in the IoT</title>
            <seriesInfo name="DOI" value="10.1109/JIOT.2018.2815038"/>
            <author initials="E." surname="Baccelli">
              <organization/>
            </author>
            <author initials="C." surname="Gundogan">
              <organization/>
            </author>
            <author initials="O." surname="Hahm">
              <organization/>
            </author>
            <author initials="P." surname="Kietzmann">
              <organization/>
            </author>
            <author initials="M. S." surname="Lenders">
              <organization/>
            </author>
            <author initials="H." surname="Petersen">
              <organization/>
            </author>
            <author initials="K." surname="Schleiser">
              <organization/>
            </author>
            <author initials="T. C." surname="Schmidt">
              <organization/>
            </author>
            <author initials="M." surname="Wahlisch">
              <organization/>
            </author>
            <date month="December" year="2018"/>
          </front>
            <refcontent>IEEE Internet of Things Journal, Volume 5, Issue 6</refcontent>
        </reference>

        <reference anchor="PTVF92">
          <front>
            <title>Numerical recipes in C (2nd ed.): the art of scientific
	    computing</title>
	    <seriesInfo name="ISBN" value="0-521-43108-5"/>
            <author initials="W." surname="Press">
              <organization/>
            </author>
            <author initials="S." surname="Teukolsky">
              <organization/>
            </author>
            <author initials="W." surname="Vetterling">
              <organization/>
            </author>
            <author initials="B." surname="Flannery">
              <organization/>
            </author>
            <date year="1992"/>
          </front>
          <refcontent>Cambridge University Press</refcontent>
        </reference>

        <reference anchor="TestU01" target="http://simul.iro.umontreal.ca/testu01/tu01.html">
          <front>
            <title>TestU01: A C library for empirical testing of random number generators</title>
            <seriesInfo name="DOI" value="10.1145/1268776.1268777"/>
            <author initials="P." surname="L'Ecuyer">
              <organization/>
            </author>
            <author initials="R." surname="Simard">
              <organization/>
            </author>
            <date month="August" year="2007"/>
          </front>
            <refcontent>ACM Transactions on Mathematical Software (TOMS), Volume 33, Issue 4, Article 22</refcontent>
        </reference>

        <reference anchor="AdaptiveCrush" target="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ADAPTIVE">
          <front>
            <title>Automation of Statistical Tests on Randomness to Obtain Clearer Conclusion</title>
            <seriesInfo name="DOI" value="10.1007/978-3-642-04107-5_26"/>
            <author initials="H." surname="Haramoto">
              <organization/>
            </author>
            <date month="November" year="2009"/>
          </front>
            <refcontent>Monte Carlo and Quasi-Monte Carlo Methods 2008</refcontent>
        </reference>
      </references>
    </references>
    <!-- ====================== -->
    <section numbered="false" toc="default">
      <name>Acknowledgments</name>
      <!-- ====================== -->

      <t>
The authors would like to thank Belkacem Teibi, with whom we explored TinyMT32
specificities when looking to an alternative to the Park-Miller Linear
Congruential PRNG.  The authors would also like to thank Carl Wallace; Stewart
Bryant; Greg Skinner; Mike Heard; the three TSVWG chairs, Wesley Eddy (our
shepherd), David Black, and Gorry Fairhurst; as well as Spencer Dawkins and
Mirja Kuehlewind.  Last but not least, the authors are really grateful to the
IESG members, in particular Benjamin Kaduk, Eric Rescorla, Adam Roach, Roman
Danyliw, Barry Leiba, Martin Vigoureux, and Eric Vyncke for their highly
valuable feedback that greatly contributed to improving this specification.
</t>
    </section>

  </back>
</rfc>
