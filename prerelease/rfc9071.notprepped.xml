<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" submissionType="IETF" category="std" consensus="true" docName="draft-ietf-avtcore-multi-party-rtt-mix-20" number="9071" ipr="trust200902" updates="4103" obsoletes="" xml:lang="en" tocInclude="true" tocDepth="2" symRefs="true" sortRefs="true" version="3">

  <!-- xml2rfc v2v3 conversion 2.42.0 -->
  <front>
    <title abbrev="RTP-Mixer Format for Multiparty RTT">RTP-Mixer Formatting of Multiparty Real-Time Text</title>
    <seriesInfo name="RFC" value="9071"/>
    <author fullname="Gunnar Hellström" initials="G" surname="Hellström">
      <organization abbrev="GHAccess">Gunnar Hellström Accessible Communication</organization>
      <address>
        <postal>
          <city>Vendelsö</city>
	  <code>13670</code>
          <country>Sweden</country>
        </postal>
      <email>gunnar.hellstrom@ghaccess.se</email>
      </address>
    </author>
    <date year="2021" month="July" />

	<keyword>conference</keyword>
	<keyword>bridge</keyword>
	<keyword>SIP</keyword>
	
    <abstract>
     
      <t>
This document provides enhancements of real-time text (as specified in RFC 4103) suitable for mixing in a centralized conference model, enabling source identification and rapidly
interleaved transmission of text from different sources. The intended use is for real-time text mixers and participant endpoints capable of providing an efficient presentation or other treatment of a multiparty real-time text session. The specified mechanism builds on the standard use of the Contributing Source (CSRC) list in the Real-time Transport Protocol (RTP) packet for source identification. The method makes use of the same "text/t140" and "text/red" formats as for two-party sessions.
</t>
<t>
Solutions using multiple RTP streams in the same RTP session are briefly mentioned, as they could have some benefits over the RTP-mixer model. The RTP-mixer model was selected to be used for the fully specified solution in this document because it can be applied to a wide range of existing RTP implementations.
</t>
      <t>
 A capability exchange is specified so that it can be verified that a mixer and a participant can handle the multiparty-coded real-time text stream using the RTP-mixer method. The capability is indicated by the use of a Session Description Protocol (SDP) (RFC 8866) media attribute, "rtt-mixer".
      </t>
            <t>
This document updates RFC 4103 ("RTP Payload for Text Conversation").
            </t>
      <t>
 A specification for how a mixer can format text for the case when the endpoint is not multiparty aware is also provided.
      </t>
    </abstract>
  </front>
  <middle>
    <section numbered="true" toc="default">
      <name>Introduction</name>
      <t>
"<xref target="RFC4103" format="title"/>" <xref target="RFC4103" format="default"/>
specifies the use of the Real-time Transport Protocol (RTP) <xref target="RFC3550" format="default"/> for transmission of real-time text (often called RTT) and the "text/t140" format. It also specifies a redundancy format, "text/red", for increased robustness. The "text/red" format is registered in <xref target="RFC4102" format="default"/>.
</t>
<t>
  Real-time text is usually provided together with audio and sometimes with video in conversational sessions.
</t>
<t>
A requirement related to multiparty sessions from the presentation-level standard T.140 <xref target="T140" format="default"/> for real-time text is as follows:</t>
<!-- DNE; verified -->
<blockquote>The display of text from the members of the conversation should be arranged so that the text from
each participant is clearly readable, and its source and the relative timing of entered text is visualized
in the display.</blockquote>

<t>
Another requirement is that the mixing procedure must not introduce delays in the text streams that could be perceived as disruptive to the real-time experience of the receiving users.
</t>

      <t>
The use of real-time text is increasing, and specifically, use in emergency calls is increasing.  Emergency call use requires multiparty mixing, because it is common that one agent needs to transfer the call to another specialized agent but is obliged to stay on the call to at least verify that the transfer was successful. Mixer implementations for RFC 4103 ("RTP Payload for Text Conversation") can use traditional RTP functions (RFC 3550) for mixing and source identification, but the performance of the mixer when giving turns for the different sources to transmit is limited when using the default transmission characteristics with redundancy.
</t>
      <t>
The redundancy scheme described in <xref target="RFC4103" format="default"/> enables efficient transmission of earlier transmitted redundant text in packets together with new text. However, the redundancy header format has no source indicators for the redundant transmissions. The redundant parts in a packet must therefore be from the same source as the new text. The recommended transmission is one new and two redundant generations of text (T140blocks) in each packet, and the recommended transmission interval for two-party use is 300 ms.
</t>

<t>
Real-time text mixers for multiparty sessions need to include the
source with each transmitted group of text from a conference participant so that the text can be transmitted interleaved with text groups from different sources at the rate at which they are created. This enables the text groups to be presented by endpoints in a suitable grouping with other text from the same source. 
</t>
<t>
The presentation can then be arranged so that text from different sources can be presented in real time and easily read. At the same time, it is possible for a reading user to perceive approximately when the text was created in real time by the different parties. The transmission and mixing are intended to be done in a general way, so that presentation can be arranged in a layout decided upon by the receiving endpoint.

</t>
 <t>
Existing implementations of RFC 4103 in endpoints that do not implement the updates specified in this document cannot be expected to properly present real-time text mixed for multiparty-aware endpoints.
 </t>
      <t>
        A negotiation mechanism is therefore needed to verify if the parties
(1)&nbsp;are able to handle a common method for multiparty transmissions and
(2)&nbsp;can agree on using that method.
</t>
      <t>
        A fallback mixing procedure is also needed for cases when the negotiation result indicates that a receiving endpoint is not capable of handling the mixed format. Multiparty-unaware endpoints would possibly otherwise present all received multiparty mixed text as if it came from the same source regardless of any accompanying source indication coded in fields in the packet. Or, they may have other undesirable ways of acting on the multiparty content. The fallback method is called the mixing procedure for multiparty-unaware endpoints. The fallback method is naturally not expected to meet all performance requirements placed on the mixing procedure for multiparty-aware endpoints. 
      </t>

            <t>
            This document updates <xref target="RFC4103" format="default"/> by introducing an attribute for declaring support of the RTP-mixer-based
multiparty-mixing case and rules for source indications and interleaving of text from different sources.
            </t>
                    <section numbered="true" toc="default">
      <name>Terminology</name>
       <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
       "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>",
       "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>",
       "<bcp14>SHOULD NOT</bcp14>",
       "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
       "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document
       are to be interpreted as described in BCP&nbsp;14
       <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only
       when, they appear in all capitals, as shown here.</t>

      <t>
         The terms "Source Description" (SDES), "Canonical Name" (CNAME), "Name" (NAME), "Synchronization Source" (SSRC), "Contributing Source" (CSRC), "CSRC list", "CSRC count" (CC), "RTP Control Protocol" (RTCP), and "RTP mixer" are defined in <xref target="RFC3550" format="default"/>.
      </t>
	  <t> "real-time text" (RTT) is text transmitted instantly as it is typed or created. Recipients can immediately read the message while it is being written, without waiting.
	  </t>
      <t>
         The term "T140block" is defined in <xref target="RFC4103" format="default"/>  to contain one or more T.140 code elements.
      </t>
      <t>
        "TTY" stands for a textphone type used in North America.
      </t>
      <t>
      Web Real-Time Communication (WebRTC) is specified by the World Wide Web Consortium (W3C) and the IETF. See <xref target="RFC8825" format="default"/>.
      </t>
      <t>
        "DTLS-SRTP" is a Datagram Transport Layer Security (DTLS) extension for use with the Secure Real-time Transport Protocol / Secure Real-time Transport Control Protocol (SRTP/SRTCP) as specified in <xref target="RFC5764" format="default"/>.
      </t>
          <t>
           The term "multiparty aware" describes an endpoint that (1) receives
real-time text from multiple sources through a common conference
 mixer, (2) is able to present the text in real time, separated by
 source, and (3) presents the text so that a user can get an
 impression of the approximate relative timing of text from
 different parties. 
          </t>
          <t>
          The term "multiparty unaware" describes an endpoint that cannot itself separate text from different sources when the text is received through a common conference mixer. 
          </t>

    </section>

        <section anchor="alternatives" numbered="true" toc="default">
                <name>Main Method, Fallback Method, and Considered
       Alternatives</name>
                <t>
    A number of alternatives were considered when searching for an efficient and easily implemented multiparty method for real-time text. This section briefly explains a few of them.
    </t>
<dl newline="true">
  <dt>
  Multiple RTP streams, one per participant:
  </dt>

<dd>
One RTP stream per source would be sent in the same RTP session with the "text/red" format.
   From some points of view, the use of multiple RTP streams, one for each source, sent in the same RTP session would be efficient and would use exactly the same packet format as <xref target="RFC4103" format="default"/> and the same payload type.
   A couple of relevant scenarios using multiple RTP streams are specified in
"<xref target="RFC7667" format="title"/>" <xref target="RFC7667" format="default"/>. One possibility of special interest is the Selective Forwarding Middlebox (SFM) topology specified in 
<xref target="RFC7667" sectionFormat="of" section="3.7"/>,
which could enable end-to-end encryption. In contrast to audio and video, real-time text is only transmitted when the users actually transmit information. Thus, an SFM solution would not need to exclude any party from transmission under normal conditions. In order to allow the mixer to convey the packets with the payload preserved and encrypted, an SFM solution would need to act on some specific characteristics of the "text/red" format. The redundancy headers are part of the payload, so the receiver would need to just assume that the payload type number in the redundancy header is for "text/t140". The characters per second ("cps") parameter would need to act per stream. The relationship between the SSRC and the source would need to be conveyed in some specified way, e.g., in the CSRC. Recovery and loss detection would preferably be based on RTP sequence number gap detection. Thus, sequence number gaps in the incoming stream to the mixer would need to be reflected in the stream to the participant, with no new gaps created by the mixer.    
   However, the RTP implementation in both mixers and endpoints needs to support multiple streams in the same RTP session in order to use this mechanism. To provide the best opportunities for deployment, it should be possible to upgrade existing endpoint solutions to be multiparty aware with a reasonable amount of effort. There is currently a lack of support for multi-stream RTP in certain implementations. This fact led to only brief mention of this solution in this document as an option for further study. 
 </dd>
 <dt>
   RTP-mixer-based method for multiparty-aware endpoints:
 </dt>
 <dd>
 The "text/red" format as defined in RFC 4102 and applied in RFC 4103 is sent with the RTP-mixer method indicating the source in the CSRC field.
 The "text/red" format with a "text/t140" payload in a single RTP stream can be sent when text is available from the call participants instead of at the regular 300 ms intervals. Transmission of packets with text from different sources can then be done smoothly while simultaneous transmission occurs as long as it is not limited by the maximum character rate "cps" value. With ten participants sending text simultaneously, the switching and transmission performance is good. With more simultaneously sending participants and with receivers at default capacity, there will be a noticeable jerkiness and delay in text presentation. The more participants who send text
simultaneously, the more jerkiness will occur. Two seconds of jerkiness will be noticeable and slightly unpleasant, but it corresponds in time to what typing humans often cause by hesitating or changing position while typing. A benefit of this method is that no new packet format needs to be introduced and implemented. Since simultaneous typing by more than two parties is expected to be very rare -- as described in <xref target="intendedapp" format="default"/> -- this method can be used successfully with good performance. Recovery of text in the case of packet loss is based on analysis of timestamps of received redundancy versus earlier received text. Negotiation is based on a new SDP media attribute, "rtt-mixer". This method was selected to be the main method specified in this document.

 </dd>
    <dt>Multiple sources per packet:</dt>
    <dd>
        A new "text" media subtype would be specified with up to 15 sources in each packet. 
   The mechanism would make use of the RTP-mixer model specified in RTP <xref target="RFC3550" format="default"/>. The sources would be indicated in strict order in the CSRC list of the RTP packets. The CSRC list can have up to 15 members. Therefore, text from up to 15 sources can be included in each packet. Packets are normally sent at 300 ms intervals. The mean delay would be 150 ms. A new redundancy packet format would be specified. This method would result in good performance but would require standardization and implementation of new releases in the target technologies; these would take more time than desirable to complete. It was therefore not selected to be included in this document.
</dd>
<dt>Mixing for multiparty-unaware endpoints:</dt>
<dd>
The presentation of text from multiple parties is prepared by the mixer in one single stream. 
  It is desirable to have a method that does not require any modifications in existing user devices implementing RFC 4103 for real-time text without explicit support of multiparty sessions. This is made possible by having the mixer insert a new line and a
text-formatted source label before each switch of text source in the stream. Switching the source can only be done in places in the text where it does not disturb the perception of the contents. Text from only one source at a time can be presented in real time. The delay will therefore vary. In calls where parties take turns properly by ending their entries with a new line, the limitations will have limited influence on the user experience. When only two parties send text, these two will see the text in real time with no delay. Although this method also has other limitations, it is included in this document as a fallback method.
</dd>
<dt>
  Real-time text transport in WebRTC:
</dt>
<dd>
<xref target="RFC8865" format="default"/> specifies how the WebRTC data channel can be used to transport real-time text. That specification contains a section briefly describing its use in multiparty sessions. The focus of this document is RTP transport. Therefore, even if the WebRTC transport provides good multiparty performance, it is only mentioned in this document in relation to providing gateways with multiparty capabilities between RTP and WebRTC technologies.
</dd>
</dl>

    </section>


    <section anchor="intendedapp" numbered="true" toc="default">
      <name>Intended Application</name>
      <t>
        The method for multiparty real-time text specified in this document is primarily intended for use in transmissions between mixers and endpoints in centralized mixing configurations. It is also applicable between mixers. An
often-mentioned application is for emergency service calls with real-time text and voice, where a call taker wants to make an attended handover of a call to another agent and stay on the call to observe the session. Multimedia conference sessions with support for participants to contribute with text is another example.  Conferences with central support for speech-to-text conversion represent yet another example.
        </t>
        <t>
          In all these applications, normally only one participant at a time will send long text comments. In some cases, one other participant will occasionally contribute with a longer comment simultaneously. That may also happen in some rare cases when text is translated to text in another language in a conference. Apart from these cases, other participants are only expected to contribute with very brief comments while others are sending text.
        </t>
                <t>
                Users expect the text they send to be presented in real time in a readable way to the other participants even if they send simultaneously with other users and even when they make brief edit operations of their text by backspacing and correcting their text.   
                </t>
        <t>
          Text is supposed to be human generated, by some means of text input, such as typing on a keyboard or using speech-to-text technology. Occasional small cut-and-paste operations may appear even if that is not the initial purpose of real-time text.
        </t>
        <t>
          The real-time characteristics of real-time text are essential for the participants to be able to contribute to a conversation. If the text is delayed too much between the typing of a character and its presentation, then, in some conference situations, the opportunity to comment will be gone and someone else will grab the turn. A delay of more than one second in such situations is an obstacle to good conversation.
        </t>

    </section>
</section>
<section numbered="true" toc="default">
  <name>Overview of the Two Specified Solutions and Selection of Method</name>
  <t>
  This section contains a brief introduction of the two methods specified in this document. 
  </t>
  <section anchor="negouse" numbered="true" toc="default">
    <name>The RTP-Mixer-Based Solution for Multiparty-Aware Endpoints</name>
    <t>
        This method specifies the negotiated use of the formats described in RFC 4103, for multiparty transmissions in a single RTP stream. 
The main purpose of this document is to specify a method for true multiparty real-time text mixing for multiparty-aware endpoints that can be widely deployed. The RTP-mixer-based method makes use of the current format for real-time text as provided in <xref target="RFC4103" format="default"/>. This method updates RFC 4103 by clarifying one way to use it in the multiparty situation. That is done by completing a negotiation for this kind of multiparty capability and by interleaving packets from different sources. The source is indicated in the CSRC element in the RTP packets. Specific considerations are made regarding the ability to recover text after packet loss. 
</t>
<t>
The detailed procedures for the RTP-mixer-based multiparty-aware case are specified in <xref target="nego2" format="default"/>.
</t>
<t>
   Please refer to <xref target="RFC4103" format="default"/> when reading this document.
    </t>
  </section>
  <section numbered="true" toc="default">
    <name>Mixing for Multiparty-Unaware Endpoints</name>
<t>
  This document also specifies a method to be used in cases when the endpoint participating in a multiparty call does not itself implement any solution or does not implement the same solution as the mixer.
 This method requires the mixer to insert text dividers and readable
    labels and only send text from one source at a time until a suitable point appears for changing the source.
    This solution is a fallback method with functional limitations. It operates at the presentation level.
</t>
<t>
A mixer <bcp14>SHOULD</bcp14> by default format and transmit text to a call
 participant so that the text is suitable for presentation on a
 multiparty-unaware endpoint that has not negotiated any method for
 true multiparty real-time text handling but has negotiated a "text/red" or
 "text/t140" format in a session.
 This <bcp14>SHOULD</bcp14> be done if nothing else is specified for the application, in order to maintain interoperability. <xref target="UnawareFormat" format="default"/> specifies how this mixing is done. 
</t>
</section>

    <section anchor="nego1" numbered="true" toc="default">
        <name>Offer/Answer Considerations</name>
      <t>
"RTP Payload for Text Conversation" <xref target="RFC4103" format="default"/> specifies the use of RTP <xref target="RFC3550" format="default"/> and a redundancy format ("text/red", as defined in <xref target="RFC4102" format="default"/>) for increased robustness of real-time text transmission.
This document updates <xref target="RFC4103" format="default"/>
by introducing a capability negotiation for handling multiparty real-time text, a way to indicate the source of transmitted text, and rules for efficient timing of the transmissions interleaved from different sources. 
</t>
<t>
The capability negotiation for the RTP-mixer-based multiparty method is based on the use of the SDP media attribute "rtt-mixer".
</t>

  <t>The syntax is as follows:</t>
<sourcecode name="" type="sdp"><![CDATA[
   a=rtt-mixer
]]></sourcecode>

<t>
If in the future any other method for RTP-based multiparty real-time text is specified by additional work, it is assumed that it will be recognized by some specific SDP feature exchange.
</t>
<section numbered="true" toc="default">
  <name>Initial Offer</name>
<t>
A party that intends to set up a session and is willing to use the RTP-mixer-based method provided in this specification for sending, receiving, or both sending and receiving real-time text <bcp14>SHALL</bcp14> include the "rtt-mixer" SDP attribute in the corresponding "text" media section in the initial offer.
</t>
<t> 
The party <bcp14>MAY</bcp14> indicate its capability regarding both the RTP-mixer-based method provided in this specification and other methods.
</t>
<t>
When the offerer has sent the offer, which includes the "rtt-mixer" attribute, it <bcp14>MUST</bcp14> be prepared to receive and handle real-time text formatted according to both the method for multiparty-aware parties specified in <xref target="nego2" format="default"/> and two-party formatted real-time text.
</t>
</section>
<section numbered="true" toc="default">
  <name>Answering the Offer</name>
  <t>
  A party that receives an offer containing the "rtt-mixer" SDP attribute and is willing to use the RTP-mixer-based method provided in this specification for sending, receiving, or both sending and receiving real-time text <bcp14>SHALL</bcp14> include the "rtt-mixer" SDP attribute in the corresponding "text" media section in the answer.
  </t>
  <t>
  If the offer did not contain the "rtt-mixer" attribute, the answer <bcp14>MUST NOT</bcp14> contain the "rtt-mixer" attribute.
  </t>
  <t>
  Even when the "rtt-mixer" attribute is successfully negotiated, the parties <bcp14>MAY</bcp14> send and receive two-party coded real-time text. 
  </t>
  <t>
  An answer <bcp14>MUST NOT</bcp14> include acceptance of more than one method for multiparty real-time text in the same RTP session. 
  </t>
  <t>
  When the answer, which includes acceptance, is transmitted, the answerer <bcp14>MUST</bcp14> be prepared to act on received text in the negotiated session according to the method for multiparty-aware parties specified in <xref target="nego2" format="default"/>. Reception of text for a two-party session <bcp14>SHALL</bcp14> also be supported. 
</t>
  </section>
  <section numbered="true" toc="default">
  <name>Offerer Processing the Answer</name>
    <t>
        When the answer is processed by the offerer, the offerer <bcp14>MUST</bcp14> follow the requirements listed in <xref target="negoresult" format="default"/>.
  </t>
  </section>
  <section numbered="true" toc="default">
  <name>Modifying a Session</name>
    <t>
        A session <bcp14>MAY</bcp14> be modified at any time by any party offering a modified SDP with or without the "rtt-mixer" SDP attribute expressing a desired change in the support of multiparty real-time text. 
  </t>
  <t>
  If the modified offer adds the indication of support for multiparty real-time text by including the "rtt-mixer" SDP attribute, the procedures specified in the previous subsections <bcp14>SHALL</bcp14> be applied. 
  </t>
  <t>
  If the modified offer deletes the indication of support for multiparty real-time text by excluding the "rtt-mixer" SDP attribute, the answer <bcp14>MUST NOT</bcp14> contain the "rtt-mixer" attribute. After processing this SDP exchange, the parties <bcp14>MUST NOT</bcp14> send real-time text formatted for multiparty-aware parties according to this specification.
  </t>
  
  </section>
  
</section>

<section anchor="negoresult" numbered="true" toc="default">
  <name>Actions Depending on Capability Negotiation Result</name>

<t>
  A transmitting party <bcp14>SHALL</bcp14> send text according to the RTP-mixer-based multiparty method only when the negotiation for that method was successful and when it conveys text for another source. In all other cases, the packets <bcp14>SHALL</bcp14> be populated and interpreted as for a two-party session.
</t>
      <t>
  A party that has negotiated the "rtt-mixer" SDP media attribute and acts as an RTP mixer sending multiparty text <bcp14>MUST</bcp14> (1) populate the CSRC list and (2) format the packets according to <xref target="nego2" format="default"/>.
  </t>
      <t>
  A party that has negotiated the "rtt-mixer" SDP media attribute <bcp14>MUST</bcp14> interpret the contents of the CC field, the CSRC list, and the packets according to <xref target="nego2" format="default"/> in received RTP packets in the corresponding RTP stream.
  </t>
          <t>
          A party that has not successfully completed the negotiation of the "rtt-mixer" SDP media attribute <bcp14>MUST NOT</bcp14> transmit packets interleaved from different sources in the same RTP stream, as specified in <xref target="nego2" format="default"/>. 
          If the party is a mixer and did declare the "rtt-mixer" SDP media attribute, it <bcp14>SHOULD</bcp14> perform the procedure for multiparty-unaware endpoints. If the party is not a mixer, it <bcp14>SHOULD</bcp14> transmit as in a two-party session according to <xref target="RFC4103" format="default"/>.
          </t>
    </section>
</section>
<section anchor="nego2" numbered="true" toc="default">
  <name>Details for the RTP-Mixer-Based Mixing Method for Multiparty-Aware Endpoints</name>
    <section numbered="true" toc="default">
      <name>Use of Fields in the RTP Packets</name>
<t>
The CC field <bcp14>SHALL</bcp14> show the number of members in the CSRC list, which <bcp14>SHALL</bcp14> be one (1) in transmissions from a mixer  when conveying text from other sources in a multiparty session, and otherwise 0.
</t>
      <t>
When text is conveyed by a mixer during a multiparty session, a CSRC list <bcp14>SHALL</bcp14> be included in the packet. The single member in the CSRC list <bcp14>SHALL</bcp14> contain the SSRC of the source of the T140blocks in the packet.
</t>
<t>
 When redundancy is used, the <bcp14>RECOMMENDED</bcp14> level of redundancy is to use one primary and two redundant generations of T140blocks. In some cases, a primary or redundant T140block is empty but is still represented by a member in the redundancy header.
</t>
<t>
  In other respects, the contents of the RTP packets will be as specified in <xref target="RFC4103" format="default"/>.
</t>

    </section>
    <section numbered="true" toc="default">
      <name>Initial Transmission of a BOM Character</name>
      <t>
      As soon as a participant is known to participate in a session with another entity and is available for text reception, a Unicode byte order mark (BOM) character <bcp14>SHALL</bcp14> be sent to it by the other entity according to the procedures in this section. This is useful in many configurations for opening ports and firewalls and for setting up the connection between the application and the network. If the transmitter is a mixer, then the source of this character <bcp14>SHALL</bcp14> be indicated to be the mixer itself.
                  </t>
            <t>
              Note that the BOM character <bcp14>SHALL</bcp14> be transmitted with the same redundancy procedures as any other text.
            </t>
          </section>
          <section numbered="true" toc="default"><name>Keep-Alive</name>
                  <t>
      After that, the transmitter <bcp14>SHALL</bcp14> send keep-alive traffic to the receiver(s) at regular intervals when no other traffic has occurred during that interval, if that is decided upon for the actual connection. It is <bcp14>RECOMMENDED</bcp14> to use the keep-alive solution provided in <xref target="RFC6263" format="default"/>. The consent check <xref target="RFC7675" format="default"/> is a possible alternative if it is used anyway for other reasons.
                  </t>
          </section>
          <section numbered="true" anchor="transmint" toc="default"><name>Transmission Interval</name>
            <t>
      A "text/red" or "text/t140" transmitter in a mixer <bcp14>SHALL</bcp14> send packets distributed over time as long as there is something (new or redundant T140blocks) to transmit.
  The maximum transmission interval between text transmissions from the same source <bcp14>SHALL</bcp14> then be 330 ms, when no other limitations cause a longer interval to be temporarily used. It is <bcp14>RECOMMENDED</bcp14> to send the next packet to a receiver as soon as new text to that receiver is available, as long as the mean character rate of new text to the receiver calculated over the last 10 one-second intervals does not exceed the "cps" value of the receiver. The intention is to keep the latency low and network load limited while keeping good protection against text loss in bursty packet loss conditions. The main purpose of the 330 ms interval is for the timing of redundant transmissions, when no new text from the same source is available.
    </t>
        <t>
        The value of 330 ms is used, because many sources of text will
   transmit new text at 300 ms intervals during periods of 
   continuous user typing, and then reception in the mixer of such new
   text will cause a combined transmission of the new text and the 
   unsent redundancy from the previous transmission. Only when the user 
   stops typing will the 330 ms interval be applied to send the 
   redundancy.
        </t>
        <t>
        If the characters per second ("cps") value is reached, a longer transmission interval <bcp14>SHALL</bcp14> be applied for text from all sources as specified in  <xref target="RFC4103" format="default"/> and only as much of the text queued for transmission <bcp14>SHALL</bcp14> be sent at the end of each transmission interval as can be allowed without exceeding the "cps" value. Division of text for partial transmission <bcp14>MUST</bcp14> then be made at T140block borders. When the transmission rate falls below the "cps" value again, 
   the transmission intervals <bcp14>SHALL</bcp14> be reset to 330 ms and transmission of new text <bcp14>SHALL</bcp14> again be made as soon as new 
   text is available.
   </t>

   <aside><t>NOTE: Extending the transmission intervals during periods of high load 
   does not change the number of characters to be conveyed. 
   It just evens out the load over time and reduces the number of packets 
   per second. With human-created conversational text, the sending 
   user will eventually take a pause, letting transmission catch up.</t></aside>
<t>
   See also <xref target="congest" format="default"/>.
        </t>
        <t>
        For a transmitter not acting as a mixer, the transmission interval principles provided in <xref target="RFC4103" format="default"/> apply, and the normal transmission interval <bcp14>SHALL</bcp14> be 300 ms.
        </t>
  </section>
  <section numbered="true" toc="default"><name>Only One Source per Packet</name>
    <t> New text and redundant copies of earlier text from one source <bcp14>SHALL</bcp14> be transmitted in the same packet if available for transmission at the same time. Text from different sources <bcp14>MUST NOT</bcp14> be transmitted in the same packet.
                  </t>
          </section>
          <section numbered="true" toc="default"><name>Do Not Send Received Text to the Originating Source</name>
            <t>
              Text received by a mixer from a participant <bcp14>SHOULD NOT</bcp14> be included in transmissions from the mixer to that participant, because for text
 that is produced locally, the normal behavior of the endpoint is to
 present such text directly when it is produced.
            </t>
          </section>
            <section numbered="true" toc="default"><name>Clean Incoming Text</name>
            <t>
              A mixer <bcp14>SHALL</bcp14> handle reception, recovery from packet loss, deletion of superfluous redundancy, marking of possible text loss, and deletion of BOM characters from each participant before queueing received text for  transmission to receiving participants as specified in <xref target="RFC4103" format="default"/> for single-party sources and <xref target="reception" format="default"/> for multiparty sources (chained mixers).
            </t>
          </section>
          <section numbered="true" toc="default"><name>Principles of Redundant Transmission</name>
                  <t>
      A transmitting party using redundancy <bcp14>SHALL</bcp14> send redundant repetitions of T140blocks already transmitted in earlier packets.
    </t>
    <t> The number of redundant generations of T140blocks to include in transmitted packets <bcp14>SHALL</bcp14> be deduced from the SDP negotiation. It <bcp14>SHALL</bcp14> be set to the minimum of the number declared by the two parties negotiating a connection. It is <bcp14>RECOMMENDED</bcp14> to declare and transmit one original and two redundant generations of the T140blocks, because this provides good protection against text loss in the case of packet loss and also provides low overhead.
                  </t>
          </section>

          <section numbered="true" toc="default"><name>Text Placement in Packets</name>
                  <t>
                  The mixer <bcp14>SHALL</bcp14> compose and transmit an RTP packet to a receiver when one or more of the following conditions have occurred:</t>
                  <ul>
                        <li>The transmission interval is the normal 330 ms (no matter whether the transmission interval has passed or not), and there is newly received unsent text available for transmission to that receiver.</li>
                        <li>The current transmission interval has passed and is longer than the normal 330 ms, and there is newly received unsent text available for transmission to that receiver.</li>
                        <li>The current transmission interval (normally 330 ms) has passed since already-transmitted text was queued for transmission as redundant text.</li>
                        </ul>

                        <t>
                        The principles provided in <xref target="RFC4103" format="default"/> apply for populating the header, the redundancy header, and the 
data in the packet with specific information, as detailed here and in the following sections.
</t>
                  <t>
                    At the time of transmission, the mixer <bcp14>SHALL</bcp14> populate the RTP packet with all T140blocks queued for transmission originating from the source selected for transmission as long as this is not in conflict with the allowed number of characters per second ("cps") or the maximum packet size.
 In this way, the latency of the latest received text is kept low even in moments of simultaneous transmission from many sources.
      </t>
          <t>
          Redundant text <bcp14>SHALL</bcp14> also be included, and the assessment of how much new text can be included within the maximum packet size <bcp14>MUST</bcp14> take into account that the redundancy has priority to be transmitted in its entirety.  See <xref target="transmint" format="default"/>.
          </t>
          <t>
          The SSRC of the source <bcp14>SHALL</bcp14> be placed as the only member in the CSRC list.
          </t>
      <aside><t>
Note: The CSRC list in an RTP packet only includes the participant whose text is included in text blocks. It is not the same as the total list of participants in a conference. With audio and video media, the CSRC list would often contain all participants who are not muted, whereas text participants that don't type are completely silent and thus are not represented in RTP packet CSRC lists.
      </t></aside>
      </section>
     
          <section numbered="true" toc="default"><name>Empty T140blocks</name>
            <t>
      If no unsent T140blocks were available for a source at the time of populating a packet but already-transmitted T140blocks are available that have not yet been sent the full intended number of redundant transmissions, then the primary area in the packet is composed of an empty T140block and included (without taking up any length) in the packet for transmission. The corresponding SSRC <bcp14>SHALL</bcp14> be placed as usual in its place in the CSRC list.
      </t>
      <t>
        The first packet in the session, the first after a source switch, and the first after a pause <bcp14>SHALL</bcp14> be populated with the
        available T140blocks for the source selected to be sent as the primary, and empty T140blocks for the agreed-upon number of redundancy generations.
      </t>
      </section>
      <section anchor="redundancy" numbered="true" toc="default"><name>Creation of the Redundancy</name>
            <t>
      The primary T140block from a source in the latest transmitted packet is saved for populating the first redundant T140block for that source in the next transmission of text from that source. The first redundant T140block for that source from the latest transmission is saved for populating the second redundant T140block in the next transmission of text from that source.
      </t>

            <t>
      Usually, this is the level of redundancy used. If a higher level of redundancy is negotiated, then the procedure <bcp14>SHALL</bcp14> be continued until all available redundant levels of T140blocks are placed in the packet. If a receiver has negotiated a lower number of "text/red" generations, then that level <bcp14>SHALL</bcp14> be the maximum used by the transmitter.
      </t>
           <t>
          The T140blocks saved for transmission as redundant data are assigned a planned transmission time of 330 ms after the current time but <bcp14>SHOULD</bcp14> be transmitted earlier if new text for the same source gets selected for transmission before that time.  
          </t>
      </section>
      <section numbered="true" toc="default"><name>Timer Offset Fields</name>
            <t>
      The timestamp offset values <bcp14>SHALL</bcp14> be inserted in the redundancy header, with the time offset from the RTP timestamp in the packet when the corresponding T140block was sent as the primary.
      </t>
      <t>
        The timestamp offsets are expressed in the same clock tick units as the RTP timestamp.
      </t>
      <t>
        The timestamp offset values for empty T140blocks have no relevance but <bcp14>SHOULD</bcp14> be assigned realistic values.
      </t>
      </section>
      <section numbered="true" toc="default"><name>Other RTP Header Fields</name>
            <t>
      The number of members in the CSRC list (0 or 1) <bcp14>SHALL</bcp14> be placed in the CC header field. Only mixers place value 1 in the CC field. A value of 0 indicates that the source is the transmitting device itself and that the source is indicated by the SSRC field. This value is used by endpoints and also by mixers sending self-sourced data.
      </t>
      <t>
                The current time <bcp14>SHALL</bcp14> be inserted in the timestamp.
      </t>
      <t>
        The SSRC header field <bcp14>SHALL</bcp14> contain the SSRC of the RTP session where the packet will be transmitted.
      </t>
      <t>
        The M-bit <bcp14>SHALL</bcp14> be handled as specified in <xref target="RFC4103" format="default"/>.
      </t>
      </section>
      <section numbered="true" toc="default"><name>Pause in Transmission</name>
            <t>
      When there is no new T140block to transmit and no redundant T140block that has not been retransmitted the intended number of times from any source, the transmission process <bcp14>SHALL</bcp14> be stopped until either new T140blocks arrive or a keep-alive method calls for transmission of keep-alive packets.
            </t>
          </section>
          <section numbered="true" toc="default">
            <name>RTCP Considerations</name>
            <t>
      A mixer <bcp14>SHALL</bcp14> send RTCP reports with SDES, CNAME, and NAME information about the sources in the multiparty call. This makes it possible for participants to compose a suitable label for text from each source.
            </t>
            <t>
              Privacy considerations <bcp14>SHALL</bcp14> be taken when composing these fields. They contain name and address information that may be considered
sensitive if the information is transmitted in its entirety, e.g., to unauthenticated participants.
            </t>
          </section>
    <section anchor="reception" numbered="true" toc="default">
      <name>Reception of Multiparty Contents</name>
      <t>

The "text/red" receiver included in an endpoint with presentation functions will receive RTP packets in the single stream from the mixer and <bcp14>SHALL</bcp14> distribute the T140blocks for presentation in presentation areas for each source. Other receiver roles, such as gateways or chained mixers, are also feasible.
Whether the stream will only be forwarded or will be distributed based on the different sources must be taken into consideration.
</t>
<section numbered="true" toc="default"><name>Acting on the Source of the Packet Contents</name>
      <t>
If the CC field value of a received packet is 1, it indicates that
   the text is conveyed from a source indicated in the single member in the CSRC list, and the receiver <bcp14>MUST</bcp14> act on the source according to its role. If the CC value is 0, the source is indicated in the SSRC field.

</t>
</section>
<section numbered="true" toc="default"><name>Detection and Indication of Possible Text Loss</name>

      <t>
The receiver <bcp14>SHALL</bcp14> monitor the RTP sequence numbers of the received packets for gaps and for packets received out of order.
If a sequence number gap appears and still exists after some defined short time for jitter and reordering resolution, the packets in the gap <bcp14>SHALL</bcp14> be regarded as lost.
</t>
<t>
If it is known that only one source is active in the RTP session, then it is likely that a gap equal to or larger than the agreed-upon number of redundancy generations (including the primary) causes text loss. In that case, the receiver <bcp14>SHALL</bcp14> create a T140block with a marker for possible text loss <xref target="T140ad1" format="default"/>, associate it with the source, and insert it in the reception buffer for that source.
</t>
<t>
If it is known that more than one source is active in the RTP session, then it is not possible in general to evaluate if text was lost when packets were lost. With two active sources and the recommended number of redundancy generations (one original and two redundant), it can take a gap of five consecutive lost packets before any text may be lost, but text loss can also appear if three non-consecutive packets are lost when they contained consecutive data from the same source. A simple method for deciding when there is a risk of resulting text loss is to evaluate if three or more packets were lost within one second. If this simple method is used, then a T140block <bcp14>SHOULD</bcp14> be created with a marker for possible text loss <xref target="T140ad1" format="default"/> and associated with the SSRC of the RTP session as a general input from the mixer.  
</t>
<t>
Implementations <bcp14>MAY</bcp14> apply more refined methods for more reliable detection of whether text was lost or not. Any refined method <bcp14>SHOULD</bcp14> prefer marking possible loss rather than not marking when it is uncertain if there was loss.
</t>
</section>
<section numbered="true" toc="default"><name>Extracting Text and Handling Recovery</name>
<t>
When applying the following procedures, the effects of possible timestamp wraparound and the RTP session possibly changing the SSRC <bcp14>MUST</bcp14> be considered.
</t>
<t>
When a packet is received in an RTP session using the packetization for multiparty-aware endpoints, its T140blocks <bcp14>SHALL</bcp14> be extracted as described below.
</t>

<t>
The source <bcp14>SHALL</bcp14> be extracted from the CSRC list if available, and otherwise from the SSRC.
</t>

<t>
If the received packet is the first packet received from the source, then all T140blocks in the packet <bcp14>SHALL</bcp14> be retrieved and assigned to a receive buffer for that source, beginning with the oldest available redundant generation, continuing with the younger redundant generations in age order, and finally ending with the primary.
</t>
<aside><t>
Note: The normal case is that in the first packet, only the primary data has contents. The redundant data has contents in the first received packet from a source only after initial packet loss.
</t></aside>
<t>
If the packet is not the first packet from a source, then if redundant
   data is available, the process <bcp14>SHALL</bcp14> start with the oldest generation.
   The timestamp of that redundant data <bcp14>SHALL</bcp14> be
   created by subtracting its timestamp offset from the RTP timestamp.
   If the resulting timestamp is later than the latest retrieved data
   from the same source, then the redundant data <bcp14>SHALL</bcp14> be retrieved and
   appended to the receive buffer. The process <bcp14>SHALL</bcp14> be continued in
   the same way for all younger generations of redundant data.  After that,
   the timestamp of the packet <bcp14>SHALL</bcp14> be compared with the timestamp of
   the latest retrieved data from the same source and if it is later,
   then the primary data <bcp14>SHALL</bcp14> be retrieved from the packet and appended
   to the receive buffer for the source.     
</t>
</section>
<section numbered="true" toc="default"><name>Delete BOM</name>
      <t>
The Unicode BOM character is used as a start indication and is sometimes used as a filler or keep-alive by transmission implementations. Any BOM characters <bcp14>SHALL</bcp14> be deleted after extraction from received packets.
</t>
</section>

  </section>
  <section anchor="perf" numbered="true" toc="default">
    <name>Performance Considerations</name>
    <t>
      This solution has good performance with low text delays, as long as the mean number of characters per second sent during any 10-second interval from a number of simultaneously sending participants to a receiving participant does not reach the "cps" value. At higher numbers of sent characters per second, a jerkiness is visible in the presentation of text. The solution is therefore suitable for emergency service use, relay service use, and small or well-managed larger multimedia conferences.  In large unmanaged conferences with a high number of participants only, on very rare occasions, situations might arise where many participants happen to send text simultaneously. In such circumstances, the result may be unpleasantly jerky presentation of text from each sending participant. It should be noted that it is only the number of users sending text within the same moment that causes jerkiness, not the total number of users with real-time text capability.
    </t>
  </section>

  <section anchor="security2" numbered="true" toc="default">
    <name>Security for Session Control and Media</name>
  <t>

  Security mechanisms to provide confidentiality,
integrity protection, and peer authentication <bcp14>SHOULD</bcp14> be applied when possible regarding the capabilities of the participating devices by using the Session Initiation Protocol (SIP) over TLS by default according to <xref target="RFC5630" sectionFormat="of" section="3.1.3"/>
on the session control level and by default using DTLS-SRTP <xref target="RFC5764" format="default"/> at the media level. In applications where legacy endpoints without security are allowed, a negotiation <bcp14>SHOULD</bcp14> be performed to decide if encryption at the media level will be applied. If no other security solution is mandated for the application, then the Opportunistic Secure Real-time Transport Protocol (OSRTP) <xref target="RFC8643" format="default"/> is a suitable method to be applied to negotiate SRTP media security with DTLS. For simplicity, most SDP examples below are expressed without the security additions. The principles (but not all details) for applying DTLS-SRTP security <xref target="RFC5764" format="default"/> are shown in a couple of the following examples.

  </t>
  <t>
  Further general security considerations are covered in <xref target="Security"/>.
  </t>
  <t>
  End-to-end encryption would require further work and could be based on WebRTC as specified in <xref target="alternatives"/> or on double encryption as specified in <xref target="RFC8723" format="default"/>. 
  </t>
  </section>

  <section anchor="SDP-examples2" numbered="true" toc="default">
    <name>SDP Offer/Answer Examples</name>
    <t>
      This section shows some examples of SDP for session negotiation of the real-time text media in SIP sessions. Audio is usually provided in the same session, and sometimes also video. The examples only show the part of importance for the real-time text media. The examples relate to the single RTP stream mixing for multiparty-aware endpoints and for multiparty-unaware endpoints. 
          </t>
<aside><t>
Note: Multiparty real-time text <bcp14>MAY</bcp14> also be provided through other methods, e.g., by a Selective Forwarding Middlebox (SFM). In that case, the
   SDP of the offer will include something specific for that method, e.g., an SDP attribute or another media format. An answer selecting the use of that method would accept it via a corresponding acknowledgement included in the SDP. The offer may also contain the "rtt-mixer" SDP media attribute for the main real-time text media when the offerer has this capability for both multiparty methods, while an answer, choosing to use SFM, will not include the "rtt-mixer" SDP media attribute.  
</t></aside>
<t>Offer example for the "text/red" format, multiparty support, and capability for 90 characters per second:</t>
    
<sourcecode name="" type="sdp"><![CDATA[
   m=text 11000 RTP/AVP 100 98
   a=rtpmap:98 t140/1000
   a=fmtp:98 cps=90
   a=rtpmap:100 red/1000
   a=fmtp:100 98/98/98
   a=rtt-mixer
]]></sourcecode>

<t>Answer example from a multiparty-aware device:</t>
<sourcecode name="" type="sdp"><![CDATA[
   m=text 14000 RTP/AVP 100 98
   a=rtpmap:98 t140/1000
   a=fmtp:98 cps=90
   a=rtpmap:100 red/1000
   a=fmtp:100 98/98/98
   a=rtt-mixer
]]></sourcecode>

<t>Offer example for the "text/red" format, including multiparty and security:</t>
<sourcecode name="" type="sdp"><![CDATA[
   a=fingerprint: (fingerprint1)
   m=text 11000 RTP/AVP 100 98
   a=rtpmap:98 t140/1000
   a=rtpmap:100 red/1000
   a=fmtp:100 98/98/98
   a=rtt-mixer
]]></sourcecode>
   <t>The "fingerprint" is sufficient to offer DTLS-SRTP, with the media line still indicating RTP/AVP.
   </t>
   <aside><t>
    Note: For brevity, the entire value of the SDP "fingerprint" attribute
   is not shown in this and the following example.
   </t></aside>
  <t>Answer example from a multiparty-aware device with security:</t>
<sourcecode name="" type="sdp"><![CDATA[
   a=fingerprint: (fingerprint2)
   m=text 16000 RTP/AVP 100 98
   a=rtpmap:98 t140/1000
   a=rtpmap:100 red/1000
   a=fmtp:100 98/98/98
   a=rtt-mixer
]]></sourcecode>

    <t>
    With the "fingerprint", the device acknowledges the use of DTLS-SRTP.
    </t>

  <t>Answer example from a multiparty-unaware device that also
  does not support security:</t>
<sourcecode name="" type="sdp"><![CDATA[
   m=text 12000 RTP/AVP 100 98
   a=rtpmap:98 t140/1000
   a=rtpmap:100 red/1000
   a=fmtp:100 98/98/98
]]></sourcecode>

      </section>
      <section anchor="pseq" numbered="true" toc="default">
      <name>Packet Sequence Example from Interleaved Transmission</name>
        <t>

  This example shows a symbolic flow of packets from a mixer, including loss and recovery. The sequence includes interleaved transmission of text from two real-time text sources: A and B.
  P indicates primary data. &nbsp;R1 is the first redundant generation of data, and R2 is the second redundant generation of data. A1, B1, A2, etc. are text chunks (T140blocks) received from the respective sources and sent on to the receiver by the mixer. &nbsp;X indicates a dropped packet between the mixer and a receiver. The session is assumed to use the original and two redundant generations of real-time text.
  </t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  |-----------------------|
  |Seq no 101, Time=20400 |
  |CC=1                   |
  |CSRC list A            |
  |R2: A1, Offset=600     |
  |R1: A2, Offset=300     |
  |P:  A3                 |
  |-----------------------|
  ]]></artwork>
        <t>
  Assuming that earlier packets (with text A1 and A2) were received in sequence, text A3 is received from packet 101 and assigned to reception buffer A. The mixer is now assumed to have received initial text from source B 100 ms after packet 101 and will send that text. Transmission of A2 and A3 as redundancy is planned for 330 ms after packet 101 if no new text from A is ready to be sent before that.
  </t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   |-----------------------|
   |Seq no 102, Time=20500 |
   |CC=1                   |
   |CSRC list B            |
   |R2  Empty, Offset=600  |
   |R1: Empty, Offset=300  |
   |P:  B1                 |
   |-----------------------|
  ]]></artwork>

  <t indent="3">Packet 102 is received.</t>
  <t indent="3">B1 is retrieved from this packet. Redundant transmission of
  B1 is planned 330 ms after packet 102.</t>

        <artwork name="" type="" align="left" alt=""><![CDATA[
   X------------------------|
   X Seq no 103, Timer=20730|
   X CC=1                   |
   X CSRC list A            |
   X R2: A2, Offset=630     |
   X R1: A3, Offset=330     |
   X P:  Empty              |
   X------------------------|
  ]]></artwork>
  
  <t indent="3">Packet 103 is assumed to be lost due to network problems.</t>
  <t indent="3">It contains redundancy for A. Sending A3 as second-level 
  redundancy is planned for 330 ms after packet 103.</t>

        <artwork name="" type="" align="left" alt=""><![CDATA[
   X------------------------|
   X Seq no 104, Timer=20800|
   X CC=1                   |
   X CSRC list B            |
   X R2: Empty, Offset=600  |
   X R1: B1, Offset=300     |
   X P:  B2                 |
   X------------------------|
  ]]></artwork>

  <t indent="3">Packet 104 contains text from B, including new B2 and
  redundant B1. It is assumed dropped due to network
  problems.</t>
  <t indent="3">The mixer has A3 redundancy to send, but no new text
  appears from A, and therefore the redundancy is sent
  330 ms after the previous packet with text from A.</t>

        <artwork name="" type="" align="left" alt=""><![CDATA[
   |------------------------|
   | Seq no 105, Timer=21060|
   | CC=1                   |
   | CSRC list A            |
   | R2: A3, Offset=660     |
   | R1: Empty, Offset=330  |
   | P:  Empty              |
   |------------------------|
  ]]></artwork>

  <t indent="3">Packet 105 is received.</t>
  <t indent="3">A gap for lost packets 103 and 104 is detected.
  Assume that no other loss was detected during the last second. 
  It can then be concluded that nothing was totally lost.</t>
  
  <t indent="3">R2 is checked. Its original time was 21060-660=20400. 
  A packet with text from A was received with that 
  timestamp, so nothing needs to be recovered.</t>
  
  <t indent="3">B1 and B2 still need to be transmitted as redundancy.
  This is planned 330 ms after packet 104. That would be at 21130.</t>

        <artwork name="" type="" align="left" alt=""><![CDATA[
   |-----------------------|
   |Seq no 106, Timer=21130|
   |CC=1                   |
   |CSRC list B            |
   | R2: B1, Offset=630    |
   | R1: B2, Offset=330    |
   | P:  Empty             |
   |-----------------------|
  ]]></artwork>

  <t indent="3">Packet 106 is received.</t>
  <t indent="3">The second-level redundancy in packet 106 is B1 and has a timestamp offset of 630 ms.
The timestamp of packet 106 minus 630 is 20500, which is the timestamp of packet 102 that was received. So, B1 does not need to be retrieved.
The first-level redundancy in packet 106 has an offset of 330. The timestamp of packet 106 minus 330 is 20800. That is later than the latest received packet with source B. Therefore, B2 is retrieved and assigned to the input buffer for source B.   
No primary is available in packet 106.</t>
  <t indent="3">After this sequence, A3, B1, and B2 have been received. In this case, no text was lost.</t>

    </section>

<section numbered="true" toc="default">
  <name>Maximum Character Rate "cps" Setting</name>

          <t>
          The default maximum rate of reception of "text/t140" real-time text, as specified in <xref target="RFC4103" format="default"/>, is 30 characters per second. The actual rate is calculated without regard to any redundant text transmission and is, in the multiparty case, evaluated for all sources contributing to transmission to a receiver. The value <bcp14>MAY</bcp14> be modified in the "cps" parameter of the "fmtp" attribute for the "text/t140" format of the "text" media section. 
		  </t>
		  <t>
		  A mixer combining real-time text from a number of sources may occasionally have a higher combined flow of text coming from the sources. Endpoints <bcp14>SHOULD</bcp14> therefore include a suitable higher value for the "cps" parameter, corresponding to its real reception capability. The default "cps" value 30 can be assumed to be sufficient for small meetings and well-managed larger conferences with users only making manual text entry. A "cps" value of 90 can be assumed to be sufficient even for large unmanaged conferences and for cases when speech-to-text technologies are used for text entry. This is also a reachable performance for receivers in modern technologies, and 90 is therefore the <bcp14>RECOMMENDED</bcp14> "cps" value. See <xref target="RFC4103" format="default"/> for the format and use of the "cps" parameter. The same rules apply for the multiparty case.
          </t>
    </section>
  </section>

    <section numbered="true" toc="default">
      <name>Presentation-Level Considerations</name>
      <t>
"Protocol for multimedia application text conversation" <xref target="T140" format="default"/> provides the presentation-level requirements for RTP transport
as described in <xref target="RFC4103" format="default"/>. Functions for erasure and other formatting functions are specified in <xref target="T140" format="default"/>, which has the following general statement for the presentation:
</t>
<!-- DNE; verified -->
<blockquote>The display of text from the members of the conversation should be arranged so that the text from
each participant is clearly readable, and its source and the relative timing of entered text is visualized
in the display. Mechanisms for looking back in the contents from the current session should be
provided. The text should be displayed as soon as it is received.</blockquote>
      <t>
Strict application of <xref target="T140" format="default"/> is essential for the interoperability of real-time text implementations and to fulfill the intention that the session participants have the same information conveyed in the text contents of the conversation without necessarily having the exact same layout of the conversation.
</t>
      <t>
 <xref target="T140" format="default"/> specifies a set of presentation control codes (<xref target="act-tx-ctrl-codes"/>) to include in the stream. Some of them are optional. Implementations <bcp14>MUST</bcp14> ignore optional control codes that they do not support.
</t>
      <t>
There is no strict "message" concept in real-time text. The Unicode Line Separator character <bcp14>SHALL</bcp14> be used as a separator allowing a part of received text to be grouped in a presentation. The character combination "CRLF" may be used by other implementations as a replacement for the Line Separator. The "CRLF" combination <bcp14>SHALL</bcp14> be erased by just one erasing action, the same as the Line Separator. Presentation functions are allowed to group text for presentation in smaller groups than the Line Separators imply and present such groups with a source indication together with text groups from other sources (see the following presentation examples). Erasure has no specific limit by any delimiter in the text stream.
</t>
      <section numbered="true" toc="default">
        <name>Presentation by Multiparty-Aware Endpoints</name>
        <t>
A multiparty-aware receiving party presenting real-time text <bcp14>MUST</bcp14> separate text from different sources and present them in separate presentation fields.
The receiving party <bcp14>MAY</bcp14> separate the presentation of parts of text from a source in readable groups based on criteria other than a Line Separator and merge these groups in the presentation area when it benefits the user to most easily find and read text from the different participants. The criteria <bcp14>MAY</bcp14>, for example, be a received comma, a full stop, some other type of phrase delimiter, or a long pause.
</t>
        <t>
When text is received from multiple original sources, the presentation <bcp14>SHALL</bcp14> provide a view where text is added in multiple presentation fields.
</t>
        <t>
If the presentation presents text from different sources in one common area, the presenting endpoint <bcp14>SHOULD</bcp14> insert text from the local user, where the text ends at suitable points and is merged properly with received text to indicate the relative timing for when the text groups were completed.
 In this presentation mode, the receiving endpoint <bcp14>SHALL</bcp14> present the source of the different groups of text. This presentation style is called the "chat" style here and provides the possibility of following text arriving from multiple parties and the approximate relative time that text is received as related to text from the local user. 
</t>
        <t>A view of a three-party real-time text call in chat style is shown in this example.</t>
         <figure anchor="fig1" title="Example of a Three-Party Real-Time Text Call Presented in Chat Style Seen at Participant Alice's Endpoint">
          <artwork name="" type="" align="left" alt=""><![CDATA[
          _________________________________________________
         |                                              |^|
         |[Alice] Hi, Alice here.                       |-|
         |                                              | |
         |[Bob] Bob as well.                            | |
         |                                              | |
         |[Eve] Hi, this is Eve, calling from Paris.    | |
         |      I thought you should be here.           | |
         |                                              | |
         |[Alice] I am coming on Thursday, my           | |
         |      performance is not until Friday morning.| |
         |                                              | |
         |[Bob] And I on Wednesday evening.             | |
         |                                              | |
         |[Alice] Can we meet on Thursday evening?      | |
         |                                              | |
         |[Eve] Yes, definitely. How about 7pm.         | |
         |     at the entrance of the restaurant        | |
         |     Le Lion Blanc?                           | |
         |[Eve] we can have dinner and then take a walk |-|
         |______________________________________________|v|
         | <Eve-typing> But I need to be back to        |^|
         |    the hotel by 11 because I need            |-|
         |                                              | |
         | <Bob-typing> I wou                           |-|
         |______________________________________________|v|
         | of course, I underst                           |
         |________________________________________________|
]]></artwork>
         </figure>

        <t>Presentation styles other than the chat style <bcp14>MAY</bcp14> be arranged.
</t>
        <t><xref target="fig2"/> shows how a coordinated column view
        <bcp14>MAY</bcp14> be presented.</t>
        <figure anchor="fig2" title="An Example of a Coordinated Column View of a Three&nbhy;Party Session with Entries Ordered Vertically in Approximate Time Order">
        <artwork name="" type="" align="left" alt=""><![CDATA[
_____________________________________________________________________
|       Bob          |       Eve            |       Alice           |
|____________________|______________________|_______________________|
|                    |                      |I will arrive by TGV.  |
|My flight is to Orly|                      |Convenient to the main |
|                    |Hi all, can we plan   |station.               |
|                    |for the seminar?      |                       |
|Eve, will you do    |                      |                       |
|your presentation on|                      |                       |
|Friday?             |Yes, Friday at 10.    |                       |
|Fine, wo            |                      |We need to meet befo   |
|___________________________________________________________________|
]]></artwork>
        </figure>
      </section>
      <section anchor="UnawareFormat" numbered="true" toc="default">
        <name>Multiparty Mixing for Multiparty-Unaware Endpoints</name>
        <t>
    When the mixer has indicated multiparty real-time text capability in an SDP negotiation but the multiparty capability negotiation fails with an endpoint, the agreed-upon "text/red" or "text/t140" format <bcp14>SHALL</bcp14> be used and the mixer <bcp14>SHOULD</bcp14> compose a best-effort presentation of multiparty real-time text in one stream intended to be presented by an endpoint with no multiparty awareness, when that is desired in the actual implementation. The following specifies a procedure that <bcp14>MAY</bcp14> be applied in that situation.
        </t>
        <t>
        This presentation format has functional limitations and <bcp14>SHOULD</bcp14> be used only to enable participation in multiparty calls by legacy deployed endpoints implementing only RFC 4103 without any multiparty extensions specified in this document.
        </t>
        <t>
        The principles and procedures below do not specify any new protocol elements. They are instead composed of information provided in <xref target="T140" format="default"/> and an ambition to provide a best-effort presentation on an endpoint that has functions originally intended only for two-party calls.
        </t>
        <t>
The mixer performing the mixing for multiparty-unaware endpoints <bcp14>SHALL</bcp14> compose a simulated, limited multiparty real-time text view suitable for presentation in one presentation area.
 The mixer <bcp14>SHALL</bcp14> group text in suitable groups and prepare them for presentation by inserting a Line Separator between them if the transmitted text did not already end with a new line (Line Separator or CRLF). A presentable label <bcp14>SHALL</bcp14> be composed and sent for the source initially in the session and after each source switch. With this procedure, the time for switching from transmission of text from one source to transmission of text from another source depends on the actions of the users. In order to expedite source switching, a user can, for example, end its turn with a new line.
        </t>
        <section numbered="true" toc="default">
          <name>Actions by the Mixer at Reception from the Call Participants</name>
          <t>
When text is received by the mixer from the different participants, the mixer <bcp14>SHALL</bcp14> recover text from redundancy if any packets are lost. The marker for lost text <xref target="T140ad1" format="default"/> <bcp14>SHALL</bcp14> be inserted in the stream if unrecoverable loss appears. Any Unicode BOM characters, possibly used for keep-alives, <bcp14>SHALL</bcp14> be deleted.
The time of creation of text (retrieved from the RTP timestamp) <bcp14>SHALL</bcp14> be stored together with the received text from each source in queues for transmission to the recipients in order to be able to evaluate text loss.
</t>
        </section>
        <section numbered="true" toc="default">
          <name>Actions by the Mixer for Transmission to the Recipients</name>
          <t>
The following procedure <bcp14>SHALL</bcp14> be applied for each multiparty-unaware recipient of multiparty text from the mixer.
</t>
          <t>
The text for transmission <bcp14>SHALL</bcp14> be formatted by the mixer for each receiving user for presentation in one single presentation area. Text received from a participant <bcp14>SHOULD NOT</bcp14> be included in transmissions to that participant, because it is usually presented locally at transmission time. When there is text available for transmission from the mixer to a receiving party from more than one participant, the mixer <bcp14>SHALL</bcp14> switch between transmission of text from the different sources at suitable points in the transmitted stream.
</t>
          <t>
When switching the source, the mixer <bcp14>SHALL</bcp14> insert a Line Separator if the already-transmitted text did not end with a new line (Line Separator or CRLF). A label <bcp14>SHALL</bcp14> be composed of information in the CNAME and NAME fields in RTCP reports from the participant to have its text transmitted, or from other session information for that user. The label <bcp14>SHALL</bcp14> be delimited by suitable characters (e.g., "[&nbsp;]") and transmitted. The CSRC <bcp14>SHALL</bcp14> indicate the selected source. Then, text from that selected participant <bcp14>SHALL</bcp14> be transmitted until a new suitable point for switching the source is reached.
</t>
<t>
  Information available to the mixer for composing the label may contain sensitive personal information that <bcp14>SHOULD NOT</bcp14> be revealed in sessions not securely authenticated and confidentiality protected. Privacy considerations regarding how much personal information is included in the label <bcp14>SHOULD</bcp14> therefore be taken when composing the label.
</t>
          <t>
Seeking a suitable point for switching the source <bcp14>SHALL</bcp14> be done when there is older text waiting for transmission from any party than the age of the last transmitted text.
Suitable points for switching are:</t>
          <ul>
            <li>A completed phrase ending with a comma.</li>
            <li>A completed sentence.</li>
            <li>A new line (Line Separator or CRLF).</li>
            <li>A long pause (e.g., &gt; 10 seconds) in received text from the currently transmitted source.</li>
            <li>If text from one participant has been transmitted with text from other sources waiting for transmission for a long time (e.g., &gt; 1 minute) and none of the other suitable points for switching has occurred, a source switch <bcp14>MAY</bcp14> be forced by the mixer at the next word delimiter, and also even if a word delimiter does not occur within some period of time (e.g., 15 seconds) after the scan for a word delimiter started.</li>
          </ul>
          <t>
When switching the source, the source that has the oldest text in queue <bcp14>SHALL</bcp14> be selected to be transmitted.
A character display count <bcp14>SHALL</bcp14> be maintained for the currently transmitted source, starting at zero after the label is transmitted for the currently transmitted source.
</t>
          <t>
The status <bcp14>SHALL</bcp14> be maintained for the latest control code for Select Graphic Rendition (SGR) from each source.
If there is an SGR code stored as the status for the current source before the source switch is done, a reset of SGR <bcp14>SHALL</bcp14> be sent by the sequence SGR 0 [U+009B U+0000 U+006D] after the new line and before the new label during a source switch. See <xref target="act-tx-ctrl-codes"/> for an explanation.
 This transmission does not influence the display count.
</t>
<t>
If there is an SGR code stored for the new source after the source switch, that SGR code <bcp14>SHALL</bcp14> be transmitted to the recipient before the label. This transmission does not influence the display count.
</t>
        </section>
        <section numbered="true" toc="default">
          <name>Actions on Transmission of Text</name>
          <t>
Text from a source sent to the recipient <bcp14>SHALL</bcp14> increase the display count by one per transmitted character.
</t>
 </section>
        <section anchor="act-tx-ctrl-codes" numbered="true" toc="default">
          <name>Actions on Transmission of Control Codes</name>
          <t>
The following control codes, as specified by T.140 <xref target="T140" format="default"/>, require specific actions. They <bcp14>SHALL</bcp14> cause specific considerations in the mixer. Note that the codes presented here are expressed in UTF-16, while transmission is made in the UTF-8 encoding of these codes.
</t>
          <dl>
            <dt>BEL (U+0007):</dt>
            <dd>Bell. Alert in session. Provides for alerting during an active session. The display count <bcp14>SHALL NOT</bcp14> be altered.</dd>
            <dt>NEW LINE (U+2028):</dt>
            <dd>Line Separator. Check and perform a source switch if appropriate. Increase the display count by 1.</dd>
            <dt>CR LF (U+000D U+000A):</dt>
            <dd>A supported, but not preferred, way of requesting a new line. Check and perform a source switch if appropriate. Increase the display count by 1.</dd>
            <dt>INT (ESC U+0061):</dt>
            <dd>Interrupt (used to initiate the mode negotiation procedure). The display count <bcp14>SHALL NOT</bcp14> be altered.</dd>
            <dt>SGR (U+009B Ps U+006D):</dt>
            <dd>Select Graphic Rendition.  Ps represents the rendition parameters specified in <xref target="ISO6429" format="default"/>.  (For freely available equivalent information, please see <xref target="ECMA-48"/>.)
 The display count <bcp14>SHALL NOT</bcp14> be altered. The SGR code <bcp14>SHOULD</bcp14> be stored for the current source.</dd>
            <dt>SOS (U+0098):</dt>
            <dd> Start of String. Used as a general protocol element introducer, followed by a maximum 256-byte string and the ST. The display count <bcp14>SHALL NOT</bcp14> be altered.</dd>
            <dt>ST (U+009C):</dt>
            <dd> String Terminator. End of SOS string. The display count <bcp14>SHALL NOT</bcp14> be altered.</dd>
            <dt>ESC (U+001B):</dt>
            <dd> Escape.  Used in control strings. The display count <bcp14>SHALL NOT</bcp14> be altered for the complete escape code.</dd>
            <dt>Byte order mark (BOM) (U+FEFF):</dt>
            <dd>"Zero width no-break space". Used for synchronization and keep-alive. It <bcp14>SHALL</bcp14> be deleted from incoming streams. It <bcp14>SHALL</bcp14> also be sent first after session establishment to the recipient. The display count <bcp14>SHALL NOT</bcp14> be altered.</dd>
            <dt>Missing text mark (U+FFFD):</dt>
            <dd>"Replacement character". Represented as a question mark in a rhombus, or, if that is not feasible, replaced by an apostrophe ('). It marks the place in the stream of possible text loss. This mark <bcp14>SHALL</bcp14> be inserted by the reception procedure in the case of unrecoverable loss of packets. The display count <bcp14>SHALL</bcp14> be increased by one when sent as for any other character.</dd>
            <dt>SGR:</dt>
            <dd>If a control code for SGR other than a reset of the graphic rendition (SGR 0) is sent to a recipient, that control code <bcp14>SHALL</bcp14> also be stored as the status for the source in the storage for SGR status. If a reset graphic rendition (SGR 0) originating from a source is sent, then the SGR status storage for that source <bcp14>SHALL</bcp14> be cleared.  The display count <bcp14>SHALL NOT</bcp14> be increased.</dd>
            <dt>BS (U+0008):</dt>
            <dd>"Back Space". Intended to erase the last entered character by a source. Erasure by backspace cannot always be performed as the erasing party intended.  If an erasing action erases all text up to the end of the leading label after a source switch, then the mixer <bcp14>MUST NOT</bcp14> transmit more backspaces. Instead, it is <bcp14>RECOMMENDED</bcp14> that a letter "X" be inserted in the text stream for each backspace as an indication of the intent to erase more. A new line is usually coded by a Line Separator, but the character combination "CRLF" <bcp14>MAY</bcp14> be used instead.  Erasure of a new line is, in both cases, done by just one erasing action (backspace). If the display count has a positive value, it <bcp14>SHALL</bcp14> be decreased by one when the BS is sent. If the display count is at zero, it <bcp14>SHALL NOT</bcp14> be altered.</dd>
          </dl>
        </section>
        <section numbered="true" toc="default">
          <name>Packet Transmission</name>
          <t>
    A mixer transmitting to a multiparty-unaware endpoint <bcp14>SHALL</bcp14> send primary data only from one source per packet. The SSRC <bcp14>SHALL</bcp14> be the SSRC of the mixer. The CSRC list <bcp14>MAY</bcp14> contain one member and be the SSRC of the source of the primary data.
          </t>
        </section>
        <section numbered="true" toc="default">
          <name>Functional Limitations</name>
          <t>
    When a multiparty-unaware endpoint presents a conversation in one display area in a chat style, it inserts source indications for remote text and local user text as they are merged in completed text groups. When an endpoint using this layout receives and presents text mixed for multiparty-unaware endpoints, there will be two levels of source indicators for the received text: one generated by the mixer and inserted in a label after each source switch, and another generated by the receiving endpoint and inserted after each switch between the local source and the remote source in the presentation area. This will waste display space and look inconsistent to the reader.
          </t>
        <t>
    New text can be presented from only one source at a time. Switching the source to be presented takes place at suitable places in the text, such as the end of a phrase, the end of a sentence, or a Line Separator, or upon detecting inactivity.
 Therefore, the time to switch to present waiting text from other sources may grow long, and it will vary and depend on the actions of the currently presented source.
  </t>
  <t>
    Erasure can only be done up to the latest source switch. If a user tries to erase more text, the erasing actions will be presented as a letter "X" after the label.
                </t>
    <t>
      Text loss because of network errors may hit the label between entries from different parties, causing the risk of a misunderstanding regarding which source provided a piece of text.
    </t>
  <t>
        Because of these facts, it is strongly <bcp14>RECOMMENDED</bcp14> that multiparty awareness be implemented in real-time text endpoints. The use of the mixing method for multiparty-unaware endpoints should be left for use with endpoints that are impossible to upgrade to become multiparty aware.
          </t>
        </section>
        <section numbered="true" toc="default">
          <name>Example Views of Presentation on Multiparty-Unaware Endpoints</name>
          <t>
The following pictures are examples of the view on a participant's display for the multiparty-unaware case.</t>

<t><xref target="fig3"/> shows how a coordinated column view <bcp14>MAY</bcp14> be presented on Alice's device in a view with two columns. The mixer inserts labels to show how the sources alternate in the column with received text. The mixer alternates between the sources at suitable points in the text exchange so that text entries from each party can be conveniently read.</t>

          <figure anchor="fig3" title="Alice, Who Has a Conference-Unaware Client, Is Receiving the Multiparty Real-Time Text in a Single Stream">
          <artwork name="" type="" align="left" alt=""><![CDATA[
          ___________________________________________________
         |       Conference        |          Alice          |
         |_________________________|_________________________|
         |                         |I will arrive by TGV.    |
         |[Bob]: My flight is to   |Convenient to the main   |
         |Orly.                    |station.                 |
         |[Eve]: Hi all, can we    |                         |
         |plan for the seminar.    |                         |
         |                         |                         |
         |[Bob]: Eve, will you do  |                         |
         |your presentation on     |                         |
         |Friday?                  |                         |
         |[Eve]: Yes, Friday at 10.|                         |
         |[Bob]: Fine, wo          |We need to meet befo     |
         |_________________________|_________________________|
]]></artwork>
          </figure>

       <t>In <xref target="fig4"/>, there is a tradition in receiving applications to include a label showing the source of the text, here shown with parentheses "()". The mixer also inserts source labels for the multiparty call participants, here shown with brackets "[]".</t>
          <figure anchor="fig4" title="An Example of a View of the Multiparty-Unaware Presentation in Chat Style, Where Alice Is the Local User">
          <artwork name="" type="" align="left" alt=""><![CDATA[
           _________________________________________________
          |                                              |^|
          |(Alice) Hi, Alice here.                       |-|
          |                                              | |
          |(mix)[Bob] Bob as well.                       | |
          |                                              | |
          |[Eve] Hi, this is Eve, calling from Paris     | |
          |      I thought you should be here.           | |
          |                                              | |
          |(Alice) I am coming on Thursday, my           | |
          |      performance is not until Friday morning.| |
          |                                              | |
          |(mix)[Bob] And I on Wednesday evening.        | |
          |                                              | |
          |[Eve] we can have dinner and then walk        | |
          |                                              | |
          |[Eve] But I need to be back to                | |
          |    the hotel by 11 because I need            | |
          |                                              |-|
          |______________________________________________|v|
          | of course, I underst                           |
          |________________________________________________|
 ]]></artwork>
          </figure>
        </section>
      </section>
    </section>
    <section numbered="true" toc="default">
      <name>Relationship to Conference Control</name>
      <section numbered="true" toc="default">
        <name>Use with SIP Centralized Conferencing Framework</name>
        <t>
  The Session Initiation Protocol (SIP) conferencing framework, mainly specified in <xref target="RFC4353" format="default"/>, <xref target="RFC4579" format="default"/>, and <xref target="RFC4575" format="default"/>, is suitable for coordinating sessions, including multiparty real-time text. The real-time text stream between the mixer and a participant is one and the same during the conference. Participants get announced by notifications when participants are joining or leaving, and further user information may be provided. The SSRC of the text to expect from joined users <bcp14>MAY</bcp14> be included in a notification. The notifications <bcp14>MAY</bcp14> be used for both security purposes and translation to a label for presentation to other users.
  </t>
      </section>
        <section anchor="confcontrol" numbered="true" toc="default" ><name>Conference Control</name>
        <t>
          In managed conferences, control of the real-time text media <bcp14>SHOULD</bcp14> be provided in the same way as for other media, e.g., for muting and unmuting by the direction attributes in SDP <xref target="RFC8866"/>.
        </t>
        <t>
          Note that floor control functions may be of value for real-time text users as well as for users of other media in a conference.
        </t>
      </section>

    </section>
    <section numbered="true" toc="default">
      <name>Gateway Considerations</name>
	   <t>
   Multiparty real-time text sessions may involve gateways of different kinds. Gateways involved in setting up sessions <bcp14>SHALL</bcp14> correctly reflect the multiparty capability or unawareness of the combination of the gateway and the remote endpoint beyond the gateway.
      </t>
      <section numbered="true" toc="default">
        <name>Gateway Considerations with Textphones</name>
     
      <t>
   One case that may occur is a gateway to the Public Switched Telephone Network (PSTN) for communication with textphones (e.g., TTYs). Textphones are limited devices with no multiparty awareness, and it <bcp14>SHOULD</bcp14> therefore be appropriate for the gateway to not indicate multiparty awareness for that case. Another solution is that the gateway indicates multiparty capability towards the mixer and includes the multiparty mixer function for multiparty-unaware endpoints itself. This solution makes it possible to adapt to the functional limitations of the textphone.
      </t>
      <t>
   More information on gateways to textphones is found in <xref target="RFC5194" format="default"/>.
      </t>

    </section>
      <section numbered="true" toc="default">
        <name>Gateway Considerations with WebRTC</name>
          <t>
          Gateway operation between RTP-mixer-based multiparty real-time text and WebRTC-based real-time text may also be required. Real-time text transport in WebRTC is specified in <xref target="RFC8865" format="default"/>.
  </t>
  <t>
    A multiparty bridge may have functionality for communicating via real-time text in both (1) RTP streams with real-time text and (2) WebRTC T.140 data channels. Other configurations may consist of a multiparty bridge with either technology for real-time text transport and a separate gateway for conversion of the text communication streams between RTP and T.140 data channels.
  </t>
  <t>
In WebRTC, it is assumed that for a multiparty session, one T.140 data channel is established for each source from a gateway or bridge to each participant. Each participant also has a data channel with a two-way connection with the gateway or bridge.
</t>
<t>
  A T.140 data channel used for two-way communication is for text from the WebRTC user and from the bridge or gateway itself to the WebRTC user. The label parameter of this T.140 data channel is used as the NAME field in RTCP to participants on the RTP side. The other T.140 data channels are only for text from other participants to the WebRTC user.
</t>
<t>
  When a new participant has entered the session with RTP transport of real-time text, a new T.140 data channel <bcp14>SHOULD</bcp14> be established to WebRTC users with the label parameter composed of information from the NAME field in RTCP on the RTP side.
</t>
<t>
  When a new participant has entered the multiparty session with real-time text transport in a WebRTC T.140 data channel, the new participant <bcp14>SHOULD</bcp14> be announced by a notification to RTP users. The label parameter from the WebRTC side or other suitable information from the session or stream establishment procedure <bcp14>SHOULD</bcp14> be used to compose the NAME RTCP field on the RTP side.
  </t>
  <t>
  When a participant on the RTP side is disconnected from the multiparty session, the corresponding T.140 data channel(s) <bcp14>SHOULD</bcp14> be closed.
  </t>
  <t>
  When a WebRTC user of T.140 data channels disconnects from the mixer, the corresponding RTP streams or sources in an RTP-mixed stream <bcp14>SHOULD</bcp14> be closed.  
  </t>
  <t>
  T.140 data channels <bcp14>MAY</bcp14> be opened and closed by negotiation or renegotiation of the session, or by any other valid means, as specified in 
<xref target="RFC8865" sectionFormat="of" section="1"/>.
  </t>  
</section>
    </section>
    <section numbered="true" toc="default">
      <name>Updates to RFC 4103</name>
  <t>
  This document updates <xref target="RFC4103" format="default"/> by introducing an SDP media attribute, "rtt-mixer", for negotiation of multiparty-mixing capability with the format described in <xref target="RFC4103" format="default"/> and by specifying the rules for packets when multiparty capability is negotiated and in use.
  </t>
        </section>
    <section anchor="congest" numbered="true" toc="default">
      <name>Congestion Considerations</name>
      <t>
The congestion considerations and recommended actions provided in <xref target="RFC4103" format="default"/> are also valid in multiparty situations.
      </t>
      <t>
        The time values <bcp14>SHALL</bcp14> then be applied per source of text sent to a receiver.
      </t>
      <t>
        In the very unlikely event that many participants in a conference send text simultaneously for a long period of time, a delay may build up for the presentation of text at the receivers if the limitation in characters per second ("cps") to be transmitted to the participants is exceeded. A delay of more than 15 seconds can cause confusion in the session. It is therefore <bcp14>RECOMMENDED</bcp14> that an RTP mixer discard such text causing excessive delays and insert a general indication of possible text loss <xref target="T140ad1" format="default"/> in the session.
 If the main text contributor is indicated in any way, the mixer <bcp14>MAY</bcp14> avoid deleting text from that participant. It should, however, be noted that human creation of text normally contains pauses, when the transmission can catch up, so that transmission-overload situations are expected to be very rare.
      </t>

    </section>
   

    <section anchor="IANAConsiderations" numbered="true" toc="default">
            <name>IANA Considerations</name>
      <section anchor="reg-rtt-mix" numbered="true" toc="default">
  <name>Registration of the "rtt-mixer" SDP Media Attribute</name>
<t>
IANA has registered the new SDP attribute "rtt-mixer".
</t>

<dl newline="false">
<dt>Contact name:
</dt>
<dd>IESG
</dd>
<dt>Contact email:
</dt>
<dd>iesg@ietf.org
</dd>
<dt>Attribute name:
</dt>
<dd>rtt-mixer
</dd>
<dt>Attribute semantics:
</dt>
<dd>See RFC 9071, <xref target="nego1"/>
</dd>
<dt>Attribute value:
</dt>
<dd>none
</dd>
<dt>Usage level:
</dt>
<dd>media
</dd>
<dt>Purpose:
</dt>
<dd>To indicate mixer and endpoint support of multiparty mixing for real-time text transmission, using a common RTP stream for transmission of text from a number of sources mixed with one source at a time and where the source is indicated in a single CSRC-list member.
</dd>
<dt>Charset Dependent:
</dt>
<dd>no</dd>
<dt>O/A procedures:
</dt>
<dd>See RFC 9071, <xref target="nego1"/>
</dd>
<dt>Mux Category:
</dt>
<dd>NORMAL
</dd>
<dt>Reference:
</dt>
<dd>RFC 9071
</dd>
</dl>


</section>

</section>

       <section anchor="Security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>

The RTP-mixer model requires the mixer to be allowed to decrypt, pack, and encrypt secured text from conference participants. Therefore, the mixer needs to be trusted
to maintain confidentiality and integrity of the real-time text data. This situation is similar to the situation for handling audio and video media in centralized mixers.
</t>
      <t>
The requirement to transfer information about the user in RTCP reports in SDES, CNAME, and NAME fields, and in conference notifications, may have privacy concerns, as already stated in RFC 3550 <xref target="RFC3550" format="default"/>, and may be restricted for privacy reasons. When used for the creation of readable labels in the presentation, the receiving user will then get a more symbolic label for the source.
      </t>
          <t>
          The services available through the real-time text mixer may be of special interest to deaf and hard-of-hearing individuals. Some users may want to refrain from revealing such characteristics broadly in conferences. Conference systems where the mixer is included <bcp14>MAY</bcp14> need to be designed with the confidentiality of such characteristics in mind.
          </t>
          <t>
          Participants with malicious intentions may appear and, for example, disrupt the multiparty session by emitting a continuous flow of text. They may also send text that appears to originate from other participants. Countermeasures should include requiring secure signaling, media, and authentication, and providing higher-layer conference functions, e.g., for blocking, muting, and expelling participants. 
          </t>
          <t>
          Participants with malicious intentions may also try to disrupt the presentation by sending incomplete or malformed control codes. Handling of text from the different sources by the receivers <bcp14>MUST</bcp14> therefore be well separated so that the effects of such actions only affect text from the source causing the action. 
          </t>
          <t>
          Care should be taken to avoid the possibility of attacks by
unauthenticated call participants, and even eavesdropping and manipulation of content by non-participants, if the use of the mixer is permitted for users both with and without security procedures.
          </t>
          <t>
          As already stated in <xref target="security2" format="default"/>, security in media <bcp14>SHOULD</bcp14> be applied by using DTLS-SRTP <xref target="RFC5764" format="default"/> at the media level.
          </t>
          <t>Further security considerations specific to this application are specified in <xref target="security2" format="default"/>.
          </t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4102.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4103.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3550.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5630.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5764.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6263.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7675.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8865.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8866.xml"/>

        <reference anchor="T140" target="https://www.itu.int/rec/T-REC-T.140-199802-I/en">
          <front>
            <title>Protocol for multimedia application text conversation</title>
            <author>
              <organization>ITU-T</organization>
            </author>
            <date year="1998" month="February"/>
          </front>
         <seriesInfo name="ITU-T Recommendation" value="T.140"/>
        </reference>

        <reference anchor="T140ad1" target="https://www.itu.int/rec/T-REC-T.140-200002-I!Add1/en">
          <front>
            <title>Recommendation T.140 Addendum</title>
            <author>
              <organization>ITU-T</organization>
            </author>
            <date year="2000" month="February"/>
          </front>
        </reference>
		        <reference anchor="ISO6429" target="https://www.iso.org/obp/ui/#iso:std:iso-iec:6429:ed-3:v1:en">
          <front>
            <title>Information technology - Control functions for coded character sets</title>
            <author>
              <organization>ISO/IEC</organization>
            </author>
            <date year="1992" month="December"/>
          </front>
         <seriesInfo name="ISO/IEC" value="ISO/IEC 6429:1992"/>
        </reference>

    <reference anchor="ECMA-48" target="https://www.ecma-international.org/publications-and-standards/standards/ecma-48/">
     <front>
      <title>ECMA-48: Control functions for coded character sets</title>
      <author>
        <organization>Ecma International</organization>
      </author>
      <date year="1991" month="June"/>
     </front>
     <refcontent>5th edition</refcontent>
    </reference>
   </references>
   <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4353.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4579.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4575.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5194.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7667.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8643.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8723.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8825.xml"/>

      </references>
    </references>
        <section anchor="Acknowledgements" numbered="false" toc="default">
      <name>Acknowledgements</name>
            <t>The author wants to thank the following persons for support, reviews, and valuable comments: <contact fullname="Bernard Aboba"/>, <contact fullname="Amanda Baber"/>, <contact fullname="Roman Danyliw"/>, <contact fullname="Spencer Dawkins"/>, <contact fullname="Martin Duke"/>, <contact fullname="Lars Eggert"/>, <contact fullname="James Hamlin"/>, <contact fullname="Benjamin Kaduk"/>, <contact fullname="Murray Kucherawy"/>, <contact fullname="Paul Kyzivat"/>, <contact fullname="Jonathan Lennox"/>, <contact fullname="Lorenzo Miniero"/>, <contact fullname="Dan Mongrain"/>, <contact fullname="Francesca Palombini"/>, <contact fullname="Colin Perkins"/>, <contact fullname="Brian Rosen"/>, <contact fullname="Rich Salz"/>,
<contact fullname="Jürgen Schönwälder"/>, <contact fullname="Robert Wilton"/>, <contact fullname="Dale Worley"/>, <contact fullname="Yong Xin"/>,
and <contact fullname="Peter Yee"/>.
</t>
    </section>
  </back>
</rfc>
