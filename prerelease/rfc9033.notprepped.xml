<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-6tisch-msf-18" number="9033" obsoletes="" updates="" submissionType="IETF" category="std" consensus="true" sortRefs="true" symRefs="true" xml:lang="en" tocInclude="true" version="3">

    <!-- xml2rfc v2v3 conversion 2.35.0 -->
    <front>
        <title abbrev="6TiSCH MSF">
            6TiSCH Minimal Scheduling Function (MSF)
        </title>
	<seriesInfo name="RFC" value="9033"/>
        <author initials="T" surname="Chang" fullname="Tengfei Chang" role="editor">
            <organization>Inria</organization>
            <address>
                <postal>
                    <street>2 rue Simone Iff</street>
                    <city>Paris</city>
                    <code>75012</code>
                    <country>France</country>
                </postal>
                <email>tengfei.chang@gmail.com</email>
            </address>
        </author>
        <author initials="M." surname="Vučinić" fullname="Mališa Vučinić">
            <organization>Inria</organization>
            <address>
                <postal>
                    <street>2 rue Simone Iff</street>
                    <city>Paris</city>
                    <code>75012</code>
                    <country>France</country>
                </postal>
                <email>malisa.vucinic@inria.fr</email>
            </address>
        </author>
        <author initials="X" surname="Vilajosana" fullname="Xavier Vilajosana">
            <organization>Universitat Oberta de Catalunya</organization>
            <address>
                <postal>
                    <street>156 Rambla Poblenou</street>
                    <city>Barcelona</city>
                    <region>Catalonia</region>
                    <code>08018</code>
                    <country>Spain</country>
                </postal>
                <email>xvilajosana@uoc.edu</email>
            </address>
        </author>
        <author initials="S" surname="Duquennoy" fullname="Simon Duquennoy">
            <organization>RISE SICS</organization>
            <address>
                <postal>
                    <street>Isafjordsgatan 22</street>
                    <city>Kista</city>
		    <code>164 29</code>
                    <country>Sweden</country>
                </postal>
                <email>simon.duquennoy@gmail.com</email>
            </address>
        </author>
        <author initials="D" surname="Dujovne" fullname="Diego Dujovne">
            <organization>Universidad Diego Portales</organization>
            <address>
                <postal>
                    <street>Escuela de Informática y Telecomunicaciones</street>
                    <street>Av. Ejército 441</street>
                    <city>Santiago</city>
                    <region>Región Metropolitana</region>
                    <country>Chile</country>
                </postal>
                <phone>+56 (2) 676-8121</phone>
                <email>diego.dujovne@mail.udp.cl</email>
            </address>
        </author>
	<date year="2021" month="May"/>
        <area>Internet Area</area>
        <workgroup>6TiSCH</workgroup>

<keyword>TSCH</keyword>
<keyword>communication schedule</keyword>
<keyword>6P</keyword>

        <abstract>
            <t>
                This specification defines the "IPv6 over the TSCH mode of IEEE 802.15.4" (6TiSCH) Minimal Scheduling Function (MSF).
                This Scheduling Function describes both
                the behavior of a node when joining the network and
                how the communication schedule is managed in a distributed fashion.
                MSF is built upon
                the 6TiSCH Operation Sublayer Protocol (6P) and
                the minimal security framework for 6TiSCH.
            </t>
        </abstract>

    </front>
    <middle>
        <section anchor="sec_intro" numbered="true" toc="default">
            <name>Introduction</name>
            <t>
                The 6TiSCH Minimal Scheduling Function (MSF), defined in this specification, is a 6TiSCH Scheduling Function (SF).
                The role of an SF is entirely defined in <xref target="RFC8480" format="default"/>.
                This specification complements <xref target="RFC8480" format="default"/> by providing the rules of when to add and delete cells in the communication schedule.
                This specification satisfies all the requirements for an SF listed in <xref target="RFC8480" section="4.2" sectionFormat="of"/>.
            </t>
            <t>
                MSF builds on top of the following specifications:
                "<xref target="RFC8180" format="title"/>" <xref target="RFC8180" format="default"/>,
                "<xref target="RFC8480" format="title"/>"  <xref target="RFC8480" format="default"/>, and
                "<xref target="RFC9031" format="title"/>"  <xref target="RFC9031" format="default"/>.
            </t>
            <t>
                MSF defines both
                the behavior of a node when joining the network, and
                how the communication schedule is managed in a distributed fashion.
                When a node running MSF boots up, it joins the network by following the six steps described in <xref target="sec_boot" format="default"/>.
                The end state of the join process is that the node
                is synchronized to the network,
                has mutually authenticated with the network,
                has identified a routing parent,
                and has scheduled one negotiated Tx cell (defined in <xref target="sec_traffic" format="default"/>) to/from its routing parent.
                After the join process, the node can continuously add, delete, and relocate cells as described in <xref target="sec_add_delete" format="default"/>.

                It does so for three reasons:
                to match the link-layer resources to the traffic,
                to handle changing parent, and 
                to handle a schedule collision.
            </t>
            <t>
                MSF works closely with the IPv6 Routing Protocol for Low-Power and Lossy Networks (RPL), specifically the routing parent defined in <xref target="RFC6550" format="default"/>.
                This specification only describes how MSF works with the routing parent; this parent is referred to as the "selected parent".
                The activity of MSF towards the single routing parent is called a "MSF session". 
                Though the performance of MSF is evaluated only when the "selected parent" represents the node's preferred parent, there should be no restrictions to use multiple MSF sessions, one per parent.
                The distribution of traffic over multiple parents is a routing decision that is out of scope for MSF.
            </t>
            <t>
                MSF is designed to operate in a wide range of application domains.
                It is optimized for applications with regular upstream traffic, from the nodes to the Destination-Oriented Directed Acyclic Graph (DODAG) root <xref target="RFC6550" format="default"/>.
            </t>
            <t>
                This specification follows the recommended structure of an SF specification, given in <xref target="RFC8480" section="A" sectionFormat="of" format="default"/>, with the following adaptations:
            </t>
            <ul spacing="normal">
                <li>
                    We have reordered some sections, in particular to have the section on the node behavior at boot (<xref target="sec_boot" format="default"/>) appear early in this specification.
                </li>
                <li>
                    We added sections on
                    the interface to the minimal 6TiSCH configuration (<xref target="sec_minimal" format="default"/>),
                    the use of the SIGNAL command (<xref target="sec_signal" format="default"/>),
                    the MSF constants (<xref target="sec_constants" format="default"/>), and
                    the MSF statistics (<xref target="sec_stats" format="default"/>).
                </li>
            </ul>           
          <section>
           <name>Requirements Language</name>
            <t>                
                    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>", "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as described in BCP&nbsp;14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/> when, and only when, they appear in all capitals, as shown here.
            </t>
           </section>
           <section>
            <name>Related Documents</name>
            <t>This specification uses messages and variables defined in 
               IEEE Std 802.15.4-2015 <xref target="IEEE802154" format="default"/>.  It is expected that 
               those resources will remain in the future versions of IEEE Std 802.15.4; 
               in which case, this specification also applies to those future versions.
               In the remainder of the document, we use <xref target="IEEE802154" format="default"/> to refer to 
               IEEE Std 802.15.4-2015 as well as future versions of IEEE Std 802.15.4 
               that remain compatible.</t>
           </section>
        </section>
        <section anchor="sec_minimal" numbered="true" toc="default">
            <name>Interface to the Minimal 6TiSCH Configuration</name>
            <t>
                In a Time-Slotted Channel Hopping (TSCH) network, time is sliced up into time slots.
                The time slots are grouped as one or multiple slotframes that repeat over time.
                The TSCH schedule instructs a node what to do at each time slot, such as transmit, receive, or sleep <xref target="RFC7554" format="default"/>.
                 For time slots for transmitting or receiving, a channel is assigned to the time slot.    
                The tuple (slot, channel) is indicated as a cell of the TSCH schedule.
                MSF is one of the policies defining how to manage the TSCH schedule.
            </t>
            <t>
                A node implementing MSF <bcp14>SHOULD</bcp14> implement the minimal 6TiSCH configuration <xref target="RFC8180" format="default"/>, which defines the "minimal cell", a single shared cell providing minimal connectivity between the nodes in the network.
                The MSF implementation provided in this specification is based on the implementation of the minimal 6TiSCH configuration.
                However, an implementor <bcp14>MAY</bcp14> implement MSF based on other specifications as long as the specification defines a way to advertise the Enhanced Beacons (EBs) and DODAG Information Objects (DIOs) among the network.
            </t>
            <t>
                MSF uses the minimal cell for broadcast frames such as Enhanced Beacons (EBs) <xref target="IEEE802154" format="default"/> and broadcast DODAG Information Objects (DIOs) <xref target="RFC6550" format="default"/>.
                Cells scheduled by MSF are meant to be used only for unicast frames.
            </t>
            <t>
                To ensure there is enough bandwidth available on the minimal cell, a node implementing MSF <bcp14>SHOULD</bcp14> enforce some rules for limiting the traffic of broadcast frames. 
                For example, the overall broadcast traffic among the node and its neighbors <bcp14>SHOULD NOT</bcp14> exceed one-third of the bandwidth of minimal cell.
                One of the algorithms that fulfills this requirement is the Trickle timer defined in  <xref target="RFC6206" format="default"/>, which is applied to DIO messages <xref target="RFC6550" format="default"/>.
                However, any such algorithm of limiting the broadcast traffic to meet those rules is implementation-specific and is out of the scope of MSF.
            </t>
            <t>
                Three slotframes are used in MSF. 
                MSF schedules autonomous cells at Slotframe 1 (<xref target="sec_autonomous_cells" format="default"/>) and 6P negotiated cells at Slotframe 2 (<xref target="sec_add_delete" format="default"/>), while Slotframe 0 is used for the bootstrap traffic as defined in the minimal 6TiSCH configuration.
                The same slotframe length for Slotframe 0, 1, and 2 is <bcp14>RECOMMENDED</bcp14>.
                Thus it is possible to avoid the scheduling collision between the autonomous cells and 6P negotiated cells (<xref target="sec_autonomous_cells" format="default"/>).
                The default slotframe length (SLOTFRAME_LENGTH) is <bcp14>RECOMMENDED</bcp14> for Slotframe 0, 1, and 2, although any value can be advertised in the EBs.
            </t>
        </section>
        <section anchor="sec_autonomous_cells" numbered="true" toc="default">
            <name>Autonomous Cells</name>
            <t>
                MSF nodes initialize Slotframe 1 with a set of default cells for unicast communication with their neighbors.
                These cells are called "autonomous cells", because they are maintained autonomously by each node without negotiation through 6P.
                Cells scheduled by 6P Transaction are called "negotiated cells", which are reserved on Slotframe 2.
                How to schedule negotiated cells is detailed in <xref target="sec_add_delete" format="default"/>.
                There are two types of autonomous cells:
            </t>
            <dl spacing="normal">
                <dt>
                    Autonomous Rx Cell (AutoRxCell):</dt><dd> One cell at a [slotOffset,channelOffset] computed as a hash of the 64-bit Extended Unique Identifier (EUI-64) of the node itself (detailed next).
                    Its cell options bits are assigned as TX=0, RX=1, SHARED=0.
                </dd>
                <dt>
                    Autonomous Tx Cell (AutoTxCell):</dt><dd> One cell at a [slotOffset,channelOffset] computed as a hash of the Layer 2 EUI-64 destination address in the unicast frame to be transmitted (detailed in <xref target="sec_join" format="default"/>).
                    Its cell options bits are assigned as TX=1, RX=0, SHARED=1.
                </dd>
            </dl>

	 
            <t>
                To compute a [slotOffset,channelOffset] from an EUI-64 address, nodes <bcp14>MUST</bcp14> use the hash function SAX as defined in Section 2 of <xref target="SAX-DASFAA" format="default"/> with consistent input parameters, for example, those defined in <xref target="sec_hash_function" format="default"/>.
                The coordinates are computed to distribute the cells across all channel offsets, and all but the first slot offset of Slotframe 1.
                The first time offset is skipped to avoid colliding with the minimal cell in Slotframe 0.
                The slot coordinates derived from a given EUI-64 address are computed as follows:
            </t>
                <t indent="6">slotOffset(MAC) = 1 + hash(EUI64, length(Slotframe_1) - 1) </t>
                <t indent="6">channelOffset(MAC) = hash(EUI64, NUM_CH_OFFSET)</t>
            <t>
                The second input parameter defines the maximum return value of the hash function.
                Other optional parameters defined in SAX determine the performance of SAX hash function.
                Those parameters could be broadcast in an EB frame or preconfigured.
                For interoperability purposes, <xref target="sec_hash_function" format="default"/> provides the reference values of those parameters.
            </t>
            <t>
                AutoTxCell is not permanently installed in the schedule but is added or deleted on demand when there is a frame to be sent.
                Throughout the network lifetime, nodes maintain the autonomous cells as follows:
            </t>
            <ul spacing="normal">
                <li>
                    Add an AutoTxCell to the Layer 2 destination address, which is indicated in a frame when there is no 6P negotiated Tx cell in the schedule for that frame to transmit.
                </li>
                <li>
                    <t>
                        Remove an AutoTxCell when:
                    </t>
                    <ul spacing="normal">
                        <li>there is no frame to transmit on that cell, or</li>
                        <li>there is at least one 6P negotiated Tx cell in the schedule for the frames to transmit.</li>
                    </ul>
                </li>
            </ul>
            <t>
                The AutoRxCell <bcp14>MUST</bcp14> always remain scheduled after synchronization.            
                6P CLEAR <bcp14>MUST NOT</bcp14> erase any autonomous cells.
            </t>
            <t>
                Because of hash collisions, there will be cases that the AutoTxCell and AutoRxCell are scheduled at the same slot offset and/or channel offset.
                In such cases, AutoTxCell always take precedence over AutoRxCell.
                Notice AutoTxCell is a shared type cell that applies a back-off mechanism.
                When the AutoTxCell and AutoRxCell collide,  AutoTxCell takes precedence if there is a packet to transmit.
                When in a back-off period, AutoRxCell is used.
                In the case of conflict with a negotiated cell, autonomous cells take precedence over negotiated cells, which is stated in <xref target="IEEE802154" format="default"/>.
                However, when the Slotframe 0, 1, and 2 use the same length value, it is possible for a negotiated cell to avoid the collision with AutoRxCell.
                Hence, the same slotframe length for Slotframe 0, 1, and 2 is <bcp14>RECOMMENDED</bcp14>.
            </t>
            <t>

            </t>
        </section>
        <section anchor="sec_boot" numbered="true" toc="default">
            <name>Node Behavior at Boot</name>
            <t>
                This section details the behavior the node <bcp14>SHOULD</bcp14> follow from the moment it is switched on until it has successfully joined the network.
                Alternative behaviors may be involved, for example, when alternative security solutions are used for the network. 
                <xref target="sec_start_state" format="default"/> details the start state;
                <xref target="sec_end_state" format="default"/>   details the end   state.
                The other sections detail the six steps of the joining process.
                We use the term "pledge" and "joined node", as defined in <xref target="RFC9031" format="default"/>.
            </t>
            <section anchor="sec_start_state" numbered="true" toc="default">
                <name>Start State</name>
                <t>
                    A node implementing MSF <bcp14>SHOULD</bcp14> implement the Constrained Join Protocol (CoJP) for 6TiSCH <xref target="RFC9031" format="default"/>.
                    As a corollary, this means that a pledge, before being switched on, may be preconfigured with the Pre-Shared Key (PSK) for joining, as well as any other configuration detailed in <xref target="RFC9031" format="default"/>.
                    This is not necessary if the node implements a security solution that is not based on PSKs, such as <xref target="I-D.ietf-6tisch-dtsecurity-zerotouch-join" format="default"/>.
                </t>
            </section>
            <section anchor="sec_frequency" numbered="true" toc="default">
                <name>Step 1 - Choosing Frequency</name>
                <t>
                    When switched on, the pledge randomly chooses a frequency from the channels through which the network cycles and starts listening for EBs on that frequency.
                </t>
            </section>
            <section anchor="sec_ebs" numbered="true" toc="default">
                <name>Step 2 - Receiving EBs</name>
                <t>
                    Upon receiving the first EB, the pledge continues listening for additional EBs to learn:
                </t>
                <ol spacing="normal" type="1">
                    <li>the number of neighbors N in its vicinity, and </li>
                    <li>which neighbor to choose as a Join Proxy (JP) for the joining process.</li>
                </ol>
                <t>
                    After having received the first EB, a node <bcp14>MAY</bcp14> keep listening for at most MAX_EB_DELAY seconds or until it has received EBs from NUM_NEIGHBOURS_TO_WAIT distinct neighbors.
                    This behavior is defined in <xref target="RFC8180" format="default"/>.
                </t>
                <t>
                    During this step, the pledge only gets synchronized when it has received enough EB from the network it wishes to join.
                    How to decide whether an EB originates from a node from the network it wishes to join is implementation-specific, but <bcp14>MAY</bcp14> involve filtering EBs by
                    the PANID field it contains,
                    the presence and contents of the Information Element (IE) defined in <xref target="RFC9032" format="default"/>, or
                    the key used to authenticate it.
                </t>
                <t>
                    The decision of which neighbor to use as a JP is implementation-specific and is discussed in <xref target="RFC9031" format="default"/>.
                </t>
            </section>
            <section anchor="sec_join" numbered="true" toc="default">
                <name>Step 3 - Setting up Autonomous Cells for the Join Process</name>
                <t>
                    After having selected a JP, a node generates a Join Request and installs an AutoTxCell to the JP.
                    The Join Request is then sent by the pledge to its selected JP over the AutoTxCell.
                    The AutoTxCell is removed by the pledge when the Join Request is sent out.
                    The JP receives the Join Request through its AutoRxCell.
                    Then it forwards the Join Request to the Join Registrar/Coordinator (JRC), possibly over multiple hops, over the 6P negotiated Tx cells.
                    Similarly, the JRC sends the Join Response to the JP, possibly over multiple hops, over AutoTxCells or the 6P negotiated Tx cells.
                    When the JP receives the Join Response from the JRC, it installs an AutoTxCell to the pledge and sends that Join Response to the pledge over AutoTxCell. 
                    The AutoTxCell is removed by the JP when the Join Response is sent out.
                    The pledge receives the Join Response from its AutoRxCell, thereby learns the keying material used in the network, as well as other configuration settings, and becomes a "joined node".
                </t>
                <t>
                    When 6LoWPAN Neighbor Discovery (ND) <xref target="RFC8505" format="default"/> is implemented, the unicast packets used by ND are sent on the AutoTxCell.
                    The specific process how the ND works during the join process is detailed in <xref target="RFC9030" format="default"/>.
                </t>
            </section>
            <section anchor="sec_rank" numbered="true" toc="default">
                <name>Step 4 - Acquiring a RPL Rank</name>
                <t>
                    Per <xref target="RFC6550" format="default"/>, the joined node
                    receives DIOs,
                    computes its own Rank, and
                    selects a routing parent.
                </t>
            </section>
            <section anchor="sec_negotiated_cells" numbered="true" toc="default">
                <name>Step 5 - Setting up First Tx Negotiated Cells</name>
                <t>
                    Once it has selected a routing parent, the joined node <bcp14>MUST</bcp14> generate a 6P ADD Request and install an AutoTxCell to that parent.
                    The 6P ADD Request is sent out through the AutoTxCell, containing the following fields:
                </t>
                <dl newline="false">
                    <dt>CellOptions:</dt><dd>Set to TX=1, RX=0, SHARED=0.</dd>
                    <dt>NumCells:</dt><dd>Set to 1.</dd>
                    <dt>CellList:</dt><dd>At least 5 cells, chosen according to <xref target="sec_celllist" format="default"/>.</dd>
                </dl>
                <t>
                    The joined node removes the AutoTxCell to the selected parent when the 6P Request is sent out.
                    That parent receives the 6P ADD Request from its AutoRxCell.
                    Then it generates a 6P ADD Response and installs an AutoTxCell to the joined node.
                    When the parent sends out the 6P ADD Response, it <bcp14>MUST</bcp14> remove that AutoTxCell.
                    The joined node receives the 6P ADD Response from its AutoRxCell and completes the 6P Transaction.
                    In the case that the 6P ADD transaction failed, the node <bcp14>MUST</bcp14> issue another 6P ADD Request and repeat until the Tx cell is installed to the parent.
                </t>
            </section>
            <section anchor="sec_eb_dio" numbered="true" toc="default">
                <name>Step 6 - Sending EBs and DIOs</name>
                <t>
                    The node starts sending EBs and DIOs on the minimal cell, while following the transmit rules for broadcast frames from <xref target="sec_minimal" format="default"/>.
                </t>
            </section>
            <section anchor="sec_end_state" numbered="true" toc="default">
                <name>End State</name>
                <t>
                    At the end state of the joining process, a new node:
                </t>
                <ul spacing="normal">
                    <li>is synchronized to the network,</li>
                    <li>is using the link-layer keying material it learned through the secure joining process,</li>
                    <li>has selected one neighbor as its routing parent,</li>
                    <li>has one AutoRxCell,</li>
                    <li>has one negotiated Tx cell to the selected parent,</li>
                    <li>starts to send DIOs, potentially serving as a router for other nodes' traffic, and</li>
                    <li>starts to send EBs,  potentially serving as a JP for new pledges.</li>
                </ul>
            </section>
        </section>
        <section anchor="sec_add_delete" numbered="true" toc="default">
            <name>Rules for Adding and Deleting Cells</name>
            <t>
                Once a node has joined the 6TiSCH network, it adds/deletes/relocates cells with the selected parent for three reasons:
            </t>
            <ul spacing="normal">
                <li>to match the link-layer resources to the traffic between the node and the selected parent (<xref target="sec_traffic" format="default"/>),</li>
                <li>to handle switching the parent (<xref target="sec_switching_parent" format="default"/>), or</li>
                <li>to handle a schedule collision (<xref target="sec_collision" format="default"/>).</li>
            </ul>
            <t>
                These cells are called "negotiated cells" as they are scheduled through 6P and negotiated with the node's parent.
                Without specific declaration, all cells mentioned in this section are negotiated cells, and they are installed at Slotframe 2.
            </t>
            <section anchor="sec_traffic" numbered="true" toc="default">
                <name>Adapting to Traffic</name>
                <t>
                    A node implementing MSF <bcp14>MUST</bcp14> implement the behavior described in this section.
                </t>
                <t>
                    The goal of MSF is to manage the communication schedule in the 6TiSCH schedule in a distributed manner.
                    For a node, this translates into monitoring the current usage of the cells it has to one of its neighbors, in most cases to the selected parent.
                </t>
                <ul spacing="normal">
                    <li>
                        If the node determines that the number of link-layer frames it is attempting to exchange with the selected parent per unit of time is larger than the capacity offered by the TSCH negotiated cells it has scheduled with it, the node issues a 6P ADD command to that parent to add cells to the TSCH schedule.
                    </li>
                    <li>
                        If the traffic is lower than the capacity, the node issues a 6P DELETE command to that parent to delete cells from the TSCH schedule.
                    </li>
                </ul>
                <t>
                    The node <bcp14>MUST</bcp14> maintain two separate pairs of the following counters for the selected parent:
                        one for the negotiated Tx cells to that parent and 
                        one for the negotiated Rx cells to that parent.
                </t>
                <dl newline="false">
                    <dt>NumCellsElapsed:</dt>
                    <dd>
                        Counts the number of negotiated cells that have elapsed since the counter was initialized. 
                        This counter is initialized at 0.
                        When the current cell is declared as a negotiated cell to the selected parent, NumCellsElapsed is incremented by exactly 1, regardless of whether the cell is used to transmit or receive a frame.
                    </dd>
                    <dt>NumCellsUsed:</dt>
                    <dd>
                        <t>
                            Counts the number of negotiated cells that have been used. 
                            This counter is initialized at 0.
                            NumCellsUsed is incremented by exactly 1 when, during a negotiated cell to the selected parent, either of the following happens:
                        </t>
                        <ul spacing="normal">
                            <li>
                                The node sends a frame to the parent.
                                The counter increments regardless of whether a link-layer acknowledgment was received or not.
                            </li>
                            <li>
                                The node receives a valid frame from the parent.
                                The counter increments only when a valid frame per <xref target="IEEE802154" format="default"/> is received by the node from its parent.
                            </li>
                        </ul>
                    </dd>
                </dl>
                <t>
                    The cell option of cells listed in CellList in a 6P Request frame <bcp14>SHOULD</bcp14> be either (Tx=1, Rx=0) only or (Tx=0, Rx=1) only.
                    Both NumCellsElapsed and NumCellsUsed counters can be used for both types of negotiated cells.
                </t>
                <t>
                    As there is no negotiated Rx cell installed at initial time, the AutoRxCell is taken into account as well for downstream traffic adaptation.
                    In this case:
                </t>
                <ul spacing="normal">
                    <li>
                        NumCellsElapsed is incremented by exactly 1 when the current cell is AutoRxCell.
                    </li>
                    <li>
                        NumCellsUsed is incremented by exactly 1 when the node receives a frame from the selected parent on AutoRxCell.
                    </li>
                </ul>
                <t>
                    Implementors <bcp14>MAY</bcp14> choose to create the same counters for each neighbor and add them as additional statistics in the neighbor table.
                </t>
                <t>
                    The counters are used as follows:
                </t>
                <ol spacing="normal" type="1">
                    <li>
                        Both NumCellsElapsed and NumCellsUsed are initialized to 0 when the node boots.
                    </li>
                    <li anchor="counter_step2">
                        <t>
                            When the value of NumCellsElapsed reaches MAX_NUM_CELLS:
                        </t>
                        <ul spacing="normal">
                            <li>If NumCellsUsed is greater than LIM_NUMCELLSUSED_HIGH, trigger 6P to add a single cell to the selected parent.</li>
                            <li>If NumCellsUsed is less than LIM_NUMCELLSUSED_LOW, trigger 6P to remove a single cell to the selected parent.</li>
                            <li>Reset both NumCellsElapsed and NumCellsUsed to 0 and restart <xref target="counter_step2" format="none">#2</xref>.</li>
                        </ul>
                    </li>
                </ol>
                <t>
                    The value of MAX_NUM_CELLS is chosen according to the traffic type of the network.
                    Generally speaking, the larger the value MAX_NUM_CELLS is, the more accurately the cell usage is calculated.
                    By using a larger value of MAX_NUM_CELLS, the 6P traffic overhead could be reduced as well.
                    Meanwhile, the latency won't increase much by using a larger value of MAX_NUM_CELLS for periodic traffic type.
                    For bursty traffic, a larger value of MAX_NUM_CELLS indeed introduces higher latency.
                    The latency caused by slight changes of traffic load can be alleviated by the additional scheduled cells. 
                    In this sense, MSF is a Scheduling Function that trades latency with energy by scheduling more cells than needed.
                    Setting MAX_NUM_CELLS to a value at least four times the recent maximum number of cells used in a slotframe is <bcp14>RECOMMENDED</bcp14>.
                    For example, a two packets/slotframe traffic load results in an average of four cells scheduled (two cells are used), using at least the value of double the number of scheduled cells (which is eight) as MAX_NUM_CELLS gives a good resolution on the cell usage calculation.
                </t>
                <t>
                    In the case that a node has booted or has disappeared from the network, the cell reserved at the selected parent may be kept in the schedule forever.
                    A cleanup mechanism <bcp14>MUST</bcp14> be provided to resolve this issue.
                    The cleanup mechanism is implementation-specific.
                    The goal is to confirm that those negotiated cells are not used anymore by the associated neighbors and remove them from the schedule.
                </t>
            </section>
            <section anchor="sec_switching_parent" numbered="true" toc="default">
                <name>Switching Parent</name>
                <t>
                    A node implementing MSF <bcp14>SHOULD</bcp14> implement the behavior described in this section.
                </t>
                <t>
                    As part of its normal operation, RPL can have a node switch parent.
                    The procedure for switching from the old parent to the new parent is the following:
                </t>
                <ol spacing="normal" type="1">
                    <li>The node counts the number of negotiated cells it has per slotframe to the old parent.</li>
                    <li>The node triggers one or more 6P ADD commands to schedule the same number of negotiated cells with same cell options to the new parent.</li>
                    <li>When that successfully completes, the node issues a 6P CLEAR command to its old parent.</li>
                </ol>
                <t>
                   The type of negotiated cell that should be installed first depends on which traffic has the higher priority, upstream or downstream, which is application-specific and out of scope of MSF.
                </t>
            </section>
            <section anchor="sec_collision" numbered="true" toc="default">
                <name>Handling Schedule Collisions</name>
                <t>
                    A node implementing MSF <bcp14>SHOULD</bcp14> implement the behavior described in this section.
                    Other algorithms for handling schedule collisions can be an alternative to the algorithm proposed in this section.
                </t>
                <t>
                    Since scheduling is entirely distributed, there is a nonzero probability that two pairs of nearby neighbor nodes schedule a negotiated cell at the same [slotOffset,channelOffset] location in the TSCH schedule.
                    In that case, data exchanged by the two pairs may collide on that cell.
                    We call this case a "schedule collision".
                </t>
                <t>
                    The node <bcp14>MUST</bcp14> maintain the following counters for each negotiated Tx cell to the selected parent:
                </t>
                <dl newline="false">
                    <dt>NumTx:</dt>
                    <dd>
                        Counts the number of transmission attempts on that cell.
                        Each time the node attempts to transmit a frame on that cell, NumTx is incremented by exactly 1.
                    </dd>
                    <dt>NumTxAck:</dt>
                    <dd>
                        Counts the number of successful transmission attempts on that cell.
                        Each time the node receives an acknowledgment for a transmission attempt, NumTxAck is incremented by exactly 1.
                    </dd>
                </dl>
                <t>
                    Since both NumTx and NumTxAck are initialized to 0, we necessarily have NumTxAck less than or equal to NumTx.
                    We call Packet Delivery Ratio (PDR) the ratio NumTxAck/NumTx and represent it as a percentage.
                    A cell with a PDR equal to 50% means that half of the frames transmitted are not acknowledged.
                </t>
                <t>
                    Each time the node switches parent (or during the join process when the node selects a parent for the first time), both NumTx and NumTxAck <bcp14>MUST</bcp14> be reset to 0.
                    They increment over time, as the schedule is executed, and the node sends frames to that parent.
                    When NumTx reaches MAX_NUMTX, both NumTx and NumTxAck <bcp14>MUST</bcp14> be divided by 2.
                    MAX_NUMTX needs to be a power of two to avoid division error.
                    For example, when MAX_NUMTX is set to 256, and NumTx=255 and NumTxAck=127, the counters become NumTx=128 and NumTxAck=64 if one frame is sent to the parent with an acknowledgment received.
                    This operation does not change the value of the PDR but allows the counters to keep incrementing.
                    The value of MAX_NUMTX is implementation-specific.
                </t>
                <t>
                    The key for detecting a schedule collision is that, if a node has several cells to the selected parent, all cells should exhibit the same PDR.
                    A cell that exhibits a PDR significantly lower than the others indicates that there are collisions on that cell.
                </t>
                <t>
                    Every HOUSEKEEPINGCOLLISION_PERIOD, the node executes the following steps:
                </t>
                <ol spacing="normal">
                    <li>
                        It computes, for each negotiated Tx cell with the parent (not for the autonomous cell), that cell's PDR.
                    </li>
                    <li>
                        Any cell that hasn't yet had NumTx divided by 2 since it was last reset is skipped in steps 3 and 4.
                        This avoids triggering cell relocation when the values of NumTx and NumTxAck are not statistically significant yet.
                    </li>
                    <li>
                        It identifies the cell with the highest PDR.
                    </li>
                    <li>
                        For any other cell, it compares its PDR against that of the cell with the highest PDR.
                        If the subtraction difference between the PDR of the cell and the highest PDR is larger than RELOCATE_PDRTHRES, it triggers the relocation of that cell using a 6P RELOCATE command.
                    </li>
                </ol>
                <t>
                    The RELOCATION for negotiated Rx cells is not supported by MSF. 
                </t>
            </section>
        </section>
        <section anchor="sec_signal" numbered="true" toc="default">
            <name>6P SIGNAL Command</name>
            <t>
                The 6P SIGNAL command is not used by MSF.
            </t>
        </section>
        <section anchor="sec_sfid" numbered="true" toc="default">
            <name>Scheduling Function Identifier</name>
            <t>
                The Scheduling Function Identifier (SFID) of MSF is 0.
                How the value of 0 was chosen is described in <xref target="sec_iana" format="default"/>.
            </t>
        </section>
        <section anchor="sec_celllist" numbered="true" toc="default">
            <name>Rules for CellList</name>
            <t>
                MSF uses two-step 6P Transactions exclusively.
                6P Transactions are only initiated by a node towards its parent.
                As a result, the cells to put in the CellList of a 6P ADD command, and in the candidate CellList of a RELOCATE command, are chosen by the node initiating the 6P Transaction.
                In both cases, the same rules apply:
            </t>
            <ul spacing="normal">
                <li>The CellList is <bcp14>RECOMMENDED</bcp14> to have five or more cells.</li>
                <li>Each cell in the CellList <bcp14>MUST</bcp14> have a different slotOffset value.</li>
                <li>For each cell in the CellList, the node <bcp14>MUST NOT</bcp14> have any scheduled cell on the same slotOffset.</li>
                <li>The slotOffset value of any cell in the CellList <bcp14>MUST NOT</bcp14> be the same as the slotOffset of the minimal cell (slotOffset=0).</li>
                <li>The slotOffset    of a cell in the CellList <bcp14>SHOULD</bcp14> be randomly and uniformly chosen among all the slotOffset values that satisfy the restrictions above.</li>
                <li>The channelOffset of a cell in the CellList <bcp14>SHOULD</bcp14> be randomly and uniformly chosen from [0..numFrequencies], where numFrequencies represents the number of frequencies a node can communicate on.</li>
            </ul>
            <t>
                As a consequence of random cell selection, there is a nonzero chance that nodes in the vicinity have installed cells with same slotOffset and channelOffset.
                An implementer <bcp14>MAY</bcp14> implement a strategy to monitor the candidate cells before adding them in CellList to avoid collision.
                For example, a node <bcp14>MAY</bcp14> maintain a candidate cell pool for the CellList.
                The candidate cells in the pool are preconfigured as Rx cells to promiscuously listen to detect transmissions on those cells.
                If transmissions that rely on <xref target="IEEE802154" format="default"/> are observed on one cell over multiple iterations of the schedule, that cell is probably used by a TSCH neighbor.
                It is moved out from the pool, and a new cell is selected as a candidate cell.
                The cells in CellList are picked from the candidate pool directly when required.
            </t>
        </section>
        <section anchor="sec_timeout" numbered="true" toc="default">
            <name>6P Timeout Value</name>
            <t>
                The timeout value is calculated for the worst case that a 6P response is received, which means the 6P response is sent out successfully at the very latest retransmission.
                And for each retransmission, it backs off with largest value.
                Hence the 6P timeout value is calculated as ((2<sup>MAXBE</sup>) - 1) * MAXRETRIES * SLOTFRAME_LENGTH, where:
            </t>
            <ul spacing="normal">
                <li>MAXBE, defined in <xref target="IEEE802154" format="default"/>,  is the maximum backoff exponent used.</li>
                <li>MAXRETRIES, defined in <xref target="IEEE802154" format="default"/>, is the maximum retransmission times.</li>
                <li>SLOTFRAME_LENGTH represents the length of slotframe.</li>
            </ul>
        </section>
        <section anchor="sec_ordering" numbered="true" toc="default">
            <name>Rule for Ordering Cells</name>
            <t>
                Cells are ordered by slotOffset first, channelOffset second.
            </t>
            <t>
                The following sequence is correctly ordered (each element represents the [slotOffset,channelOffset] of a cell in the schedule):
            </t>
            <t>
                [1,3],[1,4],[2,0],[5,3],[6,0],[6,3],[7,9]
            </t>
        </section>
        <section anchor="sec_metadata" numbered="true" toc="default">
            <name>Meaning of the Metadata Field</name>
            <t>
                The Metadata field is not used by MSF.
            </t>
        </section>
        <section anchor="sec_error" numbered="true" toc="default">
            <name>6P Error Handling</name>
            <t>
                <xref target="RFC8480" section="6.2.4" sectionFormat="of"/> lists the 6P return codes.
                <xref target="tab_error" format="default"/> lists the same error codes and the behavior a node implementing MSF <bcp14>SHOULD</bcp14> follow.
            </t>
            <table anchor="tab_error">
              <name>Recommended Behavior for Each 6P Error Code</name>
       
		<thead>
		  <tr>
		    
		    <th>Code</th>
		    <th><bcp14>RECOMMENDED</bcp14> Behavior</th>
		  </tr>
		</thead>
		<tbody>
		  <tr>
		    <td> RC_SUCCESS
		    </td><td> nothing</td>
		  </tr>
		  <tr>
		    
		    <td> RC_EOL
		    </td><td> nothing</td>
		  </tr>
		  <tr>
		    <td> RC_ERR
		    </td><td> quarantine</td>
		  </tr>
		  <tr>
		    <td> RC_RESET
		    </td><td> quarantine </td>
		  </tr>
		  <tr>
		    <td> RC_ERR_VERSION</td>
		    <td> quarantine</td>
		  </tr>
		  <tr>
		    <td> RC_ERR_SFID</td>
		    <td> quarantine</td>
		  </tr>
		  <tr>
		    <td> RC_ERR_SEQNUM</td>
		    <td> clear</td>
		  </tr>
		  <tr>
		    <td> RC_ERR_CELLLIST </td>
		    <td> clear</td>
		  </tr>
		  <tr>
		    <td> RC_ERR_BUSY</td>
		    <td> waitretry</td>
		  </tr>
		  <tr>
		    <td> RC_ERR_LOCKED</td>
		   <td> waitretry</td>
		  </tr>
		</tbody>
	      </table>
		  
            
            <t>
                The meaning of each behavior from <xref target="tab_error" format="default"/> is:
            </t>
            <dl newline="false">
                <dt>nothing:</dt>
                <dd>
                    Indicates that this return code is not an error.
                    No error handling behavior is triggered.
                </dd>
                <dt>clear:</dt>
                <dd>
                    Abort the 6P Transaction.
                    Issue a 6P CLEAR command to that neighbor (this command may fail at the link layer).
                    Remove all cells scheduled with that neighbor from the local schedule.
                </dd>
                <dt>quarantine:</dt>
                <dd>
                    Same behavior as for "clear".
                    In addition, remove the node from the neighbor and routing tables.
                    Place the node's identifier in a quarantine list for QUARANTINE_DURATION.
                    When in quarantine, drop all frames received from that node.
                </dd>
                <dt>waitretry:</dt>
                <dd>
                    Abort the 6P Transaction.
                    Wait for a duration randomly and uniformly chosen from [WAIT_DURATION_MIN,WAIT_DURATION_MAX].
                    Retry the same transaction.
                </dd>
            </dl>
        </section>
        <section anchor="sec_inconsistency" numbered="true" toc="default">
            <name>Schedule Inconsistency Handling</name>
            <t>
                The behavior when schedule inconsistency is detected is explained in <xref target="tab_error" format="default"/>, for 6P return code RC_ERR_SEQNUM.
            </t>
        </section>
        <section anchor="sec_constants" numbered="true" toc="default">
            <name>MSF Constants</name>
            <t>
                <xref target="tab_constants" format="default"/> lists MSF constants and their <bcp14>RECOMMENDED</bcp14> values.
            </t>
            <table anchor="tab_constants">
              <name>MSF Constants and Their <bcp14>RECOMMENDED</bcp14> Values</name>
	      <thead>
		<tr>
		  <th>Name</th>
		  <th><bcp14>RECOMMENDED</bcp14> value</th>
		</tr>
	      </thead>
	      <tbody>
		<tr>
		  
		  <td> SLOTFRAME_LENGTH</td>
		  <td>101 slots</td>
		</tr>
		<tr>
		  
		  <td> NUM_CH_OFFSET </td>
		  <td>16</td>
		</tr>
		<tr>
		  <td> MAX_NUM_CELLS</td>
		  <td>100</td>
		</tr>
		<tr>
		  <td> LIM_NUMCELLSUSED_HIGH</td>
		  <td>75</td>
		</tr>
		<tr>
		  <td> LIM_NUMCELLSUSED_LOW </td>
		  <td>25</td>
		</tr>
		<tr>
		  <td> MAX_NUMTX</td>
		  <td>256</td>
		</tr>
		<tr>
		  <td> HOUSEKEEPINGCOLLISION_PERIOD</td>
		  <td>1 min</td>
		</tr>
		<tr>
		  <td> RELOCATE_PDRTHRES</td>
		  <td>50 %</td>
		</tr>
		<tr>
		  <td> QUARANTINE_DURATION</td>
		  <td>5 min</td>
		</tr>
		<tr>
		  <td> WAIT_DURATION_MIN</td>
		  <td>30 s</td>
		</tr>
		<tr>
		  <td> WAIT_DURATION_MAX </td>
		  <td>60 s</td>
		</tr>
	      </tbody>

            </table>
        </section>
        <section anchor="sec_stats" numbered="true" toc="default">
            <name>MSF Statistics</name>
            <t>
                <xref target="tab_stats" format="default"/> lists MSF statistics and their <bcp14>RECOMMENDED</bcp14> widths.
            </t>
            <table anchor="tab_stats">
                <name>MSF Statistics and Their <bcp14>RECOMMENDED</bcp14> Widths</name>
                
                <thead>
		  <tr>
		    <th>Name</th>
		    <th><bcp14>RECOMMENDED</bcp14> width</th>
		  </tr>
		</thead>
		<tbody>
		  <tr>
		    <td> NumCellsElapsed</td>
		    <td>1 byte</td>
		  </tr>
		  <tr>
		    <td> NumCellsUsed</td>
		    <td>1 byte</td>
		  </tr>
		  <tr>
		    <td> NumTx</td>
		    <td>1 byte</td>
		  </tr>
		  <tr>
		    <td> NumTxAck</td>
		    <td>1 byte</td>
		  </tr>
		</tbody>
		
            </table>
        </section>
        <section anchor="sec_security" numbered="true" toc="default">
            <name>Security Considerations</name>
            <t>
                MSF defines a series of "rules" for the node to follow.
                It triggers several actions that are carried out by the protocols defined in the following specifications:
                "<xref target="RFC8180" format="title"/>" <xref target="RFC8180" format="default"/>,
                "<xref target="RFC8480" format="title"/>" <xref target="RFC8480" format="default"/>, and
                "<xref target="RFC9031" format="title"/>" <xref target="RFC9031" format="default"/>.
                Confidentiality and authentication of MSF control and data traffic are provided by these specifications whose security considerations continue to apply to MSF.
                In particular, MSF does not define a new protocol or packet format.
            </t>
            <t>
                MSF uses autonomous cells for initial bootstrap and the transport of join traffic.
                Autonomous cells are computed as a hash of nodes' EUI-64 addresses.
                This makes the coordinates of autonomous cell an easy target for an attacker, as EUI-64 addresses are visible on the wire and are not encrypted by the link-layer security mechanism.
                With the coordinates of autonomous cells available, the attacker can launch a selective jamming attack against any node's AutoRxCell.
                If the attacker targets a node acting as a JP, it can prevent pledges from using that JP to join the network.
                The pledge detects such a situation through the absence of a link-layer acknowledgment for its Join Request.
                As it is expected that each pledge will have more than one JP available to join the network, one available countermeasure for the pledge is to pseudorandomly select a new JP when the link to the previous JP appears bad.
                Such a strategy alleviates the issue of the attacker randomly jamming to disturb the network but does not help in the case the attacker is targeting a particular pledge.
                In that case, the attacker can jam the AutoRxCell of the pledge in order to prevent it from receiving the join response.
                This situation should be detected through the absence of a particular node from the network and handled by the network administrator through out-of-band means.
            </t>
            <t>
                MSF adapts to traffic containing packets from the IP layer. 
                It is possible that the IP packet has a nonzero DSCP (Differentiated Services Code Point) <xref target="RFC2474" format="default"/> value in its IPv6 header.
                The decision how to handle that packet belongs to the upper layer and is out of scope of MSF.
                As long as the decision is made to hand over to MAC layer to transmit, MSF will take that packet into account when adapting to traffic.
            </t>
            <t>
                Note that nonzero DSCP values may imply that the traffic originated at unauthenticated pledges (see <xref target="RFC9031" format="default"/>).
                The implementation at the IPv6 layer <bcp14>SHOULD</bcp14> rate limit this join traffic before it is passed to the 6top sublayer where MSF can observe it.
                If there is no rate limit for join traffic, intermediate nodes in the 6TiSCH network may be prone to a resource exhaustion attack, with the attacker injecting unauthenticated traffic from the network edge.
                The assumption is that the rate-limiting function is aware of the available bandwidth in the 6top Layer 3 bundle(s) towards a next hop, not directly from MSF, but from an interaction with the 6top sublayer that ultimately manages the bundles under MSF's guidance.
                How this rate limit is implemented is out of scope of MSF.
            </t>
        </section>
        <section anchor="sec_iana" numbered="true" toc="default">
            <name>IANA Considerations</name>
            <section anchor="sec_iana_sfid" numbered="true" toc="default">
                <name>MSF Scheduling Function Identifiers</name>
                <t>
                    This document adds the following number to the
                    "6P Scheduling Function Identifiers" subregistry,
                    part of the "IPv6 Over the TSCH Mode of IEEE 802.15.4 (6TiSCH)" registry,
                    as defined by <xref target="RFC8480" format="default"/>:
                </t>

                <table anchor="fig_iana_sfid">
                  <name>New SFID in the "6P Scheduling Function Identifiers" Subregistry</name>
		  <thead>
		    <tr>
		      <th>SFID</th>
		      <th>Name</th>
		      <th>Reference</th>
		    </tr>
		  </thead>
		  <tbody>
		    <tr>
		      <td>0</td>
		      <td>Minimal Scheduling Function (MSF)</td>
		      <td>RFC 9033</td>
		    </tr>
		  </tbody>
                </table>
		
                <t>
                    The SFID was chosen from the range 0-127, which has the registration procedure of IETF Review or IESG Approval <xref target="RFC8126"/>.
                </t>
            </section>
        </section>

    </middle>
    <back>

<displayreference target="I-D.ietf-6tisch-dtsecurity-zerotouch-join" to="ZEROTOUCH-JOIN"/> 

        <references>
            <name>References</name>
            <references>
                <name>Normative References</name>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8180.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8480.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6550.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2474.xml"/>


<reference anchor="RFC9031" target="https://www.rfc-editor.org/info/rfc9031">
  <front>
    <title>Constrained Join Protocol (CoJP) for 6TiSCH</title>
    <author initials="M" surname="Vučinić" fullname=" Mališa Vučinić" role="editor">
      <organization/>
    </author>
    <author initials="J" surname="Simon" fullname="Jonathan Simon">
     <organization/>
    </author>
    <author initials="K" surname="Pister" fullname="Kris Pister">
     <organization/>
    </author>
    <author initials="M" surname="Richardson" fullname="Michael Richardson">
     <organization/>
    </author>
    <date month="May" year="2021"/>
  </front>
  <seriesInfo name="RFC" value="9031"/>
  <seriesInfo name="DOI" value="10.17487/RFC9031"/>
</reference>

<reference anchor="RFC9032" target="https://www.rfc-editor.org/info/rfc9032">
  <front>
    <title>Encapsulation of 6TiSCH Join and Enrollment Information Elements</title>
    <author initials="D" surname="Dujovne" fullname="Diego Dujovne" role="editor">
      <organization/>
    </author>
    <author initials="M" surname="Richardson" fullname="Michael Richardson">
    <organization/>
    </author>
    <date month="May" year="2021"/>
  </front>
  <seriesInfo name="RFC" value="9032"/>
  <seriesInfo name="DOI" value="10.17487/RFC9032"/>
</reference>

<reference anchor="RFC9030" target="https://www.rfc-editor.org/info/rfc9030">
   <front>
      <title>An Architecture for IPv6 over the Time-Slotted Channel Hopping Mode of IEEE 802.15.4 (6TiSCH)</title>
      <author initials="P" surname="Thubert" fullname="Pascal Thubert" role="editor">
         <organization/>
      </author>
      <date month="May" year="2021"/>
   </front>
   <seriesInfo name="RFC" value="9030"/>
   <seriesInfo name="DOI" value="10.17487/RFC9030"/>
</reference>

      <reference anchor="IEEE802154" target="https://ieeexplore.ieee.org/document/7460875">
        <front>
            <title>IEEE Standard for Low-Rate Wireless Networks</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date month="April" year="2016"/>
        </front>
        <seriesInfo name="IEEE Standard" value="802.15.4-2015"/>
            <seriesInfo name="DOI" value=" 10.1109/IEEESTD.2016.7460875"/>
      </reference>

                <reference anchor="SAX-DASFAA">
                    <front>
                        <title> Performance in Practice of String Hashing Functions</title>
                        <author initials="M.V." surname="Ramakrishna"/>
                        <author initials="J" surname="Zobel"/>
                        <date year="1997"/>
                    </front>
                        <refcontent>DASFAA</refcontent>
                    <seriesInfo name="DOI" value="10.1142/9789812819536_0023"/>
                </reference>
            </references>
            <references>
                <name>Informative References</name>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7554.xml"/>
                <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-6tisch-dtsecurity-zerotouch-join.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6206.xml"/>
                <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8505.xml"/>
            </references>
        </references>
        <section anchor="sec_hash_function" numbered="true" toc="default">
            <name>Example Implementation of the SAX Hash Function</name>
            <t>
                To support interoperability, this section provides an example  implementation of the SAX hash function <xref target="SAX-DASFAA" format="default"/>.
                The input parameters of the function are:
            </t>
            <ul spacing="normal">
                <li>T, which is the hashing table length.</li>
                <li>c, which is the characters of string s, to be hashed.</li>
            </ul>
            <t>
                In MSF, the T is replaced by the length of slotframe 1.
                String s is replaced by the node EUI-64 address. The characters of the string, c0 through c7, are the eight bytes of the EUI-64 address.
            </t>
            <t>
                The SAX hash function requires shift operation, which is defined as follow:
            </t>
            <ul spacing="normal">
                <li>L_shift(v,b), which refers to the left shift of variable v by b bits</li>
                <li>R_shift(v,b), which refers to the right shift of variable v by b bits</li>
            </ul>
            <t>
                The steps to calculate the hash value of SAX hash function are:
            </t>
            <ol spacing="normal">
                <li anchor="sax_step1">Initialize variable h, which is the intermediate hash value, to h0 and variable i, which is the index of the bytes of the EUI-64 address, to 0.</li>
                <li anchor="sax_step2">Sum the value of L_shift(h,l_bit), R_shift(h,r_bit), and ci.</li>
                <li anchor="sax_step3">Calculate the result of the exclusive OR between the sum value in <xref target="sax_step2" format="none">Step 2</xref> and h.</li>
                <li anchor="sax_step4">Modulo the result of <xref target="sax_step3" format="none">Step 3</xref> by T.</li>
                <li anchor="sax_step5">Assign the result of <xref target="sax_step4" format="none">Step 4</xref> to h.</li>
                <li anchor="sax_step6">Increase i by 1.</li>
                <li anchor="sax_step7">Repeat <xref target="sax_step2" format="none">Step 2</xref> to <xref target="sax_step6" format="none">Step 6</xref> until i reaches to 8. </li>
            </ol>
            <t>
                The value of variable h is the hash value of the SAX hash function.
            </t>
            <t>
                The values of h0, l_bit, and r_bit in <xref target="sax_step1" format="none">Step 1</xref> and <xref target="sax_step2" format="none">Step 2</xref> are configured as: 
            </t>
                <t indent="6">h0 = 0</t>
                <t indent="6">l_bit = 0</t>
                <t indent="6">r_bit = 1</t>
            <t>
                The appropriate values of l_bit and r_bit could vary depending on the set of nodes' EUI-64 address.
                How to find those values is out of the scope of this specification. 
            </t>
     </section>
 
        <section anchor="sec_contributors" numbered="false">
            <name>Contributors</name>
              <contact fullname="Beshr Al Nahas"> 
                 <organization>Chalmers University</organization> 
                 <address>
                    <email>beshr@chalmers.se</email>
                 </address>
              </contact>
              <contact fullname="Olaf Landsiedel"> 
                 <organization>Chalmers University</organization> 
                 <address>
                    <email>olafl@chalmers.se</email>
                 </address>
              </contact>
              <contact fullname="Yasuyuki Tanaka"> 
                 <organization>Toshiba</organization> 
                 <address>
                    <email>yatch1.tanaka@toshiba.co.jp</email>
                 </address>
              </contact>
        </section>       
    </back>
</rfc>
