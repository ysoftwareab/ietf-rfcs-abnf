<?xml version="1.0" encoding="UTF-8"?>

<!-- [CS] updated by Chris 03/10/21 -->

<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.13 -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-lpwan-coap-static-context-hc-19" number="8824" obsoletes="" updates="" submissionType="IETF" category="std" consensus="true" xml:lang="en" symRefs="true" sortRefs="true"
tocInclude="true" version="3">

  <!-- xml2rfc v2v3 conversion 3.5.0 -->
  <front>
    <title abbrev="SCHC for CoAP">Static Context Header Compression (SCHC) for the Constrained&nbsp;Application&nbsp;Protocol&nbsp;(CoAP)</title>

    <seriesInfo name="RFC" value="8824"/>
    <author initials="A." surname="Minaburo" fullname="Ana Minaburo">
      <organization>Acklio</organization>
      <address>
        <postal>
          <street>1137A avenue des Champs Blancs</street>
          <city>Cesson-Sevigne Cedex</city>
	  <code>35510</code>
          <country>France</country>
        </postal>
        <email>ana@ackl.io</email>
      </address>
    </author>
    <author initials="L." surname="Toutain" fullname="Laurent Toutain">
      <organization abbrev="IMT Atlantique">Institut MINES TELECOM; IMT Atlantique</organization>
      <address>
        <postal>
          <street>2 rue de la Chataigneraie</street>
	  <extaddr>CS 17607</extaddr>
          <city>Cesson-Sevigne Cedex</city>
          <code>35576</code>
          <country>France</country>
        </postal>
        <email>Laurent.Toutain@imt-atlantique.fr</email>
      </address>
    </author>

    <author initials="R." surname="Andreasen" fullname="Ricardo Andreasen">
      <organization>Universidad de Buenos Aires</organization>
      <address>
        <postal>
          <street>Av. Paseo Colon 850</street>
          <city>Ciudad Autonoma de Buenos Aires</city>
          <code>C1063ACV</code>
          <country>Argentina</country>
        </postal>
        <email>randreasen@fi.uba.ar</email>
      </address>
    </author>
    <date year="2021" month="June"/>

<keyword>header compression</keyword>
<keyword>fragmentation</keyword>
<keyword>IoT</keyword>
<keyword>constrained networks</keyword>
<keyword>LPWAN</keyword>
<keyword>sensor network</keyword>
<keyword>constrained node</keyword>
<keyword>wireless sensor network</keyword>
<keyword>core</keyword>
<keyword>OSCORE</keyword>

    <abstract>
      <t>This document defines how to compress Constrained Application Protocol (CoAP) headers using the Static Context Header Compression and fragmentation (SCHC) framework. 
   SCHC defines a header compression mechanism adapted for Constrained Devices. 
   SCHC uses a static description of the header to reduce the header's redundancy and size.
   While RFC 8724 describes the SCHC compression and fragmentation framework,
   and its application for IPv6/UDP headers, this document applies SCHC to CoAP headers. The CoAP header structure differs from 
   IPv6 and UDP, since CoAP uses a flexible header with a variable number of options, themselves of variable length. The CoAP message format is asymmetric: the request messages have a header format different from the format in the response messages.
 This
   specification gives guidance on applying SCHC to flexible headers and how to leverage the asymmetry for more efficient compression Rules.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="Introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>The Constrained Application Protocol (CoAP) <xref target="RFC7252" format="default"/> is a command/response protocol designed for microcontrollers with small RAM and ROM and optimized for services based on REST (Representational State Transfer). Although the Constrained Devices are a leading factor in the design of CoAP, a CoAP header's size is still too large for LPWANs (Low-Power Wide-Area Networks). Static Context Header Compression and fragmentation (SCHC) over CoAP headers is required to increase performance or to use CoAP over LPWAN technologies.
</t>
      <t><xref target="RFC8724" format="default"/> defines the SCHC framework, which includes a header compression mechanism for LPWANs that is based on a static context. 
<xref target="RFC8724" sectionFormat="of" section="5"/> explains where compression and decompression occur in the architecture. The SCHC compression scheme assumes as a prerequisite that both endpoints know the static context before transmission. The way the context is configured, provisioned, or exchanged is out of this document's scope.</t>
      <t>CoAP is an application protocol, so CoAP compression requires installing common Rules between the two SCHC instances. SCHC compression may apply at two different levels: at IP and UDP in the LPWAN and another at the application level for CoAP. These two compression techniques may be independent. Both follow the same principle as that described in <xref target="RFC8724" format="default"/>. As different entities manage the CoAP compression process at different levels, the SCHC Rules driving the compression/decompression are also different. <xref target="RFC8724" format="default"/> describes how to use SCHC for IP and UDP headers.       This document specifies how to apply SCHC compression to CoAP headers.</t>
      <t>SCHC compresses and decompresses headers based on common contexts between Devices. The SCHC context includes multiple Rules. Each Rule can match the header fields to specific values or ranges of values. If a Rule matches, the matched header fields are replaced by the RuleID and the Compression Residue that contains the residual bits of the compression. Thus, different Rules may correspond to different protocol headers in the packet that a Device expects to send or receive.</t>
      <t>A Rule describes the packets' entire header with an ordered list of Field Descriptors; see <xref target="RFC8724" sectionFormat="of" section="7"/>. Thereby, each description contains the Field ID (FID), Field Length (FL), and Field Position (FP), as well as a Direction Indicator (DI) (upstream, downstream, and bidirectional) and some associated Target Values (TVs). The DI is used for compression to give the best TV to the FID when these values differ in their transmission direction. So, a field may be described several times.</t>
      <t>A Matching Operator (MO) is associated with each header Field Descriptor. The Rule is selected if all the MOs fit the TVs for all fields of the incoming header.
A Rule cannot be selected if the message contains a field that is unknown to the SCHC compressor.</t>
      <t>In that case, a Compression/Decompression Action (CDA) associated with each field gives the method to compress and decompress each field. 
Compression mainly results in one of four actions:</t>
      <ul spacing="normal">
        <li>send the field value (value-sent),</li>
        <li>send nothing (not-sent),</li>
        <li>send some Least Significant Bits (LSBs) of the field, or</li>
        <li>send an index (mapping-sent).</li>
      </ul>
      <t>After applying the compression, there may be some bits to be sent.
These values are called "Compression Residue".</t>
      <t>SCHC is a general mechanism applied to different protocols, with the exact Rules to be used depending on the protocol and the application. <xref target="RFC8724" sectionFormat="of" section="10"/> describes the compression scheme for IPv6 and UDP headers. This document targets CoAP header compression using SCHC.</t>
      <section anchor="terminology" numbered="true" toc="default">
        <name>Terminology</name>
       <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
       "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>",
       "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>",
       "<bcp14>SHOULD NOT</bcp14>",
       "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
       "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document
       are to be interpreted as described in BCP&nbsp;14
       <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only
       when, they appear in all capitals, as shown here.</t>
      </section>
    </section>
    <section anchor="schc-applicability-to-coap" numbered="true" toc="default">
      <name>SCHC Applicability to CoAP</name>
      <t>SCHC compression for CoAP headers <bcp14>MAY</bcp14> be done in conjunction with the lower layers (IPv6/UDP) or independently. The SCHC adaptation layers, described in <xref target="RFC8724" sectionFormat="of" section="5"/>, may be used as shown in Figures&nbsp;<xref target="Fig-SCHCCOAP1" format="counter"/>, <xref target="Fig-SCHCCOAP2" format="counter"/>, and <xref target="Fig-SCHCCOAP3" format="counter"/>.</t>
      <t>In the first example, <xref target="Fig-SCHCCOAP1" format="default"/>, a Rule compresses the complete header stack from IPv6 to CoAP.  In this case, the Device and the Network Gateway (NGW) perform SCHC C/D (SCHC Compression/Decompression; see <xref target="RFC8724"/>). The application communicating with the Device does not implement SCHC C/D.</t>
      <figure anchor="Fig-SCHCCOAP1">
        <name>Compression/Decompression at the LPWAN Boundary</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
      (Device)            (NGW)                              (App)

      +--------+                                           +--------+
      |  CoAP  |                                           |  CoAP  |
      +--------+                                           +--------+
      |  UDP   |                                           |  UDP   |
      +--------+     +----------------+                    +--------+
      |  IPv6  |     |      IPv6      |                    |  IPv6  |
      +--------+     +--------+-------+                    +--------+
      |  SCHC  |     |  SCHC  |       |                    |        |
      +--------+     +--------+       +                    +        +
      |  LPWAN |     | LPWAN  |       |                    |        |
      +--------+     +--------+-------+                    +--------+
          ((((LPWAN))))             ------   Internet  ------
]]></artwork>
      </figure>
      <t><xref target="Fig-SCHCCOAP1" format="default"/> shows the use of SCHC header compression above Layer 2 in the Device and the NGW. The SCHC layer receives non-encrypted packets and can apply compression Rules to all the headers in the stack. On the other end, the NGW receives the SCHC packet and reconstructs the headers using the Rule and the Compression Residue. After the decompression, the NGW forwards the IPv6 packet toward the destination. The same process applies in the other direction when a non-encrypted packet arrives at the NGW. Thanks to the IP forwarding based on the IPv6 prefix, the NGW identifies the Device and compresses headers using the Device's Rules.</t>
      <t>In the second example, <xref target="Fig-SCHCCOAP2" format="default"/>, SCHC compression is applied in the CoAP layer, compressing the CoAP header independently of the other layers. The RuleID, Compression Residue, and CoAP payload are encrypted using a mechanism such as DTLS. Only the other end (App) can decipher the information. If needed, layers below use SCHC to compress the header as defined in <xref target="RFC8724" format="default"/> (represented by dotted lines in the figure).</t>
      <t>This use case needs an end-to-end context initialization between the Device and the application. The context initialization is out of scope for this document.</t>
      <figure anchor="Fig-SCHCCOAP2">
        <name>Standalone CoAP End-to-End Compression/Decompression</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
      (Device)            (NGW)                               (App)

      +--------+                                           +--------+
      |  CoAP  |                                           |  CoAP  |
      +--------+                                           +--------+
      |  SCHC  |                                           |  SCHC  |
      +--------+                                           +--------+
      |  DTLS  |                                           |  DTLS  |
      +--------+                                           +--------+
      .  udp   .                                           .  udp   .
      ..........     ..................                    ..........
      .  ipv6  .     .      ipv6      .                    .  ipv6  .
      ..........     ..................                    ..........
      .  schc  .     .  schc  .       .                    .        .
      ..........     ..........       .                    .        .
      .  lpwan .     . lpwan  .       .                    .        .
      ..........     ..................                    ..........
          ((((LPWAN))))             ------   Internet  ------
]]></artwork>
      </figure>
      <t>The third example, <xref target="Fig-SCHCCOAP3" format="default"/>, shows the use of Object Security for Constrained RESTful Environments (OSCORE) <xref target="RFC8613" format="default"/>. In this case, SCHC needs two Rules to compress the CoAP header. A first Rule focuses on the Inner header. The result of this first compression is encrypted using the OSCORE mechanism. Then, a second Rule compresses the Outer header, including the OSCORE options.</t>
      <figure anchor="Fig-SCHCCOAP3">
        <name>OSCORE Compression/Decompression</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
      (Device)            (NGW)                              (App)

      +--------+                                           +--------+
      |  CoAP  |                                           |  CoAP  |
      |  Inner |                                           |  Inner |
      +--------+                                           +--------+
      |  SCHC  |                                           |  SCHC  |
      |  Inner |                                           |  Inner |
      +--------+                                           +--------+
      |  CoAP  |                                           |  CoAP  |
      |  Outer |                                           |  Outer |
      +--------+                                           +--------+
      |  SCHC  |                                           |  SCHC  |
      |  Outer |                                           |  Outer |
      +--------+                                           +--------+
      .  udp   .                                           .  udp   .
      ..........     ..................                    ..........
      .  ipv6  .     .      ipv6      .                    .  ipv6  .
      ..........     ..................                    ..........
      .  schc  .     .  schc  .       .                    .        .
      ..........     ..........       .                    .        .
      .  lpwan .     . lpwan  .       .                    .        .
      ..........     ..................                    ..........  
          ((((LPWAN))))             ------   Internet  ------
]]></artwork>
      </figure>
      <t>In the case of several SCHC instances, as shown in Figures&nbsp;<xref target="Fig-SCHCCOAP2" format="counter"/> and <xref target="Fig-SCHCCOAP3" format="counter"/>, the Rules may come from different provisioning domains.</t>
      <t>This document focuses on CoAP compression, as represented by the dashed boxes in the previous figures.</t>
    </section>
    <section anchor="coap-headers-compressed-with-schc" numbered="true" toc="default">
      <name>CoAP Headers Compressed with SCHC</name>
      <t>The use of SCHC over the CoAP header applies the same description and compression/decompression techniques as the technique used for IP and UDP, as explained in <xref target="RFC8724" format="default"/>. For CoAP, the SCHC Rules description uses the direction information to optimize the compression by reducing the number of Rules needed to compress headers. The Field Descriptor <bcp14>MAY</bcp14> define both request/response headers and TVs in the same Rule, using the DI to indicate the header type.
</t>
      <t>As for other header compression protocols, when the compressor does not find a correct Rule to compress the header, the packet <bcp14>MUST</bcp14> be sent uncompressed using the RuleID dedicated to this purpose, and where the Compression Residue is the complete header of the packet. See <xref target="RFC8724" sectionFormat="of" section="6"/>.
</t>
      <section anchor="differences-between-coap-and-udpip-compression" numbered="true" toc="default">
        <name>Differences between CoAP and UDP/IP Compression</name>
        <t>CoAP compression differs from IPv6 and UDP compression in the following aspects:</t>
        <ul spacing="normal">
          <li>
            <t>The CoAP message format is asymmetric; the headers are different for a request or a response. 
For example, the Uri-Path option is mandatory in the request, and it might not be present in the response. 
A request might contain an Accept option, and the response might include a Content-Format option. 
In comparison, the IPv6 and UDP returning path swaps the value of some fields in the header. However, all the directions have the same fields (e.g., source and destination address fields).  </t>
            <t>
<xref target="RFC8724" format="default"/> defines the use of a DI in the
Field Descriptor, which allows a single Rule to process a message
header differently, depending on the direction.</t>
          </li>
          <li>Even when a field is "symmetric" (i.e., found in both directions), the values carried in each direction are different.
The compression may use a "match-mapping" MO to limit the range of expected values 
in a particular direction and reduce the Compression Residue's size.
Through the DI, a Field Descriptor in the Rules splits the possible field value into two parts,
one for each direction. For instance, if a client sends only Confirmable (CON) requests <xref target="RFC7252"/>, the Type can be elided by compression,
and the answer may use one single bit to carry either the ACK or Reset (RST) type.
The field Code has the same behavior: the 0.0X code format value in the request and the Y.ZZ code format in the response.
</li>
          <li>
            <t>In SCHC, the Rule defines the different header fields' length, so SCHC does not need to send it.
In IPv6 and UDP headers, the fields have a fixed size, known by definition.
On the other hand, some CoAP header fields have variable lengths, and the Rule description specifies it.
For example, in a Uri-Path or Uri-Query, the Token size may vary from 0 to 8 bytes,
and the CoAP options use the Type-Length-Value encoding format.  </t>
            <t>
When doing SCHC compression of a variable-length field,
<xref target="RFC8724" sectionFormat="of" section="7.4.2"/> offers the option of defining a function for the Field Length in the Field Descriptor to know the length before compression. If the Field Length is unknown, the Rule will set it as a variable, and SCHC will send the compressed field's length in the Compression Residue.</t>
          </li>
          <li>A field can appear several times in the CoAP headers.
It is found typically for elements of a URI (path or queries).
The SCHC specification <xref target="RFC8724" format="default"/> allows a FID to appear several times in the Rule
and uses the Field Position (FP) to identify the correct instance, thereby removing the MO's ambiguity.</li>
          <li>Field Lengths defined in CoAP can be too large when it comes to LPWAN traffic constraints.
For instance, this is particularly true for the Message ID field and the Token field.
SCHC uses different MOs to perform the compression. See
<xref target="RFC8724" sectionFormat="of" section="7.4"/>.
In this case, SCHC can apply the Most Significant Bits (MSBs) MO to reduce the information carried on LPWANs.</li>
        </ul>
      </section>
    </section>
    <section anchor="CoAPcomp" numbered="true" toc="default">
      <name>Compression of CoAP Header Fields</name>
      <t>This section discusses the compression of the different CoAP header fields.  CoAP compression with SCHC follows the information provided in <xref target="RFC8724" sectionFormat="of" section="7.1"/>.</t>
      <section anchor="coap-version-field" numbered="true" toc="default">
        <name>CoAP Version Field</name>
        <t>The CoAP version is bidirectional and <bcp14>MUST</bcp14> be elided during  SCHC compression, since it always contains the same value.
In the future, or if a new version of CoAP is defined, new Rules will be needed to avoid ambiguities between versions.</t>
      </section>
      <section anchor="coap-type-field" numbered="true" toc="default">
        <name>CoAP Type Field</name>
        <t>CoAP <xref target="RFC7252" format="default"/> has four types of messages: two requests (CON, NON), one response (ACK), and one empty message (RST).</t>
        <t>The SCHC compression scheme <bcp14>SHOULD</bcp14> elide this field if, for instance, a client is sending only Non-confirmable (NON) messages or only CON messages. 
For the RST message, SCHC may use a dedicated Rule. For other usages, SCHC can use a "match-mapping" MO.</t>
      </section>
      <section anchor="coap-code-field" numbered="true" toc="default">
        <name>CoAP Code Field</name>
        <t>The Code field, defined in an IANA registry <xref target="RFC7252" format="default"/>, indicates the Request Method used in CoAP.
 The compression of the CoAP Code field follows the same principle as that of the CoAP Type field. If the Device plays a specific role, SCHC may split the code values into two Field Descriptors: (1) the request codes with the 0 class and (2) the response values. SCHC will use the DI to identify the correct value in the packet.</t>
        <t>If the Device only implements a CoAP client, SCHC compression may reduce the request code to the set of requests the client can process.</t>
        <t>For known values, SCHC can use a "match-mapping" MO. If SCHC cannot compress the Code field, it will send the values in the Compression Residue.</t>
      </section>
      <section anchor="coap-message-id-field" numbered="true" toc="default">
        <name>CoAP Message ID Field</name>
        <t>SCHC can compress the Message ID field with the "MSB" MO and the "LSB" CDA. 
See <xref target="RFC8724" sectionFormat="of" section="7.4"/>.</t>
      </section>
      <section anchor="coap-token-fields" numbered="true" toc="default">
        <name>CoAP Token Fields</name>
        <t>CoAP defines the Token using two CoAP fields: Token Length in the
 mandatory header and Token Value directly following the mandatory
 CoAP header.
</t>
        <t>SCHC processes the Token Length as it would any header field. If the value does not change, the size can be stored in the TV and elided during the transmission. Otherwise, SCHC will send the Token Length in the Compression Residue.</t>
        <t>For the Token Value, SCHC <bcp14>MUST NOT</bcp14> send it as 
variable-length data in the Compression Residue, to avoid ambiguity with the Token Length. Therefore, SCHC <bcp14>MUST</bcp14> use the Token Length value to define the size of the Compression Residue. SCHC designates a specific function, "tkl", that the Rule <bcp14>MUST</bcp14> use to complete the Field Descriptor. During the decompression, this function returns the value contained in the Token Length field.</t>
      </section>
    </section>
    <section anchor="coap-options" numbered="true" toc="default">
      <name>CoAP Options</name>
      <t>CoAP defines options placed after the basic header, ordered by option number; see <xref target="RFC7252" format="default"/>. Each Option instance in a message uses
the format Delta-Type (D-T), Length (L), Value (V). The SCHC Rule builds the description of the option by using the following:</t>

<ul spacing="normal">
<li>in the FID: the option number built from the D-T;</li>
<li>in the TV: the option value; and</li>
<li>for the Option Length: the information provided in Sections&nbsp;<xref target="RFC8724" section="7.4.1" sectionFormat="bare"/> and <xref target="RFC8724" section="7.4.2" sectionFormat="bare"/> of <xref target="RFC8724"/>.</li>
</ul>

<t>When the Option Length has a well-known size, the Rule may keep the length value. Therefore, SCHC compression does not send it. Otherwise, SCHC compression carries the length of the Compression Residue, in addition to the Compression Residue value.</t>
      <t>CoAP requests and responses do not include the same options. So, compression Rules may reflect this asymmetry by tagging the DI.</t>
      <t>Note that length coding differs between CoAP options and SCHC variable size Compression Residue.</t>
      <t>The following sections present how SCHC compresses some specific CoAP options.</t>
      <t>If CoAP introduces a new option, the SCHC Rules <bcp14>MAY</bcp14> be updated, and the new FID description <bcp14>MUST</bcp14> be assigned to allow its compression.
Otherwise, if no Rule describes this new option, SCHC compression is not achieved, and SCHC sends the CoAP header without compression.</t>
      <section anchor="coap-content-and-accept-options" numbered="true" toc="default">
        <name>CoAP Content and Accept Options</name>
        <t>If the client expects a single value, it can be stored in the TV and elided during the transmission. 
Otherwise, if the client expects several possible values, a "match-mapping" MO  <bcp14>SHOULD</bcp14> be used to limit the Compression Residue's size. If not, SCHC has to send the option value in the Compression Residue (fixed or variable length).</t>
      </section>
      <section anchor="coap-option-max-age-uri-host-and-uri-port-fields" numbered="true" toc="default">
        <name>CoAP Option Max-Age, Uri-Host, and Uri-Port Fields</name>
        <t>SCHC compresses these three fields in the same way. When the values of these options are known, SCHC can elide these fields.
If the option uses well-known values, SCHC can use a "match-mapping" MO. Otherwise, SCHC will use the "value-sent" MO, and the Compression Residue will send these options' values.</t>
      </section>
      <section anchor="coap-option-uri-path-and-uri-query-fields" numbered="true" toc="default">
        <name>CoAP Option Uri-Path and Uri-Query Fields</name>
        <t>The Uri-Path and Uri-Query fields are repeatable options; this means that in the CoAP header, they may appear several times with different values. The SCHC Rule description uses the FP to distinguish the different instances in the path.</t>
        <t>To compress repeatable field values, SCHC may use a "match-mapping" MO to reduce the size of variable paths or queries. In these cases, to optimize the compression, several elements can be regrouped into a single entry. The numbering of elements does not change, and the first matching element sets the MO comparison.</t>

        <t>In <xref target="Table-complex-path" format="default"/>, SCHC can use a single bit in the Compression Residue to code one of the two paths. 
If regrouping were not allowed, 2 bits in the Compression Residue would be needed. SCHC sends the third path element as a variable size in the Compression Residue.</t>

<table anchor="Table-complex-path">
  <name>Complex Path Example</name>
  <thead>
    <tr>
      <th align="center">Field</th>
      <th align="center">FL</th>
      <th align="center">FP</th>
      <th align="center">DI</th>
      <th align="center">TV</th>
      <th align="center">MO</th>
      <th align="center">CDA</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Uri-Path</td>
      <td></td>
      <td>1</td>
      <td>Up</td>
      <td>["/a/b",&br;"/c/d"]</td>
      <td>match-&br;mapping</td>
      <td>mapping-sent</td>
    </tr>
    <tr>
      <td>Uri-Path</td>
      <td>var</td>
      <td>3</td>
      <td>Up</td>
      <td></td>
      <td>ignore</td>
      <td>value-sent</td>
    </tr>
  </tbody>
</table>

        <t>The length of Uri-Path and Uri-Query may be known when the Rule is defined. In any case, SCHC <bcp14>MUST</bcp14> set the Field Length to a variable value. The Compression Residue size is expressed in bytes.</t>
        <t>SCHC compression can use the MSB MO to a Uri-Path or Uri-Query element. However, attention to the length is important because the MSB value is in bits, and the size <bcp14>MUST</bcp14> always be a multiple of 8 bits.</t>
        <t>The length sent at the beginning of a variable-length Compression Residue indicates the LSB's size in bytes.</t>
        <t>For instance, for a CORECONF path /c/X6?k=eth0, the Rule description can be as follows (<xref target="Table-CoMicompress"/>):</t>

<table anchor="Table-CoMicompress">
  <name>CORECONF URI Compression</name>
  <thead>
    <tr>
      <th align="center">Field</th>
      <th align="center">FL</th>
      <th align="center">FP</th>
      <th align="center">DI</th>
      <th align="center">TV</th>
      <th align="center">MO</th>
      <th align="center">CDA</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Uri-Path</td>
      <td></td>
      <td>1</td>
      <td>Up</td>
      <td>"c"</td>
      <td>equal</td>
      <td>not-sent</td>
    </tr>
    <tr>
      <td>Uri-Path</td>
      <td>var</td>
      <td>2</td>
      <td>Up</td>
      <td></td>
      <td>ignore</td>
      <td>value-sent</td>
    </tr>
    <tr>
      <td>Uri-Query</td>
      <td>var</td>
      <td>1</td>
      <td>Up</td>
      <td>"k="</td>
      <td>MSB(16)</td>
      <td>LSB</td>
    </tr>
  </tbody>
</table>

        <t><xref target="Table-CoMicompress" format="default"/> shows the Rule description for a Uri-Path and a Uri-Query. SCHC compresses the first part of the Uri-Path with a "not-sent" CDA.
SCHC will send the second element of the Uri-Path with the length (i.e., 0x2 "X6") followed by the query option (i.e., 0x4 "eth0").
</t>
        <section anchor="variable-number-of-path-or-query-elements" numbered="true" toc="default">
          <name>Variable Number of Path or Query Elements</name>
          <t>SCHC fixed the number of Uri-Path or Uri-Query elements in a Rule at
the Rule creation time. If the number varies, SCHC <bcp14>SHOULD</bcp14> either</t>
<ul spacing="normal">
<li>create several Rules to cover all possibilities or</li>
<li>create a Rule that defines several entries for Uri-Path to cover the longest path and send a Compression Residue with a length of 0 to indicate that a Uri-Path entry is empty.</li>
</ul>
<t>However, this adds 4 bits to the variable Compression Residue size. See 
<xref target="RFC8724" sectionFormat="of" section="7.4.2"/>.</t>
        </section>
      </section>
      <section anchor="coap-option-size1-size2-proxy-uri-and-proxy-scheme-fields" numbered="true" toc="default">
        <name>CoAP Option Size1, Size2, Proxy-URI, and Proxy-Scheme Fields</name>

        <t>The SCHC Rule description <bcp14>MAY</bcp14> define sending some field values by setting the TV to "not-sent", the MO to "ignore", and the CDA to "value-sent". A Rule <bcp14>MAY</bcp14> also use a "match-mapping" MO when there are different options for the same FID. Otherwise, the Rule sets the TV to the value, the MO to "equal", and the CDA to "not-sent".</t>
      </section>
      <section anchor="coap-option-etag-if-match-if-none-match-location-path-and-location-query-fields" numbered="true" toc="default">
        <name>CoAP Option ETag, If-Match, If-None-Match, Location-Path, and Location-Query Fields</name>
        <t>A Rule entry cannot store these fields' values. The Rule description <bcp14>MUST</bcp14> always send these values in the Compression Residue.</t>
      </section>
    </section>
    <section anchor="schc-compression-of-coap-extension-rfcs" numbered="true" toc="default">
      <name>SCHC Compression of CoAP Extensions</name>

      <section anchor="block" numbered="true" toc="default">
        <name>Block</name>
        <t>When a packet uses a Block option <xref target="RFC7959" format="default"/>, SCHC compression <bcp14>MUST</bcp14> send its content in the Compression Residue. 
The SCHC Rule describes an empty TV with the MO set to "ignore" and the CDA set to "value-sent".
The Block option allows fragmentation at the CoAP level that is compatible with SCHC fragmentation.
Both fragmentation mechanisms are complementary, and the node may use them for the same packet as needed.</t>
      </section>
      <section anchor="observe" numbered="true" toc="default">
        <name>Observe</name>
        <t><xref target="RFC7641" format="default"/> defines the Observe Option. The SCHC Rule description will not define the TV but will set the MO to "ignore" and the CDA to "value-sent". SCHC does not limit the maximum size for this option (3 bytes). To reduce the transmission size, either the Device implementation <bcp14>MAY</bcp14> limit the delta between two consecutive values or a proxy can modify the increment.</t>
        <t>Since the Observe Option <bcp14>MAY</bcp14> use a RST message to inform a server that the client does not require the Observe response, a specific SCHC Rule <bcp14>SHOULD</bcp14> exist to allow the message's compression with the RST type.</t>
      </section>
      <section anchor="no-response" numbered="true" toc="default">
        <name>No-Response</name>
        <t><xref target="RFC7967" format="default"/> defines a No-Response option limiting the responses made by a server to a request. Different behaviors exist while using this option to limit the responses made by a server to a request. If both ends know the value, then the SCHC Rule will describe a TV to this value, with the MO set to "equal" and the CDA set to "not-sent".</t>
        <t>Otherwise, if the value is changing over time, the SCHC Rule will set the MO to "ignore" and the CDA to "value-sent". The Rule may also use a "match-mapping" MO to compress this option.</t>
      </section>
      <section anchor="Sec-OSCORE" numbered="true" toc="default">
        <name>OSCORE</name>
        <t>OSCORE <xref target="RFC8613" format="default"/> defines end-to-end protection for CoAP messages.
This section describes how SCHC Rules can be applied to compress OSCORE-protected messages.</t>

        <t><xref target="Fig-OSCORE-Option" format="default"/> shows the OSCORE option value encoding defined in 
<xref target="RFC8613" sectionFormat="of" section="6.1"/>, where the first byte specifies the content of the OSCORE options using flags. The three most significant bits of this byte are reserved and always set to 0. Bit h, when set, indicates the presence of the kid context field in the option. Bit k, when set, indicates the presence of a kid field. The three least significant bits, n, indicate the length of the piv (Partial Initialization Vector) field in bytes. When n = 0, no piv is present.</t>

        <figure anchor="Fig-OSCORE-Option">
          <name>OSCORE Option</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
      0 1 2 3 4 5 6 7 <--------- n bytes ------------->
     +-+-+-+-+-+-+-+-+---------------------------------
     |0 0 0|h|k|  n  |      Partial IV (if any) ...    
     +-+-+-+-+-+-+-+-+---------------------------------
     |               |                                |
     |<--  CoAP   -->|<------ CoAP OSCORE_piv ------> |
        OSCORE_flags 

      <- 1 byte -> <------ s bytes ----->
     +------------+----------------------+-----------------------+
     | s (if any) | kid context (if any) | kid (if any)      ... |
     +------------+----------------------+-----------------------+
     |                                   |                       |
     | <------ CoAP OSCORE_kidctx ------>|<-- CoAP OSCORE_kid -->|
]]></artwork>
        </figure>
        <t>The flag byte is followed by the piv field, the kid context field, and the kid field, in that order, and, if present, 
the kid context field's length (in bytes) is encoded in the first byte, denoted by "s".
</t>
        <t>To better perform OSCORE SCHC compression, the Rule description needs to identify the OSCORE option and the fields it contains. Conceptually, it discerns up to four distinct pieces of information within the OSCORE option: the flag bits, the piv, the kid context, and the kid. The SCHC Rule splits the OSCORE option into four Field Descriptors in order to compress them:
</t>
        <ul spacing="normal">
          <li>CoAP OSCORE_flags</li>
          <li>CoAP OSCORE_piv</li>
          <li>CoAP OSCORE_kidctx</li>
          <li>CoAP OSCORE_kid</li>
        </ul>
        <t><xref target="Fig-OSCORE-Option" format="default"/> shows the OSCORE option format with those four fields superimposed on it.
Note that the CoAP OSCORE_kidctx field directly includes the size octet, s.
</t>
      </section>
    </section>
    <section anchor="examples-of-coap-header-compression" numbered="true" toc="default">
      <name>Examples of CoAP Header Compression</name>
      <section anchor="mandatory-header-with-con-message" numbered="true" toc="default">
        <name>Mandatory Header with CON Message</name>
        <t>In this first scenario, the SCHC compressor on the NGW side 
receives a POST message from an Internet client, which is immediately acknowledged by the Device. 
<xref target="Table-CoAP-header-1" format="default"/> describes the SCHC Rule descriptions for this scenario.</t>
<table anchor="Table-CoAP-header-1">
  <name>CoAP Context to Compress Header without Token</name>
  <thead>
    <tr>
      <th align="left" colspan="8">RuleID 1</th>
    </tr>
    <tr>
      <th align="center">Field</th>
      <th align="center">FL</th>
      <th align="center">FP</th>
      <th align="center">DI</th>
      <th align="center">TV</th>
      <th align="center">MO</th>
      <th align="center">CDA</th>
      <th align="center">Sent [bits]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CoAP version</td>
      <td>2</td>
      <td>1</td>
      <td>Bi</td>
      <td>01</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP Type</td>
      <td>2</td>
      <td>1</td>
      <td>Dw</td>
      <td>CON</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP Type</td>
      <td>2</td>
      <td>1</td>
      <td>Up</td>
      <td>[ACK,&br;RST]</td>
      <td>match-mapping</td>
      <td>matching-sent</td>
      <th>T</th>
    </tr>
    <tr>
      <td>CoAP TKL</td>
      <td>4</td>
      <td>1</td>
      <td>Bi</td>
      <td>0</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP Code</td>
      <td>8</td>
      <td>1</td>
      <td>Bi</td>
      <td>[0.00,&br;...&br;5.05]</td>
      <td>match-mapping</td>
      <td>matching-sent</td>
      <th>CC CCC</th>
    </tr>
    <tr>
      <td>CoAP MID</td>
      <td>16</td>
      <td>1</td>
      <td>Bi</td>
      <td>0000</td>
      <td>MSB(7)</td>
      <td>LSB</td>
      <th>MID</th>
    </tr>
    <tr>
      <td>CoAP Uri-Path</td>
      <td>var</td>
      <td>1</td>
      <td>Dw</td>
      <td>path</td>
      <td>equal 1</td>
      <td>not-sent</td>
      <th></th>
    </tr>
  </tbody>
</table>

        <t>In this example, SCHC compression elides the version and Token Length fields. The 25 Method and Response Codes defined in <xref target="RFC7252" format="default"/> have been shrunk to 5 bits using a "match-mapping" MO. The Uri-Path contains a single element indicated in the TV and elided with the CDA "not-sent".</t>
        <t>SCHC compression reduces the header, sending only the Type, a mapped code, and the least significant bits of the Message ID (9 bits in the example above).</t>
        <t>Note that a client located in an Application Server sending a request to a server located in the Device may not be compressed through this Rule, since the MID might not start with 7 bits equal to 0. A CoAP proxy placed before SCHC C/D can rewrite the Message ID to fit the value and match the Rule.</t>
      </section>
      <section anchor="Sec-OSCORE-Examples" numbered="true" toc="default">
        <name>OSCORE Compression</name>
        <t>OSCORE aims to solve the problem of end-to-end encryption for CoAP messages. Therefore, the goal is to hide the message as much as possible 
while still enabling proxy operation.</t>
        <t>Conceptually, this is achieved by splitting the CoAP message into an Inner Plaintext and Outer OSCORE message. The Inner Plaintext contains sensitive information that is not necessary for proxy operation. However, it is part of the message that can be encrypted until it
reaches its end destination. The Outer Message acts as a shell matching the regular CoAP message format and includes all options and information 
needed for proxy operation and caching. <xref target="Fig-inner-outer" format="default"/> below illustrates this analysis.</t>
        <t>CoAP arranges the options into one of three classes, each granted a specific type of protection by the protocol:</t>
     <dl spacing="normal">
          <dt>Class E:</dt><dd>Encrypted options moved to the Inner Plaintext.</dd>
          <dt>Class I:</dt><dd>Integrity-protected options included in the Additional Authenticated Data (AAD) for the encryption of the Plaintext but otherwise left untouched in the Outer Message.
</dd>
          <dt>Class U:</dt><dd>Unprotected options left untouched in the Outer Message.</dd>
     </dl>
        <t>These classes point out that the Outer option contains the OSCORE option and that the message is OSCORE protected; this option carries the information necessary to retrieve the Security Context. The endpoint will use this Security Context to decrypt the message correctly.</t>
        <figure anchor="Fig-inner-outer">
          <name>CoAP Packet Split into OSCORE Outer Header and Plaintext</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
                      Original CoAP Packet
                   +-+-+---+-------+---------------+
                   |v|t|TKL| code  | Message ID    |
                   +-+-+---+-------+---------------+....+
                   | Token                              |
                   +-------------------------------.....+
                   | Options (IEU)            |
                   .                          .
                   .                          .
                   +------+-------------------+ 
                   | 0xFF |
                   +------+------------------------+
                   |                               |
                   |     Payload                   |
                   |                               |
                   +-------------------------------+      
                          /                \ 
                         /                  \
                        /                    \
                       /                      \
     Outer Header     v                        v  Plaintext
  +-+-+---+--------+---------------+          +-------+
  |v|t|TKL|new code| Message ID    |          | code  |
  +-+-+---+--------+---------------+....+     +-------+-----......+
  | Token                               |     | Options (E)       |
  +--------------------------------.....+     +-------+------.....+
  | Options (IU)             |                | 0xFF  |
  .                          .                +-------+-----------+
  . OSCORE Option            .                |                   |
  +------+-------------------+                | Payload           |
  | 0xFF |                                    |                   |
  +------+                                    +-------------------+
]]></artwork>
        </figure>

        <t><xref target="Fig-inner-outer" format="default"/> shows the packet format for the OSCORE Outer header and Plaintext.</t>
        <t>In the Outer header, the original header code is hidden and replaced by a default dummy value. As seen in 
Sections&nbsp;<xref target="RFC8613" section="4.1.3.5" sectionFormat="bare"/> and <xref target="RFC8613" section="4.2" sectionFormat="bare"/> of <xref target="RFC8613"/>, the message code is replaced by POST for requests and Changed for responses when CoAP is not using the Observe Option. If CoAP uses Observe, the OSCORE message code is replaced by FETCH for requests and Content for responses.</t>
        <t>The first byte of the Plaintext contains the original packet code, followed by the message code, the class E options, and, if present, the original message payload preceded by its payload marker.</t>
        <t>An Authenticated Encryption with Associated Data (AEAD) algorithm now encrypts the Plaintext. This integrity-protects the Security Context parameters and, eventually, any class I options from the Outer header. The resulting ciphertext becomes the new payload of the OSCORE message, as illustrated in <xref target="Fig-full-oscore" format="default"/>.</t>
        <t>As defined in <xref target="RFC5116" format="default"/>, this ciphertext is the encrypted Plaintext's concatenation of the Authentication Tag. Note that Inner Compression only affects the Plaintext before encryption. 
The Authentication Tag, fixed in length and uncompressed, is considered part of the cost of protection.
</t>
        <figure anchor="Fig-full-oscore">
          <name>OSCORE Message</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
     Outer Header                           
  +-+-+---+--------+---------------+          
  |v|t|TKL|new code| Message ID    |          
  +-+-+---+--------+---------------+....+     
  | Token                               |     
  +--------------------------------.....+     
  | Options (IU)             |               
  .                          .               
  . OSCORE Option            .               
  +------+-------------------+               
  | 0xFF |                                  
  +------+---------------------------+
  |                                  |
  | Ciphertext: Encrypted Inner      |
  |             Header and Payload   |
  |             + Authentication Tag |
  |                                  |
  +----------------------------------+
]]></artwork>
        </figure>
        <t>The SCHC compression scheme consists of compressing both the Plaintext before encryption and the resulting OSCORE message after encryption; see <xref target="Fig-OSCORE-Compression" format="default"/>.</t>
        <t>The OSCORE message translates into a segmented process where SCHC compression is applied independently in two stages, each with its corresponding set of Rules, with the Inner SCHC Rules and the Outer SCHC Rules. This way, compression is applied to all fields of the original CoAP message.</t>
        <figure anchor="Fig-OSCORE-Compression">
          <name>OSCORE Compression Diagram</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
     Outer Message                             OSCORE Plaintext
  +-+-+---+--------+---------------+          +-------+
  |v|t|TKL|new code| Message ID    |          | code  |
  +-+-+---+--------+---------------+....+     +-------+-----......+
  | Token                               |     | Options (E)       |
  +--------------------------------.....+     +-------+------.....+
  | Options (IU)             |                | 0xFF  |
  .                          .                +-------+-----------+
  . OSCORE Option            .                |                   |
  +------+-------------------+                | Payload           |
  | 0xFF |                                    |                   |
  +------+------------+                       +-------------------+
  |  Ciphertext       |<---------\                      |
  |                   |          |                      v
  +-------------------+          |             +-----------------+
          |                      |             |   Inner SCHC    |
          v                      |             |   Compression   |
    +-----------------+          |             +-----------------+
    |   Outer SCHC    |          |                     |
    |   Compression   |          |                     v
    +-----------------+          |             +-------+
          |                      |             |RuleID |
          v                      |             +-------+-----------+
    +--------+             +------------+      |Compression Residue|
    |RuleID' |             | Encryption | <--  +----------+--------+
    +--------+-----------+ +------------+      |                   |
    |Compression Residue'|                     | Payload           |
    +-----------+--------+                     |                   |
    |  Ciphertext        |                     +-------------------+
    |                    |     
    +--------------------+
]]></artwork>
        </figure>
        <t>Note that since the corresponding endpoint can only decrypt the Inner part of the message, this endpoint will also have to implement Inner SCHC Compression/Decompression.</t>
      </section>
      <section anchor="example-oscore-compression" numbered="true" toc="default">
        <name>Example OSCORE Compression</name>
        <t>This section gives an example with a GET request and its consequent Content
response from a Device-based CoAP client to a cloud-based CoAP server.
The example also describes a possible set of Rules for Inner SCHC Compression and Outer SCHC
Compression. A dump of the results and a contrast between SCHC + OSCORE
performance with SCHC + CoAP performance are also listed. This example gives an approximation of the
cost of security with SCHC-OSCORE.</t>
        <t>Our first CoAP message is the GET request in <xref target="Fig-GET-temp" format="default"/>.</t>
        <figure anchor="Fig-GET-temp">
          <name>CoAP GET Request</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
Original message:
=================
0x4101000182bb74656d7065726174757265

Header:
0x4101
01   Ver
  00   CON
    0001   TKL
        00000001   Request Code 1 "GET"

0x0001 = mid
0x82 = token

Options:
0xbb74656d7065726174757265
Option 11: URI_PATH
Value = temperature

Original message length:   17 bytes
]]></artwork>
        </figure>
        <t>Its corresponding response is the Content response in <xref target="Fig-CONTENT-temp" format="default"/>.</t>
        <figure anchor="Fig-CONTENT-temp">
          <name>CoAP Content Response</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
Original message:
=================
0x6145000182ff32332043

Header:
0x6145
01   Ver
  10   ACK
    0001   TKL
        01000101 Successful Response Code 69 "2.05 Content"

0x0001 = mid
0x82 = token

0xFF  Payload marker
Payload:
0x32332043

Original message length:   10 bytes
]]></artwork>
        </figure>

        <t>The SCHC Rules for the Inner Compression include all fields already present in a regular CoAP message. The methods described in <xref target="CoAPcomp" format="default"/> apply to these fields. <xref target="Table-Inner-Rules" format="default"/> provides an example.</t>

<table anchor="Table-Inner-Rules">
  <name>Inner SCHC Rule</name>
  <thead>
    <tr>
      <th align="left" colspan="8">RuleID 0</th>
    </tr>
    <tr>
      <th align="center">Field</th>
      <th align="center">FL</th>
      <th align="center">FP</th>
      <th align="center">DI</th>
      <th align="center">TV</th>
      <th align="center">MO</th>
      <th align="center">CDA</th>
      <th align="center">Sent [bits]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CoAP Code</td>
      <td>8</td>
      <td>1</td>
      <td>Up</td>
      <td>1</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP Code</td>
      <td>8</td>
      <td>1</td>
      <td>Dw</td>
      <td>[69,132]</td>
      <td>match-mapping</td>
      <td>mapping-sent</td>
      <th>c</th>
    </tr>
    <tr>
      <td>CoAP Uri-Path</td>
      <td></td>
      <td>1</td>
      <td>Up</td>
      <td>temperature</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
  </tbody>
</table>

        <t><xref target="Fig-Inner-Compression-GET" format="default"/> shows the Plaintext obtained for the example GET request. The packet follows the process of Inner Compression and encryption until the payload. The Outer OSCORE message adds the result of the Inner process.</t>
        <figure anchor="Fig-Inner-Compression-GET">
          <name>Plaintext Compression and Encryption for GET Request</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
   ________________________________________________________
  |                                                        |
  | OSCORE Plaintext                                       |
  |                                                        |
  | 0x01bb74656d7065726174757265  (13 bytes)               |
  |                                                        |
  | 0x01 Request Code GET                                  |
  |                                                        |
  |      bb74656d7065726174757265 Option 11: URI_PATH      |
  |                               Value = temperature      |
  |________________________________________________________|

                              |
                              |
                              | Inner SCHC Compression
                              |
                              v
                _________________________________
               |                                 |
               | Compressed Plaintext            |
               |                                 |
               | 0x00                            |
               |                                 |
               | RuleID = 0x00 (1 byte)          |
               | (No Compression Residue)        |
               |_________________________________|

                              |
                              | AEAD Encryption
                              |  (piv = 0x04)
                              v
         _________________________________________________
        |                                                 |
        |  encrypted_plaintext = 0xa2 (1 byte)            |
        |  tag = 0xc54fe1b434297b62 (8 bytes)             |
        |                                                 |
        |  ciphertext = 0xa2c54fe1b434297b62 (9 bytes)    |
        |_________________________________________________|
]]></artwork>
        </figure>
        <t>In this case, the original message has no payload, and its resulting Plaintext is compressed up to only 1 byte (the size of the RuleID). The AEAD algorithm preserves this length in its first output and yields a fixed-size tag. SCHC cannot compress the tag, and the OSCORE message must include it without compression.
The use of integrity protection translates into an overhead in total message length, limiting the amount of compression that can be achieved and playing into the cost of adding security to the exchange.</t>
        <t><xref target="Fig-Inner-Compression-CONTENT" format="default"/> shows the process for the example Content response. The Compression Residue is 1 bit long.
Note that since SCHC adds padding after the payload, this misalignment causes the hexadecimal code from the payload to differ from the original, even if SCHC cannot compress the tag. The overhead for the tag bytes limits SCHC's performance but brings security to the transmission.</t>
        <figure anchor="Fig-Inner-Compression-CONTENT">
          <name>Plaintext Compression and Encryption for Content Response</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
   ________________________________________________________
  |                                                        |
  | OSCORE Plaintext                                       |
  |                                                        |
  | 0x45ff32332043  (6 bytes)                              |
  |                                                        |
  | 0x45 Successful Response Code 69 "2.05 Content"        |
  |                                                        |
  |     ff Payload marker                                  |
  |                                                        |
  |       32332043 Payload                                 |
  |________________________________________________________|

                              |
                              |
                              | Inner SCHC Compression
                              |
                              v
      _________________________________________________
     |                                                 |
     | Compressed Plaintext                            |
     |                                                 |
     | 0x001919902180 (6 bytes)                        |
     |                                                 |
     |   00 RuleID                                     |
     |                                                 |
     |  0b0 (1 bit match-mapping Compression Residue)  |
     |       0x32332043 >> 1 (shifted payload)         |
     |                        0b0000000 Padding        |
     |_________________________________________________|

                              |
                              | AEAD Encryption
                              |  (piv = 0x04)
                              v
     _________________________________________________________
    |                                                         |
    |  encrypted_plaintext = 0x10c6d7c26cc1 (6 bytes)         |
    |  tag = 0xe9aef3f2461e0c29 (8 bytes)                     |
    |                                                         |
    |  ciphertext = 0x10c6d7c26cc1e9aef3f2461e0c29 (14 bytes) |
    |_________________________________________________________|
]]></artwork>
        </figure>
        <t>The Outer SCHC Rule (<xref target="Table-Outer-Rule" format="default"/>) must process the OSCORE options fields. Figures&nbsp;<xref target="Fig-Protected-Compressed-GET" format="counter"/> and <xref target="Fig-Protected-Compressed-CONTENT" format="counter"/> show a dump of the OSCORE messages generated from the example messages. They include the Inner Compressed ciphertext in the payload. These are the messages that have to be compressed via the Outer SCHC Compression scheme.</t>

        <t><xref target="Table-Outer-Rule" format="default"/> shows a possible set of Outer Rule items to compress the Outer header.</t>

<table anchor="Table-Outer-Rule">
  <name>Outer SCHC Rule</name>
  <thead>
    <tr>
      <th align="left" colspan="8">RuleID 0</th>
    </tr>
    <tr>
      <th align="center">Field</th>
      <th align="center">FL</th>
      <th align="center">FP</th>
      <th align="center">DI</th>
      <th align="center">TV</th>
      <th align="center">MO</th>
      <th align="center">CDA</th>
      <th align="center">Sent [bits]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CoAP version</td>
      <td>2</td>
      <td>1</td>
      <td>Bi</td>
      <td>01</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP Type</td>
      <td>2</td>
      <td>1</td>
      <td>Up</td>
      <td>0</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP Type</td>
      <td>2</td>
      <td>1</td>
      <td>Dw</td>
      <td>2</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP TKL</td>
      <td>4</td>
      <td>1</td>
      <td>Bi</td>
      <td>1</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP Code</td>
      <td>8</td>
      <td>1</td>
      <td>Up</td>
      <td>2</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP Code</td>
      <td>8</td>
      <td>1</td>
      <td>Dw</td>
      <td>68</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP MID</td>
      <td>16</td>
      <td>1</td>
      <td>Bi</td>
      <td>0000</td>
      <td>MSB(12)</td>
      <td>LSB</td>
      <th>MMMM</th>
    </tr>
    <tr>
      <td>CoAP Token</td>
      <td>tkl</td>
      <td>1</td>
      <td>Bi</td>
      <td>0x80</td>
      <td>MSB(5)</td>
      <td>LSB</td>
      <th>TTT</th>
    </tr>
    <tr>
      <td>CoAP OSCORE_flags</td>
      <td>8</td>
      <td>1</td>
      <td>Up</td>
      <td>0x09</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP OSCORE_piv</td>
      <td>var</td>
      <td>1</td>
      <td>Up</td>
      <td>0x00</td>
      <td>MSB(4)</td>
      <td>LSB</td>
      <th>PPPP</th>
    </tr>
    <tr>
      <td>CoAP OSCORE_kid</td>
      <td>var</td>
      <td>1</td>
      <td>Up</td>
      <td>0x636c69656e70</td>
      <td>MSB(52)</td>
      <td>LSB</td>
      <th>KKKK</th>
    </tr>
    <tr>
      <td>CoAP OSCORE_kidctx</td>
      <td>var</td>
      <td>1</td>
      <td>Bi</td>
      <td>b''</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP OSCORE_flags</td>
      <td>8</td>
      <td>1</td>
      <td>Dw</td>
      <td>b''</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP OSCORE_piv</td>
      <td>var</td>
      <td>1</td>
      <td>Dw</td>
      <td>b''</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP OSCORE_kid</td>
      <td>var</td>
      <td>1</td>
      <td>Dw</td>
      <td>b''</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
  </tbody>
</table>

        <figure anchor="Fig-Protected-Compressed-GET">
          <name>Protected and Inner SCHC Compressed GET Request</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
Protected message:
==================
0x4102000182d8080904636c69656e74ffa2c54fe1b434297b62
(25 bytes)

Header:
0x4102
01   Ver
  00   CON
    0001   TKL
        00000010   Request Code 2 "POST"

0x0001 = mid
0x82 = token

Options:
0xd8080904636c69656e74 (10 bytes)
Option 21: OBJECT_SECURITY
Value = 0x0904636c69656e74
          09 = 000 0 1 001 flag byte
                   h k  n
            04 piv
              636c69656e74 kid

0xFF  Payload marker
Payload:
0xa2c54fe1b434297b62 (9 bytes)
]]></artwork>
        </figure>
        <figure anchor="Fig-Protected-Compressed-CONTENT">
          <name>Protected and Inner SCHC Compressed Content Response</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
Protected message:
==================
0x6144000182d008ff10c6d7c26cc1e9aef3f2461e0c29
(22 bytes)

Header:
0x6144
01   Ver
  10   ACK
    0001   TKL
        01000100   Successful Response Code 68 "2.04 Changed"

0x0001 = mid
0x82 = token

Options:
0xd008 (2 bytes)
Option 21: OBJECT_SECURITY
Value = b''

0xFF  Payload marker
Payload:
0x10c6d7c26cc1e9aef3f2461e0c29 (14 bytes)
]]></artwork>
        </figure>
        <t>For the flag bits, some SCHC compression methods are useful, depending on the application. The most straightforward alternative is to
provide a fixed value for the flags, combining a MO of "equal" and a CDA of "not-sent". 
This SCHC definition saves most bits but could prevent flexibility. Otherwise, SCHC could use a "match-mapping" MO to choose from several configurations for the exchange. If not, the SCHC description may use an "MSB" MO to mask off the three hard-coded most significant bits.</t>
        <t>Note that fixing a flag bit will limit the choices of CoAP options that can be used in the exchange, since the values of these choices are dependent on specific options.
</t>
        <t>The piv field lends itself to having some bits masked off with an "MSB" MO and an "LSB" CDA. This SCHC description could be useful in applications where the message frequency is low, such as LPWAN technologies. 
Note that compressing the sequence numbers may reduce the maximum number of sequence numbers that can be used in an exchange. 
Once the sequence number exceeds the maximum value, the OSCORE keys need to be re-established.</t>
        <t>The size, s, that is included in the kid context field <bcp14>MAY</bcp14> be masked off with an "LSB" CDA. The rest of the field could have additional bits masked off or have the whole field fixed with a MO of "equal" and a CDA of "not-sent". The same holds for the kid field.</t>
        <t>The Outer Rule of <xref target="Table-Outer-Rule" format="default"/> is applied to the example GET request and Content response. 
Figures&nbsp;<xref target="Fig-Compressed-GET" format="counter"/> and <xref target="Fig-Compressed-CONTENT" format="counter"/> show the resulting messages.</t>
        <figure anchor="Fig-Compressed-GET">
          <name>SCHC-OSCORE Compressed GET Request</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
Compressed message:
==================
0x001489458a9fc3686852f6c4 (12 bytes)
0x00 RuleID
    1489 Compression Residue
        458a9fc3686852f6c4 Padded payload

Compression Residue:
0b 0001 010 0100 0100 (15 bits -> 2 bytes with padding)
    mid tkn piv  kid

Payload
0xa2c54fe1b434297b62 (9 bytes)

Compressed message length: 12 bytes
]]></artwork>
        </figure>

        <figure anchor="Fig-Compressed-CONTENT">
          <name>SCHC-OSCORE Compressed Content Response</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
Compressed message:
==================
0x0014218daf84d983d35de7e48c3c1852 (16 bytes)
0x00 RuleID
    14 Compression Residue
      218daf84d983d35de7e48c3c1852 Padded payload
Compression Residue:
0b0001 010 (7 bits -> 1 byte with padding)
  mid  tkn

Payload
0x10c6d7c26cc1e9aef3f2461e0c29 (14 bytes)

Compressed message length: 16 bytes
]]></artwork>
        </figure>
        <t>In contrast, comparing these results with what would be obtained by SCHC
compressing the original CoAP messages without protecting them with OSCORE is done
by compressing the CoAP messages according to the SCHC Rule in <xref target="Table-NoOsc-Rule" format="default"/>.</t>

<table anchor="Table-NoOsc-Rule">
  <name>SCHC-CoAP Rule (No OSCORE)</name>
  <thead>
    <tr>
      <th align="left" colspan="8">RuleID 1</th>
    </tr>
    <tr>
      <th align="center">Field</th>
      <th align="center">FL</th>
      <th align="center">FP</th>
      <th align="center">DI</th>
      <th align="center">TV</th>
      <th align="center">MO</th>
      <th align="center">CDA</th>
      <th align="center">Sent [bits]</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>CoAP version</td>
      <td>2</td>
      <td>1</td>
      <td>Bi</td>
      <td>01</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP Type</td>
      <td>2</td>
      <td>1</td>
      <td>Up</td>
      <td>0</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP Type</td>
      <td>2</td>
      <td>1</td>
      <td>Dw</td>
      <td>2</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP TKL</td>
      <td>4</td>
      <td>1</td>
      <td>Bi</td>
      <td>1</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP Code</td>
      <td>8</td>
      <td>1</td>
      <td>Up</td>
      <td>2</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
    <tr>
      <td>CoAP Code</td>
      <td>8</td>
      <td>1</td>
      <td>Dw</td>
      <td>[69,132]</td>
      <td>match-mapping</td>
      <td>mapping-sent</td>
      <th>C</th>
    </tr>
    <tr>
      <td>CoAP MID</td>
      <td>16</td>
      <td>1</td>
      <td>Bi</td>
      <td>0000</td>
      <td>MSB(12)</td>
      <td>LSB</td>
      <th>MMMM</th>
    </tr>
    <tr>
      <td>CoAP Token</td>
      <td>tkl</td>
      <td>1</td>
      <td>Bi</td>
      <td>0x80</td>
      <td>MSB(5)</td>
      <td>LSB</td>
      <th>TTT</th>
    </tr>
    <tr>
      <td>CoAP Uri-Path</td>
      <td></td>
      <td>1</td>
      <td>Up</td>
      <td>temperature</td>
      <td>equal</td>
      <td>not-sent</td>
      <th></th>
    </tr>
  </tbody>
</table>

        <t>The Rule in <xref target="Table-NoOsc-Rule" format="default"/> yields the SCHC compression results as shown in <xref target="Fig-GET-temp-no-oscore" format="default"/> for the request and
<xref target="Fig-CONTENT-temp-no-oscore" format="default"/> for the response.
</t>
        <figure anchor="Fig-GET-temp-no-oscore">
          <name>CoAP GET Compressed without OSCORE</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
Compressed message:
==================
0x0114
0x01 = RuleID

Compression Residue:
0b00010100 (1 byte)

Compressed message length: 2 bytes
]]></artwork>
        </figure>
        <figure anchor="Fig-CONTENT-temp-no-oscore">
          <name>CoAP Content Compressed without OSCORE</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
Compressed message:
==================
0x010a32332043
0x01 = RuleID

Compression Residue:
0b00001010 (1 byte)

Payload
0x32332043

Compressed message length: 6 bytes
]]></artwork>
        </figure>
        <t>As can be seen, the difference between applying SCHC + OSCORE as compared to 
regular SCHC + CoAP is about 10 bytes.</t>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>This document has no IANA actions.</t>
    </section>
    <section anchor="SecConsiderations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The use of SCHC header compression for CoAP header fields only affects
the representation of the header information.  SCHC header compression
itself does not increase or decrease the overall level of security of
the communication.  When the connection does not use a security protocol
(OSCORE, DTLS, etc.), it is necessary to use a Layer 2
security mechanism to protect the SCHC messages.</t>
      <t>If an LPWAN is the Layer 2 technology being used, the SCHC security considerations
discussed in <xref target="RFC8724" format="default"/> continue to apply.  When using another Layer 2 protocol, the
use of a cryptographic integrity-protection mechanism to protect the
SCHC headers is <bcp14>REQUIRED</bcp14>. Such cryptographic integrity protection is
necessary in order to continue to provide the properties that <xref target="RFC8724" format="default"/>
relies upon.</t>
      <t>When SCHC is used with OSCORE, the security considerations discussed in <xref target="RFC8613" format="default"/>
continue to apply.</t>
      <t>When SCHC is used with the OSCORE Outer headers, the Initialization
Vector (IV) size in the Compression Residue must be carefully selected.
There is a trade-off between compression efficiency (with a longer "MSB"
MO prefix) and the frequency at which the Device must renew its key
material (in order to prevent the IV from expanding to an uncompressible
value).  The key-renewal operation itself requires several message
exchanges and requires energy-intensive computation, but the optimal
trade-off will depend on the specifics of the Device and expected usage
patterns.</t>
      <t>If an attacker can introduce a corrupted SCHC-compressed packet onto a
link, DoS attacks can be mounted by causing excessive resource consumption
at the decompressor.  However, an attacker able to inject packets at the
link layer is also capable of other, potentially more damaging, attacks.</t>
      <t>SCHC compression emits variable-length Compression Residues for some
CoAP fields.  In the representation of the compressed header, the length field
that is sent is not the length of the original header field but rather
the length of the Compression Residue that is being transmitted.  If a
corrupted packet arrives at the decompressor with a longer or shorter
length than the original compressed representation possessed, the SCHC
decompression procedures will detect an error and drop the packet.</t>
      <t>SCHC header compression Rules <bcp14>MUST</bcp14> remain tightly coupled between the
compressor and the decompressor.  If the compression Rules get out of sync,
a Compression Residue might be decompressed differently at the receiver
than the initial message submitted to compression procedures.
Accordingly, any time the context Rules are updated on an OSCORE
endpoint, that endpoint <bcp14>MUST</bcp14> trigger OSCORE key re-establishment.
Similar procedures may be appropriate to signal Rule updates when other
message-protection mechanisms are in use.</t>
    </section>
  </middle>
  <back>
    <references>
      <name>Normative References</name>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5116.xml"/>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7252.xml"/>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7967.xml"/>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7641.xml"/>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7959.xml"/>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8613.xml"/>
      <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8724.xml"/>
    </references>

    <section anchor="acknowledgements" numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>The authors would like to thank (in alphabetic order): 
<contact fullname="Christian Amsuss"/>, <contact fullname="Dominique Barthel"/>,  <contact fullname="Carsten Bormann"/>, <contact fullname="Theresa Enghardt"/>, 
<contact fullname="Thomas Fossati"/>, <contact fullname="Klaus Hartke"/>, <contact fullname="Benjamin Kaduk"/>, <contact fullname="Francesca Palombini"/>, <contact fullname="Alexander Pelov"/>, <contact fullname="Göran Selander"/>, and 
<contact fullname="Éric Vyncke"/>.</t>
    </section>

  </back>
</rfc>
