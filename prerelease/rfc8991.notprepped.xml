<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" docName="draft-ietf-anima-grasp-api-10" 
number="8991" ipr="trust200902" obsoletes="" updates="" submissionType="IETF" 
category="info" consensus="true" xml:lang="en" tocInclude="true" symRefs="true" 
sortRefs="true" version="3">

  <front>
    <title abbrev="GRASP API">GeneRic Autonomic Signaling Protocol Application
    Program Interface (GRASP API)</title>
    <seriesInfo name="RFC" value="8991"/>
    
    <author fullname="Brian E. Carpenter" initials="B." surname="Carpenter">
      <organization abbrev="Univ. of Auckland"/>
      <address>
        <postal>
          <extaddr>School of Computer Science</extaddr>
          <extaddr>University of Auckland</extaddr>
          <street>PB 92019</street>
          <city>Auckland</city>
          <region/>
          <code>1142</code>
          <country>New Zealand</country>
        </postal>
        <email>brian.e.carpenter@gmail.com</email>
      </address>
    </author>
    <author fullname="Bing Liu" initials="B." role="editor" surname="Liu">
      <organization>Huawei Technologies</organization>
      <address>
        <postal>
          <extaddr>Q14, Huawei Campus</extaddr>
          <street>No.156 Beiqing Road</street>
          <city>Hai-Dian District, Beijing</city>
          <code>100095</code>
          <country>China</country>
        </postal>
        <email>leo.liubing@huawei.com</email>
      </address>
    </author>
    <author fullname="Wendong Wang" initials="W." surname="Wang  ">
      <organization>BUPT University</organization>
      <address>
        <postal>
          <extaddr>Beijing University of Posts &amp; Telecom.</extaddr>
          <street>No.10 Xitucheng Road</street>
          <city>Hai-Dian District, Beijing 100876</city>
          <country>China</country>
        </postal>
        <email>wdwang@bupt.edu.cn</email>
      </address>
    </author>
    <author fullname="Xiangyang Gong" initials="X." surname="Gong">
      <organization>BUPT University</organization>
      <address>
        <postal>
          <extaddr>Beijing University of Posts &amp; Telecom.</extaddr>
          <street>No.10 Xitucheng Road</street>
          <city>Hai-Dian District, Beijing 100876</city>
          <country>China</country>
        </postal>
        <email>xygong@bupt.edu.cn</email>
      </address>
    </author>

    <date year="2021" month="May" />
    <area>Operations and Management</area>
    <workgroup>ANIMA</workgroup>

    <abstract>
      <t>This document is a conceptual outline of an Application
      Programming Interface (API) for the
      GeneRic Autonomic Signaling Protocol (GRASP). Such an API is needed for
      Autonomic Service Agents (ASAs) calling the GRASP protocol module to
      exchange Autonomic Network messages with other ASAs. Since GRASP is
      designed to support asynchronous operations, the API will need to
      be adapted according to the support for asynchronicity in various
      programming languages and operating systems.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="intro" numbered="true" toc="default">
      <name>Introduction</name>
      <t>As defined in <xref target="RFC8993"/>, the
      Autonomic Service Agent (ASA)
      is the atomic entity of an autonomic function, and it is instantiated
      on autonomic nodes. These nodes are members of a secure Autonomic Control Plane (ACP)
      such as defined by <xref target="RFC8994"/>.</t>
            
      <t>When ASAs communicate with each other, they should
      use the GeneRic Autonomic Signaling Protocol (GRASP) <xref target="RFC8990"/>.
      GRASP relies on the message confidentiality and integrity provided by the ACP; a 
      consequence of this is that all nodes in a
      given Autonomic Network share the same trust boundary, i.e., the boundary of the ACP.
      Nodes that have not successfully joined the ACP cannot send, receive, or intercept GRASP messages
      via the ACP and cannot usurp ACP addresses.
      An ASA runs in an ACP node and therefore benefits from the node's security properties when
      transmitting over the ACP, i.e.,
      message integrity, message confidentiality, and the fact that unauthorized nodes cannot join the ACP.
      All ASAs within a given Autonomic Network therefore trust each other's messages. For these reasons, the
      API defined in this document has no explicit security features.
      </t>
      
      <t>An important feature of GRASP is the concept of a GRASP objective. This is a data structure
      encoded, like all GRASP messages, in Concise Binary Object Representation (CBOR) <xref target="RFC8949"/>.
      Its main contents are a name and a value, explained at more length in the Terminology section
      of <xref target="RFC8990"/>. When an objective is passed
      from one ASA to another using GRASP, its value is either conveyed in one direction
      (by a process of synchronization or flooding) or negotiated bilaterally. The
      semantics of the value are opaque to GRASP and therefore to the API. Each objective
      must be accurately specified in a dedicated specification, as discussed in
      "Objective Options" (<xref target="RFC8990" section="2.10" sectionFormat="of"/>).
      In particular, the specification will define the syntax and semantics of the
      value of the objective, whether and how it supports a negotiation process,
      whether it supports a dry-run mode, and any other details needed for interoperability.
      The use of CBOR, with Concise Data Definition Language (CDDL) <xref target="RFC8610"/> as the data definition language,
      allows the value to be passed between ASAs regardless of the programming languages
      in use. Data storage
      and consistency during negotiation are the responsibility of the ASAs involved.
      Additionally, GRASP needs to cache the latest values of objectives that are
      received by flooding.</t>
      
      <t>As <xref target="sw"/> shows, a GRASP implementation could contain several
      sub-layers. The bottom layer is the GRASP base protocol module, which is only
      responsible for sending and receiving GRASP messages and maintaining
      shared data structures. Above that is the basic API described in this
      document. The upper layer contains
      some extended API functions based upon the GRASP basic protocol. For example,
      <xref target="I-D.ietf-anima-grasp-distribution"/> describes a possible extended
      function.</t>
      
<figure anchor="sw">
        <name>Software Layout</name>
      <artwork align="center" name="" type="" alt=""><![CDATA[
 +--------------+          +--------------+
 |     ASAs     |          |     ASAs     |
 +--------------+          +--------------+
   |          |                    |
   | +------------------+          |
   | | GRASP Extended   |          |
   | | Function API     |          |
   | +------------------+          |
   |          |                    |
+------------------------------------------+
|         Basic GRASP API Library          |
+------------------------------------------+
                    |
            IPC or system call
                    |
+------------------------------------------+
|  GRASP Core                              |
|  (functions, data structures, daemon(s)) |
+------------------------------------------+
]]></artwork>
</figure>
      
      <t>Multiple ASAs in a single node will share the same instance of GRASP, much as
      multiple applications share a single TCP/IP stack. This aspect is hidden from
      individual ASAs by the API and is not further discussed here.</t>
      
      <t>It is desirable that ASAs be designed as portable user-space programs
      using a system-independent API. In many implementations, the GRASP code will therefore
      be split between user space and kernel space. In user space, library functions provide the API
      and communicate directly with ASAs. In kernel space, a daemon, or a set
      of sub-services, provides GRASP core functions that are
      independent of specific ASAs, such as multicast handling and relaying, and
      common data structures, such as the discovery cache. The GRASP API 
      library would need to communicate with the GRASP core via an interprocess
      communication (IPC) or a system call mechanism. The details of this are system-dependent.
      </t>
      
      <t>Both the GRASP library and the extended function modules should
      be available to the ASAs.
      However, since the extended functions are expected to be added in an incremental
      manner, they will be the subject of future documents.
      This document only describes the basic GRASP API.</t>
      
      <t>The functions provided by the API do not map one-to-one onto GRASP messages. Rather,
      they are intended to offer convenient support for message sequences (such as a discovery
      request followed by responses from several peers
      or a negotiation request followed by various possible responses).
      This choice was made to assist ASA programmers in writing
      code based on their application requirements rather than needing to
      understand protocol details.</t>
      
<t>
      In addition to containing the autonomic infrastructure components described in
      <xref target="RFC8994"/>
      and <xref target="RFC8995"/>, a simple autonomic node might contain very few ASAs.
      Such a node might directly integrate a GRASP protocol stack in
      its code and therefore not
      require this API to be installed. However, the programmer would need
      a deeper understanding of the GRASP protocol than what is needed to use the API.</t>
      
      <t>This document gives a conceptual outline of the API. It is not a formal
      specification for any particular programming language or operating system,
      and it is expected that details will be clarified in individual implementations.</t>
    </section>
    <section numbered="true" toc="default">
      <name>GRASP API for ASA</name>
      <section numbered="true" toc="default">
        <name>Design Assumptions</name>
        <t>The design assumes that an 
        ASA needs to call a separate GRASP implementation. The latter handles protocol details
        (security, sending and listening for GRASP messages, waiting, caching
        discovery results, negotiation looping, sending and receiving
        synchronization data, etc.) but understands nothing about individual
        GRASP objectives (see <xref target="RFC8990" sectionFormat="of" section="2.10"/>). 
        The semantics of objectives are unknown to the GRASP
        protocol and are handled only by the ASAs. Thus, this is an
        abstract API for use by ASAs. Individual 
        language bindings should be defined in separate documents.</t>
	
        <t>Different ASAs may utilize GRASP features differently, by using GRASP for:
        </t>
        <ul spacing="normal">
          <li>discovery purposes only.</li>
          <li>negotiation but only as an initiator (client).</li>
          <li>negotiation but only as a responder.</li>
          <li>negotiation as an initiator or responder.</li>
          <li>synchronization but only as an initiator (recipient).</li>
          <li>synchronization but only as a responder and/or flooder.</li>
          <li>synchronization as an initiator, responder, and/or flooder.</li>
        </ul>
        <t>
        The API also assumes that one ASA may support multiple objectives. Nothing prevents
        an ASA from supporting some objectives for synchronization and others for negotiation.
        </t>
        <t>The API design assumes that the operating system and programming language
        provide a mechanism for simultaneous asynchronous operations. This is discussed
        in detail in <xref target="asynchop"/>.</t>
        
        <t>A few items are out of scope in this version, since practical experience is required before including them:</t>
        <ul spacing="normal">
          <li>Authorization of ASAs is not defined as part of GRASP and is a subject for future study.</li>
          <li>User-supplied explicit locators for an objective are not supported. The GRASP core will
          supply the locator, using the IP address of the node concerned.</li>

          <li>The rapid mode of GRASP (<xref target="RFC8990" sectionFormat="of" section="2.5.4"/>)
          is not supported.</li>
        </ul>
      </section>
      <section anchor="asynchop" numbered="true" toc="default">
        <name>Asynchronous Operations</name>
        <t>GRASP depends on asynchronous operations and wait states, and some of its messages
    are not idempotent, meaning that repeating a message may cause repeated changes
    of state in the recipient ASA. Many ASAs will
    need to support several concurrent operations; for example, an ASA might need
    to negotiate one objective with a peer while discovering and synchronizing
    a different objective with a different peer. Alternatively, an ASA that
    acts as a resource manager might need to run simultaneous negotiations
    for a given objective with multiple different peers. Such an ASA will probably 
    need to support uninterruptible atomic changes to its internal data structures,
    using a mechanism provided by the operating system and programming language in use.</t>
    
        <section anchor="asynchmech" numbered="true" toc="default">
        <name> Alternative Asynchronous Mechanisms</name>
    <t>Some ASAs need to support asynchronous operations; therefore,
    the GRASP core must do so. Depending on both the
    operating system and the programming language in use, there are various
    techniques for such parallel operations, three of which we
    consider here: multithreading, an event loop structure using polling,
    and an event loop structure using callback functions.</t>
        <ol spacing="normal" type="1">
          <li>In multithreading, the operating system and language will provide
    the necessary support for asynchronous operations, including creation
    of new threads, context switching between threads, queues, locks,
    and implicit wait states. In this case, API calls can be treated as simple
    synchronous function calls within their own thread, even if the function includes
    wait states, blocking, and queueing. Concurrent operations will each run
    in their own threads. For example, the discover() call may not return
    until discovery results have arrived or a timeout has occurred. If the ASA
    has other work to do, the discover() call must be in a thread of its own.</li>
          <li>In an event loop implementation with polling, blocking calls
    are not acceptable. Therefore, all calls must be non-blocking, and
    the main loop could support multiple GRASP sessions in parallel
    by repeatedly polling each one for a change of state. To facilitate this, the
    API implementation would provide non-blocking versions of all the functions that
    otherwise involve blocking and queueing. In these calls, a 'noReply' code
    will be returned by each call instead of blocking, until such time as the event
    for which it is waiting (or a failure) has occurred. Thus, for example, discover()
    would return 'noReply' instead of waiting until discovery has succeeded
    or timed out. The discover() call would be repeated in every cycle of the
    main loop until it completes. Effectively, it becomes a polling call.</li>
          <li>It was noted earlier that some GRASP messages are not idempotent; in particular,
          this applies to each step in a negotiation session -- sending the same message
          twice might produce unintended side effects. This is not affected by
          event loop polling: repeating a call after a 'noReply' does not
          repeat a message; it simply checks whether a reply has been received.</li>
          <li>In an event loop implementation with callbacks, the ASA programmer would
    provide a callback function for each asynchronous operation.
    This would be called asynchronously when a reply is received or a failure such as a
    timeout occurs.</li>
        </ol>
               
      </section>
        
      <section anchor="multineg" numbered="true" toc="default">
        <name>Multiple Negotiation Scenario</name>
        
        
        <t>The design of GRASP allows the following scenario. Consider
    an ASA "A" that acts as a resource allocator for some objective. An ASA "B" launches
    a negotiation with "A" to obtain or release a quantity of the resource. While this negotiation
    is under way, "B" chooses to launch a second simultaneous negotiation with "A" for a different
    quantity of the same resource. "A" must therefore conduct two separate negotiation sessions
    at the same time with the same peer and must not mix them up.</t>
        <t>Note that ASAs could be designed to avoid such a scenario, i.e., restricted to exactly one
    negotiation session at a time for a given objective, but this would be a voluntary
    restriction not required by the GRASP protocol. In fact, GRASP assumes
    that any ASA managing a resource may need to conduct multiple parallel negotiations,
    possibly with the same peer. Communication patterns could be very complex, with a group
    of ASAs overlapping negotiations among themselves, as described in 
    <xref target="I-D.ciavaglia-anima-coordination"/>.
    Therefore, the API design allows for such scenarios.</t>
        <t>In the callback model, for the scenario just described,
    the ASAs "A" and "B" will each provide two instances of the callback function, one for
    each session. For this reason, each ASA must be
    able to distinguish the two sessions, and the peer's IP address is not sufficient for this.  
    It is also not safe to rely on transport port numbers for this, since future variants of GRASP
    might use shared ports rather than a separate port per session. Hence, the GRASP design
    includes a Session ID. Thus, when necessary, a session handle (see the next section) is
    used in the API to distinguish simultaneous GRASP sessions from each other, so that any
    number of sessions may proceed asynchronously in parallel.</t>
        
       </section>
       
       <section anchor="overlap" numbered="true" toc="default">
        <name>Overlapping Sessions and Operations</name>
        <t>A GRASP session consists of a finite sequence of messages (for discovery,
        synchronization, or negotiation) between two ASAs. It is uniquely identified
        on the wire
        by a pseudorandom Session ID plus the IP address
        of the initiator of the session. Further details are given in
        "Session Identifier (Session ID)" (<xref target="RFC8990" section="2.7" sectionFormat="of"/>).</t>
        
        <t>On the first call in a new GRASP session, the API returns a 'session_handle'
        handle that uniquely identifies the session within the API, so that multiple overlapping
        sessions can be distinguished. A likely implementation is to form the
        handle from the underlying GRASP Session ID and IP address.
        This handle must be used in all subsequent
        calls for the same session. Also see <xref target="sessn"/>.</t>
    
        <t>An additional mechanism that might increase efficiency for polling
    implementations is to add a general call, say notify(), which would check the
    status of all outstanding operations for the calling ASA and return the session_handle values
    for all sessions that have changed state. This would eliminate the need for repeated calls
    to the individual functions returning a 'noReply'. This call is not described below
    as the details are likely to be implementation specific.</t>
        <t>An implication of the above for all GRASP implementations is that the GRASP core
    must keep state for each GRASP operation in progress, most likely keyed by the GRASP
    Session ID and the GRASP source address of the session initiator. Even in a threaded
    implementation, the GRASP core will need such state internally. The session_handle
    parameter exposes this aspect of the implementation.</t>
        </section>
        
        <section anchor="termin" numbered="true" toc="default">
        <name>Session Termination</name>
        <t>GRASP sessions may terminate for numerous reasons. 
        A session ends when discovery succeeds or times out, negotiation succeeds
        or fails, a synchronization result is delivered, the other end
        fails to respond before a timeout expires, a loop count expires, or
        a network socket error occurs. Note that a timeout at one end of
        a session might result in a timeout or a socket error at the other end,
        since GRASP does not send error messages in this case. In all cases, the API
        will return an appropriate code to the caller, which should then release any reserved
        resources. After failure cases, the GRASP specification recommends an exponential
        backoff before retrying.</t>

        </section>
        
      </section>
      
      <section numbered="true" toc="default">
        <name>API Definition</name>
        
        <section numbered="true" toc="default">
          <name>Overview of Functions</name>
	  
          <t>The functions provided by the API fall into several groups:</t>
          <dl newline="false" spacing="normal">
            <dt>Registration:</dt><dd> These functions allow an ASA to register itself
            with the GRASP core and allow a registered ASA to register the GRASP
            objectives that it will manipulate.</dd>
            <dt>Discovery:</dt><dd> This function allows an ASA that needs to initiate
            negotiation or synchronization of a particular objective to discover
            a peer willing to respond.</dd>
            <dt>Negotiation:</dt><dd> These functions allow an ASA to act as an initiator
            (requester) or responder (listener) for a GRASP negotiation session. 
            After initiation, negotiation is a symmetric process, so most of the
            functions can be used by either party.</dd>
            <dt>Synchronization:</dt><dd> These functions allow an ASA to act as an initiator
            (requester) or responder (listener and data source) for a GRASP
            synchronization session.</dd>
            <dt>Flooding:</dt><dd> These functions allow an ASA to send and receive
            an objective that is flooded to all nodes of the ACP.</dd>
          </dl>	  
          <t>Some example logic flows for a resource management ASA are given in 
          <xref target="I-D.ietf-anima-asa-guidelines"/>, which may be of help
          in understanding the following descriptions.
          The next section describes parameters and data structures used in multiple API calls. 
          The following sections describe various groups of function APIs. Those APIs that
          do not list asynchronous mechanisms are implicitly synchronous in their behavior.</t>
        </section>  
        
        
        <section numbered="true" toc="default">
          <name>Parameters and Data Structures</name>
          
          <section numbered="true" toc="default">
            <name>Integers</name>
            <t>In this API, integers are assumed to be 32-bit unsigned integers (uint32_t) unless otherwise indicated.</t>
          </section>
          <section numbered="true" toc="default">
            <name>Errorcode</name>
            <t>All functions in the API have an unsigned 'errorcode' integer as their return value (the first return value
       in languages that allow multiple return values). An errorcode of zero indicates success.
       Any other value indicates failure of some kind. The first three errorcodes have special importance:
            </t>
	    
            <dl newline="false" spacing="normal">
              <dt>1 - Declined:</dt><dd> used to indicate that the other end has sent a GRASP Negotiation End message (M_END) with a Decline option (O_DECLINE).</dd>
              <dt>2 - No reply:</dt><dd> used in non-blocking calls to indicate that the other end has sent no reply so far (see <xref target="asynchop"/>).</dd>
              <dt>3 - Unspecified error:</dt><dd> used when no more specific error codes apply.</dd>
            </dl>
	    
            <t><xref target="ErrAppx"/> gives a full list of currently suggested error codes, based on
       implementation experience. While there is no absolute requirement for all implementations
       to use the same error codes, this is highly recommended for portability of applications.</t>
          </section>
          <section anchor="tout" numbered="true" toc="default">
            <name>Timeout</name>
            <t>Whenever a 'timeout' parameter appears, it is an unsigned integer expressed
       in milliseconds. If it is zero, the GRASP 
       default timeout (GRASP_DEF_TIMEOUT; see <xref target="RFC8990"/>) will apply.  An exception is the discover() function, which has a different interpretation of a zero timeout. If no response
       is received before the timeout expires, the call will fail unless otherwise noted.</t>
          </section>
          <section numbered="true" toc="default">
            <name>Objective</name>
            <t>An 'objective' parameter is a data structure with the following components:
            </t>
            <dl newline="false" spacing="normal">
              <dt>name (UTF-8 string):</dt><dd>The objective's name</dd>
              <dt>neg (Boolean flag):</dt><dd>True if objective supports negotiation (default False)</dd>
              <dt>synch (Boolean flag):</dt><dd>True if objective supports synchronization (default False)</dd>
              <dt>dry (Boolean flag):</dt><dd><t>True if objective supports dry-run negotiation (default False)</t>
	
                <dl newline="false" spacing="compact">
                  <dt>Note 1:</dt><dd>Only one of 'synch' or 'neg' may be True.</dd>
                  <dt>Note 2:</dt><dd>'dry' must not be True unless 'neg' is also True.</dd>
                  <dt>Note 3:</dt><dd> In some programming languages, the preferred implementation
                  may be to represent the Boolean flags as bits in a single byte,
                  which is how they are encoded in GRASP messages.
                  In other languages, an enumeration might be preferable.</dd>
                </dl></dd>
              
              <dt>loop_count (unsigned integer, uint8_t):</dt><dd>Limit on negotiation steps, etc. (default GRASP_DEF_LOOPCT;
        see <xref target="RFC8990"/>).
        The 'loop_count' is set to a suitable value by the initiator of a negotiation, to prevent
                indefinite loops. It is also used to limit the propagation of discovery and flood messages.</dd>
              
                <dt>value:</dt><dd><t>A specific data structure expressing the value of the objective. The
                format is language dependent, with the constraint that it can be validly
                represented in CBOR <xref target="RFC8949"/>.</t>

		<ul spacing="normal" empty="true">
                <li>An important advantage of CBOR is that the value of an objective can be completely
                opaque to the GRASP core yet pass transparently through it to and from the ASA.
                Although the GRASP core must validate the format and syntax of GRASP messages,
                it cannot validate the value of an objective; all it can do is detect 
                malformed CBOR. The handling of decoding errors depends on the CBOR library
                in use, but a corresponding error code ('CBORfail') is defined in the API
                and will be returned to the ASA if a faulty message can be assigned
                to a current GRASP session. However, it is the responsibility of
                each ASA to validate the value of a received objective, as discussed
                in <xref target="RFC8949" sectionFormat="of" section="5.3"/>.
                If the programming language in use is suitably object-oriented, the GRASP API
                may deserialize the value and present it to the ASA as an object.
                If not, it will be presented as a CBOR data item. In all cases, the syntax
                and semantics of the objective value are the responsibility of the ASA.</li>
                
                <li>A requirement for all language mappings and all API implementations is
                that, regardless of what other options exist for a language-specific representation
                of the value, there is always an option to use a raw CBOR data item as the value.
                The API will then wrap this with CBOR Tag 24 as an encoded CBOR data item
                for transmission via GRASP, and unwrap it after reception. By this means,
                ASAs will be able to communicate regardless of programming language.
                </li></ul></dd></dl>
             
          
                <t>The 'name' and 'value' fields are of variable length. GRASP does not set a maximum
                length for these fields, but only for the total length of a GRASP message. Implementations
                might impose length limits.</t>
                <t>
           An example data structure definition for an objective in the C language,
           using at least the C99 version, and
           assuming the use of a particular CBOR library <xref target="libcbor"/>, is:
                </t>
		
                <sourcecode type="c"><![CDATA[
 typedef struct {
    unsigned char *name;
    uint8_t flags;            // flag bits as defined by GRASP
    uint8_t loop_count;
    uint32_t value_size;      // size of value in bytes
    cbor_mutable_data cbor_value;
                             // CBOR bytestring (libcbor/cbor/data.h)
                 } objective;
]]></sourcecode>
                <t>
           An example data structure definition for an objective in the Python language (version 3.4 or later) is:
                </t>
		
                <sourcecode type="python"><![CDATA[
 class objective:
    """A GRASP objective"""
    def __init__(self, name):
        self.name = name        #Unique name (string)
        self.negotiate = False  #True if negotiation supported
        self.dryrun = False     #True if dry-run supported
        self.synch = False      #True if synchronization supported
        self.loop_count = GRASP_DEF_LOOPCT  # Default starting value
        self.value = None       #Place holder; any Python object
	]]></sourcecode>
          </section>
          <section anchor="asaL" numbered="true" toc="default">
            <name>asa_locator</name>
            <t>An 'asa_locator' parameter is a data structure with the following contents:
            </t>
            <dl spacing="normal">
              <dt>locator:</dt><dd>The actual locator, either an IP address or an ASCII string.</dd>
              <dt>ifi (unsigned integer):</dt><dd>The interface identifier index via which this was discovered (of limited
              use to most ASAs).</dd>
              <dt>expire (system dependent type):</dt><dd>The time on the local system clock when this locator will expire from the cache.</dd>

	      
               <dt>The following covers all locator types currently supported by GRASP:</dt>
	      <dd>
		<ul>
		<li>is_ipaddress (Boolean) - True if the locator is an IP address.</li>
                <li>is_fqdn (Boolean) -  True if the locator is a Fully Qualified Domain Name (FQDN).</li>
                <li>is_uri (Boolean) -  True if the locator is a URI.</li>
		</ul>
		<t>These options are mutually exclusive. Depending on the programming language, they could
		  be represented as a bit pattern or an enumeration.</t>
	      </dd>
		  
              <dt>diverted (Boolean):</dt><dd>True if the locator was discovered via a Divert option.</dd>
              <dt>protocol (unsigned integer):</dt><dd>Applicable transport protocol (IPPROTO_TCP or IPPROTO_UDP).
              These constants are defined in the CDDL specification of GRASP <xref target="RFC8990"/>.</dd>
              <dt>port (unsigned integer):</dt><dd>Applicable port number.</dd>
            </dl>
            
            <t>The 'locator' field is of variable length in the case of an FQDN or a URI. GRASP does not set a maximum
                length for this field, but only for the total length of a GRASP message. Implementations
                might impose length limits.</t>
            <t>It should be noted that when one ASA discovers the asa_locator of another, there is no
            explicit authentication mechanism. In accordance with the trust model provided by the
            secure ACP, ASAs are presumed to provide correct locators in response to discovery.
            See "Locator Options" (<xref target="RFC8990" section="2.9.5" sectionFormat="of"/>) for further details.</t>
          </section>
          <section numbered="true" toc="default">
            <name>Tagged_objective</name>
            <t>A 'tagged_objective' parameter is a data structure with the following contents:
            </t>
            <dl spacing="normal">
              <dt>objective:</dt><dd>An objective.</dd>
              <dt>locator:</dt><dd>The asa_locator associated with the objective, or a null value.</dd>
            </dl>
          </section>
          <section numbered="true" toc="default">
            <name>asa_handle</name>
            <t>Although an authentication and authorization scheme for ASAs has not been defined, the API
       provides a very simple hook for such a scheme. When an ASA starts up, it registers itself
       with the GRASP core, which provides it with an opaque handle that, although not cryptographically
       protected, would be difficult for a third party to predict. The ASA must present this handle
       in future calls. This mechanism will prevent some elementary errors or trivial attacks
       such as an ASA manipulating an objective it has not registered to use.</t>
            <t>Thus, in most calls, an 'asa_handle' parameter is required. It is generated when an ASA
       first registers with GRASP, and the ASA must then store the asa_handle
       and use it in every subsequent GRASP call. Any call in which an invalid handle is presented will fail.
       It is an up to 32-bit opaque value (for example, represented as a uint32_t, depending on the language).
       Since it is only used locally, and not in GRASP messages, it is only required to be unique
       within the local GRASP instance. It is valid until the ASA terminates.
       It should be unpredictable; a possible implementation is to use the same mechanism that GRASP
       uses to generate Session IDs (see <xref target="sessn"/>).</t>
          </section>
          <section anchor="sessn" numbered="true" toc="default">
            <name>Session_handle and Callbacks</name>
            <t>In some calls, a 'session_handle' parameter is required. This is an opaque data
       structure as far as the ASA is concerned,
       used to identify calls to the API as belonging to a specific GRASP session
       (see <xref target="overlap"/>). 
       It will be provided as a parameter in callback functions.
       As well as distinguishing calls from different sessions, it also allows GRASP
       to detect and ignore calls from non-existent or timed-out sessions. </t>
          
       <t>In an event loop implementation, callback functions (<xref target="asynchmech"/>) may be
       supported for all API functions that involve waiting for a remote operation:
        </t>
        <ul empty="true" spacing="normal">
          <li>discover() whose callback would be discovery_received().</li>
          <li>request_negotiate() whose callback would be negotiate_step_received().</li>
          <li>negotiate_step() whose callback would be negotiate_step_received().</li>
          <li>listen_negotiate() whose callback would be negotiate_step_received().</li>
          <li>synchronize() whose callback would be synchronization_received().</li>
        </ul>
        <t>Further details of callbacks are implementation dependent.</t>  
        </section> 
          
        </section>
        <section anchor="regi" numbered="true" toc="default">
          <name>Registration</name>
          <t>These functions are used to register an ASA, and the objectives that it modifies,
            with the GRASP module.  In the absence of an authorization
            model, these functions are very simple, but they will avoid multiple ASAs choosing the
            same name and will prevent multiple ASAs manipulating the same objective.
            If an authorization model is added to GRASP, these API calls would
            need to be modified accordingly.</t>
          <ul spacing="normal">
            <li>
              <t>register_asa()</t>
              <t>All ASAs must use this call before issuing any other API calls.</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameter:</t>
		  
                    <ul empty="true">
                    <li>name of the ASA (UTF-8 string)</li>
                  </ul>
                </li>
                <li>
                  <t>Return value:</t>
                    <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                    <li>asa_handle (unsigned integer)</li>
                  </ul>
                </li>
                <li>This initializes the state in the GRASP module for the calling entity (the ASA).
               In the case of success, an 'asa_handle' is returned, which the ASA must present in
               all subsequent calls. 
               In the case of failure, the ASA has not been authorized and cannot operate.
               The 'asa_handle' value is undefined.</li>
              </ul>
            </li>
            <li>
              <t>deregister_asa()</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                 <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>
                    <li>name of the ASA (UTF-8 string)</li>
                  </ul>
                </li>
                <li>
                  <t>Return value:</t>
                   <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                  </ul>
                </li>
                <li>This removes all state in the GRASP module for the calling entity (the ASA)
             and deregisters any objectives it has registered. Note that these actions must
             also happen automatically if an ASA exits.</li>
                <li>Note -- the ASA name is, strictly speaking, redundant in this call but is present to
                detect and reject erroneous deregistrations.</li>
              </ul>
            </li>
            <li>
              <t>register_objective()</t>
              <t>ASAs must use this call for any objective whose value they need to transmit
              by negotiation, synchronization, or flooding.</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                  <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>              
                    <li>objective (structure)</li>         
                    <li>ttl (unsigned integer -- default GRASP_DEF_TIMEOUT)</li>      
                    <li>discoverable (Boolean -- default False)</li>
                    <li>overlap (Boolean -- default False)</li>
                    <li>local (Boolean -- default False)</li>
                  </ul>
                </li>
                <li>
                  <t>Return value:</t>
                  <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                  </ul>
                </li>
                <li>This registers an objective that this ASA may modify
                and transmit to other ASAs by flooding or negotiation. It is not necessary to register
                an objective that is only received by GRASP synchronization or flooding.
                The 'objective' becomes a candidate for discovery. However, discovery
                responses should not be enabled until the ASA calls listen_negotiate() or
                listen_synchronize(), showing that it is able to act as a responder.
                The ASA may negotiate the objective or send synchronization or flood data.
                Registration is not needed for "read-only" operations, i.e., the ASA only wants
                to receive synchronization or flooded data for the objective concerned. </li>

                <li>The 'ttl' parameter is the valid lifetime (time to live) in milliseconds of any
                discovery response generated for this objective. The default value should be the GRASP
                default timeout (GRASP_DEF_TIMEOUT; see <xref target="RFC8990"/>).</li>

                <li>If the parameter 'discoverable' is True, the objective
                is immediately discoverable. This is
                intended for objectives that are only defined for GRASP discovery
                and that do not support negotiation or synchronization.</li>

                <li>If the parameter 'overlap' is True, more than one ASA may register this objective
                in the same GRASP instance. This is of value for life cycle management
                of ASAs <xref target="I-D.ietf-anima-asa-guidelines"/> and must be
                used consistently for a given objective (always True or always False).</li>
                <li>If the parameter 'local' is True, discovery must return a link-local address.
                This feature is for objectives that must be restricted to the local link.</li>
                <li>This call may be repeated for multiple objectives.</li>
              </ul>
            </li>
            <li>
              <t>deregister_objective()</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                   <ul empty="true"> 
                    <li>asa_handle (unsigned integer)</li>
                    <li>objective (structure)</li>
                  </ul>
                </li>
                <li>
                  <t>Return value:</t>
                   <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                  </ul>
                </li>
                <li>The 'objective' must have been registered by the calling ASA; if not, this call fails. 
             Otherwise, it removes all state in the GRASP module for the given objective.</li>
              </ul>
            </li>
          </ul>
        </section>
	<section numbered="true" toc="default">
          <name>Discovery</name>
	      <ul spacing="normal">
            <li>
              <t>discover()</t>
              <t>This function may be used by any ASA to discover peers handling a given objective.</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                  <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>
                    <li>objective (structure)</li>
                    <li>timeout (unsigned integer)</li>
                    <li>minimum_TTL (unsigned integer)</li>
                  </ul>
                </li>
                <li>
                  <t>Return values:</t>
                   <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                    <li>locator_list (structure)</li>
                  </ul>
                </li>
                <li>This returns a list of discovered 'asa_locators' for the given objective.
                An empty list means that no locators were discovered within the timeout.
                Note that this structure includes all the fields described in <xref target="asaL"/>.
             </li>
                <li>The parameter 'minimum_TTL' must be greater than or equal to
                    zero. Any locally cached locators for the objective whose
                    remaining time to live in milliseconds is less than or equal to
                    'minimum_TTL' are deleted first. Thus, 'minimum_TTL' = 0 will
                    flush all entries. Note that this will not affect sessions already
                    in progress using the deleted locators.</li>

                <li>If the parameter 'timeout' is zero, any remaining locally cached locators for the
                objective are returned immediately, and no other action is taken. (Thus,
                a call with 'minimum_TTL' and 'timeout' both equal to zero is pointless.)</li>
		
                <li>If the parameter 'timeout' is greater than zero,
                GRASP discovery is performed, and all results obtained before the timeout in milliseconds
                expires are returned. If no results are obtained, an empty list is returned after the timeout.
                That is not an error condition. GRASP discovery is not a deterministic process.
                If there are multiple nodes handling an objective, none, some, or all of them
                will be discovered before the timeout expires.</li>
		
                <li><t>Asynchronous Mechanisms:</t>

		<dl>
                <dt>Threaded implementation:</dt><dd>This should be called in a separate thread 
                if asynchronous operation is required.</dd>
                <dt>Event loop implementation:</dt><dd>An additional in/out 'session_handle' parameter is used.
                If the 'errorcode' parameter has the value 2 ('noReply'),
                no response has been received so far. The 'session_handle' parameter must be presented
                in subsequent calls.
                A callback may be used in the case of a non-zero timeout.</dd></dl></li>
              </ul>
            </li>
          </ul>
        </section>

        <section numbered="true" toc="default">
          <name>Negotiation</name>
          
          <t>Since the negotiation mechanism is different from a typical client/server
          exchange, <xref target="negfig"/> illustrates the sequence of calls and GRASP
          messages in a negotiation. Note that after the first protocol exchange, the process
          is symmetrical, with negotiating steps strictly alternating between the two sides.
          Either side can end the negotiation. Also, the side that is due to respond
          next can insert a delay at any time, to extend the other side's timeout.
          This would be used, for example, if an ASA needed to negotiate with
          a third party before continuing with the current negotiation.</t>
          
          <t>The loop count embedded in the objective that is the subject of
          negotiation is initialized by the ASA that starts a negotiation
          and is then decremented by the GRASP core at each step, prior to
          sending each M_NEGOTIATE message. If it reaches
          zero, the negotiation will fail, and each side will receive an error code.</t>
          
        <figure anchor="negfig">
        <name>Negotiation Sequence</name>
      <artwork align="center" name="" type="" alt=""><![CDATA[
Initiator                         Responder
---------                         ---------

                                  listen_negotiate() \ Await request
                         
request_negotiate()
          M_REQ_NEG      ->       negotiate_step()   \ Open session,
                         <-      M_NEGOTIATE         / start negotiation
negotiate_step()
        M_NEGOTIATE      ->       negotiate_step()   \ Continue
                         <-      M_NEGOTIATE         / negotiation
                         ...
negotiate_wait()                                     \ Insert
        M_WAIT           ->                          / delay
negotiate_step()
        M_NEGOTIATE      ->       negotiate_step()   \ Continue
                         <-      M_NEGOTIATE         / negotiation
negotiate_step()
        M_NEGOTIATE      ->       end_negotiate()    \ End
                         <-      M_END               / negotiation

                                                     \ Process results 
]]></artwork>
</figure>

        <t>As the negotiation proceeds, each side will update the value of the objective in accordance with
        its particular semantics, defined in the specification of the objective. Although many objectives
        will have values that can be ordered, so that negotiation can be a simple bidding process, it
        is not a requirement.</t>
        <t>Failure to agree, a timeout, or loop count exhaustion may all end a negotiation session, but none
        of these cases are protocol failures.</t>
          
          
          <ul spacing="normal">
            <li>
              <t>request_negotiate()</t>
              <t>This function is used by any ASA to initiate negotiation of a GRASP objective as a requester (client).</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                   <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>  
                    <li>objective (structure)</li>        
                    <li>peer (asa_locator)</li>                
                    <li>timeout (unsigned integer)</li>
                  </ul>
                </li>
                <li>
                  <t>Return values:</t>
                  <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                    <li>session_handle (structure) (undefined unless successful)</li>  
                    <li>proffered_objective (structure) (undefined unless successful)</li>
                    <li>reason (string) (empty unless negotiation declined)</li>
                  </ul>
                </li>
                <li>This function opens a negotiation session between two ASAs. Note that GRASP currently
                does not support multiparty negotiation, which would need to be added as an extended
                function.</li> 
                <li>The 'objective' parameter must
             include the requested value, and its loop count should be set to a
             suitable starting value by the ASA. If not, the GRASP default will apply.</li>
                <li>Note that a given negotiation session may or may not be a dry-run negotiation;
             the two modes must not be mixed in a single session.</li>
                <li>The 'peer' parameter is the target node; it must be an 'asa_locator' as returned
             by discover(). If 'peer' is null, GRASP discovery is automatically performed first to find
             a suitable peer (i.e., any node that supports the objective in question).</li>
                <li>The 'timeout' parameter is described in <xref target="tout"/>.</li>
                <li>
                  <t>If the 'errorcode' return value is 0, the negotiation has successfully
             started. There are then two cases:
                  </t>
                  <ol spacing="normal" type="1">
                    <li>The 'session_handle' parameter is null. In this case, the negotiation
              has succeeded with one exchange of messages, and the peer has accepted the request. The returned
              'proffered_objective' contains the value accepted by the peer, which is
              therefore equal to the value in the requested 'objective'. For this reason,
              no session handle is needed, since the session has ended.</li>
                    <li>
                      <t>The 'session_handle' parameter is not null. In this case, negotiation
              must continue. The 'session_handle' must be presented in all subsequent negotiation steps.
              The returned 'proffered_objective' contains the first value
              proffered by the negotiation peer in the first exchange of messages;
              in other words, it is a counter-offer.
              The contents of this instance of the objective
              must be used to prepare the next negotiation step (see negotiate_step() below) because
              it contains the updated loop count, sent by the negotiation peer.
              The GRASP code automatically decrements the loop count by 1 at each step
              and returns an error if it becomes zero. Since this terminates the
              negotiation, the other end will experience a timeout, which will
              terminate the other end of the session.
               
                      </t>
                      <t>
              This function must be followed by calls to 'negotiate_step' and/or 'negotiate_wait'
              and/or 'end_negotiate' until the negotiation ends. 'request_negotiate' may then be called
              again to start a new negotiation.</t>
                    </li>
                  </ol>
                </li>
                <li>If the 'errorcode' parameter has the value 1 ('declined'), the negotiation has been declined
             by the peer (M_END and O_DECLINE features of GRASP). The 'reason' string is then available for
             information and diagnostic use, but it may be a null string. For this and any other error code,
             an exponential backoff is recommended before any retry (see <xref target="security"/>).</li>

	        <li><t>Asynchronous Mechanisms:</t><dl>
                <dt>Threaded implementation:</dt><dd>This should be called in a separate thread
                if asynchronous operation is required.</dd>
                <dt>Event loop implementation:</dt><dd>The 'session_handle' parameter is used to distinguish
                multiple simultaneous sessions. If the 'errorcode' parameter has the value 2 ('noReply'),
                no response has been received so far. The 'session_handle' parameter must be presented
                in subsequent calls.</dd></dl></li>
                
                <li>Use of dry-run mode must be consistent within a GRASP session. The state of the 'dry'
             flag in the initial request_negotiate() call must be the same in all subsequent negotiation
             steps of the same session. The semantics of the dry-run mode are built into the ASA; GRASP
             merely carries the flag bit.</li>
                <li>Special note for the ACP infrastructure ASA: It is likely that this ASA will need to
             discover and negotiate with its peers in each of its on-link neighbors. It will therefore need to
             know not only the link-local IP address but also the physical interface and transport port for
             connecting to each neighbor. One implementation approach to this is to include these
             details in the 'session_handle' data structure, which is opaque to normal ASAs.</li>
              </ul>
            </li>
            <li>
              <t>listen_negotiate()</t>
              <t>This function is used by an ASA to start acting as a negotiation responder (listener)
              for a given GRASP objective.</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                  <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>
                   
                    <li>objective (structure)</li>
                  </ul>
                </li>
                <li>
                  <t>Return values:</t>
                  <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                    <li>session_handle (structure) (undefined unless successful)</li>
                    <li>requested_objective (structure) (undefined unless successful)</li>
                  </ul>
                </li>
                <li>This function instructs GRASP to listen for negotiation
             requests for the given 'objective'. It also enables discovery responses for the objective,
		as mentioned under register_objective() in <xref target="regi"/>.</li>
		
                <li><t>Asynchronous Mechanisms:</t><dl>
                <dt>Threaded implementation:</dt><dd>It will block waiting for an incoming request, so
             it should be called in a separate thread if asynchronous operation is required.
             Unless there is an unexpected failure, this call only returns after an
             incoming negotiation request.
             If the ASA supports multiple simultaneous transactions, a new sub-thread must
             be spawned for each new session, so that listen_negotiate() can
             be called again immediately.</dd>
                <dt>Event loop implementation:</dt><dd>A 'session_handle' parameter is used
                to distinguish individual sessions.
             If the ASA supports multiple simultaneous transactions, a new event must be inserted
             in the event loop for each new session, so that listen_negotiate() can
		be reactivated immediately.</dd></dl></li>
		
                <li>This call only returns (threaded model) or triggers (event loop) after an
             incoming negotiation request. When this occurs,
             'requested_objective' contains the first value requested by
             the negotiation peer. The contents of this instance of the objective
              must be used in the subsequent negotiation call because
              it contains the loop count sent by the negotiation peer. The 'session_handle' must be
             presented in all subsequent negotiation steps. </li>
                <li>This function must be followed by calls to 'negotiate_step' and/or 'negotiate_wait'
             and/or 'end_negotiate' until the negotiation ends.</li>
                <li>If an ASA is capable of handling multiple negotiations simultaneously, it may
             call 'listen_negotiate' simultaneously from multiple threads, or insert multiple events.
             The API and GRASP implementation
             must support re-entrant use of the listening state and the negotiation calls. Simultaneous
             sessions will be distinguished by the threads or events themselves, 
             the GRASP session handles, and the underlying unicast transport sockets.</li>
              </ul>
            </li>
            <li>
              <t>stop_listen_negotiate()</t>
              <t>This function is used by an ASA to stop acting as a responder (listener) for a given GRASP objective.</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                   <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>
                    <li>objective (structure)</li>
                  </ul>
                </li>
                <li>
                  <t>Return value:</t>
                  <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                  </ul>
                </li>
                <li>Instructs GRASP to stop listening for negotiation
		requests for the given objective, i.e., cancels 'listen_negotiate'.</li>
		
                <li><t>Asynchronous Mechanisms:</t><dl>
                <dt>Threaded implementation:</dt><dd>Must be called
             from a different thread than 'listen_negotiate'. </dd>
                <dt>Event loop implementation:</dt><dd>No special considerations.</dd></dl></li>
              </ul>
            </li>
            <li>
              <t>negotiate_step()</t>
              <t>This function is used by either ASA in a negotiation session to make the next step in negotiation.</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                  <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>
                    <li>session_handle (structure)</li>         
                    <li>objective (structure)</li>                
                    <li>timeout (unsigned integer) as described in <xref target="tout"/></li>
                  </ul>
                </li>
                <li>
                  <t>Return values:</t>
                   <ul empty="true">
                    <li>Exactly as for 'request_negotiate'</li>
                  </ul>
                </li>
                <li>Executes the next negotiation step with the peer. The 'objective' parameter
                contains the next value being proffered by the ASA in this step. It must also
                contain the latest 'loop_count' value received from request_negotiate() 
                or negotiate_step().</li>
		
                <li><t>Asynchronous Mechanisms:</t><dl>
                <dt>Threaded implementation:</dt><dd>Usually called in the same thread as the 
                preceding 'request_negotiate' or 'listen_negotiate',
                with the same value of 'session_handle'.</dd>
                <dt>Event loop implementation:</dt><dd>Must use the same value of 'session_handle' returned by the
             preceding 'request_negotiate' or 'listen_negotiate'.</dd></dl></li>
              </ul>
            </li>
            <li>
              <t>negotiate_wait()</t>
              <t>This function is used by either ASA in a negotiation session to delay the next step in negotiation.</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                  <ul empty="true">
                    <li>asa_handle (unsigned integer)</li> 
                    <li>session_handle (structure)</li>              
                    <li>timeout (unsigned integer)</li>
                  </ul>
                </li>
                <li>
                  <t>Return value:</t>
                 <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                  </ul>
                </li>
                <li>Requests the remote peer to delay the negotiation session by 'timeout' milliseconds,
                thereby extending the original timeout. This
                function simply triggers a GRASP Confirm Waiting message (see <xref target="RFC8990"/>
                for details).</li>
		
                <li><t>Asynchronous Mechanisms:</t><dl>
                <dt>Threaded implementation:</dt><dd>Called in the same thread as the preceding 
                'request_negotiate' or 'listen_negotiate', with the same value of 'session_handle'.</dd>
                <dt>Event loop implementation:</dt><dd>Must use the same value of 'session_handle' returned by the
             preceding 'request_negotiate' or 'listen_negotiate'.</dd></dl></li>
              </ul>
            </li>
            <li>
              <t>end_negotiate()</t>
              <t>This function is used by either ASA in a negotiation session to end a negotiation.</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                  <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>
                    <li>session_handle (structure)</li>   
                    <li>result (Boolean)</li>     
                    <li>reason (UTF-8 string)</li>
                  </ul>
                </li>
                <li>
                  <t>Return value:</t>
                  <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                  </ul>
                </li>
                <li>
                  <t>End the negotiation session:
                  </t>
                  <t>
             'result' = True for accept (successful negotiation), and False for decline (failed negotiation).
                  </t>
                  <t>
             'reason' = string describing reason for decline (may be null; ignored if accept).</t>
                </li>
                <li><t>Asynchronous Mechanisms:</t><dl>
                <dt>Threaded implementation:</dt><dd>Called in the same thread as the preceding 'request_negotiate' or 'listen_negotiate',
             with the same value of 'session_handle'.</dd>
                <dt>Event loop implementation:</dt><dd>Must use the same value of 'session_handle' returned by the
             preceding 'request_negotiate' or 'listen_negotiate'.</dd></dl></li>
              </ul>
            </li>
          </ul>
        </section>
        
        <section numbered="true" toc="default">
          <name>Synchronization and Flooding</name>
          <ul spacing="normal">
            <li>
              <t>synchronize()</t>
              <t>This function is used by any ASA to cause synchronization of a GRASP objective as a requester (client).</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                  <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>
                    <li>objective (structure)</li>       
                    <li>peer (asa_locator)</li>                
                    <li>timeout (unsigned integer)</li>
                  </ul>
                </li>
                <li>
                  <t>Return values:</t>
                   <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                    <li>result (structure) (undefined unless successful)</li>
                  </ul>
                </li>
                <li>This call requests the synchronized value of the given 'objective'.</li>
		<li>If the 'peer' parameter is null, and the objective is already
                available in the local cache, the flooded objective is returned immediately
                in the 'result' parameter. In this case, the 'timeout' is ignored.</li>
                <li> If the 'peer' parameter is not null, or a cached value
                is not available, synchronization with a discovered ASA is performed. 
                If successful, the retrieved objective is returned
                in the 'result' value.</li>
                <li>The 'peer' parameter is an 'asa_locator' as returned by discover().
                If 'peer' is null, GRASP discovery is automatically performed first to find
                a suitable peer (i.e., any node that supports the objective in question).</li>
                <li>The 'timeout' parameter is described in <xref target="tout"/>.</li>
                <li>This call should be repeated whenever the latest value is needed.</li>
		
                <li><t>Asynchronous Mechanisms:</t><dl>
                <dt>Threaded implementation:</dt><dd>Call in a separate thread if asynchronous operation is required.</dd>
                <dt>Event loop implementation:</dt><dd>An additional in/out 'session_handle' parameter is used,
                as in request_negotiate(). If the 'errorcode' parameter has the value 2 ('noReply'),
                no response has been received so far. The 'session_handle' parameter must be presented
                in subsequent calls.</dd></dl></li>

                <li>In the case of failure, an exponential backoff is recommended before
                retrying (<xref target="security"/>).</li>
              </ul>
            </li>
            <li>
              <t>listen_synchronize()</t>
              <t>This function is used by an ASA to start acting as a synchronization responder (listener)
              for a given GRASP objective.</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                   <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>
                    <li>objective (structure)</li>
                  </ul>
                </li>
                <li>
                  <t>Return value:</t>
                  <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                  </ul>
                </li>
                <li>This instructs GRASP to listen for synchronization
             requests for the given objective and to
             respond with the value given in the 'objective' parameter.
             It also enables discovery responses for the objective,
             as mentioned under register_objective() in <xref target="regi"/>.</li>
                <li>This call is non-blocking and may be repeated whenever the value changes.</li>
              </ul>
            </li>
            <li>
              <t>stop_listen_synchronize()</t>
              <t>This function is used by an ASA to stop acting as a synchronization responder (listener)
              for a given GRASP objective.</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                   <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>
                    <li>objective (structure)</li>
                  </ul>
                </li>
                <li>
                  <t>Return value:</t>
                  <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                  </ul>
                </li>
                <li>This call instructs GRASP to stop listening for synchronization
             requests for the given 'objective', i.e., it cancels a previous listen_synchronize.</li>
              </ul>
            </li>
            <li>
              <t>flood()</t>
              <t>This function is used by an ASA to flood one or more GRASP objectives
              throughout the Autonomic Network.</t>
              <t>Note that each GRASP node caches all flooded objectives that it receives, until
              each one's time to live expires. Cached objectives are tagged with their origin
              as well as an expiry time, so multiple
              copies of the same objective may be cached simultaneously. Further details
              are given in "Flood Synchronization Message" (<xref target="RFC8990" section="2.8.11" sectionFormat="of"/>).</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                   <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>
                    <li>ttl (unsigned integer)</li>    
                    <li>tagged_objective_list (structure)</li>
                  </ul>
                </li>
                <li>
                  <t>Return value:</t>
                   <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                  </ul>
                </li>
                <li>This call instructs GRASP to flood the given synchronization
             objective(s) and their value(s) and associated locator(s) to all GRASP nodes.</li>
                <li>The 'ttl' parameter is the valid lifetime (time to live) of
             the flooded data in milliseconds (0 = infinity).</li>
                <li>The 'tagged_objective_list' parameter is a list of one or more 'tagged_objective'
             couplets.
             The 'locator' parameter that tags each objective is normally null but may 
             be a valid 'asa_locator'.
             Infrastructure ASAs needing to flood an {address, protocol, port} 3-tuple
             with an objective create an asa_locator object to do so. If the IP address 
             in that locator is the unspecified address
             ('::'), it is replaced by the link-local address of the sending node in each
             copy of the flood multicast, which will be forced to have a loop count of 1.
             This feature is for objectives that must be restricted to the local link.
             </li>
                <li>The function checks that the ASA registered each objective.</li>
                <li>This call may be repeated whenever any value changes.</li>
              </ul>
            </li>
            <li>
              <t>get_flood()</t>
              <t>This function is used by any ASA to obtain the current value of a flooded GRASP objective.</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                  <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>
                    <li>objective (structure)</li>
                  </ul>
                </li>
                <li>
                  <t>Return values:</t>
                  <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                    <li>tagged_objective_list (structure) (undefined unless successful)</li>
                  </ul>
                </li>
                <li>This call instructs GRASP to return the given synchronization
             objective if it has been flooded and its lifetime has not expired. </li>
 
                <li>The 'tagged_objective_list' parameter is a list of 'tagged_objective'
             couplets, each one being a copy of the flooded objective and a corresponding locator.
             Thus, if the same objective has been flooded by multiple ASAs, the recipient can distinguish
             the copies.</li>
                <li>Note that this call is for advanced ASAs. In a simple case, an ASA can simply call
             synchronize() in order to get a valid flooded objective.</li>
              </ul>
            </li>
            <li>
              <t>expire_flood()</t>
              <t>This function may be used by an ASA to expire specific entries in the local GRASP flood cache.</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                  <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>
                    <li>tagged_objective (structure)</li>
                  </ul>
                </li>
                <li>
                  <t>Return value:</t>
                   <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                  </ul>
                </li>
                <li>This is a call that can only be used after a preceding
             call to get_flood() by an ASA that is capable of deciding
             that the flooded value is stale or invalid. Use with care.</li>
                <li>The 'tagged_objective' parameter is the one to be expired.</li>
              </ul>
            </li>
          </ul>
        </section>
        
        <section numbered="true" toc="default">
          <name>Invalid Message Function</name>
          <ul spacing="normal">
            <li>
              <t>send_invalid()</t>
              <t>This function may be used by any ASA to stop an ongoing GRASP session.</t>
              <ul spacing="normal">
                <li>
                  <t>Input parameters:</t>
                  <ul empty="true">
                    <li>asa_handle (unsigned integer)</li>               
                    <li>session_handle (structure)</li>
                    <li>info (bytes)</li>
                  </ul>
                </li>
                <li>
                  <t>Return value:</t>
                   <ul empty="true">
                    <li>errorcode (unsigned integer)</li>
                  </ul>
                </li>
                <li>
                  <t>Sends a GRASP Invalid message (M_INVALID), as described in
             <xref target="RFC8990"/>. It should not be used if end_negotiate() would be sufficient.
             Note that this message may be used in response to any unicast GRASP message that the receiver
             cannot interpret correctly. In most cases, this message will be generated internally by a
             GRASP implementation.
                  </t>
                  <t>
             'info' = optional diagnostic data supplied by the ASA. It may be raw bytes from the invalid message.</t>
                </li>
              </ul>
            </li>
          </ul>
        </section>
      </section>
    </section>

    <section anchor="security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>Security considerations for the GRASP protocol are discussed in <xref target="RFC8990"/>.
      These include denial-of-service issues, even though these are considered a low risk in the ACP. In various
      places, GRASP recommends an exponential backoff. An ASA using the API should use exponential backoff
      after failed discover(), req_negotiate(), or synchronize() operations. The timescale for such backoffs
      depends on the semantics of the GRASP objective concerned. Additionally, a flood() operation should
      not be repeated at shorter intervals than is useful. The appropriate interval depends on the semantics
      of the GRASP objective concerned. These precautions are intended to assist the detection of
      denial-of-service attacks.</t>
      
      <t>As a general precaution, all ASAs able to handle multiple negotiation or synchronization requests
      in parallel may protect themselves against a denial-of-service attack by limiting the number
      of requests they handle simultaneously and silently discarding excess requests. It might also
      be useful for the GRASP core to limit the number of objectives registered by a given ASA, the
      total number of ASAs registered, and the total number of simultaneous sessions,
      to protect system resources. During times of high autonomic activity, such as recovery
      from widespread faults, ASAs may experience many GRASP session failures. Guidance on
      making ASAs suitably robust is given in <xref target="I-D.ietf-anima-asa-guidelines"/>.</t>
      
      <t>As noted earlier, the trust model is that all ASAs in a given Autonomic Network communicate via a secure
      autonomic control plane; therefore, they trust each other's messages.
      Specific authorization of ASAs to use particular GRASP objectives is a subject for future study, also briefly
      discussed in <xref target="RFC8990"/>.</t>
      
      <t>The careful reader will observe that a malicious ASA could extend a negotiation session
      indefinitely by use of the negotiate_wait() function or by manipulating the loop count
      of an objective. A robustly implemented ASA could detect such behavior by a peer
      and break off negotiation.</t>
      
      <t>The 'asa_handle' is used in the API as a first line of defense against a malware process attempting
      to imitate a legitimately registered ASA. The 'session_handle' is used in the API as a first line
      of defense against a malware process attempting to hijack a GRASP session. Both these handles
      are likely to be created using GRASP's 32-bit pseudorandom Session ID. By construction, GRASP avoids
      the risk of Session ID collisions (see "Session Identifier (Session ID)", <xref target="RFC8990" section="2.7" sectionFormat="of"/>).
      There remains a finite probability that an attacker could guess a Session ID, session_handle, or asa_handle.
      However, this would only be of value to an attacker that had already penetrated the ACP, which would
      allow many other simpler forms of attack than hijacking GRASP sessions.</t>
    </section>
    <section anchor="iana" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>This document has no IANA actions.</t>

    </section>
   
  </middle>
  <back>

<displayreference target="I-D.ietf-anima-grasp-distribution" to="GRASP-DISTRIB"/>
<displayreference target="I-D.ciavaglia-anima-coordination" to="ANIMA-COORD"/>
<displayreference target="I-D.ietf-anima-asa-guidelines" to="ASA-GUIDE"/>

    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
      <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8610.xml"/>
      <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8949.xml"/> 

<!-- [I-D.ietf-anima-grasp] C325 companion document -->
<reference anchor='RFC8990' target='https://www.rfc-editor.org/info/rfc8990'>
<front>
<title>GeneRic Autonomic Signaling Protocol (GRASP)</title>
<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<author initials='B' surname='Carpenter' fullname='Brian Carpenter' role='editor'>
    <organization />
</author>

<author initials='B' surname='Liu' fullname='Bing Liu' role='editor'>
    <organization />
</author>
<date month='May' year='2021' />
</front>
<seriesInfo name="RFC" value="8990"/>
<seriesInfo name="DOI" value="10.17487/RFC8990"/>
</reference>
      </references>
      <references>

        <name>Informative References</name>

<!--[I-D.ietf-anima-reference-model] C325 companion doc - in REF state-->
<reference anchor='RFC8993' target='https://www.rfc-editor.org/info/rfc8993'>
<front>
<title>A Reference Model for Autonomic Networking</title>
<author initials='M' surname='Behringer' fullname='Michael Behringer' role='editor'>
    <organization />
</author>

<author initials='B' surname='Carpenter' fullname='Brian Carpenter'>
    <organization />
</author>

<author initials='T' surname='Eckert' fullname='Toerless Eckert'>
    <organization />
</author>

<author initials='L' surname='Ciavaglia' fullname='Laurent Ciavaglia'>
    <organization />
</author>

<author initials='J' surname='Nobre' fullname='Jeferson Nobre'>
    <organization />
</author>
<date month='May' year='2021' />
</front>
<seriesInfo name="RFC" value="8993"/>
<seriesInfo name="DOI" value="10.17487/RFC8993"/>
</reference>


<!--[I-D.ietf-anima-grasp-distribution] IESG state I-D Exists as of 5/7/21 -->

<!-- Note that the output for this I-D was wrong, so pulled in the long form.
<xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-anima-grasp-distribution.xml"/>-->

<reference anchor="I-D.ietf-anima-grasp-distribution">
   <front>
      <title>Information Distribution over GRASP</title>
      <author fullname="Bing Liu">
	 <organization>Huawei Technologies</organization>
      </author>
      <author fullname="Xun Xiao">
	 <organization>MRC, Huawei Technologies</organization>
      </author>
      <author fullname="Artur Hecker">
	 <organization>MRC, Huawei Technologies</organization>
      </author>
      <author fullname="Sheng Jiang">
	 <organization>Huawei Technologies</organization>
      </author>
      <author fullname="Zoran Despotovic">
	 <organization>MRC, Huawei Technologies</organization>
      </author>
      <author fullname="Brian Carpenter">
	 <organization>School of Computer Science, University of
      Auckland</organization>
      </author>
      <date month="March" day="8" year="2021" />
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-grasp-distribution-02" />
</reference>



<!--[I-D.ietf-anima-autonomic-control-plane] C325 companion doc - in REF state -->
<reference anchor='RFC8994'  target='https://www.rfc-editor.org/info/rfc8994'>
<front>
<title>An Autonomic Control Plane (ACP)</title>
<author initials='T' surname='Eckert' fullname='Toerless Eckert' role='editor'>
    <organization />
</author>

<author initials='M' surname='Behringer' fullname='Michael Behringer' role='editor'>
    <organization />
</author>

<author initials='S' surname='Bjarnason' fullname='Steinthor Bjarnason'>
    <organization />
</author>
<date month='May' year='2021' />
</front>
<seriesInfo name="RFC" value="8994"/>
<seriesInfo name="DOI" value="10.17487/RFC8994"/>
</reference>


<!-- [I-D.ietf-anima-bootstrapping-keyinfra] C325 companion doc - in REF state -->
<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>

<author initials='M' surname='Pritikin' fullname='Max Pritikin'>
    <organization />
</author>

<author initials='M' surname='Richardson' fullname='Michael Richardson'>
    <organization />
</author>

<author initials='T' surname='Eckert' fullname='Toerless Eckert'>
    <organization />
</author>

<author initials='M' surname='Behringer' fullname='Michael Behringer'>
    <organization />
</author>

<author initials='K' surname='Watsen' fullname='Kent Watsen'>
    <organization />
</author>
<date month='May' year='2021' />
</front>
<seriesInfo name="RFC" value="8995"/>
<seriesInfo name="DOI" value="10.17487/RFC8995"/>
</reference>

<!--[I-D.ciavaglia-anima-coordination] IESG state Expired as of 5/7/21-->
<!--Note that the output was wrong so had to pull in the long form.
<xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ciavaglia-anima-coordination.xml"/>-->


<reference anchor="I-D.ciavaglia-anima-coordination">
   <front>
      <title>Autonomic Functions Coordination</title>
      <author fullname="Laurent Ciavaglia">
	 </author>
      <author fullname="Pierre Peloso">
	 </author>
      <date month="March" day="21" year="2016" />
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ciavaglia-anima-coordination-01" />
</reference>


      
<!--[I-D.ietf-anima-asa-guidelines] IESG state I-D Exists as of 5/7/21 -->
<xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-anima-asa-guidelines.xml"/>

      <reference anchor="libcbor" target="https://libcbor.readthedocs.io/">
          <front>
            <title>libcbor - libcbor 0.8.0 documentation</title>
            <author fullname="Pavel Kalvoda" surname="Kalvoda" initials="P"/>
	    <date month="April" year="2021"/>
          </front>
      </reference>
      </references>
    </references>
    
    <section anchor="ErrAppx" numbered="true" toc="default">
      <name>Error Codes</name>
      <t>This appendix lists the error codes defined so far on the basis of
      implementation experience, with suggested symbolic names
      and corresponding descriptive strings in English. It is expected that complete API
      implementations will provide for localization of these descriptive strings,
      and that additional error codes will be needed according to implementation details.</t>
      <t>The error codes that may only be returned by one or two functions
      are annotated accordingly, and the others may be returned by numerous
      functions. The 'noSecurity'
      error will be returned to most calls if GRASP is running in an insecure mode
      (i.e., with no secure substrate such as the ACP),
      except for the specific DULL usage mode described in
      "Discovery Unsolicited Link-Local (DULL) GRASP" (<xref target="RFC8990" section="2.5.2" sectionFormat="of"/>.</t>
     

<table anchor="table1_error_codes"> 
  <name>Error Codes</name>   
  <thead>
    <tr>
      <th>Name</th>  
      <th>Error Code</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>        
    <tr>
      <td>ok</td>
      <td>0</td>
      <td>"OK"</td>
    </tr>
    <tr>
      <td>declined</td>
      <td>1</td>
      <td>"Declined" (req_negotiate, negotiate_step)</td>
    </tr>
    <tr>
      <td>noReply</td>
      <td>2</td>
      <td>"No reply" (indicates waiting state in event loop calls)</td>
    </tr>
      <tr>
      <td>unspec</td>
      <td>3</td>
      <td>"Unspecified error"</td>
      </tr>
    <tr>
      <td>ASAfull</td>
      <td>4</td>
      <td>"ASA registry full" (register_asa)</td>
    </tr>
    <tr>
      <td>dupASA</td>
      <td>5</td>
      <td>"Duplicate ASA name" (register_asa)</td>
    </tr>
    <tr>
      <td>noASA</td>
      <td>6</td>
      <td>"ASA not registered"</td>
     </tr>
     <tr>
      <td>notYourASA</td>
      <td>7</td>
      <td>"ASA registered but not by you" (deregister_asa)</td>
    </tr>
    <tr>
      <td>notBoth</td>
      <td>8</td>
      <td>"Objective cannot support both negotiation
          and synchronization" (register_obj)</td>
    </tr>
    <tr>
      <td>notDry</td>
      <td>9</td>
      <td>"Dry-run allowed only with negotiation"
          (register_obj)</td>
    </tr>
    <tr>
      <td>notOverlap</td>
      <td>10</td>
      <td>"Overlap not supported by this implementation"
          (register_obj)</td>
    </tr>
 <tr>
      <td>objFull</td>
      <td>11</td>
      <td>"Objective registry full" (register_obj)</td>
    </tr>
 <tr>
      <td>objReg</td>
      <td>12</td>
      <td>"Objective already registered" (register_obj)</td>
    </tr>
 <tr>
      <td>notYourObj</td>
      <td>13</td>
      <td>"Objective not registered by this ASA"</td>
    </tr>
 <tr>
      <td>notObj</td>
      <td>14</td>
      <td>"Objective not found"</td>
    </tr>
 <tr>
      <td>notNeg</td>
      <td>15</td>
      <td>"Objective not negotiable" (req_negotiate, listen_negotiate)</td>
    </tr>
 <tr>
      <td>noSecurity</td>
      <td>16</td>
      <td>"No security"</td>
    </tr>
 <tr>
      <td>noDiscReply</td>
      <td>17</td>
      <td>"No reply to discovery" (req_negotiate)</td>
    </tr>
 <tr>
      <td>sockErrNegRq</td>
      <td>18</td>
      <td>"Socket error sending negotiation request" (req_negotiate)</td>
    </tr>
 <tr>
      <td>noSession</td>
      <td>19</td>
      <td>"No session"</td>
    </tr>
<tr>
      <td>noSocket</td>
      <td>20</td>
      <td>"No socket"</td>
    </tr>
<tr>
      <td>loopExhausted</td>
      <td>21</td>
      <td>"Loop count exhausted" (negotiate_step)</td>
    </tr>
<tr>
      <td>sockErrNegStep</td>
      <td>22</td>
      <td>"Socket error sending negotiation step" (negotiate_step)</td>
    </tr>
<tr>
      <td>noPeer</td>
      <td>23</td>
      <td> "No negotiation peer" (req_negotiate, negotiate_step)</td>
    </tr>
<tr>
      <td>CBORfail</td>
      <td>24</td>
      <td>"CBOR decode failure" (req_negotiate, negotiate_step, synchronize)</td>
    </tr>
<tr>
      <td>invalidNeg</td>
      <td>25</td>
      <td>"Invalid Negotiate message" (req_negotiate, negotiate_step)</td>
    </tr>
<tr>
      <td>invalidEnd</td>
      <td>26</td>
      <td>"Invalid end message" (req_negotiate, negotiate_step)</td>
    </tr>
<tr>
      <td>noNegReply</td>
      <td>27</td>
      <td>"No reply to negotiation step" (req_negotiate, negotiate_step)</td>
    </tr>
<tr>
      <td>noValidStep</td>
      <td>28</td>
      <td>"No valid reply to negotiation step" (req_negotiate, negotiate_step)</td>
    </tr>
<tr>
      <td>sockErrWait</td>
      <td>29</td>
      <td>"Socket error sending wait message" (negotiate_wait)</td>
    </tr>
<tr>
      <td>sockErrEnd</td>
      <td>30</td>
      <td>"Socket error sending end message" (end_negotiate, send_invalid)</td>
    </tr>
<tr>
      <td>IDclash</td>
      <td>31</td>
      <td>"Incoming request Session ID clash" (listen_negotiate)</td>
    </tr>
<tr>
      <td>notSynch</td>
      <td>32</td>
      <td> "Not a synchronization objective" (synchronize, get_flood)</td>
    </tr>
<tr>
      <td>notFloodDisc</td>
      <td>33</td>
      <td>"Not flooded and no reply to discovery" (synchronize)</td>
    </tr>
<tr>
      <td>sockErrSynRq</td>
      <td>34</td>
      <td>"Socket error sending synch request" (synchronize)</td>
    </tr>
<tr>
      <td>noListener</td>
      <td>35</td>
      <td>"No synch listener" (synchronize)</td>
    </tr>
<tr>
      <td>noSynchReply</td>
      <td>36</td>
      <td>"No reply to synchronization request" (synchronize)</td>
    </tr>
<tr>
      <td>noValidSynch</td>
      <td>37</td>
      <td>"No valid reply to synchronization request" (synchronize)</td>
    </tr>
<tr>
      <td>invalidLoc</td>
      <td>38</td>
      <td>"Invalid locator" (flood)</td>
    </tr>
  </tbody>
</table>
   <section anchor="ack" numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>Excellent suggestions were made by
      <contact fullname="Ignas Bagdonas"/>,
      <contact fullname="Carsten Bormann"/>,
      <contact fullname="Laurent Ciavaglia"/>,
      <contact fullname="Roman Danyliw"/>,
      <contact fullname="Toerless Eckert"/>,
      <contact fullname="Benjamin Kaduk"/>,
      <contact fullname="Erik Kline"/>,
      <contact fullname="Murray Kucherawy"/>,
      <contact fullname="Paul Kyzivat"/>,
      <contact fullname="Guangpeng Li"/>,
      <contact fullname="Michael Richardson"/>,
      <contact fullname="Joseph Salowey"/>,
      <contact fullname="Éric Vyncke"/>,
      <contact fullname="Magnus Westerlund"/>,
      <contact fullname="Rob Wilton"/>,
      and other participants in the ANIMA WG and the IESG.</t>
    </section>
    </section>
  
  </back>
</rfc>
