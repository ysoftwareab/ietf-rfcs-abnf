<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" submissionType="IETF"
     category="exp" consensus="true" docName="draft-ietf-tcpm-converters-19"
     number="8803" ipr="trust200902" obsoletes="" updates="" xml:lang="en"
     tocInclude="true" sortRefs="true" symRefs="true" version="3"> 


  <front>
    <title abbrev="Convert Protocol">0-RTT TCP Convert Protocol</title>
    <seriesInfo name="RFC" value="8803"/>

    <author fullname="Olivier Bonaventure" initials="O." role="editor" surname="Bonaventure">
      <organization>Tessares</organization>
      <address>
<postal>
<street>Avenue Jean Monnet 1</street>
<city>B-1348 Louvain-la-Neuve</city>
<region></region>
<code></code>
<country>Belgium</country>
</postal>
        <email>Olivier.Bonaventure@tessares.net</email>
      </address>
    </author>


    <author fullname="Mohamed Boucadair" initials="M." role="editor" surname="Boucadair">
      <organization>Orange</organization>
      <address>
        <postal>
          <street>Clos Courtel</street>
          <city>Rennes</city>
          <code>35000</code>
          <country>France</country>
        </postal>
        <email>mohamed.boucadair@orange.com</email>
      </address>
    </author>

    <author fullname="Sri Gundavelli" initials="S." surname="Gundavelli">
      <organization>Cisco</organization>
      <address>
<postal>
<street>170 West Tasman Drive</street>
<city>San Jose</city>
<region>CA</region>
<code>95134</code>
<country>USA</country>
</postal>
        <email>sgundave@cisco.com</email>
      </address>
    </author>

    <author fullname="SungHoon Seo" initials="S." surname="Seo">
      <organization>Korea Telecom</organization>
      <address>
<postal>
<street>151 Taebong-ro</street>
<city>Seocho-gu, Seoul, 06763</city>
<region></region>
<code></code>
<country>Republic of Korea</country>
</postal>
        <email>sh.seo@kt.com</email>
      </address>
    </author>


    <author fullname="Benjamin Hesmans" initials="B." surname="Hesmans">
      <organization>Tessares</organization>
      <address>
<postal>
<street>Avenue Jean Monnet 1</street>
<city>B-1348 Louvain-la-Neuve</city>
<region></region>
<code></code>
<country>Belgium</country>
</postal>
        <email>Benjamin.Hesmans@tessares.net</email>
      </address>
    </author>


    <date month="July" year="2020"/>
    <area>Transport</area>
    <workgroup>TCPM Working Group</workgroup>
    <keyword>Hybrid access</keyword>
    <keyword>aggregation</keyword>
    <keyword>transport evolution</keyword>
    <keyword>future internet</keyword>
    <keyword>extension</keyword>
    <keyword>Trafic Steering</keyword>
    <keyword>ATSSS</keyword>
    <keyword>Multipath TCP</keyword>
    <abstract>
      <t>This document specifies an application proxy, called Transport
      Converter, to assist the deployment of TCP extensions such as Multipath
      TCP. A Transport Converter may provide conversion service for one or
      more TCP extensions. The conversion service is provided by means of the
      0-RTT TCP Convert Protocol (Convert).</t>
      <t>This protocol provides 0-RTT (Zero Round-Trip Time) conversion
      service since no extra delay is induced by the protocol compared to
      connections that are not proxied. Also, the Convert Protocol does not
      require any encapsulation (no tunnels whatsoever).</t>
      <t>This specification assumes an explicit model, where the Transport
      Converter is explicitly configured on hosts. As a sample applicability
      use case, this document specifies how the Convert Protocol applies for
      Multipath TCP.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="intro" numbered="true" toc="default">
      <name>Introduction</name>
      <section anchor="pb" numbered="true" toc="default">
        <name>The Problem</name>
        <t>Transport protocols like TCP evolve regularly <xref
        target="RFC7414" format="default"/>. TCP has been improved in
        different ways.  Some improvements such as changing the initial window
        size <xref target="RFC6928" format="default"/> or modifying the
        congestion control scheme can be applied independently on Clients and
        Servers. Other improvements such as Selective Acknowledgments <xref
        target="RFC2018" format="default"/> or large windows <xref
        target="RFC7323" format="default"/> require a new TCP option or
        changing the semantics of some fields in the TCP header. These
        modifications must be deployed on both Clients and Servers to be
        actually used on the Internet. Experience with the latter class of TCP
        extensions reveals that their deployment can require many
        years. Fukuda reports in <xref target="Fukuda2011" format="default"/>
        results of a decade of measurements showing the deployment of
        Selective Acknowledgments, Window Scale, and TCP Timestamps. <xref
        target="ANRW17" format="default"/> describes measurements showing that
        TCP Fast Open (TFO) <xref target="RFC7413" format="default"/> is still
        not widely deployed.</t>
        <t>There are some situations where the transport stack used on Clients
        (or Servers) can be upgraded at a faster pace than the transport stack
        running on Servers (or Clients). 


 In those situations, Clients (or Servers) would typically want to benefit
 from the features of an improved transport protocol even if the Servers (or
 Clients) have not yet been upgraded.



Some assistance from the network to make use of these features is
valuable. For example, Performance Enhancing Proxies <xref target="RFC3135"
format="default"/> and other service functions have been deployed as solutions
to improve TCP performance over links with specific characteristics.</t>

        <t>Recent examples of TCP extensions include Multipath TCP (MPTCP)
        <xref target="RFC8684" format="default"/> or tcpcrypt <xref target="RFC8548" format="default"/>. Those extensions
        provide features that are interesting for Clients such as wireless
        devices. With Multipath TCP, those devices could seamlessly use
        Wireless Local Area Network (WLAN) and cellular networks for bonding
        purposes, faster hand-overs, or better resiliency. Unfortunately,
        deploying those extensions on both a wide range of Clients and Servers
        remains difficult.</t>
        <t>More recently, 5G bonding experimentation has been conducted into
        global range of the incumbent 4G (LTE) connectivity using newly
        devised Clients and a Multipath TCP proxy. Even if the 5G and 4G
        bonding (that relies upon Multipath TCP) increases the bandwidth, it
        is also crucial to minimize latency entirely between end hosts
        regardless of whether intermediate nodes are inside or outside of the
        mobile core. In order to handle Ultra-Reliable Low Latency
        Communication (URLLC) for the next-generation mobile network,
        Multipath TCP and its proxy mechanism such as the one used to provide
        Access Traffic Steering, Switching, and Splitting (ATSSS) must be
        optimized to reduce latency <xref target="TS23501"
        format="default"/>.</t>
      </section>

      <section anchor="network-assisted-connections-the-rationale" numbered="true" toc="default">
        <name>Network-Assisted Connections: The Rationale</name>
        <t>This document specifies an application proxy called Transport
        Converter. A Transport Converter is a function that is installed by a
        network operator to aid the deployment of TCP extensions and to
        provide the benefits of such extensions to Clients in particular. A
        Transport Converter may provide conversion service for one or more TCP
        extensions. Which TCP extensions are eligible for the conversion
        service is deployment specific. The conversion service is provided by
        means of the 0-RTT TCP Convert Protocol (Convert), which is an
        application-layer protocol that uses a specific TCP port number on
        the Converter.</t>
        <t>The Convert Protocol provides Zero Round-Trip Time (0-RTT)
        conversion service since no extra delay is induced by the protocol
        compared to connections that are not proxied. Particularly, the
        Convert Protocol does not require extra signaling setup delays before
        making use of the conversion service. The Convert Protocol does not
        require any encapsulation (no tunnels, whatsoever).</t>
        <t>The Transport Converter adheres to the main steps drawn in <xref
        target="RFC1919" sectionFormat="of" section="3"/>. In particular, a
        Transport Converter achieves the following:</t>
        <ul spacing="normal">
          <li>Listening for Client sessions;</li>
          <li>Receiving the address of the Server from the Client;</li>
          <li>Setting up a session to the Server;</li>
          <li>Relaying control messages and data between the Client and the
            Server;</li>
          <li>Performing access controls according to local policies.</li>
        </ul>

        <t>The main advantage of network-assisted conversion services is that
        they enable new TCP extensions to be used on a subset of the path
        between endpoints, which encourages the deployment of these
        extensions. Furthermore, the Transport Converter allows the Client and
        the Server to directly negotiate TCP extensions for the sake of native
        support along the full path.</t>
        <t>The Convert Protocol is a generic mechanism to provide 0-RTT
        conversion service. As a sample applicability use case, this document
        specifies how the Convert Protocol applies for Multipath TCP. It is
        out of scope of this document to provide a comprehensive list of all
        potential conversion services. Applicability documents may be defined
        in the future.</t>
        <t>This document does not assume that all the traffic is eligible for
        the network-assisted conversion service. Only a subset of the traffic
        will be forwarded to a Transport Converter according to a set of
        policies. These policies, and how they are communicated to endpoints,
        are out of scope. Furthermore, it is possible to bypass the Transport
        Converter to connect directly to the Servers that already support the
        required TCP extension(s).</t>
        <t>This document assumes an explicit model in which a Client is
        configured with one or a list of Transport Converters (statically or
        through protocols such as <xref target="I-D.boucadair-tcpm-dhc-converter" format="default"/>). Configuration
        means are outside the scope of this document.</t>
        <t>The use of a Transport Converter means that there is no end-to-end
        transport connection between the Client and Server. This could
        potentially create problems in some scenarios such as those discussed
        in <xref target="RFC3135" sectionFormat="of" section="4"/>. Some of these problems
        may not be applicable. For example, a Transport Converter can inform a
        Client by means of Network Failure (65) or Destination Unreachable
        (97) error messages (<xref target="sec-error" format="default"/>) that it
        encounters a failure problem; the Client can react accordingly. An
        endpoint, or its network administrator, can assess the benefit
        provided by the Transport Converter service versus the risk. This is
        one reason why the Transport Converter functionality has to be
        explicitly requested by an endpoint.</t>



<t>
This document is organized as follows:
</t>
<ul empty="true">
<li>
     <xref target="sec-socks"/> provides a brief overview of the differences
     between the well-known SOCKS protocol and the 0-RTT TCP Convert Protocol.
</li>
     <li> <xref target="sec-arch"/>  provides a brief explanation of the operation of Transport
     Converters. </li>
<li>
     <xref target="sample-examples"/> includes a set of sample examples to illustrate the overall
    behavior.
</li>
     <li>
 <xref target="sec-protocol"/> describes the Convert Protocol.
     </li>
     <li> <xref target="sec-tcpoptions"/> discusses how Transport Converters can be used to support
     different TCP extensions. </li>
<li>
     <xref target="sec-middleboxes"/> then discusses the interactions with middleboxes.
</li>
     <li> <xref target="sec-security"/> focuses on security considerations. </li>
     <li> <xref target="sec-api"/> describes how a TCP stack would need to support the
       protocol described in this document.
</li>
</ul>

      
      </section>
      <section numbered="true" toc="default">
        <name>Applicability Scope</name>
        <t>The 0-RTT TCP Convert Protocol specified in this document <bcp14>MUST</bcp14> be used
        in a single administrative domain deployment model. That is, the
        entity offering the connectivity service to a Client is also the entity
        that owns and operates the Transport Converter, with no transit over
        a third-party network.</t>
        <t>Future deployment of Transport Converters by third parties
        <bcp14>MUST</bcp14> adhere to the mutual authentication requirements
        in <xref target="authorization" format="default"/> to prevent
        illegitimate traffic interception (<xref target="traffic-theft"
        format="default"/>) in particular.</t>
      </section>
    </section>

    <section anchor="conventions-and-definitions" numbered="true" toc="default">
      <name>Conventions and Definitions</name>

        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>

    </section>




    <section anchor="sec-socks" numbered="true" toc="default">
      <name>Differences with SOCKSv5</name>
      <t>Several IETF protocols provide proxy services, the closest to the
      0-RTT TCP Convert Protocol being the SOCKSv5 protocol <xref target="RFC1928"
      format="default"/>. This protocol is already used to deploy Multipath
      TCP in some cellular networks (<xref target="RFC8041" sectionFormat="of"
      section="2.2"/>).</t>
      <t>A SOCKS Client creates a connection to a SOCKS Proxy, exchanges
      authentication information, and indicates the IP address and port number
      of the target Server. At this point, the SOCKS Proxy creates a
      connection towards the target Server and relays all data between the two
      proxied connections. The operation of an implementation based on SOCKSv5
      (without authentication) is illustrated in <xref target="fig-socks5" format="default"/>.</t>
      <figure anchor="fig-socks5">
        <name>Establishment of a TCP Connection through a SOCKS Proxy without Authentication</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
Client                SOCKS Proxy               Server
   |                       |                       |
   | --------------------> |                       |
   |         SYN           |                       |
   | <-------------------- |                       |
   |       SYN+ACK         |                       |
   | --------------------> |                       |
   |         ACK           |                       |
   |                       |                       |
   | --------------------> |                       |
   |Version=5, Auth Methods|                       |
   | <-------------------- |                       |
   |       Method          |                       |
   | --------------------> |                       |
   |Auth Request (unless "No auth" method negotiated)
   | <-------------------- |                       | 
   |     Auth Response     |                       |
   | --------------------> |                       |
   | Connect Server:Port   | --------------------> |
   |                       |          SYN          |
   |                       | <-------------------- |
   |                       |        SYN+ACK        |
   | <-------------------- |                       |
   |      Succeeded        |                       |
   | --------------------> |                       |
   |       Data1           |                       |
   |                       | --------------------> |
   |                       |         Data1         |
   |                       | <-------------------- |
   |                       |         Data2         |
   | <-------------------- |                       |
   |          Data2        |                       |
                         ...
]]></artwork>
      </figure>
      <t>When SOCKS is used, an "end-to-end" connection between a Client and a
      Server becomes a sequence of two TCP connections that are glued together
      on the SOCKS Proxy. The SOCKS Client and Server exchange control
      information at the beginning of the bytestream on the Client-Proxy
      connection. The SOCKS Proxy then creates the connection with the target
      Server and then glues the two connections together so that all bytes
      sent by the application (Client) to the SOCKS Proxy are relayed to the
      Server and vice versa.</t>
      <t>The Convert Protocol is also used on TCP proxies that relay data
      between an upstream and a downstream connection, but there are important
      differences with SOCKSv5. A first difference is that the 0-RTT TCP
      Convert Protocol exchanges all the control information during the
      initial RTT.  This reduces the connection establishment delay compared
      to SOCKS, which requires two or more round-trip times before the
      establishment of the downstream connection towards the final
      destination. In today's Internet, latency is an important metric, and
      various protocols have been tuned to reduce their latency <xref
      target="I-D.arkko-arch-low-latency" format="default"/>. A recently
      proposed extension to SOCKS leverages the TCP Fast Open (TFO) option
      <xref target="I-D.olteanu-intarea-socks-6" format="default"/> to reduce
      this delay.</t>
      <t>A second difference is that the Convert Protocol explicitly takes the
      TCP extensions into account. By using the Convert Protocol, the Client
      can learn whether a given TCP extension is supported by the destination
      Server. This enables the Client to bypass the Transport Converter when
      the Server supports the required TCP extension(s). Neither SOCKSv5 <xref
      target="RFC1928" format="default"/> nor the proposed SOCKSv6 <xref
      target="I-D.olteanu-intarea-socks-6" format="default"/> provide such a
      feature.</t>
      <t>A third difference is that a Transport Converter will only confirm
      the establishment of the connection initiated by the Client provided
      that the downstream connection has already been accepted by the Server.
      If the Server refuses the connection establishment attempt from the
      Transport Converter, then the upstream connection from the Client is
      rejected as well. This feature is important for applications that check
      the availability of a Server or use the time to connect as a hint on the
      selection of a Server <xref target="RFC8305" format="default"/>.</t>
      <t>A fourth difference is that the 0-RTT TCP Convert Protocol only allows
      the Client to specify the IP address/port number of the destination
      Server and not a DNS name. We evaluated an alternate design that
      included the DNS name of the remote peer instead of its IP address as in
      SOCKS <xref target="RFC1928" format="default"/>. However, that design
      was not adopted because it induces both an extra load and increased
      delays on the Transport Converter to handle and manage DNS resolution
      requests.  Note that the name resolution at the Converter may fail
      (e.g., private names discussed in <xref target="RFC6731"
      sectionFormat="of" section="2.1"/>) or may not match the one that would
      be returned by a Client's resolution library (e.g., <xref
      target="RFC6731" sectionFormat="of" section="2.2"/>).</t>
    </section>

    <section anchor="sec-arch" numbered="true" toc="default">
      <name>Architecture and Behaviors</name>
      <section anchor="functional-elements" numbered="true" toc="default">
        <name>Functional Elements</name>
        <t>The Convert Protocol considers three functional elements:</t>
        <ul spacing="normal">
          <li>Clients</li>
          <li>Transport Converters</li>
          <li>Servers</li>
        </ul>
        <t>A Transport Converter is a network function that proxies all data
        exchanged over one upstream connection to one downstream connection
        and vice versa (<xref target="figtc" format="default"/>). Thus, the Transport
        Converter maintains state that associates one upstream
        connection to a corresponding downstream connection.</t>
        <t>A connection can be initiated from both sides of the Transport
        Converter (External realm, Internal realm).</t>
        <figure anchor="figtc">
          <name>A Transport Converter Proxies Data between Pairs of TCP Connections</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
                           |
                           :
                           |
                     +------------+
Client <- upstream ->| Transport  |<- downstream -> Server
         connection  | Converter  |   connection  
                     +------------+
                           |
            Internal realm : External realm     
                           | 
]]></artwork>
        </figure>
        <t>"Client" refers to a software instance embedded on a host that can
        reach a Transport Converter in the internal realm. The "Client" can
        initiate connections via a Transport Converter (referred to as
        outgoing connections). Also, the "Client" can accept incoming
        connections via a Transport Converter (referred to as incoming
        connections).</t>
        <t>A Transport Converter can be embedded in a standalone device or be
        activated as a service on a router. How such a function is enabled is
        deployment specific.</t>
        <t>The architecture assumes that new software will be installed on the
        Client hosts to interact with one or more Transport Converters.
        Furthermore, the architecture allows for making use of new TCP
        extensions even if those are not supported by a given Server.</t>
        <t>A Client is configured, through means that are outside the scope of
        this document, with the names and/or addresses of one or more
        Transport Converters and the TCP extensions that they support. The
        procedure for selecting a Transport Converter among a list of
        configured Transport Converters is outside the scope of this
        document.</t>
        <t>One of the benefits of this design is that different transport
        protocol extensions can be used on the upstream and the downstream
        connections. This encourages the deployment of new TCP extensions
        until they are widely supported, in particular,  by Servers.</t>
        <t>The architecture does not mandate anything on the Server side.</t>
        <t>Similar to SOCKS, the architecture does not interfere with
        end-to-end TLS connections <xref target="RFC8446" format="default"/> between the
        Client and the Server (<xref target="figtls" format="default"/>). In other words,
        end-to-end TLS is supported in the presence of a Converter.</t>
        <figure anchor="figtls">
          <name>End-to-end TLS via a Transport Converter</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
    Client             Transport                Server
       |               Converter                  |
       |                   |                      |
       /==========================================\
      |            End-to-end TLS                  |
       \==========================================/

    * TLS messages exchanged between the Client
      and the Server are not shown.
]]></artwork>
        </figure>
        <t>It is out of scope of this document to elaborate on specific
        considerations related to the use of TLS in the Client-Converter
        connection leg to exchange Convert messages (in addition to the
        end-to-end TLS connection). In particular, (1) assessment of whether
        0-RTT data mode discussed in <xref target="RFC8446"
        sectionFormat="of" section="2.3"/> is safe under replay and (2)
        specification of a profile for its use (<xref target="RFC8446"
        sectionFormat="of" section="E.5"/>) are out of scope.</t>
      </section>
      <section anchor="sec-to" numbered="true" toc="default">
        <name>Theory of Operation</name>
        <t>At a high level, the objective of the Transport Converter is to
        allow the use a specific extension, e.g., Multipath TCP, on a subset
        of the path even if the peer does not support this extension. This is
        illustrated in <xref target="fig-highlevel" format="default"/> where the Client
        initiates a Multipath TCP connection with the Transport Converter
        (packets belonging to the Multipath TCP connection are shown with
        "===") while the Transport Converter uses a TCP connection with the
        Server.</t>
        <figure anchor="fig-highlevel">
          <name>An Example of 0-RTT Network-Assisted Outgoing MPTCP Connection</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
    Client             Transport                Server
       |               Converter                  |
       |                   |                      |
       |==================>|--------------------->|
       |                   |                      |
       |<==================|<---------------------|
       |                   |                      |
      Multipath TCP packets     TCP packets
]]></artwork>
        </figure>
        <t>The packets belonging to a connection established through a
        Transport Converter may follow a different path than the packets
        directly exchanged between the Client and the Server. Deployments
        should minimize the possible additional delay by carefully selecting
        the location of the Transport Converter used to reach a given
        destination.</t>
        <t>When establishing a connection, the Client can, depending on local
        policies, either contact the Server directly (e.g., by sending a TCP
        SYN towards the Server) or create the connection via a Transport
        Converter. In the latter case (that is, the conversion service is
        used), the Client initiates a connection towards the Transport
        Converter and indicates the IP address and port number of the Server
        within the connection establishment packet. Doing so enables the
        Transport Converter to immediately initiate a connection towards that
        Server without experiencing an extra delay. The Transport Converter
        waits until the receipt of the confirmation that the Server agrees to
        establish the connection before confirming it to the Client.</t>
        <t>The Client places the destination address and port number of the
        Server in the payload of the SYN sent to the Transport Converter to
        minimize connection establishment delays. The Transport Converter
        maintains two connections that are combined together:</t>
        <ul spacing="normal">
          <li>The upstream connection is the one between the Client and the
            Transport Converter.</li>
          <li>The downstream connection is the one between the Transport
            Converter and the Server.</li>
        </ul>
        <t>Any user data received by the Transport Converter over the upstream
        (or downstream) connection is proxied over the downstream (or
        upstream) connection.</t>
        <t><xref target="fig-estab" format="default"/> illustrates the establishment of
        an outgoing TCP connection by a Client through a Transport
        Converter.</t>
	<aside><t>
          Note: The information shown between brackets in <xref
	  target="fig-estab" format="default"/> (and other figures in the
	  document) refers to Convert Protocol messages described in <xref
	    target="sec-protocol" format="default"/>.</t></aside> 

        <figure anchor="fig-estab">
          <name>Establishment of an Outgoing TCP Connection through a Transport Converter</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
                        Transport
    Client              Converter              Server
       |                   |                      |
       |SYN [->Server:port]|         SYN          |
       |------------------>|--------------------->|
       |<------------------|<---------------------|
       |    SYN+ACK [ ]    |        SYN+ACK       |
       |        ...        |          ...         |
]]></artwork>
        </figure>
        <t>The Client sends a SYN destined to the Transport Converter. The
        payload of this SYN contains the address and port number of the
        Server. The Transport Converter does not reply immediately to this
        SYN. It first tries to create a TCP connection towards the target
        Server. If this upstream connection succeeds, the Transport Converter
        confirms the establishment of the connection to the Client by
        returning a SYN+ACK and the first bytes of the bytestream contain
        information about the TCP options that were negotiated with the
        Server. Also, a state entry is instantiated for this connection. This
        state entry is used by the Converter to handle subsequent messages
        belonging to the connection.</t>
        <t>The connection can also be established from the Internet towards a
        Client via a Transport Converter (<xref target="fig-estab2"
        format="default"/>).  This is typically the case when the Client hosts
        an application Server that listens to a specific port number. When the
        Converter receives an incoming SYN from a remote host, it checks if it
        can provide the conversion service for the destination IP address and
        destination port number of that SYN. The Transport Converter receives
        this SYN because it is, for example, on the path between the remote
        host and the Client or it provides address-sharing service for the
        Client (<xref target="RFC6269" sectionFormat="of" section="2"/>). If
        the check fails, the packet is silently ignored by the Converter. If
        the check is successful, the Converter tries to initiate a TCP
        connection towards the Client from its own address and using its
        configured TCP options. In the SYN that corresponds to this connection
        attempt, the Transport Convert inserts a TLV message that indicates
        the source address and port number of the remote host. A transport
        session entry is created by the Converter for this connection. SYN+ACK
        and ACK will then be exchanged between the Client, the Converter, and
        remote host to confirm the establishment of the connection. The
        Converter uses the transport session entry to proxy packets belonging
        to the connection.</t>
        <figure anchor="fig-estab2">
          <name>Establishment of an Incoming TCP Connection through a Transport Converter</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
  Transport              Remote
    Client              Converter             Host (RH)
       |                   |                      |       
       |SYN [<-RH IP@:port]|         SYN          |
       |<------------------|<---------------------|
       |------------------>|--------------------->|
       |    SYN+ACK [ ]    |        SYN+ACK       |
       |        ...        |          ...         |
       
]]></artwork>
        </figure>
        <t>Standard TCP (<xref target="RFC0793" format="default" section="3.4"/>) allows a
        SYN packet to carry data inside its payload but forbids the receiver
        from delivering it to the application until completion of the
        three-way-handshake. To enable applications to exchange data in a TCP
        handshake, this specification follows an approach similar to TCP Fast
        Open <xref target="RFC7413" format="default"/> and thus, removes the constraint by
        allowing data in SYN packets to be delivered to the Transport
        Converter application.</t>
        <t>As discussed in <xref target="RFC7413" format="default"/>, such
        change to TCP semantics raises two issues. First, duplicate SYNs can
        cause problems for applications that rely on TCP; whether or not a
        given application is affected depends on the details of that
        application protocol.  Second, TCP suffers from SYN flooding attacks
        <xref target="RFC4987" format="default"/>. TFO solves these two
        problems for applications that can tolerate replays by using the TCP
        Fast Open option that includes a cookie. However, the utilization of
        this option consumes space in the limited TCP header. Furthermore,
        there are situations, as noted in <xref target="RFC7413"
        sectionFormat="of" section="7.3"/>, where it is possible to accept the
        payload of SYN packets without creating additional security risks such
        as a network where addresses cannot be spoofed and the Transport
        Converter only serves a set of hosts that are identified by these
        addresses.</t>
        <t>For these reasons, this specification does not mandate the use of
        the TCP Fast Open option when the Client sends a connection
        establishment packet towards a Transport Converter. The Convert
        Protocol includes an optional Cookie TLV that provides similar
        protection as the TCP Fast Open option without consuming space in the
        TCP header. Furthermore, this design allows for the use of longer
        cookies than <xref target="RFC7413" format="default"/>.</t>
        <t>If the downstream (or upstream) connection fails for some reason
        (excessive retransmissions, reception of an RST segment, etc.), then
        the Converter reacts by forcing the teardown of the upstream (or
        downstream) connection. In particular, if an ICMP error message that
        indicates a hard error is received on the downstream connection, the
        Converter echoes the Code field of that ICMP message in a Destination
        Unreachable Error TLV (see <xref target="sec-error" format="default"/>) that it
        transmits to the Client. Note that if an ICMP error message that
        indicates a soft error is received on the downstream connection, the
        Converter will retransmit the corresponding data until it is
        acknowledged or the connection times out. A classification of ICMP
        soft and hard errors is provided in Table 1 of <xref target="RFC5461" format="default"/>.</t>
        <t>The same reasoning applies when the upstream connection ends with
        an exchange of FIN segments. In this case, the Converter will also
        terminate the downstream connection by using FIN segments. If the
        downstream connection terminates with the exchange of FIN segments,
        the Converter should initiate a graceful termination of the upstream
        connection.</t>
      </section>
      <section anchor="sec-dbb" numbered="true" toc="default">
        <name>Data Processing at the Transport Converter</name>
        <t>As mentioned in <xref target="sec-to" format="default"/>, the Transport
        Converter acts as a TCP proxy between the upstream connection (i.e.,
        between the Client and the Transport Converter) and the downstream
        connection (i.e., between the Transport Converter and the Server).</t>

        <t>The control messages (i.e., the Convert messages discussed in <xref target="sec-protocol"
        format="default"/>) establish state (called transport session entry)
        in the Transport Converter that will enable it to proxy between the
        two TCP connections.</t>
        <t>The Transport Converter uses the transport session entry to proxy
        packets belonging to the connection. An implementation example of a
        transport session entry for TCP connections is shown in <xref target="fig-dbt" format="default"/>.</t>
        <figure anchor="fig-dbt">
          <name>An Example of Transport Session Entry</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
                   (C,c) <--> (T,t), (S,s), Lifetime
]]></artwork>

        </figure>

<t>   Where:</t>

<ul>
<li>C and c are the source IP address and source port number used by the
Client for the upstream connection.
</li>
<li>S and s are the Server's IP address and port number.
</li>
<li>T and t are the source IP address and source port number used by the
Transport Converter to proxy the connection.
</li>
<li>Lifetime is a timer that tracks the remaining lifetime of the entry as
assigned by the Converter. When the timer expires, the entry is deleted.
</li>
</ul>


        <t>Clients send packets bound to connections eligible for the
        conversion service to the provisioned Transport Converter and
        destination port number. This applies for both control messages and
        data. Additional information is supplied by Clients to the Transport
        Converter by means of Convert messages as detailed in <xref
        target="sec-protocol" format="default"/>. User data can be included in
        SYN or non-SYN messages. User data is unambiguously distinguished from
        Convert TLVs by a Transport Converter owing to the Convert Fixed
        Header in the Convert messages (<xref target="sec-header"
        format="default"/>).  These Convert TLVs are destined to the Transport
        Convert and are, thus, removed by the Transport Converter when
        proxying between the two connections.</t>
        <t>Upon receipt of a packet that belongs to an existing connection
        between a Client and the Transport Converter, the Converter proxies the
        user data to the Server using the information stored in the
        corresponding transport session entry. For example, in reference to
        <xref target="fig-dbt" format="default"/>, the Transport Converter proxies the
        data received from (C,&wj;c) downstream using (T,t) as source transport
        address and (S,s) as destination transport address.</t>
        <t>A similar process happens for data sent from the Server. The
        Converter acts as a TCP proxy and sends the data to the Client relying
        upon the information stored in a transport session entry. The
        Converter associates a lifetime with state entries used to bind an
        upstream connection with its downstream connection.</t>
        <t>When Multipath TCP is used between the Client and the Transport
        Converter, the Converter maintains more state (e.g., information about
        the subflows) for each Multipath TCP connection. The procedure
        described above continues to apply except that the Converter needs to
        manage the establishment/termination of subflows and schedule packets
        among the established ones. These operations are part of the Multipath
        TCP implementation. They are independent of the Convert Protocol that
        only processes the Convert messages in the beginning of the
        bytestream.</t>
        <t>A Transport Converter may operate in address preservation mode
        (that is, the Converter does not rewrite the source IP address (i.e.,
        C==T)) or address-sharing mode (that is, an address pool is shared
        among all Clients serviced by the Converter (i.e., C!=T)); refer to
        <xref target="sec-add" format="default"/> for more details. Which
        behavior to use by a Transport Converter is deployment specific. If
        address-sharing mode is enabled, the Transport Converter
        <bcp14>MUST</bcp14> adhere to REQ-2 of <xref target="RFC6888"
        format="default"/>, which implies a default "IP address pooling"
        behavior of "Paired" (as defined in <xref target="RFC4787"
        sectionFormat="of" section="4.1"/>) <bcp14>MUST</bcp14> be
        supported. This behavior is meant to avoid breaking applications that
        depend on the source address remaining constant.</t>
      </section>

      <section anchor="sec-add" numbered="true" toc="default">
        <name>Address Preservation vs. Address Sharing</name>
        <t>The Transport Converter is provided with instructions about the
        behavior to adopt with regard to the processing of source addresses
        of outgoing packets. The following subsections discuss two
        deployment models for illustration purposes. It is out of the scope of
        this document to make a recommendation.</t>
        <section anchor="sec-addp" numbered="true" toc="default">
          <name>Address Preservation</name>
          <t>In this model, the visible source IP address of a packet proxied
          by a Transport Converter to a Server is an IP address of the end
          host (Client). No dedicated IP address pool is provisioned to the
          Transport Converter, but the Transport Converter is located on the
          path between the Client and the Server.</t>
          <t>For Multipath TCP, the Transport Converter preserves the source
          IP address used by the Client when establishing the initial subflow.
          Data conveyed in secondary subflows will be proxied by the Transport
          Converter using the source IP address of the initial subflow. An
          example of a proxied Multipath TCP connection with address
          preservation is shown in <xref target="fig-addp" format="default"/>.</t>
          <figure anchor="fig-addp">
            <name>Example of Address Preservation</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
                                      Transport
       Client                        Converter          Server

        @:C1,C2                        @:Tc                @:S
           ||                            |                  |
           |src:C1     SYN         dst:Tc|src:C1       dst:S|
           |-------MPC [->S:port]------->|-------SYN------->|
           ||                            |                  |
           ||dst:C1                src:Tc|dst:C1       src:S|
           |<---------SYN/ACK------------|<-----SYN/ACK-----|
           ||                            |                  |
           |src:C1                 dst:Tc|src:C1       dst:S|
           |------------ACK------------->|-------ACK------->|
           |                             |                  |
           |src:C2          ...    dst:Tc|       ...        |
           ||<-----Secondary Subflow---->|src:C1       dst:S|
           ||                            |-------data------>|
           |               ..            |    ...           |

Legend:
  Tc: IP address used by the Transport Converter on the internal
      realm.
]]></artwork>
          </figure>
          <t>The Transport Converter must be on the forwarding path of
          incoming traffic. Because the same (destination) IP address is used
          for both proxied and non-proxied connections, the Transport
          Converter should not drop incoming packets it intercepts if no
          matching entry is found for the packets. Unless explicitly
          configured otherwise, such packets are forwarded according to the
          instructions of a local forwarding table.</t>
        </section>
        <section anchor="sec-adds" numbered="true" toc="default">
          <name>Address/Prefix Sharing</name>
          <t>A pool of global IPv4 addresses is provisioned to the Transport
          Converter along with possible instructions about the address-sharing
          ratio to apply (see <xref target="RFC6269"
	  sectionFormat="of" section="B"/>).
          An address is thus shared among multiple Clients.</t>
          <t>Likewise, rewriting the source IPv6 prefix <xref target="RFC6296" format="default"/> may be used to ease redirection of incoming
          IPv6 traffic towards the appropriate Transport Converter. A pool of
          IPv6 prefixes is then provisioned to the Transport Converter for
          this purpose.</t>
          <t>Adequate forwarding policies are enforced so that traffic
          destined to an address of such a pool is intercepted by the
          appropriate Transport Converter. Unlike <xref target="sec-addp"
          format="default"/>, the Transport Converter drops incoming packets
          that do not match an active transport session entry.</t>
          <t>An example is shown in <xref target="fig-adds" format="default"/>.</t>
          <figure anchor="fig-adds">
            <name>Address Sharing</name>
         <artwork name="" type="" align="left" alt=""><![CDATA[
                                     Transport
      Client                         Converter          Server

         @:C                        @:Tc|Te                @:S
          |                             |                  |
          |src:C                  dst:Tc|src:Te       dst:S|
          |-------SYN [->S:port]------->|-------SYN------->|
          |                             |                  |
          |dst:C                  src:Tc|dst:Te       src:S|
          |<---------SYN/ACK------------|<-----SYN/ACK-----|
          |                             |                  |
          |src:C                  dst:Tc|src:Te       dst:S|
          |------------ACK------------->|-------ACK------->|
          |                             |                  |
          |              ...            |    ...           |

Legend:
  Tc: IP address used by the Transport Converter on the internal
      realm.
  Te: IP address used by the Transport Converter on the external
      realm.
]]></artwork>
          </figure>
        </section>
      </section>
    </section>
    <section anchor="sample-examples" numbered="true" toc="default">
      <name>Sample Examples</name>
      <section anchor="outgoing-converter-assisted-multipath-tcp-connections" numbered="true" toc="default">
        <name>Outgoing Converter-Assisted Multipath TCP Connections</name>
        <t>As an example, let us consider how the Convert Protocol can help
        the deployment of Multipath TCP. We assume that both the Client and
        the Transport Converter support Multipath TCP but consider two
        different cases depending on whether or not the Server supports Multipath TCP.</t>
        <t>As a reminder, a Multipath TCP connection is created by placing the
        MP_CAPABLE (MPC) option in the SYN sent by the Client.</t>
        <t><xref target="fig-mpestab" format="default"/> describes the operation of the
        Transport Converter if the Server does not support Multipath TCP.</t>
        <figure anchor="fig-mpestab">
          <name>Establishment of a Multipath TCP Connection through a
          Transport Converter towards a Server That Does Not support Multipath
          TCP</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
                        Transport
    Client              Converter              Server
       |SYN, MPC           |                      |
       |[->Server:port]    |         SYN, MPC     |
       |------------------>|--------------------->|
       |<------------------|<---------------------|
       |  SYN+ACK,MPC [.]  |      SYN+ACK         |
       |------------------>|--------------------->|
       |     ACK, MPC      |          ACK         |
       |        ...        |          ...         |
]]></artwork>
        </figure>
        <t>The Client tries to initiate a Multipath TCP connection by sending
        a SYN with the MP_CAPABLE option (MPC in <xref target="fig-mpestab" format="default"/>). The SYN includes the address and port
        number of the target Server, that are extracted and used by the
        Transport Converter to initiate a Multipath TCP connection towards
        this Server. Since the Server does not support Multipath TCP, it
        replies with a SYN+ACK that does not contain the MP_CAPABLE option.
        The Transport Converter notes that the connection with the Server does
        not support Multipath TCP and returns the extended TCP header received
        from the Server to the Client.</t>
        <t>Note that, if the TCP connection is reset for some reason, the
        Converter tears down the Multipath TCP connection by transmitting an
        MP_FASTCLOSE. Likewise, if the Multipath TCP connection ends with the
        transmission of DATA_FINs, the Converter terminates the TCP connection
        by using FIN segments. As a side note, given that with Multipath TCP,
        RST only has the scope of the subflow and will only close the
        concerned subflow but not affect the remaining subflows, the Converter
        does not terminate the downstream TCP connection upon receipt of an
        RST over a Multipath subflow.</t>
        <t><xref target="fig-mpestabok" format="default"/> considers a Server that
        supports Multipath TCP. In this case, it replies to the SYN sent by
        the Transport Converter with the MP_CAPABLE option. Upon reception of
        this SYN+ACK, the Transport Converter confirms the establishment of
        the connection to the Client and indicates to the Client that the
        Server supports Multipath TCP. With this information, the Client has
        discovered that the Server supports Multipath TCP. This will enable
        the Client to bypass the Transport Converter for the subsequent
        Multipath TCP connections that it will initiate towards this
        Server.</t>
        <figure anchor="fig-mpestabok">
          <name>Establishment of a Multipath TCP Connection through a
          Converter towards an MPTCP-Capable Server</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
                        Transport
    Client              Converter              Server
       |SYN, MPC           |                      |
       |[->Server:port]    |         SYN, MPC     |
       |------------------>|--------------------->|
       |<------------------|<---------------------|
       |SYN+ACK, MPC       |      SYN+ACK, MPC    |
       |[MPC supported]    |                      |
       |------------------>|--------------------->|
       |     ACK, MPC      |        ACK, MPC      |
       |        ...        |          ...         |
                                          
]]></artwork>
        </figure>
      </section>
      <section anchor="incoming-converter-assisted-multipath-tcp-connection" numbered="true" toc="default">
        <name>Incoming Converter-Assisted Multipath TCP Connection</name>
        <t>An example of an incoming Converter-assisted Multipath TCP
        connection is depicted in <xref target="fig-inestab"
        format="default"/>. In order to support incoming connections from
        remote hosts, the Client may use the Port Control Protocol (PCP) <xref
        target="RFC6887" format="default"/> to instruct the Transport
        Converter to create dynamic mappings. Those mappings will be used by
        the Transport Converter to intercept an incoming TCP connection
        destined to the Client and convert it into a Multipath TCP
        connection.</t>

        <t>Typically, the Client sends a PCP request to the Converter asking
        to create an explicit TCP mapping for the internal IP address and
        internal port number. The Converter accepts the request by creating a
        TCP mapping for the internal IP address, internal port number,
        external IP address, and external port number. The external IP
        address, external port number, and assigned lifetime are returned back
        to the Client in the PCP response. The external IP address and
        external port number will then be advertised by the Client (or the
        user) using an out-of-band mechanism so that remote hosts can initiate
        TCP connections to the Client via the Converter. Note that the
        external and internal information may be the same.</t>
        <t>Then, when the Converter receives an incoming SYN, it checks its
        mapping table to verify if there is an active mapping matching the
        destination IP address and destination port of that SYN. If no entry
        is found, the Converter silently ignores the message. If an entry is
        found, the Converter inserts an MP_CAPABLE option and Connect TLV in
        the SYN packet, and rewrites the source IP address to one of its IP
        addresses and, eventually, the destination IP address and port number
        in accordance with the information stored in the mapping. SYN+ACK and
        ACK will then be exchanged between the Client and the Converter to
        confirm the establishment of the initial subflow. The Client can add
        new subflows following normal Multipath TCP procedures.</t>
        <figure anchor="fig-inestab">
          <name>Establishment of an Incoming Multipath TCP Connection through a Transport Converter</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
                        Transport             Remote 
    Client              Converter              Host
      |                     |                    |
      |<--------------------|<-------------------|
      |SYN, MPC             |         SYN        |
      |[Remote Host:port]   |                    |
      |-------------------->|------------------->|
      |      SYN+ACK, MPC   |       SYN+ACK      |
      |<--------------------|<-------------------|
      |       ACK, MPC      |           ACK      |
      |        ...          |          ...       |
]]></artwork>
        </figure>
        <t>It is out of scope of this document to define specific Convert TLVs
        to manage incoming connections (that is, TLVs that mimic PCP
        messages). These TLVs can be defined in a separate document.</t>
      </section>
    </section>
    <section anchor="sec-protocol" numbered="true" toc="default">
      <name>The Convert Protocol (Convert)</name>
      <t>This section defines the Convert Protocol (Convert, for short)
      messages that are exchanged between a Client and a Transport
      Converter.</t>
      <t>The Transport Converter listens on a specific TCP port number for
      Convert messages from Clients. That port number is configured by an
      administrator. Absent any policy, the Transport Converter <bcp14>SHOULD</bcp14>
      silently ignore SYNs with no Convert TLVs.</t>
      <t>Convert messages may appear only in SYN, SYN+ACK, or ACK.</t>
      <t>Convert messages <bcp14>MUST</bcp14> be included as the first bytes
      of the bytestream. All Convert messages start with a fixed header that
      is 32 bits long (<xref target="sec-header" format="default"/>) followed
      by one or more Convert TLVs (Type, Length, Value) (<xref
      target="sec-tlv" format="default"/>).</t>
      <t>If the initial SYN message contains user data in its payload (e.g., see
      <xref target="RFC7413" format="default"/>), that data <bcp14>MUST</bcp14> be placed right after
      the Convert TLVs when generating the SYN.</t>
      <t>The protocol can be extended by defining new TLVs or bumping the
      version number if a different message format is needed. If a future
      version is defined but with a different message format, the version
      negotiation procedure defined in <xref target="sec-error" format="default"/> (see
      "Unsupported Version") is meant to agree on a version that is supported
      by both peers.</t>

      <aside>
        <t>Implementation note 1: Several implementers expressed concerns
        about the use of TFO. As a reminder, the Fast Open Cookie protects from some
        attack scenarios that affect open servers like web servers. The
        Convert Protocol is different and, as discussed in <xref
        target="RFC7413"/>, there are different ways to protect from such
        attacks. Instead of using a Fast Open Cookie inside the TCP options, which
        consumes precious space in the extended TCP header, the Convert
        Protocol supports the utilization of a Cookie that is placed in the
        SYN payload. This provides the same level of protection as a Fast Open
        Cookie in environments were such protection is required.</t>
        <t>Implementation note 2: Error messages are not included in RST but
          sent in the bytestream. Implementers have indicated that processing
          RST on Clients was difficult on some platforms. This design
          simplifies Client implementations.</t>
      </aside>
      <section anchor="sec-header" numbered="true" toc="default">
        <name>The Convert Fixed Header</name>
        <t>The Convert Protocol uses a fixed header that is 32 bits long sent
        by both the Client and the Transport Converter over each established
        connection. This header indicates both the version of the protocol
        used and the length of the Convert message.</t>
        <t>The Client and the Transport Converter <bcp14>MUST</bcp14> send the fixed-sized
        header, shown in <xref target="fig-header" format="default"/>, as the first four
        bytes of the bytestream.</t>
        <figure anchor="fig-header">
          <name>The Convert Fixed Header</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+-------------------------------+
|  Version      |  Total Length |          Magic Number         |
+---------------+---------------+-------------------------------+
]]></artwork>
        </figure>
        <t>The version is encoded as an 8-bit unsigned integer value. This
        document specifies version 1. Version 0 is reserved by this document
        and <bcp14>MUST NOT</bcp14> be used.</t>

<aside>

<t>
            Note: Early versions of this specification don't use a
            dedicated port number but only rely upon the IP address of the
            Converter. Having a bit set in the Version field together with the
            Total Length field avoids misinterpreting data in a SYN as Convert
	    TLVs. Since the design was updated to use a specific
            service port, that constraint was relaxed. Version 0 would work,
            but given existing implementations already use Version 1, the use
            of Version 0 is maintained as reserved.</t>
</aside>


        <t>The Total Length is the number of 32-bit words, including the
        header, of the bytestream that are consumed by the Convert messages.
        Since Total Length is also an 8-bit unsigned integer, those messages
        cannot consume more than 1020 bytes of data. This limits the number of
        bytes that a Transport Converter needs to process. A Total Length of
        zero is invalid and the connection <bcp14>MUST</bcp14> be reset upon reception of a
        header with such a total length.</t>

        <t>The Magic Number field <bcp14>MUST</bcp14> be set to 0x2263. This
	field is meant to further strengthen the protocol to unambiguously
	distinguish any data supplied by an application from Convert TLVs. </t>

        <t>The Total Length field unambiguously marks the number of 32-bit
        words that carry Convert TLVs in the beginning of the bytestream.</t>
      </section>
      <section anchor="sec-tlv" numbered="true" toc="default">
        <name>Convert TLVs</name>
        <section anchor="generic-convert-tlv-format" numbered="true" toc="default">
          <name>Generic Convert TLV Format</name>
          <t>The Convert Protocol uses variable length messages that are
          encoded using the generic TLV format depicted in <xref target="fi-generictlv" format="default"/>.</t>
          <t>The length of all TLVs used by the Convert Protocol is always a
          multiple of four bytes. All TLVs are aligned on 32-bit boundaries.
          All TLV fields are encoded using the network byte order.</t>
          <figure anchor="fi-generictlv">
            <name>Convert Generic TLV Format</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +---------------+---------------+-------------------------------+
   |     Type      |     Length    |             Value  ...        |
   +---------------+---------------+-------------------------------+
   //              ...   (optional) Value                         //
   +---------------------------------------------------------------+
]]></artwork>
          </figure>
          <t>The Length field covers Type, Length, and Value fields. It is
          expressed in units of 32-bit words. If necessary, Value <bcp14>MUST</bcp14> be
          padded with zeroes so that the length of the TLV is a multiple of 32
          bits.</t>
          <t>A given TLV <bcp14>MUST</bcp14> only appear once on a connection. If a Client
          receives two or more instances of the same TLV over a Convert
          connection, it <bcp14>MUST</bcp14> reset the associated TCP connection. If a
          Converter receives two or more instances of the same TLV over a
          Convert connection, it <bcp14>MUST</bcp14> return a Malformed Message Error TLV and
          close the associated TCP connection.</t>
        </section>
        <section anchor="summary-of-supported-convert-tlvs" numbered="true" toc="default">
          <name>Summary of Supported Convert TLVs</name>
          <t>This document specifies the following Convert TLVs:</t>


<table anchor="tab-converter-tlv">  
  <name>The TLVs Used by the Convert Protocol</name> 
  <thead>
    <tr>
      <th>Type</th>  
      <th>Hex</th>
      <th>Length</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>       
    <tr>
      <td>1</td>
      <td>0x1</td>
      <td>1</td>
      <td>Info TLV</td>
    </tr>
    <tr>
      <td>10</td>
      <td>0xA</td>
      <td>Variable</td>
      <td>Connect TLV</td>
    </tr>
    <tr>
      <td>20</td>
      <td>0x14</td>
      <td>Variable</td>
      <td>Extended TCP Header TLV</td>
    </tr>
    <tr>
      <td>21</td>
      <td>0x15</td>
      <td>Variable</td>
      <td>Supported TCP Extensions TLV</td>
    </tr>
    <tr>
      <td>22</td>
      <td>0x16</td>
      <td>Variable</td>
      <td>Cookie TLV</td>
    </tr>
    <tr>
      <td>30</td>
      <td>0x1E</td>
      <td>Variable</td>
      <td>Error TLV</td>
    </tr>
  </tbody>
</table>

          <t>Type 0x0 is a reserved value. If a Client receives a TLV of type
          0x0, it <bcp14>MUST</bcp14> reset the associated TCP connection. If a Converter
          receives a TLV of type 0x0, it <bcp14>MUST</bcp14> return an Unsupported Message
          Error TLV and close the associated TCP connection.</t>
          <t>The Client typically sends, in the first connection it established
          with a Transport Converter, the Info TLV (<xref
          target="sec-bootstrap-tlv" format="default"/>) to learn its
          capabilities.  Assuming the Client is authorized to invoke the
          Transport Converter, the latter replies with the Supported TCP
          Extensions TLV (<xref target="sec-supported"
          format="default"/>).</t>

          <t>The Client can request the establishment of connections to
          Servers by using the Connect TLV (<xref target="sec-connect"
          format="default"/>). If the connection can be established with the
          final Server, the Transport Converter replies with the Extended TCP
          Header TLV (<xref target="sec-ext-header" format="default"/>). If
          not, the Transport Converter <bcp14>MUST</bcp14> return an Error TLV
          (<xref target="sec-error" format="default"/>) and then close the
          connection. The Transport Converter <bcp14>MUST NOT</bcp14> send an
          RST immediately after the detection of an error to let the Error TLV
          reach the Client. As explained later, the Client will send an RST
          regardless upon reception of the Error TLV.</t>
        </section>
        <section anchor="sec-bootstrap-tlv" numbered="true" toc="default">
          <name>The Info TLV</name>
          <t>The Info TLV (<xref target="fig-bootstrap" format="default"/>) is
          an optional TLV that can be sent by a Client to request the TCP
          extensions that are supported by a Transport Converter. It is
          typically sent on the first connection that a Client establishes
          with a Transport Converter to learn its capabilities. Assuming a
          Client is entitled to invoke the Transport Converter, the latter
          replies with the Supported TCP Extensions TLV described in <xref
          target="sec-supported" format="default"/>.</t>
          <figure anchor="fig-bootstrap">
            <name>The Info TLV</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+-------------------------------+
|     Type=0x1  |     Length    |             Zero              |
+---------------+---------------+-------------------------------+

]]></artwork>
          </figure>
        </section>
        <section anchor="sec-supported" numbered="true" toc="default">
          <name>Supported TCP Extensions TLV</name>
          <t>The Supported TCP Extensions TLV (<xref target="fig-supported"
          format="default"/>) is used by a Transport Converter to announce the
          TCP options for which it provides a conversion service.  A Transport
          Converter <bcp14>SHOULD</bcp14> include in this list the TCP options
          that it supports in outgoing SYNs.</t>
          <t>Each supported TCP option is encoded with its TCP option Kind
          listed in the "Transmission Control Protocol (TCP) Parameters"
          registry maintained by IANA <xref target="IANA-CONVERT"/>. The Unassigned field
          <bcp14>MUST</bcp14> be set to zero by the Transport Converter and
          ignored by the Client.</t>
          <figure anchor="fig-supported">
            <name>The Supported TCP Extensions TLV</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+-------------------------------+
 |     Type=0x15 |     Length    |           Unassigned          |
 +---------------+---------------+-------------------------------+
 |     Kind #1   |     Kind #2   |           ...                 |
 +---------------+---------------+-------------------------------+
 /                              ...                              /
 /                                                               /
 +---------------------------------------------------------------+
]]></artwork>
          </figure>
          <t>TCP option Kinds 1 and 2 defined in <xref target="RFC0793"
          format="default"/> are supported by all TCP implementations and
          thus, <bcp14>MUST NOT</bcp14> appear in this list.</t>
          <t>The list of Supported TCP Extensions is padded with 0 to end on a
          32-bit boundary.</t>
          <t>For example, if the Transport Converter supports Multipath TCP,
          Kind=30 will be present in the Supported TCP Extensions TLV that it
          returns in response to the Info TLV.</t>
        </section>
        <section anchor="sec-connect" numbered="true" toc="default">
          <name>Connect TLV</name>
          <t>The Connect TLV (<xref target="fig-connect" format="default"/>) is used to
          request the establishment of a connection via a Transport Converter.
          This connection can be from or to a Client.</t>
          <t>The Remote Peer Port and Remote Peer IP Address fields
          contain the destination port number and IP address of the Server,
          for outgoing connections. For incoming connections destined to a
          Client serviced via a Transport Converter, these fields convey the
          source port number and IP address of the SYN packet received by the
          Transport Converter from the Server.</t>

          <t>The Remote Peer IP Address <bcp14>MUST</bcp14> be encoded as an
          IPv6 address.  IPv4 addresses <bcp14>MUST</bcp14> be encoded using
          the IPv4-mapped IPv6 address format defined in <xref
          target="RFC4291" format="default"/>. Further, the Remote Peer IP
          Address field <bcp14>MUST NOT</bcp14> include multicast, broadcast,
          or host loopback addresses <xref target="RFC6890"
          format="default"/>. If a Converter receives a Connect TLV with such
          invalid addresses, it <bcp14>MUST</bcp14> reply with a Malformed
          Message Error TLV and close the associated TCP connection.</t>
          <t>We distinguish two types of Connect TLV based on their length:
          (1) the Base Connect TLV has a length set to 5 (i.e., 20 bytes) and
          contains a remote address and a remote port (<xref
	  target="fig-connect" format="default"/>), and (2) the Extended Connect TLV spans
          more than 20 bytes and also includes the optional TCP Options
          field (<xref target="fig-econnect" format="default"/>). This field is used to
          request the advertisement of specific TCP options to the Server.</t>
          <figure anchor="fig-connect">
            <name>The Base Connect TLV</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+-------------------------------+
 |     Type=0xA  |     Length    |      Remote Peer Port         |
 +---------------+---------------+-------------------------------+
 |                                                               |
 |         Remote Peer IP Address (128 bits)                     |
 |                                                               |
 |                                                               |
 +---------------------------------------------------------------+
]]></artwork>
          </figure>
          <figure anchor="fig-econnect">
            <name>The Extended Connect TLV</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+-------------------------------+
 |     Type=0xA  |     Length    |      Remote Peer Port         |
 +---------------+---------------+-------------------------------+
 |                                                               |
 |         Remote Peer IP Address (128 bits)                     |
 |                                                               |
 |                                                               |
 +---------------------------------------------------------------+
 /                          TCP Options (Variable)               /
 /                              ...                              /
 +---------------------------------------------------------------+
]]></artwork>
          </figure>
          <t>The TCP Options field is a variable length field that carries a
          list of TCP option fields (<xref target="fig-tcpopt"
          format="default"/>). Each TCP option field is encoded as a block of
          2+n bytes where the first byte is the TCP option Kind and the second
          byte is the length of the TCP option as specified in <xref
          target="RFC0793" format="default"/>. The minimum value for the TCP
          option Length is 2. The TCP options that do not include a length
          sub-field, i.e., option types 0 (EOL) and 1 (NOP) defined in <xref
          target="RFC0793" format="default"/> <bcp14>MUST NOT</bcp14> be
          placed inside the TCP options field of the Connect TLV. The optional
          Value field contains the variable-length part of the TCP option. A
          length of 2 indicates the absence of the Value field. The TCP
          options field always ends on a 32-bit boundary after being padded
          with zeros.</t>
          <figure anchor="fig-tcpopt">
            <name>The TCP Options Field</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
                     1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+---------------+---------------+
 |  TCPOpt kind  | TCPOpt Length | Value  (opt)  |  ....         |
 +---------------+---------------+---------------+---------------+
 |                             ....                              |
 +---------------------------------------------------------------+
 |                              ...                              |
 +---------------------------------------------------------------+
]]></artwork>
          </figure>
          <t>Upon reception of a Base Connect TLV, and absent any policy
          (e.g., rate-limit) or resource exhaustion conditions, a Transport
          Converter attempts to establish a connection to the address and port
          that it contains. The Transport Converter <bcp14>MUST</bcp14> use by default the
          TCP options that correspond to its local policy to establish this
          connection. </t>
          <t>Upon reception of an Extended Connect TLV, a Transport Converter
          first checks whether or not it supports the TCP Options listed in the TCP
          Options field. If not, it returns an error TLV set to "Unsupported
          TCP Option" (<xref target="sec-error" format="default"/>). If the above check
          succeeded, and absent any rate-limit policy or resource exhaustion
          conditions, a Transport Converter <bcp14>MUST</bcp14> attempt to establish a
          connection to the address and port that it contains. It <bcp14>MUST</bcp14> include
          in the SYN that it sends to the Server the options listed in the
          TCP Options subfield and the TCP options that it would have used
          according to its local policies. For the TCP options that are
          included in the TCP Options field without an optional value, the
          Transport Converter <bcp14>MUST</bcp14> generate its own value. For the TCP options
          that are included in the TCP Options field with an optional value,
          it <bcp14>MUST</bcp14> copy the entire option in the SYN sent to the remote Server.
          This procedure is designed with TFO in mind. Particularly, this
          procedure allows to successfully exchange a Fast Open Cookie between the
          Client and the Server. See <xref target="sec-tcpoptions" format="default"/> for
          a detailed discussion of the different types of TCP options.</t>
          <t>The Transport Converter may refuse a Connect TLV request for
          various reasons (e.g., authorization failed, out of resources,
          invalid address type, or unsupported TCP option). An error message
          indicating the encountered error is returned to the requesting
          Client (<xref target="sec-error" format="default"/>). In order to prevent
          denial-of-service attacks, error messages sent to a Client <bcp14>SHOULD</bcp14> be
          rate-limited.</t>
        </section>
        <section anchor="sec-ext-header" numbered="true" toc="default">
          <name>Extended TCP Header TLV</name>
          <t>The Extended TCP Header TLV (<xref target="fig-tcpheader"
          format="default"/>) is used by the Transport Converter to return to
          the Client the TCP options that were returned by the Server in the
          SYN+ACK packet. A Transport Converter <bcp14>MUST</bcp14> return
          this TLV if the Client sent an Extended Connect TLV and the
          connection was accepted by the Server. </t>
          <figure anchor="fig-tcpheader">
            <name>The Extended TCP Header TLV</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+-------------------------------+
 |     Type=0x14 |     Length    |           Unassigned          |
 +---------------+---------------+-------------------------------+
 /               Returned Extended TCP header                    /
 /                              ...                              /
 +---------------------------------------------------------------+
]]></artwork>
          </figure>
          <t>The Returned Extended TCP header field is a copy of the TCP
          Options that were included in the SYN+ACK received by the Transport
          Converter.</t>
          <t>The Unassigned field <bcp14>MUST</bcp14> be set to zero by the sender and
          ignored by the receiver.</t>
        </section>
        <section anchor="sec-cookie-tlv" numbered="true" toc="default">
          <name>The Cookie TLV</name>
          <t>The Cookie TLV (<xref target="fig-cookie" format="default"/>) is
          an optional TLV that is similar to the TCP Fast Open Cookie <xref
          target="RFC7413" format="default"/>. A Transport Converter may want
          to verify that a Client can receive the packets that it sends to
          prevent attacks from spoofed addresses. This verification can be
          done by using a Cookie that is bound to, for example, the IP
          address(es) of the Client. This Cookie can be configured on the
          Client by means that are outside of this document or provided by the
          Transport Converter.</t>
          <t>A Transport Converter that has been configured to use the
          optional Cookie TLV <bcp14>MUST</bcp14> verify the presence of this
          TLV in the payload of the received SYN. If this TLV is present, the
          Transport Converter <bcp14>MUST</bcp14> validate the Cookie by means
          similar to those in <xref target="RFC7413" sectionFormat="of"
          section="4.1.2"/> (i.e., IsCookieValid). If the Cookie is valid, the
          connection establishment procedure can continue. Otherwise, the
          Transport Converter <bcp14>MUST</bcp14> return an Error TLV set to
          "Not Authorized" and close the connection.</t>
          <t>If the received SYN did not contain a Cookie TLV, and cookie
          validation is required, the Transport Converter <bcp14>MAY</bcp14> compute a Cookie
          bound to this Client address. In such case, the Transport Converter
          <bcp14>MUST</bcp14> return an Error TLV set to "Missing Cookie" and the computed
          Cookie and close the connection. The Client will react to this error
          by first issuing a reset to terminate the connection. It also stores
          the received Cookie in its cache and attempts to reestablish a new
          connection to the Transport Converter that includes the Cookie
          TLV.</t>
          <t>The format of the Cookie TLV is shown in <xref target="fig-cookie" format="default"/>.</t>
          <figure anchor="fig-cookie">
            <name>The Cookie TLV</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+-------------------------------+
 |     Type=0x16 |     Length    |             Zero              |
 +---------------+---------------+-------------------------------+
 /                        Opaque  Cookie                         /
 /                              ...                              /
 +---------------------------------------------------------------+
]]></artwork>
          </figure>
        </section>
        <section anchor="sec-error" numbered="true" toc="default">
          <name>Error TLV</name>
          <t>The Error TLV (<xref target="fig-error" format="default"/>) is meant to
          provide information about some errors that occurred during the
          processing of a Convert message. This TLV has a variable length.
          Upon reception of an Error TLV, a Client <bcp14>MUST</bcp14> reset the associated
          connection.</t>
          <t>An Error TLV can be included in the SYN+ACK or an ACK.</t>
          <figure anchor="fig-error">
            <name>The Error TLV</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+----------------+--------------+
 |     Type=0x1E |     Length    |    Error Code  |  Value       |
 +---------------+---------------+----------------+--------------+
 //              ...   (optional) Value                         //
 +---------------------------------------------------------------+
]]></artwork>
          </figure>

          <t>Different types of errors can occur while processing Convert
          messages. Each error is identified by an Error Code represented as
          an unsigned integer. Four classes of error codes are defined:</t>
	  <dl newline="true">
            <dt>Message validation and processing errors (0-31 range):</dt>
              <dd>Returned upon reception of an invalid message (including valid
              messages but with invalid or unknown TLVs).</dd>
            <dt>Client-side errors (32-63 range):</dt><dd>The Client sent a request
              that could not be accepted by the Transport Converter (e.g.,
              unsupported operation).</dd>
            <dt>Converter-side errors (64-95 range):</dt><dd> Problems encountered on
              the Transport Converter (e.g., lack of resources) that prevent
              it from fulfilling the Client's request.</dd>
            <dt>Errors caused by the destination Server (96-127 range):</dt><dd>The
              final destination could not be reached or it replied with a
              reset.</dd>
          </dl>
          <t>The following error codes are defined in this document:</t>
          <dl spacing="normal" newline="true">
            <dt>Unsupported Version (0):</dt><dd><t>The version number indicated in the
              fixed header of a message received from a peer is not supported.
              </t>
              <t> This error code <bcp14>MUST</bcp14> be generated by a
              peer (e.g., Transport Converter) when it receives a request
              having a version number that it does not support. </t>
              <t> The Value field <bcp14>MUST</bcp14> be set to the version
              supported by the peer. When multiple versions are supported by
              the peer, it includes the list of supported versions in the Value
              field; each version is encoded in 8 bits. The list of supported
              versions <bcp14>MUST</bcp14> be padded with zeros to end on a 32-bit boundary.
              </t>
              <t> Upon receipt of this error code, the
              remote peer (e.g., Client) checks whether it supports one of the
              versions returned by the peer. 

The highest commonly supported version number <bcp14>MUST</bcp14> be used by the remote
peer in subsequent exchanges with the peer.</t>
            </dd>
            <dt>Malformed Message (1):</dt><dd><t>This error code is sent to
            indicate that a message received from a peer cannot be
            successfully parsed and validated. </t>
              <t> Typically, this error code is sent by the Transport
              Converter if it receives a Connect TLV enclosing a multicast,
              broadcast, or loopback IP address. </t>
              <t> To ease troubleshooting, the Value field <bcp14>MUST</bcp14>
              echo the received message using the format depicted in <xref
              target="shift" format="default"/>. This format allows keeping
              the original alignment of the message that triggered the
              error. </t>
              <figure anchor="shift">
                <name>Error TLV to Ease Message Correlation</name>
                <artwork name="" type="" align="left" alt=""><![CDATA[
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +---------------+---------------+----------------+--------------+
 |     Type=0x1E |     Length    |    Error Code  |  Zeros       |
 +---------------+---------------+----------------+--------------+
 //        Echo the message that triggered the error            //
 +---------------------------------------------------------------+
]]></artwork>
              </figure>
	    </dd>
            <dt>Unsupported Message (2):</dt><dd><t>This error code is sent to indicate
              that a message type received from a Client is not supported.</t>
              <t> To ease troubleshooting, the Value field <bcp14>MUST</bcp14>
              echo the received message using the format shown in <xref
              target="shift" format="default"/>.</t>
            </dd>

            <dt>Missing Cookie (3):</dt><dd><t>If a Transport Converter requires the
              utilization of Cookies to prevent spoofing attacks and a Cookie
              TLV was not included in the Convert message, the Transport
              Converter <bcp14>MUST</bcp14> return this error to the requesting Client only
              if it computes a cookie for this Client. The first byte of the
              Value field <bcp14>MUST</bcp14> be set to zero and the remaining bytes of the
              Error TLV contain the Cookie computed by the Transport Converter
              for this Client. </t>
              <t> A Client that receives this error code
              <bcp14>SHOULD</bcp14> cache the received Cookie and include it
              in subsequent Convert messages sent to that Transport
              Converter.</t>
            </dd>
            <dt>Not Authorized (32):</dt><dd><t>This error code indicates that the
              Transport Converter refused to create a connection because of a
              lack of authorization (e.g., administratively prohibited,
              authorization failure, or invalid Cookie TLV). The Value field <bcp14>MUST</bcp14>
              be set to zero. </t>
              <t> This error code <bcp14>MUST</bcp14>
              be sent by the Transport Converter when a request cannot be
              successfully processed because the authorization failed.</t>
            </dd>
            <dt>Unsupported TCP Option (33):</dt><dd><t>A TCP option that the Client
              requested to advertise to the final Server cannot be safely
              used. </t>
              <t> The Value field is set to the
              type of the unsupported TCP option. If several unsupported TCP
              options were specified in the Connect TLV, then the list of
              unsupported TCP options is returned. The list of unsupported TCP
              options <bcp14>MUST</bcp14> be padded with zeros to end on a 32-bit
              boundary.</t>
            </dd>
            <dt>Resource Exceeded (64):</dt><dd><t>This error indicates that the
              Transport Converter does not have enough resources to perform
              the request. </t>
              <t> This error <bcp14>MUST</bcp14> be sent
              by the Transport Converter when it does not have sufficient
              resources to handle a new connection. The Transport Converter
              may indicate in the Value field the suggested delay (in seconds)
              that the Client <bcp14>SHOULD</bcp14> wait before soliciting the Transport
              Converter for a new proxied connection. A Value of zero
              corresponds to a default delay of at least 30 seconds.</t>
            </dd>
            <dt>Network Failure (65):</dt><dd><t>This error indicates that the Transport
              Converter is experiencing a network failure to proxy the
              request. </t>
              <t> The Transport Converter <bcp14>MUST</bcp14>
              send this error code when it experiences forwarding issues to
              proxy a connection. The Transport Converter may indicate in the
              Value field the suggested delay (in seconds) that the Client
              <bcp14>SHOULD</bcp14> wait before soliciting the Transport Converter for a new
              proxied connection. A Value of zero corresponds to a default
              delay of at least 30 seconds.</t>
            </dd>
            <dt>Connection Reset (96):</dt><dd>This error indicates that the final
              destination responded with an RST segment. The Value field <bcp14>MUST</bcp14>
              be set to zero.</dd>
            <dt>Destination Unreachable (97):</dt><dd><t>This error indicates that an
              ICMP message indicating a hard error (e.g., destination
              unreachable, port unreachable, or network unreachable) was
              received by the Transport Converter. The Value field <bcp14>MUST</bcp14> echo
              the Code field of the received ICMP message. </t>
              <t>As a reminder, TCP implementations are supposed
              to act on an ICMP error message passed up from the IP layer,
              directing it to the connection that triggered the error using
              the demultiplexing information included in the payload of that
              ICMP message. Such a demultiplexing issue does not apply for
              handling the "Destination Unreachable" Error TLV because the
              error is sent in-band. For this reason, the payload of the ICMP
              message is not echoed in the Destination Unreachable Error
              TLV.</t>
            </dd>
          </dl>
          <t><xref target="tab-error-types" format="default"/> summarizes the different
          error codes.</t>

<table anchor="tab-error-types">
  <name>Convert Error Values</name>
  <thead>
    <tr>
      <th>Error</th>
      <th>Hex</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>       
    <tr>
      <td>0</td>
      <td>0x00</td>
      <td>Unsupported Version</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0x01</td>
      <td>Malformed Message</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0x02</td>
      <td>Unsupported Message</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0x03</td>
      <td>Missing Cookie</td>
    </tr>
    <tr>
      <td>32</td>
      <td>0x20</td>
      <td>Not Authorized</td>
    </tr>
    <tr>
      <td>33</td>
      <td>0x21</td>
      <td>Unsupported TCP Option</td>
    </tr>
    <tr>
      <td>64</td>
      <td>0x40</td>
      <td>Resource Exceeded</td>
    </tr>
    <tr>
      <td>65</td>
      <td>0x41</td>
      <td>Network Failure</td>
    </tr>
    <tr>
      <td>96</td>
      <td>0x60</td>
      <td>Connection Reset</td>
    </tr>
    <tr>
      <td>97</td>
      <td>0x61</td>
      <td>Destination Unreachable</td>
    </tr>
  </tbody>
</table>

        </section>
      </section>
    </section>

    <section anchor="sec-tcpoptions" numbered="true" toc="default">
      <name>Compatibility of Specific TCP Options with the Conversion Service</name>
      <t>In this section, we discuss how several deployed Standards Track TCP
      options can be supported through the Convert Protocol. The other TCP
      options will be discussed in other documents.</t>
      <section anchor="base-tcp-options" numbered="true" toc="default">
        <name>Base TCP Options</name>
        <t>Three TCP options were initially defined in <xref target="RFC0793"
        format="default"/>: End-of-Option List (Kind=0), No-Operation (Kind=1),
        and Maximum Segment Size (Kind=2). The first two options are mainly
        used to pad the TCP header. There is no reason for a Client to request
        a Transport Converter to specifically send these options towards the
        final destination.</t>
        <t>The Maximum Segment Size option (Kind=2) is used by a host to
        indicate the largest segment that it can receive over each connection.
        This value is a function of the stack that terminates the TCP
        connection. There is no reason for a Client to request a Transport
        Converter to advertise a specific Maximum Segment Size (MSS) value to a remote Server.</t>
        <t>A Transport Converter <bcp14>MUST</bcp14> ignore options with Kind=0, 1, or 2 if
        they appear in a Connect TLV. It <bcp14>MUST NOT</bcp14> announce them in a Supported
        TCP Extensions TLV.</t>
      </section>

      <section anchor="window-scale-ws" numbered="true" toc="default">
        <name>Window Scale (WS)</name>
        <t>The Window Scale (WS) option (Kind=3) is defined in <xref
        target="RFC7323" format="default"/>. As for the MSS option, the window
        scale factor that is used for a connection strongly depends on the TCP
        stack that handles the connection. When a Transport Converter opens a
        TCP connection towards a remote Server on behalf of a Client, it
        <bcp14>SHOULD</bcp14> use a WS option with a scaling factor that
        corresponds to the configuration of its stack. A local configuration
        <bcp14>MAY</bcp14> allow for a WS option in the proxied message to be
        a function of the scaling factor of the incoming connection.</t>
        <t>From a deployment viewpoint, there is no benefit in enabling a
        Client of a Transport Converter to specifically request the
        utilization of the WS option (Kind=3) with a specific scaling factor
        towards a remote Server. For this reason, a Transport Converter <bcp14>MUST</bcp14>
        ignore option Kind=3 if it appears in a Connect TLV. 

The Transport Converter <bcp14>MUST NOT</bcp14> announce a WS option (Kind=3)
in a Supported TCP Extensions TLV.
</t>
      </section>
 

      <section anchor="selective-acknowledgments" numbered="true" toc="default">
        <name>Selective Acknowledgments</name>
        <t>Two distinct TCP options were defined to support Selective
        Acknowledgment (SACK) in <xref target="RFC2018" format="default"/>. This first one,
        SACK-Permitted (Kind=4), is used to negotiate the utilization of
        Selective Acknowledgments during the three-way handshake. The second
        one, SACK (Kind=5), carries the Selective Acknowledgments inside
        regular segments.</t>
        <t>The SACK-Permitted option (Kind=4) <bcp14>MAY</bcp14> be advertised by a Transport
        Converter in the Supported TCP Extensions TLV. Clients connected to
        this Transport Converter <bcp14>MAY</bcp14> include the SACK-Permitted option in the
        Connect TLV.</t>
        <t>The SACK option (Kind=5) cannot be used during the three-way
        handshake. For this reason, a Transport Converter <bcp14>MUST</bcp14> ignore option
        Kind=5 if it appears in a Connect TLV. It <bcp14>MUST NOT</bcp14> announce it in a
        TCP Supported Extensions TLV.</t>
      </section>
      <section anchor="timestamp" numbered="true" toc="default">
        <name>Timestamp</name>
        <t>The Timestamp option <xref target="RFC7323" format="default"/> can be used
        during the three-way handshake to negotiate the utilization of
        timestamps during the TCP connection. It is notably used to improve
        round-trip-time estimations and to provide Protection Against Wrapped
        Sequences (PAWS). As for the WS option, the timestamps are a
        property of a connection and there is limited benefit in enabling a
        Client to request a Transport Converter to use the timestamp option
        when establishing a connection to a remote Server. Furthermore, the
        timestamps that are used by TCP stacks are specific to each stack and
        there is no benefit in enabling a Client to specify the timestamp
        value that a Transport Converter could use to establish a connection
        to a remote Server.</t>
        <t>A Transport Converter <bcp14>MAY</bcp14> advertise the Timestamp option (Kind=8)
        in the TCP Supported Extensions TLV. The Clients connected to this
        Transport Converter <bcp14>MAY</bcp14> include the Timestamp option in the Connect
        TLV but without any timestamp.</t>
      </section>
      <section anchor="multipath-tcp" numbered="true" toc="default">
        <name>Multipath TCP</name>
        <t>The Multipath TCP options are defined in <xref target="RFC8684"
	format="default"/>, which defines one
        variable length TCP option (Kind=30) that includes a sub-type field to
        support several Multipath TCP options. There are several operational
        use cases where Clients would like to use Multipath TCP through a
        Transport Converter <xref target="IETFJ16" format="default"/>. However, none of
        these use cases require the Client to specify the content of the
        Multipath TCP option that the Transport Converter should send to a
        remote Server.</t>
        <t>A Transport Converter that supports Multipath TCP conversion
        service <bcp14>MUST</bcp14> advertise the Multipath TCP option (Kind=30) in the
        Supported TCP Extensions TLV. Clients serviced by this Transport
        Converter may include the Multipath TCP option in the Connect TLV but
        without any content.</t>
      </section>
      <section anchor="tcp-fast-open" numbered="true" toc="default">
        <name>TCP Fast Open</name>
        <t>The TCP Fast Open Cookie option (Kind=34) is defined in <xref target="RFC7413" format="default"/>. There are two different usages of this
        option that need to be supported by Transport Converters. The first
        utilization of the TCP Fast Open Cookie option is to request a cookie
        from the Server. In this case, the option is sent with an empty cookie
        by the Client, and the Server returns the cookie. The second
        utilization of the TCP Fast Open Cookie option is to send a cookie to
        the Server. In this case, the option contains a cookie.</t>
        <t>A Transport Converter <bcp14>MAY</bcp14> advertise the TCP Fast Open Cookie option
        (Kind=34) in the Supported TCP Extensions TLV. If a Transport
        Converter has advertised the support for TCP Fast Open in its
        Supported TCP Extensions TLV, it needs to be able to process two types
        of Connect TLV.</t>
        <t>If such a Transport Converter receives a Connect TLV with the TCP
        Fast Open Cookie option that does not contain a cookie, it
        <bcp14>MUST</bcp14> add an empty TCP Fast Open Cookie option in the
        SYN sent to the remote Server. If the remote Server supports TFO, it
        responds with a SYN-ACK according to the procedure in <xref
        target="RFC7413" sectionFormat="of" section="4.1.2"/>. This SYN-ACK
        may contain a Fast Open option with a cookie. Upon receipt of the
        SYN-ACK by the Converter, it relays the Fast Open option with the cookie
        to the Client.</t>
        <t>If such a Transport Converter receives a Connect TLV with the TCP
        Fast Open Cookie option that contains a cookie, it <bcp14>MUST</bcp14> copy the TCP
        Fast Open Cookie option in the SYN sent to the remote Server.</t>
      </section>
      <section anchor="tcp-ao" numbered="true" toc="default">
        <name>TCP-AO</name>
        <t>The TCP Authentication Option (TCP-AO) <xref target="RFC5925"
        format="default"/> provides a technique to authenticate all the
        packets exchanged over a TCP connection. Given the nature of this
        extension, it is unlikely that the applications that require their
        packets to be authenticated end to end would want their connections to
        pass through a converter. For this reason, we do not recommend the
        support of the TCP-AO by Transport Converters. The only use
        cases where it could make sense to combine TCP-AO and the solution in
        this document are those where the TCP-AO-NAT extension <xref
        target="RFC6978" format="default"/> is in use.</t>
        <t>A Transport Converter <bcp14>MUST NOT</bcp14> advertise the TCP-AO
        (Kind=29) in the Supported TCP Extensions TLV. If a Transport
        Converter receives a Connect TLV that contains the TCP-AO, it
        <bcp14>MUST</bcp14> reject the establishment of the connection with
        error code set to "Unsupported TCP Option", except if the TCP-AO-NAT
        option is used.  Nevertheless, given that TCP-AO-NAT is Experimental,
        its usage is not currently defined and must be specified by some other
        document before it can be used.</t>
      </section>
    </section>
    <section anchor="sec-middleboxes" numbered="true" toc="default">
      <name>Interactions with Middleboxes</name>
      <t>The Convert Protocol is designed to be used in networks that do not
      contain middleboxes that interfere with TCP. Under such conditions, it
      is assumed that the network provider ensures that all involved on-path
      nodes are not breaking TCP signals (e.g., strip TCP options, discard
      some SYNs, etc.).</t>
      <t>Nevertheless, and in order to allow for a robust service, this
      section describes how a Client can detect middlebox interference and
      stop using the Transport Converter affected by this interference.</t>
      <t>Internet measurements <xref target="IMC11" format="default"/> have shown that
      middleboxes can affect the deployment of TCP extensions. In this
      section, we focus the middleboxes that modify the payload since the
      Convert Protocol places its messages at the beginning of the
      bytestream.</t>
      <t>Consider a middlebox that removes the SYN payload. The Client can
      detect this problem by looking at the acknowledgment number field of the
      SYN+ACK if returned by the Transport Converter. The Client <bcp14>MUST</bcp14> stop to
      use this Transport Converter given the middlebox interference.</t>
      <t>Consider now a middlebox that drops SYN/ACKs with a payload. The
      Client won't be able to establish a connection via the Transport
      Converter. The case of a middlebox that removes the payload of SYN+ACKs
      or from the packet that follows the SYN+ACK (but not the payload of SYN)
      can be detected by a Client. This is hinted by the absence of a valid
      Convert message in the response.</t>
      <t>As explained in <xref target="RFC7413" format="default"/>, some
      Carrier Grade NATs (CGNs) can affect the operation of TFO if they assign
      different IP addresses to the same end host. Such CGNs could affect the
      operation of the cookie validation used by the Convert Protocol. As a
      reminder, CGNs that are enabled on the path between a Client and a Transport
      Converter must adhere to the address preservation defined in <xref
      target="RFC6888" format="default"/>. See also the discussion in <xref
      target="RFC7413" sectionFormat="of" section="7.1"/>.</t>
    </section>
    <section anchor="sec-security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>An implementation <bcp14>MUST</bcp14> check that the Convert TLVs are properly
      framed within the boundary indicated by the Total Length in the fixed
      header (<xref target="sec-header" format="default"/>).</t>
      <t>Additional security considerations are discussed in the following
      subsections.</t>
      <section anchor="privacy-ingress-filtering" numbered="true" toc="default">
        <name>Privacy &amp; Ingress Filtering</name>
        <t>The Transport Converter may have access to privacy-related
        information (e.g., subscriber credentials). The Transport Converter is
        designed to not leak such sensitive information outside a local
        domain.</t>
        <t>Given its function and location in the network, a Transport
        Converter is in a position to observe all packets that it processes,
        to include payloads and metadata, and has the ability to profile and
        conduct some traffic analysis of user behavior. The Transport
        Converter <bcp14>MUST</bcp14> be as protected as a core IP router
        (e.g., <xref target="RFC1812" sectionFormat="of"
        section="10"/>).</t>

        <t>Furthermore, ingress filtering policies <bcp14>MUST</bcp14> be enforced at the
        network boundaries <xref target="RFC2827" format="default"/>.</t>
        <t>This document assumes that all network attachments are managed by
        the same administrative entity. Therefore, enforcing anti-spoofing
        filters at these networks is a guard that hosts are not sending traffic
        with spoofed source IP addresses.</t>
      </section>
      <section anchor="authorization" numbered="true" toc="default">
        <name>Authentication and Authorization Considerations</name>
        <t>The Convert Protocol is <bcp14>RECOMMENDED</bcp14> for use in a managed network
        where end hosts can be securely identified by their IP address. If
        such control is not exerted and there is a more open network
        environment, a strong mutual authentication scheme <bcp14>MUST</bcp14> be defined to
        use the Convert Protocol.</t>
        <t>One possibility for mutual authentication is to use TLS to perform
        mutual authentication between the Client and the Converter. That is,
        use TLS when a Client retrieves a Cookie from the Converter and rely
        on certificate-based, pre-shared key-based <xref
        target="RFC4279" format="default"/>, or raw public key-based Client
        authentication <xref target="RFC7250" format="default"/> to secure
        this connection. If the authentication succeeds, the Converter returns
        a cookie to the Client.  Subsequent Connect messages will be
        authorized as a function of the content of the Cookie TLV. An attacker
        from within the network between a Client and a Transport Converter may
        intercept the Cookie and use it to be granted access to the conversion
        service. Such an attack is only possible if the attacker spoofs the IP
        address of the Client and the network does not filter packets with
        source-spoofed IP addresses. </t>
        <t>The operator that manages the various network attachments
        (including the Transport Converters) has various options for enforcing
        authentication and authorization policies. For example, a
        non-exhaustive list of methods to achieve authorization is provided
        hereafter:</t>
        <ul spacing="normal">
          <li>The network provider may enforce a policy based on the
            International Mobile Subscriber Identity (IMSI) to verify that a
            user is allowed to benefit from the TCP converter service. If that
            authorization fails, the Packet Data Protocol (PDP) context/bearer
            will not be mounted. This method does not require any interaction
            with the Transport Converter for authorization matters.</li>
          <li>The network provider may enforce a policy based upon Access
            Control Lists (ACLs), e.g., at a Broadband Network Gateway (BNG)
            to control the hosts that are authorized to communicate with a
            Transport Converter. These ACLs may be installed as a result of
            RADIUS exchanges, e.g., <xref target="I-D.boucadair-opsawg-tcpm-converter" format="default"/>. This method
            does not require any interaction with the Transport Converter for
            authorization matters.</li>
          <li>A device that embeds a Transport Converter may also host a
          RADIUS Client that will solicit a AAA Server to check whether or
          not connections received from a given source IP address are
          authorized <xref target="I-D.boucadair-opsawg-tcpm-converter"
          format="default"/>.</li>
        </ul>
        <t>A first safeguard against the misuse of Transport Converter
        resources by illegitimate users (e.g., users with access networks that
        are not managed by the same provider that operates the Transport
        Converter) is the Transport Converter to reject Convert connections
        received in the external realm. Only Convert connections received in
        the internal realm of a Transport Converter will be accepted.</t>
        <t>In deployments where network-assisted connections are not allowed
        between hosts of a domain (i.e., hairpinning), the Converter may be
        instructed to discard such connections. Hairpinned connections are
        thus rejected by the Transport Converter by returning an Error TLV set
        to "Not Authorized". Otherwise, absent explicit configuration,
        hairpinning is enabled by the Converter (see <xref target="fig-hairp"
        format="default"/>).</t>
        <figure anchor="fig-hairp">
          <name>Hairpinning Example</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
          <===Network Provider===>
   
   +----+ from X1:x1 to X2':x2'   +-----+ X1':x1'
   | C1 |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>--+---
   +----+                         |  v  |
                                  |  v  |
                                  |  v  |
                                  |  v  |
   +----+ from X1':x1' to X2:x2   |  v  | X2':x2'
   | C2 |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<--+---
   +----+                         +-----+
                                 Converter
   
   Note: X2':x2' may be equal to
         X2:x2                               
]]></artwork>
        </figure>

      </section>
      <section anchor="denial-of-service" numbered="true" toc="default">
        <name>Denial of Service</name>
        <t>Another possible risk is amplification attacks, since a Transport
        Converter sends a SYN towards a remote Server upon reception of a SYN
        from a Client. This could lead to amplification attacks if the SYN
        sent by the Transport Converter were larger than the SYN received from
        the Client, or if the Transport Converter retransmits the SYN. To
        mitigate such attacks, the Transport Converter <bcp14>SHOULD</bcp14>
        rate-limit the number of pending requests for a given Client. It
        <bcp14>SHOULD</bcp14> also avoid sending SYNs that are significantly
        longer than the SYN received from the Client, to remote
        Servers.  Finally, the Transport Converter <bcp14>SHOULD</bcp14> only
        retransmit a SYN to a Server after having received a retransmitted SYN
        from the corresponding Client. Means to protect against SYN flooding
        attacks should also be enabled (e.g., <xref target="RFC4987"
        sectionFormat="of" section="3"/>).</t>
        <t>Attacks from within the network between a Client and a Transport
        Converter (including attacks that change the protocol version) are yet
        another threat. Means to ensure that illegitimate nodes cannot connect
        to a network should be implemented.</t>
      </section>

      <section anchor="traffic-theft" numbered="true" toc="default">
        <name>Traffic Theft</name>
        <t>Traffic theft is a risk if an illegitimate Converter is inserted in
        the path. Indeed, inserting an illegitimate Converter in the
        forwarding path allows traffic interception and can therefore provide
        access to sensitive data issued by or destined to a host. Converter
        discovery and configuration are out of scope of this document.</t>
      </section>
      <section numbered="true" toc="default">
        <name>Logging</name>
        <t>If the Converter is configured to behave in the address-sharing
        mode (<xref target="sec-adds" format="default"/>), the logging recommendations
        discussed in <xref target="RFC6888" sectionFormat="of" section="4"/> need to be
        considered. Security-related issues encountered in address-sharing
        environments are documented in <xref target="RFC6269"
	sectionFormat="of" section="13"/>.</t>
      </section>
    </section>
    <section anchor="sec-iana" numbered="true" toc="default">
      <name>IANA Considerations</name>

      <section anchor="sec-service" numbered="true" toc="default">
        <name>Convert Service Name</name> 
	<t>IANA has assigned a
        service name for the Convert Protocol from the "Service Name and
        Transport Protocol Port Number Registry" available at
        &lt;<eref target="https://www.iana.org/assignments/service-names-port-numbers"/>&gt;.</t>

	<dl spacing="compact" indent="25">
	  <dt>Service Name:</dt><dd>convert</dd>
	  <dt>Port Number:</dt><dd>N/A</dd>
	  <dt>Transport Protocol(s):</dt><dd>TCP</dd>
	  <dt>Description:</dt><dd>0-RTT TCP Convert Protocol</dd>
	  <dt>Assignee:</dt><dd>IESG &lt;iesg@ietf.org&gt;</dd>
	  <dt>Contact:</dt><dd>IETF Chair &lt;chair@ietf.org&gt;</dd>
	  <dt>Reference:</dt><dd>RFC 8803</dd>
	</dl>

        <t>Clients may use this service name to feed the procedure defined in
        <xref target="RFC2782" format="default"/> to discover the IP address(es) and the
        port number used by the Transport Converters of a domain.</t>
      </section>
      <section anchor="the-convert-protocol-convert-parameters" numbered="true" toc="default">
        <name>The Convert Protocol (Convert) Parameters</name>
        <t>IANA has created a new "TCP Convert Protocol
        (Convert) Parameters" registry.</t>
        <t>The following subsections detail new registries within the "Convert
        Protocol (Convert) Parameters" registry.</t>
        <t>The designated expert is expected to ascertain the existence of
        suitable documentation as described in <xref
	target="RFC8126" sectionFormat="of" section="4.6"/> and to verify that the document is
        permanently and publicly available. The designated expert is also
        expected to check the clarity of purpose and use of the requested code
        points.</t>
        <t>Also, criteria that should be applied by the designated experts
        includes determining whether the proposed registration
        duplicates existing functionality, whether it is likely to be of
        general applicability or useful only for private use, and whether 
        the registration description is clear. 

All requests should be directed to the review mailing list.  For both the
"Convert TLVs" and "Convert Errors" subregistries, IANA must only accept
registry updates in the 128-191 range from the designated experts.  It is
suggested that multiple designated experts be appointed.

        In cases where a registration decision could be perceived as creating
        a conflict of interest for a particular expert, that expert should
        defer to the judgment of the other experts.</t>
        <section anchor="convert-versions" numbered="true" toc="default">
          <name>Convert Versions</name>
          <t>IANA has created the "Convert Versions" subregistry.
          New values are assigned via IETF Review (<xref target="RFC8126"
          sectionFormat="of" section="4.8"/>).</t>
          <t>The initial values of the registry
          are as follows:</t>

 
	  <table anchor="ver">
            <name>Current Convert Versions</name>
	    <thead>
    <tr>
      <th>Version</th>
      <th>Description</th>
      <th>Reference</th>
    </tr>
  </thead>
  <tbody>          
    <tr>
      <td>0</td>
      <td>Reserved</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>1</td>
      <td>Assigned</td>
      <td>RFC 8803</td>
    </tr>
  </tbody>
</table>

        </section>
        <section anchor="convert-tlvs" numbered="true" toc="default">
          <name>Convert TLVs</name>
          <t>IANA has created the "Convert TLVs" subregistry. The
          procedures for assigning values from this registry are as follows:</t>
	  <dl indent="10">
	    <dt>1-127:</dt><dd>IETF Review</dd>
            <dt>128-191:</dt><dd>Specification Required</dd>
            <dt>192-255:</dt><dd>Private Use</dd>
          </dl>
          <t>The initial values of the registry
          are as follows:</t>

<table anchor="tlvs">
  <name>Initial Convert TLVs</name>
  <thead>
    <tr>
      <th>Code</th>
      <th>Name</th>
      <th>Reference</th>
    </tr>
  </thead>
  <tbody>  
    <tr>
      <td>0</td>
      <td>Reserved</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>1</td>
      <td>Info TLV</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>10</td>
      <td>Connect TLV</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>20</td>
      <td>Extended TCP Header TLV</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>21</td>
      <td>Supported TCP Extension TLV</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>22</td>
      <td>Cookie TLV</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>30</td>
      <td>Error TLV</td>
      <td>RFC 8803</td>
    </tr>
  </tbody>
</table>

        </section>
        <section anchor="convert-error-messages" numbered="true" toc="default">
          <name>Convert Error Messages</name>
          <t>IANA has created the "Convert Errors" subregistry.
          Codes in this registry are assigned as a function of the error type.
          Four types are defined; the following ranges are reserved for each
          of these types:</t>
	  <dl indent="10">
            <dt>0-31:</dt><dd>Message validation and processing errors</dd>
            <dt>32-63:</dt><dd>Client-side errors</dd>
            <dt>64-95:</dt><dd>Transport Converter-side errors</dd>
            <dt>96-127:</dt><dd>Errors caused by destination Server</dd>
          </dl>
          <t>The procedures for assigning values from this subregistry are as
          follows:</t>
          <dl spacing="normal" indent="10">
            <dt>0-127:</dt><dd>IETF Review</dd>
            <dt>128-191:</dt><dd>Specification Required</dd>
            <dt>192-255:</dt><dd>Private Use</dd>
          </dl>
          <t>The initial values of the registry
          are as follows:</t>

<table anchor="tab-error-summary">  
  <name>Initial Convert Error Codes</name> 
  <thead>
    <tr>
      <th>Error</th>
      <th>Description</th>
      <th>Reference</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>Unsupported Version</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>1</td>
      <td>Malformed Message</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Unsupported Message</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Missing Cookie</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>32</td>
      <td>Not Authorized</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>33</td>
      <td>Unsupported TCP Option</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>64</td>
      <td>Resource Exceeded</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>65</td>
      <td>Network Failure</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>96</td>
      <td>Connection Reset</td>
      <td>RFC 8803</td>
    </tr>
    <tr>
      <td>97</td>
      <td>Destination Unreachable</td>
      <td>RFC 8803</td>
    </tr>
  </tbody>
</table>

        </section>
      </section>
    </section>
  </middle>
  <back>

<displayreference target="I-D.boucadair-tcpm-dhc-converter" to="DHC-CONVERTER"/> 
<displayreference target="I-D.olteanu-intarea-socks-6" to="INTAREA-SOCKS"/> 


<displayreference target="I-D.boucadair-mptcp-plain-mode" to="MPTCP-PLAIN"/> 

 

<displayreference target="I-D.peirens-mptcp-transparent" to="MPTCP-TRANSPARENT"/> 
<displayreference target="I-D.arkko-arch-low-latency" to="LOW-LATENCY"/> 
<displayreference target="I-D.boucadair-opsawg-tcpm-converter" to="TCPM-CONVERTER"/>

    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0793.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4291.xml"/>

        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8684.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7413.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4987.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5925.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6890.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6888.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4787.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7323.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2018.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2827.xml"/>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5461.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6731.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6978.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4279.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7250.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1812.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1919.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1928.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3135.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7414.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6887.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6928.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8041.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8305.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6269.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6296.xml"/>

        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.boucadair-tcpm-dhc-converter.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8548.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.olteanu-intarea-socks-6.xml"/>



<reference anchor='I-D.boucadair-mptcp-plain-mode'>

<front>
<title>Extensions for Network-Assisted MPTCP Deployment Models</title>

<author initials='M' surname='Boucadair' fullname='Mohamed Boucadair'>    <organization />
</author>

<author initials='C' surname='Jacquenet' fullname='Christian Jacquenet'>    <organization />
</author>

<author initials='O' surname='Bonaventure' fullname='Olivier Bonaventure'>    <organization />
</author>

<author initials='D' surname='Behaghel' fullname='Denis Behaghel'>    <organization />
</author>

<author initials='S' surname='Secci' fullname='Stefano Secci'>    <organization />
</author>

<author initials='W' surname='Henderickx' fullname='Wim Henderickx'>    <organization />
</author>

<author initials='R' surname='Skog' fullname='Robert Skog'>    <organization />
</author>

<author initials='S' surname='Vinapamula' fullname='Suresh Vinapamula'>    <organization />
</author>

<author initials='S' surname='Seo' fullname='SungHoon Seo'>    <organization />
</author>

<author initials='W' surname='Cloetens' fullname='Wouter Cloetens'>    <organization />
</author>

<author initials='U' surname='Meyer' fullname='Ullrich Meyer'>    <organization />
</author>

<author initials='L' surname='Contreras' fullname='Luis Contreras'>   <organization />
</author>

<author initials='B' surname='Peirens' fullname='Bart Peirens'>  <organization />
</author>

<date month='March' year='2017' />
</front>
<seriesInfo name='Internet-Draft' value='draft-boucadair-mptcp-plain-mode-10' />
</reference>


        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.peirens-mptcp-transparent.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.arkko-arch-low-latency.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.boucadair-opsawg-tcpm-converter.xml"/>

<reference anchor="IANA-CONVERT" target="https://www.iana.org/assignments/tcp-convert-protocol-parameters">
<front>
<title>TCP Convert Protocol (Convert) Parameters
</title>
<author>
<organization>IANA
</organization>
</author>
</front>
</reference>


        <reference anchor="TS23501" target="https://www.3gpp.org/ftp/Specs/archive/23_series/23.501/">
          <front>
            <title>Technical Specification Group Services and System Aspects;
          System architecture for the 5G System; Stage 2 (Release 16)</title>
            <author>
              <organization>3GPP (3rd Generation Partnership Project)
	      </organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>

        <reference anchor="Fukuda2011">
          <front>
            <title>An Analysis of Longitudinal TCP Passive Measurements (Short
          Paper)</title>
            <author initials="K." surname="Fukuda">
              <organization/>
            </author>
            <date year="2011"/>
          </front>

<refcontent>Traffic Monitoring and Analysis</refcontent>
<refcontent>TMA 2011</refcontent>
<refcontent>Lecture Notes in Computer Science, vol. 6613</refcontent>
        </reference>

        <reference anchor="ANRW17">
          <front>
            <title>Tracking transport-layer evolution with PATHspider</title>
            <author initials="B." surname="Trammell">
              <organization/>
            </author>
            <author initials="M." surname="Kuehlewind">
              <organization/>
            </author>
            <author initials="P." surname="De Vaere">
              <organization/>
            </author>
            <author initials="I." surname="Learmonth">
              <organization/>
            </author>
            <author initials="G." surname="Fairhurst">
              <organization/>
            </author>
            <date month="July" year="2017"/>
          </front>
<refcontent>Applied Networking Research Workshop 2017 (ANRW17)</refcontent>
        </reference>

        <reference anchor="IMC11">
          <front>
            <title>Is it still possible to extend TCP?</title>
            <author initials="K." surname="Honda">
              <organization/>
            </author>
            <author initials="Y." surname="Nishida">
              <organization/>
            </author>
            <author initials="C." surname="Raiciu">
              <organization/>
            </author>
            <author initials="A." surname="Greenhalgh">
              <organization/>
            </author>
            <author initials="M." surname="Handley">
              <organization/>
            </author>
            <author initials="T." surname="Hideyuki">
              <organization/>
            </author>
            <date month="November" year="2011"/>
          </front>
            <seriesInfo name="DOI" value="10.1145/2068816.2068834"/>
	    <refcontent>Proceedings of the 2011 ACM SIGCOMM conference on
	    Internet measurement conference
	    </refcontent>
        </reference>

        <reference anchor="IETFJ16">
          <front>
            <title>Multipath TCP Deployments</title>

            <author initials="O." surname="Bonaventure">
              <organization/>
            </author>
            <author initials="S." surname="Seo">
              <organization/>
            </author>
            <date month="November" year="2016"></date>
          </front>
	  <refcontent>IETF Journal</refcontent>
	  <refcontent>Vol. 12, Issue 2</refcontent>
        </reference>

        <reference anchor="HOT-MIDDLEBOX13" target="https://inl.info.ucl.ac.be/publications/multipath-middlebox">
          <front>
            <title>Multipath in the Middle(Box)</title>
            <author initials="G." surname="Detal">
              <organization/>
            </author>
            <author initials="C." surname="Paasch">
              <organization/>
            </author>
            <author initials="O." surname="Bonaventure">
              <organization/>
            </author>
            <date month="December" year="2013"/>
          </front>
	    <seriesInfo name="DOI" value="10.1145/2535828.2535829"/>
	    <refcontent>HotMiddlebox'13</refcontent>
        </reference>
      </references>
    </references>


    <section anchor="sec-api" numbered="true" toc="default">
      <name>Example Socket API Changes to Support the 0-RTT TCP Convert Protocol</name>
      <section anchor="active-open-client-side" numbered="true" toc="default">
        <name>Active Open (Client Side)</name>
        <t>On the Client side, the support of the 0-RTT Converter protocol
        does not require any other changes than those identified in <xref
        target="RFC7413" sectionFormat="of" section="A"/>. Those modifications
        are already supported by multiple TCP stacks.</t>
        <t>As an example, on Linux, a Client can send the 0-RTT Convert
        message inside a SYN by using sendto with the MSG_FASTOPEN flag as
        shown in the example below:</t>

        <artwork name="" type="" align="left" alt=""><![CDATA[
  s = socket(AF_INET, SOCK_STREAM, 0);

  sendto(s, buffer, buffer_len, MSG_FASTOPEN,
                 (struct sockaddr *) &server_addr, addr_len);
]]></artwork>

        <t>The Client side of the Linux TFO can be used in two different
        modes depending on the host configuration (sysctl tcp_fastopen
        variable):</t>
        <dl>
          <dt>0x1:</dt><dd>(client) enables sending data in the opening SYN on the
            Client.</dd>
          <dt>0x4:</dt><dd>(client) enables sending data in the opening SYN regardless of cookie
            availability and without a cookie option.</dd>
        </dl>

       <t>By setting this configuration variable to 0x5, a Linux Client using
        the above code would send data inside the SYN without using a TFO
        option.</t>
      </section>
      <section anchor="passive-open-converter-side" numbered="true" toc="default">
        <name>Passive Open (Converter Side)</name>
        <t>The Converter needs to enable the reception of data inside the SYN
        independently of the utilization of the TFO option. This implies that
        the Transport Converter application cannot rely on the Fast Open Cookies to
        validate the reachability of the IP address that sent the SYN. It must
        rely on other techniques, such as the Cookie TLV described in this
        document, to verify this reachability.</t>
        <t><xref target="RFC7413" format="default"/> suggested the utilization of a
        TCP_FASTOPEN socket option to enable the reception of SYNs containing
        data. Later, <xref target="RFC7413" sectionFormat="of" section="A"/>
        mentioned:</t>

<blockquote>    
  Traditionally, accept() returns only after a socket is connected.
  But, for a Fast Open connection, accept() returns upon receiving
  a SYN with a valid Fast Open cookie and data, and the data is 
  available to be read through, e.g., recvmsg(), read().
</blockquote>
        <t>To support the 0-RTT TCP Convert Protocol, this behavior should be
        modified as follows:</t>
<blockquote>
  Traditionally, accept() returns only after a socket is connected.
  But, for a Fast Open connection, accept() returns upon receiving a
  SYN with data, and the data is available to be read through, e.g.,
  recvmsg(), read(). The application that receives such SYNs with 
  data must be able to validate the reachability of the source of 
  the SYN and also deal with replayed SYNs.
</blockquote>
        <t>The Linux Server side can be configured with the following
        sysctls:</t>
        <dl spacing="normal">
          <dt>0x2:</dt><dd>(server) enables the Server support, i.e., allowing data
            in a SYN packet to be accepted and passed to the application
            before a 3-way handshake finishes.</dd>
          <dt>0x200:</dt><dd>(server) accepts data-in-SYN w/o any cookie option
            present.</dd>
        </dl>
        <t>However, this configuration is system wide. This is convenient for
        typical Transport Converter deployments where no other applications
        relying on TFO are collocated on the same device.</t>
        <t>Recently, the TCP_FASTOPEN_NO_COOKIE socket option has been added
        to provide the same behavior on a per-socket basis. This enables a
        single host to support both Servers that require the Fast Open Cookie and
        Servers that do not use it.</t>
      </section>
    </section>
    <section anchor="acknowledgments" numbered="false" toc="default">
      <name>Acknowledgments</name>
      <t>Although they could disagree with the contents of the document, we
      would like to thank <contact fullname="Joe Touch"/> and <contact fullname="Juliusz
      Chroboczek"/>, whose comments on the MPTCP mailing list have forced us to
      reconsider the design of the solution several times.</t>
      <t>We would like to thank <contact fullname="Raphael Bauduin"/>,
      <contact fullname="Stefano Secci"/>, <contact fullname="Anandatirtha
      Nandugudi"/>, and <contact fullname="Gregory Vander Schueren"/> for their help in preparing this
      document. <contact fullname="Nandini Ganesh"/> provided valuable feedback about the handling
      of TFO and the error codes. <contact fullname="Yuchung Cheng"/> and
      <contact fullname="Praveen Balasubramanian"/>
      helped to clarify the discussion on supplying data in SYNs. <contact fullname="Phil Eardley"/>
      and <contact fullname="Michael Scharf"/> helped to clarify different parts of the text.
      Thanks to <contact fullname="Éric Vyncke"/>, <contact fullname="Roman
      Danyliw"/>, <contact fullname="Benjamin Kaduk"/>, and <contact fullname="Alexey
      Melnikov"/> for the IESG review, and <contact fullname="Christian Huitema"/> for the Security
      Directorate review.</t>
      <t>Many thanks to <contact fullname="Mirja Kühlewind"/> for the detailed AD review.</t>
      <t>This document builds upon earlier documents that proposed various
      forms of Multipath TCP proxies: <xref
      target="I-D.boucadair-mptcp-plain-mode" format="default"/>, <xref
      target="I-D.peirens-mptcp-transparent" format="default"/>, and <xref
      target="HOT-MIDDLEBOX13" format="default"/>.</t>
      <t>From <xref target="I-D.boucadair-mptcp-plain-mode" format="default"/>:</t>
      <t>Many thanks to <contact fullname="Chi Dung Phung"/>, <contact
      fullname="Mingui Zhang"/>, <contact fullname="Rao Shoaib"/>, <contact fullname="Yoshifumi
      Nishida"/>, and <contact fullname="Christoph Paasch"/> for their valuable comments.</t>
      <t>Thanks to <contact fullname="Ian Farrer"/>, <contact fullname="Mikael
      Abrahamsson"/>, <contact fullname="Alan Ford"/>, <contact fullname="Dan
      Wing"/>, and <contact fullname="Sri Gundavelli"/> for the fruitful
      discussions at IETF 95 (Buenos Aires).</t>
      <t>Special thanks to <contact fullname="Pierrick Seite"/>, <contact
      fullname="Yannick Le Goff"/>, <contact fullname="Fred Klamm"/>, and
      <contact fullname="Xavier Grall"/> for their input.</t>
      <t>Thanks also to <contact fullname="Olaf Schleusing"/>, <contact
      fullname="Martin Gysi"/>, <contact fullname="Thomas Zasowski"/>,
      <contact fullname="Andreas
      Burkhard"/>, <contact fullname="Silka Simmen"/>, <contact
      fullname="Sandro Berger"/>, <contact fullname="Michael Melloul"/>,
      <contact fullname="Jean-Yves
      Flahaut"/>, <contact fullname="Adrien Desportes"/>, <contact
      fullname="Gregory Detal"/>, <contact fullname="Benjamin David"/>,
      <contact fullname="Arun
      Srinivasan"/>, and <contact fullname="Raghavendra Mallya"/> for their input.</t>
    </section>

    <section anchor="contributors" numbered="false" toc="default">
      <name>Contributors</name>
      <t><contact fullname="Bart Peirens"/> contributed to an early draft version of this document.</t>
      <t>As noted above, this document builds on two previous documents.</t>
      <t>The authors of <xref target="I-D.boucadair-mptcp-plain-mode" format="default"/>
      were:</t>
      <ul spacing="normal">
        <li><t><contact fullname="Mohamed Boucadair"/></t></li>
        <li><t><contact fullname="Christian Jacquenet"/></t></li>
        <li><t><contact fullname="Olivier Bonaventure"/></t></li>
        <li><t><contact fullname="Denis Behaghel"/></t></li>
        <li><t><contact fullname="Stefano Secci"/></t></li>
        <li><t><contact fullname="Wim Henderickx"/></t></li>
        <li><t><contact fullname="Robert Skog"/></t></li>
        <li><t><contact fullname="Suresh Vinapamula"/></t></li>
        <li><t><contact fullname="SungHoon Seo"/></t></li>
        <li><t><contact fullname="Wouter Cloetens"/></t></li>
        <li><t><contact fullname="Ullrich Meyer"/></t></li>
        <li><t><contact fullname="Luis M. Contreras"/></t></li>
        <li><t><contact fullname="Bart Peirens"/></t></li>
      </ul>
      <t>The authors of <xref target="I-D.peirens-mptcp-transparent" format="default"/>
      were:</t>
      <ul spacing="normal">
        <li><t><contact fullname="Bart Peirens"/></t></li>
        <li><t><contact fullname="Gregory Detal"/></t></li>
        <li><t><contact fullname="Sebastien Barre"/></t></li>
        <li><t><contact fullname="Olivier Bonaventure"/></t></li>
      </ul>
    </section>
  </back>


</rfc>
