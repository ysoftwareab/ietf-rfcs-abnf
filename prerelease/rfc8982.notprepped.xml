<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="en" submissionType="IETF"
category="std" consensus="true" docName="draft-ietf-regext-rdap-partial-response-16" 
number="8982" ipr="trust200902" tocInclude="true" tocDepth="4" sortRefs="true" 
symRefs="true" version="3">


  <front>
    <title abbrev="RDAP Partial Response">Registration Data Access Protocol (RDAP) Partial Response</title>
    <seriesInfo name="RFC" value="8982"/>
    <author fullname="Mario Loffredo" initials="M." surname="Loffredo">
      <organization>IIT-CNR/Registro.it</organization>
      <address>
        <postal>
          <street>Via Moruzzi,1</street>
          <city>Pisa</city>
          <country>IT</country>
          <code>56124</code>
        </postal>
        <email>mario.loffredo@iit.cnr.it</email>
        <uri>https://www.iit.cnr.it</uri>
      </address>
    </author>
    <author fullname="Maurizio Martinelli" initials="M." surname="Martinelli">
      <organization>IIT-CNR/Registro.it</organization>
      <address>
        <postal>
          <street>Via Moruzzi,1</street>
          <city>Pisa</city>
          <country>IT</country>
          <code>56124</code>
        </postal>
        <email>maurizio.martinelli@iit.cnr.it</email>
        <uri>https://www.iit.cnr.it</uri>
      </address>
    </author>
    <date year="2021" month="February"/>
    <area>Applications and Real-Time</area>
    <workgroup>Registration Protocols Extensions</workgroup>
    <keyword>RDAP</keyword>
    <keyword>Partial response</keyword>
    <abstract>
      <t>The Registration Data Access Protocol (RDAP) does not include capabilities to request partial responses.  Servers will only return full responses that include all of the information that a client is authorized to receive.  A partial response capability that limits the amount of information returned, especially in the case of search queries, could bring benefits to both clients and servers.  This document describes an RDAP query extension that allows clients to specify their preference for obtaining a partial response.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">

      <name>Introduction</name>
      <t>The use of partial responses in RESTful API <xref
      target="REST"/> design is very common.  The rationale is quite simple:
      instead of returning objects in API responses with all data fields, only
      a subset of the fields in each result object is returned.  The benefit
      is obvious: less data transferred over the network means less bandwidth
      usage, faster server responses, less CPU time spent both on the server
      and the client, and less memory usage on the client.</t>

      <t>Currently, RDAP does not provide a client with any way to request a
      partial response.  Servers can only provide the client with a full
      response <xref target="RFC7483"/>.  Servers cannot limit the amount of
      information returned in a response based on a client's preferences, and
      this creates inefficiencies.</t>
      <t>The protocol described in this specification extends RDAP search
      capabilities to enable partial responses through the provisioning of
      predefined sets of fields that clients can submit to an RDAP service by
      adding a new query parameter.  The service is implemented using the
      Hypertext Transfer Protocol (HTTP) <xref target="RFC7230"/> and the
      conventions described in <xref target="RFC7480"/>.</t>
      <section>
        <name>Conventions Used in This Document</name>

        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are
    to be interpreted as described in BCP&nbsp;14 <xref target="RFC2119"/>
    <xref target="RFC8174"/> when, and only when, they appear in all capitals,
    as shown here.
        </t>

      </section>
    </section>
    <section anchor="rdap-path-segment-specification">
      <name>RDAP Path Segment Specification</name>
      <t>The path segment defined in this section is an
      <bcp14>OPTIONAL</bcp14> extension of search path segments defined in
      <xref target="RFC7482"/>.  This document defines an RDAP query
      parameter, "fieldSet", whose value is a non-empty string identifying a
      server-defined set of fields returned in place of the full response.
      The field sets supported by a server are usually described in
      out-of-band documents (e.g., RDAP profile) together with other features.
      Moreover, this document defines in <xref
      target="rdap-subsetting-metadata"/> an in-band mechanism by means of
      which servers can provide clients with basic information about the
      supported field sets.</t>
      <t>The following is an example of an RDAP query including the "fieldSet" parameter:</t>
      <artwork><![CDATA[
https://example.com/rdap/domains?name=example*.com&fieldSet=afieldset
]]></artwork>
      <t>This solution can be implemented by RDAP providers with less effort
      than field selection and is easily requested by clients.  The
      considerations that have led to this solution are described in more
      detail in <xref
      target="approaches-to-partial-response-implementation"/>.</t>
      <section anchor="rdap-subsetting-metadata">

        <name>Subsetting Metadata</name>
        <t>According to most advanced principles in REST design, collectively
        known as "Hypermedia as the Engine of Application State" (HATEOAS)
        <xref target="HATEOAS"/>, a client entering a REST application through
        an initial URI should use server-provided links to dynamically
        discover available actions and access the resources it needs.  In this
        way, the client is not required to have prior knowledge of the service
        nor, consequently, to hard-code the URIs of different resources.  This
        allows the server to make URI changes as the API evolves without
        breaking clients.  Definitively, a REST service should be as
        self-descriptive as possible.</t>
        <t>Therefore, servers implementing the query parameter described in
        this specification <bcp14>SHOULD</bcp14> provide additional
        information in their responses about the available field sets.  Such
        information is collected in a new JSON data structure named
        "subsetting_metadata" containing the following properties:</t>
<dl newline="true">

<dt>"currentFieldSet": "String" (<bcp14>REQUIRED</bcp14>)
</dt>
<dd>either the value of the "fieldSet" parameter as specified in the query
string, or the field set applied by default.
</dd>

<dt>"availableFieldSets": "AvailableFieldSet[]"  (<bcp14>OPTIONAL</bcp14>)
</dt>
<dd><t>an array of objects, with each element describing an available field set.
The AvailableFieldSet object includes the following members:</t>


<dl newline="true">

<dt>"name": "String" (<bcp14>REQUIRED</bcp14>)
</dt>
<dd>the field set name.
</dd>

<dt>"default": "Boolean" (<bcp14>REQUIRED</bcp14>)
</dt>
<dd>indicator of whether the field set is applied by      
default.  An RDAP server <bcp14>MUST</bcp14> define only one default field set.
</dd>

<dt>"description": "String"  (<bcp14>OPTIONAL</bcp14>)
</dt>
<dd>a human-readable description of the field set.
</dd>

<dt>"links": "Link[]" (<bcp14>OPTIONAL</bcp14>)
</dt>
<dd>an array of links as described in <xref target="RFC8288"/> containing the
query string that applies the field set (see <xref
target="subsetting_links"/>).
</dd>
</dl>

</dd>
</dl>

        <section anchor="rdap-conformance">
          <name>RDAP Conformance</name>
          <t>Servers returning the "subsetting_metadata" section in their responses <bcp14>MUST</bcp14> include "subsetting" in the rdapConformance array.</t>
        </section>
        <section anchor="subsetting_links">
          <name>Representing Subsetting Links</name>
          <t>An RDAP server <bcp14>MAY</bcp14> use the "links" array of the "subsetting_metadata" element to provide ready-made references <xref target="RFC8288"/> to the available field sets (<xref target="subset-link-in-response-example"/>).  The target URI in each link is the reference to an alternative to the current view of results identified by the context URI.</t>
          <t>The "value", "rel", and "href" JSON values <bcp14>MUST</bcp14> be specified.  All other JSON values are <bcp14>OPTIONAL</bcp14>.</t>
          <figure anchor="subset-link-in-response-example">
            <name>Example of a "subsetting_metadata" Instance</name>

<sourcecode type="json"><![CDATA[
{
  "rdapConformance": [
    "rdap_level_0",
    "subsetting"
  ],
  ...
  "subsetting_metadata": {
    "currentFieldSet": "afieldset",
    "availableFieldSets": [
      {
      "name": "anotherfieldset",
      "description": "Contains some fields",
      "default": false,
      "links": [
        {
        "value": "https://example.com/rdap/domains?name=example*.com
                  &fieldSet=afieldset",
        "rel": "alternate",
        "href": "https://example.com/rdap/domains?name=example*.com
                 &fieldSet=anotherfieldset",
        "title": "Result Subset Link",
        "type": "application/rdap+json"
        }
      ]
      },
    ...
    ]      
  },
  ...
  "domainSearchResults": [
    ...
  ]
}
]]></sourcecode>
          </figure>
        </section>
      </section>
    </section>
    <section anchor="rdap-field-set-relationships">
      <name>Dealing with Relationships</name>
      <t>Representation of second-level objects within a field set produces additional considerations.  Since the representation of the topmost returned objects will vary according to the field set in use, the response may contain no relationships (e.g., for an abbreviated field set) or may contain associated objects as in a normal RDAP query response.  Each field set can indicate the format of the additional objects to be returned, in the same manner that the format of the topmost objects is controlled by the field set.</t>
    </section>
    <section anchor="basic-field-sets">
      <name>Basic Field Sets</name>
      <t>This section defines three basic field sets that servers
      <bcp14>MAY</bcp14> implement to facilitate their interaction with
      clients:</t>


<dl>

<dt>"id":
</dt>
<dd>The server provides only the key field; "handle" for entities, and "ldhName" for domains   
and nameservers.  If a returned domain or nameserver is an Internationalized Domain Name (IDN) <xref      
target="RFC5890"/>, then the "unicodeName" field <bcp14>MUST</bcp14> additionally be included in the      
response.  This field set could be used when the client wants to obtain a collection of object            
identifiers (<xref target="fieldSet-id-response-example"/>).
</dd>

<dt>"brief":
</dt>
<dd>The field set contains the fields that can be included in a "short" response.       
This field set could be used when the client is asking for a subset of the full response that provides   
only basic knowledge of each object.
</dd>

<dt>"full":
</dt>
<dd>The field set contains all of the information the server can provide for a
particular object.
</dd>

</dl>



      <t>The "objectClassName" field is implicitly included in each of the above field sets.  RDAP providers <bcp14>SHOULD</bcp14> include a "links" field indicating the "self" link relationship.  RDAP providers <bcp14>MAY</bcp14> also add any property providing service information.</t>
      <t>Fields included in the "brief" and "full" field set responses <bcp14>MUST</bcp14> take into account the user's access and authorization levels.</t>
      <figure anchor="fieldSet-id-response-example">
        <name>Example of RDAP Response According to the "id" Field Set</name>
<sourcecode type="json">        
{
  "rdapConformance": [
    "rdap_level_0",
    "subsetting"
  ],
  ...
  "domainSearchResults": [
    {
      "objectClassName": "domain",
      "ldhName": "example1.com",
      "links": [
        {
        "value": "https://example.com/rdap/domain/example1.com",
        "rel": "self",
        "href": "https://example.com/rdap/domain/example1.com",
        "type": "application/rdap+json"
        }
      ]
    },
    {
      "objectClassName": "domain",
      "ldhName": "example2.com",
      "links": [
        {
        "value": "https://example.com/rdap/domain/example2.com",
        "rel": "self",
        "href": "https://example.com/rdap/domain/example2.com",
        "type": "application/rdap+json"
        }
      ]
    },
    ...
  ]
}
</sourcecode>
      </figure>
    </section>
    <section anchor="negative-answers">
      <name>Negative Answers</name>
      <t>Each request including an empty or unsupported "fieldSet" value <bcp14>MUST</bcp14> produce an HTTP 400 (Bad Request) response code.  Optionally, the response <bcp14>MAY</bcp14> include additional information regarding the supported field sets in the HTTP entity body (<xref target="field-set-error"/>).</t>
      <figure anchor="field-set-error">
        <name>Example of RDAP Error Response Due to an Invalid Field Set Included in the Request</name>

<sourcecode type="json">        
{
    "errorCode": 400,
    "title": "Field set 'unknownfieldset' is not valid",
    "description": [
        "Supported field sets are: 'afieldset', 'anotherfieldset'."
    ]

}
</sourcecode>
      </figure>
    </section>
    <section anchor="IANA-considerations">
      <name>IANA Considerations</name>
      <t>IANA has registered the following value in the "RDAP Extensions" registry:</t>

<dl spacing="compact">

<dt>Extension identifier:
</dt>
<dd>subsetting
</dd>

<dt>Registry operator:
</dt>
<dd>Any
</dd>

<dt>Published specification:
</dt>
<dd>RFC 8982
</dd>

<dt>Contact:
</dt>
<dd>IETF &lt;iesg@ietf.org&gt;
</dd>

<dt>Intended usage:
</dt>
<dd>This extension describes a best practice for partial response provisioning.
</dd>

</dl>

    </section>

    <section anchor="security-considerations">
      <name>Security Considerations</name>
      <t>A search query typically requires more server resources (such as memory, CPU cycles, and network bandwidth) when compared to a lookup query.  This increases the risk of server resource exhaustion and subsequent denial of service.  This risk can be mitigated by supporting the return of partial responses combined with other strategies (e.g., restricting search functionality, limiting the rate of search requests, and truncating and paging results).</t>
      <t>Support for partial responses gives RDAP operators the ability to implement data access control policies based on the HTTP authentication mechanisms described in <xref target="RFC7481"/>.  RDAP operators can vary the information returned in RDAP responses based on a client's access and authorization levels.  For example:</t>
      <ul>
        <li>
          <t>the list of fields for each set can differ based on the client's access and authorization levels;</t>
          <t/>
        </li>
        <li>the set of available field sets could be restricted based on the client's access and authorization levels.</li>
      </ul>
      <t>Servers can also define different result limits according to the available field sets, so a more flexible truncation strategy can be implemented.  The new query parameter presented in this document provides RDAP operators with a way to implement a server that reduces inefficiency risks.</t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5890.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7480.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7481.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7482.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7483.xml"/>

        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8288.xml"/>
      </references>
      <references>
        <name>Informative References</name>

        <reference anchor="CQL" target="https://github.com/gregwhitaker/catnap/wiki/Catnap-Query-Language-Reference">
          <front>
            <title>Catnap Query Language Reference</title>
            <author initials="G." surname="Whitaker" fullname="Greg Whitaker">
		</author>
            <date year="2017" month="September"/>
          </front>
	  <refcontent>commit d4f402c</refcontent>
        </reference>

        <reference anchor="HATEOAS" target="https://www.e4developer.com/2018/02/16/hateoas-simple-explanation/">
          <front>
            <title>HATEOAS - a simple explanation</title>
            <author initials="B." surname="Jedrzejewski" fullname="Bartosz Jedrzejewski">
		</author>
            <date month="February" year="2018"/>
          </front>
        </reference>

        <reference anchor="REST" target="https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf">
          <front>
            <title>Architectural Styles and the Design of Network-based Software Architectures</title>
            <author initials="R." surname="Fielding" fullname="Roy Thomas Fielding">
            </author>
            <date year="2000"/>
          </front>
	  <refcontent>Ph.D. Dissertation, University of California, Irvine</refcontent>

        </reference>
      </references>
    </references>
    <section anchor="approaches-to-partial-response-implementation">
      <name>Approaches to Partial Response Implementation</name>
      <t>Looking at the implementation experiences of partial responses offered by data providers on the web, two approaches are observed:</t>
      <ul>
        <li>
          <t>the client explicitly describes the data fields to be returned;</t>
          <t/>
        </li>
        <li>the client describes a name identifying a server-defined set of data fields.</li>
      </ul>
      <t>The former is more flexible than the latter because clients can specify all the data fields they need.  However, it has some drawbacks:</t>
      <ul>
        <li>
          <t>Fields have to be declared according to a given syntax.  This is
          a simple task when the data structure of the object is flat, but it
          is much more difficult when the object has a tree structure like
          that of a JSON object.  The presence of arrays and deep nested
          objects complicate both the syntax definition of the query and,
          consequently, the processing required on the server side.</t>
          <t/>
        </li>
        <li>
          <t>Clients need to recognize the returned data structure to avoid
          cases when the requested fields are invalid.</t>
          <t/>
        </li>
        <li>The request of some fields might not match the client's access and
        authorization levels.  Clients might request unauthorized fields, and
        servers have to define a strategy for responding such as always
        returning an error response or returning a response that ignores the
        unauthorized fields.</li>
      </ul>
      <section anchor="specific-issues-in-rdap">
        <name>Specific Issues Raised by RDAP</name>
        <t>In addition to those listed above, RDAP responses raise some specific issues:</t>
        <ul>
          <li>
            <t>Relevant entity object information is included in a jCard, but
            such information cannot be easily selected because it is split
            into the items of a jagged array.</t>
            <t/>
          </li>
          <li>RDAP responses contain some properties providing service
          information (e.g., rdapConformance, links, notices, remarks, etc.),
          which are not normally selected but are just as important.
          They could be returned anyway but, in this case, the server would
          provide unrequested data.</li>
        </ul>
        <t>It is possible to address these issues.  For example, the Catnap
        Query Language <xref target="CQL"/> is a comprehensive expression
        language that can be used to customize the JSON response of a RESTful
        web service.  Application of CQL to RDAP responses would explicitly
        identify the output fields that would be acceptable when a few fields
        are requested but it would become very complicated when processing a
        larger number of fields.  In the following, two CQL expressions for a
        domain search query are shown (<xref target="cql-example"/>).  In the
        first, only objectClassName and ldhName are requested.  In the second,
        the fields of a possible WHOIS-like response are listed.</t>
        <figure anchor="cql-example">
          <name>Examples of CQL Expressions for a Domain Search Query</name>

<sourcecode type="http-message"><![CDATA[
https://example.com/rdap/domains?name=example*.com
        &fields=domainSearchResults(objectClassName,ldhName)

https://example.com/rdap/domains?name=example*.com
        &fields=domainSearchResults(objectClassName,ldhName,
                unicodeName,
                status,
                events(eventAction,eventDate),
                entities(objectClassName,handle,roles),
                nameservers(objectClassName,ldhName))
]]>
</sourcecode>
        </figure>
        <t>The field set approach seems to facilitate RDAP interoperability.
        Servers can define basic field sets that, if known to clients, can
        increase the probability of obtaining a valid response.  The usage of
        field sets makes the query string less complex.  Moreover, the
        definition of predefined sets of fields makes it easier to establish
        result limits.</t>
        <t>Finally, considering that there is no real need for RDAP users to
        have the maximum flexibility in defining all the possible sets of
        logically connected fields (e.g., users interested in domains usually
        need to know the status, the creation date, and the expiry date of
        each domain), the field set approach is preferred.</t>
      </section>
    </section>
    <section numbered="false">
      <name>Acknowledgements</name>
      <t>The authors would like to acknowledge <contact fullname="Scott Hollenbeck"/>, <contact fullname="Tom Harrison"/>, <contact fullname="Karl Heinz Wolf"/>, <contact fullname="Jasdip Singh"/>, <contact fullname="Patrick Mevzek"/>, <contact fullname="Benjamin Kaduk"/>, <contact fullname="Roman Danyliw"/>, <contact fullname="Murray Kucherawy"/>, <contact fullname="Erik Kline"/>, and <contact fullname="Robert Wilton"/> for their contribution to this document.</t>
    </section>

  </back>
</rfc>
