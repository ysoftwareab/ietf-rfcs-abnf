<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc xmlns:xi="http://www.w3.org/2001/XInclude"
     docName="draft-ietf-idr-rfc5575bis-25" number="8955" ipr="trust200902"
     obsoletes="5575, 7674" updates="" submissionType="IETF" category="std"
     consensus="true" xml:lang="en" tocInclude="true" symRefs="true"
     sortRefs="true" version="3"> 

  <!-- xml2rfc v2v3 conversion 2.44.0 -->
  <front>
    <title abbrev="Flow Specification">Dissemination of Flow Specification Rules</title>
    <seriesInfo name="RFC" value="8955"/>
    <author fullname="Christoph Loibl" initials="C." surname="Loibl">
      <organization>next layer Telekom GmbH</organization>
      <address>
        <postal>
          <street>Mariahilfer Guertel 37/7</street>
          <city>Vienna</city>
          <region/>
          <code>1150</code>
          <country>Austria</country>
        </postal>
        <phone>+43 664 1176414</phone>
        <email>cl@tix.at</email>
      </address>
    </author>
    <author fullname="Susan Hares" initials="S." surname="Hares">
      <organization>Huawei</organization>
      <address>
        <postal>
          <street>7453 Hickory Hill</street>
          <city>Saline</city>
          <region>MI</region>
          <code>48176</code>
          <country>United States of America</country>
        </postal>
        <email>shares@ndzh.com</email>
      </address>
    </author>
    <author fullname="Robert Raszuk" initials="R." surname="Raszuk">
      <organization>NTT Network Innovations</organization>
      <address>
        <postal>
          <street>940 Stewart Dr</street>
          <city>Sunnyvale</city>
          <region>CA</region>
          <code>94085</code>
          <country>United States of America</country>
        </postal>
        <email>robert@raszuk.net </email>
      </address>
    </author>
    <author fullname="Danny McPherson" initials="D." surname="McPherson">
      <organization>Verisign</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <code/>
          <country>United States of America</country>
        </postal>
        <email>dmcpherson@verisign.com</email>
      </address>
    </author>
    <author fullname="Martin Bacher" initials="M." surname="Bacher">
      <organization>T-Mobile Austria</organization>
      <address>
        <postal>
          <street>Rennweg 97-99</street>
          <city>Vienna</city>
          <region/>
          <code>1030</code>
          <country>Austria</country>
        </postal>
        <email>mb.ietf@gmail.com</email>
      </address>
    </author>
    <date year="2020" month="December"/>
    <area>Routing</area>
    <workgroup>IDR</workgroup>

    <abstract>
      <t>
  This document defines a Border Gateway Protocol Network Layer
  Reachability Information (BGP NLRI) encoding format that can be used
  to distribute (intra-domain and inter-domain) traffic Flow Specifications
  for IPv4 unicast and IPv4 BGP/MPLS VPN services. This allows the routing
  system to propagate information regarding more specific components of
  the traffic aggregate defined by an IP destination prefix.
  </t>
  <t>
    It also specifies BGP Extended Community encoding formats, which can
    be used to propagate Traffic Filtering Actions along with the Flow
    Specification NLRI.  Those Traffic Filtering Actions encode actions a
    routing system can take if the packet matches the Flow Specification.
  </t>
  <t>
    This document obsoletes both RFC 5575 and RFC 7674.
  </t>
    </abstract>
  </front>
  <middle>
    <section anchor="intro" numbered="true" toc="default">
      <name>Introduction</name>
      <t>This document obsoletes <xref target="RFC5575">"Dissemination of Flow Specification Rules"</xref> (see <xref
      target="rfc5575differences" format="default"/> for the
      differences). This document also obsoletes <xref target="RFC7674"
      format="default">"Clarification of the Flowspec Redirect Extended Community"</xref>, since it
      incorporates the encoding of the BGP Flow Specification Redirect
      Extended Community in <xref target="rt_redirect_action_subtype"
      format="default"/>.</t> 
      <t>
    Modern IP routers have the capability to forward traffic
    and to classify, shape, rate limit,
    filter, or redirect packets based on administratively defined
    policies.
    These traffic policy mechanisms allow the operator to define match
    rules that operate on multiple fields of the packet header.  Actions,
    such as the ones described above, can be associated with each rule.
      </t>
      <t>
    The n-tuple consisting of the matching criteria defines an aggregate
    traffic Flow Specification. The matching criteria can include
    elements such as source and destination address prefixes, IP
    protocol, and transport protocol port numbers.
      </t>
      <t><xref target="dissemination_ipv4_flowspec" format="default"/> of this
      document defines a general procedure to encode Flow Specifications for
      aggregated traffic flows so that they can be distributed as a BGP <xref
      target="RFC4271" format="default"/> NLRI. Additionally, <xref
      target="traffic_filtering_actions" format="default"/> of this 
 document defines the required Traffic Filtering Actions BGP Extended
 Communities and mechanisms to use BGP for intra- and inter-provider
 distribution of traffic filtering rules in order to mitigate DoS and 
 DDoS attacks.
      </t>

      <t>
	By expanding routing information with Flow Specifications, the
	routing system can take advantage of the ACL (Access Control List) or
	firewall capabilities in the router's forwarding path.  Flow
	Specifications can be seen as more specific routing entries to a
	unicast prefix and are expected to depend upon the existing unicast
	data information.
      </t>
      <t>A Flow Specification received from an external autonomous system will
      need to be validated against unicast routing before being accepted
      (<xref target="validation_procedure" format="default"/>). The Flow
      Specification received from an internal BGP peer within the same
      autonomous system <xref target="RFC4271" format="default"/> is assumed
      to have been validated prior to transmission within the internal BGP
      (iBGP) mesh of an autonomous system. If the aggregate traffic flow
      defined by the unicast destination prefix is forwarded to a given BGP
      peer, then the local system can install more specific Flow
      Specifications that may result in different forwarding behavior, as
      requested by this system.</t> 
      <t>From an operational perspective, the utilization of BGP as the
      carrier for this information allows a network service provider to reuse
      both internal route distribution infrastructure (e.g., route reflector
      or confederation design) and existing external relationships (e.g.,
      inter-domain BGP sessions to a customer network).</t> 
      <t>
   While it is certainly possible to address this problem using other
   mechanisms, this solution has been utilized in deployments because of the
   substantial advantage of being an incremental addition to already
   deployed mechanisms.
      </t>
      <t>
  Possible applications of that extension are:
  Automated inter-domain coordination of traffic filtering, such as what 
  is required in order to mitigate DoS and DDoS attacks
  or traffic filtering in the context of a BGP/MPLS VPN service. Other
  applications (e.g., centralized control of traffic in a
  Software-Defined Networking (SDN) or Network Function Virtualization
  (NFV) context) are also possible.
      </t>
      <t>In current deployments, the information distributed by this
   extension is originated both manually as well as automatically, the
   latter by systems that are able to detect malicious traffic flows.
   When automated systems are used, care should be taken
   to ensure the correctness of the automated system. The
   limitations of the receiving systems that need to process
   these automated Flow Specifications need to be taken in consideration
   as well (see also <xref target="security_considerations" format="default"/>).
      </t>
      <t>
   This specification defines required protocol extensions to address
   most common applications of IPv4 unicast and VPNv4 unicast filtering.
   The same mechanism can be reused and new match criteria added to
   address similar filtering needs for other BGP address families, such as
   IPv6 families <xref target="RFC8956" format="default"/>.
      </t>
    </section>
    <section numbered="true" toc="default">
      <name>Definitions of Terms Used in This Memo</name>
      <dl newline="false" spacing="normal" indent="10">
        <dt>AFI:</dt>
        <dd>Address Family Identifier</dd>
        <dt>AS:</dt>
        <dd>Autonomous System</dd>
        <dt>Loc-RIB:</dt>
        <dd>The Loc-RIB contains the routes that have been selected by the
	local BGP speaker's Decision Process <xref target="RFC4271"
	format="default"/>.</dd> 
        <dt>NLRI:</dt>
        <dd>Network Layer Reachability Information</dd>
        <dt>PE:</dt>
        <dd>Provider Edge router</dd>
        <dt>RIB:</dt>
        <dd>Routing Information Base</dd>
        <dt>SAFI:</dt>
        <dd>Subsequent Address Family Identifier</dd>
        <dt>VRF:</dt>
        <dd>Virtual Routing and Forwarding</dd>
      </dl>
        <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
	"<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
	NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
	"<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
	"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document
	are to be interpreted as described in BCP&nbsp;14 <xref
	target="RFC2119"/> <xref target="RFC8174"/>  when, and only when, they
	appear in all capitals, as shown here.</t> 
    </section>
    <section numbered="true" toc="default">
      <name>Flow Specifications</name>
      <t>A Flow Specification is an n-tuple consisting of several matching
      criteria that can be applied to IP traffic.  A given IP packet is said
      to match the defined Flow Specification if it matches all the specified
      criteria. This n-tuple is encoded into a BGP NLRI defined below.</t> 
      <t>A given Flow Specification may be associated with a set of
      attributes, depending on the particular application; such attributes may
      or may not include reachability information (i.e., NEXT_HOP).
      Well-known or AS-specific community attributes can be used to encode a
      set of predetermined actions.</t> 
      <t>A particular application is identified by a specific (Address Family
      Identifier, Subsequent Address Family Identifier (AFI, SAFI)) pair <xref
      target="RFC4760" format="default"/> and corresponds to a distinct set of
      RIBs.  Those RIBs should be treated independently from each other in
      order to assure noninterference between distinct applications.</t> 
      <t>BGP itself treats the NLRI as a key to an entry in its databases.
      Entries that are placed in the Loc-RIB are then associated with a given
      set of semantics, which is application dependent.  This is consistent
      with existing BGP applications.  For instance, IP unicast routing
      (AFI=1, SAFI=1) and IP multicast reverse-path information (AFI=1,
      SAFI=2) are handled by BGP without any particular semantics being
      associated with them until installed in the Loc-RIB.</t> 
      <t>
    Standard BGP policy mechanisms, such as UPDATE filtering by NLRI
    prefix as well as community matching, must apply to
    the Flow specification defined NLRI-type.
    Network operators can also control propagation of such
    routing updates by enabling or disabling the exchange of a particular
    (AFI, SAFI) pair on a given BGP peering session.
      </t>
    </section>
    <section anchor="dissemination_ipv4_flowspec" numbered="true" toc="default">
      <name>Dissemination of IPv4 Flow Specification Information</name>
      <t>This document defines a Flow Specification NLRI type (<xref
      target="fs_nlri" format="default"/>) that may include several components,
      such as destination prefix, source prefix, protocol, ports, and others
      (see <xref target="nlri_value_encoding" format="default"/> below).</t> 
      <t>This NLRI information is encoded using MP_REACH_NLRI and
      MP_UNREACH_NLRI attributes, as defined in  <xref target="RFC4760"
      format="default"/>. When advertising Flow Specifications, the Length of the
      Next-Hop Network Address <bcp14>MUST</bcp14> be set to 0. The Network
      Address of the Next-Hop field <bcp14>MUST</bcp14> be ignored.</t> 
      <t>The NLRI field of the MP_REACH_NLRI and MP_UNREACH_NLRI is encoded as
      one or more 2-tuples of the form &lt;length, NLRI value&gt;. It consists
      of a 1- or 2-octet length field followed by a variable-length NLRI
      value. The length is expressed in octets.</t> 
      <figure anchor="fs_nlri">
        <name>Flow Specification NLRI for IPv4</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
                  +-------------------------------+
                  |    length (0xnn or 0xfnnn)    |
                  +-------------------------------+
                  |    NLRI value   (variable)    |
                  +-------------------------------+
	]]></artwork>
      </figure>
      <t>Implementations wishing to exchange Flow Specification
      <bcp14>MUST</bcp14> use BGP's Capability Advertisement facility to
      exchange the Multiprotocol Extension Capability Code (Code 1), as defined
      in <xref target="RFC4760" format="default"/>. The (AFI, SAFI) pair
      carried in the Multiprotocol Extension Capability <bcp14>MUST</bcp14> be
      (AFI=1, SAFI=133) for IPv4 Flow Specification and (AFI=1, SAFI=134) for
      VPNv4 Flow Specification.</t> 
      <section numbered="true" toc="default">
        <name>Length Encoding</name>
	<t>
	  The length field indicates the length in octets of the variable NLRI value:
	</t>
        <ul spacing="normal">
          <li>If the NLRI length is smaller than 240 (0xf0 hex) octets, the
	  length field can be encoded as a single octet.  </li> 
          <li>Otherwise, it is encoded as an extended-length 2-octet value in
	  which the most significant nibble has the hex value 0xf.</li> 
        </ul>

        <t>In <xref target="fs_nlri" format="default"/> above, values
	less than 240 are encoded using two hex digits (0xnn).  Values above
	239 are encoded using 3 hex digits (0xfnnn).  The highest value that
	can be represented with this encoding is 4095. For example, the length
	value of 239 is encoded as 0xef (single octet), while 240 is encoded as
	0xf0f0 (2 octets).</t> 
      </section>
      <section anchor="nlri_value_encoding" numbered="true" toc="default">
        <name>NLRI Value Encoding</name>
        <t>
    The Flow Specification NLRI value consists of a list of optional
   components and is encoded as follows:
        </t>
        <t>Encoding: &lt;[component]+&gt;</t>
        <t>A specific packet is considered to match the Flow Specification
	when it matches the intersection (AND) of all the components present
	in the Flow Specification.</t> 
        <t>Components <bcp14>MUST</bcp14> follow strict type ordering by
	increasing numerical order. A given component type <bcp14>MAY</bcp14>
	(exactly once) be present in the Flow Specification. If present, it
	<bcp14>MUST</bcp14> precede any component of higher numeric type
	value.</t> 
        <t>All combinations of components within a single Flow Specification
	are allowed. However, some combinations cannot match any packets
	(e.g., "ICMP Type AND Port" will never match any packets) and thus
	<bcp14>SHOULD NOT</bcp14> be propagated by BGP.</t> 
        <t>An NLRI value not encoded as specified here, including an NLRI that
        contains an unknown component type, is considered malformed
	and error handling according to <xref target="errorhandling"
	format="default"/> is performed.</t> 
        <section anchor="operators" numbered="true" toc="default">
          <name>Operators</name>
          <t>Most of the components described below make use of comparison
	  operators. Which of the two operators is used is defined by the
	  components in <xref target="flowspec_components"
	  format="default"/>. The operators are encoded as a single octet.</t> 
          <section anchor="numeric_operator" numbered="true" toc="default">
            <name>Numeric Operator (numeric_op)</name>
            <t>This operator is encoded as shown in <xref
	    target="figure_numeric_operator" format="default"/>.</t> 
            <figure anchor="figure_numeric_operator">
              <name>Numeric Operator (numeric_op)</name>
              <artwork name="" type="" align="left" alt=""><![CDATA[
                    0   1   2   3   4   5   6   7
                  +---+---+---+---+---+---+---+---+
                  | e | a |  len  | 0 |lt |gt |eq |
                  +---+---+---+---+---+---+---+---+
]]></artwork>
            </figure>
            <dl newline="false" spacing="normal" indent="6">
              <dt>e (end-of-list bit):</dt>
              <dd>Set in the last {op, value} pair in the list</dd>
              <dt>a (AND bit):</dt>
              <dd>If unset, the result of the previous {op, value}
	      pair is logically ORed with the current one.  If set, the
	      operation is a logical AND. In the first operator octet of a
	      sequence, it <bcp14>MUST</bcp14> be encoded as unset and
	      <bcp14>MUST</bcp14> be treated as always unset on decoding. The
	      AND operator has higher priority than OR for the purposes of
	      evaluating logical expressions.</dd> 
              <dt>len (length):</dt>
              <dd>The length of the value field for this operator
	      given as (1 &lt;&lt; len). This encodes 1 (len=00), 2 (len=01),
	      4 (len=10), and 8 (len=11) octets.</dd> 
              <dt>0:</dt>
              <dd><bcp14>MUST</bcp14> be set to 0 on NLRI encoding and
	      <bcp14>MUST</bcp14> be ignored during decoding</dd> 
              <dt>lt:</dt>
              <dd>less-than comparison between data and value</dd>
              <dt>gt:</dt>
              <dd>greater-than comparison between data and value</dd>
              <dt>eq:</dt>
              <dd>equality between data and value</dd>
            </dl>
            <t>The bits lt, gt, and eq can be combined to produce common
	    relational operators, such as "less or equal", "greater or equal",
	    and "not equal to", as shown in <xref
	    target="table_comparison_operator" format="default"/>.</t> 
            <table anchor="table_comparison_operator" align="center">
              <name>Comparison Operation Combinations</name>
              <thead>
                <tr>
                  <th align="center">lt</th>
                  <th align="center">gt</th>
                  <th align="center">eq</th>
                  <th align="left">Resulting operation</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="center">0</td>
                  <td align="center">0</td>
                  <td align="center">0</td>
                  <td align="left"> false (independent of the value)</td>
                </tr>
                <tr>
                  <td align="center">0</td>
                  <td align="center">0</td>
                  <td align="center">1</td>
                  <td align="left"> == (equal) </td>
                </tr>
                <tr>
                  <td align="center">0</td>
                  <td align="center">1</td>
                  <td align="center">0</td>
                  <td align="left"> &gt; (greater than) </td>
                </tr>
                <tr>
                  <td align="center">0</td>
                  <td align="center">1</td>
                  <td align="center">1</td>
                  <td align="left"> &gt;= (greater than or equal)</td>
                </tr>
                <tr>
                  <td align="center">1</td>
                  <td align="center">0</td>
                  <td align="center">0</td>
                  <td align="left"> &lt; (less than)</td>
                </tr>
                <tr>
                  <td align="center">1</td>
                  <td align="center">0</td>
                  <td align="center">1</td>
                  <td align="left"> &lt;= (less than or equal)</td>
                </tr>
                <tr>
                  <td align="center">1</td>
                  <td align="center">1</td>
                  <td align="center">0</td>
                  <td align="left"> != (not equal value)</td>
                </tr>
                <tr>
                  <td align="center">1</td>
                  <td align="center">1</td>
                  <td align="center">1</td>
                  <td align="left"> true (independent of the value)</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="bitmask_operator" numbered="true" toc="default">
            <name>Bitmask Operator (bitmask_op)</name>
            <t>This operator is encoded as shown in <xref target="figure_bitmask_operator" format="default"/>.
</t>
            <figure anchor="figure_bitmask_operator">
              <name>Bitmask Operator (bitmask_op)</name>
              <artwork name="" type="" align="left" alt=""><![CDATA[
                    0   1   2   3   4   5   6   7
                  +---+---+---+---+---+---+---+---+
                  | e | a |  len  | 0 | 0 |not| m |
                  +---+---+---+---+---+---+---+---+
]]></artwork>
            </figure>

            <dl newline="false" spacing="normal" indent="6">
              <dt>e, a, len (end-of-list bit, AND bit, and
	      length field):</dt>
              <dd>Most significant nibble; defined in the Numeric Operator format in
	      <xref target="numeric_operator" format="default"/>.</dd>  
              <dt>not (NOT bit):</dt>
              <dd>If set, logical negation of operation.</dd>
              <dt>m (Match bit):</dt>
              <dd>If set, this is a bitwise match operation defined as "(data
	      AND value) == value"; if unset, (data AND value) evaluates to
	      TRUE if any of the bits in the value mask are set in the
	      data.</dd> 
              <dt>0 (all 0 bits):</dt>
              <dd><bcp14>MUST</bcp14> be set to 0 on NLRI encoding and
	      <bcp14>MUST</bcp14> be ignored during decoding</dd> 
            </dl>
          </section>
        </section>
        <section anchor="flowspec_components" numbered="true" toc="default">
          <name>Components</name>
          <t>
     The encoding of each of the components begins with a type field
     (1 octet) followed by a variable length parameter. The following sections
     define component types and parameter encodings for the IPv4 IP layer and
     transport layer headers. IPv6 NLRI component types are described
     in <xref target="RFC8956" format="default"/>.
          </t>
          <section anchor="type_1" toc="include" numbered="true">
            <name>Type 1 - Destination Prefix</name>
            <t>Encoding: &lt;type (1 octet), length (1 octet), prefix
	    (variable)&gt;</t> 
            <t>Defines the destination prefix to match. The length and prefix
	    fields are encoded as in BGP UPDATE messages <xref
	    target="RFC4271" format="default"/>.</t> 
          </section>
          <section anchor="type_2" toc="include" numbered="true">
            <name>Type 2 - Source Prefix</name>
            <t>Encoding: &lt;type (1 octet), length (1 octet), prefix (variable)&gt;</t>
            <t>Defines the source prefix to match. The length and prefix
	    fields are encoded as in BGP UPDATE messages <xref target="RFC4271"
	    format="default"/>.</t> 
          </section>
          <section anchor="type_3" toc="include" numbered="true">
            <name>Type 3 - IP Protocol</name>
            <t>Encoding: &lt;type (1 octet), [numeric_op, value]+&gt;</t>
            <t>Contains a list of {numeric_op, value} pairs that are used to
	    match the IP protocol value octet in IP packet header (see <xref
	    target="RFC0791" sectionFormat="of" section="3.1"/>).</t> 
            <t>This component uses the Numeric Operator (numeric_op) described
	    in <xref target="numeric_operator" format="default"/>. Type 3
	    component values <bcp14>SHOULD</bcp14> be encoded as single octet
	    (numeric_op len=00).</t> 
          </section>
          <section anchor="type_4" toc="include" numbered="true">
            <name>Type 4 - Port</name>
            <t>Encoding: &lt;type (1 octet), [numeric_op, value]+&gt;</t>
            <t>Defines a list of {numeric_op, value} pairs that match source
	    OR destination TCP/UDP ports (see <xref target="RFC0793"
	    sectionFormat="of" section="3.1"/> and the "Format" section of
	    <xref target="RFC0768" format="default"/>). This component matches
	    if 
	    either the destination port OR the source port of an IP packet
	    matches the value.</t> 
            <t>This component uses the Numeric Operator (numeric_op) described
	    in <xref target="numeric_operator" format="default"/>. Type 4
	    component values <bcp14>SHOULD</bcp14> be encoded as 1- or 2-octet
	    quantities (numeric_op len=00 or len=01).</t> 
            <t>In case of the presence of the port (destination-port (<xref
	    target="type_5" format="default"/>), source-port (<xref
	    target="type_6" format="default"/>)) component, only TCP or UDP
	    packets can match the entire Flow Specification. The port
	    component, if present, never matches when the packet's IP protocol
	    value is not 6 (TCP) or 17 (UDP), if the packet is fragmented and
	    this is not the first fragment, or if the system is unable to
	    locate the transport header. Different implementations may or may
	    not be able to decode the transport header in the presence of IP
	    options or Encapsulating Security Payload (ESP) NULL <xref
	    target="RFC4303" format="default"/> encryption.</t> 
          </section>
          <section anchor="type_5" toc="include" numbered="true">
            <name>Type 5 - Destination Port</name>
            <t>Encoding: &lt;type (1 octet), [numeric_op, value]+&gt;</t>
            <t> Defines a list of {numeric_op, value} pairs used to match the
	    destination port of a TCP or UDP packet (see also <xref
	    target="RFC0793" sectionFormat="of" section="3.1"/> and the
	    "Format" section of <xref target="RFC0768" format="default"/>.</t>
            <t>This component uses the Numeric Operator (numeric_op) described
	    in <xref target="numeric_operator" format="default"/>. Type 5
	    component values <bcp14>SHOULD</bcp14> be encoded as 1- or 2-octet
	    quantities (numeric_op len=00 or len=01).</t> 
            <t>The last paragraph of <xref target="type_4" format="default"/>
	    also applies to this component.</t> 
          </section>
          <section anchor="type_6" toc="include" numbered="true">
            <name>Type 6 - Source Port</name>
            <t>Encoding: &lt;type (1 octet), [numeric_op, value]+&gt;</t>
            <t>Defines a list of {numeric_op, value} pairs used to match the
	    source port of a TCP or UDP packet (see also <xref
	    target="RFC0793" sectionFormat="of" section="3.1"/> and the
	    "Format" section of <xref target="RFC0768" format="default"/>.</t> 
            <t>This component uses the Numeric Operator (numeric_op) described
	    in <xref target="numeric_operator" format="default"/>. Type 6
	    component values <bcp14>SHOULD</bcp14> be encoded as 1- or 2-octet
	    quantities (numeric_op len=00 or len=01).</t> 
            <t>The last paragraph of <xref target="type_4" format="default"/>
	    also applies to this component.</t> 
          </section>
          <section anchor="type_7" toc="include" numbered="true">
            <name>Type 7 - ICMP Type</name>
            <t>Encoding: &lt;type (1 octet), [numeric_op, value]+&gt;</t>
            <t>Defines a list of {numeric_op, value} pairs used to match the
	    type field of an ICMP packet (see also the "Message Formats"
	    section of <xref target="RFC0792" format="default"/>).</t>  
            <t>This component uses the Numeric Operator (numeric_op) described
	    in <xref target="numeric_operator" format="default"/>. Type 7
	    component values <bcp14>SHOULD</bcp14> be encoded as single octet
	    (numeric_op len=00).</t> 
            <t>
    In case of the presence of the ICMP type
    component, only ICMP packets can match the entire Flow Specification.
    The ICMP type component, if present, never matches when the packet's IP
    protocol value is not 1 (ICMP), if the packet is fragmented
    and this is not the first fragment, or if the system is unable to
    locate the transport header. Different implementations may or may not be
    able to decode the transport header in the presence of IP
    options or Encapsulating Security Payload (ESP) NULL
    <xref target="RFC4303" format="default"/> encryption.
</t>
          </section>
          <section anchor="type_8" toc="include" numbered="true">
            <name>Type 8 - ICMP Code</name>
            <t>Encoding: &lt;type (1 octet), [numeric_op, value]+&gt;</t>
            <t>Defines a list of {numeric_op, value} pairs used to match the
	    code field of an ICMP packet (see also the "Message Formats"
	    section of <xref target="RFC0792" format="default"/>).</t>  
            <t>This component uses the Numeric Operator (numeric_op) described
	    in <xref target="numeric_operator" format="default"/>. Type 8
	    component values <bcp14>SHOULD</bcp14> be encoded as single octet
	    (numeric_op len=00).</t> 
            <t>
    In case of the presence of the ICMP code
    component, only ICMP packets can match the entire Flow Specification.
    The ICMP code component, if present, never matches when the packet's IP
    protocol value is not 1 (ICMP), if the packet is fragmented
    and this is not the first fragment, or if the system is unable to
    locate the transport header. Different implementations may or may not be
    able to decode the transport header in the presence of IP
    options or Encapsulating Security Payload (ESP) NULL
    <xref target="RFC4303" format="default"/> encryption.
</t>
          </section>
          <section anchor="type_9" toc="include" numbered="true">
            <name>Type 9 - TCP Flags</name>
            <t>Encoding: &lt;type (1 octet), [bitmask_op, bitmask]+&gt;</t>
            <t>Defines a list of {bitmask_op, bitmask} pairs used to match TCP
	    control bits (see also <xref target="RFC0793" sectionFormat="of"
	    section="3.1"/>).</t> 
            <t>This component uses the Bitmask Operator (bitmask_op) described
	    in <xref target="bitmask_operator" format="default"/>. Type 9
	    component bitmasks <bcp14>MUST</bcp14> be encoded as 1- or 2-octet
	    bitmask (bitmask_op len=00 or len=01).</t> 
            <t>When a single octet (bitmask_op len=00) is specified, it
	    matches octet 14 of the TCP header (see also <xref
	    target="RFC0793" sectionFormat="of" section="3.1"/>), which
	    contains the TCP control bits. When a 2-octet (bitmask_op len=01)
	    encoding is used, it matches octets 13 and 14 of the TCP header
	    with the data offset (leftmost 4 bits) always treated as 0.</t> 
            <t>
    In case of the presence of the TCP flags
    component, only TCP packets can match the entire Flow Specification.
    The TCP flags component, if present, never matches when the packet's IP
    protocol value is not 6 (TCP), if the packet is fragmented
    and this is not the first fragment, or if the system is unable to
    locate the transport header. Different implementations may or may not be
    able to decode the transport header in the presence of IP
    options or Encapsulating Security Payload (ESP) NULL
    <xref target="RFC4303" format="default"/> encryption.
</t>
          </section>
          <section anchor="type_10" toc="include" numbered="true">
            <name>Type 10 - Packet Length</name>
            <t>Encoding: &lt;type (1 octet), [numeric_op, value]+&gt;</t>
            <t>Defines a list of {numeric_op, value} pairs used to match on
	    the total IP packet length (excluding Layer 2 but including IP
	    header).</t> 
            <t>This component uses the Numeric Operator (numeric_op) described
	    in <xref target="numeric_operator" format="default"/>. Type 10
	    component values <bcp14>SHOULD</bcp14> be encoded as 1- or 2-octet
	    quantities (numeric_op len=00 or len=01).</t> 
          </section>
          <section anchor="type_11" toc="include" numbered="true">
            <name>Type 11 - DSCP (Diffserv Code Point)</name>
            <t>Encoding: &lt;type (1 octet), [numeric_op, value]+&gt;</t>
            <t> Defines a list of {numeric_op, value} pairs used to match the
	    6-bit DSCP field (see also <xref target="RFC2474"
	    format="default"/>).</t> 
            <t>This component uses the Numeric Operator (numeric_op) described
	    in <xref target="numeric_operator" format="default"/>. Type 11
	    component values <bcp14>MUST</bcp14> be encoded as single octet
	    (numeric_op len=00).</t> 
            <t>The six least significant bits contain the DSCP value. All
	    other bits <bcp14>SHOULD</bcp14> be treated as 0.</t> 
          </section>
          <section anchor="type_12" toc="include" numbered="true">
            <name>Type 12 - Fragment</name>
            <t>Encoding: &lt;type (1 octet), [bitmask_op, bitmask]+&gt;</t>
            <t> Defines a list of {bitmask_op, bitmask} pairs used to match
	    specific IP fragments.</t> 
            <t>This component uses the Bitmask Operator (bitmask_op) described
	    in <xref target="bitmask_operator" format="default"/>. The Type 12
	    component bitmask <bcp14>MUST</bcp14> be encoded as single octet
	    bitmask (bitmask_op len=00).</t> 
            <figure anchor="figure_fragment_bitmask_operand">
              <name>Fragment Bitmask Operand</name>
              <artwork name="" type="" align="left" alt=""><![CDATA[
                   0   1   2   3   4   5   6   7
                 +---+---+---+---+---+---+---+---+
                 | 0 | 0 | 0 | 0 |LF |FF |IsF|DF |
                 +---+---+---+---+---+---+---+---+
]]></artwork>
            </figure>
            <t>Bitmask values:</t>
            <dl newline="false" spacing="normal" indent="6">
              <dt>DF (Don't Fragment):</dt>
              <dd>match if IP Header Flags Bit-1 (DF) <xref target="RFC0791"/> is 1</dd> 
              <dt>IsF (Is a fragment other than the first):</dt>
              <dd>match if the <xref
	      target="RFC0791"/> IP Header Fragment Offset is not 0</dd> 
              <dt>FF (First Fragment):</dt>
              <dd>match if the <xref
	      target="RFC0791"/> IP Header Fragment
	      Offset  is 0 AND Flags
	      Bit-2 (MF) is 1</dd> 
              <dt>LF (Last Fragment):</dt>
              <dd>match if the <xref
	      target="RFC0791"/> IP Header Fragment Offset 
	       is not 0 AND Flags
	      Bit-2 (MF) is 0</dd> 
              <dt>0:</dt>
              <dd><bcp14>MUST</bcp14> be set to 0 on NLRI encoding and
	      <bcp14>MUST</bcp14> be ignored during decoding</dd> 
            </dl>
          </section>
        </section>
      </section>
      <section numbered="true" toc="default">
        <name>Examples of Encodings</name>
        <section toc="exclude" numbered="true">
          <name>Example 1</name>
          <t>An example of a Flow Specification NLRI encoding for: "all
	  packets to 192.0.2.0/24 and TCP port 25".</t> 
<table anchor="ex-1" align="center">
  <thead>
    <tr>
      <th>length</th>
      <th>destination</th>
      <th>protocol</th>
      <th>port</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0x0b</td>
      <td>01 18 c0 00 02</td>
      <td>03 81 06</td>
      <td>04 81 19</td>
    </tr>
  </tbody>
</table>
          <t>Decoded:</t>
<table anchor="ex-1-decoded" align="center">
  <thead>
    <tr>
      <th>Value</th>
      <th rowspan="1" colspan="2"></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0x0b</td>
      <td>length</td>
      <td> 11 octets (if len&lt;240, 1 octet)</td>
    </tr>
    <tr>
      <td>0x01</td>
      <td>type</td>
      <td>Type 1 - Destination Prefix</td>
    </tr>
    <tr>
      <td>0x18</td>
      <td>length</td>
      <td>24 bit</td>
    </tr>
    <tr>
      <td>0xc0</td>
      <td>prefix</td>
      <td>192</td>
    </tr>
    <tr>
      <td>0x00</td>
      <td>prefix</td>
      <td>0</td>
    </tr>
    <tr>
      <td>0x02</td>
      <td>prefix</td>
      <td>2</td>
    </tr>
    <tr>
      <td>0x03</td>
      <td>type</td>
      <td>Type 3 - IP Protocol</td>
    </tr>
    <tr>
      <td>0x81</td>
      <td>numeric_op</td>
      <td>end-of-list, value size=1, ==</td>
    </tr>
    <tr>
      <td>0x06</td>
      <td>value</td>
      <td>6 (TCP)</td>
    </tr>
    <tr>
      <td>0x04</td>
      <td>type</td>
      <td>Type 4 - Port</td>
    </tr>
    <tr>
      <td>0x81</td>
      <td>numeric_op</td>
      <td>end-of-list, value size=1, ==</td>
    </tr>
    <tr>
      <td>0x19</td>
      <td>value</td>
      <td>25</td>
    </tr>
  </tbody>
</table>
          <t>This constitutes an NLRI with an NLRI length of 11 octets.</t>
        </section>
        <section toc="exclude" numbered="true">
          <name>Example 2</name>
          <t>An example of a Flow Specification NLRI encoding for: "all
	  packets to 192.0.2.0/24 from 203.0.113.0/24 and port {range [137,
	  139] or 8080}".</t> 
<table anchor="ex-2" align="center">
  <thead>
    <tr>
      <th>length</th>
      <th>destination</th>
      <th>source</th>
      <th>port</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0x12</td>
      <td>01 18 c0 00 02</td>
      <td>02 18 cb 00 71</td>
      <td>04 03 89 45 8b 91 1f 90</td>
    </tr>
  </tbody>
</table>
          <t>Decoded:</t>
<table anchor="ex-2-decoded" align="center">
  <thead>
    <tr>
      <th>Value</th>
      <th rowspan="1" colspan="2"></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0x12</td>
      <td>length</td>
      <td>18 octets (if len&lt;240, 1 octet)</td>
    </tr>
    <tr>
      <td>0x01</td>
      <td>type</td>
      <td>Type 1 - Destination Prefix</td>
    </tr>
    <tr>
      <td>0x18</td>
      <td>length</td>
      <td>24 bit</td>
    </tr>
    <tr>
      <td>0xc0</td>
      <td>prefix</td>
      <td>192</td>
    </tr>
    <tr>
      <td>0x00</td>
      <td>prefix</td>
      <td>0</td>
    </tr>
    <tr>
      <td>0x02</td>
      <td>prefix</td>
      <td>2</td>
    </tr>
    <tr>
      <td>0x02</td>
      <td>type</td>
      <td>Type 2 - Source Prefix</td>
    </tr>
    <tr>
      <td>0x18</td>
      <td>length</td>
      <td> 24 bit</td>
    </tr>
    <tr>
      <td>0xcb</td>
      <td>prefix</td>
      <td>203</td>
    </tr>
    <tr>
      <td>0x00</td>
      <td>prefix</td>
      <td>0</td>
    </tr>
    <tr>
      <td>0x71</td>
      <td>prefix</td>
      <td>113</td>
    </tr>
    <tr>
      <td>0x04</td>
      <td>type</td>
      <td>Type 4 - Port</td>
    </tr>
    <tr>
      <td>0x03</td>
      <td>numeric_op</td>
      <td>value size=1, &gt;=</td>
    </tr>
    <tr>
      <td>0x89</td>
      <td>value</td>
      <td>137</td>
    </tr>
    <tr>
      <td>0x45</td>
      <td>numeric_op</td>
      <td>"AND", value size=1, &lt;=</td>
    </tr>
    <tr>
      <td>0x8b</td>
      <td>value</td>
      <td>139</td>
    </tr>
    <tr>
      <td>0x91</td>
      <td>numeric_op</td>
      <td>end-of-list, value size=2, ==</td>
    </tr>
    <tr>
      <td>0x1f90</td>
      <td>value</td>
      <td>8080</td>
    </tr>
  </tbody>
</table>
          <t>This constitutes an NLRI with an NLRI length of 18 octets.</t> 
        </section>
        <section toc="exclude" numbered="true">
          <name>Example 3</name>
          <t>An example of a Flow Specification NLRI encoding for: "all
	  packets to 192.0.2.1/32 and fragment { DF or FF } (matching packet
	  with DF bit set or First Fragments)</t> 
<table anchor="ex-3" align="center">
  <thead>
    <tr>
      <th>length</th>
      <th>destination</th>
      <th>fragment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0x09</td>
      <td>01 20 c0 00 02 01</td>
      <td>0c 80 05</td>
    </tr>
  </tbody>
</table>
          <t>Decoded:</t>
<table>
  <thead>
    <tr>
      <th>Value</th>
      <th rowspan="1" colspan="2"></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0x09</td>
      <td>length</td>
      <td>9 octets (if len&lt;240, 1 octet)</td>
    </tr>
    <tr>
      <td>0x01</td>
      <td>type</td>
      <td>Type 1 - Destination Prefix</td>
    </tr>
    <tr>
      <td>0x20</td>
      <td>length</td>
      <td> 32 bit</td>
    </tr>
    <tr>
      <td>0xc0</td>
      <td>prefix</td>
      <td>192</td>
    </tr>
    <tr>
      <td>0x00</td>
      <td>prefix</td>
      <td>0</td>
    </tr>
    <tr>
      <td>0x02</td>
      <td>prefix</td>
      <td>2</td>
    </tr>
    <tr>
      <td>0x01</td>
      <td>prefix</td>
      <td>1</td>
    </tr>
    <tr>
      <td>0x0c</td>
      <td>type</td>
      <td>Type 12 - Fragment</td>
    </tr>
    <tr>
      <td>0x80</td>
      <td>bitmask_op</td>
      <td>end-of-list, value size=1</td>
    </tr>
    <tr>
      <td>0x05</td>
      <td>bitmask</td>
      <td>DF=1, FF=1</td>
    </tr>
  </tbody>
</table>
          <t>This constitutes an NLRI with an NLRI length of 9 octets.</t>
        </section>
      </section>
    </section>
    <section anchor="traffic_filtering" numbered="true" toc="default">
      <name>Traffic Filtering</name>
      <t>Traffic filtering policies have been traditionally considered to be
      relatively static.  Limitations of these static mechanisms caused this
      new dynamic mechanism to be designed for the three new applications of
      traffic filtering:</t> 
      <ul spacing="normal">
        <li>Prevention of traffic-based, denial-of-service (DoS) attacks</li>
        <li>Traffic filtering in the context of BGP/MPLS VPN service</li>
        <li>Centralized traffic control for SDN/NFV networks</li>
      </ul>
      <t>These applications require coordination among service providers
      and/or coordination among the AS within a service provider.</t> 
      <t>The Flow Specification NLRI defined in <xref
      target="dissemination_ipv4_flowspec" format="default"/> conveys
      information about traffic filtering rules for traffic that should be
      discarded or handled in a manner specified by a set of predefined
      actions (which are defined in BGP Extended Communities). This mechanism
      is primarily designed to allow an upstream autonomous system to perform
      inbound filtering in their ingress routers of traffic that a given
      downstream AS wishes to drop.</t> 
      <t>In order to achieve this goal, this document specifies two
      application-specific NLRI identifiers that provide traffic filters and
      a set of actions encoding in BGP Extended Communities.  The two
      application-specific NLRI identifiers are:</t> 
      <ul spacing="normal">
        <li>IPv4 Flow Specification identifier (AFI=1, SAFI=133) along with
	specific semantic rules for IPv4 routes and</li> 
        <li>VPNv4 Flow Specification identifier (AFI=1, SAFI=134) value, which
	can be used to propagate traffic filtering information in a BGP/MPLS
	VPN environment.</li> 
      </ul>
      <t>
       Encoding of the NLRI is described in <xref target="dissemination_ipv4_flowspec" format="default"/> for IPv4 Flow Specification and   in
       <xref target="traffic_filtering_vpn" format="default"/> for VPNv4 Flow Specification. The filtering actions are described
       in <xref target="traffic_filtering_actions" format="default"/>.
      </t>
      <section anchor="ordering_of_flow_spec" numbered="true" toc="default">
        <name>Ordering of Flow Specifications</name>
        <t>More than one Flow Specification may match a particular traffic
	flow.  Thus, it is necessary to define the order in which Flow
	Specifications get matched and actions being applied to a particular
	traffic flow. This ordering function is such that it does not depend
	on the arrival order of the Flow Specification via BGP and thus is
	consistent in the network.</t> 
        <t>The relative order of two Flow Specifications is determined by
	comparing their respective components. The algorithm starts by
	comparing the left-most components (lowest component type value) of
	the Flow Specifications.  If the types differ, the Flow Specification
	with lowest numeric type value has higher precedence (and thus will
	match before) than the Flow Specification that doesn't contain that
	component type. If the component types are the same, then a
	type-specific comparison is performed (see below). If the types are
	equal, the algorithm continues with the next component.</t> 
        <t>For IP prefix values (IP destination or source prefix), if one of
	the two prefixes to compare is a more specific prefix of the other,
	the more specific prefix has higher precedence. Otherwise, the one with
	the lowest IP value has higher precedence.</t> 
        <t>For all other component types, unless otherwise specified, the
	comparison is performed by comparing the component data as a binary
	string using the memcmp() function as defined by <xref
	target="ISO_IEC_9899" format="default"/>. For strings with equal
	lengths, the lowest string (memcmp) has higher precedence. For strings
	of different lengths, the common prefix is compared. If the common
	prefix is not equal, the string with the lowest prefix has higher
	precedence. If the common prefix is equal, the longest string is
	considered to have higher precedence than the shorter one.</t> 
        <t>The code in <xref target="flow_rule_cmp_src" format="default"/>
	shows a Python3 implementation of the comparison algorithm. The full
	code was tested with Python 3.6.3 and can be obtained at <eref brackets="angle"
	target="https://github.com/stoffi92/rfc5575bis/tree/master/flowspec-cmp"/>.</t> 
      </section>
    </section>
    <section anchor="validation_procedure" numbered="true" toc="default">
      <name>Validation Procedure</name>
      <t>Flow Specifications received from a BGP peer that are accepted in the
      respective Adj-RIB-In are used as input to the route selection process.
      Although the forwarding attributes of two routes for the same Flow
      Specification prefix may be the same, BGP is still required to perform
      its path selection algorithm in order to select the correct set of
      attributes to advertise.</t> 
      <t>The first step of the BGP Route Selection procedure (<xref
      target="RFC4271" sectionFormat="of" section="9.1.2"/>) is to exclude from
      the selection procedure routes that are considered unfeasible. 
      In the
      context of IP routing information, this step is used to validate that
      the NEXT_HOP attribute of a given route is resolvable.</t> 
      <t>
   The concept can be extended, in the case of the Flow Specification NLRI,
   to allow other validation procedures.
</t>
      <t>
    The validation process described below validates Flow Specifications against
    unicast routes received over the same AFI but the associated unicast routing
    information SAFI:
</t>
      <ul spacing="normal">
        <li>Flow Specification received over SAFI=133 will be validated
	against routes received over SAFI=1.</li> 
        <li>Flow Specification received over SAFI=134 will be validated
	against routes received over SAFI=128.</li> 
      </ul>
      <t>In the absence of explicit configuration, a Flow Specification NLRI
      <bcp14>MUST</bcp14> be validated such that it is considered feasible if
      and only if all of the conditions below are true:</t> 

      <ol spacing="normal" type="%c)">
        <li>A destination prefix component is embedded in the Flow Specification.</li>
        <li>The originator of the Flow Specification matches the originator of
	the best-match unicast route for the destination prefix embedded in
	the Flow Specification (this is the unicast route with the longest
	possible prefix length covering the destination prefix embedded in the
	Flow Specification).</li> 
        <li>There are no "more-specific" unicast routes, when compared with
	the flow destination prefix, that have been received from a different
	neighboring AS than the best-match unicast route, which has been
	determined in rule b.</li> 
      </ol>

      <t>However, rule a <bcp14>MAY</bcp14> be relaxed by explicit
      configuration, permitting Flow Specifications that include no
      destination prefix component. If such is the case, rules b and c are
      moot and <bcp14>MUST</bcp14> be disregarded.</t> 
      <t>By "originator" of a BGP route, we mean either the address of the
      originator in the ORIGINATOR_ID Attribute <xref target="RFC4456"
      format="default"/> or the source IP address of the BGP peer, if this
      path attribute is not present.</t> 
      <t>BGP implementations <bcp14>MUST</bcp14> also enforce that the AS_PATH
      attribute of a route received via the External Border Gateway Protocol
      (eBGP) contains the neighboring AS in the left-most position of the
      AS_PATH attribute.  While this rule is optional in the BGP
      specification, it becomes necessary to enforce it here for security
      reasons.</t> 
      <t>The best-match unicast route may change over the time independently
      of the Flow Specification NLRI. Therefore, a revalidation of the Flow
      Specification NLRI <bcp14>MUST</bcp14> be performed whenever unicast
      routes change. Revalidation is defined as retesting rules a to c as
      described above.</t> 
      <t>Explanation:</t>
      <t>The underlying concept is that the neighboring AS that advertises the
      best unicast route for a destination is allowed to advertise Flow
      Specification information that conveys a destination prefix that is more
      or equally specific. Thus, as long as there are no "more-specific"
      unicast routes received from a different neighboring AS, which would be
      affected by that Flow Specification, the Flow Specification is validated
      successfully.</t> 
      <t>The neighboring AS is the immediate destination of the traffic
      described by the Flow Specification.  If it requests these flows to be
      dropped, that request can be honored without concern that it represents
      a denial of service in itself.  The reasoning is that this is as if the
      traffic is being dropped by the downstream autonomous system, and there
      is no added value in carrying the traffic to it.</t> 
    </section>
    <section anchor="traffic_filtering_actions" numbered="true" toc="default">
      <name>Traffic Filtering Actions</name>
      <t>This document defines a minimum set of Traffic Filtering Actions that
      it standardizes as BGP Extended Communities <xref target="RFC4360"
      format="default"/>. This is not meant to be an inclusive list of all the
      possible actions but only a subset that can be interpreted consistently
      across the network. Additional actions can be defined as either
      requiring standards or as vendor specific.</t> 
      <t>The default action for a matching Flow Specification is to accept the
      packet (treat the packet according to the normal forwarding behavior of
      the system).</t> 
      <t>This document defines the following Extended Communities values shown
      in <xref target="traffic_extended_communities" format="default"/> in the
      form 0xttss, where tt indicates the type and ss indicates the sub-type
      of the Extended Community. Encodings for these Extended Communities are
      described below.</t> 
      <table anchor="traffic_extended_communities" align="center">
        <name>Traffic Filtering Action Extended Communities</name>
        <thead>
          <tr>
            <th align="left">community 0xttss</th>
            <th align="left">action</th>
            <th align="left">encoding</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left">0x8006</td>
            <td align="left">traffic-rate-bytes (<xref
	    target="traffic_rate_in_bytes" format="default"/>)</td> 
            <td align="left">2-octet AS, 4-octet float</td>
          </tr>
          <tr>
            <td align="left">0x800c</td>
            <td align="left">traffic-rate-packets (<xref
	    target="traffic_rate_in_packets" format="default"/>)</td> 
            <td align="left">2-octet AS, 4-octet float</td>
          </tr>
          <tr>
            <td align="left">0x8007</td>
            <td align="left">traffic-action (<xref
	    target="traffic_action_subtype" format="default"/>)</td> 
            <td align="left">bitmask</td>
          </tr>
          <tr>
            <td align="left">0x8008</td>
            <td align="left">rt-redirect AS-2octet (<xref
	    target="rt_redirect_action_subtype" format="default"/>)</td> 
            <td align="left">2-octet AS, 4-octet value</td>
          </tr>
          <tr>
            <td align="left">0x8108</td>
            <td align="left">rt-redirect IPv4 (<xref
	    target="rt_redirect_action_subtype" format="default"/>)</td> 
            <td align="left">4-octet IPv4 address, 2-octet value</td>
          </tr>
          <tr>
            <td align="left">0x8208</td>
            <td align="left">rt-redirect AS-4octet (<xref
	    target="rt_redirect_action_subtype" format="default"/>)</td> 
            <td align="left">4-octet AS, 2-octet value</td>
          </tr>
          <tr>
            <td align="left">0x8009</td>
            <td align="left">traffic-marking (<xref
	    target="traffic_marking_subtype" format="default"/>)</td> 
            <td align="left">DSCP value</td>
          </tr>
        </tbody>
      </table>
      <t>Multiple Traffic Filtering Actions defined in this document may be
      present for a single Flow Specification and <bcp14>SHOULD</bcp14> be
      applied to the traffic flow (for example, traffic-rate-bytes and
      rt-redirect can be applied to packets at the same time). If not all of
      the Traffic Filtering Actions can be applied to a traffic flow, they
      should be treated as interfering Traffic Filtering Actions (see
      below).</t> 
      <t>Some Traffic Filtering Actions may interfere with each other or even
      contradict. <xref target="rules_action_interference" format="default"/>
      of this document provides general considerations on such Traffic
      Filtering Action interference. Any additional definition of Traffic
      Filtering Actions <bcp14>SHOULD</bcp14> specify the action to take if
      those Traffic Filtering Actions interfere (also with existing Traffic
      Filtering Actions).</t> 
      <t>All Traffic Filtering Actions are specified as transitive BGP
      Extended Communities.</t> 
      <section anchor="traffic_rate_in_bytes" numbered="true" toc="default">
        <name>Traffic Rate in Bytes (traffic-rate-bytes) Sub-Type 0x06</name>
        <t>The traffic-rate-bytes Extended Community uses the following
	Extended Community encoding:</t> 
        <t>
 The first two octets carry the 2-octet id, which can be
 assigned from a 2-octet AS number.  When a 4-octet AS number is
 locally present, the 2 least significant octets of such an AS
 number can be used.  This value is purely informational and
 <bcp14>SHOULD NOT</bcp14> be interpreted by the implementation.
</t>
        <t>The remaining 4 octets carry the maximum rate information in IEEE
	floating point <xref target="IEEE.754.1985" format="default"/> format,
	units being bytes per second.  A traffic-rate of 0 should result on
	all traffic for the particular flow to be discarded. On encoding, the
	traffic-rate <bcp14>MUST NOT</bcp14> be negative. On decoding, negative
	values <bcp14>MUST</bcp14> be treated as zero (discard all
	traffic).</t> 
        <t>Interferes with: May interfere with the traffic-rate-packets (see
	<xref target="traffic_rate_in_packets" format="default"/>). A policy
	may allow both filtering by traffic-rate-packets and
	traffic-rate-bytes. If the policy does not allow this, these two
	actions will conflict.</t> 
      </section>
      <section anchor="traffic_rate_in_packets" numbered="true" toc="default">
        <name>Traffic Rate in Packets (traffic-rate-packets) Sub-Type 0x0c</name>
        <t>The traffic-rate-packets Extended Community uses the same encoding
	as the traffic-rate-bytes Extended Community. The floating point value
	carries the maximum packet rate in packets per second. A
	traffic-rate-packets of 0 should result in all traffic for the
	particular flow to be discarded. On encoding, the traffic-rate-packets
	<bcp14>MUST NOT</bcp14> be negative. On decoding, negative values
	<bcp14>MUST</bcp14> be treated as zero (discard all traffic).</t> 
        <t>Interferes with: May interfere with the traffic-rate-bytes (see
	<xref target="traffic_rate_in_bytes" format="default"/>). A policy may
	allow both filtering by traffic-rate-packets and
	traffic-rate-bytes. If the policy does not allow this, these two
	actions will conflict.</t> 
      </section>
      <section anchor="traffic_action_subtype" numbered="true" toc="default">
        <name>Traffic-Action (traffic-action) Sub-Type 0x07</name>
        <t>The traffic-action Extended Community consists of 6
      octets of which only the 2 least significant bits of the 6th octet
      (from left to right) are defined by this document, as shown in
     <xref target="figure_traffic_action_encoding" format="default"/>.
</t>
        <figure anchor="figure_traffic_action_encoding">
          <name>Traffic-Action Extended Community Encoding</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | Traffic Action Field                                          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | Tr. Action Field (cont.)  |S|T|
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>
        </figure>
        <t>S and T are defined as:</t>
        <dl newline="false" spacing="normal" indent="6">
          <dt>T</dt>
	  <dd>Terminal Action (bit 47): When this bit is set, the traffic
	  filtering engine will evaluate any subsequent Flow Specifications
	  (as defined by the ordering procedure <xref
	  target="ordering_of_flow_spec" format="default"/>). If not set, the
	  evaluation of the traffic filters stops when this Flow Specification
	  is evaluated.</dd>  
          <dt>S</dt>
	  <dd>Sample (bit 46): Enables traffic sampling and logging for this
	  Flow Specification (only effective when set).</dd> 
          <dt>Traffic Action Field:</dt>
	  <dd>Other Traffic Action Field (see <xref
	  target="IANA" format="default"/>) bits unused in this
	  specification. These bits <bcp14>MUST</bcp14> be set to 0 on
	  encoding and <bcp14>MUST</bcp14> be ignored during decoding.</dd> 
        </dl>
        <t>The use of the Terminal Action (bit 47) may result in more than one
	Flow Specification matching a particular traffic flow. All the Traffic
	Filtering Actions from these Flow Specifications shall be collected
	and applied. In case of interfering Traffic Filtering Actions, it is an
	implementation decision which Traffic Filtering Actions are
	selected. See also <xref target="rules_action_interference"
	format="default"/>.</t> 
        <t>Interferes with: No other BGP Flow Specification Traffic Filtering
	Action in this document.</t> 
      </section>
      <section anchor="rt_redirect_action_subtype" numbered="true" toc="default">
        <name>RT Redirect (rt-redirect) Sub-Type 0x08</name>
        <t>The redirect Extended Community allows the traffic to be redirected
	to a VRF routing instance that lists the specified route-target in its
	import policy. If several local instances match this criteria, the
	choice between them is a local matter (for example, the instance with
	the lowest Route Distinguisher value can be elected).</t> 
        <t>This Extended Community allows 3 different encodings formats for
	the route-target (type 0x80, 0x81, 0x82). It uses the same encoding as
	the Route Target Extended Community in Sections <xref target="RFC4360"
	section="3.1" sectionFormat="bare"/> (type 0x80: 2-octet AS, 4-octet
	value), <xref target="RFC4360" section="3.2" sectionFormat="bare"/>
	(type 0x81: 4-octet IPv4 address, 2-octet value), and <xref
	target="RFC4360" section="4" sectionFormat="bare"/> of <xref
	target="RFC4360" format="default"/> and <xref target="RFC5668"
	sectionFormat="of" section="2"/> (type 0x82: 4-octet AS,
	2-octet value) with the high-order octet of the Type field 0x80, 0x81,
	0x82 respectively and the low-order octet of the Type field (Sub-Type)
	always 0x08.</t> 
        <t>Interferes with: No other BGP Flow Specification Traffic Filtering
	Action in this document.</t> 
      </section>
      <section anchor="traffic_marking_subtype" numbered="true" toc="default">
        <name>Traffic Marking (traffic-marking) Sub-Type 0x09</name>
        <t> The traffic marking Extended Community instructs a system to
	modify the DSCP bits in the IP header (<xref target="RFC2474"
	sectionFormat="of" section="3"/>) of a transiting IP packet to the
	corresponding value encoded in the 6 least significant bits of the
	Extended Community value, as shown in <xref
	target="figure_traffic_marking_encoding" format="default"/>.</t> 

        <t>The Extended Community is encoded as follows:</t>
        <figure anchor="figure_traffic_marking_encoding">
          <name>Traffic Marking Extended Community Encoding</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |   reserved    |   reserved    |   reserved    |   reserved    |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |   reserved    | r.|    DSCP   |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>
        </figure>
        <dl newline="false" spacing="normal" indent="6">
          <dt>DSCP:</dt>
	  <dd>new DSCP value for the transiting IP packet</dd>
          <dt>reserved (r):</dt>
	  <dd><bcp14>MUST</bcp14> be set to 0 on encoding and
	  <bcp14>MUST</bcp14> be ignored during decoding</dd> 
        </dl>
        <t>Interferes with: No other BGP Flow Specification Traffic Filtering
	Action in this document.</t> 
      </section>
      <section numbered="true" toc="default">
        <name>Interaction with Other Filtering Mechanisms in Routers</name>
        <t>
   Implementations should provide mechanisms that map an arbitrary BGP
   community value (normal or extended) to Traffic Filtering Actions that
   require different mappings on different systems in the network.  For
   instance, providing packets with a worse-than-best-effort per-hop
   behavior is a functionality that is likely to be implemented
   differently in different systems and for which no standard behavior
   is currently known.  Rather than attempting to define it here, this
   can be accomplished by mapping a user-defined community value to
   platform-/network-specific behavior via user configuration.
        </t>
      </section>
      <section anchor="rules_action_interference" numbered="true" toc="default">
        <name>Considerations on Traffic Filtering Action Interference</name>
        <t>Since Traffic Filtering Actions are represented as BGP extended
	community values, Traffic Filtering Actions may interfere with each
	other (e.g., there may be more than one conflicting traffic-rate-bytes
	Traffic Filtering Action associated with a single Flow
	Specification). Traffic Filtering Action interference has no impact on
	BGP propagation of Flow Specifications (all communities are propagated
	according to policies).</t> 
        <t>If a Flow Specification associated with interfering Traffic
	Filtering Actions is selected for packet forwarding, it is an
	implementation decision which of the interfering Traffic Filtering
	Actions are selected. Implementors of this specification
	<bcp14>SHOULD</bcp14> document the behavior of their implementation in
	such cases.</t> 
        <t>Operators are encouraged to make use of the BGP policy framework
	supported by their implementation in order to achieve a predictable
	behavior. See also <xref target="security_considerations"
	format="default"/>.</t> 
      </section>
    </section>
    <section anchor="traffic_filtering_vpn" numbered="true" toc="default">
      <name>Dissemination of Traffic Filtering in BGP/MPLS VPN Networks</name>
      <t>
   Provider-based Layer 3 VPN networks, such as the ones using a BGP/ MPLS IP
   VPN <xref target="RFC4364" format="default"/> control plane, may have different traffic
   filtering requirements than Internet service providers. But also Internet
   service providers may use those VPNs for scenarios like having the Internet
   routing table in a VRF, resulting in the same traffic filtering requirements
   as defined for the global routing table environment within this document.
   This document defines an additional BGP NLRI type (AFI=1, SAFI=134) value,
   which can be used to propagate Flow Specification in a BGP/MPLS
   VPN environment.
      </t>
      <t>
   The NLRI format for this address family consists of a fixed-length Route
   Distinguisher field (8 octets) followed by the Flow Specification NLRI value (<xref target="nlri_value_encoding" format="default"/>).
   The NLRI length field shall include both the 8 octets of the Route
   Distinguisher as well as the subsequent Flow Specification NLRI value.
   The resulting encoding is shown in <xref target="figure_fs_nlri_mpls" format="default"/>.
</t>
      <figure anchor="figure_fs_nlri_mpls">
        <name>Flow Specification NLRI for MPLS</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
                 +--------------------------------+
                 | length (0xnn or 0xfnnn)        |
                 +--------------------------------+
                 | Route Distinguisher (8 octets) |
                 +--------------------------------+
                 |    NLRI value  (variable)      |
                 +--------------------------------+
  ]]></artwork>
      </figure>
      <t>
   Propagation of this NLRI is controlled by matching Route Target
   extended communities associated with the BGP path advertisement with
   the VRF import policy, using the same mechanism as described in BGP/
   MPLS IP VPNs <xref target="RFC4364" format="default"/>.
</t>
      <t>
   Flow Specifications received via this NLRI apply only to traffic
   that belongs to the VRF(s) in which it is imported. By default,
   traffic received from a remote PE is switched via an MPLS forwarding
   decision and is not subject to filtering.
</t>
      <t>Contrary to the behavior specified for the non-VPN NLRI, Flow
      Specifications are accepted by default, when received from remote PE
      routers.</t> 
      <t>The validation procedure (<xref target="validation_procedure"
      format="default"/>) and Traffic Filtering Actions (<xref
      target="traffic_filtering_actions" format="default"/>) are the same as
      for IPv4.</t> 
    </section>
    <section numbered="true" toc="default">
      <name>Traffic Monitoring</name>
      <t>
   Traffic filtering applications require monitoring and traffic
   statistics facilities.  While this is an implementation specific
   choice, implementations <bcp14>SHOULD</bcp14> provide:
      </t>
      <ul spacing="normal">
        <li>A mechanism to log the packet header of filtered traffic.</li>
        <li>A mechanism to count the number of matches for a given Flow
	Specification rule.</li>
      </ul>
    </section>
    <section anchor="errorhandling" numbered="true" toc="default">
      <name>Error Handling</name>
      <t>
      Error handling according to <xref target="RFC7606" format="default"/> and
      <xref target="RFC4760" format="default"/> applies to this specification.
      </t>
      <t>
        This document introduces Traffic Filtering Action Extended Communities.
        Malformed Traffic Filtering Action Extended Communities in the sense
	of <xref target="RFC7606" sectionFormat="of" section="7.14"/>
        are Extended Community values that cannot be decoded according
        to <xref target="traffic_filtering_actions" format="default"/> of this document.
      </t>
    </section>
    <section anchor="IANA" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>
    This section complies with <xref target="RFC7153" format="default"/>.
      </t>
      <section numbered="true" toc="default">
        <name>AFI/SAFI Definitions</name>
        <t>
      IANA maintains a registry entitled "SAFI Values". For the purpose of this
      work, IANA has updated the following SAFIs as shown in the table below.
         (Note: This document obsoletes both <xref target="RFC7674"
	 format="default"/> and <xref target="RFC5575" format="default"/>, and all references
      to those documents have been deleted from the registry.)
        </t>
        <table anchor="iana_safi" align="center">
          <name>Registry: SAFI Values</name>
          <thead>
            <tr>
              <th align="left">Value</th>
              <th align="left">Name</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">133</td>
              <td align="left">Dissemination of Flow Specification rules</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">134</td>
              <td align="left">L3VPN Dissemination of Flow Specification rules</td>
              <td align="left">RFC 8955</td>
            </tr>
          </tbody>
        </table>
        <t>The above textual changes generalize the definition of the SAFIs
	rather than change its underlying meaning. Therefore, based on <xref
	target="RFC7950">"The YANG 1.1 Data Modeling Language"</xref>, the above text means that the following YANG
	enums from <xref
	target="RFC8294">"Common YANG Data Types for the Routing Area"</xref> have had their names and
	descriptions at <eref brackets="angle"
	target="https://www.iana.org/assignments/iana-routing-types"/> changed to:</t> 
        <sourcecode name="" type="yang" markers="true"><![CDATA[
   enum flow-spec-safi {
          value 133;
          description
            "Dissemination of Flow Specification rules SAFI.";
        }
   enum l3vpn-flow-spec-safi {
          value 134;
          description
            "L3VPN Dissemination of Flow Specification rules SAFI.";
        }
]]></sourcecode>
        <t>A new revision statement has been added to the module as follows:</t>
        <sourcecode name="" type="yang" markers="true"><![CDATA[
   revision 2020-12-31 {
     description "Non-backwards-compatible change of SAFI names
                  (SAFI values 133, 134).";
     reference
       "RFC 8955: Dissemination of Flow Specification Rules.";
  }
]]></sourcecode>
      </section>
      <section numbered="true" toc="default">
        <name>Flow Component Definitions</name>
        <t>
      A Flow Specification consists of a sequence of flow components, which
      are identified by an 8-bit component type. IANA has created and maintains
      a registry entitled "Flow Spec Component Types". IANA has
      updated the reference for this registry to RFC 8955. Furthermore, the
      references to the values have been updated according to the table below
      (Note: This document obsoletes both <xref target="RFC7674"
      format="default"/> and <xref target="RFC5575" format="default"/>, and all references
      to those documents have been deleted from the registry.)
        </t>
        <table anchor="iana_flow_component_types" align="center">
          <name>Registry: Flow Spec Component Types</name>
          <thead>
            <tr>
              <th align="left">Value</th>
              <th align="left">Name</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">1</td>
              <td align="left">Destination Prefix</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">2</td>
              <td align="left">Source Prefix</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">3</td>
              <td align="left">IP Protocol</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">4</td>
              <td align="left">Port</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">5</td>
              <td align="left">Destination port</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">6</td>
              <td align="left">Source port</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">7</td>
              <td align="left">ICMP type</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">8</td>
              <td align="left">ICMP code</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">9</td>
              <td align="left">TCP flags</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">10</td>
              <td align="left">Packet length</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">11</td>
              <td align="left">DSCP</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">12</td>
              <td align="left">Fragment</td>
              <td align="left">RFC 8955</td>
            </tr>
          </tbody>
        </table>
        <t>In order to manage the limited number space and accommodate several
	usages, the following policies defined by <xref target="RFC8126"
	format="default"/> are used:</t> 
        <table anchor="iana_flow_component_types_policies" align="center">
          <name>Flow Spec Component Types Policies</name>
          <thead>
            <tr>
              <th align="left">Type Values</th>
              <th align="left">Policy</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0</td>
              <td align="left">Reserved</td>
            </tr>
            <tr>
              <td align="left">[1 .. 127]</td>
              <td align="left">Specification Required</td>
            </tr>
            <tr>
              <td align="left">[128 .. 254]</td>
              <td align="left">Expert Review</td>
            </tr>
            <tr>
              <td align="left">255</td>
              <td align="left">Reserved</td>
            </tr>
          </tbody>
        </table>

<dl newline="true">
<dt>Guidance for Experts:</dt>
<dd>
         The registration policy for the range 128-254 is Expert Review.  The
         experts are expected to check the clarity of purpose and use of
         the requested code points.  The experts must also verify that
         any specification produced in the IETF that requests one of
         these code points has been made available for review by the IDR
         Working Group and that any specification produced outside the
         IETF does not conflict with work that is active or already
         published within the IETF.  It must be pointed out that
         introducing new component types may break interoperability with
         existing implementations of this protocol.
</dd>
</dl>

      </section>
      <section numbered="true" toc="default">
        <name>Extended Community Flow Specification Actions</name>
        <t>The Extended Community Flow Specification Action types defined in
	this document consist of two parts:</t> 
        <ul spacing="normal">
          <li>Type (BGP Transitive Extended Community Type)</li>
          <li>Sub-Type</li>
        </ul>
        <t>For the type part, IANA maintains a registry entitled "BGP
	Transitive Extended Community Types". For the purpose of this work
	(<xref target="traffic_filtering_actions" format="default"/>), IANA has
	updated the references as shown in the table below. (Note: This document obsoletes both <xref
	target="RFC7674" format="default"/> and
	<xref target="RFC5575" format="default"/>, and all references to those
	documents have been deleted in the 
	registry.)</t> 
        <table anchor="iana_ext_comm_types" align="center">
          <name>Registry: BGP Transitive Extended Community Types</name>
          <thead>
            <tr>
              <th align="left">Type Value</th>
              <th align="left">Name</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x81</td>
              <td align="left">
           Generic Transitive Experimental Use Extended Community Part 2
           (Sub-Types are defined in the "Generic Transitive Experimental Use
           Extended Community Part 2 Sub-Types" Registry)
         </td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">0x82</td>
              <td align="left">
           Generic Transitive Experimental Use Extended Community Part 3
           (Sub-Types are defined in the "Generic Transitive Experimental Use
           Extended Community Part 3 Sub-Types" Registry)
         </td>
              <td align="left">RFC 8955</td>
            </tr>
          </tbody>
        </table>
        <t>For the sub-type part of the Extended Community Traffic Filtering
	Actions, IANA maintains the following registries. IANA has 
	updated all names and references according to the tables below and
	assign a new value for the "Flow spec traffic-rate-packets" Sub-Type.
	(Note: This document obsoletes both <xref target="RFC7674"
	format="default"/> and <xref target="RFC5575" format="default"/>, and
	all references to those documents have been deleted from the
	registries below.) </t> 
        <table anchor="iana_ext_comm_subtypes" align="center">
          <name>Registry: Generic Transitive Experimental Use Extended
          Community Sub-Types</name>
          <thead>
            <tr>
              <th align="left">Sub-Type Value</th>
              <th align="left">Name</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x06</td>
              <td align="left">Flow spec traffic-rate-bytes</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">0x0c</td>
              <td align="left">Flow spec traffic-rate-packets</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">0x07</td>
              <td align="left">Flow spec traffic-action (Use of the "Value"
	      field is defined in the "Traffic Action Fields" registry)</td> 
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">0x08</td>
              <td align="left">
           Flow spec rt-redirect AS-2octet format
         </td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">0x09</td>
              <td align="left">
           Flow spec traffic-remarking
         </td>
              <td align="left">RFC 8955</td>
            </tr>
          </tbody>
        </table>
        <table anchor="iana_ext_comm_subtypes2" align="center">
          <name>Registry: Generic Transitive Experimental Use Extended
	  Community Part 2 Sub-Types</name> 
          <thead>
            <tr>
              <th align="left">Sub-Type Value</th>
              <th align="left">Name</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x08</td>
              <td align="left">
           Flow spec rt-redirect IPv4 format
         </td>
              <td align="left">RFC 8955</td>
            </tr>
          </tbody>
        </table>
        <table anchor="iana_ext_comm_subtypes3" align="center">
          <name>Registry: Generic Transitive Experimental Use Extended
	  Community Part 3 Sub-Types</name> 
          <thead>
            <tr>
              <th align="left">Sub-Type Value</th>
              <th align="left">Name</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">0x08</td>
              <td align="left">
           Flow spec rt-redirect AS-4octet format
         </td>
              <td align="left">RFC 8955</td>
            </tr>
          </tbody>
        </table>
        <t>
   Furthermore, IANA has updated the reference for the registries
   "Generic Transitive Experimental Use Extended Community Part 2 Sub-Types" and
   "Generic Transitive Experimental Use Extended Community Part 3 Sub-Types"
   to RFC 8955.
        </t>
        <t>The "traffic-action" Extended Community (<xref
	target="traffic_action_subtype" format="default"/>) defined in this
	document has 46 unused bits, which can be used to convey additional
	meaning. IANA created and maintains a registry entitled "Traffic
	Action Fields".  IANA has updated the reference for this
	registry to RFC 8955. Furthermore, IANA has updated
	the references according to the table below. These values should be
	assigned via IETF Review rules only. (Note: This document obsoletes
	both <xref target="RFC7674" format="default"/> and <xref
	target="RFC5575" format="default"/>, and all references to those
	documents have been deleted from the registry.)</t> 
        <table anchor="iana_traffic_action_subtype" align="center">
          <name>Registry: Traffic Action Fields</name>
          <thead>
            <tr>
              <th align="left">Bit</th>
              <th align="left">Name</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">47</td>
              <td align="left">Terminal Action</td>
              <td align="left">RFC 8955</td>
            </tr>
            <tr>
              <td align="left">46</td>
              <td align="left">Sample</td>
              <td align="left">RFC 8955</td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
    <section anchor="security_considerations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t> As long as Flow Specifications are restricted to match the
      corresponding unicast routing paths for the relevant prefixes (<xref
      target="validation_procedure" format="default"/>), the security
      characteristics of this proposal are equivalent to the existing security
      properties of BGP unicast routing. Any relaxation of the validation
      procedure described in <xref target="validation_procedure"
      format="default"/> may allow unwanted Flow Specifications to be
      propagated, and thus unwanted Traffic Filtering Actions may be applied to
      flows.</t> 
      <t>Where the above mechanisms are not in place, this could open the door
      to further denial-of-service attacks, such as unwanted traffic
      filtering, remarking, or redirection.</t> 
      <t>
   Deployment of specific relaxations of the validation within an
   administrative boundary of a network are useful in some networks for quickly
   distributing filters to prevent denial-of-service attacks.
    For a network to utilize this relaxation, the BGP policies must
    support additional filtering since the origin AS field is empty.
    Specifications relaxing the validation restrictions <bcp14>MUST</bcp14>
    contain security considerations that provide details on the
    required additional filtering.
    For example, the use of origin validation can provide
    enhanced filtering within an AS confederation.
      </t>
      <t>
       Inter-provider routing is based on a web of trust. Neighboring
   autonomous systems are trusted to advertise valid reachability
   information. If this trust model is violated, a neighboring
   autonomous system may cause a denial-of-service attack by advertising
   reachability information for a given prefix for which it does not
   provide service (unfiltered address space hijack). Since validation of
   the Flow Specification is tied to the announcement of the best unicast
   route, the failure in the validation of best path route may prevent the
   Flow Specification from being used by a local router. Possible
   mitigations are <xref target="RFC6811" format="default"/> and
   <xref target="RFC8205" format="default"/>.
      </t>
      <t>On Internet Exchange Points (IXPs), routes are often exchanged via
      route servers that do not extend the AS_PATH. In such cases, it is not
      possible to enforce the left-most AS in the AS_PATH to be the neighbor
      AS (the AS of the route server). Since the validation of Flow
      Specification (<xref target="validation_procedure" format="default"/>)
      depends on this, additional care must be taken. It is advised to use a
      strict inbound route policy in such scenarios.</t> 
      <t> Enabling firewall-like capabilities in routers without centralized
      management could make certain failures harder to diagnose.  For example,
      it is possible to allow TCP packets to pass between a pair of addresses
      but not ICMP packets.  It is also possible to permit packets smaller
      than 900 or greater than 1000 octets to pass between a pair of addresses
      but not packets whose length is in the range 900-1000.  Such behavior
      may be confusing, and these capabilities should be used with care whether
      manually configured or coordinated through the protocol extensions
      described in this document.</t> 
      <t>Flow Specification BGP speakers (e.g., automated DDoS controllers) not
      properly programmed, algorithms that are not performing as expected, or
      simply rogue systems may announce unintended Flow Specifications, send
      updates at a high rate, or generate a high number of Flow
      Specifications. This may stress the receiving systems, exceed their
      capacity, or lead to unwanted Traffic Filtering Actions being applied to
      flows.</t> 
      <t>
  Systems may not be able to locate all header values
  required to identify a packet. This can be especially problematic
  in the case of fragmented packets that are not the first fragment
  and thus lack upper-layer protocol headers or Encapsulating Security
  Payload (ESP) NULL <xref target="RFC4303"/> encryption.
      </t>
      <t> While the general verification of the Flow Specification NLRI is
      specified in this document (<xref target="validation_procedure"
      format="default"/>), the Traffic Filtering Actions received by a third
      party may need custom verification or filtering. In particular, all
      non-traffic-rate actions may allow a third party to modify packet
      forwarding 
      properties and potentially gain access to other routing-tables/VPNs or
      undesired queues. This can be avoided by proper filtering/screening of
      the Traffic Filtering Action communities at network borders and only
      exposing a predefined subset of Traffic Filtering Actions (see <xref
      target="traffic_filtering_actions" format="default"/>) to third
      parties. One way to achieve this is by mapping user-defined communities,
      which can be set by the third party, to Traffic Filtering Actions and not
      accepting Traffic Filtering Action extended communities from third
      parties.</t> 
      <t>This extension adds additional information to Internet routers.
          These are limited in terms of the maximum number of data elements
          they can hold as well as the number of events they are able to
          process in a given unit of time. Service providers need to consider
          the maximum capacity of their devices and may need to limit the
          number of Flow Specifications accepted and processed.
      </t>
    </section>
  </middle>
  <back>

    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0791.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0792.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.0793.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2474.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4271.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4360.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4364.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4456.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4760.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5668.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7153.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7606.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>

        <reference anchor="ISO_IEC_9899">
          <front>
            <title>Information technology -- Programming languages -- C</title>
            <seriesInfo name="ISO/IEC" value="9899:2018"/>
            <author>
              <organization>ISO</organization>
            </author>
            <date month="June" year="2018"/>
          </front>
        </reference>
        <reference anchor="IEEE.754.1985">
          <front>
            <title>Standard for Binary Floating-Point Arithmetic</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date month="August" year="1985"/>
          </front>
            <seriesInfo name="IEEE" value="754-1985"/>
	    <seriesInfo name="DOI" value=" 10.1109/IEEESTD.2019.8766229"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4303.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5575.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6811.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7674.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7950.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8205.xml"/>
        <xi:include
	    href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8294.xml"/>


<!-- draft-ietf-idr-flow-spec-v6-22 in queue 2020-12-14 -->
<reference anchor="RFC8956" target="https://www.rfc-editor.org/info/rfc8956">
<front>
<title>Dissemination of Flow Specification Rules for IPv6</title>

<author initials='C' surname='Loibl' fullname='Christoph Loibl' role='editor'>
    <organization />
</author>

<author initials='R' surname='Raszuk' fullname='Robert Raszuk' role='editor'>
    <organization />
</author>

<author initials='S' surname='Hares' fullname='Susan Hares' role='editor'>
    <organization />
</author>

<date month='December' year='2020' />

</front>
<seriesInfo name="RFC" value="8956"/>
<seriesInfo name="DOI" value="10.17487/RFC8956"/>
</reference>

      </references>
    </references>
    <section anchor="flow_rule_cmp_src" numbered="true" toc="default">
      <name>Example Python code: flow_rule_cmp</name>

      <sourcecode name="" type="python" markers="true"><![CDATA[
"""
Copyright (c) 2020 IETF Trust and the persons identified as
authors of the code.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, is permitted pursuant to, and subject to the license
terms contained in, the Simplified BSD License set forth in Section
4.c of the IETF Trust's Legal Provisions Relating to IETF Documents
(https://trustee.ietf.org/license-info). 
"""

import itertools
import collections
import ipaddress


EQUAL = 0
A_HAS_PRECEDENCE = 1
B_HAS_PRECEDENCE = 2
IP_DESTINATION = 1
IP_SOURCE = 2

FS_component = collections.namedtuple('FS_component',
                                      'component_type op_value')


class FS_nlri(object):
    """
    FS_nlri class implementation that allows sorting.

    By calling .sort() on an array of FS_nlri objects these will be
    sorted according to the flow_rule_cmp algorithm.

    Example:
    nlri = [ FS_nlri(components=[
             FS_component(component_type=IP_DESTINATION,
                    op_value=ipaddress.ip_network('10.1.0.0/16') ),
             FS_component(component_type=4,
                    op_value=bytearray([0,1,2,3,4,5,6])),
             ]),
             FS_nlri(components=[
             FS_component(component_type=5,
                    op_value=bytearray([0,1,2,3,4,5,6])),
             FS_component(component_type=6,
                    op_value=bytearray([0,1,2,3,4,5,6])),
             ]),
           ]
    nlri.sort() # sorts the array according to the algorithm
    """
    def __init__(self, components = None):
        """
        components: list of type FS_component
        """
        self.components = components

    def __lt__(self, other):
        # use the below algorithm for sorting
        result = flow_rule_cmp(self, other)
        if result == B_HAS_PRECEDENCE:
            return True
        else:
            return False


def flow_rule_cmp(a, b):
    """
    Example of the flowspec comparison algorithm.
    """
    for comp_a, comp_b in itertools.zip_longest(a.components,
                                           b.components):
        # If a component type does not exist in one rule
        # this rule has lower precedence
        if not comp_a:
            return B_HAS_PRECEDENCE
        if not comp_b:
            return A_HAS_PRECEDENCE
        # Higher precedence for lower component type
        if comp_a.component_type < comp_b.component_type:
            return A_HAS_PRECEDENCE
        if comp_a.component_type > comp_b.component_type:
            return B_HAS_PRECEDENCE
        # component types are equal -> type specific comparison
        if comp_a.component_type in (IP_DESTINATION, IP_SOURCE):
            # assuming comp_a.op_value, comp_b.op_value of
            # type ipaddress.IPv4Network
            if comp_a.op_value.overlaps(comp_b.op_value):
                # longest prefixlen has precedence
                if comp_a.op_value.prefixlen > \
                        comp_b.op_value.prefixlen:
                    return A_HAS_PRECEDENCE
                if comp_a.op_value.prefixlen < \
                        comp_b.op_value.prefixlen:
                    return B_HAS_PRECEDENCE
                # components equal -> continue with next component
            elif comp_a.op_value > comp_b.op_value:
                return B_HAS_PRECEDENCE
            elif comp_a.op_value < comp_b.op_value:
                return A_HAS_PRECEDENCE
        else:
            # assuming comp_a.op_value, comp_b.op_value of type
            # bytearray
            if len(comp_a.op_value) == len(comp_b.op_value):
                if comp_a.op_value > comp_b.op_value:
                    return B_HAS_PRECEDENCE
                if comp_a.op_value < comp_b.op_value:
                    return A_HAS_PRECEDENCE
                # components equal -> continue with next component
            else:
                common = min(len(comp_a.op_value), 
                             len(comp_b.op_value))
                if comp_a.op_value[:common] > \
                   comp_b.op_value[:common]:
                    return B_HAS_PRECEDENCE
                elif comp_a.op_value[:common] < \
                        comp_b.op_value[:common]:
                    return A_HAS_PRECEDENCE
                # the first common bytes match
                elif len(comp_a.op_value) > len(comp_b.op_value):
                    return A_HAS_PRECEDENCE
                else:
                    return B_HAS_PRECEDENCE
    return EQUAL
]]></sourcecode>
    </section>
    <section anchor="rfc5575differences" numbered="true" toc="default">
      <name>Comparison with RFC 5575</name>
      <t>This document includes numerous editorial changes to <xref
      target="RFC5575" format="default"/>. It also completely incorporates the
      redirect action clarification document <xref target="RFC7674"
      format="default"/>. It is recommended to read the entire document. The
      authors, however, want to point out the following technical changes to
      <xref target="RFC5575" format="default"/>:</t> 
      <ul spacing="normal">
        <li><xref target="intro" format="default"/> introduces the Flow
	Specification NLRI. In <xref target="RFC5575" format="default"/>, BGP 
	treats this NLRI as an opaque key to an entry in its databases. This specification
	has removed all references to an opaque key property. BGP
	implementations are able to understand the NLRI encoding.</li> 
        <li><xref target="numeric_operator" format="default"/> defines a
	numeric operator and comparison bit combinations. In <xref
	target="RFC5575" format="default"/>, the meaning of those bit
	combination was not explicitly defined and left open to the
	reader.</li> 
        <li>Sections <xref target="type_3" format="counter"/> - <xref target="type_8"
	format="counter"/>, <xref target="type_10" format="counter"/>, and <xref
	target="type_11" format="counter"/> make use of the above numeric
	operator. The allowed length of the comparison value was not
	consistently defined in <xref target="RFC5575"
	format="default"/>.</li> 
        <li><xref target="traffic_filtering_actions" format="default"/>
	defines all Traffic Filtering Action Extended Communities as
	transitive Extended Communities. <xref target="RFC5575"
	format="default"/> defined the traffic-rate action to be
	non-transitive and did not define the transitivity of the other
	Traffic Filtering Action communities at all.</li> 
        <li><xref target="traffic_rate_in_packets" format="default"/>
	introduces a new Traffic Filtering Action (traffic-rate-packets). This
	action did not exist in <xref target="RFC5575"
	format="default"/>.</li> 
        <li><xref target="rt_redirect_action_subtype" format="default"/>
	contains the same redirect actions already defined in <xref
	target="RFC5575" format="default"/>, however, these actions have been
	renamed  to "rt-redirect" to make it clearer that the redirection is
	based on route-target. This section also completely incorporates the
	<xref target="RFC7674" format="default"/> clarifications of the
	Flowspec Redirect Extended Community.</li> 
        <li><xref target="rules_action_interference" format="default"/>
	contains general considerations on interfering traffic actions. <xref
	target="traffic_action_subtype" format="default"/> also
	cross-references <xref target="rules_action_interference"
	format="default"/>. <xref target="RFC5575" format="default"/> did not
	mention this.</li> 
        <li><xref target="errorhandling" format="default"/> contains new error
	handling.</li> 
      </ul>
    </section>
    <section numbered="false" toc="default">
      <name>Acknowledgments</name>
      <t>The authors would like to thank <contact fullname="Yakov Rekhter"/>,
      <contact fullname="Dennis Ferguson"/>, <contact fullname="Chris
      Morrow"/>, <contact fullname="Charlie Kaufman"/>, and <contact
      fullname="David Smith"/> for their comments on the
      original <xref target="RFC5575" format="default"/>.  <contact
      fullname="Chaitanya Kodeboyina"/> helped design the flow validation
      procedure, and <contact fullname="Steven Lin"/> and <contact
      fullname="Jim Washburn"/> ironed out all the details necessary to
      produce a working implementation in the original <xref target="RFC5575"
      format="default"/>.</t> 
      <t>A packet rate Traffic Filtering Action was also described in a Flow
      Specification extension draft and the authors would like to thank <contact
      fullname="Wesley Eddy"/>, <contact fullname="Justin Dailey"/>, and
      <contact fullname="Gilbert Clark"/> for their work.</t>  
      <t>Additionally, the authors would like to thank <contact
      fullname="Alexander Mayrhofer"/>, <contact fullname="Nicolas Fevrier"/>,
      <contact fullname="Job Snijders"/>, <contact fullname="Jeffrey Haas"/>,
      and <contact fullname="Adam Chappell"/> for their comments and
      review.</t> 
    </section>
    <section numbered="false" toc="default">
      <name>Contributors</name>
      <t><contact fullname="Barry Greene"/>,  <contact fullname="Pedro
      Marques"/>, <contact fullname="Jared Mauch"/>, and <contact
      fullname="Nischal Sheth were"/> authors on <xref target="RFC5575"
      format="default"/> and, therefore, are contributing authors on this
      document.</t> 
    </section>
  </back>

</rfc>
