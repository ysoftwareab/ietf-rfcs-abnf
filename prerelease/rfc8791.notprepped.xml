<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902"
     updates="8340" category="std" consensus="true"
     docName="draft-ietf-netmod-yang-data-ext-05" number="8791" obsoletes=""
     submissionType="IETF" xml:lang="en" tocInclude="true" symRefs="true"
     sortRefs="true" version="3"> 

  <!-- xml2rfc v2v3 conversion 2.40.0 -->
  <front>
    <title abbrev="YANG Data Structure Extensions">YANG Data Structure Extensions</title>
    <seriesInfo name="RFC" value="8791"/>

    <author initials="A" surname="Bierman" fullname="Andy Bierman">
      <organization>YumaWorks</organization>
      <address>
        <email>andy@yumaworks.com</email>
      </address>
    </author>
    <author initials="M" surname="Bjorklund" fullname="Martin Bjorklund">
      <organization>Cisco</organization>
      <address>
        <email>mbj+ietf@4668.se</email>
      </address>
    </author>
    <author initials="K" surname="Watsen" fullname="Kent Watsen">
      <organization>Watsen Networks</organization>
      <address>
        <email>kent+ietf@watsen.net</email>
      </address>
    </author>
    <date year="2020" month="June" />

    <abstract>

      <t>
This document describes YANG mechanisms for
defining abstract data structures with YANG.
      </t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>
There is a need for standard mechanisms to allow the
definition of abstract data that is not intended to
be implemented as configuration or operational state.
The "yang-data" extension statement from RFC 8040 <xref target="RFC8040"
format="default"/> was defined for this purpose, but it is limited in its
functionality.
      </t>
      <t>
The intended use of the "yang-data" extension was to model all or part
of a protocol message, such as the "errors" definition in the 
YANG module "ietf-restconf" <xref target="RFC8040" format="default"/>, or the
contents of a file.  However, 
protocols are often layered such that the header or payload portions
of the message can be extended by external documents.  The YANG
statements that model a protocol need to support this extensibility
that is already found in that protocol.
      </t>
      <t>
This document defines a new YANG extension statement called
"structure", which is similar to but more flexible than the
"yang-data" extension from <xref target="RFC8040" format="default"/>.

There is no assumption that a 
YANG data structure can only be used as a top-level abstraction, and
it may also be nested within some other data structure.
      </t>

      <t>
This document also defines a new YANG extension statement called
"augment&nbhy;structure", which allows abstract data structures to be
augmented from external modules and is similar to the existing YANG "augment"
statement.  Note that "augment" cannot be used to augment a YANG data
structure since a YANG compiler or other tool is not required to understand
the "structure" extension.
      </t>
      <section anchor="terminology" numbered="true" toc="default">

        <name>Terminology</name>
        <t>
The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
"<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", 
"<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
"<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and
"<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174"
format="default"/> when, and only when, they appear in all 
capitals, as shown here.
        </t>
        <t>
The following term is used within this document:
        </t>
<dl newline="false" spacing="normal">
<dt>YANG data structure:</dt> 
<dd>A data structure defined with the "structure"
statement.</dd>
</dl>
        <section anchor="nmda" numbered="true" toc="default">
          <name>NMDA</name>
          <t>
The following terms are defined in the
Network Management Datastore Architecture
(NMDA) <xref target="RFC8342" format="default"/>
and are not redefined here:</t>
<ul spacing="normal">
<li>configuration</li>
<li>operational state</li>
</ul>
        </section>
        <section anchor="yang" numbered="true" toc="default">
          <name>YANG</name>

          <t>The following terms are defined in <xref target="RFC7950"
	  format="default"/> and are not redefined here:</t>
<ul spacing="normal">
<li>absolute-schema-nodeid</li>
<li>container</li>
<li>data definition statement</li>
<li>data node</li>
<li>leaf</li>
<li>leaf-list</li>
<li>list</li>
</ul>
        </section>
      </section>
    </section>
    <section anchor="definitions" numbered="true" toc="default">
      <name>Definitions</name>
      <t>
A YANG data structure is defined with the "structure" extension
statement, which is defined in the YANG module
"ietf-yang-structure-ext".  The
argument to the "structure" extension statement is the name of the
data structure.  The data structures are considered to be in the same
identifier namespace as defined in <xref target="RFC7950"
sectionFormat="of" section="6.2.1"/>. In particular, the seventh bullet states:
      </t>
<blockquote>
   All leafs, leaf-lists, lists, containers, choices, rpcs, actions,
   notifications, anydatas, and anyxmls defined (directly or through
   a "uses" statement) within a parent node or at the top level of
   the module or its submodules share the same identifier namespace.
</blockquote>
      <t>
This means that data structures defined with the "structure" statement
cannot have the same name as sibling nodes from regular YANG data
definition statements or other "structure" statements in the same YANG
module.
      </t>
      <t>
This does not mean a YANG data structure, once defined, has to be used
as a top-level protocol message or other top-level data structure.
      </t>
      <t>
A YANG data structure is encoded in the same way as an "anydata" node.
This means that the name of the structure is encoded as a "container",
with the instantiated children encoded as child nodes to this
node.  For example, this structure:
      </t>
<sourcecode type="yang"><![CDATA[
  module example-errors {
    ...

    sx:structure my-error {
      leaf error-number {
        type int;
      }
    }
  }
]]>
</sourcecode>
      <t>
can be encoded in JSON as:
      </t>
<sourcecode type="json"><![CDATA[
  "example-errors:my-error": {
    "error-number": 131
  }
]]>
</sourcecode>
    </section>
    <section anchor="yang-data-structures-in-yang-tree-diagrams"
	     numbered="true" toc="default"> 
      <name>YANG Data Structures in YANG Tree Diagrams</name>
      <t>
A YANG data structure can be printed in a YANG tree diagram <xref
target="RFC8340" format="default"/>. 
This document updates RFC 8340 <xref target="RFC8340" format="default"/> by defining
two new sections in the 
tree diagram for a module:
      </t>
<ol spacing="normal">
<li>YANG data structures, which are offset by two spaces and identified by the keyword
"structure" followed by the name of the YANG data structure and a colon (":")
character. </li>
<li>YANG data structure augmentations, which are offset by 2 spaces and identified by
the keyword "augment&nbhy;structure" followed by the augment target structure
name and a colon (":") character.</li>
 </ol>

      <t>
   The new sections, including spaces conventions, appear as follows:
      </t>
<sourcecode type="yangtree"><![CDATA[
  structure <structure-name>:
    +--<node>
       +--<node>
       |  +--<node>
       +--<node>
  structure <structure-name>:
    +--<node>

  augment-structure <structure-name>:
    +--<node>
       +--<node>
       |  +--<node>
       +--<node>
  augment-structure <structure-name>:
    +--<node>
]]>
</sourcecode>
      <t>
Nodes in YANG data structures are printed according to the rules defined in
<xref target="RFC8340" sectionFormat="of" section="2.6"/>. The nodes in YANG
data structures do not have any &lt;flags&gt;.
      </t>
    </section>
    <section anchor="mod" numbered="true" toc="default">
      <name>YANG Data Structure Extensions Module</name>

<sourcecode type="yang" name="ietf-yang-structure-ext@2020-06-17.yang" markers="true"><![CDATA[
module ietf-yang-structure-ext {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-yang-structure-ext";
  prefix sx;

  organization
    "IETF NETMOD (NETCONF Data Modeling Language) Working Group";
  contact
    "WG Web:   <https://datatracker.ietf.org/wg/netmod/>
     WG List:  <mailto:netmod@ietf.org>

     Author:   Andy Bierman
               <mailto:andy@yumaworks.com>

     Author:   Martin Bjorklund
               <mailto:mbj+ietf@4668.se>

     Author:   Kent Watsen
               <mailto:kent+ietf@watsen.net>";
  description
    "This module contains conceptual YANG specifications for defining
     abstract data structures.
     
     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
     'MAY', and 'OPTIONAL' in this document are to be interpreted as
     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
     they appear in all capitals, as shown here.
     
     Copyright (c) 2020 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.
     
     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject to
     the license terms contained in, the Simplified BSD License set
     forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 8791
     (https://www.rfc-editor.org/info/rfc8791); see the RFC itself
     for full legal notices.";

  revision 2020-06-17 {
    description
      "Initial revision.";
    reference
      "RFC 8791: YANG Data Structure Extensions.";
  }

  extension structure {
    argument name {
      yin-element true;
    }
    description
      "This extension is used to specify a YANG data structure that
       represents conceptual data defined in YANG.  It is intended to
       describe hierarchical data independent of protocol context or
       specific message encoding format.  Data definition statements
       within a 'structure' extension statement specify the generic
       syntax for the specific YANG data structure, whose name is the
       argument of the 'structure' extension statement.

       Note that this extension does not define a media type.  A
       specification using this extension MUST specify the message 
       encoding rules, including the content media type, if 
       applicable.

       The mandatory 'name' parameter value identifies the YANG data
       structure that is being defined.

       This extension is only valid as a top-level statement, i.e.,
       given as a substatement to 'module' or 'submodule'.

       The substatements of this extension MUST follow the ABNF 
       rules below, where the rules are defined in RFC 7950: 

         *must-stmt
         [status-stmt]
         [description-stmt]
         [reference-stmt]
         *(typedef-stmt / grouping-stmt)
         *data-def-stmt

       A YANG data structure defined with this extension statement is
       encoded in the same way as an 'anydata' node.  This means
       that the name of the structure is encoded as a 'container',
       with the instantiated child statements encoded as child nodes
       to this node.

       The module name and namespace value for the YANG module using
       the extension statement are assigned to each of the data
       definition statements resulting from the YANG data structure.

       The XPath document element is the extension statement itself,
       such that the child nodes of the document element are
       represented by the data-def-stmt substatements within this
       extension.  This conceptual document is the context for the
       following YANG statements:

         - must-stmt
         - when-stmt
         - path-stmt
         - min-elements-stmt
         - max-elements-stmt
         - mandatory-stmt
         - unique-stmt
         - ordered-by
         - instance-identifier data type

       The following data-def-stmt substatements are constrained
       when used within a 'structure' extension statement. 

         - The list-stmt is not required to have a key-stmt defined.
         - The config-stmt is ignored if present.
      ";
  }

  extension augment-structure {
    argument path {
      yin-element true;
    }
    description
      "This extension is used to specify an augmentation to a YANG 
       data structure defined with the 'structure' statement.  It is
       intended to describe hierarchical data independent of protocol
       context or specific message encoding format.

       This statement has almost the same structure as the
       'augment-stmt'.  Data definition statements within this
       statement specify the semantics and generic syntax for the
       additional data to be added to the specific YANG data
       structure, identified by the 'path' argument.

       The mandatory 'path' parameter value identifies the YANG
       conceptual data node that is being augmented and is 
       represented as an absolute-schema-nodeid string, where the 
       first node in the absolute-schema-nodeid string identifies the 
       YANG data structure to augment, and the rest of the nodes in 
       the string identifies the node within the YANG structure to 
       augment.

       This extension is only valid as a top-level statement, i.e.,
       given as a substatement to 'module' or 'submodule'.

       The substatements of this extension MUST follow the ABNF 
       rules below, where the rules are defined in RFC 7950:

         [status-stmt]
         [description-stmt]
         [reference-stmt]
         1*(data-def-stmt / case-stmt)

       The module name and namespace value for the YANG module using
       the extension statement are assigned to instance document data
       conforming to the data definition statements within this
       extension.

       The XPath document element is the augmented extension
       statement itself, such that the child nodes of the document
       element are represented by the data-def-stmt substatements
       within the augmented 'structure' statement.

       The context node of the 'augment-structure' statement is
       derived in the same way as the 'augment' statement, as defined
       in Section 6.4.1 of [RFC7950]. This conceptual node is
       considered the context node for the following YANG statements:

         - must-stmt
         - when-stmt
         - path-stmt
         - min-elements-stmt
         - max-elements-stmt
         - mandatory-stmt
         - unique-stmt
         - ordered-by
         - instance-identifier data type

       The following data-def-stmt substatements are constrained
       when used within an 'augment-structure' extension statement.

         - The list-stmt is not required to have a key-stmt defined.
         - The config-stmt is ignored if present.

       Example:

          module foo {
             import ietf-yang-structure-ext { prefix sx; }

             sx:structure foo-data {
               container foo-con { }
             }
          }

          module bar {
             import ietf-yang-structure-ext { prefix sx; }
             import foo { prefix foo; }

             sx:augment-structure /foo:foo-data/foo:foo-con {
               leaf add-leaf1 { type int32; }
               leaf add-leaf2 { type string; }
             }
          }
      ";
  }
}
]]>
</sourcecode>
    </section>
    <section anchor="iana" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="yang-module-registry" numbered="true" toc="default">
        <name>YANG Module Registry</name>
        <t>
IANA has registered the following URI in the "ns" subregistry within the "IETF
XML Registry" <xref target="RFC3688" format="default"/>:
        </t>


<dl newline="false" spacing="compact" indent="6">
<dt>URI:</dt>
<dd>urn:ietf:params:xml:ns:yang:ietf-yang-structure-ext</dd>
<dt>Registrant Contact: </dt>
<dd>The IESG.</dd>
<dt>XML: </dt>
<dd>N/A; the requested URI is an XML namespace.</dd>
</dl>


        <t>
IANA has registered the following YANG module in the "YANG Module Names" subregistry
<xref target="RFC6020" format="default"/> within the "YANG Parameters" registry:
        </t>


<dl newline="false" spacing="compact" indent="6">
<dt>Name:</dt>
<dd>ietf-yang-structure-ext</dd>
<dt>Namespace:</dt>
<dd>urn:ietf:params:xml:ns:yang:ietf-yang-structure-ext</dd>
<dt>Prefix:</dt>       
<dd>sx</dd>
<dt>Reference:</dt>    
<dd>RFC 8791</dd>
</dl>

      </section>
    </section>
    <section anchor="security-considerations" numbered="true" toc="default">
      <name>Security Considerations</name>

<t> This document defines YANG extensions that are used to define conceptual
YANG data structures. It does not introduce any new vulnerabilities beyond
those specified in YANG 1.1 <xref target="RFC7950" format="default"/>.</t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7950.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8040.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8340.xml"/>
        <xi:include
	    href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8342.xml"/>


<reference anchor='W3C.REC-xml-20081126'
           target='http://www.w3.org/TR/2008/REC-xml-20081126'>
<front>
<title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>

<author initials='T.' surname='Bray' fullname='Tim Bray'>
    <organization />
</author>

<author initials='J.' surname='Paoli' fullname='Jean Paoli'>
    <organization />
</author>

<author initials='M.' surname='Sperberg-McQueen' fullname='Michael Sperberg-McQueen'>
    <organization />
</author>

<author initials='E.' surname='Maler' fullname='Eve Maler'>
    <organization />
</author>

<author initials='F.' surname='Yergeau' fullname='François Yergeau'>
    <organization />
</author>

<date month='November' year='2008' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-xml-20081126' />
<format type='HTML' target='http://www.w3.org/TR/2008/REC-xml-20081126' />
</reference>


      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3688.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6020.xml"/>
      </references>
    </references>
    <section anchor="examples" numbered="true" toc="default">
      <name>Examples</name>
      <section anchor="structure-example" numbered="true" toc="default">
        <name>"structure" Example</name>
        <t>
This example shows a simple address book that could be stored as an
artifact:
        </t>
<sourcecode type="yang"><![CDATA[
module example-module {
  yang-version 1.1;
  namespace "urn:example:example-module";
  prefix exm;

  import ietf-yang-structure-ext {
    prefix sx;
  }

  sx:structure address-book {
    list address {
      key "last first";
      leaf last {
        type string;
        description "Last name";
      }
      leaf first {
        type string;
        description "First name";
      }
      leaf street {
        type string;
        description "Street name";
      }
      leaf city {
        type string;
        description "City name";
      }
      leaf state {
        type string;
        description "State name";
      }
    }
  }
}
]]>
</sourcecode>
        <t>
Below is the tree diagram of this module:
        </t>
<sourcecode type="yangtree"><![CDATA[
module: example-module

  structure address-book:
    +-- address* [last first]
       +-- last      string
       +-- first     string
       +-- street?   string
       +-- city?     string
       +-- state?    string
]]>
</sourcecode>
      </section>
      <section anchor="augment-structure-example" numbered="true" toc="default">
        <name>"augment&nbhy;structure" Example</name>
        <t>
This example adds "county" and "zipcode" leafs to the address book:
        </t>

<sourcecode type="yang"><![CDATA[
module example-module-aug {
  yang-version 1.1;
  namespace "urn:example:example-module-aug";
  prefix exma;

  import ietf-yang-structure-ext {
    prefix sx;
  }
  import example-module {
    prefix exm;
  }

  sx:augment-structure "/exm:address-book/exm:address" {
    leaf county {
      type string;
      description "County name";
    }
    leaf zipcode {
      type string;
      description "Postal zipcode";
    }
  }
}
]]>
</sourcecode>
        <t>
Below is the tree diagram of this module:
        </t>
<sourcecode type="yangtree"><![CDATA[
module: example-module-aug

  augment-structure /exm:address-book/exm:address:
    +-- county?    string
    +-- zipcode?   string
]]>
</sourcecode>
      </section>
      <section anchor="xml-encoding-example" numbered="true" toc="default">
        <name>XML Encoding Example</name>

        <t>
This example shows how an address book can be encoded in XML <xref
target="W3C.REC-xml-20081126"/>:
        </t>
<sourcecode type="xml"><![CDATA[
<address-book xmlns="urn:example:example-module">
  <address>
    <last>Flintstone</last>
    <first>Fred</first>
    <street>301 Cobblestone Way</street>
    <city>Bedrock</city>
    <zipcode xmlns="urn:example:example-module-aug">70777</zipcode>
  </address>
  <address>
    <last>Root</last>
    <first>Charlie</first>
    <street>4711 Cobblestone Way</street>
    <city>Bedrock</city>
    <zipcode xmlns="urn:example:example-module-aug">70777</zipcode>
  </address>
</address-book>
]]>
</sourcecode>
      </section>
      <section anchor="json-encoding-example" numbered="true" toc="default">
        <name>JSON Encoding Example</name>
        <t>
This example shows how an address book can be encoded in JSON:
        </t>
<sourcecode type="json"><![CDATA[
"example-module:address-book": {
  "address": [
    {
      "city": "Bedrock",
      "example-module-aug:zipcode": "70777",
      "first": "Fred",
      "last": "Flintstone",
      "street": "301 Cobblestone Way"
    },
    {
      "city": "Bedrock",
      "example-module-aug:zipcode": "70777",
      "first": "Charlie",
      "last": "Root",
      "street": "4711 Cobblestone Way"
    }
  ]
}
]]>
</sourcecode>
      </section>
      <section
	  anchor="structure-example-that-defines-a-non-top-level-structure"
	  numbered="true" toc="default"> 
        <name>"structure" Example That Defines a Non-top-level Structure</name>
        <t>
The following example defines a data structure with error information
that can be included in an &lt;error&nbhy;info&gt; element in an
&lt;rpc&nbhy;error&gt;:
        </t>
<sourcecode type="yang"><![CDATA[
module example-error-info {
  yang-version 1.1;
  namespace "urn:example:example-error-info";
  prefix exei;

  import ietf-yang-structure-ext {
    prefix sx;
  }

  sx:structure my-example-error-info {
    leaf error-code {
      type uint32;
    }
  }

}
]]>
</sourcecode>
        <t>
The example below shows how this structure can be used in an
&lt;rpc&nbhy;error&gt;:
        </t>
<sourcecode type="xml"><![CDATA[
<rpc-reply message-id="101"
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
  <rpc-error>
    <error-type>protocol</error-type>
    <error-tag>operation-failed</error-tag>
    <error-severity>error</error-severity>
    <error-info>
      <my-example-error-info
          xmlns="urn:example:example-error-info">
        <error-code>42</error-code>
      </my-example-error-info>
    </error-info>
  </rpc-error>
</rpc-reply>
]]>
</sourcecode>
      </section>
    </section>

  </back>
</rfc>
