<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-anima-reference-model-10" category="info" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" symRefs="true" sortRefs="true" version="3" number="8993" consensus="true">

<!-- xml2rfc v2v3 conversion 2.47.0 -->
  <front>
    <title abbrev="Reference Model for Autonomic Networking">A Reference Model for Autonomic Networking</title>
    <seriesInfo name="RFC" value="8993"/>
    <author role="editor" fullname="Michael H. Behringer" initials="M." surname="Behringer">
      <address>
        <email>Michael.H.Behringer@gmail.com</email>
      </address>
    </author>
    <author surname="Carpenter" initials="B" fullname="Brian Carpenter">
      <organization abbrev="Univ. of Auckland"/>
      <address>
        <postal>
          <street>School of Computer Science</street>
          <street>University of Auckland</street>
          <street>PB 92019</street>
          <city>Auckland</city>
          <code>1142</code>
          <country>New Zealand</country>
        </postal>
        <email>brian.e.carpenter@gmail.com</email>
      </address>
    </author>

    <author fullname="Toerless Eckert" initials="T." surname="Eckert">
      <organization>Futurewei USA</organization>
      <address>
        <postal>
          <street>2330 Central Expy</street>
          <city>Santa Clara</city>
	  <region>CA</region>
          <code>95050</code>
          <country>United States of America</country>
        </postal>
        <email>tte+ietf@cs.fau.de</email>
      </address>
    </author>
    <author fullname="Laurent Ciavaglia" initials="L." surname="Ciavaglia">
      <organization>Nokia</organization>
      <address>
        <postal>
          <street>Villarceaux</street>
          <code>91460</code>
          <city>Nozay</city>
          <region/>
          <country>France</country>
        </postal>
        <email>laurent.ciavaglia@nokia.com</email>
      </address>
    </author>

    <author fullname="Jéferson Campos Nobre" initials="J" surname="Nobre">
      <organization abbrev="UFRGS">Federal University of Rio Grande do Sul (UFRGS)</organization>
      <address>
        <postal>
          <street>Av. Bento Gonçalves, 9500</street>
          <city>Porto Alegre</city>
          <region>RS</region>
          <code>91501-970</code>
          <country>Brazil</country>
        </postal>
        <email>jcnobre@inf.ufrgs.br</email>
      </address>
    </author>
    <date month="May" year="2021"/>
    <area>Operations and Management</area>
    <workgroup>ANIMA</workgroup>

<keyword>autonomous operation</keyword>
<keyword>self-management</keyword>
<keyword>infrastructure</keyword>
<keyword>intent</keyword>
<keyword>autonomic control plane</keyword>
<keyword>autonomic networking</keyword>

    <abstract>
      <t>
			This document describes a reference model for Autonomic Networking for managed networks. It defines the behavior of an autonomic node, how the various elements in an autonomic context work together, and how autonomic services can use the infrastructure.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="intro" numbered="true" toc="default">
      <name>Introduction</name>
      <t>The document "<xref target="RFC7575" format="title"/>" <xref target="RFC7575" format="default"/> explains the fundamental concepts behind Autonomic Networking and defines the relevant terms in this space and a high-level reference model. <xref target="RFC7576" format="default"/> provides a gap analysis between traditional and autonomic approaches. </t>
      <t>This document defines this reference model with more detail to allow for functional and protocol specifications to be developed in an architecturally consistent, non-overlapping manner. </t>
      <t>As discussed in <xref target="RFC7575" format="default"/>, the goal of this work is not to focus exclusively on fully autonomic nodes or networks. In reality, most networks will run with some autonomic functions, while the rest of the network is traditionally managed. This reference model allows for this hybrid approach. </t>
      <t>For example, it is possible in an existing, non-autonomic network to enroll devices in a traditional way to bring up a trust infrastructure with certificates. This trust infrastructure could then be used to automatically bring up an Autonomic Control Plane (ACP) and run traditional network operations over the secure and self-healing ACP. See <xref target="RFC8368" format="default"/> for a description of this use case.</t>
      <t>The scope of this model is therefore limited to networks that are to some extent managed by skilled human operators, loosely referred to as "professionally managed" networks. Unmanaged networks raise additional security and trust issues that this model does not cover.</t>
      <t>This document describes the first phase of an Autonomic Networking solution that is both simple and implementable.  It is expected that the experience from this phase will be used in defining updated and extended specifications over time. Some topics are considered architecturally in this document but are not yet reflected in the implementation specifications. They are marked with an (*).</t>
    </section>


<section anchor="network" numbered="true" toc="default">
      <name>Network View</name>
      <t>This section describes the various elements in a network with autonomic functions and explains how these entities work together on a high level. Subsequent sections explain the detailed inside view for each of the Autonomic Network elements, as well as the network functions (or interfaces) between those elements. </t>
      <t><xref target="network-view" format="default"/> shows the high-level view of an Autonomic Network. It consists of a number of autonomic nodes, which interact directly with each other. Those autonomic nodes provide a common set of capabilities across the network, called the "Autonomic Networking Infrastructure (ANI)". The ANI provides functions like naming, addressing, negotiation, synchronization, discovery, and messaging. </t>
      <t>Autonomic functions typically span several, possibly all, nodes in the network. The atomic entities of an autonomic function are called the "Autonomic Service Agents (ASAs)", which are instantiated on nodes. </t>
      <figure anchor="network-view">
        <name>High-Level View of an Autonomic Network</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
:            :       Autonomic Function 1        :                 :
: ASA 1      :      ASA 1      :      ASA 1      :          ASA 1  :
+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
             :                 :                 :                  
             :   +- - - - - - - - - - - - - - +  :
             :   :   Autonomic Function 2     :  :
             :   :  ASA 2      :      ASA 2   :  :
             :   +- - - - - - - - - - - - - - +  :
             :                 :                 :                  
+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
:                Autonomic Networking Infrastructure               :
+- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
+--------+   :    +--------+   :    +--------+   :        +--------+
| Node 1 |--------| Node 2 |--------| Node 3 |----...-----| Node n | 
+--------+   :    +--------+   :    +--------+   :        +--------+
   ]]></artwork>
      </figure>
      <t>In a horizontal view, autonomic functions span across the network, as well as the ANI. In a vertical view, a node always implements the ANI, plus it may have one or several ASAs. ASAs may be standalone or use other ASAs in a hierarchical way.</t>
      <t>Therefore, the ANI is the foundation for autonomic functions.  </t>
    </section>

<section anchor="element" numbered="true" toc="default">
      <name>Autonomic Network Element</name>
      <t>This section explains the general architecture of an Autonomic Network element (<xref target="element-arch" format="default"/>), how it tracks its surrounding environment in an adjacency table (<xref target="adjacency-table" format="default"/>), and the state machine that defines the behavior of the network element (<xref target="state-machine" format="default"/>),
based on that adjacency table.</t>
      <section anchor="element-arch" numbered="true" toc="default">
        <name>Architecture</name>
        <t>This section describes an Autonomic Network element and its internal architecture. The reference model explained in the document "<xref target="RFC7575" format="title"/>" <xref target="RFC7575" format="default"/> shows the sources of information that an ASA can leverage: self-knowledge, network knowledge (through discovery), Intent (see <xref target="intent" format="default"/>), and feedback loops. There are two levels inside an autonomic node: the level of ASAs and the level of the ANI, with the former using the services of the latter. <xref target="ref_model" format="default"/> illustrates this concept.
        </t>
        <figure anchor="ref_model">
          <name>Model of an Autonomic Node</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+------------------------------------------------------------+
|                                                            |
| +-----------+        +------------+        +------------+  |
| | Autonomic |        | Autonomic  |        | Autonomic  |  |
| | Service   |        | Service    |        | Service    |  |
| | Agent 1   |        | Agent 2    |        | Agent 3    |  |
| +-----------+        +------------+        +------------+  |
|       ^                    ^                     ^         |
| -  -  | -  - API level -  -| -  -  -  -  -  -  - |-  -  -  |
|       V                    V                     V         |
|------------------------------------------------------------|
| Autonomic Networking Infrastructure                        |
|    - Data structures (ex: certificates, peer information)  |
|    - Generalized Autonomic Control Plane (GACP)            |
|    - Autonomic node addressing and naming                  |
|    - Discovery, negotiation and synchronization functions  |
|    - Distribution of Intent and other information          |
|    - Aggregated reporting and feedback loops               |
|    - Routing                                               |
|------------------------------------------------------------|
|             Basic Operating System Functions               |
+------------------------------------------------------------+
     ]]></artwork>
        </figure>
        <t>The ANI (lower part of <xref target="ref_model" format="default"/>) contains node-specific data structures (for example, trust information about itself and its peers) as well as a generic set of functions, independent of a particular usage. This infrastructure should be generic and support a variety of ASAs (upper part of <xref target="ref_model" format="default"/>). It contains addressing and naming of autonomic nodes, discovery, negotiation and synchronization functions, distribution of information, reporting, feedback loops, and routing inside the ACP.</t>
        <t>The Generalized ACP (GACP) is the summary of all interactions of the ANI with other nodes and services. A specific implementation of the GACP is referred to here as the ACP and described in <xref target="RFC8994" format="default"/>.</t>
        <t>The use cases of "Autonomics" (such as self-management, self-optimization, etc.) are implemented as ASAs. They use the services and data structures of the underlying ANI, which should be self-managing. </t>

        <t>The Basic Operating System Functions (lower part of <xref target="ref_model" format="default"/>) include the normal OS (e.g., the network stack and security functions). </t>
        <t>Full Autonomic Network (AN) nodes have the full ANI, with the full functionality described in this document. At a later stage, the ANIMA Working Group may define a scope for constrained nodes with a reduced ANI and well-defined minimal functionality. These are currently out of scope. </t>
      </section>

	<section anchor="adjacency-table" numbered="true" toc="default">
        <name>Adjacency Table</name>

	<t>Autonomic Networking is based on direct interactions between devices of a domain. The ACP is normally constructed on a hop-by-hop basis. Therefore, many interactions in the ANI are based on the ANI adjacency table. There are interactions that provide input into the adjacency table and other interactions that leverage the information contained in it.</t>
        <t>The ANI adjacency table contains, at a minimum, information about adjacent autonomic nodes: Node-ID, IP address in data plane, IP address in ACP, domain, and certificate. An autonomic node maintains this adjacency table up to date. The adjacency table only contains information about other nodes that are capable of Autonomic Networking; non-autonomic nodes are normally not tracked here. 
However, the information is tracked independently of the status of the peer nodes; specifically, the adjacency table contains information about non-enrolled nodes of the same and other domains. The adjacency table may contain information about the validity and trust level of the adjacent autonomic nodes.</t>
        <t>The adjacency table is fed by the following inputs: 
        </t>
        <ul spacing="normal">
          <li>Link-local discovery: This interaction happens in the data plane, using IPv6 link-local addressing only, because this addressing type is itself autonomic. This way the node learns about all autonomic nodes around itself. The related Standards Track documents (<xref target="RFC8990" format="default"/>, <xref target="RFC8995" format="default"/>, and <xref target="RFC8994" format="default"/>) describe in detail how link-local discovery is used.</li>
          <li>Vendor redirect: A new device may receive information on where its home network is through a vendor-based Manufacturer Authorized Signing Authority (MASA) (see <xref target="masa" format="default"/>) redirect; this is typically a routable address.  </li>
          <li>Non-autonomic input: A node may be configured manually with an
	  autonomic peer; it could learn about autonomic nodes through DHCP
	  options, DNS, and other non-autonomic mechanisms. Generally, such
	  non-autonomic mechanisms require some administrator
	  intervention. The key purpose is to bypass a non-autonomic device
	  or network. As this pertains to new devices, it is covered in Appendices
	   <xref target="RFC8995" sectionFormat="bare" section="A"/> and <xref target="RFC8995" sectionFormat="bare" section="B"/> of <xref target="RFC8995"/>.</li>
        </ul>
        <t>The adjacency table defines the behavior of an autonomic node: 
        </t>
        <ul spacing="normal">
          <li>If the node has not bootstrapped into a domain (i.e., doesn't have a domain certificate), it rotates through all nodes in the adjacency table that claim to have a domain and will attempt bootstrapping through them, one by one. One possible response is a redirect via a vendor MASA, which will be entered into the adjacency table (see second bullet above). See <xref target="RFC8995" format="default"/> for details. </li>
          <li>If the adjacent node has the same domain, it will authenticate that adjacent node and, if successful, establish the ACP. See <xref target="RFC8994" format="default"/>.</li>
          <li>Once the node is part of the ACP of a domain, it will use GRASP <xref target="RFC8990" format="default"/> to find the registrar(s) of its domain and potentially other services.</li>
          <li>If the node is part of an ACP and has discovered at least one registrar in its domain via GRASP, it will start the join proxy ASA and act as a join proxy for neighboring nodes that need to be bootstrapped. See <xref target="join-assitant" format="default"/> for details. </li>
          <li>Other behaviors are possible, for example, establishing the ACP with devices of a subdomain or other domains. These will likely be controlled by Intent and are outside the scope of this document. Note that Intent is distributed through the ACP; therefore, a node can only adapt Intent-driven behavior once it has joined the ACP. At the moment, the ANIMA Working Group does not consider providing Intent outside the ACP; this can be considered later. </li>
        </ul>
        <t>Once a node has joined the ACP, it will also learn the ACP addresses of its adjacent nodes and add them to the adjacency table to allow for communication inside the ACP. Further autonomic domain interactions will now happen inside the ACP. At this moment, only negotiation and synchronization via GRASP <xref target="RFC8990" format="default"/> are defined. (Note that GRASP runs in the data plane, as an input in building the adjacency table, as well as inside the ACP.) </t>
        <t>Autonomic functions consist of ASAs. They run logically above the ANI and may use the adjacency table, the ACP, negotiation and synchronization through GRASP in the ACP, Intent, and other functions of the ANI. Since the ANI only provides autonomic interactions within a domain, autonomic functions can also use any other context on a node, specifically the global data plane. </t>
      </section>

	<section anchor="state-machine" numbered="true" toc="default">
        <name>State Machine</name>

        <t>Autonomic Networking applies during the full life cycle of a node. This section describes a state machine of an autonomic node throughout its life.</t>
        <t>A device is normally expected to store its domain-specific identity, the Local Device Identifier (LDevID) (see <xref target="cert" format="default"/>), in persistent storage to be available after a power-cycle event. For device types that cannot store the LDevID in persistent storage, a power-cycle event is effectively equivalent to a factory reset. </t>
        <section anchor="state-1" numbered="true" toc="default">
          <name>State 1: Factory Default</name>
          <t>An autonomic node leaves the factory in this state. In this state, the node has no domain-specific configuration, specifically no LDevID, and could be used in any particular target network. It does, however, have a vendor/manufacturer-specific ID, the Initial Device Identifier (IDevID) <xref target="IDevID" format="default"/>. Nodes without IDevID cannot be autonomically and securely enrolled into a domain; they require manual pre-staging, in which case the pre-staging takes them directly to state 2.</t>
          <t>Transitions:
          </t>
          <ul spacing="normal">

            <li>Bootstrap event: The device enrolls into a domain; as part of
	    this process it receives a domain identity (LDevID). If enrollment
	    is successful, the next state is state 2. See <xref target="RFC8995" format="default"/> for details on enrollment.</li>
            <li>Power-cycle event: The device loses all state tables. It remains in state 1.</li>
          </ul>
        </section>

		<section anchor="state-2" numbered="true" toc="default">
          <name>State 2: Enrolled</name>
          <t>An autonomic node is in the "enrolled" state if it has a domain identity (LDevID) and has currently no ACP channel up. It may have further configuration or state, for example, if it had been in state 3 before but lost all its ACP channels. The LDevID can only be removed from a device through a factory reset, which also removes all other state from the device. This ensures that a device has no stale domain-specific state when entering the "enrolled" state from state 1.</t>
          <t>Transitions:
          </t>
          <ul spacing="normal">
            <li>Joining ACP: The device establishes an ACP channel to an adjacent device. See <xref target="RFC8994" format="default"/> for details. Next state: 3.</li>
            <li>Factory reset: A factory reset removes all configuration and the domain identity (LDevID) from the device. Next state: 1.</li>
            <li>Power-cycle event: The device loses all state tables, but not its domain identity (LDevID). It remains in state 2.</li>
          </ul>
        </section>

		<section anchor="state-3" numbered="true" toc="default">
          <name>State 3: In ACP</name>
          <t>In this state, the autonomic node has at least one ACP channel to another device. The node can now participate in further autonomic transactions, such as starting ASAs (e.g., it must now enable the join proxy ASA, to help other devices to join the domain). Other conditions may apply to such interactions, for example, to serve as a join proxy, the device must first discover a bootstrap registrar. </t>
          <t>Transitions:
          </t>
          <ul spacing="normal">
            <li>Leaving ACP: The device drops the last (or only) ACP channel to an adjacent device. Next state: 2.</li>
            <li>Factory reset: A factory reset removes all configuration and the domain identity (LDevID) from the device. Next state: 1.</li>
            <li>Power-cycle event: The device loses all state tables but not its domain identity (LDevID). Next state: 2.</li>
          </ul>
        </section>
	
	</section>

		
</section>


<section anchor="ani" numbered="true" toc="default">
      <name>Autonomic Networking Infrastructure</name>
      <t>The ANI provides a layer of common functionality across an Autonomic Network. It provides the elementary functions and services, as well as extensions. An autonomic function, comprising of ASAs on nodes, uses the functions described in this section. </t>
      <section anchor="naming" numbered="true" toc="default">
        <name>Naming</name>
        <t>Inside a domain, each autonomic device should be assigned a unique name. The naming scheme should be consistent within a domain. Names are typically assigned by a registrar at bootstrap time and are persistent over the lifetime of the device. All registrars in a domain must follow the same naming scheme.</t>
        <t>In the absence of a domain-specific naming scheme, a default naming scheme should use the same logic as the addressing scheme discussed in <xref target="RFC8994" format="default"/>. The device name is then composed of a Registrar-ID (for example, taking a Media Access Control (MAC) address of the registrar) and a device number. An example name would then look like this: </t>
        <t>0123-4567-89ab-0001</t>

        <t>The first three fields are the MAC address, and the fourth field is the sequential number for the device.</t>
      </section>

	<section anchor="addressing" numbered="true" toc="default">
        <name>Addressing</name>
        <t>ASAs need to communicate with each other, using the autonomic addressing of the ANI of the node they reside on. This section describes the addressing approach of the ANI used by ASAs. </t>
        <t>Addressing approaches for the data plane of the network are outside the scope of this document. These addressing approaches may be configured and managed in the traditional way or negotiated as a service of an ASA. One use case for such an autonomic function is described in <xref target="RFC8992" format="default"/>.</t>
        <t>Autonomic addressing is a function of the ANI (lower part of <xref target="ref_model" format="default"/>), specifically the ACP. ASAs do not have their own addresses. They may use either API calls or the autonomic addressing scheme of the ANI. </t>
        <t>An autonomic addressing scheme has the following requirements: 
        </t>
        <ul spacing="normal">
          <li>Zero-touch for simple networks: Simple networks should have complete self-management of addressing and not require any central address management, tools, or address planning. </li>
          <li>Low-touch for complex networks: If complex networks require operator input for autonomic address management, it should be limited to high-level guidance only, expressed in Intent.</li>
          <li>Flexibility: The addressing scheme must be flexible enough for nodes to be able to move around and for the network to grow, split, and merge. </li>
          <li>Robustness: It should be as hard as possible for an administrator to negatively affect addressing (and thus connectivity) in the autonomic context. </li>
          <li>Stability: The addressing scheme should be as stable as possible. However, implementations need to be able to recover from unexpected address changes. </li>
          <li>Support for virtualization: Autonomic functions can exist either at the level of the physical network and physical devices or at the level of virtual machines, containers, and networks. In particular, autonomic nodes may support ASAs in virtual entities. The infrastructure, including the addressing scheme, should be able to support this architecture. </li>
          <li>Simplicity: The addressing scheme should be simple to make engineering easier and to give the human administrator an easy way to troubleshoot autonomic functions.  </li>
          <li>Scale: The proposed scheme should work in any network of any size. </li>
          <li>Upgradability: The scheme must be able to support different addressing concepts in the future. </li>
        </ul>
        <t>The proposed addressing scheme is described in the document "<xref target="RFC8994" format="title"/>" <xref target="RFC8994" format="default"/>.</t>
      </section>

	<section anchor="discovery" numbered="true" toc="default">
        <name>Discovery</name>
        <t>Traditionally, most of the information a node requires is provided through configuration or northbound interfaces.  An autonomic function should rely on such northbound interfaces minimally or not at all; therefore, it needs to discover peers and other resources in the network.  This section describes various discovery functions in an Autonomic Network.</t>
        <t>First, discovering nodes and their properties and capabilities is a core function to establish an autonomic domain is the mutual discovery of autonomic nodes, primarily adjacent nodes and secondarily off-link peers.  This may, in principle, either leverage existing discovery mechanisms or use new mechanisms tailored to the autonomic context.  An important point is that discovery must work in a network with no predefined topology, ideally no manual configuration of any kind, and with nodes starting up from factory condition or after any form of failure or sudden topology change.</t>
        <t>Second, network services such as Authentication, Authorization, and Accounting (AAA) should also be discovered and not configured.  Service discovery is required for such tasks.  An Autonomic Network can leverage existing service discovery functions, use a new approach, or use a mixture.</t>
        <t>Thus, the discovery mechanism could either be fully integrated with autonomic signaling (next section) or use an independent discovery mechanism such as DNS-based Service Discovery or the Service Location Protocol. This choice could be made independently for each ASA, although the infrastructure might require some minimal lowest common denominator (e.g., for discovering the security bootstrap mechanism or the source of information distribution (<xref target="info-distri" format="default"/>)).</t>
        <t>Phase 1 of Autonomic Networking uses GRASP <xref target="RFC8990" format="default"/> for discovery.</t>
      </section>

	<section anchor="negotiation" numbered="true" toc="default">
        <name>Signaling between Autonomic Nodes</name>
        <t>Autonomic nodes must communicate with each other, for example, to negotiate and/or synchronize technical objectives (i.e., network parameters) of any kind and complexity. This requires some form of signaling between autonomic nodes. Autonomic nodes implementing a specific use case might choose their own signaling protocol, as long as it fits the overall security model. However, in the general case, any pair of autonomic nodes might need to communicate, so there needs to be a generic protocol for this. A prerequisite for this is that autonomic nodes can discover each other without any preconfiguration, as mentioned above. To be generic, discovery and signaling must be able to handle any sort of technical objective, including ones that require complex data structures. The document "<xref target="RFC8990" format="title"/>" <xref target="RFC8990" format="default"/> describes more detailed requirements for discovery, negotiation, and synchronization in an Autonomic Network. 
It also defines a protocol, called GRASP, for this purpose; GRASP includes an integrated but optional discovery process.</t>
        <t>GRASP is normally expected to run inside the ACP (see <xref target="acp" format="default"/>) and to depend on the ACP for security.
			It may run insecurely for a short time during bootstrapping.</t>
        <t>An autonomic node will normally run a single instance of GRASP, used by multiple ASAs. However, scenarios where multiple instances of GRASP
			run in a single node, perhaps with different security properties, are not excluded. </t>
      </section>
		
	<section anchor="routing" numbered="true" toc="default">
        <name>Routing</name>
        <t>All autonomic nodes in a domain must be able to communicate with
        each other, and in later phases, they must also be able to communicate
        with autonomic nodes outside their own domain.  Therefore, an
        ACP relies on a routing function. For Autonomic
        Networks to be interoperable, they must all support one common routing
        protocol. </t>
        <t>The routing protocol is defined in the ACP document <xref target="RFC8994" format="default"/>.</t>
      </section>

	<section anchor="acp" numbered="true" toc="default">
        <name>Autonomic Control Plane</name>

        <t>The ACP carries the control protocols in an Autonomic Network. In the architecture described in this document, it is implemented as an overlay network. The document "<xref target="RFC8994" format="title"/>" <xref target="RFC8994" format="default"/> describes the implementation details suggested in this document. This document uses the term "overlay" to mean a set of point-to-point adjacencies congruent with the underlying interconnection topology. The terminology may not be aligned with a common usage of the term "overlay" in the routing context. See <xref target="RFC8368" format="default"/> for uses cases for the ACP. </t>
      </section>

	<section anchor="info-distri" numbered="true" toc="default">
        <name>Information Distribution (*)</name>
        <t>Certain forms of information require distribution across an autonomic domain. The distribution of information runs inside the ACP. For example, Intent is distributed across an autonomic domain, as explained in <xref target="RFC7575" format="default"/>.</t>
        <t>Intent is the policy language of an Autonomic Network (see also <xref target="intent" format="default"/>). It is a high-level policy and should change only infrequently (order of days). Therefore, information such as Intent should be simply flooded to all nodes in an autonomic domain, and there is currently no perceived need to have more targeted distribution methods. Intent is also expected to be monolithic and flooded as a whole. One possible method for distributing Intent, as well as other forms of data, is discussed in <xref target="I-D.ietf-anima-grasp-distribution" format="default"/>. Intent and information distribution are not part of the ANIMA Working Group charter. </t>
      </section>

</section>

<section anchor="trust" numbered="true" toc="default">
      <name>Security and Trust Infrastructure</name>
      <t>An Autonomic Network is self-protecting. All protocols are secure by default, without the requirement for the administrator to explicitly configure security, with the exception of setting up a PKI infrastructure. </t>
      <t>Autonomic nodes have direct interactions between themselves, which must be secured. Since an Autonomic Network does not rely on configuration, it is not an option to configure, for example, pre-shared keys. A trust infrastructure such as a PKI infrastructure must be in place. This section describes the principles of this trust infrastructure. In this first phase of Autonomic Networking, a device is either 1) within the trust domain and fully trusted or 2) outside the trust domain and fully untrusted.</t>
      <t>The default method to automatically bring up a trust infrastructure is defined in the document "<xref target="RFC8995" format="title" />" <xref target="RFC8995" format="default" />. The ASAs required for this enrollment process are described in <xref target="specific-asas" format="default"/>. An autonomic node must implement the enrollment and join proxy ASAs. The registrar ASA may be implemented only on a subset of nodes. </t>
      <section anchor="pki" numbered="true" toc="default">
        <name>Public Key Infrastructure</name>
        <t>An autonomic domain uses a PKI model. The root of trust is a Certification Authority (CA). A registrar acts as a Registration Authority (RA). </t>
        <t>A minimum implementation of an autonomic domain contains one CA, one registrar, and network elements.</t>
      </section>

	<section anchor="cert" numbered="true" toc="default">
        <name>Domain Certificate</name>
        <t>Each device in an autonomic domain uses a domain certificate (LDevID) to prove its identity. A new device uses its manufacturer-provided certificate (IDevID) during bootstrap to obtain a domain certificate. <xref target="RFC8995" format="default"/> describes how a new device receives a domain certificate and defines the certificate format. </t>
      </section>
	
	<section anchor="masa" numbered="true" toc="default">
        <name>MASA</name>
        <t>The Manufacturer Authorized Signing Authority (MASA) is a trusted service for bootstrapping devices.  The purpose of the MASA is to provide ownership tracking of devices in a domain.  The MASA provides audit, authorization, and ownership tokens to the registrar during the bootstrap process to assist in the authentication of devices attempting to join an autonomic domain and to allow a joining device to validate whether it is joining the correct domain.  The details for MASA service, security, and usage are defined in <xref target="RFC8995" format="default"/>. </t>
      </section>

	<section anchor="sub-domains" numbered="true" toc="default">
        <name>Subdomains (*)</name>
        <t>By default, subdomains are treated as different domains. This implies no trust between a domain and its subdomains and no trust between subdomains of the same domain. Specifically, no ACP is built, and Intent is valid only for the domain it is defined for explicitly. </t>
        <t>In the ANIMA Working Group charter, alternative trust models should be defined, for example, to allow full or limited trust between domain and subdomain.</t>
      </section>
		
	<section anchor="cross-domain" numbered="true" toc="default">
        <name>Cross-Domain Functionality (*)</name>
        <t>By default, different domains do not interoperate, no ACP is built, and no trust is implied between them. </t>
        <t>In the future, models can be established where other domains can be trusted in full or for limited operations between the domains. </t>
      </section>
					
</section>

<section anchor="asa" numbered="true" toc="default">
      <name>Autonomic Service Agents (ASAs)</name>
      <t>This section describes how autonomic services run on top of the ANI.  </t>
      <section anchor="asa-general" numbered="true" toc="default">
        <name>General Description of an ASA</name>
        <t>An ASA is defined in <xref target="RFC7575" format="default"/> as "An agent implemented on an autonomic node
that implements an autonomic function, either in part (in the case of
a distributed function) or whole". Thus, it is a process that makes use
of the features provided by the ANI to achieve its own goals, usually including
interaction with other ASAs via GRASP <xref target="RFC8990" format="default"/> or otherwise.
Of course, it also interacts with the specific targets of its function, using
any suitable mechanism.
Unless its function is very simple, the ASA will need to handle overlapping asynchronous operations. It may therefore be a quite
complex piece of software in its own right, forming part of the application layer
above the ANI. ASA design guidelines are available in <xref target="I-D.ietf-anima-asa-guidelines" format="default"/>.</t>
        <t>Thus, we can distinguish at least three classes of ASAs:
</t>
        <ul spacing="normal">
          <li>Simple ASAs with a small footprint that could run anywhere.</li>
          <li>Complex, possibly multi-threaded ASAs that have a significant resource requirement and will only
    run on selected nodes.</li>
          <li>A few 'infrastructure ASAs' that use basic ANI features in support of the ANI itself,
    which must run in all autonomic nodes.
    These are outlined in the following sections.</li>
        </ul>
        <t>Autonomic nodes, and therefore their ASAs, know their own capabilities and restrictions, derived from hardware, firmware, or pre-installed software; they are "self-aware". </t>
        <t>The role of an autonomic node depends on Intent and on the surrounding network behaviors, which may include forwarding behaviors, aggregation properties, topology location, bandwidth,
tunnel or translation properties, etc. For example, a node may decide to act as a backup node for a neighbor, if its capabilities allow it to do so. </t>

        <t>Following an initial discovery phase, the node's properties and those of its neighbors are the foundation of the behavior of a specific node. A node and its ASAs have no pre-configuration for the particular network in which they are installed.</t>
        <t>Since all ASAs will interact with the ANI, they will depend on appropriate application
programming interfaces (APIs). It is desirable that ASAs are portable between operating
systems, so these APIs need to be universal.
An API for GRASP is described in <xref target="RFC8991" format="default"/>. </t>
        <t>ASAs will, in general, be designed and coded by experts in a particular technology
and use case, not by experts in the ANI and its components. Also, they
may be coded in a variety of programming languages, in particular, languages
that support object constructs as well as traditional variables and structures. The APIs
should be designed with these factors in mind.</t>
        <t>It must be possible to run ASAs as non-privileged (user space) processes except for those
(such as the infrastructure ASAs) that necessarily require kernel privilege. Also, it is
highly desirable that ASAs can be dynamically loaded on a running node.</t>
        <t>Since autonomic systems must be self-repairing, it is of great importance that ASAs are
coded using robust programming techniques. All runtime error conditions must be caught,
leading to suitable minimally disruptive recovery actions, but a complete restart of the ASA must also be considered.
Conditions such as discovery failures or negotiation failures must be treated as routine,
with the ASA retrying the failed operation, preferably with an exponential back-off
in the case of persistent errors. When multiple threads are started within an ASA,
these threads must be monitored for failures and hangups, and appropriate action taken.
Attention must be given to garbage collection, so that ASAs never run out of resources.
There is assumed to be no human operator; again, in the worst case, every ASA must
be capable of restarting itself. </t>
        <t>ASAs will automatically benefit from the security provided by the ANI, specifically
by the ACP and by GRASP. However, beyond that, they are responsible for their own security,
especially when communicating with the specific targets of their function. Therefore,
the design of an ASA must include a security analysis beyond 'use ANI security'. </t>
      </section>
	
	<section anchor="asa-life-cycle" numbered="true" toc="default">
        <name>ASA Life-Cycle Management</name>
        <t>ASAs operating on a given ANI may come from different providers and pursue different objectives. Management of ASAs and their interactions with the ANI should follow the same operating principles and thus comply to a generic life-cycle management model.</t>
        <t>The ASA life cycle provides standard processes to:
        </t>
        <ul spacing="normal">
          <li>install ASA: copy the ASA code onto the node and start it.</li>
          <li>deploy ASA: associate the ASA instance with a (some) managed network device(s) (or network function).</li>
          <li>control ASA execution: when and how an ASA executes its control loop.</li>
        </ul>

        <t>This life cycle will also define which interactions ASAs have with the ANI in between the different states. The noticeable interactions are:
        </t>
        <ul spacing="normal">
          <li>Self-description of ASA instances at the end of deployment: Its format needs to define the information required for the management of ASAs by ANI entities.</li>
          <li>Control of the ASA control loop during the operation: Signaling has to carry formatted messages to control ASA execution (at least starting and stopping the control loop).</li>
        </ul>
      </section>
	
	<section anchor="specific-asas" numbered="true" toc="default">

        <name>Specific ASAs for the Autonomic Networking Infrastructure</name>
        <t>The following functions provide essential, required functionality in an Autonomic Network and are therefore mandatory to implement on unconstrained autonomic nodes. They are described here as ASAs that include the underlying infrastructure components, but implementation details might vary.</t>

        <t>The first three (pledge, join proxy, join registrar) support together the trust enrollment process
  described in <xref target="trust" format="default"/>. For details see <xref target="RFC8995" format="default"/>.</t>
        <section anchor="enrollment" numbered="true" toc="default">
          <name>Enrollment ASAs</name>
          <section anchor="enrollment-pledge" numbered="true" toc="default">
            <name>The Pledge ASA</name>
            <t>This ASA includes the function of an autonomic node that bootstraps into the domain with the help of a join proxy ASA (see below). Such a node is known as a pledge during the enrollment process. This ASA must be installed by default on all nodes that require an autonomic zero-touch bootstrap.</t>
          </section>

		<section anchor="join-assitant" numbered="true" toc="default">
            <name>The Join Proxy ASA</name>

            <t>This ASA includes the function of an autonomic node that helps non-enrolled, adjacent devices to enroll into the domain. This ASA must be installed on all nodes, although only one join proxy needs to be active on a given LAN. See also <xref target="RFC8995" format="default"/>.</t>
          </section>

		<section anchor="enrollment-registrar" numbered="true" toc="default">
            <name>The Join Registrar ASA</name>
            <t>This ASA includes the Join Registrar function in an Autonomic Network. This ASA does not need to be installed on all nodes, but only on nodes that implement the Join Registrar function.</t>
          </section>

		</section>
        <section anchor="acp-asa" numbered="true" toc="default">
          <name>ACP ASA</name>
          <t>This ASA includes the ACP function in an Autonomic Network. In particular, it acts to discover other potential ACP nodes and to support the establishment and teardown of ACP channels. This ASA must be installed on all nodes. For details, see <xref target="acp" format="default"/> and <xref target="RFC8994" format="default"/>.</t>
        </section>
		
		<section anchor="intent-asa" numbered="true" toc="default">
          <name>Information Distribution ASA (*)</name>
          <t>This ASA is currently out of scope in the ANIMA Working Group charter and is provided here only as background information.</t>
          <t>This ASA includes the information distribution function in an Autonomic Network. In particular, it acts to announce the availability of Intent and other information to all other autonomic nodes. This ASA does not need to be installed on all nodes, but only on nodes that implement the information distribution function. For details, see <xref target="info-distri" format="default"/>.</t>
          <t>Note that information distribution can be implemented as a function in any ASA. See <xref target="I-D.ietf-anima-grasp-distribution" format="default"/> for more details on how information is suggested to be distributed.</t>
        </section>

	</section>

</section>

<section anchor="management" numbered="true" toc="default">
      <name>Management and Programmability</name>
      <t>This section describes how an Autonomic Network is managed and programmed.</t>
      <section anchor="management-general" numbered="true" toc="default">
        <name>Managing a (Partially) Autonomic Network</name>
        <t>Autonomic management usually coexists with traditional management methods in most networks. Thus, autonomic behavior will be defined for individual functions in most environments. Examples of overlap are:
</t>
        <ul spacing="normal">
          <li>Autonomic functions can use traditional methods and protocols (e.g., SNMP and the Network Configuration Protocol (NETCONF)) to perform management tasks, inside and outside the ACP.</li>
          <li>Autonomic functions can conflict with behavior enforced by the same traditional methods and protocols.</li>
          <li>Traditional functions can use the ACP, for example, if reachability on the data plane is not (yet) established. </li>
        </ul>
        <t>The autonomic Intent is defined at a high level of abstraction. However, since it is necessary to address individual managed elements, autonomic management needs to communicate in lower-level interactions (e.g., commands and requests). For example, it is expected that the configuration of such elements be performed using NETCONF and YANG modules as well as the monitoring be executed through SNMP and MIBs.</t>
        <t>Conflict can occur between autonomic default behavior, autonomic Intent, and traditional management methods. Conflict resolution is achieved in autonomic management through prioritization <xref target="RFC7575" format="default"/>. The rationale is that manual and node-based management have a higher priority than autonomic management. Thus, the autonomic default behavior has the lowest priority, then comes the autonomic Intent (medium priority), and, finally, the highest priority is taken by  node-specific network management methods, such as the use of command-line interfaces. </t>
      </section>

	<section anchor="intent" numbered="true" toc="default">
        <name>Intent (*)</name>
        <t>Intent is not covered in the current implementation specifications. This section discusses a topic for further research.</t>
        <t>This section gives an overview of Intent and how it is managed. Intent and Policy-Based Network Management (PBNM) is already described inside the IETF (e.g., Policy Core Information Model (PCIM)) and in other Standards Development Organizations (SDOs) (e.g., the Distributed Management Task Force (DMTF)). </t>
        <t>Intent can be described as an abstract, declarative, high-level policy used to operate an autonomic domain, such as an enterprise network <xref target="RFC7575" format="default"/>. Intent should be limited to high-level guidance only; thus, it does not directly define a policy for every network element separately. </t>
        <t>Intent can be refined to lower-level policies using different approaches. This is expected in order to adapt the Intent to the capabilities of managed devices. Intent may contain role or function information, which can be translated to specific nodes <xref target="RFC7575" format="default"/>. One of the possible refinements of the Intent is using Event-Condition-Action (ECA) rules.</t>
        <t>Different parameters may be configured for Intent. These parameters are usually provided by the human operator. Some of these parameters can influence the behavior of specific autonomic functions as well as the way the Intent is used to manage the autonomic domain. </t>
        <t>Intent is discussed in more detail in <xref target="I-D.du-anima-an-intent" format="default"/>. Intent as well as other types of information are distributed via GRASP; see <xref target="I-D.ietf-anima-grasp-distribution" format="default"/>.</t>
      </section>
		
	<section anchor="reporting" numbered="true" toc="default">
        <name>Aggregated Reporting (*)</name>
        <t>Aggregated reporting is not covered in the current implementation specifications. This section discusses a topic for further research.</t>
        <t>An Autonomic Network should minimize the need for human intervention. In terms of how the network should behave, this is done through an autonomic Intent provided by the human administrator. In an analogous manner, the reports that describe the operational status of the network should aggregate the information produced in different network elements in order to present the effectiveness of autonomic Intent enforcement. Therefore, reporting in an Autonomic Network should happen on a network-wide basis <xref target="RFC7575" format="default"/>. </t>
        <t>Multiple simultaneous events can occur in an Autonomic Network in the same way they can happen in a traditional network. However, when reporting to a human administrator, such events should be aggregated to avoid notifications about individual managed elements. In this context, algorithms may be used to determine what should be reported (e.g., filtering), how it should be reported, and how different events are related to each other. Besides that, an event in an individual element can be compensated by changes in other elements to maintain a network-wide target that is described in the autonomic Intent. </t>
        <t>Reporting in an Autonomic Network may be at the same abstraction level as Intent. In this context, the aggregated view of the current operational status of an Autonomic Network can be used to switch to different management modes. Despite the fact that autonomic management should minimize the need for user intervention, some events may need to be addressed by the actions of a human administrator.</t>
      </section>

	<section anchor="feedback" numbered="true" toc="default">
        <name>Feedback Loops to NOC (*)</name>
        <t>Feedback loops are required in an Autonomic Network to allow the intervention of a human administrator or central control systems while maintaining a default behavior. Through a feedback loop, an administrator must be prompted with a default action and has the possibility to acknowledge or override the proposed default action. </t>
        <t>Unidirectional notifications to the Network Operations Center (NOC) that do not propose any default action and do not allow an override as part of the transaction are considered like traditional notification services, such as syslog. They are expected to coexist with autonomic methods but are not covered in this document.</t>
      </section>

	<section anchor="control-loops" numbered="true" toc="default">
        <name>Control Loops (*)</name>
        <t>Control loops are not covered in the current implementation specifications. This section discusses a topic for further research. </t>
        <t>Control loops are used in Autonomic Networking to provide a generic
   mechanism to enable the autonomic system to adapt (on its own) to
   various factors that can change the goals that the Autonomic Network
   is trying to achieve or how those goals are achieved. For example,
   as user needs, business goals, and the ANI itself changes, self-
   adaptation enables the ANI to change the services and resources it
   makes available to adapt to these changes.</t>
        <t>Control loops operate to continuously observe and collect data
   that enables the autonomic management system to understand changes
   to the behavior of the system being managed and then provide
   actions to move the state of the system being managed toward a
   common goal. Self-adaptive systems move decision making from
   static, pre-defined commands to dynamic processes computed at
   runtime.</t>
        <t>Most autonomic systems use a closed control loop with feedback.
   Such control loops should be able to be dynamically changed at
   runtime to adapt to changing user needs, business goals, and
   changes in the ANI.</t>
      </section>
	
	<section anchor="apis" numbered="true" toc="default">
        <name>APIs (*)</name>
        <t><xref target="RFC8991" format="default"/> defines a conceptual outline for an API for the GeneRic Autonomic Signaling Protocol (GRASP). This conceptual API is designed for ASAs to communicate with other ASAs through GRASP. Full Standards Track API specifications are not covered in the current implementation specifications. </t>
        <t>Most APIs are static, meaning that they are pre-defined and
   represent an invariant mechanism for operating with data. An
   Autonomic Network should be able to use dynamic APIs in addition
   to static APIs.  </t>
        <t>A dynamic API retrieves data using a generic
   mechanism and then enables the client to navigate the retrieved
   data and operate on it. Such APIs typically use introspection 
   and/or reflection. Introspection enables software to examine the
   type and properties of an object at runtime, while reflection
   enables a program to manipulate the attributes, methods, and/or
   metadata of an object.</t>
        <t>APIs must be able to express and preserve the semantics of 
   data models. For example, software contracts <xref target="Meyer97" format="default"/> are
   based on the principle that a software-intensive system, such as
   an Autonomic Network, is a set of communicating components whose
   interaction is based on precisely defined specifications of the
   mutual obligations that interacting components must respect.
   This typically includes specifying:

        </t>
        <ul spacing="normal">
          <li>pre-conditions that must be satisfied before the method can
        start execution</li>
          <li>post-conditions that must be satisfied when the method has
        finished execution</li>
          <li>invariant attributes that must not change during the execution
        of the method</li>
        </ul>
      </section>
   
	<section anchor="data-model" numbered="true" toc="default">
        <name>Data Model (*)</name>
        <t>Data models are not covered in the current implementation specifications. This section discusses a topic for further research. </t>
        <t>The following definitions of "data model" and "information model" are adapted from <xref target="I-D.ietf-supa-generic-policy-data-model" format="default"/>.</t>
        <t>An information model is a representation of concepts of interest 
   to an environment in a form that is independent of data repository, 
   data definition language, query language, implementation language, 
   and protocol. In contrast, a data model is a representation of
   concepts of interest to an environment in a form that is dependent
   on data repository, data definition language, query language,
   implementation language, and protocol.</t>
        <t>The utility of an information model is to define objects and their
   relationships in a technology-neutral manner. This forms a
   consensual vocabulary that the ANI and ASAs can use. A data model
   is then a technology-specific mapping of all or part of the
   information model to be used by all or part of the system.</t>
        <t>A system may have multiple data models. Operational Support Systems,
   for example, typically have multiple types of repositories, such as
   SQL and NoSQL, to take advantage of the different properties of
   each. If multiple data models are required by an autonomic system,
   then an information model should be used to ensure that the
   concepts of each data model can be related to each other without
   technological bias.</t>
        <t>A data model is essential for certain types of functions, such as
   a  Model-Reference Adaptive Control Loop (MRACL). More generally, a data model can be used to define the
   objects, attributes, methods, and relationships of a software
   system (e.g., the ANI, an autonomic node, or an ASA). A data
   model can be used to help design an API, as well as any language
   used to interface to the Autonomic Network.</t>
      </section>

</section>
		
		<section anchor="coordination" numbered="true" toc="default">
      <name>Coordination between Autonomic Functions (*)</name>
      <t>Coordination between autonomic functions is not covered in the current implementation specifications. This section discusses a topic for further research. </t>
      <section numbered="true" toc="default">
        <name>Coordination Problem (*)</name>
        <t>Different autonomic functions may conflict in setting certain parameters. For example, an energy efficiency function may want to shut down a redundant link, while a load-balancing function would not want that to happen. The administrator must be able to understand and resolve such interactions to steer Autonomic Network performance to a given (intended) operational point.</t>
        <t>Several interaction types may exist among autonomic functions, for example: 
        </t>
        <ul spacing="normal">
          <li>Cooperation: An autonomic function can improve the behavior or performance of another autonomic function, such as a traffic forecasting function used by a traffic allocation function. </li>
          <li>Dependency: An autonomic function cannot work without another one being present or accessible in the Autonomic Network.</li>
          <li>Conflict: A metric value conflict is a conflict where one metric is influenced by parameters of different autonomic functions. A parameter value conflict is a conflict where one parameter is modified by different autonomic functions. </li>
        </ul>

        <t>Solving the coordination problem beyond one-by-one cases can rapidly become intractable for large networks. Specifying a common functional block on coordination is a first step to address the problem in a systemic way. The coordination life cycle consists of three states: 
        </t>
        <ul spacing="normal">
          <li>At build-time, a "static interaction map" can be constructed on the relationship of functions and attributes. This map can be used to (pre-)define policies and priorities for identified conflicts.</li>
          <li>At deploy-time, autonomic functions are not yet active/acting on the network. A "dynamic interaction map" is created for each instance of each autonomic function on a per-resource basis, including the actions performed and their relationships. This map provides the basis to identify conflicts that will happen at runtime, categorize them, and plan for the appropriate coordination strategies and mechanisms.</li>
          <li>At runtime, when conflicts happen, arbitration is driven by the coordination strategies. Also, new dependencies can be observed and inferred, resulting in an update of the dynamic interaction map and adaptation of the coordination strategies and mechanisms.</li>
        </ul>
        <t>Multiple coordination strategies and mechanisms exist and can be devised. The set ranges from basic approaches (such as random process or token-based process), to approaches based on time separation and hierarchical optimization, to more complex approaches (such as multi-objective optimization and other control theory approaches and algorithm families).</t>

      </section>
      <section numbered="true" toc="default">
        <name>Coordination Functional Block (*)</name>

        <t>A common coordination functional block is a desirable component of the ANIMA reference model. It provides a means to ensure network properties and predictable performance or behavior, such as stability and convergence, in the presence of several interacting autonomic functions.</t>
        <t>A common coordination function requires:
        </t>
        <ul spacing="normal">
          <li>A common description of autonomic functions, their attributes, and life cycle.</li>
          <li>A common representation of information and knowledge (e.g., interaction maps).</li>
          <li>A common "control/command" interface between the coordination "agent" and the autonomic functions. </li>
        </ul>
        <t>Guidelines, recommendations, or BCPs can also be provided for aspects pertaining to the coordination strategies and mechanisms.</t>
      </section>
    </section>

		<section anchor="security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>In this section, we distinguish outsider and insider attacks. In an outsider attack, all network elements and protocols are securely managed and operating, and an outside attacker can sniff packets in transit, inject, and replay packets. In an insider attack, the attacker has access to an autonomic node or other means (e.g., remote code execution in the node by exploiting ACP-independent vulnerabilities in the node platform) to produce arbitrary payloads on the protected ACP channels.</t>
      <t>If a system has vulnerabilities in the implementation or operation (configuration), an outside attacker can exploit such vulnerabilities to become an insider attacker.</t>
      <section numbered="true" toc="default">
        <name>Protection against Outsider Attacks</name>
        <t>Here, we assume that all systems involved in an Autonomic Network are secured and operated according to best current practices. These protection methods comprise traditional security implementation and operation methods (such as code security, strong randomization algorithms, strong passwords, etc.) as well as mechanisms specific to an Autonomic Network (such as a secured MASA service).</t>
        <t>Traditional security methods for both implementation and operation are outside the scope of this document.</t>
        <t>AN-specific protocols and methods must also follow traditional security methods, in that all packets that can be sniffed or injected by an outside attacker are:
</t>
        <ul spacing="normal">
          <li>protected against modification</li>
          <li>authenticated</li>
          <li>protected against replay attacks</li>
          <li>confidentiality protected (encrypted)</li>
        </ul>
          <t>In addition, the AN protocols should be robust against packet drops and man-in-the-middle attacks.</t>
        <t>How these requirements are met is covered in the AN Standards Track documents that define the methods used, specifically <xref target="RFC8990" format="default"/>, <xref target="RFC8994" format="default"/>, and <xref target="RFC8995" format="default"/>. </t>

        <t>Most AN messages run inside the cryptographically protected
	ACP. The unprotected AN messages outside the ACP are limited to a
	simple discovery method, defined in <xref target="RFC8990" sectionFormat="of" section="2.5.2"/>: the Discovery
	Unsolicited Link-Local (DULL) message, with detailed rules on its
	usage. </t>
        <t>If AN messages can be observed by a third party, they might reveal valuable information about network configuration, security precautions in use, individual users, and their traffic patterns. If encrypted, AN messages might still reveal some information via traffic analysis.  </t>
      </section>
      <section numbered="true" toc="default">
        <name>Risk of Insider Attacks</name>
        <t>An Autonomic Network consists of autonomic devices that form a distributed self-managing system.  Devices within a domain have credentials issued from a common trust anchor and can use them to create mutual trust.  This means that any device inside a trust domain can by default use all distributed functions in the entire autonomic domain in a malicious way.</t>
        <t>An inside attacker, or an outsider in the presence of protocol vulnerabilities or insecure operation, has the following generic ways to take control of an Autonomic Network: </t>
        <ul spacing="normal">
          <li>Introducing a fake device into the trust domain by subverting the authentication methods. This depends on the correct specification, implementation, and operation of the AN protocols.</li>
          <li>Subverting a device that is already part of a trust domain and modifying its behavior. This threat is not specific to the solution discussed in this document and applies to all network solutions.  </li>
          <li>Exploiting potentially yet unknown protocol vulnerabilities in the AN or other protocols. This is also a generic threat that applies to all network solutions.</li>
        </ul>
        <t>The above threats are, in principle, comparable to other solutions: in the presence of design, implementation, or operational errors, security is no longer guaranteed. However, the distributed nature of AN, specifically the ACP, increases the threat surface significantly. For example, a compromised device may have full IP reachability to all other devices inside the ACP and can use all AN methods and protocols. </t>
        <t>For the next phase of the ANIMA Working Group, it is therefore recommended to introduce a subdomain security model to reduce the attack surface and not expose a full domain to a potential intruder. Furthermore, additional security mechanisms on the ASA level should be considered for high-risk autonomic functions. </t>
      </section>
    </section>
		
		<section anchor="iana" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>This document has no IANA actions.</t>
    </section>
		

	</middle>
  <back>

<displayreference target="I-D.ietf-anima-asa-guidelines" to="ASA-GUIDELINES"/>
<displayreference target="I-D.du-anima-an-intent" to="ANIMA-INTENT"/>
<displayreference target="I-D.ietf-anima-grasp-distribution" to="GRASP-DISTRIB"/>
<displayreference target="I-D.ietf-supa-generic-policy-data-model" to="SUPA-DATA"/>

    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>

<reference anchor="RFC8995" target="https://www.rfc-editor.org/info/rfc8995">
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>

<author initials="M" surname="Pritikin" fullname="Max Pritikin">
    <organization/>
</author>

<author initials="M" surname="Richardson" fullname="Michael Richardson">
    <organization/>
</author>

<author initials="T" surname="Eckert" fullname="Toerless Eckert">
    <organization/>
</author>

<author initials="M" surname="Behringer" fullname="Michael Behringer">
    <organization/>
</author>

<author initials="K" surname="Watsen" fullname="Kent Watsen">
    <organization/>
</author>

<date month="May" year="2021"/>

</front>
<seriesInfo name="RFC" value="8995"/>
<seriesInfo name="DOI" value="10.17487/RFC8995"/>
</reference>

<reference anchor="RFC8994" target="https://www.rfc-editor.org/info/rfc8994">
<front>
<title>An Autonomic Control Plane (ACP)</title>

<author initials="T" surname="Eckert" fullname="Toerless Eckert" role="editor">
    <organization/>
</author>

<author initials="M" surname="Behringer" fullname="Michael Behringer" role="editor">
    <organization/>
</author>

<author initials="S" surname="Bjarnason" fullname="Steinthor Bjarnason">
    <organization/>
</author>

<date month="May" year="2021"/>

</front>
<seriesInfo name="RFC" value="8994"/>
<seriesInfo name="DOI" value="10.17487/RFC8994"/>
</reference>

<reference anchor="RFC8990" target="https://www.rfc-editor.org/info/rfc8990">
<front>
<title>GeneRic Autonomic Signaling Protocol (GRASP)</title>

<author initials="C" surname="Bormann" fullname="Carsten Bormann">
    <organization/>
</author>

<author initials="B" surname="Carpenter" fullname="Brian Carpenter" role="editor">
    <organization/>
</author>

<author initials="B" surname="Liu" fullname="Bing Liu" role="editor">
    <organization/>
</author>

<date month="May" year="2021"/>

</front>
<seriesInfo name="RFC" value="8990"/>
<seriesInfo name="DOI" value="10.17487/RFC8990"/>
</reference>


      <reference anchor="IDevID" target="https://1.ieee802.org/security/802-1ar">
        <front>
          <title>IEEE Standard for Local and metropolitan area networks - Secure Device Identity        
	  </title>
          <author>
            <organization>IEEE</organization>
          </author>
        </front>
        <seriesInfo name="IEEE" value="802.1AR"/>
      </reference>

      </references>

      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7575.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7576.xml"/>

<reference anchor="RFC8991" target="https://www.rfc-editor.org/info/rfc8991">
<front>
<title>GeneRic Autonomic Signaling Protocol Application Program Interface (GRASP API)</title>
<author initials="B" surname="Carpenter" fullname="Brian Carpenter">
  <organization/>
</author>
<author initials="B" surname="Liu" fullname="Bing Liu" role="editor">
  <organization/>
</author>
<author initials="W" surname="Wang" fullname="Wendong Wang">
  <organization/>
</author>
<author initials="X" surname="Gong" fullname="Xiangyang Gong">
  <organization/>
</author>
<date month="May" year="2021"/>
</front>
<seriesInfo name="RFC" value="8991"/>
<seriesInfo name="DOI" value="10.17487/RFC8991"/>
</reference>


        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-anima-asa-guidelines.xml"/>

        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.du-anima-an-intent.xml"/>

        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8368.xml"/>


<reference anchor="I-D.ietf-anima-grasp-distribution">
<front>
<title>Information Distribution over GRASP</title>

<author initials="B" surname="Liu" fullname="Bing Liu" role="editor">
    <organization/>
</author>

<author initials="X" surname="Xiao" fullname="Xun Xiao" role="editor">
    <organization/>
</author>

<author initials="A" surname="Hecker" fullname="Artur Hecker">
    <organization/>
</author>

<author initials="S" surname="Jiang" fullname="Sheng Jiang">
    <organization/>
</author>

<author initials="Z" surname="Despotovic" fullname="Zoran Despotovic">
    <organization/>
</author>

<author initials="B" surname="Carpenter" fullname="Brian Carpenter">
    <organization/>
</author>

<date month="March" day="8" year="2021"/>

</front>

<seriesInfo name="Internet-Draft" value="draft-ietf-anima-grasp-distribution-02"/>

</reference>


<reference anchor="RFC8992" target="https://www.rfc-editor.org/info/rfc8992">
<front>
<title>Autonomic IPv6 Edge Prefix Management in Large-Scale Networks
</title>
<author initials="S" surname="Jiang" fullname="Sheng Jiang" role="editor">
  <organization/>
</author>
<author initials="Z" surname="Du" fullname="Zongpeng Du">
  <organization/>
</author>
<author initials="B" surname="Carpenter" fullname="Brian Carpenter">
  <organization/>
</author>
<author initials="Q" surname="Sun" fullname="Qiong Sun">
  <organization/>
</author>
<date month="May" year="2021"/>
</front>
<seriesInfo name="RFC" value="8992"/>
<seriesInfo name="DOI" value="10.17487/RFC8992"/>
</reference>


        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-supa-generic-policy-data-model.xml"/>

        <reference anchor="Meyer97">
          <front>
            <title>Object-Oriented Software Construction (2nd edition)</title>
            <author initials="B." surname="Meyer"/>
            <date year="1997"/>
          </front>
<seriesInfo name="ISBN" value="978-0136291558"/>
<refcontent>Prentice Hall</refcontent>
        </reference>

      </references>
    </references>

		<section anchor="ack" numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>The following people provided feedback and input to this document:
      <contact fullname="Sheng Jiang"/>, <contact fullname="Roberta Maglione"/>, <contact fullname="Jonathan Hansford"/>, <contact fullname="Jason Coleman"/>, and <contact fullname="Artur Hecker"/>. Useful reviews were made by <contact fullname="Joel Halpern"/>, <contact fullname="Radia Perlman"/>, <contact fullname="Tianran Zhou"/>, and <contact fullname="Christian Hopps"/>.</t>
    </section>
				
		<section anchor="contributors" numbered="false" toc="default">
      <name>Contributors</name>
      <t>Significant contributions to this document were made by <contact fullname="John Strassner"/> (Huawei), <contact fullname="Bing Liu"/> 
      (Huawei), and <contact fullname="Pierre Peloso"/> (Nokia).</t>

    </section>
  </back>
</rfc>
