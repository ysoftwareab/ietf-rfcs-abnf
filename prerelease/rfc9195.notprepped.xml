<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>


<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="std" ipr="trust200902" docName="draft-ietf-netmod-yang-instance-file-format-21" number="9195" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" symRefs="true" sortRefs="true" version="3" consensus="true">


  <front>
    <title abbrev="YANG Instance Data">A File Format for YANG Instance Data</title>
    <seriesInfo name="RFC" value="9195"/>
    <author initials="B." surname="Lengyel" fullname="Balazs Lengyel">
      <organization abbrev="Ericsson">Ericsson</organization>
      <address>
	<postal>
  <street>Magyar Tudosok korutja 11</street>
          <city>Budapest</city>
          <country>Hungary</country>
          <code>1117</code>
	</postal>
        <email>balazs.lengyel@ericsson.com</email>
      </address>
    </author>
    <author fullname="Benoit Claise" initials="B." surname="Claise">
      <organization>Huawei</organization>
      <address>
        <email>benoit.claise@huawei.com</email>
      </address>
    </author>
    <date year="2022" month="February"/>
    <area>OPS</area>
    <workgroup>Netmod</workgroup>

<abstract>

      <t> 
        There is a need to document data defined in YANG models at design time, 
        implementation time, or when a live server is unavailable. 
        This document specifies a standard
        file format for YANG instance data, which follows the syntax and semantics 
        of existing YANG models and annotates it with metadata.
      </t>
    </abstract>
  </front>
  <middle>
    <section anchor="intro" numbered="true" toc="default">
      <name>Introduction</name>
      <t>
        There is a need to document data defined in YANG models when a live server is unavailable. 
        Data is often needed at design time, implementation time, or even later   
        when a live running server is unavailable.  
        To facilitate this offline delivery of data, this document specifies a standard
        format for YANG instance data sets and YANG instance data files.
        The format of the instance data set is defined by the "ietf-yang-instance-data"
        YANG module; see <xref target="instance_data_yam" format="default"/>.
        The YANG data model in this document conforms to the Network
        Management Datastore Architecture (NMDA) defined in <xref target="RFC8342" format="default"/>.
      </t>
      <t>The following is a list of already-implemented and potential use cases.
      </t>
      <ol spacing="normal" type="UC%d">
	<li anchor="uc1">Documentation of server capabilities</li>
        <li anchor="uc2">Preloading default configuration data</li>
        <li anchor="uc3">Documenting factory default settings</li>
        <li anchor="uc4">Storing the configuration of a device, e.g., for backup, archive, or 
            audit purposes</li>
        <li anchor="uc5">Storing diagnostics data</li>
        <li anchor="uc6">Allowing YANG instance data to potentially be carried within other inter-process communication (IPC) message formats</li>
        <li anchor="uc7">Default instance data used as part of a templating solution</li>
        <li anchor="uc8">Providing data examples in RFCs or internet drafts</li>
      </ol>
      <t><xref target="detailed_use_cases" format="default"/> describes the first three use 
        cases in detail. 
      </t>
      <t>
        There are  many and varied use cases where YANG instance data 
        could be used. This document does not limit future uses of instance data 
        sets, so specifying how and when to use YANG instance data 
        is out of scope for this document. It is anticipated that other
        documents will define specific use cases. Use cases are listed 
        only as examples.
      </t>
      <section anchor="terminology" numbered="true" toc="default">
        <name>Terminology</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
<dl>
	<dt>Instance Data:</dt><dd>A collection of instantiated data nodes.</dd>
        <dt>Instance Data Set:</dt><dd>A named set of data items annotated with metadata 
          that can be used as instance data in a YANG data tree.</dd>
        <dt>Instance Data File:</dt><dd>A file containing an instance data set formatted 
          according to the rules described in this document.</dd>
        <dt>Content-schema:</dt><dd>A set of YANG modules with their revision, supported 
          features, and deviations for which the instance data set contains instance data.</dd>
          <dt>Content-defining YANG Module:</dt><dd>An individual YANG module that is part of the content-schema.</dd>
</dl>	  
        <t>The term "server" is used as defined in <xref target="RFC8342" format="default"/>.</t>

      </section>
      <section numbered="true" toc="default">
        <name>Principles</name>
        <t>The following is a list of the basic principles of the instance data format:
        </t>
        <ol spacing="normal" type="P%d"><li>Two standard formats shall be defined based on the XML and 
              JSON encodings.</li>
          <li>Instance data shall reuse existing encoding rules for
              YANG-defined data.
            </li>
          <li>Metadata about the instance data set 
              (<xref target="instance_data_set_metadata" format="default"/>) shall be defined.</li>
          <li>A YANG instance data set shall be allowed to contain data 
              for multiple YANG modules.</li>
          <li>Instance data shall be allowed to contain configuration data, 
              state data, or a mix of the two.</li>
          <li>Partial data sets shall be allowed.</li>
          <li>The YANG instance data format shall be usable for any data for which   
              YANG module(s) are defined and available to the reader, independent 
              of whether the module is implemented by a server.</li>
          <li>It shall be possible to report the identity of the datastore with which the
            instance data set is associated.</li>
        </ol>
      </section>
      <section numbered="true" toc="default">
        <name>Delivery of Instance Data</name>
        <t>Instance data sets that are produced as 
            a result of some sort of specification or design effort
            may be available without the need for a live 
            server, e.g., via download from the vendor's website or in any other 
            way that product documentation is distributed.</t>
        <t>Other instance data sets may be read from or produced by the YANG 
            server itself, e.g., <xref target="uc5" format="none">UC5</xref> documenting diagnostic data.</t>
      </section>
      <section numbered="true" toc="default">
        <name>Data Life Cycle</name>
        <t>
              A YANG instance data set is created at a specific  
              point of time. If the data changes afterwards, the instance data set 
              will no longer represent the current data unless it is updated. 
              The current values may be
              retrieved at runtime via NETCONF/RESTCONF or 
              received, e.g., in YANG-Push notifications.               
        </t>
        <t>
              Whether the instance data changes and, if so, when and how
              should be described either in the instance data set's description
              statement or in some other implementation-specific manner.
        </t>
      </section>
    </section>
    <section anchor="instance_data_file_format" numbered="true" toc="default">
      <name>Instance Data File Format</name>
      <t>
        A YANG instance data file <bcp14>MUST</bcp14> contain a single instance data set and no
        additional data.
      </t>
      <t>The format of the instance data set is defined  by the 
        "ietf-yang-instance-data" YANG module.
        It is made up of a header part and content-data. 
        The header part carries metadata for the instance data set.
        The content-data, defined as an anydata data node, carries
        the instance data that the user wants to document and/or provide. 
        The syntax and semantics of content-data are defined by the content-schema.    
      </t>
      <t>Two formats are specified based on the XML and JSON YANG encodings. The 
        file formats are achieved by applying the respective XML and JSON 
        encoding rules for the YANG structure included in this document.
        Later, as other YANG encodings (e.g., CBOR) are defined, further 
        instance data formats may be specified.
      </t>
      <t>The content-data part <bcp14>MUST</bcp14> conform to the content-schema while allowing for the 
        exceptions listed below. The content-data part <bcp14>SHALL</bcp14> follow the 
        encoding rules defined in  <xref target="RFC7950" format="default"/> for XML and 
        <xref target="RFC7951" format="default"/> for JSON and <bcp14>MUST</bcp14> use UTF-8 character encoding.
        Content-data <bcp14>MAY</bcp14> include:
      </t>
      <ul spacing="normal">
        <li>metadata, as defined by <xref target="RFC7952" format="default"/>.</li>
        <li>origin metadata, as specified in 
          <xref target="RFC8526" format="default"/> and <xref target="RFC8527" format="default"/>.</li>
        <li>implementation-specific metadata relevant to individual 
            data nodes. Unknown metadata <bcp14>MUST</bcp14> be ignored by users of 
            instance data, allowing it to be used 
            later for other purposes.</li>
      </ul>
      <t>An instance data set <bcp14>MAY</bcp14> contain data for any number of 
        YANG modules; if needed, it <bcp14>MAY</bcp14> carry the complete configuration and state
        data for a server.
        Default values should be excluded where they do not provide 
        additional useful data.
      </t>
      <t>
        Configuration ("config true") and operational state data ("config false") 
        <bcp14>MAY</bcp14> be mixed in the instance data file.        
      </t>
      <t>
        Instance data files <bcp14>MAY</bcp14> contain partial data sets. This means "mandatory", 
        "min-elements", "require-instance true", "must", and "when" constraints <bcp14>MAY</bcp14> be violated.      
      </t>
      <t>The name of the instance data file <bcp14>SHOULD</bcp14> be of the following form (using ABNF notation <xref target="RFC5234" format="default"/>):
      </t>
      <sourcecode name="filename-abnf" type="abnf"><![CDATA[
   instance-data-set-name ["@" ( revision-date / timestamp ) ] 
                  ( ".xml" / ".json" )
]]></sourcecode>                        

<t>Examples include:</t>
<artwork><![CDATA[
      acme-router-modules.xml
      acme-router-modules@2018-01-25.xml
      acme-router-modules@2018-01-25T15_06_34_3+01_00.json
]]></artwork>
      <t>
        If the leaf "name" is present in the instance data header, 
        its value <bcp14>SHOULD</bcp14> be used for the "instance-data-set-name" in the filename.
        
        If the "revision-date" is present in the filename, it <bcp14>MUST</bcp14> conform to 
        the format of the revision-date leaf in the YANG model. 
        If the "revision-date" is present in both the filename and the
        instance data header, the revision date in the filename <bcp14>MUST</bcp14> be
        set to the latest revision date inside the instance data set.
        
        If the "timestamp" is present in the filename, it <bcp14>MUST</bcp14> conform to 
        the format of the timestamp leaf in the YANG model except for 
        replacing colons as described below. 
        If the "timestamp" is present in both the filename and the
        instance data header, the timestamp in the filename <bcp14>SHOULD</bcp14> be
        set to the timestamp inside the instance data set; any colons, 
        if present, shall be replaced by underscores.
      </t>


      <t anchor="instance_data_set_metadata">Metadata, information about the 
      data set itself, <bcp14>MUST</bcp14> be included. Some metadata items are 
      defined in the YANG module "ietf-yang-instance-data", but other items <bcp14>MAY</bcp14> 
      be used.</t>
      <t> 
      Metadata <bcp14>MUST</bcp14> include:
      </t>
      <ul empty="true" spacing="normal">
        <li>
          <ul spacing="normal">
            <li>Version of the YANG instance data format (if not explicitly present, the default value is used).</li>
          </ul>
        </li>
      </ul>
      <t>
      Metadata <bcp14>SHOULD</bcp14> include:
      </t>
      <ul empty="true" spacing="normal">
        <li>
          <ul spacing="normal">
            <li>Name of the data set.</li>
            <li>Content-schema specification (i.e., the "content-schema" node).</li>
            <li>Description of the instance data set. The description <bcp14>SHOULD</bcp14> 
            contain information on whether and how the data can change during 
            the lifetime of the server.
          </li>
            <li>An indication of whether default values are included. 
            The default handling uses the concepts defined in <xref target="RFC6243" format="default"/>;
            however, as only concepts are re-used, users of instance data sets
            do not need to support <xref target="RFC6243"/>.
          </li>
          </ul>
        </li>
      </ul>
      <section numbered="true" toc="default">
        <name>Specifying the Content Schema</name>
        <t>To properly understand and use an instance data set, the user needs to 
          know the content-schema. The content-schema can be specified either in external documents or within the instance data set. 
          In the latter case, one of the following methods <bcp14>MUST</bcp14> be used:
        </t>
        <dl spacing="normal">
          <dt>Inline method:</dt><dd>Include the needed information as part of the 
          instance data set.</dd>
          <dt>Simplified-inline method:</dt><dd>Include the needed information as part of 
            the instance data set; only the modules' name and revision-date are used.</dd>
          <dt>URI method:</dt><dd>Include a URI that references another YANG instance 
            data file. This instance data file will use the same content-schema
            as the referenced YANG instance data file (if you don't want to repeat the info again and again).</dd>
        </dl>
        <t>
          Additional methods, e.g., a YANG-package-based solution may be added later.
        </t>
        <t>Note that the specified content-schema only indicates the set of 
          modules that were used to define this YANG instance data set. 
          Sometimes instance data may be used for a server supporting a 
          different YANG module set (e.g., for the "Preloading default 
          configuration data" use case, <xref target="uc2" format="none">UC2</xref> in <xref target="intro" format="default"/>, the instance 
          data set may not be updated every time the YANG modules on the 
          server are updated).

          Whether an instance data set originally defined using a specific 
          content-schema is usable with another schema   
          depends on many factors, including the number of differences and the 
          compatibility between the original and the 
          other schema when considering modules, revisions, features, 
          deviations, the scope of the instance data, etc.  
        </t>
        <section numbered="true" toc="default">
          <name>Inline Method</name>
          <t>The "inline-yang-library" anydata data node carries instance data (conforming to 
            "ietf-yang-library@2019-01-04") <xref target="RFC8525" format="default"/> that specifies the content-defining YANG modules, including revision, 
            supported features, deviations, and any additional relevant data.   
            An example of the inline method is provided in <xref target="acme-router-modules-example" format="default"/>.
          </t>
        </section>
        <section numbered="true" toc="default">
          <name>Simplified-Inline Method</name>
          <t>The instance data set contains a list of content-defining YANG 
             modules, including the revision date for each. 
             Usage of this method implies that the modules are 
             used without any deviations and with all features 
             supported. YANG modules that are only required to satisfy 
             import-only dependencies <bcp14>MAY</bcp14> be excluded from the leaf-list.  
             If they are excluded, then the consumer of the instance data 
             set has to apply the YANG language rules to resolve the imports.
             An example of the simplified-inline method is provided in <xref target="read-only-acm-rules-example" format="default"/>.
          </t>
        </section>
        <section numbered="true" toc="default">
          <name>URI Method</name>
          <t>The "same-schema-as-file" leaf <bcp14>SHALL</bcp14> contain a URI that references another YANG 
            instance data file. The current instance data file will use the same  
            content-schema as the referenced file. 
          </t>
          <t>
            The referenced instance data file <bcp14>MAY</bcp14> have no content-data if it is 
            used solely for specifying the content-schema.  
          </t>
          <t>
            If a referenced instance data file is unavailable, the content-schema 
            is unknown.
          </t>
          <t>
            The URI method is advantageous when the user wants to avoid the 
            overhead of specifying the content-schema in each instance data 
            file -- for example, in <xref target="uc6" format="none">UC6</xref>, when the system creates a diagnostic file every minute to document the state of the server.  
          </t>
          <t>An example of the URI method is provided in <xref target="acme-router-netconf-diagnostics-example" format="default"/>.</t>
        </section>
      </section>
      <section anchor="examples" numbered="true" toc="default">
        <name>Examples</name>
        <section anchor="acme-router-modules-example" numbered="true" toc="default">
          <name>Documentation of Server Capabilities</name>
          <t>The example file acme-router-modules@2022-01-20.xml reflects <xref target="uc1" format="none">UC1</xref> in <xref target="intro" format="default"/>. 
            It provides a list of supported YANG modules and NETCONF capabilities for a server. 
            It uses the inline method to specify the content-schema.</t>
          <t>The example uses artwork folding <xref target="RFC8792" format="default"/>.</t>
          <figure anchor="acme-router-modules">
            <sourcecode name="acme-router-modules@2022-01-20.xml" type="xml"><![CDATA[
========== NOTE: '\' line wrapping per RFC 8792 ===========

<?xml version="1.0" encoding="UTF-8"?>
<instance-data-set xmlns=\
    "urn:ietf:params:xml:ns:yang:ietf-yang-instance-data">
  <name>acme-router-modules</name>
  <content-schema>
    <inline-yang-library>
      <modules-state \
        xmlns="urn:ietf:params:xml:ns:yang:ietf-yang-library">
        <module>
          <name>ietf-yang-library</name>
          <revision>2019-01-04</revision>
        </module>
        <module>
          <name>ietf-netconf-monitoring</name>
          <revision>2010-10-04</revision>
        </module>
      </modules-state>
    </inline-yang-library>
  </content-schema>
  <revision>
    <date>2020-10-23</date>
    <description>Initial version</description>
  </revision>
  <description>Defines the minimal set of modules that any \
      acme-router will contain. This minimal set will \ 
      only change when a new software release is \
      introduced.</description>
  <contact>info@acme.example.com</contact>
  <content-data>
    <modules-state \
        xmlns="urn:ietf:params:xml:ns:yang:ietf-yang-library">
      <module>
        <name>ietf-yang-library</name>
        <revision>2019-01-04</revision>
        <namespace>\
          urn:ietf:params:xml:ns:yang:ietf-yang-library\
        </namespace>
        <conformance-type>implement</conformance-type>
      </module>
      <module>
        <name>ietf-system</name>
        <revision>2014-08-06</revision>
       <namespace>urn:ietf:params:xml:ns:yang:ietf-system</namespace>
        <feature>sys:authentication</feature>
        <feature>sys:local-users</feature>
        <deviation>
          <name>acme-system-ext</name>
          <revision>2018-08-06</revision>
        </deviation>
        <conformance-type>implement</conformance-type>
      </module>
      <module>
        <name>ietf-netconf-monitoring</name>
        <revision>2010-10-04</revision>
        <namespace>\
          urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring\
        </namespace>
        <conformance-type>implement</conformance-type>
      </module>
      <module>
        <name>ietf-yang-types</name>
        <revision>2013-07-15</revision>
        <namespace>urn:ietf:params:xml:ns:yang:ietf-yang-types\
          </namespace>
        <conformance-type>import</conformance-type>
      </module>
      <module>
        <name>acme-system-ext</name>
        <revision>2018-08-06</revision>
        <namespace>\
          urn:rdns:acme.example.com:oammodel:acme-system-ext\
        </namespace>
        <conformance-type>implement</conformance-type>
      </module>
    </modules-state>
    <netconf-state \
        xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring">
      <capabilities>
        <capability>\
          urn:ietf:params:netconf:capability:validate:1.1\
        </capability>
      </capabilities>
    </netconf-state>
  </content-data>
</instance-data-set>
]]></sourcecode>
          </figure>
        </section>
        <section anchor="read-only-acm-rules-example" numbered="true" toc="default">
          <name>Preloading Default Configuration Data</name>
          <t>The example file read-only-acm-rules@2022-01-20.xml reflects <xref target="uc2" format="none">UC2</xref> in <xref target="intro" format="default"/>. 
            It provides a default rule set for a read-only operator role. 
            It uses the simplified-inline method for specifying the content-schema.</t>
          <figure anchor="read-only-acm-rules">
            <sourcecode name="read-only-acm-rules@2022-01-20.xml" type="xml"><![CDATA[
========== NOTE: '\' line wrapping per RFC 8792 =========== 

<?xml version="1.0" encoding="UTF-8"?>
<instance-data-set 
    xmlns="urn:ietf:params:xml:ns:yang:ietf-yang-instance-data">
  <name>read-only-acm-rules</name>
  <content-schema>
    <module>ietf-netconf-acm@2018-02-14</module>
  </content-schema>
  <revision>
    <date>2018-07-04</date>
    <description>Initial version</description>
  </revision>
  <description>Default access control rules for a read-only \
      role. This set of rules will only change when a new  \
      software release is introduced.</description>
  <content-data>
    <nacm xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-acm">
      <enable-nacm>true</enable-nacm>
      <read-default>deny</read-default>
      <exec-default>deny</exec-default>
      <rule-list>
        <name>read-only-role</name>
        <group>read-only-group</group>
        <rule>
          <name>read-all</name>
          <module-name>*</module-name>
          <access-operation>read</access-operation>
          <action>permit</action>
        </rule>
      </rule-list>
    </nacm>
  </content-data>
</instance-data-set>
]]></sourcecode>
          </figure>
        </section>
        <section anchor="acme-router-netconf-diagnostics-example" numbered="true" toc="default">
          <name>Storing Diagnostics Data</name>
          <t>The example file acme-router-netconf-diagnostics@2018-01-25T17_00_38Z.json 
            reflects <xref target="uc5" format="none">UC5</xref> in <xref target="intro" format="default"/>. 
            An instance data set that contains 
            statistics about the NETCONF server is produced by the server every 15 minutes. As a new set is produced periodically many times a day, a revision-date 
            would be useless; instead, a timestamp is included.</t>
          <figure anchor="acme-router-netconf-diagnostics">
            <sourcecode name="acme-router-netconf-diagnostics@2018-01-25T17_00_38Z.json" type=""><![CDATA[
========== NOTE: '\' line wrapping per RFC 8792 =========== 

{
  "ietf-yang-instance-data:instance-data-set": {
    "name": "acme-router-netconf-diagnostics", 
    "content-schema": {
      "same-schema-as-file": "file:///acme-diagnostics-schema.json"
    },
    "timestamp": "2018-01-25T17:00:38Z",
    "description":  ["NETCONF statistics, \
        The data may change at any time."], 
    "content-data": {
      "ietf-netconf-monitoring:netconf-state": {
        "statistics": {
          "netconf-start-time ": "2018-12-05T17:45:00Z",
          "in-bad-hellos ": "32",
          "in-sessions ": "397",
          "dropped-sessions ": "87",
          "in-rpcs ": "8711",
          "in-bad-rpcs ": "408",
          "out-rpc-errors ": "408",
          "out-notifications": "39007"
        }
      } 
    }   
  }  
}
]]></sourcecode>
          </figure>
        </section>
      </section>
    </section>
    <section anchor="instance_data_yam" numbered="true" toc="default">
      <name>YANG Instance Data Model</name>
      <section numbered="true" toc="default">
        <name>Tree Diagram</name>
        <t>
          The following tree diagram <xref target="RFC8340" format="default"/>
          provides an overview of the data model.
        </t>
        <sourcecode name="" type="yangtree"><![CDATA[
module: ietf-yang-instance-data
  structure instance-data-set:
    +--name?                string
    +--format-version?      string
    +--includes-defaults?   enumeration
    +--content-schema
    |  +--(content-schema-spec)?
    |     +--:(simplified-inline)
    |     |  +--module*                module-with-revision-date
    |     +--:(inline)
    |     |  +--inline-yang-library    <anydata>
    |     +--:(uri)
    |        +--same-schema-as-file?   inet:uri
    +--description*         string
    +--contact?             string
    +--organization?        string
    +--datastore?           ds:datastore-ref
    +--revision* [date]
    |  +--date           string
    |  +--description?   string
    +--timestamp?           yang:date-and-time
    +--content-data?        <anydata>
]]></sourcecode>
      </section>
      <section anchor="yang-model" numbered="true" toc="default">
        <name>YANG Model</name>
        <t>
             This YANG module imports typedefs from <xref target="RFC6991" format="default"/>, 
             <xref target="RFC6243" format="default"/>, 
             identities from <xref target="RFC8342" format="default"/>, and 
             the "structure" extension from <xref target="RFC8791" format="default"/>.
             It also references <xref target="RFC8525" format="default"/>.
        </t>
        <sourcecode name="ietf-yang-instance-data@2022-02-17.yang" type="yang" markers="true"><![CDATA[
module ietf-yang-instance-data {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-yang-instance-data";
  prefix yid;

  import ietf-yang-structure-ext {
    prefix sx;
    reference
      "RFC 8791: YANG Data Structure Extensions";
  }
  import ietf-datastores {
    prefix ds;
    reference
      "RFC 8342: Network Management Datastore Architecture (NMDA)";
  }
  import ietf-inet-types {
    prefix inet;
    reference
      "RFC 6991: Common YANG Data Types";
  }
  import ietf-yang-types {
    prefix yang;
    reference
      "RFC 6991: Common YANG Data Types";
  }
  import ietf-netconf-with-defaults {
    prefix ncwd;
    reference
      "RFC 6243: With-defaults Capability for NETCONF";
  }

  organization
    "IETF NETMOD Working Group";
  contact
    "WG Web:   <https://datatracker.ietf.org/wg/netmod/>
     WG List:  <mailto:netmod@ietf.org>

     Author:  Balazs Lengyel
        <mailto:balazs.lengyel@ericsson.com>

     Author:  Benoit Claise
        <mailto:benoit.claise@huawei.com>";
  description
    "The module defines the structure and content of YANG
     instance data sets.

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',
     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document
     are to be interpreted as described in BCP 14 (RFC 2119)
     (RFC 8174) when, and only when, they appear in all
     capitals, as shown here.

     Copyright (c) 2022 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Revised BSD License
     set forth in Section 4.c of the IETF Trust's
     Legal Provisions Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 9195
     (https://www.rfc-editor.org/info/rfc9195); see the RFC itself
     for full legal notices.";

  revision 2022-02-17 {
    description
      "Initial revision.";
    reference
      "RFC 9195: YANG Instance Data File Format";
  }

  typedef module-with-revision-date {
    type string {
      pattern '[a-zA-Z_][a-zA-Z0-9\-_.]*'
            + '(@\d{4}-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1]))?';
      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';
    }
    description
      "A type defining a module name and an optional revision
       date, e.g., ietf-yang-library@2019-01-04.";
  }

  sx:structure instance-data-set {
    description
      "A data structure to define a format for YANG instance
       data.  The majority of the YANG nodes provides metadata
       about the instance data; the instance data itself is
       contained only in the 'content-data' node.";
    leaf name {
      type string;
      description
        "An arbitrary name for the YANG instance data set.  This
         value is primarily used for descriptive purposes.  However,
         when the instance data set is saved to a file, then the
         filename MUST encode the name's value per Section 2
         of RFC 9195.";
    }
    leaf format-version {
      type string {
        pattern '\d{4}-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1])';
      }
      default "2022-01-20";
      description
        "The 'revision' of the 'ietf-yang-instance-data' module
         used to encode this 'instance-data-set'.";
    }
    leaf includes-defaults {
      type ncwd:with-defaults-mode;
      default "report-all";
      description
        "Indicates how data nodes with default values are
         represented for all data nodes contained in the
         instance-data-set.

         It uses the same definitions as per Section 3 of RFC 6243
         but applied in the context of an instance data file rather
         than a NETCONF request using the <with-defaults>
         parameter.

         For JSON files, the encoding of the 'report-all-tagged'
         option is as defined in Section 4.8.9 of RFC 8040.";
      reference
        "RFC 6243: With-defaults Capability for NETCONF";
    }
    container content-schema {
      description
        "The content schema (i.e., YANG modules) used to create
         the instance data set.
         If not present, the user needs to obtain the information
         through external documents.";
      choice content-schema-spec {
        description
          "Specification of the content-schema.";
        case simplified-inline {
          leaf-list module {
            type module-with-revision-date;
            min-elements 1;
            description
              "The list of content-defining YANG modules.

               The value SHALL start with the module name.
               If the module contains a revision statement, the
               revision date SHALL be included in the leaf-list
               entry, e.g., ietf-yang-library@2019-01-04.

               Usage of this leaf-list implies the modules are
               used without any deviations and with all features
               supported. Multiple revisions of the same module
               MUST NOT be specified.";
          }
        }
        case inline {
          anydata inline-yang-library {
            mandatory true;
            description
              "Instance data corresponding to the
               ietf-yang-library@2019-01-04 defining
               the set of content-defining YANG modules for
               this instance-data-set.";
          }
        }
        case uri {
          leaf same-schema-as-file {
            type inet:uri;
            description
              "A reference to another YANG instance data file.
               This instance data file uses the same
               content schema as the referenced file.

               Referenced files using the 'inline' or the
               'simplified-inline' methods MUST be supported.
               Referenced files using the 'URI method' MAY be
               supported.

               The URL schemes 'file://' and 'https://' MUST
               be supported; other schemes MAY also be
               supported.";
          }
        }
      }
    }
    leaf-list description {
      type string;
      description
        "Description of the instance data set.";
    }
    leaf contact {
      type string;
      description
        "Contact information for the person or
         organization to whom queries concerning this
         instance data set should be sent.";
    }
    leaf organization {
      type string;
      description
        "Organization responsible for the instance
         data set.";
    }
    leaf datastore {
      type ds:datastore-ref;
      description
        "The identity of the datastore with which the
         instance data set is associated, e.g., the datastore from
         where the data was read, the datastore into which the data
         may be loaded, or the datastore that is being documented.
         If a single specific datastore cannot be specified, the
         leaf MUST be absent.

         If this leaf is absent, then the datastore to which the
         instance data belongs is unspecified.";
    }
    list revision {
      key "date";
      description
        "Instance data sets that are produced as
         a result of some sort of specification or design effort
         SHOULD have at least one revision entry.  For every
         published editorial change, a new unique revision SHOULD
         be added in front of the revisions sequence so that all
         revisions are in reverse chronological order.

         In cases of instance data sets that are read from
         or produced by a server or otherwise subject to
         frequent updates or changes, revision
         SHOULD NOT be present.";
      leaf date {
        type string {
          pattern '\d{4}-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1])';
        }
        description
          "Specifies the date the instance data set
           was last modified. Formatted as YYYY-MM-DD.";
      }
      leaf description {
        type string;
        description
          "Description of this revision of the instance data set.";
      }
    }
    leaf timestamp {
      type yang:date-and-time;
      description
        "The date and time when the instance data set
         was last modified.

         In cases of instance data sets that are read from or
         produced by a server or otherwise subject to frequent
         updates or changes, the timestamp SHOULD be present.

         If both a revision list entry and timestamp are present,
         the timestamp SHOULD contain the same date as the
         latest revision statement.";
    }
    anydata content-data {
      description
        "Contains the real instance data.
         The data MUST conform to the relevant YANG modules
         specified either in the content-schema or in some other
         implementation-specific manner.";
    }
  }
}
]]></sourcecode>
      </section>
    </section>
    <section anchor="security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The YANG module defined in this document only defines a wrapper structure
        specifying a format and a metadata header for YANG 
        instance data defined by the content-schema. Because of this,  
        the security considerations template for YANG models in 
        <xref target="RFC8407" sectionFormat="of" section="3.7.1"/> is not followed.        
        The instance data is designed to be accessed as a stored file or 
        over any file access method or protocol.
      </t>
      <t>The document does not specify any method to influence the 
        behavior of a server.</t>
      <t>
        The header part is usually not security sensitive; however, sensitive 
        information may be included, in which case it needs to be handled securely, 
        as mentioned below. Information to consider includes:
      </t>
      <ul spacing="normal">
        <li>If the URI method is used for specification of the content-schema and 
            the URI includes a userinfo subcomponent</li>
        <li>Any description text</li>
      </ul>
      <t>The content part may contain sensitive data.
        The security sensitivity of this data is completely dependent on 
        the content-schema.
        Depending on the nature of the instance data, instance data 
        files <bcp14>MAY</bcp14> need to be handled securely. 
        The same kind of handling should be applied to this file at rest and 
        in transit that would be needed for the result of a read operation 
        returning the same data.  These in-transit protection mechanisms will 
        also mitigate integrity issues when transporting the file.
      </t>
      <t>Instance data files should be protected against modification or 
        unauthorized access using normal file-handling mechanisms. 
        When copying the original files or providing file access for
	additional users, care should be taken not to reveal information
	unintentionally.
      </t>
      <t>If the URI method is used for specification of the content-schema, 
        there is a risk that the config schema section in the referenced YANG 
        instance data file may be altered maliciously or even as part of its normal 
        handling. In this case, the content-schema might differ from the one 
        expected. Protecting the integrity and stability of the referenced 
        file should be ensured.
      </t>
    </section>
    <section anchor="iana" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>This document registers one URI and one YANG module.</t>
      <section numbered="true" toc="default">
        <name>URI Registration</name>
        <t>This document registers the following URI in the <xref target="RFC3688" format="default">
          "IETF XML Registry"</xref>:</t>
<dl spacing="compact">
<dt>URI:</dt><dd>urn:ietf:params:xml:ns:yang:ietf-yang-instance-data</dd>
<dt>Registrant Contact:</dt><dd>The IESG.</dd>
<dt>XML:</dt><dd>N/A, the requested URI is an XML namespace.</dd>
</dl>
      </section>
      <section numbered="true" toc="default">
        <name>YANG Module Name Registration</name>
        <t>This document registers the following YANG module in the "YANG Module Names"
          registry <xref target="RFC6020" format="default"/>:</t>
<dl spacing="compact">
<dt>Name:</dt><dd>ietf-yang-instance-data</dd>
<dt>Namespace:</dt><dd>urn:ietf:params:xml:ns:yang:ietf-yang-instance-data</dd>
<dt>Prefix:</dt><dd>yid</dd>
<dt>Reference:</dt><dd>RFC 9195</dd>
</dl>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7950.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7951.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7952.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8526.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8527.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6243.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8342.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6991.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8525.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8791.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6020.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml"/>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8641.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8632.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3688.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8340.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8407.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8792.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8808.xml"/>
      </references>
    </references>
    <section numbered="true" toc="default">
      <name>Backwards Compatibility</name>
      <t>The concept of "backwards compatibility" and what changes are backwards 
      compatible are not defined for instance data sets as they are highly 
      dependent on the specific use case and the content-schema. 
      </t>
      <t>
      In case of "instance data sets" that are the result of design or specification 
      activity, some changes that may be good to avoid are listed below. 
      </t>
      <t>
      YANG uses the concept of managed entities identified by key 
      values; if the connection between the represented entity and the key 
      value is not preserved during an update, this may lead to the following problems.      
      </t>
      <ul spacing="normal">
        <li>If the key value of a list entry that represents the same 
            managed entity as before is changed, the user may mistakenly 
            identify the list entry as new.</li>
        <li>If the meaning of a list entry is changed but the key values 
            are not (e.g., redefining an alarm-type but not changing its 
            alarm-type-id), the change may not be noticed.</li>
        <li>If the key value of a previously removed list entry is reused 
            for a different entity, the change may be misinterpreted as 
            reintroducing the previous entity.</li>
      </ul>
    </section>
    <section anchor="detailed_use_cases" numbered="true" toc="default">
      <name>Detailed Use Cases</name>
      <t>This section is non-normative.</t>
      <section numbered="true" toc="default">
        <name>Use Case 1: Early Documentation of Server Capabilities</name>
        <t> A server has a number of server capabilities that are defined 
          in YANG modules and can be retrieved from the server
          using protocols like NETCONF or RESTCONF. Server capabilities include:   
        </t>
        <ul spacing="normal">
          <li> data defined in "ietf-yang-library": YANG modules, submodules, 
              features, deviations, schema-mounts, and datastores 
              supported (<xref target="RFC8525" format="default"/>).</li>
          <li>alarms supported (<xref target="RFC8632" format="default"/>).</li>
          <li>data nodes and subtrees that support or do not support on-change 
            notifications (<xref target="RFC8641" format="default"/>).</li>
          <li>netconf-capabilities in ietf-netconf-monitoring.</li>
        </ul>
        <t>
          While it is good practice to allow a client to query these capabilities 
          from the live server, that is often not possible. 
        </t>
        <t>
          Often when a network node is released, an associated Network Management System (NMS)
          is also released with it. The NMS depends on the capabilities of the server.          
          During NMS implementation, information about server capabilities is needed.
          If the information is unavailable early in some offline  
          document but only as instance data from the live network node, the NMS implementation will be
          delayed because it has to wait until the network node is ready. Also, assuming
          that all NMS implementors will have correctly configured network nodes 
          from which data can be retrieved is a very expensive proposition. (An NMS may handle dozens
          of node types.)
        </t>
        <t>
          Network operators often build their own homegrown NMS systems that 
          need to be integrated with a vendor's network node.  The operator
          needs to know the network node's server capabilities in order to do 
          this. Moreover, the network operator's decision to buy a vendor's 
          product may even be influenced by the network node's Operations, Administration, and Maintenance (OAM) feature set 
          documented as the server's capabilities.
        </t>
        <t>
          Beside NMS implementors, system integrators and many others also need the same
          information early.  Examples could be model-driven testing, generating documentation, etc.
        </t>
        <t>
          Most server capabilities are relatively stable and change only during 
          upgrade or due to licensing or the addition or removal of hardware. They are 
          usually defined by a vendor at design time, before the product is released.

          It is feasible and advantageous to define and document them early, 
          e.g., in a YANG instance data file.     
        </t>
        <t>It is anticipated that a separate IETF document will define in
          detail how and which set of server capabilities should be documented.
        </t>
      </section>
      <section numbered="true" toc="default">
        <name>Use Case 2: Preloading Data</name>
        <t>
          There are parts of the configuration that must be fully configurable 
          by the operator. However, a simple default configuration often will
          be sufficient.
        </t>
        <t>
          One example is access control groups/roles and related rules. 
          While a sophisticated operator may define dozens of different groups, 
          often a basic (read-only operator, read-write system administrator, 
          security-administrator) triplet will be enough.
          Vendors will often provide such default configuration data to make 
          device configuration easier for an operator.
        </t>
        <t>
          The device vendor may define a set of default groups (/nacm:nacm/groups) and rules 
          for these groups to access specific parts of the common models (/nacm:nacm/rule-list/rule).
        </t>
        <t>
          YANG instance data files can be used to document and/or preload the 
          default configuration.                             
        </t>
      </section>
      <section numbered="true" toc="default">
        <name>Use Case 3: Documenting Factory Default Settings</name>
        <t>
          Nearly every server has a factory default configuration. If the 
          system is really badly misconfigured or if the current configuration 
          is to be abandoned, the system can be reset to the default factory 
          configuration.
        </t>
        <t>
          YANG instance data can be used to document the factory default
          configuration. See <xref target="RFC8808" format="default"/>.               
        </t>
      </section>
    </section>
    <section numbered="false" toc="default">
      <name>Acknowledgments</name>
      <t>For their valuable comments, discussions, and feedback, we wish to 
        acknowledge <contact fullname="Andy Bierman"/>, <contact fullname="Juergen Schoenwaelder"/>, <contact fullname="Rob Wilton"/>,  <contact fullname="Joe Clarke"/>, <contact fullname="Kent Watsen"/>,     <contact fullname="Martin Bjorklund"/>, <contact fullname="Ladislav Lhotka"/>, <contact fullname="Qin Wu"/>, and other members of the Netmod Working Group.</t>
    </section>
  </back>

</rfc>
