<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<rfc number="8725" consensus="true" xmlns:xi="http://www.w3.org/2001/XInclude"
     ipr="trust200902" 
     docName="draft-ietf-oauth-jwt-bcp-07" category="bcp" updates="7519"
     obsoletes="" submissionType="IETF" xml:lang="en" tocInclude="true"
     sortRefs="true" symRefs="true" version="3"> 
  <!-- xml2rfc v2v3 conversion 2.37.1 -->
  <front>
    <title abbrev="JWT BCP">JSON Web Token Best Current Practices</title>
    <seriesInfo name="RFC" value="8725"/>
    <seriesInfo name="BCP" value="225"/>
    <author initials="Y." surname="Sheffer" fullname="Yaron Sheffer">
      <organization>Intuit</organization>
      <address>
        <email>yaronf.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization/>
      <address>
        <email>dick.hardt@gmail.com</email>
      </address>
    </author>
    <author initials="M." surname="Jones" fullname="Michael B. Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>https://self-issued.info/</uri>
      </address>
    </author>
    <date month="February" year="2020" />
    <area>Security</area>
    <workgroup>OAuth Working Group</workgroup>

    <keyword>JSON Web Token</keyword>
    <keyword>JWT</keyword>
    <keyword>JSON Object Signing and Encryption</keyword>
    <keyword>JOSE</keyword>
    <keyword>JSON Web Signature</keyword>
    <keyword>JWS</keyword>
    <keyword>JSON Web Encryption</keyword>
    <keyword>JWE</keyword>
    <keyword>attacks</keyword>
    <keyword>Claims</keyword>
    <keyword>Security</keyword>
    <keyword>Cryptography</keyword>

    <abstract>
      <t>JSON Web Tokens, also known as JWTs, are URL-safe JSON-based security
      tokens that contain a set of claims that can be signed and/or encrypted.
      JWTs are being widely used and deployed as a simple security token
      format in numerous protocols and applications, both in the area of
      digital identity and in other application areas.  This Best Current
      Practices document updates RFC 7519 to provide actionable guidance
      leading to secure implementation and deployment of JWTs.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>JSON Web Tokens, also known as JWTs <xref target="RFC7519"
      format="default"/>, are URL-safe JSON-based security tokens 
that contain a set of claims that can be signed and/or encrypted.
The JWT specification has seen rapid adoption because it encapsulates
security-relevant information in one easy-to-protect location, and because
it is easy to implement using widely available tools.
One application area in which JWTs are commonly used is representing digital identity information,
such as OpenID Connect ID Tokens <xref target="OpenID.Core" format="default"/>
and OAuth 2.0 <xref target="RFC6749" format="default"/> access tokens and
      refresh tokens, the details of which are deployment-specific.</t> 
      <t>Since the JWT specification was published, there have been several widely published
attacks on implementations and deployments.
Such attacks are the result of under-specified security mechanisms, as well as incomplete
implementations and incorrect usage by applications.</t>
      <t>The goal of this document is to facilitate secure implementation and deployment of JWTs.
Many of the recommendations in this document are about
implementation and use of the cryptographic mechanisms underlying JWTs that are defined by
JSON Web Signature (JWS) <xref target="RFC7515" format="default"/>,
JSON Web Encryption (JWE) <xref target="RFC7516" format="default"/>, and
JSON Web Algorithms (JWA) <xref target="RFC7518" format="default"/>.
Others are about use of the JWT claims themselves.</t>
      <t>These are intended to be minimum recommendations for the use of JWTs
in the vast majority of implementation
and deployment scenarios. Other specifications that reference this document can have
stricter requirements related to one or more aspects of the format, based on their
particular circumstances; when that is the case, implementers are advised to adhere
to those stricter requirements. Furthermore, this document provides a floor, not a ceiling,
so stronger options are always allowed (e.g., depending on differing evaluations of the
importance of cryptographic strength vs. computational load).</t>
      <t>Community knowledge about the strength of various algorithms and feasible attacks can
change quickly, and experience shows that a Best Current Practice (BCP) document about
security is a point-in-time statement. Readers are advised to seek out any errata or
updates that apply to this document.</t>
      <section anchor="target-audience" numbered="true" toc="default">
        <name>Target Audience</name>
        <t>The intended audiences of this document are:</t>
        <ul spacing="normal">
          <li>Implementers of JWT libraries (and the JWS and JWE libraries
	  used by those libraries),</li> 
          <li>Implementers of code that uses such libraries (to the extent that some mechanisms may
not be provided by libraries, or until they are), and</li>
          <li>Developers of specifications that rely on JWTs, both inside and
	  outside the IETF.</li> 
        </ul>
      </section>
      <section anchor="conventions-used-in-this-document" numbered="true" toc="default">
        <name>Conventions Used in this Document</name>
   <t>                                                                     
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL                
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",              
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are
    to be interpreted as           
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.            
   </t>
      </section>
    </section>
    <section anchor="threats-and-vulnerabilities" numbered="true" toc="default">
      <name>Threats and Vulnerabilities</name>
      <t>This section lists some known and possible problems with JWT
      implementations and deployments. 
Each problem description is followed by references to one or more mitigations to those problems.</t>
      <section anchor="weak-signatures-and-insufficient-signature-validation"
	       numbered="true" toc="default"> 
        <name>Weak Signatures and Insufficient Signature Validation</name>
        <t>Signed JSON Web Tokens carry an explicit indication of the signing algorithm,
in the form of the "alg" Header Parameter, to facilitate cryptographic agility.
This, in conjunction with design flaws in some libraries and applications,
	has led to several attacks:</t> 
        <ul spacing="normal">
          <li>The algorithm can be changed to "none" by an attacker, and some libraries would trust
this value and "validate" the JWT without checking any signature.</li>
          <li>An "RS256" (RSA, 2048 bit) parameter value can be changed into
"HS256" (HMAC, SHA-256), and some libraries
would try to validate the signature using HMAC-SHA256 and using the RSA public key as the
HMAC shared secret (see <xref target="McLean" format="default"/> and
	  <xref target="CVE-2015-9235"/>).</li>
        </ul>
        <t>For mitigations, see Sections <xref target="algorithm-verification"
	format="counter"/> and <xref target="appropriate-algorithms"
	format="counter"/>.</t> 
      </section>
      <section anchor="weak-symmetric-keys" numbered="true" toc="default">
        <name>Weak Symmetric Keys</name>
        <t>In addition, some applications use a keyed Message Authentication
	Code (MAC) algorithm, such as
"HS256", to sign tokens but supply a weak symmetric key with
insufficient entropy (such as a human-memorable password). Such keys
are vulnerable to offline brute-force or dictionary attacks once an
attacker gets hold of such a token <xref target="Langkemper" format="default"/>.</t>
        <t>For mitigations, see <xref target="key-entropy" format="default"/>.</t>
      </section>
      <section anchor="incorrect-composition-of-encryption-and-signature"
	       numbered="true" toc="default"> 
        <name>Incorrect Composition of Encryption and Signature</name>
        <t>Some libraries that decrypt a JWE-encrypted JWT to obtain a JWS-signed object
do not always validate the internal signature.</t> 
        <t>For mitigations, see <xref target="validate-crypto" format="default"/>.</t>
      </section>
      <section
	  anchor="plaintext-leakage-through-analysis-of-ciphertext-length"
	  numbered="true" toc="default"> 
        <name>Plaintext Leakage through Analysis of Ciphertext Length</name>
        <t>Many encryption algorithms leak information about the length of the
	plaintext, with a varying amount of 
leakage depending on the algorithm and mode of operation. This problem is exacerbated
when the plaintext is initially compressed, because the length of the
compressed plaintext and, thus, 
the ciphertext 
depends not only on the length of the original plaintext but also
on its content.
Compression attacks are particularly
powerful when there is attacker-controlled data in the same compression
space as secret data, which is the case for some attacks on HTTPS.</t>
        <t>See <xref target="Kelsey" format="default"/> for general background
on compression and encryption and <xref target="Alawatugoda"
format="default"/> for a specific example of attacks on HTTP cookies.</t> 
        <t>For mitigations, see <xref target="no-compression" format="default"/>.</t>
      </section>
      <section anchor="insecure-use-of-elliptic-curve-encryption" numbered="true" toc="default">
        <name>Insecure Use of Elliptic Curve Encryption</name>
        <t>Per <xref target="Sanso" format="default"/>, several Javascript
	Object Signing and Encryption (JOSE) libraries
	fail to validate their inputs correctly 
when performing elliptic curve key agreement (the "ECDH-ES" algorithm).
An attacker that is able to send JWEs of its choosing that use invalid curve points and
observe the cleartext outputs resulting from decryption with the invalid curve points
can use this vulnerability to recover the recipient's private key.</t>
        <t>For mitigations, see <xref target="validate-inputs" format="default"/>.</t>
      </section>
      <section anchor="multiplicity-of-json-encodings" numbered="true" toc="default">
        <name>Multiplicity of JSON Encodings</name>
        <t>Previous versions of the JSON format, such as the obsoleted <xref
	target="RFC7159" format="default"/>, 
allowed several different character
encodings: UTF-8, UTF-16, and UTF-32. This is not the case anymore, with the latest
standard <xref target="RFC8259" format="default"/> only allowing UTF-8 except
for internal use within a "closed ecosystem". 
This ambiguity, where older implementations and those used within closed environments may generate
non-standard encodings, may result in the JWT being
misinterpreted by its recipient. This, in turn, could be used by a malicious sender to bypass
the recipient's validation checks.</t>
        <t>For mitigations, see <xref target="use-utf8" format="default"/>.</t>
      </section>
      <section anchor="substitution" numbered="true" toc="default">
        <name>Substitution Attacks</name>
        <t>There are attacks in which one recipient will be given a JWT that was intended for it
and will attempt to use it at a different recipient for which that JWT was not intended.
For instance, if an OAuth 2.0 <xref target="RFC6749" format="default"/> access
token is legitimately presented to an 
OAuth 2.0 protected resource for which it is intended, that protected resource might then present
that same access token to a different protected resource for which the access token is not intended,
in an attempt to gain access. If such situations are not caught, this can result in
the attacker gaining access to resources that it is not entitled to access.</t>
        <t>For mitigations, see Sections <xref target="validate-iss-sub"
	format="counter"/> and <xref target="use-aud" format="counter"/>.</t> 
      </section>
      <section anchor="cross-jwt-confusion" numbered="true" toc="default">
        <name>Cross-JWT Confusion</name>
        <t>As JWTs are being used by more different protocols in diverse
	application areas, it becomes increasingly 
important to prevent cases of JWT tokens that have been issued for one purpose
being subverted and used for another.
Note that this is a specific type of substitution attack.
If the JWT could be used in an application context in which it could be
confused with other kinds of JWTs, 
then mitigations <bcp14>MUST</bcp14> be employed to prevent these substitution attacks.</t>
        <t>For mitigations, see Sections <xref target="validate-iss-sub"
	format="counter"/>, <xref target="use-aud" format="counter"/>, 
<xref target="use-typ" format="counter"/>, and <xref
target="preventing-confusion" format="counter"/>.</t> 
      </section>
      <section anchor="indirect-attacks-on-the-server" numbered="true" toc="default">
        <name>Indirect Attacks on the Server</name>
        <t>Various JWT claims are used by the recipient to perform lookup operations,
such as database and Lightweight Directory Access Protocol (LDAP) searches.
Others include URLs that are similarly looked up by the server. Any of these claims can be used by
an attacker as vectors for injection attacks or server-side request forgery (SSRF) attacks.</t>
        <t>For mitigations, see <xref target="do-not-trust-claims" format="default"/>.</t>
      </section>
    </section>
    <section anchor="BP" numbered="true" toc="default">
      <name>Best Practices</name>
      <t>The best practices listed below should be applied by practitioners
to mitigate the threats listed in the preceding section.</t>
      <section anchor="algorithm-verification" numbered="true" toc="default">
        <name>Perform Algorithm Verification</name>
        <t>Libraries <bcp14>MUST</bcp14> enable the caller to specify a
	supported set of algorithms and 
<bcp14>MUST NOT</bcp14> use any other algorithms when performing cryptographic operations.
The library <bcp14>MUST</bcp14> ensure that the "alg" or "enc" header specifies the same algorithm
that is used for the cryptographic operation.
Moreover, each key <bcp14>MUST</bcp14> be used with exactly one algorithm,
and this <bcp14>MUST</bcp14> be checked when the cryptographic operation is performed.</t>
      </section>
      <section anchor="appropriate-algorithms" numbered="true" toc="default">
        <name>Use Appropriate Algorithms</name>
        <t>As <xref target="RFC7515" sectionFormat="of" section="5.2"/> says,
"it is an application decision which algorithms may 
be used in a given context. Even if a JWS can be successfully
validated, unless the algorithm(s) used in the JWS are acceptable to
the application, it <bcp14>SHOULD</bcp14> consider the JWS to be invalid."</t>
        <t>Therefore, applications <bcp14>MUST</bcp14> only allow the use of
	cryptographically current algorithms 
that meet the security requirements of the application.
This set will vary over time as new algorithms are introduced
and existing algorithms are deprecated due to discovered cryptographic weaknesses.
Applications <bcp14>MUST</bcp14> therefore be designed to enable cryptographic agility.</t>
        <t>That said, if a JWT is cryptographically protected end-to-end by a
	transport layer, such as TLS 
using cryptographically current algorithms, there may be no need to apply another layer of
cryptographic protections to the JWT.
In such cases, the use of the "none" algorithm can be perfectly acceptable.
The "none" algorithm should only be used when the JWT is cryptographically protected by other means.
JWTs using "none" are often used in application contexts in which the content is optionally signed;
then, the URL-safe claims representation and processing can be the same in both
the signed and unsigned cases. 
JWT libraries <bcp14>SHOULD NOT</bcp14> generate JWTs using "none" unless
explicitly requested to do so by the caller. 
Similarly, JWT libraries <bcp14>SHOULD NOT</bcp14> consume JWTs using "none"
	unless explicitly requested by the caller.</t> 
        <t>Applications <bcp14>SHOULD</bcp14> follow these algorithm-specific recommendations:</t>
        <ul spacing="normal">
          <li>Avoid all RSA-PKCS1 v1.5 encryption algorithms (<xref
	  target="RFC8017" sectionFormat="comma" section="7.2"/>), preferring
	  RSAES-OAEP
	  (<xref target="RFC8017" sectionFormat="comma" section="7.1"/>).</li> 

          <li>Elliptic Curve Digital Signature Algorithm (ECDSA) signatures <xref target="ANSI-X962-2005"
	  format="default"/> require a unique random value for every message
	  that is signed. 
If even just a few bits of the random value are predictable across multiple messages, then
the security of the signature scheme may be compromised. In the worst case,
the private key may be recoverable by an attacker. To counter these attacks,
JWT libraries <bcp14>SHOULD</bcp14> implement ECDSA using the deterministic
approach defined in <xref target="RFC6979" format="default"/>. 
This approach is completely compatible with existing ECDSA verifiers and so can be implemented
without new algorithm identifiers being required.</li> 

        </ul>
      </section>
      <section anchor="validate-crypto" numbered="true" toc="default">
        <name>Validate All Cryptographic Operations</name>
        <t>All cryptographic operations used in the JWT <bcp14>MUST</bcp14> be
	validated and the entire JWT <bcp14>MUST</bcp14> be rejected 
if any of them fail to validate.
This is true not only of JWTs with a single set of Header Parameters
but also for Nested JWTs in which both outer and inner operations <bcp14>MUST</bcp14> be validated
using the keys and algorithms supplied by the application.</t>

      </section>
      <section anchor="validate-inputs" numbered="true" toc="default">
        <name>Validate Cryptographic Inputs</name>
        <t>Some cryptographic operations, such as Elliptic Curve Diffie-Hellman key agreement
("ECDH-ES"), take inputs that may contain invalid values. This includes points not on
the specified elliptic curve 
or other invalid points (e.g., <xref target="Valenta" format="default"/>, Section 7.1).
The JWS/JWE library itself must validate these inputs before using them,
or it must use underlying cryptographic libraries that do so (or both!).</t>
        <t>Elliptic Curve Diffie-Hellman Ephemeral Static (ECDH-ES) ephemeral
	public key (epk) inputs should be validated 
	according to the recipient's 
chosen elliptic curve. For the NIST prime-order curves P-256, P-384, and P-521,
validation <bcp14>MUST</bcp14> 
be performed according to Section 5.6.2.3.4 (ECC Partial Public-Key Validation
Routine) of "Recommendation for Pair-Wise Key-Establishment Schemes Using Discrete Logarithm Cryptography" <xref target="nist-sp-800-56a-r3" format="default"/>.
If the "X25519" or "X448" <xref target="RFC8037" format="default"/> algorithms are used,
then the security considerations in <xref target="RFC8037" format="default"/> apply.</t>
      </section>
      <section anchor="key-entropy" numbered="true" toc="default">
        <name>Ensure Cryptographic Keys Have Sufficient Entropy</name>
        <t>The Key Entropy and Random Values advice in <xref
	target="RFC7515"  section="10.1" sectionFormat="of"></xref> and the
	Password Considerations in <xref target="RFC7518" 
section="8.8" sectionFormat="of"></xref>
<bcp14>MUST</bcp14> be followed.
In particular, human-memorizable passwords <bcp14>MUST NOT</bcp14> be directly used
as the key to a keyed-MAC algorithm such as "HS256".
Moreover, passwords should only be used to perform key encryption, rather
than content encryption, 
as described in <xref target="RFC7518" sectionFormat="of" section="4.8"/>.
Note that even when used for key encryption, password-based encryption is
	still subject to brute-force attacks.</t> 
      </section>
      <section anchor="no-compression" numbered="true" toc="default">
        <name>Avoid Compression of Encryption Inputs</name>
        <t>Compression of data <bcp14>SHOULD NOT</bcp14> be done before encryption, because
such compressed data often reveals information about the plaintext.</t>
      </section>
      <section anchor="use-utf8" numbered="true" toc="default">
        <name>Use UTF-8</name>
        <t><xref target="RFC7515" format="default"/>, <xref target="RFC7516"
	format="default"/>, and <xref target="RFC7519" format="default"/> all
	specify that UTF-8 be used for encoding and decoding JSON 
used in Header Parameters and JWT Claims Sets. This is also in line with the
latest JSON specification <xref target="RFC8259" format="default"/>. 
Implementations and applications <bcp14>MUST</bcp14> do this and not use or admit the use of
other Unicode encodings for these purposes.</t>
      </section>
      <section anchor="validate-iss-sub" numbered="true" toc="default">
        <name>Validate Issuer and Subject</name>
        <t>When a JWT contains an "iss" (issuer) claim, the application
	<bcp14>MUST</bcp14> validate that the cryptographic keys 
used for the cryptographic operations in the JWT belong to the issuer.
If they do not, the application <bcp14>MUST</bcp14> reject the JWT.</t>
        <t>The means of determining the keys owned by an issuer is application-specific.
As one example, OpenID Connect <xref target="OpenID.Core" format="default"/>
issuer values are "https" URLs 
that reference a JSON metadata document that contains a "jwks_uri" value that is
an "https" URL from which the issuer's keys are retrieved as a JWK Set <xref
target="RFC7517" format="default"/>. 
This same mechanism is used by <xref target="RFC8414" format="default"/>.
Other applications may use different means of binding keys to issuers.</t>

        <t>Similarly, when the JWT contains a "sub" (subject) claim, the
	application <bcp14>MUST</bcp14> validate that 
the subject value corresponds to a valid subject and/or issuer-subject pair at the application.
This may include confirming that the issuer is trusted by the application.
If the issuer, subject, or the pair are invalid, the application
	<bcp14>MUST</bcp14> reject the JWT.</t> 
      </section>
      <section anchor="use-aud" numbered="true" toc="default">
        <name>Use and Validate Audience</name>
        <t>If the same issuer can issue JWTs that are intended for use by more
	than one relying party or application, 
the JWT <bcp14>MUST</bcp14> contain an "aud" (audience) claim that can be used
to determine whether the JWT 
is being used by an intended party or was substituted by an attacker at an unintended party.</t>
        <t>In such cases, the relying party or application <bcp14>MUST</bcp14>
	validate the audience value, 
and if the audience value is not present or not associated with the recipient,
it <bcp14>MUST</bcp14> reject the JWT.</t>
      </section>
      <section anchor="do-not-trust-claims" numbered="true" toc="default">
        <name>Do Not Trust Received Claims</name>
        <t>The "kid" (key ID) header is used by the relying application to
	perform key lookup. Applications 
should ensure that this does not create SQL or LDAP injection vulnerabilities by validating
and/or sanitizing the received value.</t>
        <t>Similarly, blindly following a "jku" (JWK set URL) or "x5u" (X.509 URL) header,
which may contain an arbitrary URL,
could result in server-side request forgery (SSRF) attacks. Applications
<bcp14>SHOULD</bcp14> protect against such 
attacks, e.g., by matching the URL to a whitelist of allowed locations
and ensuring no cookies are sent in the GET request.</t>
      </section>
      <section anchor="use-typ" numbered="true" toc="default">
        <name>Use Explicit Typing</name>
        <t>Sometimes, one kind of JWT can be confused for another. If a particular
kind of JWT is subject to such confusion, that JWT can include an explicit
JWT type value, and the validation rules can specify checking the type.
This mechanism can prevent such confusion.
Explicit JWT typing is accomplished by using the "typ" Header Parameter.
For instance, the <xref target="RFC8417" format="default"/> specification uses
the "application/secevent+jwt" media type 
to perform explicit typing of Security Event Tokens (SETs).</t>
        <t>Per the definition of "typ" in <xref
	target="RFC7515" sectionFormat="of" section="4.1.9"/>,
it is <bcp14>RECOMMENDED</bcp14> that the "application/" prefix be omitted from the "typ" value.
Therefore, for example, the "typ" value used to explicitly include a type for a SET
<bcp14>SHOULD</bcp14> be "secevent+jwt".
When explicit typing is employed for a JWT, it is <bcp14>RECOMMENDED</bcp14>
that a media type name of the format 
"application/example+jwt" be used, where "example" is replaced by the
	identifier for the specific kind of JWT.</t> 
        <t>When applying explicit typing to a Nested JWT, the "typ" Header
	Parameter containing the explicit type value 
<bcp14>MUST</bcp14> be present in the inner JWT of the Nested JWT (the JWT
whose payload is the JWT Claims Set). 
In some cases, the same "typ" Header Parameter value will be present in the outer JWT as well,
to explicitly type the entire Nested JWT.</t>
        <t>Note that the use of explicit typing may not achieve disambiguation
	from existing kinds of JWTs, 
as the validation rules for existing kinds of JWTs often do not use the "typ" Header Parameter value.
Explicit typing is <bcp14>RECOMMENDED</bcp14> for new uses of JWTs.</t>
      </section>
      <section anchor="preventing-confusion" numbered="true" toc="default">
        <name>Use Mutually Exclusive Validation Rules for Different Kinds of JWTs</name>
        <t>Each application of JWTs defines a profile specifying the required
	and optional JWT claims 
and the validation rules associated with them.
If more than one kind of JWT can be issued by the same issuer,
the validation rules for those JWTs <bcp14>MUST</bcp14> be written such that
they are mutually exclusive, 
rejecting JWTs of the wrong kind.
To prevent substitution of JWTs from one context into another,
application developers may employ a number of strategies:</t>
        <ul spacing="normal">
          <li>Use explicit typing for different kinds of JWTs.
Then the distinct "typ" values can be used to differentiate between the
	  different kinds of JWTs.</li> 
          <li>Use different sets of required claims or different required claim values.
Then the validation rules for one kind of JWT will reject those with different
	  claims or values.</li> 
          <li>Use different sets of required Header Parameters or different
	  required Header Parameter values. 
Then the validation rules for one kind of JWT will reject those with different
	  Header Parameters or values.</li>
          <li>Use different keys for different kinds of JWTs.
Then the keys used to validate one kind of JWT will fail to validate other kinds of JWTs.</li>
          <li>Use different "aud" values for different uses of JWTs from the same issuer.
Then audience validation will reject JWTs substituted into inappropriate contexts.</li>
          <li>Use different issuers for different kinds of JWTs.
Then the distinct "iss" values can be used to segregate the different kinds of JWTs.</li>
        </ul>
        <t>Given the broad diversity of JWT usage and applications,
the best combination of types, required claims, values, Header Parameters, key usages, and issuers
to differentiate among different kinds of JWTs
will, in general, be application-specific.
As discussed in <xref target="use-typ" format="default"/>, for new JWT
	applications, the use of explicit typing is
	<bcp14>RECOMMENDED</bcp14>.</t> 
      </section>
    </section>
    <section anchor="security-considerations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>This entire document is about security considerations when
      implementing and deploying JSON Web Tokens.</t> 
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>This document has no IANA actions.</t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6979.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8259.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7515.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7516.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7518.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8017.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8037.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <reference anchor="nist-sp-800-56a-r3" target="https://doi.org/10.6028/NIST.SP.800-56Ar3">
          <front>
            <title>Recommendation for Pair-Wise Key-Establishment Schemes
	    Using Discrete Logarithm Cryptography</title> 
            <author initials="E." surname="Barker" fullname="Elaine Barker">
              <organization/>
            </author>
            <author initials="L." surname="Chen" fullname="Lily Chen">
              <organization/>
            </author>
            <author initials="A." surname="Roginsky" fullname="Allen Roginsky">
              <organization/>
            </author>
            <author initials="A." surname="Vassilev" fullname="Apostol Vassilev">
              <organization/>
            </author>
            <author initials="R." surname="Davis" fullname="Richard Davis">
              <organization/>
            </author>
            <date year="2018" month="April"/>
          </front>
          <seriesInfo name="NIST Special Publication" value="800-56A Revision 3"/>
          <seriesInfo name="DOI" value="10.6028/NIST.SP.800-56Ar3"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7517.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8417.xml"/>
        <reference anchor="ANSI-X962-2005">
          <front>
            <title>Public Key Cryptography for the Financial Services
	    Industry: the Elliptic Curve Digital Signature Algorithm (ECDSA)</title> 
            <author>
              <organization>American National Standards Institute</organization>
            </author>
            <date year="2005" month="November"/>
          </front>
          <seriesInfo name="ANSI" value="X9.62-2005"/>
        </reference>

        <reference anchor="Alawatugoda">
          <front>
            <title>Protecting Encrypted Cookies from Compression Side-Channel Attacks</title>
            <author initials="J." surname="Alawatugoda" fullname="Janaka Alawatugoda">
              <organization/>
            </author>
            <author initials="D." surname="Stebila" fullname="Douglas Stebila">
              <organization/>
            </author>
            <author initials="C." surname="Boyd" fullname="Colin Boyd">
              <organization/>
            </author>
            <date month="July" year="2015"/>
          </front>
          <refcontent>Financial Cryptography and Data Security, pp. 86-106</refcontent>
          <seriesInfo name="DOI" value="10.1007/978-3-662-47854-7_6"/>
        </reference>

	<reference anchor="CVE-2015-9235" target="https://nvd.nist.gov/vuln/detail/CVE-2015-9235">
	  <front>
            <title>CVE-2015-9235 Detail</title>
            <author>
              <organization>NIST</organization>
            </author>
	    
            <date month="May" year="2018"/>
	  </front>
          <refcontent>National Vulnerability Database</refcontent>
	</reference>                                                                                                   
                          
        <reference anchor="Kelsey">
          <front>
            <title>Compression and Information Leakage of Plaintext</title>
            <author initials="J." surname="Kelsey" fullname="John Kelsey">
              <organization/>
            </author>
            <date month="July" year="2002"/>
          </front>
            <refcontent>Fast Software Encryption, pp. 263-276</refcontent>
            <seriesInfo name="DOI" value="10.1007/3-540-45661-9_21"/>
        </reference>

        <reference anchor="Langkemper"
		   target="https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/"> 
          <front>
            <title>Attacking JWT authentication</title>
            <author initials="S." surname="Langkemper" fullname="Sjoerd Langkemper">
              <organization/>
            </author>
            <date month="September" year="2016"/>
          </front>
        </reference>

        <reference anchor="McLean"
		   target="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/">
          <front>
            <title>Critical vulnerabilities in JSON Web Token libraries</title>
            <author initials="T." surname="McLean" fullname="Tim McLean">
              <organization/>
            </author>
            <date month="March" year="2015"/>
          </front>
        </reference>

        <reference anchor="Valenta" target="https://ia.cr/2018/298">
          <front>
            <title>In search of CurveSwap: Measuring elliptic curve implementations in the wild</title>
            <author initials="L." surname="Valenta" fullname="Luke Valenta">
              <organization/>
            </author>
            <author initials="N." surname="Sullivan" fullname="Nick Sullivan">
              <organization/>
            </author>
            <author initials="A." surname="Sanso" fullname="Antonio Sanso">
              <organization/>
            </author>
            <author initials="N." surname="Heninger" fullname="Nadia Heninger">
              <organization/>
            </author>
            <date month="March" year="2018"/>
          </front>
        </reference>

        <reference anchor="Sanso"
		   target="https://blogs.adobe.com/security/2017/03/critical-vulnerability-uncovered-in-json-encryption.html">
          <front>
            <title>Critical Vulnerability Uncovered in JSON Encryption</title>
            <author initials="A." surname="Sanso" fullname="Antonio Sanso">
              <organization/>
            </author>
            <date month="March" year="2017"/>
          </front>
        </reference>

        <reference anchor="OpenID.Core" target="https://openid.net/specs/openid-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author initials="N." surname="Sakimura" fullname="Nat Sakimura">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="M." surname="Jones" fullname="Michael B. Jones">
              <organization/>
            </author>
            <author initials="B." surname="de Medeiros" fullname="Breno de Medeiros">
              <organization/>
            </author>
            <author initials="C." surname="Mortimore" fullname="Chuck Mortimore">
              <organization/>
            </author>
            <date month="November" year="2014"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="acknowledgements" numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>Thanks to <contact fullname="Antonio Sanso"/> for bringing the
      "ECDH-ES" invalid point attack to the attention 
of JWE and JWT implementers. <contact fullname="Tim McLean"/> published the
RSA/HMAC confusion attack <xref target="McLean"
format="default"/>. 
Thanks to <contact fullname="Nat Sakimura"/> for advocating the use of
explicit typing. Thanks to <contact fullname="Neil Madden"/> for his 
numerous comments, and to
<contact fullname="Carsten Bormann"/>,
<contact fullname="Brian Campbell"/>,
<contact fullname="Brian Carpenter"/>,
<contact fullname="Alissa Cooper"/>,
<contact fullname="Roman Danyliw"/>,
<contact fullname="Ben Kaduk"/>,
<contact fullname="Mirja Kühlewind"/>,
<contact fullname="Barry Leiba"/>,
<contact fullname="Eric Rescorla"/>,
<contact fullname="Adam Roach"/>,
<contact fullname="Martin Vigoureux"/>,
and <contact fullname="Éric Vyncke"/> 
for their reviews.</t>
    </section>

  </back>
</rfc>
