<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="std" consensus="true" docName="draft-ietf-bfcpbis-bfcp-websocket-15" number="8857" ipr="trust200902" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" symRefs="true" sortRefs="true" version="3">

<!-- xml2rfc v2v3 conversion 2.35.0 -->
  <front>
    <title abbrev="WebSocket as a Transport for BFCP">The WebSocket
    Protocol as a Transport for the Binary Floor Control Protocol
    (BFCP)</title>
<seriesInfo name="RFC" value="8857"/>

    <author fullname="Victor Pascual" initials="V." surname="Pascual">
      <organization>Nokia</organization>
      <address>
         <postal>
          <city>Barcelona</city>
          <country>Spain</country>
        </postal>
        <email>victor.pascual_avila@nokia.com</email>
      </address>
    </author>
    <author fullname="Antón Román" initials="A." surname="Román">
      <organization>Quobis</organization>
      <address>
        <postal>
          <extaddr>Pol. Ind. A Granxa, Casa de Pedra</extaddr>
          <city>O Porriño</city>
          <code>36475</code>
          <country>Spain</country>
        </postal>
        <email>anton.roman@quobis.com</email>
      </address>
    </author>
    <author fullname="Stéphane Cazeaux" initials="S." surname="Cazeaux">
      <organization>Orange</organization>
      <address>
        <postal>
        <street>42 rue des Coutures</street>
        <city>Caen</city>
        <code>14000</code>
        <country>France</country>
        </postal>
        <email>stephane.cazeaux@orange.com</email>
      </address>
    </author>
    <author fullname="Gonzalo Salgueiro" initials="G." surname="Salgueiro">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>7200-12 Kit Creek Road</street>
          <city>Research Triangle Park</city>
          <region>NC</region>
          <code>27709</code>
          <country>US</country>
        </postal>
        <email>gsalguei@cisco.com</email>
      </address>
    </author>
    <author initials="R." surname="Ravindranath" fullname="Ram Mohan Ravindranath">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <extaddr>Cessna Business Park</extaddr>
          <extaddr>Kadabeesanahalli Village, Varthur Hobli,</extaddr>
          <street>Sarjapur-Marathahalli Outer Ring Road</street>
          <city>Bangalore</city>
          <region>Karnataka</region>
          <code>560103</code>
          <country>India</country>
        </postal>
        <email>rmohanr@cisco.com</email>
      </address>
    </author>
    <date month="January" year="2021"/>
    <area>IETF</area>
    <workgroup>BFCPBIS Working Group</workgroup>
    <keyword>BFCP</keyword>
    <keyword>WebSocket</keyword>
    <abstract>
      <t> The WebSocket protocol enables two-way real-time communication
      between clients and servers. This document specifies the use of Binary Floor
       Control Protocol (BFCP) as a new WebSocket subprotocol enabling a reliable 
       transport mechanism between BFCP entities in new scenarios. </t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>The WebSocket (WS) protocol <xref target="RFC6455" format="default"/> enables
      two-way message exchange between clients and servers on top of a
      persistent TCP connection, optionally secured with Transport Layer Security (TLS) 
      <xref target="RFC8446" format="default"/>. The initial protocol handshake makes use of
      Hypertext Transfer Protocol (HTTP) <xref target="RFC7230" format="default"/> semantics, allowing the WebSocket
      protocol to reuse existing HTTP infrastructure.</t>
      <t>The Binary Floor Control Protocol (BFCP) is a protocol to
      coordinate access to shared resources in a conference. It is
      defined in <xref target="RFC8855" format="default"/> and is
      used between floor participants and floor control servers, and
      between floor chairs (i.e., moderators) and floor control
      servers.</t>
      <t>Modern web browsers include a WebSocket client stack
      complying with the WebSocket API <xref target="WS-API" format="default"/> as
      specified by the W3C. It is expected that other client
      applications (those running in personal computers and devices
      such as smartphones) will also make a WebSocket client stack
      available. This document extends the applicability of 
      <xref target="RFC8855" format="default"/> and 
      <xref target="RFC8856" format="default"/> to enable the
      usage of BFCP in these scenarios.</t>
      <t>The transport over which BFCP entities exchange messages
      depends on how the clients obtain information to contact the
      floor control server (e.g., using a Session Description Protocol (SDP)
      offer/answer exchange per <xref target="RFC8856" format="default"/> or the
      procedure described in RFC 5018 <xref target="RFC5018" format="default"/>). 
      <xref target="RFC8855" format="default"/> defines two transports
      for BFCP: TCP and UDP. This specification defines a new
      WebSocket subprotocol (as defined in 
      <xref target="RFC6455" section="1.9" sectionFormat="of" format="default"/>) for transporting BFCP messages between a
      WebSocket client and server. This subprotocol provides a reliable and 
      boundary-preserving transport for BFCP when run on top of TCP. Since WebSocket provides 
      a reliable transport, the extensions defined in <xref target="RFC8855" format="default"/> for sending BFCP over unreliable 
          transports are not applicable. </t>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", 
      "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", 
      "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", 
      "<bcp14>NOT RECOMMENDED</bcp14>", "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" 
      in this document are to be interpreted as described in BCP 14
      <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, 
      they appear in all capitals, as shown here.</t>
    <section anchor="definitions" numbered="true" toc="default">
        <name>Definitions</name>
        <dl newline="false" spacing="normal" indent="6">
          <dt>BFCP WebSocket Client:</dt>
          <dd>Any BFCP entity capable
            of opening outbound connections to WebSocket servers and
            communicating using the WebSocket BFCP subprotocol as
            defined by this document.</dd>
          <dt>BFCP WebSocket Server:</dt>
          <dd>Any BFCP entity capable
            of listening for inbound connections from WebSocket
            clients and communicating using the WebSocket BFCP
            subprotocol as defined by this document.</dd>
        </dl>
      </section>
    </section>
    <section anchor="the_websocket_protocol" numbered="true" toc="default">
      <name>The WebSocket Protocol</name>
      <t>The WebSocket protocol <xref target="RFC6455" format="default"/> is a
      transport layer on top of TCP (optionally secured with 
      TLS <xref target="RFC8446" format="default"/>) in which both client and server exchange
      message units in both directions. The protocol defines a
      connection handshake, WebSocket subprotocol and extensions
      negotiation, a frame format for sending application and control
      data, a masking mechanism, and status codes for indicating
      disconnection causes.</t>
      <t>The WebSocket connection handshake is based on 
      HTTP <xref target="RFC7230" format="default"/> and utilizes the HTTP GET method with an
      Upgrade header field. This is sent by the client and then answered
      by the server (if the negotiation succeeded) with an HTTP 101
      status code. Once the handshake is completed, the connection
      upgrades from HTTP to the WebSocket protocol. This handshake
      procedure is designed to reuse the existing HTTP infrastructure.
      During the connection handshake, the client and server agree on the
      application protocol to use on top of the WebSocket transport.
      Such an application protocol (also known as a "WebSocket
      subprotocol") defines the format and semantics of the messages
      exchanged by the endpoints. This could be a custom protocol or a
      standardized one (as the WebSocket BFCP subprotocol defined in
      this document). Once the HTTP 101 response is processed, both
      the client and server reuse the underlying TCP connection for
      sending WebSocket messages and control frames to each other.
      Unlike plain HTTP, this connection is persistent and can be used
      for multiple message exchanges.</t>
      <t>The WebSocket protocol defines message units to be used by
      applications for the exchange of data, so it provides a message
      boundary-preserving transport layer.</t>
    </section>
    <section anchor="the_websocket_bfcp_subprotocol" numbered="true" toc="default">
      <name>The WebSocket BFCP Subprotocol</name>
      <t>The term WebSocket subprotocol refers to an
      application-level protocol layered on top of a WebSocket
      connection. This document specifies the WebSocket BFCP
      subprotocol for carrying BFCP messages over a WebSocket
      connection.</t>
      <section anchor="handshake" numbered="true" toc="default">
        <name>Handshake</name>
        <t>The BFCP WebSocket client and BFCP WebSocket server
        negotiate usage of the WebSocket BFCP subprotocol during the
        WebSocket handshake procedure as defined in 
        <xref target="RFC6455" section="1.3" sectionFormat="of" format="default"/>. 
        The client <bcp14>MUST</bcp14> include the value
        "bfcp" in the Sec-WebSocket-Protocol header field in its handshake
        request. The 101 reply from the server <bcp14>MUST</bcp14> contain "bfcp" in
        its corresponding Sec-WebSocket-Protocol header field.</t>
        <t>Below is an example of a WebSocket handshake in which the
        client requests the WebSocket BFCP subprotocol support from
        the server:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  GET / HTTP/1.1
  Host: bfcp-ws.example.com
  Upgrade: websocket
  Connection: Upgrade
  Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
  Origin: http://www.example.com
  Sec-WebSocket-Protocol: bfcp 
  Sec-WebSocket-Version: 13
]]></artwork>
        <t>The handshake response from the server accepting the
        WebSocket BFCP subprotocol would look as follows:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  HTTP/1.1 101 Switching Protocols
  Upgrade: websocket
  Connection: Upgrade
  Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
  Sec-WebSocket-Protocol: bfcp
]]></artwork>
        <t>Once the negotiation has been completed, the WebSocket
        connection is established and can be used for the transport of
        BFCP messages. </t>
      </section>
      <section anchor="bfcp_encoding" numbered="true" toc="default">
        <name>BFCP Encoding</name>
        <t>BFCP messages use a TLV (Type-Length-Value) binary
        encoding, therefore BFCP WebSocket clients and BFCP WebSocket
        servers <bcp14>MUST</bcp14> be transported in unfragmented binary WebSocket
        frames (FIN: 1, opcode: %x2) to exchange BFCP messages. The
        WebSocket frame data <bcp14>MUST</bcp14> be a valid BFCP message, so the
        length of the payload of the WebSocket frame <bcp14>MUST</bcp14> be lower
        than the maximum size allowed (2<sup>16</sup> +12 bytes) for a BFCP
        message as described in <xref target="RFC8855" format="default"/>. In addition, the
        encoding rules for reliable protocols defined in <xref target="RFC8855" format="default"/> 
        <bcp14>MUST</bcp14> be followed.</t>
        <t>While this specification assumes that BFCP encoding is only TLV binary, 
          future documents may define other mechanisms, like JSON serialization. 
         If encoding changes, a new subprotocol identifier would need to be selected.</t>
        <t>Each BFCP message <bcp14>MUST</bcp14> be carried within a single WebSocket
      message, and a WebSocket message <bcp14>MUST NOT</bcp14> contain more than one
      BFCP message.</t>
      </section>
    </section>
    <section anchor="bfcp_websocket_transport" numbered="true" toc="default">
      <name>Transport Reliability</name>
      <t>The WebSocket protocol <xref target="RFC6455" format="default"/> provides a reliable transport, and
      therefore the BFCP WebSocket subprotocol defined by this
      document also provides reliable BFCP transport. Thus, client and server
      transactions using the WebSocket protocol for transport <bcp14>MUST</bcp14> follow the
      procedures for reliable transports as defined in <xref target="RFC8855" format="default"/> 
      and <xref target="RFC8856" format="default"/>.</t>
      <t>BFCP WebSocket clients cannot receive incoming WebSocket
      connections initiated by any other peer. This means that a BFCP
      WebSocket client <bcp14>MUST</bcp14> actively initiate a connection towards a
      BFCP WebSocket server. The BFCP server will have a globally routable address
      and thus does not require ICE, as clients always initiate connections to it. </t>
    </section>
    <section anchor="sdp_con" numbered="true" toc="default">
      <name>SDP Considerations</name>
      <section anchor="updates_to_rfc_4583bis" numbered="true" toc="default">
        <name>Transport Negotiation</name>
        <t>Rules to generate an "m=" line for a BFCP stream are described
      in <xref target="RFC8856" section="4" sectionFormat="comma" format="default"/>.</t>

        <t>New values are defined for the SDP "proto" field: 'TCP/WS/BFCP'
      and 'TCP/WSS/BFCP'. </t>
        <ul empty="true" spacing="normal">
          <li>'TCP/WS/BFCP' is used when BFCP runs on top of WS, which in
          turn runs on top of TCP.</li>
          <li>'TCP/WSS/BFCP' is used when BFCP runs on top of secure WebSocket (WSS), which
          in turn runs on top of TLS and TCP.</li>
        </ul>
        <t>The "port" field is set following the rules in Section 
      <xref target="RFC8856" section="4" sectionFormat="bare" format="default"/> and Section 
      <xref target="RFC8856" section="7.1" sectionFormat="bare" format="default"/> 
      of <xref target="RFC8856" format="default"/>. Depending on the value
      of the SDP 'setup' attribute defined in <xref target="RFC4145" format="default"/>, 
      the "port" field contains the port to which the remote endpoint will 
      direct BFCP messages, or it is irrelevant (i.e., the endpoint will initiate the connection
      towards the remote endpoint) and should be set to a value of '9',
      which is the discard port. The 'connection' attribute and port <bcp14>MUST</bcp14>
      follow the rules of <xref target="RFC4145" format="default"/>.</t>
        <t>While this document recommends the use of secure  WebSocket (i.e., TCP/WSS) 
        for security reasons, TCP/WS is also permitted so as to achieve maximum 
        compatibility among clients.</t>
      </section>
      <section anchor="attribute" numbered="true" toc="default">
        <name>SDP Media Attributes</name>
        <t><xref target="RFC8124" format="default"/> defines a new SDP attribute 
      to indicate the connection Uniform Resource Identifier (URI) for the WebSocket client. 
      The SDP attribute 'websocket-uri' defined in <xref target="RFC8124" section="3" sectionFormat="of" format="default"/> 
      <bcp14>MUST</bcp14> be used when BFCP runs on top of WS or WSS. 
      When the 'websocket-uri' attribute is present in the media section of the SDP, 
      the procedures mentioned in <xref target="RFC8124" section="4" sectionFormat="of" format="default"/> 
      <bcp14>MUST</bcp14> be followed.</t>
      </section>
    </section>
    <section numbered="true" toc="default">
      <name>SDP Offer/Answer Procedures</name>
      <section anchor="general" numbered="true" toc="default">
        <name>General</name>

        <t> An endpoint (i.e., both the offerer and the answerer) <bcp14>MUST</bcp14> create an SDP media description ("m=" line) 
      for each BFCP-over-WebSocket media stream and <bcp14>MUST</bcp14> assign either a 'TCP/WSS/BFCP' or 'TCP/WS/BFCP' value to the 
      "proto" field of the "m=" line depending on whether the endpoint wishes to use secure WebSocket or WebSocket. 
      Furthermore, the server side, which could be either the offerer or answerer, <bcp14>MUST</bcp14> add a 'websocket-uri'
      attribute in the media section depending on whether it wishes to use WebSocket or secure WebSocket. This new 
      attribute <bcp14>MUST</bcp14> follow the syntax defined in <xref target="RFC8124" format="default"/>. Additionally, 
      the SDP offer/answer procedures defined in <xref target="RFC8124" section="4" sectionFormat="of" format="default"/> <bcp14>MUST</bcp14> 
      be followed for the "m=" line associated with a BFCP-over-WebSocket media stream.</t>
      </section>
      <section anchor="example" numbered="true" toc="default">
        <name>Example Usage of 'websocket-uri' SDP Attribute</name>
        <t>The following is an example of an "m=" line for a BFCP connection. 
In this example, the offerer sends the SDP with the "proto" field having a 
value of 'TCP/WSS/BFCP', indicating that the offerer wishes to use secure 
WebSocket as a transport for the media stream, and the "fmt" field having 
a value of '*' (for details on the "fmt" field, see 
<xref target="RFC8856" section="4" sectionFormat="of" format="default"/>).</t>

        <sourcecode type="sdp"><![CDATA[
Offer (browser):
m=application 9 TCP/WSS/BFCP *
a=setup:active
a=connection:new
a=floorctrl:c-only
m=audio 55000 RTP/AVP 0
m=video 55002 RTP/AVP 31

Answer (server):
m=application 50000 TCP/WSS/BFCP *
a=setup:passive
a=connection:new
a=websocket-uri:wss://bfcp-ws.example.com?token=3170449312
a=floorctrl:s-only
a=confid:4321
a=userid:1234
a=floorid:1 m-stream:10
a=floorid:2 m-stream:11
m=audio 50002 RTP/AVP 0
a=label:10
m=video 50004 RTP/AVP 31
a=label:11
]]></sourcecode>
        <t>
          It is possible that an endpoint (e.g., a browser) sends an offerless INVITE to the server. 
          In such cases, the server will act as SDP offerer. The server <bcp14>MUST</bcp14> assign the SDP 'setup' 
          attribute with a value of 'passive'. The server <bcp14>MUST</bcp14> have a 'websocket-uri' attribute 
          with a 'ws-URI' or 'wss-URI' value depending on whether the server wishes to use WebSocket or secure WebSocket. 
          This attribute <bcp14>MUST</bcp14> follow the syntax defined in 
          <xref target="RFC8124" section="3" sectionFormat="of" format="default"/>. 
          For BFCP application, the "proto"  value in the "m=" line <bcp14>MUST</bcp14> be 'TCP/WSS/BFCP' if WebSocket is over TLS, 
          else it <bcp14>MUST</bcp14> be 'TCP/WS/BFCP'.
        </t>
      </section>
    </section>
    <section anchor="authentication" numbered="true" toc="default">
      <name>Authentication</name>
      <t><xref target="RFC8855" section="9" sectionFormat="of" format="default"/>
      states that BFCP clients and floor control servers <bcp14>SHOULD</bcp14>
      authenticate each other prior to accepting messages, and
      RECOMMENDS that mutual TLS/DTLS authentication be used. However,
      browser-based WebSocket clients have no control over the use of
      TLS in the WebSocket API <xref target="WS-API" format="default"/>, so it is
      <bcp14>RECOMMENDED</bcp14> that standard web-based methods for client and
      server authentication are used, as follows.</t>
      <t>When a BFCP WebSocket client connects to a BFCP WebSocket
      server, it <bcp14>SHOULD</bcp14> use TCP/WSS as its transport. If the signaling 
      or control protocol traffic used to set up the conference is authenticated 
      and confidentiality and integrity protected, secure WebSocket (WSS) <bcp14>MUST</bcp14> be used, 
      and the floor control server <bcp14>MUST</bcp14> authenticate the client. The WebSocket client 
      <bcp14>MUST</bcp14> follow the procedures in <xref target="RFC7525" format="default"/> while setting up TLS 
      connection with the WebSocket server. 
      The BFCP client validates the server by means of verifying the server certificate. 
      This means the 'websocket-uri' value <bcp14>MUST</bcp14> contain a hostname. 
      The verification process does not use "a=fingerprint".</t>
      <t>A floor control server that receives a message over TCP/WS
      can mandate the use of TCP/WSS by generating an Error message,
      as described in <xref target="RFC8855" section="13.8" sectionFormat="of" format="default"/>, 
      with an error code with a value of 9 (Use TLS).</t>
      <t>Prior to sending BFCP requests, a BFCP WebSocket client
      connects to a BFCP WebSocket server and performs the connection
      handshake. As described in <xref target="handshake" format="default"/>, the handshake procedure
      involves an HTTP GET method request from the client and a
      response from the server including an HTTP 101 status code.</t>
      <t>In order to authorize the WebSocket connection, the BFCP
      WebSocket server <bcp14>SHOULD</bcp14> inspect any cookie header fields 
      <xref target="RFC6265" format="default"/> present in the HTTP GET request. For many web
      applications, the value of such a cookie is provided by the web
      server once the user has authenticated themselves to the web
      server, which could be done by many existing mechanisms. As an
      alternative method, the BFCP WebSocket server could request HTTP
      authentication by replying to the client's GET method request
      with an HTTP 401 status code. The WebSocket protocol <xref target="RFC6455" format="default"/> 
      covers this usage in Section <xref target="RFC6455" section="4.1" sectionFormat="bare" format="default"/>: 
      </t>
      <ul empty="true" spacing="normal">
        <li>If the status code received from the server is not 101,
          the WebSocket client stack handles the response per HTTP
          <xref target="RFC7230" format="default"/> procedures; in particular, the
          client might perform authentication if it receives an 401
          status code.  The WebSocket clients are vulnerable to the attacks
         of basic authentication (mentioned in <xref target="RFC7617" section="4" sectionFormat="of" format="default"/>) and
        digest authentication (mentioned in <xref target="RFC7616" section="5" sectionFormat="of" format="default"/>). To overcome
        some of these weaknesses, WebSocket clients can use the 
        HTTP Origin-Bound Authentication (HOBA) mechanism mentioned in 
        <xref target="RFC7486" format="default"/>, for example.</li>
    </ul>
    </section>
    <section anchor="security_considerations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>Considerations from <xref target="RFC8855" format="default"/>, 
      <xref target="RFC8856" format="default"/>, and <xref target="RFC5018" format="default"/> apply.</t>
      <t>BFCP relies on lower-layer security mechanisms to provide
      replay and integrity protection and confidentiality. It is
      <bcp14>RECOMMENDED</bcp14> that the BFCP traffic transported over WebSocket
      be protected by using a Secure WebSocket
      connection (using TLS <xref target="RFC8446" format="default"/> over TCP). The security
      considerations in <xref target="RFC6455" format="default"/> apply for BFCP over WebSocket as well.
      The security model here is a typical webserver-client model 
      where the client validates the server certificate and then connects to the server. 
      <xref target="authentication" format="default"/> describes the authentication procedures between client 
      and server.</t>
      <t>When using BFCP over WebSocket, the security mechanisms defined in
    <xref target="RFC8855" format="default"/> are not used. Instead, the 
    application is required to build and rely on the security mechanisms in <xref target="RFC6455" format="default"/>.</t>
      <t>The rest of this section analyses the threats described in 
      <xref target="RFC8855" section="14" sectionFormat="of" format="default"/> when WebSocket is used as a transport 
      protocol for BFCP.</t>

      <t>An attacker attempting to impersonate a floor control server is
      avoided by having servers accept BFCP messages over WSS
      only. As with any other web connection, the clients will verify the server's 
      certificate. The BFCP WebSocket client <bcp14>MUST</bcp14> follow the
      procedures in <xref target="RFC7525" format="default"/> (including hostname verification as per 
      <xref target="RFC7525" section="6.1" sectionFormat="of" format="default"/>) while setting up a TLS connection with floor 
      control WebSocket server.</t>
      <t>An attacker attempting to impersonate a floor control client is avoided by 
        having servers accept BFCP messages over WSS only. As described in 
        <xref target="RFC6455" section="10.5" sectionFormat="of" format="default"/> the floor control server can use 
        any client authentication mechanism and follow the steps in <xref target="authentication" format="default"/> 
        of this document.</t>
      <t>Attackers may attempt to modify messages exchanged by a client and a 
      floor control server. This can be prevented by having WSS between client and server.</t>
      <t>An attacker trying to replay the messages is prevented by
   having floor control servers check that messages arriving over a
   given WSS connection use an authorized user ID. </t>
      <t>Attackers may eavesdrop on the network to get access
   to confidential information between the floor control server and a
   client (e.g., why a floor request was denied).  In order to ensure that
   BFCP users are getting the level of protection that they would get using
   BFCP directly, applications need to have a way to
   control the WebSocket libraries to use encryption algorithms specified in 
   <xref target="RFC8855" section="7" sectionFormat="of" format="default"/>. Since the 
   WebSocket API <xref target="WS-API" format="default"/> does not have a way to allow an 
   application to select the encryption algorithm to be used, the protection level 
   provided when WSS is used is limited to the underlying TLS algorithm used by 
   the WebSocket library.</t>
    </section>
    <section anchor="iana_considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section numbered="true" toc="default">
        <name>Registration of the WebSocket BFCP Subprotocol</name>
        <t>IANA has registered the WebSocket
        BFCP subprotocol under the "WebSocket Subprotocol Name Registry"
        as follows:</t>
        <dl newline="false" spacing="normal">
          <dt>Subprotocol Identifier:</dt>
          <dd>bfcp</dd>
          <dt>Subprotocol Common Name:</dt>
          <dd>WebSocket Transport
            for BFCP (Binary Floor Control Protocol)</dd>
          <dt>Subprotocol Definition:</dt>
          <dd>RFC 8857</dd>
        </dl>
      </section>
      <section numbered="true" toc="default">
        <name>Registration of the 'TCP/WS/BFCP' and 'TCP/WSS/BFCP' SDP "proto" Values</name>
        <t>This document defines two new values for the SDP "proto"
        subregistry within the "Session Description Protocol (SDP) Parameters" 
        registry. The resulting entries are shown in <xref target="IANA_SDP_proto" format="default"/>:</t>

<table anchor="IANA_SDP_proto">
   <name>Values for the SDP "proto" Field</name>
   <thead>
      <tr>
         <th>Value</th>
         <th>Reference</th>
      </tr>
   </thead>
   <tbody>
      <tr>
         <td>TCP/WS/BFCP</td>
         <td>RFC 8857</td>
      </tr>
      <tr>
         <td>TCP/WSS/BFCP</td>
         <td>RFC 8857</td>
      </tr>
   </tbody>
</table>

      </section>
    </section>

  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4145.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6455.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5018.xml"/>

<reference anchor="RFC8855" target="https://www.rfc-editor.org/info/rfc8855">

  <front>
    <title>The Binary Floor Control Protocol (BFCP)</title>

    <author initials="G." surname="Camarillo" fullname="Gonzalo Camarillo">
      <organization />
    </author>

    <author initials="K." surname="Drage" fullname="Keith Drage">
      <organization />
    </author>

    <author initials="T." surname="Kristensen" fullname="Tom Kristensen">
      <organization />
    </author>

    <author initials="J." surname="Ott" fullname="Jörg Ott">
      <organization />
    </author>

    <author initials="C." surname="Eckel" fullname="Charles Eckel">
      <organization />
    </author>

    <date month="January" year="2021" />
  </front>
  <seriesInfo name="RFC" value="8855" />
  <seriesInfo name="DOI" value="10.17487/RFC8855"/>

</reference>


        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7525.xml"/>

<reference anchor='RFC8856' target="https://www.rfc-editor.org/info/rfc8856">
<front>
<title>Session Description Protocol (SDP) Format for Binary Floor Control
Protocol (BFCP) Streams</title>
<author initials='G' surname='Camarillo' fullname='Gonzalo Camarillo'>
    <organization />
</author>
<author initials='T' surname='Kristensen' fullname='Tom Kristensen'>
    <organization />
</author>
<author initials='C.' surname='Holmberg' fullname='Christer Holmberg'>
    <organization />
</author>
<date month='January' year='2021' />
</front>
<seriesInfo name="RFC" value="8856"/>
<seriesInfo name="DOI" value="10.17487/RFC8856"/>
</reference>

        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8124.xml"/>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7616.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7617.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7486.xml"/>

        <reference anchor="WS-API" target="https://www.w3.org/TR/2012/CR-websockets-20120920/">
          <front>
            <title>The WebSocket API</title>
            <author fullname="Ian Hickson" initials="I." role="editor" surname="Hickson">
            </author>
          </front>
          <refcontent>W3C Candidate Recommendation, September 2012</refcontent>
        </reference>
      </references>
   </references>
      <section anchor="acknowledgements" numbered="false" toc="default">
      <name>Acknowledgements</name>

      <t>The authors want to thank <contact fullname="Robert Welbourn"/> from Acme Packet and 
        <contact fullname="Sergio Garcia Murillo"/>,
        who made significant contributions to the first draft version of
        this document. This work benefited from the thorough review 
        and constructive comments of <contact fullname="Charles Eckel"/>, <contact fullname="Christer Holmberg"/>, 
        <contact fullname="Paul Kyzivat"/>, <contact fullname="Dan Wing"/>, and <contact fullname="Alissa Cooper"/>.
        Thanks to <contact fullname="Bert Wijnen"/>, <contact fullname="Robert Sparks"/>, and <contact fullname="Mirja Kühlewind"/> 
        for their reviews and comments on this document.
      </t>
      <t> Thanks to <contact fullname="Spencer Dawkins"/>, <contact fullname="Ben Campbell"/>, 
        <contact fullname="Kathleen Moriarty"/>, <contact fullname="Alexey Melnikov"/>, <contact fullname="Jari Arkko"/>, 
        and <contact fullname="Stephen Farrell"/> for
        their feedback and comments during IESG reviews. </t>
    </section> 
  </back>
</rfc>
