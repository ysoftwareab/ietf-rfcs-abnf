<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="std"
     ipr="trust200902" docName="draft-ietf-jmap-websocket-07" obsoletes=""
     updates="" submissionType="IETF" xml:lang="en" tocInclude="true"
     symRefs="true" sortRefs="true" tocDepth="3" version="3" number="8887"
     consensus="true">  
  <!-- xml2rfc v2v3 conversion 2.43.0 -->
  <front>
    <title abbrev="JMAP over WebSocket">
      A JSON Meta Application Protocol (JMAP) Subprotocol for WebSocket
    </title>
    <seriesInfo name="RFC" value="8887"/>
    <author initials="K." surname="Murchison" fullname="Kenneth Murchison">
      <organization abbrev="Fastmail">Fastmail US LLC</organization>
      <address>
        <postal>
          <street>1429 Walnut Street, Suite 1201</street>
          <city>Philadelphia</city>
          <region>PA</region>
          <code>19102</code>
          <country>United States of America</country>
        </postal>
        <email>murch@fastmailteam.com</email>
        <uri>http://www.fastmail.com/</uri>
      </address>
    </author>
    <date month="August" year="2020"/>
    <area>ART</area>
    <workgroup>JMAP</workgroup>
    <keyword>jmap</keyword>
    <keyword>websocket</keyword>
    <abstract>
      <t>This document defines a binding for the JSON Meta Application
      Protocol (JMAP) over a WebSocket transport layer.  The WebSocket
      binding for JMAP provides higher performance than the current
      HTTP binding for JMAP.
      </t>
    </abstract>

  </front>
  <middle>
    <section numbered="true" toc="default">
      <name>Introduction</name>
      <t><xref target="RFC8620" format="default">JMAP</xref>
      over <xref target="RFC7235" format="default">HTTP</xref> requires that 
      every JMAP API request be authenticated.
      Depending on the type of authentication used by
      the JMAP client and the configuration of the JMAP server,
      authentication could be an expensive operation both in time and
      resources.  In such circumstances, reauthenticating for every
      JMAP API request may harm performance.</t>
      <t>The <xref target="RFC6455" format="default">WebSocket</xref>
      binding for JMAP eliminates this performance
      hit by authenticating just the WebSocket handshake request and
      having those credentials remain in effect for the duration of
      the WebSocket connection.  This binding supports JMAP API
      requests and responses, with optional support for push
      notifications.</t>
      <t>Furthermore, the WebSocket binding for JMAP can optionally
      <xref target="RFC7692" format="default">compress</xref> both JMAP API
      requests and responses.
      Although compression of HTTP responses is ubiquitous,
      compression of HTTP requests has very low, if any, deployment
      and therefore isn't a viable option for JMAP API requests
      over HTTP.</t>
    </section>
    <!-- Intro -->

    <section numbered="true" toc="default">
      <name>Conventions Used in This Document</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL 
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>", 
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are
    to be interpreted as 
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
	<t>This document uses the terminology defined in the core JMAP
	specification <xref target="RFC8620"/>.</t>
    </section>
    <!-- Conventions -->
    
    <section anchor="discovery" numbered="true" toc="default">
      <name>Discovering Support for JMAP over WebSocket</name>
      <t>The JMAP capabilities object is returned as part of the
      standard JMAP Session object (see
      <xref target="RFC8620" sectionFormat="of" section="2"/>).
      Servers supporting this specification <bcp14>MUST</bcp14> add a property named
      "urn:ietf:params:jmap:websocket" to the capabilities object.
      The value of this property is an object that <bcp14>MUST</bcp14> contain the
      following information on server capabilities:

      </t>
      <ul spacing="normal">
	<li>
	  <t>url:  "String"</t>
          <t>The wss-URI (see <xref target="RFC6455" sectionFormat="of"
	  section="3"/>) to use for initiating a JMAP-over-WebSocket 
	  handshake (the "WebSocket URL endpoint" colloquially).</t> 
        </li>
	<li>
          <t>supportsPush:  "Boolean"</t>
          <t>This is true if the server supports push notifications over the
	  WebSocket, as described in <xref target="push"
	  format="default"/>.</t> 
        </li>
      </ul>
      <t keepWithNext="true"> Example:</t>
<artwork name="" type="" align="left" alt=""><![CDATA[
"urn:ietf:params:jmap:websocket": {
  "url": "wss://server.example.com/jmap/ws/",
  "supportsPush": true
}
]]></artwork>
    </section>
    <!-- discovery -->

    <section anchor="jmap" numbered="true" toc="default">
      <name>JMAP Subprotocol</name>
      <t>The term WebSocket subprotocol refers to an application-level
      protocol layered on top of a WebSocket connection.  This
      document specifies the WebSocket JMAP subprotocol for carrying
      JMAP API requests, responses, and optional push notifications
      through a WebSocket connection.
      Binary data is handled per <xref target="RFC8620" sectionFormat="of"
      section="6"/> (via a separate HTTP connection or stream)
      or per a future extension to JMAP or this specification.</t>
      <section anchor="authentication" numbered="true" toc="default">
        <name>Authentication</name>
        <t>A JMAP WebSocket connection is authenticated by presenting
        a user's <xref target="RFC7235" format="default">credentials in the
        HTTP request</xref> that initiates the WebSocket handshake.
        See <xref target="RFC8620" sectionFormat="of" section="8.2"/> for
        recommendations regarding the selection of HTTP authentication
        schemes.</t>
      </section>
      <!-- authentication -->

      <section anchor="handshake" numbered="true" toc="default">
        <name>Handshake</name>
        <t>The JMAP WebSocket client and JMAP WebSocket server
        negotiate the use of the WebSocket JMAP subprotocol during
        the WebSocket handshake, either via an HTTP/1.1 Upgrade request
        (see <xref target="RFC6455" sectionFormat="of" section="4"/>)
        or an HTTP/2 Extended CONNECT request (see
        <xref target="RFC8441" sectionFormat="of" section="5"/>).
        The WebSocket JMAP subprotocol is also intended to run
        over future bindings of HTTP (e.g., HTTP/3) provided that there
        is a defined mechanism for performing a WebSocket handshake
        over that binding.</t>
        <t>Regardless of the method used for the WebSocket handshake,
        the client <bcp14>MUST</bcp14> first perform a TLS handshake on a
        JMAP <xref target="discovery" format="default">WebSocket URL endpoint</xref>
        having the "wss://" scheme (WebSocket over TLS) in
        accordance with the requirements of running the particular
        binding of HTTP over TLS (see <xref target="RFC2818" format="default"/>
        and <xref target="RFC6455" sectionFormat="of" section="4.1"/> for HTTP/1.1
        and <xref target="RFC7540" sectionFormat="of" section="9.2"/> for HTTP/2).
        If the TLS handshake fails, the client <bcp14>MUST</bcp14> close the
        connection. Otherwise, the client <bcp14>MUST</bcp14> make an 
        <xref target="RFC7235" format="default">authenticated HTTP request</xref>
        on the encrypted connection and <bcp14>MUST</bcp14> include the value "jmap"
        in the list of protocols for the "Sec-WebSocket-Protocol"
        header field.</t>
        <t>The reply from the server <bcp14>MUST</bcp14> also contain a
        corresponding "Sec-WebSocket-Protocol" header field with a
        value of "jmap" in order
        for a JMAP subprotocol connection to be established.</t>
        <t>Once the handshake has successfully completed, the
        WebSocket connection is established and can be used for JMAP
        API requests, responses, and optional push notifications.
        Other message types <bcp14>MUST NOT</bcp14> be transmitted over this
        connection.</t>
        <t>The credentials used for authenticating the HTTP request
        to initiate the handshake remain in effect for the duration
        of the WebSocket connection.  If the authentication
        credentials for the user expire, the server can either treat
        subsequent requests as if they are unauthenticated or close
        the WebSocket connection.
        In the latter case, the server <bcp14>MAY</bcp14> send a Close frame with a
        status code of 1008 (Policy Violation), as defined in
        <xref target="RFC6455" sectionFormat="of" section="7.4.1"/>.</t>
      </section>
      <!-- handshake -->

      <section anchor="messages" numbered="true" toc="default">
        <name>WebSocket Messages</name>
        <t>Data frame messages in the JMAP subprotocol <bcp14>MUST</bcp14> be
        text frames and contain UTF-8 encoded data.  The messages <bcp14>MUST</bcp14>
        be in the form of a single JMAP Request object (see
        <xref target="RFC8620" sectionFormat="of" section="3.3"/>),
        JMAP WebSocketPushEnable object (see <xref target="pushenable" format="default"/>),
        or JMAP WebSocketPushDisable object (see <xref target="pushdisable" format="default"/>)
        when sent from
        the client to the server, and MUST be in the form of a single JMAP
        Response object, JSON Problem Details object, or JMAP StateChange
        object (see Sections <xref target="RFC8620" section="3.4"
	sectionFormat="bare"/>, <xref target="RFC8620" section="3.6.1"
	sectionFormat="bare"/>, and <xref target="RFC8620" section="7.1"
	sectionFormat="bare"/> of <xref target="RFC8620" format="default"/>,
	respectively) when sent from the server to the client.</t>
        <t>Note that fragmented WebSocket messages (split over
        multiple text frames) <bcp14>MUST</bcp14> be coalesced prior to parsing them
        as JSON objects.</t>
        <section anchor="invalid" numbered="true" toc="default">
          <name>Handling Invalid Data</name>
          <t>If a client or server receives a binary frame, the endpoint
          can either ignore the frame or close the WebSocket connection.
          In the latter case, the endpoint <bcp14>MAY</bcp14> send a Close frame with a
          status code of 1003 (Unsupported Data), as defined in 
          <xref target="RFC6455" sectionFormat="of" section="7.4.1"/>.</t>
          <t>If a client receives a message that is not in the form of
          a JSON Problem Details object, a JMAP Response
          object, or a JMAP StateChange object, the client can either
          ignore the message or close the WebSocket connection.
          In the latter case, the endpoint <bcp14>MAY</bcp14> send a Close frame with a
          status code of 1007 (Invalid frame payload data), as
          defined in <xref target="RFC6455" sectionFormat="of"
	  section="7.4.1"/>.</t> 
          <t>A server <bcp14>MUST</bcp14> return an appropriate
          <xref target="errors" format="default">JSON Problem Details object</xref>
          for any request-level errors
          (e.g., an invalid JMAP object, an unsupported capability or
          method call, or exceeding a server request limit).</t>
        </section>
        <!-- invalid -->

        <section anchor="requests" numbered="true" toc="default">
          <name>JMAP Requests</name>
          <t>The specification extends the Request object with two
          additional arguments when used over a WebSocket:
          </t>
	  <ul spacing="normal">
	    <li>
              <t>@type:  "String"</t>
              <t>This <bcp14>MUST</bcp14> be the string "Request".</t>
            </li>
	    <li>
              <t>id:  "String" (optional)</t>
              <t>A client-specified identifier for the request to be echoed
	      back in the response to this request.</t> 
            </li>
          </ul>

          <t>JMAP over WebSocket allows the server to process requests
          out of order.  The client-specified identifier is used as a
          mechanism for the client to correlate requests and
          responses.</t>
          <t>Additionally, the "maxConcurrentRequests" limit in the
          "capabilities" object (see <xref target="RFC8620" sectionFormat="of"
	  section="2"/>) also applies to requests made on 
          the WebSocket connection.  When using the WebSocket JMAP
          subprotocol over a binding of HTTP that allows multiplexing
          of requests (e.g., HTTP/2), this limit applies to the sum
          of requests made on both the JMAP API endpoint and the
          WebSocket connection.</t>
        </section>
        <!-- requests -->
  
        <section anchor="responses" numbered="true" toc="default">
          <name>JMAP Responses</name>
          <t>The specification extends the Response object with two
          additional arguments when used over a WebSocket:

          </t>
          <ul spacing="normal">
	    <li>
              <t>@type:  "String"</t>
              <t>This <bcp14>MUST</bcp14> be the string "Response".</t>
            </li>
	    <li>
              <t>requestId:  "String" (optional; <bcp14>MUST</bcp14> be
	      returned if an identifier is included in the request)</t> 
              <t>The client-specified identifier in the corresponding
	      request.</t> 
            </li>
          </ul>
        </section>
        <!-- responses -->
  
        <section anchor="errors" numbered="true" toc="default">
          <name>JMAP Request-Level Errors</name>
          <t>The specification extends the Problem Details object
          for request-level errors (see <xref target="RFC8620"
	  sectionFormat="of" section="3.6.1"/>) with two additional arguments
	  when used over a WebSocket:</t> 
          <ul spacing="normal">
	    <li>
              <t>@type:  "String"</t>
              <t>This <bcp14>MUST</bcp14> be the string "RequestError".</t>
            </li>
	    <li>
              <t>requestId:  "String" (optional; <bcp14>MUST</bcp14> be
	      returned if given in the request)</t> 
              <t>The client-specified identifier in the corresponding
	      request.</t> 
            </li>
          </ul>
        </section>
        <!-- errors -->
  
        <section anchor="push" numbered="true" toc="default">
          <name>JMAP Push Notifications</name>
          <t>JMAP-over-WebSocket servers that support push
          notifications on the WebSocket will advertise a
          "supportsPush" property with a value of true in
          the "urn:ietf:params:jmap:websocket" server capabilities
          object.</t>
          <section anchor="pushformat" numbered="true" toc="default">
            <name>Notification Format</name>
            <t>All push notifications take the form of a standard
            StateChange object (see <xref target="RFC8620" sectionFormat="of"
	    section="7.1"/>).</t> 
            <t>The specification extends the StateChange object with one
            additional argument when used over a WebSocket:
            </t>
            <ul spacing="normal">
	      <li>
                <t>pushState:  "String" (optional)</t>
                <t>A (preferably short) string that encodes the entire server
		state visible to the user (not just the objects returned in
		this call).</t> 
                <t>The purpose of the "pushState" token is to allow a client
		to immediately get any changes that occurred while it was
		disconnected (see <xref target="pushenable"
		format="default"/>). If the server does not support
		"pushState" tokens, the client will have to issue a series of
		"/changes" requests (see <xref target="RFC8620"
		sectionFormat="of" section="5.2"/>) upon reconnection to
		update its state to match that of the server.</t>
              </li>
            </ul>
          </section>
          <!-- format -->

          <section anchor="pushenable" numbered="true" toc="default">
            <name>Enabling Notifications</name>
            <t>A client enables push notifications from the server for
            the current connection by
            sending a WebSocketPushEnable object to the server.  A
            WebSocketPushEnable object has the following properties:

            </t>
            <ul spacing="normal">
	      <li>
                <t>@type:  "String"</t>
                <t>This <bcp14>MUST</bcp14> be the string
		"WebSocketPushEnable".</t> 
	      </li>
	      <li>
                <t>dataTypes:  "String[]|null"</t>
                <t>A list of data type names (e.g., "Mailbox" or "Email") that
		the client is interested in. A StateChange notification will
		only be sent if the data for one of these types changes.
		Other types are omitted from the TypeState object.  If null,
		changes will be pushed for all supported data types.</t> 
              </li>
	      <li>
                <t>pushState:  "String" (optional)</t>
                <t>The last "pushState" token that the client received from
		the server. Upon receipt of a "pushState" token, the server
		<bcp14>SHOULD</bcp14> immediately send all changes since that
		state token.</t> 
              </li>
            </ul>
          </section>
          <!-- enabling -->

          <section anchor="pushdisable" numbered="true" toc="default">
            <name>Disabling Notifications</name>
            <t>A client disables push notifications from the server
            for the current connection by
            sending a WebSocketPushDisable object to the server.  A
            WebSocketPushDisable object has the following property:

            </t>
            <ul spacing="normal">
	      <li>
                <t>@type:  "String"</t>
                <t>This <bcp14>MUST</bcp14> be the string "WebSocketPushDisable".</t>
              </li>
            </ul>
          </section>
          <!-- disabling -->

        </section>
        <!-- push -->
  
      </section>
      <!-- messages -->

      <section numbered="true" toc="default">
        <name>Examples</name>
        <t>The following examples show WebSocket JMAP opening
        handshakes, a JMAP Core/echo request and response, and a
        subsequent closing handshake.
        The examples assume that the JMAP WebSocket URL endpoint has been
        advertised in the JMAP Session object as having a path of
        "/jmap/ws/" and that TLS negotiation has already succeeded. 
        Note that folding of header fields is for editorial purposes
        only.</t>
        <t keepWithNext="true">
            WebSocket JMAP connection via HTTP/1.1 with push
            notifications for mail <xref target="RFC8621" format="default"/>
	    is enabled. This example assumes that the client has cached
	    pushState "aaa" from a previous connection.
        </t>
<artwork name="" type="" align="left" alt=""><![CDATA[
[[ From Client ]]                [[ From Server ]]

GET /jmap/ws/ HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Authorization: Basic Zm9vOmJhcg==
Sec-WebSocket-Key:
  dGhlIHNhbXBsZSBub25jZQ==
Sec-WebSocket-Protocol: jmap
Sec-WebSocket-Version: 13
Origin: https://www.example.com

                                 HTTP/1.1 101 Switching Protocols
                                 Upgrade: websocket
                                 Connection: Upgrade
                                 Sec-WebSocket-Accept:
                                   s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
                                 Sec-WebSocket-Protocol: jmap

[WebSocket connection established]

WS_DATA
{
  "@type": "WebSocketPushEnable",
  "dataTypes": [ "Mailbox", "Email" ],
  "pushState": "aaa"
}

                                 WS_DATA
                                 {
                                   "@type": "StateChange",
                                   "changed": {
                                     "a456": {
                                       "Mailbox": "d35ecb040aab"
                                     }
                                   },
                                   "pushState": "bbb"
                                 }

WS_DATA
{
  "@type": "Request",
  "id": "R1",
  "using": [ "urn:ietf:params:jmap:core" ],
  "methodCalls": [
    [
      "Core/echo", {
        "hello": true,
        "high": 5
      },
      "b3ff"
    ]
  ]
}

                                 WS_DATA
                                 {
                                   "@type": "Response",
                                   "requestId": "R1",
                                   "methodResponses": [
                                     [
                                       "Core/echo", {
                                         "hello": true,
                                         "high": 5
                                       },
                                       "b3ff"
                                     ]
                                   ]
                                 }

WS_DATA
The quick brown fox jumps
 over the lazy dog.

                                 WS_DATA
                                 {
                                   "@type": "RequestError",
                                   "requestId": null,
                                   "type":
                             "urn:ietf:params:jmap:error:notJSON",
                                   "status": 400,
                                   "detail":
                             "The request did not parse as I-JSON."
                                 }

[A new email is received]

                                 WS_DATA
                                 {
                                   "@type": "StateChange",
                                   "changed": {
                                     "a123": {
                                       "Email": "0af7a512ce70"
                                     }
                                   }
                                   "pushState": "ccc"
                                 }

WS_CLOSE

                                 WS_CLOSE

[WebSocket connection closed]
]]></artwork>
        <t keepWithNext="true">
            WebSocket JMAP connection on an HTTP/2 stream that also
            negotiates <xref target="RFC7692" format="default">compression</xref>:
        </t>
<artwork name="" type="" align="left" alt=""><![CDATA[
[[ From Client ]]                [[ From Server ]]

                                 SETTINGS
                                 SETTINGS_ENABLE_CONNECT_PROTOCOL = 1

HEADERS + END_HEADERS
:method = CONNECT
:protocol = websocket
:scheme = https
:path = /jmap/ws/
:authority = server.example.com
origin: https://example.com
authorization = Basic Zm9vOmJhcg==
sec-websocket-protocol = jmap
sec-websocket-version = 13
sec-websocket-extensions =
  permessage-deflate
origin = https://www.example.com

                                 HEADERS + END_HEADERS
                                 :status = 200
                                 sec-websocket-protocol = jmap
                                 sec-websocket-extensions =
                                   permessage-deflate

[WebSocket connection established]

DATA
WS_DATA
[compressed text]

                                 DATA
                                 WS_DATA
                                 [compressed text]

...

DATA + END_STREAM
WS_CLOSE

                                 DATA + END_STREAM
                                 WS_CLOSE

[WebSocket connection closed]
[HTTP/2 stream closed]
]]></artwork>
      </section>
      <!-- examples -->

    </section>
    <!-- jmap -->

    <section anchor="security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The security considerations for both WebSocket (see <xref
      target="RFC6455" sectionFormat="of" section="10"/>) and JMAP (see <xref
      target="RFC8620" sectionFormat="of" section="8"/>) apply to the
      WebSocket JMAP subprotocol. Specific security considerations are
      described below.</t> 
      <section numbered="true" toc="default">
        <name>Connection Confidentiality and Integrity</name>
        <t>To ensure the confidentiality and integrity of
        data sent and received via JMAP over WebSocket, the WebSocket
        connection <bcp14>MUST</bcp14> use <xref target="RFC5246" format="default">TLS 1.2</xref>
        or later, following the recommendations in <xref target="RFC7525" format="default">BCP 195</xref>.
        Servers <bcp14>SHOULD</bcp14> support <xref target="RFC8446" format="default">TLS 1.3</xref> or
        later.</t>
      </section>
      <section numbered="true" toc="default">
        <name>Non-browser Clients</name>
        <t>JMAP over WebSocket can be used by clients both running
        inside and outside of a web browser.  As such, the security
        considerations in Sections <xref target="RFC6455" section="10.2"
	sectionFormat="bare"/> and <xref target="RFC6455" section="10.1"
	sectionFormat="bare"/> of <xref target="RFC6455" format="default"/>
	apply to those respective environments.</t> 
      </section>
    </section>
    <!--
    <section title='Privacy Considerations' anchor='privacy'>
      <t>TODO</t>

    </section>
-->
    <section anchor="iana" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section numbered="true" toc="default">
        <name>Registration of the WebSocket JMAP Subprotocol</name>
        <t>Per this specification, IANA has registered the following in the
	"WebSocket Subprotocol Name Registry" within the "WebSocket Protocol
	Registries".  

        </t>
        <dl newline="false" spacing="normal">
          <dt>Subprotocol Identifier:</dt>
          <dd>jmap</dd>
          <dt>Subprotocol Common Name:</dt>
          <dd>WebSocket Transport for JMAP (JSON Meta Application
	  Protocol)</dd> 
          <dt>Subprotocol Definition:</dt>
          <dd>RFC 8887</dd>
        </dl>
      </section>
    </section>
    <!-- IANA -->
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6455.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7235.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7525.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7540.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7692.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8441.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8620.xml"/>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8621.xml"/>
      </references>
    </references>
    <section numbered="false" toc="default">
      <name>Acknowledgments</name>
      <t>The author would like to thank the following individuals for
      contributing their ideas and support for writing this
      specification: <contact fullname="Neil Jenkins"/>, <contact
      fullname="Robert Mueller"/>, and <contact fullname="Chris Newman"/>.</t>
    </section>
  </back>
</rfc>
