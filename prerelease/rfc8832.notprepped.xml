<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="std"
     ipr="trust200902" number="8832" submissionType="IETF" consensus="true"
     obsoletes="" updates="" xml:lang="en" symRefs="true" tocInclude="true"
     sortRefs="false" version="3" docName="draft-ietf-rtcweb-data-protocol-09">

  <!-- xml2rfc v2v3 conversion 2.30.0 -->
  <front>
    <title>WebRTC Data Channel Establishment Protocol</title>
    <seriesInfo name="RFC" value="8832"/>
    <author initials="R." surname="Jesup" fullname="Randell Jesup">
      <organization>Mozilla</organization>
      <address>
        <postal>
          <street/>
          <code/>
          <city/>
          <country>United States of America</country>
        </postal>
        <email>randell-ietf@jesup.org</email>
      </address>
    </author>
    <author initials="S." surname="Loreto" fullname="Salvatore Loreto">
      <organization>Ericsson</organization>
      <address>
        <postal>
          <street>Hirsalantie 11</street>
          <code>02420</code>
          <city>Jorvas</city>
          <country>Finland</country>
        </postal>
        <email>salvatore.loreto@ericsson.com</email>
      </address>
    </author>
    <author initials="M." surname="T端xen" fullname="Michael T端xen">
      <organization abbrev="M端nster Univ. of Appl. Sciences">
                M端nster University of Applied Sciences</organization>
      <address>
        <postal>
          <street>Stegerwaldstrasse 39</street>
          <code>48565</code>
          <city> Steinfurt</city>
          <country>Germany</country>
        </postal>
        <email>tuexen@fh-muenster.de</email>
      </address>
    </author>

    <date month="January" year="2021"/>

    <abstract>
      <t>The WebRTC framework specifies protocol support for direct interactive
rich communication using audio, video, and data between two peers' web browsers.
This document specifies a simple protocol for establishing symmetric
data channels between the peers. It uses a two-way handshake and allows
sending of user data without waiting for the handshake to complete.</t>
    </abstract>
  </front>
  <middle>
    <section numbered="true" toc="default">
      <name>Introduction</name>
      <t>The Data Channel Establishment Protocol (DCEP) is designed to provide, in the
WebRTC data channel context <xref target="RFC8831" format="default"/>,
a simple in-band method for opening symmetric data channels.
As discussed in <xref target="RFC8831" format="default"/>, the protocol uses
the Stream Control Transmission Protocol (SCTP) <xref target="RFC4960" format="default"/>
encapsulated in Datagram Transport Layer Security (DTLS) (described in
<xref target="RFC8261" format="default"/>). This allows DCEP to benefit from the
already standardized transport
and security features of SCTP and DTLS.
DTLS 1.0 is defined in <xref target="RFC4347" format="default"/>; the present
latest version, DTLS 1.2, is defined in <xref target="RFC6347" format="default"/>; and 
an upcoming version, DTLS 1.3, is defined in <xref target="I-D.ietf-tls-dtls13"/>.</t>
    </section>
    <section numbered="true" toc="default">
      <name>Conventions</name>
      <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP?14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/>
    when, and only when, they appear in all capitals, as shown here.
      </t>
    </section>
    <section numbered="true" toc="default">
      <name>Terminology</name>
      <t>This document uses the following terms:
</t>

      <dl newline="false" spacing="normal">
        <dt>Association:</dt>
        <dd>An SCTP association.</dd>
        <dt>Stream:</dt>
        <dd>
A unidirectional stream of an SCTP association. It is uniquely identified
by an SCTP stream identifier (0-65534).
Note: The SCTP stream identifier 65535 is reserved due to SCTP INIT and
INIT-ACK chunks only allowing a maximum of 65535 streams to be
negotiated (0-65534).</dd>
        <dt>Stream Identifier:</dt>
        <dd>
The SCTP stream identifier uniquely identifying a stream.</dd>
        <dt>Data Channel:</dt>
        <dd>
Two streams with the same stream identifier, one in each direction,
which are managed together.</dd>
      </dl>

    </section>
    <section numbered="true" toc="default">
      <name>Protocol Overview</name>
      <t>The Data Channel Establishment Protocol is a simple, low-overhead way
to establish bidirectional data channels over an SCTP association with a
consistent set of properties.</t>
      <t>The set of consistent properties includes:
</t>
      <ul spacing="normal">
        <li>reliable or unreliable message transmission. In case of unreliable
   transmissions, the same level of unreliability is used.</li>
        <li>in-order or out-of-order message delivery.</li>
        <li>the priority of the data channel.</li>
        <li>an optional label for the data channel.</li>
        <li>an optional protocol for the data channel.</li>
        <li>the streams.</li>
      </ul>
      <t>This protocol uses a two-way handshake to open a data channel.
The handshake pairs one incoming and one outgoing stream, both having the
same stream identifier, into a single bidirectional data channel.
The peer that initiates opening a data channel selects a stream
identifier for which the corresponding incoming and outgoing streams
are unused and sends a DATA_CHANNEL_OPEN message on the outgoing stream.
The peer responds with a DATA_CHANNEL_ACK message on its corresponding
outgoing stream. Then the data channel is open.
DCEP messages are sent on the same stream as
the user messages belonging to the data channel.
The demultiplexing is based on the SCTP Payload Protocol Identifier (PPID),
since DCEP uses a specific PPID.</t>
      <aside><t>Note: The opening side <bcp14>MAY</bcp14> send user messages before the DATA_CHANNEL_ACK
is received.</t></aside>
      <t>To avoid collisions where both sides try to open a data channel with
the same stream identifiers, each side <bcp14>MUST</bcp14> use streams with either even or
odd stream identifiers when sending a DATA_CHANNEL_OPEN message.
When using SCTP over DTLS <xref target="RFC8261" format="default"/>,
the method used to determine which side uses odd or even is based on the
underlying DTLS connection role:
the side acting as the DTLS client <bcp14>MUST</bcp14> use streams with even
stream identifiers; the side acting as the DTLS server <bcp14>MUST</bcp14> use streams
with odd stream identifiers.</t>
      <aside><t>Note: There is no attempt to ensure uniqueness for the label;
if both sides open a data channel labeled "x" at the same time, there will be
two data channels labeled "x" -- one on an even stream pair, one on an odd pair.</t></aside>

      <t>The purpose of the protocol field is to ease cross-application interoperation ("federation")
by identifying the user data being passed by means of an IANA-registered string
from the "WebSocket Subprotocol Name Registry" defined in <xref target="RFC6455" format="default"/>.
The field may be useful for homogeneous applications that may create more than one
type of data channel.
Note that there is no attempt to ensure uniqueness for the protocol
field.</t>
    </section>
    <section anchor="msg_format" numbered="true" toc="default">
      <name>Message Formats</name>
      <t>Every DCEP message starts with a one-byte
field called "Message Type" that indicates the type of the message.
The corresponding values are managed by IANA
(see <xref target="iana_msg_type" format="default"/>).</t>
      <section anchor="open_msg_format" numbered="true" toc="default">
        <name>DATA_CHANNEL_OPEN Message</name>
        <t>This message is initially sent using the data channel on the stream used
for user messages.</t>
        <artwork align="center" name="" type="" alt=""><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Message Type |  Channel Type |            Priority           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    Reliability Parameter                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Label Length          |       Protocol Length         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                                                               /
|                             Label                             |
/                                                               \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
\                                                               /
|                            Protocol                           |
/                                                               \
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]></artwork>
        <dl newline="true" spacing="normal">
          <dt>Message Type: 1 byte (unsigned integer)</dt><dd>
          <t>
This field holds the IANA-defined message type for the DATA_CHANNEL_OPEN
message. The value of this field is 0x03, as specified in
<xref target="iana_msg_type" format="default"/>.</t></dd>
          <dt>Channel Type: 1 byte (unsigned integer)</dt><dd>
          <t>
This field specifies the type of data channel to be opened. The
values are managed by IANA (see <xref target="iana_channel_type" format="default"/>):
</t>
            <dl newline="false" spacing="normal">
              <dt>DATA_CHANNEL_RELIABLE (0x00):</dt>
              <dd>
The data channel provides a reliable in-order bidirectional communication.</dd>
              <dt>DATA_CHANNEL_RELIABLE_UNORDERED (0x80):</dt>
              <dd>
The data channel provides a reliable unordered bidirectional communication.</dd>

              <dt>DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT (0x01):</dt>
              <dd>
The data channel provides a partially reliable in-order bidirectional
communication. User messages will not be retransmitted more times
than specified in the Reliability Parameter.</dd>
              <dt>DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED (0x81):</dt>
              <dd>
The data channel provides a partially reliable unordered bidirectional
communication. User messages will not be retransmitted more times
than specified in the Reliability Parameter.</dd>
              <dt>DATA_CHANNEL_PARTIAL_RELIABLE_TIMED (0x02):</dt>
              <dd>
The data channel provides a partially reliable in-order bidirectional
communication. User messages might not be transmitted or
retransmitted after a specified lifetime given in milliseconds in the
Reliability Parameter. This lifetime starts when providing the user
message to the protocol stack.</dd>
              <dt>DATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED (0x82):</dt>
              <dd>
The data channel provides a partially reliable unordered bidirectional
communication. User messages might not be transmitted or
retransmitted after a specified lifetime given in milliseconds in the
Reliability Parameter. This lifetime starts when providing the user
message to the protocol stack.</dd>
            </dl>
          </dd>
          <dt>Priority: 2 bytes (unsigned integer)</dt><dd>
          <t>
The priority of the data channel, as described in
<xref target="RFC8831" format="default"/>.</t></dd>
          <dt>Reliability Parameter: 4 bytes (unsigned integer)</dt><dd>
          <t>
For reliable data channels, this field <bcp14>MUST</bcp14> be set to 0 on the sending side
and <bcp14>MUST</bcp14> be ignored on the receiving side.
If a partially reliable data channel with a limited number of retransmissions is
used, this field specifies the number of retransmissions. If a partially
reliable data channel with a limited lifetime is used, this field specifies
the maximum lifetime in milliseconds. The following table summarizes this:</t></dd>
        </dl>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Channel Type</th>
              <th align="center">Reliability Parameter</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">DATA_CHANNEL_RELIABLE</td>
              <td align="center">Ignored</td>
            </tr>
            <tr>
              <td align="left">DATA_CHANNEL_RELIABLE_UNORDERED</td>
              <td align="center">Ignored</td>
            </tr>
            <tr>
              <td align="left">DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT</td>
              <td align="center">Number of RTX</td>
            </tr>
            <tr>
              <td align="left">DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED</td>
              <td align="center">Number of RTX</td>
            </tr>
            <tr>
              <td align="left">DATA_CHANNEL_PARTIAL_RELIABLE_TIMED</td>
              <td align="center">Lifetime in ms</td>
            </tr>
            <tr>
              <td align="left">DATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED</td>
              <td align="center">Lifetime in ms</td>
            </tr>
          </tbody>
        </table>
        <dl newline="true" spacing="normal">
          <dt>Label Length: 2 bytes (unsigned integer)</dt><dd>
          <t>
The length of the label field in bytes.</t></dd>
          <dt>Protocol Length: 2 bytes (unsigned integer)</dt><dd>
          <t>
The length of the protocol field in bytes.</t></dd>
          <dt>Label: Variable Length (sequence of characters)</dt><dd>
          <t>
The name of the data channel as a UTF-8-encoded string, as specified in
<xref target="RFC3629" format="default"/>. This may be an empty string.</t></dd>
          <dt>Protocol: Variable Length (sequence of characters)</dt><dd>
          <t>
If this is an empty string, the protocol is unspecified.
If it is a non-empty string, it specifies a protocol registered in the
"WebSocket Subprotocol Name Registry" created in
<xref target="RFC6455" format="default"/>. This string is UTF-8 encoded, as specified in
<xref target="RFC3629" format="default"/>.</t></dd>
        </dl>
      </section>
      <section numbered="true" toc="default">
        <name>DATA_CHANNEL_ACK Message</name>
        <t>This message is sent in response to a
DATA_CHANNEL_OPEN_RESPONSE message. It is sent on the stream used for user
messages using the data channel.
Reception of this message tells the opener that the data channel setup
handshake is complete.</t>
        <artwork align="center" name="" type="" alt=""><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Message Type |
+-+-+-+-+-+-+-+-+]]></artwork>
        <dl newline="true" spacing="normal">
          <dt>Message Type: 1 byte (unsigned integer)</dt><dd>
          <t>
This field holds the IANA-defined message type for the DATA_CHANNEL_ACK
message. The value of this field is 0x02, as specified in
<xref target="iana_msg_type" format="default"/>.</t></dd>
        </dl>
      </section>
    </section>
    <section numbered="true" toc="default">
      <name>Procedures</name>
      <t>All DCEP messages <bcp14>MUST</bcp14> be sent using ordered delivery and reliable
transmission. They <bcp14>MUST</bcp14> be sent on the same outgoing stream as the user messages
belonging to the corresponding data channel.
Multiplexing and demultiplexing is done by using the SCTP PPID.
Therefore, a DCEP message <bcp14>MUST</bcp14> be sent with the
assigned PPID for the Data Channel Establishment Protocol
(see <xref target="iana_ppid" format="default"/>).
Other messages <bcp14>MUST NOT</bcp14> be sent using this PPID.</t>
      <t>The peer that initiates opening a data channel selects a stream identifier
for which the corresponding incoming and outgoing streams are unused.
If the side is acting as the DTLS client, it <bcp14>MUST</bcp14> choose an even stream identifier;
if the side is acting as the DTLS server, it <bcp14>MUST</bcp14> choose an odd one. The initiating peer
fills in the parameters of the DATA_CHANNEL_OPEN message and sends it on
the chosen stream.</t>
      <t>If a DATA_CHANNEL_OPEN message is received on an unused stream,
the stream identifier corresponds to the role of the peer, and
all parameters in the DATA_CHANNEL_OPEN message are valid,
then a corresponding DATA_CHANNEL_ACK message is sent on the stream with the
same stream identifier as the one the DATA_CHANNEL_OPEN message was
received on.</t>
      <t>If the DATA_CHANNEL_OPEN message doesn't satisfy the conditions above, the
receiver <bcp14>MUST</bcp14> close the corresponding data channel using the procedure
described in <xref target="RFC8831" format="default"/> and <bcp14>MUST NOT</bcp14> send a DATA_CHANNEL_ACK
message in response to the received message. This might occur if, for example,
a DATA_CHANNEL_OPEN message is received on an already used stream, there are
problems with parameters within the DATA_CHANNEL_OPEN
message, the odd/even rule is violated, or the DATA_CHANNEL_OPEN message itself
is not well formed. Therefore, receiving an SCTP stream-reset request for a stream on which
no DATA_CHANNEL_ACK message has been received indicates to the sender of the
corresponding DATA_CHANNEL_OPEN message the failure of the data channel
setup procedure. After also successfully resetting the corresponding outgoing
stream, which concludes the data channel closing initiated by the peer,
a new DATA_CHANNEL_OPEN message can be sent on the stream.</t>
      <t>After the DATA_CHANNEL_OPEN message has been sent, the sender of that message
<bcp14>MAY</bcp14> start sending messages containing user data without
waiting for the reception of the corresponding DATA_CHANNEL_ACK message.
However, before the DATA_CHANNEL_ACK message or any other message has been
received on a data channel, all other messages containing user data and
belonging to this data channel <bcp14>MUST</bcp14> be sent ordered, no matter
whether the data channel is ordered or not.
After the DATA_CHANNEL_ACK or any other message has been received on the
data channel, messages containing user data <bcp14>MUST</bcp14> be sent ordered on ordered
data channels and <bcp14>MUST</bcp14> be sent unordered on unordered data channels.
Therefore, receiving a message containing user data on an unused stream
indicates an error. In that case, the corresponding data channel <bcp14>MUST</bcp14> be closed, as described
in <xref target="RFC8831" format="default"/>.</t>
    </section>
    <section anchor="sec-security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The DATA_CHANNEL_OPEN message contains two variable-length fields:
the protocol and the label. A receiver must be prepared to receive
DATA_CHANNEL_OPEN messages where these fields have the maximum length of
65535 bytes. Error cases such as using inconsistent lengths of fields,
using unknown parameter values, or violating the odd/even rule must also be handled
by closing the corresponding data channel. An end point must also be prepared
for the peer to open the maximum number of data channels.</t>
      <t>This protocol does not provide privacy, integrity, or authentication.
It needs to be used as part of a protocol suite that contains all these things.
Such a protocol suite is specified in
<xref target="RFC8261" format="default"/>.</t>
      <t>For general considerations, see <xref target="RFC8826" format="default"/> and
<xref target="RFC8827" format="default"/>.</t>
    </section>
    <section numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>IANA has updated the reference of an already existing SCTP PPID
assignment (<xref target="iana_ppid" format="default"/>) and created a new
standalone registry with its own URL for DCEP (<xref
target="iana_dcep_registry" format="default"/>) containing two new
registration tables (Sections <xref format="counter" target="iana_msg_type"/>
and <xref format="counter" target="iana_channel_type"/>).</t>

      <section anchor="iana_ppid" numbered="true" toc="default">
        <name>SCTP Payload Protocol Identifier</name>
        <t>This document uses an SCTP Payload Protocol
Identifier (PPID) previously registered as "WebRTC Control".

<xref target="RFC4960" format="default"/> created the
"SCTP Payload Protocol Identifiers" registry, in which this identifier was assigned.
IANA has updated the PPID name from "WebRTC Control" to "WebRTC DCEP" and has
updated the reference to point to this document. The corresponding date has been
kept.</t>
        <t>Therefore, this assignment now appears as follows:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left">Value</th>
              <th align="left">SCTP PPID</th>
              <th align="left">Reference</th>
              <th align="left">Date</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">WebRTC DCEP</td>
              <td align="left">50</td>
              <td align="left">RFC 8832</td>
              <td align="left">2013-09-20</td>
            </tr>
          </tbody>
        </table>
      </section>

      <section anchor="iana_dcep_registry" numbered="true" toc="default">
        <name>New Standalone Registry for DCEP</name>
        <t>IANA has created the "Data Channel Establishment Protocol (DCEP)
	Parameters" registry.  It contains the two tables provided in Sections
	<xref format="counter" target="iana_msg_type"/>
and <xref format="counter" target="iana_channel_type"/>.</t>

        <section anchor="iana_msg_type" numbered="true" toc="default">
          <name>New Message Type Registry</name>

          <t>IANA has created the "Message Types" registry for DCEP to manage
	  the one-byte "Message Type" field in DCEP messages (see <xref
	  target="msg_format" format="default"/>). This registration table
	  is a subregistry of the registry described in <xref
	  target="iana_dcep_registry" format="default"/>.</t>

          <t>The assignment of new message types is done through an RFC Required action,
as defined in <xref target="RFC8126" format="default"/>.
Documentation of new message types <bcp14>MUST</bcp14> contain the following information:
</t>
          <ol spacing="normal" type="1">
            <li>A name for the new message type.</li>

            <li>A detailed procedural description of how each message type is used with
	    within DCEP.</li>
          </ol>
          <t>The following are the initial registrations:</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Name</th>
                <th align="left">Type</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">Reserved</td>
                <td align="left">0x00     </td>
                <td align="left">RFC 8832</td>
              </tr>
              <tr>
                <td align="left">Reserved</td>
                <td align="left">0x01     </td>
                <td align="left">RFC 8832</td>
              </tr>
              <tr>
                <td align="left">DATA_CHANNEL_ACK</td>
                <td align="left">0x02     </td>
                <td align="left">RFC 8832</td>
              </tr>
              <tr>
                <td align="left">DATA_CHANNEL_OPEN</td>
                <td align="left">0x03     </td>
                <td align="left">RFC 8832</td>
              </tr>
              <tr>
                <td align="left">Unassigned</td>
                <td align="left">0x04-0xfe</td>
                <td align="left"> </td>
              </tr>
              <tr>
                <td align="left">Reserved</td>
                <td align="left">0xff     </td>
                <td align="left">RFC 8832</td>
              </tr>
            </tbody>
          </table>

          <t>Note that values 0x00 and 0x01 are reserved to avoid
interoperability problems, since they have been used in draft versions
of the document.
The value 0xff has been reserved for future extensibility.
The range of possible values is from 0x00 to 0xff.</t>
        </section>

        <section anchor="iana_channel_type" numbered="true" toc="default">
          <name>New Channel Type Registry</name>
          <t>IANA has created the "Channel Types" registry
for DCEP to manage the one-byte
"Channel Type" field in DATA_CHANNEL_OPEN messages
(see <xref target="open_msg_format" format="default"/>).
This registration table is a subregistry within the registry described in
<xref target="iana_dcep_registry" format="default"/>.</t>
          <t>The assignment of new message types is done through an RFC Required action,
as defined in <xref target="RFC8126" format="default"/>.
Documentation of new Channel Types <bcp14>MUST</bcp14> contain the following information:
</t>
          <ol spacing="normal" type="1">
            <li>A name for the new Channel Type.</li>
            <li>A detailed procedural description of the user message handling for
data channels using this new Channel Type.</li>
          </ol>
          <t>
If new Channel Types support ordered and unordered message
delivery, the high-order bit <bcp14>MUST</bcp14> be used to indicate whether
or not the message delivery is unordered.</t>
          <t>The following are the initial registrations:</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left">Name</th>
                <th align="left">Type</th>
                <th align="left">Reference</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">DATA_CHANNEL_RELIABLE</td>
                <td align="left">0x00</td>
                <td align="left">RFC 8832</td>
              </tr>
              <tr>
                <td align="left">DATA_CHANNEL_RELIABLE_UNORDERED</td>
                <td align="left">0x80</td>
                <td align="left">RFC 8832</td>
              </tr>
              <tr>
                <td align="left">DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT</td>
                <td align="left">0x01</td>
                <td align="left">RFC 8832</td>
              </tr>
              <tr>
                <td align="left">DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED</td>
                <td align="left">0x81</td>
                <td align="left">RFC 8832</td>
              </tr>
              <tr>
                <td align="left">DATA_CHANNEL_PARTIAL_RELIABLE_TIMED</td>
                <td align="left">0x02</td>
                <td align="left">RFC 8832</td>
              </tr>
              <tr>
                <td align="left">DATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED</td>
                <td align="left">0x82</td>
                <td align="left">RFC 8832</td>
              </tr>
              <tr>
                <td align="left">Reserved</td>
                <td align="left">0x7f</td>
                <td align="left">RFC 8832</td>
              </tr>
              <tr>
                <td align="left">Reserved</td>
                <td align="left">0xff</td>
                <td align="left">RFC 8832</td>
              </tr>
              <tr>
                <td align="left">Unassigned</td>
                <td align="left">rest</td>
                <td align="left">         </td>
              </tr>
            </tbody>
          </table>
          <t>Values 0x7f and 0xff have been reserved for future
extensibility.
The range of possible values is from 0x00 to 0xff.</t>
        </section>
      </section>
    </section>
  </middle>
  <back>

   <displayreference target="I-D.ietf-tls-dtls13" to="TLS-DTLS13"/>

    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4960.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8126.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8261.xml"/>

<!-- draft-ietf-rtcweb-data-channel (RFC 8831) -->
<reference anchor="RFC8831" target="https://www.rfc-editor.org/info/rfc8831">
<front>
<title>WebRTC Data Channels</title>
<author initials="R" surname="Jesup" fullname="Randell Jesup">
  <organization/>
</author>
<author initials="S" surname="Loreto" fullname="Salvatore Loreto">
  <organization/>
</author>
<author initials="M" surname="T端xen" fullname="Michael T端xen">
  <organization/>
</author>
<date month='January' year='2021'/>
</front>
<seriesInfo name="RFC" value="8831"/>
<seriesInfo name="DOI" value="10.17487/RFC8831"/>
</reference>

      </references>

      <references>
        <name>Informative References</name>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4347.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6347.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6455.xml"/>

<!-- draft-ietf-rtcweb-security (RFC 8826) -->
 <reference anchor="RFC8826" target="https://www.rfc-editor.org/info/rfc8826">
 <front>
 <title>Security Considerations for WebRTC</title>
 <author initials='E.' surname='Rescorla' fullname='Eric Rescorla'>
   <organization/>
 </author>
 <date month='January' year='2021'/>
 </front>
 <seriesInfo name="RFC" value="8826"/>
 <seriesInfo name="DOI" value="10.17487/RFC8826"/>
 </reference>

<!-- draft-ietf-rtcweb-security-arch (RFC 8827) -->
 <reference anchor="RFC8827" target="https://www.rfc-editor.org/info/rfc8827">
 <front>
 <title>WebRTC Security Architecture</title>
 <author initials='E.' surname='Rescorla' fullname='Eric Rescorla'>
   <organization/>
 </author>
 <date month='January' year='2021'/>
 </front>
 <seriesInfo name="RFC" value="8827"/>
 <seriesInfo name="DOI" value="10.17487/RFC8827"/>
 </reference>

        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.draft-ietf-tls-dtls13-39.xml"/>
      </references>
    </references>
    <section numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>The authors wish to thank
<contact fullname="Harald Alvestrand"/>,
<contact fullname="Richard Barnes"/>,
<contact fullname="Adam Bergkvist"/>,
<contact fullname="Spencer Dawkins"/>,
<contact fullname="Barry Dingle"/>,
<contact fullname="Stefan H奪kansson"/>,
<contact fullname="Cullen Jennings"/>,
<contact fullname="Paul Kyzivat"/>,
<contact fullname="Doug Leonard"/>,
<contact fullname="Alexey Melnikov"/>,
<contact fullname="Pete Resnick"/>,
<contact fullname="Irene R端ngeler"/>,
<contact fullname="Randall Stewart"/>,
<contact fullname="Peter Thatcher"/>,
<contact fullname="Martin Thomson"/>,
<contact fullname="Justin Uberti"/>,
and many others for their invaluable comments.</t>
    </section>
  </back>
</rfc>
