<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="exp" ipr="trust200902"  number="8848" docName="draft-ietf-clue-signaling-15" obsoletes="" updates="" submissionType="IETF" consensus="true" xml:lang="en" tocInclude="true" tocDepth="4" symRefs="true" sortRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 2.38.1 -->

<front>
    <title abbrev="CLUE Signaling">
      Session Signaling for Controlling Multiple Streams for Telepresence (CLUE)
    </title>
    <seriesInfo name="RFC" value="8848"/>
    <author initials="R." surname="Hanton" fullname="Robert Hanton">
      <organization>Cisco Systems</organization>
      <address>
        <email>rohanse2@cisco.com</email>
      </address>
    </author>
    <author initials="P." surname="Kyzivat" fullname="Paul Kyzivat">
      <address>
        <email>pkyzivat@alum.mit.edu</email>
      </address>
    </author>

    <author initials="L." surname="Xiao" fullname="Lennard Xiao">
      <organization>Beijing Chuangshiyoulian</organization>
      <address>
        <email>lennard.xiao@outlook.com</email>
      </address>
    </author>
    <author initials="C." surname="Groves" fullname="Christian Groves">
      <address>
        <email>cngroves.std@gmail.com</email>
      </address>
    </author>
    <date month="January" year="2021"/>

    <abstract>
      <t>
   This document is about Controlling Multiple Streams for Telepresence
   (CLUE) signaling.  It specifies how the CLUE protocol and the CLUE
   data channel are used in conjunction with each other and with existing
   signaling mechanisms, such as SIP and the Session Description Protocol
   (SDP), to produce a telepresence call.
      </t>
    </abstract>
  </front>
  <middle>
    <section numbered="true" toc="default">
      <name>Introduction</name>
      <t>
To enable devices to participate in a telepresence call, where they select the sources
they wish to view, receive those media sources, and display them in an
optimal fashion, Controlling Multiple Streams for Telepresence (CLUE) employs
two principal and interrelated protocol negotiations.
SDP <xref target="RFC4566" format="default"/>, conveyed via 
SIP <xref target="RFC3261" format="default"/>, is used to negotiate the specific media
capabilities that can be delivered to specific addresses on a device.
Meanwhile, CLUE protocol messages <xref target="RFC8847" format="default"/>, transported via a 
CLUE data channel <xref target="RFC8850" format="default"/>, are used to
negotiate the Capture Sources available, their attributes, and any constraints
in their use. They also allow the far-end device to specify which Captures
they wish to receive. It is recommended that those documents be read prior to
this one as this document assumes familiarity with those protocols and hence
uses terminology from each with limited introduction.
      </t>
      <t>
Beyond negotiating the CLUE channel, SDP is also used to negotiate the details
of supported media streams and the maximum capability of each of those
streams. As the CLUE Framework <xref target="RFC8845" format="default"/>
defines a manner in which the Media Provider expresses their maximum Encoding
Group capabilities, SDP is also used to express the encoding limits for each
potential Encoding. 
      </t>
      <t>
Backwards compatibility is an important consideration of the protocol: it is
vital that a CLUE-capable device contacting a device that does not support
CLUE is able to fall back to a fully functional non-CLUE call. The document
also defines how a non-CLUE call may be upgraded to CLUE mid-call and,
similarly, how CLUE functionality can be removed mid-call to return to a
standard non-CLUE call.
      </t>
    </section>
    <section numbered="true" toc="default">
      <name>Terminology</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
      <t>
This document uses terminology defined in the CLUE Framework
<xref target="RFC8845" format="default"/>.
      </t>
      <t>
A few additional terms specific to this document are defined as follows:
      </t>
      <dl newline="false" spacing="normal">
         <dt>CLUE-controlled media:</dt>
        <dd>
A media "m=" line that is under CLUE control; the Capture Source that provides 
the media on this "m=" line is negotiated in CLUE. See
<xref target="sec.group" format="default"/> for details on how this control is signaled in
SDP. There is a corresponding "non-CLUE-controlled" media term. 
         </dd>
        <dt>non-CLUE device:</dt>
        <dd>
A device that supports standard SIP and SDP but either does not support CLUE
or does support CLUE but does not currently wish to invoke CLUE capabilities.
        </dd>
      <dt>RTCP:</dt><dd>RTP Control Protocol.</dd>
      <dt>SCTP:</dt><dd>Stream Control Transmission Protocol.</dd>
      <dt>STUN:</dt><dd>Session Traversal Utilities for NAT.</dd>
      </dl>
    </section>
    <section anchor="sec.tag" numbered="true" toc="default">
      <name>Media Feature Tag Definition</name>
      <t>
The "sip.clue" media feature tag <xref target="RFC3840" format="default"/> indicates
support for CLUE in SIP <xref target="RFC3261" format="default"/> calls. A CLUE-capable
device <bcp14>SHOULD</bcp14> include this media feature tag in its REGISTER requests and
OPTION responses. It <bcp14>SHOULD</bcp14> also include the media feature tag in INVITE and
UPDATE <xref target="RFC3311" format="default"/> requests and responses.
      </t>
      <t>
Presence of the media feature tag in the contact field of a request or
response can be used to determine that the far end supports CLUE. 
      </t>
    </section>
    <section anchor="sec.group" numbered="true" toc="default">
      <name>SDP Grouping Framework CLUE Extension Semantics</name>
      <section numbered="true" toc="default">
        <name>General</name>
        <t>
This section defines a new SDP Grouping Framework <xref target="RFC5888" format="default"/>
extension called 'CLUE'.
        </t>
        <t>
The CLUE extension can be indicated using an SDP session-level
'group' attribute. Each SDP media "m=" line that is included in this group,
using SDP media-level mid attributes, is CLUE controlled by a CLUE data
channel that is also included in this CLUE group.
        </t>
        <t>
Currently, only support for a single CLUE group is specified; support for
multiple CLUE groups in a single session is outside the scope of this
document. A device <bcp14>MUST NOT</bcp14> include more than one CLUE group in its SDP
message unless it is following a specification that defines how multiple CLUE
channels are signaled and is able to either determine that the other side of
the SDP exchange supports multiple CLUE channels or fail
gracefully in the event it does not. 
        </t>
      </section>
      <section numbered="true" toc="default">
        <name>The CLUE Data Channel and the CLUE Grouping Semantic</name>
        <t>
The CLUE data channel <xref target="RFC8850" format="default"/> is a
bidirectional data channel <xref target="RFC8831" format="default"/>
used for the transport of CLUE messages, conveyed within an SCTP over DTLS
connection. This channel must be established before CLUE protocol messages can
be exchanged and CLUE-controlled media can be sent.
        </t>
        <t>
The data channel is negotiated over SDP as described in 
<xref target="RFC8864" format="default"/>. A CLUE-capable
device wishing to negotiate CLUE <bcp14>MUST</bcp14> also include a CLUE group in their SDP
Offer or Answer and include the "mid" of the "m=" line for the data channel in
that group. The CLUE group <bcp14>MUST</bcp14> include the "mid" of the "m=" line for one
(and only one) data channel.
        </t>
        <t>
Presence of the data channel in the CLUE group in an SDP Offer or Answer also
serves, along with the "sip.clue" media feature tag, as an indication that the
device supports CLUE and wishes to upgrade the call to include CLUE-controlled
media. A CLUE-capable device <bcp14>SHOULD</bcp14> include a data channel "m=" line in offers
and, when allowed by <xref target="RFC3264" format="default"/>, answers.
        </t>
      </section>
      <section numbered="true" toc="default">
        <name>CLUE-Controlled Media and the CLUE Grouping Semantic</name>
        <t>
CLUE-controlled media lines in an SDP are "m=" lines in which the content of
the media streams to be sent is negotiated via the CLUE protocol
<xref target="RFC8847" format="default"/>. For an "m=" line
to be CLUE controlled, its "mid" attribute value <bcp14>MUST</bcp14> be included in the CLUE group. 
CLUE-controlled media is controlled by the CLUE protocol as negotiated on the
CLUE data channel with a "mid" included in the CLUE group.
        </t>
        <t>
"m=" lines not specified as being under CLUE control follow normal rules for media 
streams negotiated in SDP as defined in documents such as
<xref target="RFC3264" format="default"/>.
        </t>
        <t>
The restrictions on CLUE-controlled media that are defined below always apply
to "m=" lines in an SDP Offer or Answer, even if negotiation of the data
channel in SDP failed due to lack of CLUE support by the remote device or for
any other reason, or in an offer if the recipient does not include the "mid"
of the corresponding "m=" line in their CLUE group.
        </t>
      </section>
      <section numbered="true" toc="default">
        <name>SDP Semantics for CLUE-Controlled Media</name>
        <section anchor="sec.sdp_encodings" numbered="true" toc="default">
          <name>Signaling CLUE Encodings</name>
          <t>
The CLUE Framework <xref target="RFC8845" format="default"/> defines the
concept of "Encodings", which represent the sender's encode ability. Each
Encoding the Media Provider wishes to signal is done so via an "m=" line of
the appropriate media type, which <bcp14>MUST</bcp14> be marked as sendonly with the
"a=sendonly" attribute or as inactive with the "a=inactive" attribute.
          </t>
          <t>
The encoder limits of active (e.g., "a=sendonly") Encodings can then be
expressed using existing SDP syntax. For instance, for H.264, see Table 6 in
<xref target="RFC6184" sectionFormat="of" section="8.2.2"/> for a list of valid parameters for representing
encoder sender stream limits.
          </t>
          <t>
These Encodings are CLUE controlled and hence <bcp14>MUST</bcp14> include a "mid" in the
CLUE group as defined above.
          </t>
          <t>
In addition to the normal restrictions defined in <xref target="RFC3264" format="default"/>, the
stream <bcp14>MUST</bcp14> be treated as if the "m=" line direction attribute had been set to
"a=inactive" until the Media Provider has received a valid CLUE 'configure'
message specifying the Capture to be used for this stream. This means that
RTP packets <bcp14>MUST NOT</bcp14> be sent until configuration is complete, while
non-media packets such as STUN, RTCP, and DTLS <bcp14>MUST</bcp14> be sent as per their
relevant specifications, if negotiated.
          </t>
          <t>
Every "m=" line representing a CLUE Encoding <bcp14>MUST</bcp14> contain a "label" attribute
as defined in <xref target="RFC4574" format="default"/>. This label is used to identify the
Encoding by the sender in CLUE 'advertisement' messages and by the receiver in
CLUE 'configure' messages. Each label used for a CLUE-controlled "m=" line
<bcp14>MUST</bcp14> be different from the label on all other "m=" lines in the CLUE group,
unless an "m=" line represents a dependent stream related to another "m=" line
(such as a Forward Error Correction (FEC) stream), in which case it <bcp14>MUST</bcp14> have the same label value as
the "m=" line on which it depends.
          </t>
          <section numbered="true" toc="default">
            <name>Referencing Encodings in the CLUE Protocol</name>
            <t>
CLUE Encodings are defined in SDP but can be referenced from CLUE protocol
messages -- this is how the protocol defines which Encodings are a part of an
Encoding Group (in 'advertisement' messages) and which Encoding is used to encode 
a specific Capture (in 'configure' messages). The labels on the
CLUE-controlled "m=" lines are the references that are used in the CLUE
protocol.  
            </t>
            <t>
Each &lt;encID&gt; (in encodingIDList) in a CLUE 'advertisement' message 
<bcp14>SHOULD</bcp14> represent an Encoding defined in SDP; the specific Encoding referenced
is a CLUE-controlled "m=" line in the most recent SDP Offer/Answer message
sent by the sender of the 'advertisement' message with a label value
corresponding to the text content of the &lt;encID&gt;. If the &lt;encID&gt;
is not defined in SDP, it <bcp14>MUST</bcp14> be one it anticipates sending in a subsequent
SDP Offer/Answer exchange.
            </t>
            <t>
Each &lt;encodingID&gt; (in captureEncodingType) in a CLUE 'configure' message
<bcp14>MUST</bcp14> represent an Encoding defined in SDP; the specific Encoding referenced is
a CLUE-controlled "m=" line in the most recent SDP Offer/Answer message
received by the sender of the 'configure' message with a label value
corresponding to the text content of the &lt;encodingID&gt;.
            </t>
            <t>
Note that the non-atomic nature of SDP/CLUE protocol interaction may mean that
there are temporary periods where an &lt;encID&gt;/&lt;encodingID&gt; in a
CLUE message does not reference an SDP "m=" line, or where an Encoding 
represented in SDP is not referenced in a CLUE protocol message. 
See <xref target="sec.coordination" format="default"/> for specifics.
            </t>
          </section>
        </section>
        <section numbered="true" toc="default">
          <name>Negotiating Receipt of CLUE Capture Encodings in SDP</name>
          <t>
A receiver who wishes to receive a CLUE stream via a specific Encoding
requires an "a=recvonly" "m=" line that matches the "a=sendonly" Encoding.
          </t>
          <t>
These "m=" lines are CLUE controlled and hence <bcp14>MUST</bcp14> include their "mid" in the
CLUE group. They <bcp14>MAY</bcp14> include a "label" attribute, but this is not required by 
CLUE, as only label values associated with "a=sendonly" Encodings are
referenced by CLUE protocol messages.
          </t>
        </section>
      </section>
      <section numbered="true" toc="default">
        <name>SDP Offer/Answer Procedures</name>
        <section numbered="true" toc="default">
          <name>Generating the Initial Offer</name>
          <t>
A CLUE-capable device sending an initial SDP Offer of a SIP session and
wishing to negotiate CLUE will include an "m=" line for the data channel to
convey the CLUE protocol, along with a CLUE group containing the "mid" of the
data channel "m=" line.
          </t>
          <t>
For interoperability with non-CLUE devices, a CLUE-capable device sending an
initial SDP Offer <bcp14>SHOULD NOT</bcp14> include any "m=" line for CLUE-controlled media
beyond the "m=" line for the CLUE data channel, and it <bcp14>SHOULD</bcp14> include at least
one non-CLUE-controlled media "m=" line. 
          </t>
          <t>
If the device has evidence that the receiver is also CLUE capable, for
instance, due to receiving an initial INVITE with no SDP but including a
"sip.clue" media feature tag, the above recommendation is waived, and the
initial offer <bcp14>MAY</bcp14> contain "m=" lines for CLUE-controlled media.
          </t>
          <t>
With the same interoperability recommendations as for Encodings, the sender of
the initial SDP Offer <bcp14>MAY</bcp14> also include "a=recvonly" media lines to
preallocate "m=" lines to receive media. Alternatively, it <bcp14>MAY</bcp14> wait until CLUE
protocol negotiation has completed before including these lines in a new
offer/answer exchange -- see <xref target="sec.coordination" format="default"/> for
recommendations.
          </t>
        </section>
        <section numbered="true" toc="default">
          <name>Generating the Answer</name>
          <section numbered="true" toc="default">
            <name>Negotiating Use of CLUE and the CLUE Data Channel</name>
            <t>
If the recipient of an initial offer is CLUE capable, and the offer contains
both an "m=" line for a data channel and a CLUE group containing the "mid" for
that "m=" line, they <bcp14>SHOULD</bcp14> negotiate data channel support for an "m=" line
and include the "mid" of that "m=" line in a corresponding CLUE group. 
            </t>
            <t>
A CLUE-capable recipient that receives an "m=" line for a data channel but no
corresponding CLUE group containing the "mid" of that "m=" line <bcp14>MAY</bcp14> still 
include a corresponding data channel "m=" line if there are any other non-CLUE
protocols it can convey over that channel, but the use of the CLUE protocol <bcp14>MUST NOT</bcp14> be negotiated on this channel.
            </t>
          </section>
          <section numbered="true" toc="default">
            <name>Negotiating CLUE-Controlled Media</name>
            <t>
If the initial offer contained "a=recvonly" CLUE-controlled media lines, the
recipient <bcp14>SHOULD</bcp14> include corresponding "a=sendonly" CLUE-controlled media
lines for accepted Encodings, up to the maximum number of Encodings it 
wishes to advertise. As CLUE-controlled media, the "mid" of these "m=" lines
<bcp14>MUST</bcp14> be included in the corresponding CLUE group. The recipient <bcp14>MUST</bcp14> set the
direction of the corresponding "m=" lines of any remaining "a=recvonly"
CLUE-controlled media lines received in the offer to "a=inactive".
            </t>
            <t>
If the initial offer contained "a=sendonly" CLUE-controlled media lines, the
recipient <bcp14>MAY</bcp14> include corresponding "a=recvonly" CLUE-controlled media lines,
up to the maximum number of Capture Encodings it wishes to receive.
Alternatively, it <bcp14>MAY</bcp14> wait until CLUE protocol negotiation has completed
before including these lines in a new offer/answer exchange -- see
<xref target="sec.coordination" format="default"/> for recommendations. The recipient <bcp14>MUST</bcp14> set
the direction of the corresponding "m=" lines of any remaining "a=sendonly"
CLUE-controlled media lines received in the offer to "a=inactive".
            </t>
          </section>
          <section numbered="true" toc="default">
            <name>Negotiating Non-CLUE-controlled Media</name>
            <t>
A CLUE-controlled device implementation <bcp14>MAY</bcp14> prefer to render initial,
single-stream audio and/or video for the user as rapidly as possible,
transitioning to CLUE-controlled media once that has been negotiated.
Alternatively, an implementation <bcp14>MAY</bcp14> wish to suppress initial media, only
providing media once the final, CLUE-controlled streams have been negotiated.
            </t>
            <t>
The receiver of the initial offer, if making the call CLUE-enabled with their
SDP Answer, can make their preference clear by their action in accepting or
rejecting non-CLUE-controlled media lines. Rejecting these "m=" lines will
ensure that no non-CLUE-controlled media flows before the CLUE-controlled
media is negotiated. In contrast, accepting one or more non-CLUE-controlled
"m=" lines in this initial answer will enable initial media to flow.
            </t>
            <t>
If the answerer chooses to send initial non-CLUE-controlled media in a 
CLUE-enabled call, <xref target="sec.clue-media" format="default"/> addresses the need to
disable it once the CLUE-controlled media is fully negotiated.
            </t>
          </section>
        </section>
        <section numbered="true" toc="default">
          <name>Processing the Initial Offer/Answer Negotiation</name>
          <t>
In the event that both the offer and answer include a data channel "m=" line with
a "mid" value included in corresponding CLUE groups, CLUE has been successfully
negotiated, and the call is now CLUE enabled. If not, then the call is not
CLUE enabled.
          </t>
          <section numbered="true" toc="default">
            <name>Successful CLUE Negotiation</name>
            <t>
In the event of successful CLUE enablement of the call, devices <bcp14>MUST</bcp14> now begin
negotiation of the CLUE channel; see
<xref target="RFC8850" format="default"/> for negotiation details. If
negotiation is successful, the sending of CLUE protocol messages <xref target="RFC8847" format="default"/> can begin.
            </t>
            <t>
A CLUE-capable device <bcp14>MAY</bcp14> choose not to send RTP on the non-CLUE-controlled
channels during the period in which control of the CLUE-controlled media lines
is being negotiated (though RTCP <bcp14>MUST</bcp14> still be sent and received as normal).
However, a CLUE-capable device <bcp14>MUST</bcp14> still be prepared to receive media on
non-CLUE-controlled media lines that have been successfully negotiated as
defined in <xref target="RFC3264" format="default"/>.
            </t>
            <t>
If either side of the call wishes to add additional CLUE-controlled "m=" lines
to send or receive CLUE-controlled media, they <bcp14>MAY</bcp14> now send a SIP request with
a new SDP Offer following the normal rules of SDP Offer/Answer and any
negotiated extensions.
            </t>
          </section>
          <section numbered="true" toc="default">
            <name>CLUE Negotiation Failure</name>
            <t>
In the event that the negotiation of CLUE fails and the call is not
CLUE enabled once the initial offer/answer negotiation completes, then CLUE is
not in use in the call. CLUE-capable devices <bcp14>MUST</bcp14> either revert to
non-CLUE behavior or terminate the call.
            </t>
          </section>
        </section>
        <section numbered="true" toc="default">
          <name>Modifying the Session</name>
          <section anchor="sec.clue-media" numbered="true" toc="default">
            <name>Adding and Removing CLUE-Controlled Media</name>
            <t>
Subsequent offer/answer exchanges <bcp14>MAY</bcp14> add additional "m=" lines for
CLUE-controlled media or activate or deactivate existing "m=" lines per the
standard SDP mechanisms.
            </t>
            <t>
In most cases, at least one additional exchange after the initial offer/answer
exchange will be required before both sides have added all the Encodings and
the ability to receive Encodings that they desire. Devices <bcp14>MAY</bcp14> delay adding
"a=recvonly" CLUE-controlled "m=" lines until after CLUE protocol negotiation
completes -- see <xref target="sec.coordination" format="default"/> for recommendations.
            </t>
            <t>
Once CLUE media has been successfully negotiated, devices <bcp14>SHOULD</bcp14> ensure that
non-CLUE-controlled media is deactivated by setting their ports to 0 in cases
where it corresponds to the media type of CLUE-controlled media that has been
successfully negotiated. This deactivation may require an additional SDP
exchange or may be incorporated into one that is part of the CLUE
negotiation.
            </t>
          </section>
          <section numbered="true" toc="default">
            <name>Enabling CLUE Mid-Call</name>
            <t>
A CLUE-capable device that receives an initial SDP Offer from a non-CLUE
device <bcp14>SHOULD</bcp14> include a new data channel "m=" line and corresponding CLUE
group in any subsequent offers it sends, to indicate that it is CLUE capable.
            </t>
            <t>
If, in an ongoing non-CLUE call, an SDP Offer/Answer exchange completes with
both sides having included a data channel "m=" line in their SDP and with the
"mid" for that channel in a corresponding CLUE group, then the call is now
CLUE enabled; negotiation of the data channel and subsequently the CLUE
protocol begins.
            </t>
          </section>
          <section anchor="sec.clue-disable" numbered="true" toc="default">
            <name>Disabling CLUE Mid-Call</name>
            <t>
If, during an ongoing CLUE-enabled call, a device wishes to disable CLUE, it 
can do so by following the procedures for closing a data channel as defined in
<xref target="RFC8864" sectionFormat="of" section="6.6.1"/>: sending
a new SDP Offer/Answer exchange and subsequent SCTP Stream Sequence Number (SSN) reset for the CLUE
channel. It <bcp14>MUST</bcp14> also remove the CLUE group. Without the CLUE group, any "m="
lines that were previously CLUE controlled no longer are; implementations <bcp14>MAY</bcp14>
disable them by setting their ports to 0 or <bcp14>MAY</bcp14> continue to use them -- in the
latter case, how they are used is outside the scope of this document.
            </t>
            <t>
If a device follows the procedure above, or an SDP Offer/Answer negotiation 
completes in a fashion in which either the "m=" CLUE data channel line was not 
successfully negotiated and/or one side did not include the data channel in
the CLUE group, then CLUE for this call is disabled. In the event that this
occurs, CLUE is no longer enabled. Any active "m=" lines still included in the
CLUE group are no longer CLUE controlled, and the implementation <bcp14>MAY</bcp14> either
disable them in a subsequent negotiation or continue to use them in some other
fashion. If the data channel is still present but not included in the CLUE
group semantic, CLUE protocol messages <bcp14>MUST</bcp14> no longer be sent.
            </t>
          </section>
          <section numbered="true" toc="default">
            <name>CLUE Protocol Failure Mid-Call</name>
            <t>
In contrast to the specific disablement of the use of CLUE described above,
the CLUE channel may fail unexpectedly. Two circumstances where this can occur
are:
            </t>
            <ul spacing="normal">
              <li>
The CLUE data channel terminates, either gracefully or ungracefully, without
any corresponding SDP renegotiation.
                        </li>
              <li>
A channel error of the CLUE protocol causes it to return to the IDLE state as
defined in <xref target="RFC8847" sectionFormat="of" section="6"/>.
                        </li>
            </ul>
            <t>
In this circumstance, implementations <bcp14>SHOULD</bcp14> continue to transmit and receive
CLUE-controlled media on the basis of the last negotiated CLUE messages,
until the CLUE protocol is re-established (in the event of a channel error) or
disabled mid-call by an SDP exchange as defined in
<xref target="sec.clue-disable" format="default"/>. Implementations <bcp14>MAY</bcp14> choose to send such
an SDP request to disable CLUE immediately or <bcp14>MAY</bcp14> continue on in a
call-preservation mode.
            </t>
          </section>
        </section>
      </section>
    </section>
    <section anchor="sec.coordination" numbered="true" toc="default">
      <name>Interaction of the CLUE Protocol and SDP Negotiations</name>
      <t>
Information about media streams in CLUE is split between two message types:
SDP, which defines media addresses and limits, and the CLUE channel,
which defines properties of Capture Devices available, scene information, and
additional constraints. As a result, certain operations, such as advertising
support for a new transmissible Capture with an associated stream, cannot be
performed atomically, as they require changes to both SDP and CLUE messaging.
      </t>
      <t>
This section defines how the negotiation of the two protocols interact,
provides some recommendations on dealing with intermediate stages in
non-atomic operations, and mandates additional constraints on when
CLUE-configured media can be sent.   
      </t>
      <section numbered="true" toc="default">
        <name>Independence of SDP and CLUE Negotiation</name>
        <t>
To avoid the need to implement interlocking state machines with the potential
to reach invalid states if messages were to be lost, or be rewritten en route
by middleboxes, the state machines in SDP and CLUE operate independently. The
state of the CLUE channel does not restrict when an implementation may send a
new SDP Offer or Answer; likewise, the implementation's ability to send a
new CLUE 'advertisement' or 'configure' message is not restricted by the
results of or the state of the most recent SDP negotiation (unless the SDP
negotiation has removed the CLUE channel).
        </t>
        <t>
The primary implication of this is that a device may receive an SDP
Offer/Answer message with a CLUE Encoding for which it does not yet have
Capture information or receive a CLUE 'configure' message specifying a
Capture Encoding for which the far end has not negotiated a media stream in
SDP.

        </t>
        <t>
CLUE messages contain an &lt;encID&gt; (in encodingIDList) or 
&lt;encodingID&gt; (in captureEncodingType), which is used to identify a 
specific Encoding or captureEncoding in SDP; see 
<xref target="RFC8846" format="default"/> for specifics.
The non-atomic nature of CLUE negotiation means that a sender may wish to send
a new CLUE 'advertisement' message before the corresponding SDP message. As
such, the sender of the CLUE message <bcp14>MAY</bcp14> include an &lt;encID&gt; that does
not currently match a CLUE-controlled "m=" line label in SDP; a CLUE-capable
implementation <bcp14>MUST NOT</bcp14> reject a CLUE protocol message solely because it
contains &lt;encID&gt; elements that do not match a label in SDP.
        </t>
        <t>
The current state of the CLUE Participant or Media Provider/Consumer
state machines does not affect compliance with any of the normative language of
<xref target="RFC3264" format="default"/>. That is, they <bcp14>MUST NOT</bcp14> delay an ongoing SDP
exchange as part of a SIP server or client transaction; an implementation <bcp14>MUST
NOT</bcp14> delay an SDP exchange while waiting for CLUE negotiation to complete or
for a 'configure' message to arrive.
        </t>
        <t>
Similarly, a device in a CLUE-enabled call <bcp14>MUST NOT</bcp14> delay any mandatory state
transitions in the CLUE Participant or Media Provider/Consumer state machines
due to the presence or absence of an ongoing SDP exchange.
        </t>
        <t>
A device with the CLUE Participant state machine in the ACTIVE state 
<bcp14>MAY</bcp14> choose to delay moving from ESTABLISHED to ADV (Media Provider
state machine) or from ESTABLISHED to WAIT FOR CONF RESPONSE (Media Consumer
state machine) based on the SDP state. See 
<xref target="RFC8847" format="default"/> for CLUE state machine specifics. 
Similarly, a device <bcp14>MAY</bcp14> choose to delay initiating a new SDP exchange based on
the state of their CLUE state machines.
        </t>
      </section>
      <section numbered="true" toc="default">
        <name>Constraints on Sending Media</name>
        <t>
While SDP and CLUE message states do not impose constraints on each other,
both impose constraints on the sending of media -- CLUE-controlled media <bcp14>MUST
NOT</bcp14> be sent unless it has been negotiated in both CLUE and SDP: an
implementation <bcp14>MUST NOT</bcp14> send a specific CLUE Capture Encoding unless its most
recent SDP exchange contains an active media channel for that Encoding AND
it has received a CLUE 'configure' message specifying a valid Capture for that
Encoding.
        </t>
      </section>
      <section numbered="true" toc="default">
        <name>Recommendations for Operating with Non-atomic Operations</name>
        <t>
CLUE-capable devices <bcp14>MUST</bcp14> be able to handle states in which CLUE messages make
reference to EncodingIDs that do not match the most recently received SDP,
irrespective of the order in which SDP and CLUE messages are received. While
these mismatches will usually be transitory, a device <bcp14>MUST</bcp14> be able to cope
with such mismatches remaining indefinitely. However, this document makes some
recommendations on message ordering for these non-atomic transitions.
        </t>
        <t>
CLUE-capable devices <bcp14>MUST</bcp14> ensure that any inconsistencies between SDP and
CLUE signaling are temporary by sending updated SDP or CLUE messages as soon
as the relevant state machines and other constraints permit.
        </t>
        <t>
Generally, implementations that receive messages with
incomplete information will be most efficient if they wait until they have the
corresponding information they lack before sending messages to make changes
related to that information. For example, an answerer that receives a new SDP
Offer with three new "a=sendonly" CLUE "m=" lines for which it has received no
CLUE 'advertisement' message providing the corresponding capture information
would typically include corresponding "a=inactive" lines in its answer, and
it would only make a new SDP Offer with "a=recvonly" when and if a new 'advertisement'
message arrives with Captures relevant to those Encodings.
        </t>
        <t>
Because of the constraints of SDP Offer/Answer and because new SDP 
negotiations are generally more 'costly' than sending a new CLUE message,
implementations needing to make changes to both channels <bcp14>SHOULD</bcp14> prioritize
sending the updated CLUE message over sending the new SDP message. The aim is
for the recipient to receive the CLUE changes before the SDP changes, allowing
the recipient to send their SDP Answers without incomplete information and
reducing the number of new SDP Offers required.
        </t>
      </section>
    </section>
    <section anchor="sec.capture-id" numbered="true" toc="default">
      <name>Interaction of the CLUE Protocol and RTP/RTCP CaptureID</name>
      <t>
The CLUE Framework <xref target="RFC8845" format="default"/> allows for
Multiple Content Captures (MCCs): Captures that contain multiple source
Captures, whether composited into a single stream or switched based on some
metric.
      </t>
      <t>
The Captures that contribute to these MCCs may or may not be defined in the
'advertisement' message. If they are defined and the MCC is providing them in
a switched format, the recipient may wish to determine which originating source
Capture is currently being provided, so that they can apply geometric
corrections based on that Capture's geometry or take some other action based
on the original Capture information.
      </t>
      <t>
To do this, <xref target="RFC8849" format="default"/> allows for the CaptureID of the originating Capture to be conveyed via RTP or RTCP. A Media
Provider sending switched media for an MCC with defined originating sources 
<bcp14>MUST</bcp14> send the CaptureID in both RTP and RTCP, as described
in the mapping document.
      </t>
      <section numbered="true" toc="default">
        <name>CaptureID Reception during MCC Redefinition</name>
        <t>
Because the RTP/RTCP CaptureID is delivered via a different channel to the
'advertisement' message in which in the contents of the MCC are defined, there
is an intrinsic race condition in cases where the contents of an MCC are
redefined.
        </t>
        <t>
When a Media Provider redefines an MCC that involves CaptureIDs, the 
reception of the relevant CaptureIDs by the recipient will either lead or lag reception and the processing of the new 'advertisement' message by the recipient.
As such, a Media Consumer <bcp14>MUST NOT</bcp14> be disrupted by any of the following scenarios in any
CLUE-controlled media stream it is receiving, whether that stream is for a
static Capture or for an MCC (as any static Capture may be redefined to an MCC
in a later 'advertisement' message):
        </t>
        <ul spacing="normal">
          <li>
By receiving RTP or RTCP containing a CaptureID when the most recently processed
'advertisement' message means that no media CaptureIDs are expected.
              </li>
          <li>
By receiving RTP or RTCP without CaptureIDs when the most recently processed 
'advertisement' message means that media CaptureIDs are expected.
              </li>
          <li>
By receiving a CaptureID in RTP or RTCP for a Capture defined in the most
recently processed 'advertisement' message, but which the same 'advertisement'
message does not include in the MCC.
              </li>
          <li>
By receiving a CaptureID in RTP or RTCP for a Capture not defined in the most
recently processed 'advertisement' message.
              </li>
        </ul>
      </section>
    </section>
    <section anchor="sec-bundle" numbered="true" toc="default">
      <name>Multiplexing of CLUE-Controlled Media Using BUNDLE</name>
      <section numbered="true" toc="default">
        <name>Overview</name>
        <t>
A CLUE call may involve sending and/or receiving significant numbers of media
streams. Conventionally, media streams are sent and received on unique ports.
However, each separate port used for this purpose may impose costs that a
device wishes to avoid, such as the need to open that port on firewalls and
NATs, the need to collect Interactive Connectivity Establishment (ICE) candidates <xref target="RFC8445" format="default"/>, etc.
        </t>
        <t>
The BUNDLE extension <xref target="RFC8843" format="default"/> can be used to negotiate the multiplexing of multiple media lines
onto a single 5-tuple for sending and receiving media, allowing devices in
calls to another BUNDLE-supporting device to potentially avoid some of the
above costs.
        </t>
        <t>
While CLUE-capable devices <bcp14>MAY</bcp14> support the BUNDLE extension for this purpose, 
supporting the extension is not mandatory for a device to be CLUE compliant.
        </t>
        <t>
A CLUE-capable device that supports BUNDLE <bcp14>SHOULD</bcp14> also support rtcp-mux
<xref target="RFC5761" format="default"/>. However, a CLUE-capable device that
supports rtcp-mux may or may not support BUNDLE.
        </t>
      </section>
      <section numbered="true" toc="default">
        <name>Usage of BUNDLE with CLUE</name>
        <t>
This specification imposes no additional requirements or restrictions on the
usage of BUNDLE when used with CLUE. There is no restriction on combining
CLUE-controlled media lines and non-CLUE-controlled media lines in the same
BUNDLE group or in multiple such groups. However, there are several steps an
implementation may wish to take to ameliorate the cost and time requirements
of extra SDP Offer/Answer exchanges between CLUE and BUNDLE.
        </t>
        <section numbered="true" toc="default">
          <name>Generating the Initial Offer</name>
          <t>
BUNDLE mandates that the initial SDP Offer <bcp14>MUST</bcp14> use a unique address for each
"m=" line with a non-zero port. Because CLUE implementations generally will
not include CLUE-controlled media lines, with the exception of the data
channel in the initial SDP Offer, CLUE devices that support large numbers of
streams can avoid ever having to open large numbers of ports if they
successfully negotiate BUNDLE. 
          </t>
          <t>
An implementation that does include CLUE-controlled media lines in its initial
SDP Offer while also using BUNDLE must take care to avoid rendering its
CLUE-controlled media lines unusable in the event the far end does not
negotiate BUNDLE if it wishes to avoid the risk of additional SDP exchanges to
resolve this issue. This is best achieved by not sending any CLUE-controlled
media lines in an initial offer with the 'bundle-only' attribute unless it has
been established via some other channel that the recipient supports and is
able to use BUNDLE.
          </t>
        </section>
        <section numbered="true" toc="default">
          <name>Multiplexing of the Data Channel and RTP Media</name>
          <t>
BUNDLE-supporting CLUE-capable devices <bcp14>MAY</bcp14> include the data channel in the
same BUNDLE group as RTP media. In this case, the device <bcp14>MUST</bcp14> be able to
demultiplex the various transports -- see Section <xref target="RFC8843" section="9.2" sectionFormat="bare"/> of the BUNDLE specification <xref target="RFC8843"/>. If
the BUNDLE group includes protocols other than the data channel transported
via DTLS, the device <bcp14>MUST</bcp14> also be able to differentiate the various protocols.
          </t>
        </section>
      </section>
    </section>
    <section anchor="sec-clueexample" numbered="true" toc="default">
      <name>Example: A Call between Two CLUE-Capable Endpoints</name>
      <t>
This example illustrates a call between two CLUE-capable Endpoints.
Alice, initiating the call, is a system with three cameras and three screens.
Bob, receiving the call, is a system with two cameras and two screens.
A call-flow diagram is presented, followed by a summary of each message.
      </t>
      <t keepWithPrevious="true">
To manage the size of this section, the SDP snippets only illustrate video "m="
lines. SIP ACKs are not always discussed. Note that BUNDLE is not in use.
      </t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
              +----------+                      +-----------+
              |  Alice   |                      |    Bob    |
              |          |                      |           |
              +----+-----+                      +-----+-----+
                   |                                  |
                   |                                  |
                   | SIP INVITE 1                     |
                   |--------------------------------->|
                   |                                  |
                   |                                  |
                   |                     SIP 200 OK 1 |
                   |<---------------------------------|
                   |                                  |
                   |                                  |
                   | SIP ACK 1                        |
                   |--------------------------------->|
                   |                                  |
                   |                                  |
                   |                                  |
                   |<########### MEDIA 1 ############>|
                   |   1 video A->B, 1 video B->A     |
                   |<################################>|
                   |                                  |
                   |                                  |
                   |                                  |
                   |<================================>|
                   |   CLUE DATA CHANNEL ESTABLISHED  |
                   |<================================>|
                   |                                  |
                   |                                  |
                   | CLUE OPTIONS                     |
                   |<*********************************|
                   |                                  |
                   |                                  |
                   |            CLUE OPTIONS RESPONSE |
                   |*********************************>|
                   |                                  |
                   |                                  |
                   | CLUE ADVERTISEMENT 1             |
                   |*********************************>|
                   |                                  |
                   |                                  |
                   |             CLUE ADVERTISEMENT 2 |
                   |<*********************************|
                   |                                  |
                   |                                  |
                   | CLUE ACK 1                       |
                   |<*********************************|
                   |                                  |
                   |                                  |
                   |                       CLUE ACK 2 |
                   |*********************************>|
                   |                                  |
                   |                                  |
                   | SIP INVITE 2 (+3 sendonly)       |
                   |--------------------------------->|
                   |                                  |
                   |                                  |
                   |                 CLUE CONFIGURE 1 |
                   |<*********************************|
                   |                                  |
                   |                                  |
                   |       SIP 200 OK 2 (+2 recvonly) |
                   |<---------------------------------|
                   |                                  |
                   |                                  |
                   | CLUE CONFIGURE RESPONSE 1        |
                   |*********************************>|
                   |                                  |
                   |                                  |
                   | SIP ACK 2                        |
                   |--------------------------------->|
                   |                                  |
                   |                                  |
                   |                                  |
                   |<########### MEDIA 2 ############>|
                   |   2 video A->B, 1 video B->A     |
                   |<################################>|
                   |                                  |
                   |                                  |
                   |       SIP INVITE 3 (+2 sendonly) |
                   |<---------------------------------|  
                   |                                  |                   
                   |                                  |
                   | CLUE CONFIGURE 2                 |
                   |*********************************>|
                   |                                  |
                   |                                  |
                   | SIP 200 OK 3 (+2 recvonly)       |
                   |--------------------------------->|
                   |                                  |
                   |                                  |
                   |        CLUE CONFIGURE RESPONSE 2 |
                   |<*********************************|
                   |                                  |
                   |                                  |
                   |                        SIP ACK 3 |
                   |<---------------------------------|
                   |                                  |
                   |                                  |
                   |                                  |
                   |<########### MEDIA 3 ############>|
                   |   2 video A->B, 2 video B->A     |
                   |<################################>|                   
                   |                                  |
                   |                                  |
                   |                                  |
                   v                                  v ]]></artwork>
      <t>
In SIP INVITE 1, Alice sends Bob a SIP INVITE with the
basic audio and video capabilities and data channel included in the SIP body as per 
<xref target="RFC8841" format="default"/>. Alice also includes the "sip.clue"
media feature tag in the INVITE. A snippet of the SDP showing the grouping
attribute and the video "m=" line are shown below. Alice has included a "CLUE"
group and the mid corresponding to a data channel in the group (3).
Note that Alice has chosen not to include any CLUE-controlled media in the
initial offer -- the "mid" value of the video line is not included in the "CLUE"
group.
      </t>
 <sourcecode type="sdp"><![CDATA[   ...
   a=group:CLUE 3
   ...
   m=video 6002 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
   a=sendrecv
   a=mid:2
   ...
   m=application 6100 UDP/DTLS/SCTP webrtc-datachannel
   a=setup:actpass
   a=sctp-port: 5000
   a=dcmap:2 subprotocol="CLUE";ordered=true
   a=mid:3   ]]></sourcecode>
      <t>
Bob responds with a similar SDP in SIP 200 OK 1, which also has a "CLUE" group
including the "mid" value of a data channel; due to their similarity, no SDP
snippet is shown here. Bob wishes to receive initial media and thus includes
corresponding non-CLUE-controlled audio and video lines. Bob also includes the
"sip.clue" media feature tag in the 200 OK. Alice and Bob are each now able to
send a single audio and video stream. This is illustrated as MEDIA 1.
      </t>
      <t>
With the successful initial SDP Offer/Answer exchange complete, Alice and Bob
are also free to negotiate the CLUE data channel. This is illustrated as CLUE
DATA CHANNEL ESTABLISHED.
      </t>
      <t>
Once the data channel is established, CLUE protocol negotiation begins. In this
case, Bob was the DTLS client (sending "a=active" in his SDP Answer) and hence is
the CLUE Channel Initiator. He sends a CLUE OPTIONS message describing his
version support. On receiving that message, Alice sends her corresponding CLUE
OPTIONS RESPONSE.
      </t>
      <t>
With the OPTIONS phase complete, Alice now sends her CLUE 'advertisement'
message (CLUE ADVERTISEMENT 1). She advertises three static Captures
representing her three cameras. She also includes switched Captures suitable
for systems with one or two screens. All of these Captures are in a single Capture
Scene, with suitable Capture Scene Views that tell Bob he should
subscribe to the three static Captures, the two switched Captures, or the one
switched Capture. Alice has no simultaneity constraints, so all six
Captures are included in one simultaneous set. Finally, Alice includes an Encoding Group
with three Encoding IDs: "enc1", "enc2", and "enc3". These Encoding IDs aren't
currently valid but will match the next SDP Offer she sends.
      </t>
      <t>
Bob received CLUE ADVERTISEMENT 1 but does not yet send a 'configure' message, 
because he has not yet received Alice's Encoding information; thus, he
does not know if she will have sufficient resources in order to send him the two
streams he ideally wants at a quality he is happy with. Because Bob is not
sending an immediate 'configure' message with the "ack" element set, he must
send an explicit 'ack' message (CLUE ACK 1) to signal receipt of CLUE
ADVERTISEMENT 1. 
      </t>
      <t>
Bob also sends his CLUE 'advertisement' message (CLUE ADVERTISEMENT 2) --
though the diagram shows that this occurs after Alice sends CLUE ADVERTISEMENT
1, Bob sends his 'advertisement' message independently and does not wait for
CLUE ADVERTISEMENT 1 to arrive. He advertises two static Captures representing
his cameras. He also includes a single composed Capture for single-screen
systems, in which he will composite the two camera views into a single video
stream. All three Captures are in a single Capture Scene, with suitable
Capture Scene Views that tell Alice she should subscribe to either the two
static Captures or the single composed Capture. Bob also has no simultaneity
constraints, so he includes all three Captures in one simultaneous set. Bob also
includes a single Encoding Group with two Encoding IDs: "foo" and "bar".
      </t>
      <t>
Similarly, Alice receives CLUE ADVERTISEMENT 2 but does not yet send a
'configure' message, because she has not yet received Bob's Encoding
information; instead, she sends an 'ack' message (CLUE ACK 2).
      </t>
      <t>
Both sides have now sent their CLUE 'advertisement' messages, and an SDP
exchange is required to negotiate Encodings. For simplicity, in this case,
Alice is shown sending an INVITE with a new offer; in many implementations,
both sides might send an INVITE, which would be resolved by use of the 491
Request Pending resolution mechanism from <xref target="RFC3261" format="default"/>.
      </t>
      <t>
Alice now sends SIP INVITE 2. She maintains the sendrecv audio, video, and CLUE
"m=" lines, and she adds three new sendonly "m=" lines to represent the three
CLUE-controlled Encodings she can send. Each of these "m=" lines has a label
corresponding to one of the Encoding IDs from CLUE ADVERTISEMENT 1. Each also
has its mid added to the grouping attribute to show they are controlled by the
CLUE data channel. A snippet of the SDP showing the grouping attribute, data
channel, and video "m=" lines are shown below:
      </t>
     <sourcecode type="sdp"><![CDATA[   ...
   a=group:CLUE 3 4 5 6
   ...
   m=video 6002 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
   a=sendrecv
   a=mid:2
   ...
   m=application 6100 UDP/DTLS/SCTP webrtc-datachannel
   a=sctp-port: 5000
   a=dcmap:2 subprotocol="CLUE";ordered=true
   a=mid:3        
   ...
   m=video 6004 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016
   a=sendonly
   a=mid:4
   a=label:enc1
   m=video 6006 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016
   a=sendonly
   a=mid:5
   a=label:enc2
   m=video 6008 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016
   a=sendonly
   a=mid:6
   a=label:enc3  ]]></sourcecode>
      <t>
Bob now has all the information he needs to decide which streams to configure,
allowing him to send both a CLUE 'configure' message and his SDP Answer. As
such, he now sends CLUE CONFIGURE 1. This requests the pair of switched
Captures that represent Alice's scene, and he configures them with encoder ids
"enc1" and "enc2".
      </t>
      <t>
Bob also sends his SDP Answer as part of SIP 200 OK 2. Alongside his original
audio, video, and CLUE "m=" lines, he includes three additional "m=" lines
corresponding to the three added by Alice: two active recvonly "m= "lines and
an inactive "m=" line for the third. He adds their "mid" values to the grouping
attribute to show they are controlled by the CLUE data channel. A snippet of
the SDP showing the grouping attribute and the video "m=" lines are shown
below (mid 100 represents the CLUE data channel, which is not shown):
      </t>
    <sourcecode type="sdp"><![CDATA[   ...
   a=group:CLUE 11 12 13 100
   ...
   m=video 58722 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
   a=sendrecv
   a=mid:10
   ...
   m=video 58724 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600   
   a=recvonly
   a=mid:11
   m=video 58726 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
   a=recvonly
   a=mid:12
   m=video 58728 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
   a=inactive
   a=mid:13  ]]></sourcecode>
      <t>
Alice receives Bob's CLUE CONFIGURE 1 message and sends CLUE CONFIGURE
RESPONSE 1 to acknowledge its reception. She does not yet send the Capture Encodings
specified, because at this stage, she hasn't processed Bob's answer SDP and thus
hasn't negotiated the ability for Bob to receive these streams.
      </t>
      <t>
On receiving SIP 200 OK 2 from Bob, Alice sends her SIP ACK (SIP ACK 2). She is
now able to send the two streams of video Bob requested -- this is illustrated
as MEDIA 2.
      </t>
      <t>
The constraints of offer/answer meant that Bob could not include his Encoding
information as new "m=" lines in SIP 200 OK 2. As such, Bob now sends SIP
INVITE 3 to generate a new offer. Along with all the streams from SIP 200 OK 2,
Bob also includes two new sendonly streams. Each stream has a label
corresponding to the Encoding IDs in his CLUE ADVERTISEMENT 2 message. He also
adds their "mid" values to the grouping attribute to show they are controlled by
the CLUE data channel. A snippet of the SDP showing the grouping attribute and
the video "m=" lines are shown below (mid 100 represents the CLUE data
channel, which is not shown):
      </t>
     <sourcecode type="sdp"><![CDATA[   ...
   a=group:CLUE 11 12 14 15 100
   ...
   m=video 58722 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
   a=sendrecv
   a=mid:10
   ...
   m=video 58724 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600   
   a=recvonly
   a=mid:11
   m=video 58726 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
   a=recvonly
   a=mid:12
   m=video 0 RTP/AVP 96
   a=mid:13
   m=video 58728 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016
   a=sendonly
   a=label:foo
   a=mid:14
   m=video 58730 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016
   a=sendonly
   a=label:bar
   a=mid:15 ]]></sourcecode>
      <t>
Having received this, Alice now has all the information she needs to send
her CLUE 'configure' message and her SDP Answer. In CLUE CONFIGURE 2, she
requests the two static Captures from Bob to be sent on Encodings "foo" and
"bar".
      </t>
      <t>
Alice also sends SIP 200 OK 3, matching two recvonly "m=" lines to Bob's new
sendonly lines. She includes their "mid" values in the grouping attribute to
show they are controlled by the CLUE data channel. Alice then deactivates
the initial non-CLUE-controlled media, as bidirectional CLUE-controlled media
is now available. A snippet of the SDP showing the grouping attribute and the
video "m=" lines are shown below (mid 3 represents the data channel, not
shown):
      </t>
    <sourcecode type="sdp"><![CDATA[   ...
   a=group:CLUE 3 4 5 7 8
   ...
   m=video 0 RTP/AVP 96
   a=mid:2
   ...
   m=video 6004 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016
   a=sendonly
   a=mid:4
   a=label:enc1
   m=video 6006 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016
   a=sendonly
   a=mid:5
   a=label:enc2
   m=video 0 RTP/AVP 96
   a=mid:6
   m=video 6010 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
   a=recvonly
   a=mid:7
   m=video 6012 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
   a=recvonly
   a=mid:8  ]]></sourcecode>
      <t>
Bob receives Alice's CLUE CONFIGURE 2 message and sends CLUE CONFIGURE
RESPONSE 2 to acknowledge its reception. Bob does not yet send the Capture Encodings
specified, because he hasn't yet received and processed Alice's SDP Answer
and negotiated the ability to send these streams.
      </t>
      <t>
Finally, on receiving SIP 200 OK 3, Bob is now able to send the two streams of
video Alice requested -- this is illustrated as MEDIA 3.
      </t>
      <t>
Both sides of the call are now sending multiple video streams with their
sources defined via CLUE negotiation. As the call progresses, either side can
send a new 'advertisement' or 'configure' message or the new SDP Offers/Answers to
add, remove, or change what they have available or want to receive.
      </t>
    </section>
    <section anchor="sec-nonclueexample" numbered="true" toc="default">
      <name>Example: A Call between a CLUE-Capable and Non-CLUE Endpoint</name>
      <t>
In this brief example, Alice is a CLUE-capable Endpoint making a call to Bob,
who is not CLUE capable (i.e., is not able to use the CLUE protocol).
      </t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
      +----------+                      +-----------+
      |  Alice   |                      |    Bob    |
      |          |                      |           |
      +----+-----+                      +-----+-----+
           |                                  |
           |                                  |
           | SIP INVITE 1                     |
           |--------------------------------->|
           |                                  |
           |                                  |
           |                         200 0K 1 |
           |<---------------------------------|
           |                                  |
           |                                  |
           | SIP ACK 1                        |
           |--------------------------------->|
           |                                  |
           |                                  |
           |                                  |
           |<########### MEDIA 1 ############>|
           |   1 video A->B, 1 video B->A     |
           |<################################>|
           |                                  |
           |                                  |
           |                                  |
           |                                  |
           v                                  v ]]></artwork>
      <t>
In SIP INVITE 1, Alice sends Bob a SIP INVITE including the
basic audio and video capabilities and data channel in the SDP body as per 
<xref target="RFC8841" format="default"/>. Alice also includes the "sip.clue"
media feature tag in the INVITE. A snippet of the SDP showing the grouping
attribute and the video "m=" line are shown below. Alice has included a "CLUE"
group and the mid corresponding to a data channel in the group (3).
Note that Alice has chosen not to include any CLUE-controlled media in the
initial offer -- the "mid" value of the video line is not included in the "CLUE"
group.  
      </t>
    <sourcecode type="sdp"><![CDATA[   ...
   a=group:CLUE 3
   ...
   m=video 6002 RTP/AVP 96
   a=rtpmap:96 H264/90000
   a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
   a=sendrecv
   a=mid:2   
   ...
   m=application 6100 UDP/DTLS/SCTP webrtc-datachannel
   a=sctp-port: 5000
   a=dcmap:2 subprotocol="CLUE";ordered=true
   a=mid:3  ]]></sourcecode>
      <t>
Bob is not CLUE capable and hence does not recognize the "CLUE" semantic for 
the grouping attribute, nor does he support the data channel. IN SIP 200 OK 1, he
responds with an answer that includes audio and video, but with the data channel
zeroed.
      </t>
      <t>
From the lack of a CLUE group, Alice understands that Bob does not support
CLUE, or does not wish to use it. Both sides are now able to send a single
audio and video stream to each other. At this point, Alice begins to send her
fallback video: in this case, it's likely a switched view from whichever camera
shows the current loudest participant on her side.
      </t>
    </section>
 
    <section numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section numbered="true" toc="default">
        <name>New SDP Grouping Framework Attribute</name>
        <t>
This document registers the following semantics with IANA in the
"Semantics for the 'group' SDP Attribute" subregistry (under the
"Session Description Protocol (SDP) Parameters" registry) per 
<xref target="RFC5888" format="default"/>:
        </t>

<table anchor="IANA_table_1" align="left">
  <thead>
    <tr>
      <th align='center'>Semantics</th>
      <th align='center'>Token</th>
      <th align='center'>Mux Category</th>
      <th align='center'>Reference</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td align="center">CLUE-controlled "m=" line</td>
      <td align="left">CLUE</td>
      <td align="left">NORMAL</td>
      <td align="left">RFC 8848</td>
  </tr>
  </tbody>
</table>
      </section>
      <section numbered="true" toc="default">
        <name>New SIP Media Feature Tag</name>
        <t>
This specification registers a new media feature tag in the SIP
<xref target="RFC3261" format="default"/> tree per the procedures defined in
<xref target="RFC2506" format="default"/> and <xref target="RFC3840" format="default"/>.
        </t>
<dl newline="false" spacing="normal">
<dt>Media feature tag name:</dt><dd>sip.clue</dd>

<dt>ASN.1 Identifier:</dt><dd>30</dd>

<dt>Summary of the media feature indicated by this tag:</dt><dd>This feature tag indicates
that the device supports CLUE-controlled media.</dd>

<dt>Values appropriate for use with this feature tag:</dt><dd>Boolean.</dd>
  
<dt>The feature tag is intended primarily for use in the following
applications, protocols, services, or negotiation mechanisms:</dt>
<dd><t><br/>This feature tag is most useful in a communications application for describing the capabilities of a device to use the CLUE control protocol to negotiate the use of multiple media streams.</t></dd>

<dt>Related standards or documents:</dt><dd>RFC 8848</dd>

<dt>Security Considerations:</dt><dd>Security considerations for this media
feature tag are discussed in <xref target="sec.security" format="default"/> of
RFC 8848.</dd>
      
<dt>Name(s) &amp; email address(es) of person(s) to contact for further
information:</dt><dd>Internet Engineering Steering Group &lt;iesg@ietf.org&gt;</dd>
       
<dt>Intended usage:</dt><dd>COMMON</dd>
        </dl>
      </section>
    </section>
    <section anchor="sec.security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>
CLUE makes use of a number of protocols and mechanisms, either defined by CLUE
or long-standing. The Security Considerations section of the 
CLUE Framework document <xref target="RFC8845" format="default"/> addresses the
need to secure these mechanisms by following the recommendations of the
individual protocols.
      </t>
      <t>
Beyond the need to secure the constituent protocols, the use of CLUE does
impose additional security concerns. One area of increased risk involves the
potential for a malicious party to subvert a CLUE-capable device to attack a
third party by driving large volumes of media (particularly video) traffic at
them by establishing a connection to the CLUE-capable device and directing the
media to the victim. While this is a risk for all media devices, a
CLUE-capable device may allow the attacker to configure multiple media streams
to be sent, significantly increasing the volume of traffic directed at the
victim.
      </t>
      <t>
This attack can be prevented by ensuring that the media recipient intends to
receive the media packets. As such, all CLUE-capable devices <bcp14>MUST</bcp14> support key 
negotiation and receiver intent assurance via DTLS / Secure Real-time Transport Protocol (SRTP) <xref target="RFC5763" format="default"/> on CLUE-controlled RTP "m=" lines, and they
<bcp14>MUST</bcp14> use it or some other mechanism that provides receiver intent assurance.
All CLUE-controlled RTP "m" lines must be secured and implemented using
mechanisms such as SRTP <xref target="RFC3711" format="default"/>. CLUE implementations
<bcp14>MAY</bcp14> choose not to require the use of SRTP to secure legacy
(non-CLUE-controlled) media for backwards compatibility with older SIP clients
that are incapable of supporting it.
      </t>
      <t>
CLUE also defines a new media feature tag that indicates CLUE support. This
tag may be present even in non-CLUE calls, which increases the metadata
available about the sending device; this can help an attacker differentiate
between multiple devices and identify otherwise anonymized users
via the fingerprint of features their device supports. To prevent this, SIP
signaling used to set up CLUE sessions <bcp14>SHOULD</bcp14> always be encrypted using
TLS <xref target="RFC5630" format="default"/>.
      </t>
      <t>
The CLUE protocol also carries additional information that could be used to
help fingerprint a particular user or to identify the specific version of
software being used. 
The CLUE Framework <xref target="RFC8847" format="default"/> provides details
about these issues and how to mitigate them.
      </t>
    </section>
  </middle>
  <back>

    <references>

      <name>References</name>
      <references>
        <name>Normative References</name>

<!--draft-ietf-clue-framework-25 is 8845 -->
<reference anchor='RFC8845' target='https://www.rfc-editor.org/info/rfc8845'>
<front>
<title>Framework for Telepresence Multi-Streams</title>
<author initials='M' surname='Duckworth' fullname='Mark Duckworth' role='editor'>
    <organization />
</author>
<author initials='A' surname='Pepperell' fullname='Andrew Pepperell'>
    <organization />
</author>
<author initials='S' surname='Wenger' fullname='Stephan Wenger'>
    <organization />
</author>
<date month='January' year='2021' />
</front>
<seriesInfo name='RFC' value='8845' />
<seriesInfo name='DOI' value='10.17487/RFC8845' />
</reference>

<!--    &I-D.ietf-clue-data-model-schema; is 8846-->
<reference anchor="RFC8846" target="http://www.rfc-editor.org/info/rfc8846">
          <front>
            <title>An XML Schema for the Controlling Multiple Streams for Telepresence (CLUE) Data Model</title>
            <author initials="R" surname="Presta" fullname="Roberta Presta">
              <organization/>
            </author>
            <author initials="S P." surname="Romano" fullname="Simon Romano">
              <organization/>
            </author>
            <date month="January" year="2021"/>
          </front>
	   <seriesInfo name="RFC" value="8846"/>
           <seriesInfo name="DOI" value="10.17487/RFC8846"/>
</reference>

<!--draft-ietf-clue-protocol-19 is 8847 -->
<reference anchor='RFC8847' target='https://www.rfc-editor.org/info/rfc8847'>
<front>
<title>Protocol for Controlling Multiple Streams for Telepresence (CLUE)</title>
<author initials='R' surname='Presta' fullname='Roberta Presta'>
    <organization />
</author>
<author initials='S P.' surname='Romano' fullname='Simon Pietro Romano'>
    <organization />
</author>
<date month='January' year='2021' />
</front>
<seriesInfo name="RFC" value="8847" />
<seriesInfo name='DOI' value='10.17487/RFC8847' />
</reference>

<!--draft-ietf-clue-datachannel-18 is 8850 -->
  <reference anchor="RFC8850" target="https://www.rfc-editor.org/info/rfc8850">
    <front>
      <title>Controlling Multiple Streams for Telepresence (CLUE) Protocol Data Channel</title>
      <author initials="C." surname="Holmberg" fullname="Christer Holmberg">
        <organization/>
      </author>
     <date month="January" year="2021"/>
    </front>
    <seriesInfo name="RFC" value="8850"/>
    <seriesInfo name="DOI" value="10.17487/RFC8850"/>
  </reference>


<!--draft-ietf-clue-rtp-mapping-14: 8849 -->
<reference anchor='RFC8849' target="https://www.rfc-editor.org/info/rfc8849">
<front>
<title>Mapping RTP Streams to Controlling Multiple Streams for Telepresence
(CLUE) Media Captures</title>
<author initials='R' surname='Even' fullname='Roni Even'>
    <organization />
</author>
<author initials='J' surname='Lennox' fullname='Jonathan Lennox'>
    <organization />
</author>
<date month='January' year='2021' />
</front>
<seriesInfo name='RFC' value='8849' />
<seriesInfo name="DOI" value="10.17487/RFC8849"/>
</reference>


<!-- draft-ietf-mmusic-sctp-sdp -->
<reference anchor="RFC8841" target="https://www.rfc-editor.org/info/rfc8841">
  <front>
    <title>Session Description Protocol (SDP) Offer/Answer Procedures for
    Stream Control Transmission Protocol (SCTP) over Datagram Transport Layer
    Security (DTLS) Transport</title>
    <author initials="C." surname="Holmberg" fullname="Christer Holmberg">
      <organization />
    </author>
    <author initials="R." surname="Shpount" fullname="Roman Shpount">
      <organization />
    </author>
    <author initials="S." surname="Loreto" fullname="Salvatore Loreto">
      <organization />
    </author>
    <author initials="G." surname="Camarillo" fullname="Gonzalo Camarillo">
      <organization />
    </author>
    <date month="January" year="2021" />
  </front>
  <seriesInfo name="RFC" value="8841" />
  <seriesInfo name="DOI" value="10.17487/RFC8841"/>
</reference>


<!--draft-ietf-mmusic-data-channel-sdpneg-28; in REF - part of C238-->
  <reference anchor="RFC8864" target="https://www.rfc-editor.org/info/rfc8864">
    <front>
      <title>Negotiation Data Channels Using the Session Description
 Protocol (SDP)</title>
      <author fullname="Keith Drage" initials="K." surname="Drage">
        <organization>Unaffiliated</organization>
      </author>
      <author fullname="Raju Makaraju" initials="M." surname="Makaraju">
        <organization>Nokia</organization>
      </author>
      <author fullname="Richard Ejzak" initials="R." surname="Ejzak">
        <organization>Unaffiliated</organization>
      </author>
      <author fullname="Jerome Marcon" initials="J." surname="Marcon">
        <organization>Unaffiliated</organization>
      </author>
      <author fullname="Roni Even" initials="R." surname="Even" role="editor">
        <organization>Huawei</organization>
      </author>
      <date month="January" year="2021"/>
    </front>
    <seriesInfo name="RFC" value="8864"/>
    <seriesInfo name="DOI" value="10.17487/RFC8864"/>
  </reference>


<!-- draft-ietf-mmusic-sdp-bundle-negotiation (RFC 8843) -->
    <reference anchor="RFC8843" target="https://www.rfc-editor.org/info/rfc8843">
      <front>
        <title>Negotiating Media Multiplexing Using the Session Description Protocol (SDP)</title>
        <author initials="C" surname="Holmberg" fullname="Christer Holmberg">
          <organization/>
        </author>
        <author initials="H" surname="Alvestrand" fullname="Harald Alvestrand">
          <organization/>
        </author>
        <author initials="C" surname="Jennings" fullname="Cullen Jennings">
          <organization/>
        </author>
        <date month="January" year="2021"/>
      </front>
        <seriesInfo name="RFC" value="8843"/>
        <seriesInfo name="DOI" value="10.17487/RFC8843"/>
    </reference>

<!-- draft-ietf-rtcweb-data-channel: 8831 -->
<reference anchor="RFC8831" target="https://www.rfc-editor.org/info/rfc8831">
<front>
<title>WebRTC Data Channels</title>
<author initials="R" surname="Jesup" fullname="Randell Jesup">
  <organization/>
</author>
<author initials="S" surname="Loreto" fullname="Salvatore Loreto">
  <organization/>
</author>
<author initials="M" surname="Tüxen" fullname="Michael Tüxen">
  <organization/>
</author>
<date month='January' year='2021'/>
</front>
<seriesInfo name="RFC" value="8831"/>
<seriesInfo name="DOI" value="10.17487/RFC8831"/>
</reference>

        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3711.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3840.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4574.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5763.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5888.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2506.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3261.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3264.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3311.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4566.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5630.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5761.xml"/>
        <xi:include
	    href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6184.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8445.xml"/>

      </references>
    </references>

   <section numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>
Besides the authors, the team focusing on this document consists of:
<contact fullname="Roni Even"/>, <contact fullname="Simon Pietro Romano"/>, and <contact fullname="Roberta Presta"/>.
      </t>
      <t>
<contact fullname="Christian Groves"/>, <contact fullname="Jonathan Lennox"/>, and <contact fullname="Adam Roach"/> have contributed detailed
comments and suggestions.
      </t>
    </section>

  </back>
</rfc>
