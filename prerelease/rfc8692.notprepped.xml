<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc xmlns:xi="http://www.w3.org/2001/XInclude"
     docName="draft-ietf-lamps-pkix-shake-15" submissionType="IETF" category="std" consensus="yes" number="8692" ipr="trust200902" updates="3279" obsoletes="" xml:lang="en" tocInclude="true" tocDepth="4" symRefs="true" sortRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 2.35.0 -->
  <!-- ***** FRONT MATTER ***** -->
  <front>
    <title abbrev="SHAKE Identifiers in X.509">Internet X.509 Public Key Infrastructure: Additional Algorithm Identifiers for RSASSA-PSS and ECDSA Using SHAKEs</title>
    <seriesInfo name="RFC" value="8692"/>
    <author fullname="Panos Kampanakis" initials="P." surname="Kampanakis">
      <organization>Cisco Systems</organization>
      <address>
        <email>pkampana@cisco.com</email>
      </address>
    </author>
    <author fullname="Quynh Dang" initials="Q." surname="Dang">
      <organization>NIST</organization>
      <address>
        <postal>
          <street>100 Bureau Drive, Stop 8930</street>
          <city>Gaithersburg</city>
          <region>MD</region>
          <code>20899-8930</code>
          <country>United States of America</country>
        </postal>
        <email>quynh.dang@nist.gov</email>
      </address>
    </author>
    <date month="December" year="2019"/>
    <area>Security</area>
    <workgroup>LAMPS WG</workgroup>

    <keyword>SHAKE in X.509</keyword>
    <keyword>SHAKEs in PKIX</keyword>
    <keyword>certificates with SHAKE hashes</keyword>
    <abstract>
      <t>Digital signatures are used to sign messages, X.509 
	  certificates, and Certificate Revocation Lists (CRLs). This document updates the 
	  "Algorithms and Identifiers for the Internet 
	  X.509 Public Key Infrastructure Certificate and 
	  Certificate Revocation List (CRL) Profile" (RFC 3279)
	  and describes the conventions for using the SHAKE function 
	  family in Internet X.509 certificates and revocation lists 
	  as one-way hash functions with the RSA Probabilistic signature 
	  and Elliptic Curve Digital Signature Algorithm (ECDSA) signature algorithms. The conventions for the 
	  associated subject public keys are also described.</t>
    </abstract>
  </front>
  <middle>
    <section numbered="true" toc="default">
      <name>Introduction</name>
      <t><xref target="RFC3279" format="default"/> defines cryptographic algorithm 
      identifiers for the "Internet X.509 Public Key Infrastructure Certificate
             and Certificate Revocation List (CRL) Profile"
 <xref target="RFC5280" format="default"/>. This document updates RFC 3279 
	  and defines identifiers for several cryptographic algorithms that use 
	  variable-length output SHAKE functions introduced in 
	  <xref target="SHA3" format="default"/>  
      which can be used with RFC 5280.</t>

      <t>In the SHA-3 family, two extendable-output functions (SHAKEs)
      are defined: SHAKE128 and SHAKE256. Four other hash function
      instances, SHA3-224, SHA3-256, SHA3-384, and SHA3-512, are also
      defined but are out of scope for this document.  A SHAKE is a
      variable-length hash function defined as SHAKE(M, d) where the
      output is a d-bits-long digest of message M. The corresponding
      collision and second-preimage-resistance strengths for SHAKE128
      are min(d/2, 128) and min(d, 128) bits, respectively (see Appendix A.1 of
      <xref target="SHA3" format="default"/>).  And the corresponding collision and
      second-preimage-resistance strengths for SHAKE256 are
      min(d/2, 256) and min(d, 256) bits, respectively.</t>
      <t>A SHAKE can be used as the message digest function (to hash the message to be signed) 
	  in RSA Probabilistic Signature Scheme (RSASSA-PSS) <xref target="RFC8017" format="default"/> and ECDSA <xref target="X9.62" format="default"/> 
      and as the hash in the mask generation function (MGF) in RSASSA-PSS. 
      </t>
    </section>
    <section anchor="terminology" numbered="true" toc="default">
      <name>Terminology</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>",
    "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be
    interpreted as described in BCP&nbsp;14 <xref target="RFC2119"/> <xref
    target="RFC8174"/> when, and only when, they appear in all capitals, as
    shown here.
        </t>
    </section>
    <!-- Terminology -->
    <section anchor="oids" numbered="true" toc="default">
      <name>Identifiers</name>
      <t>This section defines four new object identifiers (OIDs), for RSASSA-PSS and ECDSA with each 
	  of SHAKE128 and SHAKE256. The same algorithm identifiers can be  
	  used for identifying a public key in RSASSA-PSS.</t>
      <t>The new identifiers for RSASSA-PSS signatures using SHAKEs are below.</t>
        <sourcecode type="asn.1"><![CDATA[
  id-RSASSA-PSS-SHAKE128  OBJECT IDENTIFIER  ::=  { iso(1) 
            identified-organization(3) dod(6) internet(1) 
            security(5) mechanisms(5) pkix(7) algorithms(6)
            30 }

  id-RSASSA-PSS-SHAKE256  OBJECT IDENTIFIER  ::=  { iso(1) 
            identified-organization(3) dod(6) internet(1) 
            security(5) mechanisms(5) pkix(7) algorithms(6)
            31 }
]]></sourcecode>
      <t>The new algorithm identifiers of ECDSA signatures using SHAKEs are below.
      
      </t>
        <sourcecode type="asn.1"><![CDATA[
  id-ecdsa-with-shake128 OBJECT IDENTIFIER  ::=  { iso(1) 
            identified-organization(3) dod(6) internet(1) 
            security(5) mechanisms(5) pkix(7) algorithms(6)
            32 }            

  id-ecdsa-with-shake256 OBJECT IDENTIFIER  ::=  { iso(1) 
            identified-organization(3) dod(6) internet(1) 
            security(5) mechanisms(5) pkix(7) algorithms(6)
            33 }
]]></sourcecode>
      <t>The parameters for the four identifiers above <bcp14>MUST</bcp14> be absent. That is, 
	  the identifier <bcp14>SHALL</bcp14> be a SEQUENCE of one component: the OID.</t>
      <t>Sections <xref target="rsa-sigs" format="counter"/> and <xref target="ecdsa-sigs" format="counter"/> specify the required output length 
	  for each use of SHAKE128 or SHAKE256 in RSASSA-PSS and ECDSA. In summary, when hashing messages
	  to be signed, output lengths of SHAKE128 and SHAKE256 are 256 and 512 bits, respectively.


	  
	  When the SHAKEs are used as MGFs in RSASSA-PSS, their output length is 
	  (8*ceil((n-1)/8) - 264) or (8*ceil((n-1)/8) - 520) bits, respectively, where n is the RSA modulus size in bits.</t>
    </section>
    <section numbered="true" toc="default">
      <name>Use in PKIX</name>
      <section anchor="sigs" numbered="true" toc="default">
        <name>Signatures</name>

        <t>Signatures are used in a number of different ASN.1 structures.
        As shown in the ASN.1 representation from <xref target="RFC5280" format="default"/> 
		below, in an X.509 certificate, a signature is encoded with an 
		algorithm identifier in the signatureAlgorithm attribute and 
		a signatureValue attribute that contains the actual signature.  
        </t>
        <sourcecode type="asn.1"><![CDATA[
   Certificate  ::=  SEQUENCE  {
      tbsCertificate       TBSCertificate,
      signatureAlgorithm   AlgorithmIdentifier,
      signatureValue       BIT STRING  }
]]></sourcecode>
        <t>The identifiers defined in <xref target="oids" format="default"/> can be used 
		as the AlgorithmIdentifier in the signatureAlgorithm field in the sequence 
		Certificate and the signature field in the sequence TBSCertificate in X.509  
		<xref target="RFC5280" format="default"/>. 
		The parameters of these signature algorithms are absent, as explained 
		in <xref target="oids" format="default"/>.</t>
        <t>Conforming Certification Authority (CA) implementations <bcp14>MUST</bcp14> specify the algorithms  
		explicitly by using the OIDs specified in <xref target="oids" format="default"/> when 
		encoding RSASSA-PSS or ECDSA with SHAKE signatures 
		in certificates and CRLs.
		Conforming client implementations that process certificates and CRLs 
		using RSASSA-PSS or ECDSA with SHAKE <bcp14>MUST</bcp14> recognize the corresponding OIDs.
		Encoding rules for RSASSA-PSS and ECDSA 
		signature values are specified in <xref target="RFC4055" format="default"/> and 
		<xref target="RFC5480" format="default"/>, respectively.</t>
        <t>When using RSASSA-PSS or ECDSA with SHAKEs, the RSA modulus and ECDSA 
		curve order <bcp14>SHOULD</bcp14> be chosen in line with the SHAKE output length. 
		Refer to <xref target="Security" format="default"/> for more details.</t>
        <section anchor="rsa-sigs" numbered="true" toc="default">
          <name>RSASSA-PSS Signatures</name>
          <t>The RSASSA-PSS algorithm is defined in <xref target="RFC8017" format="default"/>. 
		  When id-RSASSA-PSS-SHAKE128 or id-RSASSA-PSS-SHAKE256 (specified in <xref target="oids" format="default"/>)
		  is used, the encoding <bcp14>MUST</bcp14> omit the parameters field. That is, 
		  the AlgorithmIdentifier <bcp14>SHALL</bcp14> be a SEQUENCE of one component:  
		  id-RSASSA-PSS-SHAKE128 or id-RSASSA-PSS-SHAKE256.


		  <xref target="RFC4055" format="default"/>
		  defines RSASSA-PSS-params that is used to define the algorithms and inputs 
		  to the algorithm. This specification does not use parameters because the 
		  hash, mask generation algorithm, trailer, and salt are embedded in 
		  the OID definition.</t>
          <t>The hash algorithm to hash a message being signed and the hash algorithm used as the
		 MGF 
		  in RSASSA-PSS <bcp14>MUST</bcp14> be the same: both SHAKE128 or both SHAKE256. The 
		  output length of the hash algorithm that hashes the message <bcp14>SHALL</bcp14> be 32 bytes
		  (for SHAKE128) or 64 bytes (for SHAKE256). </t>
          <t>The MGF takes an octet string of variable length and
		  a desired output length as input and outputs an octet 
		  string of the desired length. In RSASSA-PSS with SHAKEs, the SHAKEs <bcp14>MUST</bcp14> be 
		  used natively as the MGF, instead of the MGF1 algorithm that uses 
		  the hash function in multiple iterations, as specified in 
		  <xref target="RFC8017" section="B.2.1" sectionFormat="of"/>. In other words, the MGF is defined as 
          the SHAKE128 or SHAKE256 output of the mgfSeed for id-RSASSA-PSS-SHAKE128 and 
	  id-RSASSA-PSS-SHAKE256, respectively.

	  The mgfSeed is the seed 
		  from which the mask is generated, an octet string <xref target="RFC8017" format="default"/>.		  
		  As explained in Step 9 of <xref
		  target="RFC8017" sectionFormat="of" section="9.1.1"/>, the output 
		  length of the MGF is emLen - hLen - 1 bytes. emLen is the maximum message 
		  length ceil((n-1)/8), where n is the RSA modulus in bits. hLen is 32 and 
		  64 bytes for id-RSASSA-PSS-SHAKE128 and id-RSASSA-PSS-SHAKE256, respectively. 
		  Thus, when SHAKE is used as the MGF, the SHAKE output length maskLen is 
		  (8*emLen - 264) or (8*emLen - 520) bits, respectively.


		  For example, when RSA modulus n is 2048 bits, 
		  the output length of SHAKE128 or SHAKE256 as the MGF will be 1784 or 1528 bits 
		  when id-RSASSA-PSS-SHAKE128 or id-RSASSA-PSS-SHAKE256 is used, respectively. </t>
          <t>The RSASSA-PSS saltLength <bcp14>MUST</bcp14> be 32 bytes for id-RSASSA-PSS-SHAKE128 
		  or 64 bytes for id-RSASSA-PSS-SHAKE256. 
		  Finally, the trailerField <bcp14>MUST</bcp14> be 1, which represents 
		  the trailer field with hexadecimal value 0xBC <xref target="RFC8017" format="default"/>.</t>
        </section>
        <section anchor="ecdsa-sigs" numbered="true" toc="default">
          <name>ECDSA Signatures</name>
          <t>The Elliptic Curve Digital Signature Algorithm (ECDSA) is defined in 
	      <xref target="X9.62" format="default"/>. When the id-ecdsa-with-shake128 or id-ecdsa-with-shake256
		  (specified in <xref target="oids" format="default"/>) algorithm identifier appears, the respective SHAKE 
		  function (SHAKE128 or SHAKE256) is used as the hash. 
		  The encoding <bcp14>MUST</bcp14> omit the parameters field. That is, the AlgorithmIdentifier 
		  <bcp14>SHALL</bcp14> be a SEQUENCE of one component: the OID id-ecdsa-with-shake128 or 
		  id-ecdsa-with-shake256.</t>

          <t>For simplicity and compliance with the ECDSA standard specification 
		  <xref target="X9.62" format="default"/>, 
	      the output length of the hash function must be explicitly determined. The 
	      output length, d, for SHAKE128 or SHAKE256 used in ECDSA <bcp14>MUST</bcp14> be 256 or 512  
		  bits, respectively. </t>
          <t>Conforming CA implementations that generate ECDSA with SHAKE signatures 
		  in certificates or CRLs <bcp14>SHOULD</bcp14> generate such signatures with a 
		  deterministically generated, nonrandom k in accordance with all 
		  the requirements specified in <xref target="RFC6979" format="default"/>. 
		 
		  They <bcp14>MAY</bcp14> also generate such signatures 
		  in accordance with all other recommendations in <xref target="X9.62" format="default"/> or 
		  <xref target="SEC1" format="default"/> if they have a stated policy that requires 
		  conformance to those standards. Those standards have not specified  
		  SHAKE128 and SHAKE256 as hash algorithm options. However, SHAKE128 and 
		  SHAKE256 with output length being 32 and 64 octets, respectively, can  
		  be used instead of 256- and 512-bit output hash algorithms such as SHA256 
		  and SHA512.</t>
        </section>
      </section>
      <section numbered="true" toc="default">
        <name>Public Keys</name>
        <t>Certificates conforming to <xref target="RFC5280" format="default"/> can convey a 
		public key for any public key algorithm. The certificate indicates 
		the public key algorithm through an algorithm identifier.
		
		This algorithm identifier is an OID with optionally associated
		parameters. The conventions and encoding for RSASSA-PSS and
		ECDSA public key algorithm identifiers are as specified in
		Sections <xref target="RFC3279" section="2.3.1"
		sectionFormat="bare"/> and <xref target="RFC3279"
		section="2.3.5" sectionFormat="bare"/> of <xref
		target="RFC3279" format="default"/>,
		<xref target="RFC4055" sectionFormat="of" section="3.1"/> 
		and <xref target="RFC5480" sectionFormat="of" section="2.1"/>.
        </t>
        <t>Traditionally, the rsaEncryption object identifier is used to
		identify RSA public keys. The rsaEncryption object identifier 
		continues to identify the subject public key when the RSA private 
		key owner does not wish to limit the use of the public key 
		exclusively to RSASSA-PSS with SHAKEs. When the RSA private 
		key owner wishes to limit the use of the public key exclusively 
		to RSASSA-PSS with SHAKEs, the AlgorithmIdentifiers for 
		RSASSA-PSS defined in <xref target="oids" format="default"/> <bcp14>SHOULD</bcp14> be used as the algorithm 
		field in the SubjectPublicKeyInfo sequence <xref target="RFC5280" format="default"/>. 
		Conforming client implementations that process RSASSA-PSS 
		with SHAKE public keys when processing certificates and CRLs <bcp14>MUST</bcp14> 
		recognize the corresponding OIDs. </t>
        <t>Conforming CA implementations <bcp14>MUST</bcp14> specify the X.509 public key 
		algorithm explicitly by using the OIDs specified in <xref target="oids" format="default"/> 
		when encoding ECDSA with SHAKE public keys in certificates and CRLs. 
		Conforming client implementations that process ECDSA with 
		SHAKE public keys when processing certificates and CRLs <bcp14>MUST</bcp14> recognize 
		the corresponding OIDs. </t>
        <t>The identifier parameters, as explained in <xref target="oids" format="default"/>, 
		<bcp14>MUST</bcp14> be absent.</t>
      </section>
    </section>
    <section anchor="IANA" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>One object identifier for the ASN.1 module in <xref target="asn" format="default"/> 
	  has been assigned in the "SMI Security for PKIX Module Identifier" 
	  (1.3.6.1.5.5.7.0) registry: </t>
      <table align="center">
        <thead>
          <tr>
            <th align="center">Decimal</th>
            <th align="center">Description</th>
            <th align="center">References</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="center">94</td>
            <td align="center">id-mod-pkix1-shakes-2019</td>
            <td align="center">RFC 8692</td>
          </tr>
        </tbody>
      </table>
      <t>IANA has updated the 
	  "SMI Security for PKIX Algorithms" 
	  (1.3.6.1.5.5.7.6) registry <xref target="SMI-PKIX"
	  format="default"/> with four additional entries: </t>
      <table align="center">
        <thead>
          <tr>
            <th align="center">Decimal</th>
            <th align="center">Description</th>
            <th align="center">References</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="center">30</td>
            <td align="center">id-RSASSA-PSS-SHAKE128</td>
            <td align="center">RFC 8692</td>
          </tr>
          <tr>
            <td align="center">31</td>
            <td align="center">id-RSASSA-PSS-SHAKE256</td>
            <td align="center">RFC 8692</td>
          </tr>
          <tr>
            <td align="center">32</td>
            <td align="center">id-ecdsa-with-shake128</td>
            <td align="center">RFC 8692</td>
          </tr>
          <tr>
            <td align="center">33</td>
            <td align="center">id-ecdsa-with-shake256</td>
            <td align="center">RFC 8692</td>
          </tr>
        </tbody>
      </table>
      <t>IANA has updated the 
	  "Hash Function Textual Names" registry <xref target="Hash-Texts" format="default"/>
      with two additional entries for SHAKE128
      and SHAKE256: </t>
      <table align="center">
        <thead>
          <tr>
            <th align="center">Hash Function Name</th>
            <th align="center">OID</th>
            <th align="center">Reference</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="center">shake128</td>
            <td align="center">2.16.840.1.101.3.4.2.11</td>
            <td align="center">RFC 8692</td>
          </tr>
          <tr>
            <td align="center">shake256</td>
            <td align="center">2.16.840.1.101.3.4.2.12</td>
            <td align="center">RFC 8692</td>
          </tr>
        </tbody>
      </table>
    </section>
    <section anchor="Security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>This document updates <xref target="RFC3279" format="default"/>. The Security Considerations
      section of that document applies to this specification as well.</t>
      <t>NIST has defined appropriate use of the hash functions in terms of the algorithm 
      strengths and expected time frames for secure use in Special Publications (SPs) 
      <xref target="SP800-78-4" format="default"/> and <xref target="SP800-107" format="default"/>. 
      These documents can be used as guides to choose appropriate key sizes 
      for various security scenarios. </t>
      <t>SHAKE128 with output length of 256 bits offers 128 bits
	  of collision and preimage resistance. Thus, SHAKE128 OIDs in
	  this specification are <bcp14>RECOMMENDED</bcp14> with 2048- (112-bit
	  security) or 3072-bit (128-bit security) RSA modulus or
	  curves with group order of 256 bits (128-bit
	  security). SHAKE256 with a 512-bit output length offers
	  256 bits of collision and preimage resistance. Thus, the
	  SHAKE256 OIDs in this specification are <bcp14>RECOMMENDED</bcp14> with
	  4096-bit RSA modulus or higher or curves with a group order of
	  at least 512 bits, such as the NIST Curve P-521 (256-bit
	  security). Note that we recommended a 4096-bit RSA because we
	  would need a 15360-bit modulus for 256 bits of security, which
	  is impractical for today's technology.</t>
    </section>
  </middle>
  <!--  *****BACK MATTER ***** -->
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3279.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4055.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5480.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8017.xml"/>
        <reference anchor="SHA3">
          <front>
            <title>
SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions
</title>
            <seriesInfo name="DOI" value="10.6028/NIST.FIPS.202"/>
            <seriesInfo name="FIPS PUB" value="202"/>
            <author>
              <organization>
National Institute of Standards and Technology
</organization>
            </author>
            <date year="2015" month="August"/>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5912.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6979.xml"/>
        <reference anchor="SEC1" target="http://www.secg.org/sec1-v2.pdf">
          <front>
            <title>SEC 1: Elliptic Curve Cryptography</title>
            <author>
              <organization>Standards for Efficient Cryptography Group</organization>
            </author>
            <date month="May" year="2009"/>
          </front>
        </reference>
        <reference anchor="X9.62">
          <front>
            <title>Public Key Cryptography for the Financial Services Industry: the
    Elliptic Curve Digital Signature Algorithm (ECDSA)</title>
            <seriesInfo name="ANSI" value="X9.62"/>
            <author>
              <organization>ANSI</organization>
            </author>
            <date year="2005"/>
          </front>
        </reference>
        <reference anchor="SP800-78-4" target="http://dx.doi.org/10.6028/NIST.SP.800-78-4">
          <front>
            <title>Cryptographic Algorithms and Key Sizes for Personal Identity Verification</title>
            <seriesInfo name="DOI" value="10.6028/NIST.SP.800-78-4"/>
            <seriesInfo name="NIST Special Publication (SP)" value="800-78-4"/>
            <author>
              <organization>National Institute of Standards and Technology (NIST)</organization>
            </author>
            <date month="May" year="2015"/>
          </front>
        </reference>
        <reference anchor="SMI-PKIX" target="https://www.iana.org/assignments/smi-numbers">
          <front>
            <title>SMI Security for PKIX Algorithms</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="Hash-Texts" target="https://www.iana.org/assignments/hash-function-text-names/">
          <front>
            <title>Hash Function Textual Names</title>
            <author>
              <organization>IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="SP800-107" target="http://dx.doi.org/10.6028/NIST.SP.800-107r1">
          <front>
            <title>Recommendation for Applications Using Approved Hash Algorithms</title>
            <seriesInfo name="DOI" value="10.6028/NIST.SP.800-107r1"/>
            <seriesInfo name="Revision" value="1"/>
            <seriesInfo name="NIST Special Publication (SP)" value="800-107"/>
            <author>
              <organization>National Institute of Standards and Technology (NIST)</organization>
            </author>
            <date month="August" year="2012"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="asn" numbered="true" toc="default">
      <name>ASN.1 Module</name>
      <t>This appendix includes the ASN.1 module for SHAKEs in X.509. 
    This module does not come from any previously existing RFC. This module references <xref target="RFC5912" format="default"/>.</t>
<sourcecode type="asn.1"><![CDATA[
PKIXAlgsForSHAKE-2019 { iso(1) identified-organization(3) dod(6)
  internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)
  id-mod-pkix1-shakes-2019(94) }

DEFINITIONS EXPLICIT TAGS ::=

BEGIN

-- EXPORTS ALL;

IMPORTS

-- FROM RFC 5912

PUBLIC-KEY, SIGNATURE-ALGORITHM, DIGEST-ALGORITHM, SMIME-CAPS
FROM AlgorithmInformation-2009
  { iso(1) identified-organization(3) dod(6) internet(1) security(5)
    mechanisms(5) pkix(7) id-mod(0)
    id-mod-algorithmInformation-02(58) }

-- FROM RFC 5912

RSAPublicKey, rsaEncryption, pk-rsa, pk-ec,
CURVE, id-ecPublicKey, ECPoint, ECParameters, ECDSA-Sig-Value
FROM PKIXAlgs-2009 { iso(1) identified-organization(3) dod(6)
     internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)
     id-mod-pkix1-algorithms2008-02(56) }
;

--
-- Message Digest Algorithms (mda-)
--
DigestAlgorithms DIGEST-ALGORITHM ::= {
  -- This expands DigestAlgorithms from RFC 5912
  mda-shake128   |
  mda-shake256,
  ...
}

--
-- One-Way Hash Functions
--

-- SHAKE128
mda-shake128 DIGEST-ALGORITHM ::= {
  IDENTIFIER id-shake128  -- with output length 32 bytes.
}
id-shake128 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)
                                    us(840) organization(1) gov(101)
                                    csor(3) nistAlgorithm(4)
                                    hashAlgs(2) 11 }

-- SHAKE256
mda-shake256 DIGEST-ALGORITHM ::= {
  IDENTIFIER id-shake256  -- with output length 64 bytes.
}
id-shake256 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16)
                                    us(840) organization(1) gov(101)
                                    csor(3) nistAlgorithm(4)
                                    hashAlgs(2) 12 }

--
-- Public Key (pk-) Algorithms
--
PublicKeys PUBLIC-KEY ::= {
  -- This expands PublicKeys from RFC 5912
  pk-rsaSSA-PSS-SHAKE128 |
  pk-rsaSSA-PSS-SHAKE256,
  ...
}

-- The hashAlgorithm is mda-shake128
-- The maskGenAlgorithm is id-shake128
-- Mask Gen Algorithm is SHAKE128 with output length
-- (8*ceil((n-1)/8) - 264) bits, where n is the RSA 
-- modulus in bits.
-- The saltLength is 32.  The trailerField is 1.
pk-rsaSSA-PSS-SHAKE128 PUBLIC-KEY ::= {
  IDENTIFIER id-RSASSA-PSS-SHAKE128
  KEY RSAPublicKey
  PARAMS ARE absent
  -- Private key format not in this module --
  CERT-KEY-USAGE { nonRepudiation, digitalSignature,
                   keyCertSign, cRLSign }
}

-- The hashAlgorithm is mda-shake256
-- The maskGenAlgorithm is id-shake256
-- Mask Gen Algorithm is SHAKE256 with output length
-- (8*ceil((n-1)/8) - 520)-bits, where n is the RSA 
-- modulus in bits.
-- The saltLength is 64.  The trailerField is 1.
pk-rsaSSA-PSS-SHAKE256 PUBLIC-KEY ::= {
  IDENTIFIER id-RSASSA-PSS-SHAKE256
  KEY RSAPublicKey
  PARAMS ARE absent
  -- Private key format not in this module --
  CERT-KEY-USAGE { nonRepudiation, digitalSignature,
                   keyCertSign, cRLSign }
}

--
-- Signature Algorithms (sa-)
--
SignatureAlgs SIGNATURE-ALGORITHM ::= {
  -- This expands SignatureAlgorithms from RFC 5912
  sa-rsassapssWithSHAKE128 |
  sa-rsassapssWithSHAKE256 |
  sa-ecdsaWithSHAKE128 |
  sa-ecdsaWithSHAKE256,
  ...
}

--
-- SMIME Capabilities (sa-)
--
SMimeCaps SMIME-CAPS ::= {
  -- The expands SMimeCaps from RFC 5912
  sa-rsassapssWithSHAKE128.&smimeCaps |
  sa-rsassapssWithSHAKE256.&smimeCaps |
  sa-ecdsaWithSHAKE128.&smimeCaps |
  sa-ecdsaWithSHAKE256.&smimeCaps,
  ...
}

-- RSASSA-PSS with SHAKE128
sa-rsassapssWithSHAKE128 SIGNATURE-ALGORITHM ::= {
  IDENTIFIER id-RSASSA-PSS-SHAKE128
  PARAMS ARE absent
      -- The hashAlgorithm is mda-shake128
      -- The maskGenAlgorithm is id-shake128
      -- Mask Gen Algorithm is SHAKE128 with output length
      -- (8*ceil((n-1)/8) - 264) bits, where n is the RSA 
      -- modulus in bits.
      -- The saltLength is 32. The trailerField is 1
  HASHES { mda-shake128 }
  PUBLIC-KEYS { pk-rsa | pk-rsaSSA-PSS-SHAKE128 }
  SMIME-CAPS { IDENTIFIED BY id-RSASSA-PSS-SHAKE128 }
}
id-RSASSA-PSS-SHAKE128  OBJECT IDENTIFIER  ::=  { iso(1) 
        identified-organization(3) dod(6) internet(1) 
        security(5) mechanisms(5) pkix(7) algorithms(6)
        30 }

-- RSASSA-PSS with SHAKE256
sa-rsassapssWithSHAKE256 SIGNATURE-ALGORITHM ::= {
  IDENTIFIER id-RSASSA-PSS-SHAKE256
  PARAMS ARE absent
      -- The hashAlgorithm is mda-shake256
      -- The maskGenAlgorithm is id-shake256
      -- Mask Gen Algorithm is SHAKE256 with output length
      -- (8*ceil((n-1)/8) - 520)-bits, where n is the 
      -- RSA modulus in bits.
      -- The saltLength is 64. The trailerField is 1.
 HASHES { mda-shake256 }
 PUBLIC-KEYS { pk-rsa | pk-rsaSSA-PSS-SHAKE256 }
 SMIME-CAPS { IDENTIFIED BY id-RSASSA-PSS-SHAKE256 }
}
id-RSASSA-PSS-SHAKE256  OBJECT IDENTIFIER  ::=  { iso(1) 
        identified-organization(3) dod(6) internet(1) 
        security(5) mechanisms(5) pkix(7) algorithms(6)
        31 }

-- ECDSA with SHAKE128
sa-ecdsaWithSHAKE128 SIGNATURE-ALGORITHM ::= {
  IDENTIFIER id-ecdsa-with-shake128
  VALUE ECDSA-Sig-Value
  PARAMS ARE absent
  HASHES { mda-shake128 }
  PUBLIC-KEYS { pk-ec }
  SMIME-CAPS { IDENTIFIED BY id-ecdsa-with-shake128 }
}
id-ecdsa-with-shake128 OBJECT IDENTIFIER  ::=  { iso(1) 
        identified-organization(3) dod(6) internet(1) 
        security(5) mechanisms(5) pkix(7) algorithms(6)
        32 } 

-- ECDSA with SHAKE256
sa-ecdsaWithSHAKE256 SIGNATURE-ALGORITHM ::= {
  IDENTIFIER id-ecdsa-with-shake256
  VALUE ECDSA-Sig-Value
  PARAMS ARE absent
  HASHES { mda-shake256 }
  PUBLIC-KEYS { pk-ec }
  SMIME-CAPS { IDENTIFIED BY id-ecdsa-with-shake256 }
}
id-ecdsa-with-shake256 OBJECT IDENTIFIER  ::=  { iso(1) 
        identified-organization(3) dod(6) internet(1) 
        security(5) mechanisms(5) pkix(7) algorithms(6)
        33 }

END
]]></sourcecode>
    </section>
    <section anchor="Acknowledgements" numbered="false" toc="default">
      <name>Acknowledgements</name>
      <t>We would like to thank Sean Turner, Jim Schaad, and Eric 
	  Rescorla for their valuable contributions to this document.</t>
      <t>The authors would like to thank Russ Housley for his guidance and 
	  very valuable contributions with the ASN.1 module.</t>
    </section>

  </back>
</rfc>
