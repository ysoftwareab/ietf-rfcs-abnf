<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc  xmlns:xi="http://www.w3.org/2001/XInclude" submissionType="IETF" category="std" consensus="true" ipr='trust200902' tocInclude="true" sortRefs="true" symRefs="true" obsoletes="" updates="" xml:lang="en" version="3" docName="draft-ietf-6lo-minimal-fragment-15" number="8930">

<front>


   <title abbrev='Fragment Forwarding'>On Forwarding 6LoWPAN Fragments over a Multi-Hop IPv6 Network</title>
   <seriesInfo name="RFC" value="8930"/>
    <author initials='T.' surname='Watteyne' fullname='Thomas Watteyne' role='editor'>
      <organization>Analog Devices</organization>
      <address>
        <postal>
          <street>32990 Alvarado-Niles Road, Suite 910</street>
          <city>Union City</city>
          <region>CA</region>
          <code>94587</code>
          <country>United States of America</country>
        </postal>
        <email>thomas.watteyne@analog.com</email>
      </address>
    </author>

   <author initials='P.' surname='Thubert' fullname='Pascal Thubert' role='editor'>
      <organization abbrev='Cisco Systems'>Cisco Systems, Inc</organization>
      <address>
         <postal>
            <extaddr>Building D</extaddr>
            <street>45 Allee des Ormes - BP1200 </street>
            <city>Mougins - Sophia Antipolis</city>
            <code>06254</code>
          <country>France</country>
         </postal>
         <phone>+33 497 23 26 34</phone>
         <email>pthubert@cisco.com</email>
      </address>
   </author>

  <author initials="C." surname="Bormann" fullname="Carsten Bormann">
      <organization showOnFrontPage="true">Universit√§t Bremen TZI</organization>
      <address>
        <postal>
          <street>Postfach 330440</street>
          <city>Bremen</city>
          <code>D-28359</code>
          <country>Germany</country>
        </postal>
        <phone>+49-421-218-63921</phone>
        <email>cabo@tzi.org</email>
      </address>
    </author>

<date year="2020" month="November" />

    <area>Internet Area</area>
    <workgroup>6lo</workgroup>
    <keyword>6LoWPAN</keyword>
    <keyword>Fragment</keyword>

    <abstract>

<t>This document provides generic rules to enable the forwarding of an
IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) fragment
over a route-over network. Forwarding fragments can improve both
end-to-end latency and reliability as well as reduce the buffer requirements in intermediate nodes; it may be implemented using RFC 4944 and Virtual Reassembly Buffers (VRBs).</t>

  </abstract>


  </front>

  <middle>


<section anchor='Intro'><name>Introduction</name>

<t>The original 6LoWPAN fragmentation is defined in <xref
target='RFC4944'/> for use over a single Layer 3 hop, though multiple
Layer 2 hops in a mesh-under network is also possible, and was not modified by the update in <xref target='RFC6282'/>.
6LoWPAN operations including fragmentation depend on a link-layer security that prevents any rogue access to the network.
</t><t>
In a route-over 6LoWPAN network, an IP packet is expected to be reassembled at each intermediate hop, uncompressed, pushed to Layer 3 to be routed, and then compressed and fragmented again.

This document introduces an alternate approach called 6LoWPAN Fragment Forwarding (6LFF) whereby an intermediate node forwards a fragment (or the bulk thereof, MTU
permitting) without reassembling if the next hop is a similar 6LoWPAN
link. The routing decision is made on the first fragment of the datagram, which has the IPv6 routing information. The first fragment is forwarded immediately, and a state is stored to enable forwarding the next fragments along the same path.
</t><t>

Done right, 6LoWPAN Fragment Forwarding techniques lead to more streamlined operations, less buffer bloat, and lower latency. But it may be wasteful when fragments are missing, leading to locked resources and low throughput, and it may be misused to the point that the end-to-end latency of one packet falls behind that of per-hop reassembly.
</t><t>
This specification provides a generic overview of 6LFF, discusses advantages and caveats, and introduces a particular 6LFF technique called "Virtual Reassembly Buffer" (VRB) that can be used while retaining the message formats defined in <xref target='RFC4944'/>. Basic recommendations such as the insertion of an inter-frame gap between fragments are provided to avoid the most typical caveats.
</t>


</section>


<section><name>Terminology</name>
<section anchor='bcp'><name>Requirements Language</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>

</section>


  <section><name>Background</name>
  <t>
	  
		Past experience with fragmentation, e.g., as described in <xref target='RFC4963'>"IPv4 Reassembly Errors at High Data Rates"</xref> and references therein,  has shown that misassociated or lost
        fragments can lead to poor network behavior and, occasionally, trouble
        at the application layer.
		That experience led to the definition of the <xref target='RFC8201'>"Path
        MTU Discovery for IP version 6"</xref> protocol that limits fragmentation over the
        Internet.
        </t>
        <t><xref target='RFC8900'>"IP Fragmentation
        Considered Fragile"</xref> discusses security threats that are linked to
        using IP fragmentation. The 6LoWPAN fragmentation takes place underneath the IP Layer,
        but some issues described there may still apply to 6LoWPAN fragments
        (as discussed in further details in
        <xref target='security-considerations'/>).
        </t>
	    <t>Readers are expected to be familiar with all the terms and concepts
	    that are discussed in <xref target='RFC4919'>"IPv6 over Low-Power
	    Wireless Personal Area Networks (6LoWPANs): Overview, Assumptions,
	    Problem Statement, and Goals"</xref> and <xref target='RFC4944'>
	    "Transmission of IPv6 Packets over IEEE 802.15.4 Networks"</xref>.
         </t>


	 <t><xref target='RFC3031'>"Multiprotocol Label Switching
        Architecture"</xref> states that with MPLS,</t>

<blockquote>
        packets are "labeled" before
        they are forwarded. At subsequent hops, there is
        no further analysis of the packet's network layer header.  Rather, the
        label is used as an index into a table which specifies the next hop,
        and a new label. 
</blockquote>


        <t>The MPLS
        technique is leveraged in the present specification to forward
        fragments that actually
        do not have a network-layer header, since the fragmentation occurs below
        IP.
           </t>

 </section>

 <section anchor='new'><name>New Terms</name>

	<t>
    This specification uses the following terms:
      </t><dl>
	   <dt>6LoWPAN Fragment Forwarding Endpoints:</dt><dd>
	    The 6LFF endpoints are the first and last nodes in an unbroken string
        of 6LFF nodes. They are also the only points
        where the fragmentation and reassembly operations take place.

        </dd>
	   <dt>Compressed Form:</dt><dd>
	    This specification uses the generic term "compressed form" to refer to
        the format of a datagram after the action of <xref target='RFC6282'/>
        and possibly <xref target='RFC8138'/> for Routing Protocol for Low-Power and Lossy Network (RPL) <xref target='RFC6550'/>
        artifacts.
        </dd>
       <dt>Datagram_Size:</dt><dd>
        The size of the datagram in its compressed form before it is fragmented.
    
        </dd>
       <dt>Datagram_Tag:</dt><dd>
        An identifier of a datagram that is locally unique to the Layer 2 sender.
        Associated with the link-layer address of the sender, this becomes a globally
        unique identifier for the datagram within the duration of its transmission.
	    </dd>

       <dt>Fragment_Offset:</dt><dd>
        The offset of a fragment of a datagram in its compressed form.
        </dd>
	  </dl>
</section>
</section>	


<section anchor='overview-of-6lowpan-fragmentation'><name>Overview of 6LoWPAN Fragmentation</name>


<t><xref target='FIGperhop'/> illustrates 6LoWPAN fragmentation.
We assume node A forwards a packet to node B, possibly as part of a multi-hop route between 6LoWPAN Fragment Forwarding endpoints, which may be neither A nor B, though 6LoWPAN may compress the IP header better when they are both the 6LFF and the 6LoWPAN compression endpoints.</t>

<figure anchor='FIGperhop'><name>Fragmentation at Node A, and Reassembly at Node B</name>
<artwork><![CDATA[
               +---+                     +---+
        ... ---| A |-------------------->| B |--- ...
               +---+                     +---+
                              # (frag. 5)

             123456789                 123456789
            +---------+               +---------+
            |   #  ###|               |###  #   |
            +---------+               +---------+
               outgoing                incoming
          fragmentation                reassembly
                 buffer                buffer
]]></artwork></figure>

<t>Typically, node A starts with an uncompressed packet and compacts the IPv6 packet using the header compression mechanism defined in <xref target='RFC6282'/>.
If the resulting 6LoWPAN packet does not fit into a single link-layer frame, node A's 6LoWPAN sub-layer cuts it into multiple 6LoWPAN fragments, which it transmits as separate link-layer frames to node B.
Node B's 6LoWPAN sub-layer reassembles these fragments, inflates the compressed header fields back to the original IPv6 header, and hands over the full IPv6 packet to its IPv6 layer.</t>

<t>In <xref target='FIGperhop'/>, a packet forwarded by node A to node B is cut into nine fragments, numbered 1 to 9 as follows:</t>
<ul>
<li>Each fragment is represented by the '#' symbol.</li>
<li>Node A has sent fragments 1, 2, 3, 5, and 6 to node B.</li>
<li>Node B has received fragments 1, 2, 3, and 6 from node A.</li>
<li>Fragment 5 is still being transmitted at the link layer from node A to node B.</li>
</ul>
<t>The reassembly buffer for 6LoWPAN is indexed in node B by:</t>

<ul>
  <li>a unique identifier of node A (e.g., node A's link-layer address).</li>
  <li>the Datagram_Tag chosen by node A for this fragmented datagram.</li>
</ul>

<t>Because it may be hard for node B to correlate all possible link-layer addresses that node A may use (e.g., short versus long addresses), node A must use the same link-layer address to send all the fragments of the same datagram to node B.
</t>

<t>Conceptually, the reassembly buffer in node B contains:</t>

<ul>
  <li>a Datagram_Tag as received in the incoming fragments, associated
      with the interface and the link-layer address of node A for which the received Datagram_Tag is unique,</li>
  <li>the actual packet data from the fragments received so far, in a form that makes it possible to detect when the whole packet has been received and can be processed or forwarded,</li>
  <li>a state indicating the fragments already received,</li>
  <li>a Datagram_Size, and</li>
  <li>a timer that allows discarding a partially reassembled packet after some timeout.</li>
</ul>

<t>A fragmentation header is added to each fragment; it indicates what portion of the packet that fragment corresponds to.
<xref target='RFC4944' sectionFormat="of" section="5.3"/> defines the format of the header for the first and subsequent fragments.
All fragments are tagged with a 16-bit "Datagram_Tag", used to identify which packet each fragment belongs to.
Each datagram can be uniquely identified by the sender link-layer addresses of the frame that carries it and the Datagram_Tag that the sender allocated for this datagram.
<xref target='RFC4944'/> also mandates that the first fragment is sent first and with a particular format that is different than that of the next fragments. Each fragment except for the first one can be identified within its datagram by the datagram-offset.</t>

<t>Node B's typical behavior, per <xref target='RFC4944'/>, is as follows.
Upon receiving a fragment from node A with a Datagram_Tag previously unseen from node A, node B allocates a buffer large enough to hold the entire packet.
The length of the packet is indicated in each fragment (the Datagram_Size field), so node B can allocate the buffer even if the fragment it receives first is not the first fragment.
As fragments come in, node B fills the buffer.
When all fragments have been received, node B inflates the compressed header fields into an IPv6 header and hands the resulting IPv6 packet to the IPv6 layer, which performs the route lookup. This behavior typically results in per-hop fragmentation and reassembly.
That is, the packet is fully reassembled, then (re-)fragmented, at every hop.</t>

</section>
<section anchor='SEClimits'><name>Limitations of Per-Hop Fragmentation and Reassembly</name>


<t>There are at least two limitations to doing per-hop fragmentation and reassembly.
See <xref target='ARTICLE'/> for detailed simulation results on both limitations.</t>

<section anchor='latency'><name>Latency</name>

<t>When reassembling, a node needs to wait for all the fragments to be received before being able to re-form the IPv6 packet and possibly forwarding it to the next hop. This repeats at every hop.</t>

<t>This may result in increased end-to-end latency compared to a case where each fragment is forwarded without per-hop reassembly.</t>

</section>
<section anchor='memory-management-and-reliability'><name>Memory Management and Reliability</name>


<t>Constrained nodes have limited memory. Assuming a reassembly buffer for a 6LoWPAN MTU of 1280 bytes as defined in <xref target='RFC4944' sectionFormat="of" section="4"/>, typical nodes only have enough memory for 1-3 reassembly buffers.</t>

<t>To illustrate this, we use the topology from <xref target='FIGtopology'/>, where nodes A, B, C, and D all send packets through node E.
We further assume that node E's memory can only hold 3 reassembly buffers.</t>

<figure anchor='FIGtopology'><name>Illustrating the Memory Management Issue</name>
<artwork><![CDATA[
               +---+       +---+
       ... --->| A |------>| B |
               +---+       +---+\
                                 \
                                 +---+    +---+
                                 | E |--->| F | ...
                                 +---+    +---+
                                 /
                                /
               +---+       +---+
       ... --->| C |------>| D |
               +---+       +---+
]]></artwork></figure>

<t>When nodes A, B, and C concurrently send fragmented packets, all three reassembly buffers in node E are occupied.
If, at that moment, node D also sends a fragmented packet, node E has no option but to drop one of the packets, lowering end-to-end reliability.</t>

</section>
</section>


<section anchor='ff'><name>Forwarding Fragments</name>
<t>
A 6LoWPAN Fragment Forwarding technique makes the routing decision on the first fragment, which is always the one with the IPv6 address of the destination. Upon receiving a first fragment, a forwarding node (e.g., node B in an A->B->C sequence) that does fragment forwarding <bcp14>MUST</bcp14> attempt to create a state and forward the fragment. This is an atomic operation, and if the first fragment cannot be forwarded, then the state <bcp14>MUST</bcp14> be removed.
</t><t>
Since the Datagram_Tag is uniquely associated with the source link-layer address of the fragment, the forwarding node <bcp14>MUST</bcp14> assign a new Datagram_Tag from its own namespace for the next hop and rewrite the fragment header of each fragment with that Datagram_Tag.
</t><t>

When a forwarding node receives a fragment other than a first fragment, it <bcp14>MUST</bcp14> look up state based on the source link-layer address and the Datagram_Tag in the received fragment. If no such state is found, the fragment <bcp14>MUST</bcp14> be dropped; otherwise, the fragment <bcp14>MUST</bcp14> be forwarded using the information in the state found.
</t><t>
Compared to <xref target='overview-of-6lowpan-fragmentation'/>, the conceptual reassembly buffer in node B now contains the following, assuming that node B is neither the source nor the final destination:</t>

<ul>
  <li>a Datagram_Tag as received in the incoming fragments, associated with the interface and the link-layer address of node A for which the received Datagram_Tag is unique.</li>
  <li>the link-layer address that node B uses as the source to forward the fragments.</li>
  <li> the interface and the link-layer address of the next-hop C that is resolved on the first fragment.</li>
  <li>a Datagram_Tag that node B uniquely allocated for this datagram and that is used when forwarding the fragments of the datagram.</li>
  <li>a buffer for the remainder of a previous fragment left to be sent.</li>
  <li>a timer that allows discarding the stale 6LFF state after some timeout.
  The duration of the timer should be longer than that which covers the reassembly at the receiving endpoint.
  </li>
</ul>
<t>
 A node that has not received the first fragment cannot forward the next fragments. This means that if node B receives a fragment, node A was in possession of the first fragment at some point. To keep the operation simple and consistent with <xref target='RFC4944'/>, the first fragment <bcp14>MUST</bcp14> always be sent first. When that is done, if node B receives a fragment that is not the first and for which it has no state, then node B treats it as an error and refrains from creating a state or attempting to forward.
 This also means that node A should perform all its possible retries on the first fragment before it attempts to send the next fragments, and that it should abort the datagram and release its state if it fails to send the first fragment.
</t>
<t>Fragment forwarding obviates some of the benefits of the 6LoWPAN header compression <xref target='RFC6282'/> in intermediate hops. In return, the memory used to store the packet is distributed along the path, which limits the buffer-bloat effect. Multiple fragments may progress simultaneously along the network as long as they do not interfere.
 An associated caveat is that on a half-duplex radio, if node A sends the next fragment at the same time as node B forwards the previous fragment to node C down the path, then node B will miss it.

 If node C forwards the previous fragment to node D at the same time and on the same frequency as node A sends the next fragment to node B, this may result in a hidden terminal problem. In that case, the transmission from node C interferes at node B with that from node A, unbeknownst to node A.

 Consecutive fragments of a same datagram <bcp14>MUST</bcp14> be separated with an inter-frame gap that allows one fragment to progress beyond the next hop and beyond the interference domain before the next shows up. This can be achieved by interleaving packets or fragments sent via different next-hop routers.

</t>

</section>



<section anchor='virtual-reassembly-buffer-vrb-implementation'><name>Virtual Reassembly Buffer (VRB) Implementation</name>

<t>
The VRB <xref target='I-D.ietf-lwig-6lowpan-virtual-reassembly'/> is a particular incarnation of a 6LFF that can be implemented without a change to <xref target='RFC4944'/>.
</t>

<t>VRB overcomes the limitations listed in <xref target='SEClimits'/>.
Nodes do not wait for the last fragment before forwarding, reducing end-to-end latency.
Similarly, the memory footprint of VRB is just the VRB table, reducing the packet drop probability significantly.</t>

<t>However, there are other caveats:</t>

<dl>
  <dt>Non-zero Packet Drop Probability:</dt><dd>
  The abstract data in a VRB table entry contains at a minimum the link-layer address of the predecessor and the successor, the Datagram_Tag used by the predecessor, and the local Datagram_Tag that this node will swap with it. The VRB may need to store a few octets from the last fragment that may not have fit within MTU and that will be prepended to the next fragment.
This yields a small footprint that is 2 orders of magnitude smaller, compared to needing a 1280-byte reassembly buffer for each packet.
Yet, the size of the VRB table necessarily remains finite.
In the extreme case where a node is required to concurrently forward more packets than it has entries in its VRB table, packets are dropped.</dd>
  <dt>No Fragment Recovery:</dt><dd>
  There is no mechanism in VRB for the node that reassembles a packet to request a single missing fragment.
Dropping a fragment requires the whole packet to be resent.
This causes unnecessary traffic, as fragments are forwarded even when the destination node can never construct the original IPv6 packet.</dd>
  <dt>No Per-Fragment Routing:</dt><dd>
  All subsequent fragments follow the same sequence of hops from the source to the destination node as the first fragment, because the IP header is required in order to route the fragment and is only present in the first fragment. A side effect is that the first fragment must always be forwarded first.</dd>
</dl>

<t>The severity and occurrence of these caveats depend on the link layer used.
Whether they are acceptable depends entirely on the requirements the application places on the network.</t>

<t>If the caveats are present and not acceptable for the application, alternative specifications may define new protocols to overcome them.
One example is <xref target='RFC8931'/>, which specifies a 6LFF technique that allows the end-to-end fragment recovery between the 6LFF endpoints.</t>

</section>
<section anchor='security-considerations'><name>Security Considerations</name>
<t>
   An attacker can perform a Denial-of-Service (DoS) attack on a node
   implementing VRB by generating a large number of bogus "fragment 1"
   fragments without sending subsequent fragments.  This causes the VRB
   table to fill up.  Note that the VRB does not need to remember the
   full datagram as received so far but only possibly a few octets from
   the last fragment that could not fit in it.  It is expected that an
   implementation protects itself to keep the number of VRBs within
   capacity, and that old VRBs are protected by a timer of a reasonable
   duration for the technology and destroyed upon timeout.
</t>
<t>Secure joining and the link-layer security that it sets up protects against those attacks from network outsiders.</t>

<t><xref target='RFC8900'>"IP Fragmentation Considered Fragile"</xref> discusses security threats and other caveats that are linked to using IP fragmentation. The 6LoWPAN fragmentation takes place underneath the IP Layer, but some issues described there may still apply to 6LoWPAN fragments.</t>
<ul>
   <li>Overlapping fragment attacks are possible with 6LoWPAN fragments, but there is no known firewall operation that would work on 6LoWPAN fragments at the time of this writing, so the exposure is limited. An implementation of a firewall <bcp14>SHOULD NOT</bcp14> forward fragments but instead should recompose the IP packet, check it in the uncompressed form, and then forward it again as fragments if necessary. Overlapping fragments are acceptable as long as they contain the same payload. The firewall <bcp14>MUST</bcp14> drop the whole packet if overlapping fragments are encountered that result in different data at the same offset. </li>

   <li>Resource-exhaustion attacks are certainly possible and a sensitive issue in a constrained network. An attacker can perform a DoS attack on a node implementing VRB by generating a large number of bogus first fragments without sending subsequent fragments. This causes the VRB table to fill up. When hop-by-hop reassembly is used, the same attack can be more damaging if the node allocates a full Datagram_Size for each bogus first fragment. With the VRB, the attack can be performed remotely on all nodes along a path, but each node suffers a lesser hit. This is because the VRB does not need to remember the full datagram as received so far but only possibly a few octets from the last fragment that could not fit in it.
   An implementation <bcp14>MUST</bcp14> protect itself to keep the number of VRBs within capacity and to ensure that old VRBs are protected by a timer of a reasonable duration for the technology and destroyed upon timeout.</li>

   <li>Attacks based on predictable fragment identification values are also possible but can be avoided. The Datagram_Tag <bcp14>SHOULD</bcp14> be assigned pseudorandomly in order to reduce the risk of such attacks. A larger size of the
   Datagram_Tag makes the guessing more difficult and reduces the chances of an
   accidental reuse while the original packet is still in flight, at the expense of more space in each frame.
   Nonetheless, some level of risk remains because an
      attacker that is able to authenticate to and send traffic on the
      network can guess a valid Datagram_Tag value, since there are only
      a limited number of possible values.
   </li>

   <li>Evasion of Network Intrusion Detection Systems (NIDSs) leverages ambiguity in the reassembly of the fragment. This attack makes little sense in the context of this specification since the fragmentation happens within the Low-Power and Lossy Network (LLN), meaning that the intruder should already be inside to perform the attack.

   NIDS systems would probably not be installed within the LLN either but
   rather at a bottleneck at the exterior edge of the network.</li>
</ul>

</section>
<section anchor='iana-considerations'><name>IANA Considerations</name>

<t>This document has no IANA actions.</t>

</section>


  </middle>

  <back>

   <displayreference   target="I-D.ietf-lwig-6lowpan-virtual-reassembly" to="LWIG-VRB"/>
  
<references><name>References</name>
    <references><name>Normative References</name>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4944.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4919.xml'/>

    </references>

    <references><name>Informative References</name>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4963.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3031.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6282.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8138.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8201.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6550.xml'/>
      <xi:include href='https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8900.xml'/> 
   


<!-- [I-D.ietf-lwig-6lowpan-virtual-reassembly-02] Expired as of 11/12/20 -->
      <xi:include href='https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-lwig-6lowpan-virtual-reassembly.xml'/>


<!-- [I-D.ietf-6lo-fragment-recovery] part of C310 -->
<reference anchor='RFC8931' target="https://www.rfc-editor.org/info/rfc8931">
<front>
<title>IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Selective Fragment Recovery</title>
<author initials='P' surname='Thubert' fullname='Pascal Thubert' role="editor">
    <organization />
</author>
<date month='November' year='2020' />
</front>
<seriesInfo name="RFC" value="8931"/>
<seriesInfo name="DOI" value="10.17487/RFC8931"/>
</reference>


<reference anchor='ARTICLE' target="https://ieeexplore.ieee.org/abstract/document/8771317">
  <front>
    <title>6LoWPAN Fragment Forwarding</title>
    <author initials='Y.' surname='Tanaka' fullname='Yasuyuki Tanaka'>
      <organization/>
    </author>
    <author initials='P.' surname='Minet' fullname='Pascale Minet'>
      <organization/>
    </author>
    <author initials='T.' surname='Watteyne' fullname='Thomas Watteyne'>
      <organization/>
    </author>
    <date month="March" year='2019'/>
  </front>
  <refcontent>IEEE Communications Standards Magazine, Vol. 3, Issue 1, pp. 35-39</refcontent>
  <seriesInfo name='DOI' value='10.1109/MCOMSTD.2019.1800029'/>
</reference>

    </references>
</references>
<section anchor='acknowledgments' numbered="false" toc="default"><name>Acknowledgments</name>

<t>The authors would like to thank <contact fullname="Carles Gomez Montenegro"/>, <contact fullname="Yasuyuki Tanaka"/>, <contact fullname="Ines Robles"/>, and <contact fullname="Dave Thaler"/> for their in-depth review of this document and suggestions for improvement. Many thanks to <contact fullname="Georgios Papadopoulos"/> and <contact fullname="Dominique Barthel"/> for their contributions during the WG activities. And many thanks as well to <contact fullname="Roman Danyliw"/>, <contact fullname="Barry Leiba"/>, <contact fullname="Murray Kucherawy"/>, <contact fullname="Derrell Piper"/>, <contact fullname="Sarah Banks"/>, <contact fullname="Joerg Ott"/>, <contact fullname="Francesca Palombini"/>, <contact fullname="Mirja K√ºhlewind"/>, <contact fullname="√âric Vyncke"/>, and especially <contact fullname="Benjamin Kaduk"/> for their constructive reviews through the IETF last call and IESG process.</t>

</section>
  </back>

</rfc>



