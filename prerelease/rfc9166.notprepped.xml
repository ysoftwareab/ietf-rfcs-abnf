<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" docName="draft-ietf-pim-igmp-mld-snooping-yang-20" number="9166" submissionType="IETF" category="std" consensus="true" ipr="trust200902" obsoletes="" updates="" xml:lang="en" symRefs="true" sortRefs="true" tocInclude="true" version="3">

  <front>
    <title abbrev="IGMP &amp; MLD Snooping YANG Module">A YANG Data Model for Internet Group Management Protocol (IGMP) and Multicast Listener Discovery (MLD) Snooping</title>
    <seriesInfo name="RFC" value="9166"/>
    <author initials="H." surname="Zhao" fullname="Hongji Zhao">
      <organization abbrev="Ericsson">Ericsson (China) Communications Company Ltd.</organization>
      <address>
        <postal>
          <street>Ericsson Tower, No. 5 Lize East Street</street>
          <city>Beijing</city>
          <region/>
          <code>100102</code>
          <country>China</country>
        </postal>
        <phone/>
        <email>hongji.zhao@ericsson.com</email>
        <uri/>
      </address>
    </author>
    <author initials="X." surname="Liu" fullname="Xufeng Liu">
      <organization>IBM Corporation</organization>
      <address>
        <postal>
          <street>2300 Dulles Station Blvd.</street>
          <city>Herndon</city>
          <region>VA</region>
          <code>20171</code>
          <country>United States of America</country>
        </postal>
        <phone/>
        <email>xufeng.liu.ietf@gmail.com</email>
        <uri/>
      </address>
    </author>
    <author initials="Y." surname="Liu" fullname="Yisong Liu">
      <organization>China Mobile</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <region/>
          <code/>
          <country>China</country>
        </postal>
        <phone/>
        <email>liuyisong@chinamobile.com</email>
        <uri/>
      </address>
    </author>
    <author initials="A." surname="Peter" fullname="Anish Peter">
      <organization>Individual</organization>
      <address>
        <email>anish.ietf@gmail.com</email>
        <uri/>
      </address>
    </author>
    <author initials="M." surname="Sivakumar" fullname="Mahesh Sivakumar">
      <organization>Juniper Networks</organization>
      <address>
        <postal>
          <street>1133 Innovation Way</street>
          <city>Sunnyvale</city>
          <region>CA</region>
          <code/>
          <country>United States of America</country>
        </postal>
        <phone/>
        <email>sivakumar.mahesh@gmail.com</email>
        <uri/>
      </address>
    </author>
    <date month="January" year="2022"/>
    <area>RTG</area>
    <workgroup>PIM</workgroup>

    <keyword>YANG</keyword>
    <keyword>IGMP Snooping</keyword>
    <keyword>MLD Snooping</keyword>
    <keyword>multicast</keyword>
    <keyword>data model</keyword>
    <keyword>ietf-igmp-mld-snooping</keyword>
    <keyword>network management</keyword>
    <keyword>routing</keyword>

    <abstract>
      <t>
   This document defines a YANG data model that can be used to configure and
   manage Internet Group Management Protocol (IGMP) and Multicast Listener Discovery
   (MLD) snooping devices. The YANG module in this document conforms
   to the Network Management Datastore Architecture (NMDA).</t>
    </abstract>
  </front>
  <middle>
    <section anchor="sect-1" numbered="true" toc="default">
      <name>Introduction</name>
      <t>
   This document defines a YANG <xref target="RFC7950" format="default"/> data model for the management of
   IGMP and MLD snooping <xref target="RFC4541" format="default"/> devices.</t>
      <t>
   The YANG module in this document conforms to the NMDA defined in <xref target="RFC8342" format="default"/>. The NMDA adds the ability to inspect the
   current operational values for configuration, allowing clients to use
   identical paths for retrieving the configured values and the operational
   values.</t>
      <section anchor="sect-1.1" numbered="true" toc="default">
        <name>Terminology</name>
        <t>
   The terminology for describing YANG data models is found in <xref target="RFC6020" format="default"/> and
   <xref target="RFC7950" format="default"/>, including:

        </t>
        <ul spacing="normal">
          <li>augment</li>
          <li>data model</li>
          <li>data node</li>
          <li>identity</li>
          <li>module</li>
        </ul>
        <t>
   The following terminologies are used in this document:</t>
        <dl newline="false" spacing="normal" indent="6">
          <dt>mrouter:</dt>
          <dd>multicast router, which is a router that has
        multicast routing enabled <xref target="RFC4286" format="default"/>.</dd>
          <dt>mrouter interfaces:</dt>
          <dd>snooping switch ports where
        multicast routers are attached <xref target="RFC4541" format="default"/>.</dd>
        </dl>
        <t>
   The following abbreviations are used in this document and defined model:</t>
   
     <dl>
  <dt>IGMP:</dt><dd>Internet Group Management Protocol <xref target="RFC3376" format="default"/>.</dd>
        
  <dt>MLD:</dt><dd>Multicast Listener Discovery <xref target="RFC3810" format="default"/>.</dd>
      </dl>
     
      </section>
      <section anchor="sect-1.2" numbered="true" toc="default">
        <name>Tree Diagrams</name>
        <t>
   Tree diagrams used in this document follow the notation defined in
   <xref target="RFC8340" format="default"/>.</t>
      </section>
      <section anchor="sect-1.3" numbered="true" toc="default">
        <name>Prefixes in Data Node Names</name>
        <t>
   In this document, names of data nodes, actions, and other data model
   objects are often used without a prefix, as long as it is clear from the
   context in which YANG module each name is defined. Otherwise, names are
   prefixed using the standard prefix associated with the corresponding YANG
   module, as shown in <xref target="tab-1"/>. 
        </t>
           <table anchor="tab-1">
        
          <name>Prefixes and Corresponding YANG Modules</name>
       
            <thead>
              <tr>
                <th>Prefix</th>
                <th>YANG module</th>
                <th>Reference</th>
              </tr>
            </thead>
            <tbody>
            <tr>
              <td>inet</td>
              <td>ietf-inet-types</td>
              <td><xref target="RFC6991"/></td>
            </tr>
            <tr>
              <td>yang</td>
              <td>ietf-yang-types</td>
              <td><xref target="RFC6991"/></td>
            </tr>
            <tr>
              <td>if</td>
              <td>ietf-interfaces</td>
              <td><xref target="RFC8343"/></td>
            </tr>
            <tr>
              <td>rt</td>
              <td>ietf-routing</td>
              <td><xref target="RFC8349"/></td>
            </tr>
            <tr>
              <td>rt-types</td>
              <td>ietf-routing-types</td>
              <td><xref target="RFC8294"/></td>
            </tr>
            <tr>
              <td>dot1q</td>
              <td>ieee802-dot1q-bridge</td>
              <td><xref target="dot1Qcp"/></td>
            </tr>
            </tbody>
           </table>
      </section>
    </section>
    <section anchor="sect-2" numbered="true" toc="default">
      <name>Design of Data Model</name>
      <t>
   An IGMP/MLD snooping switch <xref target="RFC4541" format="default"/> analyzes IGMP/MLD packets and sets up
   forwarding tables for multicast traffic. If a switch does not run IGMP/MLD
   snooping, multicast traffic will be flooded in the broadcast domain. If a
   switch runs IGMP/MLD snooping, multicast traffic will be forwarded based on
   the forwarding tables to avoid wasting bandwidth. The IGMP/MLD snooping
   switch does not need to run any of the IGMP/MLD protocols. Because the
   IGMP/MLD snooping is independent of the IGMP/MLD protocols, the data model
   defined in this document does not augment, or even require, the IGMP/MLD
   data model defined in <xref target="RFC8652" format="default"/>.  The model covers considerations for IGMP and MLD snooping switches <xref target="RFC4541" format="default"/>.</t>
      <t>
   IGMP and MLD snooping switches do not adhere to the conceptual model that
   provides the strict separation of functionality between different
   communications layers in the ISO model and instead utilize information in
   the upper-level protocol headers as factors to be considered in processing
   at the lower levels <xref target="RFC4541" format="default"/>.</t>
      <t>
   IGMP snooping switches utilize IGMP and could support IGMPv1 <xref target="RFC1112" format="default"/>, IGMPv2 <xref target="RFC2236" format="default"/>, and IGMPv3 <xref target="RFC3376" format="default"/>. MLD snooping switches utilize MLD and could support
   MLDv1 <xref target="RFC2710" format="default"/> and MLDv2 <xref target="RFC3810" format="default"/>. The goal
   of this document is to define a data model that provides a common user
   interface to IGMP and MLD snooping.</t>
      <section anchor="sect-2.1" numbered="true" toc="default">
        <name>Overview</name>
        <t>
   The YANG module on IGMP and MLD snooping defined in this document has all the
        common building blocks for the IGMP and MLD snooping switches.</t>
   <t>  
   The YANG module includes an IGMP and MLD snooping instance definition that uses the instance in the L2 service type of bridge <xref target="dot1Qcp" format="default"/>. It also includes actions for clearing
        IGMP and MLD snooping group tables.</t>
        <t>The YANG module doesn't cover L2VPN, which will be specified in a separate document.
        </t>
      </section>
      <section anchor="sect-2.2" numbered="true" toc="default">
        <name>Optional Capabilities</name>
        <t>
   This model is designed to represent the basic capability subsets of IGMP
   and MLD snooping. The main design goals of this document are that the basic
   capabilities described in the model are supported by any major now-existing
   implementation and that the configuration of all implementations meeting
   the specifications is easy to express through some combination of the
   optional features in the model and simple vendor augmentations.</t>
        <t>
   There is also value in widely supported features being standardized to
   provide a standardized way to access these features, to save work for
   individual vendors, and to ensure that mapping between different vendors'
   configuration is not needlessly complicated. Therefore, this model declares
   a number of features representing capabilities that not all deployed
   devices support.</t>
        <t>
   The extensive use of feature declarations should also substantially
   simplify the capability negotiation process for a vendor's IGMP and MLD
   snooping implementations.</t>
        <t>
   On the other hand, operational state parameters are not so widely
   designated as features, as there are many cases where the defaulting of an
   operational state parameter would not cause any harm to the system, and it
   is much more likely that an implementation without intrinsic support for a
   piece of operational state would be able to derive a suitable value for a
   state variable that is not intrinsically supported.</t>
      </section>
      <section anchor="sect-2.3" numbered="true" toc="default">
        <name>Position of Address Family in Hierarchy</name>
        <t>
   IGMP snooping only supports IPv4, while MLD snooping only supports IPv6.
   The data model defined in this document can be used for both IPv4 and IPv6
   address families.</t>
        <t>
   This document defines IGMP snooping and MLD snooping as separate schema
   branches in the structure. The benefits are:

        </t>
        <ul spacing="normal">
          <li>The model can support IGMP snooping (IPv4), MLD snooping (IPv6), or
        both optionally and independently. Such flexibility cannot be achieved
        cleanly with a combined branch.</li>
          <li>The structure is consistent with other YANG data models such as
        <xref target="RFC8652" format="default"/>, which uses separate branches for IPv4 and
        IPv6.</li>
          <li>Having separate branches for IGMP snooping and MLD snooping allows
        minor differences in their behavior to be modeled more simply and
        cleanly. The two branches can better support different features and
        node types.</li>
        </ul>
      </section>
    </section>
    <section anchor="sect-3" numbered="true" toc="default">
      <name>Module Structure</name>
      <t>This model augments the core routing data model specified in <xref target="RFC8349" format="default"/>.</t>
      <sourcecode type="yangtree"><![CDATA[
   +--rw routing
      +--rw router-id?
      +--rw control-plane-protocols
      |  +--rw control-plane-protocol* [type name]
      |     +--rw type
      |     +--rw name
      |     +--rw igmp-snooping-instance <= Augmented by this Model
                     ...
      |     +--rw mld-snooping-instance   <= Augmented by this Model
                     ...
]]></sourcecode>
      <t>
   The "igmp-snooping-instance" container instantiates an IGMP snooping
   instance. The "mld-snooping-instance" container instantiates an MLD
   snooping instance.</t>
      <t>
   The YANG data model defined in this document conforms to the NMDA <xref target="RFC8342" format="default"/>. The operational state
   data is combined with the associated configuration data in the same
   hierarchy <xref target="RFC8407" format="default"/>.</t>
      <section anchor="sect-3.1" numbered="true" toc="default">
        <name>IGMP Snooping Instances</name>
        <t>
   The YANG module ietf-igmp-mld-snooping augments
   /rt:routing/rt:control-plane-protocols/rt:control-plane-protocol to add the
   igmp-snooping-instance container.</t>
        <t>
   All the IGMP snooping-related attributes have been defined in the
   igmp-snooping-instance. The read-write attributes represent configurable
   data. The read-only attributes represent state data.</t>
        <t>
	One igmp-snooping-instance could be used in one bridge <xref target="dot1Qcp" format="default"/> instance, and it corresponds to one bridge instance.</t>
	  <t>
   Currently, the value of l2-service-type in igmp-snooping-instance could only be set to 'bridge'. After it is set, igmp-snooping-instance could be used in the bridge
   service.</t>
        <t>
   The values of bridge-mrouter-interface are filled by the snooping device
   dynamically. It is different from static-bridge-mrouter-interface,
   which is configured.</t>
        <t>
   The attributes under the interfaces show the statistics of IGMP snooping-related packets.</t>
        <sourcecode type="yangtree"><![CDATA[
augment /rt:routing/rt:control-plane-protocols
         /rt:control-plane-protocol:
  +--rw igmp-snooping-instance {igmp-snooping}?
     +--rw l2-service-type?                     l2-service-type
     +--rw enabled?                             boolean
     +--rw forwarding-table-type?               enumeration
     +--rw explicit-tracking?                   boolean
     |       {explicit-tracking}?
     +--rw lite-exclude-filter?                 empty
     |       {lite-exclude-filter}?
     +--rw send-query?                          boolean
     +--rw fast-leave?                          empty {fast-leave}?
     +--rw last-member-query-interval?          uint16
     +--rw query-interval?                      uint16
     +--rw query-max-response-time?             uint16
     +--rw require-router-alert?                boolean
     |       {require-router-alert}?
     +--rw robustness-variable?                 uint8
     +--rw static-bridge-mrouter-interface*     if:interface-ref
     |       {static-mrouter-interface}?
     +--rw igmp-version?                        uint8
     +--rw querier-source?                      inet:ipv4-address
     +--rw static-l2-multicast-group* [group source-addr]
     |       {static-l2-multicast-group}?
     |  +--rw group
     |  |       rt-types:ipv4-multicast-group-address
     |  +--rw source-addr
     |  |       rt-types:ipv4-multicast-source-address
     |  +--rw bridge-outgoing-interface*   if:interface-ref
     +--ro entries-count?                       yang:gauge32
     +--ro bridge-mrouter-interface*            if:interface-ref
     +--ro group* [address]
     |  +--ro address
     |  |       rt-types:ipv4-multicast-group-address
     |  +--ro mac-address?     yang:phys-address
     |  +--ro expire?          rt-types:timer-value-seconds16
     |  +--ro up-time          uint32
     |  +--ro last-reporter?   inet:ipv4-address
     |  +--ro source* [address]
     |     +--ro address
     |     |       rt-types:ipv4-multicast-source-address
     |     +--ro bridge-outgoing-interface*   if:interface-ref
     |     +--ro up-time                      uint32
     |     +--ro expire?
     |     |       rt-types:timer-value-seconds16
     |     +--ro host-count?                  yang:gauge32
     |     |       {explicit-tracking}?
     |     +--ro last-reporter?               inet:ipv4-address
     |     +--ro host* [address] {explicit-tracking}?
     |        +--ro address        inet:ipv4-address
     |        +--ro filter-mode    filter-mode-type
     +--ro interfaces
        +--ro interface* [name]
           +--ro name          if:interface-ref
           +--ro statistics
              +--ro discontinuity-time?   yang:date-and-time
              +--ro received
              |  +--ro query-count?                  yang:counter64
              |  +--ro membership-report-v1-count?   yang:counter64
              |  +--ro membership-report-v2-count?   yang:counter64
              |  +--ro membership-report-v3-count?   yang:counter64
              |  +--ro leave-count?                  yang:counter64
              |  +--ro pim-hello-count?              yang:counter64
              +--ro sent
                 +--ro query-count?                  yang:counter64
                 +--ro membership-report-v1-count?   yang:counter64
                 +--ro membership-report-v2-count?   yang:counter64
                 +--ro membership-report-v3-count?   yang:counter64
                 +--ro leave-count?                  yang:counter64
                 +--ro pim-hello-count?              yang:counter64
]]></sourcecode>
      </section>
      <section anchor="sect-3.2" numbered="true" toc="default">
        <name>MLD Snooping Instances</name>
        <t>
   The YANG module ietf-igmp-mld-snooping augments
   /rt:routing/rt:control-plane-protocols/rt:control-plane-protocol to add the
   mld-snooping-instance container. The mld-snooping-instance could be used in
   the bridge <xref target="dot1Qcp" format="default"/> service to
   enable MLD snooping.</t>
        <t>
   All the MLD snooping-related attributes have been defined in the
   mld-snooping-instance. The read-write attributes represent configurable
   data. The read-only attributes represent state data.</t>
        <t>
   The mld-snooping-instance has a similar structure to IGMP snooping. Some
   leaves are protocol related. The mld-snooping-instance uses IPv6 addresses
   and mld-version, while igmp-snooping-instance uses IPv4 addresses and
   igmp-version. Statistic counters in each of the above snooping instances
   are also tailored to the specific protocol type. One mld-snooping-instance
   could be used in one bridge instance and corresponds to one bridge instance.</t>

   <t>
   Currently, the value of l2-service-type in mld-snooping-instance could only be set to 'bridge'. After it is set, mld-snooping-instance could be used in the bridge
   service.</t>
        <t>
   The value of bridge-mrouter-interface is filled by the snooping device
   dynamically. It is different from static-bridge-mrouter-interface,
   which is configured.</t>
        <t>
   The attributes under the interfaces show the statistics of MLD snooping-related packets.</t>
        <sourcecode type="yangtree"><![CDATA[
augment /rt:routing/rt:control-plane-protocols
            /rt:control-plane-protocol:
  +--rw mld-snooping-instance {mld-snooping}?
  +--rw l2-service-type?                          l2-service-type
     +--rw enabled?                             boolean
     +--rw forwarding-table-type?               enumeration
     +--rw explicit-tracking?                   boolean
     |       {explicit-tracking}?
     +--rw lite-exclude-filter?                 empty
     |       {lite-exclude-filter}?
     +--rw send-query?                          boolean
     +--rw fast-leave?                          empty {fast-leave}?
     +--rw last-member-query-interval?          uint16
     +--rw query-interval?                      uint16
     +--rw query-max-response-time?             uint16
     +--rw require-router-alert?                boolean
     |       {require-router-alert}?
     +--rw robustness-variable?                 uint8
     +--rw static-bridge-mrouter-interface*     if:interface-ref
     |       {static-mrouter-interface}?
     +--rw mld-version?                         uint8
     +--rw querier-source?                      inet:ipv6-address
     +--rw static-l2-multicast-group* [group source-addr]
     |       {static-l2-multicast-group}?
     |  +--rw group
     |  |       rt-types:ipv6-multicast-group-address
     |  +--rw source-addr
     |  |       rt-types:ipv6-multicast-source-address
     |  +--rw bridge-outgoing-interface*   if:interface-ref
     +--ro entries-count?                       yang:gauge32
     +--ro bridge-mrouter-interface*            if:interface-ref
     +--ro group* [address]
     |  +--ro address
     |  |       rt-types:ipv6-multicast-group-address
     |  +--ro mac-address?     yang:phys-address
     |  +--ro expire?          rt-types:timer-value-seconds16
     |  +--ro up-time          uint32
     |  +--ro last-reporter?   inet:ipv6-address
     |  +--ro source* [address]
     |     +--ro address
     |     |       rt-types:ipv6-multicast-source-address
     |     +--ro bridge-outgoing-interface*   if:interface-ref
     |     +--ro up-time                      uint32
     |     +--ro expire?
     |     |       rt-types:timer-value-seconds16
     |     +--ro host-count?                  yang:gauge32
     |     |       {explicit-tracking}?
     |     +--ro last-reporter?               inet:ipv6-address
     |     +--ro host* [address]       {explicit-tracking}?
     |        +--ro address             inet:ipv6-address
     |        +--ro filter-mode    filter-mode-type
     +--ro interfaces
        +--ro interface* [name]
           +--ro name          if:interface-ref
           +--ro statistics
              +--ro discontinuity-time?   yang:date-and-time
              +--ro received
              |  +--ro query-count?       yang:counter64
              |  +--ro report-v1-count?   yang:counter64
              |  +--ro report-v2-count?   yang:counter64
              |  +--ro done-count?        yang:counter64
              |  +--ro pim-hello-count?   yang:counter64
              +--ro sent
                 +--ro query-count?       yang:counter64
                 +--ro report-v1-count?   yang:counter64
                 +--ro report-v2-count?   yang:counter64
                 +--ro done-count?        yang:counter64
                 +--ro pim-hello-count?   yang:counter64
]]></sourcecode>
      </section>
      <section anchor="sect-3.3" numbered="true" toc="default">
        <name>Using IGMP and MLD Snooping Instances</name>
        <t>
	The igmp-snooping-instance could be used in the service of bridge <xref target="dot1Qcp" format="default"/> to configure the IGMP snooping.</t>
        <t>
   For the bridge service, this model augments /dot1q:bridges/dot1q:bridge to
   use igmp-snooping-instance. It means IGMP snooping is enabled in the bridge.</t>
        <t>
   It also augments /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-vlan/dot1q:vlan to use igmp-snooping-instance. It means IGMP
   snooping is enabled in the specified VLAN on the bridge.</t>

   <t>The mld-snooping-instance could be used in concurrence with igmp-snooping-instance to configure the MLD snooping.
   </t>

   <sourcecode name="" type="yangtree"><![CDATA[
augment /dot1q:bridges/dot1q:bridge:
  +--rw igmp-snooping-instance?   igmp-mld-snooping-instance-ref
  +--rw mld-snooping-instance?    igmp-mld-snooping-instance-ref

augment /dot1q:bridges/dot1q:bridge/dot1q:component
          /dot1q:bridge-vlan/dot1q:vlan:
  +--rw igmp-snooping-instance?   igmp-mld-snooping-instance-ref
  +--rw mld-snooping-instance?    igmp-mld-snooping-instance-ref
]]></sourcecode>
      </section>
      <section anchor="sect-3.4" numbered="true" toc="default">
        <name>IGMP and MLD Snooping Actions</name>
        <t>
   IGMP and MLD snooping actions clear the specified IGMP and MLD snooping
   group tables. If both source X and group Y are specified, only source X
   from group Y in that specific instance will be cleared.</t>
<sourcecode name="" type="yangtree"><![CDATA[
augment /rt:routing/rt:control-plane-protocols
            /rt:control-plane-protocol:
  +--rw igmp-snooping-instance {igmp-snooping}?
     +---x clear-igmp-snooping-groups {action-clear-groups}?
        +---w input
           +---w group     union
           +---w source    rt-types:ipv4-multicast-source-address

augment /rt:routing/rt:control-plane-protocols
            /rt:control-plane-protocol:
  +--rw mld-snooping-instance {mld-snooping}?
     +---x clear-mld-snooping-groups {action-clear-groups}?
        +---w input
           +---w group     union
           +---w source    rt-types:ipv6-multicast-source-address
]]></sourcecode>
      </section>
    </section>
    <section anchor="sect-4" numbered="true" toc="default">
      <name>IGMP and MLD Snooping YANG Module</name>
      <t>

	
   This module references <xref target="RFC1112"/>, <xref target="RFC2236"/>, <xref target="RFC2710"/>, <xref target="RFC3376"/>,
      <xref target="RFC3810"/>, <xref target="RFC4541"/>, <xref target="RFC5790" format="default"/>, <xref target="RFC6636" format="default"/>, <xref target="RFC6991" format="default"/>, <xref target="RFC7761" format="default"/>, <xref target="RFC8343" format="default"/>, and <xref target="dot1Qcp"/>.</t>

<sourcecode name="ietf-igmp-mld-snooping@2022-01-31.yang" type="yang" markers="true"><![CDATA[
module ietf-igmp-mld-snooping {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-igmp-mld-snooping";
  prefix ims;

  import ietf-inet-types {
    prefix inet;
    reference
      "RFC 6991: Common YANG Data Types";
  }
  import ietf-yang-types {
    prefix yang;
    reference
      "RFC 6991: Common YANG Data Types";
  }
  import ietf-interfaces {
    prefix if;
    reference
      "RFC 8343: A YANG Data Model for Interface Management";
  }
  import ietf-routing {
    prefix rt;
    reference
      "RFC 8349: A YANG Data Model for Routing Management (NMDA
       Version)";
  }
  import ietf-routing-types {
    prefix rt-types;
    reference
      "RFC 8294: Common YANG Data Types for the Routing Area";
  }
  import ieee802-dot1q-bridge {
    prefix dot1q;
    reference
      "dot1Qcp: IEEE 802.1Qcp-2018 Standard for Local and
       Metropolitan area networks--Bridges and Bridged Networks
       --Amendment 30: YANG Data Model";
  }

  organization
    "IETF PIM Working Group";
  contact
    "WG Web:   <http://datatracker.ietf.org/wg/pim/>
     WG List:  <mailto:pim@ietf.org>

     Editors:  Hongji Zhao
               <mailto:hongji.zhao@ericsson.com>

               Xufeng Liu
               <mailto:xufeng.liu.ietf@gmail.com>

               Yisong Liu
               <mailto:liuyisong@chinamobile.com>

               Anish Peter
               <mailto:anish.ietf@gmail.com>

               Mahesh Sivakumar
               <mailto:sivakumar.mahesh@gmail.com>
     
    ";
  description
    "The module defines a collection of YANG definitions common for
     all devices that implement Internet Group Management Protocol
     (IGMP) and Multicast Listener Discovery (MLD) snooping, which is
     described in RFC 4541.

     Copyright (c) 2022 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject to
     the license terms contained in, the Revised BSD License set
     forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 9166; see the
     RFC itself for full legal notices.";

  revision 2022-01-31 {
    description
      "Initial revision.";
    reference
      "RFC 9166: A YANG Data Model for Internet Group Management
       Protocol (IGMP) and Multicast Listener Discovery (MLD)
       Snooping";
  }

  /*
   * Features
   */

  feature igmp-snooping {
    description
      "Support IGMP snooping.";
    reference
      "RFC 4541: Considerations for Internet Group Management
       Protocol (IGMP) and Multicast Listener Discovery (MLD)
       Snooping Switches";
  }

  feature mld-snooping {
    description
      "Support MLD snooping.";
    reference
      "RFC 4541: Considerations for Internet Group Management
       Protocol (IGMP) and Multicast Listener Discovery (MLD)
       Snooping Switches";
  }

  feature fast-leave {
    description
      "Support configuration of fast leave.  The fast leave feature
       does not send last member query messages to hosts.";
    reference
      "RFC 3376: Internet Group Management Protocol, Version 3";
  }

  feature static-l2-multicast-group {
    description
      "Support configuration of static L2 multicast group.";
  }

  feature static-mrouter-interface {
    description
      "Support multicast router interface explicitly configured
       by management.";
    reference
      "RFC 4541: Considerations for Internet Group Management
       Protocol (IGMP) and Multicast Listener Discovery (MLD)
       Snooping Switches";
  }

  feature action-clear-groups {
    description
      "Support clearing statistics by action for IGMP and MLD
       snooping.";
  }

  feature require-router-alert {
    description
      "Support configuration of require-router-alert.";
    reference
      "RFC 3376: Internet Group Management Protocol, Version 3";
  }

  feature lite-exclude-filter {
    description
      "Enable the support of the simplified EXCLUDE filter.";
    reference
      "RFC 5790: Lightweight Internet Group Management Protocol
       Version 3 (IGMPv3) and Multicast Listener Discovery Version
       2 (MLDv2) Protocols";
  }

  feature explicit-tracking {
    description
      "Support configuration of per-instance explicit-tracking.";
    reference
      "RFC 6636: Tuning the Behavior of the Internet Group Management
       Protocol (IGMP) and Multicast Listener Discovery (MLD) for
       Routers in Mobile and Wireless Networks";
  }

  /* identities */

  identity l2-service-type {
    description
      "Base identity for L2 service type in IGMP and MLD snooping.";
  }

  identity bridge {
    base l2-service-type;
    description
      "This identity represents bridge service.";
  }

  identity filter-mode {
    description
      "Base identity for filter mode in IGMP and MLD snooping.";
  }

  identity include {
    base filter-mode;
    description
      "This identity represents include mode.";
  }

  identity exclude {
    base filter-mode;
    description
      "This identity represents exclude mode.";
  }

  identity igmp-snooping {
    base rt:control-plane-protocol;
    description
      "IGMP snooping.";
  }

  identity mld-snooping {
    base rt:control-plane-protocol;
    description
      "MLD snooping.";
  }

  /*
   * Typedefs
   */

  typedef l2-service-type {
    type identityref {
      base l2-service-type;
    }
    description
      "The L2 service type used with IGMP and MLD
       snooping.";
  }

  typedef filter-mode-type {
    type identityref {
      base filter-mode;
    }
    description
      "The host filter mode.";
  }

  typedef igmp-mld-snooping-instance-ref {
    type leafref {
      path "/rt:routing/rt:control-plane-protocols"
         + "/rt:control-plane-protocol/rt:name";
    }
    description
      "This type is used by data models that need to
       reference IGMP or MLD snooping instance.";
  }

  /*
   * Groupings
   */

  grouping instance-config-attributes-igmp-mld-snooping {
    description
      "IGMP and MLD snooping configuration of each VLAN.";
    leaf enabled {
      type boolean;
      default "false";
      description
        "Set the value to true to enable IGMP and MLD snooping.";
    }
    leaf forwarding-table-type {
      type enumeration {
        enum mac {
          description
            "MAC-based lookup mode.";
        }
        enum ip {
          description
            "IP-based lookup mode.";
        }
      }
      default "ip";
      description
        "The default forwarding table type is ip.";
    }
    leaf explicit-tracking {
      if-feature "explicit-tracking";
      type boolean;
      default "false";
      description
        "Track the IGMPv3 and MLDv2 snooping membership reports
         from individual hosts.  It contributes to saving network
         resources and shortening leave latency.";
    }
    leaf lite-exclude-filter {
      if-feature "lite-exclude-filter";
      type empty;
      description
        "For IGMP snooping, the presence of this
         leaf enables the support of the simplified EXCLUDE filter
         in the Lightweight IGMPv3 protocol, which simplifies the
         standard versions of IGMPv3.
         For MLD Snooping, the presence of this
         leaf enables the support of the simplified EXCLUDE filter
         in the Lightweight MLDv2 protocol, which simplifies the
         standard versions of MLDv2.";
      reference
        "RFC 5790: Lightweight Internet Group Management Protocol
         Version 3 (IGMPv3) and Multicast Listener Discovery Version
         2 (MLDv2) Protocols";
    }
    leaf send-query {
      type boolean;
      default "false";
      description
        "When it is true, this switch will send out a periodic IGMP
         General Query Message or MLD General Query Message.";
    }
    leaf fast-leave {
      if-feature "fast-leave";
      type empty;
      description
        "When fast leave is enabled, the software assumes
         that no more than one host is present on each VLAN port.";
    }
    leaf last-member-query-interval {
      type uint16 {
        range "10..10230";
      }
      units "deciseconds";
      default "10";
      description
        "Last Member Query Interval, which may be tuned to modify
         the leave latency of the network.
         It is represented in units of 1/10 second.";
      reference
        "RFC 3376: Internet Group Management Protocol, Version 3,
         Section 8.8";
    }
    leaf query-interval {
      type uint16;
      units "seconds";
      default "125";
      description
        "The Query Interval is the interval between General Queries
         sent by the Querier.";
      reference
        "RFC 3376: Internet Group Management Protocol, Version 3,
         Sections 4.1.7, 8.2, and 8.14.2";
    }
    leaf query-max-response-time {
      type uint16;
      units "deciseconds";
      default "100";
      description
        "Query maximum response time specifies the maximum time
         allowed before sending a responding report.
         It is represented in units of 1/10 second.";
      reference
        "RFC 3376: Internet Group Management Protocol, Version 3,
         Sections 4.1.1, 8.3, and 8.14.3";
    }
    leaf require-router-alert {
      if-feature "require-router-alert";
      type boolean;
      default "false";
      description
        "When the value is true, a router alert should exist
         in the IP header of the IGMP or MLD packet.  If it
         doesn't exist, the IGMP or MLD packet will be ignored.";
      reference
        "RFC 3376: Internet Group Management Protocol, Version 3,
         Sections 9.1, 9.2, and 9.3";
    }
    leaf robustness-variable {
      type uint8 {
        range "1..7";
      }
      default "2";
      description
        "Querier's Robustness Variable allows tuning for the
         expected packet loss on a network.";
      reference
        "RFC 3376: Internet Group Management Protocol, Version 3,
         Sections 4.1.6, 8.1, and 8.14.1";
    }
    leaf-list static-bridge-mrouter-interface {
      when 'derived-from-or-self(../l2-service-type,"ims:bridge")';
      if-feature "static-mrouter-interface";
      type if:interface-ref;
      description
        "Static mrouter interface in bridge forwarding";
    }
  } // instance-config-attributes-igmp-mld-snooping

  grouping instance-state-group-attributes-igmp-mld-snooping {
    description
      "Attributes for both IGMP and MLD snooping groups.";
    leaf mac-address {
      type yang:phys-address;
      description
        "Destination MAC address for L2 multicast.";
    }
    leaf expire {
      type rt-types:timer-value-seconds16;
      units "seconds";
      description
        "The time left before multicast group timeout.";
    }
    leaf up-time {
      type uint32;
      units "seconds";
      mandatory true;
      description
        "The time elapsed since the L2 multicast record was
         created.";
    }
  } // instance-state-group-attributes-igmp-mld-snooping

  grouping instance-state-attributes-igmp-mld-snooping {
    description
      "State attributes for IGMP or MLD snooping instance.";
    leaf entries-count {
      type yang:gauge32;
      config false;
      description
        "The number of L2 multicast entries in IGMP and MLD
         snooping.";
    }
    leaf-list bridge-mrouter-interface {
      when 'derived-from-or-self(../l2-service-type,"ims:bridge")';
      type if:interface-ref;
      config false;
      description
        "Indicates a list of mrouter interfaces dynamically learned
         in a bridge.  When this switch receives IGMP/MLD queries
         from a multicast router on an interface, the interface will
         become an mrouter interface for IGMP/MLD snooping.";
    }
  } // instance-config-attributes-igmp-mld-snooping

  grouping instance-state-source-attributes-igmp-mld-snooping {
    description
      "State attributes for IGMP or MLD snooping instance.";
    leaf-list bridge-outgoing-interface {
      when 'derived-from-or-self(../../../l2-service-type,
            "ims:bridge")';
      type if:interface-ref;
      description
        "Outgoing interface in bridge forwarding.";
    }
    leaf up-time {
      type uint32;
      units "seconds";
      mandatory true;
      description
        "The time elapsed since L2 multicast record was created.";
    }
    leaf expire {
      type rt-types:timer-value-seconds16;
      units "seconds";
      description
        "The time left before multicast group timeout.";
    }
    leaf host-count {
      if-feature "explicit-tracking";
      type yang:gauge32;
      description
        "The number of host addresses.";
    }
  } // instance-state-source-attributes-igmp-mld-snooping

  grouping igmp-snooping-statistics {
    description
      "The statistics attributes for IGMP snooping.";
    leaf query-count {
      type yang:counter64;
      description
        "The number of Membership Query messages.";
      reference
        "RFC 2236: Internet Group Management Protocol, Version 2";
    }
    leaf membership-report-v1-count {
      type yang:counter64;
      description
        "The number of Version 1 Membership Report messages.";
      reference
        "RFC 1112: Host extensions for IP multicasting";
    }
    leaf membership-report-v2-count {
      type yang:counter64;
      description
        "The number of Version 2 Membership Report messages.";
      reference
        "RFC 2236: Internet Group Management Protocol, Version 2";
    }
    leaf membership-report-v3-count {
      type yang:counter64;
      description
        "The number of Version 3 Membership Report messages.";
      reference
        "RFC 3376: Internet Group Management Protocol, Version 3";
    }
    leaf leave-count {
      type yang:counter64;
      description
        "The number of Leave Group messages.";
      reference
        "RFC 2236: Internet Group Management Protocol, Version 2";
    }
    leaf pim-hello-count {
      type yang:counter64;
      description
        "The number of PIM hello messages.";
      reference
        "RFC 7761: Protocol Independent Multicast - Sparse Mode
         (PIM-SM): Protocol Specification (Revised)";
    }
  } // igmp-snooping-statistics

  grouping mld-snooping-statistics {
    description
      "The statistics attributes for MLD snooping.";
    leaf query-count {
      type yang:counter64;
      description
        "The number of Multicast Listener Query messages.";
      reference
        "RFC 3810: Multicast Listener Discovery Version 2 (MLDv2)
         for IPv6";
    }
    leaf report-v1-count {
      type yang:counter64;
      description
        "The number of Version 1 Multicast Listener Report.";
      reference
        "RFC 2710: Multicast Listener Discovery (MLD) for IPv6";
    }
    leaf report-v2-count {
      type yang:counter64;
      description
        "The number of Version 2 Multicast Listener Report.";
      reference
        "RFC 3810: Multicast Listener Discovery Version 2 (MLDv2)
         for IPv6";
    }
    leaf done-count {
      type yang:counter64;
      description
        "The number of Version 1 Multicast Listener Done.";
      reference
        "RFC 2710: Multicast Listener Discovery (MLD) for IPv6";
    }
    leaf pim-hello-count {
      type yang:counter64;
      description
        "The number of PIM hello messages.";
      reference
        "RFC 7761: Protocol Independent Multicast - Sparse Mode
         (PIM-SM): Protocol Specification (Revised)";
    }
  } // mld-snooping-statistics

  augment "/rt:routing/rt:control-plane-protocols"
        + "/rt:control-plane-protocol" {
    when 'derived-from-or-self(rt:type, "ims:igmp-snooping")' {
      description
        "This container is only valid for IGMP snooping.";
    }
    description
      "IGMP snooping augmentation to control-plane protocol
       configuration and state.";
    container igmp-snooping-instance {
      if-feature "igmp-snooping";
      description
        "IGMP snooping instance to configure igmp-snooping.";
      leaf l2-service-type {
        type l2-service-type;
        default "bridge";
        description
          "It indicates bridge or other services.";
      }
      uses instance-config-attributes-igmp-mld-snooping;
      leaf igmp-version {
        type uint8 {
          range "1..3";
        }
        default "2";
        description
          "IGMP version.";
      }
      leaf querier-source {
        type inet:ipv4-address;
        description
          "The source address of the IGMP General Query message,
           which is sent out by this switch.";
      }
      list static-l2-multicast-group {
        if-feature "static-l2-multicast-group";
        key "group source-addr";
        description
          "A static multicast route, (*,G) or (S,G).";
        leaf group {
          type rt-types:ipv4-multicast-group-address;
          description
            "Multicast group IPv4 address.";
        }
        leaf source-addr {
          type rt-types:ipv4-multicast-source-address;
          description
            "Multicast source IPv4 address.";
        }
        leaf-list bridge-outgoing-interface {
          when 'derived-from-or-self(../../l2-service-type,
                "ims:bridge")';
          type if:interface-ref;
          description
            "Outgoing interface in bridge forwarding.";
        }
      } // static-l2-multicast-group
      uses instance-state-attributes-igmp-mld-snooping;
      list group {
        key "address";
        config false;
        description
          "IGMP snooping information.";
        leaf address {
          type rt-types:ipv4-multicast-group-address;
          description
            "Multicast group IPv4 address.";
        }
        uses instance-state-group-attributes-igmp-mld-snooping;
        leaf last-reporter {
          type inet:ipv4-address;
          description
            "Address of the last host that has sent a report to join
             the multicast group.";
        }
        list source {
          key "address";
          description
            "Source IPv4 address for multicast stream.";
          leaf address {
            type rt-types:ipv4-multicast-source-address;
            description
              "Source IPv4 address for multicast stream.";
          }
          uses instance-state-source-attributes-igmp-mld-snooping;
          leaf last-reporter {
            type inet:ipv4-address;
            description
              "Address of the last host that has sent a report
               to join the multicast group.";
          }
          list host {
            if-feature "explicit-tracking";
            key "address";
            description
              "List of multicast membership hosts
               of the specific multicast source group.";
            leaf address {
              type inet:ipv4-address;
              description
                "Multicast membership host address.";
            }
            leaf filter-mode {
              type filter-mode-type;
              mandatory true;
              description
                "Filter mode for a multicast membership
                 host may be either include or exclude.";
            }
          } // list host
        } // list source
      } // list group
      container interfaces {
        config false;
        description
          "Contains the interfaces associated with the IGMP snooping
           instance.";
        list interface {
          key "name";
          description
            "A list of interfaces associated with the IGMP snooping
             instance.";
          leaf name {
            type if:interface-ref;
            description
              "The name of the interface.";
          }
          container statistics {
            description
              "The interface statistics for IGMP snooping.";
            leaf discontinuity-time {
              type yang:date-and-time;
              description
                "The time on the most recent occasion at which any
                 one or more of the statistic counters suffered a
                 discontinuity.  If no such discontinuities have
                 occurred since the last re-initialization of the
                 local management subsystem, then this node contains
                 the time the local management subsystem
                 re-initialized itself.";
            }
            container received {
              description
                "Number of received snooped IGMP packets.";
              uses igmp-snooping-statistics;
            }
            container sent {
              description
                "Number of sent snooped IGMP packets.";
              uses igmp-snooping-statistics;
            }
          }
        }
      }
      action clear-igmp-snooping-groups {
        if-feature "action-clear-groups";
        description
          "Clear IGMP snooping cache tables.";
        input {
          leaf group {
            type union {
              type enumeration {
                enum all-groups {
                  description
                    "All multicast group addresses.";
                }
              }
              type rt-types:ipv4-multicast-group-address;
            }
            mandatory true;
            description
              "Multicast group IPv4 address.  If value
               'all-groups' is specified, all IGMP snooping
               group entries are cleared for the specified source
               address.";
          }
          leaf source {
            type rt-types:ipv4-multicast-source-address;
            mandatory true;
            description
              "Multicast source IPv4 address.  If value '*' is
               specified, all IGMP snooping source-group tables
               are cleared.";
          }
        }
      } // action clear-igmp-snooping-groups
    } // igmp-snooping-instance
  } // augment

  augment "/rt:routing/rt:control-plane-protocols"
        + "/rt:control-plane-protocol" {
    when 'derived-from-or-self(rt:type, "ims:mld-snooping")' {
      description
        "This container is only valid for MLD snooping.";
    }
    description
      "MLD snooping augmentation to control-plane protocol
       configuration and state.";
    container mld-snooping-instance {
      if-feature "mld-snooping";
      description
        "MLD snooping instance to configure mld-snooping.";
      leaf l2-service-type {
        type l2-service-type;
        default "bridge";
        description
          "It indicates bridge or other services.";
      }
      uses instance-config-attributes-igmp-mld-snooping;
      leaf mld-version {
        type uint8 {
          range "1..2";
        }
        default "2";
        description
          "MLD version.";
      }
      leaf querier-source {
        type inet:ipv6-address;
        description
          "The source address of MLD General Query message, which
           is sent out by this switch.";
      }
      list static-l2-multicast-group {
        if-feature "static-l2-multicast-group";
        key "group source-addr";
        description
          "A static multicast route, (*,G) or (S,G).";
        leaf group {
          type rt-types:ipv6-multicast-group-address;
          description
            "Multicast group IPv6 address.";
        }
        leaf source-addr {
          type rt-types:ipv6-multicast-source-address;
          description
            "Multicast source IPv6 address.";
        }
        leaf-list bridge-outgoing-interface {
          when 'derived-from-or-self(../../l2-service-type,
                "ims:bridge")';
          type if:interface-ref;
          description
            "Outgoing interface in bridge forwarding.";
        }
      } // static-l2-multicast-group
      uses instance-state-attributes-igmp-mld-snooping;
      list group {
        key "address";
        config false;
        description
          "MLD snooping statistics information.";
        leaf address {
          type rt-types:ipv6-multicast-group-address;
          description
            "Multicast group IPv6 address.";
        }
        uses instance-state-group-attributes-igmp-mld-snooping;
        leaf last-reporter {
          type inet:ipv6-address;
          description
            "Address of the last host that has sent report
             to join the multicast group.";
        }
        list source {
          key "address";
          description
            "Source IPv6 address for multicast stream.";
          leaf address {
            type rt-types:ipv6-multicast-source-address;
            description
              "Source IPv6 address for multicast stream.";
          }
          uses instance-state-source-attributes-igmp-mld-snooping;
          leaf last-reporter {
            type inet:ipv6-address;
            description
              "Address of the last host that has sent report
               to join the multicast group.";
          }
          list host {
            if-feature "explicit-tracking";
            key "address";
            description
              "List of multicast membership hosts
               of the specific multicast source group.";
            leaf address {
              type inet:ipv6-address;
              description
                "Multicast membership host address.";
            }
            leaf filter-mode {
              type filter-mode-type;
              mandatory true;
              description
                "Filter mode for a multicast membership
                 host may be either include or exclude.";
            }
          } // list host
        } // list source
      } // list group
      container interfaces {
        config false;
        description
          "Contains the interfaces associated with the MLD snooping
           instance.";
        list interface {
          key "name";
          description
            "A list of interfaces associated with the MLD snooping
             instance.";
          leaf name {
            type if:interface-ref;
            description
              "The name of the interface.";
          }
          container statistics {
            description
              "The interface statistics for MLD snooping.";
            leaf discontinuity-time {
              type yang:date-and-time;
              description
                "The time on the most recent occasion at which
                 any one or more of the statistic counters suffered
                 a discontinuity.  If no such discontinuities have
                 occurred since the last re-initialization of the
                 local management subsystem, then this node contains
                 the time the local management subsystem
                 re-initialized itself.";
            }
            container received {
              description
                "Number of received snooped MLD packets.";
              uses mld-snooping-statistics;
            }
            container sent {
              description
                "Number of sent snooped MLD packets.";
              uses mld-snooping-statistics;
            }
          }
        }
      }
      action clear-mld-snooping-groups {
        if-feature "action-clear-groups";
        description
          "Clear MLD snooping cache tables.";
        input {
          leaf group {
            type union {
              type enumeration {
                enum all-groups {
                  description
                    "All multicast group addresses.";
                }
              }
              type rt-types:ipv6-multicast-group-address;
            }
            mandatory true;
            description
              "Multicast group IPv6 address.  If value 'all-groups'
               is specified, all MLD snooping group entries are
               cleared for the specified source address.";
          }
          leaf source {
            type rt-types:ipv6-multicast-source-address;
            mandatory true;
            description
              "Multicast source IPv6 address.  If value '*' is
               specified, all MLD snooping source-group tables
               are cleared.";
          }
        }
      } // action clear-mld-snooping-groups
    } // mld-snooping-instance
  } // augment

  augment "/dot1q:bridges/dot1q:bridge" {
    description
      "Use IGMP or MLD snooping instance in bridge.";
    leaf igmp-snooping-instance {
      type igmp-mld-snooping-instance-ref;
      description
        "Configure IGMP snooping instance under bridge view.";
    }
    leaf mld-snooping-instance {
      type igmp-mld-snooping-instance-ref;
      description
        "Configure MLD snooping instance under bridge view.";
    }
  }

  augment "/dot1q:bridges/dot1q:bridge"
        + "/dot1q:component/dot1q:bridge-vlan/dot1q:vlan" {
    description
      "Use IGMP or MLD snooping instance in a certain VLAN
       of bridge.";
    leaf igmp-snooping-instance {
      type igmp-mld-snooping-instance-ref;
      description
        "Configure IGMP snooping instance under VLAN view.";
    }
    leaf mld-snooping-instance {
      type igmp-mld-snooping-instance-ref;
      description
        "Configure MLD snooping instance under VLAN view.";
    }
  }
}
]]></sourcecode>
    </section>
    <section anchor="sect-5" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>
   The YANG module specified in this document defines a schema for data that
   is designed to be accessed via network management protocols such as NETCONF
   <xref target="RFC6241" format="default"/> or RESTCONF <xref target="RFC8040" format="default"/>. The lowest NETCONF layer is the secure
   transport layer, and the mandatory-to-implement secure transport is Secure
   Shell (SSH) <xref target="RFC6242" format="default"/>. The lowest RESTCONF layer is HTTPS, and the
   mandatory-to-implement secure transport is TLS <xref target="RFC8446" format="default"/>.</t>
      <t>
   The Network Configuration Access Control Model (NACM) <xref target="RFC8341" format="default"/> provides
   the means to restrict access for particular NETCONF or RESTCONF users to a
   preconfigured subset of all available NETCONF or RESTCONF protocol
   operations and content.</t>
      <t>
   There are a number of data nodes defined in this YANG module that are
   writable/creatable/deletable (i.e., config true, which is the default).
   These data nodes may be considered sensitive or vulnerable in some network
   environments. Write operations (e.g., edit-config) to these data nodes
   without proper protection can have a negative effect on network
   operations.

   These are the subtrees and data nodes and their
      sensitivity/vulnerability:</t>

      <t>
      Under /rt:routing/rt:control-plane-protocols/rt:control-plane-protocol:/</t>
      <ul empty="true">        
      <li>ims:igmp-snooping-instance</li>
      <li>ims:mld-snooping-instance</li>
      </ul>
    
      <t>The subtrees under /dot1q:bridges/dot1q:bridge</t>
       <ul empty="true">
      <li>ims:igmp-snooping-instance</li>
      <li>ims:mld-snooping-instance</li>
       </ul>
      
      <t>The subtrees under /dot1q:bridges/dot1q:bridge/dot1q:component/dot1q:bridge-vlan/dot1q:vlan</t>
        <ul empty="true">
      <li>ims:igmp-snooping-instance</li>
      <li>ims:mld-snooping-instance</li>
      </ul>
      <t>
   Unauthorized access to any data node of these subtrees can adversely affect
   the IGMP and MLD snooping subsystem of both the local device and the
   network. This may lead to network malfunctions, delivery of packets to
   inappropriate destinations, and other problems.</t>
      <t>
   Some of the readable data nodes in this YANG module may be considered
   sensitive or vulnerable in some network environments. It is thus important
   to control read access (e.g., via get, get-config, or notification) to
   these data nodes. These are the subtrees and data nodes and their
   sensitivity/vulnerability:</t>
      <t>
   Under /rt:routing/rt:control-plane-protocols/rt:control-plane-protocol:/</t>
   
     <ul empty="true">
  <li> ims:igmp-snooping-instance</li>
      <li>
      ims:mld-snooping-instance</li>
     </ul>
      <t>
   Unauthorized access to any data node of these subtrees can disclose the
   operational state information of IGMP and MLD snooping on this device. The
   group/source/host information may expose multicast group memberships and,
   transitively, the associations between the user on the host and the contents
   from the source, which could be privately sensitive. Some of the action
   operations in this YANG module may be considered sensitive or vulnerable in
   some network environments. It is thus important to control access to these
   operations. These are the operations and their sensitivity/vulnerability:</t>
      <t>
   Under /rt:routing/rt:control-plane-protocols/rt:control-plane-protocol:/</t>
   
      <ul empty="true">
  <li> ims:igmp-snooping-instance/ims:clear-igmp-snooping-groups</li>
      
	<li> ims:mld-snooping-instance/ims:clear-mld-snooping-groups</li>
      </ul>
      
      <t>
   Some of the actions in this YANG module may be considered sensitive or
   vulnerable in some network environments. The IGMP and MLD snooping YANG
   module supports the "clear-igmp-snooping-groups" and
   "clear-mld-snooping-groups" actions. If unauthorized action is invoked, the
   IGMP and MLD snooping group tables will be cleared unexpectedly. Especially
   when using wildcard, all the multicast traffic will be flooded in the
   broadcast domain. The devices that use this YANG module should heed the
   security considerations in <xref target="RFC4541" format="default"/>.</t>
    </section>
    <section anchor="sect-6" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="sect-6.1" numbered="true" toc="default">
        <name>XML Registry</name>
        <t>
   This document registers the following namespace URI in the "IETF XML
   Registry" <xref target="RFC3688" format="default"/>:</t>
        <dl spacing="compact">
<dt>URI:</dt><dd>urn:ietf:params:xml:ns:yang:ietf-igmp-mld-snooping</dd>
<dt>Registrant Contact:</dt><dd>The IETF.</dd>
<dt>XML:</dt><dd>N/A; the requested URI is an XML namespace.</dd>
	</dl>
      </section>
      <section anchor="sect-6.2" numbered="true" toc="default">
        <name>YANG Module Names Registry</name>
        <t>
   This document registers the following YANG module in the "YANG Module Names"
   registry <xref target="RFC7950"/>:</t>
        <dl spacing="compact" indent="14">
<dt>Name:</dt><dd> ietf-igmp-mld-snooping</dd>
<dt>Namespace:</dt><dd>    urn:ietf:params:xml:ns:yang:ietf-igmp-mld-snooping</dd>
<dt>Prefix:</dt><dd>       ims</dd>
<dt>Reference:</dt><dd>    RFC 9166</dd>
	</dl>
      </section>
    </section>
  </middle>
  <back>

<references>
      <name>References</name>
      <references>
        <name>Normative References</name>

        <reference anchor="dot1Qcp" target="https://ieeexplore.ieee.org/servlet/opac?punumber=8467505">
          <front>
            <title>Standard for Local and metropolitan area networks--Bridges and Bridged Networks--Amendment 30: YANG Data Model</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date month="September" year="2018"/>
          </front>
            <seriesInfo name="IEEE Std" value="802.1Qcp-2018"/>
  	  <seriesInfo name="DOI" value="10.1109/IEEESTD.2018.8467507"/>
        </reference>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1112.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2236.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2710.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3376.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3688.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3810.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4286.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4541.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5790.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6020.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6241.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6242.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6636.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6991.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7761.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7950.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8040.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8294.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8340.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8341.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8342.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8343.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8349.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7951.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8407.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8652.xml"/>
      </references>
    </references>
    <section anchor="sect-a" numbered="true" toc="default">
      <name>Data Tree Example</name>
        <t>
   This section contains an example of bridge service in the JSON encoding
   <xref target="RFC7951" format="default"/>, containing both configuration and state data.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
           +-----------+
           +  Source   +
           +-----+-----+
                 |
-----------------+----------------------------
                 |eth1/1
             +---+---+
             +  R1   +
             +-+---+-+
        eth1/2 |    \ eth1/3
               |     \
               |      \
               |       \
               |        \
        eth2/1 |         \ eth3/1
           +---+---+   +--+---+
           +  R2   +   +  R3  +
           +---+---+   +--+---+
        eth2/2 |          | eth3/2
               |          |
---------------+----------+-------------------
               |          |
               |          |
      +--------+--+   +---+--------+
      + Receiver1 +   +  Receiver2 +
      +-----------+   +------------+
]]></artwork>

<t>The configuration data for R1 in the above figure could be as follows:</t>

<sourcecode type=""><![CDATA[
{
"ietf-interfaces:interfaces":{
  "interface":[
   {
    "name":"eth1/1",
    "type":"iana-if-type:ethernetCsmacd"
   }
  ]
 },
 "ietf-routing:routing":{
  "control-plane-protocols":{
   "control-plane-protocol":[
    {
     "type":"ietf-igmp-mld-snooping:igmp-snooping",
     "name":"bis1",
     "ietf-igmp-mld-snooping:igmp-snooping-instance":{
       "l2-service-type":"ietf-igmp-mld-snooping:bridge",
       "enabled":true
     }
    }
   ]
  }
 },
 "ieee802-dot1q-bridge:bridges":{
  "bridge":[
   {
    "name":"isp1",
    "address":"00-23-ef-a5-77-12",
    "bridge-type":"ieee802-dot1q-bridge:customer-vlan-bridge",
    "component":[
     {
      "name":"comp1",
      "type":"ieee802-dot1q-bridge:c-vlan-component",
      "bridge-vlan":{
       "vlan":[
        {
         "vid":101,
         "ietf-igmp-mld-snooping:igmp-snooping-instance":"bis1"
        }
       ]
      }
     }
    ]
   }
  ]
 }
}
]]></sourcecode>

<t>The corresponding operational state data for R1 could be as follows:</t>
<sourcecode type="json"><![CDATA[
{
 "ietf-interfaces:interfaces": {
  "interface": [
   {
    "name": "eth1/1",
    "type": "iana-if-type:ethernetCsmacd",
    "oper-status": "up",
    "statistics": {
     "discontinuity-time": "2018-05-23T12:34:56-05:00"
    }
   }
  ]
 },
 "ietf-routing:routing": {
  "control-plane-protocols": {
   "control-plane-protocol": [
    {
     "type": "ietf-igmp-mld-snooping:igmp-snooping",
     "name": "bis1",
     "ietf-igmp-mld-snooping:igmp-snooping-instance": {
      "l2-service-type": "ietf-igmp-mld-snooping:bridge",
      "enabled": true
     }
    }
   ]
  }
 },
 "ieee802-dot1q-bridge:bridges": {
  "bridge": [
   {
    "name": "isp1",
    "address": "00-23-ef-a5-77-12",
    "bridge-type": "ieee802-dot1q-bridge:customer-vlan-bridge",
    "component": [
     {
      "name": "comp1",
      "type": "ieee802-dot1q-bridge:c-vlan-component",
      "bridge-vlan": {
       "vlan": [
        {
         "vid": 101,
         "ietf-igmp-mld-snooping:igmp-snooping-instance": "bis1"
        }
       ]
      }
     }
    ]
   }
  ]
 }
}
]]></sourcecode>
<t>The following action is to clear all the entries whose group address is
225.1.1.1 for igmp-snooping-instance bis1.</t>


<sourcecode><![CDATA[
POST /restconf/operations/ietf-routing:routing/\
control-plane-protocols/\
control-plane-protocol=ietf-igmp-mld-snooping:igmp-snooping,bis1/\
ietf-igmp-mld-snooping:igmp-snooping-instance/\
clear-igmp-snooping-groups HTTP/1.1
Host: example.com
Content-Type: application/yang-data+json

{
  "ietf-igmp-mld-snooping:input" : {
    "group": "225.1.1.1",
    "source": "*"
  }
}
]]></sourcecode>

    </section>
  </back>

</rfc>
