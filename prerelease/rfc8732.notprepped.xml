<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc number="8732" consensus="true" xmlns:xi="http://www.w3.org/2001/XInclude" category="std"
     docName="draft-ietf-curdle-gss-keyex-sha2-10" ipr="trust200902"
     updates="4462" obsoletes="" submissionType="IETF" xml:lang="en"
     tocInclude="true" sortRefs="true" symRefs="true" version="3"> 
  <!-- xml2rfc v2v3 conversion 2.35.0 -->
  <front>
    <title abbrev="GSS Keyex SHA-2">Generic Security Service Application
    Program Interface (GSS-API) Key Exchange with SHA-2</title>
    <seriesInfo name="RFC" value="8732"/>
    <author fullname="Simo Sorce" initials="S." surname="Sorce">
      <organization>Red Hat, Inc.</organization>
      <address>
        <postal>
          <street>140 Broadway, 24th Floor</street>
          <city>New York</city>
          <region>NY</region>
          <code>10025</code>
          <country>United States of America</country>
        </postal>
        <email>simo@redhat.com</email>
      </address>
    </author>
    <author fullname="Hubert Kario" initials="H." surname="Kario">
      <organization>Red Hat, Inc.</organization>
      <address>
        <postal>
          <street>Purkynova 115</street>
          <city>Brno</city>
          <code>612 00</code>
          <country>Czech Republic</country>
        </postal>
        <email>hkario@redhat.com</email>
      </address>
    </author>
    <date month="February" year="2020"/>
    <area>Security</area>
    <workgroup>Internet Engineering Task Force</workgroup>

<keyword>SSH</keyword>

    <abstract>
      <t>This document specifies additions and amendments to RFC 4462.
      It defines a new key exchange method that uses SHA-2 for integrity and
      deprecates weak Diffie-Hellman (DH) groups. The purpose of this specification is to
      modernize the cryptographic primitives used by Generic Security Service (GSS) key exchanges.</t>
    </abstract>
  </front>
  <middle>
    <section numbered="true" toc="default">
      <name>Introduction</name>
      <t>Secure Shell (SSH) Generic Security Service Application Program Interface (GSS-API)
      methods <xref target="RFC4462" format="default"></xref>
      allow the use of GSS-API
      <xref target="RFC2743" format="default"></xref> for authentication and key exchange
      in SSH. <xref target="RFC4462" format="default"></xref> defines three exchange methods all based on DH groups and
      SHA-1. This document updates <xref target="RFC4462" format="default"></xref> with new methods intended to support
      environments that desire to use the SHA-2 cryptographic hash functions.
      </t>
    </section>
    <section numbered="true" toc="default">
      <name>Rationale</name>
      <t>Due to security concerns with SHA-1 <xref target="RFC6194"
      format="default"/> and with  modular exponentiation (MODP) groups with less than 2048 bits <xref
      target="NIST-SP-800-131Ar2" format="default"/>, 
      we propose the use of hashes based on SHA-2 <xref target="RFC6234" format="default"/>
      with DH group14, group15,
      group16, group17, and group18 <xref target="RFC3526" format="default"/>. Additionally, we
      add support for key exchange based on Elliptic Curve Diffie-Hellman with
      the NIST P-256, P-384, and P-521 <xref target="SEC2v2" format="default"/>, as well as the
      X25519 and X448 <xref target="RFC7748" format="default"/> curves.
      Following the practice of <xref target="RFC8268" format="default"/>, only SHA-256 and
      SHA-512 hashes are used for DH groups. For NIST curves, the same
      curve-to-hashing algorithm pairing used in <xref target="RFC5656" format="default"/> is
      adopted for consistency.</t>
    </section>
    <section numbered="true" toc="default">
      <name>Document Conventions</name>
        <t>
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL 
    NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>", 
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>

    </section>
    <section numbered="true" toc="default" anchor="sect4">
      <name>New Diffie-Hellman Key Exchange Methods</name>
      <t>This document adopts the same naming convention defined in <xref
      target="RFC4462" format="default"/> to define families of methods that
      cover any 
        GSS-API mechanism used with a specific Diffie-Hellman group and
      SHA-2 hash combination.</t>
      
      <table anchor="gss_ex_alg" align="center">
        <name>New Key Exchange Algorithms</name>
        <thead>
          <tr>
            <th align="left">Key Exchange Method Name</th>
            <th align="left">Implementation Recommendations</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left">gss-group14-sha256-*</td>
            <td align="left"><bcp14>SHOULD</bcp14>/<bcp14>RECOMMENDED</bcp14></td>
          </tr>
          <tr>
            <td align="left">gss-group15-sha512-*</td>
            <td align="left"><bcp14>MAY</bcp14>/<bcp14>OPTIONAL</bcp14></td>
          </tr>
          <tr>
            <td align="left">gss-group16-sha512-*</td>
            <td align="left"><bcp14>SHOULD</bcp14>/<bcp14>RECOMMENDED</bcp14></td>
          </tr>
          <tr>
            <td align="left">gss-group17-sha512-*</td>
            <td align="left"><bcp14>MAY</bcp14>/<bcp14>OPTIONAL</bcp14></td>
          </tr>
          <tr>
            <td align="left">gss-group18-sha512-*</td>
            <td align="left"><bcp14>MAY</bcp14>/<bcp14>OPTIONAL</bcp14></td>
          </tr>
        </tbody>
      </table>
      <t>Each key exchange method prefix is registered by this document.
        The IESG is the change controller of all these key exchange methods;
        this does NOT imply that the IESG is considered to be in control of
        the corresponding GSS-API mechanism.</t>
      <t>
        Each method in any family of methods (<xref target="fam_met" format="default"></xref>)
        specifies GSS-API-authenticated Diffie-Hellman key exchanges as
        described in <xref target="RFC4462" sectionFormat="of"
	section="2.1"/>. The method name for each method (<xref
	target="gss_ex_alg" format="default"></xref>) is the 
        concatenation of the family name prefix with the base64 encoding of
        the MD5 hash <xref target="RFC1321" format="default"/> of the ASN.1 DER encoding
        <xref target="ISO-IEC-8825-1" format="default"/> of the corresponding GSS-API
        mechanism's OID. Base64 encoding is described in
        <xref target="RFC4648" sectionFormat="of" section="4"/>.</t>
      <table anchor="fam_met" align="center">
        <name>Family Method References</name>
        <thead>
          <tr>
            <th align="left">Family Name Prefix</th>
            <th align="left">Hash Function</th>
            <th align="left">Group </th>
            <th align="left">Reference</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left">gss-group14-sha256-</td>
            <td align="left">SHA-256</td>
            <td align="left">2048-bit MODP</td>
            <td align="left"><xref target="RFC3526"
	    sectionFormat="of" section="3"/></td>
          </tr>
          <tr>
            <td align="left">gss-group15-sha512-</td>
            <td align="left">SHA-512</td>
            <td align="left">3072-bit MODP</td>
            <td align="left"><xref target="RFC3526"
	    sectionFormat="of" section="4"/></td>
          </tr>
          <tr>
            <td align="left">gss-group16-sha512-</td>
            <td align="left">SHA-512</td>
            <td align="left">4096-bit MODP</td>
            <td align="left"><xref target="RFC3526"
	    sectionFormat="of" section="5"/></td>
          </tr>
          <tr>
            <td align="left">gss-group17-sha512-</td>
            <td align="left">SHA-512</td>
            <td align="left">6144-bit MODP</td>
            <td align="left"><xref target="RFC3526"
	    sectionFormat="of" section="6"/></td>
          </tr>
          <tr>
            <td align="left">gss-group18-sha512-</td>
            <td align="left">SHA-512</td>
            <td align="left">8192-bit MODP</td>
            <td align="left"><xref target="RFC3526"
	    sectionFormat="of" section="7"/></td>
          </tr>
        </tbody>
      </table>
    </section>
    <section numbered="true" toc="default" anchor="sect5">
      <name>New Elliptic Curve Diffie-Hellman Key Exchange Methods</name>
      <t>In <xref target="RFC5656" format="default"/>, new SSH key exchange algorithms based on
      elliptic curve cryptography are introduced. We reuse much of 
      <xref target="RFC5656" sectionFormat="of" section="4"/>
      to define GSS-API-authenticated Elliptic Curve Diffie-Hellman (ECDH) key exchanges.</t>
      <t>Additionally, we also utilize the curves defined in <xref target="RFC8731" format="default"/> to complement the three classic
      NIST-defined curves required by <xref target="RFC5656" format="default"/>.</t>
      <section anchor="gen_gss_ecdh" numbered="true" toc="default">
        <name>Generic GSS-API Key Exchange with ECDH</name>
        <t>This section reuses much of the scheme defined in
        <xref target="RFC4462" sectionFormat="of" section="2.1"/> and combines it with the scheme defined in
        <xref target="RFC5656" sectionFormat="of" section="4"/>; in particular, all checks and
        verification steps prescribed in 
        <xref target="RFC5656" sectionFormat="of" section="4"/> apply
	here as well.</t>

        <t>The key-agreement schemes "ECDHE-Curve25519" and "ECDHE-Curve448" perform
        the Diffie-Hellman protocol using the functions X25519 and X448,
        respectively. Implementations <bcp14>MUST</bcp14> compute these functions using
        the algorithms described in <xref target="RFC7748" format="default"/>. When they do
        so, implementations <bcp14>MUST</bcp14> check whether the computed Diffie-Hellman
        shared secret is the all-zero value and abort if so, as described in
        <xref target="RFC7748" sectionFormat="of" section="6"/>.	Alternative implementations of these functions
        <bcp14>SHOULD</bcp14> abort when either the client or the server input
   forces the shared secret to one of a small set of values, as
   described in Sections <xref target="RFC7748" section="6"
	sectionFormat="bare"/> and <xref target="RFC7748" section="7"
	sectionFormat="bare"/> of <xref target="RFC7748"/>.</t>
        <t>This section defers to <xref target="RFC7546" format="default"/> as the source of
        information on GSS-API context establishment operations, Section <xref
	target="RFC7546" sectionFormat="bare" section="3"/>
        being the most relevant. All security considerations described in
        <xref target="RFC7546" format="default"/> apply here, too.</t>
        <t>The parties each generate an ephemeral key pair, according to
	Section 3.2.1 of
        <xref target="SEC1v2" format="default"/>. Keys are verified upon
        receipt by the parties according to Section 3.2.3.1 of
        <xref target="SEC1v2" format="default"/>.</t>
        <t>For NIST curves, the keys use the uncompressed point representation
        and <bcp14>MUST</bcp14> be converted using the algorithm in Section 2.3.4 of
        <xref target="SEC1v2" format="default"/>. If the conversion fails or the point is
        transmitted using the compressed representation, the key exchange <bcp14>MUST</bcp14>
        fail.</t>
        <t>A GSS context is established according to 
        <xref target="RFC5656" sectionFormat="of" section="4"/>; the client initiates the establishment
        using GSS_Init_sec_context(), and the server responds to it using
        GSS_Accept_sec_context(). For the negotiation, the client <bcp14>MUST</bcp14> set
        mutual_req_flag and integ_req_flag to "true". In addition,
        deleg_req_flag <bcp14>MAY</bcp14> be set to "true" to request access delegation, if
        requested by the user. Since the key exchange process authenticates
        only the host, the setting of anon_req_flag is immaterial to this
        process. If the client does not support the "gssapi-keyex" user
        authentication method described in 
        <xref target="RFC4462" sectionFormat="of" section="4"/>, or does not intend to use that method in
        conjunction with the GSS-API context established during key exchange,
        then anon_req_flag <bcp14>SHOULD</bcp14> be set to "true". Otherwise,
	this flag <bcp14>MAY</bcp14> 
        be set to "true" if the client wishes to hide its identity.
        This key exchange process will exchange only a single message token
        once the context has been established; therefore, the
        replay_det_req_flag and sequence_req_flag <bcp14>SHOULD</bcp14> be set to "false".
        </t>
        <t>The client <bcp14>MUST</bcp14> include its public key with the first message it
        sends to the server during this process; if the server receives
        more than one key or none at all, the key exchange <bcp14>MUST</bcp14> fail.</t>
        <t>During GSS context establishment, multiple tokens may be exchanged
        by the client and the server. When the GSS context is established
        (major_status is GSS_S_COMPLETE), the parties check that
        mutual_state and integ_avail are both "true". If not, the key
        exchange <bcp14>MUST</bcp14> fail.</t>
        <t>Once a party receives the peer's public key, it proceeds to compute
        a shared secret K. For NIST curves, the computation is done according
        to Section 3.3.1 of <xref target="SEC1v2" format="default"/>, and the resulting value
        z is converted to the octet string K using the conversion defined
        in Section 2.3.5 of <xref target="SEC1v2" format="default"/>. For curve25519 and
        curve448, the algorithms in <xref target="RFC7748"
	sectionFormat="of" section="6"/> are
        used instead.</t>
        <t>To verify the integrity of the handshake, peers use the hash
        function defined by the selected key exchange method to calculate H:
        </t>
        <t>H = hash(V_C || V_S || I_C || I_S || K_S || Q_C || Q_S || K).</t>

        <t>The server uses the GSS_GetMIC() call with H as the payload
        to generate a Message Integrity Code (MIC).

	The GSS_VerifyMIC() call is used by the client to
        verify the MIC.</t>
        <t>If any GSS_Init_sec_context() or GSS_Accept_sec_context() returns
        a major_status other than GSS_S_COMPLETE or GSS_S_CONTINUE_NEEDED, or
        any other GSS-API call returns a major_status other than
        GSS_S_COMPLETE, the key exchange <bcp14>MUST</bcp14> fail. The same recommendations
        expressed in <xref target="RFC4462" sectionFormat="of" section="2.1"/> are followed with
        regard to error reporting.</t>
        <t>The following is an overview of the key exchange process:
        </t>
	
        <artwork name="" type="" align="left" alt=""><![CDATA[
    Client                                                Server
    ------                                                ------
    Generates ephemeral key pair.
    Calls GSS_Init_sec_context().
    SSH_MSG_KEXGSS_INIT  --------------->

                                           Verifies received key.
(Optional)                  <------------- SSH_MSG_KEXGSS_HOSTKEY

(Loop)
|                                 Calls GSS_Accept_sec_context().
|                           <------------ SSH_MSG_KEXGSS_CONTINUE
|   Calls GSS_Init_sec_context().
|   SSH_MSG_KEXGSS_CONTINUE ------------>

                                  Calls GSS_Accept_sec_context().
                                    Generates ephemeral key pair.
                                          Computes shared secret.
                                                 Computes hash H.
                                     Calls GSS_GetMIC( H ) = MIC.
                            <------------ SSH_MSG_KEXGSS_COMPLETE

    Verifies received key.
    Computes shared secret.
    Computes hash H.
    Calls GSS_VerifyMIC( MIC, H ).]]></artwork>
        <t>This is implemented with the following messages:</t>
        <t>The client sends:</t>
	<sourcecode>
    byte      SSH_MSG_KEXGSS_INIT
    string    output_token (from GSS_Init_sec_context())
    string    Q_C, client's ephemeral public key octet string
</sourcecode>

	<t>The server may respond with:</t>
	<sourcecode>
    byte     SSH_MSG_KEXGSS_HOSTKEY 
    string   server public host key and certificates (K_S)
</sourcecode>

        <t>The server sends:</t>
	<sourcecode>
    byte     SSH_MSG_KEXGSS_CONTINUE
    string   output_token (from GSS_Accept_sec_context())
</sourcecode>

   <t>Each time the client receives the message described above, it makes
   another call to GSS_Init_sec_context().</t>

   <t>The client sends:</t>
   <sourcecode>
    byte      SSH_MSG_KEXGSS_CONTINUE
    string    output_token (from GSS_Init_sec_context())
</sourcecode>
        <t>As the final message, the server sends the following if an
	output_token is produced:</t>
	<sourcecode>
    byte      SSH_MSG_KEXGSS_COMPLETE
    string    Q_S, server's ephemeral public key octet string
    string    mic_token (MIC of H)
    boolean   TRUE
    string    output_token (from GSS_Accept_sec_context())
</sourcecode>

        <t>If no output_token is produced, the server sends:</t>
	<sourcecode>
    byte      SSH_MSG_KEXGSS_COMPLETE
    string    Q_S, server's ephemeral public key octet string
    string    mic_token (MIC of H)
    boolean   FALSE
</sourcecode>

        <t>The hash H is computed as the HASH hash of the
          concatenation of the following:</t>
	<sourcecode>
    string    V_C, the client's version string (CR, NL excluded)
    string    V_S, server's version string (CR, NL excluded)
    string    I_C, payload of the client's SSH_MSG_KEXINIT
    string    I_S, payload of the server's SSH_MSG_KEXINIT
    string    K_S, server's public host key
    string    Q_C, client's ephemeral public key octet string
    string    Q_S, server's ephemeral public key octet string
    mpint     K,   shared secret
</sourcecode>

        <t>This value is called the "exchange hash", and it is used to
        authenticate the key exchange. The exchange hash <bcp14>SHOULD</bcp14> be kept
        secret. If no SSH_MSG_KEXGSS_HOSTKEY message has been sent by the
        server or received by the client, then the empty string is used in
        place of K_S when computing the exchange hash.</t>
        <t>Since this key exchange method does not require the host key to
        be used for any encryption operations, the SSH_MSG_KEXGSS_HOSTKEY
        message is <bcp14>OPTIONAL</bcp14>. If the "null" host key algorithm described in
        <xref target="RFC4462" sectionFormat="of" section="5"/> is used, this message <bcp14>MUST
        NOT</bcp14> be sent.</t>
        <t>If the client receives an SSH_MSG_KEXGSS_CONTINUE message after
        a call to GSS_Init_sec_context() has returned a major_status code
        of GSS_S_COMPLETE, a protocol error has occurred, and the key
        exchange <bcp14>MUST</bcp14> fail.</t>
        <t>If the client receives an SSH_MSG_KEXGSS_COMPLETE message and a
        call to GSS_Init_sec_context() does not result in a major_status
        code of GSS_S_COMPLETE, a protocol error has occurred, and the key
        exchange <bcp14>MUST</bcp14> fail.</t>
      </section>
      <section numbered="true" toc="default">
        <name>ECDH Key Exchange Methods</name>
        <table anchor="ecc_ex_alg" align="center">
          <name>New Key Exchange Methods</name>
          <thead>
            <tr>
              <th align="left">Key Exchange Method Name</th>
              <th align="left">Implementation Recommendations</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">gss-nistp256-sha256-*</td>
              <td align="left"><bcp14>SHOULD</bcp14>/<bcp14>RECOMMENDED</bcp14></td>
            </tr>
            <tr>
              <td align="left">gss-nistp384-sha384-*</td>
              <td align="left"><bcp14>MAY</bcp14>/<bcp14>OPTIONAL</bcp14></td>
            </tr>
            <tr>
              <td align="left">gss-nistp521-sha512-*</td>
              <td align="left"><bcp14>MAY</bcp14>/<bcp14>OPTIONAL</bcp14></td>
            </tr>
            <tr>
              <td align="left">gss-curve25519-sha256-*</td>
              <td align="left"><bcp14>SHOULD</bcp14>/<bcp14>RECOMMENDED</bcp14></td>
            </tr>
            <tr>
              <td align="left">gss-curve448-sha512-*</td>
              <td align="left"><bcp14>MAY</bcp14>/<bcp14>OPTIONAL</bcp14></td>
            </tr>
          </tbody>
        </table>
        <t>Each key exchange method prefix is registered by this document.
        The IESG is the change controller of all these key exchange methods;
        this does NOT imply that the IESG is considered to be in control of
        the corresponding GSS-API mechanism.</t>
        <t>
        Each method in any family of methods (<xref target="fam_met_ecc" format="default"></xref>)
        specifies GSS-API-authenticated Elliptic Curve Diffie-Hellman key
        exchanges as described in <xref target="gen_gss_ecdh"
	format="default"/>. The method name for each method (<xref
	target="ecc_ex_alg" format="default"></xref>) is the 
        concatenation of the family method name with the base64 encoding of
        the MD5 hash <xref target="RFC1321" format="default"/> of the ASN.1 DER encoding
        <xref target="ISO-IEC-8825-1" format="default"/> of the corresponding GSS-API
        mechanism's OID. Base64 encoding is described in 
        <xref target="RFC4648" sectionFormat="of" section="4"/>.</t>
        <table anchor="fam_met_ecc" align="center">
          <name>Family Method References</name>
          <thead>
            <tr>
              <th align="left">Family Name Prefix</th>
              <th align="left">Hash Function</th>
              <th align="left">Parameters / Function Name</th>
              <th align="left">Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">gss-nistp256-sha256-</td>
              <td align="left">SHA-256</td>
              <td align="left">secp256r1</td>
              <td align="left">Section 2.4.2 of <xref target="SEC2v2" format="default"/></td>
            </tr>
            <tr>
              <td align="left">gss-nistp384-sha384-</td>
              <td align="left">SHA-384</td>
              <td align="left">secp384r1</td>
              <td align="left">Section 2.5.1 of <xref target="SEC2v2" format="default"/></td>
            </tr>
            <tr>
              <td align="left">gss-nistp521-sha512-</td>
              <td align="left">SHA-512</td>
              <td align="left">secp521r1</td>
              <td align="left">Section 2.6.1 of <xref target="SEC2v2" format="default"/></td>
            </tr>
            <tr>
              <td align="left">gss-curve25519-sha256-</td>
              <td align="left">SHA-256</td>
              <td align="left">X22519</td>
              <td align="left"><xref target="RFC7748"
	      sectionFormat="of" section="5"/></td>
            </tr>
            <tr>
              <td align="left">gss-curve448-sha512-</td>
              <td align="left">SHA-512</td>
              <td align="left">X448</td>
              <td align="left"><xref target="RFC7748"
	      sectionFormat="of" section="5"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
    <section numbered="true" toc="default" anchor="sect6">
      <name>Deprecated Algorithms</name>
      <t>Because they have small key lengths and are no longer strong in
      the face of brute-force attacks, the algorithms in the following
      table are considered deprecated and <bcp14>SHOULD NOT</bcp14> be used.</t>
      <table align="center">
        <name>Deprecated Algorithms</name>
        <thead>
          <tr>
            <th align="left">Key Exchange Method Name</th>
            <th align="left">Implementation Recommendations</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left">gss-group1-sha1-*</td>
            <td align="left"><bcp14>SHOULD NOT</bcp14></td>
          </tr>
          <tr>
            <td align="left">gss-group14-sha1-*</td>
            <td align="left"><bcp14>SHOULD NOT</bcp14></td>
          </tr>
          <tr>
            <td align="left">gss-gex-sha1-*</td>
            <td align="left"><bcp14>SHOULD NOT</bcp14></td>
          </tr>
        </tbody>
      </table>
    </section>
    <section numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>This document augments the SSH key exchange message names
      that were defined in <xref
      target="RFC4462" format="default"/> (see and <xref
      target="sect6"/>); IANA has listed this
      document as reference for those entries in the "SSH Protocol Parameters" <xref target="IANA-KEX-NAMES"
      format="default"></xref> registry.</t> 
      <t>In addition, IANA has updated the registry to include the SSH key
      exchange message names described in Sections <xref
      target="sect4" format="counter"/> and
      <xref target="sect5" format="counter"/>.</t>
      <table align="center">
        <name>Additions/Changes to the Key Exchange Method Names Registry</name>
        <thead>
          <tr>
            <th align="left">Key Exchange Method Name</th>
            <th align="left">Reference</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left">gss-group1-sha1-*</td>
            <td align="left">RFC 8732</td>
          </tr>
          <tr>
            <td align="left">gss-group14-sha1-*</td>
            <td align="left">RFC 8732</td>
          </tr>
          <tr>
            <td align="left">gss-gex-sha1-*</td>
            <td align="left">RFC 8732</td>
          </tr>
          <tr>
            <td align="left">gss-group14-sha256-*</td>
            <td align="left">RFC 8732</td>
          </tr>
          <tr>
            <td align="left">gss-group15-sha512-*</td>
            <td align="left">RFC 8732</td>
          </tr>
          <tr>
            <td align="left">gss-group16-sha512-*</td>
            <td align="left">RFC 8732</td>
          </tr>
          <tr>
            <td align="left">gss-group17-sha512-*</td>
            <td align="left">RFC 8732</td>
          </tr>
          <tr>
            <td align="left">gss-group18-sha512-*</td>
            <td align="left">RFC 8732</td>
          </tr>
          <tr>
            <td align="left">gss-nistp256-sha256-*</td>
            <td align="left">RFC 8732</td>
          </tr>
          <tr>
            <td align="left">gss-nistp384-sha384-*</td>
            <td align="left">RFC 8732</td>
          </tr>
          <tr>
            <td align="left">gss-nistp521-sha512-*</td>
            <td align="left">RFC 8732</td>
          </tr>
          <tr>
            <td align="left">gss-curve25519-sha256-*</td>
            <td align="left">RFC 8732</td>
          </tr>
          <tr>
            <td align="left">gss-curve448-sha512-*</td>
            <td align="left">RFC 8732</td>
          </tr>
        </tbody>
      </table>
    </section>
    <section numbered="true" toc="default">
      <name>Security Considerations</name>
      <section numbered="true" toc="default">
        <name>New Finite Field DH Mechanisms</name>
        <t>Except for the use of a different secure hash function and larger
        DH groups, no significant changes have been made to the protocol
        described by <xref target="RFC4462" format="default"/>; therefore, all the original
        security considerations apply.</t>
      </section>
      <section numbered="true" toc="default">
        <name>New Elliptic Curve DH Mechanisms</name>
        <t>Although a new cryptographic primitive is used with these methods,
        the actual key exchange closely follows the key exchange defined in
        <xref target="RFC5656" format="default"/>; therefore, all the original security
        considerations, as well as those expressed in <xref target="RFC5656" format="default"/>,
        apply.</t>
      </section>
      <section numbered="true" toc="default">
        <name>GSS-API Delegation</name>
        <t>Some GSS-API mechanisms can act on a request to delegate credentials
        to the target host when the deleg_req_flag is set. In this case, extra
        care must be taken to ensure that the acceptor being authenticated
        matches the target the user intended. Some mechanism implementations
        (such as commonly used krb5 libraries) may use insecure DNS resolution to
        canonicalize the target name; in these cases, spoofing a DNS response
        that points to an attacker-controlled machine may result in the user
        silently delegating credentials to the attacker, who can then
        impersonate the user at will.</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1321.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2743.xml"/>
        <!--DH GROUPS-->
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3526.xml"/>
        <!--SSH GSS-API Methods-->
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4462.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4648.xml"/>
        <!-- SSH ECC Algorithms -->
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5656.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7546.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7748.xml"/>
        <!--Key words for use in RFCs to Indicate Requirement Levels-->
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <!--ECC specifications-->

<!-- draft-ietf-curdle-ssh-curves-12 -->
<reference anchor="RFC8731" target="https://www.rfc-editor.org/info/rfc8731">
<front>
<title>Secure Shell (SSH) Key Exchange Method Using Curve25519 and
Curve448</title>
<author initials='A' surname='Adamantiadis' fullname='Arish Adamantiadis'>
  <organization/>
</author>
<author initials='S' surname='Josefsson' fullname='Simon Josefsson'>
  <organization/>
</author>
<author initials='M' surname='Baushke' fullname='Mark D. Baushke'>
  <organization/>
</author>
<date month='February' year='2020'/>
</front>
<seriesInfo name="RFC" value="8731"/>
<seriesInfo name="DOI" value="10.17487/RFC8731"/>
</reference>

        <reference anchor="SEC1v2">
          <front>
            <title>SEC 1: Elliptic Curve Cryptography</title>
            <seriesInfo name="Version" value="2.0"/>
            <author>
              <organization>Standards for Efficient Cryptography Group</organization>
            </author>
            <date month="May" year="2009"/>
          </front>
        </reference>

        <reference anchor="SEC2v2">
          <front>
            <title>SEC 2: Recommended Elliptic Curve Domain Parameters</title>
            <seriesInfo name="Version" value="2.0"/>
            <author>
              <organization>Standards for Elliptic Cryptography Group</organization>
            </author>
            <date month="January" year="2010"/>
          </front>
        </reference>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
      </references>
     
 <references>
        <name>Informative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6194.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8268.xml"/>
        <!--SHA-2-->
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6234.xml"/>
        <reference anchor="ISO-IEC-8825-1"
		   target="http://standards.iso.org/ittf/PubliclyAvailableStandards/c068345_ISO_IEC_8825-1_2015.zip"> 
          <front>
            <title>Information technology -- ASN.1 encoding rules: Specification of Basic Encoding Rules
          (BER), Canonical Encoding Rules (CER) and Distinguished Encoding
          Rules (DER)</title>
            <seriesInfo name="ISO/IEC" value="8825-1:2015"/>
            <seriesInfo name="ITU-T Recommendation" value="X.690"/>
            <author>
              <organization>ITU-T</organization>
            </author>
            <date month="November" year="2015"/>
          </front>
        </reference>

        <reference anchor="NIST-SP-800-131Ar2"
		   target="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf"> 
          <front>
            <title>Transitioning of the Use of Cryptographic Algorithms and Key Lengths</title>
            <seriesInfo name="NIST Special Publication" value="800-131A Revision 2"/>
            <seriesInfo name="DOI" value="10.6028/NIST.SP.800-131Ar2"/>
            <author>
              <organization abbrev="NIST">National Institute of Standards and Technology
              </organization>
            </author>
            <date month="November" year="2015"/>
          </front>
        </reference>

        <reference anchor="IANA-KEX-NAMES"
		   target="https://www.iana.org/assignments/ssh-parameters/"> 
          <front>
            <title> Secure Shell (SSH) Protocol Parameters: Key Exchange Method Names</title>
            <author>
              <organization abbrev="IANA">IANA
              </organization>
            </author>
          </front>
        </reference>
      </references>
    </references>



  </back>
</rfc>
