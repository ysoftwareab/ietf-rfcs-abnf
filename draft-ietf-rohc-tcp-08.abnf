IPPROTO_TCP = 6
IPPROTO_IP  = 255            % place-holder for IP header in chain


uncompressed_format =        field;     %[ 32 ]

format_irreg_enc    =        field,     %[ 32 ]
format_static_enc   =        field,     %[ 0 ]
uncompressed_format =        field;     %[ 16 ]

format_irreg_enc    =        field,     %[ 16 ]
format_static_enc =       field,     %[ 0 ]
uncompressed_format = field;            %[ 8 ]

format_irreg_enc =        field,     %[ 8 ]
format_static_enc =       field,     %[ 0 ]
tlv_header ===
uncompressed_format = length,       %[ 8 ]
                                 option_value; % n bits

format_0 = length,       %[ 8 ]
                      option_value, % n bits
uncompressed_format = item; % 0 or 32 bits

format_present = item, %[ 32 ]
format_not_present = item, %[ 0 ]
lsb_7_or_31 ===
uncompressed_format     = item; % 7 or 31 bits

format_lsb_7  = discriminator,  %[ 1 ]
                           item,           %[ 7 ]
format_lsb_31 = discriminator,  %[ 1 ]
                           item,           %[ 31 ]
uncompressed_format = item;     % 32 bits

format_present = item,          % 8 or 32 bits
format_not_present = item,      %[ 0 ]
uncompressed_format = ;

compressed_format = crc_value,   %[ 3 ]
uncompressed_format = ;

compressed_format = crc_value, %[ 7 ]
ip_dest_opt ===
uncompressed_format = next_header,              %[ 8 ]
                                 length_and_value;         % 8 + n bits

default_methods =
format_dest_opt_static = next_header,           %[ 8 ]
format_dest_opt_dynamic = length_and_value,     % 8 + n bits
format_dest_opt_replicate_0 = discriminator,    %[ 8 ]
format_dest_opt_replicate_1 = discriminator,    %[ 8 ]
                                         length_and_value, % 8 + n bits
ip_hop_opt ===
uncompressed_format = next_header,            %[ 8 ]
                                 length_and_value;       % 8 + n bits


default_methods     =
format_hop_opt_static = next_header,          %[ 8 ]
format_hop_opt_dynamic = length_and_value,    % 8 + n bits
format_hop_opt_replicate_0 = discriminator,   %[ 8 ]
format_hop_opt_replicate_1 = discriminator,        %[ 8 ]
                                     length_and_value,     % 8 + n bits
ip_rout_opt ===
uncompressed_format = next_header,              %[ 8 ]
                                 length_and_value;         % 8 + n bits

default_methods     =
format_rout_opt_static = next_header,            %[ 8 ]
                                    length_and_value,       % 8 + n bits
format_rout_opt_dynamic =
format_rout_opt_replicate_0 = discriminator,     %[ 8 ]
format_rout_opt_replicate_1 = discriminator,     %[ 8 ]
                                         length_and_value,  % 8 + n bits
uncompressed_format = value,     % 0 or 16 bits
                                 reserved1; % 0 or 16 bits

format_cs_present = value,     %[ 16 ]
                               reserved1, %[ 0 ]
format_not_present = value,     %[ 0 ]
                                reserved1, %[ 0 ]
gre_proto ===
uncompressed_format = protocol; %[ 16 ]

default_methods =
format_ether_v4 = discriminator, %[ 1 ]
format_ether_v6 = discriminator, %[ 1 ]
gre ===
uncompressed_format = c_flag,              %[ 1 ]
                                 r_flag,              %[ 1 ]
                                 k_flag,              %[ 1 ]
                                 s_flag,              %[ 1 ]
                                 reserved0,           %[ 9 ]
                                 version,             %[ 3 ]
                                 protocol,            %[ 16 ]
                                 checksum_and_res,    % 0 or 32 bits
                                 key,                 % 0 or 32 bits
                                 sequence_number;     % 0 or 32 bits

default_methods =
format_gre_static = protocol,                %[ 1 ]
                               c_flag,                  %[ 1 ]
                               r_flag,                  %[ 1 ]
                               k_flag,                  %[ 1 ]
                               s_flag,                  %[ 1 ]
                               version,                 %[ 3 ]
                               key,                     % 0 or 32 bits
format_gre_dynamic = checksum_and_res,% 0 or 16 bits
                                sequence_number, % 0 or 32 bits
format_gre_replicate_0 = discriminator,   % 8 bits
                                    checksum_and_res,% 0 or 16 bits
                                    sequence_number, % 0, 8 or 32 bits
format_gre_replicate_1 =
                                  discriminator,   %[ 8 ]
                                  c_flag,          %[ 1 ]
                                  r_flag,          %[ 1 ]
                                  k_flag,          %[ 1 ]
                                  s_flag,          %[ 1 ]
                                  reserved,        %[ 1 ]
                                  version,         %[ 3 ]
                                  checksum_and_res,% 0 or 16 bits
                                  key,             % 0 or 32 bits
                                  sequence_number, % 0 or 32 bits
format_gre_irregular = checksum_and_res,% 0 or 16 bits
                                  sequence_number, % 0, 8 or 32 bits
mine ===
uncompressed_format = next_header,  %[ 8 ]
                                 s_bit,        %[ 1 ]
                                 res_bits,     %[ 7 ]
                                 checksum,     %[ 16 ]
                                 orig_dest,    %[ 32 ]
                                 orig_src;     %  0 or 32 bits

default_methods =
format_mine_static = next_header,%[ 8 ]
                                s_bit,      %[ 1 ],
                                res_bits,   %[ 7 ],
                                orig_dest,  %[ 32 ]
                                orig_src,   %  0 or 32 bits
format_mine_dynamic =
format_mine_replicate_0 = discriminator, %[ 8 ]
                                     checksum,      %[ 0 ]
format_mine_replicate_1 = discriminator,  %[ 8 ]
                                     s_bit,          %[ 1 ]
                                     res_bits,       %[ 7 ]
                                     orig_dest,      %[ 32 ]
                                     orig_src,       %  0 or 32 bits
ah ===
uncompressed_format = next_header,          %[ 8 ]
                                 length,               %[ 8 ]
                                 res_bits,             %[ 16 ]
                                 spi,                  %[ 32 ]
                                 sequence_number,      %[ 32 ]
                                 auth_data;            % n bits

default_methods   =
format_ah_static =   next_header,           %[  8 ]
                                length,                %[  8 ]
                                spi,                   %[ 32 ]
format_ah_dynamic =   res_bits,             %[ 16 ]
                                 sequence_number,      %[ 32 ]
                                 auth_data,            %  n bits
format_ah_replicate_0 =   discriminator,    %[ 8 ]
                                     sequence_number,  % 8 or 32 bits
                                     auth_data,        % n bits
format_ah_replicate_1 =   discriminator,    %[ 8 ]
                                     length,           %[ 8 ]
                                     res_bits,         %[ 16 ]
                                     spi,              %[ 32 ]
                                     sequence_number,  %[ 32 ]
                                     auth_data,        %  n bits
format_ah_irregular =   sequence_number,    % 8 or 32 bits
                                   auth_data,          % n bits
esp_null ===
uncompressed_format = spi,             %[ 32 ]
                                 sequence_number, %[ 32 ]
                                 next_header;     %[ 8 ]
default_methods =
format_esp_static = next_header, %[ 8 ]
format_esp_dynamic = sequence_number, %[ 32 ]
format_esp_replicate_0 = discriminator,   %[ 8 ]
                                    sequence_number, % 8 or 32 bits
format_esp_replicate_1 = discriminator,    %[ 8 ]
                                    spi,              %[ 32 ]
                                    sequence_number,  %[ 32 ]
format_esp_irregular = sequence_number, % 8 or 32 bits
uncompressed_format = tos_tc;        %[ 6 ]

format_tos_tc_present = tos_tc ,     %[ 6 ]
format_tos_tc_not_present = tos_tc , %[ 0 ]
uncompressed_format = ip_ecn_flags;     %[ 2 ]

format_tc_present = ip_ecn_flags,       %[ 2 ]
format_tc_not_present = ip_ecn_flags, %[ 0 ]
fl_enc ===
uncompressed_format = flow_label;

format_fl_zero = discriminator,
                            flow_label,
                            reserved,
format_fl_non_zero = discriminator,
                                flow_label,
ipv6 ===
uncompressed_format = version,        %[ 4 ]
                                 tos_tc,         %[ 6 ]
                                 ip_ecn_flags,   %[ 2 ]
                                 flow_label,     %[ 20 ]
                                 payload_length, %[ 16 ]
                                 next_header,    %[ 8 ]
                                 ttl_hopl,       %[ 8 ]
                                 src_addr,       %[ 128 ]
                                 dst_addr;       %[ 128 ]

default_methods =
format_ipv6_static = version_flag,    %[ 1 ]
                                reserved,        %[ 2 ]
                                flow_label,      %   5 or 21 bits
                                next_header,     %[ 8 ]
                                src_addr,        %[ 128 ]
                                dst_addr,        %[ 128 ]
format_ipv6_dynamic = tos_tc,        %[ 6 ]
                                 ip_ecn_flags,  %[ 2 ]
                                 ttl_hopl,      %[ 8 ]
format_ipv6_replicate = tos_tc,       %[ 6 ]
                                   ip_ecn_flags, %[ 2 ]
uncompressed_format = ip_id; %[ 16 ]

format_ip_id_seq = ip_id,
format_ip_id_zero = ip_id,
uncompressed_format = ip_id; % 0 or 16

format_ip_id_seq = ip_id,
format_ip_id_seq_swapped = ip_id,
format_ip_id_rand = ip_id,
format_ip_id_zero = ip_id,
ip_id_behavior_enc ===
uncompressed_format = ip_id_behavior; %[ 2 ]

format_sequential = ip_id_behavior,
format_sequential_swapped = ip_id_behavior,
format_random = ip_id_behavior,
format_zero = ip_id_behavior,
ipv4 ===
uncompressed_format =   version,     %[ 4 ]
                                   hdr_length,  %[ 4 ]
                                   protocol,    %[ 8 ]
                                   tos_tc,      %[ 6 ]
                                   ip_ecn_flags,%[ 2 ]
                                   ttl_hopl,    %[ 8 ]
                                   df,          %[ 1 ]
                                   mf,          %[ 1 ]
                                   rf,          %[ 1 ]
                                   frag_offset, %[ 13 ]
                                   ip_id,       %[ 16 ]
                                   src_addr,    %[ 32 ]
                                   dst_addr,    %[ 32 ]
                                   checksum,    %[ 16 ]
                                   length;      %[ 16 ]

control_fields  = ip_id_behavior;    % 2 bits

default_methods =
format_ipv4_static = version_flag, %[ 1 ]
                                reserved,     %[ 7 ]
                                protocol,     %[ 8 ]
                                src_addr,     %[ 32 ]
                                dst_addr,     %[ 32 ]
format_ipv4_dynamic = reserved,       %[ 5 ]
                                 df,             %[ 1 ]
                                 ip_id_behavior, %[ 2 ]
                                 tos_tc,         %[ 6 ]
                                 ip_ecn_flags,   %[ 2 ]
                                 ttl_hopl,       %[ 8 ]
                                 ip_id,          % 0/16 bits
format_ipv4_replicate_0 = discriminator, %[ 8 ]
                                     ip_id,         % 0 or 16 bits
                                     tos_tc,        %[ 6 ]
                                     ip_ecn_flags,  %[ 2 ]
format_ipv4_replicate_1 = discriminator,  %[ 5 ]
                                     df,             %[ 1 ]
                                     ip_id_behavior, %[ 2 ]
                                     tos_tc,         %[ 6 ]
                                     ip_ecn_flags,   %[ 2 ]
                                     ttl_hopl,       %[ 8 ]
                                     ip_id,          % 0/16 bits
uncompressed_format  =   port;        %[ 16 ]

format_port_static_enc   = port,      %[ 0 ]
format_port_lsb8         = port,      %[ 8 ]
format_port_irr_enc      = port,      %[ 16 ]
uncompressed_format = urg_ptr;

format_urg_zero = urg_ptr,
format_urg_non_zero = urg_ptr,
uncompressed_format = ack_number;

format_ack_zero = ack_number,
format_ack_non_zero = ack_number,
uncompressed_format = tcp_ecn_flags;

format_irreg = tcp_ecn_flags,
format_unused =
uncompressed_format = tcp_res_flags;

format_irreg = tcp_res_flags,
format_unused =
rsf_index_enc ===
uncompressed_format = rsf_flag;

format_none     = rsf_idx,
format_rst_only = rsf_idx,
format_syn_only = rsf_idx,
format_fin_only = rsf_idx,
tcp ===
uncompressed_format = src_port,     %[ 16 ]
                                 dst_port,     %[ 16 ]
                                 rsf_flags,    %[ 3 ]
                                 psh_flag,     %[ 1 ]
                                 urg_flag,     %[ 1 ]
                                 ack_flag,     %[ 1 ]
                                 data_offset,  %[ 4 ]
                                 tcp_ecn_flags,%[ 2 ]
                                 tcp_res_flags,%[ 4 ]
                                 urg_ptr,      %[ 16 ]
                                 window,       %[ 16 ]
                                 checksum,     %[ 16 ]
                                 seq_number,   %[ 32 ]
                                 ack_number,   %[ 32 ]
                                 options;      %  n bits

control_fields  = msn,              % 16 bits
                             ecn_used;         % 1 bit

default_methods =
format_tcp_static = src_port,     %[ 16 ]
                               dst_port,     %[ 16 ]
format_tcp_dynamic =  ecn_used,              %[ 1 ]
                                 ack_flag,              %[ 1 ]
                                 urg_flag,              %[ 1 ]
                                 psh_flag,              %[ 1 ]
                                 ack_zero,              %[ 1 ]
                                 urp_zero,              %[ 1 ]
                                 rsf_flags,             %[ 3 ]
                                 tcp_ecn_flags,         %[ 2 ]
                                 tcp_res_flags,         %[ 4 ]
                                 padding,               %[ 1 ]
                                 msn,                   %[ 16 ]
                                 seq_number,            %[ 32 ]
                                 ack_number,            %  0 or 32 bits
                                 window,                %[ 16 ]
                                 checksum,              %[ 16 ]
                                 urg_ptr,               %  0 or 16 bits
                                 options,               %  n bits
format_tcp_replicate = reserved,           %[ 1 ]
                                  list_present,       %[ 1 ]
                                  src_port_presence,  %[ 2 ]
                                  dst_port_presence,  %[ 2 ]
                                  ack_number,         %[ 1 ]
                                  urp_presence,       %[ 1 ]
                                  urg_flag,           %[ 1 ]
                                  ack_flag,           %[ 1 ]
                                  psh_flag,           %[ 1 ]
                                  rsf_flags,          %[ 2 ]
                                  tcp_ecn_flags,      %[ 2 ]
                                  ecn_used,           %[ 1 ]
                                  msn,                %[ 16 ]
                                  seq_number,         %[ 32 ]
                                  src_port,           %  0, 8 or 16 bits
                                  dst_port,           %  0, 8 or 16 bits
                                  urg_point,          %  0 or 16 bits
                                  ack_number,         %  0 or 32 bits
                                  tcp_ecn_flags,      %  0 or 2 bits
                                  tcp_res_flags,      %  0 or 4 bits
                                  options_list,       %  n bits
format_tcp_irregular = tcp_ecn_flags,
                                  tcp_res_flags,
                                  checksum, %[ 16 ]
tcp_opt_mss ===
uncompressed_format = type,   %[ 8 ]
                                 length, %[ 8 ]
                                 mss;    %[ 16 ]

default_methods =
format_mss_list_item = mss, %[ 16 ]
format_mss_irregular =
tcp_opt_wscale ===
uncompressed_format = type,    %[ 8 ]
                                 length,  %[ 8 ]
                                 wscale;  %[ 8 ]

default_methods =
format_wscale_list_item = wscale,  %[ 8 ]
format_wscale_irregular =
ts_lsb ===
uncompressed_format = tsval;

format_tsval_15 = discriminator, %[ 1 ]
                             tsval,         %[ 15 ]
format_tsval_22 = discriminator, %[ 2 ]
                             tsval,         %[ 22 ]
format_tsval_30 = discriminator, %[ 2 ]
                             tsval,         %[ 20 ]
tcp_opt_tsopt ===
uncompressed_format = type,   %[ 8 ]
                                 length, %[ 8 ]
                                 tsval,  %[ 32 ]
                                 tsecho; %[ 32 ]

default_methods =
format_tsopt_list_item = tsval,   %[ 32 ]
                                    tsecho,  %[ 32 ]
format_tsopt_irregular = tsval,  % 16, 24 or 32 bits
                                    tsecho, % 16, 24 or 32 bits
uncompressed_format = sack_field; %[ 32 ]

default_methods =
format_lsb_15 = discriminator,  %[ 1 ]
                           sack_offset,    %[ 15 ]
format_lsb_22 = discriminator,  %[ 2 ]
                           sack_offset,    %[ 22 ]
format_lsb_30 = discriminator,  %[ 2 ]
                           sack_offset,    %[ 30 ]
uncompressed_format = block_start, %[ 32 ]
                                 block_end;   %[ 32 ]
format_0 = block_start, % 16, 24 or 32 bits
                      block_end,   % 16, 24 or 32 bits
uncompressed_format = type,    %[ 8 ]
                                 length,  %[ 8 ]
                                 block_1, % n bits
                                 block_2, % n bits
                                 block_3, % n bits
                                 block_4; % n bits

default_methods =
format_sack1_list_item = length,
                                    block_1,
format_sack2_list_item = length,
                                    block_1,
                                    block_2,
format_sack3_list_item = length,
                                    block_1,
                                    block_2,
                                    block_3,
format_sack4_list_item = length,
                                    block_1,
                                    block_2,
                                    block_3,
                                    block_4,
format_sack_irregular =
tcp_opt_eol ===
uncompressed_format = type,          %[ 8 ]
                                 padding;       % (n * 8) bits

default_methods =
format_eol_list_item =  pad_len,      %  8 bits
                                   padding,      %[ 0 ]
format_eol_irregular =
tcp_opt_nop ===
uncompressed_format = type; %[ 8 ]

default_methods =
format_nop_list_item =
format_nop_irregular =
tcp_opt_sack_permitted ===
uncompressed_format = type, %[ 8 ]
                                 length; %[ 8 ]

default_methods =
format_sack_permitted_list_item =
format_sack_permitted_irregular =
tcp_opt_generic ===
uncompressed_format = type,       %[ 8 ]
                                 length_msb, %[ 1 ]
                                 length_lsb, %[ 7 ]
                                 contents;   % n bits

default_methods =
format_generic_list_item = type,            %[ 8 ]
                                      option_static,   %[ 1 ]
                                      length_lsb,      %[ 7 ]
                                      contents,        % n bits
format_generic_replicate_0 = discriminator, %[ 8 ]
format_generic_replicate_1 = discriminator,  %[ 8 ]
                                        type,           %[ 8 ]
                                        option_static,  %[ 1 ]
                                        length_lsb,     %[ 7 ]
                                        contents,       % n bits
format_generic_irregular_stable = discriminator, %[ 8 ]
                                             contents,      %[ 0 ]
format_generic_irregular_full = discriminator, %[ 1 ]
                                           length_lsb,    %[ 7 ]
                                           contents,      % n bits
uncompressed_format = tcp_options;

format_list_not_present = tcp_options,
format_list_present = tcp_options,
uncompressed_format = tos_tc;      %[ 6 ]

format_static       = tos_tc,      %[ 0 ]
format_irreg     = tos_tc,         %[ 6 ]
                              padding,
uncompressed_format = rsf_flags;

format_static = rsf_flags,      %[ 0 ]
format_irreg = rsf_flags,      %[ 3 ]
uncompressed_format = ip_id;

default_methods =
format_nbo = ip_id_offset,
format_non_nbo = ip_id_offset,
uncompressed_format = df;

compressed_format_v4 = df,
compressed_format_v6 = df,
co_baseheader ===
uncompressed_format_v4 = version,
                         header_length,
                                tos_tc,
                          ip_ecn_flags,
                                length,
                                 ip_id,
                                    df,
                                    mf,
                                    rf,
                           frag_offset,
                              ttl_hopl,
                           next_header,
                              checksum,
                              src_addr,
                             dest_addr,
                              src_port,
                             dest_port,
                            seq_number,
                            ack_number,
                           data_offset,
                         tcp_ecn_flags,
                         tcp_res_flags,
                              urg_flag,
                              ack_flag,
                              psh_flag,
                             rsf_flags,
                          tcp_checksum,
                               urg_ptr,
                                window,
                           tcp_options,
uncompressed_format_v6 = version,
                                tos_tc,
                          ip_ecn_flags,
                            flow_label,
                        payload_length,
                           next_header,
                              ttl_hopl,
                              src_addr,
                             dest_addr,
                              src_port,
                             dest_port,
                            seq_number,
                            ack_number,
                           data_offset,
                         tcp_ecn_flags,
                         tcp_res_flags,
                              urg_flag,
                              ack_flag,
                              psh_flag,
                             rsf_flags,
                          tcp_checksum,
                               urg_ptr,
                                window,
control_fields  = msn,              % 16 bits
                        ecn_used,         % 1 bit
                        ip_id_behavior;   % 2 bits

default_methods =
format_co_common             =   discriminator,       %[ 4 ]
                                       msn,                 %[ 4 ]
                                       padding1,            %[ 1 ]
                                       header_crc,          %[ 7 ]
                                       urg_flag,            %[ 1 ]
                                       ack_flag,            %[ 1 ]
                                       psh_flag,            %[ 1 ]
                                       df,                  %[ 1 ]
                                       ecn_used,            %[ 1 ]
                                       ip_id_present,       %[ 1 ]
                                       ip_id_behavior,      %[ 2 ]
                                       seq_present,         %[ 1 ]
                                       ack_present,         %[ 1 ]
                                       window_present,      %[ 1 ]
                                       urg_ptr_present,     %[ 1 ]
                                       tos_tc_present,      %[ 1 ]
                                       ttl_hopl_present,    %[ 1 ]
                                       rsf_flags_present,   %[ 1 ]
                                       ecn_flags_present,   %[ 1 ]
                                       seq_number,        % 0 or 32 bits
                                       ack_number,        % 0 or 32 bits
                                       ip_id,             % 0 or 16 bits
                                       window,            % 0 or 16 bits
                                       urg_ptr,           % 0 or 16 bits
                                       ip_ecn_flags,      % 0 or 2 bits
                                       tcp_ecn_flags,     % 0 or 2 bits
                                       tcp_res_flags,     % 0 or 4 bits
                                       ttl_hopl,          % 0 or 8 bits
                                       tos_tc,            % 0 or 8 bits
                                       rsf_flags,         % 0 or 8 bits
                                       ecn_flags,         % 0 or 8 bits
format_seq_0           =  discriminator,               %[ 1 ]
                                header_crc,                  %[ 3 ]
                                psh_flag,                    %[ 1 ]
                                msn,                         %[ 3 ]
                                ip_id,                       %[ 4 ]
                                seq_number,                  %[ 12 ]
format_seq_1           =  discriminator,               %[ 3 ]
                                header_crc,                  %[ 3 ]
                                rsf_flags,                   %[ 2 ]
                                ip_id,                       %[ 8 ]
                                psh_flag,                    %[ 1 ]
                                msn,                         %[ 3 ]
                                seq_number,                  %[ 12 ]
format_seq_2           =  discriminator,               %[ 3 ]
                                ip_id,                       %[ 4 ]
                                psh_flag,                    %[ 1 ]
                                ack_number,                  %[ 16 ]
                                msn,                         %[ 3 ]
                                header_crc,                  %[ 3 ]
                                seq_number_scaled,           %[ 10 ]
format_seq_3           =  discriminator,               %[ 6 ]
                                seq_number_scaled,           %[ 10 ]
                                psh_flag,                    %[ 1 ]
                                header_crc,                  %[ 7 ]
                                msn,                         %[ 3 ]
                                ip_id,                       %[ 5 ]
                                ecn_used,                    %[ 1 ]
                                list_present,                %[ 1 ]
                                ack_number,                  %[ 14 ]
                                options_list,                % n bits
format_seq_4           =  discriminator,               %[ 5 ]
                                msn,                         %[ 3 ]
                                psh_flag,                    %[ 1 ]
                                header_crc,                  %[ 7 ]
                                ttl_hopl,                    %[ 8 ]
                                ip_id,                       %[ 6 ]
                                tos_tc,                      %[ 6 ]
                                seq_number,                  %[ 12 ]
format_seq_5           =  discriminator,               %[ 7 ]
                                psh_flag,                    %[ 1 ]
                                msn,                         %[ 3 ]
                                ip_id,                       %[ 13 ]
                                ack_flag,                    %[ 1 ]
                                header_crc,                  %[ 3 ]
                                seq_number,                  %[ 12 ]
format_seq_6           =  discriminator,               %[ 6 ]
                                list_present,                %[ 1 ]
                                psh_flag,                    %[ 1 ]
                                ack_flag,                    %[ 1 ]
                                header_crc,                  %[ 7 ]
                                ecn_used,                    %[ 1 ]
                                msn,                         %[ 4 ]
                                seq_number,                  %[ 11 ]
                                ip_id,                       %[ 8 ]
                                ttl_hopl,                    %[ 8 ]
                                options_list,                % n bits
format_seq_7           =  discriminator,               %[ 8 ]
                                psh_flag,                    %[ 1 ]
                                msn,                         %[ 4 ]
                                header_crc,                  %[ 3 ]
                                seq_number,                  %[ 16 ]
                                ip_id,                       %[ 16 ]
format_seq_8           =  discriminator,               %[ 7 ]
                                msn,                         %[ 3 ]
                                ip_id,                       %[ 6 ]
                                psh_flag,                    %[ 1 ]
                                header_crc,                  %[ 3 ]
                                seq_number_scaled,           %[ 12 ]
                                ack_number,                  %[ 16 ]
                                window,                      %[ 16 ]
       {
         let ((ip_id_behavior:uncomp_value == 0) ||
              (ip_id_behavior:uncomp_value == 1));
         discriminator       ::= '1100001';
         msn                 ::= lsb (3, -1);
         header_crc          ::= crc3 (this:uncomp_value,
                                       this:uncomp_length);
         ip_id               ::= ip_id_lsb (ip_id_behavior, msn, 6, -1);
         seq_number_scaled   ::= lsb (12, 1023);
         psh_flag            ::= irregular (1);
         ack_number          ::= lsb (16, 0);
         window              ::= irregular (16);
format_seq_9           =  discriminator,               %[ 6 ]
                                seq_number_scaled,           %[ 10 ]
                                window,                      %[ 16 ]
                                psh_flag,                    %[ 1 ]
                                msn,                         %[ 3 ]
                                header_crc,                  %[ 3 ]
                                ip_id,                       %[ 5 ]
                                tos_tc,                      %[ 6 ]
                                ack_number,                  %[ 14 ]
       {
         let ((ip_id_behavior:uncomp_value == 0) ||
              (ip_id_behavior:uncomp_value == 1));
         discriminator       ::= '110100';
         msn                 ::= lsb (3, -1);
         header_crc          ::= crc3 (this:uncomp_value,
                                       this:uncomp_length);
         tos_tc              ::= irregular (6);
         ip_id               ::= ip_id_lsb (ip_id_behavior, msn, 5, -1);
         ack_number          ::= lsb (14, 0);
         psh_flag            ::= irregular (1);
         window              ::= irregular (16);
         seq_number_scaled   ::= lsb (10, 511);
format_seq_10          =  discriminator,               %[ 6 ]
                                list_present,                %[ 1 ]
                                ip_id,                       %[ 5 ]
                                msn,                         %[ 4 ]
                                seq_number_scaled,           %[ 32 ]
                                payload_size,                %[ 16 ]
                                psh_flag,                    %[ 1 ]
                                ack_number,                  %[ 15 ]
                                header_crc,                  %[ 7 ]
                                window,                      %[ 13 ]
                                seq_number,                  %[ 12 ]
       {
         let ((ip_id_behavior:uncomp_value == 0) ||
              (ip_id_behavior:uncomp_value == 1));
         discriminator       ::= '110110';
         msn                 ::= lsb (4, -1);
         header_crc          ::= crc7 (this:uncomp_value,
                                       this:uncomp_length);
         ip_id               ::= ip_id_lsb (ip_id_behavior, msn, 5, -1);
         seq_number          ::= lsb (12, 1023);
         ack_number          ::= lsb (15, 0);
         psh_flag            ::= irregular (1);
         window              ::= lsb (13, 4095);
         seq_number_scaled   ::= irregular (32);
         payload_size        ::= irregular (16);
         list_present        ::= irregular(1);
         options_list        ::= tcp_list_presence_enc(list_length,
                                                       list_present);
format_rnd_0    =   discriminator,                 %[ 2 ]
                          seq_number,                    %[ 14 ]
                          psh_flag,                      %[ 1 ]
                          header_crc,                    %[ 3 ]
                          msn,                           %[ 4 ]
format_rnd_1    =   discriminator,                   %[ 3 ]
                          psh_flag,                        %[ 1 ]
                          ack_number,                      %[ 2 ]
                          rsf_flags,                       %[ 2 ]
                          msn,                             %[ 3 ]
                          header_crc,                      %[ 3 ]
                          seq_number_scaled,               %[ 10 ]
format_rnd_2    =   discriminator,                   %[ 3 ]
                          list_present,                    %[ 1 ]
                          ecn_used,                        %[ 1 ]
                          msn,                             %[ 3 ]
                          ttl_hopl,                        %[ 8 ]
                          psh_flag,                        %[ 1 ]
                          header_crc,                      %[ 7 ]
                          seq_number,                      %[ 16 ]
format_rnd_3    =   discriminator,                   %[ 4 ]
                          psh_flag,                        %[ 1 ]
                          header_crc,                      %[ 3 ]
                          ack_number,                      %[ 16 ]
                          msn,                             %[ 4 ]
                          seq_number_scaled,               %[ 12 ]
format_rnd_4   =    discriminator,                   %[ 3 ]
                          seq_number,                      %[ 13 ]
                          psh_flag,                        %[ 1 ]
                          msn,                             %[ 4 ]
                          header_crc,                      %[ 3 ]
format_rnd_5    =   discriminator,                   %[ 5 ]
                          header_crc,                      %[ 3 ]
                          psh_flag,                        %[ 1 ]
                          ack_number,                      %[ 15 ]
                          msn,                             %[ 4 ]
                          seq_number_scaled,               %[ 12 ]
format_rnd_6   =   discriminator,                   %[ 5 ]
                         msn,                             %[ 3 ]
                         header_crc,                      %[ 7 ]
                         psh_flag,                        %[ 1 ]
                         ack_number,                      %[ 16 ]
                         list_present,                    %[ 1 ]
                         ecn_used,                        %[ 1 ]
                         seq_number_scaled,               %[ 14 ]
format_rnd_7    =   discriminator,                   %[ 5 ]
                          header_crc,                      %[ 3 ]
                          window,                          %[ 16 ]
                          psh_flag,                        %[ 1 ]
                          ack_number,                      %[ 15 ]
                          msn,                             %[ 4 ]
                          seq_number_scaled,               %[ 12 ]
format_rnd_8   =   discriminator,                   %[ 5 ]
                         msn,                             %[ 3 ]
                         ack_number,                      %[ 32 ]
                         psh_flag,                        %[ 1 ]
                         header_crc,                      %[ 3 ]
                         seq_number,                      %[ 12 ]
format_rnd_9     =   discriminator,                  %[ 5 ]
                           header_crc,                     %[ 3 ]
                           window,                         %[ 16 ]
                           psh_flag,                       %[ 1 ]
                           ack_number,                     %[ 15 ]
                           msn,                            %[ 4 ]
                           seq_number_scaled,              %[ 12 ]
