


Network Working Group                                           A. Niemi
Internet-Draft                                                   K. Kiss
Intended status: Standards Track                                   Nokia
Expires: August 25, 2008                                    Feb 22, 2008


   Session Initiation Protocol (SIP) Event Notification Extension for
                        Notification Throttling
                 draft-niemi-sipping-event-throttle-06

Status of this Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on August 25, 2008.

Copyright Notice

   Copyright (C) The IETF Trust (2008).

Abstract

   This memo specifies a throttle mechanism for limiting the rate of
   Session Initiation Protocol (SIP) event notifications.  This
   mechanism can be applied in subscriptions to all SIP event packages,
   but the mechanism is especially designed to be used in combination
   with a subscription to a Resource List Server (RLS).





Niemi & Kiss             Expires August 25, 2008                [Page 1]

Internet-Draft               Event Throttle                     Feb 2008


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Definitions and Document Conventions . . . . . . . . . . . . .  4
   3.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . . .  4
     3.1.  Use Case . . . . . . . . . . . . . . . . . . . . . . . . .  4
     3.2.  Requirements . . . . . . . . . . . . . . . . . . . . . . .  5
     3.3.  Event Throttle Model for Resource List Server  . . . . . .  6
     3.4.  Basic Operation  . . . . . . . . . . . . . . . . . . . . .  7
   4.  Operation of Event Throttles . . . . . . . . . . . . . . . . .  7
     4.1.  Negotiating the Use of Throttle  . . . . . . . . . . . . .  8
     4.2.  Setting the Throttle . . . . . . . . . . . . . . . . . . .  8
       4.2.1.  Subscriber Behavior  . . . . . . . . . . . . . . . . .  8
       4.2.2.  Notifier Behavior  . . . . . . . . . . . . . . . . . .  8
     4.3.  Selecting the Throttle Interval  . . . . . . . . . . . . .  9
     4.4.  Buffer Policy Description  . . . . . . . . . . . . . . . . 10
       4.4.1.  Partial State Notifications  . . . . . . . . . . . . . 10
       4.4.2.  Full State Notifications . . . . . . . . . . . . . . . 10
     4.5.  Estimated Bandwidth Savings  . . . . . . . . . . . . . . . 10
   5.  Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
     5.1.  "throttle" Header Field Parameter  . . . . . . . . . . . . 11
     5.2.  Augmented BNF Definitions  . . . . . . . . . . . . . . . . 11
   6.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 11
   7.  Security Considerations  . . . . . . . . . . . . . . . . . . . 12
   8.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 12
   9.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 12
     9.1.  Normative References . . . . . . . . . . . . . . . . . . . 12
     9.2.  Informative References . . . . . . . . . . . . . . . . . . 12
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 13
   Intellectual Property and Copyright Statements . . . . . . . . . . 14





















Niemi & Kiss             Expires August 25, 2008                [Page 2]

Internet-Draft               Event Throttle                     Feb 2008


1.  Introduction

   The SIP events framework [RFC3265] defines a generic framework for
   subscriptions to and notifications of events related to SIP systems.
   This framework defines the methods SUBSCRIBE and NOTIFY, and
   introduces the concept of an event package, which is a concrete
   application of the SIP events framework to a particular class of
   events.

   One of the things the SIP events framework mandates is that each
   event package specification defines an absolute maximum on the rate
   at which notifications are allowed to be generated by a single
   notifier.  Such a limit is provided in order to reduce network
   congestion.

   All of the existing event package specifications include a maximum
   notification rate recommendation, ranging from once in every five
   seconds [RFC3856], [RFC3680], [RFC3857] to once per second [RFC3842].

   Per the SIP events framework, each event package specification is
   also allowed to define additional throttle mechanisms which allow the
   subscriber to further limit the rate of event notification.  So far
   none of the event package specifications have defined such a
   mechanism.

   The resource list extension [RFC4662] to the SIP events framework
   also deals with rate limiting of event notifications.  The extension
   allows a subscriber to subscribe to a heterogenous list of resources
   with a single SUBSCRIBE request, rather than having to install a
   subscription for each resource separately.  The event list
   subscription also allows rate limiting, or throttling of
   notifications, by means of the Resource List Server (RLS) buffering
   notifications of resource state changes, and sending them in batches.
   However, the event list mechanism provides no means for the
   subscriber to set the interval for the throttling; it is strictly an
   implementation decision whether batching of notifications is
   supported, and by what means.

   This document defines an extension to the SIP events framework that
   allows a subscriber to set a throttle to event notifications
   generated by the notifier.  The requirements and model for generic
   event throttles are further discussed in Section 3.  A throttle is
   simply a timer value that indicates the minimum time period allowed
   between two notifications.  As a result of this throttle, a compliant
   notifier will limit the rate at which it generates notifications.

   This mechanism is applicable to any event subscription, but it is
   mainly intended for use with an event list subscription.



Niemi & Kiss             Expires August 25, 2008                [Page 3]

Internet-Draft               Event Throttle                     Feb 2008


2.  Definitions and Document Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119] and
   indicate requirement levels for compliant implementations.

      Indented passages such as this one are used in this document to
      provide additional information and clarifying text.  They do not
      contain normative protocol behavior.


3.  Overview

   There are many applications that potentially would make use of a
   throttle mechanism.  This chapter only illustrates one, albeit the
   main use case, in which a mobile device uses the event list
   subscription in combination with the event throttling mechanism to
   limit the amount of traffic it may expect to receive.

3.1.  Use Case

   A presence application in a mobile device contains a list of 100
   buddies or presentities.  In order to decrease the processing and
   network load of watching 100 presentities, the presence application
   has employed a Resource List Server (RLS) with the list of buddies,
   and therefore only needs a single subscription to the RLS in order to
   receive notification of the presence state of the resource list.

   In order to control the buffer policy of the RLS, the presence
   application sets a throttle interval via the event throttle
   extension.  Alternatively, the presence application could set a
   default throttle for the resource list, via a list manipulation
   interface, e.g., using the XML Configuration Access Protocol (XCAP)
   [RFC4825].

   The RLS will buffer notifications that do not comply with the
   throttle interval, and batch all of the buffered state changes
   together in a single notification when allowed by the throttle.  The
   throttle applies to the overall resource list, which means that there
   is a hard cap imposed by the throttle to the amount of traffic the
   presence application can expect to receive.

   For example, with a throttle of 20 seconds, the presence application
   can expect to receive a notification every 20 seconds at a maximum.

   The presence application can also modify the throttle during the
   lifetime of the subscription.  For example, if the User Interface



Niemi & Kiss             Expires August 25, 2008                [Page 4]

Internet-Draft               Event Throttle                     Feb 2008


   (UI) of the application shows inactivity for a period of time, it can
   simply pause the notifications by setting the throttle interval to
   the subscription expiration time, while still keeping the
   subscription alive.  When the user becomes active again, the presence
   application can resume the stream of notifications by re-setting the
   throttle to the earlier used value.

      Currently, a subscription refresh is needed in order to update the
      throttle interval.  However, this is highly inefficient, since
      each refresh automatically generates a (full-state) notification
      carrying the latest resource state.  There is work
      [I-D.ietf-sip-subnot-etags] ongoing to solve these inefficiencies.

3.2.  Requirements

   REQ1:  The subscriber must be able to set using a throttle mechanism
          the minimum time period between two notifications in a
          specific subscription.

   REQ2:  It must be possible to use of the throttle mechanism in
          subscriptions to all events.

   REQ3:  It must be possible to use the throttle mechanism together
          with any event filtering mechanism.

   REQ4:  The notifier must be allowed to use a throttling policy in
          which the minimum time period between two notifications is
          adjusted from the value given by the subscriber.

             For example, due to congestion reasons, local policy at the
             notifier could temporarily dictate a throttling policy that
             in effect increases the subscriber-configured minimum time
             period between two notifications.

   REQ5:  The throttle mechanism must provide a reasonable resolution
          for setting the minimum period between two notifications.  At
          a minimum, the throttling mechanism must include discussion of
          the situation resulting from a minimum time period which
          exceeds the subscription duration, and should provide
          mechanisms for avoiding this situation.

   REQ6:  A throttle must be possible to be installed, adapted, or
          removed in the course of an active subscription.

   REQ7:  A throttle mechanism must allow for the application of
          authentication and integrity protection mechanisms to
          subscriptions invoking that mechanism.




Niemi & Kiss             Expires August 25, 2008                [Page 5]

Internet-Draft               Event Throttle                     Feb 2008


      Note that Section 7 contains further discussion on the security
      implications of the throttle mechanism.

3.3.  Event Throttle Model for Resource List Server

   The notifier is responsible for sending out event notifications upon
   state changes of the subscribed resource.  We can model the notifier
   as consisting of three components: the event state resource(s), the
   Resource List Server (RLS) (or any other notifier), a notification
   buffer, and finally the subscriber, or watcher of the event state, as
   shown in Figure 1.

                       +--------+
                       | Event  |
        +--------+     |Resource|     +--------+
        | Event  |     +--------+     | Event  |
        |Resource|         |          |Resource|
        +---.=---+         |          +---=----+
              `-..         |         _.--'
                  ``-._    |    _.--'
                       +'--'--'-+
                       |Resource|
                       |  List  |
                       | Server |
                       +---.----+
                           |
                           |
                        )--+---(
                        |      |       .--------.
                        |Buffer|<======'Throttle|
                        |      |       `--------'
                        )--.---(
                           |
                           |
                       .---+---.
                       | Event |
                       |Watcher|
                       `-------'


       Figure 1: Model for the Resource List Server (RLS) Supporting
                                Throttling

   In short, the RLS reads event state changes from the event state
   resource, either by creating a backend subscription, or by other
   means; it packages them into event notifications, and submits them
   into the output buffer.  The rate at which this output buffer drains
   is controlled by the subscriber via the event throttle mechanism.



Niemi & Kiss             Expires August 25, 2008                [Page 6]

Internet-Draft               Event Throttle                     Feb 2008


   When a set of notifications are batched together, the way in which
   overlapping resource state is handled depends on the type of the
   resource state:

      In theory, there are many buffer policies that the notifier could
      implement.  However, we only concentrate on two practical buffer
      policies in this specification, leaving additional ones for
      further study and out of the scope of this work.  These two buffer
      policies depend on the mode in which the notifier is operating.

   Full-state:   Last (most recent) full state notification of each
      resource is sent out, and all others in the buffer are discarded.
      This policy applies to those event packages that carry full-state
      notifications.

   Partial-state:   The state deltas of each buffered partial
      notification per resource are merged, and the resulting
      notification is sent out.  This policy applies to those event
      packages that carry partial-state notifications.

3.4.  Basic Operation

   A subscriber that wants to limit the rate of event notification in a
   specific event subscription does so by suggesting a throttle as part
   of the SUBSCRIBE message.  The throttle indicating the minimum time
   allowed between transmission of two consecutive notifications in a
   subscription is given as an Event header parameter in the SUBSCRIBE
   request.

      Note that the witnessed time between two consecutive received
      notifications may not conform to the set throttle for a number of
      reasons.  For example, network jitter and retransmissions may
      result in the subscriber receiving the notifications in lesser
      intervals than what the throttle recommends.

   A notifier that supports the throttle mechanism will comply with
   value given in the throttle, and adjust its rate of notification
   accordingly.

   Throttled notifications will have exactly the same properties as the
   un-throttled ones, with the exception that they will not be generated
   more frequent than what the throttle allows.


4.  Operation of Event Throttles






Niemi & Kiss             Expires August 25, 2008                [Page 7]

Internet-Draft               Event Throttle                     Feb 2008


4.1.  Negotiating the Use of Throttle

   A subscriber that wishes to apply a throttle to notifications in a
   subscription constructs a SUBSCRIBE request that includes a proposed
   throttle interval in a "throttle" Event header field parameter.

   A compliant notifier will reflect back the possibly adjusted throttle
   interval in a "throttle" Subscription-State header field parameter of
   the subsequent NOTIFY requests.

   A notifier that does not understand the event-throttle extension,
   will not reflect the "throttle" parameter in the NOTIFY requests; the
   absence of this parameter serves as a hint to the subscriber that no
   throttling is supported by the notifier.

   Otherwise, the indicated throttle value is adopted by the notifier,
   and the notification rate is adjusted accordingly.

4.2.  Setting the Throttle

4.2.1.  Subscriber Behavior

   In general, the way in which a subscriber generates SUBSCRIBE
   requests and processes NOTIFY requests is according to RFC 3265
   [RFC3265].

   A subscriber that wishes to throttle the notifications in a
   subscription includes a "throttle" Event header parameter in the
   SUBSCRIBE request, indicating in seconds the desired throttle value.
   The value of this parameter is an integral number of seconds in
   decimal.

   The notifier is allowed to adjust the suggested throttle interval as
   defined in Section 4.3.  The adjusted throttle value will be
   reflected back in the Subscription-State header field of the
   subsequent NOTIFY requests, which the subscriber MUST take as the
   current, possibly adjusted throttle interval for the subscription.

   There are two main consequencies for the subscriber when applying the
   throttle mechanism: state transitions may be lost, and event
   notifications may be delayed.  If either of these side effects
   constitute a problem to the application that is to utilize event
   throttles, developers are instructed not to use the mechanism.

4.2.2.  Notifier Behavior

   In general, the way in which a notifier processes SUBSCRIBE requests
   and generates NOTIFY requests is according to RFC 3265 [RFC3265].



Niemi & Kiss             Expires August 25, 2008                [Page 8]

Internet-Draft               Event Throttle                     Feb 2008


   A notifier that supports the event-throttle extension extracts the
   value of the "throttle" Event header parameter, and uses it as the
   suggested minimum time allowed between two notifications.  This value
   can be adjusted by the notifier, as defined in Section 4.3.

   A compliant notifier MUST NOT generate notifications more frequent
   than what the throttle allows for, except when generating the
   notification either upon receipt of a SUBSCRIBE request (the first
   notification), when the subscription state is changing from "pending"
   to "active" state or upon termination of the subscription (the last
   notification).  Such notifications reset the throttle timer, even
   though they do not need to abide by it.

   Retransmissions of NOTIFY requests are not affected by the throttle,
   i.e., the throttle only applies to the generation of new
   transactions.  In other words, the throttle is reset only after the
   previous transaction has completed.

4.3.  Selecting the Throttle Interval

   Special care needs to be taken when selecting the throttle value.
   Using the throttle syntax it is possible to insist both very short
   and very long throttles to be applied to the subscription.  For
   example, a throttle could potentially set a minimum time value
   between notifications that exceeds the subscription expiration value.
   Such a configuration would effectively quench the notifier, resulting
   in exactly two notifications to be generated.

   In some cases it makes sense to pause the notification stream on an
   existing subscription dialog on a temporary basis without terminating
   the subscription, e.g. due to inactivity on the application UI.
   Whenever a subscriber discovers the need to perform the notification
   pause operation, it SHOULD set the throttle interval to the remaining
   subscription expiration value.  This results in receiving no further
   notifications until the subscription expires, renewed or
   notifications are resumed by the subscriber.

   The notifier is responsible for adjusting the proposed throttle value
   based on its local policy or other properties.  The notifier MAY
   lower the throttle value, e.g., because of lowering the subscription
   expiration.  The notifier MAY also choose a higher throttle value,
   e.g., because of static throttle value configuration given by local
   policy.  The notifier MUST include the adjusted throttle value in the
   Subscription-State header field's "throttle" parameter in each of the
   NOTIFY requests.  In addition, different event packages MAY define
   additional constraints to the allowed throttle intervals.  Such
   constraints are out of the scope of this specification.




Niemi & Kiss             Expires August 25, 2008                [Page 9]

Internet-Draft               Event Throttle                     Feb 2008


4.4.  Buffer Policy Description

4.4.1.  Partial State Notifications

   With partial notifications, the notifier will always need to keep
   both a copy of the current full state of the resource F, as well as
   the last successfully communicated full state view F' of the resource
   in a specific subscription.  The construction of a partial
   notification then involves creating a diff of the two states, and
   generating a notification that contains that diff.

   When a throttle is applied to the subscription, it is important that
   F' is replaced with F only when the throttle is reset.  Additionally,
   the notifier implementation SHOULD check to see that the size of an
   accumulated partial state notification is smaller than the full
   state, and if not, the notifier SHOULD send the full state
   notification instead.

4.4.2.  Full State Notifications

   With full state notifications, the notifier only needs to keep the
   full state of the resource, and when that changes, send the resulting
   notification over to the subscriber.

   When a throttle is applied in the subscription, the notifier receives
   the state changes of the resource, and generates a notification.  If
   there is a pending notification, the notifier simply replaces that
   notification with the new notification, discarding the older state.

4.5.  Estimated Bandwidth Savings

   It is difficult to estimate the total bandwidth savings accrued by
   using the throttle mechanism over a subscription, since such
   estimates will vary depending on the useage scenarios.  However, it
   is easy to see that given a subscription where several full state
   notification would have normally been sent in any given throttle
   interval, a throttled subscription would only send a single
   notification during the same interval, yielding bandwidth savings of
   several times the notification size.

   With partial-state notifications, drawing estimates is further
   complicated by the fact that the states of consequtive updates may or
   may not overlap.  However, even in the worst case scenario, where
   each partial update is to a different part of the full state, a
   throttled notification merging all of these n partial states together
   should at a maximum be the size of a full-state update.  In this
   case, the bandwidth savings are approximately n times the size of the
   NOTIFY header.



Niemi & Kiss             Expires August 25, 2008               [Page 10]

Internet-Draft               Event Throttle                     Feb 2008


   It is also true that there are several compression schemes available
   that have been designed to save bandwidth in SIP, e.g., SigComp
   [RFC3320] and TLS compression [RFC3943].  However, such comression
   schemes are complementary rather than competing mechanisms to the
   throttle mechanism.  After all, they can both be applied
   simultaniously, and in such a way that the compound savings are as
   good as the sum of applying each one alone.


5.  Syntax

   This section describes the syntax extensions required for the
   throttle mechanism.

5.1.  "throttle" Header Field Parameter

   The "throttle" parameter is added to the rule definitions of the
   Event header field and the Subscription-State header field in the SIP
   Events [RFC3265] grammar.  Usage of this parameter is described in
   section Section 4.2.

5.2.  Augmented BNF Definitions

   This section describes the Augmented BNF [RFC5234] definitions for
   the new syntax elements.  Note that we derive here from the ruleset
   present in both SIP Events [RFC3265] and SIP [RFC3261], adding
   additional alternatives to the alternative sets of "event-param" and
   "subexp-params" defined therein.

      event-param    =/  throttle-param
      subexp-params  =/  throttle-param
      throttle-param =   "throttle" EQUAL delta-seconds


6.  IANA Considerations

   This specification registers a new SIP header field parameter,
   defined by the following information which is to be added to the
   Header Field Parameters and Parameter Values sub-registry under
   http://www.iana.org/assignments/sip-parameters.

                                             Predefined
      Header Field         Parameter Name      Values     Reference
      -------------------- ---------------   ----------   ---------
      Event                throttle          No           [RFCxxxx]
      Subscription-State   throttle          No           [RFCxxxx]

   (Note to the RFC Editor: please replace "xxxx" with the RFC number of



Niemi & Kiss             Expires August 25, 2008               [Page 11]

Internet-Draft               Event Throttle                     Feb 2008


   this specification, when assigned.)


7.  Security Considerations

   Naturally, the security considerations listed in SIP events
   [RFC3265], which the throttle mechanism extends, apply in entirety.
   In particular, authentication and message integrity SHOULD be applied
   to subscriptions with the event-throttle extension.


8.  Acknowledgements

   Thanks to Pekka Pessi, Dean Willis, Eric Burger, Alex Audu, Alexander
   Milinski, Jonathan Rosenberg, Cullen Jennings and Adam Roach for
   support and/or review of this work.


9.  References

9.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,
              A., Peterson, J., Sparks, R., Handley, M., and E.
              Schooler, "SIP: Session Initiation Protocol", RFC 3261,
              June 2002.

   [RFC3265]  Roach, A., "Session Initiation Protocol (SIP)-Specific
              Event Notification", RFC 3265, June 2002.

   [RFC4662]  Roach, A., Campbell, B., and J. Rosenberg, "A Session
              Initiation Protocol (SIP) Event Notification Extension for
              Resource Lists", RFC 4662, August 2006.

   [RFC5234]  Crocker, D. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234, January 2008.

9.2.  Informative References

   [I-D.ietf-sip-subnot-etags]
              Niemi, A., "An Extension to Session Initiation Protocol
              (SIP) Events for Conditional  Event Notification",
              draft-ietf-sip-subnot-etags-01 (work in progress),
              August 2007.




Niemi & Kiss             Expires August 25, 2008               [Page 12]

Internet-Draft               Event Throttle                     Feb 2008


   [RFC3320]  Price, R., Bormann, C., Christoffersson, J., Hannu, H.,
              Liu, Z., and J. Rosenberg, "Signaling Compression
              (SigComp)", RFC 3320, January 2003.

   [RFC3680]  Rosenberg, J., "A Session Initiation Protocol (SIP) Event
              Package for Registrations", RFC 3680, March 2004.

   [RFC3842]  Mahy, R., "A Message Summary and Message Waiting
              Indication Event Package for the Session Initiation
              Protocol (SIP)", RFC 3842, August 2004.

   [RFC3856]  Rosenberg, J., "A Presence Event Package for the Session
              Initiation Protocol (SIP)", RFC 3856, August 2004.

   [RFC3857]  Rosenberg, J., "A Watcher Information Event Template-
              Package for the Session Initiation Protocol (SIP)",
              RFC 3857, August 2004.

   [RFC3943]  Friend, R., "Transport Layer Security (TLS) Protocol
              Compression Using Lempel-Ziv-Stac (LZS)", RFC 3943,
              November 2004.

   [RFC4825]  Rosenberg, J., "The Extensible Markup Language (XML)
              Configuration Access Protocol (XCAP)", RFC 4825, May 2007.


Authors' Addresses

   Aki Niemi
   Nokia
   P.O. Box 407
   NOKIA GROUP, FIN  00045
   Finland

   Phone: +358 50 389 1644
   Email: aki.niemi@nokia.com


   Krisztian Kiss
   Nokia
   313 Fairchild Dr
   Mountain View, CA  94043
   US

   Phone: +1 650 391 5969
   Email: krisztian.kiss@nokia.com





Niemi & Kiss             Expires August 25, 2008               [Page 13]

Internet-Draft               Event Throttle                     Feb 2008


Full Copyright Statement

   Copyright (C) The IETF Trust (2008).

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND
   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.


Acknowledgment

   Funding for the RFC Editor function is provided by the IETF
   Administrative Support Activity (IASA).





Niemi & Kiss             Expires August 25, 2008               [Page 14]


