url-acap  = "acap://" url-server "/" url-enc-entry [url-filter]
               [url-extension]

attribute-dacl  = "dataset.acl" *("." name-component)

attribute-dset  = dataset-std 1*("." name-component)
                     ;; MUST be defined in a dataset class specification

attribute-name  = attribute-std / attr-site / attr-user / vendor-name

attribute-std   = "entry" / "subdataset" / "modtime" /
                     "dataset.inherit" / attribute-dacl / attribute-dset

attr-site       = "site" 1*("." name-component)

attr-user       = "user." name-component 1*("." name-component)

byowner         = "/byowner/" owner "/"
                     [dataset-class "/" dataset-sub]

dataset-class   = dataset-std / vendor-name

dataset-normal  = "/" [dataset-class "/"
                     (owner-prefix / dataset-tail)]

dataset-name    = byowner / dataset-normal
dataset-std     = name-component
                     ;; MUST be registered with IANA and the spec MUST
                     ;; be published as a standards track or
                     ;; IESG-approved experimental RFC

dataset-sub     = *(dname-component "/")
                     ;; The rules for this portion of the namespace may
                     ;; be further restricted by the dataset class
                     ;; specification.

dataset-tail    = owner "/" dataset-sub

dname-component = 1*UTF8-CHAR
                     ;; MUST NOT begin with "." or contain "/"

name-component  = 1*UTF8-CHAR
                     ;; MUST NOT contain ".", "/", "%", or "*"

owner           = "site" / owner-host / owner-group /
                     owner-user / "~"

owner-group     = "group/" dname-component

owner-host      = "host/" dname-component

owner-prefix    = "group/" / "host/" / "user/"

owner-user      = "user/" dname-component

vendor-name     = vendor-token *("." name-component)

vendor-token    = "vendor." name-component
                     ;; MUST be registered with IANA

ATOM-CHAR          = "!" / %x23-27 / %x2A-5B / %x5D-7A / %x7C-7E
                        ;; Any CHAR except ATOM-SPECIALS

ATOM-SPECIALS      = "(" / ")" / "{" / SP / CTL / QUOTED-SPECIALS

CHAR               = %x01-7F

DIGIT-NZ           = %x31-39
                        ; non-zero digits ("1" - "9")

QUOTED-CHAR        = SAFE-UTF8-CHAR / "\" QUOTED-SPECIALS

QUOTED-SPECIALS    = <"> / "\"

SAFE-CHAR          = %x01-09 / %x0B-0C / %x0E-21 /
                        %x23-5B / %x5D-7F
                        ;; any TEXT-CHAR except QUOTED-SPECIALS

SAFE-UTF8-CHAR     = SAFE-CHAR / UTF8-2 / UTF8-3 / UTF8-4 /
                        UTF8-5 / UTF8-6

TAG-CHAR           = %x21 / %x23-27 / %x2C-5B / %x5D-7A / %x7C-7E
                        ;; Any ATOM-CHAR except "*" or "+"
TEXT-CHAR          = %x01-09 / %x0B-0C / %x0E-7F
                        ;; any CHAR except CR and LF

TEXT-UTF8-CHAR     = SAFE-UTF8-CHAR / QUOTED-SPECIALS

UTF8-1             = %x80-BF

UTF8-2             = %xC0-DF UTF8-1

UTF8-3             = %xE0-EF 2UTF8-1

UTF8-4             = %xF0-F7 3UTF8-1

UTF8-5             = %xF8-FB 4UTF8-1

UTF8-6             = %xFC-FD 5UTF8-1

UTF8-CHAR          = TEXT-UTF8-CHAR / CR / LF

acl                = "(" [acl-identrights *(SP acl-identrights)] ")"
                        *(SPACE acl-identrights)] ")"

acl-identifier     = string-utf8
                        ;; MUST NOT contain HTAB

acl-identrights    = string-utf8
                        ;; The identifier followed by a HTAB,
                        ;; followed by the rights.

acl-delobject      = "(" dataset SP attribute [SP entry-name] ")"

acl-object         = "(" dataset [SP attribute [SP entry-name]] ")"

acl-rights         = quoted

atom               = ALPHA *1023ATOM-CHAR

attribute          = string-utf8
                        ;; dot-separated attribute name
                        ;; MUST NOT contain "*" or "%"

attribute-store    = attribute SP (value-nildef /
                        "(" 1*(metadata-write-q SP value-store) ")")
                        ;; MUST NOT include the same metadata twice

auth-type          = <"> auth-type-name <">
auth-type-name     = iana-token
                        ;; as defined in SASL [SASL]

command            = tag SP (command-any / command-auth /
                        command-nonauth) CRLF
                        ;; Modal based on state

command-authent    = "AUTHENTICATE" SP auth-type
                        [SP string] *(CRLF string)

command-any        = "NOOP" / command-lang / "LOGOUT" /
                        command-extend

command-auth       = command-delacl / command-dsince /
                        command-freectx / command-getquota /
                        command-lrights / command-myrights /
                        command-search / command-setacl /
                        command-store
                        ;; only valid in authenticated state

command-delacl     = "DELETEACL" SP acl-delobject [SP acl-identifier]

command-dsince     = "DELETEDSINCE" SP dataset SP time

command-extend     = extend-token [SP extension-data]

command-freectx    = "FREECONTEXT" SP context

command-getquota   = "GETQUOTA" SP dataset

command-lang       = "LANG" *(SP lang-tag)

command-lrights    = "LISTRIGHTS" SP acl-object

command-myrights   = "MYRIGHTS" SP acl-object

command-nonauth    = command-authent
                        ;; only valid in non-authenticated state

command-search     = "SEARCH" SP (dataset / context)
                        *(SP search-modifier) SP search-criteria
                        ;; MUST NOT include same search-modifier twice

command-setacl     = "SETACL" SP acl-object SP acl-identifier
                        SP acl-rights

command-store      = "STORE" SP store-entry-list
comparator         = <"> comparator-name <">

comparator-name    = ["+" / "-"] iana-token

context            = string-utf8
                        ;; MUST NOT begin with slash ("/")

dataset            = string-utf8
                        ;; slash-separated dataset name
                        ;; begins with slash

entry              = entry-name / entry-path

entry-name         = string-utf8
                        ;; entry name MUST NOT contain slash
                        ;; MUST NOT begin with "."

entry-path         = string-utf8
                        ;; slash-separated path to entry
                        ;; begins with slash

entry-relative     = string-utf8
                        ;; potentially relative path to entry

extend-token       = atom
                        ;; MUST be defined by a standards track or
                        ;; IESG approved experimental protocol extension

extension-data     = extension-item *(SP extension-item)

extension-item     = extend-token / string / number /
                        "(" [extension-data] ")"

iana-token         = atom
                        ;; MUST be registered with IANA

initial-greeting   = "*" SP "ACAP" *(SP "(" init-capability ")") CRLF

init-capability    = init-cap-context / init-cap-extend /
                        init-cap-implem / init-cap-sasl

init-cap-context   = "CONTEXTLIMIT" SP string

init-cap-extend    = iana-token [SP string-list]

init-cap-implem    = "IMPLEMENTATION" SP string

init-cap-sasl      = "SASL" SP string-list
lang-tag           = <"> Language-Tag <">
                        ;; Language-Tag rule is defined in [LANG-TAGS]

literal            = "{" number [ "+" ] "}" CRLF *OCTET
                        ;; The number represents the number of octets
                        ;; MUST be literal-utf8 except for values

literal-utf8       = "{" number [ "+" ] "}" CRLF *UTF8-CHAR
                        ;; The number represents the number of octets
                        ;; not the number of characters

metadata           = attribute [ "(" metadata-type-list ")" ]
                        ;; attribute MAY end in "*" as wildcard.

metadata-list      = metadata *(SP metadata)

metadata-type      = "attribute" / "myrights" / "size" /
                        "count" / metadata-write

metadata-type-q    = <"> metadata-type <">

metadata-type-list = metadata-type-q *(SP metadata-type-q)

metadata-write     = "value" / "acl"

metadata-write-q   = <"> metadata-write <">

nil                = "NIL"

number             = *DIGIT
                        ;; A 32-bit unsigned number.
                        ;; (0 <= n < 4,294,967,296)

nz-number          = DIGIT-NZ *DIGIT
                        ;; A 32-bit unsigned non-zero number.
                        ;; (0 < n < 4,294,967,296)

position           = number
                        ;; "0" if context is not enumerated
                        ;; otherwise this is non-zero

quota-limit        = number

quota-usage        = number

quoted             = <"> *QUOTED-CHAR <">
                        ;; limited to 1024 octets between the <">s
response           = response-addto / response-alert / response-bye /
                        response-change / response-cont /
                        response-deleted / response-done /
                        response-entry / response-extend /
                        response-listr / response-lang /
                        response-mtimei / response-mtimeu /
                        response-myright / response-quota /
                        response-refer / response-remove / response-stat

response-addto     = "*" SP "ADDTO" SP context SP entry-name
                        SP position SP return-data-list

response-alert     = "*" SP "ALERT" SP resp-body CRLF
                       ;; Client MUST display alert text to user

response-bye       = "*" SP "BYE" SP resp-body CRLF
                       ;; Server will disconnect condition

response-change    = "*" SP "CHANGE" SP context SP entry-name
                        SP position SP position SP return-data-list

response-cont      = "+" SP string

response-deleted   = tag SP "DELETED" SP entry-name

response-done      = tag SP resp-cond-state CRLF

response-entry     = tag SP "ENTRY" SP entry SP return-data-list

response-extend    = (tag / "*") SP extend-token [SP extension-data]

response-lang      = "*" SP "LANG" SP lang-tag 1*(SP comparator)

response-listr     = tag SP "LISTRIGHTS" SP acl-rights
                        *(SP acl-rights)

response-mtimei    = tag SP "MODTIME" SP time

response-mtimeu    = "*" SP "MODTIME" SP context SP time

response-myright   = tag SP "MYRIGHTS" SP acl-rights

response-quota     = "*" SP "QUOTA" SP dataset SP quota-limit
                        SP quota-usage [SP extension-data]

response-refer     = tag SP "REFER" SP dataset
                        1*(SP <"> url-relative <">)
response-remove    = "*" SP "REMOVEFROM" SP context SP
                        entry-name SP position

response-stat      = "*" SP resp-cond-state CRLF

resp-body          = ["(" resp-code ")" SP] quoted

resp-code          = "AUTH-TOO-WEAK" / "ENCRYPT-NEEDED" /
                        resp-code-inval / resp-code-mod /
                        resp-code-noexist / resp-code-perm / "QUOTA" /
                        resp-code-refer / resp-code-sasl /
                        resp-code-toomany / "TOOOLD" /
                        "TRANSITION-NEEDED" / "TRYFREECONTEXT" /
                        "TRYLATER" / "WAYTOOMANY" / resp-code-ext

resp-code-ext      = iana-token [SP extension-data]
                        ;; unknown codes MUST be tolerated by the client

resp-code-inval    = "INVALID" 1*(SP entry-path SP attribute)

resp-code-mod      = "MODIFIED" SP entry-path

resp-code-noexist  = "NOEXIST" SP dataset

resp-code-perm     = "PERMISSION" SP acl-object

resp-code-refer    = "REFER" 1*(SP <"> url-relative <">)

resp-code-sasl     = "SASL" SP string

resp-code-toomany  = "TOOMANY" SP nz-number

resp-cond-state    = ("OK" / "NO" / "BAD") SP resp-body
                        ;; Status condition

return-attr-list   = "(" return-metalist *(SP return-metalist) ")"
                        ;; occurs when "*" in RETURN pattern on SEARCH

return-data        = return-metadata / return-metalist /
                        return-attr-list

return-data-list   = return-data *(SP return-data)

return-metalist    = "(" return-metadata *(SP return-metadata) ")"
                        ;; occurs when multiple metadata items requested

return-metadata    = nil / string / value-list / acl
searchkey-equal    = "EQUAL" SP attribute SP comparator SP value-nil

searchkey-comp     = "COMPARE" SP attribute SP comparator SP value

searchkey-prefix   = "PREFIX" SP attribute SP comparator SP value

searchkey-range    = "RANGE" SP nz-number SP nz-number SP time

searchkey-strict   = "COMPARESTRICT" SP attribute SP comparator
                        SP value

searchkey-substr   = "SUBSTRING" SP attribute SP comparator SP value

searchmod-depth    = "DEPTH" SP number

searchmod-hard     = "HARDLIMIT" SP nz-number

searchmod-limit    = "LIMIT" SP number SP number

searchmod-make     = "MAKECONTEXT" [SP "ENUMERATE"]
                        [SP "NOTIFY"] SP context

searchmod-ninh     = "NOINHERIT"

searchmod-return   = "RETURN" SP "(" [metadata-list] ")"

searchmod-sort     = "SORT" SP "(" sort-list ")"

search-criteria    = "ALL" / searchkey-equal / searchkey-comp /
                        searchkey-strict / searchkey-range /
                        searchkey-prefix / searchkey-substr /
                        "NOT" SP search-criteria /
                        "OR" SP search-criteria SP search-criteria /
                        "AND" SP search-criteria SP search-criteria

search-modifier    = searchmod-depth / searchmod-hard /
                        searchmod-limit / searchmod-make /
                        searchmod-ninh / searchmod-return /
                        searchmod-sort

sort-list          = sort-item *(SP sort-item)

sort-item          = attribute SP comparator

store-entry        = "(" entry-path *(SP store-modifier)
                            *(SP attribute-store) ")"
                        ;; MUST NOT include same store-modifier twice
                        ;; MUST NOT include same attribute twice
store-entry-list   = store-entry *(SP store-entry)
                        ;; MUST NOT include same entry twice

store-modifier     = store-mod-unchang / store-mod-nocreate

store-mod-nocreate = "NOCREATE"

store-mod-unchang  = "UNCHANGEDSINCE" SP time

string             = quoted / literal

string-list        = string *(SP string)

string-utf8        = quoted / literal-utf8

tag                = 1*32TAG-CHAR

time               = <"> time-year time-month time-day time-hour
                        time-minute time-second time-subsecond <">
                        ;; Timestamp in UTC

time-day           = 2DIGIT ;; 01-31

time-hour          = 2DIGIT ;; 00-23

time-minute        = 2DIGIT ;; 00-59

time-month         = 2DIGIT ;; 01-12

time-second        = 2DIGIT ;; 00-60

time-subsecond     = *DIGIT

time-year          = 4DIGIT

value              = string

value-list         = "(" [value *(SP value)] ")"

value-nil          = value / nil

value-nildef       = value-nil / "DEFAULT"

value-store        = value-nildef / value-list / acl

url-acap           = "acap://" url-server "/" url-enc-entry
                        [url-filter] [url-extension]
                        ;; url-enc-entry interpreted relative to "/"
url-attr-list      = url-enc-attr *("&" url-enc-attr)

url-auth           = ";AUTH=" ("*" / url-enc-auth)

url-achar          = uchar / "&" / "=" / "~"
                        ;; See RFC 1738 for definition of "uchar"

url-char           = uchar / "=" / "~" / ":" / "@" / "/"
                        ;; See RFC 1738 for definition of "uchar"

url-enc-attr       = 1*url-char
                        ;; encoded version of attribute name

url-enc-auth       = 1*url-achar
                        ;; encoded version of auth-type-name above

url-enc-entry      = 1*url-char
                        ;; encoded version of entry-relative above

url-enc-user       = *url-achar
                        ;; encoded version of login userid

url-extension      = *("?" 1*url-char)

url-filter         = "?" url-attr-list

url-relative       = url-acap / [url-enc-entry] [url-filter]
                        ;; url-enc-entry is relative to base URL

url-server         = [url-enc-user [url-auth] "@"] hostport
                        ;; See RFC 1738 for definition of "hostport"

