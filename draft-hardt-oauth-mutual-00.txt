



Network Working Group                                           D. Hardt
Internet-Draft                                                    Amazon
Intended status: Informational                         November 13, 2017
Expires: May 17, 2018


                       This is an Internet-draft
                      draft-hardt-oauth-mutual-00

Abstract

   There are times when a user has a pair protected resources that would
   like to request access to each other.  While OAuth flows typically
   enable the user to grant a client access to a protected resource,
   granting the inverse access requires an additional flow.  Mutual
   OAuth enables a more seemless experience for the user to grant access
   to a pair of protected resources.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 17, 2018.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of




Hardt                     Expires May 17, 2018                  [Page 1]

Internet-Draft                     I-D                     November 2017


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

1.  Introduction

   In the usual three legged, authorization code grant, OAuth flow
   enables a resource owner (user) to enable a client (party A) to be
   granted authorization to access a protected resource (party B).  If
   party A also has a protected resource that the user would like to let
   party B access, then a complete OAuth flow, but in the reverse
   direction, must be performed.

   Mutual OAuth enables party A to obtain constent from the user to
   grant access to a protected resource at party A, and to short circuit
   the OAuth flow by passing an authorization code to party B using the
   acces token party A obtained from party B to provide party B the
   context of the user.  This simplifies the user experience for each
   party to obtain acces tokens from the other.

1.1.  Terminology

   In this document, the key words "MUST", "MUST NOT", "REQUIRED",
   "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
   and "OPTIONAL" are to be interpreted as described in BCP 14, RFC 2119
   [RFC2119].

2.  Mutual Authorization Flow

   The mutual authorization flow starts after the client (party A) has
   obtained an access token from the authorization server (party B) per
   [RFC6749] 4.1 Authorization Code Grant.

   After party A obtains consent from the user to grant access to
   protected resources at party A, party A generates an authorization
   code representing the access granted to party B for that user.  Party
   A then makes a request to party B's token endpoint by sending the
   following parameters using the "application/x-www-form-urlencoded"
   format per [RFC6749] Appendix B with a character encoding of UTF-8 in
   the HTTP request entity-body:

   grant_type REQUIRED.  Value MUST be set to
   "mutual_authorization_code".

   code REQUIRED.  The authorization code generated by party A.

   client_id REQUIRED, party A'a client ID.





Hardt                     Expires May 17, 2018                  [Page 2]

Internet-Draft                     I-D                     November 2017


   and pass the access token obtained from Party B in the HTTP
   authorization header.

   For example, the client makes the following HTTP request using TLS
   (with extra line breaks for display purposes only):

    POST /token HTTP/1.1
    Host: server.example.com
    Authorization: Bearer ej4hsyfishwssjdusisdhkjsdksusdhjkjsdjk
    Content-Type: application/x-www-form-urlencoded

    grant_type=mutual_authorization_code&code=hasdyubasdjahsbdkjbasd

   Party B MUST then verify the access token was granted to the client
   identified by the client_id.

   Party B then plays the role of the client to make an access token
   request per [RFC6749] 4.1.3.

3.  IANA Considerations

   TBD.

4.  Acknowledgements

   TBD.

5.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/info/rfc6749>.

   [RFC6750]  Jones, M. and D. Hardt, "The OAuth 2.0 Authorization
              Framework: Bearer Token Usage", RFC 6750,
              DOI 10.17487/RFC6750, October 2012,
              <https://www.rfc-editor.org/info/rfc6750>.

Appendix A.  Document History







Hardt                     Expires May 17, 2018                  [Page 3]

Internet-Draft                     I-D                     November 2017


A.1.  draft-hardt-distributed-oauth-00

   o  Initial version.

Author's Address

   Dick Hardt
   Amazon

   Email: dick.hardt@gmail.com









































Hardt                     Expires May 17, 2018                  [Page 4]
