AAA_ERR_NOT_FOUND =     -2,
AAA_ERR_FAILURE =       -1,
AAA_ERR_SUCCESS =        0,
AAA_AVP_FLAG_NONE =            0,
AAA_AVP_FLAG_MANDATORY =            0x1,
AAA_AVP_FLAG_RESERVED =        0x2,
AAA_AVP_FLAG_VENDOR_SPECIFIC =      0x4,
AAA_AVP_FLAG_END_TO_END_ENCRYPT =   0x10,
AAA_AVP_FLAG_UNKNOWN =         0x10000,
AAA_AVP_FLAG_ENCRYPT =         0x40000,
AAA_EVENT_TYPE_MESSAGE = 0,
SESSION_EVENT_AUTH_REQUEST = 0,
DIAMETER_MULTI_ROUND_AUTH          = 1001
DIAMETER_SUCCESS                   = 2001
DIAMETER_LIMITED_SUCCESS           = 2002
DIAMETER_COMMAND_UNSUPPORTED       = 3001
DIAMETER_UNABLE_TO_DELIVER         = 3002
DIAMETER_REALM_NOT_SERVED          = 3003
DIAMETER_TOO_BUSY                  = 3004
DIAMETER_LOOP_DETECTED             = 3005
DIAMETER_REDIRECT_INDICATION       = 3006
DIAMETER_APPLICATION_UNSUPPORTED   = 3007
DIAMETER_INVALID_HDR_BITS          = 3008
DIAMETER_INVALID_AVP_BITS          = 3009
DIAMETER_UNKNOWN_PEER              = 3010
DIAMETER_AUTHENTICATION_REJECTED   = 4001
DIAMETER_OUT_OF_SPACE              = 4002
DIAMETER_AVP_UNSUPPORTED           = 5001
DIAMETER_UNKNOWN_SESSION_ID        = 5002
DIAMETER_AUTHORIZATION_REJECTED    = 5003
DIAMETER_INVALID_AVP_VALUE         = 5004
DIAMETER_MISSING_AVP               = 5005
DIAMETER_RESOURCES_EXCEEDED        = 5006
DIAMETER_CONTRADICTING_AVPS        = 5007
DIAMETER_AVP_NOT_ALLOWED           = 5008
DIAMETER_AVP_OCCURS_TOO_MANY_TIMES = 5009
DIAMETER_UNSUPPORTED_TRANSFORM     = 5010
DIAMETER_NO_COMMON_APPLICATION     = 5011
DIAMETER_UNSUPPORTED_VERSION       = 5012
DIAMETER_UNABLE_TO_COMPLY          = 5013
DIAMETER_INVALID_BIT_IN_HEADER     = 5014
DIAMETER_INVALID_AVP_LENGTH        = 5015
DIAMETER_INVALID_MESSAGE_LENGTH    = 5016
DIAMETER_INVALID_AVP_BIT_COMBO     = 5017
AAA_ACCT_EVENT = 1,
AAA_ACCT_START = 2,
AAA_ACCT_INTERIM = 3,
AAA_ACCT_STOP = 4
AAA_SEC_NOT_DEFINED = -2,
AAA_SEC_NOT_CONNECTED = -1,
AAA_SEC_NO_SECURITY = 0,
AAA_SEC_CMS_SECURITY = 1,
AAA_SEC_CMS_PROXIED = 2
TRANSPORT_PROTO_TCP = 0,
AAA_PROTO_DIAMETER = 0,
AAA_SCHEME_AAA = 0,
data = buf; size = s; this->offset = offset;
NORMAL  = 0,
BUG = 1,
MISSING_CONTAINER = 1,
type = NORMAL;
code = DIAMETER_SUCCESS;
PARSE_LOOSE = 0,
PARSE_STRICT = 1,
aBuffer = AAAMessageBuffer(rbuf, HEADER_SIZE);
aBuffer = AAAMessageBuffer(rbuf+HEADER_SIZE, msg.hdr.length - HEADER_SIZE);
headerBuffer = AAAMessageBuffer(buf, HEADER_SIZE);

e = em.acquire(AAA_AVP_INTEGER32_TYPE);
e = em.acquire(AAA_AVP_DIAMID_TYPE);
payloadBuffer =
       AAAMessageBuffer(buf + HEADER_SIZE, size - HEADER_SIZE);
aBuffer = AAAMessageBuffer(buf, HEADER_SIZE);
aBuffer = AAAMessageBuffer(buf+HEADER_SIZE, msg.hdr.length - HEADER_SIZE);
e = em.acquire(AAA_AVP_DIAMID_TYPE);
e = em.acquire(AAA_AVP_GROUPED_TYPE);
e = em.acquire(AAA_AVP_DIAMID_TYPE);
e = em.acquire(AAA_AVP_DIAMID_TYPE);
aBuffer = AAAMessageBuffer(buf+HEADER_SIZE, size - HEADER_SIZE);
aBuffer = AAAMessageBuffer(buf, HEADER_SIZE);
