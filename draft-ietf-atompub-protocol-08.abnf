appCommonAttributes =
      attribute xml:base { atomUri }?,
      attribute xml:lang { atomLanguageTag }?,
      undefinedAttribute*


title="My Blog Entries"
href="http://example.org/reilly/main" >
title="Pictures"
href="http://example.org/reilly/pic" >
href="http://example.org/reilly/list" >
start = appService


appService =
      element app:service {
         appCommonAttributes,
         ( appWorkspace+
           & extensionElement* )
      }


appWorkspace =
      element app:workspace {
         appCommonAttributes,
         attribute title { text },
         ( appCollection+
           & extensionElement* )
      }


href="http://example.org/myblog/entries">
href="http://example.org/myblog/fotes">
appCollection =
      element app:collection {
         appCommonAttributes,
         attribute title { text },
         attribute href { text },
         ( appMemberType
           & appListTemplate
           & extensionElement* )
      }


appMemberType =
      element app:member-type {
            appCommonAttributes,
            ( appTypeValue )
      }

appTypeValue = "entry" | "media"


Title = "Title" ":" [TEXT]

href="http://example.org/entries/go" />
href="http://example.org/entries/2" />
href="http://example.org/entries/10" />
href="http://example.org/entries/go" />
href="http://example.org/entries/go" />
href="http://example.org/entries/3" />
href="http://example.org/entries/10" />
pubControl =
       element pub:control {
       atomCommonAttributes,
       pubDraft?
       & extensionElement
pubDraft =
      element pub:draft { "yes" | "no" }

href="http://example.net/binary/edit/b/129.png"/>
src="http://example.net/binary/readonly/129.png"/>
src="http://example.net/binary/readonly/129.png"
alt="A picture of the beach"
start = appService

appCommonAttributes =
      attribute xml:base { atomUri }?,
      attribute xml:lang { atomLanguageTag }?,
      undefinedAttribute*

undefinedAttribute =
     attribute * - (xml:base | xml:lang | local:*) { text }

atomUri = text

atomLanguageTag = xsd:string {
pattern = "[A-Za-z]{1,8}(-[A-Za-z0-9]{1,8})*"
appService =
      element app:service {
         appCommonAttributes,
         ( appWorkspace+
           & extensionElement* )
      }

appWorkspace =
      element app:workspace {
         appCommonAttributes,
         attribute title { text },
         ( appCollection+
           & extensionElement* )
      }

appCollection =
      element app:collection {
         appCommonAttributes,
         attribute title { text },
         attribute href { atomUri  },
         ( appMemberType
           & extensionElement* )
      }


appMemberType =
      element app:member-type {
            appCommonAttributes,
            ( appTypeValue )
      }

appTypeValue = "entry" | "media"


simpleExtensionElement =
      element * - app:* {
         text
      }

structuredExtensionElement =
      element * - app:* {
         (attribute * { text }+,
            (text|anyElement)*)
       | (attribute * { text }*,
          (text?, anyElement+, (text|anyElement)*))
      }

extensionElement =
      simpleExtensionElement | structuredExtensionElement



anyElement =
      element * {
         (attribute * { text }
          | text
          | anyElement)*
      }

