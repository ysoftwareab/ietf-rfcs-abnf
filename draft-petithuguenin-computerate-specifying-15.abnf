S_CRLF == S_CRLF = True

names = MkPdu `{{MkInternetHeader}} [
        MkField "Version",
        MkField "IHL",
        MKField "Type of Service",
        MkField "Total Length",
        MkField "Identification",
        MkField "Flags",
        MkField "Fragment Offset",
        MkField "Time to Live",
        MkField "Protocol"]

test = Init
             |> SendPacket ((1, "COL"), 1)
             |> TransmitPacket ((1, "COL"), True)
             |> ReceivePacket ((1, "COL"), "", 1)
             |> TransmitAck 1
             |> ReceiveAck (1, 1)

sdp = rule "session-description" $
        do versionField
           originField
           sessionNameField
           (optional informationField)
           (optional uriField)
           (repeat many emailField)
           (repeat many phoneField)
           (optional connectionField)
           (repeat many bandwidthField)
           (repeat some timeDescription)
           (optional keyField)
           (repeat many attributeField)
           (repeat many mediaDescription)

ALPHA =  %x41-5A / %x61-7A

bad = bad "a"

good = "a" good

sexp  =  list / token

list  =  "(" sexp ")"

token =  1*DIGIT ":" *OCTET

internetHeader = `[
n = pad 32 options => padding = bitVector =>
n = pad 32 options => padding = bitVector =>
dscp = `[
apple = MkDenominate 1 1

reserved = bitVector {m = 1} => (df : BitVector 1) ->
version = [O, I, O, O] => (ihl : (Unsigned 4, Info)) ->
n = pad 32 options => padding = bitVector {m = n} =>
isSocratesMortal = \h => \f => f h

