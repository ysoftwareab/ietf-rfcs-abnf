IETF MANET Working Group                                      Josh Broch
INTERNET-DRAFT                                          David B. Johnson
                                                          David A. Maltz
                                              Carnegie Mellon University
                                                         22 October 1999


     The Dynamic Source Routing Protocol for Mobile Ad Hoc Networks

                     <draft-ietf-manet-dsr-03.txt>


Status of This Memo

   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC 2026 except that the right to
   produce derivative works is not granted.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note
   that other groups may also distribute working documents as
   Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at
   any time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.


Abstract

   Dynamic Source Routing (DSR) is a routing protocol designed
   specifically for use in mobile ad hoc networks.  The protocol allows
   nodes to dynamically discover a source route across multiple network
   hops to any destination in the ad hoc network.  When using source
   routing, each packet to be routed carries in its header the complete,
   ordered list of nodes through which the packet must pass.  A key
   advantage of source routing is that intermediate hops do not need
   to maintain routing information in order to route the packets they
   receive, since the packets themselves already contain all of the
   necessary routing information.  This, coupled with the dynamic,
   on-demand nature of DSR's Route Discovery, completely eliminates the
   need for periodic router advertisements and link status packets,
   significantly reducing the overhead of DSR, especially during periods
   when the network topology is stable and these packets serve only as
   keep-alives.




Broch, Johnson, and Maltz         Expires 22 April 2000         [Page i]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999




                                Contents



Status of This Memo                                                    i

Abstract                                                               i

 1. Introduction                                                       1

 2. Changes                                                            1

 3. Assumptions                                                        1

 4. Terminology                                                        2
     4.1. General Terms . . . . . . . . . . . . . . . . . . . . . .    2
     4.2. Specification Language  . . . . . . . . . . . . . . . . .    4

 5. Protocol Overview                                                  5
     5.1. Route Discovery and Route Maintenance . . . . . . . . . .    5
     5.2. Packet Forwarding . . . . . . . . . . . . . . . . . . . .    6
     5.3. Multicast Routing . . . . . . . . . . . . . . . . . . . .    7

 6. Conceptual Data Structures                                         7
     6.1. Route Cache . . . . . . . . . . . . . . . . . . . . . . .    7
     6.2. Route Request Table . . . . . . . . . . . . . . . . . . .    9
     6.3. Send Buffer . . . . . . . . . . . . . . . . . . . . . . .    9
     6.4. Retransmission Buffer . . . . . . . . . . . . . . . . . .    9

 7. Packet Formats                                                    11
     7.1. Destination Options Headers . . . . . . . . . . . . . . .   11
           7.1.1. DSR Route Request Option  . . . . . . . . . . . .   12
     7.2. Hop-by-Hop Options Headers  . . . . . . . . . . . . . . .   14
           7.2.1. DSR Route Reply Option  . . . . . . . . . . . . .   15
           7.2.2. DSR Route Error Option  . . . . . . . . . . . . .   17
           7.2.3. DSR Acknowledgment Option . . . . . . . . . . . .   18
     7.3. DSR Routing Header  . . . . . . . . . . . . . . . . . . .   20

 8. Detailed Operation                                                23
     8.1. Originating a Data Packet . . . . . . . . . . . . . . . .   23
     8.2. Originating a Packet with a DSR Routing Header  . . . . .   23
     8.3. Processing a Routing Header . . . . . . . . . . . . . . .   24
     8.4. Route Discovery . . . . . . . . . . . . . . . . . . . . .   25
           8.4.1. Originating a Route Request . . . . . . . . . . .   25
           8.4.2. Processing a Route Request Option . . . . . . . .   26
           8.4.3. Generating Route Replies using the Route Cache  .   27
           8.4.4. Originating a Route Reply . . . . . . . . . . . .   28
           8.4.5. Processing a Route Reply Option . . . . . . . . .   29



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page ii]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


     8.5. Route Maintenance . . . . . . . . . . . . . . . . . . . .   30
           8.5.1. Using Network-Layer Acknowledgments . . . . . . .   30
           8.5.2. Using Link Layer Acknowledgments  . . . . . . . .   32
           8.5.3. Originating a Route Error . . . . . . . . . . . .   32
           8.5.4. Processing a Route Error Option . . . . . . . . .   33
           8.5.5. Salvaging a Packet  . . . . . . . . . . . . . . .   33

 9. Optimizations                                                     35
     9.1. Leveraging the Route Cache  . . . . . . . . . . . . . . .   35
           9.1.1. Promiscuous Learning of Source Routes . . . . . .   35
     9.2. Preventing Route Reply Storms . . . . . . . . . . . . . .   36
     9.3. Piggybacking on Route Discoveries . . . . . . . . . . . .   37
     9.4. Discovering Shorter Routes  . . . . . . . . . . . . . . .   37
     9.5. Rate Limiting the Route Discovery Process . . . . . . . .   38
     9.6. Improved Handling of Route Errors . . . . . . . . . . . .   39
     9.7. Increasing Scalability  . . . . . . . . . . . . . . . . .   39

10. Path-State and Flow-State Mechanisms                              40
    10.1. Overview  . . . . . . . . . . . . . . . . . . . . . . . .   40
    10.2. Path-State and Flow-State Identifiers . . . . . . . . . .   41
    10.3. Path-State Creation, Use, and Maintenance . . . . . . . .   42
          10.3.1. Creating Path-State for Routing . . . . . . . . .   42
          10.3.2. Monitoring Characteristics of the Path  . . . . .   43
          10.3.3. Candidate Metrics . . . . . . . . . . . . . . . .   45
    10.4. Flow-State Creation, Use, and Maintenance . . . . . . . .   46
          10.4.1. Requesting Promises along Existing Paths  . . . .   46
          10.4.2. Requesting Promises as Part of Route Discovery  .   48
          10.4.3. Providing Notifications of Changing Path Metrics    49
    10.5. Expiration of State from Intermediate Nodes . . . . . . .   50
    10.6. Packet Formats  . . . . . . . . . . . . . . . . . . . . .   51
          10.6.1. Identifier Option . . . . . . . . . . . . . . . .   51
          10.6.2. Path-Metrics Option . . . . . . . . . . . . . . .   52
          10.6.3. Flow Request Option . . . . . . . . . . . . . . .   54
          10.6.4. Encoding Path-Metrics . . . . . . . . . . . . . .   55

11. Constants                                                         58

12. IANA Considerations                                               59

13. Security Considerations                                           60

Location of DSR Functions in the ISO Model                            61

Implementation Status                                                 62

Acknowledgments                                                       63

References                                                            64

Chair's Address                                                       66



Broch, Johnson, and Maltz        Expires 22 April 2000        [Page iii]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


Authors' Addresses                                                    67




















































Broch, Johnson, and Maltz        Expires 22 April 2000         [Page iv]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


1. Introduction

   This document describes Dynamic Source Routing (DSR) [8, 9], a
   protocol developed by the Monarch Project [10, 19] at Carnegie Mellon
   University for routing packets in a mobile ad hoc network [5].

   Source routing is a routing technique in which the sender of a packet
   determines the complete sequence of nodes through which to forward
   the packet; the sender explicitly lists this route in the packet's
   header, identifying each forwarding "hop" by the address of the next
   node to which to transmit the packet on its way to the destination
   node.

   DSR offers a number of potential advantages over other routing
   protocols for mobile ad hoc networks.  First, DSR uses no periodic
   routing messages of any kind (e.g., no router advertisements and no
   link-level neighbor status messages), thereby significantly reducing
   network bandwidth overhead, conserving battery power, reducing the
   probability of packet collision, and avoiding the propagation of
   potentially large routing updates throughout the ad hoc network.  Our
   Dynamic Source Routing protocol is able to adapt quickly to changes
   such as node movement, yet requires no routing protocol overhead
   during periods in which no such changes occur.

   In addition, DSR has been designed to compute correct routes in
   the presence of asymmetric (uni-directional) links.  In wireless
   networks, links may at times operate asymmetrically due to sources
   of interference, differing radio or antenna capabilities, or the
   intentional use of asymmetric communication technology such as
   satellites.  Due to the existence of asymmetric links, traditional
   link-state or distance vector protocols may compute routes that do
   not work.  DSR, however, will always find a correct route even in the
   presence of asymmetric links.


2. Changes

   Changes from version 02 to version 03 (10/1999)

    -  Added description of path-state and flow-state maintenance
       (Section 10).  These extensions remove the need for every
       data packet to carry a source route, thereby decreasing
       the byte-overhead of DSR. They also provide a framework for
       supporting QoS inside DSR networks.


3. Assumptions

   We assume that all nodes wishing to communicate with other nodes
   within the ad hoc network are willing to participate fully in the



Broch, Johnson, and Maltz         Expires 22 April 2000         [Page 1]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   protocols of the network.  In particular, each node participating in
   the network should also be willing to forward packets for other nodes
   in the network.

   We refer to the minimum number of hops necessary for a packet to
   reach from any node located at one extreme edge of the network to
   another node located at the opposite extreme, as the diameter of the
   network.  We assume that the diameter of an ad hoc network will be
   small (e.g., perhaps 5 or 10 hops), but may often be greater than 1.

   Packets may be lost or corrupted in transmission on the wireless
   network.  A node receiving a corrupted packet can detect the error
   and discard the packet.

   We assume that nodes can enable promiscuous receive mode on their
   wireless network interface hardware, causing the hardware to
   deliver every received packet to the network driver software without
   filtering based on link-layer destination address.  Although we do
   not require this facility, it is for example common in current LAN
   hardware for broadcast media including wireless, and some of our
   optimizations take advantage of its availability.  Use of promiscuous
   mode does increase the software overhead on the CPU, but we believe
   that wireless network speeds are more the inherent limiting factor
   to performance in current and future systems.  We also believe
   that portions of the protocol are also suitable for implementation
   directly within a programmable network interface unit to avoid this
   overhead on the CPU.


4. Terminology

4.1. General Terms

      link

         A communication facility or medium over which nodes can
         communicate at the link layer, such as an Ethernet (simple or
         bridged).  A link is the layer immediately below IP.

      interface

         A node's attachment to a link.

      prefix

         A bit string that consists of some number of initial bits of an
         address.






Broch, Johnson, and Maltz         Expires 22 April 2000         [Page 2]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


      interface index

         An 7-bit quantity which uniquely identifies an interface among
         a given node's interfaces.  Each node can assign interface
         indices to its interfaces using any scheme it wishes.

         The index IF_INDEX_MA is reserved for use by Mobile IP [14]
         mobility agents (home or foreign agents) to indicate that they
         believe they can reach a destination via a connected internet
         infrastructure.  The index IF_INDEX_ROUTER is reserved for
         use by routers not acting as Mobile IP mobility agents to
         indicate that they believe they can reach the destination via a
         connected internet infrastructure.

         The distinction between the index for mobility agents and
         the index for routers, allows mobility agents to advertise
         their existence ``for free''.  A node that processes a routing
         header listing the interface index IF_INDEX_MA, can then send
         a unicast Agent Solicitation to the corresponding address in
         the routing header to obtain complete information about the
         mobility services being provided.

      link-layer address

         A link-layer identifier for an interface, such as IEEE 802
         addresses on Ethernet links.

      packet

         An IP header plus payload.

      piggybacking

         Including two or more conceptually different types of data in
         the same packet so that all data elements move through the
         network together.

      home address

         An IP address that is assigned for an extended period of time
         to a mobile node.  It remains unchanged regardless of where
         the node is attached to the Internet [14].  If a node has more
         than one home address, it SHOULD select and use a single home
         address when participating in the ad hoc network.

      source route

         A source route from a node S to some node D is an ordered list
         of home addresses and interface indexes that contains all the
         information that would be needed to forward a packet through



Broch, Johnson, and Maltz         Expires 22 April 2000         [Page 3]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


         the ad hoc network.  For each node that will transmit the
         packet, the source route provides the index of the interface
         over which the packet should be transmitted, and the address of
         the node which is intended to receive the packet.

         DSR Routing Headers as described in Section 7.3 use a more
         compact encoding of the source route and do not explicitly list
         address S in the Routing Header`, since it is carried as the IP
         Source Address of the packet.

         A source route is described as ``broken'' when the specific
         path it describes through the network is not actually viable.

      Route Discovery

         The method in DSR by which a node S dynamically obtains a
         source route to some node D that will be used by S to route
         packets through the network to D.  Performing a Route Discovery
         involves sending one or more Route Request packets.

      Route Maintenance

         The process in DSR of monitoring the status of a source route
         while in use, so that any link-failures along the source route
         can be detected and the broken link removed from use.


4.2. Specification Language

   The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [3].





















Broch, Johnson, and Maltz         Expires 22 April 2000         [Page 4]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


5. Protocol Overview

5.1. Route Discovery and Route Maintenance

   A source routing protocol must solve two challenges, which DSR terms
   Route Discovery and Route Maintenance.  Route Discovery is the
   mechanism whereby a node S wishing to send a packet to a destination
   D obtains a source route to D.

   Route Maintenance is the mechanism whereby S is able to detect, while
   using a source route to D, if the network topology has changed such
   that it can no longer use its route to D because a link along the
   route no longer works.  When Route Maintenance indicates a source
   route is broken, S can attempt to use any other route it happens to
   know to D, or can invoke Route Discovery again to find a new route.

   To perform Route Discovery, the source node S link-layer broadcasts
   a Route Request packet.  Here, node S is termed the initiator of the
   Route Discovery, and the node to which S is attempting to discover a
   source route, say D, is termed the target of the Discovery.

   Each node that hears the Route Request packet forwards a copy of the
   Request, if appropriate, by adding its own address to a source route
   being recorded in the Request packet and then rebroadcasting the
   Route Request.

   The forwarding of Route Requests is constructed so that copies of the
   Request propagate hop-by-hop outward from the node initiating the
   Route Discovery, until either the target of the Request is found or
   until another node is found that can supply a route to the target.

   The basic mechanism of forwarding Route Requests forwards the Request
   if the node (1) is not the target of the Request, (2) is not already
   listed in the recorded source route in this copy of the Request, and
   (3) has not recently seen another Route Request packet belonging to
   this same Route Discovery.  A node can determine if it has recently
   seen such a Route Request, since each Route Request packet contains
   a unique identifier for this Route Discovery, generated by the
   initiator of the Discovery.  Each node maintains an LRU cache of the
   unique identifier from each recently received Route Request.  By not
   propagating any copies of a Request after the first, the overhead of
   forwarding additional copies that reach this node along different
   paths is avoided.

   In addition, the Time-to-Live field in the IP header of the packet
   carrying the Route Request MAY be used to limit the scope over which
   the Request will propagate, using the normal behavior of Time-to-Live
   defined by IP [17, 2].  Additional optimizations on the handling and
   forwarding of Route Requests are also used to further reduce the
   Route Discovery overhead.



Broch, Johnson, and Maltz         Expires 22 April 2000         [Page 5]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   When the target of the Request (e.g., node D) receives the Route
   Request, the recorded source route in the Request identifies the
   sequence of hops over which this copy of the Request reached D.
   Node D copies this recorded source route into a Route Reply packet
   and sends this Route Reply back to the initiator of the Route Request
   (e.g., node S).

   All source routes learned by a node are kept in a Route Cache, which
   is used to further reduce the cost of Route Discovery.  When a node
   wishes to send a packet, it examines its own Route Cache and performs
   Route Discovery only if no suitable source route is found in its
   Cache.

   Further, when some intermediate node B receives a Route Request from
   S for some target node D, B not equal D, B searches its own Route
   Cache for a route to D.  If B finds such a route, it might not have
   to propagate the Route Request, but instead return a Route Reply to
   node S based on the concatenation of the recorded source route from
   S to B in the Route Request and the cached route from B to D. The
   details of replying from a Route Cache in this way are discussed in
   Section 9.1.

   As a node overhears routes being used by others, either on data
   packets or on control packets used by Route Discovery or Route
   Maintenance, the node MAY insert those routes into its Route Cache,
   leveraging the Route Discovery operations of the other nodes in
   the network.  Such route information MAY be learned either by
   promiscuously snooping on packets or when forwarding packets.


5.2. Packet Forwarding

   To represent a source route within a packet's header, DSR uses a
   Routing Header similar to the Routing Header format specified for
   IPv6, adapted to the needs of DSR and to the use of DSR in IPv4 (or
   in IPv6 in the future).  The DSR Routing Header uses a unique Routing
   Type field value to distinguish it from the existing Type 0 Routing
   Header defined within IPv6 [6].

   To forward a packet, a receiving node N simply processes the Routing
   Header as specified in Section 8.3 and transmits the packet to
   the next hop.  If a forwarding error occurs along the link to the
   next hop in the route, this node N sends a Route Error back to the
   originator S of this packet informing S that this link is "broken".
   If node N's Route Cache contains a different route to the destination
   of the original packet, then the packet is salvaged using the new
   source route (Section 8.5.5).  Otherwise, the packet is dropped.






Broch, Johnson, and Maltz         Expires 22 April 2000         [Page 6]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   Each node overhearing or forwarding a Route Error packet also
   removes from its Route Cache the link indicated to be broken, thereby
   cleaning the stale cache data from the network.


5.3. Multicast Routing

   At this time DSR does not support true multicasting.  However, it
   does support the controlled flooding of a data packet to all nodes in
   the network that are within some number of hops of the originator.
   While this mechanism does not support pruning of the broadcast
   tree to conserve network resources, it can be used to distribute
   information to nodes in the network.

   When an application on a DSR node sends a packet to a multicast
   address, DSR piggybacks the data from the packet inside a Route
   Request packet targeted at the multicast address.  The normal Route
   Request distribution scheme described in Sections 5.1 and 8.4.2
   will result in this packet being efficiently distributed to all
   nodes in the network within the specified TTL of the originator.
   The receiving nodes can then do destination address filtering on
   the packet, discarding it if they do not wish to receive multicast
   packets destined to this multicast address.


6. Conceptual Data Structures

   In order to participate in the Dynamic Source Routing Protocol, a
   node needs four conceptual data structures:  a Route Cache, a Route
   Request Table, a Send Buffer, and a Retransmission Buffer.  These
   data structures MAY be implemented in any manner consistent with the
   external behavior described in this document.


6.1. Route Cache

   All routing information needed by a node participating in an ad hoc
   network using DSR is stored in a Route Cache.  Each node in the
   network maintains its own Route Cache.  The node adds information
   to the Cache as it learns of new links between nodes in the ad hoc
   network, for example through packets carrying either a Route Reply or
   a Routing Header.  Likewise, the node removes information from the
   cache as it learns existing links in the ad hoc network have broken,
   for example through packets carrying a Route Error or through the
   link-layer retransmission mechanism reporting a failure in forwarding
   a packet to its next-hop destination.  The Route Cache is indexed
   logically by destination node address, and supports the following
   operations:





Broch, Johnson, and Maltz         Expires 22 April 2000         [Page 7]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


      void Insert(Route RT)

         Inserts information extracted from source route RT into the
         Route Cache.

      Route Get(Node DEST)

         Returns a source route from this node to DEST (if one is
         known).

      void Delete(Node FROM, Interface INDEX, Node TO)

         Removes from the route cache any routes which assume that a
         packet transmitted by node FROM over its interface with the
         given INDEX will be received by node TO.

   Each implementation MAY choose the cache replacement and cache search
   strategies for its Route Cache that are most appropriate for its
   particular network environment.  For example, some environments may
   choose to return the shortest route to a node (the shortest sequence
   of hops), while others may select an alternate metric for the Get()
   operation.

   The Route Cache SHOULD support storing more than one source route for
   each destination.

   If there are multiple cached routes to a destination, the Route Get()
   operation SHOULD prefer routes that do not traverse a hop with an
   interface index of IF_INDEX_MA or IF_INDEX_ROUTER. This will prefer
   routes that lead directly to the target node over routes that attempt
   to reach the target via any internet infrastructure connected to the
   ad hoc network.

   If a node S is using a source route to some destination D that
   includes intermediate node N, S SHOULD shorten the route to
   destination D when it learns of a shorter route to node N than the
   one that is listed as the prefix of its current route to D.

   A node S using a source route to destination D through intermediate
   node N, MAY shorten the source route if it learns of a shorter path
   from node N to node D.

   The Route Cache replacement policy SHOULD allow routes to be
   categorized based upon "preference", where routes with a higher
   preferences are less likely to be removed from the cache.  For
   example, a node could prefer routes for which it initiated a Route
   Discovery over routes that it learned as the result of promiscuous
   snooping on other packets.  In particular, a node SHOULD prefer
   routes that it is presently using over those that it is not.




Broch, Johnson, and Maltz         Expires 22 April 2000         [Page 8]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


6.2. Route Request Table

   The Route Request Table is a collection of records about Route
   Request packets that were recently originated or forwarded by this
   node.  The table is indexed by the home address of the target of the
   route discovery.  A record maintained on node S for node D contains
   the following:

    -  The time that S last originated a Route Discovery for D.

    -  The remaining amount of time that S must wait before the next
       attempt at a Route Discovery for D.

    -  The Time-to-live (TTL) field in the IP header of last Route
       Request originated by S for D.

    -  A FIFO cache of the last ID_FIFO_SIZE Identification values from
       Route Request packets targeted at node D that were forwarded by
       this node.

   Nodes SHOULD use an LRU policy to manage the entries of in their
   Route Request Table.

   ID_FIFO_SIZE MUST NOT be set to an unlimited value, since, in the
   worst case, when a node crashes and reboots the first ID_FIFO_SIZE
   Route Request packets it sends may appear to be duplicates to the
   other nodes in the network.


6.3. Send Buffer

   The Send Buffer of some node is a queue of packets that cannot be
   transmitted by that node because it does not yet have a source
   route to each respective packet's destination.  Each packet in the
   Send Buffer is stamped with the time that it is placed into the
   Buffer, and SHOULD be removed from the Send Buffer and discarded
   SEND_BUFFER_TIMEOUT seconds after initially being placed in the
   Buffer.  If necessary, a FIFO strategy SHOULD be used to evict
   packets before they timeout to prevent the buffer from overflowing.

   Subject to the rate limiting defined in Section 8.4, a Route
   Discovery SHOULD be initiated as often as possible for the
   destination address of any packets residing in the Send Buffer.


6.4. Retransmission Buffer

   The Retransmission Buffer of a node is a queue of packets sent by
   this node that are awaiting the receipt of an acknowledgment from the
   next hop in the source route (Section 7.3).



Broch, Johnson, and Maltz         Expires 22 April 2000         [Page 9]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   For each packet in the Retransmission Buffer, a node maintains (1) a
   count of the number of retransmissions and (2) the time of the last
   retransmission.

   Packets are removed from the buffer when an acknowledgment
   is received, or when the number of retransmissions exceeds
   DSR_MAXRXTSHIFT.  In the later case, the removal of the packet from
   the Retransmission Buffer SHOULD result in a Route Error being
   returned to the initial source of the packet (Section 8.5).












































Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 10]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


7. Packet Formats

   Dynamic Source Routing makes use of four options carrying control
   information that can be piggybacked in any existing IP packet.

   The mechanism used for these options is based on the design of the
   Hop-by-Hop and Destination Options mechanisms in IPv6 [6].  The
   ability to generate and process such options must be added to an IPv4
   protocol stack.  Specifically, the Protocol field in the IP header
   is used to indicate that a Hop-by-Hop Options or Destination Options
   extension header exists between the IP header and the remaining
   portion of a packet's payload (such as a transport layer header).
   The Next Header field in each extension header will then indicate the
   type of header that follows it in a packet.


7.1. Destination Options Headers

   The Destination Options header is used to carry optional information
   that need be examined only by a packet's destination node(s).  The
   Destination Options header is identified by a Next Header (or
   Protocol) value of 60 in the immediately preceding header, and has
   the following format:

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Next Header  |  Hdr Ext Len  |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
   |                                                               |
   .                                                               .
   .                            Options                            .
   .                                                               .
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


      Next Header

         8-bit selector.  Identifies the type of header immediately
         following the Destination Options header.  Uses the same values
         as the IPv4 Protocol field [20].

      Hdr Ext Len

         8-bit unsigned integer.  Length of the Destination Options
         header in 4-octet units, not including the first 8 octets.








Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 11]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


      Options

         Variable-length field, of length such that the complete
         Destination Options header is an integer multiple of 4 octets
         long.  Contains one or more TLV-encoded options.

   The following destination option is used by the Dynamic Source
   Routing protocol:

    -  DSR Route Request option (Section 7.1.1)

   This destination option MUST NOT appear multiple times within a
   single Destination Options header.


7.1.1. DSR Route Request Option

   The DSR Route Request destination option is encoded in
   type-length-value (TLV) format as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Option Type  | Option Length |         Identification        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         Target Address                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |C| IN Index[1] |C| IN Index[2] |C| IN Index[3] |C| IN Index[4] |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |C|OUT Index[1] |C|OUT Index[2] |C|OUT Index[3] |C|OUT Index[4] |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[1]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[2]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[3]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[4]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |C| IN Index[5] |C| IN Index[6] |C|  IN Index[7] |C| IN Index[8]|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |C|OUT Index[5] |C|OUT Index[6] |C| OUT Index[7] |C|OUT Index[8]|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[5]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                               ...                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   IP fields:




Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 12]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


      Source Address

         MUST be the home address of the node originating this packet.
         Intermediate nodes that repropagate the request do not change
         this field.

      Destination Address

         MUST be the limited broadcast address (255.255.255.255).

      Hop Limit (TTL)

         Can be varied from 1 to 255, for example to implement
         expanding-ring searches.

   Route Request fields:

      Option Type

         ???.  A node that does not understand this option MUST discard
         the packet and the Option Data may change en-route (the top
         three bits are 011).

      Option Length

         8-bit unsigned integer.  Length of the option, in octets,
         excluding the Option Type and Option Length fields.

      Identification

         A unique value generated by the initiator (original sender)
         of the Route Request.  This value allows a recipient to
         determine whether or not it has recently seen this a copy of
         this Request; if it has, the packet is simply discarded.  When
         propagating a Route Request, this field MUST be copied from the
         received copy of the Request being forwarded.

      Target Address

         The home address of the node that is the target of the Route
         Request.

      Change Interface (C) bit[1..n]

         A flag associated with each interface index that indicates
         whether or not the corresponding node repropagated the Request
         over a different physical interface type than over which it
         received the Request.





Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 13]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


      IN Index[1..n]

         IN Index[i] is the index of the interface over which the node
         indicated by Address[i] received the Route Request option.
         These are used to record a reverse route from the target of
         the request to the originator, over which a Route Reply MAY be
         sent.

      OUT Index[1..n]

         OUT Index[i] is the interface index that the node indicated by
         Address[i-1] used when rebroadcasting the Route Request option.

      Address[1..n]

         Address[i] is the home address of the ith hop recorded in the
         Route Request option.


7.2. Hop-by-Hop Options Headers

   The Hop-by-Hop Options header is used to carry optional information
   that must be examined by every node along a packet's delivery path.
   The Hop-by-Hop Options header is identified by a Next Header (or
   Protocol) value of ???  in the IP header, and has the following
   format:

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Next Header  |  Hdr Ext Len  |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
   |                                                               |
   .                                                               .
   .                            Options                            .
   .                                                               .
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      Next Header

         8-bit selector.  Identifies the type of header immediately
         following the Hop-by-Hop Options header.  Uses the same values
         as the IPv4 Protocol field [20].

      Hdr Ext Len

         8-bit unsigned integer.  Length of the Hop-by-Hop Options
         header in 4-octet units, not including the first 8 octets.






Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 14]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


      Options

         Variable-length field, of length such that the complete
         Hop-by-Hop Options header is an integer multiple of 4 octets
         long.  Contains one or more TLV-encoded options.

   The following hop-by-hop options are used by the Dynamic Source
   Routing protocol:

    -  DSR Route Reply option (Section 7.2.1)

    -  DSR Route Error option (Section 7.2.2)

    -  DSR Acknowledgment option (Section 7.2.3)

   All of these destination options MAY appear one or more times within
   a single Hop-by-Hop Options header.


7.2.1. DSR Route Reply Option

   The DSR Route Reply hop-by-hop option is encoded in type-length-value
   (TLV) format as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                   |  Option Type  | Option Length |   Reserved    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         Target Address                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |C|OUT Index[1] |C|OUT Index[2] |C|OUT Index[3] |C|OUT Index[4] |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[1]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[2]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[3]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[4]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |C|OUT Index[5] |C|OUT Index[6] |C|OUT Index[7] |C|OUT Index[8] |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[5]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                               ...                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+






Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 15]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


      Option Type

         ???.  A node that does not understand this option should ignore
         this option and continue processing the packet, and the Option
         Data does not change en-route (the top three bits are 000).

      Option Length

         8-bit unsigned integer.  Length of the option, in octets,
         excluding the Option Type and Option Length fields.

      Reserved

         Sent as 0; ignored on reception.

      Target Address

         The home address of the node to which the Route Reply must be
         delivered.

      Change Interface (C) bit[1..n]

         If the C bit associated with a node N is set, it implies N will
         be forwarding the packet out a different interface than the one
         over which it was received (i.e., the node sending the packet
         to N should not expect a passive acknowledgment).

      OUT Index[1..n]

         OUT Index[i] is the interface index of the ith hop listed in
         the Route Reply option.  It denotes the interface that should
         be used by Address[i-1] to reach Address[i] when using the
         specified source route.

      Address[1..n]

         Address[i] is the home address of the ith hop listed in the
         Route Reply option.















Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 16]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


7.2.2. DSR Route Error Option

   The DSR Route Error hop-by-hop option is encoded in type-length-value
   (TLV) format as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Option Type  | Option Length |     Index     |   Error Type  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     Error Source Address                      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Error Destination Address                    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                   Unreachable Node Address                    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      Option Type

         ???.  A node that does not understand this option should ignore
         the option and continue processing the packet, and the Option
         Data does not change en-route (the top three bits are 000).

      Option Length

         8-bit unsigned integer.  Length of the option, in octets,
         excluding the Option Type and Option Length fields.

      Index

         The interface index of the network interface over which the
         node designated by Error Source Address tried to forward a
         packet to the node designated by Unreachable Node Address.

      Error Type

         The type of error encountered.  Values between 0 and 127
         inclusive indicate a hard failure of connectivity between the
         Error Source Address and the Unreachable Node Address.  Values
         between 128 and 255 inclusive indicate a soft failure.

             NODE_UNREACHABLE                1

             PATH_STATE_NOT_FOUND            129

      Error Source Address

         The home address of the node originating the Route Error (e.g.,
         the node that attempted to forward a packet and discovered the
         link failure).



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 17]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


      Error Destination Address

         The home address of the node to which the Route Error must be
         delivered (e.g, the node that generated the routing information
         claiming that the hop Error Source Address to Unreachable Node
         Address was a valid hop).

      Unreachable Node Address

         The home address of the node that was found to be unreachable
         (the next hop neighbor to which the node at ``Error Source
         Address'' was attempting to transmit the packet).


7.2.3. DSR Acknowledgment Option

   The DSR Acknowledgment hop-by-hop option is encoded in
   type-length-value (TLV) format as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                                   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                                   |  Option Type  | Option Length |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         Identification                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       ACK Source Address                      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     ACK Destination Address                   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Data Source Address                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      Option Type

         ???.  A node that does not understand this option should ignore
         the option and continue processing the packet, and the Option
         Data does not change en-route (the top three bits are 000).

      Option Length

         8-bit unsigned integer.  Length of the option, in octets,
         excluding the Option Type and Option Length fields.

      Identification

         A 32-bit value that when taken in conjunction with Data Source
         Address, uniquely identifies the packet being acknowledged.





Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 18]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


         The Identification value is computed as ((ip_id << 16) | ip_off)
         where ip_id is the value of the 16-bit Identification field in
         the IP header of the packet being acknowledged, and ip_off is
         the value of the 13-bit Fragment Offset field in the IP header
         of the packet being acknowledged.

         When constructing the Identification, ip_id and ip_off MUST be
         in host byte-order.  The entire Identification value MUST then
         be converted to network byte-order before being placed in the
         Acknowledgment option.

      ACK Source Address

         The home address of the node originating the Acknowledgment.

      ACK Destination Address

         The home address of the node to which the Acknowledgment must
         be delivered.

      Data Source Address

         The IP Source Address of the packet being acknowledged.






























Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 19]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


7.3. DSR Routing Header

   As specified for IPv6 [6], a Routing header is used by a source to
   list one or more intermediate nodes to be ``visited'' on the way to
   a packet's destination.  This function is similar to IPv4's Loose
   Source and Record Route option, but the Routing header does not
   record the route taken as the packet is forwarded.  The specific
   processing steps required to implement the Routing header must be
   added to an IPv4 protocol stack.  The Routing header is identified by
   a Next Header value of 43 in the immediately preceding header, and
   has the following format:

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Next Header  |  Hdr Ext Len  |  Routing Type | Segments Left |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   .                                                               .
   .                       type-specific data                      .
   .                                                               .
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The type specific data for a Routing Header carrying a DSR Source
   Route is:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |R|S|                        Reserved                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |C|OUT Index[1] |C|OUT Index[2] |C|OUT Index[3] |C|OUT Index[4] |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[1]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[2]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[3]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[4]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |C|OUT Index[5] |C|OUT Index[6] |C|OUT Index[7] |C|OUT Index[8] |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Address[5]                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                               ...                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+







Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 20]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   Routing Header Fields:

      Next Header

         8-bit selector.  Identifies the type of header immediately
         following the Routing header.

      Hdr Ext Len

         8-bit unsigned integer.  Length of the Routing header in
         4-octet units, not including the first 8 octets.

      Routing Type

         ???

      Segments Left

         Number of route segments remaining, i.e., number of explicitly
         listed intermediate nodes still to be visited before reaching
         the final destination.

   Type Specific Fields:

      Acknowledgment Request (R)

         The Acknowledgment Request (R) bit is set to request an
         explicit acknowledgment from the next hop.  After processing
         the Routing Header, The IP Destination Address lists the
         address of the next hop.

      Salvaged Packet (S)

         The Salvaged Packet (S) bit indicates that this packet has been
         salvaged by an intermediate node, and thus that this Routing
         Header was generated by Address[1] and not the IP Source
         Address (Section 8.5.5).

      Reserved

         Sent as 0; ignored on reception.

      Change Interface (C) bit[1..n]

         If the C bit associated with a node N is set, it implies N will
         be forwarding the packet out a different interface than the one
         over which it was received (i.e., the node sending the packet
         to N should not expect a passive acknowledgment and MAY wish to
         set the R bit).




Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 21]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


      OUT Index[1..n]

         Index[i] is the interface index that the node indicated
         by Address[i-1] must use when transmitting the packet to
         Address[i].  Index[1] indicates which interface the node
         indicated by the IP Source Address uses to transmit the packet.

      Address[1..n]

         Address[i] is the home address of the ith hop in the Routing
         header.

   Note that Address[1] is the first intermediate hop along the route.
   The address of the originating node is the IP Source Address.  The
   only exception to this rule is for packets that are salvaged, as
   described in Section 8.5.5.  A packet that has been salvaged has an
   alternate route placed on it by an intermediate node in the network,
   and in this case, the address of the originating node (the salvaging
   node) is Address[1].  Salvaged packets are indicated by setting the S
   bit in the DSR Routing header.

































Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 22]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


8. Detailed Operation

8.1. Originating a Data Packet

   When node A originates a packet, the following steps MUST be taken
   before transmitting the packet:

    1. If the destination address is a multicast address, piggyback the
       data packet on a Route Request targeting the multicast address.
       The following fields MUST be initialized as specified:

           IP.Source_Address      = Home address of node A
           IP.Destination_Address = 255.255.255.255
           Request.Target_Address = Multicast destination address

       DONE.

    2. Otherwise, call Route_Cache.Get() to determine if there is a
       cached source route to the destination.

    3. If the cached route indicates that the destination is directly
       reachable over one hop, no Routing Header should be added to the
       packet.  Initialize the following fields:

           IP.Source_Address      = Home address of node A
           IP.Destination_Address = Home address of the Destination

       DONE.

    4. Otherwise, if the cached route indicates that multiple hops are
       required to reach the destination, insert a Routing Header into
       the packet as described in Section 8.2.  DONE.

    5. Otherwise, if no cached route to the destination is found, insert
       the packet into the Send Buffer and initiate Route Discovery as
       described in Section 8.4.


8.2. Originating a Packet with a DSR Routing Header

   When a node originates a packet with a Routing Header, the address
   of the first hop in the source route MUST be listed as the IP
   Destination Address as well as Address[1] in the Routing Header.
   The final destination of the packet is listed as the last hop
   in the Routing Header (Address[n]).  At each intermediate hop i,
   Address[i] is copied into the IP Destination Address and the packet
   is retransmitted.






Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 23]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   For example, suppose node A originates a packet destined for node D
   that should pass through intermediate hops B and C. The packet MUST
   be initialized as follows:

    IP.Source_Address      = Home address of node A
    IP.Destination_Address = Home address of node B
    RT.Segments_Left       = 2
    RT.Out_Index[1]        = Interface index used by A to reach B
    RT.Out_Index[2]        = Interface index used by B to reach C
    RT.Out_Index[3]        = Interface index used by C to reach D
    RT.Address[1]          = Home address of node B
    RT.Address[2]          = Home address of node C
    RT.Address[3]          = Home address of node D


8.3. Processing a Routing Header

   Excluding the exceptions listed here, a DSR Routing Header is
   processed using the same rules as outlined for Type 0 Routing Headers
   in IPv6 [6].  The Routing Header is only processed by the node whose
   address appears as the IP destination of the packet.  The following
   additional rules apply to processing the type specific data of a DSR
   Source Route:

   Let

SegLft = the value of Segments Left when the packet was received
NumAddrs = the total number of addresses in the Routing Header

    1. The address of the next hop, Address[NumAddrs - SegLft + 1],
       is copied into the IP.Destination_Address of the packet.  The
       existing IP.Destination_Address is NOT copied back into the
       Address list of the Routing Header.

    2. The interface used to transmit the packet to its next hop from
       this node MUST be the interface denoted by Index[NumAddrs -
       SegLft + 1].

    3. If the Acknowledgment Request (R) bit is set, the node MUST
       transmit a packet containing the DSR Acknowledgment option to
       the previous hop, Address[NumAddrs - SegLft - 1], performing
       Route Discovery if necessary.  (Address[0] is taken as the
       IP.Source_Address)

    4. Perform Route Maintenance by verifying that the packet was
       received by the next hop as described in Section 8.5.







Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 24]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


8.4. Route Discovery

   Route Discovery is the on-demand process by which nodes actively
   obtain source routes to destinations to which they are actively
   attempting to send packets.  The destination node for which a
   Route Discovery is initiated is known as the "target" of the Route
   Discovery.  A Route Discovery for a destination SHOULD NOT be
   initiated unless the initiating node has a packet in the Send Buffer
   requiring delivery to that destination.  A Route Discovery for a
   given target node MUST NOT be initiated unless permitted by the
   rate-limiting information contained in the Route Request Table.
   After each Route Discovery attempt, the interval between successive
   Route Discoveries for this target must be doubled, up to a maximum of
   MAX_REQUEST_PERIOD.

   Route Discoveries for a multicast address SHOULD NOT be rate limited,
   and SHOULD always be permitted.


8.4.1. Originating a Route Request

   The basic Route Discovery algorithm for a unicast destination is as
   follows:

    1. Originate a Route Request packet with the IP header Time-to-Live
       field initialized to 1.  This type of Route Request is called a
       non-propagating Route Request and allows the originator of the
       Request to inexpensively query the route caches of each of its
       neighbors for a route to the destination.

    2. If a Route Reply is received in response to the non-propagating
       Request, use the returned source route to transmit all packets
       for the destination that are in the Send Buffer.  DONE.

    3. Otherwise, if no Route Reply is received within
       RING0_REQUEST_TIMEOUT seconds, transmit a Route Request
       with the IP header Time-to-Live field initialized to
       MAX_ROUTE_LEN. This type of Route Request is called a propagating
       Route Request.  Update the information in the Route Request
       Table, to double the amount of time before any subsequent Route
       Discovery attempt to this target.

    4. If no Route Reply is received within the time interval indicated
       by the Route Request Table, GOTO step 1.

   The Route Request option SHOULD be initialized as follows:

    IP.Source_Address      = This node's home address
    IP.Destination_Address = 255.255.255.255
    Request.Target         = Home address of intended destination



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 25]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


    Request.OUT_Index[1]   = Index of interface used to transmit the Request

   The behavior of a node processing a packet containing both a Routing
   Header and a Route Request Destination option is unspecified.
   Packets SHOULD NOT contain both a Routing Header and a Route Request
   Destination option.  [This is not exactly true:  A Route Request
   option appearing in the second Destination Options header that IPv6
   allows after the Routing Header would probably do-what-you-mean,
   though we have not triple-checked it yet.  Namely, it would allow the
   originator of a route discovery to unicast the request to some other
   node, where it would be released and begin the flood fill.  We call
   this a Route Request Blossom since the unicast portion of the path
   looks like a stem on the blossoming flood-fill of the request.]

   Packets containing a Route Request Destination option SHOULD NOT be
   retransmitted, SHOULD NOT request an explicit DSR Acknowledgment by
   setting the R bit, SHOULD NOT expect a passive acknowledgment, and
   SHOULD NOT be placed in the Retransmission Buffer.  The repeated
   transmission of packets containing a Route Request Destination option
   is controlled solely by the logic described in this section.


8.4.2. Processing a Route Request Option

   When a node A receives a packet containing a Route Request option,
   the Route Request option is processed as follows:

    1. If Request.Target_Address matches the home address of this node,
       then the Route Request option contains a complete source route
       describing the path from the initiator of the Route Request to
       this node.

       (a) Send a Route Reply as described in Section 8.4.4.

       (b) Continue processing the packet in accordance with the Next
           Header value contained in the Destination Option extension
           header.  DONE.

    2. Otherwise, if the combination (IP.Source_Address,
       Request.Identification) is found in the Route Request
       Table, then discard the packet, since this is a copy of a
       recently seen Route Request.  DONE.

    3. Otherwise, if Request.Target_Address is a multicast address then:

       (a) If node A is a member of the multicast group indicated by
           Request.Target_Address, then create a copy of the packet,
           setting IP.Destination_Address = REQUEST.Target_Address, and
           continue processing the copy of the packet in accordance with
           the Next Header field of the Destination option.



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 26]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


       (b) If IP.TTL is non-zero, decrement IP.TTL, and retransmit the
           packet.  DONE.

       (c) Otherwise, discard the packet.  DONE.

    4. Otherwise, if the home address of node A is already listed in
       the Route Request (IP.Source_Address or Request.Address[]), then
       discard the packet.  DONE.

    5. Let

             m = number of addresses currently in the Route Request option
             n = m + 1

    6. Otherwise, append the home address of node A to the Route Request
       option (Request.Address[n]).

    7. Set Request.IN_Index[n] = index of interface packet was received
       on.

    8. If a source route to Request.Target_Address is found in our Route
       Cache and the rules of Section 8.4.3 permit it, return a Cached
       Route Reply as described in Section 8.4.3.  DONE.

    9. Otherwise, for each interface on which the node is configured to
       participate in a DSR ad hoc network:

       (a) Make a copy of the packet containing the Route Request.

       (b) Set Request.OUT_Index[n+1] = index of the interface.

       (c) If the outgoing interface is different from the incoming
           interface, then set the C bit on both Request.OUT_Index[n+1]
           and Request.IN_Index[n]

       (d) Link-layer re-broadcast the packet containing the Route
           Request on the interface jittered by T milliseconds, where
           T is a uniformly distributed, random number between 0 and
           BROADCAST_JITTER. DONE.


8.4.3. Generating Route Replies using the Route Cache

   A node SHOULD use its Route Cache to avoid propagating a Route
   Request packet received from another node.  In particular, suppose a
   node receives a Route Request packet for which it is not the target
   and which it does not discard based on the logic of Section 8.4.2.
   If the node has a Route Cache entry for the target of the Request,
   it SHOULD append this cached route to the accumulated route record
   in the packet and return this route in a Route Reply packet to



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 27]

INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999



   the initiator without propagating (re-broadcasting) the Route
   Request.  Thus, for example, if node F in the example network shown
   in Figure 8.4.3 needs to send a packet to node D, it will initiate
   a Route Discovery and broadcast a Route Request packet.  If this
   broadcast is received by node A, node A can simply return a Route
   Reply packet to F containing the complete route to D consisting of
   the sequence of hops: A, B, C, and D.

   Before transmitting a Route Reply packet that was generated using
   information from its Route Cache, a node MUST verify that:

    1. The resulting route contains no loops.

    2. The node issuing the Route Reply is listed in the route that it
       specifies in its Reply.  This increases the probability that the
       route is valid, since the node in question should have received
       a Route Error if this route stopped working.  Additionally, this
       requirement means that a Route Error traversing the route will
       pass through the node that issued the Reply based on stale cache
       data, which is critical for ensuring stale data is removed from
       caches in a timely manner.  Without this requirement, the next
       Route Discovery initiated by the original requester might also be
       contaminated by a Route Reply from this node containing the same
       stale route.


8.4.4. Originating a Route Reply

   Let REQPacket denote a packet received by node A that
   contains a Route Request option which lists node A as the
   REQPacket.Request.Target_Address.  Let REPPacket be a packet
   transmitted by node A that contains a corresponding Route Reply.  The
   Route Reply option transmitted in response to a Route Request MUST be
   initialized as follows:



            B->C->D
            +---+     +---+     +---+     +---+
            | A |---->| B |---->| C |---->| D |
            +---+     +---+     +---+     +---+

            +---+
            | F |                     +---+
            +---+                     | E |
                                      +---+


              Figure 1: An example network where A knows a
                        route to D via B and C.



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 28]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


    1. If REQPacket.Request.Address[] does not contain any hops, then
       node A is only a single hop from the originator of the Route
       Request.  Build a Route Reply packet as follows:

          REPPacket.IP.Source_Address    = REQPacket.Request.Target_Address
          REPPacket.Reply.Target         = REQPacket.IP.Source_Address
          REPPacket.Reply.OUT_Index[1]   = REQPacket.Request.OUT_index[1]
          REPPacket.Reply.OUT_C_bit[1]   = REQPacket.Request.OUT_C_bit[1]
          REPPacket.Reply.Address[1]     = The home address of node A

       GOTO step 3.

    2. Otherwise, build a Route Reply packet as follows:

          REPPacket.IP.Source_Address    = The home address of node A
          REPPacket.Reply.Target         = REQPacket.IP.Source_Address
          REPPacket.Reply.OUT_Index[1..n]= REQPacket.Request.OUT_index[1..n]
          REPPacket.Reply.OUT_C_bit[1..n]= REQPacket.Request.OUT_C_bit[1..n]
          REPPacket.Reply.Address[1..n]  = REQPacket.Request.Address[1..n]

    3. Send the Route Reply jittered by T milliseconds, where T
       is a uniformly distributed random number between 0 and
       BROADCAST_JITTER.  DONE.

   If sending a Route Reply packet to the originator of the Route
   Request requires performing a Route Discovery, the Route Reply
   hop-by-hop option MUST be piggybacked on the packet that contains the
   Route Request.  This prevents a loop wherein the target of the new
   Route Request (which was itself the originator of the original Route
   Request) must do another Route Request in order to return its Route
   Reply.

   If sending the Route Reply to the originator of the Route Request
   does not require performing Route Discovery, a node SHOULD send a
   unicast Route Reply in response to every Route Request targeted at
   it.


8.4.5. Processing a Route Reply Option

   Upon receipt of a Route Reply, a node should extract the source route
   (Target_Address, OUT_Index[1]:Address[1], ..  OUT_Index[n]:Address[n]
   ) and insert this route into its Route Cache.  All the packets in the
   Send Buffer SHOULD be checked to see whether the information in the
   Reply allows them to be sent immediately.








Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 29]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


8.5. Route Maintenance

   Route Maintenance requires that whenever a node transmits a data
   packet, a Route Reply, or a Route Error, it must verify that the next
   hop (indicated by the Destination IP Address) correctly receives the
   packet.

   If the sender cannot verify that the next hop received the packet, it
   MUST decide that its link to the next hop is broken and MUST send a
   Route Error to the node responsible for generating the Routing Header
   that contains the broken link (Section 8.5.3).

   The following ways may be used to verify that the next hop correctly
   received a packet:

    -  The receipt of a passive acknowledgment (Section 8.5.1).

    -  The receipt of an explicitly requested acknowledgment
       (Section 8.5.1).

    -  By the presence of positive feedback from the link layer
       indicating that the packet was acknowledged by the next hop
       (Section 8.5.2).

    -  By the absence of explicit failure notification from the link
       layer that provides reliable hop-by-hop delivery such as MACAW or
       802.11 (Section 8.5.2).

   Nodes MUST NOT perform Route Maintenance for packets containing a
   Route Request option or packets containing only an Acknowledgment
   option.  Sending Acknowledgments for packets containing only
   an Acknowledgment option would create an infinite loop whereby
   acknowledgments would be sent for acknowledgments.  Acknowledgments
   should be always sent for packets containing a Routing Header with
   the R bit set (e.g., packets which contain only an Acknowledgment
   and a Routing Header for which the last forwarding hop requires an
   explicit acknowledgment of receipt by the final destination).


8.5.1. Using Network-Layer Acknowledgments

   For link layers that do not provide explicit failure notification,
   the following steps SHOULD be used by a node A to perform Route
   Maintenance.

   When receiving a packet:

    -  If the packet contains a Routing Header with the R bit set, send
       an explicit acknowledgment as described in Section 8.3.




Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 30]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


    -  If the packet does not contain a Routing Header, the node MUST
       transmit a packet containing the DSR Acknowledgment option
       to the previous hop as indicated by the IP.Source_Address.
       Since the receiving node is the final destination, there
       will be no opportunity for the originator to obtain a
       passive acknowledgment, and the receiving node must infer the
       originator's request for an explicit acknowledgment.

   When sending a packet:

    1. Before sending a packet, insert a copy of the packet into the
       Retransmission Buffer and update the information maintained about
       this packet in the Retransmission Buffer.

    2. If after processing the Routing Header, RH.Segments_Left is equal
       to 0, then node A MUST set the Acknowledgment Request (R) bit in
       the Routing Header before transmitting the packet over its final
       hop.

    3. If after processing the Routing Header and copying
       RH.Address[n] to IP.Destination_Address, node A determines that
       RH.OUT_C_bit[n+1] is set, then node A MUST set the Acknowledgment
       Request (R) bit in the Routing Header before transmitting the
       packet (since the C bit was set during Route Discovery by the
       node now listed as the IP.Destination_Address to indicate that
       it will propagate the packet out a different interface, and that
       node A will not receive a passive acknowledgment).

    4. Set the retransmission timer for the packet in the Retransmission
       Buffer.

    5. Transmit the packet.

    6. If a passive or explicit acknowledgment is received before the
       retransmission timer expires, then remove the packet from the
       Retransmission Buffer and disable the retransmission timer.
       DONE.

    7. Otherwise, when the Retransmission Timer expires, remove the
       packet from the Retransmission Buffer.

    8. If DSR_MAXRXTSHIFT transmissions have been done, then attempt
       to salvage the packet (Section 8.5.5).  Also, generate a Route
       Error.  DONE.

    9. GOTO step 1.







Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 31]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


8.5.2. Using Link Layer Acknowledgments

   If explicit failure notifications are provided by the link layer,
   then all packets are assumed to be correctly received by the next hop
   and a Route Error is sent only when a explicit failure notification
   is made from the link layer.

   Nodes receiving a packet without a Routing Header do not need to send
   an explicit Acknowledgment to the packet's originator, since the
   link layer will notify the originator if the packet was not received
   properly.


8.5.3. Originating a Route Error

   If the next hop of a packet is found to be unreachable as described
   in Section 8.5, a Route Error packet (Section 7.2.2) MUST be returned
   to the node whose cache generated the information used to route the
   packet.

   When a node A generates a Route Error for packet P, it MUST
   initialize the fields in the Route Error as follows:

    Error.Source_Address      = Home address of node A
    Error.Unreachable_Address = Home address of the unreachable node

    -  If the packet contains a DSR Routing Header and the S bit is NOT
       set, the packet has been forwarded without the need for salvaging
       up to this point.

           Error.Destination_Address = P.IP.Source_Address

    -  Otherwise, if the packet contains a DSR Routing Header and the S
       bit IS set, the packet has been salvaged by an intermediate node,
       and thus this Routing Header was placed there by the salvaging
       node.

           Error.Destination_Address = P.RoutingHeader.Address[1]

    -  Otherwise, if the packet does not contain a DSR Routing Header,
       the packet must have been originated by this node A.

           Error.Destination_Address = Home address of node A

   Send the packet containing the Route Error to Error.Destination_Address,
   performing Route Discovery if necessary.

   As an optimization, Route Errors that are discovered by the
   packet's originator (such that Error.Source_Address is equal to
   Error.Destination_Address) SHOULD be processed internally.  Such



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 32]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   processing should invoke all the steps that would be taken if a Route
   Error option was created, transmitted, received, and processed,
   but an actual packet containing a Route Error option SHOULD NOT be
   transmitted.


8.5.4. Processing a Route Error Option

   Upon receipt of a Route Error via any mechanism, a node
   SHOULD remove any route from its Route Cache that uses the hop
   (Error.Source_Address, Error.Index to Error.Unreachable_Address).
   This includes all Route Errors overheard, and those processed
   internally as described in Section 8.5.3.

   When the node identified by Error.Destination_Address receives
   the Route Error, it SHOULD verify that the source route
   responsible for delivering the Route Error includes the same
   hops as the working prefix of the original packet's source route
   (Error.Destination_Address to Error.Source_Address).  If any
   hop listed in the working prefix is not included in the Route
   Error's source route, then the originator SHOULD forward the Route
   Error back along the working prefix (Error.Destination_Address to
   Error.Source_Address) so that each node along the working prefix will
   remove the invalid route from its Route Cache.

   If the node processing a Route Error option discovers its home
   address is Error.Destination_Address and the packet contains
   additional Route Error option(s) later on the inside of the Hop
   by Hop options header, we call the additional Route Errors nested
   Route Errors.  The node MUST deliver the first nested Route Error
   to Nested_Error.Destination_Address, performing Route Discovery if
   needed.  It does this by removing the Route Error option listing
   itself as the Error.Destination_Address, finding the first nested
   Route Error option, and originating the remaining packet to
   Nested_Error.Destination_Address.  This mechanism allows for the
   proper handling of Route Errors that are discovered while delivering
   a Route Error.


8.5.5. Salvaging a Packet

   When node A attempts to salvage a packet originated at node S and
   destined for node D, it MUST perform the following steps:

    1. Generate and send a Route Error to S as explained in
       Section 8.5.3.

    2. Call Route_Cache.Get() to determine if it has a cached source
       route to the packet's ultimate destination D (which is the last
       Address listed in the Routing Header).



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 33]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


    3. If node A does not have a cached route for node D, it MUST
       discard the packet.  DONE.

    4. Otherwise, let Salvage_Address[1] through Salvage_Address[m] be
       the sequence of hops returned from the Route Cache.  Initialize
       the following fields in the packet's header:

           RT.Segments_Left   = m - 2;
           RT.S               = 1
           RT.Address[1]      = Home address of Node A
           RT.Address[2]      = Salvage.Address[1]
           ...
           RT.Address[n]      = Salvage.Address[m]

   The IP Source Address of the packet MUST remain unchanged.  When the
   Routing Header in the outgoing packet is processed, RT.Address[2],
   will be copied to the IP Destination Address field.




































Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 34]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


9. Optimizations

   A number of optimizations can be added to the basic operation of
   Route Discovery and Route Maintenance as described in Sections 8.4
   and 8.5 that can reduce the number of overhead packets and improve
   the average efficiency of the routes used on data packets.  This
   section discusses some of those optimizations.


9.1. Leveraging the Route Cache

   The data in a node's Route Cache may be stored in any format, but
   the active routes in its cache form a tree of routes, rooted at
   this node, to other nodes in the ad hoc network.  For example, the
   illustration below shows an ad hoc network of six mobile nodes, in
   which mobile node A has earlier completed a Route Discovery for
   mobile node D and has cached a route to D through B and C:

            B->C->D
            +---+     +---+     +---+     +---+
            | A |---->| B |---->| C |---->| D |
            +---+     +---+     +---+     +---+

            +---+
            | F |                     +---+
            +---+                     | E |
                                      +---+

   Since nodes B and C are on the route to D, node A also learns the
   route to both of these nodes from its Route Discovery for D.  If A
   later performs a Route Discovery and learns the route to E through B
   and C, it can represent this in its Route Cache with the addition of
   the single new hop from C to E.  If A then learns it can reach C in a
   single hop (without needing to go through B), A SHOULD use this new
   route to C to also shorten the routes to D and E in its Route Cache.


9.1.1. Promiscuous Learning of Source Routes

   A node can add entries to its Route Cache any time it learns a new
   route.  In particular, when a node forwards a data packet as an
   intermediate hop on the route in that packet, the forwarding node is
   able to observe the entire route in the packet.  Thus, for example,
   when any intermediate node B forwards packets from A to D, B SHOULD
   add the source route information from that packet's Routing Header
   to its own Route Cache.  If a node forwards a Route Reply packet, it
   SHOULD also add the source route information from the route record
   being returned in the Route Reply, to its own Route Cache.





Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 35]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   In addition, since all wireless network transmissions at the physical
   layer are inherently broadcast, it may be possible for a node to
   configure its network interface into promiscuous receive mode, such
   that the node is able to receive all packets without link layer
   address filtering.  In this case, the node MAY add to its Route Cache
   the route information from any packet it can overhear.


9.2. Preventing Route Reply Storms

   The ability for nodes to reply to a Route Request not targeted at
   them by using their Route Caches can result in a Route Reply storm.
   If a node broadcasts a Route Request for a node that its neighbors
   have in their Route Caches, each neighbor may attempt to send a
   Route Reply, thereby wasting bandwidth and increasing the rate
   of collisions in the area.  For example, in the network shown in
   Section 9.1, if both node A and node B receive F's Route Request,
   they will both attempt to reply from their Route Caches.  Both will
   send their Replies at about the same time since they receive the
   broadcast at about the same time.  Particularly when more than the
   two mobile nodes in this example are involved, these simultaneous
   replies from the mobile nodes receiving the broadcast may create
   packet collisions among some or all of these replies and may cause
   local congestion in the wireless network.  In addition, it will
   often be the case that the different replies will indicate routes
   of different lengths.  For example, A's Route Reply will indicate a
   route to D that is one hop longer than that in B's reply.

   For interfaces which can promiscuously listen to the channel, mobile
   nodes SHOULD use the following algorithm to reduce the number of
   simultaneous replies by slightly delaying their Route Reply:

    1. Pick a delay period

                              d = H * (h - 1 + r)

       where h is the length in number of network hops for the route
       to be returned in this node's Route Reply, r is a random number
       between 0 and 1, and H is a small constant delay to be introduced
       per hop.

    2. Delay transmitting the Route Reply from this node for a period
       of d.

    3. Within the delay period, promiscuously receive all packets at
       this node.  If a packet is received by this node during the delay
       period that is addressed to the target of this Route Discovery
       (the target is the final destination address for the packet,
       through any sequence of intermediate hops), and if the length of
       the route on this packet is less than h, then cancel the delay



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 36]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


       timer and do not transmit the Route Reply from this node; this
       node may infer that the initiator of this Route Discovery has
       already received a Route Reply, giving an equally good or better
       route.


9.3. Piggybacking on Route Discoveries

   As described in Section 5.1, when one node needs to send a packet
   to another, if the sender does not have a route cached to the
   destination node, it must initiate a Route Discovery, buffering the
   original packet until the Route Reply is returned.  The delay for
   Route Discovery and the total number of packets transmitted can be
   reduced by allowing data to be piggybacked on Route Request packets.
   Since some Route Requests may be propagated widely within the ad hoc
   network, though, the amount of data piggybacked must be limited.  We
   currently use piggybacking when sending a Route Reply or a Route
   Error packet, since both are naturally small in size.  Small data
   packets such as the initial SYN packet opening a TCP connection [18]
   could easily be piggybacked.

   One problem, however, arises when piggybacking on Route Request
   packets.  If a Route Request is received by a node that replies
   to the request based on its Route Cache without propagating the
   Request (Section 9.1), the piggybacked data will be lost if the node
   simply discards the Route Request.  In this case, before discarding
   the packet, the node must construct a new packet containing the
   piggybacked data from the Route Request packet.  The source route
   in this packet MUST be constructed to appear as if the new packet
   had been sent by the initiator of the Route Discovery and had been
   forwarded normally to this node.  Hence, the first portion of the
   route is taken from the accumulated route record in the Route Request
   packet and the remainder of the route is taken from this node's Route
   Cache.  The sender address in the packet MUST also be set to the
   initiator of the Route Discovery.  Since the replying node will be
   unable to correctly recompute an Authentication header for the split
   off piggybacked data, data covered by an Authentication header SHOULD
   NOT be piggybacked on Route Request packets.


9.4. Discovering Shorter Routes

   Once a route between a packet source and a destination has been
   discovered, the basic DSR protocol MAY continue to use that route
   for all traffic from the source to the destination as long as
   it continues to work, even if the nodes move such that a shorter
   route becomes possible.  In many cases, the basic Route Maintenance
   procedure will discover the shorter route, since if a node moves
   enough to create a shorter route, it will likely also move out of
   transmission range of at least one hop on the existing route.



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 37]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   Furthermore, when a data packet is received as the result of
   operating in promiscuous receive mode, the node checks if the Routing
   Header packet contains its address in the unprocessed portion of the
   source route (Address[NumAddrs - SegLft] to Address[NumAddrs]).  If
   so, the node knows that packet could bypass the unprocessed hops
   preceding it in the source route.  The node then sends what is called
   a gratuitous Route Reply message to the packet's source, giving it
   the shorter route without these hops.

   The following algorithm describes how a node A should process packets
   with an IP.Destination_Address not addressed to A or the IP broadcast
   address or a multicast address that are received as a result of A
   being in promiscuous receive mode:

    1. If the packet is not a data packet containing a Routing Header,
       drop the packet.  DONE.

    2. If the home address of this node does not appear in the portion
       of the source route that has not yet been processed (indicated by
       Segments Left), then drop the packet.  DONE.

    3. Otherwise, the node B that just transmitted the packet (indicated
       by Address[NumAddrs - SegLft - 1]) can communicate directly with
       this node A.  Create a Route Reply.  The Route Reply MUST list
       the entire source route contained in the received packet with the
       exception of the intermediate nodes between node B and node A.

    4. Send this gratuitous Route Reply to the node listed as the
       IP.Source_Address of the received packet.  If Route Discovery
       is required it MAY be initiated, or the gratuitous Route Reply
       packet MAY be dropped.


9.5. Rate Limiting the Route Discovery Process

   One common error condition that must be handled in an ad hoc network
   is the case in which the network effectively becomes partitioned.
   That is, two nodes that wish to communicate are not within
   transmission range of each other, and there are not enough other
   mobile nodes between them to form a sequence of hops through which
   they can forward packets.  If a new Route Discovery was initiated
   for each packet sent by a node in this situation, a large number of
   unproductive Route Request packets would be propagated throughout the
   subset of the ad hoc network reachable from this node.  In order to
   reduce the overhead from such Route Discoveries, we use exponential
   back-off to limit the rate at which new Route Discoveries may be
   initiated from any node for the same target.  If the node attempts to
   send additional data packets to this same node more frequently than
   this limit, the subsequent packets SHOULD be buffered in the Send
   Buffer until a Route Reply is received, but it MUST NOT initiate a



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 38]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   new Route Discovery until the minimum allowable interval between new
   Route Discoveries for this target has been reached.  This limitation
   on the maximum rate of Route Discoveries for the same target is
   similar to the mechanism required by Internet nodes to limit the rate
   at which ARP requests are sent to any single IP address [2].


9.6. Improved Handling of Route Errors

   All nodes SHOULD process all of the Route Error messages they
   receive, regardless of whether the node is the destination of
   the Route Error, is forwarding the Route Error, or promiscuously
   overhears the Route Error.

   Since a Route Error packet names both ends of the hop that is no
   longer valid, any of the nodes receiving the error packet may update
   their Route Caches to reflect the fact that the two nodes indicated
   in the packet can no longer directly communicate.  A node receiving
   a Route Error packet simply searches its Route Cache for any routes
   using this hop.  For each such route found, the route is effectively
   truncated at this hop.  All nodes on the route before this hop are
   still reachable on this route, but subsequent nodes are not.

   An experimental optimization to improve the handling of errors is
   to support the caching of "negative" information in a node's Route
   Cache.  The goal of negative information is to record that a given
   route was tried and found not to work, so that if the same route
   is discovered again shortly after the failure, the Route Cache can
   ignore or downgrade the metric of the failed route.

   We have not currently included this caching of negative information
   in our simulations, since it appears to be unnecessary if nodes also
   promiscuously receive Route Error packets.


9.7. Increasing Scalability

   We recently designed and began experimenting with ways to integrate
   ad hoc networks with the Internet and with Mobile IP [14].  In
   addition to this, we are also exploring ways to increase the
   scalability of ad hoc networks by taking advantage of their
   cooperative nature and the fact that some hierarchy can be imposed
   on an ad hoc network, just be assigning addresses to the nodes in a
   reasonable way.  These ideas are described in a workshop paper [4].









Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 39]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


10. Path-State and Flow-State Mechanisms

   This section describes the current design of our framework for
   supporting better-than-best-effort Quality of Service in DSR
   networks.  The framework dovetails into DSR's existing mechanisms,
   and, like DSR itself, is completely on-demand in nature --- no
   packets are sent unless there is user data to transfer.  The
   framework is based on the introduction of two kinds of soft-state,
   called path-state and flow-state, at the intermediate nodes along the
   path between senders and destinations.

   Taken together, the path-state and flow-state extensions extend the
   Quality of Service provided by DSR networks in the following ways:

    -  They eliminate the need for all data packets to carry a source
       route, increasing the efficiency of the protocol in general.

    -  They provide accurate measurements of the state of the network to
       higher layers protocols for use in adaptation.

    -  They enable senders to explicitly manage the consumption of
       resources across the network.

    -  They enable the network to provide better-than-best-effort
       service via admission control and per-flow resource management.


10.1. Overview

   Path-state allows intermediate nodes to forward packets according to
   a predetermined source route, even when most packets do not include
   the full source route.  Conceptually, the originator of each data
   packet initially includes both a source route and a unique path
   identifier in each packet it sends.  As intermediate nodes forward
   the packet, they cache the source route from the packet, indexed by
   the path identifier.  The source can then send subsequent packets
   carrying only the path identifier, since intermediate nodes will be
   able to forward the packet based on the source route for the path
   that they have cached.

   While path-state allows the elimination of the source route from each
   packet, thereby reducing the overhead of the DSR protocol, it also
   provides a way for sources to monitor the state of each path through
   the network.  When a source wishes to know the characteristics of
   a path through the network, it piggybacks a path-metrics header
   onto any data or control packet traversing the path.  As the
   packet propagates through the network, each intermediate node
   updates the set of path-metrics carried by the packet to reflect
   the local network conditions seen at the node.  These metrics are
   reflected back to the sender by the destination, along with the path



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 40]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   identifier, and enable the sender to track the value of these metrics
   for each of the source routes it is currently using.

   We are currently experimenting with metrics that are easy for nodes
   to measure, that require constant size to represent regardless of
   source route length, and that would enable the sender's network
   layer to provide useful feedback to higher layers on the state of
   the network.  For example, by including ``available bandwidth''
   or ``battery level'' as a metric, senders can load balance
   the consumption of resources across the network.  We have also
   considered the possibility of replacing the TCP congestion control
   algorithm with a ``leaky-bucket'' system controlled by the reflected
   path-metrics --- our measured performance results show this could
   dramatically improve TCP throughput in environments where many
   packets are lost due to packet corruption.  The feedback could also
   be used as inputs to other researcher's systems for improving the
   transport layer, such as Liu and Singh's ATCP [11], or for adaptation
   at higher layers, as in Odyssey [13].

   Flow-state allows a source to differentiate its traffic into
   flows, and then request better-than-best-effort handling for these
   flows.  With the additional information provided by the flow-state,
   the network can provide admission control and promise a specific
   Quality of Service (QoS) to each flow.  Since the ad hoc network may
   frequently change topology, the flow-state mechanisms are directly
   integrated into the routing protocol to minimize their reaction time
   and provide notifications to a flow when the network must break its
   promise for a specific level of QoS.


10.2. Path-State and Flow-State Identifiers

   The metadata that intermediate nodes in the network must process
   is divided into path-state and flow-state, where path-state is
   the fundamental unit of routing information and flow-state is the
   fundamental unit of Quality of Service information.

   Path-state is associated with a particular set of hops through the
   network from some source S to a destination D (i.e., a particular
   source route in the network).  It consists of the information needed
   to route packets along the path, and information about the carrying
   capacity of the path, such as the unused bandwidth along the path or
   the minimum latency of the path.

   Flow-state is specific to a particular class of packets flowing
   between S and D that is routed over a given path.  Flow-state is
   used to record Quality of Service promises that have been made for a
   particular flow, and allows packets from S to D that take the same
   path through the network to be treated differently by intermediate
   nodes.  For example, all the TCP connections between S and D that



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 41]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   take the same path will share the same path-state, but may have
   independent flow-state.  At any point in time, S may use multiple
   paths for its traffic to D and each of these paths may be comprised
   of many flows.  However, a single network layer flow may not be
   multiplexed over different paths.

   To represent paths and flows inside the network, we use a scheme
   inspired by the Virtual Path Index and Virtual Circuit Index of
   ATM networks [23, p.  451].  Paths are identified by the logical
   concatenation of the source node address and a 16-bit path identifier
   where the low 5 bits are 0.  Flows are identified by a path
   identifier where the low 5 bits are used to distinguish between the
   different flows that use the same path.

   This scheme has two main advantages.  First, each source node can
   independently generate globally unique path- and flow-identifiers.
   Second, the hierarchical relation of flow-identifiers to
   path-identifiers means that many flows from the same source node can
   share the same path-state, which reduces the overhead of maintaining
   the routing information.  The drawback is that if a flow must be
   rerouted, its flow identifier will change.  However, when a flow is
   rerouted the QoS metadata must be renegotiated anyway, so changing
   flow identifiers will not create needless additional work in the
   network.


10.3. Path-State Creation, Use, and Maintenance

   The path-state portion of the protocol has two major goals.  The
   first goal is to ensure sufficient state exists at the nodes along a
   path from a source S to a destination D so that packets from S to D
   do not need to carry the complete source route.  The second goal is
   to allow S to discover the characteristics of a particular path to D
   so that it can adapt its sending pattern to the capabilities of the
   path, or even choose a different path entirely.

   The next sections describe how the path-state is created, how the
   characteristics of the path are discovered, and what metrics can be
   used to characterize the path.


10.3.1. Creating Path-State for Routing

   To create the path-state, we assume that Route Discovery proceeds as
   normal in DSR. Once the source node S has obtained a source route to
   the destination D, it begins sending data packets to D as normally
   done in DSR, with each packet carrying a full source route header.
   Internally, S assigns a path-identifier to that particular source
   route and stores the path-identifier in its route cache along with
   the source route.  S then includes the path-identifier as part of the



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 42]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


A -----------------> B -----------------> C -----------------> D

   +-------------+      +-------------+      +-------------+
   |src: A       |      |src: A       |      |src: A       |
   |dst: D       |      |dst: D       |      |dst: D       |
   |path-id: 15  |      |path-id: 15  |      |path-id: 15  |
   |rt: A,(B),C,D|      |rt: A,B,(C),D|      |rt: A,B,C,(D)|
   +-------------+      +-------------+      +-------------+
   |   payload   |      |   payload   |      |   payload   |

        (a) Packet with path identifier and source route.

A -----------------> B -----------------> C -----------------> D

   +-------------+      +-------------+      +-------------+
   |src: A       |      |src: A       |      |src: A       |
   |dst: D       |      |dst: D       |      |dst: D       |
   |path-id: 15  |      |path-id: 15  |      |path-id: 15  |
   +-------------+      +-------------+      +-------------+
   |   payload   |      |   payload   |      |   payload   |

            (b) Packet with path identifier only.


      Figure 2: Path identifiers assigned to a source route by the
   originating node A enable later packets to omit the source route.



   source route header as shown in Figure 2(a).  As each intermediate
   node processes the source route to forward the packet, it also stores
   the source route in its route cache, indexed by the source and
   path-identifier.

   After sending a packet containing both the source route and the
   path-identifier into the network, S can begin sending subsequent
   packets to D without a full source route --- carrying only the
   path-identifier as shown in Figure 2(b).  Each intermediate node
   receiving such a packet queries its route cache to find the route
   the packet is supposed to take, and determines its next hop.  As
   explained in Section 10.5, if the cached source route is not
   available at some intermediate node, S will receive a Route Error and
   can then correct the situation.


10.3.2. Monitoring Characteristics of the Path

   In order to support network layer services such as balancing the
   traffic load across the network, end-systems must have a method for
   determining the characteristics of the paths through the network that



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 43]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   they could use.  While many schemes have been proposed by which the
   end-systems themselves can measure the characteristics of a path
   (e.g., TCP congestion window and RTT calculations [1, 22, 24] and
   SPAND [21]), we hypothesize that, particularly in the in the dynamic
   environment of an ad hoc network, more useful, more accurate, and
   more timely information can be developed by enlisting the aid of the
   nodes along the path to measure the path characteristics.

   We propose that each node can measure the activity around itself,
   and thereby determine information such as:  the mean latency it adds
   to the packets it forwards and the latency variation (jitter); the
   number of additional packets per second it believes it can process;
   or the unused amount of wireless media capacity in the air around
   the node.  Experimentation will be required to discover exactly
   which metrics will prove to be accurately measurable and useful,
   though Section 10.3.3 provides several proposals.  If the metrics
   kept by each node on a path are combined, the result should be a
   characterization of the path that the packet sender can use to
   organize or adapt its offered load.

   To implement this scheme, we first define a new type of extension
   header for DSR than can be piggybacked onto a packet in the same way
   as the existing DSR headers.  This new header is called the path
   metrics header (written as Measure) and conceptually consists of the
   path-identifier of the path along which the metrics are measured,
   the type of the Measure, and the metrics themselves encoded in a TLV
   format (Section 10.6.2).

   Whenever a sender S wishes to measure the characteristics of a path
   it is using, it includes the Measure header in any packet it sends
   along that path, setting the type of the header to record.  As each
   node along the path forwards the packet, it updates the variables
   inside the Measure header with the metrics it has measured locally.
   When the header reaches the final destination D, D sets the type
   of the Measure header to return and piggybacks the header into any
   packet headed back to S. Since the path metrics header includes
   the path-identifier of the path along which it was measured, S can
   include the data into its route cache for future use, and can treat
   the receipt of the path metrics header as a positive acknowledgment
   that the path-state between S and  D for the given path-identifier
   is correctly set up.  This could lead S to cease including source
   routes in the packets it sends along the path, as described in
   Section 10.3.1.

   If we find that it is valuable to immediately provide S with the path
   metrics of every discovered route, we could alter Route Discovery
   slightly to generate this information.  Currently, if an intermediate
   node has a cached route that it can use to answer a Route Request,
   it generates a Route Reply itself.  Instead, we could require it to
   place its proposed route on the Route Request (turning it from a



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 44]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   flood-fill broadcast into a unicast packet) and send the packet to
   the destination so it will measure the metrics of the complete path.
   The destination will then return the metrics to the source along with
   the Route Reply as described above.

      We have been intending to experiment with this alteration to
      Route Discovery for some time, since it offers two benefits,
      even without path-state metrics.  It should decrease the
      number of broken routes returned by Route Discovery since
      each cached route is tested before being returned, and
      it should save us from jeopardizing one data packet for
      every bad route in someone's cache.  The cost is some extra
      latency on Route Discovery.


10.3.3. Candidate Metrics

   In order to limit the additional overhead that collecting and
   distributing path-state metrics will place on the network, all the
   metrics must have the property that the amount of space required to
   express the metric does not increase as the number of hops on the
   path increases.  Experimentation will be required to determine which
   metrics are most accurately measured and most useful, but our initial
   set of candidates includes the following:

    -  Interface queue length --- Our previous work [12] has shown that
       this is a good estimator of local congestion.

    -  Rate of interface queue draining --- When an interface is
       backlogged, the rate at which packets leave the queue directly
       measures the usable capacity of that interface.

    -  Quiet time fraction --- When an interface is not backlogged,
       the usable capacity of the interface can be estimated by
       promiscuously listening to the media and measuring the fraction
       of time during which it is not in use (though this will
       overestimate the capacity).

    -  Fraction Free Air Time --- The fraction of time our interface
       would be able to send a packet.  That is, the fraction of time
       the interface does not sense carrier, is not deferring, and is
       not backed off.  Current experiments show this is an excellent
       predictor of congestion and available capacity.

    -  Forwarding latency and variation --- This can be measured
       as the time between when a packet is received and when it is
       acknowledged by the next hop.






Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 45]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


    -  Unidirectional links --- Paths containing unidirectional links
       are usable, but undesirable as they increase the overhead of
       Route Maintenance.

    -  Packet loss rate --- Signal quality information from the
       interface itself, or the frequency of hop-by-hop retransmission,
       can be used to estimate the loss rate of each link.

    -  Likelihood of path breakage --- Intermediate nodes may know ahead
       of time that they intend to shutdown or move such that paths
       through them will no longer work.

   These metrics all have the property that they can be expressed in
   a single value that each node can measure locally.  As a packet
   with a path metrics header passes through a node, the metrics in
   the header can be updated to reflect the node's metrics using a
   combination function like minimum, maximum, sum, or weighted average
   that produces another single value to replace the one already in
   the header.  This updating will be done at the last possible moment
   before the packet is forwarded, in order to assure the packet has the
   most current metrics on it when it leaves.


10.4. Flow-State Creation, Use, and Maintenance

   The flow-state portion of the protocol enables a sender to obtain
   promises from all nodes along a path to a destination that a
   certain set of resources are available along the path, and that
   the intermediate nodes are committed to making these resources
   available for the particular flow.  This allows a sender to obtain
   better-than-best-effort Quality of Service for a flow by obtaining
   promises from the intermediate nodes to reserve the resources needed
   to provide that QoS.

   Unlike prior QoS work in wired networks, at this point we cannot
   formally characterize or bound exactly what type of services the
   flow-state protocol will be able to offer.  The goal is to provide
   CBR and TCP streams with the ability to specify and obtain a
   minimum bandwidth and delay/jitter bound.  If the environment is
   particularly harsh, it is possible that only best-effort service will
   be offerable.  It is this intuition that leads us to the system of
   promises and notifications.  Experimentally, we hope to determine
   how stable and effective this system will be in a multi-hop ad hoc
   network environment.


10.4.1. Requesting Promises along Existing Paths

   Similar to the use of the path metrics header, at any time a promise
   can be requested or changed along any path an originator is currently



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 46]

INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999



   using.  Once an originating node has created a path-identifier
   for a route through the network, it can request a promise of
   network resources along that route by first generating a new
   flow-identifier to identify the promise.  The originator then fills
   out a flow-request header (written as Flow Request) and inserts it
   into any packet sent along that path.

   Figure 3 shows the conceptual layout of a Flow Request, which
   contains the new path-identifier assigned by the originator, the
   flow-identifier of the promise that this request supersedes (if any),
   the requested lifetime of the promise, and the QoS parameters that
   describe the requested promise itself.  Section 10.6.3 provides the
   detailed packet format.  The use of the minimum and requested fields
   for the QoS parameters differs depending on whether the Flow Request
   is piggybacked on a Route Request or not, as described below.

   When a Flow Request piggybacked on a unicast packet is received by a
   node, the node performs the following steps:

    -  If the node is the destination of the packet, it converts the
       Flow Request into a Measure with type return and uses the current
       values in the desired fields of the Flow Request to populate the
       fields of the Measure.  It then piggybacks the Measure onto any
       packet being returned to the originator.

    -  Else if the intermediate node has available enough resources to
       meet the minimum requested promise in the Flow Request, it:

        *  Sets aside the maximum of its available resources and the
           desired resources.  The set aside resources are held in a
           tentative promise pool until the promise is confirmed, or a
           relatively short timeout expires.

        *  Nodes can recycle resources from listed old flow-id



               +--------------------------------------+
               |  flow-id         |     old flow-id   |
               +--------------------------------------+
               |              lifetime                |
               +--------------------------------------+
               | capacity   |    min   |    desired   |
               |  latency   |    min   |    desired   |
               |variation   |    min   |    desired   |
               |     loss   |    min   |    desired   |
               +--------------------------------------+


        Figure 3: Conceptual layout of the Flow Request header.



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 47]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


        *  Updates the desired fields of the Flow Request to reflect
           the resources set aside (there is questionable value in a
           down stream node allocating more resources to a flow than an
           upstream node can currently handle).

        *  Forward the packet and piggybacked Flow Request to the next
           node on the path.

    -  Else, the node does not have enough resources to meet the
       minimum requested promise, so it sends the originator a Route
       Error piggybacked with a Measure reflecting the minimum of the
       current values of the desired fields in the Flow Request and the
       available resources.  The type field is set to refused.  Such a
       Measure enables the originator to learn three things:  that its
       requested cannot be satisfied along the given path; the identity
       of the bottleneck node; and the available resources up to and
       through the bottleneck node.

   When the originating node receives a Measure header of type return
   for a flow on which it has an outstanding Flow Request, it accepts
   the promised level of service by changing the type of the Measure
   header to confirm and piggybacking the header on any packet going
   along the flow.  This informs the intermediate nodes to move the set
   aside resources from the tentative promise pool to the allocated
   pool, and enables upstream nodes to free any set aside resources in
   excess of the capacity of a bottleneck downstream node.

   The use of the old flow-id to recycle resources is important for two
   reasons.  First, it enables an originator to attempt to increase or
   decrease the amount of a current promise without losing the resources
   it already has promised.  Second, both packet loss and the expanding
   ring search of Route Discovery may result in several Flow Requests
   being sent for the same flow.  If subsequent Flow Requests for a
   flow were not able to notify intermediate nodes that they can reuse
   resources set aside while processing earlier Flow Requests, the
   network could quickly reach a state where admissible flows are being
   needlessly rejected.


10.4.2. Requesting Promises as Part of Route Discovery

   The scheme for requesting promises described in the previous section
   has the advantage that it enables an originator to request or update
   a promise for a flow along any route currently in its route cache,
   regardless of how it obtained the route.  For the common case in
   which a node wishes to obtain a resource promise for a new flow to
   a previously unknown destination, we can integrate the flow request
   with the Route Discovery for the destination.





Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 48]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   Integrating the flow request with Route Discovery enables us to avoid
   the inefficiency of discovering routes that will not be usable by the
   flow due to insufficient resources.  The integration of flow requests
   with Route Discovery also allows us to avoid a common pitfall of
   QoS schemes that layer a reservation signaling protocol on top of
   a unicast routing algorithm --- schemes without tight integration
   will refuse admissible flows whenever the unicast routing algorithm
   directs the request packets into a congested area of the network,
   unless the signaling protocol also provides a method to backtrack
   the request and route around the congested area.  Utilizing the same
   mechanisms currently used in Route Discovery, we can avoid the need
   for backtracking.

   We call the combination of flow requests with Route Discovery
   QoS-guided Route Discovery, which originating nodes can invoke simply
   by piggybacking a Flow Request on the Route Request.  Each node
   receiving the Flow Request uses the same algorithm described in
   Section 10.4.1, with two exceptions:

    -  Nodes silently discard the Route Request if they can not meet
       minimum requirements

    -  Unless the Route Request indicates that replying from cache is
       forbidden, nodes with a cached route to destination unicast the
       Route Request along the cached route.

   A node requiring a route with a QoS promise uses the following
   algorithm.  First, it sends a Route Request that permits intermediate
   nodes to reply from cache.  If the network is uncongested, this
   should frequently and quickly succeed in returning both a Route Reply
   and a Measure describing the available QoS along the discovered
   path.  If after a timeout, the originating node has not received a
   Route Reply, it begins another Route Discovery, this time forbidding
   replies from cache, which will force an exploration of all feasible
   paths to the destination.

   This scheme does risk an implosion of unicast Requests at the target
   of the Route Discovery (e.g., if target is a popular server to which
   many nodes have cached routes).  At the cost of additional complexity
   and soft-state, it would be possible to add hold-downs at the nodes
   surrounding the target so that only the first few Requests are
   forwarded towards the target.


10.4.3. Providing Notifications of Changing Path Metrics

   When a node detects that it must break a promise, it must notify the
   node to which it made that promise.  It is an open question how the
   now reduced resources should be distributed among the flows.  We




Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 49]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   currently pick the minimum set of promises to break that leave the
   other promises unchanged.

   The difficulty in providing notification of a changed path metric is
   getting this information back to the source.  When promise must be
   broken at a node B, it sends a Measure to the originator indicating
   what resources are now available.  The use of Measure headers to
   determine the currently available resources along a path is more
   problematic, however, as for every Measure sent by the originator,
   the destination must send a response containing the measured metrics.

   If the traffic is TCP, the overhead of the responses are low, as
   they can be piggybacked on the ACK stream.  For one-way CBR traffic
   though, introducing the overhead of a reverse stream to carry the
   changing metrics could be severe.

   If the overhead of the responses becomes a problem, it may be
   possible to implement a enhanced piggyback mechanism.  The approach
   is based on the fact that although no work has been exerted to create
   hop-by-hop routing information at each node, chances are good that
   each node can determine a next-hop for packets headed to any known
   destination by simply examining its route cache.  By piggybacking
   the Measure header for one hop onto any packet that is headed to
   that next-hop, we can cheaply create a reverse flow of information
   that will eventually reach the originator of the Measure.  Each
   node who receives a Measure with a type of return simply piggybacks
   the Measure for one-hop on packets that seem to be flowing the
   right direction back to the source.  To insure the timeliness of
   the information, each Measure being returned to an originator could
   include a deadline by which the information is supposed to reach the
   originator.  If it appears that hop-by-hop propagation will result
   in missing the deadline, the Measure can be unicast as a first-class
   packet to the originator.


10.5. Expiration of State from Intermediate Nodes

   Since there is no guarantee that either the source or destination of
   a packet flow will be able to communicate with all of the nodes that
   carried the flow when they wish to terminate the flow, there must
   be time-based expiration mechanism by which intermediate nodes can
   purge the path-state and flow-state from their caches and reclaim the
   resources set aside to maintain it.  However, if intermediate nodes
   were to purge the state of an active flow, the intermediate nodes
   would find themselves with packets to forward that do not contain
   a source route, but only contain a flow-identifier that references
   state they no longer hold.  Since intermediate nodes do not
   necessarily know the timing with which the sender originates packets,
   an inactivity timer alone would have to be set very conservatively to
   prevent purging the path-state of low bit-rate connections.



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 50]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   To solve the expiration problem, we take advantage of the relatively
   ``soft'' nature of the path-state and flow-state.  When the state
   is created, the source node specifies a time after which it should
   be discarded (This time will typically be on the order of a hundred
   seconds).  The source node can thereby estimate how often it must
   refresh the state, for example, by sending packets that contain a
   full source route on them.  Should the state have somehow expired
   at an intermediate node when a packet labeled with a flow or path
   identifier arrives, the intermediate node can return a Route Error to
   the source node specifying ``missing state information'' as the cause
   of the Error and elicit the sender to refresh the missing state.

   Since all path-state information is guaranteed to have expired from
   the network after a bounded amount of time, nodes can safely and
   unambiguously reuse path- and flow-identifiers after that period.


10.6. Packet Formats

10.6.1. Identifier Option

   Path and flow identifiers are carried as an option inside the
   Hop-by-Hop options header.  This option MAY NOT appear more than once
   in a single Hop-by-Hop Options header.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Option Type  | Option Length |     Path-ID         | Flow-ID |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      Option Type

         ???.  A node that does not understand this option should ignore
         this option and continue processing the packet, and the Option
         Data does not change en-route (the top three bits are 000).

      Option Length

         8-bit unsigned integer.  Length of the option, in octets,
         excluding the Option Type and Option Length fields.

      Path-ID

         The identifier assigned to this path by the node listed as the
         IP Source Address (Section 10.2).







Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 51]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


      Flow-ID

         The identifier assigned by the node listed as the IP Source
         Address to a particular flow along the path identified by the
         Path-ID. If this portion is 0, the option names a path, but not
         a particular flow.

   Discussion:  This encoding of the path and flow identifiers will cost
   8 bytes of additional header overhead in a data packet with no other
   extensions or options (4 bytes for the Hop-by-Hop options header, and
   4 bytes for the identifier option).  A more compact encoding would be
   to define that, in a DSR network, an IP destination address with a
   first octet of 127 actually encodes the path and flow identifiers as
   follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |0 1 1 1 1 1 1 1|     reserved    |     Path-ID       | Flow-ID |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The DSR module of the final destination would replace the IP
   destination address with its actual value before passing the packet
   up the stack for further processing.

   This encoding has the advantage that it requires no additional
   overhead in a data packet.  The disadvantage is that if the packet
   was somehow received by a DSR-unaware node without first being
   processed by a DSR gateway node [4], the DSR-unaware node will either
   drop the packet or will attempt to receive it locally (since the IP
   destination address belongs to the loopback subnet).


10.6.2. Path-Metrics Option

   Path-metrics are carried as an option inside the Hop-by-Hop options
   header.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Option Type | Option Length |       Path-ID       | Flow-ID |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      Type     |  Metrics...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+








Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 52]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


      Option Type

         ???.  A node that does not understand this option should ignore
         this option and continue processing the packet, and the Option
         Data does change en-route (the top three bits are 001).

      Option Length

         8-bit unsigned integer.  Length of the option, in octets,
         excluding the Option Type and Option Length fields.

      Path-ID and Flow-ID

         The path identifier of the path that the metrics correspond
         to.  If the Path-Metrics Option Type equals Measure, then the
         Path-ID and Flow-ID fields MUST equal those in any Identifier
         Option carried in the Hop-by-Hop Options Header.

      Type

         One of

            Measure

               Each node processing the option should update the metrics
               to reflect the conditions at that node.

            Reply

               The metrics in this option SHOULD NOT be modified by any
               intermediate node.  They represent the metrics measured
               along the identified path.

            Confirm

               The metrics in this option MUST NOT be modified by any
               intermediate node.  They represent a confirmation by
               the sender that will transmit traffic conforming to the
               listed Quality of Service metrics along the identified
               flow.

      Metrics

         The individual path-metrics, encoded as described in
         Section 10.6.4.  Unknown metrics SHOULD be ignored.  If a
         single value is provide for the metric, it MUST be interpreted
         as the metrics value.  If two values are provided for the
         metric, they MUST be interpreted as the range of values taken
         by the metric (low value first).  It is undefined for there to
         be more than two values for the metric.



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 53]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


10.6.3. Flow Request Option

   Flow-requests are carried as an option inside the Hop-by-Hop options
   header.  They allow a sender to request that intermediate nodes
   reserve sufficient resources for a flow to provide that flow with the
   QoS characteristics described by the metrics.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Option Type | Option Length |            Lifetime           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         old         |   old   |         new         |   new   |
   |       Path-ID       | Flow-ID |       Path-ID       | Flow-ID |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Metrics ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


      Option Type

         ???.  A node that does not understand this option should ignore
         this option and continue processing the packet, and the Option
         Data does change en-route (the top three bits are 001).

      Option Length

         8-bit unsigned integer.  Length of the option, in octets,
         excluding the Option Type and Option Length fields.

      old Path-ID and old Flow-ID

         The flow identifier provide in a previous request which this
         request supersedes.

      new Path-ID and new Flow-ID

         The flow identifier that will be used with to identify the
         packets that should receive the QoS described by the included
         metrics.

      Metrics

         The metrics that characterize the desired QoS, encoded as
         described in Section 10.6.4.  Unknown metrics SHOULD be
         ignored.  If a range of values are provided for a metric, they
         MUST be interpreted as the minimum acceptable value and the
         desired value.





Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 54]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


10.6.4. Encoding Path-Metrics

   Each path-metric is encoded in a modified Type-Length-Value form as

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Type       |R|   Length    |     Data...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


      Type

         The type of metric

      R bit

         If 0, the data is a list of discrete values the metric can
         or did take.  If 1, the data represent a range of values
         the metric can or did take.  If a single metric value is
         supplied, the range is assumed to be 0 <= metric <= value.  If
         two metric values are supplied, the range is assumed to be
         value1 <= metric <= value2.

      Option Length

         8-bit unsigned integer.  Length of the metric, in octets,
         excluding the Type and Length fields.

   The currently defined metric types follow:


Padding

   Type:  0

   The padding metric is special in that it contains no length field and
   no data.


Available Capacity

   Type:  1










Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 55]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   Data encoded as

    0                   1
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      Mantissa       |  Shift  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   where the value is (Mantissa << Shift) bits per second.


Delay and Delay Variation

   Data encoded as

    0                   1
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |            Delay              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Type:  2 - Delay

   The value is Delay milliseconds.

   Type:  3 - Delay Variation

   The value is the standard deviation of Delay, in milliseconds.


Link Bidirectionality

   Type:  16 - Link Bidirectionality

   Data encoded as

    0                   1
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | # Uni-links   | #Explicit ACK |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   where # Uni-links is the number of uni-directional links on the path,
   and # Explicit ACK is the number of hops which require explicit
   acknowledgments.








Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 56]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


Packet Loss Rate

   Data encoded as

    0                   1
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   # Packets Lost              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   where the loss rate is (# Packets Lost / 2 ** 16).

   Type:  17 - Path Packet Loss Rate

   The value is the expected packet loss rate of the entire path

   Type:  18 - Worst Loss Rate

   The value is the expected packet loss rate of the single worst link
   in the path.

































Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 57]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


11. Constants


   BROADCAST_JITTER                        10   milliseconds

   MAX_ROUTE_LEN                           15   nodes

   Interface Indexes
       IF_INDEX_INVALID                  0x7F
       IF_INDEX_MA                       0x7E
       IF_INDEX_ROUTER                   0x7D

   Route Cache
       ROUTE_CACHE_TIMEOUT                300   seconds

   Send Buffer
       SEND_BUFFER_TIMEOUT                 30   seconds

   Request Table
       MAX_REQUEST_ENTRIES                 32   nodes
       MAX_REQUEST_IDS                      8   identifiers
       MAX_REQUEST_REXMT                   16   retransmissions
       MAX_REQUEST_PERIOD                  10   seconds
       REQUEST_PERIOD                     500   milliseconds
       RING0_REQUEST_TIMEOUT               30   milliseconds

   Retransmission Buffer
       DSR_RXMT_BUFFER_SIZE                50   packets

   Retransmission Timer
       DSR_MAXRXTSHIFT                      2






















Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 58]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


12. IANA Considerations

   This document proposes the use of the Destination Options header and
   the Hop-by-Hop Options header, originally defined for IPv6, in IPv4.
   The Next Header values indicating these two extension headers thus
   must be reserved within the IPv4 Protocol number space.

   Furthermore, this document defines four new types of destination
   options, each of which must be assigned an Option Type value:

    -  The DSR Route Request option, described in Section 7.1.1

    -  The DSR Route Reply option, described in Section 7.2.1

    -  The DSR Route Error option, described in Section 7.2.2

    -  The DSR Acknowledgment option, described in Section 7.2.3

   DSR also requires a routing header Routing Type be allocated for the
   DSR Source Route defined in Section 7.3.

   In IPv4, we require two new protocol numbers be issued to identify
   the next header as either an IPv6-style destination option, or an
   IPv6-style routing header.  Other protocols can make use of these
   protocol numbers as nodes that support them will processes any
   included destination options or routing headers according to the
   normal IPv6 semantics.


























Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 59]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


13. Security Considerations

   This document does not specifically address security concerns.  This
   document does assume that all nodes participating in the DSR protocol
   do so in good faith and with out malicious intent to corrupt the
   routing ability of the network.  In mission-oriented environments
   where all the nodes participating in the DSR protocol share a
   common goal that motivates their participation in the protocol, the
   communications between the nodes can be encrypted at the physical
   channel or link layer to prevent attack by outsiders.











































Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 60]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


Location of DSR Functions in the ISO Reference Model

   When designing DSR, we had to determine at what level within the
   protocol hierarchy to implement source routing.  We considered two
   different options:  routing at the link layer (ISO layer 2) and
   routing at the network layer (ISO layer 3).  Originally, we opted to
   route at the link layer for the following reasons:

    -  Pragmatically, running the DSR protocol at the link layer
       maximizes the number of mobile nodes that can participate in
       ad hoc networks.  For example, the protocol can route equally
       well between IPv4 [17], IPv6 [6], and IPX [7] nodes.

    -  Historically, DSR grew from our contemplation of a multi-hop ARP
       protocol [8, 9] and source routing bridges [15].  ARP [16] is a
       layer 2 protocol.

    -  Technically, we designed DSR to be simple enough that that it
       could be implemented directly in network interface cards, well
       below the layer 3 software within a mobile node.  We see great
       potential for DSR running between clouds of mobile nodes around
       fixed base stations.  DSR would act to transparently fill in the
       coverage gaps between base stations.  Mobile nodes that would
       otherwise be unable to communicate with the base station due to
       factors such as distance, fading, or local interference sources
       could then reach the base station through their peers.

   Ultimately, however, we decided to specify DSR as a layer 3 protocol
   since this is the only layer at which we could realistically support
   nodes with multiple interfaces of different types.























Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 61]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


Implementation Status

   We have implemented Dynamic Source Routing (DSR) under the
   FreeBSD 2.2.7 operating system running on Intel x86 platforms.
   FreeBSD is based on a variety of free software, including 4.4 BSD
   Lite from the University of California, Berkeley.

   During the 7 months from August 1998 to February 1999, we designed
   and implemented a full-scale physical testbed to enable the
   evaluation of ad hoc network performance in the field.  The last
   week of February and the first week of March included demonstrations
   of this testbed to a number of our sponsors and partners, including
   Lucent Technologies, Bell Atlantic, and DARPA. A complete description
   of the testbed is available as a Technical Report [12].

   The software is currently being ported to FreeBSD 3.3.

   Implementors notes:

    -  Added field to Route Error

































Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 62]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


Acknowledgments

   The protocol described in this draft has been designed within
   the CMU Monarch Project, a research project at Carnegie Mellon
   University which is developing adaptive networking protocols and
   protocol interfaces to allow truly seamless wireless and mobile node
   networking [10, 19].  The current members of the CMU Monarch Project
   include:

    -  Robert V. Barron

    -  Josh Broch

    -  Yih-Chun Hu

    -  Jorjeta Jetcheva

    -  David B. Johnson

    -  Qifa Ke

    -  David A. Maltz































Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 63]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


References

    [1] M. Allman, V. Paxson, and W. Stevens.  Tcp congestion control.
        Internet Request For Comments RFC 2581, April 1999.

    [2] R. Braden, editor.  Requirements for Internet Hosts --
        Communication Layers.  RFC 1122, October 1989.

    [3] Scott Bradner.  Key words for use in RFCs to Indicate
        Requirement Levels.  RFC 2119, March 1997.

    [4] Josh Broch, David A. Maltz, and David B. Johnson.  Supporting
        Hierarchy and Heterogeneous Interfaces in Multi-Hop Wireless
        Ad Hoc Networks.  In Proceedings of the Workshop on Mobile
        Computing held in conjunction with the International Symposium
        on Parallel Architectures, Algorithms, and Networks, pages
        370--375, Perth, Australia, June 1999.

    [5] M. Scott Corson and Joe Macker.  Mobile Ad hoc Networking
        (MANET): Routing Protocol Performance Issues and Evaluation
        Considerations howpublished = RFC 2501, month = jan, year =
        1999.

    [6] Stephen E. Deering and Robert M. Hinden.  Internet Protocol,
        version 6 (IPv6) Specification.  RFC 2460, December 1998.

    [7] IPX Router Specification. Novell Part Number 107-000029-001,
        Document Version 1.30, March 1996.

    [8] David B. Johnson.  Routing in Ad Hoc Networks of Mobile Hosts.
        In Proceedings of the IEEE Workshop on Mobile Computing Systems
        and Applications, pages 158--163, December 1994.

    [9] David B. Johnson and David A. Maltz.  Dynamic Source Routing in
        Ad Hoc Wireless Networks.  In Mobile Computing, edited by Tomasz
        Imielinski and Hank Korth, chapter 5, pages 153--181. Kluwer
        Academic Publishers, 1996.

   [10] David B. Johnson and David A. Maltz.  Protocols for Adaptive
        Wireless and Mobile Networking.  IEEE Personal Communications,
        3(1):34--42, February 1996.

   [11] Jian Liu and Suresh Singh.  Atcp:  Tcp for mobile ad hoc
        networks.  Available from web page???  Personal Communication,
        June 1999.

   [12] David A. Maltz, Josh Broch, and David B. Johnson.  Experiences
        Designing and Building a Multi-Hop Wireless Ad Hoc Network
        Testbed.  Technical Report 99-116, School of Computer Science,
        Carnegie Mellon University, March 1999.



Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 64]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


   [13] Brian D. Noble, M. Satyanarayanan, Dushyanth Narayanan,
        Eric J. Tilton, Jason Flinn, and Kevin R. Walker.  Agile
        Application-Aware Adaptation for Mobility.  In Proceedings of
        the 16th ACM Symposium on Operating System Principles, pages
        276--287, St. Malo, France, October 1997.

   [14] Charles Perkins, editor.  IP Mobility Support.  RFC 2002,
        October 1996.

   [15] Radia Perlman.  Interconnections:  Bridges and Routers.
        Addison-Wesley, Reading, Massachusetts, 1992.

   [16] David C. Plummer.  An Ethernet address resolution protocol:
        Or converting network protocol addresses to 48.bit Ethernet
        addresses for transmission on Ethernet hardware.  RFC 826,
        November 1982.

   [17] J. Postel.  Internet Protocol.  RFC 791, September 1981.

   [18] J. Postel.  Transmission Control Protocol.  RFC 793, September
        1981.

   [19] The CMU Monarch Project.  http://www.monarch.cs.cmu.edu/.
        Computer Science Department, Carnegie Mellon University.

   [20] J. Reynolds and J. Postel.  Assigned Numbers.  RFC 1700, October
        1994.

   [21] Srinivasan Seshan, Mark Stemm, and Randy H. Katz.  Spand:
        Shared passive network performance discovery.  In Proceedings of
        the USENIX Symposium on Internet Technologies and Systems, pages
        135--146, dec 1997.

   [22] W. Richard Stevens.  TCP/IP IIlustrated, The Protocols,
        volume 1.  Addison-Welsley, 1994.

   [23] Andrew S. Tannenbaum.  Computer Networks.  Prentice Hall, third
        edition, 1996.

   [24] Gary R. Wright and W. Richard Stevens.  TCP/IP IIlustrated, The
        Implementation, volume 2.  Addison-Welsley, 1995.












Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 65]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


Chair's Address

   The Working Group can be contacted via its current chairs:

        M. Scott Corson
        Institute for Systems Research
        University of Maryland
        College Park, MD  20742
        USA

        Phone:  +1 301 405-6630
        Email:  corson@isr.umd.edu


        Joseph Macker
        Information Technology Division
        Naval Research Laboratory
        Washington, DC  20375
        USA

        Phone:  +1 202 767-2001
        Email:  macker@itd.nrl.navy.mil































Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 66]


INTERNET-DRAFT    The Dynamic Source Routing Protocol    22 October 1999


Authors' Addresses

   Questions about this document can also be directed to the authors:

        Josh Broch
        Carnegie Mellon University
        Electrical and Computer Engineering
        5000 Forbes Avenue
        Pittsburgh, PA  15213-3890
        USA

        Phone:  +1 412 268-3056
        Fax:    +1 412 268-7196
        Email:  broch@cs.cmu.edu


        David B. Johnson
        Carnegie Mellon University
        Computer Science Department
        5000 Forbes Avenue
        Pittsburgh, PA  15213-3891
        USA

        Phone:  +1 412 268-7399
        Fax:    +1 412 268-5576
        Email:  dbj@cs.cmu.edu


        David A. Maltz
        Carnegie Mellon University
        Computer Science Department
        5000 Forbes Avenue
        Pittsburgh, PA  15213-3891
        USA

        Phone:  +1 412 268-3621
        Fax:    +1 412 268-5576
        Email:  dmaltz@cs.cmu.edu















Broch, Johnson, and Maltz        Expires 22 April 2000         [Page 67]
