X = 2  mod n
K = Y  mod n

cs-encryption-iv    = SHA1( K || "A" || H )
sc-encryption-iv    = SHA1( K || "B" || H )
cs-encryption-key-1 = SHA1( K || "C" || H )
cs-encryption-key-2 = SHA1( K || cs-encryption-key-1 )
cs-encryption-key   = cs-encryption-key-1 || cs-encryption-key-2
sc-encryption-key-1 = SHA1( K || "D" || H )
sc-encryption-key-2 = SHA1( K || sc-encryption-key-1 )
sc-encryption-key   = sc-encryption-key-1 || sc-encryption-key-2
cs-integrity-key    = SHA1( K || "E" || H )
sc-integrity-key    = SHA1( K || "F" || H )

r = (g  mod p) mod q

Y = 2  mod n

K = X  mod n

s = (k  (SHA1(h) + xr)) mod q

YVwKz6S7KkYyDA==
YSZlk0bJI4BKiA8Ju6Yh0DAAAAAUScKvxfqPCm2cdnNyzD7sgmUxC1E=
client-msg-1     = [azname] authname diffie-hellman-X

server-msg-1     = dss-public-key diffie-hellman-Y
                        ssecmask sbuflen dss-signature

client-msg-2     = client-blob


authname         = string
                        ;; interpreted as UTF-8 [UTF-8]

azname           = string
                        ;; interpreted as UTF-8 [UTF-8]

cbuflen          = 3OCTET
                        ;; Big endian binary unsigned integer
                        ;; max length of client read buffer
cli-hmac         = 20OCTET

client-blob      = 8*OCTET
                        ;; encrypted version of client-encrypted

client-encrypted = csecmask cbuflen passphrase cli-hmac *NUL
                        ;; MUST be multiple of DES block size

csecmask         = OCTET
                        ;; client selected protection layer

diffie-hellman-X = mpint

diffie-hellman-Y = mpint

dss-g            = mpint

dss-p            = mpint

dss-public-key   = length NUL NUL NUL %x07 "ssh-dss"
                        dss-p dss-q dss-g dss-y
                        ;; length is total length of remainder
                        ;; as defined in [SSH-TRANS]

dss-q            = mpint

dss-r            = mpint

dss-signature    = length NUL NUL NUL %x07 "ssh-dss"
                        dss-r dss-s
                        ;; length is total length of remainder

dss-s            = mpint

dss-y            = mpint

length           = 4OCTET
                        ;; binary number, big endian format (MSB first)

mpint            = length *OCTET
                        ;; length specifies number of octets
                        ;; see section 1 for detailed mpint definition

passphrase       = string
                        ;; At least 64 octets MUST be supported
sbuflen          = 3OCTET
                        ;; Big endian binary unsigned integer
                        ;; max length of server read buffer

ssecmask         = OCTET
                        ;; server protection layer mask

string           = length *OCTET
                        ;; the length determines the number of octets
                        ;; OCTETs are interpreted as UTF-8

NUL              = %x00  ;; US-ASCII NUL character

g = h          mod p  where h is any number less than p - 1 such

              (p - 1)/q
        that h           is greater than 1.

y = g  mod p  and represents the public key.

r = (g  mod p) mod q

              -1
s = (k  (SHA1(m) + xr)) mod q

w  = s   mod q

u1 = (SHA1(m) * w) mod q
u2 = (rw) mod q

                u1    u2
v  = ((g   * y  ) mod p) mod q

X = g  mod n

Y = g  mod n

           y
K = X  mod n

K = Y  mod n

C  = E  (D  (E  (P  XOR C   )))
         i    K3  K2  K1  i      i-1

P  = C    XOR D  (E  (D  (C )))
         i    i-1      K3  K2  K1  i

