CRED_x = {
     1:  1,
    -1:  4,
    -2:  h'b1a3e89460e88d3a8d54211dc95f0b90
           3ff205eb71912d6db8f4af980d2db83a',
    "subject name" : "42-50-31-FF-EF-37-32-39"
EAD = (
     type : int,
     1* ext_authz_data : any,
PRK = Extract( salt, IKM )
PRK_2e = HMAC-SHA-256( salt, G_XY )

PRK_3e2m = PRK_2e.

PRK_4x3m = PRK_3e2m.

G_XY = X25519( Y, G_X ) = X25519( X, G_Y )
OKM = EDHOC-KDF( PRK, transcript_hash, label, length )
          = Expand( PRK, info, length )

info = [
      edhoc_aead_id : int / tstr,
      transcript_hash : bstr,
      label : tstr,
      length : uint
label_context = (
     label : tstr,
     context : bstr,
TH_4 = H( TH_3, CIPHERTEXT_3 )

PRK_4x3m = Extract( nonce, PRK_4x3m )

bstr_identifier = bstr / int

message_1 = (
     ? C_1 : null,
     METHOD_CORR : int,
     SUITES_I : [ selected : suite, supported : 2* suite ] / suite,
     G_X : bstr,
     C_I : bstr_identifier,
     ? EAD ; EAD_1
suite = int

message_2 = (
     data_2,
     CIPHERTEXT_2 : bstr,
data_2 = (
     ? C_I : bstr_identifier,
     G_Y : bstr,
     C_R : bstr_identifier,
message_3 = (
     data_3,
     CIPHERTEXT_3 : bstr,
data_3 = (
     ? C_R : bstr_identifier,
error = (
     ? C_x : bstr_identifier,
     ERR_CODE : int,
     ERR_INFO : any
message_4 = (
     data_4,
     CIPHERTEXT_4 : bstr,
data_4 = (
     ? C_I : bstr_identifier,
bstr_identifier = bstr / int

suite = int

message_1 = (
     ? C_1 : null,
     METHOD_CORR : int,
     SUITES_I : [ selected : suite, supported : 2* suite ] / suite,
     G_X : bstr,
     C_I : bstr_identifier,
     ? EAD ; EAD_1
message_2 = (
     data_2,
     CIPHERTEXT_2 : bstr,
data_2 = (
     ? C_I : bstr_identifier,
     G_Y : bstr,
     C_R : bstr_identifier,
message_3 = (
     data_3,
     CIPHERTEXT_3 : bstr,
data_3 = (
     ? C_R : bstr_identifier,
message_4 = (
     data_4,
     CIPHERTEXT_4 : bstr,
data_4 = (
     ? C_I : bstr_identifier,
error = (
     ? C_x : bstr_identifier,
     ERR_CODE : int,
     ERR_INFO : any
info = [
      edhoc_aead_id : int / tstr,
      transcript_hash : bstr,
      label : tstr,
      length : uint
message_1 =
PRK_2e = HMAC-SHA-256(salt, G_XY)

data_2 =
TH_2 = H( H(message_1), data_2 ), as a CBOR Sequence of these 2 data
ID_CRED_R = { 34 : COSE_CertHash }. In this example, the hash
ID_CRED_R =
A_2m =
M_2 =
KEYSTREAM_2 = HKDF-Expand( PRK_2e, info, length ), where length is
message_2 =
PRK_4x3m = HMAC-SHA-256 (PRK_3e2m, G_IY)

ID_CRED_I = { 34 : COSE_CertHash }. In this example, the hash
ID_CRED_I =
M_3 =
message_3 =
TH_4 = H( TH_3, CIPHERTEXT_3 ), as a CBOR Sequence of these 2 data
info_ms = [
    10,
    h'3B69A67FEC7E736CC1A9526CDA0002D409F5B9EA0A2BE96051A6E30D9305FD51',
    "OSCORE Master Secret",
    16
info_salt = [
    10,
    h'3B69A67FEC7E736CC1A9526CDA0002D409F5B9EA0A2BE96051A6E30D9305FD51',
    "OSCORE Master Salt",
    8
message_1 =
PRK_2e = HMAC-SHA-256(salt, G_XY)

PRK_3e2m = HKDF-Extract( PRK_2e, G_RX ), where G_RX is the ECDH
data_2 =
TH_2 = H( H(message_1), data_2 ), as a CBOR Sequence of these 2 data
ID_CRED_R =
A_2m =
ID_CRED_R = { 4 : kid_R }, only the byte string kid_R is conveyed in
KEYSTREAM_2 = HKDF-Expand( PRK_2e, info, length ), where length is
message_2 =
PRK_4x3m = HMAC-SHA-256 (PRK_3e2m, G_IY).

ID_CRED_I =
ID_CRED_I = { 4 : kid_I }, only the byte string kid_I is conveyed in
message_3 =
TH_4 = H( TH_3, CIPHERTEXT_3 ), as a CBOR Sequence of these 2 data
info_ms = [
    10,
    h'7CCFDEDC2C10CA0356E957B9F6A592E0FA74DB2AB54F59244096F9A2AC56D207',
    "OSCORE Master Secret",
    16
info_salt = [
    10,
    h'7CCFDEDC2C10CA0356E957B9F6A592E0FA74DB2AB54F59244096F9A2AC56D207',
    "OSCORE Master Salt",
    8
