

draft-shepard-tcp-4-packets-3-buff-00.txt                    Tim Shepard
Internet Draft                                           Craig Partridge
                                                        BBN Technologies
                                                               July 1997

This Internet Draft expires February 4, 1998.



      When TCP Starts Up With Four Packets Into Only Three Buffers


Status of this Memo

   This document is an Internet-Draft.  Internet-Drafts are working
   documents of the Internet Engineering Task Force (IETF), its areas,
   and its working groups.  Note that other groups may also distribute
   working documents as Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   To view the entire list of current Internet-Drafts, please check the
   "1id-abstracts.txt" listing contained in the Internet-Drafts Shadow
   Directories on ftp.is.co.za (Africa), ftp.nordu.net (Europe),
   munnari.oz.au (Pacific Rim), ds.internic.net (US East Coast), or
   ftp.isi.edu (US West Coast).

   This memo provides information for the Internet community.  This memo
   does not specify an Internet standard of any kind. Distribution of
   this memo is unlimited.

Background and Abstract

   Sally Floyd has proposed that TCPs start their initial slow start by
   sending as many as four packets (instead of the usual one packet) as
   a means of getting TCP up-to-speed faster.  (Slow starts instigated
   due to timeouts would still start with just one packet.)  Starting
   with more than one packet might reduce the start-up latency over
   long-fat pipes by two round-trip times.  This proposal is documented
   further in [1] and in [2] and we assume the reader is familiar with
   the details of this proposal.

   On the end2end-interest mailing list, concern was raised that in the
   (allegedly common) case where a slow modem is served by a router
   which only allocates three buffers per modem (one buffer being



Shepard & Partridge                                             [Page 1]

draft-shepard-tcp-4-packets-3-buff-00.txt                      July 1997


   transmitted while two packets are waiting), that starting with four
   packets would not be good because the fourth packet is sure to be
   dropped.

   Vern Paxson replied with the comment (among other things) that the
   four-packet start is no worse than what happens after two round trip
   times in normal slow start, hence no new problem is introduced by
   starting with as many as four packets.   If there is a problem with a
   four-packet start, then the problem already exists in a normal slow-
   start startup after two round trip times when the slow-start
   algorithm will release into the net four closely spaced packets.

   This memo is to document that in the case of a 9600 bps modem at the
   edges of a fast Internet where there are only 3 buffers before the
   modem (and the fourth packet of a four-packet start will surely be
   dropped), no significant degradation in performance is experienced
   with a four-packet start when compared with a normal slow start
   (which starts with one packet).

Scenario and experimental setup

   The scenario studied and simulated consists of three links between
   the source and sink.  The first link is a 100 Mbps link with no
   delay. (It was included to have a means of logging the returning ACKs
   at the time they would be seen by the sender.)  The second link is a
   1.5 Mbps link with a 25 ms one-way delay.  The third link is a 9600
   bps link with a 150 ms one-way delay.  The queue limits for the
   queues at each end of the first two links were set to 100 (a value
   sufficiently large that this limit was never a factor).  The queue
   limits at each end of the 9600 bps link were set to 3 packets (which
   can hold at most two packets while one is being sent).

   Version 1.2a2 of the the NS simulator (available from LBL) was used
   to simulate both one-packet and four-packet starts for each of the
   available TCP alogorithms (tahoe, reno, sack, fack) and the
   conclusion reported here is independent of which TCP algorithm is
   used (in general, we believe).  The "tahoe" module will be used to
   illustrate what happens in this memo.  In the 4-packet start cases,
   the "window-init" variable was set to 4, and the TCP implementations
   were modified to use the value of the window-init variable only on
   connection start, but to set cwnd to 1 on other instances of a slow-
   start. (The tcp.cc module as shipped with ns-1.2a2 would use the
   window-init value in all cases.)

   The packets in simulation are 1024 bytes long for purposes of
   determining the time it takes to transmit them through the links.
   (The TCP modules included with the LBL NS simulator do not simulate
   the TCP sequence number mechanisms.  They use just packet numbers.)



Shepard & Partridge                                             [Page 2]

draft-shepard-tcp-4-packets-3-buff-00.txt                      July 1997


   Observations are made of all packets and acknowledgements crossing
   the 100 Mbps no-delay link.  (All descriptions below are from this
   point of view.)

What happens with normal slow start

   At time 0.0 packet number 1 is sent.

   At time 1.222 an ack is received covering packet number 1, and
   packets 2 and 3 are sent.

   At time 2.444 an ack is received covering packet number 2, and
   packets 4 and 5 are sent.

   At time 3.278 an ack is received covering packet number 3, and
   packets 6 and 7 are sent.

   At time 4.111 an ack is received covering packet number 4, and
   packets 8 and 9 are sent.

   At time 4.944 an ack is received covering packet number 5, and
   packets 10 and 11 are sent.

   At time 5.778 an ack is received covering packet number 6, and
   packets 12 and 13 are sent.

   At time 6.111 a duplicate ack is recieved (covering packet number 6).

   At time 7.444 another duplicate ack is received (covering packet
   number 6).

   At time 8.278 a third duplicate ack is received (covering packet
   number 6) and packet number 7 is retransmitted.

   (And the trace continues...)

What happens with a four-packet start

   At time 0.0, packets 1, 2, 3, and 4 are sent.

   At time 1.222 an ack is received covering packet number 1, and
   packets 5 and 6 are sent.

   At time 2.055 an ack is received covering packet number 2, and
   packets 7 and 8 are sent.

   At time 2.889 an ack is received covering packet number 3, and
   packets 9 and 10 are sent.



Shepard & Partridge                                             [Page 3]

draft-shepard-tcp-4-packets-3-buff-00.txt                      July 1997


   At time 3.722 a duplicate ack is received (covering packet number 3).

   At time 4.555 another duplicate ack is received (covering packet
   number 3).

   At time 5.389 a third duplicate ack is received (covering packet
   number 3) and packet number 4 is retransmitted.

   (And the trace continues...)

Discussion

   At the point left off in the two traces above, the two different
   systems are in almost identical states.  The two traces from that
   point on are almost the same, modulo a shift in time of (8.278 -
   5.389) = 2.889 seconds and a shift of three packets.  If the normal
   TCP (with the one-packet start) will deliver packet N at time T, then
   the TCP with the four-packet start will deliver packet N - 3 at time
   T - 2.889 (seconds).

   Note that the time to send three 1024-byte TCP segments through a
   9600 bps modem is 2.66 seconds.  So at what time does the four-
   packet-start TCP deliver packet N?  At time T - 2.889 + 2.66 = T -
   0.229 in most cases, and in some cases earlier, in some cases later,
   because different packets (by number) experience loss in the two
   traces.

   Thus the four-packet-start TCP is in some sense 0.229 seconds (or
   about one fifth of a packet) ahead of where the one-packet-start TCP
   would be.  (This is due to the extra time the modem sits idle while
   waiting for the dally timer to go off in the receiver in the case of
   the one-packet-start TCP.)

   The states of the two systems are not exactly identical.  They differ
   slightly in the round-trip-time estimators because the behavior at
   the start is not identical. (The observed round trip times may differ
   by a small amount due to dally timers and due to that the one-packet
   start experiences more round trip times before the first loss.)  In
   the cases where a retransmit timer did later go off, the additional
   difference in timing was much smaller than the 0.229 second
   difference discribed above.

Conclusion

   In this particular case, the four-packet start is not harmful.






Shepard & Partridge                                             [Page 4]

draft-shepard-tcp-4-packets-3-buff-00.txt                      July 1997


Non-conclusions, opinions, and future work

   A four-packet start would be very helpful in situations where a long-
   delay link is involved (as it would reduce transfer times for
   moderately-sized transfers by as much as two round-trip times).  But
   it remains (in the authors' opinions at this time) an open question
   whether or not the four-packet start would be safe for the network.

   It would be nice to see if this result could be duplicated with real
   TCPs, real modems, and real three-buffer limits.

References

1.   S. Floyd, Increasing TCP's Initial Window (January 29, 1997). URL
     ftp://ftp.ee.lbl.gov/papers/draft.jan29.

2.   S. Floyd and M. Allman, Increasing TCP's Initial Window (July,
     1997). URL http://gigahertz.lerc.nasa.gov/~mallman/share/draft-
     ss.txt (To be submitted as an Internet Draft).

Authors' Addresses:

   Tim Shepard, Craig Partridge
   BBN Technologies
   10 Moulton Street
   Cambridge, MA 02138

   shep@bbn.com, craig@bbn.com























Shepard & Partridge                                             [Page 5]

