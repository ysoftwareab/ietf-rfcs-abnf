ContextId=* Add(T3)
ContextId=C1 Modify(T1, EventDescriptor, SignalDescriptor) )


ContextId=C2 Move(T1) Modify(T3, TerminationState)
ContextId=C1 Modify(T2, TerminationState) )


CTX = ContextID


megacoMessage = authenticatedMessage / message

authenticatedMessage = authToken authenticationHeader message

authenticationHeader = ; as defined in RFC []

message = SystemID *(transactionRequest / transactionAccept /
                     transactionReject)
transactionRequest = transToken transactionId 1*Action
transactionAccept = acceptToken transactionId 1*ActionAccept
transactionReject = rejectToken transactionId 1*ActionReject

ActionAccept =   ctxToken contextId *commandAccept
commandAccept = commandName [terminationId] *(parameters)

ActionReject = ctxToken contextID *commandReject
CommandReject = commandName [terminationID] errorMessage
errorMessage = errorCode errorText
errorCode = OCTET STRING(3)  ;could be extended
errorText = OCTET STRING

transactionId = INTEGER32
SystemId = domainName [":" portNumber]
domainName = 1*256(ALPHA / DIGIT / "." / "-") ; as defined in RFC 821
portNumber = INTEGER16   ;should this be 5digit, 16 bit?

version = megacopToken Version Profile
Version = OCTET STRING
Profile = OCTET STRING ;need explanation

Action = ctxToken contextId 1*command
contextId = nullToken / unspecifiedToken / INTEGER32

command = commandName terminationId parameters

commandName = (addToken /
        subtractToken /
        modifyToken   /
        moveToken     /
        auditToken    /
        notifyToken   /
        serviceChangeToken )

terminationId = "." /  LocalNamePart /
                LocalNamePart *("/"LocalNamePart)

LocalNamePart = AnyNameToken / AllNameToken / NameString

AnyName = "$"

AllNames = "*"

NameString = 1*(SuitableCharacters)

parameters = ([ TSToken TerminationState ]
              [LTToken LocalTerminationDescriptor ]
              [RTToken RemoteTerminationDescriptor ]
              [EDToken EventsDescriptor ]
              [SDToken SignalDescriptor ]
              [DMToken DigitMapDescriptor ]
              [RIToken RequestedInfo ]
              [RMToken ServiceChangeMethod ]
              [RDToken ServiceChangeDelay ]
              [OEToken ObservedEvents ]
              [STToken Statistics ]
              [CpToken Capabilities ]
              [MiToken MGCIdentity ]
              *[extensionParameterToken parameterValue] ])  ;fix
TerminationState = stateParameter   ;leftover production for bracketing
stateParameter = ([modeToken TerminationMode]
                  [bufferedEventHandlingToken BufferedEventHandling ])
                                ;fix, there are 2 of them
TerminationMode = sendonlyToken / recvonlyToken / sendrecvToken /
      inactiveToken / loopbackToken / conttestToken  / OutOfService
BufferedEventHandling = loopControl / processControl / ;fix
              (loopControl processControl )
loopControl = stepToken / loopToken
processControl = processToken / discardToken
LocalTerminationDescriptor = TerminationDescriptor
RemoteTerminationDescriptor = TerminationDescriptor

eventName = [ (packageName / "*") "/" ] (eventId / "all" / eventRange)
packageName = 1*(SuitableCharacters)
eventId = 1*(SuitableCharacters) ;could be an Integer32
EventsDescriptor = [requestedEvent 0*(requestedEvent)]
requestedEvent = eventName  [0*(eventParameters)] [requestedActions]
eventParameters = *(parameterName parameterValue)
requestId = INTEGER32

eventRange = "[" 1*(DIGIT / DTMFLetter / "*" / "#" /
                   (DIGIT "-" DIGIT)/(DTMFLetter "-" DTMFLetter)) "]"
           ;may want to remove the above

requestedActions = requestedAction [ embeddedSignalEvent ]
                   [ mediaAction ]
requestedAction = NotifyActionToken / AccumlateToken /
                  AccumulateByDigitMapToken digitMapName /
                  ScriptToken scriptName
embeddedSignalEvent = [EventDescriptorToken EventsDescriptor ]
                      [SignalDescriptorToken SignalDescriptor ]
mediaAction = SToken

SignalDescriptor = [ SignalRequest 0*(SignalRequest) ]
SignalRequest = eventName [eventParameters ]
eventParameters = eventParameter 0*( eventParameter )
eventParameter = eventParameterString / quotedString
eventParameterString = 1*()

DigitMapDescriptor = digitMapName DigitMapValue
digitMapName = STRING
DigitMapValue = ["L:" longTimer ","] ["M:" mediumTimer ","] DigitMap
longTimer = 1*2DIGIT
shortTimer = 1*2DIGIT
DigitMap = DigitString  / "(" DigitStringList ")"
DigitStringList = DigitString *( "|" StringList )
DigitString = 1*(DigitStringElement)
DigitStringElement = DigitPosition ["."]
DigitPosition = DigitMapLetter / DigitMapRange
DigitMapLetter = DIGIT / "#" / "*" / "A" / "B" / "C" / "D" / MFSig / "T"
MFSig = "K0" / "K1" / "K2" / "S0" / "S1" / "S2" / "S3" /
DigitMapRange =  "x" / "[" DigitLetters "]"
DigitLetter  = *((DIGIT "-" DIGIT ) / DigitMapLetter)

RequestedInfo = [infoCode 0*(infoCode)]
infoCode = TerminationStateToken / LocalTermDescToken / RemoteTermDescToken /
           EventDeccToken / SignalDescToken /
           DigMapToken / StatsToken / ObsrvdEvntsToken CapsToken /
ServiceChangeMethod = GracefulToken / ForcedToken / RestartToken / FailoverToken
ServiceChangeDelay = INTEGER32

ObservedEvents = (requestId [ observedEvent *(observedEvent) ])
observedEvent = [ TimeNotation ] SignalRequest
TimeNotation= INTEGER64; 64 bits NTP time stamp ?

Statistics = [StatisticsParameter 0*( StatisticsParameter ) ]
StatisticsParameter = ( PktsSentToken packetsSent )
                    / ( OctetsSentToken octetsSent )
                    / ( PktsRecvdToken packetsReceived )
                    / ( OctetsRecvdToken octetsReceived )
                    / ( PktsLostToken packetsLost )
                    / ( JitterToken jitter )
                    / ( AvgLatencyToken averageLatency )
                    / ( StatisticsParameterExtensionName
                        StatisticsParameterExtensionValue )
packetsSent = INTEGER64
octetsSent = INTEGER64
packetsReceived = INTEGER64
octetsReceived = INTEGER64
packetsLost = INTEGER32
jitter = INTEGER32
averageLatency = INTEGER32
StatisticsParameterExtensionName = "X" "-" 2*ALPHA ;fix
StatisticsParameterExtensionValue = INTEGER32

extensionParameter = "X" ("-"/"+") 1*6(ALPHA / DIGIT)
parameterString = 1*(%x20-7F)

Capabilities = ;not defined yet

MGCIdentity = SystemId


SuitableCharacter= DIGIT / ALPHA / "+" / "-" / "_" / "&" /
                   "!" / "'" / "|" / "=" / "#" / "?" / "/" /
                   "." / "$" / "*" / ";" / "@" / "[" / "]" /
                   "^" / "`" / "{" / "}" / "~"
quotedString = DQUOTE visibleString
                 0*(quoteEscape visibleString) DQUOTE
quoteEscape = DQUOTE DQUOTE
visibleString = (%x00-21 / %x23-FF)

TerminationDescriptor = ;Undecided, could be SDP as in RFC 2327
CTX= -1
ADD= circuitgroup1/5
LS= {m=recvonly
ADD= RTP/ANY
LS= {m=sendrecv
LT= {v=0
c=IN IP4 100.100.100.089
m=audio ANY RTP/AVP 0
RT= {v=0
c=IN IP4 200.200.200.133
m=audio 4321 RTP/AVP 0
CTX= 12344321
ADD= circuitgroup1/5
ADD= RTP/7777
LT= {v=0
c=IN IP4 100.100.100.089
m=audio 3456 RTP/AVP 0
CTX= 12344321
MODIFY= circuitgroup1/5
LS= {m=sendrecv
CTX= 12344321
SUBTRACT= circuitgroup1/5
SUBTRACT= RTP/7777
Success  =  "200"  ;  The requested transaction was executed nor-
Protocol-Reject  =  "400"  ;  Bad Request
Protocol-Reject  =  "400"  ;  Bad Request
                /   "401"  ;  Unauthorized
                /   "411"  ;  Length Required
                /   "415"  ;  Incorrect identifier
                /   "416"  ;  The transaction refers to an unknown ContextId
                /   "418"  ;  Unsupported or unknown Package
                /   "422"  ;  No such Event or signal
                /   "423"  ;  Unknown action or illegal combination of actions
                /   "425"  ;  Unknown TerminationID
                /   "427"  ;  Missing RemoteTerminationDescriptor
                /   "484"  ;  Action Incomplete
                /   "485"  ;  Action Ambiguous

Execution-Reject  =  "500"  ;  Internal Gateway Error
                /   "501"  ;  Not Implemented
                /   "502"  ;  Not ready.
                /   "503"  ;  Service Unavailable
                /   "504"  ;  Gateway Time-out
                /   "505"  ;  MEGACOP Version not supported
                /   "509"  ;  Resource Conflict
                /   "510"  ;  Insufficient resources
                /   "512"  ;  Gateway unequipped to detect requested Event
                /   "513"  ;  Gateway unequipped to generate requested Signals
                /   "514"  ;  Gateway cannot send the specified announcement
                /   "515"  ;  Unsupported Media Type
                /   "517"  ;  Unsupported or invalid mode
                /   "519"  ;  Gateway does not have a digit map
                /   "520"  ;  Termination is "ServiceChangeing"
                /   "526"  ;  Insufficient bandwidth
                /   "581"  ;  Does Not Exist


v=0
c=LOCAL
m=audio 0 DS0 0
a=echo:on


v=0
c=LOCAL
m=audio 0 ANALOG 0
a=echo:on


v=0
c=IN IP4 128.96.41.1
m=audio 3456 RTP/AVP 0 96
a=rtpmap:96 G726-32/8000


v=0
c=ATM NSAP 47.0091.8100.0000.0060.3e64.fd01.0060.3e64.fd01.fe
m=audio 5/1002 ATM/AVP G.711u
a=connection_type:AAL2


v=0
m=nas/radius
c=IN IP4 radius.example.net
a=bearer:v.34
a=framing:ppp-asynch
a=dialed:18001234567
a=called:12345678901
a=dialing:12340567890

v=0
m=nas/none
c=IN IP4 128.96.41.1
a=subnet:IN IP4 123.45.67.64/26
a=bearer:isdn64
a=framing:ppp-sync
a=dialed:18001234567
a=dialing:2345678901

v=0
c=IN IP4 access.example.net
m=nas/l2tp
k=clear:some-shared-secret
a=bearer:v.32
a=framing:ppp-asynch
a=dialed:18001234567
a=dialing:2345678901


