


syslog Working Group                                           J. Kelsey
Internet-Draft                                                      NIST
Intended status: Standards Track                               J. Callas
Expires: June 11, 2007                                   PGP Corporation
                                                                A. Clemm
                                                           Cisco Systems
                                                        December 8, 2006


                         Signed syslog Messages
                     draft-ietf-syslog-sign-20.txt

Status of this Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on June 11, 2007.

Copyright Notice

   Copyright (C) The IETF Trust (2006).











Kelsey, et al.            Expires June 11, 2007                 [Page 1]

Internet-Draft           Signed syslog Messages            December 2006


Abstract

   This document describes a mechanism to add origin authentication,
   message integrity, replay resistance, message sequencing, and
   detection of missing messages to the transmitted syslog messages.
   This specification draws upon the work defined in RFC xxxx, "The
   syslog Protocol", however it may be used atop any message delivery
   mechanism, even that defined in RFC 3164, "The BSD syslog Protocol",
   or in the RAW mode of RFC 3195, "The Reliable Delivery of syslog".


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
   2.  Conventions Used in this Document  . . . . . . . . . . . . . .  6
   3.  syslog Message Format  . . . . . . . . . . . . . . . . . . . .  7
   4.  Signature Blocks . . . . . . . . . . . . . . . . . . . . . . .  9
     4.1.  syslog Messages Containing a Signature Block . . . . . . .  9
     4.2.  Signature Block Format and Fields  . . . . . . . . . . . .  9
       4.2.1.  Version  . . . . . . . . . . . . . . . . . . . . . . . 10
       4.2.2.  Reboot Session ID  . . . . . . . . . . . . . . . . . . 11
       4.2.3.  Signature Group and Signature Priority . . . . . . . . 11
       4.2.4.  Global Block Counter . . . . . . . . . . . . . . . . . 13
       4.2.5.  First Message Number . . . . . . . . . . . . . . . . . 14
       4.2.6.  Count  . . . . . . . . . . . . . . . . . . . . . . . . 14
       4.2.7.  Hash Block . . . . . . . . . . . . . . . . . . . . . . 14
       4.2.8.  Signature  . . . . . . . . . . . . . . . . . . . . . . 15
   5.  Payload and Certificate Blocks . . . . . . . . . . . . . . . . 16
     5.1.  Preliminaries: Key Management and Distribution Issues  . . 16
     5.2.  Payload Block  . . . . . . . . . . . . . . . . . . . . . . 17
     5.3.  Certificate Block  . . . . . . . . . . . . . . . . . . . . 17
       5.3.1.  syslog Messages Containing a Certificate Block . . . . 18
       5.3.2.  Certificate Block Format and Fields  . . . . . . . . . 18
   6.  Redundancy and Flexibility . . . . . . . . . . . . . . . . . . 21
     6.1.  Redundancy . . . . . . . . . . . . . . . . . . . . . . . . 21
       6.1.1.  Configuration Parameters for Certificate Blocks  . . . 21
       6.1.2.  Configuration Parameters for Signature Blocks  . . . . 21
     6.2.  Flexibility  . . . . . . . . . . . . . . . . . . . . . . . 22
   7.  Efficient Verification of Logs . . . . . . . . . . . . . . . . 23
     7.1.  Offline Review of Logs . . . . . . . . . . . . . . . . . . 23
     7.2.  Online Review of Logs  . . . . . . . . . . . . . . . . . . 24
   8.  Security Considerations  . . . . . . . . . . . . . . . . . . . 26
     8.1.  Cryptography Constraints . . . . . . . . . . . . . . . . . 26
     8.2.  Packet Parameters  . . . . . . . . . . . . . . . . . . . . 26
     8.3.  Message Authenticity . . . . . . . . . . . . . . . . . . . 27
     8.4.  Sequenced Delivery . . . . . . . . . . . . . . . . . . . . 27
     8.5.  Replaying  . . . . . . . . . . . . . . . . . . . . . . . . 27
     8.6.  Reliable Delivery  . . . . . . . . . . . . . . . . . . . . 27



Kelsey, et al.            Expires June 11, 2007                 [Page 2]

Internet-Draft           Signed syslog Messages            December 2006


     8.7.  Sequenced Delivery . . . . . . . . . . . . . . . . . . . . 27
     8.8.  Message Integrity  . . . . . . . . . . . . . . . . . . . . 28
     8.9.  Message Observation  . . . . . . . . . . . . . . . . . . . 28
     8.10. Man In The Middle Attacks  . . . . . . . . . . . . . . . . 28
     8.11. Denial of Service  . . . . . . . . . . . . . . . . . . . . 28
     8.12. Covert Channels  . . . . . . . . . . . . . . . . . . . . . 28
   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 30
     9.1.  Structured data and syslog messages  . . . . . . . . . . . 30
     9.2.  Version Field  . . . . . . . . . . . . . . . . . . . . . . 30
     9.3.  SG Field . . . . . . . . . . . . . . . . . . . . . . . . . 32
     9.4.  Key Blob Type  . . . . . . . . . . . . . . . . . . . . . . 32
   10. Authors and Working Group Chairs . . . . . . . . . . . . . . . 33
   11. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 34
   12. References . . . . . . . . . . . . . . . . . . . . . . . . . . 35
     12.1. Normative References . . . . . . . . . . . . . . . . . . . 35
     12.2. Informative References . . . . . . . . . . . . . . . . . . 35
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 37
   Intellectual Property and Copyright Statements . . . . . . . . . . 38

































Kelsey, et al.            Expires June 11, 2007                 [Page 3]

Internet-Draft           Signed syslog Messages            December 2006


1.  Introduction

   This document describes a mechanism that adds origin authentication,
   message integrity, replay resistance, message sequencing, and
   detection of missing messages to syslog.  Essentially, this is
   accomplished by sending a special syslog message.  The contents of
   this syslog message is called a Signature Block.  Each Signature
   Block contains, in effect, a detached signature on some number of
   previously sent messages.  It is cryptographically signed and
   contains the hashes of previously sent syslog messages.

   While most implementations of syslog involve only a single sender as
   the generator of each message and a single receiver as the collector
   of each message, provisions need to be made to cover situations in
   which messages are sent to multiple receivers.  This concerns in
   particular situations in which different messages are sent to
   different receivers, which means that some messages are sent to some
   receivers but not to others.  The required differentiation of
   messages is generally performed based on the Priority value of the
   individual messages.  For example, messages from any Facility with a
   Severity value of 3, 2, 1 or 0 may be sent to one collector while all
   messages of Facilities 4, 10, 13, and 14 may be sent to another
   collector.  Appropriate syslog-sign messages must be kept with their
   proper syslog messages.  To address this, syslog-sign uses a
   signature group.  A signature group identifies a group of messages
   that are all kept together for signing purposes by the sender.  A
   Signature Block always belongs to exactly one signature group and it
   always signs messages belonging only to that signature group.

   Additionally, a sender will send a Certificate Block to provide key
   management information between the sender and the receiver.  This
   Certificate Block has a field to denote the type of key material
   which may be such things as a PKIX certificate, an OpenPGP
   certificate, or even an indication that a key had been
   predistributed.  In the cases of certificates being sent, the
   certificates may have to be split across multiple packets.

   The receiver of the previous messages may verify that the hash of
   each received message matches the signed hash contained in the
   Signature Block.  A collector may process these Signature Blocks as
   they arrive, building an authenticated log file.  Alternatively, it
   may store all the log messages in the order they were received.  This
   allows a network operator to authenticate the log file at the time
   the logs are reviewed.

   This specification is independent of the actual transport protocol
   selected.  The mechanism is especially suitable for use with the
   syslog protocol as defined in RFC xxxx [14] because it utilizes the



Kelsey, et al.            Expires June 11, 2007                 [Page 4]

Internet-Draft           Signed syslog Messages            December 2006


   STRUCTURED-DATA elements defined in that document.  It may also be
   used with syslog packets over traditional UDP [4] as described in RFC
   3164 [10].  It may also be used with the Reliable Delivery of syslog
   as described in RFC 3195 [11], and it may be used with other message
   delivery mechanisms.  Designers of other efforts to define event
   notification mechanisms are encouraged to consider this specification
   in their design.

   NOTE to RFC editor: replace xxxx with actual RFC number for this
   document and remove this note









































Kelsey, et al.            Expires June 11, 2007                 [Page 5]

Internet-Draft           Signed syslog Messages            December 2006


2.  Conventions Used in this Document

   The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [9].














































Kelsey, et al.            Expires June 11, 2007                 [Page 6]

Internet-Draft           Signed syslog Messages            December 2006


3.  syslog Message Format

   This specification does not rely upon any specific syslog message
   format.  It is RECOMMENDED to be implemented in conjunction with the
   syslog protocol as defined in RFC xxxx [14].  It MAY be transported
   over a traditional syslog message format such as that defined in the
   informational RFC 3164 [10], or it MAY be used over the Reliable
   Delivery of syslog Messages as defined in RFC 3195 [11].

   Care must be taken when choosing a transport for this mechanism,
   however.  Because the device generating the Signature Block message
   signs each message in its entirety, it is imperative that the
   messages MUST NOT be changed in transit.  It is equally imperative
   that the syslog-sign messages MUST NOT be changed in transit.
   Specifically, a relay as described in RFC 3164 MAY make changes to a
   syslog packet if specific fields are not found.  If this occurs, the
   entire mechanism described in this document is rendered useless.
   Likewise, any truncation of messages that occurs between sending and
   receiving renders the mechanism useless.  For this reason, syslog
   sender and receiver implementations implementing this specification
   MUST support messages of up to and including 2048 octets in length,
   in order to minimize the chances of truncation from happening.
   Likewise, while syslog sender and receiver implementations MAY
   support messages with a length larger than 2048 octets, implementors
   need to be aware that any message truncations that occur render the
   mechanism useless.

   For convenience, this document uses the syslog message format in the
   terms described in RFC xxxx [14].  Along with the other fields, that
   document describes the concept of STRUCTURED DATA (SD).  STRUCTURED
   DATA is defined in the form of SD ELEMENTS (SDEs).  An SDE consists
   of a name and a set of parameter name - value pairs.  The SDE name is
   referred to as SD-ID.  The name-value pairs are referred to as SD-
   PARAM, or SD Parameters, with the name constituting the SD-PARAM-
   NAME, the value constituting the SD-PARAM-VALUE.  The special syslog
   messages that are defined in this document include definitions of
   SDEs to convey parameters that relate to the signing of syslog
   messages.

   When used in conjunction with RFC xxxx [14], the syslog messages
   defined in this document carry the signature and certificate data as
   STRUCTURED DATA, as defined, while the MSG part of the syslog
   messages is simply empty - the contents of the messages is not
   intended for interpretation by humans but by applications that use
   those messages to build an authenticated log.  Having said that, as
   stated above, the mechanism defined in this document is applicable to
   other message transports as well.  When used in conjunction with a
   syslog message format other than the one defined in RFC xxxx [14],



Kelsey, et al.            Expires June 11, 2007                 [Page 7]

Internet-Draft           Signed syslog Messages            December 2006


   specifically, a syslog message format that does not include
   STRUCTURED DATA, the format of the message payload will simply happen
   to follow STRUCTURED DATA format.
















































Kelsey, et al.            Expires June 11, 2007                 [Page 8]

Internet-Draft           Signed syslog Messages            December 2006


4.  Signature Blocks

   This section describes the format of the Signature Block and the
   fields used within the Signature Block, as well as the syslog
   messages used to carry the Signature Block.

4.1.  syslog Messages Containing a Signature Block

   There is a need to distinguish the Signature Block itself from the
   syslog message that is used to carry a Signature Block Signature
   Blocks MUST be encompassed within completely formed syslog messages.
   Syslog messages that contain a Signature Block are also referred to
   as Signature Block messages.

   A Signature Block message that is compliant with RFC xxxx [14] MUST
   contain valid APP-NAME, PROCID, and MSGID fields.  Specifically, as
   value for APP-NAME, "syslog" (without the double quotes) MUST be
   used.  As value for MSG-ID, "sig" (without the double quotes) MUST be
   used.  As value for the PRI field, 110 MUST be used, corresponding to
   facility 13 and severity 6 (informational).  The Signature Block is
   carried as Structured Data within the Signature Block message, per
   the definitions that follow in the next section.

   Similarly, when used with traditional syslog [10], the Signature
   Block message MUST contain a valid TAG field.  The TAG field MUST
   have the value of "syslog" (without the double quotes) to signify
   that this message was generated by the syslog process.  The Signature
   Block is carried as part of the MSG part, whose syntax happens to
   follow structured data format per RFC xxxx [14], as specified in the
   next section.

   Again, note that all of those fields pertain to the syslog message
   used to carry the Signature Block.  They are not part of the
   Signature Block itself.  In addition, the syslog messages defined as
   part of syslog-sign themselves (Signature Block messages and
   Certificate Block messages) are generally not signed by a Signature
   Block.  Receivers that implement syslog-sign know to distinguish
   messages that are associated with syslog-sign from the syslog
   messages that are subjected to signing and process them differently.

4.2.  Signature Block Format and Fields

   The content of a Signature Block message is the Signature Block.  The
   Signature Block MUST be encoded as an SD ELEMENT, as defined in RFC
   xxxx [14].

   The SD-ID MUST have the value of "ssign".




Kelsey, et al.            Expires June 11, 2007                 [Page 9]

Internet-Draft           Signed syslog Messages            December 2006


   The SDE contains the fields of the Signature Block encoded as SD
   Parameters, as specified in the following.  The Signature Block is
   composed of the following fields.  The value of each field MUST be
   printable ASCII, and any binary values MUST be base 64 encoded, as
   defined in RFC 4648 [13].

       Field                     SD-PARAM-NAME        Size in bytes
       -----                     -------------        ---- -- -----

       Version                          VER                 4

       Reboot Session ID               RSID                1-10

       Signature Group                   SG                 1

       Signature Priority              SPRI                1-3

       Global Block Counter             GBC                1-10

       First Message Number             FMN                1-10

       Count                            CNT                1-2

       Hash Block                        HB      variable, size of hash
                                                (base 64 encoded binary)

       Signature                       SIGN             variable
                                                (base 64 encoded binary)

   A Signature Block is accordingly encoded as follows, where xxx
   denotes a placeholder for the particular value:

   "[ssign VER=xxx RSID=xxx SG=xxx SPRI=xxx GBC=xxx FMN=xxx CNT=xxx
   HB=xxx SIGN=xxx]".

   The fields are separated by single spaces and are described below.

4.2.1.  Version

   The Signature Block version field is 4 characters in length.  The
   value in this field specifies the version of the syslog-sign
   protocol.  This is extensible to allow for different hash algorithms
   and signature schemes to be used in the future.  The value of this
   field is the grouping of the protocol version (2 bytes), the hash
   algorithm (1 byte) and the signature scheme (1 byte).

      Protocol Version - 2 bytes with the first version as described in
      this document being value of 01 to denote Version 1.



Kelsey, et al.            Expires June 11, 2007                [Page 10]

Internet-Draft           Signed syslog Messages            December 2006


      Hash Algorithm - 1 byte with the definition that 1 denotes SHA1 as
      defined in FIPS-180-2.2002 [2].

      Signature Scheme - 1 byte with the definition that 1 denotes
      OpenPGP DSA - RFC 2440 [6], FIPS.186-2.2000 [1].

   As such, the version, hash algorithm and signature scheme defined in
   this document may be represented as "0111" (without the quote marks).

4.2.2.  Reboot Session ID

   The reboot session ID is a decimal value that has a length between 1
   and 10 bytes.  The acceptable values for this are between 0 and
   9999999999.  A reboot session ID is expected to increase whenever a
   sender reboots in order to allow receivers to uniquely distinguish
   messages and message signatures across reboots.  A device needs to
   hence support persisting previous reboot session ID across reboots.
   In cases where a sender does not support this capability, the reboot
   session ID MUST always be set to a value of 0, which indicates that
   this capability is not supported.  Otherwise, it MUST increase
   whenever a sender reboots, starting with a value of 1.  If the value
   latches at 9999999999, then manual intervention may be required to
   reset it to 1.  Implementors MAY wish to consider using the
   snmpEngineBoots value as a source for this counter as defined in RFC
   3414 [7].

4.2.3.  Signature Group and Signature Priority

   The SG identifier may take on any value from 0-3 inclusive.  The SPRI
   may take on any value from 0-191 inclusive.  These fields taken
   together allow network administrators to associate groupings of
   syslog messages with appropriate Signature Blocks and Certificate
   Blocks.  Groupings of syslog messages that are signed together are
   also referred to as signature groups.  A Signature Block contains
   only hashes of those syslog messages that are part of the same
   signature group.

   For example, in some cases, network administrators might send syslog
   messages of Facilities 0 through 15 to one destination while those
   with Facilities 16 through 23 to another.  In such cases, associated
   Signature Blocks should likely be sent to the corresponding syslog
   servers as well, signing the syslog messages that are intended for
   each destination separately.  This way, each syslog destination
   receives Signature Blocks for all syslog messages that it receives,
   and only for those.  The ability to to associate different categories
   of syslog messages with different signature groups, signed in
   separate Signature Blocks, provides administrators with flexibility
   to that regard.



Kelsey, et al.            Expires June 11, 2007                [Page 11]

Internet-Draft           Signed syslog Messages            December 2006


   Syslog-sign provides four options for handling signature groups,
   linking them with PRI values so they may be routed to the destination
   commensurate with the appropriate syslog messages.  In all cases, no
   more than 192 distinct signature groups (0-191) are permitted.

   The signature group to which a Signature Block pertains is indicated
   by the signature priority (SPRI) field.  The signature group (SG)
   field indicates how to interpret the signature priority field.  (Note
   that the SG field does not indicate the signature group itself, as
   its name might suggest.)  The SG field can have one of the following
   values:

   a.  '0' -- There is only one signature group.  In this case, the
       administrators want all Signature Blocks to be sent to a single
       destination; in all likelihood, all of the syslog messages will
       also be going to that same destination.  Signature Blocks sign
       all messages regardless of their PRI value.  This means that in
       effect, the Signature Block's SPRI value can be ignored.
       However, it is RECOMMENDED that a single SPRI value is used for
       all Signature Blocks.  Furthermore, it is RECOMMENDED to use 110
       as that value, the same value that is used for the PRI field of
       the Signature Block message.  This way, the PRI of the Signature
       Block message matches the SPRI of the Signature Block that it
       contains.

   b.  '1' -- Each PRI value is associated with its own signature group.
       Signature Blocks for a given signature group have SPRI = PRI for
       that signature group.  In other words, the SPRI of the Signature
       Block matches the PRI value of the syslog messages that are part
       of the signature group and hence signed by the Signature Block.
       An SG value of 1 can for example be used when the administrator
       of a device does not know where any of the syslog messages will
       ultimately go but anticipates that messages with different PRI
       values will be collected and processed separately.  Having a
       signature group per PRI value provides administrators with a
       large degree of flexibility with regards to how to divide up the
       processing syslog messages and their signatures after they are
       received, at the same time allowing Signature Blocks to follow
       the corresponding syslog messages to their eventual destination.

   c.  '2' -- Each signature group contains a range of PRI values.
       Signature groups are assigned sequentially.  A Signature Block
       for a given signature group has its own SPRI value denoting the
       highest PRI value of syslog messages in that signature group.
       The lowest PRI value of syslog messages in that signature group
       will be one larger than the SPRI value of the next signature
       group or "0" in case there is no other signature group with a
       lower SPRI value.  The specific signature groups and ranges they



Kelsey, et al.            Expires June 11, 2007                [Page 12]

Internet-Draft           Signed syslog Messages            December 2006


       are associated with are subject to configuration by a system
       administrator.

   d.  '3' -- Signature groups are not assigned with any of the above
       relationships to PRI values of the syslog messages they sign.
       Instead, another scheme is used, which is outside the scope of
       this specification.  There has to be some predefined arrangement
       between the sender and the intended receivers as to which syslog
       messages are to be included in which signature group, requiring
       configuration by a system administrator.  This provides
       administrators also with the flexibility to group syslog messages
       into signature groups along criteria that are not tied to the PRI
       value.

   One reasonable way to configure some installations is to have only
   one signature group, indicated with SG=0, and have the device send a
   copy of each Signature Block to each collector.  In that case,
   collectors that are not configured to receive every syslog message
   will still receive signatures for every message, even ones they are
   not supposed to receive.  While the collector will not be able to
   detect gaps in the messages (because the presence of a signature does
   not tell the collector whether or not the corresponding message would
   be of the collector's concern), it does allow all messages that do
   arrive at each collector to be put into the right order and to be
   verified.  It also allows each collector to detect duplicates.

4.2.4.  Global Block Counter

   The global block counter is a decimal value representing the number
   of Signature Blocks sent by syslog-sign before the current one, in
   this reboot session.  This takes at least 1 byte and at most 10 bytes
   displayed as a decimal counter.  The acceptable values for this are
   between 0 and 9999999999, starting with 0.  If the value of the
   global block counter latches at 9999999999 and the reboot session ID
   has a value other than 0 (indicating the fact that persisting of the
   reboot session ID is supported), then the reboot session ID MUST be
   incremented by 1 and the global block counter resumes at 0.  In the
   case in which the reboot session ID is in fact 0 and persisting of
   reboot session IDs is not supported, when the global block counter
   latches, it resumes at 0 also in this case but the reboot session ID
   MUST NOT be incremented and remains at 0.

   Note that the global block counter crosses signature groups; it
   allows us to roughly synchronize when two messages were sent, even
   though they went to different collectors.

   Because a reboot results in the start of a new reboot session, the
   sender MUST reset the global block counter to 0 after a reboot



Kelsey, et al.            Expires June 11, 2007                [Page 13]

Internet-Draft           Signed syslog Messages            December 2006


   occurs.  Applications need to apply extra consideration to the
   possibility that a reboot occurred when authenticating a log, and
   situations in which reboots occur frequently may result in losing the
   ability to verify the proper sequence in which messages were sent and
   hence jeopardizing integrity of the log.

4.2.5.  First Message Number

   This is a decimal value between 1 and 10 bytes.  It contains the
   unique message number within this signature group of the first
   message whose hash appears in this block.  The very first message of
   the reboot session is numbered "1".

   For example, if this signature group has processed 1000 messages so
   far and message number 1001 is the first message whose hash appears
   in this Signature Block, then this field contains 1001.

4.2.6.  Count

   The count is a 1 or 2 byte field that indicates the number of message
   hashes to follow.  The valid values for this field are between 1 and
   99.  Note that the number of hashes included in the Signature Block
   MUST be chosen such that the length of the resulting syslog message
   does not exceed the maximum permissable syslog message length.

4.2.7.  Hash Block

   The hash block is a block of hashes, each separately encoded in base
   64.  Each hash in the hash block is the hash of the entire syslog
   message represented by the hash, independent of the underlying
   transport.  Hashes are ordered from left to right in the order of
   occurrence of the syslog messages that they represent.

   With RFC xxxx [14], the "entire syslog message" refers to what is
   described as the syslog message excluding transport parts that are
   described in RFC xxxx [15] and RFC xxxx [16], and excluding other
   parts that may be defined in future transports.  The hash value will
   be the result of the hashing algorithm run across the syslog message,
   starting with the < of the PRI portion of the header part of the
   message and ending with the Unicode byte order mask, BOM.  The hash
   algorithm used and indicated by the Version field determines the size
   of each hash, but the size MUST NOT be shorter than 160 bits.  It is
   base 64 encoded as per RFC 4648 [13].

   Analogously, with syslog messages per RFC 3164 [10], the "entire
   syslog message" refers to the message starting with the < of the PRI
   portion of the header part of the message and ending with the
   character preceding the < of the subsequent message, and the hashing



Kelsey, et al.            Expires June 11, 2007                [Page 14]

Internet-Draft           Signed syslog Messages            December 2006


   algoritm is applied accordingly.

   The number of hashes in a hash block SHOULD be chosen such that the
   resulting Signature Block message does not exceed a length of 2048
   octets in order to avoid the possibility that truncation occurs.
   When more hashes need to sent than fit inside a Signature Block
   message, it is advisable to start a new Signature Block.

4.2.8.  Signature

   This is a digital signature, encoded in base 64 per RFC 4648 [13].
   The signature is calculated over the completely formatted syslog-
   message, including all of the PRI, HEADER, and hashes in the hash
   block, excluding spaces between fields, and also excluding the
   signature field (SD Parameter Name "SIGN" and corresponding value).




































Kelsey, et al.            Expires June 11, 2007                [Page 15]

Internet-Draft           Signed syslog Messages            December 2006


5.  Payload and Certificate Blocks

   Certificate Blocks and Payload Blocks provide key management in
   syslog-sign.  Their purpose is to support key management that uses
   public key cryptosystems.

5.1.  Preliminaries: Key Management and Distribution Issues

   A Payload Block contains public key certificate information that is
   to be conveyed to the receiver.  A Payload Block is not sent
   directly, but in (one or more) fragments.  Those fragments are termed
   Certificate Blocks.  All devices send at least one Certificate Block
   at the beginning of a new reboot session, carrying public key
   information in effect for the reboot session.

   There are three key points to understand about Certificate Blocks:

   a.  They handle a variable-sized payload, fragmenting it if necessary
       and transmitting the fragments as legal syslog messages.  This
       payload is built (as described below) at the beginning of a
       reboot session and is transmitted in pieces with each Certificate
       Block carrying a piece.  Note that there is exactly one Payload
       Block per reboot session.

   b.  The Certificate Blocks are digitally signed.  The device does not
       sign the Payload Block, but the signatures on the Certificate
       Blocks ensure its authenticity.  Note that it may not even be
       possible to verify the signature on the Certificate Blocks
       without the information in the Payload Block; in this case the
       Payload Block is reconstructed, the key is extracted, and then
       the Certificate Blocks are verified.  (This is necessary even
       when the Payload Block carries a certificate, because some other
       fields of the Payload Block are not otherwise verified.)  In
       practice, most installations keep the same public key over long
       periods of time, so that most of the time, it is easy to verify
       the signatures on the Certificate Blocks, and use the Payload
       Block to provide other useful per-session information.

   c.  The kind of Payload Block that is expected is determined by what
       kind of key material is on the collector that receives it.  The
       device and collector (or offline log viewer) has both some key
       material (such as a root public key or predistributed public key)
       and an acceptable value for the Key Blob Type in the Payload
       Block, below.  The collector or offline log viewer MUST NOT
       accept a Payload Block of the wrong type.






Kelsey, et al.            Expires June 11, 2007                [Page 16]

Internet-Draft           Signed syslog Messages            December 2006


5.2.  Payload Block

   The Payload Block is built when a new reboot session is started.
   There is a one-to-one correspondence between reboot sessions and
   Payload Blocks.  That is, each reboot session has only one Payload
   Block, regardless of how many signature groups it supports.  A
   Payload Block MUST have the following fields.  Each of these fields
   are separated by a single space character.  (Note that because a
   Payload Block is not carried in a syslog message directly, only the
   corresponding Certificate Blocks, it does not need to be encoded as
   an SD ELEMENT.)

   a.  Unique identifier of sender; by default, the sender's IP address
       in dotted-decimal (IPv4) or colon-separated (IPv6) notation.

   b.  Full local time stamp for the device at the time the reboot
       session started.  This must be in TIMESTAMP-3339 format, that is,
       in time stamp format per RFC 3339 [12].

   c.  Key Blob Type, a one-byte field which holds one of five values:

       1.  'C' -- a PKIX certificate.

       2.  'P' -- an OpenPGP certificate.

       3.  'K' -- the public key whose corresponding private key is
           being used to sign these messages.

       4.  'N' -- no key information sent; key is predistributed.

       5.  'U' -- installation-specific key exchange information

   d.  The key blob, if any, base 64 encoded per RFC 4648 [13] and
       consisting of the raw key data.

5.3.  Certificate Block

   The Certificate Block must get the Payload Block to the collector.
   The Certificate Block itself needs to be distinguished from the
   syslog message that carries it, refererred to as a Certificate Block
   message.

   Because certificates can legitimately be much longer than 2048 bytes,
   each Certificate Block carries a piece of the Payload Block.  Note
   that the device MAY make the Certificate Blocks of any legal length
   (that is, any length less than 2048 bytes) that holds all the
   required fields.  Software that processes Certificate Blocks MUST
   deal correctly with blocks of any legal length.  The length of the



Kelsey, et al.            Expires June 11, 2007                [Page 17]

Internet-Draft           Signed syslog Messages            December 2006


   piece of the Payload Block that a Certificate Block is to carry
   SHOULD be chosen such that the length of the Certificate Block
   message does not exceed 2048 octets.

5.3.1.  syslog Messages Containing a Certificate Block

   As with a Signature Block, each Certificate Block is carried in its
   own syslog message, referred to as a Certificate Block message.

   When used with RFC xxxx [14], the Certificate Block message MUST
   contain valid APP-NAME, PROCID, and MSGID fields.  Specifically, as
   value for APP-NAME, "syslog" (without the double quotes) MUST be
   used.  As value for MSG-ID, "cert" (without the double quotes) MUST
   be used.  As value for the the PRI field, the value 110 MUST be used,
   corresponding to facility 13 and severity 6 (informational).  The
   Certificate Block is carried as Structured Data within the
   Certificate Block message, per the definitions that follow in the
   next section.

   Similarly, when used with traditional syslog [10], the Certificate
   Block message SHOULD contain a valid TAG field.  It is RECOMMENDED
   that the TAG field have the value of "syslog" (without the double
   quotes) to signify that this message was generated by the syslog
   process.  The Certificate Block is carried as part of the MSG part,
   whose syntax happens to follow structured data format per RFC xxxx
   [14], as specified in the next section.

   Again, note that all of those fields pertain to the syslog message
   used to carry the Certificate Block.  They are not part of the
   Certificate Block itself.

5.3.2.  Certificate Block Format and Fields

   The contents of a Certificate Block message is the Certificate Block
   itself.  Like a Signature Block, the Certificate Block is encoded as
   an SD Element per RFC xxxx [14].  The SD-ID of the Certificate Block
   is "ssign-cert".  The Certificate Block is composed of the following
   fields, each of which is encoded as an SD Parameter with parameter
   name as indicated.  Each field must be printable ASCII, and any
   binary values are base 64 encoded per RFC 4648 [13].











Kelsey, et al.            Expires June 11, 2007                [Page 18]

Internet-Draft           Signed syslog Messages            December 2006


       Field                       SD-PARAM-NAME      Size in bytes
       -----                       -------------      ---- -- -----

       Version                          VER                 4

       Reboot Session ID               RSID                1-10

       Signature Group                  SG                  1

       Signature Priority              SPRI                1-3

       Total Payload Block Length      TPBL                1-8

       Index into Payload Block        INDEX               1-8

       Fragment Length                FLEN                 1-3

       Payload Block Fragment         FRAG              variable
                                                (base 64 encoded binary)

       Signature                      SIGN             variable
                                                (base 64 encoded binary)

   A Certificate Block is accordingly encoded as follows, where xxx
   denotes a placeholder for the particular value:

   "[ssign-cert VER=xxx RSID=xxx SG=xxx SPRI=xxx TBPL=xxx INDEX=xxx
   FLEN=xxx FRAG=xxx SIGN=xxx]".

   The fields are separated by single spaces and are described below.

5.3.2.1.  Version

   The signature group version field is 4 characters in length.  This
   field is identical in format and meaning to the Version field
   described in Section 4.2.1.  As such, the version, hash algorithm and
   signature scheme defined in this document may be represented as
   "0111" (without the quote marks).

5.3.2.2.  Reboot Session ID

   The Reboot Session ID is identical in format and meaning to the RSID
   field described in Section 4.2.2.

5.3.2.3.  Signature Group and Signature Priority

   The SIG field is identical in format and meaning to the SIG field
   described in Section 4.2.8.  Also, the SPRI field is identical in



Kelsey, et al.            Expires June 11, 2007                [Page 19]

Internet-Draft           Signed syslog Messages            December 2006


   format and meaning to the SPRI field described there.

5.3.2.4.  Total Payload Block Length

   The Total Payload Block Length is a value representing the total
   length of the Payload Block in bytes, expressed as a decimal with one
   to eight bytes.

5.3.2.5.  Index into Payload Block

   This is a value between 1 and 8 bytes.  It contains the number of
   bytes into the Payload Block at which this fragment starts.  The
   first byte of the first fragment is numbered "1".

5.3.2.6.  Fragment Length

   The total length of this fragment expressed as a decimal integer with
   one to three bytes.

5.3.2.7.  Signature

   This is a digital signature, encoded in base 64, as per RFC 4648
   [13].  The Version field effectively specifies the original encoding
   of the signature.  The signature is calculated over the completely
   formatted syslog message, including all of the PRI, HEADER, and
   certificate block, excluding spaces between fields, and also
   excluding the signature field itself (SD Parameter Name "SIGN" and
   corresponding value).























Kelsey, et al.            Expires June 11, 2007                [Page 20]

Internet-Draft           Signed syslog Messages            December 2006


6.  Redundancy and Flexibility

   There is a general rule that determines how redundancy works and what
   level of flexibility the sender and receiver have in message formats:
   in general, the sender is allowed to send Signature and Certificate
   Blocks multiple times, to send Signature and Certificate Blocks of
   any legal length, to include fewer hashes in hash blocks, etc.

6.1.  Redundancy

   Syslog messages are in general sent over unreliable transport, which
   means that they can be lost in transit.  However, if a collector does
   not receive Signature and Certificate Blocks, many messages may not
   be able to be verified.  Sending Signature and Certificate Blocks
   multiple times provides redundancy; since the collector MUST ignore
   Signature/Certificate Blocks it has already received and
   authenticated, the sender can in principle change its redundancy
   level for any reason, without communicating this fact to the
   collector.

   Although the sender is not constrained in how it decides to send
   redundant Signature and Certificate Blocks, or even in whether it
   decides to send along multiple copies of normal syslog messages, we
   define some redundancy parameters below which may be useful in
   controlling redundant transmission from the sender to the collector,
   and which may be useful for administrators to configure.

6.1.1.  Configuration Parameters for Certificate Blocks

   certInitialRepeat = number of times each Certificate Block should be
   sent before the first message is sent.

   certResendDelay = maximum time delay in seconds to delay before next
   redundant sending.

   certResendCount = maximum number of sent messages to delay before
   next redundant sending.

6.1.2.  Configuration Parameters for Signature Blocks

   sigNumberResends = number of times a Signature Block is resent.

   sigResendDelay = maximum time delay in seconds from original sending
   to next redundant sending.

   sigResendCount = maximum number of sent messages to delay before next
   redundant sending.




Kelsey, et al.            Expires June 11, 2007                [Page 21]

Internet-Draft           Signed syslog Messages            December 2006


6.2.  Flexibility

   The device may change many things about the makeup of Signature and
   Certificate Blocks in a given reboot session.  The things it cannot
   change are:

      * The version

      * The number or arrangements of signature groups

   It is legitimate for a device to send short Signature Blocks, in
   order to allow the collector to verify messages quickly.  In general,
   unless something verified by the Payload Block or Certificate Blocks
   is changed within the reboot session ID, any change is allowed to the
   Signature or Certificate Blocks during the session.




































Kelsey, et al.            Expires June 11, 2007                [Page 22]

Internet-Draft           Signed syslog Messages            December 2006


7.  Efficient Verification of Logs

   The logs secured with syslog-sign may be reviewed either online or
   offline.  Online review is somewhat more complicated and
   computationally expensive, but not prohibitively so.

7.1.  Offline Review of Logs

   When the collector stores logs to be reviewed later, they can be
   authenticated offline just before they are reviewed.  Reviewing these
   logs offline is simple and relatively inexpensive in terms of
   resources used, so long as there is enough space available on the
   reviewing machine.  Here, we consider that the stored log files have
   already been separated by sender, reboot session ID, and signature
   group.  This can be done easily with a script file.  We then do the
   following:

   a.  First, we go through the raw log file and split its contents into
       three files.  Each message in the raw log file is classified as a
       normal message, a Signature Block, or a Certificate Block.
       Certificate Blocks and Signature Blocks are stored in their own
       files.  Normal messages are stored in a keyed file, indexed on
       their hash values.

   b.  We sort the Certificate Block file by INDEX value, and check to
       see whether we have a set of Certificate Blocks that can
       reconstruct the Payload Block.  If so, we reconstruct the Payload
       Block, verify any key-identifying information, and then use this
       to verify the signatures on the Certificate Blocks we have
       received.  When this is done, we have verified the reboot session
       and key used for the rest of the process.

   c.  We sort the Signature Block file by First Message Number.  We now
       create an authenticated log file, which consists of some header
       information, and then a sequence of message number, message text
       pairs.  We next go through the Signature Block file.  For each
       Signature Block in the file, we do the following:

       1.  Verify the signature on the Block.

       2.  For each hashed message in the Block:

           a.  Look up the hash value in the keyed message file.

           b.  If the message is found, write (message number, message
               text) to the authenticated log file.





Kelsey, et al.            Expires June 11, 2007                [Page 23]

Internet-Draft           Signed syslog Messages            December 2006


       3.  Skip all other Signature Blocks with the same First Message
           Number.

   d.  The resulting authenticated log file contains all messages that
       have been authenticated and implicitly indicates (by missing
       message numbers) all gaps in the authenticated messages.

   One can see that, assuming sufficient space for building the keyed
   file, this whole process is linear in the number of messages
   (generally two seeks, one to write and the other to read, per normal
   message received), and O(N lg N) in the number of Signature Blocks.
   This estimate comes with two caveats: first, the Signature Blocks
   arrive very nearly in sorted order, and so can probably be sorted
   more cheaply on average than O(N lg N) steps.  Second, the signature
   verification on each Signature Block almost certainly is more
   expensive than the sorting step in practice.  We have not discussed
   error-recovery, which may be necessary for the Certificate Blocks.
   In practice, a simple error-recovery strategy is probably enough --
   if the Payload Block is not valid, then we can just try alternate
   instances of each Certificate Block, if such are available, until we
   get the Payload Block right.

   It is easy for an attacker to flood us with plausible-looking
   messages, Signature Blocks, and Certificate Blocks.

7.2.  Online Review of Logs

   Some processes on the collector machine may need to monitor log
   messages in close to real-time.  This can be done with syslog-sign,
   though it is somewhat more complex than offline verification.  This
   is done as follows:

   a.  We have an authenticated message file, into which we write
       (message number, message text) pairs which have been
       authenticated.  Again, we will assume that we are handling only
       one signature group, and only one reboot session ID at any given
       time.

   b.  We have three data structures: A queue into which (message
       number, hash of message) pairs is kept in sorted order, a queue
       into which (arrival sequence, hash of message) is kept in sorted
       order, and a hash table which stores (message text, count)
       indexed by hash value.  In the hash table, count may be any
       number greater than zero; when count is zero, the entry in the
       hash table is cleared.

   c.  We must receive all the Certificate Blocks before any other
       processing can really be done.  (This is why they are sent



Kelsey, et al.            Expires June 11, 2007                [Page 24]

Internet-Draft           Signed syslog Messages            December 2006


       first.)  Once that is done, any Certificate Block that arrives is
       discarded.

   d.  Whenever a normal message arrives, we add (arrival sequence, hash
       of message) to our message queue.  If our hash table has an entry
       for the message's hash value, we increment its count by one;
       otherwise, we create a new entry with count = 1.  If the message
       queue is full, we roll the oldest messages off the queue by
       taking the last entry in the queue, and using it to index the
       hash table.  If that entry has count 1, we delete the entry from
       the hash table; otherwise, we decrement its count.  We then
       delete the last entry in the queue.

   e.  Whenever a Signature Block arrives, we first check to see whether
       the First Message Number value is too old to still be of
       interest, or if another Signature Block with that First Message
       Number has already been received.  If so, we discard the
       Signature Block unread.  Otherwise, we check its signature, and
       discard it if the signature is not valid.  A Signature Block
       contains a sequence of (message number, message hash) pairs.  For
       each pair, we first check to see if the message hash is in the
       hash table.  If so, we write the (message number, message text)
       into the authenticated message queue.  Otherwise, we write the
       (message number, message hash) to the message number queue.  This
       generally involves rolling the oldest entry out of this queue:
       before this is done, that entry's hash value is again searched
       for in the hash table.  If a matching entry is found, the
       (message number, message text) pair is written out to the
       authenticated message file.  In either case, the oldest entry is
       then discarded.

   f.  The result of this is a sequence of messages in the authenticated
       message file, each of which has been authenticated, and which are
       labeled with numbers showing their order of original
       transmission.

   One can see that this whole process is roughly linear in the number
   of messages, and also in the number of Signature Blocks received.
   The process is susceptible to flooding attacks; an attacker can send
   enough normal messages that the messages roll off their queue before
   their Signature Blocks can be processed.










Kelsey, et al.            Expires June 11, 2007                [Page 25]

Internet-Draft           Signed syslog Messages            December 2006


8.  Security Considerations

   Normal syslog event messages are unsigned and have most of the
   security attributes described in Section 6 of RFC 3164 [10], and in
   Section 8 of RFC xxxx [14].  This document also describes Certificate
   Blocks and Signature Blocks which are signed syslog messages.  The
   Signature Blocks contains signature information of previously sent
   syslog event messages.  All of this information may be used to
   authenticate syslog messages and to minimize or obviate many of the
   security concerns described in RFC 3164 and RFC xxxx [14].

8.1.  Cryptography Constraints

   As with any technology involving cryptography, one should check the
   current literature to determine whether any algorithms used here have
   been found to be vulnerable to attack.

   This specification uses Public Key Cryptography technologies.  The
   proper party or parties must control the private key portion of a
   public-private key pair.  Any party that controls a private key may
   sign anything they please.

   Certain operations in this specification involve the use of random
   numbers.  An appropriate entropy source should be used to generate
   these numbers.  See RFC 4086 [8] and NIST 800-90 [3].

8.2.  Packet Parameters

   The message length must not exceed 2048 bytes.  Various problems may
   result if a sender sends out messages with a length greater than 2048
   bytes, as (per RFC xxxx [14])relays MAY truncate messages with
   lengths greater than 2048 bytes which would make it impossible for
   receivers to to validate a hash of the packet.  In this case, as with
   all others, to increase the chance of interoperability it tends to be
   best to be conservative with what you send but liberal in what you
   are able to receive.

   Similarly, senders must rigidly enforce the correctness of the
   message body.  Problems may arise if the receiver does not fully
   accept the syslog packets sent from a device, or if it has problems
   with the format of the Certificate Block or Signature Block messages.

   Finally, receivers must not malfunction if they receive syslog
   messages containing characters other than those specified in this
   document.






Kelsey, et al.            Expires June 11, 2007                [Page 26]

Internet-Draft           Signed syslog Messages            December 2006


8.3.  Message Authenticity

   Syslog does not strongly associate the message with the message
   sender.  That fact is established by the receiver upon verification
   of the Signature Block as described above.  Before a Signature Block
   is used to ascertain the authenticity of an event message, it may be
   received, stored and reviewed by a person or automated parser.  Both
   of these should maintain doubt about the authenticity of the message
   until after it has been validated by checking the contents of the
   Signature Block.

   With the Signature Block checking, an attacker may only forge
   messages if they can compromise the private key of the true sender.

8.4.  Sequenced Delivery

   Event messages may be recorded and replayed by an attacker.  However
   the information contained in the Signature Blocks allows a reviewer
   to determine if the received messages are the ones originally sent by
   a sender.  This process also alerts the reviewer to replayed
   messages.

8.5.  Replaying

   Event messages may be recorded and replayed by an attacker.  However
   the information contained in the Signature Blocks will allow a
   reviewer to determine if the received messages are the ones
   originally sent by a device.  This process will also alert the
   reviewer to replayed messages.

8.6.  Reliable Delivery

   RFC 3195 or RFC xxxx [16] may be used for the reliable delivery of
   syslog messages.  This document acknowledges that event messages sent
   over UDP may be lost in transit.  A proper review of the Signature
   Block information may pinpoint any messages sent by the sender but
   not received by the receiver.  The overlap of information in
   subsequent Signature Block information allows a reviewer to determine
   if any Signature Block messages were also lost in transit.

8.7.  Sequenced Delivery

   Related to the above, syslog messages delivered over UDP not only may
   be lost, but they may also arrive out of sequence.  The information
   contained in the Signature Block allows a receiver to order the
   syslog messages.  Beyond that, the timestamp information contained in
   the message may help the reviewer to order received messages even if
   they are received out of order.



Kelsey, et al.            Expires June 11, 2007                [Page 27]

Internet-Draft           Signed syslog Messages            December 2006


8.8.  Message Integrity

   Syslog messages may be damaged in transit.  A review of the
   information in the Signature Block determines whether the received
   message was the intended message sent by the sender.  A damaged
   Signature Block or Certificate Block is evident because the receiver
   will not be able to validate that it was signed by the sender.

8.9.  Message Observation

   Event messages, Certificate Blocks, and Signature Blocks are all sent
   in plaintext.  Generally this has had the benefit of allowing network
   administrators to read the message when sniffing the wire.  However,
   this also allows an attacker to see the contents of event messages
   and perhaps to use that information for malicious purposes.

8.10.  Man In The Middle Attacks

   It is conceivable that an attacker may intercept Certificate Block
   messages and insert its own Certificate information.  In that case,
   the attacker would be able to receive event messages from the actual
   sender and then relay modified messages, insert new messages, or
   delete messages.  It would then be able to construct a Signature
   Block and sign it with its own private key.  Network administrators
   should verify that the key contained in the Payload Block is indeed
   the key being used on the actual device.  If that is indeed the case,
   then this MITM attack will not succeed.

8.11.  Denial of Service

   An attacker may be able to overwhelm a receiver by sending it invalid
   Signature Block messages.  If the receiver is attempting to process
   these messages online, this attack may consume all available
   resources.  For this reason, it may be appropriate to simply receive
   the Signature Block messages and process them as time permits.

   As with any system, an attacker may also just overwhelm a receiver by
   sending more messages to it than it can handle.  Implementors should
   attempt to provide features that minimize this threat, such as only
   accepting syslog messages from known IP addresses.

8.12.  Covert Channels

   Nothing in this protocol attempts to eliminate covert channels.
   Indeed, the unformatted message syntax in the packets could be very
   amenable to sending embedded secret messages.  In fact, just about
   every aspect of syslog messages lends itself to the conveyance of
   covert signals.  For example, a collusionist could send odd and even



Kelsey, et al.            Expires June 11, 2007                [Page 28]

Internet-Draft           Signed syslog Messages            December 2006


   PRI values to indicate Morse Code dashes and dots.


















































Kelsey, et al.            Expires June 11, 2007                [Page 29]

Internet-Draft           Signed syslog Messages            December 2006


9.  IANA Considerations

9.1.  Structured data and syslog messages

   This document specifies two syslog message types to carry Signature
   Blocks and Certificate Blocks, respectively: the Signature Block
   message and the Certificate Block message.  Each of these has values
   for several syslog message fields specified that need to be
   controlled by the IANA.

   Specifically, with regards to RFC xxxx [14], IANA is instructed to
   add the following Structured Data Elements to the appropriate
   registry, consisting of SD-ID and and PARAM-NAME values as follows:

   SD-ID "ssign" (without the double quotes), with the associated PARAM-
   NAME values: VER, RSID, SG, SPRI, GBC, FMN, CNT, HB, SIGN

   SD-ID "ssign-cert" (without the double quotes), with the associated
   PARAM-NAME values: VER, RSID, SG, SPRI, TBPL, INDEX, FLEN, FRAG, SIGN

   In addition, IANA is instructed to add values for the APP-NAME and
   MSGID of syslog messages per RFC xxxx [14] to an appropriate
   registry, as follows:

   APP-NAME field: value "syslog" (without the double quotes), with the
   following values for MSGID fields: "sig", "cert" (without the double
   quotes)

   This document also upholds the Facilities and Severities listed in
   RFC xxxx [14].  Those values range from 0 to 191.  This document also
   instructs the IANA to reserve all other possible values of the
   Severities and Facilities above the value of 191 and to distribute
   them via the consensus process as defined in RFC 2434 [5].

   In addition, several fields need to be controlled by the IANA in both
   the Signature Block and the Certificate Block, as outlined in the
   following sections.

9.2.  Version Field

   The Version field (Ver) is a 4 byte field.  The first two bytes of
   this field define the version of the Signature Block packets and the
   Certificate Block Packets.  This allows for future efforts to
   redefine the subsequent fields in the Signature Block packets and
   Certificate Block packets.  A value of "00" is reserved and not used.
   This document describes the fields for the version value of "01".  It
   is expected that this value be incremented monotonically with decimal
   values up through "50" for IANA assigned values.  Values "02" through



Kelsey, et al.            Expires June 11, 2007                [Page 30]

Internet-Draft           Signed syslog Messages            December 2006


   "50" will be assigned by the IANA using the "IETF Consensus" policy
   defined in RFC 2434 [5].  It is not anticipated that these values
   will be reused.  Values of "51" through "99" are vendor-specific, and
   values in this range are not to be assigned by the IANA.

   In the case of vendor-specific assigned Version numbers, all
   subsequent values defined in the packet have vendor-specific meaning.
   They may, or may not, align with the values assigned by the IANA for
   these fields.  For example, a vendor may choose to define its own
   Version of "51" still containing values of "1" for the Hash Algorithm
   and Signature Scheme which aligns with the IANA assigned values as
   defined in this document.  However, it may then choose to define a
   value of "5" for the Signature Group for its own reasons.

   The third byte of the Ver field defines the Hash Algorithm.  It is
   envisioned that this will also be a monotonically increasing value
   with a maximum value of "9".  The value of "1" is defined in this
   document as the first assigned value and is SHA1 FIPS-180-2.2002 [2].
   Subsequent values will be assigned by the IANA using the "IETF
   Consensus" policy defined in RFC 2434 [5].

   The fourth and final byte of the Ver field defines the Signature
   Scheme.  It is envisioned that this too will be a monotonically
   increasing value with a maximum value of "9".  The value of "1" is
   defined in this document as OpenPGP DSA - RFC 2440 [6], FIPS.186-
   2.2000 [1].  Subsequent values will be assigned by the IANA using the
   "IETF Consensus" policy defined in RFC 2434 [5].  The fields, values
   assigned in this document and ranges are illustrated in the following
   table.

   Field    Value Defined     IANA Assigned   Vendor Specific
           in this Document       Range            Range
   -----   ----------------   -------------   ---------------
   Ver
    ver           01              01-50            50-99
    hash           1               0-9             -none-
    sig            1               0-9             -none-

   If the value of the Hash Algorithm field or the Signature Scheme
   field is needed to go beyond "9" within the current version (first
   two bytes), the IANA should increment the first two bytes of this 4
   byte field to be the next value with the definition that all of the
   subsequent values of fields described in this section are reset to
   "0" while retaining the latest definitions given by the IANA.  For
   example, consider the case that the first two characters are "23" and
   the latest Signature Algorithm is 4.  Let's say that the latest Hash
   Algorithm value is "9" but a better Hash Algorithm is defined.  In
   that case, the IANA will increment the first two bytes to become



Kelsey, et al.            Expires June 11, 2007                [Page 31]

Internet-Draft           Signed syslog Messages            December 2006


   "24", retain the current Hash Algorithm to be "0", define the new
   Hash Algorithm to be "1" in this scheme, and define the current
   Signature Scheme to also be "0".  This example is illustrated in the
   following table.

     Current        New - Equivalent       New with Later
                      to "Current"          Algorithms
     -------        --------------        ---------------
     ver = 23          ver = 24              ver = 24
     hash = 9          hash = 0              hash = 1
     sig = 4           sig = 0               sig = 0

9.3.  SG Field

   The SG field values are numbers as defined in Section 4.2.3.  Values
   "0" through "3" are assigned in this document.  The IANA shall assign
   values "4" through "7" using the "IETF Consensus" policy defined in
   RFC 2434 [5].  Values "8" and "9" shall be left as vendor specific
   and shall not be assigned by the IANA.

9.4.  Key Blob Type

   Section Section 5.2 defines five, one character identifiers for the
   key blob type.  These are the uppercase letters, "C", "P", "K", "N",
   and "U".  All other uppercase letters shall be assigned by the IANA
   using the "IETF Consensus" policy defined in RFC 2434 [5].  Lowercase
   letters are left as vendor specific and shall not be assigned by the
   IANA.























Kelsey, et al.            Expires June 11, 2007                [Page 32]

Internet-Draft           Signed syslog Messages            December 2006


10.  Authors and Working Group Chairs

   Comments are solicited and should be addressed to the working group's
   mailing list and/or the authors.

   The working group can be contacted via the mailing list:

         syslog-sec@employees.org

   The current Chairs of the Working Group may be contacted at:

         Chris Lonvick
         Cisco Systems
         Email: clonvick@cisco.com

         David Harrington
         Huawei Technologies (USA)
         Email: ietfdbh@comcast.net
                dharrington@huawei.com
         Tel: +1-603-436-8634

   The authors of this draft are:

         John Kelsey
         Email: John.Kelsey@nist.gov

         Jon Callas
         Email: jon@callas.org

         Alexander Clemm
         Email: alex@cisco.com




















Kelsey, et al.            Expires June 11, 2007                [Page 33]

Internet-Draft           Signed syslog Messages            December 2006


11.  Acknowledgements

   The authors wish to thank Alex Brown, Chris Calabrese, Steve Chang,
   Carson Gaspar, Drew Gross, David Harrington, Chris Lonvick, Darrin
   New, Marshall Rose, Holt Sorenson, Rodney Thayer, Andrew Ross, Rainer
   Gerhards, Albert Mietus, and the many Counterpane Internet Security
   engineering and operations people who commented on various versions
   of this proposal.











































Kelsey, et al.            Expires June 11, 2007                [Page 34]

Internet-Draft           Signed syslog Messages            December 2006


12.  References

12.1.  Normative References

   [1]   National Institute of Standards and Technology, "Digital
         Signature Standard", FIPS PUB 186-2, January 2000, <http://
         csrc.nist.gov/publications/fips/fips186-2/
         fips186-2-change1.pdf>.

   [2]   National Institute of Standards and Technology, "Secure Hash
         Standard", FIPS PUB 180-2, August 2002, <http://csrc.nist.gov/
         publications/fips/fips180-2/fips180-2.pdf>.

   [3]   National Institute of Standards and Technology, "NIST Special
         Publication 800-90: Recommendation for Random Number Generation
         using Deterministic Random Bit Generators", June 2006, <http://
         csrc.nist.gov/publications/nistpubs/800-90/
         SP800-90_DRBG-June2006-final.pdf>.

   [4]   Postel, J., "User Datagram Protocol", STD 6, RFC 768,
         August 1980.

   [5]   Narten, T. and H. Alvestrand, "Guidelines for Writing an IANA
         Considerations Section in RFCs", BCP 26, RFC 2434,
         October 1998.

   [6]   Callas, J., Donnerhacke, L., Finney, H., and R. Thayer,
         "OpenPGP Message Format", RFC 2440, November 1998.

   [7]   Blumenthal, U. and B. Wijnen, "User-based Security Model (USM)
         for version 3 of the Simple Network Management Protocol
         (SNMPv3)", December 2002.

12.2.  Informative References

   [8]   Eastlake, D., Schiller, J., and S. Crocker, "Randomness
         Recommendations for Security", RFC 4086, June 2005.

   [9]   Bradner, S., "Key words for use in RFCs to Indicate Requirement
         Levels", BCP 14, RFC 2119, March 1997.

   [10]  Lonvick, C., "The BSD Syslog Protocol", RFC 3164, August 2001.

   [11]  New, D. and M. Rose, "Reliable Delivery for syslog", RFC 3195,
         November 2001.

   [12]  Klyne, G. and C. Newman, "Date and Time on the Internet:
         Timestamps", RFC 3339, July 2002.



Kelsey, et al.            Expires June 11, 2007                [Page 35]

Internet-Draft           Signed syslog Messages            December 2006


   [13]  Josefsson, S., "The Base16, Base32, and Base64 Data Encodings",
         RFC 4648, October 2006.

   [14]  Gerhards, R., "The syslog Protocol,
         draft-ietf-syslog-protocol-17.txt (work in progress)",
         June 2006.

   [15]  Okmianski, A., "Transmission of syslog Messages over UDP,
         draft-ietf-syslog-transport-udp-08.txt (work in progress)",
         November 2006.

   [16]  Miao, F. and M. Yuzhi, "TLS Transport Mapping for syslog,
         draft-ietf-syslog-transport-tls-06.txt (work in progress)",
         December 2006.





































Kelsey, et al.            Expires June 11, 2007                [Page 36]

Internet-Draft           Signed syslog Messages            December 2006


Authors' Addresses

   John Kelsey
   NIST

   Email: john.kelsey@nist.gov


   Jon Callas
   PGP Corporation

   Email: jon@callas.org


   Alexander Clemm
   Cisco Systems

   Email: alex@cisco.com

































Kelsey, et al.            Expires June 11, 2007                [Page 37]

Internet-Draft           Signed syslog Messages            December 2006


Full Copyright Statement

   Copyright (C) The IETF Trust (2006).

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND
   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.


Acknowledgment

   Funding for the RFC Editor function is provided by the IETF
   Administrative Support Activity (IASA).





Kelsey, et al.            Expires June 11, 2007                [Page 38]


