pool = getinteger ( "Type size of pool:0 );
selected = (char *) malloc ( pool );
selection = getinteger ( "Type number of items to be selected:0 );
f = NPentropy ( selection, pool ) + 0.1;
err = printf ( "Approximately %.1f bits of entropy needed.0, f );
err = printf (
           "0ype #%d randomness or 'end' followed by new line.0
           "Up to 16 integers or the word 'float' followed by the0
           "before and after decimal point parts.0, i+1 );
j = sscanf ( buffer,
               "%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld%ld",
           &array[0], &array[1], &array[2], &array[3],
           &array[4], &array[5], &array[6], &array[7],
           &array[8], &array[9], &array[10], &array[11],
           &array[12], &array[13], &array[14], &array[15] );
j = sscanf ( buffer, "float %ld %ld",
                   &array[0], &array[1] );
g = array[1] ? 1.25 : 0.0;
                       /* 1.25 if a fraction exists */
err = printf ( "%ld.%ld, estimated entropy %.2f0,
                                  array[0], array[1], g );
temp = array[k];
err = printf ( "%ld ", array[k] ); /* print for user check */
g = log ( abs ( array [0] ) ) / 2.0; /* single integer */
           else
           ..g = NPentropy ( j, array[j-1] ) / 1.3; /* array */
err = printf ( " estimated entropy %.2f0, g );
err = printf ( "Key is: %s0, key );
k = longremainder ( remaining, uc16 );
j = sscanf ( tin, "%d", &i );
kruft = ( kruft << 8 ) + dividend[i];
Clergy = Names were written on pieces of paper, placed in a
Spouse = Same as Clergy except chair's spouse made the selection.

Algorithm = Algorithmic selection based on the same concepts as
