K1 = E(Key, n-fold(Constant), initial-cipher-state)
K2 = E(Key, K1, initial-cipher-state)
K3 = E(Key, K2, initial-cipher-state)
K4 = ...

pad = shortest string to bring confounder
                                and plaintext to a length that's a
                                multiple of m
H1 = HMAC(Ki, conf | plaintext | pad)
ciphertext =  C1 | H1[1..h]
tmp2 = truncate tmp1 to multiple of m
PRF = E(protocol-key, tmp2, initial-cipher-state)

Kc = DK(base-key, usage | 0x99);
Ke = DK(base-key, usage | 0xAA);
Ki = DK(base-key, usage | 0x55);


key = key XOR 0xF0;
odd = 1;
s = string | salt;
tempstring = 0; /* 56-bit string */
odd = ! odd;
tempstring = tempstring XOR 56bitstring;
tempkey = key_correction(add_parity_bits(tempstring));
key = key_correction(DES-CBC-check(s,tempkey));
type = 0;
type = params[0];
ivec=oldstate)
checksum = md5(confounder | 0000...
                                            | msg | pad)

newstate = last block of des-cbc output

newstate = last block of ciphertext
                                des-cbc-md5
ivec=oldstate)
checksum = md4(confounder | 0000...
                                            | msg | pad)

newstate = last block of des-cbc output
                                des-cbc-md4
newstate = last block of ciphertext

ivec=oldstate)
checksum = crc(confounder | 00000000
                                            | msg | pad)

newstate = last block of des-cbc output

newstate = last block of ciphertext

ivec=0)

ivec=0)

s = passwordString + salt
tmpKey = random-to-key(168-fold(s))
key = DK (tmpKey, KerberosConstant)

odd = 1;
s = string | salt;
tempstring = 0; /* 56-bit string */
odd = ! odd
tempstring = tempstring XOR 56bitstring;
            ;; tempstring
            ;; 1110000 1100001 1110011  1110011 1110111 1101111
            ;; 1110010 1100100

odd = ! odd
tempstring = tempstring XOR 56bitstring;
            ;; tempstring
            ;; 0101001 1011011 0110010  1001010 0100110 1100110
            ;; 1100111 0100101

odd = ! odd
tempstring = tempstring XOR 56bitstring;
            ;; tempstring
            ;; 1100000 0001111 0011100  0001111 1100010 0110011
            ;; 0010101 1000100

odd = ! odd
tempstring = tempstring XOR 56bitstring;
            ;; tempstring
            ;; 1100000 0001111 0011100  0110100 1000101 1100100
            ;; 0110110 0010111

tempkey = key_correction(add_parity_bits(tempstring));
            ;; tempkey
            ;; `\xc1\x1f8h\x8a\xc8m\x2f' (length 8 bytes)
            ;; c1 1f 38 68 8a c8 6d 2f
            ;; 11000001 00011111 00111000  01101000 10001010 11001000
            ;; 01101101 00101111
key = key_correction(DES-CBC-check(s,tempkey));
            ;; key
            ;; `\xcb\xc2\x2f\xae\x23R\x98\xe3' (length 8 bytes)
            ;; cb c2 2f ae 23 52 98 e3
            ;; 11001011 11000010 00101111  10101110 00100011 01010010
            ;; 10011000 11100011

            ;; string_to_key key:
            ;; `\xcb\xc2\x2f\xae\x23R\x98\xe3' (length 8 bytes)
            ;; cb c2 2f ae 23 52 98 e3


