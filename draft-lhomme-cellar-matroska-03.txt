



cellar                                                         S. Lhomme
Internet-Draft
Intended status: Standards Track                               M. Bunkus
Expires: January 4, 2018
                                                                 D. Rice
                                                            July 3, 2017


                                Matroska
                    draft-lhomme-cellar-matroska-03

Abstract

   This document defines the Matroska audiovisual container, including
   definitions of its structural Elements, as well as its terminology,
   vocabulary, and application.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 4, 2018.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Lhomme, et al.           Expires January 4, 2018                [Page 1]

Internet-Draft                  Matroska                       July 2017


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .  11
   2.  Status of this document . . . . . . . . . . . . . . . . . . .  12
   3.  Security Considerations . . . . . . . . . . . . . . . . . . .  13
   4.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  13
   5.  Notations and Conventions . . . . . . . . . . . . . . . . . .  13
   6.  Basis in EBML . . . . . . . . . . . . . . . . . . . . . . . .  13
     6.1.  Added Constraints on EBML . . . . . . . . . . . . . . . .  13
     6.2.  Matroska Design . . . . . . . . . . . . . . . . . . . . .  14
       6.2.1.  Language Codes  . . . . . . . . . . . . . . . . . . .  14
       6.2.2.  Physical Types  . . . . . . . . . . . . . . . . . . .  14
       6.2.3.  Block Structure . . . . . . . . . . . . . . . . . . .  15
       6.2.4.  Lacing  . . . . . . . . . . . . . . . . . . . . . . .  17
   7.  Matroska Structure  . . . . . . . . . . . . . . . . . . . . .  20
     7.1.  Matroska Top Level Elements . . . . . . . . . . . . . . .  22
     7.2.  Matroska Additions to Schema Element Attributes . . . . .  29
     7.3.  Matroska Schema . . . . . . . . . . . . . . . . . . . . .  30
       7.3.1.  EBMLMaxIDLength Element . . . . . . . . . . . . . . .  30
       7.3.2.  EBMLMaxSizeLength Element . . . . . . . . . . . . . .  30
       7.3.3.  Segment Element . . . . . . . . . . . . . . . . . . .  31
       7.3.4.  SeekHead Element  . . . . . . . . . . . . . . . . . .  31
       7.3.5.  Seek Element  . . . . . . . . . . . . . . . . . . . .  31
       7.3.6.  SeekID Element  . . . . . . . . . . . . . . . . . . .  32
       7.3.7.  SeekPosition Element  . . . . . . . . . . . . . . . .  32
       7.3.8.  Info Element  . . . . . . . . . . . . . . . . . . . .  33
       7.3.9.  SegmentUID Element  . . . . . . . . . . . . . . . . .  33
       7.3.10. SegmentFilename Element . . . . . . . . . . . . . . .  33
       7.3.11. PrevUID Element . . . . . . . . . . . . . . . . . . .  34
       7.3.12. PrevFilename Element  . . . . . . . . . . . . . . . .  34
       7.3.13. NextUID Element . . . . . . . . . . . . . . . . . . .  35
       7.3.14. NextFilename Element  . . . . . . . . . . . . . . . .  35
       7.3.15. SegmentFamily Element . . . . . . . . . . . . . . . .  36
       7.3.16. ChapterTranslate Element  . . . . . . . . . . . . . .  36
       7.3.17. ChapterTranslateEditionUID Element  . . . . . . . . .  36
       7.3.18. ChapterTranslateCodec Element . . . . . . . . . . . .  37
       7.3.19. ChapterTranslateID Element  . . . . . . . . . . . . .  37
       7.3.20. TimecodeScale Element . . . . . . . . . . . . . . . .  38
       7.3.21. Duration Element  . . . . . . . . . . . . . . . . . .  38
       7.3.22. DateUTC Element . . . . . . . . . . . . . . . . . . .  38
       7.3.23. Title Element . . . . . . . . . . . . . . . . . . . .  39
       7.3.24. MuxingApp Element . . . . . . . . . . . . . . . . . .  39
       7.3.25. WritingApp Element  . . . . . . . . . . . . . . . . .  40
       7.3.26. Cluster Element . . . . . . . . . . . . . . . . . . .  40
       7.3.27. Timecode Element  . . . . . . . . . . . . . . . . . .  40
       7.3.28. SilentTracks Element  . . . . . . . . . . . . . . . .  41
       7.3.29. SilentTrackNumber Element . . . . . . . . . . . . . .  41
       7.3.30. Position Element  . . . . . . . . . . . . . . . . . .  41



Lhomme, et al.           Expires January 4, 2018                [Page 2]

Internet-Draft                  Matroska                       July 2017


       7.3.31. PrevSize Element  . . . . . . . . . . . . . . . . . .  42
       7.3.32. SimpleBlock Element . . . . . . . . . . . . . . . . .  42
       7.3.33. BlockGroup Element  . . . . . . . . . . . . . . . . .  43
       7.3.34. Block Element . . . . . . . . . . . . . . . . . . . .  43
       7.3.35. BlockVirtual Element  . . . . . . . . . . . . . . . .  43
       7.3.36. BlockAdditions Element  . . . . . . . . . . . . . . .  44
       7.3.37. BlockMore Element . . . . . . . . . . . . . . . . . .  44
       7.3.38. BlockAddID Element  . . . . . . . . . . . . . . . . .  44
       7.3.39. BlockAdditional Element . . . . . . . . . . . . . . .  45
       7.3.40. BlockDuration Element . . . . . . . . . . . . . . . .  45
       7.3.41. ReferencePriority Element . . . . . . . . . . . . . .  46
       7.3.42. ReferenceBlock Element  . . . . . . . . . . . . . . .  46
       7.3.43. ReferenceVirtual Element  . . . . . . . . . . . . . .  47
       7.3.44. CodecState Element  . . . . . . . . . . . . . . . . .  47
       7.3.45. DiscardPadding Element  . . . . . . . . . . . . . . .  47
       7.3.46. Slices Element  . . . . . . . . . . . . . . . . . . .  48
       7.3.47. TimeSlice Element . . . . . . . . . . . . . . . . . .  48
       7.3.48. LaceNumber Element  . . . . . . . . . . . . . . . . .  49
       7.3.49. FrameNumber Element . . . . . . . . . . . . . . . . .  49
       7.3.50. BlockAdditionID Element . . . . . . . . . . . . . . .  50
       7.3.51. Delay Element . . . . . . . . . . . . . . . . . . . .  50
       7.3.52. SliceDuration Element . . . . . . . . . . . . . . . .  50
       7.3.53. ReferenceFrame Element  . . . . . . . . . . . . . . .  51
       7.3.54. ReferenceOffset Element . . . . . . . . . . . . . . .  51
       7.3.55. ReferenceTimeCode Element . . . . . . . . . . . . . .  52
       7.3.56. EncryptedBlock Element  . . . . . . . . . . . . . . .  52
       7.3.57. Tracks Element  . . . . . . . . . . . . . . . . . . .  52
       7.3.58. TrackEntry Element  . . . . . . . . . . . . . . . . .  53
       7.3.59. TrackNumber Element . . . . . . . . . . . . . . . . .  53
       7.3.60. TrackUID Element  . . . . . . . . . . . . . . . . . .  54
       7.3.61. TrackType Element . . . . . . . . . . . . . . . . . .  54
       7.3.62. FlagEnabled Element . . . . . . . . . . . . . . . . .  54
       7.3.63. FlagDefault Element . . . . . . . . . . . . . . . . .  55
       7.3.64. FlagForced Element  . . . . . . . . . . . . . . . . .  55
       7.3.65. FlagLacing Element  . . . . . . . . . . . . . . . . .  56
       7.3.66. MinCache Element  . . . . . . . . . . . . . . . . . .  56
       7.3.67. MaxCache Element  . . . . . . . . . . . . . . . . . .  57
       7.3.68. DefaultDuration Element . . . . . . . . . . . . . . .  57
       7.3.69. DefaultDecodedFieldDuration Element . . . . . . . . .  58
       7.3.70. TrackTimecodeScale Element  . . . . . . . . . . . . .  58
       7.3.71. TrackOffset Element . . . . . . . . . . . . . . . . .  59
       7.3.72. MaxBlockAdditionID Element  . . . . . . . . . . . . .  59
       7.3.73. Name Element  . . . . . . . . . . . . . . . . . . . .  59
       7.3.74. Language Element  . . . . . . . . . . . . . . . . . .  60
       7.3.75. LanguageIETF Element  . . . . . . . . . . . . . . . .  60
       7.3.76. CodecID Element . . . . . . . . . . . . . . . . . . .  61
       7.3.77. CodecPrivate Element  . . . . . . . . . . . . . . . .  61
       7.3.78. CodecName Element . . . . . . . . . . . . . . . . . .  61



Lhomme, et al.           Expires January 4, 2018                [Page 3]

Internet-Draft                  Matroska                       July 2017


       7.3.79. AttachmentLink Element  . . . . . . . . . . . . . . .  62
       7.3.80. CodecSettings Element . . . . . . . . . . . . . . . .  62
       7.3.81. CodecInfoURL Element  . . . . . . . . . . . . . . . .  62
       7.3.82. CodecDownloadURL Element  . . . . . . . . . . . . . .  63
       7.3.83. CodecDecodeAll Element  . . . . . . . . . . . . . . .  63
       7.3.84. TrackOverlay Element  . . . . . . . . . . . . . . . .  64
       7.3.85. CodecDelay Element  . . . . . . . . . . . . . . . . .  64
       7.3.86. SeekPreRoll Element . . . . . . . . . . . . . . . . .  64
       7.3.87. TrackTranslate Element  . . . . . . . . . . . . . . .  65
       7.3.88. TrackTranslateEditionUID Element  . . . . . . . . . .  65
       7.3.89. TrackTranslateCodec Element . . . . . . . . . . . . .  65
       7.3.90. TrackTranslateTrackID Element . . . . . . . . . . . .  66
       7.3.91. Video Element . . . . . . . . . . . . . . . . . . . .  66
       7.3.92. FlagInterlaced Element  . . . . . . . . . . . . . . .  67
       7.3.93. FieldOrder Element  . . . . . . . . . . . . . . . . .  67
       7.3.94. StereoMode Element  . . . . . . . . . . . . . . . . .  68
       7.3.95. AlphaMode Element . . . . . . . . . . . . . . . . . .  68
       7.3.96. OldStereoMode Element . . . . . . . . . . . . . . . .  68
       7.3.97. PixelWidth Element  . . . . . . . . . . . . . . . . .  69
       7.3.98. PixelHeight Element . . . . . . . . . . . . . . . . .  69
       7.3.99. PixelCropBottom Element . . . . . . . . . . . . . . .  70
       7.3.100. PixelCropTop Element . . . . . . . . . . . . . . . .  70
       7.3.101. PixelCropLeft Element  . . . . . . . . . . . . . . .  70
       7.3.102. PixelCropRight Element . . . . . . . . . . . . . . .  71
       7.3.103. DisplayWidth Element . . . . . . . . . . . . . . . .  71
       7.3.104. DisplayHeight Element  . . . . . . . . . . . . . . .  72
       7.3.105. DisplayUnit Element  . . . . . . . . . . . . . . . .  72
       7.3.106. AspectRatioType Element  . . . . . . . . . . . . . .  73
       7.3.107. ColourSpace Element  . . . . . . . . . . . . . . . .  73
       7.3.108. GammaValue Element . . . . . . . . . . . . . . . . .  73
       7.3.109. FrameRate Element  . . . . . . . . . . . . . . . . .  74
       7.3.110. Colour Element . . . . . . . . . . . . . . . . . . .  74
       7.3.111. MatrixCoefficients Element . . . . . . . . . . . . .  75
       7.3.112. BitsPerChannel Element . . . . . . . . . . . . . . .  75
       7.3.113. ChromaSubsamplingHorz Element  . . . . . . . . . . .  75
       7.3.114. ChromaSubsamplingVert Element  . . . . . . . . . . .  76
       7.3.115. CbSubsamplingHorz Element  . . . . . . . . . . . . .  76
       7.3.116. CbSubsamplingVert Element  . . . . . . . . . . . . .  77
       7.3.117. ChromaSitingHorz Element . . . . . . . . . . . . . .  77
       7.3.118. ChromaSitingVert Element . . . . . . . . . . . . . .  77
       7.3.119. Range Element  . . . . . . . . . . . . . . . . . . .  78
       7.3.120. TransferCharacteristics Element  . . . . . . . . . .  78
       7.3.121. Primaries Element  . . . . . . . . . . . . . . . . .  79
       7.3.122. MaxCLL Element . . . . . . . . . . . . . . . . . . .  79
       7.3.123. MaxFALL Element  . . . . . . . . . . . . . . . . . .  79
       7.3.124. MasteringMetadata Element  . . . . . . . . . . . . .  80
       7.3.125. PrimaryRChromaticityX Element  . . . . . . . . . . .  80
       7.3.126. PrimaryRChromaticityY Element  . . . . . . . . . . .  81



Lhomme, et al.           Expires January 4, 2018                [Page 4]

Internet-Draft                  Matroska                       July 2017


       7.3.127. PrimaryGChromaticityX Element  . . . . . . . . . . .  81
       7.3.128. PrimaryGChromaticityY Element  . . . . . . . . . . .  81
       7.3.129. PrimaryBChromaticityX Element  . . . . . . . . . . .  82
       7.3.130. PrimaryBChromaticityY Element  . . . . . . . . . . .  82
       7.3.131. WhitePointChromaticityX Element  . . . . . . . . . .  83
       7.3.132. WhitePointChromaticityY Element  . . . . . . . . . .  83
       7.3.133. LuminanceMax Element . . . . . . . . . . . . . . . .  83
       7.3.134. LuminanceMin Element . . . . . . . . . . . . . . . .  84
       7.3.135. Projection Element . . . . . . . . . . . . . . . . .  84
       7.3.136. ProjectionType Element . . . . . . . . . . . . . . .  85
       7.3.137. ProjectionPrivate Element  . . . . . . . . . . . . .  85
       7.3.138. ProjectionPoseYaw Element  . . . . . . . . . . . . .  86
       7.3.139. ProjectionPosePitch Element  . . . . . . . . . . . .  86
       7.3.140. ProjectionPoseRoll Element . . . . . . . . . . . . .  87
       7.3.141. Audio Element  . . . . . . . . . . . . . . . . . . .  87
       7.3.142. SamplingFrequency Element  . . . . . . . . . . . . .  88
       7.3.143. OutputSamplingFrequency Element  . . . . . . . . . .  88
       7.3.144. Channels Element . . . . . . . . . . . . . . . . . .  89
       7.3.145. ChannelPositions Element . . . . . . . . . . . . . .  89
       7.3.146. BitDepth Element . . . . . . . . . . . . . . . . . .  89
       7.3.147. TrackOperation Element . . . . . . . . . . . . . . .  90
       7.3.148. TrackCombinePlanes Element . . . . . . . . . . . . .  90
       7.3.149. TrackPlane Element . . . . . . . . . . . . . . . . .  91
       7.3.150. TrackPlaneUID Element  . . . . . . . . . . . . . . .  91
       7.3.151. TrackPlaneType Element . . . . . . . . . . . . . . .  91
       7.3.152. TrackJoinBlocks Element  . . . . . . . . . . . . . .  92
       7.3.153. TrackJoinUID Element . . . . . . . . . . . . . . . .  92
       7.3.154. TrickTrackUID Element  . . . . . . . . . . . . . . .  93
       7.3.155. TrickTrackSegmentUID Element . . . . . . . . . . . .  93
       7.3.156. TrickTrackFlag Element . . . . . . . . . . . . . . .  93
       7.3.157. TrickMasterTrackUID Element  . . . . . . . . . . . .  94
       7.3.158. TrickMasterTrackSegmentUID Element . . . . . . . . .  94
       7.3.159. ContentEncodings Element . . . . . . . . . . . . . .  95
       7.3.160. ContentEncoding Element  . . . . . . . . . . . . . .  95
       7.3.161. ContentEncodingOrder Element . . . . . . . . . . . .  95
       7.3.162. ContentEncodingScope Element . . . . . . . . . . . .  96
       7.3.163. ContentEncodingType Element  . . . . . . . . . . . .  96
       7.3.164. ContentCompression Element . . . . . . . . . . . . .  97
       7.3.165. ContentCompAlgo Element  . . . . . . . . . . . . . .  97
       7.3.166. ContentCompSettings Element  . . . . . . . . . . . .  98
       7.3.167. ContentEncryption Element  . . . . . . . . . . . . .  98
       7.3.168. ContentEncAlgo Element . . . . . . . . . . . . . . .  99
       7.3.169. ContentEncKeyID Element  . . . . . . . . . . . . . .  99
       7.3.170. ContentSignature Element . . . . . . . . . . . . . .  99
       7.3.171. ContentSigKeyID Element  . . . . . . . . . . . . . . 100
       7.3.172. ContentSigAlgo Element . . . . . . . . . . . . . . . 100
       7.3.173. ContentSigHashAlgo Element . . . . . . . . . . . . . 101
       7.3.174. Cues Element . . . . . . . . . . . . . . . . . . . . 101



Lhomme, et al.           Expires January 4, 2018                [Page 5]

Internet-Draft                  Matroska                       July 2017


       7.3.175. CuePoint Element . . . . . . . . . . . . . . . . . . 101
       7.3.176. CueTime Element  . . . . . . . . . . . . . . . . . . 102
       7.3.177. CueTrackPositions Element  . . . . . . . . . . . . . 102
       7.3.178. CueTrack Element . . . . . . . . . . . . . . . . . . 102
       7.3.179. CueClusterPosition Element . . . . . . . . . . . . . 103
       7.3.180. CueRelativePosition Element  . . . . . . . . . . . . 103
       7.3.181. CueDuration Element  . . . . . . . . . . . . . . . . 104
       7.3.182. CueBlockNumber Element . . . . . . . . . . . . . . . 104
       7.3.183. CueCodecState Element  . . . . . . . . . . . . . . . 104
       7.3.184. CueReference Element . . . . . . . . . . . . . . . . 105
       7.3.185. CueRefTime Element . . . . . . . . . . . . . . . . . 105
       7.3.186. CueRefCluster Element  . . . . . . . . . . . . . . . 106
       7.3.187. CueRefNumber Element . . . . . . . . . . . . . . . . 106
       7.3.188. CueRefCodecState Element . . . . . . . . . . . . . . 107
       7.3.189. Attachments Element  . . . . . . . . . . . . . . . . 107
       7.3.190. AttachedFile Element . . . . . . . . . . . . . . . . 107
       7.3.191. FileDescription Element  . . . . . . . . . . . . . . 108
       7.3.192. FileName Element . . . . . . . . . . . . . . . . . . 108
       7.3.193. FileMimeType Element . . . . . . . . . . . . . . . . 108
       7.3.194. FileData Element . . . . . . . . . . . . . . . . . . 109
       7.3.195. FileUID Element  . . . . . . . . . . . . . . . . . . 109
       7.3.196. FileReferral Element . . . . . . . . . . . . . . . . 110
       7.3.197. FileUsedStartTime Element  . . . . . . . . . . . . . 110
       7.3.198. FileUsedEndTime Element  . . . . . . . . . . . . . . 110
       7.3.199. Chapters Element . . . . . . . . . . . . . . . . . . 111
       7.3.200. EditionEntry Element . . . . . . . . . . . . . . . . 111
       7.3.201. EditionUID Element . . . . . . . . . . . . . . . . . 111
       7.3.202. EditionFlagHidden Element  . . . . . . . . . . . . . 112
       7.3.203. EditionFlagDefault Element . . . . . . . . . . . . . 112
       7.3.204. EditionFlagOrdered Element . . . . . . . . . . . . . 113
       7.3.205. ChapterAtom Element  . . . . . . . . . . . . . . . . 113
       7.3.206. ChapterUID Element . . . . . . . . . . . . . . . . . 114
       7.3.207. ChapterStringUID Element . . . . . . . . . . . . . . 114
       7.3.208. ChapterTimeStart Element . . . . . . . . . . . . . . 114
       7.3.209. ChapterTimeEnd Element . . . . . . . . . . . . . . . 115
       7.3.210. ChapterFlagHidden Element  . . . . . . . . . . . . . 115
       7.3.211. ChapterFlagEnabled Element . . . . . . . . . . . . . 116
       7.3.212. ChapterSegmentUID Element  . . . . . . . . . . . . . 116
       7.3.213. ChapterSegmentEditionUID Element . . . . . . . . . . 117
       7.3.214. ChapterPhysicalEquiv Element . . . . . . . . . . . . 117
       7.3.215. ChapterTrack Element . . . . . . . . . . . . . . . . 118
       7.3.216. ChapterTrackNumber Element . . . . . . . . . . . . . 118
       7.3.217. ChapterDisplay Element . . . . . . . . . . . . . . . 118
       7.3.218. ChapString Element . . . . . . . . . . . . . . . . . 119
       7.3.219. ChapLanguage Element . . . . . . . . . . . . . . . . 119
       7.3.220. ChapLanguageIETF Element . . . . . . . . . . . . . . 120
       7.3.221. ChapCountry Element  . . . . . . . . . . . . . . . . 120
       7.3.222. ChapProcess Element  . . . . . . . . . . . . . . . . 120



Lhomme, et al.           Expires January 4, 2018                [Page 6]

Internet-Draft                  Matroska                       July 2017


       7.3.223. ChapProcessCodecID Element . . . . . . . . . . . . . 121
       7.3.224. ChapProcessPrivate Element . . . . . . . . . . . . . 121
       7.3.225. ChapProcessCommand Element . . . . . . . . . . . . . 122
       7.3.226. ChapProcessTime Element  . . . . . . . . . . . . . . 122
       7.3.227. ChapProcessData Element  . . . . . . . . . . . . . . 122
       7.3.228. Tags Element . . . . . . . . . . . . . . . . . . . . 123
       7.3.229. Tag Element  . . . . . . . . . . . . . . . . . . . . 123
       7.3.230. Targets Element  . . . . . . . . . . . . . . . . . . 123
       7.3.231. TargetTypeValue Element  . . . . . . . . . . . . . . 124
       7.3.232. TargetType Element . . . . . . . . . . . . . . . . . 124
       7.3.233. TagTrackUID Element  . . . . . . . . . . . . . . . . 125
       7.3.234. TagEditionUID Element  . . . . . . . . . . . . . . . 125
       7.3.235. TagChapterUID Element  . . . . . . . . . . . . . . . 125
       7.3.236. TagAttachmentUID Element . . . . . . . . . . . . . . 126
       7.3.237. SimpleTag Element  . . . . . . . . . . . . . . . . . 126
       7.3.238. TagName Element  . . . . . . . . . . . . . . . . . . 126
       7.3.239. TagLanguage Element  . . . . . . . . . . . . . . . . 127
       7.3.240. TagLanguageIETF Element  . . . . . . . . . . . . . . 127
       7.3.241. TagDefault Element . . . . . . . . . . . . . . . . . 128
       7.3.242. TagString Element  . . . . . . . . . . . . . . . . . 128
       7.3.243. TagBinary Element  . . . . . . . . . . . . . . . . . 129
   8.  Beginning of File . . . . . . . . . . . . . . . . . . . . . . 129
   9.  Block Timecodes . . . . . . . . . . . . . . . . . . . . . . . 129
   10. Default decoded field duration  . . . . . . . . . . . . . . . 130
   11. Default Values  . . . . . . . . . . . . . . . . . . . . . . . 130
   12. DRM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
   13. Encryption  . . . . . . . . . . . . . . . . . . . . . . . . . 131
   14. Image cropping  . . . . . . . . . . . . . . . . . . . . . . . 131
   15. Matroska version indicators . . . . . . . . . . . . . . . . . 131
   16. Mime Types  . . . . . . . . . . . . . . . . . . . . . . . . . 132
   17. Octet . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
   18. Overlay Track . . . . . . . . . . . . . . . . . . . . . . . . 132
   19. Segment Position  . . . . . . . . . . . . . . . . . . . . . . 132
     19.1.  Segment Position Exception . . . . . . . . . . . . . . . 133
     19.2.  Example of Segment Position  . . . . . . . . . . . . . . 133
   20. Raw Timecode  . . . . . . . . . . . . . . . . . . . . . . . . 133
   21. Linked Segments . . . . . . . . . . . . . . . . . . . . . . . 133
     21.1.  Hard Linking . . . . . . . . . . . . . . . . . . . . . . 134
     21.2.  Soft Linking . . . . . . . . . . . . . . . . . . . . . . 134
     21.3.  Medium Linking . . . . . . . . . . . . . . . . . . . . . 135
   22. Timecode Types  . . . . . . . . . . . . . . . . . . . . . . . 135
   23. TimecodeScale . . . . . . . . . . . . . . . . . . . . . . . . 135
   24. TimecodeScale Rounding  . . . . . . . . . . . . . . . . . . . 136
   25. Track Flags . . . . . . . . . . . . . . . . . . . . . . . . . 138
     25.1.  Default flag . . . . . . . . . . . . . . . . . . . . . . 138
     25.2.  Forced flag  . . . . . . . . . . . . . . . . . . . . . . 138
   26. TrackTimecodeScale  . . . . . . . . . . . . . . . . . . . . . 138
   27. Unknown elements  . . . . . . . . . . . . . . . . . . . . . . 140



Lhomme, et al.           Expires January 4, 2018                [Page 7]

Internet-Draft                  Matroska                       July 2017


   28. Multi-planar and 3D videos  . . . . . . . . . . . . . . . . . 140
   29. Track Operation . . . . . . . . . . . . . . . . . . . . . . . 141
   30. Matroska Element Ordering Guidelines  . . . . . . . . . . . . 141
     30.1.  Top-Level Elements . . . . . . . . . . . . . . . . . . . 142
     30.2.  CRC-32 . . . . . . . . . . . . . . . . . . . . . . . . . 142
     30.3.  SeekHead . . . . . . . . . . . . . . . . . . . . . . . . 142
     30.4.  Cues (index) . . . . . . . . . . . . . . . . . . . . . . 143
     30.5.  Info . . . . . . . . . . . . . . . . . . . . . . . . . . 143
     30.6.  Chapters . . . . . . . . . . . . . . . . . . . . . . . . 143
     30.7.  Attachments  . . . . . . . . . . . . . . . . . . . . . . 143
     30.8.  Tags . . . . . . . . . . . . . . . . . . . . . . . . . . 143
     30.9.  Optimum layout from a muxer  . . . . . . . . . . . . . . 144
     30.10. Optimum layout after editing tags  . . . . . . . . . . . 144
     30.11. Optimum layout with Cues at the front  . . . . . . . . . 144
     30.12. Cluster Timecode . . . . . . . . . . . . . . . . . . . . 145
   31. Codec Mappings  . . . . . . . . . . . . . . . . . . . . . . . 145
     31.1.  Defining Matroska Codec Support  . . . . . . . . . . . . 145
       31.1.1.  Codec ID . . . . . . . . . . . . . . . . . . . . . . 145
       31.1.2.  Codec Name . . . . . . . . . . . . . . . . . . . . . 146
       31.1.3.  Description  . . . . . . . . . . . . . . . . . . . . 146
       31.1.4.  Initialisation . . . . . . . . . . . . . . . . . . . 146
       31.1.5.  Citation . . . . . . . . . . . . . . . . . . . . . . 147
       31.1.6.  Deprecation Date . . . . . . . . . . . . . . . . . . 147
       31.1.7.  Superseded By  . . . . . . . . . . . . . . . . . . . 147
     31.2.  Video Codec Mappings . . . . . . . . . . . . . . . . . . 147
       31.2.1.  V_MS/VFW/FOURCC  . . . . . . . . . . . . . . . . . . 147
       31.2.2.  V_UNCOMPRESSED . . . . . . . . . . . . . . . . . . . 147
       31.2.3.  V_MPEG4/ISO/SP . . . . . . . . . . . . . . . . . . . 148
       31.2.4.  V_MPEG4/ISO/ASP  . . . . . . . . . . . . . . . . . . 148
       31.2.5.  V_MPEG4/ISO/AP . . . . . . . . . . . . . . . . . . . 148
       31.2.6.  V_MPEG4/MS/V3  . . . . . . . . . . . . . . . . . . . 149
       31.2.7.  V_MPEG1  . . . . . . . . . . . . . . . . . . . . . . 149
       31.2.8.  V_MPEG2  . . . . . . . . . . . . . . . . . . . . . . 149
       31.2.9.  V_REAL/RV10  . . . . . . . . . . . . . . . . . . . . 149
       31.2.10. V_REAL/RV20  . . . . . . . . . . . . . . . . . . . . 150
       31.2.11. V_REAL/RV30  . . . . . . . . . . . . . . . . . . . . 150
       31.2.12. V_REAL/RV40  . . . . . . . . . . . . . . . . . . . . 150
       31.2.13. V_QUICKTIME  . . . . . . . . . . . . . . . . . . . . 150
       31.2.14. V_THEORA . . . . . . . . . . . . . . . . . . . . . . 151
       31.2.15. V_PRORES . . . . . . . . . . . . . . . . . . . . . . 151
       31.2.16. V_VP8  . . . . . . . . . . . . . . . . . . . . . . . 152
       31.2.17. V_VP9  . . . . . . . . . . . . . . . . . . . . . . . 152
       31.2.18. V_FFV1 . . . . . . . . . . . . . . . . . . . . . . . 152
     31.3.  Audio Codec Mappings . . . . . . . . . . . . . . . . . . 153
       31.3.1.  A_MPEG/L3  . . . . . . . . . . . . . . . . . . . . . 153
       31.3.2.  A_MPEG/L2  . . . . . . . . . . . . . . . . . . . . . 153
       31.3.3.  A_MPEG/L1  . . . . . . . . . . . . . . . . . . . . . 153
       31.3.4.  A_PCM/INT/BIG  . . . . . . . . . . . . . . . . . . . 153



Lhomme, et al.           Expires January 4, 2018                [Page 8]

Internet-Draft                  Matroska                       July 2017


       31.3.5.  A_PCM/INT/LIT  . . . . . . . . . . . . . . . . . . . 154
       31.3.6.  A_PCM/FLOAT/IEEE . . . . . . . . . . . . . . . . . . 154
       31.3.7.  A_MPC  . . . . . . . . . . . . . . . . . . . . . . . 154
       31.3.8.  A_AC3  . . . . . . . . . . . . . . . . . . . . . . . 154
       31.3.9.  A_AC3/BSID9  . . . . . . . . . . . . . . . . . . . . 155
       31.3.10. A_AC3/BSID10 . . . . . . . . . . . . . . . . . . . . 155
       31.3.11. A_ALAC . . . . . . . . . . . . . . . . . . . . . . . 155
       31.3.12. A_DTS  . . . . . . . . . . . . . . . . . . . . . . . 155
       31.3.13. A_DTS/EXPRESS  . . . . . . . . . . . . . . . . . . . 156
       31.3.14. A_DTS/LOSSLESS . . . . . . . . . . . . . . . . . . . 156
       31.3.15. A_VORBIS . . . . . . . . . . . . . . . . . . . . . . 156
       31.3.16. A_FLAC . . . . . . . . . . . . . . . . . . . . . . . 157
       31.3.17. A_REAL/14_4  . . . . . . . . . . . . . . . . . . . . 157
       31.3.18. A_REAL/28_8  . . . . . . . . . . . . . . . . . . . . 157
       31.3.19. A_REAL/COOK  . . . . . . . . . . . . . . . . . . . . 157
       31.3.20. A_REAL/SIPR  . . . . . . . . . . . . . . . . . . . . 158
       31.3.21. A_REAL/RALF  . . . . . . . . . . . . . . . . . . . . 158
       31.3.22. A_REAL/ATRC  . . . . . . . . . . . . . . . . . . . . 158
       31.3.23. A_MS/ACM . . . . . . . . . . . . . . . . . . . . . . 158
       31.3.24. A_AAC/MPEG2/MAIN . . . . . . . . . . . . . . . . . . 159
       31.3.25. A_AAC/MPEG2/LC . . . . . . . . . . . . . . . . . . . 159
       31.3.26. A_AAC/MPEG2/LC/SBR . . . . . . . . . . . . . . . . . 159
       31.3.27. A_AAC/MPEG2/SSR  . . . . . . . . . . . . . . . . . . 159
       31.3.28. A_AAC/MPEG4/MAIN . . . . . . . . . . . . . . . . . . 160
       31.3.29. A_AAC/MPEG4/LC . . . . . . . . . . . . . . . . . . . 160
       31.3.30. A_AAC/MPEG4/LC/SBR . . . . . . . . . . . . . . . . . 160
       31.3.31. A_AAC/MPEG4/SSR  . . . . . . . . . . . . . . . . . . 161
       31.3.32. A_AAC/MPEG4/LTP  . . . . . . . . . . . . . . . . . . 161
       31.3.33. A_QUICKTIME  . . . . . . . . . . . . . . . . . . . . 161
       31.3.34. A_QUICKTIME/QDMC . . . . . . . . . . . . . . . . . . 161
       31.3.35. A_QUICKTIME/QDM2 . . . . . . . . . . . . . . . . . . 162
       31.3.36. A_TTA1 . . . . . . . . . . . . . . . . . . . . . . . 162
       31.3.37. A_WAVPACK4 . . . . . . . . . . . . . . . . . . . . . 162
     31.4.  Subtitle Codec Mappings  . . . . . . . . . . . . . . . . 163
       31.4.1.  S_TEXT/UTF8  . . . . . . . . . . . . . . . . . . . . 163
       31.4.2.  S_TEXT/SSA . . . . . . . . . . . . . . . . . . . . . 163
       31.4.3.  S_TEXT/ASS . . . . . . . . . . . . . . . . . . . . . 163
       31.4.4.  S_TEXT/USF . . . . . . . . . . . . . . . . . . . . . 163
       31.4.5.  S_TEXT/WEBVTT  . . . . . . . . . . . . . . . . . . . 163
       31.4.6.  S_IMAGE/BMP  . . . . . . . . . . . . . . . . . . . . 164
       31.4.7.  S_DVBSUB . . . . . . . . . . . . . . . . . . . . . . 164
       31.4.8.  S_VOBSUB . . . . . . . . . . . . . . . . . . . . . . 164
       31.4.9.  S_HDMV/PGS . . . . . . . . . . . . . . . . . . . . . 165
       31.4.10. S_HDMV/TEXTST  . . . . . . . . . . . . . . . . . . . 165
       31.4.11. S_KATE . . . . . . . . . . . . . . . . . . . . . . . 165
     31.5.  Button Codec Mappings  . . . . . . . . . . . . . . . . . 165
       31.5.1.  B_VOBBTN . . . . . . . . . . . . . . . . . . . . . . 165
     31.6.  Edition and Chapter Flags  . . . . . . . . . . . . . . . 166



Lhomme, et al.           Expires January 4, 2018                [Page 9]

Internet-Draft                  Matroska                       July 2017


       31.6.1.  Chapter Flags  . . . . . . . . . . . . . . . . . . . 166
       31.6.2.  Edition Flags  . . . . . . . . . . . . . . . . . . . 166
     31.7.  Menu features  . . . . . . . . . . . . . . . . . . . . . 167
       31.7.1.  Matroska Script (0)  . . . . . . . . . . . . . . . . 167
       31.7.2.  DVD menu (1) . . . . . . . . . . . . . . . . . . . . 167
     31.8.  Example 1 : basic chaptering . . . . . . . . . . . . . . 169
     31.9.  Example 2 : nested chapters  . . . . . . . . . . . . . . 171
       31.9.1.  The Micronauts "Bleep To Bleep"  . . . . . . . . . . 171
   32. Subtitles . . . . . . . . . . . . . . . . . . . . . . . . . . 174
   33. Images Subtitles  . . . . . . . . . . . . . . . . . . . . . . 174
   34. SRT Subtitles . . . . . . . . . . . . . . . . . . . . . . . . 177
   35. SSA/ASS Subtitles . . . . . . . . . . . . . . . . . . . . . . 178
   36. USF Subtitles . . . . . . . . . . . . . . . . . . . . . . . . 181
   37. WebVTT  . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
     37.1.  Storage of WebVTT in Matroska  . . . . . . . . . . . . . 182
       37.1.1.  CodecID: codec identification  . . . . . . . . . . . 182
       37.1.2.  CodecPrivate: storage of gloal WebVTT blocks . . . . 182
       37.1.3.  Storage of non-global WebVTT blocks  . . . . . . . . 182
       37.1.4.  Storage of Cues in Matroska blocks . . . . . . . . . 182
       37.1.5.  BlockAdditions: storing non-global WebVTT blocks,
                Cue Settings Lists and Cue identifiers . . . . . . . 182
     37.2.  Examples of transformation . . . . . . . . . . . . . . . 183
       37.2.1.  Example WebVTT file  . . . . . . . . . . . . . . . . 183
       37.2.2.  CodecPrivate . . . . . . . . . . . . . . . . . . . . 185
       37.2.3.  Storage of Cue 1 . . . . . . . . . . . . . . . . . . 185
       37.2.4.  Storage of Cue 2 . . . . . . . . . . . . . . . . . . 186
       37.2.5.  Storage of Cue 3 . . . . . . . . . . . . . . . . . . 186
       37.2.6.  Storage of Cue 4 . . . . . . . . . . . . . . . . . . 186
     37.3.  Storage of WebVTT in Matroska vs. WebM . . . . . . . . . 186
   38. HDMV presentation graphics subtitles  . . . . . . . . . . . . 187
     38.1.  Storage of HDMV presentation graphics subtitles  . . . . 187
       38.1.1.  CodecID & CodecPrivate: codec identification . . . . 187
       38.1.2.  Storage of HDMV PGS Segments in Matroska Blocks  . . 187
   39. HDMV text subtitles . . . . . . . . . . . . . . . . . . . . . 187
     39.1.  Storage of HDMV text subtitles . . . . . . . . . . . . . 188
       39.1.1.  CodecID & CodecPrivate: codec identification . . . . 188
       39.1.2.  Storage of HDMV TextST Dialog Presentation Segments
                in Matroska Blocks . . . . . . . . . . . . . . . . . 188
       39.1.3.  Character set  . . . . . . . . . . . . . . . . . . . 188
   40. Digital Video Broadcasting (DVB) subtitles  . . . . . . . . . 188
     40.1.  Storage of DVB subtitles . . . . . . . . . . . . . . . . 189
       40.1.1.  CodecID  . . . . . . . . . . . . . . . . . . . . . . 189
       40.1.2.  CodecPrivate . . . . . . . . . . . . . . . . . . . . 189
       40.1.3.  Storage of DVB subtitles in Matroska Blocks  . . . . 189
   41. Tagging . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
     41.1.  Why official tags matter . . . . . . . . . . . . . . . . 190
     41.2.  Tag translations . . . . . . . . . . . . . . . . . . . . 191
     41.3.  Tag Formatting . . . . . . . . . . . . . . . . . . . . . 191



Lhomme, et al.           Expires January 4, 2018               [Page 10]

Internet-Draft                  Matroska                       July 2017


     41.4.  Target types . . . . . . . . . . . . . . . . . . . . . . 191
     41.5.  Official tags  . . . . . . . . . . . . . . . . . . . . . 192
     41.6.  Nesting Information  . . . . . . . . . . . . . . . . . . 192
     41.7.  Organization Information . . . . . . . . . . . . . . . . 193
     41.8.  Titles . . . . . . . . . . . . . . . . . . . . . . . . . 193
     41.9.  Nested Information . . . . . . . . . . . . . . . . . . . 194
     41.10. Entities . . . . . . . . . . . . . . . . . . . . . . . . 194
     41.11. Search and Classification  . . . . . . . . . . . . . . . 196
     41.12. Temporal Information . . . . . . . . . . . . . . . . . . 198
     41.13. Spacial Information  . . . . . . . . . . . . . . . . . . 198
     41.14. Personal . . . . . . . . . . . . . . . . . . . . . . . . 199
     41.15. Technical Information  . . . . . . . . . . . . . . . . . 200
     41.16. Identifiers  . . . . . . . . . . . . . . . . . . . . . . 202
     41.17. Commercial . . . . . . . . . . . . . . . . . . . . . . . 202
     41.18. Legal  . . . . . . . . . . . . . . . . . . . . . . . . . 203
     41.19. Notes  . . . . . . . . . . . . . . . . . . . . . . . . . 203
   42. Attachments . . . . . . . . . . . . . . . . . . . . . . . . . 204
     42.1.  Introduction . . . . . . . . . . . . . . . . . . . . . . 204
     42.2.  Cover Art  . . . . . . . . . . . . . . . . . . . . . . . 204
     42.3.  Font files . . . . . . . . . . . . . . . . . . . . . . . 205
   43. Cues  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
     43.1.  Introduction . . . . . . . . . . . . . . . . . . . . . . 205
     43.2.  Recommendations  . . . . . . . . . . . . . . . . . . . . 205
   44. Matroska Streaming  . . . . . . . . . . . . . . . . . . . . . 206
   45. File Access . . . . . . . . . . . . . . . . . . . . . . . . . 206
   46. Live Streaming  . . . . . . . . . . . . . . . . . . . . . . . 206
   47. Menu Specifications . . . . . . . . . . . . . . . . . . . . . 207
   48. Introduction  . . . . . . . . . . . . . . . . . . . . . . . . 207
   49. Requirements  . . . . . . . . . . . . . . . . . . . . . . . . 207
     49.1.  Highlights/Hotspots  . . . . . . . . . . . . . . . . . . 207
     49.2.  Playback features  . . . . . . . . . . . . . . . . . . . 208
     49.3.  Player requirements  . . . . . . . . . . . . . . . . . . 209
   50. Working Graph . . . . . . . . . . . . . . . . . . . . . . . . 209
   51. Ideas . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209
   52. Data Structure  . . . . . . . . . . . . . . . . . . . . . . . 209
   53. References  . . . . . . . . . . . . . . . . . . . . . . . . . 209
     53.1.  Normative References . . . . . . . . . . . . . . . . . . 209
     53.2.  URIs . . . . . . . . . . . . . . . . . . . . . . . . . . 209
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . . 215

1.  Introduction

   Matroska aims to become THE standard of multimedia container formats.
   It was derived from a project called MCF [1], but differentiates from
   it significantly because it is based on EBML [2] (Extensible Binary
   Meta Language), a binary derivative of XML.  EBML enables significant
   advantages in terms of future format extensibility, without breaking
   file support in old parsers.



Lhomme, et al.           Expires January 4, 2018               [Page 11]

Internet-Draft                  Matroska                       July 2017


   First, it is essential to clarify exactly "What an Audio/Video
   container is", to avoid any misunderstandings:

   o  It is NOT a video or audio compression format (codec)

   o  It is an envelope for which there can be many audio, video and
      subtitles streams, allowing the user to store a complete movie or
      CD in a single file.

   Matroska is designed with the future in mind.  It incorporates
   features like:

   o  Fast seeking in the file

   o  Chapter entries

   o  Full metadata (tags) support

   o  Selectable subtitle/audio/video streams

   o  Modularly expandable

   o  Error resilience (can recover playback even when the stream is
      damaged)

   o  Streamable over the internet and local networks (HTTP, CIFS, FTP,
      etc)

   o  Menus (like DVDs have)

   Matroska is an open standards project.  This means for personal use
   it is absolutely free to use and that the technical specifications
   describing the bitstream are open to everybody, even to companies
   that would like to support it in their products.

2.  Status of this document

   This document is a work-in-progress specification defining the
   Matroska file format as part of the IETF Cellar working group [3].
   But since it's quite complete it is used as a reference for the
   development of libmatroska.  Legacy versions of the specification can
   be found here [4] (PDF doc by Alexander Noe -- outdated).

   For a simplified diagram of the layout of a Matroska file, see the
   Diagram page [5].

   A more refined and detailed version of the EBML specifications is
   being worked on here [6].



Lhomme, et al.           Expires January 4, 2018               [Page 12]

Internet-Draft                  Matroska                       July 2017


   The table found below is now generated from the "source" of the
   Matroska specification.  This XML file [7] is also used to generate
   the semantic data used in libmatroska and libmatroska2.  We encourage
   anyone to use and monitor its changes so your code is spec-proof and
   always up to date.

   Note that versions 1, 2 and 3 have been finalized.  Version 4 is
   currently work in progress.  There MAY be further additions to v4.

3.  Security Considerations

   Matroska inherits security considerations from EBML.

   Attacks on a "Matroska Reader" could include:

   o  Storage of a arbitrary and potentially executable data within an
      "Attachment Element".  "Matroska Readers" that extract or use data
      from Matroska Attachments SHOULD check that the data adheres to
      expectations.

   o  A "Matroska Attachment" with an inaccurate mime-type.

4.  IANA Considerations

   To be determined.

5.  Notations and Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [8].

6.  Basis in EBML

   Matroska is a Document Type of EBML (Extensible Binary Meta
   Language).  This specification is dependent on the EBML Specification
   [9].  For an understanding of Matroska's EBML Schema, see in
   particular the sections of the EBML Specification covering EBML
   Element Types [10], EBML Schema [11], and EBML Structure [12].

6.1.  Added Constraints on EBML

   As an EBML Document Type, Matroska adds the following constraints to
   the EBML specification.

   o  The "docType" of the "EBML Header" MUST be 'matroska'.

   o  The "EBMLMaxIDLength" of the "EBML Header" MUST be "4".



Lhomme, et al.           Expires January 4, 2018               [Page 13]

Internet-Draft                  Matroska                       July 2017


   o  The "EBMLMaxSizeLength" of the "EBML Header" MUST be between "1"
      and "8" inclusive.

6.2.  Matroska Design

   All top-levels elements (Segment and direct sub-elements) are coded
   on 4 octets, i.e. class D elements.

6.2.1.  Language Codes

   Matroska from version 1 through 3 uses language codes that can be
   either the 3 letters bibliographic ISO-639-2 [13] form (like "fre"
   for french), or such a language code followed by a dash and a country
   code for specialities in languages (like "fre-ca" for Canadian
   French).  The "ISO 639-2 Language Elements" are "Language Element",
   "TagLanguage Element", and "ChapLanguage Element".

   Starting in Matroska version 4, either "ISO 639-2" or BCP 47 [14] MAY
   be used, although "BCP 47" is RECOMMENDED.  The "BCP 47 Language
   Elements" are "LanguageIETF Element", "TagLanguageIETF Element", and
   "ChapLanguageIETF Element".  If a "BCP 47 Language Element" and an
   "ISO 639-2 Language Element" are used within the same "Parent
   Element", then the "ISO 639-2 Lanaguage Element" MUST be ignored and
   precedence given to the "BCP 47 Language Element".

   Country codes are the same as used for internet domains [15].

6.2.2.  Physical Types

   Each level can have different meanings for audio and video.  The
   ORIGINAL_MEDIUM tag can be used to specify a string for
   ChapterPhysicalEquiv = 60.  Here is the list of possible levels for
   both audio and video :


















Lhomme, et al.           Expires January 4, 2018               [Page 14]

Internet-Draft                  Matroska                       July 2017


   +----------------------+--------------+-----------+-----------------+
   | ChapterPhysicalEquiv | Audio        | Video     | Comment         |
   +----------------------+--------------+-----------+-----------------+
   | 70                   | SET /        | SET /     | the collection  |
   |                      | PACKAGE      | PACKAGE   | of different    |
   |                      |              |           | media           |
   | 60                   | CD / 12" /   | DVD / VHS | the physical    |
   |                      | 10" / 7" /   | /         | medium like a   |
   |                      | TAPE /       | LASERDISC | CD or a DVD     |
   |                      | MINIDISC /   |           |                 |
   |                      | DAT          |           |                 |
   | 50                   | SIDE         | SIDE      | when the        |
   |                      |              |           | original medium |
   |                      |              |           | (LP/DVD) has    |
   |                      |              |           | different sides |
   | 40                   | -            | LAYER     | another         |
   |                      |              |           | physical level  |
   |                      |              |           | on DVDs         |
   | 30                   | SESSION      | SESSION   | as found on CDs |
   |                      |              |           | and DVDs        |
   | 20                   | TRACK        | -         | as found on     |
   |                      |              |           | audio CDs       |
   | 10                   | INDEX        | -         | the first       |
   |                      |              |           | logical level   |
   |                      |              |           | of the          |
   |                      |              |           | side/medium     |
   +----------------------+--------------+-----------+-----------------+

6.2.3.  Block Structure

   Size = 1 + (1-8) + 4 + (4 + (4)) octets.  So from 6 to 21 octets.

   Bit 0 is the most significant bit.

   Frames using references SHOULD be stored in "coding order".  That
   means the references first and then the frames referencing them.  A
   consequence is that timecodes MAY NOT be consecutive.  But a frame
   with a past timecode MUST reference a frame already known, otherwise
   it's considered bad/void.

   There can be many Blocks in a BlockGroup provided they all have the
   same timecode.  It is used with different parts of a frame with
   different priorities.








Lhomme, et al.           Expires January 4, 2018               [Page 15]

Internet-Draft                  Matroska                       July 2017


6.2.3.1.  Block Header

   +--------+--------+-------------------------------------------------+
   | Offset | Player | Description                                     |
   +--------+--------+-------------------------------------------------+
   | 0x00+  | MUST   | Track Number (Track Entry). It is coded in EBML |
   |        |        | like form (1 octet if the value is < 0x80, 2 if |
   |        |        | < 0x4000, etc) (most significant bits set to    |
   |        |        | increase the range).                            |
   | 0x01+  | MUST   | Timecode (relative to Cluster timecode, signed  |
   |        |        | int16)                                          |
   +--------+--------+-------------------------------------------------+

6.2.3.2.  Block Header Flags

   +--------+-----+--------+-------------------------------------------+
   | Offset | Bit | Player | Description                               |
   +--------+-----+--------+-------------------------------------------+
   | 0x03+  | 0-3 | -      | Reserved, set to 0                        |
   | 0x03+  | 4   | -      | Invisible, the codec SHOULD decode this   |
   |        |     |        | frame but not display it                  |
   | 0x03+  | 5-6 | MUST   | Lacing                                    |
   |        |     |        | *   00 : no lacing                        |
   |        |     |        | *   01 : Xiph lacing                      |
   |        |     |        | *   11 : EBML lacing                      |
   |        |     |        | *   10 : fixed-size lacing                |
   | 0x03+  | 7   | -      | not used                                  |
   +--------+-----+--------+-------------------------------------------+

6.2.3.3.  Laced Data

   When lacing bit is set.

   +--------+--------+-------------------------------------------------+
   | Offset | Player | Description                                     |
   +--------+--------+-------------------------------------------------+
   | 0x00   | MUST   | Number of frames in the lace-1 (uint8)          |
   | 0x01 / | MUST*  | Lace-coded size of each frame of the lace,      |
   | 0xXX   |        | except for the last one (multiple uint8). *This |
   |        |        | is not used with Fixed-size lacing as it is     |
   |        |        | calculated automatically from (total size of    |
   |        |        | lace) / (number of frames in lace).             |
   +--------+--------+-------------------------------------------------+

   For (possibly) Laced Data






Lhomme, et al.           Expires January 4, 2018               [Page 16]

Internet-Draft                  Matroska                       July 2017


              +--------+--------+--------------------------+
              | Offset | Player | Description              |
              +--------+--------+--------------------------+
              | 0x00   | MUST   | Consecutive laced frames |
              +--------+--------+--------------------------+

6.2.4.  Lacing

   Lacing is a mechanism to save space when storing data.  It is
   typically used for small blocks of data (refered to as frames in
   matroska).  There are 3 types of lacing : the Xiph one inspired by
   what is found in the Ogg container, the EBML one which is the same
   with sizes coded differently and the fixed-size one where the size is
   not coded.  As an example is better than words...

   Let's say you want to store 3 frames of the same track.  The first
   frame is 800 octets long, the second is 500 octets long and the third
   is 1000 octets long.  As these data are small, you can store them in
   a lace to save space.  They will then be solved in the same block as
   follows:

6.2.4.1.  Xiph lacing

   o  Block head (with lacing bits set to 01)

   o  Lacing head: Number of frames in the lace -1, i.e. 2 (the 800 and
      500 octets one)

   o  Lacing sizes: only the 2 first ones will be coded, 800 gives
      255;255;255;35, 500 gives 255;245.  The size of the last frame is
      deduced from the total size of the Block.

   o  Data in frame 1

   o  Data in frame 2

   o  Data in frame 3

   A frame with a size multiple of 255 is coded with a 0 at the end of
   the size, for example 765 is coded 255;255;255;0.

6.2.4.2.  EBML lacing

   In this case the size is not coded as blocks of 255 bytes, but as a
   difference with the previous size and this size is coded as in EBML.
   The first size in the lace is unsigned as in EBML.  The others use a
   range shifting to get a sign on each value :




Lhomme, et al.           Expires January 4, 2018               [Page 17]

Internet-Draft                  Matroska                       July 2017


   +----------------------------------+--------------------------------+
   | Bit Representation               | Value                          |
   +----------------------------------+--------------------------------+
   | 1xxx xxxx                        | value -(2^6-1) to 2^6-1 (ie 0  |
   |                                  | to 2^7-2 minus 2^6-1, half of  |
   |                                  | the range)                     |
   | 01xx xxxx  xxxx xxxx             | value -(2^13-1) to 2^13-1      |
   | 001x xxxx  xxxx xxxx  xxxx xxxx  | value -(2^20-1) to 2^20-1      |
   | 0001 xxxx  xxxx xxxx  xxxx xxxx  | value -(2^27-1) to 2^27-1      |
   | xxxx xxxx                        |                                |
   | 0000 1xxx  xxxx xxxx  xxxx xxxx  | value -(2^34-1) to 2^34-1      |
   | xxxx xxxx  xxxx xxxx             |                                |
   | 0000 01xx  xxxx xxxx  xxxx xxxx  | value -(2^41-1) to 2^41-1      |
   | xxxx xxxx  xxxx xxxx  xxxx xxxx  |                                |
   | 0000 001x  xxxx xxxx  xxxx xxxx  | value -(2^48-1) to 2^48-1      |
   | xxxx xxxx  xxxx xxxx  xxxx xxxx  |                                |
   | xxxx xxxx                        |                                |
   +----------------------------------+--------------------------------+

   o  Block head (with lacing bits set to 11)

   o  Lacing head: Number of frames in the lace -1, i.e. 2 (the 800 and
      400 octets one)

   o  Lacing sizes: only the 2 first ones will be coded, 800 gives 0x320
      0x4000 = 0x4320, 500 is coded as -300 : - 0x12C + 0x1FFF + 0x4000
      = 0x5ED3.  The size of the last frame is deduced from the total
      size of the Block.

   o  Data in frame 1

   o  Data in frame 2

   o  Data in frame 3

6.2.4.3.  Fixed-size lacing

   In this case only the number of frames in the lace is saved, the size
   of each frame is deduced from the total size of the Block.  For
   example, for 3 frames of 800 octets each :

   o  Block head (with lacing bits set to 10)

   o  Lacing head: Number of frames in the lace -1, i.e. 2

   o  Data in frame 1

   o  Data in frame 2



Lhomme, et al.           Expires January 4, 2018               [Page 18]

Internet-Draft                  Matroska                       July 2017


   o  Data in frame 3

6.2.4.4.  SimpleBlock Structure

   The SimpleBlock is very inspired by the [Block
   structure](({{site.baseurl}}/index.html#block-structure).  The main
   differences are the added Keyframe flag and Discardable flag.
   Otherwise everything is the same.

   Size = 1 + (1-8) + 4 + (4 + (4)) octets.  So from 6 to 21 octets.

   Bit 0 is the most significant bit.

   Frames using references SHOULD be stored in "coding order".  That
   means the references first and then the frames referencing them.  A
   consequence is that timecodes MAY NOT be consecutive.  But a frame
   with a past timecode MUST reference a frame already known, otherwise
   it's considered bad/void.

   There can be many Blocks in a BlockGroup provided they all have the
   same timecode.  It is used with different parts of a frame with
   different priorities.

6.2.4.4.1.  SimpleBlock Header

   +--------+--------+-------------------------------------------------+
   | Offset | Player | Description                                     |
   +--------+--------+-------------------------------------------------+
   | 0x00+  | MUST   | Track Number (Track Entry). It is coded in EBML |
   |        |        | like form (1 octet if the value is < 0x80, 2 if |
   |        |        | < 0x4000, etc) (most significant bits set to    |
   |        |        | increase the range).                            |
   | 0x01+  | MUST   | Timecode (relative to Cluster timecode, signed  |
   |        |        | int16)                                          |
   +--------+--------+-------------------------------------------------+

6.2.4.4.2.  SimpleBlock Header Flags














Lhomme, et al.           Expires January 4, 2018               [Page 19]

Internet-Draft                  Matroska                       July 2017


   +--------+-----+--------+-------------------------------------------+
   | Offset | Bit | Player | Description                               |
   +--------+-----+--------+-------------------------------------------+
   | 0x03+  | 0   | -      | Keyframe, set when the Block contains     |
   |        |     |        | only keyframes                            |
   | 0x03+  | 1-3 | -      | Reserved, set to 0                        |
   | 0x03+  | 4   | -      | Invisible, the codec SHOULD decode this   |
   |        |     |        | frame but not display it                  |
   | 0x03+  | 5-6 | MUST   | Lacing                                    |
   |        |     |        | *   00 : no lacing                        |
   |        |     |        | *   01 : Xiph lacing                      |
   |        |     |        | *   11 : EBML lacing                      |
   |        |     |        | *   10 : fixed-size lacing                |
   | 0x03+  | 7   | -      | Discardable, the frames of the Block can  |
   |        |     |        | be discarded during playing if needed     |
   +--------+-----+--------+-------------------------------------------+

6.2.4.5.  Laced Data

   When lacing bit is set.

   +--------+--------+-------------------------------------------------+
   | Offset | Player | Description                                     |
   +--------+--------+-------------------------------------------------+
   | 0x00   | MUST   | Number of frames in the lace-1 (uint8)          |
   | 0x01 / | MUST*  | Lace-coded size of each frame of the lace,      |
   | 0xXX   |        | except for the last one (multiple uint8). *This |
   |        |        | is not used with Fixed-size lacing as it is     |
   |        |        | calculated automatically from (total size of    |
   |        |        | lace) / (number of frames in lace).             |
   +--------+--------+-------------------------------------------------+

   For (possibly) Laced Data

              +--------+--------+--------------------------+
              | Offset | Player | Description              |
              +--------+--------+--------------------------+
              | 0x00   | MUST   | Consecutive laced frames |
              +--------+--------+--------------------------+

7.  Matroska Structure

   A Matroska file is composed of one or many "EBML Documents" that use
   the "Matroska Document Type".  Each "EBML Document" MUST start with
   an "EBML Header" and then the "Root Element", which is called
   "Segment" in Matroska.  Matroska defines several "Top Level Elements"
   which MAY occur within the "Segment".




Lhomme, et al.           Expires January 4, 2018               [Page 20]

Internet-Draft                  Matroska                       July 2017


   As an example, a simple Matroska file consisting of a single "EBML
   Document" could be represented like this:

   o  EBML Header

   o  Segment

   A more complex Matroska file consisting of an "EBML Stream"
   (consisting of two "EBML Documents") could be represented like this:

   o  EBML Header

   o  Segment

   o  EBML Header

   o  Segment

   The following diagram represents a simple Matroska file, comprised of
   an "EBML Document" with an "EBML Header", a "Segment Element" (the
   "Root Element"), and all eight Matroska "Top Level Elements".  In the
   following diagrams of this section, horizontal spacing expresses a
   parent-child relationship between Matroska Elements (e.g. the "Info
   Element" is contained within the "Segment Element") whereas vertical
   alignment represents the storage order within the file.

                       +-------------+
                       | EBML Header |
                       +---------------------------+
                       | Segment     | SeekHead    |
                       |             |-------------|
                       |             | Info        |
                       |             |-------------|
                       |             | Tracks      |
                       |             |-------------|
                       |             | Chapters    |
                       |             |-------------|
                       |             | Cluster     |
                       |             |-------------|
                       |             | Cues        |
                       |             |-------------|
                       |             | Attachments |
                       |             |-------------|
                       |             | Tags        |
                       +---------------------------+






Lhomme, et al.           Expires January 4, 2018               [Page 21]

Internet-Draft                  Matroska                       July 2017


7.1.  Matroska Top Level Elements

   The Matroska "EBML Schema" defines eight "Top Level Elements":
   "SeekHead", "Info", "Tracks", "Chapters", "Cluster", "Cues",
   "Attachments", and "Tags".

   The "SeekHead Element" (also known as "MetaSeek") contains an index
   of where other "Top Level Elements" of the "Segment" are located in
   order to let the parser know where the other major parts of the file
   are.  This element isn't technicaly REQUIRED, but without a "SeekHead
   Element" a "Matroska Parser" would have to search the entire file to
   find all of the other "Top Level Elements".  This is because Matroska
   has flexible ordering requirements; for instance, the "Chapters
   Element" could be stored after the "Cluster Elements".

                    +--------------------------------+
                    | SeekHead | Seek | SeekID       |
                    |          |      |--------------|
                    |          |      | SeekPosition |
                    +--------------------------------+

                   Representation of a SeekHead Element.

   The "Info Element" contains vital information for identifying the
   whole "Segment".  This includes the title for the "Segment", a
   randomly generated unique identifier so that the file can be
   identified around the world, and if it is part of a series of
   "Segments", the unique identifier(s) of any linked "Segments".























Lhomme, et al.           Expires January 4, 2018               [Page 22]

Internet-Draft                  Matroska                       July 2017


                        +-------------------------+
                        | Info | SegmentUID       |
                        |      |------------------|
                        |      | SegmentFilename  |
                        |      |------------------|
                        |      | PrevUID          |
                        |      |------------------|
                        |      | PrevFilename     |
                        |      |------------------|
                        |      | NextUID          |
                        |      |------------------|
                        |      | NextFilename     |
                        |      |------------------|
                        |      | SegmentFamily    |
                        |      |------------------|
                        |      | ChapterTranslate |
                        |      |------------------|
                        |      | TimecodeScale    |
                        |      |------------------|
                        |      | Duration         |
                        |      |------------------|
                        |      | DateUTC          |
                        |      |------------------|
                        |      | Title            |
                        |      |------------------|
                        |      | MuxingApp        |
                        |      |------------------|
                        |      | WritingApp       |
                        |-------------------------|

         Representation of a Info Element and its Child Elements.

   The "Tracks Elements" tells us the technical details of what is in
   each track.  For instance, is it a video, audio or subtitle track?
   What resolution is the video?  What sample rate is the audio?  The
   "Tracks Elements" can store the name, number, unique identifier,
   language, and type (audio, video, subtitles, etc) of each track.  The
   "Tracks Element" also identifies what codec to use to decode the
   track and has the codec's private data for the track.












Lhomme, et al.           Expires January 4, 2018               [Page 23]

Internet-Draft                  Matroska                       July 2017


        +------------------------------------+
        | Tracks | TrackEntry | TrackNumber  |
        |        |            |--------------|
        |        |            | TrackUID     |
        |        |            |--------------|
        |        |            | TrackType    |
        |        |            |--------------|
        |        |            | Name         |
        |        |            |--------------|
        |        |            | Language     |
        |        |            |--------------|
        |        |            | CodecID      |
        |        |            |--------------|
        |        |            | CodecPrivate |
        |        |            |--------------|
        |        |            | CodecName    |
        |        |            |----------------------------------+
        |        |            | Video        | FlagInterlaced    |
        |        |            |              |-------------------|
        |        |            |              | FieldOrder        |
        |        |            |              |-------------------|
        |        |            |              | StereoMode        |
        |        |            |              |-------------------|
        |        |            |              | AlphaMode         |
        |        |            |              |-------------------|
        |        |            |              | PixelWidth        |
        |        |            |              |-------------------|
        |        |            |              | PixelHeight       |
        |        |            |              |-------------------|
        |        |            |              | DisplayWidth      |
        |        |            |              |-------------------|
        |        |            |              | DisplayHeight     |
        |        |            |              |-------------------|
        |        |            |              | AspectRatioType   |
        |        |            |              |-------------------|
        |        |            |              | Color             |
        |        |            |----------------------------------|
        |        |            | Audio        | SamplingFrequency |
        |        |            |              |-------------------|
        |        |            |              | Channels          |
        |        |            |              |-------------------|
        |        |            |              | BitDepth          |
        |--------------------------------------------------------|


        Representation of the Tracks Element and a selection of its
                           Descendant Elements.




Lhomme, et al.           Expires January 4, 2018               [Page 24]

Internet-Draft                  Matroska                       July 2017


   The "Chapters Element" section lists all of the Chapters.  Chapters
   are a way to set predefined points to jump to in video or audio.

+----------------------------------------------+
| Chapters | EditionEntry | EditionUID         |
|          |              |--------------------|
|          |              | EditionFlagHidden  |
|          |              |--------------------|
|          |              | EditionFlagDefault |
|          |              |--------------------|
|          |              | EditionFlagOrdered |
|          |              |----------------------------------------+
|          |              | ChapterAtom        | ChapterUID        |
|          |              |                    |-------------------|
|          |              |                    | ChapterStringUID  |
|          |              |                    |-------------------|
|          |              |                    | ChapterTimeStart  |
|          |              |                    |-------------------|
|          |              |                    | ChapterTimeEnd    |
|          |              |                    |-------------------|
|          |              |                    | ChapterFlagHidden |
|          |              |                    |----------------------------------+
|          |              |                    | ChapterDisplay    | ChapString   |
|          |              |                    |                   |--------------|
|          |              |                    |                   | ChapLanguage |
+---------------------------------------------------------------------------------+

       Representation of the Chapters Element and a selection of its
                           Descendant Elements.

   The "Cluster Elements" contain all of the video frames and audio for
   each track.  In a given Matroska file, there are usually many
   "Cluster Elements".  The Clusters help to break up the "SimpleBlock"
   or "BlockGroup Elements" and help with seeking and error protection.
   It is RECOMMENDED the size of each individual "Cluster Element" be
   limited to store no more than 5 seconds or 5 megabytes.  Every
   Cluster contains a timecode, usually the timecode that the first
   Block in the Cluster SHOULD be played back, but it doesn't have to
   be.  Then there are one or more (usually many more) "BlockGroups" or
   "SimpleBlocks" in each Cluster.  A BlockGroup can contain a Block of
   data, and any information relating directly to that Block.










Lhomme, et al.           Expires January 4, 2018               [Page 25]

Internet-Draft                  Matroska                       July 2017


                       +--------------------------+
                       | Cluster | Timecode       |
                       |         |----------------|
                       |         | SilentTracks   |
                       |         |----------------|
                       |         | Position       |
                       |         |----------------|
                       |         | PrevSize       |
                       |         |----------------|
                       |         | SimpleBlock    |
                       |         |----------------|
                       |         | BlockGroup     |
                       |         |----------------|
                       |         | EncryptedBlock |
                       +--------------------------+

   Representation of a Cluster Element and its immediate Child Elements.

   Below is a representation of the Block structure.

   o  Portion of Block

      *  Data Type

         +  Bit Flag

   o  Header

      *  TrackNumber

      *  Timecode

      *  Flags

      *  Gap

      *  Lacing

      *  Reserved

   o  Optional

      *  FrameSize

   o  Data

      *  Frame




Lhomme, et al.           Expires January 4, 2018               [Page 26]

Internet-Draft                  Matroska                       July 2017


   Although the Timecode value is stored once per Cluster, another
   timecode is stored within the Block structure itself.  The way this
   works is that the Timecode in the Cluster is relative to the entire
   "Segment".  It is usually the Timecode that the first Block in the
   Cluster needs to be played at.  The Timecode in the Block itself is
   relative to the Timecode in the Cluster.  For example, let's say that
   the Timecode in the Cluster is set to 10 seconds, and you have a
   Block in that Cluster that is supposed to be played 12 seconds into
   the clip; this means that the Timecode in the Block would be set to 2
   seconds.

   The "ReferenceBlock" in the BlockGroup, is used instead of the basic
   "P-frame"/"B-frame" description.  Instead of simply saying that this
   Block depends on the Block directly before, or directly afterwards,
   we put the timecode of the needed Block.  And because you can have as
   many "ReferenceBlock Elements" as you want for a Block, it allows for
   some extremely complex referencing.

   The "Cues Element" is used to seek when playing back a file by
   providing a temporal index for each of the tracks.  It is similar to
   the "SeekHead Element", but this is used for seeking to a specific
   time when playing back the file.  Without this it is possible to
   seek, but it is much more difficult because the player has to 'hunt
   and peck' through the file looking for the correct timecode.  "Cues"
   contains "CuePoint Elements" which store the timecode ("CueTime") and
   then a listing for the exact position in the file for each of the
   tracks for that timecode.  The "Cues" are pretty flexible for what
   exactly you want to index.  For instance, you can index every single
   timecode of every "Block" or index selectively.  If you have a video
   file, it is RECOMMENDED to index at least the keyframes of the video
   track.

                  +-------------------------------------+
                  | Cues | CuePoint | CueTime           |
                  |      |          |-------------------|
                  |      |          | CueTrackPositions |
                  |      |------------------------------|
                  |      | CuePoint | CueTime           |
                  |      |          |-------------------|
                  |      |          | CueTrackPositions |
                  +-------------------------------------+

     Representation of a Cues Element and two levels of its Descendant
                                 Elements.

   The "Attachments Element" is for attaching files to a Matroska file
   such as pictures, webpages, programs, or even the codec needed to
   play back the file.



Lhomme, et al.           Expires January 4, 2018               [Page 27]

Internet-Draft                  Matroska                       July 2017


            +------------------------------------------------+
            | Attachments | AttachedFile | FileDescription   |
            |             |              |-------------------|
            |             |              | FileName          |
            |             |              |-------------------|
            |             |              | FileMimeType      |
            |             |              |-------------------|
            |             |              | FileData          |
            |             |              |-------------------|
            |             |              | FileUID           |
            |             |              |-------------------|
            |             |              | FileName          |
            |             |              |-------------------|
            |             |              | FileReferral      |
            |             |              |-------------------|
            |             |              | FileUsedStartTime |
            |             |              |-------------------|
            |             |              | FileUsedEndTime   |
            +------------------------------------------------+

                 Representation of a Attachments Element.

   The "Tags Element" contains metadata that describes the "Segment" and
   potentially its "Tracks", "Chapters", and "Attachments".  Each Track
   or Chapter that those tags applies to has its UID listed in the tags.
   The Tags contain all extra information about the file, script writer,
   singer, actors, directors, titles, edition, price, dates, genre,
   comments, etc.  And it allows you to enter many of these (title,
   edition, comments, etc.) in different languages.






















Lhomme, et al.           Expires January 4, 2018               [Page 28]

Internet-Draft                  Matroska                       July 2017


               +-------------------------------------------+
               | Tags | Tag | Targets   | TargetTypeValue  |
               |      |     |           |------------------|
               |      |     |           | TargetType       |
               |      |     |           |------------------|
               |      |     |           | TagTrackUID      |
               |      |     |           |------------------|
               |      |     |           | TagEditionUID    |
               |      |     |           |------------------|
               |      |     |           | TagChapterUID    |
               |      |     |           |------------------|
               |      |     |           | TagAttachmentUID |
               |      |     |------------------------------|
               |      |     | SimpleTag | TagName          |
               |      |     |           |------------------|
               |      |     |           | TagLanguage      |
               |      |     |           |------------------|
               |      |     |           | TagDefault       |
               |      |     |           |------------------|
               |      |     |           | TagString        |
               |      |     |           |------------------|
               |      |     |           | TagBinary        |
               |      |     |           |------------------|
               |      |     |           | SimpleTag        |
               +-------------------------------------------+

     Representation of a Tags Element and three levels of its Children
                        Elements. # Matroska Schema

   This specification includes an "EBML Schema" which defines the
   Elements and structure of Matroska as an EBML Document Type.  The
   EBML Schema defines every valid Matroska element in a manner defined
   by the EBML specification.

7.2.  Matroska Additions to Schema Element Attributes

   In addition to the EBML Schema definition provided by the EBML
   Specification, Matroska adds the following additional attributes:













Lhomme, et al.           Expires January 4, 2018               [Page 29]

Internet-Draft                  Matroska                       July 2017


   +-----------+----------+--------------------------------------------+
   | attribute | required | definition                                 |
   | name      |          |                                            |
   +-----------+----------+--------------------------------------------+
   | webm      | No       | A boolean to express if the Matroska       |
   |           |          | Element is also supported within version 2 |
   |           |          | of the "webm" specification. Please        |
   |           |          | consider the webm specification [16] as    |
   |           |          | the authoritative on "webm".               |
   +-----------+----------+--------------------------------------------+

7.3.  Matroska Schema

   Here the definition of each Matroska Element is provided.

   % concatenate with Matroska EBML Schema converted to markdown %

7.3.1.  EBMLMaxIDLength Element

   name: "EBMLMaxIDLength"

   path: "1*1(\EBML\EBMLMaxIDLength)"

   id: "0x42F2"

   minOccurs: "1"

   maxOccurs: "1"

   range: "4"

   default: "4"

   type: "uinteger"

7.3.2.  EBMLMaxSizeLength Element

   name: "EBMLMaxSizeLength"

   path: "1*1(\EBML\EBMLMaxSizeLength)"

   id: "0x42F3"

   minOccurs: "1"

   maxOccurs: "1"

   range: "1-8"



Lhomme, et al.           Expires January 4, 2018               [Page 30]

Internet-Draft                  Matroska                       July 2017


   default: "8"

   type: "uinteger"

7.3.3.  Segment Element

   name: "Segment"

   path: "1*1(\Segment)"

   id: "0x18538067"

   minOccurs: "1"

   maxOccurs: "1"

   type: "master"

   unknownsizeallowed: "1"

   minver: "1"

   documentation: The Root Element that contains all other Top-Level
   Elements (Elements defined only at Level 1).  A Matroska file is
   composed of 1 Segment.

7.3.4.  SeekHead Element

   name: "SeekHead"

   path: "0*2(\Segment\SeekHead)"

   id: "0x114D9B74"

   maxOccurs: "2"

   type: "master"

   minver: "1"

   documentation: Contains the Segment Position of other Top-Level
   Elements.

7.3.5.  Seek Element

   name: "Seek"

   path: "1*(\Segment\SeekHead\Seek)"



Lhomme, et al.           Expires January 4, 2018               [Page 31]

Internet-Draft                  Matroska                       July 2017


   id: "0x4DBB"

   minOccurs: "1"

   type: "master"

   minver: "1"

   documentation: Contains a single seek entry to an EBML Element.

7.3.6.  SeekID Element

   name: "SeekID"

   path: "1*1(\Segment\SeekHead\Seek\SeekID)"

   id: "0x53AB"

   minOccurs: "1"

   maxOccurs: "1"

   type: "binary"

   minver: "1"

   documentation: The binary ID corresponding to the Element name.

7.3.7.  SeekPosition Element

   name: "SeekPosition"

   path: "1*1(\Segment\SeekHead\Seek\SeekPosition)"

   id: "0x53AC"

   minOccurs: "1"

   maxOccurs: "1"

   type: "uinteger"

   minver: "1"

   documentation: The Segment Position of the Element.






Lhomme, et al.           Expires January 4, 2018               [Page 32]

Internet-Draft                  Matroska                       July 2017


7.3.8.  Info Element

   name: "Info"

   path: "1*(\Segment\Info)"

   id: "0x1549A966"

   minOccurs: "1"

   type: "master"

   minver: "1"

   definition: Contains general information about the Segment.

7.3.9.  SegmentUID Element

   name: "SegmentUID"

   path: "0*1(\Segment\Info\SegmentUID)"

   id: "0x73A4"

   maxOccurs: "1"

   range: "not 0"

   size: "16"

   type: "binary"

   minver: "1"

   definition: A randomly generated unique ID to identify the Segment
   amongst many others (128 bits).

   usage notes: If the Segment is a part of a Linked Segment then this
   Element is REQUIRED.

7.3.10.  SegmentFilename Element

   name: "SegmentFilename"

   path: "0*1(\Segment\Info\SegmentFilename)"

   id: "0x7384"




Lhomme, et al.           Expires January 4, 2018               [Page 33]

Internet-Draft                  Matroska                       July 2017


   maxOccurs: "1"

   type: "utf-8"

   minver: "1"

   definition: A filename corresponding to this Segment.

7.3.11.  PrevUID Element

   name: "PrevUID"

   path: "0*1(\Segment\Info\PrevUID)"

   id: "0x3CB923"

   maxOccurs: "1"

   size: "16"

   type: "binary"

   minver: "1"

   definition: A unique ID to identify the previous Segment of a Linked
   Segment (128 bits).

   usage notes: If the Segment is a part of a Linked Segment that uses
   Hard Linking then either the PrevUID or the NextUID Element is
   REQUIRED.  If a Segment contains a PrevUID but not a NextUID then it
   MAY be considered as the last Segment of the Linked Segment.  The
   PrevUID MUST NOT be equal to the SegmentUID.

7.3.12.  PrevFilename Element

   name: "PrevFilename"

   path: "0*1(\Segment\Info\PrevFilename)"

   id: "0x3C83AB"

   maxOccurs: "1"

   type: "utf-8"

   minver: "1"





Lhomme, et al.           Expires January 4, 2018               [Page 34]

Internet-Draft                  Matroska                       July 2017


   definition: A filename corresponding to the file of the previous
   Linked Segment.

   usage notes: Provision of the previous filename is for display
   convenience, but PrevUID SHOULD be considered authoritative for
   identifying the previous Segment in a Linked Segment.

7.3.13.  NextUID Element

   name: "NextUID"

   path: "0*1(\Segment\Info\NextUID)"

   id: "0x3EB923"

   maxOccurs: "1"

   size: "16"

   type: "binary"

   minver: "1"

   definition: A unique ID to identify the next Segment of a Linked
   Segment (128 bits).

   usage notes: If the Segment is a part of a Linked Segment that uses
   Hard Linking then either the PrevUID or the NextUID Element is
   REQUIRED.  If a Segment contains a NextUID but not a PrevUID then it
   MAY be considered as the first Segment of the Linked Segment.  The
   NextUID MUST NOT be equal to the SegmentUID.

7.3.14.  NextFilename Element

   name: "NextFilename"

   path: "0*1(\Segment\Info\NextFilename)"

   id: "0x3E83BB"

   maxOccurs: "1"

   type: "utf-8"

   minver: "1"

   definition: A filename corresponding to the file of the next Linked
   Segment.



Lhomme, et al.           Expires January 4, 2018               [Page 35]

Internet-Draft                  Matroska                       July 2017


   usage notes: Provision of the next filename is for display
   convenience, but NextUID SHOULD be considered authoritative for
   identifying the Next Segment.

7.3.15.  SegmentFamily Element

   name: "SegmentFamily"

   path: "0*(\Segment\Info\SegmentFamily)"

   id: "0x4444"

   size: "16"

   type: "binary"

   minver: "1"

   definition: A randomly generated unique ID that all Segments of a
   Linked Segment MUST share (128 bits).

   usage notes: If the Segment is a part of a Linked Segment that uses
   Soft Linking then this Element is REQUIRED.

7.3.16.  ChapterTranslate Element

   name: "ChapterTranslate"

   path: "0*(\Segment\Info\ChapterTranslate)"

   id: "0x6924"

   type: "master"

   minver: "1"

   documentation: A tuple of corresponding ID used by chapter codecs to
   represent this Segment.

7.3.17.  ChapterTranslateEditionUID Element

   name: "ChapterTranslateEditionUID"

   path: "0*(\Segment\Info\ChapterTranslate\ChapterTranslateEditionUID)"

   id: "0x69FC"

   type: "uinteger"



Lhomme, et al.           Expires January 4, 2018               [Page 36]

Internet-Draft                  Matroska                       July 2017


   minver: "1"

   documentation: Specify an edition UID on which this correspondance
   applies.  When not specified, it means for all editions found in the
   Segment.

7.3.18.  ChapterTranslateCodec Element

   name: "ChapterTranslateCodec"

   path: "1*1(\Segment\Info\ChapterTranslate\ChapterTranslateCodec)"

   id: "0x69BF"

   minOccurs: "1"

   maxOccurs: "1"

   type: "uinteger"

   minver: "1"

   documentation: The chapter codec

7.3.19.  ChapterTranslateID Element

   name: "ChapterTranslateID"

   path: "1*1(\Segment\Info\ChapterTranslate\ChapterTranslateID)"

   id: "0x69A5"

   minOccurs: "1"

   maxOccurs: "1"

   type: "binary"

   minver: "1"

   documentation: The binary value used to represent this Segment in the
   chapter codec data.  The format depends on the ChapProcessCodecID
   used.








Lhomme, et al.           Expires January 4, 2018               [Page 37]

Internet-Draft                  Matroska                       July 2017


7.3.20.  TimecodeScale Element

   name: "TimecodeScale"

   path: "1*1(\Segment\Info\TimecodeScale)"

   id: "0x2AD7B1"

   minOccurs: "1"

   maxOccurs: "1"

   range: "not 0"

   default: "1000000"

   type: "uinteger"

   minver: "1"

   documentation: Timestamp scale in nanoseconds (1.000.000 means all
   timestamps in the Segment are expressed in milliseconds).

7.3.21.  Duration Element

   name: "Duration"

   path: "0*1(\Segment\Info\Duration)"

   id: "0x4489"

   maxOccurs: "1"

   range: "> 0x0p+0"

   type: "float"

   minver: "1"

   definition: Duration of the Segment in nanoseconds based on
   TimecodeScale.

7.3.22.  DateUTC Element

   name: "DateUTC"

   path: "0*1(\Segment\Info\DateUTC)"




Lhomme, et al.           Expires January 4, 2018               [Page 38]

Internet-Draft                  Matroska                       July 2017


   id: "0x4461"

   maxOccurs: "1"

   type: "date"

   minver: "1"

   documentation: The date and time that the Segment was created by the
   muxing application or library.

7.3.23.  Title Element

   name: "Title"

   path: "0*1(\Segment\Info\Title)"

   id: "0x7BA9"

   maxOccurs: "1"

   type: "utf-8"

   minver: "1"

   documentation: General name of the Segment.

7.3.24.  MuxingApp Element

   name: "MuxingApp"

   path: "1*1(\Segment\Info\MuxingApp)"

   id: "0x4D80"

   minOccurs: "1"

   maxOccurs: "1"

   type: "utf-8"

   minver: "1"

   definition: Muxing application or library (example: "libmatroska-
   0.4.3").

   usage notes: Include the full name of the application or library
   followed by the version number.



Lhomme, et al.           Expires January 4, 2018               [Page 39]

Internet-Draft                  Matroska                       July 2017


7.3.25.  WritingApp Element

   name: "WritingApp"

   path: "1*1(\Segment\Info\WritingApp)"

   id: "0x5741"

   minOccurs: "1"

   maxOccurs: "1"

   type: "utf-8"

   minver: "1"

   definition: Writing application (example: "mkvmerge-0.3.3").

   usage notes: Include the full name of the application followed by the
   version number.

7.3.26.  Cluster Element

   name: "Cluster"

   path: "0*(\Segment\Cluster)"

   id: "0x1F43B675"

   type: "master"

   unknownsizeallowed: "1"

   minver: "1"

   documentation: The Top-Level Element containing the (monolithic)
   Block structure.

7.3.27.  Timecode Element

   name: "Timecode"

   path: "1*1(\Segment\Cluster\Timecode)"

   id: "0xE7"

   minOccurs: "1"




Lhomme, et al.           Expires January 4, 2018               [Page 40]

Internet-Draft                  Matroska                       July 2017


   maxOccurs: "1"

   type: "uinteger"

   minver: "1"

   documentation: Absolute timestamp of the cluster (based on
   TimecodeScale).

7.3.28.  SilentTracks Element

   name: "SilentTracks"

   path: "0*1(\Segment\Cluster\SilentTracks)"

   id: "0x5854"

   maxOccurs: "1"

   type: "master"

   minver: "1"

   documentation: The list of tracks that are not used in that part of
   the stream.  It is useful when using overlay tracks on seeking or to
   decide what track to use.

7.3.29.  SilentTrackNumber Element

   name: "SilentTrackNumber"

   path: "0*(\Segment\Cluster\SilentTracks\SilentTrackNumber)"

   id: "0x58D7"

   type: "uinteger"

   minver: "1"

   documentation: One of the track number that are not used from now on
   in the stream.  It could change later if not specified as silent in a
   further Cluster.

7.3.30.  Position Element

   name: "Position"

   path: "0*1(\Segment\Cluster\Position)"



Lhomme, et al.           Expires January 4, 2018               [Page 41]

Internet-Draft                  Matroska                       July 2017


   id: "0xA7"

   maxOccurs: "1"

   type: "uinteger"

   minver: "1"

   documentation: The Segment Position of the Cluster in the Segment (0
   in live broadcast streams).  It might help to resynchronise offset on
   damaged streams.

7.3.31.  PrevSize Element

   name: "PrevSize"

   path: "0*1(\Segment\Cluster\PrevSize)"

   id: "0xAB"

   maxOccurs: "1"

   type: "uinteger"

   minver: "1"

   documentation: Size of the previous Cluster, in octets.  Can be
   useful for backward playing.

7.3.32.  SimpleBlock Element

   name: "SimpleBlock"

   path: "0*(\Segment\Cluster\SimpleBlock)"

   id: "0xA3"

   type: "binary"

   minver: "2"

   documentation: Similar to Block but without all the extra
   information, mostly used to reduced overhead when no extra feature is
   needed. (see SimpleBlock Structure)







Lhomme, et al.           Expires January 4, 2018               [Page 42]

Internet-Draft                  Matroska                       July 2017


7.3.33.  BlockGroup Element

   name: "BlockGroup"

   path: "0*(\Segment\Cluster\BlockGroup)"

   id: "0xA0"

   type: "master"

   minver: "1"

   documentation: Basic container of information containing a single
   Block and information specific to that Block.

7.3.34.  Block Element

   name: "Block"

   path: "1*1(\Segment\Cluster\BlockGroup\Block)"

   id: "0xA1"

   minOccurs: "1"

   maxOccurs: "1"

   type: "binary"

   minver: "1"

   documentation: Block containing the actual data to be rendered and a
   timestamp relative to the Cluster Timecode. (see Block Structure)

7.3.35.  BlockVirtual Element

   name: "BlockVirtual"

   path: "0*1(\Segment\Cluster\BlockGroup\BlockVirtual)"

   id: "0xA2"

   maxOccurs: "1"

   type: "binary"

   minver: "0"




Lhomme, et al.           Expires January 4, 2018               [Page 43]

Internet-Draft                  Matroska                       July 2017


   maxver: "0"

   documentation: A Block with no data.  It MUST be stored in the stream
   at the place the real Block would be in display order. (see Block
   Virtual)

7.3.36.  BlockAdditions Element

   name: "BlockAdditions"

   path: "0*1(\Segment\Cluster\BlockGroup\BlockAdditions)"

   id: "0x75A1"

   maxOccurs: "1"

   type: "master"

   minver: "1"

   documentation: Contain additional blocks to complete the main one.
   An EBML parser that has no knowledge of the Block structure could
   still see and use/skip these data.

7.3.37.  BlockMore Element

   name: "BlockMore"

   path: "1*(\Segment\Cluster\BlockGroup\BlockAdditions\BlockMore)"

   id: "0xA6"

   minOccurs: "1"

   type: "master"

   minver: "1"

   documentation: Contain the BlockAdditional and some parameters.

7.3.38.  BlockAddID Element

   name: "BlockAddID"

   path: "1*1(\Segment\Cluster\BlockGroup\BlockAdditions\BlockMore\Block
   AddID)"

   id: "0xEE"



Lhomme, et al.           Expires January 4, 2018               [Page 44]

Internet-Draft                  Matroska                       July 2017


   minOccurs: "1"

   maxOccurs: "1"

   range: "not 0"

   default: "1"

   type: "uinteger"

   minver: "1"

   documentation: An ID to identify the BlockAdditional level.

7.3.39.  BlockAdditional Element

   name: "BlockAdditional"

   path: "1*1(\Segment\Cluster\BlockGroup\BlockAdditions\BlockMore\Block
   Additional)"

   id: "0xA5"

   minOccurs: "1"

   maxOccurs: "1"

   type: "binary"

   minver: "1"

   documentation: Interpreted by the codec as it wishes (using the
   BlockAddID).

7.3.40.  BlockDuration Element

   name: "BlockDuration"

   path: "0*1(\Segment\Cluster\BlockGroup\BlockDuration)"

   id: "0x9B"

   maxOccurs: "1"

   default: "DefaultDuration"

   type: "uinteger"




Lhomme, et al.           Expires January 4, 2018               [Page 45]

Internet-Draft                  Matroska                       July 2017


   minver: "1"

   documentation: The duration of the Block (based on TimecodeScale).
   This Element is mandatory when DefaultDuration is set for the track
   (but can be omitted as other default values).  When not written and
   with no DefaultDuration, the value is assumed to be the difference
   between the timestamp of this Block and the timestamp of the next
   Block in "display" order (not coding order).  This Element can be
   useful at the end of a Track (as there is not other Block available),
   or when there is a break in a track like for subtitle tracks.  When
   set to 0 that means the frame is not a keyframe.

7.3.41.  ReferencePriority Element

   name: "ReferencePriority"

   path: "1*1(\Segment\Cluster\BlockGroup\ReferencePriority)"

   id: "0xFA"

   minOccurs: "1"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: This frame is referenced and has the specified cache
   priority.  In cache only a frame of the same or higher priority can
   replace this frame.  A value of 0 means the frame is not referenced.

7.3.42.  ReferenceBlock Element

   name: "ReferenceBlock"

   path: "0*(\Segment\Cluster\BlockGroup\ReferenceBlock)"

   id: "0xFB"

   type: "integer"

   minver: "1"






Lhomme, et al.           Expires January 4, 2018               [Page 46]

Internet-Draft                  Matroska                       July 2017


   documentation: Timestamp of another frame used as a reference (ie: B
   or P frame).  The timestamp is relative to the block it's attached
   to.

7.3.43.  ReferenceVirtual Element

   name: "ReferenceVirtual"

   path: "0*1(\Segment\Cluster\BlockGroup\ReferenceVirtual)"

   id: "0xFD"

   maxOccurs: "1"

   type: "integer"

   minver: "0"

   maxver: "0"

   documentation: The Segment Position of the data that would otherwise
   be in position of the virtual block.

7.3.44.  CodecState Element

   name: "CodecState"

   path: "0*1(\Segment\Cluster\BlockGroup\CodecState)"

   id: "0xA4"

   maxOccurs: "1"

   type: "binary"

   minver: "2"

   documentation: The new codec state to use.  Data interpretation is
   private to the codec.  This information SHOULD always be referenced
   by a seek entry.

7.3.45.  DiscardPadding Element

   name: "DiscardPadding"

   path: "0*1(\Segment\Cluster\BlockGroup\DiscardPadding)"

   id: "0x75A2"



Lhomme, et al.           Expires January 4, 2018               [Page 47]

Internet-Draft                  Matroska                       July 2017


   maxOccurs: "1"

   type: "integer"

   minver: "4"

   documentation: Duration in nanoseconds of the silent data added to
   the Block (padding at the end of the Block for positive value, at the
   beginning of the Block for negative value).  The duration of
   DiscardPadding is not calculated in the duration of the TrackEntry
   and SHOULD be discarded during playback.

7.3.46.  Slices Element

   name: "Slices"

   path: "0*1(\Segment\Cluster\BlockGroup\Slices)"

   id: "0x8E"

   maxOccurs: "1"

   type: "master"

   minver: "1"

   documentation: Contains slices description.

7.3.47.  TimeSlice Element

   name: "TimeSlice"

   path: "0*(\Segment\Cluster\BlockGroup\Slices\TimeSlice)"

   id: "0xE8"

   type: "master"

   minver: "1"

   maxver: "1"

   documentation: Contains extra time information about the data
   contained in the Block.  Being able to interpret this Element is not
   REQUIRED for playback.






Lhomme, et al.           Expires January 4, 2018               [Page 48]

Internet-Draft                  Matroska                       July 2017


7.3.48.  LaceNumber Element

   name: "LaceNumber"

   path: "0*1(\Segment\Cluster\BlockGroup\Slices\TimeSlice\LaceNumber)"

   id: "0xCC"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "1"

   maxver: "1"

   documentation: The reverse number of the frame in the lace (0 is the
   last frame, 1 is the next to last, etc).  Being able to interpret
   this Element is not REQUIRED for playback.

7.3.49.  FrameNumber Element

   name: "FrameNumber"

   path: "0*1(\Segment\Cluster\BlockGroup\Slices\TimeSlice\FrameNumber)"

   id: "0xCD"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "0"

   maxver: "0"

   documentation: The number of the frame to generate from this lace
   with this delay (allow you to generate many frames from the same
   Block/Frame).








Lhomme, et al.           Expires January 4, 2018               [Page 49]

Internet-Draft                  Matroska                       July 2017


7.3.50.  BlockAdditionID Element

   name: "BlockAdditionID"

   path:
   "0*1(\Segment\Cluster\BlockGroup\Slices\TimeSlice\BlockAdditionID)"

   id: "0xCB"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "0"

   maxver: "0"

   documentation: The ID of the BlockAdditional Element (0 is the main
   Block).

7.3.51.  Delay Element

   name: "Delay"

   path: "0*1(\Segment\Cluster\BlockGroup\Slices\TimeSlice\Delay)"

   id: "0xCE"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "0"

   maxver: "0"

   documentation: The (scaled) delay to apply to the Element.

7.3.52.  SliceDuration Element

   name: "SliceDuration"

   path:
   "0*1(\Segment\Cluster\BlockGroup\Slices\TimeSlice\SliceDuration)"



Lhomme, et al.           Expires January 4, 2018               [Page 50]

Internet-Draft                  Matroska                       July 2017


   id: "0xCF"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "0"

   maxver: "0"

   documentation: The (scaled) duration to apply to the Element.

7.3.53.  ReferenceFrame Element

   name: "ReferenceFrame"

   path: "0*1(\Segment\Cluster\BlockGroup\ReferenceFrame)"

   id: "0xC8"

   maxOccurs: "1"

   type: "master"

   minver: "0"

   maxver: "0"

   documentation: DivX trick track extensions

7.3.54.  ReferenceOffset Element

   name: "ReferenceOffset"

   path:
   "1*1(\Segment\Cluster\BlockGroup\ReferenceFrame\ReferenceOffset)"

   id: "0xC9"

   minOccurs: "1"

   maxOccurs: "1"

   type: "uinteger"

   minver: "0"



Lhomme, et al.           Expires January 4, 2018               [Page 51]

Internet-Draft                  Matroska                       July 2017


   maxver: "0"

   documentation: DivX trick track extensions

7.3.55.  ReferenceTimeCode Element

   name: "ReferenceTimeCode"

   path:
   "1*1(\Segment\Cluster\BlockGroup\ReferenceFrame\ReferenceTimeCode)"

   id: "0xCA"

   minOccurs: "1"

   maxOccurs: "1"

   type: "uinteger"

   minver: "0"

   maxver: "0"

   documentation: DivX trick track extensions

7.3.56.  EncryptedBlock Element

   name: "EncryptedBlock"

   path: "0*(\Segment\Cluster\EncryptedBlock)"

   id: "0xAF"

   type: "binary"

   minver: "0"

   maxver: "0"

   documentation: Similar to SimpleBlock but the data inside the Block
   are Transformed (encrypt and/or signed). (see EncryptedBlock
   Structure)

7.3.57.  Tracks Element

   name: "Tracks"

   path: "0*(\Segment\Tracks)"



Lhomme, et al.           Expires January 4, 2018               [Page 52]

Internet-Draft                  Matroska                       July 2017


   id: "0x1654AE6B"

   type: "master"

   minver: "1"

   documentation: A Top-Level Element of information with many tracks
   described.

7.3.58.  TrackEntry Element

   name: "TrackEntry"

   path: "1*(\Segment\Tracks\TrackEntry)"

   id: "0xAE"

   minOccurs: "1"

   type: "master"

   minver: "1"

   documentation: Describes a track with all Elements.

7.3.59.  TrackNumber Element

   name: "TrackNumber"

   path: "1*1(\Segment\Tracks\TrackEntry\TrackNumber)"

   id: "0xD7"

   minOccurs: "1"

   maxOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "1"

   documentation: The track number as used in the Block Header (using
   more than 127 tracks is not encouraged, though the design allows an
   unlimited number).





Lhomme, et al.           Expires January 4, 2018               [Page 53]

Internet-Draft                  Matroska                       July 2017


7.3.60.  TrackUID Element

   name: "TrackUID"

   path: "1*1(\Segment\Tracks\TrackEntry\TrackUID)"

   id: "0x73C5"

   minOccurs: "1"

   maxOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "1"

   documentation: A unique ID to identify the Track.  This SHOULD be
   kept the same when making a direct stream copy of the Track to
   another file.

7.3.61.  TrackType Element

   name: "TrackType"

   path: "1*1(\Segment\Tracks\TrackEntry\TrackType)"

   id: "0x83"

   minOccurs: "1"

   maxOccurs: "1"

   range: "1-254"

   type: "uinteger"

   minver: "1"

   documentation: A set of track types coded on 8 bits.

7.3.62.  FlagEnabled Element

   name: "FlagEnabled"

   path: "1*1(\Segment\Tracks\TrackEntry\FlagEnabled)"




Lhomme, et al.           Expires January 4, 2018               [Page 54]

Internet-Draft                  Matroska                       July 2017


   id: "0xB9"

   minOccurs: "1"

   maxOccurs: "1"

   range: "0-1"

   default: "1"

   type: "uinteger"

   minver: "2"

   documentation: Set if the track is usable. (1 bit)

7.3.63.  FlagDefault Element

   name: "FlagDefault"

   path: "1*1(\Segment\Tracks\TrackEntry\FlagDefault)"

   id: "0x88"

   minOccurs: "1"

   maxOccurs: "1"

   range: "0-1"

   default: "1"

   type: "uinteger"

   minver: "1"

   documentation: Set if that track (audio, video or subs) SHOULD be
   active if no language found matches the user preference. (1 bit)

7.3.64.  FlagForced Element

   name: "FlagForced"

   path: "1*1(\Segment\Tracks\TrackEntry\FlagForced)"

   id: "0x55AA"

   minOccurs: "1"



Lhomme, et al.           Expires January 4, 2018               [Page 55]

Internet-Draft                  Matroska                       July 2017


   maxOccurs: "1"

   range: "0-1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: Set if that track MUST be active during playback.
   There can be many forced track for a kind (audio, video or subs), the
   player SHOULD select the one which language matches the user
   preference or the default + forced track.  Overlay MAY happen between
   a forced and non-forced track of the same kind. (1 bit)

7.3.65.  FlagLacing Element

   name: "FlagLacing"

   path: "1*1(\Segment\Tracks\TrackEntry\FlagLacing)"

   id: "0x9C"

   minOccurs: "1"

   maxOccurs: "1"

   range: "0-1"

   default: "1"

   type: "uinteger"

   minver: "1"

   documentation: Set if the track MAY contain blocks using lacing. (1
   bit)

7.3.66.  MinCache Element

   name: "MinCache"

   path: "1*1(\Segment\Tracks\TrackEntry\MinCache)"

   id: "0x6DE7"

   minOccurs: "1"



Lhomme, et al.           Expires January 4, 2018               [Page 56]

Internet-Draft                  Matroska                       July 2017


   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: The minimum number of frames a player SHOULD be able
   to cache during playback.  If set to 0, the reference pseudo-cache
   system is not used.

7.3.67.  MaxCache Element

   name: "MaxCache"

   path: "0*1(\Segment\Tracks\TrackEntry\MaxCache)"

   id: "0x6DF8"

   maxOccurs: "1"

   type: "uinteger"

   minver: "1"

   documentation: The maximum cache size necessary to store referenced
   frames in and the current frame. 0 means no cache is needed.

7.3.68.  DefaultDuration Element

   name: "DefaultDuration"

   path: "0*1(\Segment\Tracks\TrackEntry\DefaultDuration)"

   id: "0x23E383"

   maxOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "1"

   documentation: Number of nanoseconds (not scaled via TimecodeScale)
   per frame ('frame' in the Matroska sense -- one Element put into a
   (Simple)Block).



Lhomme, et al.           Expires January 4, 2018               [Page 57]

Internet-Draft                  Matroska                       July 2017


7.3.69.  DefaultDecodedFieldDuration Element

   name: "DefaultDecodedFieldDuration"

   path: "0*1(\Segment\Tracks\TrackEntry\DefaultDecodedFieldDuration)"

   id: "0x234E7A"

   maxOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "4"

   documentation: The period in nanoseconds (not scaled by TimcodeScale)
   between two successive fields at the output of the decoding process
   (see the notes)

7.3.70.  TrackTimecodeScale Element

   name: "TrackTimecodeScale"

   path: "1*1(\Segment\Tracks\TrackEntry\TrackTimecodeScale)"

   id: "0x23314F"

   minOccurs: "1"

   maxOccurs: "1"

   range: "> 0x0p+0"

   default: "0x1p+0"

   type: "float"

   minver: "1"

   maxver: "3"

   documentation: DEPRECATED, DO NOT USE.  The scale to apply on this
   track to work at normal speed in relation with other tracks (mostly
   used to adjust video speed when the audio length differs).






Lhomme, et al.           Expires January 4, 2018               [Page 58]

Internet-Draft                  Matroska                       July 2017


7.3.71.  TrackOffset Element

   name: "TrackOffset"

   path: "0*1(\Segment\Tracks\TrackEntry\TrackOffset)"

   id: "0x537F"

   maxOccurs: "1"

   default: "0"

   type: "integer"

   minver: "0"

   maxver: "0"

   documentation: A value to add to the Block's Timestamp.  This can be
   used to adjust the playback offset of a track.

7.3.72.  MaxBlockAdditionID Element

   name: "MaxBlockAdditionID"

   path: "1*1(\Segment\Tracks\TrackEntry\MaxBlockAdditionID)"

   id: "0x55EE"

   minOccurs: "1"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: The maximum value of BlockAddID.  A value 0 means
   there is no BlockAdditions for this track.

7.3.73.  Name Element

   name: "Name"

   path: "0*1(\Segment\Tracks\TrackEntry\Name)"




Lhomme, et al.           Expires January 4, 2018               [Page 59]

Internet-Draft                  Matroska                       July 2017


   id: "0x536E"

   maxOccurs: "1"

   type: "utf-8"

   minver: "1"

   documentation: A human-readable track name.

7.3.74.  Language Element

   name: "Language"

   path: "0*1(\Segment\Tracks\TrackEntry\Language)"

   id: "0x22B59C"

   maxOccurs: "1"

   default: "eng"

   type: "string"

   minver: "1"

   documentation: Specifies the language of the track in the Matroska
   languages form.  This Element MUST be ignored if the LanguageIETF
   Element is used in the same TrackEntry.

7.3.75.  LanguageIETF Element

   name: "LanguageIETF"

   path: "0*1(\Segment\Tracks\TrackEntry\LanguageIETF)"

   id: "0x22B59D"

   maxOccurs: "1"

   type: "string"

   minver: "4"

   documentation: Specifies the language of the track according to BCP
   47 and using the IANA Language Subtag Registry.  If this Element is
   used, then any Language Elements used in the same TrackEntry MUST be
   ignored.



Lhomme, et al.           Expires January 4, 2018               [Page 60]

Internet-Draft                  Matroska                       July 2017


7.3.76.  CodecID Element

   name: "CodecID"

   path: "1*1(\Segment\Tracks\TrackEntry\CodecID)"

   id: "0x86"

   minOccurs: "1"

   maxOccurs: "1"

   type: "string"

   minver: "1"

   documentation: An ID corresponding to the codec, see the codec page
   for more info.

7.3.77.  CodecPrivate Element

   name: "CodecPrivate"

   path: "0*1(\Segment\Tracks\TrackEntry\CodecPrivate)"

   id: "0x63A2"

   maxOccurs: "1"

   type: "binary"

   minver: "1"

   documentation: Private data only known to the codec.

7.3.78.  CodecName Element

   name: "CodecName"

   path: "0*1(\Segment\Tracks\TrackEntry\CodecName)"

   id: "0x258688"

   maxOccurs: "1"

   type: "utf-8"

   minver: "1"



Lhomme, et al.           Expires January 4, 2018               [Page 61]

Internet-Draft                  Matroska                       July 2017


   documentation: A human-readable string specifying the codec.

7.3.79.  AttachmentLink Element

   name: "AttachmentLink"

   path: "0*1(\Segment\Tracks\TrackEntry\AttachmentLink)"

   id: "0x7446"

   maxOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "1"

   maxver: "3"

   documentation: The UID of an attachment that is used by this codec.

7.3.80.  CodecSettings Element

   name: "CodecSettings"

   path: "0*1(\Segment\Tracks\TrackEntry\CodecSettings)"

   id: "0x3A9697"

   maxOccurs: "1"

   type: "utf-8"

   minver: "0"

   maxver: "0"

   documentation: A string describing the encoding setting used.

7.3.81.  CodecInfoURL Element

   name: "CodecInfoURL"

   path: "0*(\Segment\Tracks\TrackEntry\CodecInfoURL)"

   id: "0x3B4040"




Lhomme, et al.           Expires January 4, 2018               [Page 62]

Internet-Draft                  Matroska                       July 2017


   type: "string"

   minver: "0"

   maxver: "0"

   documentation: A URL to find information about the codec used.

7.3.82.  CodecDownloadURL Element

   name: "CodecDownloadURL"

   path: "0*(\Segment\Tracks\TrackEntry\CodecDownloadURL)"

   id: "0x26B240"

   type: "string"

   minver: "0"

   maxver: "0"

   documentation: A URL to download about the codec used.

7.3.83.  CodecDecodeAll Element

   name: "CodecDecodeAll"

   path: "1*1(\Segment\Tracks\TrackEntry\CodecDecodeAll)"

   id: "0xAA"

   minOccurs: "1"

   maxOccurs: "1"

   range: "0-1"

   default: "1"

   type: "uinteger"

   minver: "2"

   documentation: The codec can decode potentially damaged data (1 bit).






Lhomme, et al.           Expires January 4, 2018               [Page 63]

Internet-Draft                  Matroska                       July 2017


7.3.84.  TrackOverlay Element

   name: "TrackOverlay"

   path: "0*(\Segment\Tracks\TrackEntry\TrackOverlay)"

   id: "0x6FAB"

   type: "uinteger"

   minver: "1"

   documentation: Specify that this track is an overlay track for the
   Track specified (in the u-integer).  That means when this track has a
   gap (see SilentTracks) the overlay track SHOULD be used instead.  The
   order of multiple TrackOverlay matters, the first one is the one that
   SHOULD be used.  If not found it SHOULD be the second, etc.

7.3.85.  CodecDelay Element

   name: "CodecDelay"

   path: "0*1(\Segment\Tracks\TrackEntry\CodecDelay)"

   id: "0x56AA"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "4"

   documentation: CodecDelay is The codec-built-in delay in nanoseconds.
   This value MUST be subtracted from each block timestamp in order to
   get the actual timestamp.  The value SHOULD be small so the muxing of
   tracks with the same actual timestamp are in the same Cluster.

7.3.86.  SeekPreRoll Element

   name: "SeekPreRoll"

   path: "1*1(\Segment\Tracks\TrackEntry\SeekPreRoll)"

   id: "0x56BB"

   minOccurs: "1"



Lhomme, et al.           Expires January 4, 2018               [Page 64]

Internet-Draft                  Matroska                       July 2017


   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "4"

   documentation: After a discontinuity, SeekPreRoll is the duration in
   nanoseconds of the data the decoder MUST decode before the decoded
   data is valid.

7.3.87.  TrackTranslate Element

   name: "TrackTranslate"

   path: "0*(\Segment\Tracks\TrackEntry\TrackTranslate)"

   id: "0x6624"

   type: "master"

   minver: "1"

   documentation: The track identification for the given Chapter Codec.

7.3.88.  TrackTranslateEditionUID Element

   name: "TrackTranslateEditionUID"

   path: "0*(\Segment\Tracks\TrackEntry\TrackTranslate\TrackTranslateEdi
   tionUID)"

   id: "0x66FC"

   type: "uinteger"

   minver: "1"

   documentation: Specify an edition UID on which this translation
   applies.  When not specified, it means for all editions found in the
   Segment.

7.3.89.  TrackTranslateCodec Element

   name: "TrackTranslateCodec"





Lhomme, et al.           Expires January 4, 2018               [Page 65]

Internet-Draft                  Matroska                       July 2017


   path:
   "1*1(\Segment\Tracks\TrackEntry\TrackTranslate\TrackTranslateCodec)"

   id: "0x66BF"

   minOccurs: "1"

   maxOccurs: "1"

   type: "uinteger"

   minver: "1"

   documentation: The chapter codec.

7.3.90.  TrackTranslateTrackID Element

   name: "TrackTranslateTrackID"

   path: "1*1(\Segment\Tracks\TrackEntry\TrackTranslate\TrackTranslateTr
   ackID)"

   id: "0x66A5"

   minOccurs: "1"

   maxOccurs: "1"

   type: "binary"

   minver: "1"

   documentation: The binary value used to represent this track in the
   chapter codec data.  The format depends on the ChapProcessCodecID
   used.

7.3.91.  Video Element

   name: "Video"

   path: "0*1(\Segment\Tracks\TrackEntry\Video)"

   id: "0xE0"

   maxOccurs: "1"

   type: "master"




Lhomme, et al.           Expires January 4, 2018               [Page 66]

Internet-Draft                  Matroska                       July 2017


   minver: "1"

   documentation: Video settings.

7.3.92.  FlagInterlaced Element

   name: "FlagInterlaced"

   path: "1*1(\Segment\Tracks\TrackEntry\Video\FlagInterlaced)"

   id: "0x9A"

   minOccurs: "1"

   maxOccurs: "1"

   range: "0-2"

   default: "0"

   type: "uinteger"

   minver: "2"

   documentation: A flag to declare is the video is known to be
   progressive or interlaced and if applicable to declare details about
   the interlacement.

7.3.93.  FieldOrder Element

   name: "FieldOrder"

   path: "1*1(\Segment\Tracks\TrackEntry\Video\FieldOrder)"

   id: "0x9D"

   minOccurs: "1"

   maxOccurs: "1"

   range: "0-14"

   default: "2"

   type: "uinteger"

   minver: "4"




Lhomme, et al.           Expires January 4, 2018               [Page 67]

Internet-Draft                  Matroska                       July 2017


   documentation: Declare the field ordering of the video.  If
   FlagInterlaced is not set to 1, this Element MUST be ignored.

7.3.94.  StereoMode Element

   name: "StereoMode"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\StereoMode)"

   id: "0x53B8"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "3"

   documentation: Stereo-3D video mode.  There are some more details on
   3D support in the Specification Notes.

7.3.95.  AlphaMode Element

   name: "AlphaMode"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\AlphaMode)"

   id: "0x53C0"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "3"

   documentation: Alpha Video Mode.  Presence of this Element indicates
   that the BlockAdditional Element could contain Alpha data.

7.3.96.  OldStereoMode Element

   name: "OldStereoMode"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\OldStereoMode)"

   id: "0x53B9"



Lhomme, et al.           Expires January 4, 2018               [Page 68]

Internet-Draft                  Matroska                       July 2017


   maxOccurs: "1"

   type: "uinteger"

   maxver: "0"

   documentation: DEPRECATED, DO NOT USE.  Bogus StereoMode value used
   in old versions of libmatroska.

7.3.97.  PixelWidth Element

   name: "PixelWidth"

   path: "1*1(\Segment\Tracks\TrackEntry\Video\PixelWidth)"

   id: "0xB0"

   minOccurs: "1"

   maxOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "1"

   documentation: Width of the encoded video frames in pixels.

7.3.98.  PixelHeight Element

   name: "PixelHeight"

   path: "1*1(\Segment\Tracks\TrackEntry\Video\PixelHeight)"

   id: "0xBA"

   minOccurs: "1"

   maxOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "1"

   documentation: Height of the encoded video frames in pixels.



Lhomme, et al.           Expires January 4, 2018               [Page 69]

Internet-Draft                  Matroska                       July 2017


7.3.99.  PixelCropBottom Element

   name: "PixelCropBottom"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\PixelCropBottom)"

   id: "0x54AA"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: The number of video pixels to remove at the bottom of
   the image (for HDTV content).

7.3.100.  PixelCropTop Element

   name: "PixelCropTop"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\PixelCropTop)"

   id: "0x54BB"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: The number of video pixels to remove at the top of the
   image.

7.3.101.  PixelCropLeft Element

   name: "PixelCropLeft"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\PixelCropLeft)"

   id: "0x54CC"

   maxOccurs: "1"




Lhomme, et al.           Expires January 4, 2018               [Page 70]

Internet-Draft                  Matroska                       July 2017


   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: The number of video pixels to remove on the left of
   the image.

7.3.102.  PixelCropRight Element

   name: "PixelCropRight"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\PixelCropRight)"

   id: "0x54DD"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: The number of video pixels to remove on the right of
   the image.

7.3.103.  DisplayWidth Element

   name: "DisplayWidth"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\DisplayWidth)"

   id: "0x54B0"

   maxOccurs: "1"

   range: "not 0"

   default: "PixelWidth - PixelCropLeft - PixelCropRight"

   type: "uinteger"

   minver: "1"






Lhomme, et al.           Expires January 4, 2018               [Page 71]

Internet-Draft                  Matroska                       July 2017


   documentation: Width of the video frames to display.  Applies to the
   video frame after cropping (PixelCrop* Elements).  The default value
   is only valid when DisplayUnit is 0.

7.3.104.  DisplayHeight Element

   name: "DisplayHeight"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\DisplayHeight)"

   id: "0x54BA"

   maxOccurs: "1"

   range: "not 0"

   default: "PixelHeight - PixelCropTop - PixelCropBottom"

   type: "uinteger"

   minver: "1"

   documentation: Height of the video frames to display.  Applies to the
   video frame after cropping (PixelCrop* Elements).  The default value
   is only valid when DisplayUnit is 0.

7.3.105.  DisplayUnit Element

   name: "DisplayUnit"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\DisplayUnit)"

   id: "0x54B2"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: How DisplayWidth & DisplayHeight are interpreted.








Lhomme, et al.           Expires January 4, 2018               [Page 72]

Internet-Draft                  Matroska                       July 2017


7.3.106.  AspectRatioType Element

   name: "AspectRatioType"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\AspectRatioType)"

   id: "0x54B3"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: Specify the possible modifications to the aspect
   ratio.

7.3.107.  ColourSpace Element

   name: "ColourSpace"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\ColourSpace)"

   id: "0x2EB524"

   maxOccurs: "1"

   size: "4"

   type: "binary"

   minver: "1"

   documentation: Specify the pixel format used for the Track's data as
   a FourCC.  This value is similar in scope to the biCompression value
   of AVI's BITMAPINFOHEADER.  This Element is MANDATORY in TrackEntry
   when the CodecID Element of the TrackEntry is set to
   "V_UNCOMPRESSED".

7.3.108.  GammaValue Element

   name: "GammaValue"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\GammaValue)"

   id: "0x2FB523"



Lhomme, et al.           Expires January 4, 2018               [Page 73]

Internet-Draft                  Matroska                       July 2017


   maxOccurs: "1"

   range: "> 0x0p+0"

   type: "float"

   minver: "0"

   maxver: "0"

   documentation: Gamma Value.

7.3.109.  FrameRate Element

   name: "FrameRate"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\FrameRate)"

   id: "0x2383E3"

   maxOccurs: "1"

   range: "> 0x0p+0"

   type: "float"

   minver: "0"

   maxver: "0"

   documentation: Number of frames per second.  Informational only.

7.3.110.  Colour Element

   name: "Colour"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour)"

   id: "0x55B0"

   maxOccurs: "1"

   type: "master"

   minver: "4"

   documentation: Settings describing the colour format.




Lhomme, et al.           Expires January 4, 2018               [Page 74]

Internet-Draft                  Matroska                       July 2017


7.3.111.  MatrixCoefficients Element

   name: "MatrixCoefficients"

   path:
   "0*1(\Segment\Tracks\TrackEntry\Video\Colour\MatrixCoefficients)"

   id: "0x55B1"

   maxOccurs: "1"

   default: "2"

   type: "uinteger"

   minver: "4"

   documentation: The Matrix Coefficients of the video used to derive
   luma and chroma values from reg, green, and blue color primaries.
   For clarity, the value and meanings for MatrixCoefficients are
   adopted from Table 4 of ISO/IEC 23001-8:2013/DCOR1.

7.3.112.  BitsPerChannel Element

   name: "BitsPerChannel"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\BitsPerChannel)"

   id: "0x55B2"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "4"

   documentation: Number of decoded bits per channel.  A value of 0
   indicates that the BitsPerChannel is unspecified.

7.3.113.  ChromaSubsamplingHorz Element

   name: "ChromaSubsamplingHorz"

   path:
   "0*1(\Segment\Tracks\TrackEntry\Video\Colour\ChromaSubsamplingHorz)"




Lhomme, et al.           Expires January 4, 2018               [Page 75]

Internet-Draft                  Matroska                       July 2017


   id: "0x55B3"

   maxOccurs: "1"

   type: "uinteger"

   minver: "4"

   documentation: The amount of pixels to remove in the Cr and Cb
   channels for every pixel not removed horizontally.  Example: For
   video with 4:2:0 chroma subsampling, the ChromaSubsamplingHorz SHOULD
   be set to 1.

7.3.114.  ChromaSubsamplingVert Element

   name: "ChromaSubsamplingVert"

   path:
   "0*1(\Segment\Tracks\TrackEntry\Video\Colour\ChromaSubsamplingVert)"

   id: "0x55B4"

   maxOccurs: "1"

   type: "uinteger"

   minver: "4"

   documentation: The amount of pixels to remove in the Cr and Cb
   channels for every pixel not removed vertically.  Example: For video
   with 4:2:0 chroma subsampling, the ChromaSubsamplingVert SHOULD be
   set to 1.

7.3.115.  CbSubsamplingHorz Element

   name: "CbSubsamplingHorz"

   path:
   "0*1(\Segment\Tracks\TrackEntry\Video\Colour\CbSubsamplingHorz)"

   id: "0x55B5"

   maxOccurs: "1"

   type: "uinteger"

   minver: "4"




Lhomme, et al.           Expires January 4, 2018               [Page 76]

Internet-Draft                  Matroska                       July 2017


   documentation: The amount of pixels to remove in the Cb channel for
   every pixel not removed horizontally.  This is additive with
   ChromaSubsamplingHorz.  Example: For video with 4:2:1 chroma
   subsampling, the ChromaSubsamplingHorz SHOULD be set to 1 and
   CbSubsamplingHorz SHOULD be set to 1.

7.3.116.  CbSubsamplingVert Element

   name: "CbSubsamplingVert"

   path:
   "0*1(\Segment\Tracks\TrackEntry\Video\Colour\CbSubsamplingVert)"

   id: "0x55B6"

   maxOccurs: "1"

   type: "uinteger"

   minver: "4"

   documentation: The amount of pixels to remove in the Cb channel for
   every pixel not removed vertically.  This is additive with
   ChromaSubsamplingVert.

7.3.117.  ChromaSitingHorz Element

   name: "ChromaSitingHorz"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\ChromaSitingHorz)"

   id: "0x55B7"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "4"

   documentation: How chroma is subsampled horizontally.

7.3.118.  ChromaSitingVert Element

   name: "ChromaSitingVert"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\ChromaSitingVert)"



Lhomme, et al.           Expires January 4, 2018               [Page 77]

Internet-Draft                  Matroska                       July 2017


   id: "0x55B8"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "4"

   documentation: How chroma is subsampled vertically.

7.3.119.  Range Element

   name: "Range"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\Range)"

   id: "0x55B9"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "4"

   documentation: Clipping of the color ranges.

7.3.120.  TransferCharacteristics Element

   name: "TransferCharacteristics"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\TransferCharacteri
   stics)"

   id: "0x55BA"

   maxOccurs: "1"

   default: "2"

   type: "uinteger"

   minver: "4"





Lhomme, et al.           Expires January 4, 2018               [Page 78]

Internet-Draft                  Matroska                       July 2017


   documentation: The transfer characteristics of the video.  For
   clarity, the value and meanings for TransferCharacteristics 1-15 are
   adopted from Table 3 of ISO/IEC 23001-8:2013/DCOR1.
   TransferCharacteristics 16-18 are proposed values.

7.3.121.  Primaries Element

   name: "Primaries"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\Primaries)"

   id: "0x55BB"

   maxOccurs: "1"

   default: "2"

   type: "uinteger"

   minver: "4"

   documentation: The colour primaries of the video.  For clarity, the
   value and meanings for Primaries are adopted from Table 2 of ISO/IEC
   23001-8:2013/DCOR1.

7.3.122.  MaxCLL Element

   name: "MaxCLL"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\MaxCLL)"

   id: "0x55BC"

   maxOccurs: "1"

   type: "uinteger"

   minver: "4"

   documentation: Maximum brightness of a single pixel (Maximum Content
   Light Level) in candelas per square meter (cd/m^2).

7.3.123.  MaxFALL Element

   name: "MaxFALL"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\MaxFALL)"




Lhomme, et al.           Expires January 4, 2018               [Page 79]

Internet-Draft                  Matroska                       July 2017


   id: "0x55BD"

   maxOccurs: "1"

   type: "uinteger"

   minver: "4"

   documentation: Maximum brightness of a single full frame (Maximum
   Frame-Average Light Level) in candelas per square meter (cd/m^2).

7.3.124.  MasteringMetadata Element

   name: "MasteringMetadata"

   path:
   "0*1(\Segment\Tracks\TrackEntry\Video\Colour\MasteringMetadata)"

   id: "0x55D0"

   maxOccurs: "1"

   type: "master"

   minver: "4"

   documentation: SMPTE 2086 mastering data.

7.3.125.  PrimaryRChromaticityX Element

   name: "PrimaryRChromaticityX"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\MasteringMetadata\
   PrimaryRChromaticityX)"

   id: "0x55D1"

   maxOccurs: "1"

   range: "0-1"

   type: "float"

   minver: "4"

   documentation: Red X chromaticity coordinate as defined by CIE 1931.





Lhomme, et al.           Expires January 4, 2018               [Page 80]

Internet-Draft                  Matroska                       July 2017


7.3.126.  PrimaryRChromaticityY Element

   name: "PrimaryRChromaticityY"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\MasteringMetadata\
   PrimaryRChromaticityY)"

   id: "0x55D2"

   maxOccurs: "1"

   range: "0-1"

   type: "float"

   minver: "4"

   documentation: Red Y chromaticity coordinate as defined by CIE 1931.

7.3.127.  PrimaryGChromaticityX Element

   name: "PrimaryGChromaticityX"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\MasteringMetadata\
   PrimaryGChromaticityX)"

   id: "0x55D3"

   maxOccurs: "1"

   range: "0-1"

   type: "float"

   minver: "4"

   documentation: Green X chromaticity coordinate as defined by CIE
   1931.

7.3.128.  PrimaryGChromaticityY Element

   name: "PrimaryGChromaticityY"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\MasteringMetadata\
   PrimaryGChromaticityY)"

   id: "0x55D4"




Lhomme, et al.           Expires January 4, 2018               [Page 81]

Internet-Draft                  Matroska                       July 2017


   maxOccurs: "1"

   range: "0-1"

   type: "float"

   minver: "4"

   documentation: Green Y chromaticity coordinate as defined by CIE
   1931.

7.3.129.  PrimaryBChromaticityX Element

   name: "PrimaryBChromaticityX"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\MasteringMetadata\
   PrimaryBChromaticityX)"

   id: "0x55D5"

   maxOccurs: "1"

   range: "0-1"

   type: "float"

   minver: "4"

   documentation: Blue X chromaticity coordinate as defined by CIE 1931.

7.3.130.  PrimaryBChromaticityY Element

   name: "PrimaryBChromaticityY"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\MasteringMetadata\
   PrimaryBChromaticityY)"

   id: "0x55D6"

   maxOccurs: "1"

   range: "0-1"

   type: "float"

   minver: "4"

   documentation: Blue Y chromaticity coordinate as defined by CIE 1931.



Lhomme, et al.           Expires January 4, 2018               [Page 82]

Internet-Draft                  Matroska                       July 2017


7.3.131.  WhitePointChromaticityX Element

   name: "WhitePointChromaticityX"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\MasteringMetadata\
   WhitePointChromaticityX)"

   id: "0x55D7"

   maxOccurs: "1"

   range: "0-1"

   type: "float"

   minver: "4"

   documentation: White X chromaticity coordinate as defined by CIE
   1931.

7.3.132.  WhitePointChromaticityY Element

   name: "WhitePointChromaticityY"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\MasteringMetadata\
   WhitePointChromaticityY)"

   id: "0x55D8"

   maxOccurs: "1"

   range: "0-1"

   type: "float"

   minver: "4"

   documentation: White Y chromaticity coordinate as defined by CIE
   1931.

7.3.133.  LuminanceMax Element

   name: "LuminanceMax"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\MasteringMetadata\
   LuminanceMax)"

   id: "0x55D9"



Lhomme, et al.           Expires January 4, 2018               [Page 83]

Internet-Draft                  Matroska                       July 2017


   maxOccurs: "1"

   range: ">= 0x0p+0"

   type: "float"

   minver: "4"

   documentation: Maximum luminance.  Represented in candelas per square
   meter (cd/m^2).

7.3.134.  LuminanceMin Element

   name: "LuminanceMin"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Colour\MasteringMetadata\
   LuminanceMin)"

   id: "0x55DA"

   maxOccurs: "1"

   range: ">= 0x0p+0"

   type: "float"

   minver: "4"

   documentation: Mininum luminance.  Represented in candelas per square
   meter (cd/m^2).

7.3.135.  Projection Element

   name: "Projection"

   path: "0*1(\Segment\Tracks\TrackEntry\Video\Projection)"

   id: "0x7670"

   maxOccurs: "1"

   type: "master"

   minver: "4"

   documentation: Describes the video projection details.  Used to
   render spherical and VR videos.




Lhomme, et al.           Expires January 4, 2018               [Page 84]

Internet-Draft                  Matroska                       July 2017


7.3.136.  ProjectionType Element

   name: "ProjectionType"

   path:
   "1*1(\Segment\Tracks\TrackEntry\Video\Projection\ProjectionType)"

   id: "0x7671"

   minOccurs: "1"

   maxOccurs: "1"

   range: "0-3"

   default: "0"

   type: "uinteger"

   minver: "4"

   documentation: Describes the projection used for this video track.

7.3.137.  ProjectionPrivate Element

   name: "ProjectionPrivate"

   path:
   "0*1(\Segment\Tracks\TrackEntry\Video\Projection\ProjectionPrivate)"

   id: "0x7672"

   maxOccurs: "1"

   type: "binary"

   minver: "4"

   documentation: Private data that only applies to a specific
   projection.SemanticsIf ProjectionType equals 0 (Rectangular), then
   this element must not be present.If ProjectionType equals 1
   (Equirectangular), then this element must be present and contain the
   same binary data that would be stored inside an ISOBMFF
   Equirectangular Projection Box ('equi').If ProjectionType equals 2
   (Cubemap), then this element must be present and contain the same
   binary data that would be stored inside an ISOBMFF Cubemap Projection
   Box ('cbmp').If ProjectionType equals 3 (Mesh), then this element
   must be present and contain the same binary data that would be stored



Lhomme, et al.           Expires January 4, 2018               [Page 85]

Internet-Draft                  Matroska                       July 2017


   inside an ISOBMFF Mesh Projection Box ('mshp').Note: ISOBMFF box size
   and fourcc fields are not included in the binary data, but the
   FullBox version and flag fields are.  This is to avoid redundant
   framing information while preserving versioning and semantics between
   the two container formats.

7.3.138.  ProjectionPoseYaw Element

   name: "ProjectionPoseYaw"

   path:
   "1*1(\Segment\Tracks\TrackEntry\Video\Projection\ProjectionPoseYaw)"

   id: "0x7673"

   minOccurs: "1"

   maxOccurs: "1"

   default: "0x0p+0"

   type: "float"

   minver: "4"

   documentation: Specifies a yaw rotation to the
   projection.SemanticsValue represents a clockwise rotation, in
   degrees, around the up vector.  This rotation must be applied before
   any ProjectionPosePitch or ProjectionPoseRoll rotations.  The value
   of this field should be in the -180 to 180 degree range.

7.3.139.  ProjectionPosePitch Element

   name: "ProjectionPosePitch"

   path: "1*1(\Segment\Tracks\TrackEntry\Video\Projection\ProjectionPose
   Pitch)"

   id: "0x7674"

   minOccurs: "1"

   maxOccurs: "1"

   default: "0x0p+0"

   type: "float"




Lhomme, et al.           Expires January 4, 2018               [Page 86]

Internet-Draft                  Matroska                       July 2017


   minver: "4"

   documentation: Specifies a pitch rotation to the
   projection.SemanticsValue represents a counter-clockwise rotation, in
   degrees, around the right vector.  This rotation must be applied
   after the ProjectionPoseYaw rotation and before the
   ProjectionPoseRoll rotation.  The value of this field should be in
   the -90 to 90 degree range.

7.3.140.  ProjectionPoseRoll Element

   name: "ProjectionPoseRoll"

   path:
   "1*1(\Segment\Tracks\TrackEntry\Video\Projection\ProjectionPoseRoll)"

   id: "0x7675"

   minOccurs: "1"

   maxOccurs: "1"

   default: "0x0p+0"

   type: "float"

   minver: "4"

   documentation: Specifies a roll rotation to the
   projection.SemanticsValue represents a counter-clockwise rotation, in
   degrees, around the forward vector.  This rotation must be applied
   after the ProjectionPoseYaw and ProjectionPosePitch rotations.  The
   value of this field should be in the -180 to 180 degree range.

7.3.141.  Audio Element

   name: "Audio"

   path: "0*1(\Segment\Tracks\TrackEntry\Audio)"

   id: "0xE1"

   maxOccurs: "1"

   type: "master"

   minver: "1"




Lhomme, et al.           Expires January 4, 2018               [Page 87]

Internet-Draft                  Matroska                       July 2017


   documentation: Audio settings.

7.3.142.  SamplingFrequency Element

   name: "SamplingFrequency"

   path: "1*1(\Segment\Tracks\TrackEntry\Audio\SamplingFrequency)"

   id: "0xB5"

   minOccurs: "1"

   maxOccurs: "1"

   range: "> 0x0p+0"

   default: "0x1.f4p+12"

   type: "float"

   minver: "1"

   documentation: Sampling frequency in Hz.

7.3.143.  OutputSamplingFrequency Element

   name: "OutputSamplingFrequency"

   path: "0*1(\Segment\Tracks\TrackEntry\Audio\OutputSamplingFrequency)"

   id: "0x78B5"

   maxOccurs: "1"

   range: "> 0x0p+0"

   default: "SamplingFrequency"

   type: "float"

   minver: "1"

   documentation: Real output sampling frequency in Hz (used for SBR
   techniques).







Lhomme, et al.           Expires January 4, 2018               [Page 88]

Internet-Draft                  Matroska                       July 2017


7.3.144.  Channels Element

   name: "Channels"

   path: "1*1(\Segment\Tracks\TrackEntry\Audio\Channels)"

   id: "0x9F"

   minOccurs: "1"

   maxOccurs: "1"

   range: "not 0"

   default: "1"

   type: "uinteger"

   minver: "1"

   documentation: Numbers of channels in the track.

7.3.145.  ChannelPositions Element

   name: "ChannelPositions"

   path: "0*1(\Segment\Tracks\TrackEntry\Audio\ChannelPositions)"

   id: "0x7D7B"

   maxOccurs: "1"

   type: "binary"

   minver: "0"

   maxver: "0"

   documentation: Table of horizontal angles for each successive
   channel, see appendix.

7.3.146.  BitDepth Element

   name: "BitDepth"

   path: "0*1(\Segment\Tracks\TrackEntry\Audio\BitDepth)"

   id: "0x6264"



Lhomme, et al.           Expires January 4, 2018               [Page 89]

Internet-Draft                  Matroska                       July 2017


   maxOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "1"

   documentation: Bits per sample, mostly used for PCM.

7.3.147.  TrackOperation Element

   name: "TrackOperation"

   path: "0*1(\Segment\Tracks\TrackEntry\TrackOperation)"

   id: "0xE2"

   maxOccurs: "1"

   type: "master"

   minver: "3"

   documentation: Operation that needs to be applied on tracks to create
   this virtual track.  For more details look at the Specification Notes
   on the subject.

7.3.148.  TrackCombinePlanes Element

   name: "TrackCombinePlanes"

   path:
   "0*1(\Segment\Tracks\TrackEntry\TrackOperation\TrackCombinePlanes)"

   id: "0xE3"

   maxOccurs: "1"

   type: "master"

   minver: "3"

   documentation: Contains the list of all video plane tracks that need
   to be combined to create this 3D track






Lhomme, et al.           Expires January 4, 2018               [Page 90]

Internet-Draft                  Matroska                       July 2017


7.3.149.  TrackPlane Element

   name: "TrackPlane"

   path: "1*(\Segment\Tracks\TrackEntry\TrackOperation\TrackCombinePlane
   s\TrackPlane)"

   id: "0xE4"

   minOccurs: "1"

   type: "master"

   minver: "3"

   documentation: Contains a video plane track that need to be combined
   to create this 3D track

7.3.150.  TrackPlaneUID Element

   name: "TrackPlaneUID"

   path: "1*1(\Segment\Tracks\TrackEntry\TrackOperation\TrackCombinePlan
   es\TrackPlane\TrackPlaneUID)"

   id: "0xE5"

   minOccurs: "1"

   maxOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "3"

   documentation: The trackUID number of the track representing the
   plane.

7.3.151.  TrackPlaneType Element

   name: "TrackPlaneType"

   path: "1*1(\Segment\Tracks\TrackEntry\TrackOperation\TrackCombinePlan
   es\TrackPlane\TrackPlaneType)"

   id: "0xE6"



Lhomme, et al.           Expires January 4, 2018               [Page 91]

Internet-Draft                  Matroska                       July 2017


   minOccurs: "1"

   maxOccurs: "1"

   type: "uinteger"

   minver: "3"

   documentation: The kind of plane this track corresponds to.

7.3.152.  TrackJoinBlocks Element

   name: "TrackJoinBlocks"

   path:
   "0*1(\Segment\Tracks\TrackEntry\TrackOperation\TrackJoinBlocks)"

   id: "0xE9"

   maxOccurs: "1"

   type: "master"

   minver: "3"

   documentation: Contains the list of all tracks whose Blocks need to
   be combined to create this virtual track

7.3.153.  TrackJoinUID Element

   name: "TrackJoinUID"

   path: "1*(\Segment\Tracks\TrackEntry\TrackOperation\TrackJoinBlocks\T
   rackJoinUID)"

   id: "0xED"

   minOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "3"

   documentation: The trackUID number of a track whose blocks are used
   to create this virtual track.




Lhomme, et al.           Expires January 4, 2018               [Page 92]

Internet-Draft                  Matroska                       July 2017


7.3.154.  TrickTrackUID Element

   name: "TrickTrackUID"

   path: "0*1(\Segment\Tracks\TrackEntry\TrickTrackUID)"

   id: "0xC0"

   maxOccurs: "1"

   type: "uinteger"

   minver: "0"

   maxver: "0"

   documentation: DivX trick track extensions

7.3.155.  TrickTrackSegmentUID Element

   name: "TrickTrackSegmentUID"

   path: "0*1(\Segment\Tracks\TrackEntry\TrickTrackSegmentUID)"

   id: "0xC1"

   maxOccurs: "1"

   size: "16"

   type: "binary"

   minver: "0"

   maxver: "0"

   documentation: DivX trick track extensions

7.3.156.  TrickTrackFlag Element

   name: "TrickTrackFlag"

   path: "0*1(\Segment\Tracks\TrackEntry\TrickTrackFlag)"

   id: "0xC6"

   maxOccurs: "1"




Lhomme, et al.           Expires January 4, 2018               [Page 93]

Internet-Draft                  Matroska                       July 2017


   default: "0"

   type: "uinteger"

   minver: "0"

   maxver: "0"

   documentation: DivX trick track extensions

7.3.157.  TrickMasterTrackUID Element

   name: "TrickMasterTrackUID"

   path: "0*1(\Segment\Tracks\TrackEntry\TrickMasterTrackUID)"

   id: "0xC7"

   maxOccurs: "1"

   type: "uinteger"

   minver: "0"

   maxver: "0"

   documentation: DivX trick track extensions

7.3.158.  TrickMasterTrackSegmentUID Element

   name: "TrickMasterTrackSegmentUID"

   path: "0*1(\Segment\Tracks\TrackEntry\TrickMasterTrackSegmentUID)"

   id: "0xC4"

   maxOccurs: "1"

   size: "16"

   type: "binary"

   minver: "0"

   maxver: "0"

   documentation: DivX trick track extensions




Lhomme, et al.           Expires January 4, 2018               [Page 94]

Internet-Draft                  Matroska                       July 2017


7.3.159.  ContentEncodings Element

   name: "ContentEncodings"

   path: "0*1(\Segment\Tracks\TrackEntry\ContentEncodings)"

   id: "0x6D80"

   maxOccurs: "1"

   type: "master"

   minver: "1"

   documentation: Settings for several content encoding mechanisms like
   compression or encryption.

7.3.160.  ContentEncoding Element

   name: "ContentEncoding"

   path:
   "1*(\Segment\Tracks\TrackEntry\ContentEncodings\ContentEncoding)"

   id: "0x6240"

   minOccurs: "1"

   type: "master"

   minver: "1"

   documentation: Settings for one content encoding like compression or
   encryption.

7.3.161.  ContentEncodingOrder Element

   name: "ContentEncodingOrder"

   path: "1*1(\Segment\Tracks\TrackEntry\ContentEncodings\ContentEncodin
   g\ContentEncodingOrder)"

   id: "0x5031"

   minOccurs: "1"

   maxOccurs: "1"




Lhomme, et al.           Expires January 4, 2018               [Page 95]

Internet-Draft                  Matroska                       July 2017


   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: Tells when this modification was used during encoding/
   muxing starting with 0 and counting upwards.  The decoder/demuxer has
   to start with the highest order number it finds and work its way
   down.  This value has to be unique over all ContentEncodingOrder
   Elements in the Segment.

7.3.162.  ContentEncodingScope Element

   name: "ContentEncodingScope"

   path: "1*1(\Segment\Tracks\TrackEntry\ContentEncodings\ContentEncodin
   g\ContentEncodingScope)"

   id: "0x5032"

   minOccurs: "1"

   maxOccurs: "1"

   range: "not 0"

   default: "1"

   type: "uinteger"

   minver: "1"

   documentation: A bit field that describes which Elements have been
   modified in this way.  Values (big endian) can be OR'ed.  Possible
   values: 1 - all frame contents, 2 - the track's private data, 4 - the
   next ContentEncoding (next ContentEncodingOrder.  Either the data
   inside ContentCompression and/or ContentEncryption)

7.3.163.  ContentEncodingType Element

   name: "ContentEncodingType"

   path: "1*1(\Segment\Tracks\TrackEntry\ContentEncodings\ContentEncodin
   g\ContentEncodingType)"

   id: "0x5033"




Lhomme, et al.           Expires January 4, 2018               [Page 96]

Internet-Draft                  Matroska                       July 2017


   minOccurs: "1"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: A value describing what kind of transformation has
   been done.  Possible values: 0 - compression, 1 - encryption

7.3.164.  ContentCompression Element

   name: "ContentCompression"

   path: "0*1(\Segment\Tracks\TrackEntry\ContentEncodings\ContentEncodin
   g\ContentCompression)"

   id: "0x5034"

   maxOccurs: "1"

   type: "master"

   minver: "1"

   documentation: Settings describing the compression used.  This
   Element MUST be present if the value of ContentEncodingType is 0 and
   absent otherwise.  Each block MUST be decompressable even if no
   previous block is available in order not to prevent seeking.

7.3.165.  ContentCompAlgo Element

   name: "ContentCompAlgo"

   path: "1*1(\Segment\Tracks\TrackEntry\ContentEncodings\ContentEncodin
   g\ContentCompression\ContentCompAlgo)"

   id: "0x4254"

   minOccurs: "1"

   maxOccurs: "1"

   default: "0"




Lhomme, et al.           Expires January 4, 2018               [Page 97]

Internet-Draft                  Matroska                       July 2017


   type: "uinteger"

   minver: "1"

   documentation: The compression algorithm used.  Algorithms that have
   been specified so far are: 0 - zlib, 1 - bzlib, 2 - lzo1x 3 - Header
   Stripping

7.3.166.  ContentCompSettings Element

   name: "ContentCompSettings"

   path: "0*1(\Segment\Tracks\TrackEntry\ContentEncodings\ContentEncodin
   g\ContentCompression\ContentCompSettings)"

   id: "0x4255"

   maxOccurs: "1"

   type: "binary"

   minver: "1"

   documentation: Settings that might be needed by the decompressor.
   For Header Stripping (ContentCompAlgo=3), the bytes that were removed
   from the beggining of each frames of the track.

7.3.167.  ContentEncryption Element

   name: "ContentEncryption"

   path: "0*1(\Segment\Tracks\TrackEntry\ContentEncodings\ContentEncodin
   g\ContentEncryption)"

   id: "0x5035"

   maxOccurs: "1"

   type: "master"

   minver: "1"

   documentation: Settings describing the encryption used.  This Element
   MUST be present if the value of ContentEncodingType is 1 and absent
   otherwise.






Lhomme, et al.           Expires January 4, 2018               [Page 98]

Internet-Draft                  Matroska                       July 2017


7.3.168.  ContentEncAlgo Element

   name: "ContentEncAlgo"

   path: "0*1(\Segment\Tracks\TrackEntry\ContentEncodings\ContentEncodin
   g\ContentEncryption\ContentEncAlgo)"

   id: "0x47E1"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: The encryption algorithm used.  The value '0' means
   that the contents have not been encrypted but only signed.
   Predefined values: 1 - DES, 2 - 3DES, 3 - Twofish, 4 - Blowfish, 5 -
   AES

7.3.169.  ContentEncKeyID Element

   name: "ContentEncKeyID"

   path: "0*1(\Segment\Tracks\TrackEntry\ContentEncodings\ContentEncodin
   g\ContentEncryption\ContentEncKeyID)"

   id: "0x47E2"

   maxOccurs: "1"

   type: "binary"

   minver: "1"

   documentation: For public key algorithms this is the ID of the public
   key the the data was encrypted with.

7.3.170.  ContentSignature Element

   name: "ContentSignature"

   path: "0*1(\Segment\Tracks\TrackEntry\ContentEncodings\ContentEncodin
   g\ContentEncryption\ContentSignature)"

   id: "0x47E3"



Lhomme, et al.           Expires January 4, 2018               [Page 99]

Internet-Draft                  Matroska                       July 2017


   maxOccurs: "1"

   type: "binary"

   minver: "1"

   documentation: A cryptographic signature of the contents.

7.3.171.  ContentSigKeyID Element

   name: "ContentSigKeyID"

   path: "0*1(\Segment\Tracks\TrackEntry\ContentEncodings\ContentEncodin
   g\ContentEncryption\ContentSigKeyID)"

   id: "0x47E4"

   maxOccurs: "1"

   type: "binary"

   minver: "1"

   documentation: This is the ID of the private key the data was signed
   with.

7.3.172.  ContentSigAlgo Element

   name: "ContentSigAlgo"

   path: "0*1(\Segment\Tracks\TrackEntry\ContentEncodings\ContentEncodin
   g\ContentEncryption\ContentSigAlgo)"

   id: "0x47E5"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: The algorithm used for the signature.  A value of '0'
   means that the contents have not been signed but only encrypted.
   Predefined values: 1 - RSA





Lhomme, et al.           Expires January 4, 2018              [Page 100]

Internet-Draft                  Matroska                       July 2017


7.3.173.  ContentSigHashAlgo Element

   name: "ContentSigHashAlgo"

   path: "0*1(\Segment\Tracks\TrackEntry\ContentEncodings\ContentEncodin
   g\ContentEncryption\ContentSigHashAlgo)"

   id: "0x47E6"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: The hash algorithm used for the signature.  A value of
   '0' means that the contents have not been signed but only encrypted.
   Predefined values: 1 - SHA1-160 2 - MD5

7.3.174.  Cues Element

   name: "Cues"

   path: "0*1(\Segment\Cues)"

   id: "0x1C53BB6B"

   maxOccurs: "1"

   type: "master"

   minver: "1"

   documentation: A Top-Level Element to speed seeking access.  All
   entries are local to the Segment.  This Element SHOULD be mandatory
   for non "live" streams.

7.3.175.  CuePoint Element

   name: "CuePoint"

   path: "1*(\Segment\Cues\CuePoint)"

   id: "0xBB"

   minOccurs: "1"



Lhomme, et al.           Expires January 4, 2018              [Page 101]

Internet-Draft                  Matroska                       July 2017


   type: "master"

   minver: "1"

   documentation: Contains all information relative to a seek point in
   the Segment.

7.3.176.  CueTime Element

   name: "CueTime"

   path: "1*1(\Segment\Cues\CuePoint\CueTime)"

   id: "0xB3"

   minOccurs: "1"

   maxOccurs: "1"

   type: "uinteger"

   minver: "1"

   documentation: Absolute timestamp according to the Segment time base.

7.3.177.  CueTrackPositions Element

   name: "CueTrackPositions"

   path: "1*(\Segment\Cues\CuePoint\CueTrackPositions)"

   id: "0xB7"

   minOccurs: "1"

   type: "master"

   minver: "1"

   documentation: Contain positions for different tracks corresponding
   to the timestamp.

7.3.178.  CueTrack Element

   name: "CueTrack"

   path: "1*1(\Segment\Cues\CuePoint\CueTrackPositions\CueTrack)"




Lhomme, et al.           Expires January 4, 2018              [Page 102]

Internet-Draft                  Matroska                       July 2017


   id: "0xF7"

   minOccurs: "1"

   maxOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "1"

   documentation: The track for which a position is given.

7.3.179.  CueClusterPosition Element

   name: "CueClusterPosition"

   path:
   "1*1(\Segment\Cues\CuePoint\CueTrackPositions\CueClusterPosition)"

   id: "0xF1"

   minOccurs: "1"

   maxOccurs: "1"

   type: "uinteger"

   minver: "1"

   documentation: The Segment Position of the Cluster containing the
   associated Block.

7.3.180.  CueRelativePosition Element

   name: "CueRelativePosition"

   path:
   "0*1(\Segment\Cues\CuePoint\CueTrackPositions\CueRelativePosition)"

   id: "0xF0"

   maxOccurs: "1"

   type: "uinteger"

   minver: "4"



Lhomme, et al.           Expires January 4, 2018              [Page 103]

Internet-Draft                  Matroska                       July 2017


   documentation: The relative position of the referenced block inside
   the cluster with 0 being the first possible position for an Element
   inside that cluster.

7.3.181.  CueDuration Element

   name: "CueDuration"

   path: "0*1(\Segment\Cues\CuePoint\CueTrackPositions\CueDuration)"

   id: "0xB2"

   maxOccurs: "1"

   type: "uinteger"

   minver: "4"

   documentation: The duration of the block according to the Segment
   time base.  If missing the track's DefaultDuration does not apply and
   no duration information is available in terms of the cues.

7.3.182.  CueBlockNumber Element

   name: "CueBlockNumber"

   path: "0*1(\Segment\Cues\CuePoint\CueTrackPositions\CueBlockNumber)"

   id: "0x5378"

   maxOccurs: "1"

   range: "not 0"

   default: "1"

   type: "uinteger"

   minver: "1"

   documentation: Number of the Block in the specified Cluster.

7.3.183.  CueCodecState Element

   name: "CueCodecState"

   path: "0*1(\Segment\Cues\CuePoint\CueTrackPositions\CueCodecState)"




Lhomme, et al.           Expires January 4, 2018              [Page 104]

Internet-Draft                  Matroska                       July 2017


   id: "0xEA"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "2"

   documentation: The Segment Position of the Codec State corresponding
   to this Cue Element. 0 means that the data is taken from the initial
   Track Entry.

7.3.184.  CueReference Element

   name: "CueReference"

   path: "0*(\Segment\Cues\CuePoint\CueTrackPositions\CueReference)"

   id: "0xDB"

   type: "master"

   minver: "2"

   documentation: The Clusters containing the referenced Blocks.

7.3.185.  CueRefTime Element

   name: "CueRefTime"

   path: "1*1(\Segment\Cues\CuePoint\CueTrackPositions\CueReference\CueR
   efTime)"

   id: "0x96"

   minOccurs: "1"

   maxOccurs: "1"

   type: "uinteger"

   minver: "2"

   documentation: Timestamp of the referenced Block.





Lhomme, et al.           Expires January 4, 2018              [Page 105]

Internet-Draft                  Matroska                       July 2017


7.3.186.  CueRefCluster Element

   name: "CueRefCluster"

   path: "1*1(\Segment\Cues\CuePoint\CueTrackPositions\CueReference\CueR
   efCluster)"

   id: "0x97"

   minOccurs: "1"

   maxOccurs: "1"

   type: "uinteger"

   minver: "0"

   maxver: "0"

   documentation: The Segment Position of the Cluster containing the
   referenced Block.

7.3.187.  CueRefNumber Element

   name: "CueRefNumber"

   path: "0*1(\Segment\Cues\CuePoint\CueTrackPositions\CueReference\CueR
   efNumber)"

   id: "0x535F"

   maxOccurs: "1"

   range: "not 0"

   default: "1"

   type: "uinteger"

   minver: "0"

   maxver: "0"

   documentation: Number of the referenced Block of Track X in the
   specified Cluster.






Lhomme, et al.           Expires January 4, 2018              [Page 106]

Internet-Draft                  Matroska                       July 2017


7.3.188.  CueRefCodecState Element

   name: "CueRefCodecState"

   path: "0*1(\Segment\Cues\CuePoint\CueTrackPositions\CueReference\CueR
   efCodecState)"

   id: "0xEB"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "0"

   maxver: "0"

   documentation: The Segment Position of the Codec State corresponding
   to this referenced Element. 0 means that the data is taken from the
   initial Track Entry.

7.3.189.  Attachments Element

   name: "Attachments"

   path: "0*1(\Segment\Attachments)"

   id: "0x1941A469"

   maxOccurs: "1"

   type: "master"

   minver: "1"

   documentation: Contain attached files.

7.3.190.  AttachedFile Element

   name: "AttachedFile"

   path: "1*(\Segment\Attachments\AttachedFile)"

   id: "0x61A7"

   minOccurs: "1"



Lhomme, et al.           Expires January 4, 2018              [Page 107]

Internet-Draft                  Matroska                       July 2017


   type: "master"

   minver: "1"

   documentation: An attached file.

7.3.191.  FileDescription Element

   name: "FileDescription"

   path: "0*1(\Segment\Attachments\AttachedFile\FileDescription)"

   id: "0x467E"

   maxOccurs: "1"

   type: "utf-8"

   minver: "1"

   documentation: A human-friendly name for the attached file.

7.3.192.  FileName Element

   name: "FileName"

   path: "1*1(\Segment\Attachments\AttachedFile\FileName)"

   id: "0x466E"

   minOccurs: "1"

   maxOccurs: "1"

   type: "utf-8"

   minver: "1"

   documentation: Filename of the attached file.

7.3.193.  FileMimeType Element

   name: "FileMimeType"

   path: "1*1(\Segment\Attachments\AttachedFile\FileMimeType)"

   id: "0x4660"




Lhomme, et al.           Expires January 4, 2018              [Page 108]

Internet-Draft                  Matroska                       July 2017


   minOccurs: "1"

   maxOccurs: "1"

   type: "string"

   minver: "1"

   documentation: MIME type of the file.

7.3.194.  FileData Element

   name: "FileData"

   path: "1*1(\Segment\Attachments\AttachedFile\FileData)"

   id: "0x465C"

   minOccurs: "1"

   maxOccurs: "1"

   type: "binary"

   minver: "1"

   documentation: The data of the file.

7.3.195.  FileUID Element

   name: "FileUID"

   path: "1*1(\Segment\Attachments\AttachedFile\FileUID)"

   id: "0x46AE"

   minOccurs: "1"

   maxOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "1"

   documentation: Unique ID representing the file, as random as
   possible.



Lhomme, et al.           Expires January 4, 2018              [Page 109]

Internet-Draft                  Matroska                       July 2017


7.3.196.  FileReferral Element

   name: "FileReferral"

   path: "0*1(\Segment\Attachments\AttachedFile\FileReferral)"

   id: "0x4675"

   maxOccurs: "1"

   type: "binary"

   minver: "0"

   maxver: "0"

   documentation: A binary value that a track/codec can refer to when
   the attachment is needed.

7.3.197.  FileUsedStartTime Element

   name: "FileUsedStartTime"

   path: "0*1(\Segment\Attachments\AttachedFile\FileUsedStartTime)"

   id: "0x4661"

   maxOccurs: "1"

   type: "uinteger"

   minver: "0"

   maxver: "0"

   documentation: DivX font extension

7.3.198.  FileUsedEndTime Element

   name: "FileUsedEndTime"

   path: "0*1(\Segment\Attachments\AttachedFile\FileUsedEndTime)"

   id: "0x4662"

   maxOccurs: "1"

   type: "uinteger"



Lhomme, et al.           Expires January 4, 2018              [Page 110]

Internet-Draft                  Matroska                       July 2017


   minver: "0"

   maxver: "0"

   documentation: DivX font extension

7.3.199.  Chapters Element

   name: "Chapters"

   path: "0*1(\Segment\Chapters)"

   id: "0x1043A770"

   maxOccurs: "1"

   type: "master"

   minver: "1"

   documentation: A system to define basic menus and partition data.
   For more detailed information, look at the Chapters Explanation.

7.3.200.  EditionEntry Element

   name: "EditionEntry"

   path: "1*(\Segment\Chapters\EditionEntry)"

   id: "0x45B9"

   minOccurs: "1"

   type: "master"

   minver: "1"

   documentation: Contains all information about a Segment edition.

7.3.201.  EditionUID Element

   name: "EditionUID"

   path: "0*1(\Segment\Chapters\EditionEntry\EditionUID)"

   id: "0x45BC"

   maxOccurs: "1"



Lhomme, et al.           Expires January 4, 2018              [Page 111]

Internet-Draft                  Matroska                       July 2017


   range: "not 0"

   type: "uinteger"

   minver: "1"

   documentation: A unique ID to identify the edition.  It's useful for
   tagging an edition.

7.3.202.  EditionFlagHidden Element

   name: "EditionFlagHidden"

   path: "1*1(\Segment\Chapters\EditionEntry\EditionFlagHidden)"

   id: "0x45BD"

   minOccurs: "1"

   maxOccurs: "1"

   range: "0-1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: If an edition is hidden (1), it SHOULD NOT be
   available to the user interface (but still to Control Tracks; see
   flag notes). (1 bit)

7.3.203.  EditionFlagDefault Element

   name: "EditionFlagDefault"

   path: "1*1(\Segment\Chapters\EditionEntry\EditionFlagDefault)"

   id: "0x45DB"

   minOccurs: "1"

   maxOccurs: "1"

   range: "0-1"

   default: "0"



Lhomme, et al.           Expires January 4, 2018              [Page 112]

Internet-Draft                  Matroska                       July 2017


   type: "uinteger"

   minver: "1"

   documentation: If a flag is set (1) the edition SHOULD be used as the
   default one. (1 bit)

7.3.204.  EditionFlagOrdered Element

   name: "EditionFlagOrdered"

   path: "0*1(\Segment\Chapters\EditionEntry\EditionFlagOrdered)"

   id: "0x45DD"

   maxOccurs: "1"

   range: "0-1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: Specify if the chapters can be defined multiple times
   and the order to play them is enforced. (1 bit)

7.3.205.  ChapterAtom Element

   name: "ChapterAtom"

   path: "1*(\Segment\Chapters\EditionEntry(1*(\ChapterAtom)))"

   id: "0xB6"

   minOccurs: "1"

   type: "master"

   recursive: "1"

   minver: "1"

   documentation: Contains the atom information to use as the chapter
   atom (apply to all tracks).





Lhomme, et al.           Expires January 4, 2018              [Page 113]

Internet-Draft                  Matroska                       July 2017


7.3.206.  ChapterUID Element

   name: "ChapterUID"

   path: "1*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterUID)"

   id: "0x73C4"

   minOccurs: "1"

   maxOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "1"

   documentation: A unique ID to identify the Chapter.

7.3.207.  ChapterStringUID Element

   name: "ChapterStringUID"

   path:
   "0*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterStringUID)"

   id: "0x5654"

   maxOccurs: "1"

   type: "utf-8"

   minver: "3"

   documentation: A unique string ID to identify the Chapter.  Use for
   WebVTT cue identifier storage.

7.3.208.  ChapterTimeStart Element

   name: "ChapterTimeStart"

   path:
   "1*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterTimeStart)"

   id: "0x91"

   minOccurs: "1"



Lhomme, et al.           Expires January 4, 2018              [Page 114]

Internet-Draft                  Matroska                       July 2017


   maxOccurs: "1"

   type: "uinteger"

   minver: "1"

   documentation: Timestamp of the start of Chapter (not scaled).

7.3.209.  ChapterTimeEnd Element

   name: "ChapterTimeEnd"

   path:
   "0*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterTimeEnd)"

   id: "0x92"

   maxOccurs: "1"

   type: "uinteger"

   minver: "1"

   documentation: Timestamp of the end of Chapter (timestamp excluded,
   not scaled).

7.3.210.  ChapterFlagHidden Element

   name: "ChapterFlagHidden"

   path:
   "1*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterFlagHidden)"

   id: "0x98"

   minOccurs: "1"

   maxOccurs: "1"

   range: "0-1"

   default: "0"

   type: "uinteger"

   minver: "1"





Lhomme, et al.           Expires January 4, 2018              [Page 115]

Internet-Draft                  Matroska                       July 2017


   documentation: If a chapter is hidden (1), it SHOULD NOT be available
   to the user interface (but still to Control Tracks; see flag notes).
   (1 bit)

7.3.211.  ChapterFlagEnabled Element

   name: "ChapterFlagEnabled"

   path:
   "1*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterFlagEnabled)"

   id: "0x4598"

   minOccurs: "1"

   maxOccurs: "1"

   range: "0-1"

   default: "1"

   type: "uinteger"

   minver: "1"

   documentation: Specify whether the chapter is enabled.  It can be
   enabled/disabled by a Control Track.  When disabled, the movie SHOULD
   skip all the content between the TimeStart and TimeEnd of this
   chapter (see flag notes). (1 bit)

7.3.212.  ChapterSegmentUID Element

   name: "ChapterSegmentUID"

   path:
   "0*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterSegmentUID)"

   id: "0x6E67"

   maxOccurs: "1"

   range: ">0"

   size: "16"

   type: "binary"

   minver: "1"



Lhomme, et al.           Expires January 4, 2018              [Page 116]

Internet-Draft                  Matroska                       July 2017


   documentation: The SegmentUID of another Segment to play during this
   chapter.

   usage notes: ChapterSegmentUID is mandatory if
   ChapterSegmentEditionUID is used.

7.3.213.  ChapterSegmentEditionUID Element

   name: "ChapterSegmentEditionUID"

   path: "0*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterSegmentE
   ditionUID)"

   id: "0x6EBC"

   maxOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "1"

   documentation: The EditionUID to play from the Segment linked in
   ChapterSegmentUID.  If ChapterSegmentEditionUID is undeclared then no
   Edition of the linked Segment is used.

7.3.214.  ChapterPhysicalEquiv Element

   name: "ChapterPhysicalEquiv"

   path: "0*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterPhysical
   Equiv)"

   id: "0x63C3"

   maxOccurs: "1"

   type: "uinteger"

   minver: "1"

   documentation: Specify the physical equivalent of this ChapterAtom
   like "DVD" (60) or "SIDE" (50), see complete list of values.







Lhomme, et al.           Expires January 4, 2018              [Page 117]

Internet-Draft                  Matroska                       July 2017


7.3.215.  ChapterTrack Element

   name: "ChapterTrack"

   path: "0*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterTrack)"

   id: "0x8F"

   maxOccurs: "1"

   type: "master"

   minver: "1"

   documentation: List of tracks on which the chapter applies.  If this
   Element is not present, all tracks apply

7.3.216.  ChapterTrackNumber Element

   name: "ChapterTrackNumber"

   path: "1*(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterTrack\Cha
   pterTrackNumber)"

   id: "0x89"

   minOccurs: "1"

   range: "not 0"

   type: "uinteger"

   minver: "1"

   documentation: UID of the Track to apply this chapter too.  In the
   absence of a control track, choosing this chapter will select the
   listed Tracks and deselect unlisted tracks.  Absence of this Element
   indicates that the Chapter SHOULD be applied to any currently used
   Tracks.

7.3.217.  ChapterDisplay Element

   name: "ChapterDisplay"

   path: "0*(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterDisplay)"

   id: "0x80"




Lhomme, et al.           Expires January 4, 2018              [Page 118]

Internet-Draft                  Matroska                       July 2017


   type: "master"

   minver: "1"

   documentation: Contains all possible strings to use for the chapter
   display.

7.3.218.  ChapString Element

   name: "ChapString"

   path: "1*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterDisplay\
   ChapString)"

   id: "0x85"

   minOccurs: "1"

   maxOccurs: "1"

   type: "utf-8"

   minver: "1"

   documentation: Contains the string to use as the chapter atom.

7.3.219.  ChapLanguage Element

   name: "ChapLanguage"

   path: "1*(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterDisplay\C
   hapLanguage)"

   id: "0x437C"

   minOccurs: "1"

   default: "eng"

   type: "string"

   minver: "1"

   documentation: The languages corresponding to the string, in the
   bibliographic ISO-639-2 form.  This Element MUST be ignored if the
   ChapLanguageIETF Element is used within the same ChapterDisplay
   Element.




Lhomme, et al.           Expires January 4, 2018              [Page 119]

Internet-Draft                  Matroska                       July 2017


7.3.220.  ChapLanguageIETF Element

   name: "ChapLanguageIETF"

   path: "0*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterDisplay\
   ChapLanguageIETF)"

   id: "0x437D"

   maxOccurs: "1"

   type: "string"

   minver: "4"

   documentation: Specifies the language used in the ChapString
   according to BCP 47 and using the IANA Language Subtag Registry.  If
   this Element is used, then any ChapLanguage Elements used in the same
   ChapterDisplay MUST be ignored.

7.3.221.  ChapCountry Element

   name: "ChapCountry"

   path: "0*(\Segment\Chapters\EditionEntry\ChapterAtom\ChapterDisplay\C
   hapCountry)"

   id: "0x437E"

   type: "string"

   minver: "1"

   documentation: The countries corresponding to the string, same 2
   octets as in Internet domains.  This Element MUST be ignored if the
   ChapLanguageIETF Element is used within the same ChapterDisplay
   Element.

7.3.222.  ChapProcess Element

   name: "ChapProcess"

   path: "0*(\Segment\Chapters\EditionEntry\ChapterAtom\ChapProcess)"

   id: "0x6944"

   type: "master"




Lhomme, et al.           Expires January 4, 2018              [Page 120]

Internet-Draft                  Matroska                       July 2017


   minver: "1"

   documentation: Contains all the commands associated to the Atom.

7.3.223.  ChapProcessCodecID Element

   name: "ChapProcessCodecID"

   path: "1*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapProcess\Cha
   pProcessCodecID)"

   id: "0x6955"

   minOccurs: "1"

   maxOccurs: "1"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: Contains the type of the codec used for the
   processing.  A value of 0 means native Matroska processing (to be
   defined), a value of 1 means the DVD command set is used.  More codec
   IDs can be added later.

7.3.224.  ChapProcessPrivate Element

   name: "ChapProcessPrivate"

   path: "0*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapProcess\Cha
   pProcessPrivate)"

   id: "0x450D"

   maxOccurs: "1"

   type: "binary"

   minver: "1"

   documentation: Some optional data attached to the ChapProcessCodecID
   information.  For ChapProcessCodecID = 1, it is the "DVD level"
   equivalent.





Lhomme, et al.           Expires January 4, 2018              [Page 121]

Internet-Draft                  Matroska                       July 2017


7.3.225.  ChapProcessCommand Element

   name: "ChapProcessCommand"

   path: "0*(\Segment\Chapters\EditionEntry\ChapterAtom\ChapProcess\Chap
   ProcessCommand)"

   id: "0x6911"

   type: "master"

   minver: "1"

   documentation: Contains all the commands associated to the Atom.

7.3.226.  ChapProcessTime Element

   name: "ChapProcessTime"

   path: "1*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapProcess\Cha
   pProcessCommand\ChapProcessTime)"

   id: "0x6922"

   minOccurs: "1"

   maxOccurs: "1"

   type: "uinteger"

   minver: "1"

   documentation: Defines when the process command SHOULD be handled

7.3.227.  ChapProcessData Element

   name: "ChapProcessData"

   path: "1*1(\Segment\Chapters\EditionEntry\ChapterAtom\ChapProcess\Cha
   pProcessCommand\ChapProcessData)"

   id: "0x6933"

   minOccurs: "1"

   maxOccurs: "1"

   type: "binary"



Lhomme, et al.           Expires January 4, 2018              [Page 122]

Internet-Draft                  Matroska                       July 2017


   minver: "1"

   documentation: Contains the command information.  The data SHOULD be
   interpreted depending on the ChapProcessCodecID value.  For
   ChapProcessCodecID = 1, the data correspond to the binary DVD cell
   pre/post commands.

7.3.228.  Tags Element

   name: "Tags"

   path: "0*(\Segment\Tags)"

   id: "0x1254C367"

   type: "master"

   minver: "1"

   documentation: Element containing metadata describing Tracks,
   Editions, Chapters, Attachments, or the Segment as a whole.  A list
   of valid tags can be found here.

7.3.229.  Tag Element

   name: "Tag"

   path: "1*(\Segment\Tags\Tag)"

   id: "0x7373"

   minOccurs: "1"

   type: "master"

   minver: "1"

   documentation: A single metadata descriptor.

7.3.230.  Targets Element

   name: "Targets"

   path: "1*1(\Segment\Tags\Tag\Targets)"

   id: "0x63C0"

   minOccurs: "1"



Lhomme, et al.           Expires January 4, 2018              [Page 123]

Internet-Draft                  Matroska                       July 2017


   maxOccurs: "1"

   type: "master"

   minver: "1"

   documentation: Specifies which other elements the metadata
   represented by the Tag applies to.  If empty or not present, then the
   Tag describes everything in the Segment.

7.3.231.  TargetTypeValue Element

   name: "TargetTypeValue"

   path: "0*1(\Segment\Tags\Tag\Targets\TargetTypeValue)"

   id: "0x68CA"

   maxOccurs: "1"

   default: "50"

   type: "uinteger"

   minver: "1"

   documentation: A number to indicate the logical level of the target.

7.3.232.  TargetType Element

   name: "TargetType"

   path: "0*1(\Segment\Tags\Tag\Targets\TargetType)"

   id: "0x63CA"

   maxOccurs: "1"

   type: "string"

   minver: "1"

   documentation: An informational string that can be used to display
   the logical level of the target like "ALBUM", "TRACK", "MOVIE",
   "CHAPTER", etc (see TargetType).






Lhomme, et al.           Expires January 4, 2018              [Page 124]

Internet-Draft                  Matroska                       July 2017


7.3.233.  TagTrackUID Element

   name: "TagTrackUID"

   path: "0*(\Segment\Tags\Tag\Targets\TagTrackUID)"

   id: "0x63C5"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: A unique ID to identify the Track(s) the tags belong
   to.  If the value is 0 at this level, the tags apply to all tracks in
   the Segment.

7.3.234.  TagEditionUID Element

   name: "TagEditionUID"

   path: "0*(\Segment\Tags\Tag\Targets\TagEditionUID)"

   id: "0x63C9"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: A unique ID to identify the EditionEntry(s) the tags
   belong to.  If the value is 0 at this level, the tags apply to all
   editions in the Segment.

7.3.235.  TagChapterUID Element

   name: "TagChapterUID"

   path: "0*(\Segment\Tags\Tag\Targets\TagChapterUID)"

   id: "0x63C4"

   default: "0"

   type: "uinteger"




Lhomme, et al.           Expires January 4, 2018              [Page 125]

Internet-Draft                  Matroska                       July 2017


   minver: "1"

   documentation: A unique ID to identify the Chapter(s) the tags belong
   to.  If the value is 0 at this level, the tags apply to all chapters
   in the Segment.

7.3.236.  TagAttachmentUID Element

   name: "TagAttachmentUID"

   path: "0*(\Segment\Tags\Tag\Targets\TagAttachmentUID)"

   id: "0x63C6"

   default: "0"

   type: "uinteger"

   minver: "1"

   documentation: A unique ID to identify the Attachment(s) the tags
   belong to.  If the value is 0 at this level, the tags apply to all
   the attachments in the Segment.

7.3.237.  SimpleTag Element

   name: "SimpleTag"

   path: "1*(\Segment\Tags\Tag(1*(\SimpleTag)))"

   id: "0x67C8"

   minOccurs: "1"

   type: "master"

   recursive: "1"

   minver: "1"

   documentation: Contains general information about the target.

7.3.238.  TagName Element

   name: "TagName"

   path: "1*1(\Segment\Tags\Tag\SimpleTag\TagName)"




Lhomme, et al.           Expires January 4, 2018              [Page 126]

Internet-Draft                  Matroska                       July 2017


   id: "0x45A3"

   minOccurs: "1"

   maxOccurs: "1"

   type: "utf-8"

   minver: "1"

   documentation: The name of the Tag that is going to be stored.

7.3.239.  TagLanguage Element

   name: "TagLanguage"

   path: "1*1(\Segment\Tags\Tag\SimpleTag\TagLanguage)"

   id: "0x447A"

   minOccurs: "1"

   maxOccurs: "1"

   default: "und"

   type: "string"

   minver: "1"

   documentation: Specifies the language of the tag specified, in the
   Matroska languages form.  This Element MUST be ignored if the
   TagLanguageIETF Element is used within the same SimpleTag Element.

7.3.240.  TagLanguageIETF Element

   name: "TagLanguageIETF"

   path: "0*1(\Segment\Tags\Tag\SimpleTag\TagLanguageIETF)"

   id: "0x447B"

   maxOccurs: "1"

   type: "string"

   minver: "4"




Lhomme, et al.           Expires January 4, 2018              [Page 127]

Internet-Draft                  Matroska                       July 2017


   documentation: Specifies the language used in the TagString according
   to BCP 47 and using the IANA Language Subtag Registry.  If this
   Element is used, then any TagLanguage Elements used in the same
   SimpleTag MUST be ignored.

7.3.241.  TagDefault Element

   name: "TagDefault"

   path: "1*1(\Segment\Tags\Tag\SimpleTag\TagDefault)"

   id: "0x4484"

   minOccurs: "1"

   maxOccurs: "1"

   range: "0-1"

   default: "1"

   type: "uinteger"

   minver: "1"

   documentation: A boolean value to indicate if this is the default/
   original language to use for the given tag.

7.3.242.  TagString Element

   name: "TagString"

   path: "0*1(\Segment\Tags\Tag\SimpleTag\TagString)"

   id: "0x4487"

   maxOccurs: "1"

   type: "utf-8"

   minver: "1"

   documentation: The value of the Tag.








Lhomme, et al.           Expires January 4, 2018              [Page 128]

Internet-Draft                  Matroska                       July 2017


7.3.243.  TagBinary Element

   name: "TagBinary"

   path: "0*1(\Segment\Tags\Tag\SimpleTag\TagBinary)"

   id: "0x4485"

   maxOccurs: "1"

   type: "binary"

   minver: "1"

   documentation: The values of the Tag if it is binary.  Note that this
   cannot be used in the same SimpleTag as TagString.

   If you intend to implement a Matroska player, make sure you can
   handle all the files in our test suite [17], or at least the features
   presented there, not necessarily the same codecs.

8.  Beginning of File

   An EBML file always starts with 0x1A.  The 0x1A makes the DOS command
   "type" ends display.  That way you can include ASCII text before the
   EBML data and it can be displayed.  The EBML parser is safe from
   false-alarm with these ASCII only codes.

   Next the EBML header is stored.  This allows the the parser to know
   what type of EBML file it is parsing.

9.  Block Timecodes

   The Block's timecode is signed integer that represents the Raw
   Timecode relative to the Cluster's [18] Timecode [19], multiplied by
   the TimecodeScale (see the TimecodeScale notes [20]).

   The Block's timecode is represented by a 16bit signed integer
   (sint16).  This means that the Block's timecode has a range of -32768
   to +32767 units.  When using the default value of TimecodeScale, each
   integer represents 1ms.  So, the maximum time span of Blocks in a
   Cluster using the default TimecodeScale of 1ms is 65536ms.

   If a Cluster's [21] Timecode [22] is set to zero, it is possible to
   have Blocks with a negative Raw Timecode.  Blocks with a negative Raw
   Timecode are not valid.





Lhomme, et al.           Expires January 4, 2018              [Page 129]

Internet-Draft                  Matroska                       July 2017


10.  Default decoded field duration

   The "DefaultDecodedFieldDuration" Element can signal to the
   displaying application how often fields of a video sequence will be
   available for displaying.  It can be used for both interlaced and
   progressive content.

   If the video sequence is signaled as interlaced, then the period
   between two successive fields at the output of the decoding process
   equals DefaultDecodedFieldDuration.

   For video sequences signaled as progressive it is twice the value of
   DefaultDecodedFieldDuration.

   These values are valid at the end of the decoding process before
   post-processing like deinterlacing or inverse telecine is applied.

   Examples:

   o  Blu-ray movie: 1000000000ns/(48/1.001) = 20854167ns

   o  PAL broadcast/DVD: 1000000000ns/(50/1.000) = 20000000ns

   o  N/ATSC broadcast: 1000000000ns/(60/1.001) = 16683333ns

   o  hard-telecined DVD: 1000000000ns/(60/1.001) = 16683333ns (60
      encoded interlaced fields per second)

   o  soft-telecined DVD: 1000000000ns/(60/1.001) = 16683333ns (48
      encoded interlaced fields per second, with "repeat_first_field =
      1")

11.  Default Values

   The default value of an Element is assumed when not present in the
   data stream.  It is assumed only in the scope of its Parent Element
   (for example "Language" in the scope of the "Track" element).  If the
   "Parent Element" is not present or assumed, then the Element cannot
   be assumed.

12.  DRM

   Digital Rights Management.  See Encryption [23].








Lhomme, et al.           Expires January 4, 2018              [Page 130]

Internet-Draft                  Matroska                       July 2017


13.  Encryption

   Encryption in Matroska is designed in a very generic style that
   allows people to implement whatever form of encryption is best for
   them.  It is easily possible to use the encryption framework in
   Matroska as a type of DRM.

   Because the encryption occurs within the Block, it is possible to
   manipulate encrypted streams without decrypting them.  The streams
   could potentially be copied, deleted, cut, appended, or any number of
   other possible editing techniques without ever decrypting them.  This
   means that the data is more useful, without having to expose it, or
   go through the intensive process of decrypting.

   Encryption can also be layered within Matroska.  This means that two
   completely different types of encryption can be used, requiring two
   separate keys to be able to decrypt a stream.

   Encryption information is stored in the "ContentEncodings" Master-
   element under the "ContentEncryption" Element.

14.  Image cropping

   Thanks to the PixelCropXXX elements, it's possible to crop the image
   before being resized.  That means the image size follows this path:

   PixelXXX (size of the coded image) -> PixelCropXXX (size of the image
   to keep) -> DisplayXXX (resized cropped image)

15.  Matroska version indicators

   The EBML Header each Matroska file starts with contains two version
   number fields that inform a reading application about what to expect.
   These are "DocTypeVersion" and "DocTypeReadVersion".

   "DocTypeVersion" MUST contain the highest Matroska version number of
   any Element present in the Matroska file.  For example, a file using
   the SimpleBlock Element MUST have a "DocTypeVersion" of at least 2
   while a file containing "CueRelativePosition" Elements MUST have a
   "DocTypeVersion" of at least 4.

   The "DocTypeReadVersion" MUST contain the minimum version number a
   reading application MUST at least support properly in order to play
   the file back (optionally with a reduced feature set).  For example,
   if a file contains only Elements of version 2 or lower except for
   "CueRelativePosition" (which is a version 4 Matroska Element) then
   "DocTypeReadVersion" SHOULD still be set to 2 and not 4 because




Lhomme, et al.           Expires January 4, 2018              [Page 131]

Internet-Draft                  Matroska                       July 2017


   evaluating "CueRelativePosition" is not REQUIRED for standard
   playback -- it only makes seeking more precise if used.

   "DocTypeVersion" MUST always be equal to or greater than
   "DocTypeReadVersion".

   A reading application supporting Matroska version "V" MUST NOT refuse
   to read an application with "DocReadTypeVersion" equal to or lower
   than "V" even if "DocTypeVersion" is greater than "V".  See also the
   note about Unknown Elements [24].

16.  Mime Types

   There is no IETF endorsed MIME type for Matroska files.  But you can
   use the ones we have defined on our web server:

   o  .mka : Matroska audio "audio/x-matroska"

   o  .mkv : Matroska video "video/x-matroska"

   o  .mk3d : Matroska 3D video "video/x-matroska-3d"

17.  Octet

   An Octet refers to a byte made of 8 bits.

18.  Overlay Track

   Overlay tracks SHOULD be rendered in the same 'channel' as the track
   it's linked to.  When content is found in such a track it is played
   on the rendering channel instead of the original track.

19.  Segment Position

   The "Segment Position" of an "Element" refers to the position of the
   first octet of the "Element ID" of that "Element", measured in
   octets, from the beginning of the "Element Data" section of the
   containing "Segment Element".  In other words, the "Segment Position"
   of an "Element" is the distance in octets from the beginning of its
   containing "Segment Element" minus the size of the "Element ID" and
   "Element Data Size" of that "Segment Element".  The "Segment
   Position" of the first "Child Element" of the "Segment Element" is 0.
   An "Element" which is not stored within a "Segment Element", such as
   the "Elements" of the "EBML Header", do not have a "Segment
   Position".






Lhomme, et al.           Expires January 4, 2018              [Page 132]

Internet-Draft                  Matroska                       July 2017


19.1.  Segment Position Exception

   "Elements" that are defined to store a "Segment Position" MAY define
   reserved values to indicate a special meaning.

19.2.  Example of Segment Position

   This table presents an example of "Segment Position" by showing a
   hexadecimal representation of a very small Matroska file with labels
   to show the offsets in octets.  The file contains a "Segment Element"
   with an "Element ID" of "0x18538067" and a "MuxingApp Element" with
   an "Element ID" of "0x4D80".

         0                             1                             2
         0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
         +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
       0 |1A|45|DF|A3|8B|42|82|88|6D|61|74|72|6F|73|6B|61|18|53|80|67|
      20 |93|15|49|A9|66|8E|4D|80|84|69|65|74|66|57|41|84|69|65|74|66|

   In the above example, the "Element ID" of the "Segment Element" is
   stored at offset 16, the "Element Data Size" of the "Segment Element"
   is stored at offset 20, and the "Element Data" of the "Segment
   Element" is stored at offset 21.

   The "MuxingApp Element" is stored at offset 26.  Since the "Segment
   Position" of an "Element" is calculated by subtracting the position
   of the "Element Data" of the containing "Segment Element" from the
   position of that "Element", the "Segment Position" of "MuxingApp
   Element" in the above example is "26 - 21" or "5".

20.  Raw Timecode

   The exact time of an object represented in nanoseconds.  To find out
   a Block's Raw Timecode, you need the Block's timecode, the Cluster's
   [25] Timecode [26], and the TimecodeScale.  For calculation, please
   see the see the TimecodeScale notes.

21.  Linked Segments

   Matroska provides several methods to link two or many Segments
   together to create a Linked Segment.  A Linked Segment is a set of
   multiple Segments related together into a single presentation by
   using Hard Linking, Soft Linking, or Medium Linking.  All Segments
   within a Linked Segment MUST utilize the same track numbers and
   timescale.  All Segments within a Linked Segment MUST be stored
   within the same directory.  All Segments within a Linked Segment MUST
   store a "SegmentUID".




Lhomme, et al.           Expires January 4, 2018              [Page 133]

Internet-Draft                  Matroska                       July 2017


21.1.  Hard Linking

   Hard Linking (also called splitting) is the process of creating a
   Linked Segment by relating multiple Segments using the "PrevUID" and
   "NextUID" Elements.  Within a Linked Segment the timestamps of each
   Segment MUST follow consecutively in linking order.  With Hard
   Linking, the chapters of any Segment within the Linked Segment MUST
   only reference the current Segment.  With Hard Linking, the "NextUID"
   and "PrevUID" MUST reference the respective "SegmentUID" values of
   the next and previous Segments.  The first Segment of a Linked
   Segment MUST have a "NextUID" Element and MUST NOT have a "PrevUID"
   Element.  The last Segment of a Linked Segment MUST have a "PrevUID"
   Element and MUST NOT have a "NextUID" Element.  The middle Segments
   of a Linked Segment MUST have both a "NextUID" Element and a
   "PrevUID" Element.

   As an example four Segments MAY be Hard Linked as a Linked Segment
   through cross-referencing each other with "SegmentUID", "PrevUID",
   and "NextUID" as in this table.

   +--------+------------------+-------------------+-------------------+
   | file   | SegmentUID       | PrevUID           | NextUID           |
   | name   |                  |                   |                   |
   +--------+------------------+-------------------+-------------------+
   | "start | "71000c23cd31099 | n/a               | "a77b3598941cb803 |
   | .mkv"  | 853fbc94dd984a5d |                   | eac0fcdafe44fac9" |
   |        | d"               |                   |                   |
   | "middl | "a77b3598941cb80 | "71000c23cd310998 | "6c92285fa6d3e827 |
   | e.mkv" | 3eac0fcdafe44fac | 53fbc94dd984a5dd" | b198d120ea3ac674" |
   |        | 9"               |                   |                   |
   | "end.m | "6c92285fa6d3e82 | "a77b3598941cb803 | n/a               |
   | kv"    | 7b198d120ea3ac67 | eac0fcdafe44fac9" |                   |
   |        | 4"               |                   |                   |
   +--------+------------------+-------------------+-------------------+

21.2.  Soft Linking

   Soft Linking is used by codec chapters.  They can reference another
   Segment and jump to that Segment.  The way the Segments are described
   are internal to the chapter codec and unknown to the Matroska level.
   But there are Elements within the "Info" Element (such as
   "ChapterTranslate") that can translate a value representing a Segment
   in the chapter codec and to the current "SegmentUID".  All Segments
   that could be used in a Linked Segment in this way SHOULD be marked
   as members of the same family via the SegmentFamily Element, so that
   the player can quickly switch from one to the other.





Lhomme, et al.           Expires January 4, 2018              [Page 134]

Internet-Draft                  Matroska                       July 2017


21.3.  Medium Linking

   Medium Linking creates relationships between Segments using Ordered
   Chapters and the "ChapterSegmentUID" Element.  A Segment Edition with
   Ordered Chapters MAY contain Chapters that reference timestamp ranges
   from other Segments.  The Segment referenced by the Ordered Chapter
   via the "ChapterSegmentUID" Element SHOULD be played as part of a
   Linked Segment.  The timestamps of Segment content referenced by
   Ordered Chapters MUST be adjusted according to the cumulative
   duration of the the previous Ordered Chapters.

   As an example a file named "intro.mkv" could have a "SegmentUID" of
   "0xb16a58609fc7e60653a60c984fc11ead".  Another file called
   "program.mkv" could use a Chapter Edition that contains two Ordered
   Chapters.  The first chapter references the Segment of "intro.mkv"
   with the use of a "ChapterSegmentUID", "ChapterSegmentEditionUID",
   "ChapterTimeStart" and optionally a "ChapterTimeEnd" element.  The
   second chapter references content within the Segment of
   "program.mkv".  A player SHOULD recognize the Linked Segment created
   by the use of "ChapterSegmentUID" in an enabled Edition and present
   the reference content of the two Segments together.

22.  Timecode Types

   o  Absolute Timecode = Block+Cluster

   o  Relative Timecode = Block

   o  Scaled Timecode = Block+Cluster

   o  Raw Timecode = (Block+Cluster)_TimecodeScale_TrackTimecodeScale

23.  TimecodeScale

   The TimecodeScale [27] is used to calculate the Raw Timecode of a
   Block.  The timecode is obtained by adding the Block's timecode to
   the Cluster's [28] Timecode [29], and then multiplying that result by
   the TimecodeScale.  The result will be the Block's Raw Timecode in
   nanoseconds.  The formula for this would look like:

     (a + b) * c

     a = [Block's Timecode]({{site.baseurl}}/index.html#block-header)
     b = [Cluster's](#cluster) [Timecode](#timecode)
     c = [TimeCodeScale]({{site.baseurl}}/index.html#TimeCodeScale)






Lhomme, et al.           Expires January 4, 2018              [Page 135]

Internet-Draft                  Matroska                       July 2017


   An example of this is, assume a Cluster's [30] Timecode [31] has a
   value of 564264, the Block has a Timecode of 1233, and the
   timecodescale is the default of 1000000.

                 (1233 + 564264) * 1000000 = 565497000000

   So, the Block in this example has a specific time of 565497000000 in
   nanoseconds.  In milliseconds this would be 565497ms.

24.  TimecodeScale Rounding

   Because the default value of TimecodeScale is 1000000, which makes
   each integer in the Cluster and Block timecodes equal 1ms, this is
   the most commonly used.  When dealing with audio, this causes
   inaccuracy with where you are seeking to.  When the audio is combined
   with video, this is not an issue.  For most cases the the synch of
   audio to video does not need to be more than 1ms accurate.  This
   becomes obvious when one considers that sound will take 2-3ms to
   travel a single meter, so distance from your speakers will have a
   greater effect on audio/visual synch than this.

   However, when dealing with audio only files, seeking accuracy can
   become critical.  For instance, when storing a whole CD in a single
   track, you want to be able to seek to the exact sample that a song
   begins at.  If you seek a few sample ahead or behind then a 'crack'
   or 'pop' may result as a few odd samples are rendered.  Also, when
   performing precise editing, it may be very useful to have the audio
   accuracy down to a single sample.

   It is usually true that when storing timecodes for an audio stream,
   the TimecodeScale MUST have an accuracy of at least that of the audio
   samplerate, otherwise there are rounding errors that prevent you from
   knowing the precise location of a sample.  Here's how a program has
   to round each timecode in order to be able to recreate the sample
   number accurately.

   Let's assume that the application has an audio track with a sample
   rate of 44100.  As written above the TimecodeScale MUST have at least
   the accuracy of the sample rate itself: 1000000000 / 44100 =
   22675.7369614512.  This value MUST always be truncated.  Otherwise
   the accuracy will not suffice.  So in this example the application
   will use 22675 for the TimecodeScale.  The application could even use
   some lower value like 22674 which would allow it to be a little bit
   imprecise about the original timecodes.  But more about that in a
   minute.

   Next the application wants to write sample number 52340 and
   calculates the timecode.  This is easy.  In order to calculate the



Lhomme, et al.           Expires January 4, 2018              [Page 136]

Internet-Draft                  Matroska                       July 2017


   Raw Timecode in ns all it has to do is calculate "RawTimecode =
   round(1000000000 * sample_number / sample_rate)".  Rounding at this
   stage is very important!  The application might skip it if it choses
   a slightly smaller value for the TimecodeScale factor instead of the
   truncated one like shown above.  Otherwise it has to round or the
   results won't be reversible.  For our example we get "RawTimecode =
   round(1000000000 * 52340 / 44100) = round(1186848072.56236) =
   1186848073".

   The next step is to calculate the Absolute Timecode - that is the
   timecode that will be stored in the Matroska file.  Here the
   application has to divide the Raw Timecode from the previous
   paragraph by the TimecodeScale factor and round the result:
   "AbsoluteTimecode = round(RawTimecode / TimecodeScale_facotr)" which
   will result in the following for our example: "AbsoluteTimecode =
   round(1186848073 / 22675) = round(52341.7011245866) = 52342".  This
   number is the one the application has to write to the file.

   Now our file is complete, and we want to play it back with another
   application.  Its task is to find out which sample the first
   application wrote into the file.  So it starts reading the Matroska
   file and finds the TimecodeScale factor 22675 and the audio sample
   rate 44100.  Later it finds a data block with the Absolute Timecode
   of 52342.  But how does it get the sample number from these numbers?

   First it has to calculate the Raw Timecode of the block it has just
   read.  Here's no rounding involved, just an integer multiplication:
   "RawTimecode = AbsoluteTimecode * TimecodeScale_factor".  In our
   example: "RawTimecode = 52342 * 22675 = 1186854850".

   The conversion from the RawTimecode to the sample number again
   requires rounding: "sample_number = round(RawTimecode * sample_rate /
   1000000000)".  In our example: "sample_number = round(1186854850 *
   44100 / 1000000000) = round(52340.298885) = 52340".  This is exactly
   the sample number that the previous program started with.

   Some general notes for a program:

   1.  Always calculate the timestamps / sample numbers with floating
       point numbers of at least 64bit precision (called 'double' in
       most modern programming languages).  If you're calculating with
       integers then make sure they're 64bit long, too.

   2.  Always round if you divide.  Always!  If you don't you'll end up
       with situations in which you have a timecode in the Matroska file
       that does not correspond to the sample number that it started
       with.  Using a slightly lower timecode scale factor can help here




Lhomme, et al.           Expires January 4, 2018              [Page 137]

Internet-Draft                  Matroska                       July 2017


       in that it removes the need for proper rounding in the conversion
       from sample number to Raw Timecode.

25.  Track Flags

25.1.  Default flag

   The "default track" flag is a hint for the playback application and
   SHOULD always be changeable by the user.  If the user wants to see or
   hear a track of a certain kind (audio, video, subtitles) and she
   hasn't chosen a specific track then the player SHOULD use the first
   track of that kind whose "default track" flag is set to "1".  If no
   such track is found then the first track of this kind SHOULD be
   chosen.

   Only one track of a kind MAY have its "default track" flag set in a
   segment.  If a track entry does not contain the "default track" flag
   element then its default value "1" is to be used.

25.2.  Forced flag

   The "forced" flag tells the playback application that it MUST
   display/play this track or another track of the same kind that also
   has its "forced" flag set.  When there are multiple "forced" tracks,
   the player SHOULD determined based upon the language of the forced
   flag or use the default flag if no track matches the use languages.
   Another track of the same kind without the "forced" flag may be use
   simultaneously with the "forced" track (like DVD subtitles for
   example).

26.  TrackTimecodeScale

   The TrackTimecodeScale [32] is used align tracks that would otherwise
   be played at different speeds.  An example of this would be if you
   have a film that was originally recorded at 24fps video.  When
   playing this back through a PAL broadcasting system, it is standard
   to speed up the film to 25fps to match the 25fps display speed of the
   PAL broadcasting standard.  However, when broadcasting the video
   through NTSC, it is typical to leave the film at its original speed.
   If you wanted to make a single file where there was one video stream,
   and an audio stream used from the PAL broadcast, as well as an audio
   stream used from the NTSC broadcast, you would have the problem that
   the PAL audio stream would be 1/24th faster than the NTSC audio
   stream, quickly leading to problems.  It is possible to stretch out
   the PAL audio track and re-encode it at a slower speed, however when
   dealing with lossy audio codecs, this often results in a loss of
   audio quality and/or larger file sizes.




Lhomme, et al.           Expires January 4, 2018              [Page 138]

Internet-Draft                  Matroska                       July 2017


   This is the type of problem that TrackTimecodeScale was designed to
   fix.  Using it, the video can be played back at a speed that will
   synch with either the NTSC or the PAL audio stream, depending on
   which is being used for playback.  To continue the above example:

                            Track 1: Video
                            Track 2: NTSC Audio
                            Track 3: PAL Audio

   Because the NTSC track is at the original speed, it will used as the
   default value of 1.0 for its TrackTimecodeScale.  The video will also
   be aligned to the NTSC track with the default value of 1.0.

   The TrackTimecodeScale value to use for the PAL track would be
   calculated by determining how much faster the PAL track is than the
   NTSC track.  In this case, because we know the video for the NTSC
   audio is being played back at 24fps and the video for the PAL audio
   is being played back at 25fps, the calculation would be:

                   (25 / 24) = ~ 1.04166666666666666667

   When writing a file that uses a non-default TrackTimecodeScale, the
   values of the Block's timecode are whatever they would be when
   normally storing the track with a default value for the
   TrackTimecodeScale.  However, the data is interleaved a little
   differently.  Data SHOULD be interleaved by its Raw Timecode [33] in
   the order handed back from the encoder.  The Raw Timecode of a Block
   from a track using TrackTimecodeScale is calculated using:

   "(Block's Timecode + Cluster's Timecode) * TimecodeScale *
   TrackTimecodeScale"

   So, a Block from the PAL track above that had a Scaled Timecode [34]
   of 100 seconds would have a Raw Timecode of 104.66666667 seconds, and
   so would be stored in that part of the file.

   When playing back a track using the TrackTimecodeScale, if the track
   is being played by itself, there is no need to scale it.  From the
   above example, when playing the Video with the NTSC Audio, neither
   are scaled.  However, when playing back the Video with the PAL Audio,
   the timecodes from the PAL Audio track are scaled using the
   TrackTimecodeScale, resulting in the video playing back in synch with
   the audio.

   It would be possible for a player to also adjust the audio's
   samplerate at the same time as adjusting the timecodes if you wanted
   to play the two audio streams synchronously.  It would also be
   possible to adjust the video to match the audio's speed.  However,



Lhomme, et al.           Expires January 4, 2018              [Page 139]

Internet-Draft                  Matroska                       July 2017


   for playback, the selected track(s) timecodes SHOULD be adjusted if
   they need to be scaled.

   While the above example deals specifically with audio tracks, this
   element can be used to align video, audio, subtitles, or any other
   type of track contained in a Matroska file.

27.  Unknown elements

   Matroska is based upon the principal that a reading application does
   not have to support 100% of the specifications in order to be able to
   play the file.  A Matroska file therefore contains version indicators
   [35] that tell a reading application what to expect.

   It is possible and valid to have the version fields indicate that the
   file contains Matroska Elements from a higher specification version
   number while signalling that a reading application MUST only support
   a lower version number properly in order to play it back (possibly
   with a reduced feature set).  This implies that a reading application
   supporting at least Matroska version V reading a file whose
   DocTypeReadVersion field is equal to or lower than V MUST skip
   Matroska/EBML Elements it encounters but which it does not know about
   if that unknown element fits into the size constraints set by the
   current parent element.

28.  Multi-planar and 3D videos

   There are 2 different ways to compress 3D videos: have each 'eye'
   track in a separate track and have one track have both 'eyes'
   combined inside (which is more efficient, compression-wise).
   Matroska supports both ways.

   For the single track variant, there is the StereoMode [36] Element
   which defines how planes are assembled in the track (mono or left-
   right combined).  Odd values of StereoMode means the left plane comes
   first for more convenient reading.  The pixel count of the track
   (PixelWidth/PixelHeight) is the raw amount of pixels (for example
   3840x1080 for full HD side by side) and the DisplayWidth/Height in
   pixels is the amount of pixels for one plane (1920x1080 for that full
   HD stream).  Old stereo 3D were displayed using anaglyph (cyan and
   red colours separated).  For compatibility with such movies, there is
   a value of the StereoMode that corresponds to AnaGlyph.

   There is also a "packed" mode (values 13 and 14) which consists of
   packing 2 frames together in a Block using lacing.  The first frame
   is the left eye and the other frame is the right eye (or vice versa).
   The frames SHOULD be decoded in that order and are possibly dependent
   on each other (P and B frames).



Lhomme, et al.           Expires January 4, 2018              [Page 140]

Internet-Draft                  Matroska                       July 2017


   For separate tracks, Matroska needs to define exactly which track
   does what.  TrackOperation [37] with TrackCombinePlanes [38] do that.
   For more details look at how TrackOperation works [39].

   The 3D support is still in infancy and may evolve to support more
   features.

   The StereoMode [40] used to be part of Matroska v2 but it didn't meet
   the requirement for multiple tracks.  There was also a bug in
   libmatroska prior to 0.9.0 that would save/read it as 0x53B9 instead
   of 0x53B8.  Readers may support these legacy files by checking
   Matroska v2 or 0x53B9.  The olders values were 0: mono, 1: right eye,
   2: left eye, 3: both eyes.

29.  Track Operation

   TrackOperation [41] allows combining multiple tracks to make a
   virtual one.  It uses 2 separate system to combine tracks.  One to
   create a 3D "composition" (left/right/background planes) and one to
   simplify join 2 tracks together to make a single track.

   A track created with TrackOperation is a proper track with a UID and
   all its flags.  However the codec ID is meaningless because each
   "sub" track needs to be decoded by its own decoder before the
   "operation" is applied.  The Cues corresponding to such a virtual
   track SHOULD be the sum of the Cues elements for each of the tracks
   it's composed of (when the Cues are defined per track).

   In the case of TrackJoinBlocks, the Blocks (from BlockGroup and
   SimpleBlock) of all the tracks SHOULD be used as if they were defined
   for this new virtual Track.  When 2 Blocks have overlapping start or
   end timecodes, it's up to the underlying system to either drop some
   of these frames or render them the way they overlap.  In the end this
   situation SHOULD be avoided when creating such tracks as you can
   never be sure of the end result on different platforms.

30.  Matroska Element Ordering Guidelines

   Except for the EBML Header and the CRC-32 Element, the EBML
   specification does not require any particular storage order for
   Elements.  The Matroska specification however defines mandates and
   recommendations for ordering certain Elements in order to facilitate
   better playback, seeking, and editing efficiency.  This section
   describes and offers rationale for ordering requirements and
   recommendations for Matroska.






Lhomme, et al.           Expires January 4, 2018              [Page 141]

Internet-Draft                  Matroska                       July 2017


30.1.  Top-Level Elements

   A valid Matroska file requires only one Top-Level Element, the "Info"
   Element; however, to be playable Matroska MUST also contain at least
   one "Tracks" and "Cluster" Element.  The first "Info" Element and the
   first "Tracks" Element MUST either be stored before the first
   "Cluster" Element or both be referenced by a "SeekHead" Element which
   occurs before the first "Cluster" Element.

   After a Matroska file has been created it could still be edited.  For
   example chapters, tags or attachments can be added.  When new Top-
   Level Elements are added to a Matroska file the "SeekHead" Element(s)
   MUST be updated so that the "SeekHead" Element(s) itemize the
   identity and position of all Top-Level Elements.  Editing, removing,
   or adding Elements to a Matroska file often requires that some
   existing Elements be voided or extended; therefore, it is RECOMMENDED
   to use Void Elements as padding in between Top-Level Elements.

30.2.  CRC-32

   As noted by the EBML specification, if a "CRC-32" Element is used
   then the "CRC-32" Element MUST be the first ordered Element within
   its Parent Element.  The Matroska specification recommends that "CRC-
   32" Elements SHOULD NOT be used as an immediate Child Element of the
   "Segment" Element; however all Top-Level Elements of an EBML Document
   SHOULD include a CRC-32 Element as a Child Element.

30.3.  SeekHead

   If used, the first "SeekHead" Element SHOULD be the first non-"CRC-
   32" Child Element of the "Segment" Element.  If a second "SeekHead"
   Element is used then the first "SeekHead" MUST reference the identity
   and position of the second "SeekHead", the second "SeekHead" MUST
   only reference "Cluster" Elements and not any other Top-Level Element
   already contained within the first "SeekHead", and the second
   "SeekHead" MAY be stored in any order relative to the other Top-Level
   Elements.  Whether one or two "SeekHead" Element(s) are used, the
   "SeekHead" Element(s) MUST collectively reference the identity and
   position of all Top-Level Elements except for the first "SeekHead"
   itself.

   It is RECOMMENDED that the first "SeekHead" Element be followed by
   some padding (a "Void" Element) to allow for the "SeekHead" Element
   to be expanded to cover new Top-Level Elements that could be added to
   the Matroska file, such as "Tags", "Chapters" and "Attachments"
   Elements.





Lhomme, et al.           Expires January 4, 2018              [Page 142]

Internet-Draft                  Matroska                       July 2017


30.4.  Cues (index)

   The "Cues Element" is RECOMMENDED to optimize seeking access in
   Matroska.  It is programmatically simpler to add the "Cues Element"
   after all of the "Cluster Elements" are written because this does not
   require a prediction of how much space to reserve before writing the
   "Cluster Elements".  On the other hand, storing the "Cues Element"
   before the "Cluster Elements" can provide some seeking advantages.
   If the "Cues Element" is present, then it SHOULD either be stored
   before the first "Cluster Element" or be referenced by a "SeekHead
   Element".

30.5.  Info

   The first "Info" Element SHOULD occur before the first "Tracks" and
   first "Cluster" Element.

30.6.  Chapters

   The "Chapters" Element SHOULD be placed before the "Cluster"
   Element(s).  The "Chapters" Element can be used during playback even
   if the user doesn't need to seek.  It immediately gives the user
   information of what section is being read and what other sections are
   available.  In the case of Ordered Chapters it RECOMMENDED to
   evaluate the logical linking even before starting playing anything.
   The "Chapters" Element SHOULD be placed before the first "Tracks"
   Element and after the first "Info" Element.

30.7.  Attachments

   The "Attachments" Element is not meant to use by default when playing
   the file, but could contain the cover art and/or fonts.  Cover art is
   useful even before the file is played and fonts could be needed
   before playback starts for initialization of subtitles that could use
   them.  The "Attachments" Element MAY be placed before the first
   "Cluster" Element; however if the "Attachments" Element is likely to
   be edited, then it SHOULD be placed after the last "Cluster" Element.

30.8.  Tags

   The "Tags" Element is the one that is most subject to changes after
   the file was originally created.  So for easier editing the "Tags"
   Element SHOULD be placed at the end of the "Segment" Element, even
   after the "Attachments" Element.  On the other hand, it is
   inconvenient to have to seek in the "Segment" for tags especially for
   network streams.  So it's better if the "Tags" Element(s) are found
   early in the stream.  When editing the "Tags" Element(s), the
   original "Tags" Element at the beginning can be voided [42] and a new



Lhomme, et al.           Expires January 4, 2018              [Page 143]

Internet-Draft                  Matroska                       July 2017


   one written right at the end [43] of the "Segment" Element.  The file
   size will only marginally change.

30.9.  Optimum layout from a muxer

   o  SeekHead

   o  Info

   o  Tracks

   o  Chapters

   o  Attachments

   o  Tags

   o  Clusters

   o  Cues

30.10.  Optimum layout after editing tags

   o  SeekHead

   o  Info

   o  Tracks

   o  Chapters

   o  Attachments

   o  Void

   o  Clusters

   o  Cues

   o  Tags

30.11.  Optimum layout with Cues at the front

   o  SeekHead

   o  Info

   o  Tracks



Lhomme, et al.           Expires January 4, 2018              [Page 144]

Internet-Draft                  Matroska                       July 2017


   o  Chapters

   o  Attachments

   o  Tags

   o  Cues

   o  Clusters

30.12.  Cluster Timecode

   As each "BlockGroup" and "SimpleBlock" of a "Cluster" Element needs
   the Cluster "Timecode", the "Timecode" Element MUST occur as the
   first Child Element within the "Cluster" Element.

31.  Codec Mappings

   A "Codec Mapping" is a set of attributes to identify, name, and
   contextualise the format and characteristics of encoded data that can
   be contained within Matroska Clusters.

   Each TrackEntry used within Matroska MUST reference a defined "Codec
   Mapping" using the "Codec ID" to identify and describe the format of
   the encoded data in its associated Clusters.  This "Codec ID" is a
   unique registered identifier that represents the encoding stored
   within the Track.  Certain encodings MAY also require some form of
   codec initialisation in order to provide its decoder with context and
   technical metadata.

   The intention behind this list is not to list all existing audio and
   video codecs, but rather to list those codecs that are currently
   supported in Matroska and therefore need a well defined "Codec ID" so
   that all developers supporting Matroska will use the same "Codec ID".
   If you feel we missed support for a very important codec, please tell
   us on our development mailing list (cellar at ietf.org).

31.1.  Defining Matroska Codec Support

   Support for a codec is defined in Matroska with the following values.

31.1.1.  Codec ID

   Each codec supported for storage in Matroska MUST have a unique
   "Codec ID".  Each "Codec ID" MUST be prefixed with the string from
   the following table according to the associated type of the codec.
   All characters of a "Codec ID Prefix" MUST be capital letters (A-Z)




Lhomme, et al.           Expires January 4, 2018              [Page 145]

Internet-Draft                  Matroska                       July 2017


   except for the last character of a "Codec ID Prefix" which MUST be an
   underscore ("_").

   Codec Type | Codec ID Prefix Video | "V_" Audio | "A_" Subtitle |
   "S_" Button | "B_"

   Each "Codec ID" MUST include a "Major Codec ID" immediately following
   the "Codec ID Prefix".  A "Major Codec ID" MAY be followed by an
   OPTIONAL "Codec ID Suffix" to communicate a refinement of the "Major
   Codec ID".  If a "Codec ID Suffix" is used, then the "Codec ID" MUST
   include a forward slash ("/") as a separator between the "Major Codec
   ID" and the "Codec ID Suffix".  The "Major Codec ID" MUST be composed
   of only capital letters (A-Z) and numbers (0-9).  The "Codec ID
   Suffix" MUST be composed of only capital letters (A-Z), numbers
   (0-9), underscore ("_"), and forward slash ("/").

   The following table provides examples of valid "Codec IDs" and their
   components:

   Codec ID Prefix | Major Codec ID | Separator | Codec ID Suffix |
   Codec ID A_ | AAC | / | MPEG2/LC/SBR | A_AAC/MPEG2/LC/SBR V_ |
   MPEG4 | / | ISO/ASP | V_MPEG4/ISO/ASP V_ | MPEG1 | | | V_MPEG1

31.1.2.  Codec Name

   Each encoding supported for storage in Matroska MUST have a Codec
   Name.  The Codec Name provides a readable label for the encoding.

31.1.3.  Description

   An optional description for the encoding.  This value is only
   intended for human consumption.

31.1.4.  Initialisation

   Each encoding supported for storage in Matroska MUST have a defined
   Initialisation.  The Initialisation MUST describe the storage of data
   necessary to initialise the decoder, which MUST be stored within the
   "CodecPrivate Element".  When the Initialisation is updated within a
   track then that updated Initialisation data MUST be written into the
   "CodecState Element" of the first "Cluster" to require it.  If the
   encoding does not require any form of Initialisation then "none" MUST
   be used to define the Initialisation and the "CodecPrivate Element"
   SHOULD NOT be written and MUST be ignored.  Data that is defined
   Initialisation to be stored in the "CodecPrivate Element" is known as
   "Private Data".





Lhomme, et al.           Expires January 4, 2018              [Page 146]

Internet-Draft                  Matroska                       July 2017


31.1.5.  Citation

   Documentation of the associated normative and informative references
   for the codec is RECOMMENDED.

31.1.6.  Deprecation Date

   A timestamp, expressed in [RFC3339] that notes when support for the
   "Codec Mapping" within Matroska was deprecated.  If a "Codec Mapping"
   is defined with a "Deprecation Date", then it is RECOMMENDED that
   Matroska writers SHOULD NOT use the "Codec Mapping" after the
   "Deprecation Date".

31.1.7.  Superseded By

   A "Codec Mapping" MAY only be defined with a "Superseded By" value,
   if it has an expressed "Deprecation Date".  If used, the "Superseded
   By" value MUST store the "Codec ID" of another "Codec Mapping" that
   has superseded the "Codec Mapping".

31.2.  Video Codec Mappings

31.2.1.  V_MS/VFW/FOURCC

   Codec ID: "V_MS/VFW/FOURCC"

   Codec Name: Microsoft (TM) Video Codec Manager (VCM)

   Description: The private data contains the VCM structure
   BITMAPINFOHEADER including the extra private bytes, as defined by
   Microsoft [44].  The data are stored in little endian format (like on
   IA32 machines).  Where is the Huffman table stored in HuffYUV, not
   AVISTREAMINFO ??? And the FourCC, not in AVISTREAMINFO.fccHandler ???

   Initialisation: "Private Data" contains the VCM structure
   BITMAPINFOHEADER including the extra private bytes, as defined by
   Microsoft in <https://msdn.microsoft.com/en-
   us/library/windows/desktop/dd183376(v=vs.85).aspx>.

   Citation: <https://msdn.microsoft.com/en-us/library/windows/desktop/
   dd183376(v=vs.85).aspx>

31.2.2.  V_UNCOMPRESSED

   Codec ID: V_UNCOMPRESSED

   Codec Name: Video, raw uncompressed video frames




Lhomme, et al.           Expires January 4, 2018              [Page 147]

Internet-Draft                  Matroska                       July 2017


   Description: All details about the used colour specs and bit depth
   are to be put/read from the KaxCodecColourSpace elements.

   Initialisation: none

31.2.3.  V_MPEG4/ISO/SP

   Codec ID: V_MPEG4/ISO/SP

   Codec Name: MPEG4 ISO simple profile (DivX4)

   Description: Stream was created via improved codec API (UCI) or even
   transmuxed from AVI (no b-frames in Simple Profile), frame order is
   coding order.

   Initialisation: none

31.2.4.  V_MPEG4/ISO/ASP

   Codec ID: V_MPEG4/ISO/ASP

   Codec Name: MPEG4 ISO advanced simple profile (DivX5, XviD, FFMPEG)

   Description: Stream was created via improved codec API (UCI) or
   transmuxed from MP4, not simply transmuxed from AVI.  Note there are
   differences how b-frames are handled in these native streams, when
   being compared to a VfW created stream, as here there are "no" dummy
   frames inserted, the frame order is exactly the same as the coding
   order, same as in MP4 streams.

   Initialisation: none

31.2.5.  V_MPEG4/ISO/AP

   Codec ID: V_MPEG4/ISO/AP

   Codec Name: MPEG4 ISO advanced profile

   Description: Stream was created via improved codec API (UCI) or
   transmuxed from MP4, not simply transmuxed from AVI.  Note there are
   differences how b-frames are handled in these native streams, when
   being compared to a VfW created stream, as here there are "no" dummy
   frames inserted, the frame order is exactly the same as the coding
   order, same as in MP4 streams.

   Initialisation: none





Lhomme, et al.           Expires January 4, 2018              [Page 148]

Internet-Draft                  Matroska                       July 2017


31.2.6.  V_MPEG4/MS/V3

   Codec ID: V_MPEG4/MS/V3

   Codec Name: Microsoft (TM) MPEG4 V3

   Description: Microsoft (TM) MPEG4 V3 and derivates, means DivX3,
   Angelpotion, SMR, etc.; stream was created using VfW codec or
   transmuxed from AVI; note that V1/V2 are covered in VfW compatibility
   mode.

   Initialisation: none

31.2.7.  V_MPEG1

   Codec ID: V_MPEG1

   Codec Name: MPEG 1

   Description: The Matroska video stream will contain a demuxed
   Elementary Stream (ES), where block boundaries are still to be
   defined.  Its RECOMMENDED to use MPEG2MKV.exe for creating those
   files, and to compare the results with self-made implementations

   Initialisation: none

31.2.8.  V_MPEG2

   Codec ID: V_MPEG2

   Codec Name: MPEG 2

   Description: The Matroska video stream will contain a demuxed
   Elementary Stream (ES), where block boundaries are still to be
   defined.  Its RECOMMENDED to use MPEG2MKV.exe for creating those
   files, and to compare the results with self-made implementations

   Initialisation: none

31.2.9.  V_REAL/RV10

   Codec ID: V_REAL/RV10

   Codec Name: RealVideo 1.0 aka RealVideo 5

   Description: Individual slices from the Real container are combined
   into a single frame.




Lhomme, et al.           Expires January 4, 2018              [Page 149]

Internet-Draft                  Matroska                       July 2017


   Initialisation: The "Private Data" contains a "real_video_props_t"
   structure in Big Endian byte order as found in librmff [45].

31.2.10.  V_REAL/RV20

   Codec ID: V_REAL/RV20

   Codec Name: RealVideo G2 and RealVideo G2+SVT

   Description: Individual slices from the Real container are combined
   into a single frame.

   Initialisation: The "Private Data" contains a "real_video_props_t"
   structure in Big Endian byte order as found in librmff [46].

31.2.11.  V_REAL/RV30

   Codec ID: V_REAL/RV30

   Codec Name: RealVideo 8

   Description: Individual slices from the Real container are combined
   into a single frame.

   Initialisation: The "Private Data" contains a "real_video_props_t"
   structure in Big Endian byte order as found in librmff [47].

31.2.12.  V_REAL/RV40

   Codec ID: V_REAL/RV40

   Codec Name: rv40 : RealVideo 9

   Description: Individual slices from the Real container are combined
   into a single frame.

   Initialisation: The "Private Data" contains a "real_video_props_t"
   structure in Big Endian byte order as found in librmff [48].

31.2.13.  V_QUICKTIME

   Codec ID: V_QUICKTIME

   Codec Name: Video taken from QuickTime(TM) files

   Description: Several codecs as stored in QuickTime, e.g.  Sorenson or
   Cinepak.




Lhomme, et al.           Expires January 4, 2018              [Page 150]

Internet-Draft                  Matroska                       July 2017


   Initialisation: The "Private Data" contains all additional data that
   is stored in the 'stsd' (sample description) atom in the QuickTime
   file *after* the mandatory video descriptor structure (starting with
   the size and FourCC fields).  For an explanation of the QuickTime
   file format read QuickTime File Format Specification [49].

31.2.14.  V_THEORA

   Codec ID: V_THEORA

   Codec Name: Theora

   Initialisation: The "Private Data" contains the first three Theora
   packets in order.  The lengths of the packets precedes them.  The
   actual layout is:

   o  Byte 1: number of distinct packets '"#p"' minus one inside the
      CodecPrivate block.  This MUST be '2' for current (as of
      2016-07-08) Theora headers.

   o  Bytes 2..n: lengths of the first '"#p"' packets, coded in Xiph-
      style lacing [50].  The length of the last packet is the length of
      the CodecPrivate block minus the lengths coded in these bytes
      minus one.

   o  Bytes n+1..: The Theora identification header, followed by the
      commend header followed by the codec setup header.  Those are
      described in the Theora specs [51].

31.2.15.  V_PRORES

   Codec ID: V_PRORES

   Codec Name: Apple ProRes

   Initialisation: The "Private Data" contains the fourcc as found in
   MP4 movies:

   o  ap4x: ProRes 4444 XQ

   o  ap4h: ProRes 4444

   o  apch: ProRes 422 High Quality

   o  apcn: ProRes 422 Standard Definition

   o  apcs: ProRes 422 LT




Lhomme, et al.           Expires January 4, 2018              [Page 151]

Internet-Draft                  Matroska                       July 2017


   o  apco: ProRes 422 Proxy

   this page for more technical details on ProRes [52]

31.2.16.  V_VP8

   Codec ID: V_VP8

   Codec Name: VP8 Codec format

   Description: VP8 is an open and royalty free video compression format
   developed by Google and created by On2 Technologies as a successor to
   VP7.  [RFC6386]

   Initialisation: none

31.2.17.  V_VP9

   Codec ID: V_VP9

   Codec Name: VP9 Codec format

   Description: VP9 is an open and royalty free video compression format
   developed by Google as a successor to VP8.  Draft VP9 Bitstream and
   Decoding Process Specification [53]

   Initialisation: none

31.2.18.  V_FFV1

   Codec ID: V_FFV1

   Codec Name: FF Video Codec 1

   Description: FFV1 is a lossless intra-frame video encoding format
   designed to efficiently compress video data in a variety of pixel
   formats.  Compared to uncompressed video, FFV1 offers storage
   compression, frame fixity, and self-description, which makes FFV1
   useful as a preservation or intermediate video format.  Draft FFV1
   Specification [54]

   Initialisation: For FFV1 versions 0 or 1, "Private Data" SHOULD NOT
   be written.  For FFV1 version 3 or greater, the "Private Data" MUST
   contain the FFV1 Configuration Record structure, as defined in
   <https://tools.ietf.org/html/draft-niedermayer-cellar-ffv1-
   01#section-4.1>, and no other data.





Lhomme, et al.           Expires January 4, 2018              [Page 152]

Internet-Draft                  Matroska                       July 2017


31.3.  Audio Codec Mappings

31.3.1.  A_MPEG/L3

   Codec ID: A_MPEG/L3

   Codec Name: MPEG Audio 1, 2, 2.5 Layer III

   Description: The data contain everything needed for playback in the
   MPEG Audio header of each frame.  Corresponding ACM wFormatTag :
   0x0055

   Initialisation: none

31.3.2.  A_MPEG/L2

   Codec ID: A_MPEG/L2

   Codec Name: MPEG Audio 1, 2 Layer II

   Description: The data contain everything needed for playback in the
   MPEG Audio header of each frame.  Corresponding ACM wFormatTag :
   0x0050

   Initialisation: none

31.3.3.  A_MPEG/L1

   Codec ID: A_MPEG/L1

   Codec Name: MPEG Audio 1, 2 Layer I

   Description: The data contain everything needed for playback in the
   MPEG Audio header of each frame.  Corresponding ACM wFormatTag :
   0x0050

   Initialisation: none

31.3.4.  A_PCM/INT/BIG

   Codec ID: A_PCM/INT/BIG

   Codec Name: PCM Integer Big Endian

   Description: The bitdepth has to be read and set from
   KaxAudioBitDepth element.  Corresponding ACM wFormatTag : ???

   Initialisation: none



Lhomme, et al.           Expires January 4, 2018              [Page 153]

Internet-Draft                  Matroska                       July 2017


31.3.5.  A_PCM/INT/LIT

   Codec ID: A_PCM/INT/LIT

   Codec Name: PCM Integer Little Endian

   Description: The bitdepth has to be read and set from
   KaxAudioBitDepth element.  Corresponding ACM wFormatTag : 0x0001

   Initialisation: none

31.3.6.  A_PCM/FLOAT/IEEE

   Codec ID: A_PCM/FLOAT/IEEE

   Codec Name: Floating Point, IEEE compatible

   Description: The bitdepth has to be read and set from
   KaxAudioBitDepth element (32 bit in most cases).  The float are
   stored in little endian order (most common float format).
   Corresponding ACM wFormatTag : 0x0003

   Initialisation: none

31.3.7.  A_MPC

   Codec ID: A_MPC

   Codec Name: MPC (musepack) SV8

   Description: The main developer for musepack has requested that we
   wait until the SV8 framing has been fully defined for musepack before
   defining how to store it in Matroska.

31.3.8.  A_AC3

   Codec ID: A_AC3

   Codec Name: (Dolby[TM]) AC3

   Description: BSID <= 8 !! The private data is void ??? Corresponding
   ACM wFormatTag : 0x2000 ; channel number have to be read from the
   corresponding audio element








Lhomme, et al.           Expires January 4, 2018              [Page 154]

Internet-Draft                  Matroska                       July 2017


31.3.9.  A_AC3/BSID9

   Codec ID: A_AC3/BSID9

   Codec Name: (Dolby[TM]) AC3

   Description: The ac3 frame header has, similar to the mpeg-audio
   header a version field.  Normal ac3 is defined as bitstream id 8 (5
   Bits, numbers are 0-15).  Everything below 8 is still compatible with
   all decoders that handle 8 correctly.  Everything higher are
   additions that break decoder compatibility.  For the samplerates
   24kHz (00); 22,05kHz (01) and 16kHz (10) the BSID is 9 For the
   samplerates 12kHz (00); 11,025kHz (01) and 8kHz (10) the BSID is 10

   Initialisation: none

31.3.10.  A_AC3/BSID10

   Codec ID: A_AC3/BSID10

   Codec Name: (Dolby[TM]) AC3

   Description: The ac3 frame header has, similar to the mpeg-audio
   header a version field.  Normal ac3 is defined as bitstream id 8 (5
   Bits, numbers are 0-15).  Everything below 8 is still compatible with
   all decoders that handle 8 correctly.  Everything higher are
   additions that break decoder compatibility.  For the samplerates
   24kHz (00); 22,05kHz (01) and 16kHz (10) the BSID is 9 For the
   samplerates 12kHz (00); 11,025kHz (01) and 8kHz (10) the BSID is 10

   Initialisation: none

31.3.11.  A_ALAC

   Codec ID: A_ALAC

   Codec Name: ALAC (Apple Lossless Audio Codec)

   Initialisation: The "Private Data" contains ALAC's magic cookie (both
   the codec specific configuration as well as the optional channel
   layout information).  Its format is described in ALAC's official
   source code [55].

31.3.12.  A_DTS

   Codec ID: A_DTS

   Codec Name: Digital Theatre System



Lhomme, et al.           Expires January 4, 2018              [Page 155]

Internet-Draft                  Matroska                       July 2017


   Description: Supports DTS, DTS-ES, DTS-96/26, DTS-HD High Resolution
   Audio and DTS-HD Master Audio.  The private data is void.
   Corresponding ACM wFormatTag : 0x2001

   Initialisation: none

31.3.13.  A_DTS/EXPRESS

   Codec ID: A_DTS/EXPRESS

   Codec Name: Digital Theatre System Express

   Description: DTS Express (a.k.a.  LBR) audio streams.  The private
   data is void.  Corresponding ACM wFormatTag : 0x2001

   Initialisation: none

31.3.14.  A_DTS/LOSSLESS

   Codec ID: A_DTS/LOSSLESS

   Codec Name: Digital Theatre System Lossless

   Description: DTS Lossless audio that does not have a core substream.
   The private data is void.  Corresponding ACM wFormatTag : 0x2001

   Initialisation: none

31.3.15.  A_VORBIS

   Codec ID: A_VORBIS

   Codec Name: Vorbis

   Initialisation: The "Private Data" contains the first three Vorbis
   packet in order.  The lengths of the packets precedes them.  The
   actual layout is: - Byte 1: number of distinct packets '"#p"' minus
   one inside the CodecPrivate block.  This MUST be '2' for current (as
   of 2016-07-08) Vorbis headers.  - Bytes 2..n: lengths of the first
   '"#p"' packets, coded in Xiph-style lacing [56].  The length of the
   last packet is the length of the CodecPrivate block minus the lengths
   coded in these bytes minus one.  - Bytes n+1..: The Vorbis
   identification header [57], followed by the Vorbis comment header
   [58] followed by the codec setup header [59].







Lhomme, et al.           Expires January 4, 2018              [Page 156]

Internet-Draft                  Matroska                       July 2017


31.3.16.  A_FLAC

   Codec ID: A_FLAC

   Codec Name: FLAC (Free Lossless Audio Codec) [60]

   Initialisation: The "Private Data" contains all the header/metadata
   packets before the first data packet.  These include the first header
   packet containing only the word "fLaC" as well as all metadata
   packets.

31.3.17.  A_REAL/14_4

   Codec ID: A_REAL/14_4

   Codec Name: Real Audio 1

   Initialisation: The "Private Data" contains either the
   "real_audio_v4_props_t" or the "real_audio_v5_props_t" structure
   (differentiated by their "version" field; Big Endian byte order) as
   found in librmff [61].

31.3.18.  A_REAL/28_8

   Codec ID: A_REAL/28_8

   Codec Name: Real Audio 2

   Initialisation: The "Private Data" contains either the
   "real_audio_v4_props_t" or the "real_audio_v5_props_t" structure
   (differentiated by their "version" field; Big Endian byte order) as
   found in librmff [62].

31.3.19.  A_REAL/COOK

   Codec ID: A_REAL/COOK

   Codec Name: Real Audio Cook Codec (codename: Gecko)

   Initialisation: The "Private Data" contains either the
   "real_audio_v4_props_t" or the "real_audio_v5_props_t" structure
   (differentiated by their "version" field; Big Endian byte order) as
   found in librmff [63].








Lhomme, et al.           Expires January 4, 2018              [Page 157]

Internet-Draft                  Matroska                       July 2017


31.3.20.  A_REAL/SIPR

   Codec ID: A_REAL/SIPR

   Codec Name: Sipro Voice Codec

   Initialisation: The "Private Data" contains either the
   "real_audio_v4_props_t" or the "real_audio_v5_props_t" structure
   (differentiated by their "version" field; Big Endian byte order) as
   found in librmff [64].

31.3.21.  A_REAL/RALF

   Codec ID: A_REAL/RALF

   Codec Name: Real Audio Lossless Format

   Initialisation: The "Private Data" contains either the
   "real_audio_v4_props_t" or the "real_audio_v5_props_t" structure
   (differentiated by their "version" field; Big Endian byte order) as
   found in librmff [65].

31.3.22.  A_REAL/ATRC

   Codec ID: A_REAL/ATRC

   Codec Name: Sony Atrac3 Codec

   Initialisation: The "Private Data" contains either the
   "real_audio_v4_props_t" or the "real_audio_v5_props_t" structure
   (differentiated by their "version" field; Big Endian byte order) as
   found in librmff [66].

31.3.23.  A_MS/ACM

   Codec ID: A_MS/ACM

   Codec Name: Microsoft(TM) Audio Codec Manager (ACM)

   Description: The data are stored in little endian format (like on
   IA32 machines).

   Initialisation: The "Private Data" contains the ACM structure
   WAVEFORMATEX including the extra private bytes, as defined by
   Microsoft [67].






Lhomme, et al.           Expires January 4, 2018              [Page 158]

Internet-Draft                  Matroska                       July 2017


31.3.24.  A_AAC/MPEG2/MAIN

   Codec ID: A_AAC/MPEG2/MAIN

   Codec Name: MPEG2 Main Profile

   Description: Channel number and sample rate have to be read from the
   corresponding audio element.  Audio stream is stripped from ADTS
   headers and normal Matroska frame based muxing scheme is applied.
   AAC audio always uses wFormatTag 0xFF.

   Initialisation: none

31.3.25.  A_AAC/MPEG2/LC

   Codec ID: A_AAC/MPEG2/LC

   Codec Name: Low Complexity

   Description: Channel number and sample rate have to be read from the
   corresponding audio element.  Audio stream is stripped from ADTS
   headers and normal Matroska frame based muxing scheme is applied.
   AAC audio always uses wFormatTag 0xFF.

   Initialisation: none

31.3.26.  A_AAC/MPEG2/LC/SBR

   Codec ID: A_AAC/MPEG2/LC/SBR

   Codec Name: Low Complexity with Spectral Band Replication

   Description: Channel number and sample rate have to be read from the
   corresponding audio element.  Audio stream is stripped from ADTS
   headers and normal Matroska frame based muxing scheme is applied.
   AAC audio always uses wFormatTag 0xFF.

   Initialisation: none

31.3.27.  A_AAC/MPEG2/SSR

   Codec ID: A_AAC/MPEG2/SSR

   Codec Name: Scalable Sampling Rate

   Description: Channel number and sample rate have to be read from the
   corresponding audio element.  Audio stream is stripped from ADTS




Lhomme, et al.           Expires January 4, 2018              [Page 159]

Internet-Draft                  Matroska                       July 2017


   headers and normal Matroska frame based muxing scheme is applied.
   AAC audio always uses wFormatTag 0xFF.

   Initialisation: none

31.3.28.  A_AAC/MPEG4/MAIN

   Codec ID: A_AAC/MPEG4/MAIN

   Codec Name: MPEG4 Main Profile

   Description: Channel number and sample rate have to be read from the
   corresponding audio element.  Audio stream is stripped from ADTS
   headers and normal Matroska frame based muxing scheme is applied.
   AAC audio always uses wFormatTag 0xFF.

   Initialisation: none

31.3.29.  A_AAC/MPEG4/LC

   Codec ID: A_AAC/MPEG4/LC

   Codec Name: Low Complexity

   Description: Channel number and sample rate have to be read from the
   corresponding audio element.  Audio stream is stripped from ADTS
   headers and normal Matroska frame based muxing scheme is applied.
   AAC audio always uses wFormatTag 0xFF.

   Initialisation: none

31.3.30.  A_AAC/MPEG4/LC/SBR

   Codec ID: A_AAC/MPEG4/LC/SBR

   Codec Name: Low Complexity with Spectral Band Replication

   Description: Channel number and sample rate have to be read from the
   corresponding audio element.  Audio stream is stripped from ADTS
   headers and normal Matroska frame based muxing scheme is applied.
   AAC audio always uses wFormatTag 0xFF.

   Initialisation: none








Lhomme, et al.           Expires January 4, 2018              [Page 160]

Internet-Draft                  Matroska                       July 2017


31.3.31.  A_AAC/MPEG4/SSR

   Codec ID: A_AAC/MPEG4/SSR

   Codec Name: Scalable Sampling Rate

   Description: Channel number and sample rate have to be read from the
   corresponding audio element.  Audio stream is stripped from ADTS
   headers and normal Matroska frame based muxing scheme is applied.
   AAC audio always uses wFormatTag 0xFF.

   Initialisation: none

31.3.32.  A_AAC/MPEG4/LTP

   Codec ID: A_AAC/MPEG4/LTP

   Codec Name: Long Term Prediction

   Description: Channel number and sample rate have to be read from the
   corresponding audio element.  Audio stream is stripped from ADTS
   headers and normal Matroska frame based muxing scheme is applied.
   AAC audio always uses wFormatTag 0xFF.

   Initialisation: none

31.3.33.  A_QUICKTIME

   Codec ID: A_QUICKTIME

   Codec Name: Audio taken from QuickTime(TM) files

   Description: Several codecs as stored in QuickTime, e.g.  QDesign
   Music v1 or v2.

   Initialisation: The "Private Data" contains all additional data that
   is stored in the 'stsd' (sample description) atom in the QuickTime
   file *after* the mandatory sound descriptor structure (starting with
   the size and FourCC fields).  For an explanation of the QuickTime
   file format read QuickTime File Format Specification [68].

31.3.34.  A_QUICKTIME/QDMC

   Codec ID: A_QUICKTIME/QDMC

   Codec Name: QDesign Music

   Description:



Lhomme, et al.           Expires January 4, 2018              [Page 161]

Internet-Draft                  Matroska                       July 2017


   Initialisation: The "Private Data" contains all additional data that
   is stored in the 'stsd' (sample description) atom in the QuickTime
   file *after* the mandatory sound descriptor structure (starting with
   the size and FourCC fields).  For an explanation of the QuickTime
   file format read QuickTime File Format Specification [69].

   Superseded By: A_QUICKTIME

31.3.35.  A_QUICKTIME/QDM2

   Codec ID: A_QUICKTIME/QDM2

   Codec Name: QDesign Music v2

   Description:

   Initialisation: The "Private Data" contains all additional data that
   is stored in the 'stsd' (sample description) atom in the QuickTime
   file *after* the mandatory sound descriptor structure (starting with
   the size and FourCC fields).  For an explanation of the QuickTime
   file format read QuickTime File Format Specification [70].

   Superseded By: A_QUICKTIME

31.3.36.  A_TTA1

   Codec ID: A_TTA1

   Codec Name: The True Audio [71] lossless audio compressor

   Description: TTA format description [72] Each frame is kept intact,
   including the CRC32.  The header and seektable are dropped.
   SamplingFrequency, Channels and BitDepth are used in the TrackEntry.
   wFormatTag = 0x77A1

   Initialisation: none

31.3.37.  A_WAVPACK4

   Codec ID: A_WAVPACK4

   Codec Name: WavPack [73] lossless audio compressor

   Description: The Wavpack packets consist of a stripped header
   followed by the frame data.  For multi-track (> 2 tracks) a frame
   consists of many packets.  For hybrid files (lossy part + correction
   part), the correction part is stored in an additional block (level
   1).  For more details, check the WavPack muxing description [74].



Lhomme, et al.           Expires January 4, 2018              [Page 162]

Internet-Draft                  Matroska                       July 2017


   Initialisation: none

31.4.  Subtitle Codec Mappings

31.4.1.  S_TEXT/UTF8

   Codec ID: S_TEXT/UTF8

   Codec Name: UTF-8 Plain Text

   Description: Basic text subtitles.  For more information, please look
   at the Subtitle specifications [75].

31.4.2.  S_TEXT/SSA

   Codec ID: S_TEXT/SSA

   Codec Name: Subtitles Format

   Description: The [Script Info] and [V4 Styles] sections are stored in
   the codecprivate.  Each event is stored in its own Block.  For more
   information, please read the specs for SSA/ASS [76].

31.4.3.  S_TEXT/ASS

   Codec ID: S_TEXT/ASS

   Codec Name: Advanced Subtitles Format

   Description: The [Script Info] and [V4 Styles] sections are stored in
   the codecprivate.  Each event is stored in its own Block.  For more
   information, please read the specs for SSA/ASS [77].

31.4.4.  S_TEXT/USF

   Codec ID: S_TEXT/USF

   Codec Name: Universal Subtitle Format

   Description: This is mostly defined, but not typed out yet.  It will
   first be available on the USF specs page [78].

31.4.5.  S_TEXT/WEBVTT

   Codec ID: S_TEXT/WEBVTT

   Codec Name: Web Video Text Tracks Format (WebVTT)




Lhomme, et al.           Expires January 4, 2018              [Page 163]

Internet-Draft                  Matroska                       July 2017


   Description: Advanced text subtitles.  For more information about the
   storage please look at the WebVTT in Matroska specifications [79].

31.4.6.  S_IMAGE/BMP

   Codec ID: S_IMAGE/BMP

   Codec Name: Bitmap

   Description: Basic image based subtitle format; The subtitles are
   stored as images, like in the DVD.  The timestamp in the block header
   of Matroska indicates the start display time, the duration is set
   with the Duration element.  The full data for the subtitle bitmap is
   stored in the Block's data section.

31.4.7.  S_DVBSUB

   Codec ID: S_DVBSUB

   Codec Name: Digital Video Broadcasting (DVB) subtitles

   Description: This is the graphical subtitle format used in the
   Digital Video Broadcasting standard.  For more information about the
   storage please look at the Digital Video Broadcasting (DVB) subtitles
   in Matroska specifications [80].

31.4.8.  S_VOBSUB

   Codec ID: S_VOBSUB

   Codec Name: VobSub subtitles

   Description: The same subtitle format used on DVDs.  Supported is
   only format version 7 and newer.  VobSubs consist of two files, the
   .idx containing information, and the .sub, containing the actual
   data.  The .idx file is stripped of all empty lines, of all comments
   and of lines beginning with "alt:" or "langidx:".  The line beginning
   with "id:" SHOULD be transformed into the appropriate Matroska track
   language element and is discarded.  All remaining lines but the ones
   containing timestamps and file positions are put into the
   "CodecPrivate" element.

   For each line containing the timestamp and file position data is read
   from the appropriate position in the .sub file.  This data consists
   of a MPEG program stream which in turn contains SPU packets.  The
   MPEG program stream data is discarded, and each SPU packet is put
   into one Matroska frame.




Lhomme, et al.           Expires January 4, 2018              [Page 164]

Internet-Draft                  Matroska                       July 2017


31.4.9.  S_HDMV/PGS

   Codec ID: S_HDMV/PGS

   Codec Name: HDMV presentation graphics subtitles (PGS)

   Description: This is the graphical subtitle format used on Blu-rays.
   For more information about the storage please look at the HDMV
   presentation graphics subtitles in Matroska specifications [81].

31.4.10.  S_HDMV/TEXTST

   Codec ID: S_HDMV/TEXTST

   Codec Name: HDMV text subtitles

   Description: This is the textual subtitle format used on Blu-rays.
   For more information about the storage please look at the HDMV text
   subtitles in Matroska specifications [82].

31.4.11.  S_KATE

   Codec ID: S_KATE

   Codec Name: Karaoke And Text Encapsulation

   Description: A subtitle format developed for ogg.  The mapping for
   Matroska is described on the Xiph wiki [83].  As for Theora and
   Vorbis, Kate headers are stored in the private data as xiph-laced
   packets.

31.5.  Button Codec Mappings

31.5.1.  B_VOBBTN

   Codec ID: B_VOBBTN

   Codec Name: VobBtn Buttons

   Description: Based on MPEG/VOB PCI packets [84].  The file contains a
   header consisting of the string "butonDVD" followed by the width and
   height in pixels (16 bits integer each) and 4 reserved bytes.  The
   rest is full PCI packets [85].  #Chapters








Lhomme, et al.           Expires January 4, 2018              [Page 165]

Internet-Draft                  Matroska                       July 2017


31.6.  Edition and Chapter Flags

31.6.1.  Chapter Flags

   Two "Chapter Flags" are defined to describe the bevahior of the
   "ChapterAtom Element": "ChapterFlagHidden" and "ChapterFlagEnabled".

   If a "ChapterAtom Element" is a "Child Element" of another
   "ChapterAtom Element" which has a "Chapter Flag" set to "true", then
   the "Child ChapterAtom Element" MUST be interpretted as having its
   same "Chapter Flag" set to "true".  If a "ChapterAtom Element" is a
   "Child Element" of another "ChapterAtom Element" which has a "Chapter
   Flag" set to "false" or the "ChapterAtom Element" does not have a
   "ChapterAtom Element" as its "Parent Element", then it MUST be
   interpretted according to its own "Chapter Flag".

   As an example, consider a "Parent ChapterAtom Element" that has its
   "ChapterFlagHidden" set to "true" and also contains two child
   "ChapterAtoms", the first with "ChapterFlagHidden" set to "true" and
   the second with "ChapterFlagHidden" either set to "false" or not
   present at all (in which case the default value of the Element
   applies, which is "false").  Since the parent "ChapterAtom" has its
   "ChapterFlagHidden" set to "true" then all of its children
   "ChapterAtoms" MUST also be interpretted as if their
   "ChapterFlagHidden" is also set to "true".  However, if a "Control
   Track" toggles the parent's "ChapterFlagHidden" flag to "false", then
   only the parent "ChapterAtom" and its second child "ChapterAtom" MUST
   be interpretted as if "ChapterFlagHidden" is set to "false".  The
   first child "ChapterAtom" which has the "ChapterFlagHidden" flag set
   to "true" retains its value until its value is toggled to "false" by
   a "Control Track".

31.6.2.  Edition Flags

   Three "Edition Flags" are defined to describe the bevahior of the
   "EditionEntry Element": "EditionFlagHidden", "EditionFlagDefault" and
   "EditionFlagOrdered".

   The "EditionFlagHidden" Flag behaves similarly to the
   "ChapterFlagHidden" Flag: if "EditionFlagHidden" is set to "true"
   then its "Child ChapterAtoms Elements" MUST also be interpretted as
   if their "ChapterFlagHidden" is also set to "true", regardless of
   their own "ChapterFlagHidden" flags.  If the "EditionFlagHidden" is
   toggled by a "Control Track" to "false" then the "ChapterFlagHidden"
   Flags of the "Child ChapterAtoms Elements" SHALL determine if the
   "ChapterAtom" is hidden or not.





Lhomme, et al.           Expires January 4, 2018              [Page 166]

Internet-Draft                  Matroska                       July 2017


31.7.  Menu features

   The menu features are handled like a _chapter codec_. That means each
   codec has a type, some private data and some data in the chapters.

   The type of the menu system is defined by the ChapProcessCodecID
   parameter.  For now only 2 values are supported : 0 matroska script,
   1 menu borrowed from the DVD.  The private data depend on the type of
   menu system (stored in ChapProcessPrivate), idem for the data in the
   chapters (stored in ChapProcessData).

31.7.1.  Matroska Script (0)

   This is the case when ChapProcessCodecID [86] = 0.  This is a script
   language build for Matroska purposes.  The inspiration comes from
   ActionScript, javascript and other similar scripting languages.  The
   commands are stored as text commands, in UTF-8.  The syntax is C
   like, with commands spanned on many lines, each terminating with a
   ";".  You can also include comments at the end of lines with "//" or
   comment many lines using "/* */".  The scripts are stored in
   ChapProcessData.  For the moment ChapProcessPrivate is not used.

   The one and only command existing for the moment is "GotoAndPlay(
   ChapterUID );".  As the same suggests, it means that when this
   command is encountered, the playback SHOULD jump to the Chapter
   specified by the UID and play it.

31.7.2.  DVD menu (1)

   This is the case when ChapProcessCodecID [87] = 1.  Each level of a
   chapter corresponds to a logical level in the DVD system that is
   stored in the first octet of the ChapProcessPrivate.  This DVD
   hierarchy is as follows:

   ChapProcessPrivate | DVD Name | Hierarchy | Commands Possible |
   Comment 0x30 | SS | DVD domain | - | First Play, Video Manager, Video
   Title 0x2A | LU | Language Unit | - | Contains only PGCs 0x28 | TT |
   Title | - | Contains only PGCs 0x20 | PGC | Program Group Chain
   (PGC) | * | 0x18 | PG | Program 1 / Program 2 / Program 3 | - |
   0x10 | PTT | Part Of Title 1 / Part Of Title 2 | - | Equivalent to
   the chapters on the sleeve.  0x08 | CN | Cell 1 / Cell 2 / Cell 3 /
   Cell 4 / Cell 5 / Cell 6 | - |

   You can also recover wether a Segment is a Video Manager (VMG), Video
   Title Set (VTS) or Video Title Set Menu (VTSM) from the
   ChapterTranslateID [88] element found in the Segment Info.  This
   field uses 2 octets as follows:




Lhomme, et al.           Expires January 4, 2018              [Page 167]

Internet-Draft                  Matroska                       July 2017


   1.  Domain Type: 0 for VMG, the domain number for VTS and VTSM

   2.  Domain Value: 0 for VMG and VTSM, 1 for the VTS source.

   For instance, the menu part from VTS_01_0.VOB would be coded [1,0]
   and the content part from VTS_02_3.VOB would be [2,1].  The VMG is
   always [0,0]

   The following octets of ChapProcessPrivate are as follows:

   Octet 1 | DVD Name | Following Octets 0x30 | SS | Domain name code
   (1: 0x00= First play, 0xC0= VMG, 0x40= VTSM, 0x80= VTS) + VTS(M)
   number (2) 0x2A | LU | Language code (2) + Language extension (1)
   0x28 | TT | global Title number (2) + corresponding TTN of the VTS
   (1) 0x20 | PGC | PGC number (2) + Playback Type (1) + Disabled User
   Operations (4) 0x18 | PG | Program number (2) 0x10 | PTT | PTT-
   chapter number (1) 0x08 | CN | Cell number [VOB ID(2)][Cell
   ID(1)][Angle Num(1)]

   If the level specified in ChapProcessPrivate is a PGC (0x20), there
   is an octet called the Playback Type, specifying the kind of PGC
   defined:

   o  0x00: entry only/basic PGC

   o  0x82: Title+Entry Menu (only found in the Video Manager domain)

   o  0x83: Root Menu (only found in the VTSM domain)

   o  0x84: Subpicture Menu (only found in the VTSM domain)

   o  0x85: Audio Menu (only found in the VTSM domain)

   o  0x86: Angle Menu (only found in the VTSM domain)

   o  0x87: Chapter Menu (only found in the VTSM domain)

   The next 4 following octets correspond to the User Operation flags
   [89] in the standard PGC.  When a bit is set, the command SHOULD be
   disabled.

   ChapProcessData contains the pre/post/cell commands in binary format
   as there are stored on a DVD.  There is just an octet preceeding
   these data to specify the number of commands in the element.  As
   follows: [# of commands(1)][command 1 (8)][command 2 (8)][command 3
   (8)].





Lhomme, et al.           Expires January 4, 2018              [Page 168]

Internet-Draft                  Matroska                       July 2017


   More information on the DVD commands and format on DVD-replica [90],
   where we got most of the info about it.  You can also get information
   on DVD from the DVDinfo project [91].

31.8.  Example 1 : basic chaptering

   In this example a movie is split in different chapters.  It could
   also just be an audio file (album) on which each track corresponds to
   a chapter.

   o  00000ms - 05000ms : Intro

   o  05000ms - 25000ms : Before the crime

   o  25000ms - 27500ms : The crime

   o  27500ms - 38000ms : The killer arrested

   o  38000ms - 43000ms : Credits

   This would translate in the following matroska form :

          <Chapters>
            <EditionEntry>
              <EditionUID>16603393396715046047</EditionUID>
              <ChapterAtom>
                <ChapterUID>1193046</ChapterUID>
                <ChapterTimeStart>0</ChapterTimeStart>
                <ChapterTimeEnd>5000000000</ChapterTimeEnd>
                <ChapterDisplay>
                  <ChapString>Intro</ChapString>
                  <ChapLanguage>eng</ChapLanguage>
                </ChapterDisplay>
                <ChapterFlagHidden>0</ChapterFlagHidden>
                <ChapterFlagEnabled>1</ChapterFlagEnabled>
              </ChapterAtom>
              <ChapterAtom>
                <ChapterUID>2311527</ChapterUID>
                <ChapterTimeStart>5000000000</ChapterTimeStart>
                <ChapterTimeEnd>25000000000</ChapterTimeEnd>
                <ChapterDisplay>
                  <ChapString>Before the crime</ChapString>
                  <ChapLanguage>eng</ChapLanguage>
                </ChapterDisplay>
                <ChapterDisplay>
                  <ChapString>Avant le crime</ChapString>
                  <ChapLanguage>fra</ChapLanguage>
                </ChapterDisplay>



Lhomme, et al.           Expires January 4, 2018              [Page 169]

Internet-Draft                  Matroska                       July 2017


                <ChapterFlagHidden>0</ChapterFlagHidden>
                <ChapterFlagEnabled>1</ChapterFlagEnabled>
              </ChapterAtom>
              <ChapterAtom>
                <ChapterUID>3430008</ChapterUID>
                <ChapterTimeStart>25000000000</ChapterTimeStart>
                <ChapterTimeEnd>27500000000</ChapterTimeEnd>
                <ChapterDisplay>
                  <ChapString>The crime</ChapString>
                  <ChapLanguage>eng</ChapLanguage>
                </ChapterDisplay>
                <ChapterDisplay>
                  <ChapString>Le crime</ChapString>
                  <ChapLanguage>fra</ChapLanguage>
                </ChapterDisplay>
                <ChapterFlagHidden>0</ChapterFlagHidden>
                <ChapterFlagEnabled>1</ChapterFlagEnabled>
              </ChapterAtom>
              <ChapterAtom>
                <ChapterUID>4548489</ChapterUID>
                <ChapterTimeStart>27500000000</ChapterTimeStart>
                <ChapterTimeEnd>38000000000</ChapterTimeEnd>
                <ChapterDisplay>
                  <ChapString>After the crime</ChapString>
                  <ChapLanguage>eng</ChapLanguage>
                </ChapterDisplay>
                <ChapterDisplay>
                  <ChapString>Apres le crime</ChapString>
                  <ChapLanguage>fra</ChapLanguage>
                </ChapterDisplay>
                <ChapterFlagHidden>0</ChapterFlagHidden>
                <ChapterFlagEnabled>1</ChapterFlagEnabled>
              </ChapterAtom>
              <ChapterAtom>
                <ChapterUID>5666960</ChapterUID>
                <ChapterTimeStart>38000000000</ChapterTimeStart>
                <ChapterTimeEnd>43000000000</ChapterTimeEnd>
                <ChapterDisplay>
                  <ChapString>Credits</ChapString>
                  <ChapLanguage>eng</ChapLanguage>
                </ChapterDisplay>
                <ChapterDisplay>
                  <ChapString>Generique</ChapString>
                  <ChapLanguage>fra</ChapLanguage>
                </ChapterDisplay>
                <ChapterFlagHidden>0</ChapterFlagHidden>
                <ChapterFlagEnabled>1</ChapterFlagEnabled>
              </ChapterAtom>



Lhomme, et al.           Expires January 4, 2018              [Page 170]

Internet-Draft                  Matroska                       July 2017


              <EditionFlagDefault>0</EditionFlagDefault>
              <EditionFlagHidden>0</EditionFlagHidden>
            </EditionEntry>
          </Chapters>

31.9.  Example 2 : nested chapters

   In this example an (existing) album is split into different chapters,
   and one of them contain another splitting.

31.9.1.  The Micronauts "Bleep To Bleep"

   o  00:00 - 12:28 : Baby Wants To Bleep/Rock

      *  00:00 - 04:38 : Baby wants to bleep (pt.1)

      *  04:38 - 07:12 : Baby wants to rock

      *  07:12 - 10:33 : Baby wants to bleep (pt.2)

      *  10:33 - 12:28 : Baby wants to bleep (pt.3)

   o  12:30 - 19:38 : Bleeper_O+2

   o  19:40 - 22:20 : Baby wants to bleep (pt.4)

   o  22:22 - 25:18 : Bleep to bleep

   o  25:20 - 33:35 : Baby wants to bleep (k)

   o  33:37 - 44:28 : Bleeper

       <Chapters>
         <EditionEntry>
           <EditionUID>1281690858003401414</EditionUID>
           <ChapterAtom>
             <ChapterUID>1</ChapterUID>
             <ChapterTimeStart>0</ChapterTimeStart>
             <ChapterTimeEnd>748000000</ChapterTimeEnd>
             <ChapterDisplay>
               <ChapString>Baby wants to Bleep/Rock</ChapString>
               <ChapLanguage>eng</ChapLanguage>
             </ChapterDisplay>
             <ChapterAtom>
               <ChapterUID>2</ChapterUID>
               <ChapterTimeStart>0</ChapterTimeStart>
               <ChapterTimeEnd>278000000</ChapterTimeEnd>
               <ChapterDisplay>



Lhomme, et al.           Expires January 4, 2018              [Page 171]

Internet-Draft                  Matroska                       July 2017


                 <ChapString>Baby wants to bleep (pt.1)</ChapString>
                 <ChapLanguage>eng</ChapLanguage>
               </ChapterDisplay>
               <ChapterFlagHidden>0</ChapterFlagHidden>
               <ChapterFlagEnabled>1</ChapterFlagEnabled>
             </ChapterAtom>
             <ChapterAtom>
               <ChapterUID>3</ChapterUID>
               <ChapterTimeStart>278000000</ChapterTimeStart>
               <ChapterTimeEnd>432000000</ChapterTimeEnd>
               <ChapterDisplay>
                 <ChapString>Baby wants to rock</ChapString>
                 <ChapLanguage>eng</ChapLanguage>
               </ChapterDisplay>
               <ChapterFlagHidden>0</ChapterFlagHidden>
               <ChapterFlagEnabled>1</ChapterFlagEnabled>
             </ChapterAtom>
             <ChapterAtom>
               <ChapterUID>4</ChapterUID>
               <ChapterTimeStart>432000000</ChapterTimeStart>
               <ChapterTimeEnd>633000000</ChapterTimeEnd>
               <ChapterDisplay>
                 <ChapString>Baby wants to bleep (pt.2)</ChapString>
                 <ChapLanguage>eng</ChapLanguage>
               </ChapterDisplay>
               <ChapterFlagHidden>0</ChapterFlagHidden>
               <ChapterFlagEnabled>1</ChapterFlagEnabled>
             </ChapterAtom>
             <ChapterAtom>
               <ChapterUID>5</ChapterUID>
               <ChapterTimeStart>633000000</ChapterTimeStart>
               <ChapterTimeEnd>748000000</ChapterTimeEnd>
               <ChapterDisplay>
                 <ChapString>Baby wants to bleep (pt.3)</ChapString>
                 <ChapLanguage>eng</ChapLanguage>
               </ChapterDisplay>
               <ChapterFlagHidden>0</ChapterFlagHidden>
               <ChapterFlagEnabled>1</ChapterFlagEnabled>
             </ChapterAtom>
             <ChapterFlagHidden>0</ChapterFlagHidden>
             <ChapterFlagEnabled>1</ChapterFlagEnabled>
           </ChapterAtom>
           <ChapterAtom>
             <ChapterUID>6</ChapterUID>
             <ChapterTimeStart>750000000</ChapterTimeStart>
             <ChapterTimeEnd>1178500000</ChapterTimeEnd>
             <ChapterDisplay>
               <ChapString>Bleeper_O+2</ChapString>



Lhomme, et al.           Expires January 4, 2018              [Page 172]

Internet-Draft                  Matroska                       July 2017


               <ChapLanguage>eng</ChapLanguage>
             </ChapterDisplay>
             <ChapterFlagHidden>0</ChapterFlagHidden>
             <ChapterFlagEnabled>1</ChapterFlagEnabled>
           </ChapterAtom>
           <ChapterAtom>
             <ChapterUID>7</ChapterUID>
             <ChapterTimeStart>1180500000</ChapterTimeStart>
             <ChapterTimeEnd>1340000000</ChapterTimeEnd>
             <ChapterDisplay>
               <ChapString>Baby wants to bleep (pt.4)</ChapString>
               <ChapLanguage>eng</ChapLanguage>
             </ChapterDisplay>
             <ChapterFlagHidden>0</ChapterFlagHidden>
             <ChapterFlagEnabled>1</ChapterFlagEnabled>
           </ChapterAtom>
           <ChapterAtom>
             <ChapterUID>8</ChapterUID>
             <ChapterTimeStart>1342000000</ChapterTimeStart>
             <ChapterTimeEnd>1518000000</ChapterTimeEnd>
             <ChapterDisplay>
               <ChapString>Bleep to bleep</ChapString>
               <ChapLanguage>eng</ChapLanguage>
             </ChapterDisplay>
             <ChapterFlagHidden>0</ChapterFlagHidden>
             <ChapterFlagEnabled>1</ChapterFlagEnabled>
           </ChapterAtom>
           <ChapterAtom>
             <ChapterUID>9</ChapterUID>
             <ChapterTimeStart>1520000000</ChapterTimeStart>
             <ChapterTimeEnd>2015000000</ChapterTimeEnd>
             <ChapterDisplay>
               <ChapString>Baby wants to bleep (k)</ChapString>
               <ChapLanguage>eng</ChapLanguage>
             </ChapterDisplay>
             <ChapterFlagHidden>0</ChapterFlagHidden>
             <ChapterFlagEnabled>1</ChapterFlagEnabled>
           </ChapterAtom>
           <ChapterAtom>
             <ChapterUID>10</ChapterUID>
             <ChapterTimeStart>2017000000</ChapterTimeStart>
             <ChapterTimeEnd>2668000000</ChapterTimeEnd>
             <ChapterDisplay>
               <ChapString>Bleeper</ChapString>
               <ChapLanguage>eng</ChapLanguage>
             </ChapterDisplay>
             <ChapterFlagHidden>0</ChapterFlagHidden>
             <ChapterFlagEnabled>1</ChapterFlagEnabled>



Lhomme, et al.           Expires January 4, 2018              [Page 173]

Internet-Draft                  Matroska                       July 2017


           </ChapterAtom>
           <EditionFlagDefault>0</EditionFlagDefault>
           <EditionFlagHidden>0</EditionFlagHidden>
         </EditionEntry>
       </Chapters>

32.  Subtitles

   Because Matroska is a general container format, we try to avoid
   specifying the formats to store in it.  This type of work is really
   outside of the scope of a container-only format.  However, because
   the use of subtitles in A/V containers has been so limited (with the
   exception of DVD) we are taking the time to specify how to store some
   of the more common subtitle formats in Matroska.  This is being done
   to help facilitate their growth.  Otherwise, incompatibilities could
   prevent the standardization and use of subtitle storage.

   This page is not meant to be a complete listing of all subtitle
   formats that will be used in Matroska, it is only meant to be a guide
   for the more common, current formats.  It is possible that we will
   add future formats to this page as they are created, but it is not
   likely as any other new subtitle format designer would likely have
   their own specifications.  Any specification listed here SHOULD be
   strictly adhered to or it SHOULD NOT use the corresponding Codec ID.

   Here is a list of pointers for storing subtitles in Matroska:

   o  Any Matroska file containing only subtitles SHOULD use the
      extension ".mks".

   o  As a general rule of thumb for all codecs, information that is
      global to an entire stream SHOULD be stored in the CodecPrivate
      element.

   o  Start and stop timecodes that are used in a timecodes native
      storage format SHOULD be removed when being placed in Matroska as
      they could interfere if the file is edited afterwards.  Instead,
      the Blocks timecode and Duration SHOULD be used to say when the
      timecode is displayed.

   o  Because a "subtitle" stream is actually just an overlay stream,
      anything with a transparency layer could be use, including video.

33.  Images Subtitles

   The first image format that is a goal to import into Matroska is the
   VobSub subtitle format.  This subtitle type is generated by exporting
   the subtitles from a DVD.



Lhomme, et al.           Expires January 4, 2018              [Page 174]

Internet-Draft                  Matroska                       July 2017


   The requirement for muxing VobSub into Matroska is v7 subtitles (see
   first line of the .IDX file).  If the version is smaller, you must
   remux them using the SubResync utility from VobSub 2.23 (or MPC) into
   v7 format.  Generally any newly created subs will be in v7 format.

   The .IFO file will not be used at all.

   If there is more than one subtitle stream in the VobSub set, each
   stream will need to be separated into separate tracks for storage in
   Matroska.  E.g. the VobSub file contains streams for both English and
   German subtitles.  Then the resulting Matroska file SHOULD contain
   two tracks.  That way the language information can be 'dropped' and
   mapped to Matroska's language tags.

   The .IDX file is reformatted (see below) and placed in the
   CodecPrivate.

   Each .BMP will be stored in its own Block.  The Timestamp with be
   stored in the Blocks Timecode and the duration will be stored in the
   Default Duration.

   Here is an example .IDX file:

  # VobSub index file, v7 (do not modify this line!)
  #
  # To repair desyncronization, you can insert gaps this way:
  # (it usually happens after vob id changes)
  #
  # delay: [sign]hh:mm:ss:ms
  #
  # Where:
  # [sign]: +, - (optional)
  # hh: hours (0 <= hh)
  # mm/ss: minutes/seconds (0 <= mm/ss <= 59)
  # ms: milliseconds (0 <= ms <= 999)
  #
  # Note: You can't position a sub before the previous with a negative
  # value.
  #
  # You can also modify timestamps or delete a few subs you don't like.
  # Just make sure they stay in increasing order.

  # Settings

  # Original frame size
  size: 720x480

  # Origin, relative to the upper-left corner, can be overloaded by



Lhomme, et al.           Expires January 4, 2018              [Page 175]

Internet-Draft                  Matroska                       July 2017


  # aligment
  org: 0, 0

  # Image scaling (hor,ver), origin is at the upper-left corner or at
  # the alignment coord (x, y)
  scale: 100%, 100%

  # Alpha blending
  alpha: 100%

  # Smoothing for very blocky images (use OLD for no filtering)
  smooth: OFF

  # In millisecs
  fadein/out: 50, 50

  # Force subtitle placement relative to (org.x, org.y)
  align: OFF at LEFT TOP

  # For correcting non-progressive desync. (in millisecs or hh:mm:ss:ms)
  # Note: Not effective in DirectVobSub, use "delay: ... " instead.
  time offset: 0

  # ON: displays only forced subtitles, OFF: shows everything
  forced subs: OFF

  # The original palette of the DVD
  palette: 000000, 7e7e7e, fbff8b, cb86f1, 7f74b8, e23f06, 0a48ea, \
  b3d65a, 6b92f1, 87f087, c02081, f8d0f4, e3c411, 382201, e8840b, fdfdfd

  # Custom colors (transp idxs and the four colors)
  custom colors: OFF, tridx: 0000, colors: 000000, 000000, 000000, \
  000000

  # Language index in use
  langidx: 0

  # English
  id: en, index: 0
  # Decomment next line to activate alternative name in DirectVobSub /
  # Windows Media Player 6.x
  # alt: English
  # Vob/Cell ID: 1, 1 (PTS: 0)
  timestamp: 00:00:01:101, filepos: 000000000
  timestamp: 00:00:08:708, filepos: 000001000






Lhomme, et al.           Expires January 4, 2018              [Page 176]

Internet-Draft                  Matroska                       July 2017


   First, lines beginning with "#" are removed.  These are comments to
   make text file editing easier, and as this is not a text file, they
   aren't needed.

   Next remove the "langidx" and "id" lines.  These are used to
   differenciate the subtitle streams and define the language.  As the
   streams will be stored seperately anyway, there is no need to
   differenciate them here.  Also, the language setting will be stored
   in the Matroska tags, so there is no need to store it here.

   Finally, the "timestamp" will be used to set the Block's timecode.
   Once it is set there, there is no need for it to be stored here.
   Also, as it may interfere if the file is edited, it SHOULD NOT be
   stored here.

   Once all of these items are removed, the data to store in the
   CodecPrivate SHOULD look like this:

  size: 720x480
  org: 0, 0
  scale: 100%, 100%
  alpha: 100%
  smooth: OFF
  fadein/out: 50, 50
  align: OFF at LEFT TOP
  time offset: 0
  forced subs: OFF
  palette: 000000, 7e7e7e, fbff8b, cb86f1, 7f74b8, e23f06, 0a48ea, \
  b3d65a, 6b92f1, 87f087, c02081, f8d0f4, e3c411, 382201, e8840b, fdfdfd
  custom colors: OFF, tridx: 0000, colors: 000000, 000000, 000000, \
  000000

   There SHOULD also be two Blocks containing one image each with the
   timecodes "00:00:01:101" and "00:00:08:708".

34.  SRT Subtitles

   SRT is perhaps the most basic of all subtitle formats.

   It consists of four parts, all in text..

   1.  A number indicating which subtitle it is in the sequence.  2.
   The time that the subtitle appears on the screen, and then
   disappears.  3.  The subtitle itself.  4.  A blank line indicating
   the start of a new subtitle.

   When placing SRT in Matroska, part 3 is converted to UTF-8 (S_TEXT/
   UTF8) and placed in the data portion of the Block.  Part 2 is used to



Lhomme, et al.           Expires January 4, 2018              [Page 177]

Internet-Draft                  Matroska                       July 2017


   set the timecode of the Block, and BlockDuration element.  Nothing
   else is used.

   Here is an example SRT file:

                    1
                    00:02:17,440 --> 00:02:20,375
                    Senator, we're making
                    our final approach into Coruscant.

                    2
                    00:02:20,476 --> 00:02:22,501
                    Very good, Lieutenant.

   In this example, the text "Senator, we're making our final approach
   into Coruscant." would be converted into UTF-8 and placed in the
   Block.  The timecode of the block would be set to "00:02:17,440".
   And the BlockDuration element would be set to "00:00:02,935".

   The same is repeated for the next subtitle.

   Because there are no general settings for SRT, the CodecPrivate is
   left blank.

35.  SSA/ASS Subtitles

   SSA stands for Sub Station Alpha.  It's the file format used by the
   popular subtitle editor, SubStation Alpha [92].  This format is
   widely used by fansubbers.

   It allows you to do some advanced display features, like positioning,
   karaoke, style managements...

   For detailed information on SSA/ASS, see the SSA specs [93].  It
   includes an SSA specs description and the avanced features added by
   ASS format (standing for Advanced SSA).  Because SSA and ASS are so
   similar, they are treated the same here.

   Like SRT, this format is text based with a particular syntax.

   A file consists of 4 or 5 parts, declared ala INI file (but it's not
   an INI !)

   The first, "[Script Info]" contains some information about the
   subtitle file, such as it's title, who created it, type of script and
   a very important one : "PlayResY".  Be carefull of this value,
   everything in your script (font size, positioning) is scaled by it.
   Sub Station Alpha uses your desktops Y resolution to write this



Lhomme, et al.           Expires January 4, 2018              [Page 178]

Internet-Draft                  Matroska                       July 2017


   value, so if a friend with a large monitor and a high screen
   resolution gives you an edited script, you can mess everything up by
   saving the script in SSA with your low-cost monitor.

   The second, "[V4 Styles]", is a list of style definitions.  A style
   describe how will look a text on the screen.  It defines font, font
   size, primary/.../outile colour, position, aligment etc ...

   For example this :

Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, TertiaryColour, BackColour, Bold, Italic, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, AlphaLevel, Encoding
Style: Wolf main,Wolf_Rain,56,15724527,15724527,15724527,4144959,0,0,1,1,2,2,5,5,30,0,0

   The third, "[Events]", is the list of text you want to display at the
   right timing.  You can specify some attribute here.  Like the style
   to use for this event (MUST be defined in the list), the position of
   the text (Left, Right, Vertical Margin), an effect.  Name is mostly
   used by translator to know who said this sentence.  Timing is in
   h:mm:ss.cc (centisec).

Format: Marked, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: Marked=0,0:02:40.65,0:02:41.79,Wolf main,Cher,0000,0000,0000,,Et les enregistrements de ses ondes delta ?
Dialogue: Marked=0,0:02:42.42,0:02:44.15,Wolf main,autre,0000,0000,0000,,Toujours rien.

   "[Pictures]" or "[Fonts]" part can be found in some SSA file, they
   contains UUE-encoded pictures/font but those features are only used
   by Sub Station Alpha, i.e. no filter (Vobsub/Avery Lee Subtiler
   filter) use them.

   Now, how are they stored in Matroska ?

   o  All text is converted to UTF-8* All the headers are stored in
      CodecPrivate ( Script Info and the Styles list)* Start & End field
      are used to set TimeStamp and the BlockDuration element. the data
      stored is :* Events are stored in the Block in this order:
      ReadOrder, Layer, Style, Name, MarginL, MarginR, MarginV, Effect,
      Text (Layer comes from ASS specs ... it's empty for SSA.)
      "ReadOrder field is needed for the decoder to be able to reorder
      the streamed samples as they were placed originally in the file."

   Here is an example of an SSA file.










Lhomme, et al.           Expires January 4, 2018              [Page 179]

Internet-Draft                  Matroska                       July 2017


[Script Info]
; This is a Sub Station Alpha v4 script.
; For Sub Station Alpha info and downloads,
; go to [http://www.eswat.demon.co.uk/](http://www.eswat.demon.co.uk/)
; or email [kotus@eswat.demon.co.uk](mailto:kotus@eswat.demon.co.uk)
Title: Wolf's rain 2
Original Script: Anime-spirit Ishin-francais
Original Translation: Coolman
Original Editing: Spikewolfwood
Original Timing: Lord_alucard
Original Script Checking: Spikewolfwood
ScriptType: v4.00
Collisions: Normal
PlayResY: 1024
PlayDepth: 0
Wav: 0, 128697,D:\Alex\Anime\- Fansub -\- TAFF -\Wolf's Rain\WR_-_02_Wav.wav
Wav: 0, 120692,H:\team truc\WR_-_02.wav
Wav: 0, 116504,E:\sub\wolf's_rain\WOLF'S RAIN 02.wav
LastWav: 3
Timer: 100,0000

[V4 Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, TertiaryColour, BackColour, Bold, Italic, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, AlphaLevel, Encoding
Style: Default,Arial,20,65535,65535,65535,-2147483640,-1,0,1,3,0,2,30,30,30,0,0
Style: Titre_episode,Akbar,140,15724527,65535,65535,986895,-1,0,1,1,0,3,30,30,30,0,0
Style: Wolf main,Wolf_Rain,56,15724527,15724527,15724527,4144959,0,0,1,1,2,2,5,5,30,0,0

[Events]
Format: Marked, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: Marked=0,0:02:40.65,0:02:41.79,Wolf main,Cher,0000,0000,0000,,Et les enregistrements de ses ondes delta ?
Dialogue: Marked=0,0:02:42.42,0:02:44.15,Wolf main,autre,0000,0000,0000,,Toujours rien.

   Here is what would be placed into the CodecPrivate element.


















Lhomme, et al.           Expires January 4, 2018              [Page 180]

Internet-Draft                  Matroska                       July 2017


[Script Info]
; This is a Sub Station Alpha v4 script.
; For Sub Station Alpha info and downloads,
; go to [http://www.eswat.demon.co.uk/](http://www.eswat.demon.co.uk/)
; or email [kotus@eswat.demon.co.uk](mailto:kotus@eswat.demon.co.uk)
Title: Wolf's rain 2
Original Script: Anime-spirit Ishin-francais
Original Translation: Coolman
Original Editing: Spikewolfwood
Original Timing: Lord_alucard
Original Script Checking: Spikewolfwood
ScriptType: v4.00
Collisions: Normal
PlayResY: 1024
PlayDepth: 0
Wav: 0, 128697,D:\Alex\Anime\- Fansub -\- TAFF -\Wolf's Rain\WR_-_02_Wav.wav
Wav: 0, 120692,H:\team truc\WR_-_02.wav
Wav: 0, 116504,E:\sub\wolf's_rain\WOLF'S RAIN 02.wav
LastWav: 3
Timer: 100,0000

[V4 Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, TertiaryColour, BackColour, Bold, Italic, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, AlphaLevel, Encoding
Style: Default,Arial,20,65535,65535,65535,-2147483640,-1,0,1,3,0,2,30,30,30,0,0
Style: Titre_episode,Akbar,140,15724527,65535,65535,986895,-1,0,1,1,0,3,30,30,30,0,0
Style: Wolf main,Wolf_Rain,56,15724527,15724527,15724527,4144959,0,0,1,1,2,2,5,5,30,0,0

   And here are the two blocks that would be generated.

   Block's timecode: 00:02:40.650 BlockDuration: 00:00:01.140

1,,Wolf main,Cher,0000,0000,0000,,Et les enregistrements de ses ondes delta ?

   Block's timecode: 00:02:42.420 BlockDuration: 00:00:01.730

             2,,Wolf main,autre,0000,0000,0000,,Toujours rien.

36.  USF Subtitles

   Under construction

37.  WebVTT

   The "Web Video Text Tracks Format" (short: WebVTT) is developed by
   the World Wide Web Consortium (W3C) [94].  Its specifications are
   freely available [95].

   The guiding principles for the storage of WebVTT in Matroska are:



Lhomme, et al.           Expires January 4, 2018              [Page 181]

Internet-Draft                  Matroska                       July 2017


   o  Consistency: store data in a similar way to other subtitle codecs

   o  Simplicity: making decoding and remuxing as easy as possible for
      existing infrastructures

   o  Completeness: keeping as much data as possible from the original
      WebVTT file

37.1.  Storage of WebVTT in Matroska

37.1.1.  CodecID: codec identification

   The CodecID to use is S_TEXT/WEBVTT.

37.1.2.  CodecPrivate: storage of gloal WebVTT blocks

   This element contains all global blocks before the first subtitle
   entry.  This starts at the "WEBVTT" file identification marker but
   excludes the optional byte order mark.

37.1.3.  Storage of non-global WebVTT blocks

   Non-global WebVTT blocks (e.g.  "NOTE") before a WebVTT Cue Text are
   stored in Matroska's BlockAddition element together with the Matroska
   Block containing the WebVTT Cue Text these blocks precede (see below
   for the actual format).

37.1.4.  Storage of Cues in Matroska blocks

   Each WebVTT Cue Text is stored directly in the Matroska Block.

   A muxer MUST change all WebVTT Cue Timestamps present within the Cue
   Text to be relative to the Matroska Block's timestamp.

   The Cue's start timestamp is used as the Matroska Block's timestamp.

   The difference between the Cue's end timestamp and its start
   timestamp is used as the Matroska Block's duration.

37.1.5.  BlockAdditions: storing non-global WebVTT blocks, Cue Settings
         Lists and Cue identifiers

   Each Matroska Block may be accompanied by one BlockAdditions element.
   Its format is as follows:

   1.  The first line contains the WebVTT Cue Text's optional Cue
       Settings List followed by one line feed character (U+0x000a).




Lhomme, et al.           Expires January 4, 2018              [Page 182]

Internet-Draft                  Matroska                       July 2017


       The Cue Settings List may be empty in which case the line
       consists of the line feed character only.

   2.  The second line contains the WebVTT Cue Text's optional Cue
       Identifier followed by one line feed character (U+0x000a).  The
       line may be empty indicating that there was no Cue Identifier in
       the source file in which case the line consists of the line feed
       character only.

   3.  The third and all following lines contain all WebVTT Comment
       Blocks that precede the current WebVTT Cue Block.  These may be
       absent.

   If there is no Matroska BlockAddition element stored together with
   the Matroska Block then all three components (Cue Settings List, Cue
   Identifier, Cue Comments) MUST be assumed to be absent.

37.2.  Examples of transformation

   Here's an example how a WebVTT is transformed.

37.2.1.  Example WebVTT file

   Let's take the following example file:



























Lhomme, et al.           Expires January 4, 2018              [Page 183]

Internet-Draft                  Matroska                       July 2017


WEBVTT with text after the signature

STYLE
::cue {
  background-image: linear-gradient(to bottom, dimgray, lightgray);
  color: papayawhip;
}
/* Style blocks cannot use blank lines nor "dash dash greater than" */

NOTE comment blocks can be used between style blocks.

STYLE
::cue(b) {
  color: peachpuff;
}

REGION
id:bill
width:40%
lines:3
regionanchor:0%,100%
viewportanchor:10%,90%
scroll:up

NOTE
Notes always span a whole block and can cover multiple
lines. Like this one.
An empty line ends the block.

hello
00:00:00.000 --> 00:00:10.000
Example entry 1: Hello <b>world</b>.

NOTE style blocks cannot appear after the first cue.

00:00:25.000 --> 00:00:35.000
Example entry 2: Another entry.
This one has multiple lines.

00:01:03.000 --> 00:01:06.500 position:90% align:right size:35%
Example entry 3: That stuff to the right of the timestamps are cue settings.

00:03:10.000 --> 00:03:20.000
Example entry 4: Entries can even include timestamps.
For example:<00:03:15.000>This becomes visible five seconds
after the first part.





Lhomme, et al.           Expires January 4, 2018              [Page 184]

Internet-Draft                  Matroska                       July 2017


37.2.2.  CodecPrivate

   The resulting CodecPrivate element will look like this:

  WEBVTT with text after the signature

  STYLE
  ::cue {
    background-image: linear-gradient(to bottom, dimgray, lightgray);
    color: papayawhip;
  }
  /* Style blocks cannot use blank lines nor "dash dash greater than" */

  NOTE comment blocks can be used between style blocks.

  STYLE
  ::cue(b) {
    color: peachpuff;
  }

  REGION
  id:bill
  width:40%
  lines:3
  regionanchor:0%,100%
  viewportanchor:10%,90%
  scroll:up

  NOTE
  Notes always span a whole block and can cover multiple
  lines. Like this one.
  An empty line ends the block.

37.2.3.  Storage of Cue 1

   Example Cue 1: timestamp 00:00:00.000, duration 00:00:10.000, Block's
   content:

                   Example entry 1: Hello <b>world</b>.

   BlockAddition's content starts with one empty line as there's no Cue
   Settings List:


                                   hello






Lhomme, et al.           Expires January 4, 2018              [Page 185]

Internet-Draft                  Matroska                       July 2017


37.2.4.  Storage of Cue 2

   Example Cue 2: timestamp 00:00:25.000, duration 00:00:10.000, Block's
   content:

                      Example entry 2: Another entry.
                      This one has multiple lines.

   BlockAddition's content starts with two empty lines as there's
   neither a Cue Settings List nor a Cue Identifier:


           NOTE style blocks cannot appear after the first cue.

37.2.5.  Storage of Cue 3

   Example Cue 3: timestamp 00:01:03.000, duration 00:00:03.500, Block's
   content:

Example entry 3: That stuff to the right of the timestamps are cue settings.

   BlockAddition's content ends with an empty line as there's no Cue
   Identifier and there were no WebVTT Comment blocks:

                     position:90% align:right size:35%


37.2.6.  Storage of Cue 4

   Example Cue 4: timestamp 00:03:10.000, duration 00:00:10.000, Block's
   content:

   Example entry 4: Entries can even include timestamps.  For
   example:<00:00:05.000>This becomes visible five seconds after the
   first part.

   This Block does not need a BlockAddition as the Cue did not contain
   an Identifier, nor a Settings List, and it wasn't preceded by Comment
   blocks.

37.3.  Storage of WebVTT in Matroska vs. WebM

   Note: the storage of WebVTT in Matroska is not the same as the design
   document for storage of WebVTT in WebM.  There are several reasons
   for this including but not limited to: the WebM document is old (from
   February 2012) and was based on an earlier draft of WebVTT and
   ignores several parts that were added to WebVTT later; WebM does
   still not support subtitles at all [96]; the proposal suggests



Lhomme, et al.           Expires January 4, 2018              [Page 186]

Internet-Draft                  Matroska                       July 2017


   splitting the information across multiple tracks making demuxer's and
   remuxer's life very difficult.

38.  HDMV presentation graphics subtitles

   The specifications for the HDMV presentation graphics subtitle format
   (short: HDMV PGS) can be found in the document "Blu-ray Disc Read-
   Only Format; Part 3 -- Audio Visual Basic Specifications" in section
   9.14 "HDMV graphics streams".

38.1.  Storage of HDMV presentation graphics subtitles

38.1.1.  CodecID & CodecPrivate: codec identification

   The CodecID to use is "S_HDMV/PGS".  A CodecPrivate element is not
   used.

38.1.2.  Storage of HDMV PGS Segments in Matroska Blocks

   Each HDMV PGS Segment (short: Segment) will be stored in a Matroska
   Block.  A Segment is the data structure described in section 9.14.2.1
   "Segment coding structure and parameters" of the Blu-ray
   specifications.

   Each Segment contains a presentation timestamp.  This timestamp will
   be used as the timestamp for the Matroska Block.

   A Segment is normally shown until a subsequent Segment is
   encountered.  Therefore the Matroska Block MAY have no Duration.  In
   that case a player MUST display a Segment within a Matroska Block
   until the next Segment is encountered.

   A muxer MAY use a Duration, e.g. by calculating the distance between
   two subsequent Segments.  If a Matroska Block has a Duration, a
   player MUST display that Segment only for the duration of the Block's
   Duration.

39.  HDMV text subtitles

   The specifications for the HDMV text subtitle format (short: HDMV
   TextST) can be found in the document "Blu-ray Disc Read-Only Format;
   Part 3 -- Audio Visual Basic Specifications" in section 9.15 "HDMV
   text subtitle streams".








Lhomme, et al.           Expires January 4, 2018              [Page 187]

Internet-Draft                  Matroska                       July 2017


39.1.  Storage of HDMV text subtitles

39.1.1.  CodecID & CodecPrivate: codec identification

   The CodecID to use is "S_HDMV/TEXTST".

   A CodecPrivate Element is required.  It MUST contain the stream's
   Dialog Style Segment as described in section 9.15.4.2 "Dialog Style
   Segment" of the Blu-ray specifications.

39.1.2.  Storage of HDMV TextST Dialog Presentation Segments in Matroska
         Blocks

   Each HDMV Dialog Presentation Segment (short: Segment) will be stored
   in a Matroska Block.  A Segment is the data structure described in
   section 9.15.4.3 "Dialog presentation segment" of the Blu-ray
   specifications.

   Each Segment contains a start and an end presentation timestamp
   (short: start PTS & end PTS).  The start PTS will be used as the
   timestamp for the Matroska Block.  The Matroska Block MUST have a
   Duration, and that Duration is the difference between the end PTS and
   the start PTS.

   A player MUST use the Matroska Block's timestamp and Duration instead
   of the Segment's start and end PTS for determining when and how long
   to show the Segment.

39.1.3.  Character set

   When TextST subtitles are stored inside Matroska, the only allowed
   character set is UTF-8.

   Each HDMV text subtitle stream in a Blu-ray can use one of a handful
   of character sets.  This information is not stored in the MPEG2
   Transport Stream itself but in the accompanying Clip Information
   file.

   Therefore a muxer MUST parse the accompanying Clip Information file.
   If the information indicates a character set other than UTF-8, it
   MUST re-encode all text Dialog Presentation Segments from the
   indicated character set to UTF-8 prior to storing them in Matroska.

40.  Digital Video Broadcasting (DVB) subtitles

   The specifications for the Digital Video Broadcasting subtitle
   bitstream format (short: DVB subtitles) can be found in the document
   "ETSI EN 300 743 - Digital Video Broadcasting (DVB); Subtitling



Lhomme, et al.           Expires January 4, 2018              [Page 188]

Internet-Draft                  Matroska                       July 2017


   systems".  The storage of DVB subtitles in MPEG transport streams is
   specified in the document "ETSI EN 300 468 - Digital Video
   Broadcasting (DVB); Specification for Service Information (SI) in DVB
   systems".

40.1.  Storage of DVB subtitles

40.1.1.  CodecID

   The CodecID to use is "S_DVBSUB".

40.1.2.  CodecPrivate

   The CodecPrivate element is five bytes long and has the following
   structure:

   o  2 bytes: composition page ID (bit string, left bit first)

   o  2 bytes: ancillary page ID (bit string, left bit first)

   o  1 byte: subtitling type (bit string, left bit first)

   The semantics of these bytes are the same as the ones described in
   section 6.2.41 "Subtitling descriptor" of ETSI EN 300 468.

40.1.3.  Storage of DVB subtitles in Matroska Blocks

   Each Matroska Block consists of one or more DVB Subtitle Segments as
   described in segment 7.2 "Syntax and semantics of the subtitling
   segment" of ETSI EN 300 743.

   Each Matroska Block SHOULD have a Duration indicating how long the
   DVB Subtitle Segments in that Block SHOULD be displayed.

41.  Tagging

   When a Tag is nested within another Tag, the nested Tag becomes an
   attribute of the base tag.  For instance, if you wanted to store the
   dates that a singer used certain addresses for, that singer being the
   lead singer for a track that included multiple bands simultaneously,
   then your tag tree would look something like this:

   o  Targets

      *  TrackUID

   o  BAND




Lhomme, et al.           Expires January 4, 2018              [Page 189]

Internet-Draft                  Matroska                       July 2017


      *  LEADPERFORMER

      *  ADDRESS

         +  DATE

         +  DATEEND

      *  ADDRESS

         +  DATE

   In this way, it becomes possible to store any Tag as attributes of
   another tag.

   Multiple items SHOULD never be stored as a list in a single
   TagString.  If there is more than one tag of a certain type to be
   stored, then more than one SimpleTag SHOULD be used.

   For authoring Tags outside of EBML, the following XML syntax is
   proposed [97] used in mkvmerge [98].  Binary data SHOULD be stored
   using BASE64 encoding if it is being stored at authoring time.

41.1.  Why official tags matter

   There is a debate between people who think all tags SHOULD be free
   and those who think all tags SHOULD be strict.  If you look at this
   page you will realise we are in between.

   Advanced-users application might let you put any tag in your file.
   But for the rest of the applications, they usually give you a basic
   list of tags you can use.  Both have their needs.  But it's usually a
   bad idea to use custom/exotic tags because you will probably be the
   only person to use this information even though everyone else could
   benefit from it.  So hopefully when someone wants to put information
   in one's file, they will find an official one that fit them and
   hopefully use it ! If it's not in the list, this person can contact
   us any time for addition of such a missing tag.  But it doesn't mean
   it will be accepted... Matroska files are not meant the become a
   whole database of people who made costumes for a film.  A website
   would be better for that... It's hard to define what SHOULD be in and
   what doesn't make sense in a file.  So we'll treat each request
   carefully.

   We also need an official list simply for developers to be able to
   display relevant information in their own design (if they choose to
   support a list of meta-information they SHOULD know which tag has the
   wanted meaning so that other apps could understand the same meaning).



Lhomme, et al.           Expires January 4, 2018              [Page 190]

Internet-Draft                  Matroska                       July 2017


41.2.  Tag translations

   To be able to save tags from other systems to Matroska we need to
   translate them to our system.  There is a translation table on our
   site [99].

41.3.  Tag Formatting

   o  The TagName SHOULD always be written in all capital letters and
      contain no space.

   o  The fields with dates SHOULD have the following format: YYYY-MM-DD
      hh:mm:ss.mss YYYY = Year, MM = Month, DD = Days, HH = Hours, mm =
      Minutes, ss = Seconds, mss = Milliseconds.  To store less
      accuracy, you remove items starting from the right.  To store only
      the year, you would use, "2004".  To store a specific day such as
      May 1st, 2003, you would use "2003-05-01".

   o  Fields that require a Float SHOULD use the "." mark instead of the
      "," mark.  To display it differently for another local,
      applications SHOULD support auto replacement on display.  Also, a
      thousandths separator SHOULD NOT be used.

   o  For currency amounts, there SHOULD only be a numeric value in the
      Tag. Only numbers, no letters or symbols other than ".".  For
      instance, you would store "15.59" instead of "$15.59USD".

41.4.  Target types

   The TargetType element allows tagging of different parts that are
   inside or outside a given file.  For example in an audio file with
   one song you could have information about the album it comes from and
   even the CD set even if it's not found in the file.

   For application to know what kind of information (like TITLE) relates
   to a certain level (CD title or track title), we also need a set of
   official TargetType names.  For now audio and video will have
   different values & names.  That also means the same tag name can have
   different meanings depending on where it is (otherwise we would end
   up with 15 TITLE_ tags).

   TargetTypeValue | Audio strings | Video strings | Comment 70 |
   COLLECTION | COLLECTION | the high hierarchy consisting of many
   different lower items 60 | EDITION / ISSUE / VOLUME / OPUS | SEASON /
   SEQUEL / VOLUME | a list of lower levels grouped together 50 | ALBUM
   / OPERA / CONCERT | MOVIE / EPISODE / CONCERT | the most common
   grouping level of music and video (equals to an episode for TV
   series) 40 | PART / SESSION | PART / SESSION | when an album or



Lhomme, et al.           Expires January 4, 2018              [Page 191]

Internet-Draft                  Matroska                       July 2017


   episode has different logical parts 30 | TRACK / SONG | CHAPTER | the
   common parts of an album or a movie 20 | SUBTRACK / PART / MOVEMENT |
   SCENE | corresponds to parts of a track for audio (like a movement)
   10 | - | SHOT | the lowest hierarchy found in music or movies

   An upper level value tag applies to the lower level.  That means if a
   CD has the same artist for all tracks, you just need to set the
   ARTIST tag at level 50 (ALBUM) and not to each TRACK (but you can).
   That also means that if some parts of the CD have no known ARTIST the
   value MUST be set to nothing (a void string "").

   When a level doesn't exist it MUST NOT be specified in the files, so
   that the TOTAL_PARTS and PART_NUMBER elements match the same levels.

   Here is an example of how these "organizational" tags work: If you
   set 10 TOTAL_PARTS to the ALBUM level (40) it means the album
   contains 10 lower parts.  The lower part in question is the first
   lower level that is specified in the file.  So if it's TRACK (30)
   then that means it contains 10 tracks.  If it's MOVEMENT (20) that
   means it's 10 movements, etc.

41.5.  Official tags

   The following is a complete list of the supported Matroska Tags.
   While it is possible to use Tag names that are not listed below, this
   is not recommended as compatibility will be compromised.  If you find
   that there is a Tag missing that you would like to use, then please
   contact the Matroska team for its inclusion in the specifications
   before the format reaches 1.0.

41.6.  Nesting Information

   Nesting Information tags are intended to contain other tags.


















Lhomme, et al.           Expires January 4, 2018              [Page 192]

Internet-Draft                  Matroska                       July 2017


   +----------+-------+------------------------------------------------+
   | Tag Name | Type  | Description                                    |
   +----------+-------+------------------------------------------------+
   | ORIGINAL | -     | A special tag that is meant to have other tags |
   |          |       | inside (using nested tags) to describe the     |
   |          |       | original work of art that this item is based   |
   |          |       | on. All tags in this list can be used "under"  |
   |          |       | the ORIGINAL tag like LYRICIST, PERFORMER,     |
   |          |       | etc.                                           |
   | SAMPLE   | -     | A tag that contains other tags to describe a   |
   |          |       | sample used in the targeted item taken from    |
   |          |       | another work of art. All tags in this list can |
   |          |       | be used "under" the SAMPLE tag like TITLE,     |
   |          |       | ARTIST, DATE_RELEASED, etc.                    |
   | COUNTRY  | UTF-8 | The name of the country (biblio ISO-639-2      |
   |          |       | [100]) that is meant to have other tags inside |
   |          |       | (using nested tags) to country specific        |
   |          |       | information about the item. All tags in this   |
   |          |       | list can be used "under" the COUNTRY_SPECIFIC  |
   |          |       | tag like LABEL, PUBLISH_RATING, etc.           |
   +----------+-------+------------------------------------------------+

41.7.  Organization Information

   +-------------+-------+---------------------------------------------+
   | Tag Name    | Type  | Description                                 |
   +-------------+-------+---------------------------------------------+
   | TOTAL_PARTS | UTF-8 | Total number of parts defined at the first  |
   |             |       | lower level. (e.g. if TargetType is ALBUM,  |
   |             |       | the total number of tracks of an audio CD)  |
   | PART_NUMBER | UTF-8 | Number of the current part of the current   |
   |             |       | level. (e.g. if TargetType is TRACK, the    |
   |             |       | track number of an audio CD)                |
   | PART_OFFSET | UTF-8 | A number to add to PART_NUMBER when the     |
   |             |       | parts at that level don't start at 1. (e.g. |
   |             |       | if TargetType is TRACK, the track number of |
   |             |       | the second audio CD)                        |
   +-------------+-------+---------------------------------------------+

41.8.  Titles











Lhomme, et al.           Expires January 4, 2018              [Page 193]

Internet-Draft                  Matroska                       July 2017


   +----------+-------+------------------------------------------------+
   | Tag Name | Type  | Description                                    |
   +----------+-------+------------------------------------------------+
   | TITLE    | UTF-8 | The title of this item. For example, for music |
   |          |       | you might label this "Canon in D", or for      |
   |          |       | video's audio track you might use "English     |
   |          |       | 5.1" This is akin to the TIT2 tag in ID3.      |
   | SUBTITLE | UTF-8 | Sub Title of the entity.                       |
   +----------+-------+------------------------------------------------+

41.9.  Nested Information

   Nested Information includes tags contained in other tags.

   +-------------+-------+---------------------------------------------+
   | Tag Name    | Type  | Description                                 |
   +-------------+-------+---------------------------------------------+
   | URL         | UTF-8 | URL corresponding to the tag it's included  |
   |             |       | in.                                         |
   | SORT_WITH   | UTF-8 | A child element to indicate what            |
   |             |       | alternative value the parent tag can have   |
   |             |       | to be sorted, for example "Pet Shop Boys"   |
   |             |       | instead of "The Pet Shop Boys". Or "Marley  |
   |             |       | Bob" and "Marley Ziggy" (no comma needed).  |
   | INSTRUMENTS | UTF-8 | The instruments that are being used/played, |
   |             |       | separated by a comma. It SHOULD be a child  |
   |             |       | of the following tags: ARTIST,              |
   |             |       | LEAD_PERFORMER or ACCOMPANIMENT.            |
   | EMAIL       | UTF-8 | Email corresponding to the tag it's         |
   |             |       | included in.                                |
   | ADDRESS     | UTF-8 | The physical address of the entity. The     |
   |             |       | address SHOULD include a country code. It   |
   |             |       | can be useful for a recording label.        |
   | FAX         | UTF-8 | The fax number corresponding to the tag     |
   |             |       | it's included in. It can be useful for a    |
   |             |       | recording label.                            |
   | PHONE       | UTF-8 | The phone number corresponding to the tag   |
   |             |       | it's included in. It can be useful for a    |
   |             |       | recording label.                            |
   +-------------+-------+---------------------------------------------+

41.10.  Entities

   +----------------------+-------+------------------------------------+
   | Tag Name             | Type  | Description                        |
   +----------------------+-------+------------------------------------+
   | ARTIST               | UTF-8 | A person or band/collective        |
   |                      |       | generally considered responsible   |



Lhomme, et al.           Expires January 4, 2018              [Page 194]

Internet-Draft                  Matroska                       July 2017


   |                      |       | for the work. This is akin to the  |
   |                      |       | TPE1 tag in ID3 [101].             |
   | LEAD_PERFORMER       | UTF-8 | Lead Performer/Soloist(s). This    |
   |                      |       | can sometimes be the same as       |
   |                      |       | ARTIST.                            |
   | ACCOMPANIMENT        | UTF-8 | Band/orchestra/accompaniment/music |
   |                      |       | ian. This is akin to the TPE2 tag  |
   |                      |       | in ID3 [102].                      |
   | COMPOSER             | UTF-8 | The name of the composer of this   |
   |                      |       | item. This is akin to the TCOM tag |
   |                      |       | in ID3 [103].                      |
   | ARRANGER             | UTF-8 | The person who arranged the piece, |
   |                      |       | e.g., Ravel.                       |
   | LYRICS               | UTF-8 | The lyrics corresponding to a song |
   |                      |       | (in case audio synchronization is  |
   |                      |       | not known or as a doublon to a     |
   |                      |       | subtitle track). Editing this      |
   |                      |       | value when subtitles are found     |
   |                      |       | SHOULD also result in editing the  |
   |                      |       | subtitle track for more            |
   |                      |       | consistency.                       |
   | LYRICIST             | UTF-8 | The person who wrote the lyrics    |
   |                      |       | for a musical item. This is akin   |
   |                      |       | to the TEXT [104] tag in ID3.      |
   | CONDUCTOR            | UTF-8 | Conductor/performer refinement.    |
   |                      |       | This is akin to the TPE3 [105].    |
   | DIRECTOR             | UTF-8 | This is akin to the IART tag in    |
   |                      |       | RIFF [106].                        |
   | ASSISTANT_DIRECTOR   | UTF-8 | The name of the assistant          |
   |                      |       | director.                          |
   | DIRECTOR_OF_PHOTOGRA | UTF-8 | The name of the director of        |
   | PHY                  |       | photography, also known as         |
   |                      |       | cinematographer. This is akin to   |
   |                      |       | the ICNM tag in Extended RIFF.     |
   | SOUND_ENGINEER       | UTF-8 | The name of the sound engineer or  |
   |                      |       | sound recordist.                   |
   | ART_DIRECTOR         | UTF-8 | The person who oversees the        |
   |                      |       | artists and craftspeople who build |
   |                      |       | the sets.                          |
   | PRODUCTION_DESIGNER  | UTF-8 | Artist responsible for designing   |
   |                      |       | the overall visual appearance of a |
   |                      |       | movie.                             |
   | CHOREGRAPHER         | UTF-8 | The name of the choregrapher       |
   | COSTUME_DESIGNER     | UTF-8 | The name of the costume designer   |
   | ACTOR                | UTF-8 | An actor or actress playing a role |
   |                      |       | in this movie. This is the         |
   |                      |       | person's real name, not the        |
   |                      |       | character's name the person is     |



Lhomme, et al.           Expires January 4, 2018              [Page 195]

Internet-Draft                  Matroska                       July 2017


   |                      |       | playing.                           |
   | CHARACTER            | UTF-8 | The name of the character an actor |
   |                      |       | or actress plays in this movie.    |
   |                      |       | This SHOULD be a sub-tag of an     |
   |                      |       | "ACTOR" tag in order not to cause  |
   |                      |       | ambiguities.                       |
   | WRITTEN_BY           | UTF-8 | The author of the story or script  |
   |                      |       | (used for movies and TV shows).    |
   | SCREENPLAY_BY        | UTF-8 | The author of the screenplay or    |
   |                      |       | scenario (used for movies and TV   |
   |                      |       | shows).                            |
   | EDITED_BY            | UTF-8 | This is akin to the IEDT tag in    |
   |                      |       | Extended RIFF.                     |
   | PRODUCER             | UTF-8 | Produced by. This is akin to the   |
   |                      |       | IPRO tag in Extended RIFF.         |
   | COPRODUCER           | UTF-8 | The name of a co-producer.         |
   | EXECUTIVE_PRODUCER   | UTF-8 | The name of an executive producer. |
   | DISTRIBUTED_BY       | UTF-8 | This is akin to the IDST tag in    |
   |                      |       | Extended RIFF.                     |
   | MASTERED_BY          | UTF-8 | The engineer who mastered the      |
   |                      |       | content for a physical medium or   |
   |                      |       | for digital distribution.          |
   | ENCODED_BY           | UTF-8 | This is akin to the TENC tag [107] |
   |                      |       | in ID3.                            |
   | MIXED_BY             | UTF-8 | DJ mix by the artist specified     |
   | REMIXED_BY           | UTF-8 | Interpreted, remixed, or otherwise |
   |                      |       | modified by. This is akin to the   |
   |                      |       | TPE4 tag in ID3 [108].             |
   | PRODUCTION_STUDIO    | UTF-8 | This is akin to the ISTD tag in    |
   |                      |       | Extended RIFF.                     |
   | THANKS_TO            | UTF-8 | A very general tag for everyone    |
   |                      |       | else that wants to be listed.      |
   | PUBLISHER            | UTF-8 | This is akin to the TPUB tag in    |
   |                      |       | ID3 [109].                         |
   | LABEL                | UTF-8 | The record label or imprint on the |
   |                      |       | disc.                              |
   +----------------------+-------+------------------------------------+

41.11.  Search and Classification












Lhomme, et al.           Expires January 4, 2018              [Page 196]

Internet-Draft                  Matroska                       July 2017


   +---------------------+--------+------------------------------------+
   | Tag Name            | Type   | Description                        |
   +---------------------+--------+------------------------------------+
   | GENRE               | UTF-8  | The main genre (classical,         |
   |                     |        | ambient-house, synthpop, sci-fi,   |
   |                     |        | drama, etc). The format follows    |
   |                     |        | the infamous TCON tag in ID3.      |
   | MOOD                | UTF-8  | Intended to reflect the mood of    |
   |                     |        | the item with a few keywords, e.g. |
   |                     |        | "Romantic", "Sad" or "Uplifting".  |
   |                     |        | The format follows that of the     |
   |                     |        | TMOO tag in ID3.                   |
   | ORIGINAL_MEDIA_TYPE | UTF-8  | Describes the original type of the |
   |                     |        | media, such as, "DVD", "CD",       |
   |                     |        | "computer image," "drawing,"       |
   |                     |        | "lithograph," and so forth. This   |
   |                     |        | is akin to the TMED tag in ID3     |
   |                     |        | [110].                             |
   | CONTENT_TYPE        | UTF-8  | The type of the item. e.g.         |
   |                     |        | Documentary, Feature Film,         |
   |                     |        | Cartoon, Music Video, Music, Sound |
   |                     |        | FX, ...                            |
   | SUBJECT             | UTF-8  | Describes the topic of the file,   |
   |                     |        | such as "Aerial view of Seattle."  |
   | DESCRIPTION         | UTF-8  | A short description of the         |
   |                     |        | content, such as "Two birds        |
   |                     |        | flying."                           |
   | KEYWORDS            | UTF-8  | Keywords to the item separated by  |
   |                     |        | a comma, used for searching.       |
   | SUMMARY             | UTF-8  | A plot outline or a summary of the |
   |                     |        | story.                             |
   | SYNOPSIS            | UTF-8  | A description of the story line of |
   |                     |        | the item.                          |
   | INITIAL_KEY         | UTF-8  | The initial key that a musical     |
   |                     |        | track starts in. The format is     |
   |                     |        | identical to ID3.                  |
   | PERIOD              | UTF-8  | Describes the period that the      |
   |                     |        | piece is from or about. For        |
   |                     |        | example, "Renaissance".            |
   | LAW_RATING          | UTF-8  | Depending on the "COUNTRY" it's    |
   |                     |        | the format of the rating of a      |
   |                     |        | movie (P, R, X in the USA, an age  |
   |                     |        | in other countries or a URI        |
   |                     |        | defining a logo).                  |
   | ICRA                | binary | The ICRA [111] content rating for  |
   |                     |        | parental control. (Previously      |
   |                     |        | RSACi)                             |
   +---------------------+--------+------------------------------------+



Lhomme, et al.           Expires January 4, 2018              [Page 197]

Internet-Draft                  Matroska                       July 2017


41.12.  Temporal Information

   +----------------+-------+------------------------------------------+
   | Tag Name       | Type  | Description                              |
   +----------------+-------+------------------------------------------+
   | DATE_RELEASED  | UTF-8 | The time that the item was originally    |
   |                |       | released. This is akin to the TDRL tag   |
   |                |       | in ID3.                                  |
   | DATE_RECORDED  | UTF-8 | The time that the recording began. This  |
   |                |       | is akin to the TDRC tag in ID3.          |
   | DATE_ENCODED   | UTF-8 | The time that the encoding of this item  |
   |                |       | was completed began. This is akin to the |
   |                |       | TDEN tag in ID3.                         |
   | DATE_TAGGED    | UTF-8 | The time that the tags were done for     |
   |                |       | this item. This is akin to the TDTG tag  |
   |                |       | in ID3.                                  |
   | DATE_DIGITIZED | UTF-8 | The time that the item was transferred   |
   |                |       | to a digital medium. This is akin to the |
   |                |       | IDIT tag in RIFF.                        |
   | DATE_WRITTEN   | UTF-8 | The time that the writing of the         |
   |                |       | music/script began.                      |
   | DATE_PURCHASED | UTF-8 | Information on when the file was         |
   |                |       | purchased (see also Section 41.17).      |
   +----------------+-------+------------------------------------------+

41.13.  Spacial Information

   +----------------------+-------+------------------------------------+
   | Tag Name             | Type  | Description                        |
   +----------------------+-------+------------------------------------+
   | RECORDING_LOCATION   | UTF-8 | The location where the item was    |
   |                      |       | recorded. The countries            |
   |                      |       | corresponding to the string, same  |
   |                      |       | 2 octets as in Internet domains    |
   |                      |       | [112], or possibly ISO-3166 [113]. |
   |                      |       | This code is followed by a comma,  |
   |                      |       | then more detailed information     |
   |                      |       | such as state/province, another    |
   |                      |       | comma, and then city. For example, |
   |                      |       | "US, Texas, Austin". This will     |
   |                      |       | allow for easy sorting. It is okay |
   |                      |       | to only store the country, or the  |
   |                      |       | country and the state/province.    |
   |                      |       | More detailed information can be   |
   |                      |       | added after the city through the   |
   |                      |       | use of additional commas. In cases |
   |                      |       | where the province/state is        |
   |                      |       | unknown, but you want to store the |



Lhomme, et al.           Expires January 4, 2018              [Page 198]

Internet-Draft                  Matroska                       July 2017


   |                      |       | city, simply leave a space between |
   |                      |       | the two commas. For example, "US,  |
   |                      |       | , Austin".                         |
   | COMPOSITION_LOCATION | UTF-8 | Location that the item was         |
   |                      |       | originally designed/written. The   |
   |                      |       | countries corresponding to the     |
   |                      |       | string, same 2 octets as in        |
   |                      |       | Internet domains [114], or         |
   |                      |       | possibly ISO-3166 [115]. This code |
   |                      |       | is followed by a comma, then more  |
   |                      |       | detailed information such as       |
   |                      |       | state/province, another comma, and |
   |                      |       | then city. For example, "US,       |
   |                      |       | Texas, Austin". This will allow    |
   |                      |       | for easy sorting. It is okay to    |
   |                      |       | only store the country, or the     |
   |                      |       | country and the state/province.    |
   |                      |       | More detailed information can be   |
   |                      |       | added after the city through the   |
   |                      |       | use of additional commas. In cases |
   |                      |       | where the province/state is        |
   |                      |       | unknown, but you want to store the |
   |                      |       | city, simply leave a space between |
   |                      |       | the two commas. For example, "US,  |
   |                      |       | , Austin".                         |
   | COMPOSER_NATIONALITY | UTF-8 | Nationality of the main composer   |
   |                      |       | of the item, mostly for classical  |
   |                      |       | music. The countries corresponding |
   |                      |       | to the string, same 2 octets as in |
   |                      |       | Internet domains [116], or         |
   |                      |       | possibly ISO-3166 [117].           |
   +----------------------+-------+------------------------------------+

41.14.  Personal

















Lhomme, et al.           Expires January 4, 2018              [Page 199]

Internet-Draft                  Matroska                       July 2017


   +--------------+-------+--------------------------------------------+
   | Tag Name     | Type  | Description                                |
   +--------------+-------+--------------------------------------------+
   | COMMENT      | UTF-8 | Any comment related to the content.        |
   | PLAY_COUNTER | UTF-8 | The number of time the item has been       |
   |              |       | played.                                    |
   | RATING       | UTF-8 | A numeric value defining how much a person |
   |              |       | likes the song/movie. The number is        |
   |              |       | between 0 and 5 with decimal values        |
   |              |       | possible (e.g. 2.7), 5(.0) being the       |
   |              |       | highest possible rating. Other rating      |
   |              |       | systems with different ranges will have to |
   |              |       | be scaled.                                 |
   +--------------+-------+--------------------------------------------+

41.15.  Technical Information



































Lhomme, et al.           Expires January 4, 2018              [Page 200]

Internet-Draft                  Matroska                       July 2017


   +------------------+--------+---------------------------------------+
   | Tag Name         | Type   | Description                           |
   +------------------+--------+---------------------------------------+
   | ENCODER          | UTF-8  | The software or hardware used to      |
   |                  |        | encode this item. ("LAME" or "XviD")  |
   | ENCODER_SETTINGS | UTF-8  | A list of the settings used for       |
   |                  |        | encoding this item. No specific       |
   |                  |        | format.                               |
   | BPS              | UTF-8  | The average bits per second of the    |
   |                  |        | specified item. This is only the data |
   |                  |        | in the Blocks, and excludes headers   |
   |                  |        | and any container overhead.           |
   | FPS              | UTF-8  | The average frames per second of the  |
   |                  |        | specified item. This is typically the |
   |                  |        | average number of Blocks per second.  |
   |                  |        | In the event that lacing is used,     |
   |                  |        | each laced chunk is to be counted as  |
   |                  |        | a separate frame.                     |
   | BPM              | UTF-8  | Average number of beats per minute in |
   |                  |        | the complete target (e.g. a chapter). |
   |                  |        | Usually a decimal number.             |
   | MEASURE          | UTF-8  | In music, a measure is a unit of time |
   |                  |        | in Western music like "4/4". It       |
   |                  |        | represents a regular grouping of      |
   |                  |        | beats, a meter, as indicated in       |
   |                  |        | musical notation by the time          |
   |                  |        | signature.. The majority of the       |
   |                  |        | contemporary rock and pop music you   |
   |                  |        | hear on the radio these days is       |
   |                  |        | written in the 4/4 time signature.    |
   | TUNING           | UTF-8  | It is saved as a frequency in hertz   |
   |                  |        | to allow near-perfect tuning of       |
   |                  |        | instruments to the same tone as the   |
   |                  |        | musical piece (e.g. "441.34" in       |
   |                  |        | Hertz). The default value is 440.0    |
   |                  |        | Hz.                                   |
   | REPLAYGAIN_GAIN  | binary | The gain to apply to reach 89dB SPL   |
   |                  |        | on playback. This is based on the     |
   |                  |        | Replay Gain standard [118]. Note that |
   |                  |        | ReplayGain information can be found   |
   |                  |        | at all TargetType levels (track,      |
   |                  |        | album, etc).                          |
   | REPLAYGAIN_PEAK  | binary | The maximum absolute peak value of    |
   |                  |        | the item. This is based on the Replay |
   |                  |        | Gain standard [119].                  |
   +------------------+--------+---------------------------------------+





Lhomme, et al.           Expires January 4, 2018              [Page 201]

Internet-Draft                  Matroska                       July 2017


41.16.  Identifiers

   +----------------+--------+-----------------------------------------+
   | Tag Name       | Type   | Description                             |
   +----------------+--------+-----------------------------------------+
   | ISRC           | UTF-8  | The International Standard Recording    |
   |                |        | Code [120], excluding the "ISRC" prefix |
   |                |        | and including hyphens.                  |
   | MCDI           | binary | This is a binary dump of the TOC of the |
   |                |        | CDROM that this item was taken from.    |
   |                |        | This holds the same information as the  |
   |                |        | MCDI in ID3.                            |
   | ISBN           | UTF-8  | International Standard Book Number      |
   |                |        | [121]                                   |
   | BARCODE        | UTF-8  | EAN-13 [122] (European Article          |
   |                |        | Numbering) or UPC-A [123] (Universal    |
   |                |        | Product Code) bar code identifier       |
   | CATALOG_NUMBER | UTF-8  | A label-specific string used to         |
   |                |        | identify the release (TIC 01 for        |
   |                |        | example).                               |
   | LABEL_CODE     | UTF-8  | A 4-digit or 5-digit number to identify |
   |                |        | the record label, typically printed as  |
   |                |        | (LC) xxxx or (LC) 0xxxx on CDs medias   |
   |                |        | or covers (only the number is stored).  |
   | LCCN           | UTF-8  | Library of Congress Control Number      |
   |                |        | [124]                                   |
   +----------------+--------+-----------------------------------------+

41.17.  Commercial






















Lhomme, et al.           Expires January 4, 2018              [Page 202]

Internet-Draft                  Matroska                       July 2017


   +-------------------+-------+---------------------------------------+
   | Tag Name          | Type  | Description                           |
   +-------------------+-------+---------------------------------------+
   | PURCHASE_ITEM     | UTF-8 | URL to purchase this file. This is    |
   |                   |       | akin to the WPAY tag in ID3.          |
   | PURCHASE_INFO     | UTF-8 | Information on where to purchase this |
   |                   |       | album. This is akin to the WCOM tag   |
   |                   |       | in ID3.                               |
   | PURCHASE_OWNER    | UTF-8 | Information on the person who         |
   |                   |       | purchased the file. This is akin to   |
   |                   |       | the TOWN tag in ID3 [125].            |
   | PURCHASE_PRICE    | UTF-8 | The amount paid for entity. There     |
   |                   |       | SHOULD only be a numeric value in     |
   |                   |       | here. Only numbers, no letters or     |
   |                   |       | symbols other than ".". For instance, |
   |                   |       | you would store "15.59" instead of    |
   |                   |       | "$15.59USD".                          |
   | PURCHASE_CURRENCY | UTF-8 | The currency type used to pay for the |
   |                   |       | entity. Use ISO-4217 [126] for the 3  |
   |                   |       | letter currency code.                 |
   +-------------------+-------+---------------------------------------+

41.18.  Legal

   +----------------------+-------+------------------------------------+
   | Tag Name             | Type  | Description                        |
   +----------------------+-------+------------------------------------+
   | COPYRIGHT            | UTF-8 | The copyright information as per   |
   |                      |       | the copyright holder. This is akin |
   |                      |       | to the TCOP tag in ID3.            |
   | PRODUCTION_COPYRIGHT | UTF-8 | The copyright information as per   |
   |                      |       | the production copyright holder.   |
   |                      |       | This is akin to the TPRO tag in    |
   |                      |       | ID3.                               |
   | LICENSE              | UTF-8 | The license applied to the content |
   |                      |       | (like Creative Commons variants).  |
   | TERMS_OF_USE         | UTF-8 | The terms of use for this item.    |
   |                      |       | This is akin to the USER tag in    |
   |                      |       | ID3.                               |
   +----------------------+-------+------------------------------------+

41.19.  Notes

   o  In the Target list, a logical OR is applied on all tracks, a
      logical OR is applied on all chapters.  Then a logical AND is
      applied between the Tracks list and the Chapters list to know if
      an element belongs to this Target.




Lhomme, et al.           Expires January 4, 2018              [Page 203]

Internet-Draft                  Matroska                       July 2017


42.  Attachments

42.1.  Introduction

   Matroska supports storage of related files and data in the
   Attachments Top-Level Element.  Attachments can be used to store
   related cover art, font files, transcripts, reports, error recovery
   files, picture or text-based annotations, copies of specifications,
   or other ancilliary files related to the Segment.

   "Matroska Readers" MUST NOT execute files stored as Attachments.

42.2.  Cover Art

   This section defines a set of guidelines for the storage of cover art
   in Matroska files.  A "Matroska Reader" MAY use embedded cover art to
   display a representation still-image depiction of the multimedia
   contents of the Matroska file.

   Cover art SHOULD only use the JPEG and PNG picture formats.

   There can be 2 different covers for a movie/album.  A portrait one
   (like a DVD case) and a landscape one (like a banner ad for example,
   looking better on a wide screen).

   There can be 2 versions of the same cover, the "normal cover" and the
   "small cover".  The dimension of the "normal cover" SHOULD be 600 on
   the smallest side (for example, 960x600 for landscape, 600x800 for
   portrait, or 600x600 for square).  The dimension of the "small cover"
   SHOULD be 120 on the smallest side (for example, 192x120 or 120x160).

   Versions of cover art can be differentiated by the filename, which is
   stored in the "FileName Element".  The default filename of the
   "normal cover" in square or portrait mode is "cover.(jpg|png)".  When
   stored, the "normal cover" SHOULD be the first Attachment in storage
   order.  The "small cover" SHOULD be prefixed with "small_", such as
   "small_cover.(jpg|png)".  The landscape variant SHOULD be suffixed
   with "_land", such as "cover_land.(jpg|png)".  The filenames are case
   sensitive and SHOULD all be lower case.

   The following table provides examples of file names for cover art in
   Attachments.

   FileName | Image Orientation | Pixel Length of Smallest Side
   cover.jpg | Portrait or square | 600 small_cover.png | Portrait or
   square | 120 cover_land.png | Landscape | 600 small_cover_land.jpg |
   Landscape | 120




Lhomme, et al.           Expires January 4, 2018              [Page 204]

Internet-Draft                  Matroska                       July 2017


42.3.  Font files

43.  Cues

43.1.  Introduction

   The "Cues Element" provides an index of certain "Cluster Elements" to
   allow for optimized seeking to absolute timestamps within the
   "Segment".  The "Cues Element" contains one or many "CuePoint
   Elements" which each MUST reference an absolute timestamp (via the
   "CueTime Element"), a "Track" (via the "CueTrack Element"), and a
   "Segment Position" (via the "CueClusterPosition Element").
   Additional non-mandated Elements are part of the "CuePoint Element"
   such as "CueDuration", "CueRelativePosition", "CueCodecState" and
   others which provide any potential Matroska reader with additional
   information to use in the optimization of seeking performance.

43.2.  Recommendations

   The following recommendations are provided to optimize Matroska
   performance.

   o  Unless Matroska is used as a live stream, it SHOULD contain a
      "Cues Element".

   o  For each video track, each keyframe SHOULD be referenced by a
      "CuePoint Element".

   o  It is RECOMMENDED to not reference non-keyframes of video tracks
      in "Cues" unless it references a "Cluster Element" which contains
      a "CodecState Element" but no keyframes.

   o  For each subtitle track present, each subtitle frame SHOULD be
      referenced by a "CuePoint Element" with a "CueDuration Element".

   o  Audio tracks SHOULD only be referenced in "CuePoint Elements" if
      no video track is present.  In this case "CuePoint Elements"
      SHOULD reference audio keyframes at most once every 500
      milliseconds.

   o  If the referenced frame is not stored within the first
      "SimpleBlock" or first "BlockGroup" within its "Cluster Element",
      then the "CueRelativePosition Element" SHOULD be written to
      reference where in the "Cluster" the reference frame is stored.

   o  If a "CuePoint Element" references "Cluster Element" that includes
      a "CodecState Element", then that "CuePoint Element" MUST use a
      "CueCodecState Element".



Lhomme, et al.           Expires January 4, 2018              [Page 205]

Internet-Draft                  Matroska                       July 2017


   o  "CuePoint Elements" SHOULD be numerically sorted in storage order
      by the value of the "CueTime Element".

44.  Matroska Streaming

   There exist multiple ways to stream content.  The term streaming
   itself is very vague.  It means reading a file stored on a server.
   But the server could be very distant or very close.  The transport
   system and the protocol used for streaming makes the whole
   difference.

   In the case of Matroska, there are mostly 2 different kinds of
   stream: file access and live streaming.

45.  File Access

   File access can simply be reading a file located on your computer,
   but also accessing it from an HTTP (web) server or CIFS (windows
   share) server.  All these protocols are usually safe from reading
   errors and seeking in the stream is possible.  On other hand when the
   file is stored far away or on a slow server, seeking can be an
   expensive operation and SHOULD be avoided.  That's why we set a few
   guidelines [127] that, when followed, help reduce the number of
   seeking for regular playback and also have the playback start quickly
   without a lot of data needed to read first (like the Cues (index),
   Attachments or Meta Seek of all the Clusters).

   Matroska having a small overhead, it is well suited for storing
   music/videos on file servers without having a big impact on the
   bandwidth used.  It doesn't require to load the index before playing
   (the index can be loaded only when seeking is requested the first
   time), so playback can start very quickly too.

46.  Live Streaming

   Live streaming is the equivalent of TV broadcasting on the internet.
   There are 2 families of servers for that.  The RTP/RTSP ones and the
   HTTP servers.  Matroska is not meant to be used over RTP.  RTP
   already has timing and channel mechanisms that would wasted if
   doubled in Matroska.  On the other hand live streaming of Matroska
   over HTTP (or any other plain protocol based on TCP) is very
   possible.

   A live Matroska stream is different than a file, because it may have
   no known end (only when the client disconnects).  For that the
   Segment MUST use the "unknown" size (all 1s in the size).  The other
   option would be to concatenate Segments with known sizes one after
   the other.  This solution allows a change of codec/resolution between



Lhomme, et al.           Expires January 4, 2018              [Page 206]

Internet-Draft                  Matroska                       July 2017


   each segment which can be useful in some cases (switch between 4:3
   and 16:9 in some TV programs for example).

   The Segment(s) being continuous, certain elements like Meta Seek,
   Cues, Chapters, Attachments MUST NOT be used in this context.

   On the player side, it is possible to detect that a stream is not
   seekable.  If the stream does not have a Meta Seek list or a Cues
   list at the beginning of the stream, it SHOULD be considered as non
   seekable.  Even though it's still theoretically possible to seek
   blindly forward in the stream, if the server supports it.

   In the context of a live radio or even web TV it is possible to "Tag"
   the content that is currently playing.  The Tags level 1 element can
   be placed between Clusters each time necessary.  In that case, the
   new Tags found MUST reset the previously encountered tags and use the
   new values instead (be they empty).

47.  Menu Specifications

48.  Introduction

   This document is a _draft of the Menu system_ that will be the
   default one in Matroska.  As it will just be composed of a Control
   Track, it will be seen as a "codec" and could be replaced later by
   something else if needed.

   A menu is like what you see on DVDs, when you have some screens to
   select the audio format, subtitles or scene selection.

49.  Requirements

   What we'll try to have is a system that can do almost everything done
   on a DVD, or more, or better, or drop the unused features if
   necessary.

   As the name suggests, a Control Track is a track that can control the
   playback of the file and/or all the playback features.  To make it as
   simple as possible for players, the Control Track will just give
   orders to the player and get the actions associated with the
   highlights/hotspots.

49.1.  Highlights/Hotspots

   A highlight is basically a rectangle/key associated with an action
   UID.  When that rectangle/key is activated, the player send the UID
   of the action to the Control Track handler (codec).  The fact that it
   can also be a key means that even for audio only files, a keyboard



Lhomme, et al.           Expires January 4, 2018              [Page 207]

Internet-Draft                  Matroska                       July 2017


   shortcut or button panel could be used for menus.  But in that case,
   the hotspot will have to be associated with a name to display.

   So this highlight is sent from the Control Track to the Player.  Then
   the player has to handle that highlight until it's deactivated (see
   Playback features [128])

   The highlight contains a UID of the action, a displayable name (UTF-
   8), an associated key (list of keys to be defined, probably
   up/down/left/right/select), a screen position/range and an image to
   display.  The image will be displayed either when the user place the
   mouse over the rectangle (or any other shape), or when an option of
   the screen is selected (not activated).  There could be a second
   image used when the option is activated.  And there could be a third
   image that can serve as background.  This way you could have a still
   image (like in some DVDs) for the menu and behind that image blank
   video (small bitrate).

   When a highlight is activated by the user, the player has to send the
   UID of the action to the Control Track.  Then the Control Track codec
   will handle the action and possibly give new orders to the player.

   The format used for storing images SHOULD be extensible.  For the
   moment we'll use PNG and BMP, both with alpha channel.

49.2.  Playback features

   All the following features will be sent from the Control Track to the
   Player :

   o  Jump to chapter (UID, prev, next, number)

   o  Disable all tracks of a kind (audio, video, subtitle)

   o  Enable track UID (the kind doesn't matter)

   o  Define/Disable a highlight

   o  Enable/Disable jumping

   o  Enable/Disable track selection of a kind

   o  Select Edition ID (see chapters)

   o  Pause playback

   o  Stop playback




Lhomme, et al.           Expires January 4, 2018              [Page 208]

Internet-Draft                  Matroska                       July 2017


   o  Enable/Disable a Chapter UID

   o  Hide/Unhide a Chapter UID

   All the actions will be written in a normal Matroska track, with a
   timecode.  A "Menu Frame" SHOULD be able to contain more that one
   action/highlight for a given timecode. (to be determined, EBML format
   structure)

49.3.  Player requirements

   Some players might not support the control track.  That mean they
   will play the active/looped parts as part of the data.  So I suggest
   putting the active/looped parts of a movie at the end of a movie.
   When a Menu-aware player encounter the default Control Track of a
   Matroska file, the first order SHOULD be to jump at the start of the
   active/looped part of the movie.

50.  Working Graph

51.  Ideas

52.  Data Structure

   As a Matroska side project, the obvious choice for storing binary
   data is EBML.

53.  References

53.1.  Normative References

   [RFC3339]  Klyne, G. and C. Newman, "Date and Time on the Internet:
              Timestamps", RFC 3339, DOI 10.17487/RFC3339, July 2002,
              <http://www.rfc-editor.org/info/rfc3339>.

   [RFC6386]  Bankoski, J., Koleszar, J., Quillio, L., Salonen, J.,
              Wilkins, P., and Y. Xu, "VP8 Data Format and Decoding
              Guide", RFC 6386, DOI 10.17487/RFC6386, November 2011,
              <http://www.rfc-editor.org/info/rfc6386>.

53.2.  URIs

   [1] http://mukoli.free.fr/mcf/mcf.html

   [2] https://github.com/Matroska-Org/ebml-specification/blob/master/
       specification.markdown

   [3] https://datatracker.ietf.org/wg/cellar/charter/



Lhomme, et al.           Expires January 4, 2018              [Page 209]

Internet-Draft                  Matroska                       July 2017


   [4] https://matroska.org/files/matroska.pdf

   [5] diagram.md

   [6] https://github.com/Matroska-Org/ebml-specification/blob/master/
       specification.markdown

   [7] https://github.com/Matroska-Org/foundation-
       source/blob/master/spectool/specdata.xml

   [8] https://tools.ietf.org/html/rfc2119

   [9] https://github.com/Matroska-Org/ebml-specification/blob/master/
       specification.markdown

   [10] https://github.com/Matroska-Org/ebml-specification/blob/master/
        specification.markdown#ebml-element-types

   [11] https://github.com/Matroska-Org/ebml-specification/blob/master/
        specification.markdown#ebml-schema

   [12] https://github.com/Matroska-Org/ebml-specification/blob/master/
        specification.markdown#structure

   [13] https://www.loc.gov/standards/iso639-2/php/English_list.php

   [14] https://tools.ietf.org/html/bcp47

   [15] https://www.iana.org/domains/root/db

   [16] http://www.webmproject.org/docs/container/

   [17] http://www.matroska.org/downloads/test_w1.html

   [18] {{site.baseurl}}/index.html#Cluster

   [19] {{site.baseurl}}/index.html#Timecode

   [20] {{site.baseurl}}/notes.html#TimecodeScale

   [21] {{site.baseurl}}/index.html#Cluster

   [22] {{site.baseurl}}/index.html#Timecode

   [23] {{site.baseurl}}/notes.html#Encryption

   [24] {{site.baseurl}}/notes.html#unknown-elements




Lhomme, et al.           Expires January 4, 2018              [Page 210]

Internet-Draft                  Matroska                       July 2017


   [25] {{site.baseurl}}/index.html#Cluster

   [26] {{site.baseurl}}/index.html#Timecode

   [27] {{site.baseurl}}/index.html#TimecodeScale

   [28] {{site.baseurl}}/index.html#Cluster

   [29] {{site.baseurl}}/index.html#Timecode

   [30] {{site.baseurl}}/index.html#Cluster

   [31] {{site.baseurl}}/index.html#Timecode

   [32] {{site.baseurl}}/index.html#TrackTimeCodeScale

   [33] {{site.baseurl}}/notes.html#raw-timecode

   [34] {{site.baseurl}}/notes.html#timecode-types

   [35] {{site.baseurl}}/notes.html#matroska-version-indicators-
        doctypeversion-and-doctypereadversion

   [36] {{site.baseurl}}/index.html#StereoMode

   [37] {{site.baseurl}}/index.html#TrackOperation

   [38] {{site.baseurl}}/index.html#TrackCombinePlanes

   [39] {{site.baseurl}}/notes.html#track-operation

   [40] {{site.baseurl}}/index.html#StereoMode

   [41] {{site.baseurl}}/index.html#TrackOperation

   [42] {{site.baseurl}}/index.html#Void

   [43] {{site.baseurl}}/order_guidelines.html#tags-end

   [44] https://msdn.microsoft.com/en-us/library/windows/desktop/
        dd318229(v=vs.85).aspx

   [45] https://github.com/mbunkus/mkvtoolnix/blob/master/lib/librmff/
        librmff.h

   [46] https://github.com/mbunkus/mkvtoolnix/blob/master/lib/librmff/
        librmff.h




Lhomme, et al.           Expires January 4, 2018              [Page 211]

Internet-Draft                  Matroska                       July 2017


   [47] https://github.com/mbunkus/mkvtoolnix/blob/master/lib/librmff/
        librmff.h

   [48] https://github.com/mbunkus/mkvtoolnix/blob/master/lib/librmff/
        librmff.h

   [49] https://developer.apple.com/library/mac/documentation/QuickTime/
        QTFF/QTFFPreface/qtffPreface.html

   [50] {{site.baseurl}}/index.html#lacing

   [51] http://www.theora.org/doc/Theora.pdf

   [52] http://wiki.multimedia.cx/
        index.php?title=Apple_ProRes#Frame_layout

   [53] https://www.webmproject.org/vp9/

   [54] https://datatracker.ietf.org/doc/draft-niedermayer-cellar-ffv1/

   [55] http://alac.macosforge.org/trac/browser/trunk/
        ALACMagicCookieDescription.txt

   [56] {{site.baseurl}}/index.html#lacing

   [57] https://xiph.org/vorbis/doc/Vorbis_I_spec.html

   [58] https://xiph.org/vorbis/doc/v-comment.html

   [59] https://xiph.org/vorbis/doc/Vorbis_I_spec.html

   [60] http://flac.sourceforge.net/

   [61] https://github.com/mbunkus/mkvtoolnix/blob/master/lib/librmff/
        librmff.h

   [62] https://github.com/mbunkus/mkvtoolnix/blob/master/lib/librmff/
        librmff.h

   [63] https://github.com/mbunkus/mkvtoolnix/blob/master/lib/librmff/
        librmff.h

   [64] https://github.com/mbunkus/mkvtoolnix/blob/master/lib/librmff/
        librmff.h

   [65] https://github.com/mbunkus/mkvtoolnix/blob/master/lib/librmff/
        librmff.h




Lhomme, et al.           Expires January 4, 2018              [Page 212]

Internet-Draft                  Matroska                       July 2017


   [66] https://github.com/mbunkus/mkvtoolnix/blob/master/lib/librmff/
        librmff.h

   [67] http://msdn.microsoft.com/library/default.asp?url=/library/en-
        us/multimed/mmstr_625u.asp

   [68] https://developer.apple.com/library/mac/documentation/QuickTime/
        QTFF/QTFFPreface/qtffPreface.html

   [69] https://developer.apple.com/library/mac/documentation/QuickTime/
        QTFF/QTFFPreface/qtffPreface.html

   [70] https://developer.apple.com/library/mac/documentation/QuickTime/
        QTFF/QTFFPreface/qtffPreface.html

   [71] http://tausoft.org/

   [72] http://tausoft.org/wiki/True_Audio_Codec_Format

   [73] http://www.wavpack.com/

   [74] wavpack.html

   [75] {{site.baseurl}}/subtitles.html

   [76] {{site.baseurl}}/subtitles.html

   [77] {{site.baseurl}}/subtitles.html

   [78] {{site.baseurl}}/subtitles.html

   [79] {{site.baseurl}}/subtitles.html

   [80] {{site.baseurl}}/subtitles.html

   [81] {{site.baseurl}}/subtitles.html

   [82] {{site.baseurl}}/subtitles.html

   [83] http://wiki.xiph.org/index.php/OggKate#Matroska_mapping

   [84] http://dvd.sourceforge.net/dvdinfo/pci_pkt.html

   [85] http://dvd.sourceforge.net/dvdinfo/pci_pkt.html

   [86] {{site.baseurl}}/index.html#ChapProcessCodecID

   [87] {{site.baseurl}}/index.html#ChapProcessCodecID



Lhomme, et al.           Expires January 4, 2018              [Page 213]

Internet-Draft                  Matroska                       July 2017


   [88] {{site.baseurl}}/index.html#ChapterTranslateID

   [89] http://dvd.sourceforge.net/dvdinfo/uops.html

   [90] http://www.dvd-replica.com/DVD/

   [91] http://dvd.sourceforge.net/dvdinfo/

   [92] http://wiki.multimedia.cx/index.php?title=SubStation_Alpha

   [93] http://moodub.free.fr/video/ass-specs.doc

   [94] https://www.w3.org/

   [95] https://w3c.github.io/webvtt/

   [96] http://www.webmproject.org/docs/container/

   [97] http://www.matroska.org/files/tags/matroskatags.dtd

   [98] http://www.bunkus.org/videotools/mkvtoolnix/doc/
        mkvmerge.html#mkvmerge.tags

   [99] othertagsystems/comparetable.html

   [100] http://lcweb.loc.gov/standards/iso639-2/englangn.html#two

   [101] http://id3.org/id3v2.3.0#TPE1

   [102] http://id3.org/id3v2.3.0#TPE2

   [103] http://id3.org/id3v2.3.0#TCOM

   [104] http://id3.org/id3v2.3.0#TEXT

   [105] http://id3.org/id3v2.3.0#TPE3

   [106] http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/RIFF.html

   [107] http://id3.org/id3v2.3.0#TENC

   [108] http://id3.org/id3v2.3.0#TPE4

   [109] http://id3.org/id3v2.3.0#TPUB

   [110] http://id3.org/id3v2.3.0#TMED

   [111] http://www.icra.org/



Lhomme, et al.           Expires January 4, 2018              [Page 214]

Internet-Draft                  Matroska                       July 2017


   [112] http://www.iana.org/cctld/cctld-whois.htm

   [113] http://www.iso.org/iso/country_codes

   [114] http://www.iana.org/cctld/cctld-whois.htm

   [115] http://www.iso.org/iso/country_codes

   [116] http://www.iana.org/cctld/cctld-whois.htm

   [117] http://www.iso.org/iso/country_codes

   [118] http://www.replaygain.org/

   [119] http://www.replaygain.org/

   [120] http://www.ifpi.org/isrc/isrc_handbook.html#Heading198

   [121] http://www.isbn-international.org/

   [122] http://www.ean-int.org/

   [123] http://www.uc-council.org/

   [124] http://www.loc.gov/marc/lccn.html

   [125] http://id3.org/id3v2.3.0#TOWN

   [126] http://www.xe.com/iso4217.htm

   [127] {{site.baseurl}}/index.html

   [128] {{site.baseurl}}/chapters/menu.html#playback-features

Authors' Addresses

   Steve Lhomme

   Email: slhomme@matroska.org


   Moritz Bunkus

   Email: moritz@bunkus.org







Lhomme, et al.           Expires January 4, 2018              [Page 215]

Internet-Draft                  Matroska                       July 2017


   Dave Rice

   Email: dave@dericed.com
















































Lhomme, et al.           Expires January 4, 2018              [Page 216]
