

SIMPLE                                                      J. Rosenberg
Internet-Draft                                               dynamicsoft
Expires: December 22, 2003                                 June 23, 2003


 Extensible Markup Language (XML) Configuration Access Protocol (XCAP)
               Usages for Setting Presence Authorization
                  draft-ietf-simple-xcap-auth-usage-00

Status of this Memo

   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC2026.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups. Note that other
   groups may also distribute working documents as Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time. It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at http://
   www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on December 22, 2003.

Copyright Notice

   Copyright (C) The Internet Society (2003). All Rights Reserved.

Abstract

   This document describes three usages of the Extensible Markup
   Language (XML) Configuration Access Protocol (XCAP) that allow a
   client to provide authorization decisions regarding watchers of their
   presence. The first of these usages, called permission-statements,
   contains statements about what permissions are to be granted to
   watchers of presence. The second of these usages, called
   compound-permissions, allows a client to define new permissions as
   combinations of other defined permissions. The third usage, called
   supported-permissions, allows a client to determine what permissions
   are understood by the provider.





Rosenberg              Expires December 22, 2003                [Page 1]

Internet-Draft        XCAP Usage for Authorization             June 2003


Table of Contents

   1.        Introduction . . . . . . . . . . . . . . . . . . . . . .  4
   2.        Structuring Presence Authorization . . . . . . . . . . .  5
   3.        Terminology  . . . . . . . . . . . . . . . . . . . . . .  6
   4.        Permission Statements  . . . . . . . . . . . . . . . . .  7
   4.1       Application Unique ID  . . . . . . . . . . . . . . . . .  7
   4.2       Structure of Permission Statements . . . . . . . . . . .  7
   4.2.1     Applying Statements to Watchers  . . . . . . . . . . . .  7
   4.2.2     Specifying Permissions . . . . . . . . . . . . . . . . .  9
   4.2.2.1   Acceptance Permissions . . . . . . . . . . . . . . . . . 10
   4.2.2.2   Rule Permissions . . . . . . . . . . . . . . . . . . . . 12
   4.2.2.2.1 Identifying Elements and Indicating Values . . . . . . . 13
   4.2.2.2.2 Examples . . . . . . . . . . . . . . . . . . . . . . . . 14
   4.2.2.3   Content Permissions  . . . . . . . . . . . . . . . . . . 15
   4.2.2.3.1 Examples . . . . . . . . . . . . . . . . . . . . . . . . 17
   4.2.2.4   Transformational Permissions . . . . . . . . . . . . . . 18
   4.2.2.4.1 Examples . . . . . . . . . . . . . . . . . . . . . . . . 18
   4.3       Additional Constraints . . . . . . . . . . . . . . . . . 19
   4.4       Naming Conventions . . . . . . . . . . . . . . . . . . . 20
   4.5       Authorization Policies . . . . . . . . . . . . . . . . . 20
   4.6       XML Schema . . . . . . . . . . . . . . . . . . . . . . . 20
   5.        Compound Permissions . . . . . . . . . . . . . . . . . . 27
   5.1       Application Unique ID  . . . . . . . . . . . . . . . . . 27
   5.2       Structure of Compound Permissions  . . . . . . . . . . . 27
   5.3       Naming Conventions . . . . . . . . . . . . . . . . . . . 27
   5.4       Authorization Policies . . . . . . . . . . . . . . . . . 27
   5.5       XML Schema . . . . . . . . . . . . . . . . . . . . . . . 28
   5.6       Example Document . . . . . . . . . . . . . . . . . . . . 28
   6.        Supported Permissions  . . . . . . . . . . . . . . . . . 30
   6.1       Application Unique ID  . . . . . . . . . . . . . . . . . 30
   6.2       Structure of Supported Permissions . . . . . . . . . . . 30
   6.3       Naming Conventions . . . . . . . . . . . . . . . . . . . 31
   6.4       Authorization Policies . . . . . . . . . . . . . . . . . 31
   6.5       XML Schema . . . . . . . . . . . . . . . . . . . . . . . 31
   6.6       Example Document . . . . . . . . . . . . . . . . . . . . 32
   7.        IANA Considerations  . . . . . . . . . . . . . . . . . . 34
   7.1       XCAP Application Usage IDs . . . . . . . . . . . . . . . 34
   7.1.1     Permission Statements  . . . . . . . . . . . . . . . . . 34
   7.1.2     Compound Permissions . . . . . . . . . . . . . . . . . . 34
   7.1.3     Supported Permissions  . . . . . . . . . . . . . . . . . 34
   7.2       URN Sub-Namespace Registrations  . . . . . . . . . . . . 34
   7.2.1     urn:ietf:params:xml:ns:permission-statements . . . . . . 34
   7.2.2     urn:ietf:params:xml:ns:compound-permissions  . . . . . . 35
   7.2.3     urn:ietf:params:xml:ns:supported-permissions . . . . . . 36
   7.3       XML Schema Registrations . . . . . . . . . . . . . . . . 37
   7.3.1     Permissions Statements . . . . . . . . . . . . . . . . . 37
   7.3.2     Compound Permissions . . . . . . . . . . . . . . . . . . 37



Rosenberg              Expires December 22, 2003                [Page 2]

Internet-Draft        XCAP Usage for Authorization             June 2003


   7.3.3     Supported Permissions  . . . . . . . . . . . . . . . . . 37
             Normative References . . . . . . . . . . . . . . . . . . 38
             Informative References . . . . . . . . . . . . . . . . . 39
             Author's Address . . . . . . . . . . . . . . . . . . . . 39
             Intellectual Property and Copyright Statements . . . . . 40














































Rosenberg              Expires December 22, 2003                [Page 3]

Internet-Draft        XCAP Usage for Authorization             June 2003


1. Introduction

   The Session Initiation Protocol (SIP) for Instant Messaging and
   Presence (SIMPLE) specifications allow a user, called a watcher, to
   subscribe to another user, called a presentity [12], in order to
   learn their presence information [13]. This subscription is handed by
   a presence agent. In order to process the subscription, the presence
   agent must make a determination about whether the subscription is
   authorized. This authorization decision includes whether or not to
   accept the subscription, but also includes decisions about when the
   watcher should receive notifications, and when it does receive them,
   what the content of those notifications should be.

   Typically, the authorization decision will be a combination of the
   authorization policies of the provider, combined with the
   authorization policices of the presentity. In order for the PA to
   compute the final authorization decision, it needs access to the
   presentity's authorization policies.

   In order to provide this access, the XML Configuration Access
   Protocol (XCAP) [2] is used. XCAP allows a client to manipulate XML
   documents stored on a server. Those XML documents represent per-user
   provisioning data on how an application should operate. XCAP has the
   notion of an application usage, which is a definition of the XML
   schema used by a particular application, along with other relevant
   information. Each application usage is given a unique application
   usage ID (AUID) which identifies it. This specification makes use of
   three application usages.























Rosenberg              Expires December 22, 2003                [Page 4]

Internet-Draft        XCAP Usage for Authorization             June 2003


2. Structuring Presence Authorization

   This specification defines three application usages (each with their
   own XML schema) that, put together, present a comprehensive solution
   for allowing clients to specify authorization policies that a PA can
   use when processing a subscription. The first of these application
   usages has the AUID of permission-statements. This usage allows a
   client to make statements about which permissions are granted to
   which watchers. Each statement contains a definition of the watchers
   to whom it applies, and then contains a list of permissions which are
   granted to those watchers. The concept of a permission is central to
   this specification. A permission is an atomic statement of consent or
   denial. A permission can indicate a condition under which a
   subscription is accepted or rejected, a condition under which a
   notification is or is not sent, or a piece of information which is or
   is not revealed in a presence document. The overall authorization for
   a watcher is represented by the union of the permissions granted to
   that watcher.

   Permissions can be classified as either primitive or compound. A
   primitive permission is one of the permissions defined in this
   specification. A compound permission is a new permission that is
   defined as a combination of other primitive or compound permissions.
   As an example, the "grant-phone" permission might be a compound
   permission which accepts the subscription, sends a watcher
   notifications when the status of the user's phone changes, and those
   notifications contain the status of the phone. As a result, to
   facilitate ease of use, a second application usage is defined, which
   allows a user to construct new compound permissions.

   This specification contains a fairly broad set of primitive
   permissions. It is anticipated that new ones will be standardized in
   the future. It is also anticipated that vendors will define
   proprietary permissions. In order for a client to connect to a
   server, and achieve interoperability, it is neccesary for the client
   to know what permissions are supported by the server. The third
   application usage, supported-permissions, allows a client to read the
   list of permissions understood by the server.













Rosenberg              Expires December 22, 2003                [Page 5]

Internet-Draft        XCAP Usage for Authorization             June 2003


3. Terminology

   In this document, the key words "MUST", "MUST NOT", "REQUIRED",
   "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
   and "OPTIONAL" are to be interpreted as described in RFC 2119 [1] and
   indicate requirement levels for compliant implementations.













































Rosenberg              Expires December 22, 2003                [Page 6]

Internet-Draft        XCAP Usage for Authorization             June 2003


4. Permission Statements

4.1 Application Unique ID

   XCAP requires application usages to define a unique application usage
   ID (AUID) in either the IETF tree or a vendor tree. This
   specification defines the "permission-statements" AUID within the
   IETF tree, via the IANA registration in Section 7.

4.2 Structure of Permission Statements

   A permission statement is an XML [3] document that MUST be
   well-formed and SHOULD be valid. Permission statement documents MUST
   be based on XML 1.0 and MUST be encoded using UTF-8. This
   specification makes use of XML namespaces for identifying permission
   statement documents and document fragments. The namespace URI for
   elements defined for this purpose is a URN [5], using the namespace
   identifier 'ietf' defined by [7] and extended by [11]. This URN is:

      urn:ietf:params:xml:ns:permission-statements

   A permission statement document begins with the root element tag
   "permission-statements".  It consists of any number of "statement"
   elements. Each statement element defines a set of permissions and
   identifies to whom they are granted.

   Each "statement" element has a single attribute:

   id: This is a string which serves as a way to uniquely identify
      statements in the document. The attribute MUST be unique amongst
      all statement elements in the document. This attribute is
      mandatory.

   Each statement is composed of a single "applies-to" element and a
   single "permissions" element. The "permissions" element is composed
   of one or more elements that grant permissions.

4.2.1 Applying Statements to Watchers

   The "applies-to" element defines the set of watchers to whom the
   statement applies. It contains one or more "uri" elements, "domain"
   elements, "on-list" elements or a single "any" element. The "uri"
   element identifies a single watcher by specifying its URI. The
   "domain" element says that the statement applies to all watchers from
   the specified domain. The "on-list" element says that the statement
   applies to all users on the specified presence list [16], identified
   with an HTTP URI that points to the list. Finally, the "any" element
   says that the statement applies to all watchers. Additional elements



Rosenberg              Expires December 22, 2003                [Page 7]

Internet-Draft        XCAP Usage for Authorization             June 2003


   can be added that express other ways of identifying the watchers to
   whom the statement applies.

   The "uri", "domain", "on-list" and "any" elements all have the
   following attributes:

   id: This is a string which serves as a way to uniquely identify an
      instance of this element within the enclosing "applies-to"
      element. The attribute MUST be unique amongst all elements of the
      same name within the enclosing "applies-to" element. This
      attribute is mandatory.

   display-name: This is a string that contains a display name, suitable
      for rendering to a human user, the identity of the user or domain
      implied by the element. This attribute is optional.

   lang: This attribute identifies the language used to represent the
      display name. It is imported from the XML namespace. This
      attribute is optional.

   When a subscription arrives at the PA, the PA performs an
   authentication operation to determine the identity of the watcher. It
   then uses the "applies-to" element in each statement within the
   presentity's document, and determines the set of statements that
   apply to the watcher. It is possible that multiple statements can
   match a single subscription. In that case, the union of the
   permissions across those statements is applied to the subscription.
   It is also possible that none of the statements match, in which case
   the subscription is considered "pending".

      OPEN ISSUE: Another model is that you take permissions for the
      most specific match. I think union makes more sense in the model
      where the entries in the statement are permissions.

   For example, the following XML fragment includes two statements, one
   that applies to the user joe@example.com, and another that applies to
   example.com. When Joe subscribes, both statements match. Therefore,
   he is granted the union of the permissions across the two statements.













Rosenberg              Expires December 22, 2003                [Page 8]

Internet-Draft        XCAP Usage for Authorization             June 2003


   <?xml version="1.0" encoding="UTF-8"?>
   <permission-statements>
     <statement id="as8f">
       <applies-to>
         <uri>sip:joe@example.com</uri>
       </applies-to>

       <permissions>
        <!-- permissions for joe go here -->
       </permissions>

     </statement>

     <statement id="kgg8a">
       <applies-to>
         <domain>example.com</domain>
       </applies-to>

       <permissions>
         <!-- permissions for example.com go here -->
       </permissions>
     </statement>

   </permission-statements>


4.2.2 Specifying Permissions

   The remainder of the content of the "statement" element contains
   specific permissions that are granted to watchers to whom the
   statement applies. Each permission is represented by a single XML
   element. Permissions can be primitive or they can be compound. A
   primitive permission is one that explicitly defines the permission
   that is being granted. A compound permission is a collection of other
   permissions, both compound and primitive. Compound permissions are a
   useful way of grouping permissions in order to simplify the overall
   user interface.

   Primitive permissions can be grouped broadly into three categories:

   1.  Acceptance permissions allow the watcher to subscribe. Without an
       acceptance permission, a subscription is rejected outright.

   2.  Rule permissions indicate conditions on which a notification is
       sent. Whenever there is a change in the presence of a user, the
       presence agent will check to see if any rule permissions apply.
       If any of them do, a notification is sent. This of course,
       assumes that the subscription had an acceptance permission in the



Rosenberg              Expires December 22, 2003                [Page 9]

Internet-Draft        XCAP Usage for Authorization             June 2003


       first place.

   3.  Content permissions indicate which information the watcher is
       permitted to see, in the event a notification is sent in the
       first place (based on the rule permissions).

   4.  Transformational permissions indicate any changes that should be
       made to information sent to a watcher. This, of course, assumes
       that the information is to be transmitted to the watcher in the
       first place (based on the content permissions).


4.2.2.1 Acceptance Permissions

   Acceptance permissions grant the ability of the watcher to subscribe
   to the presentity. Without an acceptance permission, none of the
   other permissions make any sense. There are only two primitive
   acceptance permissions, each of which is an XML element. These are
   "accept" and "accept-if". The "accept" element has no content and no
   attributes. It simply grants permission to the watcher to subscribe.
   Only one such element can be present in any statement. The
   "accept-if" element also grants permission to subscribe, but the
   granting of this permissions is predicated on some condition. The
   content of the "accept-if" element is a condition element. Condition
   elements describe characteristics of the subscription, or of the
   operating environment of the server, which are either true or false.
   If the condition within the "accept-if" element is true, an
   acceptance permission is granted.

   The first condition element is "and". This condition evaluates to
   true if all of the conditions contained within it evaluate to true.
   The second condition element is "or". This condition evaluates to
   true if any of the conditions contained within it evaluate to true.
   The third condition element is "not". This condition evaluates to
   true if the single condition contained within it evaluates to false.
   These basic boolean types, which can themselves be composed, allow
   for statements of fairly complex conditions under which a
   subscription should be granted.

   The following represent the "atomic" conditions which can be checked:

   requested-namespace: This element has a value that contains a URI
      identifying an XML namespace. The condition evaluates to true if
      the subscription request explicitly contained a filter which
      requested the PA to include elements from that namespace within
      its notifications.





Rosenberg              Expires December 22, 2003               [Page 10]

Internet-Draft        XCAP Usage for Authorization             June 2003


   requested-element: This element has a value that contains a string
      identifying an XML element. The condition evaluates to true if the
      subscription request explicitly contained a filter which requested
      the PA to include elements of that name within its notifications.

   requested-tuple: This element has a value that contains a string
      whose value is a tuple ID [14]. The condition evaluates to true if
      the subscription request explicitly contained a filter which
      requested the PA to include tuples with that tuple ID within its
      notifications.

   duration: This element has a value that contains an integer,
      representing a number of seconds. The condition evaluates to true
      if the subscription request was for a duration less than or equal
      to this value. This condition is handy for allowing watchers the
      ability only to fetch presence documents. This is done by setting
      this condition to zero.

   auth-mechanism: This element contains an enumerated type that
      describes authentication mechanisms. The defined values are none,
      digest (referring to the HTTP digest [8] mechanism used in RFC
      3261 [9]), smime (referring to SIP's S/MIME authentication), tls
      (meaning that the watcher authenticated themself using a client
      certificate in a mutual TLS exchange with the server), and
      p-asserted-id (as defined in RFC 3325 [15]). The condition
      evaluates to true if the client was authenticated using the listed
      algorithm.

   anonymous: This element contains no values. The condition evaluates
      to true if the watcher is anonymous. They are considered anonymous
      if the From header field of the request is equal to "Anonymous".
      Note that a user can be anonymous and also have authenticated
      themselves with digest. This occurs when the "anonymous" username
      and password, as defined in RFC 3261 [9], are used.

   can-encrypt: This element contains no values. The condition evaluates
      to true if it is possible to encrypt, using S/MIME, notifications
      sent to this watcher. Generally, this can be determined when the
      Accept header field in the subscription indicates support for the
      application/pkcs7-mime [10] MIME type.

   As an example, the following statement grants permission for watcher
   sip:joe@example.com to subscribe if he authenticates with digest and
   doesn't ask to be notified of phone state:







Rosenberg              Expires December 22, 2003               [Page 11]

Internet-Draft        XCAP Usage for Authorization             June 2003


   <?xml version="1.0" encoding="UTF-8"?>
   <permission-statements>
     <statement id="as8f">
       <applies-to>
         <uri>sip:joe@example.com</uri>
       </applies-to>

       <permissions
         <accept-if>
          <and>
            <auth-mechanism>digest</auth-mechanism>
            <not><requested-namespace>
              urn:ietf:params:xml:ns:pidf:common-phone-state
            </requested-namespace></not>
          </and>
         </accept-if>
       </permissions>


     </statement>
   </permission-statements>

      OPEN ISSUE: It is possible to eliminate the notion of "applies-to"
      by folding it into accept-if, and allowing conditions to be used
      in granting other forms of permissions. I preferred the model of a
      separate applies-to because it allowed us to break the XML
      document into sets of statements, each of which could apply to
      totally different watchers, and therefore manipulated
      independently of each other. This made it more amenable to usage
      with XCAP without requiring locks. In terms of allowing conditions
      to be used with the other permission types, that can be added in
      the future, but seemed to be overly complex for this
      specification.


4.2.2.2 Rule Permissions

   Rule permissions grant the watcher the ability to receive a
   notification when there is a state change of some sort. Each
   permission specifies a condition under which a state change will
   cause a notification to be sent. Generally, these conditions are
   checks on the values of the attributes that have changed.

   Each permission is associated with an XML element. The elements
   defined in this specification are:






Rosenberg              Expires December 22, 2003               [Page 12]

Internet-Draft        XCAP Usage for Authorization             June 2003


   any-event: This element has no attributes and no content. It grants
      permission for the watcher to see all presence state changes.

   enter-state: This element indicates that a watcher is permitted to
      receive notifications when a particular piece of presence
      information changes to the specified value. The content of this
      element is a "state" element. A "state" element has two parts. One
      identifies the particular piece of presence information, and the
      other specifies its value.

   exit-state: This element indicates that a watcher is permitted to
      receive notifications when a particular piece of presence
      information changes from the specified value. The content of this
      element is also a "state" element.

   transition: This element indicates that a watcher is permitted to
      receive notifications when a particular piece of presence
      information changes from one value to another value. The content
      of this element are three XML elements - one that identifies the
      piece of presence information (using either the "element-name" or
      "element-path" elements, discussed below), one (called "value")
      that indicates the original value, and another "value" element
      that indicates the value that it changed to.

   change-in: This element indicates that a watcher is permitted to
      receive notifications triggered by a change in the value of the
      specified piece of presence information. The value of the element
      is an identifier for a particular piece of presence information
      (using either the "element-name" or "element-path" elements).

   equals: This element indicates that a watcher is permitted to receive
      notifications while a particular piece of presence information has
      a particular value. As an example, a presentity can indicate that
      a watcher should receive notifications of changes in phone state
      while the basic status is open, but notifications are not sent
      when the value of basic status is closed. The content of this
      element is a "state" element.

   subscription-state: This element indicates that a watcher is
      permitted to receive notifications that convey changes in the
      state of the subscription itself. It has no attributes or content.


4.2.2.2.1 Identifying Elements and Indicating Values

   A key component of most of these rule permissions is the ability to
   identify a piece of presence information and indicate a value for it.
   This function is provided by several XML elements.



Rosenberg              Expires December 22, 2003               [Page 13]

Internet-Draft        XCAP Usage for Authorization             June 2003


   The first issue is to identify a piece of presence information. This
   specification provides two ways to identify a piece of presence
   information. The first is with the "element-name" element. This
   element, which has no attributes, contains, as a value, the name of
   an XML element. This is a reference to any instances in the presence
   document where this element would occur. It is also a reference to
   the ways in which that element is used as an input to the computation
   of other elements. For example, if the rule permission says that a
   watcher will receive notifications when "call-state" elements change,
   that implies that they are also permitted to receive notifications
   when there is a change in some other element, such as the PIDF
   "basic" element, when that change is a direct result of a change in
   the "call-state" element. In this regard, the "element-name" doesn't
   address a specific element in an XML document as much as a raw piece
   of presence data.

   The second way to address an XML element is with XPath [4]. This is
   done using the "element-path" element. This element has no
   attributes, and its content is a valid location-set XPath expression
   that points to components of a presence document. In this case, the
   expression refers to the actual XML document components, rather than
   the raw data they represent.

   The "state" element is composed of either the "element-name" or
   "element-path" elements, followed by the "value" element. The "value"
   element has no attributes, and its content is a string containing the
   value of the element identified by the "element-name" or
   "element-path". In the latter case, the XPath expression MUST refer
   to a single attribute or a single element with text content.

4.2.2.2.2 Examples

   The following XML document specifies a rule permission that specifies
   that a watcher should receive notifications only when the basic
   status changes:
















Rosenberg              Expires December 22, 2003               [Page 14]

Internet-Draft        XCAP Usage for Authorization             June 2003


   <?xml version="1.0" encoding="UTF-8"?>
   <permission-statements
     xmlns:pidf="urn:ietf:params:xml:ns:pidf">
     <statement id="as8f">
       <applies-to>
         <uri>sip:joe@example.com</uri>
       </applies-to>

       <permissions>
         <accept/>
         <change-in>pidf:basic</change-in>
       </permissions>

     </statement>
   </permission-statements>

   This document says that a watcher should receive notifications only
   when the "placetype" element is equal to "home". This is useful as a
   permission to apply to watchers that are friends - they will receive
   no notifications while you are at work, and only receive them when
   you are at home:


   <?xml version="1.0" encoding="UTF-8"?>
   <permission-statements
     xmlns:rpids="urn:ietf:params:xml:ns:sip-rpids">
     <statement id="as8f">
       <applies-to>
         <uri>sip:joe@example.com</uri>
       </applies-to>

       <permissions>
         <accept/>
         <equals>
          <state>
            <element-name>rpids:placetype</element-name>
            <value>home</value>
          </state>
         <equals>
       </permissions>

     </statement>
   </permission-statements>


4.2.2.3 Content Permissions

   Content permissions specify the information that is to be sent to a



Rosenberg              Expires December 22, 2003               [Page 15]

Internet-Draft        XCAP Usage for Authorization             June 2003


   watcher. Each permission specifies a piece of information that is to
   be sent, or to be used in general in the computation of the presence
   document. The defined permissions are:

   all-content: This permission specifies that all presence information
      can be sent. The element has no attributes or value.

   show-contact-element: This permission specifies that the contact
      component of the tuple can be sent. The element has no attributes
      or value.

   show-note: This permission specifies that the note component of the
      tuple can be sent. The element has no attributes or value.

   show-tuple: This permission specifies that the tuple identified by
      the element can be sent to the watcher. The element has not
      attributes. Its content is a string that matches the tuple "id"
      attribute in the presence document.

   show-element: This permission specifies that the XML element
      identified by "show-element" can be sent to the watcher. The
      content of "show-element" is either the "element-name" or
      "element-path" elements as defined above. If the "element-name" is
      used, it means that the specified element can be "presented" to
      the watcher, where "presented" implies that they are either
      present in the XML document, or used as part of the derivation of
      other presence data. Otherwise, if the "element-path" is used, it
      means that the specified element can be present in the document
      sent to the watcher.

   show-namespace: This permission specifies that elements and
      attributes in the presence document within the specified namespace
      can be presented to the watcher. Here, "presented" implies that
      they are either present in the XML document, or used as part of
      the derivation of other presence data.

   show-values: This permission specifies that an element of the
      presence document can only be "presented", per the above
      definition, if it has the specified value. The content of this
      element is an "element-name" element followed by a "value"
      element.

   encrypt: This permission specifies that the presence document should
      be sent to the watcher encrypted. It should never be present in a
      statement without the presence of an "accept-if" element which
      conditions acceptance of the subscription on the ability of the
      watcher to receive encrypted presence documents.




Rosenberg              Expires December 22, 2003               [Page 16]

Internet-Draft        XCAP Usage for Authorization             June 2003


4.2.2.3.1 Examples

   The following example specifies that a watcher is only allowed to see
   baseline pidf information:


   <?xml version="1.0" encoding="UTF-8"?>
   <permission-statements
     xmlns:pidf="urn:ietf:params:xml:ns:pidf">
     <statement id="as8f">
       <applies-to>
         <uri>sip:joe@example.com</uri>
       </applies-to>

       <permissions>
         <accept/>
         <show-namespace>urn:ietf:params:xml:ns:pidf</show-namespace>
         <any-event/>
       </permissions>

     </statement>
   </permission-statements>

   The following example shows that the watcher is allowed to see PIDF
   information along with the placetype element from RPIDS:


   <?xml version="1.0" encoding="UTF-8"?>
   <permission-statements
     xmlns:pidf="urn:ietf:params:xml:ns:pidf"
     xmlns:rpids="urn:ietf:params:xml:ns:sip-rpids">
     <statement id="as8f">
       <applies-to>
         <uri>sip:joe@example.com</uri>
       </applies-to>

       <permissions>
         <accept/>
         <show-namespace>urn:ietf:params:xml:ns:pidf</show-namespace>
         <show-element>
           <element-name>rpids:placetype</element-name>
         </show-element>
         <any-event/>
       </permissions>

     </statement>
   </permission-statements>




Rosenberg              Expires December 22, 2003               [Page 17]

Internet-Draft        XCAP Usage for Authorization             June 2003


4.2.2.4 Transformational Permissions

   Transformational permissions specify explicit ways in which the
   presence document is changed before it is presented to a watcher.
   Generally, this is useful for allowing a presentity to "lie" in the
   information sent to a watcher.

   The permissions defined in this specification are:

   set-document: This permission indicates that the specified presence
      document should be sent to the watcher. The value of the element
      is a valid PIDF document.

   set-element: This permission indicates that the specified element
      should be set to the specified value. The value of this element is
      a "state" element.

   change-element-from: This permission indicates that the specified
      element, when its value is as indicated, should change to the
      specified value. Its content is either "element-name" or
      "element-path", followed by two "value" elements.

   When the transformations specified by these attributes overlap, the
   sequence of the operations is important. The "change-element-from"
   are done first, followed by "set-element", followed by
   "set-document".


4.2.2.4.1 Examples

   The following document specifies that the "activity" element from
   rpids should always be set to "active":



















Rosenberg              Expires December 22, 2003               [Page 18]

Internet-Draft        XCAP Usage for Authorization             June 2003


   <?xml version="1.0" encoding="UTF-8"?>
   <permission-statements
     xmlns:pidf="urn:ietf:params:xml:ns:pidf"
     xmlns:rpids="urn:ietf:params:xml:ns:sip-rpids">
     <statement id="as8f">
       <applies-to>
         <uri>sip:joe@example.com</uri>
       </applies-to>

       <permissions>
         <accept/>
         <show-namespace>urn:ietf:params:xml:ns:pidf</show-namespace>
         <show-namespace>urn:ietf:params:xml:ns:sip-rpids</show-namespace>
         <any-event/>
         <set-element>
          <state>
           <element-name>rpids:activity</element-name>
           <value>active</value>
          </state>
         </set-element>
       </permissions>


     </statement>
   </permission-statements>


4.3 Additional Constraints

   The following are additional constraints not described by the schema:

   o  The content of an "element-path" element MUST be a valid Xpath
      expression that contains a location-set. [[OPEN ISSUE: Is there a
      way to express this in the schema?]]

   o  The content of an "element-name" element indicates the name of an
      XML element, and may be fully qualified (i.e., prefixed with a
      namespace identifier followed by a colon).

   o  The value of the "domain" element MUST be compliant to the BNF for
      "host" as defined in RFC 3261 [9].

   o  The value of the "on-list" element MUST be a valid HTTP URI that
      represents a presence list, as defined in [16].

   o  TODO: Complete this list.





Rosenberg              Expires December 22, 2003               [Page 19]

Internet-Draft        XCAP Usage for Authorization             June 2003


4.4 Naming Conventions

   When a presence agent receives a subscription for some user foo
   within a domain, it will look for all documents within http://[xcap
   root services uri]/permission-statements/users/foo, and use all
   documents found beneath that point to guide authorization policy.

4.5 Authorization Policies

   This application usage does not modify the default XCAP authorization
   policy, which is that only a user can read, write or modify their own
   documents. A server can allow priveleged users to modify documents
   that they don't own, but the establishment and indication of such
   policies is outside the scope of this document.

4.6 XML Schema


   <?xml version="1.0" encoding="UTF-8"?>
   <!-- edited with XML Spy v4.3 U (http://www.xmlspy.com) by Jonathan Rosenberg (Dynamicsoft Inc) -->
   <xs:schema targetNamespace="urn:ietf:params:xml:ns:permission-statements" xmlns="urn:ietf:params:xml:ns:permission-statements" xmlns:pidf="urn:ietf:params:xml:ns:pidf" xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
     <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="http://www.w3.org/2001/xml.xsd"/>
     <xs:import namespace="urn:ietf:params:xml:ns:pidf" schemaLocation="pidf.xsd"/>
     <xs:element name="permission-statements">
       <xs:annotation>
         <xs:documentation>Comment describing your root element</xs:documentation>
       </xs:annotation>
       <xs:complexType>
         <xs:sequence minOccurs="0" maxOccurs="unbounded">
           <xs:element name="statement">
             <xs:complexType>
               <xs:sequence>
                 <xs:element name="applies-to" type="applies-toType"/>
                 <xs:element name="permissions" type="permissionsType"/>
               </xs:sequence>
               <xs:attribute name="id" type="xs:string" use="required"/>
             </xs:complexType>
           </xs:element>
         </xs:sequence>
       </xs:complexType>
     </xs:element>
     <xs:complexType name="permissionsType">
       <xs:sequence>
         <xs:sequence>
           <xs:annotation>
             <xs:documentation>Acceptance Permissions</xs:documentation>
           </xs:annotation>
           <xs:element name="accept" minOccurs="0"/>



Rosenberg              Expires December 22, 2003               [Page 20]

Internet-Draft        XCAP Usage for Authorization             June 2003


           <xs:element name="accept-if" minOccurs="0" maxOccurs="unbounded"/>
         </xs:sequence>
         <xs:sequence>
           <xs:annotation>
             <xs:documentation>Rule Permissions</xs:documentation>
           </xs:annotation>
           <xs:element name="any-event" minOccurs="0"/>
           <xs:sequence>
             <xs:element name="enter-state" minOccurs="0" maxOccurs="unbounded">
               <xs:complexType>
                 <xs:sequence>
                   <xs:element name="state" type="stateType"/>
                 </xs:sequence>
               </xs:complexType>
             </xs:element>
             <xs:element name="exit-state" minOccurs="0" maxOccurs="unbounded">
               <xs:complexType>
                 <xs:sequence>
                   <xs:element name="state" type="stateType"/>
                 </xs:sequence>
               </xs:complexType>
             </xs:element>
             <xs:element name="transition" minOccurs="0" maxOccurs="unbounded">
               <xs:complexType>
                 <xs:sequence>
                   <xs:choice>
                     <xs:element name="element-name" type="xs:string"/>
                     <xs:element name="element-path" type="xs:string"/>
                   </xs:choice>
                   <xs:element name="value" type="xs:string"/>
                   <xs:element name="value" type="xs:string"/>
                 </xs:sequence>
               </xs:complexType>
             </xs:element>
             <xs:element name="change-in" minOccurs="0" maxOccurs="unbounded">
               <xs:complexType>
                 <xs:choice>
                   <xs:element name="element-name" type="xs:string"/>
                   <xs:element name="element-type" type="xs:string"/>
                 </xs:choice>
               </xs:complexType>
             </xs:element>
             <xs:element name="equals" minOccurs="0" maxOccurs="unbounded">
               <xs:complexType>
                 <xs:sequence>
                   <xs:element name="state" type="stateType"/>
                 </xs:sequence>
               </xs:complexType>



Rosenberg              Expires December 22, 2003               [Page 21]

Internet-Draft        XCAP Usage for Authorization             June 2003


             </xs:element>
             <xs:element name="subscription-state" minOccurs="0"/>
           </xs:sequence>
         </xs:sequence>
         <xs:sequence>
           <xs:annotation>
             <xs:documentation>Content Permissions</xs:documentation>
           </xs:annotation>
           <xs:element name="all-content" minOccurs="0"/>
           <xs:sequence>
             <xs:element name="show-contact-element" minOccurs="0"/>
             <xs:element name="show-note" minOccurs="0"/>
             <xs:element name="show-tuple" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
             <xs:element name="show-element" minOccurs="0" maxOccurs="unbounded">
               <xs:complexType>
                 <xs:choice>
                   <xs:element name="element-name" type="xs:string"/>
                   <xs:element name="element-path" type="xs:string"/>
                 </xs:choice>
               </xs:complexType>
             </xs:element>
             <xs:element name="show-namespace" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
             <xs:element name="show-values" minOccurs="0" maxOccurs="unbounded">
               <xs:complexType>
                 <xs:sequence>
                   <xs:element name="element-name" type="xs:string"/>
                   <xs:element name="value" type="xs:time"/>
                 </xs:sequence>
               </xs:complexType>
             </xs:element>
             <xs:element name="encrypt" minOccurs="0"/>
           </xs:sequence>
         </xs:sequence>
         <xs:sequence>
           <xs:annotation>
             <xs:documentation>Transformational Permissions</xs:documentation>
           </xs:annotation>
           <xs:element name="set-document" minOccurs="0">
             <xs:complexType>
               <xs:sequence>
                 <xs:element ref="pidf:presence"/>
               </xs:sequence>
             </xs:complexType>
           </xs:element>
           <xs:element name="set-element" minOccurs="0" maxOccurs="unbounded">
             <xs:complexType>
               <xs:sequence>
                 <xs:element name="state" type="stateType"/>



Rosenberg              Expires December 22, 2003               [Page 22]

Internet-Draft        XCAP Usage for Authorization             June 2003


               </xs:sequence>
             </xs:complexType>
           </xs:element>
           <xs:element name="change-element-from" minOccurs="0" maxOccurs="unbounded">
             <xs:complexType>
               <xs:sequence>
                 <xs:choice>
                   <xs:element name="element-name" type="xs:string"/>
                   <xs:element name="element-path" type="xs:string"/>
                 </xs:choice>
                 <xs:element name="value" type="xs:string"/>
                 <xs:element name="value" type="xs:string"/>
               </xs:sequence>
             </xs:complexType>
           </xs:element>
         </xs:sequence>
         <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded">
           <xs:annotation>
             <xs:documentation>Compound Permissions</xs:documentation>
           </xs:annotation>
         </xs:any>
       </xs:sequence>
     </xs:complexType>
     <xs:complexType name="applies-toType">
       <xs:choice>
         <xs:element name="any">
           <xs:complexType>
             <xs:attribute name="id" type="xs:string" use="required"/>
             <xs:attribute name="displayName" type="xs:string" use="optional"/>
             <xs:attribute ref="xml:lang"/>
           </xs:complexType>
         </xs:element>
         <xs:sequence>
           <xs:element name="uri" minOccurs="0" maxOccurs="unbounded">
             <xs:complexType>
               <xs:simpleContent>
                 <xs:extension base="xs:anyURI">
                   <xs:attribute name="id" type="xs:string" use="required"/>
                   <xs:attribute name="displayName" type="xs:string" use="optional"/>
                   <xs:attribute ref="xml:lang"/>
                 </xs:extension>
               </xs:simpleContent>
             </xs:complexType>
           </xs:element>
           <xs:element name="domain" minOccurs="0" maxOccurs="unbounded">
             <xs:complexType>
               <xs:simpleContent>
                 <xs:extension base="xs:string">



Rosenberg              Expires December 22, 2003               [Page 23]

Internet-Draft        XCAP Usage for Authorization             June 2003


                   <xs:attribute name="id" type="xs:string" use="required"/>
                   <xs:attribute name="displayName" type="xs:string" use="optional"/>
                   <xs:attribute ref="xml:lang" use="optional"/>
                 </xs:extension>
               </xs:simpleContent>
             </xs:complexType>
           </xs:element>
           <xs:element name="on-list" minOccurs="0" maxOccurs="unbounded">
             <xs:complexType>
               <xs:simpleContent>
                 <xs:extension base="xs:anyURI">
                   <xs:attribute name="id" type="xs:string" use="required"/>
                   <xs:attribute name="displayName" type="xs:string" use="optional"/>
                   <xs:attribute ref="xml:lang" use="optional"/>
                 </xs:extension>
               </xs:simpleContent>
             </xs:complexType>
           </xs:element>
         </xs:sequence>
       </xs:choice>
     </xs:complexType>
     <xs:complexType name="accept-ifType">
       <xs:choice>
         <xs:element name="and" type="andType"/>
         <xs:element name="or" type="orType"/>
         <xs:element name="not" type="notType"/>
         <xs:element name="requested-namespace" type="xs:string"/>
         <xs:element name="requested-element" type="xs:string"/>
         <xs:element name="requested-tuple" type="xs:string"/>
         <xs:element name="duration" type="xs:nonNegativeInteger"/>
         <xs:element name="auth-mechanism" type="auth-mechanismType"/>
         <xs:element name="anonymous"/>
         <xs:element name="can-encrypt"/>
       </xs:choice>
     </xs:complexType>
     <xs:simpleType name="auth-mechanismType">
       <xs:restriction base="xs:string">
         <xs:enumeration value="none"/>
         <xs:enumeration value="digest"/>
         <xs:enumeration value="smime"/>
         <xs:enumeration value="tls"/>
         <xs:enumeration value="p-asserted-id"/>
       </xs:restriction>
     </xs:simpleType>
     <xs:complexType name="andType">
       <xs:sequence maxOccurs="unbounded">
         <xs:choice>
           <xs:element name="and" type="andType"/>



Rosenberg              Expires December 22, 2003               [Page 24]

Internet-Draft        XCAP Usage for Authorization             June 2003


           <xs:element name="or" type="orType"/>
           <xs:element name="not" type="notType"/>
           <xs:element name="requested-namespace" type="xs:string"/>
           <xs:element name="requested-element" type="xs:string"/>
           <xs:element name="requested-tuple" type="xs:string"/>
           <xs:element name="duration" type="xs:nonNegativeInteger"/>
           <xs:element name="auth-mechanism" type="auth-mechanismType"/>
           <xs:element name="anonymous"/>
           <xs:element name="can-encrypt"/>
         </xs:choice>
       </xs:sequence>
     </xs:complexType>
     <xs:complexType name="orType">
       <xs:sequence maxOccurs="unbounded">
         <xs:choice>
           <xs:element name="and" type="andType"/>
           <xs:element name="or" type="orType"/>
           <xs:element name="not" type="notType"/>
           <xs:element name="requested-namespace" type="xs:string"/>
           <xs:element name="requested-element" type="xs:string"/>
           <xs:element name="requested-tuple" type="xs:string"/>
           <xs:element name="duration" type="xs:nonNegativeInteger"/>
           <xs:element name="auth-mechanism" type="auth-mechanismType"/>
           <xs:element name="anonymous"/>
           <xs:element name="can-encrypt"/>
         </xs:choice>
       </xs:sequence>
     </xs:complexType>
     <xs:complexType name="notType">
       <xs:choice>
         <xs:element name="and" type="andType"/>
         <xs:element name="or" type="orType"/>
         <xs:element name="not" type="notType"/>
         <xs:element name="requested-namespace" type="xs:string"/>
         <xs:element name="requested-element" type="xs:string"/>
         <xs:element name="requested-tuple" type="xs:string"/>
         <xs:element name="duration" type="xs:nonNegativeInteger"/>
         <xs:element name="auth-mechanism" type="auth-mechanismType"/>
         <xs:element name="anonymous"/>
         <xs:element name="can-encrypt"/>
       </xs:choice>
     </xs:complexType>
     <xs:complexType name="stateType">
       <xs:sequence>
         <xs:choice>
           <xs:element name="element-name" type="xs:string"/>
           <xs:element name="element-path" type="xs:string"/>
         </xs:choice>



Rosenberg              Expires December 22, 2003               [Page 25]

Internet-Draft        XCAP Usage for Authorization             June 2003


         <xs:element name="value" type="xs:string"/>
       </xs:sequence>
     </xs:complexType>
   </xs:schema>


   TODOS: need to add points of extensibility.












































Rosenberg              Expires December 22, 2003               [Page 26]

Internet-Draft        XCAP Usage for Authorization             June 2003


5. Compound Permissions

   Compound permissions allow a user to specify new permissions that are
   a combination of primitive and compound permissions. Compound
   permissions can be used within permission statements.

5.1 Application Unique ID

   XCAP requires application usages to define a unique application usage
   ID (AUID) in either the IETF tree or a vendor tree. This
   specification defines the "compound-permissions" AUID within the IETF
   tree, via the IANA registration in Section 7.

5.2 Structure of Compound Permissions

   A compound permission is an XML [3] document that MUST be well-formed
   and SHOULD be valid. Compound permission documents MUST be based on
   XML 1.0 and MUST be encoded using UTF-8. This specification makes use
   of XML namespaces for identifying compound permission documents and
   document fragments. The namespace URI for elements defined for this
   purpose is a URN [5], using the namespace identifier 'ietf' defined
   by [7] and extended by [11]. This URN is:

      urn:ietf:params:xml:ns:compound-permissions

   A compound permission document begins with the root element tag
   "compound-permissions".  It consists of any number of
   "compound-permission" elements. Each "compound-permission" defines a
   new compound permission. It is a mandatory attribute "name" which
   MUST be unique across all other "name" attributes within the
   document. It serves as a unique handle to the compound permission.

   A compound-permission is composed of a "permission-name" element,
   containing a string value, which presents the name of the compound
   permission. This is then followed by a "permissions" element, which
   contains the permissions associated with the new compound permission.

5.3 Naming Conventions

   When a presence agent receives a subscription for some user foo
   within a domain, it will look for all documents within http://[xcap
   root services uri]/compound-permissions/users/foo, and use all
   documents found beneath that point as definitions of valid compound
   permissions.

5.4 Authorization Policies

   This application usage does not modify the default XCAP authorization



Rosenberg              Expires December 22, 2003               [Page 27]

Internet-Draft        XCAP Usage for Authorization             June 2003


   policy, which is that only a user can read, write or modify their own
   documents. A server can allow priveleged users to modify documents
   that they don't own, but the establishment and indication of such
   policies is outside the scope of this document.

5.5 XML Schema


   <?xml version="1.0" encoding="UTF-8"?>
   <xs:schema xmlns:ps="urn:ietf:params:xml:ns:permission-statements" xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
     <xs:import namespace="urn:ietf:params:xml:ns:permission-statements"/>
     <xs:element name="compound-permissions">
       <xs:annotation>
         <xs:documentation>A series of compound permissions</xs:documentation>
       </xs:annotation>
       <xs:complexType>
         <xs:sequence maxOccurs="unbounded">
           <xs:element name="compound-permission">
             <xs:complexType>
               <xs:sequence>
                 <xs:element name="name" type="xs:string"/>
                 <xs:element name="permissions" type="ps:permissionsType"/>
               </xs:sequence>
               <xs:attribute name="name" type="xs:string" use="required"/>
             </xs:complexType>
           </xs:element>
         </xs:sequence>
       </xs:complexType>
     </xs:element>
   </xs:schema>



5.6 Example Document

   This example document defines a new compound permission, called
   friends, and associates some permissions with it.














Rosenberg              Expires December 22, 2003               [Page 28]

Internet-Draft        XCAP Usage for Authorization             June 2003


   <?xml version="1.0" encoding="UTF-8"?>
   <compound-permissions
     xmlns:ps="urn:ietf:params:xml:ns:permission-statements"
     elementFormDefault="qualified"
     attributeFormDefault="unqualified">

   <compound-permission name="p1">

     <name>friends</name>
     <permissions>
       <accept/>
       <equals>
        <state>
         <element-name>rpids:placetype</element-name>
          <value>home</value>
        </state>
       <equals>
       <all-content/>
     </permissions>
   </compound-permission>

   </compound-permissions>





























Rosenberg              Expires December 22, 2003               [Page 29]

Internet-Draft        XCAP Usage for Authorization             June 2003


6. Supported Permissions

   Supported permissions allow a presentity to determine what the
   capabilities of the PA are, in terms of expressing authorization
   policy. This capability is expressed as a list of primitive
   permissions, primitive conditions, and compound permissions. When a
   client starts up, it reads this set of permissions from a well known
   URI (see Section Section 6.3). It then knows which permissions, both
   primitive and compound, that it can include in its permission
   statements.

6.1 Application Unique ID

   XCAP requires application usages to define a unique application usage
   ID (AUID) in either the IETF tree or a vendor tree. This
   specification defines the "supported-permissions" AUID within the
   IETF tree, via the IANA registration in Section 7.

6.2 Structure of Supported Permissions

   A supported permission is an XML [3] document that MUST be
   well-formed and SHOULD be valid. Supported permission documents MUST
   be based on XML 1.0 and MUST be encoded using UTF-8. This
   specification makes use of XML namespaces for identifying supported
   permission documents and document fragments. The namespace URI for
   elements defined for this purpose is a URN [5], using the namespace
   identifier 'ietf' defined by [7] and extended by [11]. This URN is:

      urn:ietf:params:xml:ns:supported-permissions

   A supported permission document begins with the root element tag
   "supported-permissions".  It consists of one "primitive-permissions"
   element, zero or one "conditions" elements and zero or one
   "compound-permissions" elements.

   The "primitive-permissions" element has, for its content, a
   "permissions" element. This element contains a valid permission
   statement which purposefully includes all primitive permissions that
   are supported by the server. All PA's which allow for xcap-based
   configuration of authorization MUST support, at a minimum, the
   "accept", "any-event" and "all-content" primitive permissions.

   The "conditions" element contains a sequence of conditions which can
   be used within the "accept-if" element. Clearly, the "conditions"
   element will not be present if "accept-if" is not listed as a
   supported permission. There is no minimum requirement for a PA in
   terms of the conditions that need to be supported.




Rosenberg              Expires December 22, 2003               [Page 30]

Internet-Draft        XCAP Usage for Authorization             June 2003


   The "compound-permissions" element is a sequence of compound
   permissions supported by the server. Each one, described by a
   "compound-permission" element, has a "name" and "description". The
   "name" contains the name of the permission, and "description" is a
   textual definition of the permission, meant for human consumption.
   This is helpful in cases where the compound permissions are not
   understood by the client. The descriptions can be rendered to the
   human user, so that they can make a choice in the application of a
   permission.

6.3 Naming Conventions

   When a client starts, it can fetch the permissions understood by the
   server in one of two places. If the server capabilities differ on a
   user by user basis, the supported permissions for user foo can be
   found in http://[xcap root services uri]/supported-permissions/users/
   foo/sp.xml. A client SHOULD check this file first. If this document
   doesn't exist, the client should next check for the system wide
   permissions by checking http://[xcap root services uri]/
   supported-permissions/global/sp.xml.

6.4 Authorization Policies

   This application usage does not modify the default XCAP authorization
   policy, which is that only a user can read, write or modify their own
   documents. A server can allow priveleged users to modify documents
   that they don't own, but the establishment and indication of such
   policies is outside the scope of this document.

6.5 XML Schema


   <?xml version="1.0" encoding="UTF-8"?>

   <xs:schema
     targetNamespace="urn:ietf:params:xml:ns:supported-permissions"
     xmlns:xs="http://www.w3.org/2001/XMLSchema"
     xmlns:ps="urn:ietf:params:xml:ns:permission-statements"
     elementFormDefault="qualified"
     attributeFormDefault="unqualified">
     <xs:import namespace="urn:ietf:params:xml:ns:permission-statements"/>
     <xs:element name="supported-permissions">
       <xs:complexType>
         <xs:sequence>
           <xs:element name="primitive-permissions">
             <xs:complexType>
               <xs:sequence>
                 <xs:element name="permissions" type="ps:permissionsType"/>



Rosenberg              Expires December 22, 2003               [Page 31]

Internet-Draft        XCAP Usage for Authorization             June 2003


               </xs:sequence>
             </xs:complexType>
           </xs:element>
           <xs:element name="conditions" minOccurs="0">
             <xs:complexType>
               <xs:sequence>
                 <xs:element name="condition" type="xs:string"
                    maxOccurs="unbounded"/>
               </xs:sequence>
             </xs:complexType>
           </xs:element>
           <xs:element name="compound-permissions" minOccurs="0">
             <xs:complexType>
               <xs:sequence minOccurs="0" maxOccurs="unbounded">
                 <xs:element name="compound-permission">
                   <xs:complexType>
                     <xs:sequence>
                       <xs:element name="name" type="xs:string"/>
                       <xs:element name="description" type="xs:string"/>
                     </xs:sequence>
                   </xs:complexType>
                 </xs:element>
               </xs:sequence>
             </xs:complexType>
           </xs:element>
         </xs:sequence>
       </xs:complexType>
     </xs:element>
   </xs:schema>



6.6 Example Document

   This example document describes a PA that allows very simple
   primitive types. Instead, it defines several compound ones that are
   the preferred way for clients to express permissions.














Rosenberg              Expires December 22, 2003               [Page 32]

Internet-Draft        XCAP Usage for Authorization             June 2003


   <?xml version="1.0" encoding="UTF-8"?>
   <supported-permissions
     xmlns:ps="urn:ietf:params:xml:ns:permission-statements"
     elementFormDefault="qualified"
     attributeFormDefault="unqualified">

   <primitive-permissions>
     <permissions>
       <accept/>
       <any-event/>
       <all-content/>
     </permissions>
   </primitive-permissions>

   <compound-permissions>
     <compound-permission>
       <name>low</name>
       <description>This represents low security. Use
         this with people you don't know.</description>
     </compound-permission>

     <compound-permission>
       <name>high</name>
       <description>This represents high security. Use
         this with people you trust.</description>
     </compound-permission>
   </compound-permissions>

   </supported-permissions>






















Rosenberg              Expires December 22, 2003               [Page 33]

Internet-Draft        XCAP Usage for Authorization             June 2003


7. IANA Considerations

   There are several IANA considerations associated with this
   specification.

7.1 XCAP Application Usage IDs

   This section registers three XCAP Application Usage IDs (AUID)
   according to the IANA procedures defined in [2].

7.1.1 Permission Statements

      Name of the AUID: permission-statements

      Description: Permission-statements are documents that describe the
      permissions that a presentity [12] has granted to users that seek
      to watch their presence.


7.1.2 Compound Permissions

      Name of the AUID: compound-permissions

      Description: Compound permissions are documents that describe new
      types of permissions which can be granted to watchers [12] of the
      presence of a user.


7.1.3 Supported Permissions

      Name of the AUID: supported-permissions

      Description: Supported permissions are documents that describe the
      types of permissions which are supported by a presence agent [13].
      These permissions specify the information that watchers [12] of
      presence are allowed to see.


7.2 URN Sub-Namespace Registrations

   This section registers several new XML namespaces, as per the
   guidelines in [11]

7.2.1 urn:ietf:params:xml:ns:permission-statements

      URI: The URI for this namespace is
      urn:ietf:params:xml:ns:permission-statements.




Rosenberg              Expires December 22, 2003               [Page 34]

Internet-Draft        XCAP Usage for Authorization             June 2003


      Registrant Contact: IETF, SIMPLE working group, (simple@ietf.org),
      Jonathan Rosenberg (jdrosen@jdrosen.net).

      XML:


                BEGIN
                <?xml version="1.0"?>
                <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.0//EN"
                          "http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd">
                <html xmlns="http://www.w3.org/1999/xhtml">
                <head>
                  <meta http-equiv="content-type"
                     content="text/html;charset=iso-8859-1"/>
                  <title>Permission Statements Namespace</title>
                </head>
                <body>
                  <h1>Namespace for Permission Statements</h1>
                  <h2>urn:ietf:params:xml:ns:permission-statements</h2>
                  <p>See <a href="[[[URL of published RFC]]]">RFCXXXX</a>.</p>
                </body>
                </html>
                END


7.2.2 urn:ietf:params:xml:ns:compound-permissions

      URI: The URI for this namespace is
      urn:ietf:params:xml:ns:compound-permissions.

      Registrant Contact: IETF, SIMPLE working group, (simple@ietf.org),
      Jonathan Rosenberg (jdrosen@jdrosen.net).

      XML:

















Rosenberg              Expires December 22, 2003               [Page 35]

Internet-Draft        XCAP Usage for Authorization             June 2003


                BEGIN
                <?xml version="1.0"?>
                <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.0//EN"
                          "http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd">
                <html xmlns="http://www.w3.org/1999/xhtml">
                <head>
                  <meta http-equiv="content-type"
                     content="text/html;charset=iso-8859-1"/>
                  <title>Compound Permissions Namespace</title>
                </head>
                <body>
                  <h1>Namespace for Compound Permissions</h1>
                  <h2>urn:ietf:params:xml:ns:compound-permissions</h2>
                  <p>See <a href="[[[URL of published RFC]]]">RFCXXXX</a>.</p>
                </body>
                </html>
                END


7.2.3 urn:ietf:params:xml:ns:supported-permissions

      URI: The URI for this namespace is
      urn:ietf:params:xml:ns:supported-permissions.

      Registrant Contact: IETF, SIMPLE working group, (simple@ietf.org),
      Jonathan Rosenberg (jdrosen@jdrosen.net).

      XML:


                BEGIN
                <?xml version="1.0"?>
                <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.0//EN"
                          "http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd">
                <html xmlns="http://www.w3.org/1999/xhtml">
                <head>
                  <meta http-equiv="content-type"
                     content="text/html;charset=iso-8859-1"/>
                  <title>Supported Permissions Namespace</title>
                </head>
                <body>
                  <h1>Namespace for Supported Permissions</h1>
                  <h2>urn:ietf:params:xml:ns:supported-permissions</h2>
                  <p>See <a href="[[[URL of published RFC]]]">RFCXXXX</a>.</p>
                </body>
                </html>
                END




Rosenberg              Expires December 22, 2003               [Page 36]

Internet-Draft        XCAP Usage for Authorization             June 2003


7.3 XML Schema Registrations

   This section registers three XML schemas as per the procedures in
   [11].

7.3.1 Permissions Statements

      URI: please assign.

      Registrant Contact: IETF, SIMPLE working group, (simple@ietf.org),
      Jonathan Rosenberg (jdrosen@jdrosen.net).

      The XML for this schema can be found as the sole content of
      Section 4.6.


7.3.2 Compound Permissions

      URI: please assign.

      Registrant Contact: IETF, SIMPLE working group, (simple@ietf.org),
      Jonathan Rosenberg (jdrosen@jdrosen.net).

      The XML for this schema can be found as the sole content of
      Section 5.5.


7.3.3 Supported Permissions

      URI: please assign.

      Registrant Contact: IETF, SIMPLE working group, (simple@ietf.org),
      Jonathan Rosenberg (jdrosen@jdrosen.net).

      The XML for this schema can be found as the sole content of
      Section 6.5.















Rosenberg              Expires December 22, 2003               [Page 37]

Internet-Draft        XCAP Usage for Authorization             June 2003


Normative References

   [1]   Bradner, S., "Key words for use in RFCs to Indicate Requirement
         Levels", BCP 14, RFC 2119, March 1997.

   [2]   Rosenberg, J., "The Extensible Markup Language (XML)
         Configuration Access Protocol  (XCAP)",
         draft-rosenberg-simple-xcap-00 (work in progress), May 2003.

   [3]   Bray, T., Paoli, J., Sperberg-McQueen, C. and E. Maler,
         "Extensible Markup Language (XML) 1.0 (Second Edition)", W3C
         REC REC-xml-20001006, October 2000.

   [4]   Clark, J. and S. DeRose, "XML Path Language (XPath) Version
         1.0", W3C REC REC-xpath-19991116, November 1999.

   [5]   Moats, R., "URN Syntax", RFC 2141, May 1997.

   [6]   Murata, M., St. Laurent, S. and D. Kohn, "XML Media Types", RFC
         3023, January 2001.

   [7]   Moats, R., "A URN Namespace for IETF Documents", RFC 2648,
         August 1999.

   [8]   Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,
         Leach, P., Luotonen, A. and L. Stewart, "HTTP Authentication:
         Basic and Digest Access Authentication", RFC 2617, June 1999.

   [9]   Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,
         Peterson, J., Sparks, R., Handley, M. and E. Schooler, "SIP:
         Session Initiation Protocol", RFC 3261, June 2002.

   [10]  Ramsdell, B., "S/MIME Version 3 Message Specification", RFC
         2633, June 1999.

   [11]  Mealling, M., "The IETF XML Registry",
         draft-mealling-iana-xmlns-registry-05 (work in progress), June
         2003.













Rosenberg              Expires December 22, 2003               [Page 38]

Internet-Draft        XCAP Usage for Authorization             June 2003


Informative References

   [12]  Day, M., Rosenberg, J. and H. Sugano, "A Model for Presence and
         Instant Messaging", RFC 2778, February 2000.

   [13]  Rosenberg, J., "A Presence Event Package for the Session
         Initiation Protocol (SIP)", draft-ietf-simple-presence-10 (work
         in progress), January 2003.

   [14]  Fujimoto, S. and H. Sugano, "Presence Information Data Format
         (PIDF)", draft-ietf-impp-cpim-pidf-08 (work in progress), May
         2003.

   [15]  Jennings, C., Peterson, J. and M. Watson, "Private Extensions
         to the Session Initiation Protocol (SIP) for Asserted Identity
         within Trusted Networks", RFC 3325, November 2002.

   [16]  Rosenberg, J., "An Extensible Markup Language (XML)
         Configuration Access Protocol (XCAP)  Usage for Presence
         Lists", draft-rosenberg-simple-xcap-list-usage-00 (work in
         progress), May 2003.


Author's Address

   Jonathan Rosenberg
   dynamicsoft
   600 Lanidex Plaza
   Parsippany, NJ  07052
   US

   Phone: +1 973 952-5000
   EMail: jdrosen@dynamicsoft.com
   URI:   http://www.jdrosen.net

















Rosenberg              Expires December 22, 2003               [Page 39]

Internet-Draft        XCAP Usage for Authorization             June 2003


Intellectual Property Statement

   The IETF takes no position regarding the validity or scope of any
   intellectual property or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; neither does it represent that it
   has made any effort to identify any such rights. Information on the
   IETF's procedures with respect to rights in standards-track and
   standards-related documentation can be found in BCP-11. Copies of
   claims of rights made available for publication and any assurances of
   licenses to be made available, or the result of an attempt made to
   obtain a general license or permission for the use of such
   proprietary rights by implementors or users of this specification can
   be obtained from the IETF Secretariat.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights which may cover technology that may be required to practice
   this standard. Please address the information to the IETF Executive
   Director.


Full Copyright Statement

   Copyright (C) The Internet Society (2003). All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works. However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assignees.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION



Rosenberg              Expires December 22, 2003               [Page 40]

Internet-Draft        XCAP Usage for Authorization             June 2003


   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Acknowledgement

   Funding for the RFC Editor function is currently provided by the
   Internet Society.











































Rosenberg              Expires December 22, 2003               [Page 41]

