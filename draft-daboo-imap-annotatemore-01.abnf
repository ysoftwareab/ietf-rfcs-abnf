getannotation     = "GETANNOTATION" SP entries SP attribs
                        ; new command

setannotation     = "SETANNOTATION" SP entry-att *(SP entry-att)
                        ; new command

annotate-data     = "ANNOTATION" SP entry-list
                        ; new response

entries           = entry-match / "(" entry-match *(SP entry-match) ")"
                        ; entry specifiers that can include wildcards

attribs           = attrib-match / "(" attrib-match *(SP attrib-match) ")"
                        ; attribute specifiers that can include wildcards

entry-list        = entry-att *(SP entry-att) /
                        "(" entry *(SP entry) ")"
                        ; entry attribute-value pairs list for 
                        ; GETANNOTATION response, or
                        ; parenthesised entry list for unsolicited
                        ; notification of annotation changes

entry-att         = entry SP "(" att-value *(SP att-value) ")"
att-value         = attrib SP value

atom-slash        = any ATOM-CHAR except "/"
atom-dot          = any ATOM-CHAR except "."

entry             = DQUOTE (entry-server / entry-mbox) DQUOTE
entry-server      = "/server/" sub-entry
entry-mbox        = "/mailbox/{" entry-mname "}/" sub-entry
entry-mname       = string
sub-entry         = 1*atom-slash *("/" 1*atom-slash)

entry-match       = DQUOTE (entry-m-server / entry-m-mbox) DQUOTE
entry-m-server    = "/server/" sub-m-entry
entry-m-mbox      = "/mailbox/{" entry-m-mname "}/" sub-m-entry
entry-m-mname     = list-mailbox
sub-m-entry       = 1*entry-m-atom *("/" 1*entry-m-atom)
entry-m-atom      = 1*(list-wildcards / atom-slash)

attrib            = DQUOTE 1*atom-dot *("." 1*atom-dot) DQUOTE
attrib-match      = DQUOTE 1*attrib-match-atom
                                *("." 1*attrib-match-atom) DQUOTE
attrib-match-atom = 1*(list-wildcards / atom-dot)

value             = nstring
    
    
