SIP-URL         = "sip:" [ userinfo "@" ] hostport
                    url-parameters [ headers ]
userinfo        = [ user | telephone-subscriber [ ":" password ]]
user            = *( unreserved | escaped | user-unreserved)
user-unreserved = "&" | "=" | "+" | "$" | "," | ";" | "?" | "/"
password        = *( unreserved | escaped
                  | "&" | "=" | "+" | "$" | "," )
hostport        = host [ ":" port ]
host            = hostname | IPv4address | IPv6reference
hostname        = *( domainlabel "." ) toplabel [ "." ]
domainlabel     = alphanum | alphanum *( alphanum | "-" ) alphanum
toplabel        = alpha | alpha *( alphanum | "-" ) alphanum
IPv4address     = 1*3digit "." 1*3digit "." 1*3digit "." 1*3digit
IPv6reference   = "[" IPv6address "]"
IPv6address     = hexpart [ ":" IPv4address ]
hexpart         = hexseq | hexseq "::" [ hexseq ] | "::" [ hexseq ]
hexseq          = hex4 *( ":" hex4)
hex4            = 1*4HEX
port            = *digit
url-parameters  = *( ";" url-parameter )
url-parameter   = transport-param | user-param | method-param
                  | ttl-param | maddr-param | other-param
transport-param = "transport=" ( "udp" | "tcp" | "sctp" | "tls"  
                  | other-transport)
other-transport = token
user-param      = "user=" ( "phone" | "ip" | other-user)
other-user      = token
method-param    = "method=" Method
ttl-param       = "ttl=" ttl
maddr-param     = "maddr=" host
other-param     = pname ["=" pvalue]
pname           = 1*paramchar
pvalue          = 1*paramchar
paramchar       = param-unreserved | unreserved | escaped
param-unreserved= "[" | "]" | "/" | ":" | "&" | "+" | "$"
headers         = "?" header *( "&" header )
header          = hname "=" hvalue
hname           = 1*( hnv-unreserved | unreserved | escaped )
hvalue          = *( hnv-unreserved | unreserved | escaped )
hnv-unreserved  = "[" | "]" | "/" | "?" | ":" | "+" | "$"


   Figure 3: SIP URL syntax
             The telephone number is a special case of a user name and
             cannot be distinguished by a BNF. Thus, a URL parameter,
             user, is added to distinguish telephone numbers from user
             names.

             The user parameter value "phone" indicates that the user
             part contains a telephone number. Even without this
             parameter, recipients of SIP URLs MAY interpret the pre-@
             part as a telephone number if local restrictions on the
             name space for user name allow it.

        password: The SIP scheme MAY use the format "user:password" in
             the userinfo field. The use of passwords in the userinfo is
             NOT RECOMMENDED, because the passing of authentication
             information in clear text (such as URIs) has proven to be a
             security risk in almost every case where it has been used.

        host:  The host part SHOULD be a fully-qualified domain name or
             numeric IP address.

             The mailto: URL and RFC 822 email addresses require that
             numeric host addresses ("host numbers") are enclosed in
             square brackets (presumably, since host names might be
             numeric), while host numbers without brackets are used for
             all other URLs. The SIP URL requires the latter form,
             without brackets.

        port: The port number to send a request to. If not present, the
             procedures outlined in Section 1.4.2 are used to determine
             the port number to send a request to.

        URL parameters: SIP URLs can define specific parameters of the
             request. URL parameters are added after the host component
             and are separated by semi-colons. The transport parameter
             determines the the transport mechanism to be used for
             sending SIP requests and responses. SIP can use any network
             transport protocol; parameter names are defined for UDP
             [20], TCP [21], TLS [22], and SCTP. UDP is to be assumed
             when no explicit transport parameter is included. The maddr
             parameter indicates the server address to be contacted for
             this user, overriding the address supplied in the host
             field. This address is typically, but not necessarily, a
             multicast address.


             The maddr field can be used to force requests from
             traveling users to visit a home proxy even if an
             outbound proxy is used.
             The ttl parameter determines the time-to-live value of the
             UDP multicast packet and MUST only be used if maddr is a
             multicast address and the transport protocol is UDP. The
             user parameter was described above. For example, to specify
             to call j.doe@big.com using multicast to 239.255.255.1 with
             a ttl of 15, the following URL would be used:


               sip:j.doe@big.com;maddr=239.255.255.1;ttl=15



             The transport, maddr, and ttl parameters MUST NOT be used
             in the From and To header fields; they are ignored if
             present.


             For Request-URIs, these parameters are useful
             primarily for outbound proxies.

             Receivers MUST silently ignore any URI parameters that they
             do not understand.

        Headers: Headers of the SIP request can be defined with the "?"
             mechanism within a SIP URL. The special hname "body"
             indicates that the associated hvalue is the message-body of
             the SIP INVITE request. Headers MUST NOT be used in the
             From and To header fields and the Request-URI; they are
             ignored if present.  hname and hvalue are encodings of a
             SIP header name and value, respectively. All URL reserved
             characters in the header names and values MUST be escaped.

        Method: The method of the SIP request can be specified with the
             method parameter. This parameter MUST NOT be used in the
             From and To header fields and the Request-URI; they are
             ignored if present.

   Table 2 summarizes where the components of the SIP URL can be used.
   Entries marked "m" are mandatory, those marked "o" are optional, and
   those marked "-" are not allowed. For optional elements, the second
   column indicates the default value if the element is not present.


   Examples of SIP URLs are:

     sip:j.doe@big.com
     sip:j.doe:secret@big.com;transport=tcp
     sip:j.doe@big.com?subject=project%20x&priority=urgent
                  default    Req.-URI  To  From  Contact  Rec.-Route  external
   user           --            o      o    o       o         o          o
   password       --            o      o    -       o         o          o
   host           mandatory     m      m    m       m         m          m
   port           5060          o      o    o       o         o          o
   user-param     ip            o      o    o       o         o          o
   method         INVITE        -      -    -       o         -          o
   maddr-param    --            o      -    -       o         m          o
   ttl-param      1             o      -    -       o         -          o
   transp.-param  udp           o      -    -       o         -          o
   other-param    --            o      o    o       o         o          o
   headers        --            -      -    -       o         -          o


   Table 2: Use and default values of URL components  for  SIP  headers,
   Request-URI and references

     sip:+1-212-555-1212:1234@gateway.com;user=phone
     sip:1212@gateway.com
     sip:alice@10.1.2.3
     sip:alice@example.com
     sip:alice%40example.com@gateway.com
     sip:alice@registrar.com;method=REGISTER



SIP-message  =  Request | Response


generic-message  =  start-line
                            *message-header
                            CRLF
                            [ message-body ]

start-line       =  Request-Line |     ;Section 4.1
                            Status-Line        ;Section 9.1




message-header  =  ( general-header
                           | request-header
                           | response-header
                           | entity-header )
Request  =  Request-Line       ;  Section 4.1
                    *( general-header
                    | request-header
                    | entity-header )
                    CRLF
                    [ message-body ]   ;  Section 12


Request-Line  =  Method SP Request-URI SP SIP-Version CRLF
Request-URI   =  SIP-URL | absoluteURI
SIP-Version   =  "SIP/2.0"


general-header   =  Accept               ; Section 10.6
                         |  Accept-Encoding      ; Section 10.7
                         |  Accept-Language      ; Section 10.8
                         |  Call-ID              ; Section 10.12
                         |  Call-Info            ; Section 10.13
                         |  Contact              ; Section 10.14
                         |  CSeq                 ; Section 10.20
                         |  Date                 ; Section 10.21
                         |  Encryption           ; Section 10.22
                         |  From                 ; Section 10.25
                         |  MIME-Version         ; Section 10.28
                         |  Organization         ; Section 10.29
                         |  Record-Route         ; Section 10.34
                         |  Require              ; Section 10.35
                         |  Supported            ; Section 10.41
                         |  Timestamp            ; Section 10.42
                         |  To                   ; Section 10.43
                         |  User-Agent           ; Section 10.45
                         |  Via                  ; Section 10.46
entity-header    =  Allow                ; Section 10.10
                         |  Content-Disposition  ; Section 10.15
                         |  Content-Encoding     ; Section 10.16
                         |  Content-Language     ; Section 10.17
                         |  Content-Length       ; Section 10.18
                         |  Content-Type         ; Section 10.19
                         |  Expires              ; Section 10.24
request-header   =  Alert-Info           ; Section 10.9
                         |  Authorization        ; Section 10.11
                         |  In-Reply-To          ; Section 10.26
                         |  Max-Forwards         ; Section 10.27
                         |  Priority             ; Section 10.30
                         |  Proxy-Authorization  ; Section 10.32
                         |  Proxy-Require        ; Section 10.33
                         |  Route                ; Section 10.38
                         |  Response-Key         ; Section 10.36
                         |  Subject              ; Section 10.40
response-header  =  Error-Info           ; Section 10.23
                         |  Proxy-Authenticate   ; Section 10.31
                         |  Retry-After          ; Section 10.37
                         |  Server               ; Section 10.39
                         |  Unsupported          ; Section 10.44
                         |  Warning              ; Section 10.47
                         |  WWW-Authenticate     ; Section 10.48


Method            =  "INVITE" | "ACK" | "OPTIONS" | "BYE"
                             | "CANCEL" | "REGISTER" | extension-method
extension-method  =  token


option-tag  =  token


Response  =  Status-Line        ;  Section 9.1
                     *( general-header
                     | response-header
                     | entity-header )
                     CRLF
                     [ message-body ]   ;  Section 12
Status-Line  =  SIP-version SP Status-Code SP Reason-Phrase CRLF


Status-Code     =  Informational                     ;Fig. 4
                       |   Success                           ;Fig. 4
                       |   Redirection                       ;Fig. 5
                       |   Client-Error                      ;Fig. 6
                       |   Server-Error                      ;Fig. 7
                       |   Global-Failure                    ;Fig. 8
                       |   extension-code
extension-code  =  3DIGIT
Reason-Phrase   =  *<TEXT-UTF8,  excluding CR, LF>


Informational  =  "100"  ;  Trying
                      |   "180"  ;  Ringing
                      |   "181"  ;  Call Is Being Forwarded
                      |   "182"  ;  Queued
                      |   "183"  ;  Session Progress
Success        =  "200"  ;  OK


Redirection  =  "300"  ;  Multiple Choices
                    |   "301"  ;  Moved Permanently
                    |   "302"  ;  Moved Temporarily
                    |   "305"  ;  Use Proxy
                    |   "380"  ;  Alternative Service


Client-Error  =  "400"  ;  Bad Request
                     |   "401"  ;  Unauthorized
                     |   "402"  ;  Payment Required
                     |   "403"  ;  Forbidden
                     |   "404"  ;  Not Found
                     |   "405"  ;  Method Not Allowed
                     |   "406"  ;  Not Acceptable
                     |   "407"  ;  Proxy Authentication Required
                     |   "408"  ;  Request Timeout
                     |   "409"  ;  Conflict
                     |   "410"  ;  Gone
                     |   "411"  ;  Length Required
                     |   "413"  ;  Request Entity Too Large
                     |   "414"  ;  Request-URI Too Large
                     |   "415"  ;  Unsupported Media Type
                     |   "420"  ;  Bad Extension
                     |   "480"  ;  Temporarily not available
                     |   "481"  ;  Call Leg/Transaction Does Not Exist
                     |   "482"  ;  Loop Detected
                     |   "483"  ;  Too Many Hops
                     |   "484"  ;  Address Incomplete
                     |   "485"  ;  Ambiguous
                     |   "486"  ;  Busy Here
                     |   "487"  ;  Request Terminated
                     |   "488"  ;  Not Acceptable Here


Server-Error  =  "500"  ;  Internal Server Error
                     |   "501"  ;  Not Implemented
                     |   "502"  ;  Bad Gateway
                     |   "503"  ;  Service Unavailable
                     |   "504"  ;  Server Time-out
                     |   "505"  ;  SIP Version not supported


Global-Failure  =  "600"  ;  Busy Everywhere
                       |   "603"  ;  Decline
                       |   "604"  ;  Does not exist anywhere
                       |   "606"  ;  Not Acceptable


message-header  =  field-name ":" [ field-value ] CRLF
field-name      =  token
field-value     =  *( field-content | LWS )
field-content   =  < the OCTETs  making up the field-value
                            and consisting of either *TEXT-UTF8
                            or combinations of token,
                            separators, and quoted-string>
Alert-Info     =  "Alert-Info" ":" # ( "<" URI ">" *( ";" generic-param ))
generic-param  =  token [ "=" ( token | host | quoted-string ) ]


Allow  =  "Allow" ":" 1#Method


callid   =  token [ "@" token ]
Call-ID  =  ( "Call-ID" | "i" ) ":" callid


Call-Info   =  "Call-Info" ":" # ( "<" URI ">" *( ";" info-param) )
info-param  =  "purpose" "=" ( "icon" | "info" | "card" | token )
                   |   generic-param


Contact           = ( "Contact" | "m" ) ":" 
                       ("*" | (1# (( name-addr | addr-spec )
                       *( ";" contact-params ))))
name-addr         = [ display-name ] "<" addr-spec ">"
addr-spec         = SIP-URL | URI
display-name      = *token | quoted-string
contact-params    = "q"       "=" qvalue
                     | "action"  "=" "proxy" | "redirect"
                     | "expires" "=" delta-seconds | <"> SIP-date <">
                     | contact-extension
contact-extension = generic-param
qvalue            = ("0" ["." 0*3DIGIT]) 
                     | ("1" ["." 0*3("0")])
Content-Disposition   =  "Content-Disposition" ":"
                                 disposition-type *( ";" disposition-param )
disposition-type      =  "render" | "session" | "icon" | "alert"
                             |   disp-extension-token
disposition-param     =  "handling" "="
                                 ( "optional" | "required" | other-handling )
                             |   generic-param
other-handling        =  token
disp-extension-token  =  token


Content-Encoding  =  ( "Content-Encoding" | "e" ) ":"
                             1#content-coding


Content-Length  =  ( "Content-Length" | "l" ) ":" 1*DIGIT


Content-Type  =  ( "Content-Type" | "c" ) ":" media-type


CSeq  =  "CSeq" ":" 1*DIGIT Method


Date      =  "Date" ":" SIP-date
SIP-date  =  rfc1123-date


Encryption         =  "Encryption" ":" encryption-scheme 1*SP
                              #encryption-params
encryption-scheme  =  token
encryption-params  =  generic-param


Error-Info  =  "Error-Info" ":" # ( "<" URI ">" *( ";" generic-param ))


Expires  =  "Expires" ":" ( SIP-date | delta-seconds )


From        =  ( "From" | "f" ) ":" ( name-addr | addr-spec )
                       *( ";" from-param )
from-param  =  tag-param | generic-param
tag-param   =  "tag" "=" token


In-Reply-To  =  "In-Reply-To" ":" 1# callid


Max-Forwards  =  "Max-Forwards" ":" 1*DIGIT


Organization  =  "Organization" ":" TEXT-UTF8-TRIM


Priority        =  "Priority" ":" priority-value
priority-value  =  "emergency" | "urgent" | "normal"
                        |  "non-urgent" | other-priority
other-priority  =  token


Proxy-Require  =  "Proxy-Require" ":" 1#option-tag


Record-Route  =  "Record-Route" ":" 1# ( name-addr *( ";" rr-param ))
rr-param      =  generic-param


Require  =  "Require" ":" 1#option-tag


Response-Key  =  "Response-Key" ":" key-scheme 1*SP #key-param
key-scheme    =  token
key-param     =  generic-param


Retry-After  =  "Retry-After" ":" ( SIP-date | delta-seconds )
                        [ comment ] *( ";" retry-param )
retry-param  =  "duration" "=" delta-seconds
                    |   generic-param


Route  =  "Route" ":" 1# ( name-addr *( ";" rr-param ))


Subject  =  ( "Subject" | "s" ) ":" TEXT-UTF8-TRIM


Supported  =  ( "Supported" | "k" ) ":" 1#option-tag


Timestamp  =  "Timestamp" ":" *(DIGIT) [ "." *(DIGIT) ] [ delay ]
delay      =  *(DIGIT) [ "." *(DIGIT) ]


To        =  ( "To" | "t" ) ":" ( name-addr | addr-spec )
                     *( ";" to-param )
to-param  =  tag-param | generic-param


Unsupported  =  "Unsupported" ":" 1#option-tag


Via              = ( "Via" | "v") ":" 1#( sent-protocol sent-by
                     *( ";" via-params ) [ comment ] )
via-params       = via-hidden | via-ttl | via-maddr 
                   | via-received | via-branch
via-hidden       = "hidden"
via-ttl          = "ttl" "=" ttl
via-maddr        = "maddr" "=" host
via-received	   = "received" "=" host
via-branch       = "branch" "=" token
sent-protocol    = protocol-name "/" protocol-version "/" transport
protocol-name    = "SIP" | token
protocol-version = token
transport        = "UDP" | "TCP" | "TLS" | "SCTP" | other-transport
sent-by          = host [ ":" port ]
ttl              = 1*3DIGIT     ; 0 to 255


   Figure 9: Syntax of Via header field



   The "branch" parameter is included by every proxy. The token MUST be
   unique for each distinct request. The precise format of the token is
   implementation-defined. In order to be able to both detect loops and
   associate responses with the corresponding request, the parameter
   SHOULD consist of two parts separable by the implementation. One
   part, used for loop detection (Section 17.3.1), MAY be computed as a
   cryptographic hash of the To, From, Call-ID header fields, the
   Request-URI of the request received (before translation) and the
   sequence number from the CSeq header field.  The hash SHOULD also
   include any other fields the proxy uses to make a routing decision on
   the request. This is to ensure that if the request is routed back to
   the proxy, and one of those fields changes, it is treated as a
   spiral, and not a loop. The algorithm used to compute the hash is
   implementation-dependent, but MD5 [37], expressed in hexadecimal, is
   a reasonable choice. (Note that base64 is not permissible for a
   token.) The other part, used for matching responses to requests, is a
   globally unique function of the branch taken, for example, a hash of
   a sequence number, local IP address and request-URI of the request
   sent on the branch.

   For example: 7a83e5750418bce23d5106b4c06cc632.1


        The "branch" parameter MUST depend on the incoming
        request-URI, or any other headers used for routing, to
        distinguish looped requests from requests whose request-URI
        (or whatever headers are used for routing) is changed and
        which then reach a server visited earlier.

   CANCEL and ACK requests MUST have the same branch value as the
   corresponding request they cancel or acknowledge. When a response
   arrives at the proxy it can use the branch value to figure out which
   branch the response corresponds to.


     Via: SIP/2.0/UDP first.example.com:4000;ttl=16
       ;maddr=224.2.0.1 ;branch=a7c6a8dlze.1 (Acme server)
     Via: SIP/2.0/UDP adk8%20.8x%fe%03 ;hidden



Warning        =  "Warning" ":" 1#warning-value
warning-value  =  warn-code SP warn-agent SP warn-text
warn-code      =  3DIGIT
warn-agent     =  ( host [ ":" port ] ) | pseudonym
                          ;  the name or pseudonym of the server adding
                          ;  the Warning header, for use in debugging
warn-text      =  quoted-string
pseudonym      =  token


v=0
o=user1 53655765 2353687637 IN IP4 128.3.4.5
s=Mbone Audio
i=Discussion of Mbone Engineering Issues
e=mbone@somewhere.com
c=IN IP4 224.2.0.1/127
t=0 0
m=audio 3456 RTP/AVP 0
a=rtpmap:0 PCMU/8000



r = await_response();
class = r.status / 100;

multicast = 0;
best = r;
best = r;
v=0
o=bell 53655765 2353687637 IN IP4 128.3.4.5
s=Mr. Watson, come here.
t=0 0
c=IN IP4 135.180.144.94
m=audio 3456 RTP/AVP 0 3 4 5



v=0
o=bell 53655765 2353687637 IN IP4 128.3.4.5
s=Mr. Watson, come here.
t=0 0
c=IN IP4 135.180.144.94
m=audio 3456 RTP/AVP 0 3 4 5



URI  =  SIP-URL


digest-uri-value  =  Request-URI ; as defined in Section
v=0
o=user1 53655765 2353687637 IN IP4 128.3.4.5
s=Mbone Audio
t=3149328700 0
i=Discussion of Mbone Engineering Issues
e=mbone@somewhere.com
c=IN IP4 224.2.0.1/127
t=0 0
m=audio 3456 RTP/AVP 0
a=rtpmap:0 PCMU/8000
v=0
o=bell 53655765 2353687637 IN IP4 128.3.4.5
s=Mr. Watson, come here.
e=a.g.bell@bell-tel.com
t=3149328600 0
c=IN IP4 kton.bell-tel.com
m=audio 3456 RTP/AVP 0 3 4 5
a=rtpmap:0 PCMU/8000
a=rtpmap:3 GSM/8000
a=rtpmap:4 G723/8000
a=rtpmap:5 DVI4/8000

v=0
o=watson 4858949 4858949 IN IP4 192.1.2.3
s=I'm on my way
e=watson@bell-tel.com
t=3149329600 0
c=IN IP4 boston.bell-tel.com
m=audio 5004 RTP/AVP 0 3
a=rtpmap:0 PCMU/8000
a=rtpmap:3 GSM/8000



v=0
o=c 3149329138 3149329165 IN IP4 38.245.76.2
s=Let's talk
e=t.watson@ieee.org
t=3149328630 0
b=CT:128
c=IN IP4 x.bell-tel.com
m=audio 3456 RTP/AVP 5 0 7
a=rtpmap:5 DVI4/8000
a=rtpmap:0 PCMU/8000
a=rtpmap:7 LPC/8000
m=video 2232 RTP/AVP 31
a=rtpmap:31 H261/90000



v=0
o=alice 3149329138 3149329165 IN IP4 24.124.37.3
s=Security problems
e=bob@example.com
t=3149328650 0
c=IN IP4 24.124.37.3
m=audio 0 RTP/AVP 0 1 3 99
a=rtpmap:0 PCMU/8000
a=rtpmap:1 1016/8000
a=rtpmap:3 GSM/8000
a=rtpmap:99 SX7300/8000
m=video 0 RTP/AVP 31 34
a=rtpmap:31 H261/90000
a=rtpmap:34 H263/90000



v=0
o=alice 2890844526 2890844526 IN IP4 host.anywhere.com
s=New board design
e=alice@foo.org
t=0 0
c=IN IP4 host.anywhere.com
m=audio 49170 RTP/AVP 0
a=rtpmap:0 PCMU/8000
m=video 51372 RTP/AVP 31
a=rtpmap:31 H261/90000
m=video 53000 RTP/AVP 32
a=rtpmap:32 MPV/90000



v=0
o=bob 2890844730 2890844730 IN IP4 host.example.com
s=New board design
e=bob@bar.com
t=0 0
c=IN IP4 host.example.com
m=audio 47920 RTP/AVP 0 1
a=rtpmap:0 PCMU/8000
m=video 0 RTP/AVP 31
m=video 53000 RTP/AVP 32
a=rtpmap:32 MPV/90000



v=0
o=bob 2890844730 2890844731 IN IP4 host.example.com
s=New board design
e=bob@bar.com
t=0 0
c=IN IP4 host.example.com
m=audio 6400 RTP/AVP 0 1
a=rtpmap:0 PCMU/8000
m=video 0 RTP/AVP 31
m=video 53000 RTP/AVP 32
a=rtpmap:32 MPV/90000
m=audio 8864 RTP/AVP 110
a=rtpmap:110 telephone-events
a=recvonly



v=0
o=alice 2890844526 2890844527 IN IP4 host.anywhere.com
s=New board design
e=alice@foo.org
t=0 0
c=IN IP4 host.anywhere.com
m=audio 49170 RTP/AVP 0
a=rtpmap:0 PCMU/8000
m=video 51372 RTP/AVP 31
a=rtpmap:31 H261/90000
m=video 53000 RTP/AVP 32
a=rtpmap:32 MPV/90000
m=audio 4520 RTP/AVP 110
a=rtpmap:110 telephone-events
a=sendonly



name  =  definition


OCTET     =  %x00-ff ; any 8-bit sequence of data
CHAR      =  %x00-7f ; any US-ASCII character (octets 0 - 127)
upalpha   =  "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" |
                     "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" |
                     "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
lowalpha  =  "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" |
                     "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" |
                     "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
alpha     =  lowalpha | upalpha
DIGIT     =  "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |
                     "8" | "9"
alphanum  =  alpha | DIGIT
CTL       =  %x00-1f | %x7f ; (octets 0 -- 31) and DEL (127)
CR        =  %d13 ; US-ASCII CR, carriage return character
LF        =  %d10 ; US-ASCII LF, line feed character
SP        =  %d32 ; US-ASCII SP, space character
HT        =  %d09 ; US-ASCII HT, horizontal tab character
CRLF      =  CR LF ; typically the end of a line


unreserved  =  alphanum | mark
mark        =  "-" | "_" | "." | "!" | "~" | "*" | "'"
                   |   "(" | ")"
escaped     =  "%" hex hex


LWS  =  *( SP | HT ) [CRLF] 1*( SP | HT ) ; linear whitespace


TEXT-UTF8       =  *(TEXT-UTF8char | LWS)
TEXT-UTF8-TRIM  =  *TEXT-UTF8char *(*LWS TEXT-UTF8char)
TEXT-UTF8char   =  %x21-7e
                        |  UTF8-NONASCII
UTF8-NONASCII   =  %xc0-df 1UTF8-CONT
                        |  %xe0-ef 2UTF8-CONT
                        |  %xf0-f7 3UTF8-CONT
                        |  %xf8-fb 4UTF8-CONT
                        |  %xfc-fd 5UTF8-CONT
UTF8-CONT       =  %x80-bf


HEX  =  "A" | "B" | "C" | "D" | "E" | "F"
                | "a" | "b" | "c" | "d" | "e" | "f" | DIGIT


token                            =  1*(alphanum | "-" | "." | "!" | "%" | "*"
separators                       =  "(" | ")" | "<" | ">" | "@" |
                                            "," | ";" | ":" | "\" | <"> |
                                            "/" | "[" | "]" | "?" | "=" |
                                            "{" | "}" | SP | HT


comment  =  "(" *(ctext | quoted-pair | comment) ")"
ctext    =  < any TEXT-UTF8  excluding "("  and ")">


quoted-string  =  ( <"> *(qdtext | quoted-pair ) <"> )
qdtext         =  LWS | %x21 | %x23-5b | %x5d-7e
                       |  UTF8-NONASCII
quoted-pair  =  "\" (%x00 - %x09 | %x0b | %x0c | %x0e - %x7f)


Foo        =  "Foo" ":" something *( ";" foo-param )
foo-param  =  "bar" "=" token
                       |   generic-param


