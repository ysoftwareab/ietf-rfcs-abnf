disaggregated_prefixes = { empty }
nodes_same_level = { empty }
isolated_nodes = nodes_same_level
isolated_nodes =
                       intersection(isolated_nodes,
                                    partial_neighbors[NH].nodes)
next_hop_set = set of minimum cost links to the
               South TIE.originator
next_hop_cost = minimum cost link to
               South TIE.originator
U_1 =: U_2 IIF D_f = 0

leaf_only                            = 0,
leaf_only_and_leaf_2_leaf_procedures = 1,
top_of_fabric                        = 2,
Illegal           = 0,
South             = 1,
North             = 2,
DirectionMaxValue = 3,
Illegal                = 0,
AddressFamilyMinValue  = 1,
IPv4     = 2,
IPv6     = 3,
AddressFamilyMaxValue  = 4,
Illegal                                     = 0,
TIETypeMinValue                             = 1,
NodeTIEType                                 = 2,
PrefixTIEType                               = 3,
PositiveDisaggregationPrefixTIEType         = 4,
NegativeDisaggregationPrefixTIEType         = 5,
PGPrefixTIEType                             = 6,
KeyValueTIEType                             = 7,
ExternalPrefixTIEType                       = 8,
PositiveExternalDisaggregationPrefixTIEType = 9,
TIETypeMaxValue                             = 10,
Illegal               =  0,
RouteTypeMinValue     =  1,
Discard               =  2,

LocalPrefix           =  3,
SouthPGPPrefix        =  4,
NorthPGPPrefix        =  5,
NorthPrefix           =  6,
NorthExternalPrefix   =  7,
SouthPrefix           =  8,
SouthExternalPrefix   =  9,
NegativeSouthPrefix   = 10,
RouteTypeMaxValue     = 11,
link_bandwidth = common.default_bandwidth;
holdtime = common.default_lie_holdtime;
bandwidth = common.default_bandwidth;
