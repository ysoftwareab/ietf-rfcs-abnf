code = *statement

statement =
   	expression-statement /
   	assignment-statement /
   	compound-statement /
   	if-statement /
   	comment /
   	";"

if-statement = if-head *if-alt [if-tail]
if-head      = "if" "(" expression ")" "{" code "}"
if-alt       = "elsif" "(" expression ")" "{" code "}"
if-tail      = "else" "{" code "}"

compound-statement = "{" code "}"

assignment = identifier ":=" expression ";"

expression-statement = expression ";"

expression =
   	constant-expression /
   	name /
   	function-call /
   	"(" expression ")" /
   	"{" code "}" /
   	unary-op expression /
   	expression binary-op expression

constant-expression = boolean / number / string

name = identifier *( "." identifier)

function-call = name "(" [call-parameters] ")"

call-parameters = expression *( "," expression)

identifier = (ALPHA / "_") *(ALPHA / DIGIT / "_")

unary-op =
   	"+" / "-" /
   	identifier
binary-op =
   	"==" / "!=" /
   	"<" / ">" / ">=" / "<=" /
   	"+" / "-" / "*" / "/" / "%" /
   	identifier

comment = "/*" OCTET "*/"             ; no nesting allowed

boolean = "true" / "false"

number = 1*DIGIT ; no leading zeros

string = DQUOTE *string-char DQUOTE

string-char =
   	%x00-21 / %x23-5B / %x5D-FF / ; any but quote and backslash
   	escape-sequence               ; C++ or XML escape sequence? XXX


                                Figure 2
str ==: Remove "==" for strings in examples. There is no such
      operator for strings anymore.
