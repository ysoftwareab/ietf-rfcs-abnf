name="_dhcp__default-lease-time"/> then results in a new rule
name="yam:ARGUMENT">.

k_i=current()/k_i

datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

config-attribute = attribute nma:config { xsd:boolean }
default-attribute = attribute nma:default { text }
implicit-attribute = attribute nma:implicit { xsd:boolean }
error-app-tag-element = element nma:error-app-tag { text }?
error-message-element = element nma:error-message { text }?
instance-identifier-element =
     element nma:instance-identifier {
       attribute nma:require-instance { xsd:boolean }?
     }
key-attribute =
     attribute nma:key {
       list { xsd:QName }
     }
leafref-element =
     attribute nma:leafref {
       xsd:string
     }
min-elements-attribute = attribute nma:min-elements { xsd:integer }
max-elements-attribute = attribute nma:max-elements { xsd:integer }
must-element =
     element nma:must {
       attribute nma:assert { xsd:string },
       (err-app-tag-element & err-message-element)
     }
ordered-by-attribute = attribute nma:ordered-by { "user" | "system" }
presence-attribute = attribute nma:presence { "true" }
status-attribute =
     attribute nma:status { "current" | "deprecated" | "obsolete" }
unique-attribute =
     attribute nma:unique {
       list { xsd:string }
     }
units-attribute = attribute nma:units { xsd:string }
when-attribute = attribute nma:when { xsd:string }
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

message-id-attribute =
     attribute message-id {
       xsd:string { maxLength = "4095" }
     }
ok-element = element nc:ok { empty }
eventTime-element = element en:eventTime { xsd:dateTime }
xmlns="http://relaxng.org/ns/structure/1.0"
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
start =
   element nmt:netmod-tree {
    element nmt:top {
     [ nma:implicit = "true" ]
     element dhcp:dhcp {

      ##
      ##   configuration and operational parameters for a DHCP server
      ##
      ([ nma:default = "7200" nma:units = "seconds" ]
       element dhcp:max-lease-time { xsd:unsignedInt }?
       & [ nma:default = "600" nma:units = "seconds" ]
        element dhcp:default-lease-time {
         xsd:unsignedInt
         >> nma:must [
assert = ". <= ../dhcp:max-lease-time"
ietf-inet-types__ip-prefix =
   ietf-inet-types__ipv4-prefix | ietf-inet-types__ipv6-prefix
ietf-inet-types__ipv4-prefix =
   xsd:string { pattern = "... regex pattern ..." }
ietf-inet-types__ipv6-prefix =
   xsd:string {
pattern = "... regex pattern ..."
pattern = "... regex pattern ..."
ietf-inet-types__ip-address =
   ietf-inet-types__ipv4-address | ietf-inet-types__ipv6-address
ietf-inet-types__ipv4-address =
   xsd:string { pattern = "... regex pattern ..." }
ietf-inet-types__ipv6-address =
   xsd:string {
pattern = "... regex pattern ..."
pattern = "... regex pattern ..."
ietf-inet-types__host =
   ietf-inet-types__ip-address | ietf-inet-types__domain-name
ietf-inet-types__domain-name =
   xsd:string {
minLength = "1"
maxLength = "253"
pattern = "... regex pattern ..."
ietf-yang-types__date-and-time =
   xsd:string { pattern = "... regex pattern ..." }
ietf-yang-types__phys-address =
   xsd:string {
pattern = "([0-9a0-fA-F]{2}(:[0-9a0-fA-F]{2})*)?"
xmlns="http://relaxng.org/ns/structure/1.0"
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
ns="urn:ietf:params:xml:ns:netconf:base:1.0">
start =
    element rpc-reply {
      message-id-attribute,
      element data {
        element dhcp:dhcp {
          element dhcp:max-lease-time { xsd:unsignedInt }?
          & element dhcp:default-lease-time { xsd:unsignedInt }?
          & _dhcp__subnet-list
          & element dhcp:shared-networks {
              element dhcp:shared-network {
                element dhcp:name { xsd:string },
                (_dhcp__subnet-list)
              }*
            }?
          & element dhcp:status {
              element dhcp:leases {
                element dhcp:address { ietf-inet-types__ip-address },
                (element dhcp:starts { ietf-yang-types__date-and-time }?
                 & element dhcp:ends { ietf-yang-types__date-and-time }?
                 & element dhcp:hardware {
                     element dhcp:type {
                       "ethernet" | "token-ring" | "fddi"
                     }?
                     & element dhcp:address {
                         ietf-yang-types__phys-address
                       }?
                   }?)
              }*
            }?
        }?
      }
    }
ietf-inet-types__ip-prefix =
    ietf-inet-types__ipv4-prefix | ietf-inet-types__ipv6-prefix
ietf-inet-types__ipv4-prefix =
    xsd:string { pattern = "... regex pattern ..." }
ietf-inet-types__ipv6-prefix =
    xsd:string {
pattern = "... regex pattern ..."
pattern = "... regex pattern ..."
ietf-inet-types__ip-address =
    ietf-inet-types__ipv4-address | ietf-inet-types__ipv6-address
ietf-inet-types__ipv4-address =
    xsd:string { pattern = "... regex pattern ..." }
ietf-inet-types__ipv6-address =
    xsd:string {
pattern = "... regex pattern ..."
pattern = "... regex pattern ..."
ietf-inet-types__host =
    ietf-inet-types__ip-address | ietf-inet-types__domain-name
ietf-inet-types__domain-name =
    xsd:string {
minLength = "1"
maxLength = "253"
pattern = "... regex pattern ..."
ietf-yang-types__date-and-time =
    xsd:string { pattern = "... regex pattern ..." }
ietf-yang-types__phys-address =
    xsd:string {
pattern =
        "\x{a}" ~
        "    ([0-9a0-fA-F]{2}(:[0-9a0-fA-F]{2})*)?\x{a}" ~
        "   "
prefix="nc"/>
