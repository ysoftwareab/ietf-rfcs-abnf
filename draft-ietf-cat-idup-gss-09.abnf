PER_CONF = { 1.3.6.1.5.7.1.1 } 
         -- perform data confidentiality (i.e., encrypt data) 
PER_CONF_FULL = { 1.3.6.1.5.7.1.3 } 
         -- perform full confidentiality (i.e., encrypt data and sig) 
         -- (may be used only when PER_DOA is requested simultaneously)
PER_DOA  = { 1.3.6.1.5.7.3.1 } 
         -- perform data origin authentication with data integrity 

PER_DOA_CIPH  = { 1.3.6.1.5.7.3.3 } 
         -- perform DOA with DI over ciphertext (rather than plaintext)
         -- (may be used only when PER_CONF is requested simultaneously) 
PER_POO  = { 1.3.6.1.5.7.4.1 } 
         -- perform (i.e., create) non-repudiable "proof of origin" 
PER_POD  = { 1.3.6.1.5.7.4.3 } 
         -- perform (i.e., create) non-repudiable "proof of delivery" 
REC_CONF = { 1.3.6.1.5.7.1.2 } 
         -- receive data confidentiality (i.e., decrypt data) 
REC_CONF_FULL = { 1.3.6.1.5.7.1.4 } 
         -- receive full confidentiality (i.e., decrypt data and sig) 
         -- (may be used only when REC_DOA is received simultaneously)
REC_DOA  = { 1.3.6.1.5.7.3.2 } 
         -- receive / verify DOA with data integrity 
REC_DOA_CIPH  = { 1.3.6.1.5.7.3.4 } 
         -- verify DOA with DI over ciphertext (rather than plaintext)
         -- (may be used only when PER_CONF is received simultaneously) 
REC_POO  = { 1.3.6.1.5.7.4.2 } 
         -- receive / verify "proof of origin" 
REC_POD  = { 1.3.6.1.5.7.4.4 } 
         -- receive / verify "proof of delivery" 
TTIME    = { 1.3.6.1.5.7.7.1 }
         -- trusted time availability 
UTIME    = { 1.3.6.1.5.7.7.2 }
         -- untrusted time availability 

env_handle                = environment handle in use;
idu_buffer                = data buffer;
Protect_Options           = as necessary;

env_handle         = environment handle in use;
pidu_buffer        = received data buffer;

env_handle                           = environment handle in use;
encapsulation_request                = TRUE;
single_idu_buffer                    = data buffer;
env_handle         = environment handle in use;
single_pidu_buffer = received data buffer;

env_handle                           = environment handle in use;
encapsulation_request                = FALSE;
input_buffer = buffer
env_handle            = environment handle in use;
unencapsulated_token  = received unencapsulated token;

input_buffer = buffer
env_handle                          = environment handle in use;
encapsulation_request               = TRUE;
single_idu_buffer                   = very small e-mail message;
env_handle          = environment handle in use;
partial_pidu_buffer = initial buffer of received p-idu;

partial_pidu_buffer = next buffer of p-idu
input_buffer = remaining p-idu buffer
env_handle                           = environment handle in use;
env_handle         = environment handle in use;
single_pidu_buffer = received p-idu buffer (if it fits in a single 
         buffer; otherwise use partial_pidu_buffer and make multiple 
         calls, as above)

