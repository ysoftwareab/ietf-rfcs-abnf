
INTERNET DRAFT                                       P Bagnall
Large-scale Multicast Applications Working Group     R Briscoe
Expiration: 21 May 1998                              A Poppitt
                                                          BT
                                                     21 Nov 1997

                 Taxonomy of Communication Requirements
                 for Large-scale Multicast Applications

                   draft-ietf-lsma-requirements-01.txt

Status of this Memo

     This document is an Internet-Draft.  Internet-Drafts are working
     documents of the Internet Engineering Task Force (IETF), its
     areas, and its working groups.  Note that other groups may also
     distribute working documents as Internet-Drafts.

     Internet-Drafts are draft documents valid for a maximum of six
     months and may be updated, replaced, or obsoleted by other
     documents at any time.  It is inappropriate to use Internet-
     Drafts as reference material or to cite them other than as
     ``work in progress.''

     To learn the current status of any Internet-Draft, please check
     the ``1id-abstracts.txt'' listing contained in the Internet-
     Drafts Shadow Directories on ftp.is.co.za (Africa),
     nic.nordu.net (Europe), munnari.oz.au (Pacific Rim),
     ds.internic.net (US East Coast), or ftp.isi.edu (US West Coast).


Abstract

The intention of this draft is to define a classification system for the
communication requirements of any large-scale multicast application
(LSMA). It is very unlikely one protocol can achieve a compromise
between the diverse requirements of all the parties involved in any
LSMA. It is therefore necessary to understand the worst-case scenarios
in order to minimise the range of protocols needed. Dynamic protocol
adaptation is likely to be necessary which will require logic to map
particular combinations of requirements to particular mechanisms.
Standardising the way that applications define their requirements is a
necessary step towards this. Classification is a first step towards
standardisation.

1. Introduction


This taxonomy consists of a large number of parameters that are
considered useful for description of communication requirements of
LSMAs. To describe a particular application, each parameter would be
assigned a value. Typical ranges of values are given wherever possible.
Failing this, the type of any possible values is given. The parameters
are collected into ten or so higher level categories, but this is purely
for convenience.

The parameters are pitched at a level considered meaningful to
application programmers. However, they describe communications not
applications - the terms "3D virtual world", or "shared TV" might imply
communications requirements, but they don't accurately describe them.
Assumptions about the likely mechanism to achieve each requirement are
avoided where possible. The exception to this is that receiver initiated
join to multicast address groups [refmcast] on an open access Internet
is assumed.

While the parameters describe communications, it will be noticed that
few requirements concerning routing etc. are apparent. This is because
applications have few direct requirements on these second order aspects
of communications. Requirements in these areas will have to be inferred
from application requirements (e.g. latency).

The taxonomy is likely to be useful in a number of ways:
-    most simply, it can be used as a checklist to create a requirements
  statement for a particular LSMA. Example applications will be classified
  [bagnall97] using the taxonomy in order to exercise (and improve) it
-    because strictest requirement have been defined for many
  parameters, it will be possible to identify worst case scenarios for the
  design of protocols
-    because the scope of each parameter has been defined (per session,
  per receiver etc.), it will be possible to highlight where heterogeneity
  is going to be most marked
-    a step towards standardisation of the way LSMAs define their
  communications requirements. This could lead to standard APIs between
  applications and protocol adaptation middleware
-    identification of limitations in current Internet technology for
  LSMAs to be added to the LSMA limitations draft [limitations]
-    identification of gaps in Internet Engineering Task Force (IETF)
  working group coverage

This approach is intended to complement that used where application
scenarios for Distributed Interactive Simulation (DIS) are proposed
[scenarios] in order to generate network design metrics (values of
communications parameters). Instead of creating the communications
parameters from the applications, we try to imagine applications that
might be enabled by stretching communications parameters.

The above introduction assumes all the items under the "Further Work"
section (near the end) have been completed. As they haven't, the reader
is advised to read that section next!

2. Definitions


The following terms have no agreed definition, so they will be defined
for this document.

Session
     a happening or gathering consisting of flows of information related
     by a common description that persists for a non-trivial time (more
     than a few seconds) such that the participants (be they humans or
     applications) are involved and interested at intermediate times
     may be defined recursively as a super-set of other sessions
Secure session
     a session with restricted access
    
A session or secure session may be a sub and/or super set of a multicast
group. A session can simultaneously be both a sub and a super-set of a
multicast group by spanning a number of groups while time-sharing each
group with other sessions.

2.1. Definitions of Roles

Defining all possible roles is not possible. The roles in a
communication are application dependant.

3. Taxonomy


3.1 Summary of Communications Parameters



Before the communications parameters are defined, typed and given worst-
case values, they are simply listed for convenience. Also for
convenience they are collected under classification headings.

Reliability
     packet loss
          Transactional
          Guaranteed
          Tolerated loss
          Semantic loss
     component reliability
          setup fail-over time
          mean time between failures
          fail over time during a stream

Ordering
     Ordering type

Timeliness
     Synchronicity
     Burstiness
     Jitter
     expiry
     latency
     optimum bandwidth
     tolerable bandwidth
     required by time and tolerance
     host performance
     fair delay
     frame size
     content size

Session Control
     initiation
     start time
     end time
     duration
     active time
     session burstiness
     atomic join
     late join allowed ?
     temporary leave allowed ?
     late join with catch-up allowed ?
     potential streams per session
     active streams per sessions
    
Session Topology
     # of senders
     # of receivers
    
Directory
     fail-over timeout (see Reliability: fail-over time)
     mobility
    
Security
     authentication strengh
     tamper-proofing
     non-repudiation strength
     denial of service
     action restriction
     privacy
     retransmit prevention strength
     membership criteria
     membership principals
     collusion prevention
     fairness
     action on compromise

Security dynamics
     mean time between compromises
     compromise detection time limit
     compromise recovery time limit

Payment & Charging
     for what
     charge basis
          content
          services
     when
     who pays whom
     prevention of onward re-sale

Costing of communications
          elements of cost
          cost epochs
          quotations
          charging costs

3.2 Definitions, types and strictest requirements



The terms used in the above table are now defined for the context of
this document. Under each definition, the type of their value is given
and where possible worst-case values and example applications that would
exhibit this requirement.
There is no mention of whether a communication is a stream or a discrete
interaction. An attempt to use this distinction as a way of
characterising communications proved to be remarkably unhelpful and was
dropped.

3.2.1 Reliability


3.2.1.1 Reliability - Packet loss



Transactional
-------------
When multiple operations must occur atomically, transactional
communications guarantee that either all occur or none occur and a
failure is flagged.
Type: Boolean - on/off
Strictest requirement - on
Example application: bank credit transfer, debit and credit must be
atomic.
NB: Transactions are potentially much more complex, but it is believed
this is an application layer problem.

Guaranteed
----------
Guarantees communications will succeed in certain cases.
Type: enumerated
      Deferrable    if communication fails it will be deferred until
                     a time when it will be successful.
      Guaranteed    the communication will succeed so long as all
                     necessary components are working.
      No guarantee - failure will not be reported.
Strictest requirement - deferred
Example application: stock quote feed  guaranteed
NB: the application will need to set parameters to more fully define
Guarantees, which the middleware may translate into, for example, queue
lengths.

Tolerated loss
--------------
This specifies the proportion of data from a communication that can be
lost before the application becomes completely unusable.
Type: fraction
Strictest requirement: 0%
Example application: video  40%

Semantic loss
-------------
The application specifies how many and which parts of the communication
can be discarded if necessary.
type: identifiers - names disposable app level frames
strictest requirement - no loss allowed
example application: video feed - P frames may be lost, I frames not.

3.2.1.2. Component Reliability



Setup Fail-over time
--------------------
The time before a failure is detected and a replacement component is
invoked. This is not directly an application requirement.
Type: time
Strictest Requirement: application dependent
Example application: Name lookup - 5 seconds

Mean time between failures
--------------------------
Type: time
Strictest requirement: indefinite
Example application: xxx

Fail over time during a stream
------------------------------
The time between a stream breaking and a replacement being set up.

Type: time
Strictest Requirement: latency
Example application: xxx

3.2.2. Ordering


Ordering type
-------------
Specifies what ordering must be preserved for the application
Type: boolean  trueidempotent
               false>
     enumeration
          timing values:
                    global
                    per sender
                    none
          sequenced values:
                    global
                    per sender
                    none
          causal values:
                    global
                    per sender
                    none
Strictest requirement - global timed, sequenced & causal
Example application : Game - global causal (to make sure being hit by
bullet occurs after shot is fired!)

3.2.3. Timeliness

There is a meta-requirement on timeliness. If hard real-time is
required then the interpretation of all the other requirements changes.
Failures to achieve the required timeliness must be reported before the
communication is made. By contrast soft real-time means that there is no
guarantee that an event will occur in time. However statistical measures
can be used to indicate the probability of completion in the required
time, and policies such as making sure the probability is 95% or better
could be used.
Hard-real time: Boolean - hard/soft

Synchronicity
-------------
To make sure that separate elements of a session are correctly
synchronised with respect to each other
Type: time
Strictest requirement  80ms
Example application: TV lip-sync value 80ms

Burstiness
----------
This is a measure of the variance of bandwidth requirements over time.
Type: fraction - variation in b/w as fraction of b/w for variable b/w
                 communications
      fraction - duty cycle (fraction of time at peak b/w) for
                 intermittent b/w communications.
Strictest requirement: variation -> max b/w, duty cycle -> 0
Example application: sharing video clips, with chat channel - sudden
                         bursts as clips are swapped.
                     Compressed Audio - difference between silence and
                         talking
NB: More detailed analysis of communication flow (eg max rate of b/w
change or Fourier Transform of the b/w requirement) is possible but as
complexity increases usefulness and computability decrease.

Jitter
------
Jitter is a measure of variance in the time taken for communications to
traverse from the sender (application) to the receiver, as seen from the
application layer.
Type: time
Strictest requirement - <1ms
Example application: audio streaming - <1ms
NB: A jitter requirement implies that the communication is a real-time
stream.

Expiry
------
This specifies how long the information being transferred remains valid
for.
Type: date (seconds since...)
Strictest requirement - for ever
Example application: key distribution - 3600 seconds (valid for at least
one hour)

Latency
-------
Time between initiation and occurrence of an action from application
perspective.
Type: time
Strictest requirement  application dependent
Example application - audio conference 20ms
NB: where an action consists of several distinct sequential parts the
latency budget must be split over those parts. For process control the
requirement may take any value.

Optimum Bandwidth
-----------------
Bandwidth required to complete communication in time
Type: bandwidth
Strictest requirement - xxx
Example application - I phone 8kb/s

Tolerable Bandwidth
-------------------
Minimum bandwidth that application can tolerate
Type: bandwidth
Strictest requirement - xxx
Example application - I phone 4kb/s

Required by time and tolerance
------------------------------
Time communication should complete by and time when failure to complete
renders communication useless (therefore abort).
Type: date - preferred complete time
      date - essential complete time
Strictest requirement  application dependent
Example application: email - 1min & 1 day
NB: bandwidth * duration  size; only two of these parameters may be
specified. An API though could allow application authors to think in
terms of any two.

Host performance
----------------
Ability of host to create/consume communication
Type: application benchmark
Strictest requirement: full consumption
Example application: video - consume 15 frames a second
NB: host performance is complex since load, media type, media quality,
h/w assistance, and encoding scheme all affect the processing load.
These are difficult to predict prior to a communication starting. To
some extent these will need to be measured and modified as the
communication proceeds.

Fair delay
----------
Time between receipt of communication and response by the client should
determine winner of race conditions, not the first response at the
server. The alternative is that the transport should make sure that
delivery is withheld until all reciepients have the data. The specified
requirement determines what delay is acceptable between the first
receiver getting the data and the last receiver getting the data
(assuming no system failures, but including packet loss).
Requirement: the variance in delay between users that is acceptable
Type: time
Strictest requirement: 10ms
Example application: auction room - <10ms

Frame size
----------
Size of logical data packets from application perspective
Type: data size
Strictest requirement: 6bytes (gaming)
Example application: video  data size of single frame update

Content size
------------
The total size of the content (not relevant for continuous media)
Type: data size
Strictest requirement: N/A
Example application: xxx

3.2.4. Session Control


initiation
----------
which initiation mechanism will be used
type: enumeration
        values : announcement
                 invitation
                 directive
example application: corporate s/w update - directive

start time
----------
time sender start sending!
type: date
strictest requirement: now
example app: FTP - at 3am

end time
--------
type: date
strictest requirement: now
example app: FTP - now+30mins

duration
--------
(end time) - (start time)  (duration), therefore only two of three
should be specified.
type: time
strictest requirement: -> 0ms for discrete, indefinite for streams
example app: audio feed - 60mins

active time
------------
total time session is active, not including breaks
type: time
example app: spectator sport transmission

session burstiness
------------------
expected level of burstiness of the session
type: fixed point. variance as fraction of max bandwidth
strictest requirement: bandwidth
example app: commentary & slide show: 90% of max

atomic join
-----------
session fails unless a certain proportion of the potential participants
accept an invitation to join. Alternatively, may be specified as a
specific numeric quorum.
type: fixed point (proportion required) or int (quorum)
strictest requirement: 1.0 (proportion)
example app: price list update, committee meeting
Note: whether certain participants are essential is application
dependent.

late join allowed ?
-------------------
does joining a session after it starts make sense
type: Boolean & indirection
strictest requirement: allowed
example application: game - not allowed, indirect to spectator channel

temporary leave allowed ?
-------------------------
does leaving and then coming back make sense for session
type: Boolean
strictest requirement: allowed
example application: FTP - not allowed

late join with catch-up allowed ?
---------------------------------
is there a mechanism for a late joiner to see what they've missed
type: Boolean & indirection
strictest requirement: allowed
example app: sports event broadcast, allowed, indirect to highlights
channel

potential streams per session
-----------------------------
total number of streams that are part of session, whether being consumed
or not
type: int
strictest requirement: indefinite
example app: football match mcast - multiple camera's, commentary, 15
streams

active streams per sessions  (ie max app can handle)
---------------------------
maximum number of streams that an application can consume simultaneously
type: int
strictest requirements: indefinite
example app: football match mcast - 6, one main video, four user
selected, one audio commentary

3.2.5. Session Topology

Note: topology may be dynamic. One of the challenges in designing
adaptive protocol frameworks is to predict the topology before the first
join.

# of senders
------------
the number of senders is a result the middleware may pass up to the
application
type: int
strictest requirement: indefinite
example app: network MUD - 100

# of receivers
--------------
the number of receivers is a results the middleware may pass up to the
application
type: int
strictest requirement: indefinite
example app: video mcast - 100,000

3.2.6. Directory


fail-over timeout (see Reliability: fail-over time)
-----------------

mobility
--------
defines restrictions on when directory entries may be changed
type: enumeration
        values: while entry is in use
                while entry in unused
                never
strictest requirement: while entry is in use
example app: voice over mobile phone, while entry is in use (as phone
gets new address when changing cell).

3.2.7. Security

The strength of any security arrangement can be stated as the expected
cost of mounting a successful attack. This allows mechanisms such as
physical isolation to be considered alongside encryption mechanisms.
An example type would be 1970 UD$ (to inflation proof).

Security is an othogonal requirement. Many requirements can have a
security requirement on them which mandates that the cost of causing the
system to fail to meet that requirement is more than the specified
ammount. In terms of impact on other requirements though, security does
potentially have a large impact so when a system is trying to determine
which mechanisms to use and whether the requirements can be met
security will clearly be a major influence.

Authentication Strength
-----------------------
Authentication aims to ensure that a principal is who they claim to be.
For each role in a communication (see 2.1) there is a strength for the
authentication of the principle who has taken on that role. The
principal could be a person, organisation or other legal entity. It
could not be a process since a process has no legal representation.

Requirement: That the cost of hijacking a role is in excess of the
specified amount. Each role is a different requirement.
Type: Inflation proofed currency (eg 1970 UD$)
Example application: inter-governmental conference
Strictest Requirement: >budget of largest attacker

Tamper-proofing
---------------
This allows the application to specify how much security will be
applied to ensuring that a communication is not tampered with. This is
specified as the minimum cost of successfully tampering with the
communication. Each non-security requirement has a tamper-proofing
requirement attached to it.
Requirement: The cost of tampering with the communication is in excess
of the specified amount.
Type: Inflation proofed currency: data is unchanged and complete?
      Inflation proofed currency: no replay of transmission is possible?
      Inflation proofed currency: data timeliness is assured (no malicious
 packet delay)?
Strictest requirement: Each >budget of largest attacker
Example application: stock price feed

<ed>Pete - done</ed>
Non-repudiation strength
------------------------
The non-repdiation strength defines how much care is taken to make sure
there is a reliable audit trail on all interactions. It is measured as
the cost of faking an audit trail, and therefore being able to "prove"
an untrue event. There are a number of possible parameters of the event
that need to be proved. The following list is not exclusive but shows
the typical set of requirements.

1. Time
2. Ordering (when relative to other events)
3. Whom
4. What (the event itself)

There are a number of events that need to be provable.
1. sender proved sent
2. receiver proves received
3. sender proves received.

Type: inflation proofed currency
Strictest requirement: >budget of largest attacker
Example application:
    Full audit trail: billing based on usage logs.
    Random partial records: to deter users from fraud with the threat of
        the possibility of being able to detect it.

<ed>Pete - done</ed>
Denial of service
-----------------
There may be a requirement for some systems (999,911,112 emergency
sevices access for example) that denial of service attacks cannot be
launched. While this is difficult (maybe impossible) in many systems
at the moment it is still a requirement, just one that can't be met.

Requirement: cost of launching a denial of service attack is greater
than specified amount.
Strictest Requirement: >budget of largest attacker
Example application: web hosting, to prevent individual hackers stalling
system.

<ed>Pete - done</ed>
Action restriction
------------------
For any given comunication there are a two actions, send and receive.
Operations like adding to members to a group are done as a send to the
membership list. Examining the list is a request to and receive from the
list. Other actions can be generalised to send and receive on some
communication, or are application level not comms level issues.

Type: membership list/rule for each action. Note that both send and
receive may use the same membership policy.
Strictest requirement: send and receive have different policies.
Example application: tv broadcast, sender policy defines transmitter,
receiver policy is null.

<ed>Pete - done</ed>
Privacy
-------
Privacy defines how well obscured a principals identity is. This could
be for any interaction. A list of participants may be obscured, a sender
may obscure their identity when they send. For each possible action
there is a need to define the privacy required. There are also different
types of privacy. For example knowing two messages were sent by the same
person breaks the strongest type of privacy even if the identity of that
sender is still unknown. For each "level" of privacy there is a cost
associated with violating it. The requirement is that this cost is
excessive for the attacker.

Requirement: Level of privacy, expected cost to violate privacy level
             for
    openly identified
    anonymously identified (messages from the same sender can be linked)
    unadvertised (but tracable)
    undetectable
Type: currency
Strictest requirement: all levels >budget of attacker

Retransmit prevention strength
------------------------------
This is extremely hard at the moment. This is not to say it's not a
requirement.

Requirement: the cost of retransmitting a secure piece of information
should exceed the specified amount.
Type:currency

<ed>Pete - done</ed>
Membership Criteria
-------------------
If a principal attempts to participate in a communication then a check
will be made to see if it is allowed to do so. The requirement is that
certain principals will be allowed, and others excluded. Given the
application is being protected from network details there are only two
types of specification available, per user, and per organisation (where
an organisation may contain other organisations, and each user may be a
member of multiple organisations).

Requirement: membership is limited to specified group, or specified
group is excluded.
Type: Boolean - include or exclude
      List of 1) users
              2) organisations
              3) user properties
              4) org properties
              5) hosts
              6) hosts properties

<ed>Pete</ed>
Membership Principals
---------------------
Entities that may join a rule-based secure session atomically. That is,
a group of individuals is a principal if they can only all join or leave
together.
Principals can be considered as the SUBJECT field of an access control
list, but this is not intended to imply ACL is a good method to use.
Type: enumeration
  values: certified individuals
          certified group ids (corporations, organisations)
          lists (i.e. lists of lists,
                 such as multicast groups, secure sessions)
          hosts

Strictest requirement: mixture of all types.
Example application: N/A

<ed>Pete</ed>
Collusion prevention
--------------------
Which aspects of collusion it is required to prevent. Collusion is
defined as malicious co-operation between members of a secure session.
Superficially, it would appear that collusion is not a relevant threat
in a multicast, because everyone has the same information, however,
wherever there is differentiation, it can be exploited.
Type: Boolean: time race collusion (true if needs preventing)
      Boolean: key encryption key (KEK) sharing
      Boolean: sharing of differential QoS
        (not strictly collusion as across sessions not within one)
Strictest requirement: All true.
Time race collusion is the most difficult one to prevent.
Example application: A race where delay of the start signal may be
allowed for, but one participant may fake packet delay while receiving
the start signal from another participant.

<ed>Pete - done</ed>
Fairness
--------
Fairness is orthogonal to many other requirements. Of particular
interest are Reliability and Timeliness requirements. When a
communication is first created the creator may wish to specify a set of
requirements for these parameters. Principals which join later may wish
to set tigher limits. Fairness enforces a policy that any improvement
is requirement by one principal must be matched by all others, in
effect requirements can only be set for the whole group. This increases
the likelyhood that requirements of this kind will fail to be met. If
fairness if not an issue then some parts of the network can use more
friendly methods to achieve those simpler requirements.

Requirement: that the variance of performance with respect to any other
requirement is less than the specified amount.
Type: delta of the requirement that needs to be fair.
Example application: Networked game, latency to receive positions of players
 must
be within 5ms for all players.

<ed>Pete</ed>
Action on compromise
--------------------
The action to take on detection of compromise (until security
reassured).
Not sure this has anything to do with communications, really.
Type: binary enumeration (Boolean?)
  values: warn but continue
          pause
Strictest requirement: pause
Example application: Secure video conference - if intruder alert,
everyone is warned, but they can continue while knowing not to discuss
sensitive matters (cf. catering staff during a meeting).

<ed>Pete</ed>
3.2.7.1. Security Dynamics
--------------------------
Security dynamics are the temporal properties of the security
mechanisms that are deployed. They may affect other requirements such
as latency or simply be a reflection of the security limitations of the
system. The requirements are often concerned with abnormal
circumstances (eg. system violation).

<ed>Pete</ed>
mean time between compromises
-----------------------------
This is not the same as the strength of a system. A fairly weak system
may have a very long time between compromises because it is not worth
breaking in to, or it is only worth it for very few people. Mean time
between compromises is a combination of strength, incentive and scale.
Type: time
Strictest requirement: xxx
Example application: xxx

<ed>Pete</ed>
Compromise detection time limit
-------------------------------
The average time it must take to detect a compromise (one predicted in
the design of the detection system, that is).
Type: time
Strictest requirement: xxx
Example application: xxx

<ed>Pete</ed>
Compromise recovery time limit
------------------------------
The maximum time it must take to re-seal the security after a breach.
This combined with the compromise detection time limit defines how long
the system must remain inactive to avoid more security breaches. For
example if a compromise is detected in one minute, and recovery takes
five, then one minute of traffic is now insecure and the members of the
communication must remain silent for four minutes after detection while
security is re-established.

Type: time
Strictest requirement: 1 second [NSA]
Example application: xxx

<ed>Pete</ed>
3.2.8. Payment & Charging

This whole section is probably too far outside the scope of the LSMA
working group and is unfinished anyway.

<ed>Pete</ed>
charging for what?
------------------
     content
     services
          content distribution service
          QoS transmission
          security services
          directory services

Type:
Strictest requirement
Example application:

<ed>Pete</ed>
Charge basis: content
---------------------
(often different granularity to ownership basis)
ownership of content
     own use/consumption
          unlimited
          limited (e.g. n copies or n "views")
          royalty-based (pay per "view")
     resale
          unlimited
          limited (e.g. n copies)
          royalty-based (could hit multicast enabled routers hard!)
     own use and resale
     own use and not resale
     resale and not own use

Type:
Strictest requirement
Example application:

<ed>Pete</ed>
Charge basis: services
----------------------
     subscription
          time expired
          in perpetuity
     pay per consumption time
     pay per "object"
     hybrids of all these

Type:
Strictest requirement
Example application:

<ed>Pete</ed>
Payment: When?
---------------
     pre-paid deposit
     pre-pay (before any of each charge basis listed above)
     post-pay (before any of each charge basis listed above)
          periodically billed by usage
     free for introductory period
     credit and debit decoupled within tolerance
          time limited
          money limited
          time/money hybrid (formula, e.g. 30days if <A350)

Type:
Strictest requirement
Example application:

<ed>Pete</ed>
Who pays whom?
--------------
(directly as opposed to one collecting for another - every role player
could charge directly, but these are the more likely ones to do so)
This bit would be easier to read in two dimensions - who charges and who
pays
     Media distributor (typically pays media owner (typically pays media
advertiser))
     Session owner (typically pays session advertiser (and might well
pay media distributor))
     Network providers (may be paid by session owner, but difficult as
diff. receivers use diff.networks)
     Terminal owners (e.g. library, kiosk, arcade, pub etc)
     Matchmaker (in auctions, session directories etc.)
     advertising (to partially allay costs, or cover totally)
     sender pays (e.g. propaganda that receivers are paid to read!)
     pay to receive, paid to send (e.g. to encourage contribution of
home videos - yuk!)

Type:
Strictest requirement
Example application:

<ed>Pete</ed>
prevention of onward re-sale
----------------------------
Type:
Strictest requirement
Example application:

<ed>Pete</ed>
3.2.8.1. Costing of communications



See also topology

<ed>Pete</ed>
Elements of cost
----------------
     terminal resources & QoS
     network resources & QoS
     server resources & QoS

Type:
Strictest requirement
Example application:

<ed>Pete</ed>
Cost epochs
-----------
     up front investment
     fixed running costs independent of use
     variable (use-dependent) costs

Type:
Strictest requirement
Example application:

<ed>Pete</ed>
quotations
----------
     response time
     off-line "well known" pricing
     expiry
     spot pricing

Type:
Strictest requirement
Example application:

<ed>Pete</ed>
Costs of charging
-----------------
     communications
     storage
     processing
     debt recovery
     fraud detection
     customer service (proving charges are valid)

Type:
Strictest requirement
Example application:


<ed>Pete</ed>
4. Mapping of Requirements to IETF Working Groups



TBA

<ed>Pete</ed>
5. Further Work


Attempt to simplify! Refine definitions and types. In particular clarify
where enumerations aren't intended to be "one of" types. Complete
specifying worst case values & example apps.

Identification of scope of each parameter (per session, per receiver,
per sender etc.) to highlight potential heterogeneity problems

Mapping between requirements and IETF Working Groups

Exercising the taxonomy with some scenarios

Exercising the taxonomy with some media-types which represent large sub-
sets of application capabilities so can potentially be "macros" or
shorthand to set values (or ranges) for a large number of parameters at
once.

6. Security Considerations


See comprehensive security section of taxonomy.

References


[Bagnall97] Bagnall Peter, Poppitt Alan, Example LSMA classifications [TBA]

[refmcast] IP multicast ref

[limitations] Pullen M, Myjak M, Bouwens C, Limitations of Internet
Protocol Suite for Distributed Simulation in the Large Multicast
Environment, Internet Draft, 26 Mar 1997, draft-ietf-lsma-limitations-
01.txt

[scenarios] Seidensticker S, Smith W, Myjak W, Scenarios and Appropriate
Protocols for Distributed Interactive Simulation, Internet Draft, 21 Jul
1997, draft-ietf-lsma-scenarios-01.txt

[rmodp] Open Distributed Processing Reference Model (RM-ODP), ISO/IEC
10746-1 to 10746-4 or ITU-T (formerly CCITT) X.901 to X.904. Jan 1995.
Catalogue entries: <URL:http://www.iso.ch/isob/switch-engine-
cate.pl?searchtyperefnumber&KEYWORDS10746>

[blaze95] Blaze, Diffie, Rivest, Schneier, Shimomura, Thompson and
Wiener, Paper on minimal key lengths for security in secret key ciphers?
late 1995

[NSA] Wallner D, Harder E, Agee R, Key Management for Multicast: Issues
and Architectures, National Security Agency, 1 July '97. Internet Draft
draft-wallner-key-arch-00.txt

8. Authors' Addresses

Bob Briscoe
   B54/74 BT Labs
   Martlesham Heath
   Ipswich, IP5 3RE
   England
   Phone: +44 1473 645196
   Fax:   +44 1473 640929
   EMail: briscorj@boat.bt.com
   Home page: http://www.labs.bt.com/people/briscorj/

Peter Bagnall
   B54/74 BT Labs
   Martlesham Heath
   Ipswich, IP5 3RE
   England
   Phone: +44 1473 647372
   Fax:   +44 1473 640929
   EMail: pbagnall@jungle.bt.co.uk
   Home page: http://www.labs.bt.com/people/bagnalpm/

Alan Poppitt
   B54/74 BT Labs
   Martlesham Heath
   Ipswich, IP5 3RE
   England
   Phone: +44 1473 640889
   Fax:   +44 1473 640929
   EMail: apoppitt@jungle.bt.co.uk
   Home page: http://www.labs.bt.com/people/poppitag/

