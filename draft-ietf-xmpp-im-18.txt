

Network Working Group                                     P. Saint-Andre
Internet-Draft                                                 J. Miller
Expires: April 25, 2004                       Jabber Software Foundation
                                                        October 26, 2003


                         XMPP Instant Messaging
                         draft-ietf-xmpp-im-18

Status of this Memo

   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC2026.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups. Note that other
   groups may also distribute working documents as Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time. It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at http://
   www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on April 25, 2004.

Copyright Notice

   Copyright (C) The Internet Society (2003). All Rights Reserved.

Abstract

   This memo describes extensions to and applications of the core
   features of the Extensible Messaging and Presence Protocol (XMPP Core
   [1]) that provide the basic instant messaging (IM) and presence
   functionality defined in RFC 2779 [2].











Saint-Andre & Miller     Expires April 25, 2004                 [Page 1]

Internet-Draft           XMPP Instant Messaging             October 2003


Table of Contents

   1.    Introduction . . . . . . . . . . . . . . . . . . . . . . .    6
   1.1   Overview . . . . . . . . . . . . . . . . . . . . . . . . .    6
   1.2   Requirements . . . . . . . . . . . . . . . . . . . . . . .    6
   1.3   Terminology  . . . . . . . . . . . . . . . . . . . . . . .    7
   1.4   Discussion Venue . . . . . . . . . . . . . . . . . . . . .    7
   1.5   Intellectual Property Notice . . . . . . . . . . . . . . .    7
   2.    Syntax of XML Stanzas  . . . . . . . . . . . . . . . . . .    7
   2.1   Message Syntax . . . . . . . . . . . . . . . . . . . . . .    7
   2.1.1 Types of Message . . . . . . . . . . . . . . . . . . . . .    7
   2.1.2 Child Elements . . . . . . . . . . . . . . . . . . . . . .    9
   2.2   Presence Syntax  . . . . . . . . . . . . . . . . . . . . .   10
   2.2.1 Types of Presence  . . . . . . . . . . . . . . . . . . . .   10
   2.2.2 Child Elements . . . . . . . . . . . . . . . . . . . . . .   11
   2.3   IQ Syntax  . . . . . . . . . . . . . . . . . . . . . . . .   12
   2.4   Extended Namespaces  . . . . . . . . . . . . . . . . . . .   12
   3.    Session Establishment  . . . . . . . . . . . . . . . . . .   13
   4.    Exchanging Messages  . . . . . . . . . . . . . . . . . . .   16
   4.1   Specifying an Intended Recipient . . . . . . . . . . . . .   16
   4.2   Specifying a Message Type  . . . . . . . . . . . . . . . .   17
   4.3   Specifying a Message Body  . . . . . . . . . . . . . . . .   17
   4.4   Specifying a Message Subject . . . . . . . . . . . . . . .   17
   4.5   Specifying a Conversation Thread . . . . . . . . . . . . .   18
   5.    Exchanging Presence Information  . . . . . . . . . . . . .   19
   5.1   Client and Server Presence Responsibilities  . . . . . . .   19
   5.2   Specifying Availability Status . . . . . . . . . . . . . .   22
   5.3   Specifying Detailed Status Information . . . . . . . . . .   22
   5.4   Specifying Presence Priority . . . . . . . . . . . . . . .   22
   5.5   Presence Examples  . . . . . . . . . . . . . . . . . . . .   22
   6.    Managing Subscriptions . . . . . . . . . . . . . . . . . .   26
   6.1   Requesting a Subscription  . . . . . . . . . . . . . . . .   26
   6.2   Handling a Subscription Request  . . . . . . . . . . . . .   27
   6.3   Cancelling a Subscription from Another Entity  . . . . . .   27
   6.4   Unsubscribing from Another Entity's Presence . . . . . . .   27
   7.    Roster Management  . . . . . . . . . . . . . . . . . . . .   28
   7.1   Syntax and Semantics . . . . . . . . . . . . . . . . . . .   28
   7.2   Business Rules . . . . . . . . . . . . . . . . . . . . . .   29
   7.3   Retrieving One's Roster on Login . . . . . . . . . . . . .   29
   7.4   Adding a Roster Item . . . . . . . . . . . . . . . . . . .   30
   7.5   Updating a Roster Item . . . . . . . . . . . . . . . . . .   31
   7.6   Deleting a Roster Item . . . . . . . . . . . . . . . . . .   31
   8.    Integration of Roster Items and Presence Subscriptions . .   32
   8.1   Overview . . . . . . . . . . . . . . . . . . . . . . . . .   32
   8.2   User Subscribes to Contact . . . . . . . . . . . . . . . .   33
   8.2.1 Alternate Flow: Contact Declines Subscription Request  . .   37
   8.3   Creating a Mutual Subscription . . . . . . . . . . . . . .   38
   8.3.1 Alternate Flow: User Declines Subscription Request . . . .   41



Saint-Andre & Miller     Expires April 25, 2004                 [Page 2]

Internet-Draft           XMPP Instant Messaging             October 2003


   8.4   Unsubscribing  . . . . . . . . . . . . . . . . . . . . . .   43
   8.4.1 Case #1: Unsubscribing When Subscription is Not Mutual . .   43
   8.4.2 Case #2: Unsubscribing When Subscription is Mutual . . . .   45
   8.5   Cancelling a Subscription  . . . . . . . . . . . . . . . .   48
   8.5.1 Case #1: Cancelling When Subscription is Not Mutual  . . .   48
   8.5.2 Case #2: Cancelling When Subscription is Mutual  . . . . .   50
   8.6   Removing a Roster Item and Cancelling All Subscriptions  .   52
   9.    Subscription States  . . . . . . . . . . . . . . . . . . .   54
   9.1   Defined States . . . . . . . . . . . . . . . . . . . . . .   54
   9.2   Server Handling of Outbound Presence, Categorized by
         Subscription State . . . . . . . . . . . . . . . . . . . .   55
   9.2.1 Subscription State = None  . . . . . . . . . . . . . . . .   55
   9.2.2 Subscription State = None + Pending Out  . . . . . . . . .   55
   9.2.3 Subscription State = None + Pending In . . . . . . . . . .   56
   9.2.4 Subscription State = None + Pending Out/In . . . . . . . .   56
   9.2.5 Subscription State = To  . . . . . . . . . . . . . . . . .   56
   9.2.6 Subscription State = To + Pending In . . . . . . . . . . .   56
   9.2.7 Subscription State = From  . . . . . . . . . . . . . . . .   57
   9.2.8 Subscription State = From + Pending Out  . . . . . . . . .   57
   9.2.9 Subscription State = Both  . . . . . . . . . . . . . . . .   57
   9.3   Server Handling of Outbound Presence, Categorized by
         Presence Type  . . . . . . . . . . . . . . . . . . . . . .   57
   9.3.1 Subscribe  . . . . . . . . . . . . . . . . . . . . . . . .   58
   9.3.2 Subscribed . . . . . . . . . . . . . . . . . . . . . . . .   58
   9.3.3 Unsubscribe  . . . . . . . . . . . . . . . . . . . . . . .   58
   9.3.4 Unsubscribed . . . . . . . . . . . . . . . . . . . . . . .   59
   9.4   Server Handling of Inbound Presence, Categorized by
         Subscription State . . . . . . . . . . . . . . . . . . . .   59
   9.4.1 Subscription State = None  . . . . . . . . . . . . . . . .   59
   9.4.2 Subscription State = None + Pending Out  . . . . . . . . .   60
   9.4.3 Subscription State = None + Pending In . . . . . . . . . .   60
   9.4.4 Subscription State = None + Pending Out/In . . . . . . . .   60
   9.4.5 Subscription State = To  . . . . . . . . . . . . . . . . .   60
   9.4.6 Subscription State = To + Pending In . . . . . . . . . . .   61
   9.4.7 Subscription State = From  . . . . . . . . . . . . . . . .   61
   9.4.8 Subscription State = From + Pending Out  . . . . . . . . .   61
   9.4.9 Subscription State = Both  . . . . . . . . . . . . . . . .   61
   9.5   Server Handling of Inbound Presence, Categorized by
         Presence Type  . . . . . . . . . . . . . . . . . . . . . .   62
   9.5.1 Subscribe  . . . . . . . . . . . . . . . . . . . . . . . .   62
   9.5.2 Subscribed . . . . . . . . . . . . . . . . . . . . . . . .   62
   9.5.3 Unsubscribe  . . . . . . . . . . . . . . . . . . . . . . .   62
   9.5.4 Unsubscribed . . . . . . . . . . . . . . . . . . . . . . .   63
   9.6   Server Delivery and Client Acknowledgement of
         Subscription State Change Notifications  . . . . . . . . .   63
   10.   Blocking Communication . . . . . . . . . . . . . . . . . .   64
   10.1  Syntax and Semantics . . . . . . . . . . . . . . . . . . .   65
   10.2  Business Rules . . . . . . . . . . . . . . . . . . . . . .   67



Saint-Andre & Miller     Expires April 25, 2004                 [Page 3]

Internet-Draft           XMPP Instant Messaging             October 2003


   10.3  Retrieving One's Privacy Lists . . . . . . . . . . . . . .   68
   10.4  Managing Active Lists  . . . . . . . . . . . . . . . . . .   70
   10.5  Managing the Default List  . . . . . . . . . . . . . . . .   72
   10.6  Editing a Privacy List . . . . . . . . . . . . . . . . . .   73
   10.7  Adding a New Privacy List  . . . . . . . . . . . . . . . .   73
   10.8  Removing a Privacy List  . . . . . . . . . . . . . . . . .   73
   10.9  Blocking Messages  . . . . . . . . . . . . . . . . . . . .   74
   10.10 Blocking Inbound Presence Notifications  . . . . . . . . .   76
   10.11 Blocking Outbound Presence Notifications . . . . . . . . .   78
   10.12 Blocking IQs . . . . . . . . . . . . . . . . . . . . . . .   79
   10.13 Blocking All Communication . . . . . . . . . . . . . . . .   81
   10.14 Blocked Entity Attempts to Communicate with User . . . . .   82
   10.15 Higher-Level Heuristics  . . . . . . . . . . . . . . . . .   83
   11.   IANA Considerations  . . . . . . . . . . . . . . . . . . .   84
   11.1  XML Namespace Name for Session Data  . . . . . . . . . . .   84
   12.   Internationalization Considerations  . . . . . . . . . . .   84
   13.   Security Considerations  . . . . . . . . . . . . . . . . .   85
   14.   Server Rules for Handling XML Stanzas  . . . . . . . . . .   85
   15.   Compliance Requirements  . . . . . . . . . . . . . . . . .   87
   15.1  Servers  . . . . . . . . . . . . . . . . . . . . . . . . .   87
   15.2  Clients  . . . . . . . . . . . . . . . . . . . . . . . . .   87
         Normative References . . . . . . . . . . . . . . . . . . .   88
         Informative References . . . . . . . . . . . . . . . . . .   88
         Authors' Addresses . . . . . . . . . . . . . . . . . . . .   89
   A.    vCards . . . . . . . . . . . . . . . . . . . . . . . . . .   89
   B.    XML Schemas  . . . . . . . . . . . . . . . . . . . . . . .   89
   B.1   jabber:client  . . . . . . . . . . . . . . . . . . . . . .   89
   B.2   jabber:server  . . . . . . . . . . . . . . . . . . . . . .   93
   B.3   session  . . . . . . . . . . . . . . . . . . . . . . . . .   97
   B.4   jabber:iq:privacy  . . . . . . . . . . . . . . . . . . . .   98
   B.5   jabber:iq:roster . . . . . . . . . . . . . . . . . . . . .  100
   C.    Differences Between Jabber Instant Messaging and XMPP  . .  101
   C.1   Session Creation . . . . . . . . . . . . . . . . . . . . .  101
   C.2   Privacy Rules  . . . . . . . . . . . . . . . . . . . . . .  102
   D.    Revision History . . . . . . . . . . . . . . . . . . . . .  102
   D.1   Changes from draft-ietf-xmpp-im-17 . . . . . . . . . . . .  102
   D.2   Changes from draft-ietf-xmpp-im-16 . . . . . . . . . . . .  102
   D.3   Changes from draft-ietf-xmpp-im-15 . . . . . . . . . . . .  103
   D.4   Changes from draft-ietf-xmpp-im-14 . . . . . . . . . . . .  103
   D.5   Changes from draft-ietf-xmpp-im-13 . . . . . . . . . . . .  103
   D.6   Changes from draft-ietf-xmpp-im-12 . . . . . . . . . . . .  104
   D.7   Changes from draft-ietf-xmpp-im-11 . . . . . . . . . . . .  104
   D.8   Changes from draft-ietf-xmpp-im-10 . . . . . . . . . . . .  104
   D.9   Changes from draft-ietf-xmpp-im-09 . . . . . . . . . . . .  105
   D.10  Changes from draft-ietf-xmpp-im-08 . . . . . . . . . . . .  105
   D.11  Changes from draft-ietf-xmpp-im-07 . . . . . . . . . . . .  105
   D.12  Changes from draft-ietf-xmpp-im-06 . . . . . . . . . . . .  105
   D.13  Changes from draft-ietf-xmpp-im-05 . . . . . . . . . . . .  105



Saint-Andre & Miller     Expires April 25, 2004                 [Page 4]

Internet-Draft           XMPP Instant Messaging             October 2003


   D.14  Changes from draft-ietf-xmpp-im-04 . . . . . . . . . . . .  106
   D.15  Changes from draft-ietf-xmpp-im-03 . . . . . . . . . . . .  106
   D.16  Changes from draft-ietf-xmpp-im-02 . . . . . . . . . . . .  106
   D.17  Changes from draft-ietf-xmpp-im-01 . . . . . . . . . . . .  106
   D.18  Changes from draft-ietf-xmpp-im-00 . . . . . . . . . . . .  107
   D.19  Changes from draft-miller-xmpp-im-02 . . . . . . . . . . .  107
         Intellectual Property and Copyright Statements . . . . . .  108












































Saint-Andre & Miller     Expires April 25, 2004                 [Page 5]

Internet-Draft           XMPP Instant Messaging             October 2003


1. Introduction

1.1 Overview

   The Extensible Messaging and Presence Protocol (XMPP) is a protocol
   for streaming XML [3] elements in order to exchange messages and
   presence information in close to real time. The core features of XMPP
   are defined in XMPP Core [1]. These features -- specifically XML
   streams, stream authentication and encryption, and the <message/>,
   <presence/>, and <iq/> children of the stream root -- provide the
   building blocks for many types of near-real-time applications, which
   may be layered on top of the core by sending application-specific
   data qualified by particular XML namespaces [4]. This memo describes
   extensions to and applications of the core features of XMPP that
   provide the basic functionality expected of an instant messaging (IM)
   and presence application as defined in RFC 2779 [2].

1.2 Requirements

   For the purposes of this memo, the requirements of a basic instant
   messaging and presence application are defined by RFC 2779 [2]. At a
   high level, RFC 2779 stipulates that a user must be able to complete
   the following use cases:

   o  Exchange messages with other users

   o  Exchange presence information with other users

   o  Manage subscriptions to and from other users

   o  Manage items in a contact list (in XMPP this is called a "roster")

   o  Block communications to or from specific other users

   Detailed definitions of these functionality areas are contained in
   RFC 2779, and the interested reader is directed to that document
   regarding the requirements addressed herein.

   Note: while XMPP-based instant messaging and presence meets the
   requirements of RFC 2779, it was not designed explicitly with RFC
   2779 in mind, since the base protocol evolved through an open
   development process within the Jabber open-source community before
   RFC 2779 was written. Note also that although protocols addressing
   many other functionality areas have been defined in the Jabber
   community, such protocols are not included in this memo because they
   are not required by RFC 2779 [2].





Saint-Andre & Miller     Expires April 25, 2004                 [Page 6]

Internet-Draft           XMPP Instant Messaging             October 2003


1.3 Terminology

   This memo inherits the terminology defined in XMPP Core [1].

   The capitalized key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
   "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in RFC
   2119 [5].

1.4 Discussion Venue

   The authors welcome discussion and comments related to the topics
   presented in this document. The preferred forum is the
   <xmppwg@jabber.org> mailing list, for which archives and subscription
   information are available at <http://www.jabber.org/cgi-bin/mailman/
   listinfo/xmppwg/>.

1.5 Intellectual Property Notice

   This document is in full compliance with all provisions of Section 10
   of RFC 2026. Parts of this specification use the term "jabber" for
   identifying namespaces and other protocol syntax. Jabber[tm] is a
   registered trademark of Jabber, Inc.  Jabber, Inc. grants permission
   to the IETF for use of the Jabber trademark in association with this
   specification and its successors, if any.

2. Syntax of XML Stanzas

   The basic semantics and common attributes of XML stanzas qualified by
   the 'jabber:client' and 'jabber:server' namespaces are defined in
   XMPP Core [1]. However, these namespaces also define various child
   elements, as well as values for the common 'type' attribute, that are
   specific to instant messaging and presence applications. Thus, before
   addressing particular "use cases" for such applications, we here
   further describe the syntax of XML stanzas, thereby supplementing the
   discussion in XMPP Core [1].

2.1 Message Syntax

   Message stanzas in the 'jabber:client' or 'jabber:server' namespace
   are used to "push" information to another entity. Common uses in
   instant messaging applications include single messages, messages sent
   in the context of a chat conversation, messages sent in the context
   of a multi-user chat room, headlines, and errors.

2.1.1 Types of Message

   The 'type' attribute of a message stanza is RECOMMENDED; if included,



Saint-Andre & Miller     Expires April 25, 2004                 [Page 7]

Internet-Draft           XMPP Instant Messaging             October 2003


   it specifies the conversational context of the message, thus
   providing a hint regarding presentation (e.g., in a GUI). If
   included, the 'type' attribute MUST have one of the following values:

   o  chat -- The message is sent in the context of a one-to-one chat
      conversation. A compliant client SHOULD present the message an
      interface enabling one-to-one chat between the two parties,
      including an appropriate conversation history.

   o  error -- An error has occurred related to a previous message sent
      by the sender (for details regarding stanza error syntax, refer to
      XMPP Core [1]). A compliant client SHOULD present an appropriate
      interface informing the sender of the nature of the error.

   o  groupchat -- The message is sent in the context of a multi-user
      chat environment. A compliant client SHOULD present the message an
      interface enabling many-to-many chat between the parties,
      including a roster of parties in the chatroom and an appropriate
      conversation history. Full definition of XMPP-based groupchat
      protocols is out of scope for this memo.

   o  headline -- The message is probably generated by an automated
      service that delivers or broadcasts content (news, sports, market
      information, RSS feeds, etc.). No reply to the message is
      expected, and a compliant client SHOULD present the message an
      interface that appropriately differentiates the message from
      standalone messages, chat sessions, or groupchat sessions (e.g.,
      by not providing the recipient with the ability to reply).

   o  normal -- The message is a single message that is sent outside the
      context of a one-to-one conversation or groupchat, and to which it
      is expected that the recipient will reply. A compliant client
      SHOULD present the message in an interface enabling the recipient
      to reply.

   An IM application SHOULD support all of the foregoing message types;
   if an application receives a message with no 'type' attribute or the
   application does not understand the value of the 'type' attribute
   provided, it MUST consider the message to be of type "normal" (i.e.,
   "normal" is the default). The "error" type MUST be generated only in
   response to an error related to a message received from another
   entity.

   Although the 'type' attribute is NOT REQUIRED, it is considered
   polite to mirror the type in any replies to a message; furthermore,
   some specialized applications (e.g., a multi-user chat service) MAY
   at their discretion enforce the use of a particular message type
   (e.g., type='groupchat').



Saint-Andre & Miller     Expires April 25, 2004                 [Page 8]

Internet-Draft           XMPP Instant Messaging             October 2003


2.1.2 Child Elements

   As described under extended namespaces (Section 2.4), a message
   stanza MAY contain any properly-namespaced child element.

   In accordance with the default namespace declaration, by default a
   message stanza is in the 'jabber:client' or 'jabber:server'
   namespace, which defines certain allowable children of message
   stanzas. If the message stanza is of type "error", it MUST include an
   <error/> child; for details, see XMPP Core [1]. Otherwise, the
   message stanza MAY contain any of the following child elements
   without an explicit namespace declaration:

   1.  <subject/>

   2.  <body/>

   3.  <thread/>


2.1.2.1 Subject

   The <subject/> element contains XML character data that specifies the
   topic of the message. The <subject/> element MUST NOT possess any
   attributes, with the exception of the 'xml:lang' attribute. Multiple
   instances of the <subject/> element MAY be included for the purpose
   of providing alternate versions of the same subject, but only if each
   instance possesses an 'xml:lang' attribute with a distinct language
   value. The <subject/> element MUST NOT contain mixed content (as
   defined in Section 3.2.2 of the XML specification [3]).

2.1.2.2 Body

   The <body/> element contains XML character data that specifies the
   textual contents of the message; this child element is normally
   included but NOT REQUIRED. The <body/> element MUST NOT possess any
   attributes, with the exception of the 'xml:lang' attribute. Multiple
   instances of the <body/> element MAY be included but only if each
   instance possesses an 'xml:lang' attribute with a distinct language
   value. The <body/> element MUST NOT contain mixed content (as defined
   in Section 3.2.2 of the XML specification [3]).

2.1.2.3 Thread

   The <thread/> element contains XML character data that specifies an
   identifier that is used for tracking a conversation thread (sometimes
   referred to as an "instant messaging session") between two entities.
   The value of the <thread/> element is generated by the sender and



Saint-Andre & Miller     Expires April 25, 2004                 [Page 9]

Internet-Draft           XMPP Instant Messaging             October 2003


   that SHOULD be copied back in any replies. If used, it MUST be unique
   to that conversation thread within the stream and MUST be consistent
   throughout that conversation (a client that receives a message from
   the same full JID but with a different thread ID MUST assume that the
   message in question exists outside the context of the existing
   conversation thread). The use of the <thread/> element is OPTIONAL
   and is not used to identify individual messages, only conversations.
   A message stanza MUST NOT contain more than one <thread/> element.
   The <thread/> element MUST NOT possess any attributes. The value of
   the <thread/> element MUST be treated as opaque by entities; no
   semantic meaning may be derived from it, and only exact comparisons
   may be made against it. The <thread/> element MUST NOT contain mixed
   content (as defined in Section 3.2.2 of the XML specification [3]).

2.2 Presence Syntax

   Presence stanzas are used in the 'jabber:client' or 'jabber:server'
   namespace to express an entity's current availability status (offline
   or online, along with various sub-states of the latter and optional
   user-defined descriptive text), and to communicate that status to
   other entities. Presence stanzas are also used to negotiate and
   manage subscriptions to the presence of other entities.

2.2.1 Types of Presence

   The 'type' attribute of a presence stanza is OPTIONAL. A presence
   stanza that does not possess a 'type' attribute is used to signal to
   the server that the sender is online and available for communication.
   If included, the 'type' attribute specifies a lack of availability, a
   request to manage a subscription to another entity's presence, a
   request for another entity's current presence, or an error related to
   a previously-sent presence stanza. If included, the 'type' attribute
   MUST have one of the following values:

   o  unavailable -- Signals that the entity is no longer available for
      communication.

   o  subscribe -- The sender wishes to subscribe to the recipient's
      presence.

   o  subscribed -- The sender has allowed the recipient to receive
      their presence.

   o  unsubscribe -- A notification that an entity is unsubscribing from
      another entity's presence.

   o  unsubscribed -- The subscription request has been denied or a
      previously-granted subscription has been cancelled.



Saint-Andre & Miller     Expires April 25, 2004                [Page 10]

Internet-Draft           XMPP Instant Messaging             October 2003


   o  probe -- A request for an entity's current presence; SHOULD be
      generated only by a server and SHOULD NOT be generated by a
      client.

   o  error -- An error has occurred regarding processing or delivery of
      a previously-sent presence stanza.

   For detailed information regarding presence semantics and the
   subscription model used in the context of XMPP-based instant
   messaging and presence applications, refer to Exchanging Presence
   Information (Section 5) and Managing Subscriptions (Section 6).

2.2.2 Child Elements

   As described under extended namespaces (Section 2.4), a presence
   stanza MAY contain any properly-namespaced child element.

   In accordance with the default namespace declaration, by default a
   presence stanza is in the 'jabber:client' or 'jabber:server'
   namespace, which defines certain allowable children of presence
   stanzas. If the presence stanza is of type "error", it MUST include
   an <error/> child; for details, see XMPP Core [1]. If the presence
   stanza possesses no 'type' attribute, it MAY contain any of the
   following child elements (note that the <status/> child MAY be sent
   in a presence stanza of type "unavailable" or, for historical
   reasons, "subscribe"):

   1.  <show/>

   2.  <status/>

   3.  <priority/>


2.2.2.1 Show

   The OPTIONAL <show/> element contains XML character data that
   specifies the particular availability status of an entity or specific
   resource. A presence stanza MUST NOT contain more than one <show/>
   element. The <show/> element MUST NOT possess any attributes. The XML
   character data contained in the <show/> element is not intended to be
   human-readable. If provided, the CDATA value MUST be one of the
   following (additional availability types could be defined through a
   properly-namespaced child element of the presence stanza):

   o  away -- The entity or resource is temporarily away.

   o  chat -- The entity or resource is actively interested in chatting.



Saint-Andre & Miller     Expires April 25, 2004                [Page 11]

Internet-Draft           XMPP Instant Messaging             October 2003


   o  xa -- The entity or resource is away for an extended period (xa =
      "eXtended Away").

   o  dnd -- The entity or resource is busy (dnd = "Do Not Disturb").

   If no <show/> element is provided, the entity is assumed to be online
   and available.

2.2.2.2 Status

   The OPTIONAL <status/> element contains a natural-language
   description of availability status. It is normally used in
   conjunction with the show element to provide a detailed description
   of an availability state (e.g., "In a meeting"). The <status/>
   element MUST NOT possess any attributes, with the exception of the
   'xml:lang' attribute. Multiple instances of the <status/> element MAY
   be included but only if each instance possesses an 'xml:lang'
   attribute with a distinct language value.

2.2.2.3 Priority

   The OPTIONAL <priority/> element contains XML character data that
   specifies the priority level of the connected resource. The value may
   be any integer between -128 and +127. A presence stanza MUST NOT
   contain more than one <priority/> element. The <priority/> element
   MUST NOT possess any attributes. If no priority is provided, a server
   SHOULD consider the priority to be zero. For information regarding
   the semantics of priority values in stanza routing within instant
   messaging and presence applications, refer to Server Rules for
   Handling XML Stanzas (Section 14).

2.3 IQ Syntax

   IQ stanzas provide a structured request-response mechanism. The basic
   semantics of that mechanism are defined in XMPP Core [1], whereas the
   specific semantics required to complete particular use cases are
   defined in all cases by an extended namespace (Section 2.4) (note
   that the 'jabber:client' and 'jabber:server' namespaces do not define
   any children of IQ stanzas). This memo defines two such extended
   namespaces, one for Roster Management (Section 7) and the other for
   Blocking Communication (Section 10); however, an IQ stanza MAY
   contain structured information qualified by any extended namespace.

2.4 Extended Namespaces

   While the three XML stanza kinds defined in the "jabber:client" or
   "jabber:server" namespace (along with their attributes and child
   elements) provide a basic level of functionality for messaging and



Saint-Andre & Miller     Expires April 25, 2004                [Page 12]

Internet-Draft           XMPP Instant Messaging             October 2003


   presence, XMPP uses XML namespaces to extend the stanzas for the
   purpose of providing additional functionality. Thus a message or
   presence MAY contain one or more optional child elements containing
   content that extends the meaning of the message (e.g., an
   XHTML-formatted version of the message body), and an IQ stanza MAY
   contain one such child element. This child element MAY have any name
   and MUST possess an 'xmlns' namespace declaration (other than
   "jabber:client", "jabber:server", or "http://etherx.jabber.org/
   streams") that defines all data contained within the child element.

   Support for any given extended namespace is OPTIONAL on the part of
   any implementation (aside from the extended namespaces defined
   herein). If an entity does not understand such a namespace, the
   entity's expected behavior depends on whether the entity is (1) the
   recipient or (2) an entity that is routing the stanza to the
   recipient:

   Recipient: If a recipient receives a stanza that contains a child
      element it does not understand, it SHOULD ignore that specific XML
      data, i.e., it SHOULD not process it or present it to a user or
      associated application (if any). In particular:

      *  If an entity receives a message or presence stanza that
         contains XML data qualified by a namespace it does not
         understand, the portion of the stanza that is in the unknown
         namespace SHOULD be ignored.

      *  If an entity receives a message stanza whose only child element
         is qualified by a namespace it does not understand, it MUST
         ignore the entire stanza.

      *  If an entity receives an IQ stanza of type "get" or "set"
         containing a child element qualified by a namespace it does not
         understand, the entity SHOULD return an IQ stanza of type
         "error" with an error condition of <feature-not-implemented/>.

   Router: If a routing entity (usually a server) handles a stanza that
      contains a child element it does not understand, it SHOULD ignore
      the associated XML data by passing it on untouched to the
      recipient.


3. Session Establishment

   Most instant messaging and presence applications based on XMPP are
   implemented via a client-server architecture that requires a client
   to establish a session on a server in order to engage in the expected
   instant messaging and presence activities. However, there are several



Saint-Andre & Miller     Expires April 25, 2004                [Page 13]

Internet-Draft           XMPP Instant Messaging             October 2003


   pre-conditions that MUST be met before a client can establish an
   instant messaging and presence session. These are:

   1.  Stream Authentication -- a client MUST complete stream
       authentication as documented in XMPP Core [1] before attempting
       to establish a session or send any XML stanzas.

   2.  Resource Binding -- after completing stream authentication, a
       client MUST bind a resource to the stream so that the client's
       address is of the form <user@domain/resource>.

   If a server supports sessions, it MUST include a <session/> element
   qualified by the 'urn:ietf:params:xml:ns:xmpp-session' namespace in
   the stream features it advertises to a client after the completion of
   stream authentication as defined in XMPP Core [1]:

   Server advertises session establishment feature to client:

   <stream:stream
       xmlns='jabber:client'
       xmlns:stream='http://etherx.jabber.org/streams'
       id='c2s_345'
       from='example.com'
       version='1.0'>
   <stream:features>
     <bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>
     <session xmlns='urn:ietf:params:xml:ns:xmpp-session'>
   </stream:features>

   Upon being so informed that session establishment is required (and
   after completing resource binding), the client SHOULD establish a
   session by sending to the server an IQ stanza of type "set"
   containing an empty <session/> child element qualified by the
   'urn:ietf:params:xml:ns:xmpp-session' namespace:

   Step 1: Client requests session with server:

   <iq from='someuser@example.com'
       to='example.com'
       type='set'
       id='sess_1'>
     <session xmlns='urn:ietf:params:xml:ns:xmpp-session'/>
   </iq>

   Step 2: Server informs client that session has been created:

   <iq from='example.com'
       to='someuser@example.com'



Saint-Andre & Miller     Expires April 25, 2004                [Page 14]

Internet-Draft           XMPP Instant Messaging             October 2003


       type='result'
       id='sess_1'/>

   Several error conditions are possible. For example, the server may
   encounter an internal condition that prevents it from creating the
   session, the username or authorization identity may lack permissions
   to create a session, or there may already be an active session
   associated with a resource of the same name.

   If the server encounters an internal condition that prevents it from
   creating the session, it MUST return an error.

   Step 2 (alt): Server responds with error (internal server error):

   <iq type='error' id='sess_1'>
     <session xmlns='urn:ietf:params:xml:ns:xmpp-session'/>
     <error type='wait'>
       <internal-server-error
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>

   If the username or resource is not allowed to create a session, the
   server MUST return an error (e.g., forbidden).

   Step 2 (alt): Server responds with error (username or resource not
   allowed to create session):

   <iq type='error' id='sess_1'>
     <session xmlns='urn:ietf:params:xml:ns:xmpp-session'/>
     <error type='auth'>
       <forbidden
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>

   If there is already an active session of the same name, the server
   MUST either (1) terminate the active session and allow the
   newly-requested session, or (2) disallow the newly-requested session
   and maintain the existing session. Which of these the server does is
   up to the implementation, although it is RECOMMENDED to implement
   case #1. In case #1, the server SHOULD send a <conflict/> stream
   error to the active session; in case #2, the server SHOULD send a
   <conflict/> stanza error to the newly-requested session.

   Step 2 (alt): Server informs active session of resource conflict
   (case #1):




Saint-Andre & Miller     Expires April 25, 2004                [Page 15]

Internet-Draft           XMPP Instant Messaging             October 2003


   <stream:error>
     <conflict xmlns='urn:ietf:params:xml:ns:xmpp-streams'/>
   </stream:error>
   </stream:stream>

   Step 2 (alt): Server informs newly-requested session of resource
   conflict (case #2):

   <iq type='error' id='sess_1'>
     <session xmlns='urn:ietf:params:xml:ns:xmpp-session'/>
     <error type='cancel'>
       <conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>

   After establishing a session, a client SHOULD send initial presence
   and request its roster as described below, although these actions are
   NOT REQUIRED.

   Note: before allowing the creation of instant messaging and presence
   sessions, a server MAY require prior account provisioning. Possible
   methods for account provisioning include account creation by a server
   administrator as well as in-band account registration using the
   'jabber:iq:register' namespace; the latter method is documented by
   the Jabber Software Foundation [7] at <http://www.jabber.org/
   protocol/> but is out of scope for this memo.

4. Exchanging Messages

   Exchanging messages is a basic use of XMPP and is brought about when
   a user generates a message stanza that is addressed to another
   entity. As defined under Server Rules for Handling XML Stanzas
   (Section 14), the sender's server is responsible for delivering the
   message to the intended recipient (if the recipient is on the same
   server) or for routing the message to the recipient's server (if the
   recipient is on a different server).

   For information regarding the syntax of message stanzas as well as
   their defined attributes and child elements, refer to Message Syntax
   (Section 2.1).

4.1 Specifying an Intended Recipient

   An instant messaging client SHOULD specify an intended recipient for
   a message by providing the JID of an entity other than the sender in
   the 'to' attribute of the <message/> stanza. If the message is being
   sent in reply to a message previously received from an address of the
   form <user@domain/resource> (e.g., within the context of a chat



Saint-Andre & Miller     Expires April 25, 2004                [Page 16]

Internet-Draft           XMPP Instant Messaging             October 2003


   session), the value of the 'to' address SHOULD be the full JID
   (<user@domain/resource>) rather than merely <user@domain> unless the
   sender has knowledge (via presence) that the intended recipient's
   resource is no longer available. If the message is being sent outside
   the context of any existing chat session or received message, the
   value of the 'to' address SHOULD be of the form <user@domain> rather
   than <user@domain/resource>.

4.2 Specifying a Message Type

   As noted, it is RECOMMENDED for a message stanza to possess a 'type'
   attribute whose value captures the conversational context (if any) of
   the message (see Type (Section 2.1.1)).

   The following example shows a valid value of the 'type' attribute:

   Example: A message of a defined type:

   <message
       to='romeo@example.net'
       from='juliet@example.com/balcony'
       type='chat'
       xml:lang='en'>
     <body>Wherefore art thou, Romeo?</body>
   </message>


4.3 Specifying a Message Body

   A message stanza MAY (and often will) contain a child <body/> element
   whose XML character data specifies the primary meaning of the message
   (see Body (Section 2.1.2.2)).

   Example: A message with a body:

   <message
       to='romeo@example.net'
       from='juliet@example.com/balcony'
       type='chat'
       xml:lang='en'>
     <body>Wherefore art thou, Romeo?</body>
     <body xml:lang='cz'>Pro&#x010D;e&#x017D; jsi ty, Romeo?</body>
   </message>


4.4 Specifying a Message Subject

   A message stanza MAY contain one or more child <subject/> elements



Saint-Andre & Miller     Expires April 25, 2004                [Page 17]

Internet-Draft           XMPP Instant Messaging             October 2003


   specifying the topic of the message (see Subject (Section 2.1.2.1)).

   Example: A message with a subject:

   <message
       to='romeo@example.net'
       from='juliet@example.com/balcony'
       type='chat'
       xml:lang='en'>
     <subject>I implore you!</subject>
     <subject
         xml:lang='cz'>&#x00DA;p&#x011B;nliv&#x011B; prosim!</subject>
     <body>Wherefore art thou, Romeo?</body>
     <body xml:lang='cz'>Pro&#x010D;e&#x017D; jsi ty, Romeo?</body>
   </message>


4.5 Specifying a Conversation Thread

   A message stanza MAY contain a child <thread/> element specifying the
   conversation thread in which the message is situated, for the purpose
   of tracking the conversation (see Thread (Section 2.1.2.3)).

   Example: A threaded conversation:

   <message
       to='romeo@example.net/orchard'
       from='juliet@example.com/balcony'
       type='chat'>
     <body>Art thou not Romeo, and a Montague?</body>
     <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>
   </message>

   <message
       to='juliet@example.com/balcony'
       from='romeo@example.net/orchard'
       type='chat'>
     <body>Neither, fair saint, if either thee dislike.</body>
     <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>
   </message>

   <message
       to='romeo@example.net/orchard'
       from='juliet@example.com/balcony'
       type='chat'>
     <body>How cam'st thou hither, tell me, and wherefore?</body>
     <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>
   </message>



Saint-Andre & Miller     Expires April 25, 2004                [Page 18]

Internet-Draft           XMPP Instant Messaging             October 2003


5. Exchanging Presence Information

   Exchanging presence information is made relatively straightforward
   within XMPP by using presence stanzas. However, we see here a
   contrast to the handling of messages: although a client MAY send
   directed presence information to another entity, normally presence
   information is sent from a client to its server (with no 'to'
   address) and then broadcasted by the server to any entities that are
   subscribed to the presence of the sending entity. (Note: in the
   terminology of RFC 2778 [8], we can say that the only watchers in
   XMPP are subscribers.)

   For information regarding the syntax of presence stanzas as well as
   their defined attributes and child elements, refer to XMPP Core [1].

5.1 Client and Server Presence Responsibilities

   After establishing a session, a client SHOULD (but is NOT REQUIRED
   to) send initial presence to the server in order to signal its
   availability for communications. As defined herein, the initial
   presence stanza (1) MUST possess no 'to' address (signalling that it
   is meant to be handled by the server on behalf of the client) and (2)
   MUST possess no 'type' attribute (signalling the user's
   availability).

   Upon receiving initial presence from a client, the user's server MUST
   do the following:

   1.  Send presence probes (i.e., presence stanzas whose 'type'
       attribute is set to a value of "probe") from the full JID
       (<user@somedomain/resource>) of the user to the bare JID
       (<contact@otherdomain>) of any contacts to which the user is
       subscribed in order to determine if they are available; such
       contacts are those which are present in the user's roster with
       the 'subscription' attribute set to a value of "to" or "both".

   2.  Broadcast initial presence from the full JID (<user@somedomain/
       resource>) of the user to the bare JID (<contact@otherdomain>) of
       any contacts that are subscribed to the user's presence; such
       contacts are those which are present in the user's roster with
       the 'subscription' attribute set to a value of "from" or "both".

   Upon receiving a presence probe from the user, the contact's server
   MUST send to the user the last known availability information (i.e.,
   the full XML of the last presence stanza) provided by each of the
   contact's active sessions (if there exist no active sessions, the
   server SHOULD NOT reply to the presence probe). The contact's server
   MUST send this information subject to domain-specific access rules,



Saint-Andre & Miller     Expires April 25, 2004                [Page 19]

Internet-Draft           XMPP Instant Messaging             October 2003


   and only if the user is in the contact's roster with a subscription
   state of "from" or "both" and the contact has not blocked outbound
   presence notifications to the user's bare or full JID (as defined
   under Blocking Outbound Presence Notifications (Section 10.11)).
   (Note: if a server receives a presence probe from a subdomain of the
   server's hostname or another such trusted service, it MAY provide
   presence information about the user to that entity.)

   Upon receiving initial presence from the user, the contact's server
   MUST deliver the user's presence stanza to the full JIDs
   (<contact@otherdomain/resource>) associated with all of the contact's
   active sessions, but only if the user is in the contact's roster with
   a subscription state of "to" or "both" and the contact has not
   blocked inbound presence notifications from the user's bare or full
   JID (as defined under Blocking Inbound Presence Notifications
   (Section 10.10)).

   If the user's server receives a presence stanza of type "error" in
   response to the initial presence that it sent to a contact on behalf
   of the user, it SHOULD NOT send further presence updates to that
   contact (until and unless it receives a presence probe from the
   contact).

   After sending initial presence, the user MAY update its presence
   information for broadcasting at any time during its active session by
   sending a presence stanza with no 'to' address and either no 'type'
   attribute or a 'type' attribute with a value of "unavailable". (Note:
   a user's client SHOULD NOT send a presence update to broadcast
   information that changes independently of the user's presence and
   availability.) If the presence stanza lacks a 'type' attribute (i.e.,
   expresses availability), the user's server MUST broadcast the full
   XML of that presence stanza to all contacts (1) that are in the
   user's roster with a subscription type of "from" or "both", (2) to
   whom the user has not blocked outbound presence, and (3) from whom
   the server has not received a presence error during the user's
   session. If the presence stanza has a 'type' attribute set to a value
   of "unavailable", the user's server MUST broadcast the full XML of
   that presence stanza to all contacts meeting the three conditions
   just mentioned, as well as to any entities to which the user has sent
   directed available presence during the user's session (if the user
   has not yet sent directed unavailable presence to that entity).

   A user MAY send directed presence to another entity (i.e., a presence
   stanza with a 'to' attribute whose value is the JID of the other
   entity and with either no 'type' attribute or a 'type' attribute
   whose value is "unavailable"). There are three possible cases:

   1.  If the user sends directed presence to a contact that is in the



Saint-Andre & Miller     Expires April 25, 2004                [Page 20]

Internet-Draft           XMPP Instant Messaging             October 2003


       user's roster with a subscription type of "from" or "both" after
       having sent initial presence and before sending unavailable
       presence broadcast, the user's server MUST route or deliver the
       full XML of that presence stanza (subject to privacy rules) but
       SHOULD NOT otherwise modify the contact's status regarding
       presence broadcast (i.e., it SHOULD include the contact's JID in
       any subsequent presence broadcasts initiated by the user).

   2.  If the user sends directed presence to an entity that is not in
       the user's roster with a subscription type of "from" or "both"
       after having sent initial presence and before sending unavailable
       presence broadcast, the user's server MUST route or deliver the
       full XML of that presence stanza to the entity but MUST NOT
       modify the contact's status regarding available presence
       broadcast (i.e., it MUST NOT include the entity's JID in any
       subsequent broadcasts of available presence initiated by the
       user); however, if the connected resource from which the user
       sent the directed presence become unavailable, the user's server
       MUST broadcast that unavailable presence to the entity (if the
       user has not yet sent directed unavailable presence to that
       entity).

   3.  If the user sends directed presence without first sending initial
       presence or after having sent unavailable presence broadcast, the
       user's server MUST treat the entities to which the user sends
       directed presence in the same way that it treats the entities
       listed in case 2 above.

   Before ending its session with a server, a client SHOULD gracefully
   become unavailable by sending a final presence stanza that possesses
   no 'to' attribute and that possesses a 'type' attribute whose value
   is "unavailable" (optionally, the final presence stanza MAY contain
   one or more <status/> elements specifying the reason why the user is
   no longer available). However, the user's server MUST NOT depend on
   receiving final presence from an available resource, since the
   resource may become unavailable unexpectedly. If the user's server
   detects that one of the user's resources has become unavailable for
   any reason (either gracefully or ungracefully), it MUST broadcast
   unavailable presence to all contacts (1) that are in the user's
   roster with a subscription type of "from" or "both", (2) to whom the
   user has not blocked outbound presence, and (3) from whom the server
   has not received a presence error during the user's session; the
   user's server MUST also send that unavailable presence stanza to any
   entities to which the user has sent directed presence during the
   user's session for that resource (if the user has not yet sent
   directed unavailable presence to that entity). Any presence stanza
   with no 'type' attribute and no 'to' attribute that is sent after
   sending directed unavailable presence or broadcasted unavailable



Saint-Andre & Miller     Expires April 25, 2004                [Page 21]

Internet-Draft           XMPP Instant Messaging             October 2003


   presence MUST be broadcasted by the server to all subscribers.

5.2 Specifying Availability Status

   A client MAY provide further information about its availability
   status by using the <show/> element (see Show (Section 2.2.2.1)).

   Example: Availability status:

   <presence>
     <show>dnd</show>
   </presence>


5.3 Specifying Detailed Status Information

   In conjunction with the  <show/> element, a client MAY provide
   detailed status information by using the <status/> element (see
   Status (Section 2.2.2.2)).

   Example: Detailed status information:

   <presence xml:lang='en'>
     <show>dnd</show>
     <status>Wooing Juliet</status>
     <status xml:lang='cz'>Ja dvo&#x0159;&#x00ED;m Juliet</status>
   </presence>


5.4 Specifying Presence Priority

   A client MAY provide a priority for its resource by using the
   <priority/> element (see Priority (Section 2.2.2.3)).

   Example: Presence priority:

   <presence xml:lang='en'>
     <show>dnd</show>
     <status>Wooing Juliet</status>
     <status xml:lang='cz'>Ja dvo&#x0159;&#x00ED;m Juliet</status>
     <priority>1</priority>
   </presence>


5.5 Presence Examples

   The examples in this section illustrate the presence-related
   protocols described above. The user is romeo@example.net, he has



Saint-Andre & Miller     Expires April 25, 2004                [Page 22]

Internet-Draft           XMPP Instant Messaging             October 2003


   authorized a resource "orchard", and he has the following individuals
   in his roster:

   o  juliet@example.com (subscription="both" and she has two active
      sessions, one whose resource is "chamber" and another whose
      resource is "balcony")

   o  benvolio@example.org (subscription="to")

   o  mercutio@example.org (subscription="from")

   Example 1: User sends initial presence:

   <presence/>

   Example 2: User's server sends presence probes to contacts with
   subscription="to" and subscription="both" on behalf of the user's
   connected resource:

   <presence
       type='probe'
       from='romeo@example.net/orchard'
       to='juliet@example.com'/>

   <presence
       type='probe'
       from='romeo@example.net/orchard'
       to='benvolio@example.org'/>

   Example 3: User's server sends initial presence to contacts with
   subscription="from" and subscription="both" on behalf of the user's
   connected resource:

   <presence
       from='romeo@example.net/orchard'
       to='juliet@example.com'/>

   <presence
       from='romeo@example.net/orchard'
       to='mercutio@example.org'/>

   Example 4: Contacts' server replies to presence probe on behalf of
   all of the contact's available resources:

   <presence
       from='juliet@example.com/balcony'
       to='romeo@example.net/orchard'
       xml:lang='en'>



Saint-Andre & Miller     Expires April 25, 2004                [Page 23]

Internet-Draft           XMPP Instant Messaging             October 2003


     <show>away</show>
     <status>be right back</status>
     <priority>0</priority>
   </presence>

   <presence
       from='juliet@example.com/chamber'
       to='romeo@example.net/orchard'>
     <priority>1</priority>
   </presence>

   <presence
       from='benvolio@example.org/pda'
       to='romeo@example.net/orchard'
       xml:lang='en'>
     <show>dnd</show>
     <status>gallivanting</status>
   </presence>

   Example 5: Contact's server delivers user's initial presence to all
   of the contact's available resources or returns error to user:

   <presence
       from='romeo@example.net/orchard'
       to='juliet@example.com/chamber'/>

   <presence
       from='romeo@example.net/orchard'
       to='juliet@example.com/balcony'/>

   <presence
       type='error'
       from='mercutio@example.org'
       to='romeo@example.net/orchard'>
     <error type='cancel'>
       <gone xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </presence>

   Example 6: User sends directed presence to another user not in his
   roster:

   <presence
       from='romeo@example.net/orchard'
       to='nurse@example.com'
       xml:lang='en'>
     <show>dnd</show>
     <status>courting Juliet</status>



Saint-Andre & Miller     Expires April 25, 2004                [Page 24]

Internet-Draft           XMPP Instant Messaging             October 2003


     <priority>0</priority>
   </presence>

   Example 7: User sends updated available presence information for
   broadcasting:

   <presence xml:lang='en'>
     <show>away</show>
     <status>I shall return!</status>
     <priority>1</priority>
   </presence>

   Example 8: Updated presence information is delivered only to one
   contact (not those from whom an error was received or to whom the
   user sent directed presence):

   <presence
       from='romeo@example.net/orchard'
       to='juliet@example.com/chamber'
       xml:lang='en'>
     <show>away</show>
     <status>I shall return!</status>
     <priority>1</priority>
   </presence>

   <presence
       from='romeo@example.net/orchard'
       to='juliet@example.com/balcony'
       xml:lang='en'>
     <show>away</show>
     <status>I shall return!</status>
     <priority>1</priority>
   </presence>

   Example 9: One of the contact's resources sends final presence:

   <presence type='unavailable'/>

   Example 10: Contact's server sends unavailable presence information
   to user:

   <presence
       type='unavailable'
       from='juliet@example.com/balcony'
       to='romeo@example.net/orchard'/>

   Example 11: User sends final presence:




Saint-Andre & Miller     Expires April 25, 2004                [Page 25]

Internet-Draft           XMPP Instant Messaging             October 2003


   <presence type='unavailable' xml:lang='en'>
     <status>gone home</status>
   </presence>

   Example 12: Unavailable presence information is delivered to
   contact's one remaining resource as well as to the person to whom the
   user sent directed presence:

   <presence
       type='unavailable'
       from='romeo@example.net/orchard'
       to='juliet@example.com/chamber'
       xml:lang='en'>
     <status>gone home</status>
   </presence>

   <presence
       from='romeo@example.net/orchard'
       to='nurse@example.com'
       xml:lang='en'>
     <status>gone home</status>
   </presence>


6. Managing Subscriptions

   In order to protect the privacy of instant messaging users and any
   other entities, presence and availability information is disclosed
   only to other entities that the user has approved. When a user has
   agreed that another entity may view its presence, the entity is said
   to have a subscription to the user's presence information. A
   subscription lasts across sessions; indeed, it lasts until the
   subscriber unsubscribes or the subscribee cancels the
   previously-granted subscription. Subscriptions are managed within
   XMPP by sending presence stanzas containing specially-defined
   attributes.

   Note: there are important interactions between subscriptions and
   rosters; these are defined under Integration of Roster Items and
   Presence Subscriptions (Section 8), and the reader must refer to that
   section for a complete understanding of presence subscriptions.

6.1 Requesting a Subscription

   A request to subscribe to another entity's presence is made by
   sending a presence stanza of type "subscribe".

   Example: Sending a subscription request:



Saint-Andre & Miller     Expires April 25, 2004                [Page 26]

Internet-Draft           XMPP Instant Messaging             October 2003


   <presence to='juliet@example.com' type='subscribe'/>

   If the subscription request is being sent to another instant
   messaging user, the JID supplied in the 'to' attribute SHOULD be of
   the form <contact@otherdomain> rather than <contact@otherdomain/
   resource>.

   A user's server MUST NOT automatically approve subscription requests
   on the user's behalf. All subscription requests MUST be directed to
   the user's client. If there is no available resource associated with
   the user when the subscription request is received by the server, the
   user's server MUST store the subscription request offline for
   delivery when the user next becomes available. (Note: if a resource
   has authorized a session but has not provided initial presence, the
   server SHOULD NOT consider it to be available and therefore SHOULD
   NOT send subscription requests to it.)

6.2 Handling a Subscription Request

   When a client receives a subscription request from another entity, it
   MUST either approve the request by sending a presence stanza of type
   "subscribed" or refuse the request by sending a presence stanza of
   type "unsubscribed".

   Example: Approving a subscription request:

   <presence to='romeo@example.net' type='subscribed'/>

   Example: Refusing a presence subscription request:

   <presence to='romeo@example.net' type='unsubscribed'/>


6.3 Cancelling a Subscription from Another Entity

   If a user would like to cancel a previously-granted subscription
   request, it sends a presence stanza of type "unsubscribed".

   Example: Cancelling a previously granted subscription request:

   <presence to='romeo@example.net' type='unsubscribed'/>


6.4 Unsubscribing from Another Entity's Presence

   If a user would like to unsubscribe from the presence of another
   entity, it sends a presence stanza of type "unsubscribe".




Saint-Andre & Miller     Expires April 25, 2004                [Page 27]

Internet-Draft           XMPP Instant Messaging             October 2003


   Example: Unsubscribing from an entity's presence:

   <presence to='juliet@example.com' type='unsubscribe'/>


7. Roster Management

   In XMPP, one's contact list is called a roster, which consists of any
   number of specific roster items, each roster item being identified by
   a unique JID (usually of the form <contact@otherdomain>). A user's
   roster is stored by the user's server on the user's behalf so that
   the user may access roster information from any available resource.

   Note: there are important interactions between rosters and
   subscriptions; these are defined under Integration of Roster Items
   and Presence Subscriptions (Section 8), and the reader must refer to
   that section for a complete understanding of roster management.

7.1 Syntax and Semantics

   Rosters are managed using IQ stanzas, specifically by means of a
   <query/> child element qualified by the 'jabber:iq:roster' namespace.
   The <query/> element MAY contain one or more <item/> children, each
   describing a unique roster item or "contact".

   The "key" or unique identifier for each roster item is a JID,
   encapsulated in the required 'jid' attribute of the <item/> element.
   The value of the 'jid' attribute SHOULD be of the form
   <user@somedomain>, especially if the item is associated with another
   (human) instant messaging user.

   The state of the presence subscription in relation to a roster item
   is captured in the 'subscription' attribute of the <item/> element.
   Allowable values for this attribute are:

   o  "none" -- the user does not have a subscription to the contact,
      and the contact does not have a subscription to the user

   o  "to" -- the user has a subscription to the contact, but the
      contact does not have a subscription to the user

   o  "from" -- the contact has a subscription to the user, but the user
      does not have a subscription to the contact

   o  "both" -- both the user and the contact have subscriptions to each
      other

   Each <item/> element MAY contain a 'name' attribute, which sets the



Saint-Andre & Miller     Expires April 25, 2004                [Page 28]

Internet-Draft           XMPP Instant Messaging             October 2003


   "nickname" to be associated with the JID, as determined by the user
   (not the contact). The value of the 'name' attribute is opaque.

   Each <item/> element MAY contain one or more <group/> child elements,
   for use in collecting roster items into various categories. The CDATA
   text of the <group/> element is opaque.

7.2 Business Rules

   A server MUST ignore any 'to' address on a roster "set", and MUST
   treat any roster "set" as applying to the sender. For added safety, a
   client SHOULD check the "from" address of a roster "push" to ensure
   that it is from a trusted source; specifically, the stanza SHOULD
   have no 'from' attribute (i.e., implicitly from the server) or the
   JID contained in the 'from' attribute SHOULD match the user's bare
   JID or full JID; otherwise, the client SHOULD ignore the roster
   "push".

7.3 Retrieving One's Roster on Login

   Upon connecting to the server, a client SHOULD request the roster
   (however, because receiving the roster may not be desirable for all
   resources, e.g., a connection with limited bandwidth, the client's
   request for the roster is NOT REQUIRED). If an available resource
   does not request the roster during a session, the server SHOULD NOT
   send it presence subscriptions and associated roster updates.

   Example: Client requests current roster from server:

   <iq from='juliet@example.com/balcony' type='get' id='roster_1'>
     <query xmlns='jabber:iq:roster'/>
   </iq>

   Example: Client receives roster from the server:

   <iq to='juliet@example.com/balcony' type='result' id='roster_1'>
     <query xmlns='jabber:iq:roster'>
       <item jid='romeo@example.net'
             name='Romeo'
             subscription='both'>
         <group>Friends</group>
       </item>
       <item jid='mercutio@example.org'
             name='Mercutio'
             subscription='from'>
         <group>Friends</group>
       </item>
       <item jid='benvolio@example.org'



Saint-Andre & Miller     Expires April 25, 2004                [Page 29]

Internet-Draft           XMPP Instant Messaging             October 2003


             name='Benvolio'
             subscription='both'>
         <group>Friends</group>
       </item>
     </query>
   </iq>


7.4 Adding a Roster Item

   At any time, a user MAY add an item to his or her roster.

   Example: Client adds a new item:

   <iq from='juliet@example.com/balcony' type='set' id='roster_2'>
     <query xmlns='jabber:iq:roster'>
       <item jid='nurse@example.com'
             name='Nurse'>
         <group>Servants</group>
       </item>
     </query>
   </iq>

   The server MUST update the roster information in persistent storage,
   and also push the change out to all of the user's available resources
   that have requested the roster. This "roster push" consists of an IQ
   set from the server to the client and enables all available resources
   to remain in sync with the server-based roster information.

   Example: Server (1) pushes the updated roster information to all
   available resources and (2) replies with an IQ result to the sending
   resource:

   <iq to='juliet@example.com/balcony' type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='nurse@example.com'
             name='Nurse'
             subscription='none'>
         <group>Servants</group>
       </item>
     </query>
   </iq>

   <iq to='juliet@example.com/chamber' type='set'>
     <query xmlns='jabber:iq:roster'>
       <item jid='nurse@example.com'
             name='Nurse'
             subscription='none'>



Saint-Andre & Miller     Expires April 25, 2004                [Page 30]

Internet-Draft           XMPP Instant Messaging             October 2003


         <group>Servants</group>
       </item>
     </query>
   </iq>

   <iq to='juliet@example.com/balcony' type='result' id='roster_2'/>

   Example: Connected resources reply with an IQ result to the server:

   <iq from='juliet@example.com/balcony'
       to='example.com'
       type='result'/>
   <iq from='juliet@example.com/chamber'
       to='example.com'
       type='result'/>


7.5 Updating a Roster Item

   Updating an existing roster item (e.g., changing the group) is done
   in the same way as adding a new roster item, i.e., by sending the
   roster item in an IQ set to the server.

   Example: User updates roster item (added group):

   <iq from='juliet@example.com/chamber' type='set' id='roster_3'>
     <query xmlns='jabber:iq:roster'>
       <item jid='romeo@example.net'
             name='Romeo'
             subscription='both'>
         <group>Friends</group>
         <group>Lovers</group>
       </item>
     </query>
   </iq>

   As with adding a roster item, when updating a roster item the server
   MUST update the roster information in persistent storage, and also
   initiate a roster push to all of the user's available resources that
   have requested the roster.

7.6 Deleting a Roster Item

   At any time, a user MAY delete an item from its roster by doing an IQ
   set and making sure that the value of the 'subscription' attribute is
   "remove" (a compliant server MUST ignore any other values of the
   'subscription' attribute when received from a client).




Saint-Andre & Miller     Expires April 25, 2004                [Page 31]

Internet-Draft           XMPP Instant Messaging             October 2003


   Example: Client removes an item:

   <iq from='juliet@example.com/balcony' type='set' id='roster_4'>
     <query xmlns='jabber:iq:roster'>
       <item jid='nurse@example.com' subscription='remove'/>
     </query>
   </iq>

   As with adding a roster item, when deleting a roster item the server
   MUST update the roster information in persistent storage, initiate a
   roster push to all of the user's available resources that have
   requested the roster (with the 'subscription' attribute set to a
   value of "remove"), and send an IQ result to the initiating resource.

   For further information about the implications of this command, see
   Removing a Roster Item and Cancelling All Subscriptions (Section
   8.6).

8. Integration of Roster Items and Presence Subscriptions

8.1 Overview

   Some level of integration between roster items and presence
   subscriptions is normally expected by an instant messaging user
   regarding the user's subscriptions to and from other contacts. This
   section describes the level of integration that MUST be supported
   within XMPP instant messaging applications.

   There are four primary subscription states:

   o  None -- Neither the user nor the contact is subscribed to the
      other's presence

   o  To -- The user is subscribed to the contact's presence but there
      is no subscription from the contact to the user

   o  From -- There is a subscription from the contact to the user, but
      the user has not subscribed to the contact's presence

   o  Both -- Both the user and the contact are subscribed to each
      other's presence (i.e., the union of 'from' and 'to')

   Each of these states is reflected in the roster of both the user and
   the contact, thus resulting in durable subscription states. Narrative
   explanations of how these subscription states interact with roster
   items in order to complete certain defined use cases are provided in
   the following sub-sections. Full details regarding server and client
   handling of all subscription states (including pending states between



Saint-Andre & Miller     Expires April 25, 2004                [Page 32]

Internet-Draft           XMPP Instant Messaging             October 2003


   the primary states listed above) is provided in Subscription States
   (Section 9).

   If a connected resource does not both send initial presence and
   request the roster, the server SHOULD NOT send it presence
   subscription requests or roster pushes.

   The 'from' and 'to' addresses are OPTIONAL in roster pushes; if
   included, their values SHOULD be the full JID of the resource for
   that session. A client MUST acknowledge each roster push with an IQ
   stanza of type "result" (for the sake of brevity, these stanzas are
   not shown in the following examples but are required by XMPP Core
   [1]).

8.2 User Subscribes to Contact

   The process by which a user subscribes to a contact, including the
   interaction between roster items and subscription states, is defined
   below.

   1.  In preparation for being able to render the contact in the user's
       client interface and for the server to keep track of the
       subscription, the user's client SHOULD perform a "roster set" for
       the new roster item. This request consists of an IQ stanza of
       type='set' containing a <query/> element in the
       'jabber:iq:roster' namespace, which in turn contains an <item/>
       element that defines the new roster item; the <item/> element
       MUST possess a 'jid' attribute, MAY possess a 'name' attribute,
       MUST NOT possess a 'subscription' attribute, and MAY contain one
       or more <group/> child elements:

   <iq type='set' id='int1'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='contact@otherdomain'
           name='MyContact'>
         <group>MyBuddies</group>
       </item>
     </query>
   </iq>

   2.  As a result, the user's server (1) MUST initiate a roster push
       for the new roster item to all available resources associated
       with this user that have requested the roster, setting the
       'subscription' attribute to a value of "none"; and (2) MUST reply
       with an IQ stanza of type='result':

   <iq type='set'>



Saint-Andre & Miller     Expires April 25, 2004                [Page 33]

Internet-Draft           XMPP Instant Messaging             October 2003


     <query xmlns='jabber:iq:roster'>
       <item
           jid='contact@otherdomain'
           subscription='none'
           name='MyContact'>
         <group>MyBuddies</group>
       </item>
     </query>
   </iq>

   <iq type='result' id='int1'/>

   3.  If the user wants to request a subscription to the contact's
       presence, the user's client MUST send a presence stanza of
       type='subscribe' to the contact:

   <presence to='contact@otherdomain' type='subscribe'/>

   4.  As a result, the user's server MUST initiate a second roster push
       to all of the user's available resources that have requested the
       roster, setting the contact to the pending sub-state of the
       'none' subscription state; this pending sub-state is denoted by
       the inclusion of the ask='subscribe' attribute in the roster
       item:

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='contact@otherdomain'
           subscription='none'
           ask='subscribe'
           name='MyContact'>
         <group>MyBuddies</group>
       </item>
     </query>
   </iq>

       Note: if the user did not create a roster item before sending the
       subscription request, the server MUST now create one on behalf of
       the user and send a roster push to all of the user's available
       resources that have requested the roster, absent the 'name'
       attribute and the <group/> child.

   5.  The user's server MUST also stamp the presence stanza of type
       "subscribe" with the user's bare JID (i.e., <user@somedomain>) as
       the 'from' address. If the contact is served by a different host
       than the user, the user's server MUST route the presence stanza
       to the contact's server for delivery to the contact (this case is



Saint-Andre & Miller     Expires April 25, 2004                [Page 34]

Internet-Draft           XMPP Instant Messaging             October 2003


       assumed throughout; however, if the contact is served by the same
       host, then the server can simply deliver the presence stanza
       directly):

   <presence
       from='user@somedomain'
       to='contact@otherdomain'
       type='subscribe'/>

   6.  Upon receiving the presence stanza of type "subscribe" addressed
       to the contact, the contact's server must determine if there is
       at least one active session in which the contact has sent
       available presence and has requested the roster. If so, it MUST
       deliver the subscription request to the contact (if not, the
       contact's server MUST store the subscription request offline for
       delivery when this condition is next met). No matter when the
       subscription request is delivered, the contact must decide
       whether or not to approve it (subject to configured preferences,
       the contact's client MAY approve or refuse the subscription
       request without presenting it to the contact). Here we assume the
       "happy path" that the contact approves the subscription request
       (the alternate flow of declining the subscription request is
       defined in Section 8.2.1). In this case, the contact's client (1)
       SHOULD perform a roster set specifying the desired nickname and
       group for the user (if any); and (2) MUST send a presence stanza
       of type "subscribed" to the user in order to approve the
       subscription request.

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='user@somedomain'
           name='SomeUser'>
         <group>SomeGroup</group>
       </item>
     </query>
   </iq>

   <presence to='user@somedomain' type='subscribed'/>

   7.  As a result, the contact's server (1) MUST initiate a roster push
       to all available resources associated with the contact that have
       requested the roster, containing a roster item for the user with
       the subscription state set to 'from'; (2) MUST route the presence
       stanza of type "subscribed" to the user; and (3) MUST send
       available presence from all of the contact's available resources
       to the user:




Saint-Andre & Miller     Expires April 25, 2004                [Page 35]

Internet-Draft           XMPP Instant Messaging             October 2003


   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='user@somedomain'
           subscription='from'
           name='SomeUser'>
         <group>SomeGroup</group>
       </item>
     </query>
   </iq>

   <presence
       from='contact@otherdomain/resource'
       to='user@somedomain'
       type='subscribed'/>

   <presence
       from='contact@otherdomain/resource'
       to='user@somedomain'/>

   8.  Upon receiving the presence stanza of type "subscribed" addressed
       to the user, the user's server MUST first verify that the contact
       is in the user's roster with either of the following states: (a)
       subscription='none' and ask='subscribe' or (b)
       subscription='from' and ask='subscribe'. If the contact is not in
       the user's roster with either of those states, the user's server
       MUST silently ignore the presence stanza of type "subscribed"
       (i.e., it MUST NOT route it to the user, modify the user's
       roster, or generate a roster push to the user's available
       resources). If the contact is in the user's roster with either of
       those states, the user's server (1) MUST deliver the presence
       stanza of type "subscribed" from the contact to the user; (2)
       MUST initiate a roster push to all of the user's available
       resources that have requested the roster, containing an updated
       roster item for the contact with the 'subscription' attribute set
       to a value of "to"; and (3) MUST deliver the available presence
       stanza received from each of the contact's available resources to
       each of the user's available resources:

   <presence
       to='user@somedomain'
       from='contact@otherdomain'
       type='subscribed'/>

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='contact@otherdomain'



Saint-Andre & Miller     Expires April 25, 2004                [Page 36]

Internet-Draft           XMPP Instant Messaging             October 2003


           subscription='to'
           name='MyContact'>
         <group>MyBuddies</group>
       </item>
     </query>
   </iq>

   <presence
       from='contact@otherdomain/resource'
       to='user@somedomain/resource'/>

   9.  Upon receiving the presence stanza of type "subscribed", the user
       SHOULD acknowledge receipt of that subscription state
       notification through either "affirming" it by sending a presence
       stanza of type "subscribe" to the contact or "denying" it by
       sending a presence stanza of type "unsubscribe" to the contact;
       this step does not necessarily affect the subscription state (see
       Subscription States (Section 9) for details), but instead lets
       the user's server know that it MUST no longer send notification
       of the subscription state change to the user (see Section 9.6).

   From the perspective of the user, there now exists a subscription to
   the contact; from the perspective of the contact, there now exists a
   subscription from the user. (Note: If at this point the user sends
   another subscription request to the contact, the user's server MUST
   silently ignore that request.)

8.2.1 Alternate Flow: Contact Declines Subscription Request

   The above activity flow represents the "happy path" related to the
   user's subscription request to the contact. The main alternate flow
   occurs if the contact refuses the user's subscription request.

   1.  If the contact wants to refuse the request, the contact's client
       MUST send a presence stanza of type "unsubscribed" to the user
       (instead of the presence stanza of type "subscribed" sent in Step
       6 of Section 8.2):

   <presence to='user@somedomain' type='unsubscribed'/>

   2.  As a result, the contact's server MUST route the presence stanza
       of type "unsubscribed" to the user, first stamping the 'from'
       address as the bare JID (<contact@otherdomain>) of the contact:

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unsubscribed'/>



Saint-Andre & Miller     Expires April 25, 2004                [Page 37]

Internet-Draft           XMPP Instant Messaging             October 2003


   3.  Upon receiving the presence stanza of type "unsubscribed"
       addressed to the user, the user's server (1) MUST deliver that
       presence stanza to the user and (2) MUST initiate a roster push
       to all of the user's available resources that have requested the
       roster, containing an updated roster item for the contact with
       the 'subscription' attribute set to a value of "none" and with no
       'ask' attribute:

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unsubscribed'/>

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='contact@otherdomain'
           subscription='none'
           name='MyContact'>
         <group>MyBuddies</group>
       </item>
     </query>
   </iq>

   4.  Upon receiving the presence stanza of type "unsubscribed", the
       user SHOULD acknowledge receipt of that subscription state
       notification through either "affirming" it by sending a presence
       stanza of type "unsubscribe" to the contact or "denying" it by
       sending a presence stanza of type "subscribe" to the contact;
       this step does not necessarily affect the subscription state (see
       Subscription States (Section 9) for details), but instead lets
       the user's server know that it MUST no longer send notification
       of the subscription state change to the user (see Section 9.6).

   As a result of this activity, the contact is now in the user's roster
   with a subscription state of "none", whereas the user is not in the
   contact's roster at all.

8.3 Creating a Mutual Subscription

   The user and contact can build on the foregoing to create a mutual
   subscription (i.e., a subscription of type "both"). The process is
   defined below.

   1.  If the contact wants to create a mutual subscription, the contact
       MUST send a subscription request to the user (subject to
       configured preferences, the contact's client MAY send this
       automatically):



Saint-Andre & Miller     Expires April 25, 2004                [Page 38]

Internet-Draft           XMPP Instant Messaging             October 2003


   <presence to='user@somedomain' type='subscribe'/>

   2.  As a result, the contact's server (1) MUST initiate a roster push
       to all available resources associated with the contact that have
       requested the roster, with the user still in the 'from'
       subscription state but with a pending 'to' subscription denoted
       by the inclusion of the ask='subscribe' attribute in the roster
       item; and (2) MUST route the presence stanza of type "subscribe"
       to the user, first stamping the 'from' address as the bare JID
       (<contact@otherdomain>) of the contact:

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='user@somedomain'
           subscription='from'
           ask='subscribe'
           name='SomeUser'>
         <group>SomeGroup</group>
       </item>
     </query>
   </iq>

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='subscribe'/>

   3.  Upon receiving the presence stanza of type "subscribe" addressed
       to the user, the user's server must determine if there is at
       least one active session in which the user has sent available
       presence and has requested the roster. If so, the user's server
       MUST deliver the subscription request to the user (if not, it
       MUST store the subscription request offline for delivery when
       this condition is next met). No matter when the subscription
       request is delivered, the user must then decide whether or not to
       approve it (subject to configured preferences, the user's client
       MAY approve or refuse the subscription request without presenting
       it to the user). Here we assume the "happy path" that the user
       approves the subscription request (the alternate flow of
       declining the subscription request is defined in Section 8.3.1).
       In this case, the user's client MUST send a presence stanza of
       type "subscribed" to the contact in order to approve the
       subscription request.

   <presence to='contact@otherdomain' type='subscribed'/>





Saint-Andre & Miller     Expires April 25, 2004                [Page 39]

Internet-Draft           XMPP Instant Messaging             October 2003


   4.  As a result, the user's server (1) MUST initiate a roster push to
       all of the user's available resources that have requested the
       roster, containing a roster item for the contact with the
       'subscription' attribute set to a value of "both"; (2) MUST route
       the presence stanza of type "subscribed" to the contact, first
       stamping the 'from' address as the bare JID (<user@somedomain>)
       of the user; and (3) MUST send available presence from each of
       the user's available resources to the contact:

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='contact@otherdomain'
           subscription='both'
           name='MyContact'>
         <group>MyBuddies</group>
       </item>
     </query>
   </iq>

   <presence
       from='user@somedomain'
       to='contact@otherdomain'
       type='subscribed'/>

   <presence
       from='user@somedomain/resource'
       to='contact@otherdomain'/>

   5.  Upon receiving the presence stanza of type "subscribed" addressed
       to the contact, the contact's server MUST first verify that the
       user is in the contact's roster with either of the following
       states: (a) subscription='none' and ask='subscribe' or (b)
       subscription='from' and ask='subscribe'. If the user is not in
       the contact's roster with either of those states, the contact's
       server MUST silently ignore the presence stanza of type
       "subscribed" (i.e., it MUST NOT route it to the contact, modify
       the contact's roster, or generate a roster push to the contact's
       available resources). If the user is in the contact's roster with
       either of those states, the contact's server (1) MUST deliver the
       presence stanza of type "subscribed" from the user to the
       contact; (2) MUST initiate a roster push to all available
       resources associated with the contact that have requested the
       roster, containing an updated roster item for the user with the
       'subscription' attribute set to a value of "both"; and (3) MUST
       deliver the available presence stanza received from each of the
       user's available resources to each of the contact's available
       resources:



Saint-Andre & Miller     Expires April 25, 2004                [Page 40]

Internet-Draft           XMPP Instant Messaging             October 2003


   <presence
       from='user@somedomain'
       to='contact@otherdomain'
       type='subscribed'/>

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='user@somedomain'
           subscription='both'
           name='SomeUser'>
         <group>SomeGroup</group>
       </item>
     </query>
   </iq>

   <presence
       from='user@somedomain/resource'
       to='contact@otherdomain/resource'/>

   6.  Upon receiving the presence stanza of type "subscribed", the
       contact SHOULD acknowledge receipt of that subscription state
       notification through either "affirming" it by sending a presence
       stanza of type "subscribe" to the user or "denying" it by sending
       a presence stanza of type "unsubscribe" to the user; this step
       does not necessarily affect the subscription state (see
       Subscription States (Section 9) for details), but instead lets
       the contact's server know that it MUST no longer send
       notification of the subscription state change to the contact (see
       Section 9.6).

   The user and the contact now have a mutual subscription to each
   other's presence -- i.e., the subscription is of type "both". The
   user's server MUST now send the user's current presence information
   to the contact. (Note: If at this point the user sends a subscription
   request to the contact or the contact sends a subscription request to
   the user, the sending user's server MUST silently ignore that request
   and not route it to the intended recipient.)

8.3.1 Alternate Flow: User Declines Subscription Request

   The above activity flow represents the "happy path" related to the
   contact's subscription request to the user. The main alternate flow
   occurs if the user refuses the contact's subscription request.

   1.  If the user wants to refuse the request, the user's client MUST
       send a presence stanza of type "unsubscribed" to the contact
       (instead of the presence stanza of type "subscribed" sent in Step



Saint-Andre & Miller     Expires April 25, 2004                [Page 41]

Internet-Draft           XMPP Instant Messaging             October 2003


       3 of Section 8.3):

   <presence to='contact@otherdomain' type='unsubscribed'/>

   2.  As a result, the user's server MUST route the presence stanza of
       type "unsubscribed" to the contact, first stamping the 'from'
       address as the bare JID (<user@somedomain>) of the user:

   <presence
       from='user@somedomain'
       to='contact@otherdomain'
       type='unsubscribed'/>

   3.  Upon receiving the presence stanza of type "unsubscribed"
       addressed to the contact, the contact's server (1) MUST deliver
       that presence stanza to the contact; and (2) MUST initiate a
       roster push to all available resources associated with the
       contact that have requested the roster, containing an updated
       roster item for the user with the 'subscription' attribute set to
       a value of "from" and with no 'ask' attribute:

   <presence
       from='user@somedomain'
       to='contact@otherdomain'
       type='unsubscribed'/>

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='user@somedomain'
           subscription='from'
           name='SomeUser'>
         <group>SomeGroup</group>
       </item>
     </query>
   </iq>

   4.  Upon receiving the presence stanza of type "unsubscribed", the
       contact SHOULD acknowledge receipt of that subscription state
       notification through either "affirming" it by sending a presence
       stanza of type "unsubscribe" to the user or "denying" it by
       sending a presence stanza of type "subscribe" to the user; this
       step does not necessarily affect the subscription state (see
       Subscription States (Section 9) for details), but instead lets
       the contact's server know that it MUST no longer send
       notification of the subscription state change to the contact (see
       Section 9.6).




Saint-Andre & Miller     Expires April 25, 2004                [Page 42]

Internet-Draft           XMPP Instant Messaging             October 2003


   As a result of this activity, there has been no change in the
   subscription state; i.e., the contact is in the user's roster with a
   subscription state of "to" and the user is in the contact's roster
   with a subscription state of "from".

8.4 Unsubscribing

   At any time after subscribing to a contact's presence, a user MAY
   unsubscribe. While the XML that the user sends to make this happen is
   the same in all instances, the subsequent subscription state is
   different depending on the subscription state obtaining when the
   unsubscribe "command" is sent. Both possible scenarios are defined
   below.

8.4.1 Case #1: Unsubscribing When Subscription is Not Mutual

   In the first case, the user has a subscription to the contact but the
   contact does not have a subscription to the user (i.e., the
   subscription is not yet mutual).

   1.  If the user wants to unsubscribe from the contact's presence, the
       user MUST send a presence stanza of type "unsubscribe" to the
       contact:

   <presence to='contact@otherdomain' type='unsubscribe'/>

   2.  As a result, the user's server (1) MUST send a roster push to all
       of the user's available resources that have requested the roster,
       containing an updated roster item for the contact with the
       'subscription' attribute set to a value of "none"; and (2) MUST
       route the presence stanza of type "unsubscribe" to the contact,
       first stamping the 'from' address as the bare JID
       (<user@somedomain>) of the user:

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='contact@otherdomain'
           subscription='none'
           name='MyContact'>
         <group>MyBuddies</group>
       </item>
     </query>
   </iq>

   <presence
       from='user@somedomain'
       to='contact@otherdomain'



Saint-Andre & Miller     Expires April 25, 2004                [Page 43]

Internet-Draft           XMPP Instant Messaging             October 2003


       type='unsubscribe'/>

   3.  Upon receiving the presence stanza of type "unsubscribe"
       addressed to the contact, the contact's server (1) MUST initiate
       a roster push to all available resources associated with the
       contact that have requested the roster, containing an updated
       roster item for the user with the 'subscription' attribute set to
       a value of "none" (if the contact is offline, the contact's
       server MUST modify the roster item and send that modified item
       the next time the contact requests the roster); and (2) MUST
       deliver the "unsubscribe" state change notification to the
       contact:

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='user@somedomain'
           subscription='none'
           name='SomeUser'>
         <group>SomeGroup</group>
       </item>
     </query>
   </iq>

   <presence
       from='user@somedomain'
       to='contact@otherdomain'
       type='unsubscribe'/>

   4.  Upon receiving the presence stanza of type "unsubscribe", the
       contact SHOULD acknowledge receipt of that subscription state
       notification through either "affirming" it by sending a presence
       stanza of type "unsubscribed" to the user or "denying" it by
       sending a presence stanza of type "subscribed" to the user; this
       step does not necessarily affect the subscription state (see
       Subscription States (Section 9) for details), but instead lets
       the contact's server know that it MUST no longer send
       notification of the subscription state change to the contact (see
       Section 9.6).

   5.  The contact's server then (1) MUST send a presence stanza of type
       "unsubscribed" to the user; and (2) SHOULD send unavailable
       presence from the contact to the user:

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unsubscribed'/>



Saint-Andre & Miller     Expires April 25, 2004                [Page 44]

Internet-Draft           XMPP Instant Messaging             October 2003


   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unavailable'/>

   6.  When the user's server receives a presence stanza of type
       "unsubscribed" and/or unavailable presence, it MUST deliver them
       to the user:

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unsubscribed'/>

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unavailable'/>

   7.  Upon receiving the presence stanza of type "unsubscribed", the
       user SHOULD acknowledge receipt of that subscription state
       notification through either "affirming" it by sending a presence
       stanza of type "unsubscribe" to the contact or "denying" it by
       sending a presence stanza of type "subscribe" to the contact;
       this step does not necessarily affect the subscription state (see
       Subscription States (Section 9) for details), but instead lets
       the user's server know that it MUST no longer send notification
       of the subscription state change to the user (see Section 9.6).


8.4.2 Case #2: Unsubscribing When Subscription is Mutual

   In the second case, the user has a subscription to the contact and
   the contact also has a subscription to the user (i.e., the
   subscription is mutual).

   1.  If the user wants to unsubscribe from the contact's presence, the
       user MUST send a presence stanza of type "unsubscribe" to the
       contact:

   <presence to='contact@otherdomain' type='unsubscribe'/>

   2.  As a result, the user's server (1) MUST send a roster push to all
       of the user's available resources that have requested the roster,
       containing an updated roster item for the contact with the
       'subscription' attribute set to a value of "from"; and (2) MUST
       route the presence stanza of type "unsubscribe" to the contact,
       first stamping the 'from' address as the bare JID



Saint-Andre & Miller     Expires April 25, 2004                [Page 45]

Internet-Draft           XMPP Instant Messaging             October 2003


       (<user@somedomain>) of the user:

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='contact@otherdomain'
           subscription='from'
           name='MyContact'>
         <group>MyBuddies</group>
       </item>
     </query>
   </iq>

   <presence
       from='user@somedomain'
       to='contact@otherdomain'
       type='unsubscribe'/>

   3.  Upon receiving the presence stanza of type "unsubscribe"
       addressed to the contact, the contact's server (1) MUST initiate
       a roster push to all available resources associated with the
       contact that have requested the roster, containing an updated
       roster item for the user with the 'subscription' attribute set to
       a value of "to" (if the contact is offline, the contact's server
       MUST modify the roster item and send that modified item the next
       time the contact requests the roster); and (2) MUST deliver the
       "unsubscribe" state change notification to the contact:

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='user@somedomain'
           subscription='to'
           name='SomeUser'>
         <group>SomeGroup</group>
       </item>
     </query>
   </iq>

   <presence
       from='user@somedomain'
       to='contact@otherdomain'
       type='unsubscribe'/>

   4.  Upon receiving the presence stanza of type "unsubscribe", the
       contact SHOULD acknowledge receipt of that subscription state
       notification through either "affirming" it by sending a presence
       stanza of type "unsubscribed" to the user or "denying" it by



Saint-Andre & Miller     Expires April 25, 2004                [Page 46]

Internet-Draft           XMPP Instant Messaging             October 2003


       sending a presence stanza of type "subscribed" to the user; this
       step does not necessarily affect the subscription state (see
       Subscription States (Section 9) for details), but instead lets
       the contact's server know that it MUST no longer send
       notification of the subscription state change to the contact (see
       Section 9.6).

   5.  The contact's server then (1) MUST send a presence stanza of type
       "unsubscribed" to the user; and (2) SHOULD send unavailable
       presence from the contact to the user:

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unsubscribed'/>

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unavailable'/>

   6.  When the user's server receives a presence stanza of type
       "unsubscribed" and/or unavailable presence, it MUST deliver them
       to the user:

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unsubscribed'/>

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unavailable'/>

   7.  Upon receiving the presence stanza of type "unsubscribed", the
       user SHOULD acknowledge receipt of that subscription state
       notification through either "affirming" it by sending a presence
       stanza of type "unsubscribe" to the contact or "denying" it by
       sending a presence stanza of type "subscribe" to the contact;
       this step does not necessarily affect the subscription state (see
       Subscription States (Section 9) for details), but instead lets
       the user's server know that it MUST no longer send notification
       of the subscription state change to the user (see Section 9.6).

   Note: Obviously this does not result in removal of the roster item
   from the user's roster, and the contact still has a subscription to
   the user's presence. In order to both completely cancel a mutual



Saint-Andre & Miller     Expires April 25, 2004                [Page 47]

Internet-Draft           XMPP Instant Messaging             October 2003


   subscription and fully remove the roster item from the user's roster,
   the user SHOULD update the roster item with subscription='remove' as
   defined under Removing a Roster Item and Cancelling All Subscriptions
   (Section 8.6).

8.5 Cancelling a Subscription

   At any time after approving a subscription request from a user, a
   contact MAY cancel that subscription. While the XML that the contact
   sends to make this happen is the same in all instances, the
   subsequent subscription state is different depending on the
   subscription state obtaining when the cancellation was sent. Both
   possible scenarios are defined below.

8.5.1 Case #1: Cancelling When Subscription is Not Mutual

   In the first case, the user has a subscription to the contact but the
   contact does not have a subscription to the user (i.e., the
   subscription is not yet mutual).

   1.  If the contact wants to cancel the user's subscription, the
       contact MUST send a presence stanza of type "unsubscribed" to the
       user:

   <presence to='user@somedomain' type='unsubscribed'/>

   2.  As a result, the contact's server (1) MUST send a roster push to
       all of the contact's available resources that have requested the
       roster, containing an updated roster item for the user with the
       'subscription' attribute set to a value of "none"; (2) MUST route
       the presence stanza of type "unsubscribed" to the user, first
       stamping the 'from' address as the bare JID
       (<contact@otherdomain>) of the contact; and (3) SHOULD send
       unavailable presence from the contact to the user:

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='user@somedomain'
           subscription='none'
           name='SomeUser'>
         <group>SomeGroup</group>
       </item>
     </query>
   </iq>

   <presence
       from='contact@otherdomain'



Saint-Andre & Miller     Expires April 25, 2004                [Page 48]

Internet-Draft           XMPP Instant Messaging             October 2003


       to='user@somedomain'
       type='unsubscribed'/>

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unavailable'/>

   3.  Upon receiving the presence stanza of type "unsubscribed"
       addressed to the user, the user's server (1) MUST initiate a
       roster push to all of the user's available resources that have
       requested the roster, containing an updated roster item for the
       contact with the 'subscription' attribute set to a value of
       "none" (if the user is offline, the user's server MUST modify the
       roster item and send that modified item the next time the user
       requests the roster); (2) MUST deliver the "unsubscribed" state
       change notification to the user; and (3) MUST deliver the
       unavailable presence to the user:

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='contact@otherdomain'
           subscription='none'
           name='MyContact'>
         <group>MyBuddies</group>
       </item>
     </query>
   </iq>

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unsubscribed'/>

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unavailable'/>

   4.  Upon receiving the presence stanza of type "unsubscribed", the
       user SHOULD acknowledge receipt of that subscription state
       notification through either "affirming" it by sending a presence
       stanza of type "unsubscribe" to the contact or "denying" it by
       sending a presence stanza of type "subscribe" to the contact;
       this step does not necessarily affect the subscription state (see
       Subscription States (Section 9) for details), but instead lets
       the user's server know that it MUST no longer send notification



Saint-Andre & Miller     Expires April 25, 2004                [Page 49]

Internet-Draft           XMPP Instant Messaging             October 2003


       of the subscription state change to the user (see Section 9.6).


8.5.2 Case #2: Cancelling When Subscription is Mutual

   In the second case, the user has a subscription to the contact and
   the contact also has a subscription to the user (i.e., the
   subscription is mutual).

   1.  If the contact wants to cancel the user's subscription, the
       contact MUST send a presence stanza of type "unsubscribed" to the
       user:

   <presence to='user@somedomain' type='unsubscribed'/>

   2.  As a result, the contact's server (1) MUST send a roster push to
       all of the contact's available resources that have requested the
       roster, containing an updated roster item for the user with the
       'subscription' attribute set to a value of "to"; (2) MUST route
       the presence stanza of type "unsubscribed" to the user, first
       stamping the 'from' address as the bare JID
       (<contact@otherdomain>) of the contact; and (3) SHOULD send
       unavailable presence from the contact to the user:

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='user@somedomain'
           subscription='to'
           name='SomeUser'>
         <group>SomeGroup</group>
       </item>
     </query>
   </iq>

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unsubscribed'/>

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unavailable'/>

   3.  Upon receiving the presence stanza of type "unsubscribed"
       addressed to the user, the user's server (1) MUST initiate a
       roster push to all of the user's available resources that have



Saint-Andre & Miller     Expires April 25, 2004                [Page 50]

Internet-Draft           XMPP Instant Messaging             October 2003


       requested the roster, containing an updated roster item for the
       contact with the 'subscription' attribute set to a value of
       "from" (if the user is offline, the user's server MUST modify the
       roster item and send that modified item the next time the user
       requests the roster); and (2) MUST deliver the "unsubscribed"
       state change notification to the user; and (3) MUST deliver the
       unavailable presence to the user:

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='contact@otherdomain'
           subscription='from'
           name='MyContact'>
         <group>MyBuddies</group>
       </item>
     </query>
   </iq>

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unsubscribed'/>

   <presence
       from='contact@otherdomain'
       to='user@somedomain'
       type='unavailable'/>

   4.  Upon receiving the presence stanza of type "unsubscribed", the
       user SHOULD acknowledge receipt of that subscription state
       notification through either "affirming" it by sending a presence
       stanza of type "unsubscribe" to the contact or "denying" it by
       sending a presence stanza of type "subscribe" to the contact;
       this step does not necessarily affect the subscription state (see
       Subscription States (Section 9) for details), but instead lets
       the user's server know that it MUST no longer send notification
       of the subscription state change to the user (see Section 9.6).

   Note: Obviously this does not result in removal of the roster item
   from the contact's roster, and the contact still has a subscription
   to the user's presence. In order to both completely cancel a mutual
   subscription and fully remove the roster item from the contact's
   roster, the contact should update the roster item with
   subscription='remove' as defined under Removing a Roster Item and
   Cancelling All Subscriptions (Section 8.6).





Saint-Andre & Miller     Expires April 25, 2004                [Page 51]

Internet-Draft           XMPP Instant Messaging             October 2003


8.6 Removing a Roster Item and Cancelling All Subscriptions

   Because there may be many steps involved in completely removing a
   roster item and cancelling subscriptions in both directions, the
   roster management protocol includes a "shortcut" method for doing so.
   The process may be initiated no matter what the current subscription
   state is by sending a roster set containing an item for the contact
   with the 'subscription' attribute set to a value of "remove":

   <iq type='set' id='remove1'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='contact@otherdomain'
           subscription='remove'/>
     </query>
   </iq>

   When the user removes a contact from his or her roster by setting the
   'subscription' attribute to a value of "remove", the user's server
   (1) MUST automatically cancel any existing presence subscription
   between the user and the contact (both 'to' and 'from' as
   appropriate); (2) MUST remove the roster item from the user's roster
   and inform all of the user's available resources of the roster item
   removal; (3) MUST inform the resource that initiated the removal of
   success; and (4) SHOULD send unavailable presence to the contact:

   <presence
       from='user@somedomain'
       to='contact@otherdomain'
       type='unsubscribe'/>

   <presence
       from='user@somedomain'
       to='contact@otherdomain'
       type='unsubscribed'/>

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='contact@otherdomain'
           subscription='remove'/>
     </query>
   </iq>

   <iq type='result' id='remove1'/>

   <presence
       from='user@somedomain'



Saint-Andre & Miller     Expires April 25, 2004                [Page 52]

Internet-Draft           XMPP Instant Messaging             October 2003


       to='contact@otherdomain'
       type='unavailable'/>

   Upon receiving the presence stanza of type "unsubscribe", the
   contact's server (1) MUST initiate a roster push to all available
   resources associated with the contact that have requested the roster,
   containing an updated roster item for the user with the
   'subscription' attribute set to a value of "to" (if the contact is
   offline, the contact's server MUST modify the roster item and send
   that modified item the next time the contact requests the roster);
   and (2) MUST also deliver the "unsubscribe" state change notification
   to the contact:

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='user@somedomain'
           subscription='to'
           name='SomeUser'>
         <group>SomeGroup</group>
       </item>
     </query>
   </iq>

   <presence
       from='user@somedomain'
       to='contact@otherdomain'
       type='unsubscribe'/>

   Upon receiving the presence stanza of type "unsubscribed", the
   contact's server (1) MUST initiate a roster push to all available
   resources associated with the contact that have requested the roster,
   containing an updated roster item for the user with the
   'subscription' attribute set to a value of "none" (if the contact is
   offline, the contact's server MUST modify the roster item and send
   that modified item the next time the contact requests the roster);
   and (2) MUST also deliver the "unsubscribe" state change notification
   to the contact:

   <iq type='set'>
     <query xmlns='jabber:iq:roster'>
       <item
           jid='user@somedomain'
           subscription='none'
           name='SomeUser'>
         <group>SomeGroup</group>
       </item>
     </query>



Saint-Andre & Miller     Expires April 25, 2004                [Page 53]

Internet-Draft           XMPP Instant Messaging             October 2003


   </iq>

   <presence
       from='user@somedomain'
       to='contact@otherdomain'
       type='unsubscribed'/>

   Upon receiving the presence stanza of type "unavailable" addressed to
   the contact, the contact's server MUST deliver the unavailable
   presence to the user:

   <presence
       from='user@somedomain'
       to='contact@otherdomain'
       type='unavailable'/>

   Note that when the user removes the contact from the user's roster,
   the end state of the contact's roster is that the user is still in
   the contact's roster with a subscription state of "none"; in order to
   completely remove the roster item for the user, the contact needs to
   also send a roster removal request.

9. Subscription States

   This section provides detailed information about subscription states.

9.1 Defined States

   There are nine possible subscription states, which are described here
   from the user's perspective:

   1.  "None" = contact and user are not subscribed to each other, and
       neither has requested a subscription from the other

   2.  "None + Pending Out" = contact and user are not subscribed to
       each other, and user has sent contact a subscription request but
       contact has not responded yet

   3.  "None + Pending In" = contact and user are not subscribed to each
       other, and contact has sent user a subscription request but user
       has not responded yet

   4.  "None + Pending Out/In" = contact and user are not subscribed to
       each other, contact has sent user a subscription request but user
       has not responded yet, and user has sent contact a subscription
       request but contact has not responded yet

   5.  "To" = user is subscribed to contact (one-way)



Saint-Andre & Miller     Expires April 25, 2004                [Page 54]

Internet-Draft           XMPP Instant Messaging             October 2003


   6.  "To + Pending In" = user is subscribed to contact, and contact
       has send user a subscription request but user has not responded
       yet

   7.  "From" = contact is subscribed to user (one-way)

   8.  "From + Pending Out" = contact is subscribed to user, and user
       has sent contact a subscription request but contact has not
       responded yet

   9.  "Both" = user and contact are subscribed to each other (two-way)


9.2 Server Handling of Outbound Presence, Categorized by Subscription
    State

   This section defines how a server MUST handle an outbound presence
   stanza of type "subscribe", "subscribed", "unsubscribe", or
   "unsubscribed" (i.e., route it to the intended recipient and/or make
   a change to the subscription state), categorized by the current
   subscription state. The general rule is that a server MUST route the
   stanza to the intended recipient if it would change the subscription
   state, and MUST NOT route the stanza if it would not change the
   subscription state. Detailed definitions are contained in the
   following sections. Naturally, if the stanza changes the subscription
   state, the server MUST change the subscription state in addition to
   routing the subscription state.

9.2.1 Subscription State = None

   +-------------------------------------------------------+
   |  STANZA TYPE   |  ROUTE?  |  NEW STATE                |
   +-------------------------------------------------------+
   |  subscribe     |  yes     |  "None + Pending Out"     |
   |  subscribed    |  no      |  no state change          |
   |  unsubscribe   |  no      |  no state change          |
   |  unsubscribed  |  no      |  no state change          |
   +-------------------------------------------------------+


9.2.2 Subscription State = None + Pending Out

   +-------------------------------------------------------+
   |  STANZA TYPE   |  ROUTE?  |  NEW STATE                |
   +-------------------------------------------------------+
   |  subscribe     |  no      |  no state change          |
   |  subscribed    |  no      |  no state change          |
   |  unsubscribe   |  yes     |  "None"                   |



Saint-Andre & Miller     Expires April 25, 2004                [Page 55]

Internet-Draft           XMPP Instant Messaging             October 2003


   |  unsubscribed  |  no      |  no state change          |
   +-------------------------------------------------------+


9.2.3 Subscription State = None + Pending In

   +-------------------------------------------------------+
   |  STANZA TYPE   |  ROUTE?  |  NEW STATE                |
   +-------------------------------------------------------+
   |  subscribe     |  yes     |  "None + Pending Out/In"  |
   |  subscribed    |  yes     |  "From"                   |
   |  unsubscribe   |  no      |  no state change          |
   |  unsubscribed  |  yes     |  "None"                   |
   +-------------------------------------------------------+


9.2.4 Subscription State = None + Pending Out/In

   +-------------------------------------------------------+
   |  STANZA TYPE   |  ROUTE?  |  NEW STATE                |
   +-------------------------------------------------------+
   |  subscribe     |  no      |  no state change          |
   |  subscribed    |  yes     |  "From + Pending Out"     |
   |  unsubscribe   |  yes     |  "None + Pending In"      |
   |  unsubscribed  |  yes     |  "None + Pending Out"     |
   +-------------------------------------------------------+


9.2.5 Subscription State = To

   +-------------------------------------------------------+
   |  STANZA TYPE   |  ROUTE?  |  NEW STATE                |
   +-------------------------------------------------------+
   |  subscribe     |  no      |  no state change          |
   |  subscribed    |  no      |  no state change          |
   |  unsubscribe   |  yes     |  "None"                   |
   |  unsubscribed  |  no      |  no state change          |
   +-------------------------------------------------------+


9.2.6 Subscription State = To + Pending In

   +-------------------------------------------------------+
   |  STANZA TYPE   |  ROUTE?  |  NEW STATE                |
   +-------------------------------------------------------+
   |  subscribe     |  no      |  no state change          |
   |  subscribed    |  yes     |  "Both"                   |
   |  unsubscribe   |  yes     |  "None + Pending In"      |



Saint-Andre & Miller     Expires April 25, 2004                [Page 56]

Internet-Draft           XMPP Instant Messaging             October 2003


   |  unsubscribed  |  yes     |  "To"                     |
   +-------------------------------------------------------+


9.2.7 Subscription State = From

   +-------------------------------------------------------+
   |  STANZA TYPE   |  ROUTE?  |  NEW STATE                |
   +-------------------------------------------------------+
   |  subscribe     |  yes     |  "From + Pending Out"     |
   |  subscribed    |  no      |  no state change          |
   |  unsubscribe   |  no      |  no state change          |
   |  unsubscribed  |  yes     |  "None"                   |
   +-------------------------------------------------------+


9.2.8 Subscription State = From + Pending Out

   +-------------------------------------------------------+
   |  STANZA TYPE   |  ROUTE?  |  NEW STATE                |
   +-------------------------------------------------------+
   |  subscribe     |  no      |  no state change          |
   |  subscribed    |  no      |  no state change          |
   |  unsubscribe   |  yes     |  "From"                   |
   |  unsubscribed  |  yes     |  "None + Pending Out"     |
   +-------------------------------------------------------+


9.2.9 Subscription State = Both

   +-------------------------------------------------------+
   |  STANZA TYPE   |  ROUTE?  |  NEW STATE                |
   +-------------------------------------------------------+
   |  subscribe     |  no      |  no state change          |
   |  subscribed    |  no      |  no state change          |
   |  unsubscribe   |  yes     |  "From"                   |
   |  unsubscribed  |  yes     |  "To"                     |
   +-------------------------------------------------------+


9.3 Server Handling of Outbound Presence, Categorized by Presence Type

   This section defines how a server MUST handle an outbound presence
   stanza of type "subscribe", "subscribed", "unsubscribe", or
   "unsubscribed" (i.e., route it to the intended recipient and/or make
   a change to the subscription state), categorized by presence type.





Saint-Andre & Miller     Expires April 25, 2004                [Page 57]

Internet-Draft           XMPP Instant Messaging             October 2003


9.3.1 Subscribe

   +----------------------------------------------------------------+
   |  EXISTING STATE          |  ROUTE?  |  NEW STATE               |
   +----------------------------------------------------------------+
   |  "None"                  |  yes     |  "None + Pending Out"    |
   |  "None + Pending Out"    |  no      |  no state change         |
   |  "None + Pending In"     |  yes     |  "None + Pending Out/In" |
   |  "None + Pending Out/In" |  no      |  no state change         |
   |  "To"                    |  no      |  no state change         |
   |  "To + Pending In"       |  no      |  no state change         |
   |  "From"                  |  yes     |  "From + Pending Out"    |
   |  "From + Pending Out"    |  no      |  no state change         |
   |  "Both"                  |  no      |  no state change         |
   +----------------------------------------------------------------+


9.3.2 Subscribed

   +----------------------------------------------------------------+
   |  EXISTING STATE          |  ROUTE?  |  NEW STATE               |
   +----------------------------------------------------------------+
   |  "None"                  |  no      |  no state change         |
   |  "None + Pending Out"    |  no      |  no state change         |
   |  "None + Pending In"     |  yes     |  "From"                  |
   |  "None + Pending Out/In" |  yes     |  "From + Pending Out"    |
   |  "To"                    |  no      |  no state change         |
   |  "To + Pending In"       |  yes     |  "Both"                  |
   |  "From"                  |  no      |  no state change         |
   |  "From + Pending Out"    |  no      |  no state change         |
   |  "Both"                  |  no      |  no state change         |
   +----------------------------------------------------------------+


9.3.3 Unsubscribe

   +----------------------------------------------------------------+
   |  EXISTING STATE          |  ROUTE?  |  NEW STATE               |
   +----------------------------------------------------------------+
   |  "None"                  |  no      |  no state change         |
   |  "None + Pending Out"    |  yes     |  "None"                  |
   |  "None + Pending In"     |  no      |  no state change         |
   |  "None + Pending Out/In" |  yes     |  "None + Pending In"     |
   |  "To"                    |  yes     |  "None"                  |
   |  "To + Pending In"       |  yes     |  "None + Pending In"     |
   |  "From"                  |  no      |  no state change         |
   |  "From + Pending Out"    |  yes     |  "From"                  |
   |  "Both"                  |  yes     |  "From"                  |



Saint-Andre & Miller     Expires April 25, 2004                [Page 58]

Internet-Draft           XMPP Instant Messaging             October 2003


   +----------------------------------------------------------------+

   Note: When a user sends an outbound presence stanza of type
   "unsubscribe" that results in a subscription state change, the
   contact's server SHOULD auto-reply by sending a presence stanza of
   type "unsubscribed" to the user on behalf of the contact and MUST
   deliver that presence stanza to the contact.

9.3.4 Unsubscribed

   +----------------------------------------------------------------+
   |  EXISTING STATE          |  ROUTE?  |  NEW STATE               |
   +----------------------------------------------------------------+
   |  "None"                  |  no      |  no state change         |
   |  "None + Pending Out"    |  no      |  no state change         |
   |  "None + Pending In"     |  yes     |  "None"                  |
   |  "None + Pending Out/In" |  yes     |  "None + Pending Out"    |
   |  "To"                    |  no      |  no state change         |
   |  "To + Pending In"       |  yes     |  "To"                    |
   |  "From"                  |  yes     |  "None"                  |
   |  "From + Pending Out"    |  yes     |  "None + Pending Out"    |
   |  "Both"                  |  yes     |  "To"                    |
   +----------------------------------------------------------------+


9.4 Server Handling of Inbound Presence, Categorized by Subscription
    State

   This section defines how a server MUST handle an inbound presence
   stanza of type "subscribe", "subscribed", "unsubscribe", or
   "unsubscribed" (i.e., deliver it to the intended recipient and/or
   make a change to the subscription state), categorized by subscription
   state. (Note: some of the presence stanza types should never be
   received as inbound stanzas, since the sender's server MUST NOT route
   them to the intended recipient; however, these stanza types are
   included for the sake of completeness.)

9.4.1 Subscription State = None

   +--------------------------------------------------------+
   |  STANZA TYPE   |  DELIVER?  |  NEW STATE               |
   +--------------------------------------------------------+
   |  subscribe     |  yes       |  "None + Pending In"     |
   |  subscribed    |  no        |  no state change         |
   |  unsubscribe   |  no        |  no state change         |
   |  unsubscribed  |  no        |  no state change         |
   +--------------------------------------------------------+




Saint-Andre & Miller     Expires April 25, 2004                [Page 59]

Internet-Draft           XMPP Instant Messaging             October 2003


9.4.2 Subscription State = None + Pending Out

   +--------------------------------------------------------+
   |  STANZA TYPE   |  DELIVER?  |  NEW STATE               |
   +--------------------------------------------------------+
   |  subscribe     |  yes       |  "None + Pending Out/In" |
   |  subscribed    |  yes       |  "To"                    |
   |  unsubscribe   |  no        |  no state change         |
   |  unsubscribed  |  yes       |  "None"                  |
   +--------------------------------------------------------+


9.4.3 Subscription State = None + Pending In

   +--------------------------------------------------------+
   |  STANZA TYPE   |  DELIVER?  |  NEW STATE               |
   +--------------------------------------------------------+
   |  subscribe     |  no        |  no state change         |
   |  subscribed    |  no        |  no state change         |
   |  unsubscribe   |  yes       |  "None"                  |
   |  unsubscribed  |  no        |  no state change         |
   +--------------------------------------------------------+


9.4.4 Subscription State = None + Pending Out/In

   +--------------------------------------------------------+
   |  STANZA TYPE   |  DELIVER?  |  NEW STATE               |
   +--------------------------------------------------------+
   |  subscribe     |  no        |  no state change         |
   |  subscribed    |  yes       |  "To + Pending In"       |
   |  unsubscribe   |  yes       |  "None + Pending Out"    |
   |  unsubscribed  |  yes       |  "None + Pending In"     |
   +--------------------------------------------------------+


9.4.5 Subscription State = To

   +--------------------------------------------------------+
   |  STANZA TYPE   |  DELIVER?  |  NEW STATE               |
   +--------------------------------------------------------+
   |  subscribe     |  yes       |  "To + Pending In"       |
   |  subscribed    |  no        |  no state change         |
   |  unsubscribe   |  no        |  no state change         |
   |  unsubscribed  |  yes       |  "None"                  |
   +--------------------------------------------------------+





Saint-Andre & Miller     Expires April 25, 2004                [Page 60]

Internet-Draft           XMPP Instant Messaging             October 2003


9.4.6 Subscription State = To + Pending In

   +--------------------------------------------------------+
   |  STANZA TYPE   |  DELIVER?  |  NEW STATE               |
   +--------------------------------------------------------+
   |  subscribe     |  no        |  no state change         |
   |  subscribed    |  no        |  no state change         |
   |  unsubscribe   |  yes       |  "To"                    |
   |  unsubscribed  |  yes       |  "None + Pending In"     |
   +--------------------------------------------------------+


9.4.7 Subscription State = From

   +--------------------------------------------------------+
   |  STANZA TYPE   |  DELIVER?  |  NEW STATE               |
   +--------------------------------------------------------+
   |  subscribe     |  no        |  no state change         |
   |  subscribed    |  no        |  no state change         |
   |  unsubscribe   |  yes       |  "None"                  |
   |  unsubscribed  |  no        |  no state change         |
   +--------------------------------------------------------+


9.4.8 Subscription State = From + Pending Out

   +--------------------------------------------------------+
   |  STANZA TYPE   |  DELIVER?  |  NEW STATE               |
   +--------------------------------------------------------+
   |  subscribe     |  no        |  no state change         |
   |  subscribed    |  yes       |  "Both"                  |
   |  unsubscribe   |  yes       |  "None + Pending Out"    |
   |  unsubscribed  |  yes       |  "From"                  |
   +--------------------------------------------------------+


9.4.9 Subscription State = Both

   +--------------------------------------------------------+
   |  STANZA TYPE   |  DELIVER?  |  NEW STATE               |
   +--------------------------------------------------------+
   |  subscribe     |  no        |  no state change         |
   |  subscribed    |  no        |  no state change         |
   |  unsubscribe   |  yes       |  "To"                    |
   |  unsubscribed  |  yes       |  "From"                  |
   +--------------------------------------------------------+





Saint-Andre & Miller     Expires April 25, 2004                [Page 61]

Internet-Draft           XMPP Instant Messaging             October 2003


9.5 Server Handling of Inbound Presence, Categorized by Presence Type

   This section defines how a server MUST handle an inbound presence
   stanza of type "subscribe", "subscribed", "unsubscribe", or
   "unsubscribed" (i.e., deliver it to the intended recipient and/or
   make a change to the subscription state), categorized by presence
   type.

9.5.1 Subscribe

   +------------------------------------------------------------------+
   |  EXISTING STATE          |  DELIVER?  |  NEW STATE               |
   +------------------------------------------------------------------+
   |  "None"                  |  yes       |  "None + Pending In"     |
   |  "None + Pending Out"    |  yes       |  "None + Pending Out/In" |
   |  "None + Pending In"     |  no        |  no state change         |
   |  "None + Pending Out/In" |  no        |  no state change         |
   |  "To"                    |  yes       |  "To + Pending In"       |
   |  "To + Pending In"       |  no        |  no state change         |
   |  "From"                  |  no        |  no state change         |
   |  "From + Pending Out"    |  no        |  no state change         |
   |  "Both"                  |  no        |  no state change         |
   +------------------------------------------------------------------+


9.5.2 Subscribed

   +------------------------------------------------------------------+
   |  EXISTING STATE          |  DELIVER?  |  NEW STATE               |
   +------------------------------------------------------------------+
   |  "None"                  |  no        |  no state change         |
   |  "None + Pending Out"    |  yes       |  "To"                    |
   |  "None + Pending In"     |  no        |  no state change         |
   |  "None + Pending Out/In" |  yes       |  "To + Pending In"       |
   |  "To"                    |  no        |  no state change         |
   |  "To + Pending In"       |  no        |  no state change         |
   |  "From"                  |  no        |  no state change         |
   |  "From + Pending Out"    |  yes       |  "Both"                  |
   |  "Both"                  |  no        |  no state change         |
   +------------------------------------------------------------------+


9.5.3 Unsubscribe

   +------------------------------------------------------------------+
   |  EXISTING STATE          |  DELIVER?  |  NEW STATE               |
   +------------------------------------------------------------------+
   |  "None"                  |  no        |  no state change         |



Saint-Andre & Miller     Expires April 25, 2004                [Page 62]

Internet-Draft           XMPP Instant Messaging             October 2003


   |  "None + Pending Out"    |  no        |  no state change         |
   |  "None + Pending In"     |  yes       |  "None"                  |
   |  "None + Pending Out/In" |  yes       |  "None + Pending Out"    |
   |  "To"                    |  no        |  no state change         |
   |  "To + Pending In"       |  yes       |  "To"                    |
   |  "From"                  |  yes       |  "None"                  |
   |  "From + Pending Out"    |  yes       |  "None + Pending Out     |
   |  "Both"                  |  yes       |  "To"                    |
   +------------------------------------------------------------------+


9.5.4 Unsubscribed

   +------------------------------------------------------------------+
   |  EXISTING STATE          |  DELIVER?  |  NEW STATE               |
   +------------------------------------------------------------------+
   |  "None"                  |  no        |  no state change         |
   |  "None + Pending Out"    |  yes       |  "None"                  |
   |  "None + Pending In"     |  no        |  no state change         |
   |  "None + Pending Out/In" |  yes       |  "None + Pending In"     |
   |  "To"                    |  yes       |  "None"                  |
   |  "To + Pending In"       |  yes       |  "None + Pending In"     |
   |  "From"                  |  no        |  no state change         |
   |  "From + Pending Out"    |  yes       |  "From"                  |
   |  "Both"                  |  yes       |  "From"                  |
   +------------------------------------------------------------------+


9.6 Server Delivery and Client Acknowledgement of Subscription State
    Change Notifications

   When a server receives an inbound presence stanza of type
   "subscribe", "subscribed", "unsubscribe", or "unsubscribed" that
   consists of a subscription state change notification, in addition to
   sending the appropriate roster push (or updated roster when the
   roster is next requested), it MUST deliver the notification to the
   intended recipient at least once. A server MAY require the recipient
   to acknowledge receipt of the all state change notifications (and
   MUST require acknowledgement in the case of subscription requests,
   i.e., presence stanzas of type "subscribe"). In order to require
   acknowledgement, a server SHOULD send the notification to the
   recipient each time the recipient logs in, until the recipient
   acknowledges receipt of the notification by "affirming" or "denying"
   the notification, as shown in the following table:

   +--------------------------------------------------+
   |  NOTIFICATION  |  ACCEPT        |  DENY          |
   +--------------------------------------------------+



Saint-Andre & Miller     Expires April 25, 2004                [Page 63]

Internet-Draft           XMPP Instant Messaging             October 2003


   |  subscribe     |  subscribed    |  unsubscribed  |
   |  subscribed    |  subscribe     |  unsubscribe   |
   |  unsubscribe   |  unsubscribed  |  subscribed    |
   |  unsubscribed  |  unsubscribe   |  subscribe     |
   +--------------------------------------------------+

   Obviously, given the foregoing subscription state charts, some of the
   acknowledgement stanzas will be routed to the contact and result in
   subscription state changes, while others will not. However, any such
   stanzas MUST result in the server's no longer sending the
   subscription state notification to the user.

   Because a user's server MUST automatically generate outbound presence
   stanzas of type "unsubscribe" and "unsubscribed" upon receiving a
   roster set with the 'subscription' attribute set to a value of
   "remove" (see Removing a Roster Item and Cancelling All Subscriptions
   (Section 8.6)) the server MUST treat a roster remove request as
   equivalent to sending those presence stanzas for purposes of
   determining whether to continue sending subscription state change
   notifications of type "subscribe" or "subscribed" to the user.

10. Blocking Communication

   Most instant messaging systems have found it necessary to implement
   some method for users to block communications from particular other
   users (this is also required by sections 5.1.5, 5.1.15, 5.3.2, and
   5.4.10 of RFC 2779 [2]). In XMPP this is done using the
   'jabber:iq:privacy' namespace by managing one's privacy lists.

   Server-side privacy lists enable successful completion of the
   following use cases:

   o  Retrieving one's privacy lists.

   o  Adding, removing, and editing one's privacy lists.

   o  Setting, changing, or declining active lists.

   o  Setting, changing, or declining the default list (i.e., the list
      that is active by default).

   o  Allowing or blocking messages based on JID, group, or subscription
      type (or globally).

   o  Allowing or blocking inbound presence notifications based on JID,
      group, or subscription type (or globally).

   o  Allowing or blocking outbound presence notifications based on JID,



Saint-Andre & Miller     Expires April 25, 2004                [Page 64]

Internet-Draft           XMPP Instant Messaging             October 2003


      group, or subscription type (or globally).

   o  Allowing or blocking IQs based on JID, group, or subscription type
      (or globally).

   o  Allowing or blocking all communications based on JID, group, or
      subscription type (or globally).

   Note: presence notifications do not include presence subscriptions,
   only presence information that is broadcasted to entities that are
   subscribed to a user's presence information. Thus this includes
   presence stanzas with no 'type' attribute or of type='unavailable'
   only.

10.1 Syntax and Semantics

   A user MAY define one or more privacy lists, which are stored by the
   user's server. Each <list/> element contains one or more rules in the
   form of <item/> elements, and each <item/> element uses attributes to
   define a privacy rule type, a specific value to which the rules
   applies, the relevant action, and the place of the item in the
   processing order.

   The syntax is as follows:

   <iq>
     <query xmlns='jabber:iq:privacy'>
       <list name='foo'>
         <item
             type='[jid|group|subscription]'
             value='bar'
             action='[allow|deny]'
             order='unsignedInt'>
           [<message/>]
           [<presence-in/>]
           [<presence-out/>]
           [<iq/>]
         </item>
       </list>
     </query>
   </iq>

   If the type is "jid", then the 'value' attribute MUST contain a valid
   Jabber ID. JIDs are matched in the following order: <user@domain/
   resource>, then <user@domain>, then <domain/resource>, then <domain>.
   If the value is <user@domain>, then any connected resource for that
   user@domain matches. If the value is <domain/resource>, then only
   that resource matches. If the value is <domain>, then any user@domain



Saint-Andre & Miller     Expires April 25, 2004                [Page 65]

Internet-Draft           XMPP Instant Messaging             October 2003


   (or subdomain) matches.

   If the type is "group", then the 'value' attribute SHOULD contain the
   name of a group in the user's roster. (If a client attempts to
   update, create, or delete a list item with a group that is not in the
   user's roster, the server SHOULD return to the client an
   <item-not-found/> stanza error.)

   If the type is "subscription", then the 'value' attribute MUST be one
   of "both", "to", "from", or "none" as defined under Roster Syntax and
   Semantics (Section 7.1).

   If no 'type' attribute is included, the rule provides the
   "fall-through" case.

   The 'action' attribute MUST be included and its value MUST be either
   "accept" or "deny".

   The 'order' attribute MUST be included and its value MUST be a
   non-negative integer that is unique among all items in the list. (If
   a client attempts to create or update a list with non-unique order
   values, the server MUST return to the client a <bad-request/> stanza
   error.)

   The <item/> element MAY contain one or more child elements that
   enable an entity to specify more granular control over which kinds of
   stanzas are to be blocked (i.e., rather than blocking all stanzas).
   The allowable child elements are:

   o  <message/> -- blocks incoming message stanzas

   o  <iq/> -- blocks incoming IQ stanzas

   o  <presence-in/> -- blocks incoming presence notifications

   o  <presence-out/> -- blocks outgoing presence notifications

   Within the 'jabber:iq:privacy' namespace, the <query/> child of a
   client-generated IQ stanza of type "set" MUST NOT include more than
   one child element (i.e., the stanza must contain only one <active/>
   element, one <default/> element, or one <list/> element); if a client
   violates this rule, the server MUST return to the client a
   <bad-request/> stanza error.

   When a client adds or updates a privacy list, the <list/> element
   SHOULD contain at least one <item/> child element; when a client
   removes a privacy list, the <list/> element SHOULD contain no <item/>
   child element.



Saint-Andre & Miller     Expires April 25, 2004                [Page 66]

Internet-Draft           XMPP Instant Messaging             October 2003


   When a client updates a privacy list, it must include all of the
   desired items (i.e., not a "delta").

10.2 Business Rules

   1.  If there is an active list set for a session, it affects only the
       session for which it is activated, and only for the duration of
       the session. The server MUST apply the active list only and MUST
       NOT apply the default list.

   2.  The default list applies to the user as a whole, and is processed
       if there is no active list set for the target session/resource to
       which a stanza is addressed, or if there are no current sessions
       for the user.

   3.  If there is no active list set for a session (or there are no
       current sessions for the user), and there is no default list,
       then all stanzas SHOULD BE accepted or appropriately processed by
       the server on behalf of the user.

   4.  Privacy lists MUST be the first rule applied by a server,
       superseding (1) the routing and delivery rules specified in
       Server Rules for Handling XML Stanzas (Section 14), and (2) the
       handling of subscription-related presence stanzas (and
       corresponding generation of roster pushes) specified in
       Integration of Roster Items and Presence Subscriptions (Section
       8).

   5.  The order in which privacy list items are processed by the server
       is important. List items MUST be processed in ascending order
       determined by the integer values of the 'order' attribute for
       each <item/>.

   6.  As soon as a stanza is matched against a privacy list, the server
       SHOULD appropriately handle the stanza and cease processing.

   7.  If no fall-through item is provided in a list, the fall-through
       action is assumed to be "accept".

   8.  If a user updates the definition for an active list, subsequent
       processing based on that active list MUST use the updated
       definition (for all resources to which that active list currently
       applies).

   9.  If a change to the subscription state or roster group of a roster
       item defined in an active or default list occurs during a user's
       session, subsequent processing based on that list MUST take into
       account the changed state or group (for all resources to which



Saint-Andre & Miller     Expires April 25, 2004                [Page 67]

Internet-Draft           XMPP Instant Messaging             October 2003


       that list currently applies).


10.3 Retrieving One's Privacy Lists

   Example: Client requests names of privacy lists from server:

   <iq from='romeo@example.org/orchard' type='get' id='getlist1'>
     <query xmlns='jabber:iq:privacy'/>
   </iq>

   Example: Server sends names of privacy lists to client, preceded by
   active list and default list:

   <iq type='result' id='getlist1' to='romeo@example.net/orchard'>
     <query xmlns='jabber:iq:privacy'>
       <active name='private'/>
       <default name='public'/>
       <list name='public'/>
       <list name='private'/>
       <list name='special'/>
     </query>
   </iq>

   Example: Client requests a privacy list from server:

   <iq from='romeo@example.org/orchard' type='get' id='getlist2'>
     <query xmlns='jabber:iq:privacy'>
       <list name='public'/>
     </query>
   </iq>

   Example: Server sends a privacy list to client:

   <iq type='result' id='getlist2' to='romeo@example.net/orchard'>
     <query xmlns='jabber:iq:privacy'>
       <list name='public'>
         <item type='jid'
               value='tybalt@example.com'
               action='deny'
               order='1'/>
         <item action='allow' order='2'/>
       </list>
     </query>
   </iq>

   Example: Client requests another privacy list from server:




Saint-Andre & Miller     Expires April 25, 2004                [Page 68]

Internet-Draft           XMPP Instant Messaging             October 2003


   <iq from='romeo@example.org/orchard' type='get' id='getlist3'>
     <query xmlns='jabber:iq:privacy'>
       <list name='private'/>
     </query>
   </iq>

   Example: Server sends another privacy list to client:

   <iq type='result' id='getlist3' to='romeo@example.net/orchard'>
     <query xmlns='jabber:iq:privacy'>
       <list name='private'>
         <item type='subscription'
               value='both'
               action='allow'
               order='10'/>
         <item action='deny' order='15'/>
       </list>
     </query>
   </iq>

   Example: Client requests yet another privacy list from server:

   <iq from='romeo@example.org/orchard' type='get' id='getlist4'>
     <query xmlns='jabber:iq:privacy'>
       <list name='special'/>
     </query>
   </iq>

   Example: Server sends yet another privacy list to client:

   <iq type='result' id='getlist4' to='romeo@example.net/orchard'>
     <query xmlns='jabber:iq:privacy'>
       <list name='special'>
         <item type='jid'
               value='juliet@example.com'
               action='allow'
               order='6'/>
         <item type='jid'
               value='benvolio@example.org'
               action='allow'
               order='7'/>
         <item type='jid'
               value='mercutio@example.org'
               action='allow'
               order='42'/>
         <item action='deny' order='666'/>
       </list>
     </query>



Saint-Andre & Miller     Expires April 25, 2004                [Page 69]

Internet-Draft           XMPP Instant Messaging             October 2003


   </iq>

   In this example, the user has three lists: (1) 'public', which allows
   communications from everyone except one specific entity (this is the
   default list); (2) 'private', which allows communications only with
   contacts who have a bidirectional subscription with the user (this is
   the active list); and (3) 'special', which allows communications only
   with three specific entities.

   If the user attempts to retrieve a list but a list by that name does
   not exist, the server MUST return an <item-not-found/> stanza error
   to the user:

   Example: Client attempts to retrieve non-existent list:

   <iq to='romeo@example.org/orchard' type='error' id='getlist5'>
     <query xmlns='jabber:iq:privacy'>
       <list name='The Empty Set'/>
     </query>
     <error type='cancel'>
       <item-not-found
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>

   The user is allowed to retrieve only one list at a time. If the user
   attempts to retrieve more than one list in the same request, the
   server MUST return a <bad request/> stanza error to the user:

   Example: Client attempts to retrieve more than one list:

   <iq to='romeo@example.org/orchard' type='error' id='getlist6'>
     <query xmlns='jabber:iq:privacy'>
       <list name='public'/>
       <list name='private'/>
       <list name='special'/>
     </query>
     <error type='modify'>
       <bad-request
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>


10.4 Managing Active Lists

   In order to set or change the active list currently being applied by
   the server, the user MUST send an IQ stanza of type "set" with a



Saint-Andre & Miller     Expires April 25, 2004                [Page 70]

Internet-Draft           XMPP Instant Messaging             October 2003


   <query/> element qualified by the 'jabber:iq:privacy' namespace that
   contains an empty <active/> child element possessing a 'name'
   attribute whose value is set to the desired list name.

   Example: Client requests change of active list:

   <iq from='romeo@example.org/orchard' type='set' id='active1'>
     <query xmlns='jabber:iq:privacy'>
       <active name='special'/>
     </query>
   </iq>

   The server MUST activate and apply the requested list before sending
   the result back to the client.

   Example: Server acknowledges success of active list change:

   <iq type='result' id='active1' to='juliet@example.com/balcony'/>

   If the user attempts to set an active list but a list by that name
   does not exist, the server MUST return an <item-not-found/> stanza
   error to the user:

   Example: Client attempts to set a non-existent list as active:

   <iq to='romeo@example.org/orchard' type='error' id='active2'>
     <query xmlns='jabber:iq:privacy'>
       <active name='The Empty Set'/>
     </query>
     <error type='cancel'>
       <item-not-found
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>

   In order to decline the use of any active list, the user MUST send an
   empty <active/> element with no name.

   Example: Client declines the use of active lists:

   <iq from='romeo@example.org/orchard' type='set' id='active2'>
     <query xmlns='jabber:iq:privacy'>
       <active/>
     </query>
   </iq>






Saint-Andre & Miller     Expires April 25, 2004                [Page 71]

Internet-Draft           XMPP Instant Messaging             October 2003


10.5 Managing the Default List

   In order to change its default list, the user MUST send an IQ stanza
   of type "set" with a <query/> element qualified by the
   'jabber:iq:privacy' namespace that contains an empty <default/> child
   element possessing a 'name' attribute whose value is set to the
   desired list name.

   Example: Client requests change of default list:

   <iq from='romeo@example.org/orchard' type='set' id='default1'>
     <query xmlns='jabber:iq:privacy'>
       <default name='special'/>
     </query>
   </iq>

   Example: Server acknowledges success of default list change:

   <iq type='result' id='default1' to='juliet@example.com/balcony'/>

   If the user attempts to set a default list but a list by that name
   does not exist, the server MUST return an <item-not-found/> stanza
   error to the user:

   Example: Client attempts to set a non-existent list as default:

   <iq to='romeo@example.org/orchard' type='error' id='default2'>
     <query xmlns='jabber:iq:privacy'>
       <default name='The Empty Set'/>
     </query>
     <error type='cancel'>
       <item-not-found
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>

   In order to decline the use of a default list (i.e., to use the
   domain's stanza routing rules at all times), the user MUST send an
   empty <default/> element with no name.

   Example: Client declines the use of the default list:

   <iq from='romeo@example.org/orchard' type='set' id='default2'>
     <query xmlns='jabber:iq:privacy'>
       <default/>
     </query>
   </iq>




Saint-Andre & Miller     Expires April 25, 2004                [Page 72]

Internet-Draft           XMPP Instant Messaging             October 2003


10.6 Editing a Privacy List

   In order to edit a privacy list, the user MUST send an IQ stanza of
   type "set" with a <query/> element qualified by the
   'jabber:iq:privacy' namespace that contains one <list/> child element
   possessing a 'name' attribute whose value is set to the list name the
   user would like to edit. The <list/> element MUST contain one or more
   <item/> elements, which specify the user's desired changes to the
   list by including all elements in the list (not the "delta").

   Example: Client edits a privacy list:

   <iq from='romeo@example.org/orchard' type='set' id='edit1'>
     <query xmlns='jabber:iq:privacy'>
       <list name='public'>
         <item type='jid'
               value='tybalt@example.com'
               action='deny'
               order='3'/>
         <item type='jid'
               value='paris@example.org'
               action='deny'
               order='5'/>
         <item action='allow' order='68'/>
       </list>
     </query>
   </iq>

   Example: Server acknowledges success of list edit:

   <iq type='result' id='edit1' to='juliet@example.com/balcony'/>

   Note: The value of the 'order' attribute for any given item is not
   fixed. Thus in the foregoing example if the user would like to add 4
   items between the "tybalt@example.com" item and the
   "paris@example.org" item, the user's client MUST renumber the
   relevant items before submitting the list to the server.

10.7 Adding a New Privacy List

   The same protocol used to edit an existing list is used to create a
   new list. If the list name matches that of an existing list, the
   request to add a new list will overwrite the old one.

10.8 Removing a Privacy List

   In order to remove a privacy list, the user MUST send an IQ stanza of
   type "set" with a <query/> element qualified by the



Saint-Andre & Miller     Expires April 25, 2004                [Page 73]

Internet-Draft           XMPP Instant Messaging             October 2003


   'jabber:iq:privacy' namespace that contains one empty <list/> child
   element possessing a 'name' attribute whose value is set to the list
   name the user would like to remove.

   Example: Client removes a privacy list:

   <iq from='romeo@example.org/orchard' type='set' id='remove1'>
     <query xmlns='jabber:iq:privacy'>
       <list name='private'/>
     </query>
   </iq>

   Example: Server acknowledges success of list removal:

   <iq type='result' id='remove1' to='juliet@example.com/balcony'/>

   If a user attempts to remove an active list or the default list, the
   server MUST return a <conflict/> stanza error to the user. The user
   MUST first set another list to active or default before removing it.

   If the user attempts to remove a list but a list by that name does
   not exist, the server MUST return an <item-not-found/> stanza error
   to the user:

   If the user attempts to remove more than one list in the same
   request, the server MUST return a <bad request/> stanza error to the
   user.

10.9 Blocking Messages

   Server-side privacy lists enable a user to block incoming messages
   from other users based on the other user's JID, roster group, or
   subscription status (or globally). The following examples illustrate
   the protocol.

   Example: User blocks based on JID:

   <iq from='romeo@example.org/orchard' type='set' id='msg1'>
     <query xmlns='jabber:iq:privacy'>
       <list name='message-jid-example'>
         <item type='jid'
               value='tybalt@example.com'
               action='deny'
               order='3'>
           <message/>
         </item>
       </list>
     </query>



Saint-Andre & Miller     Expires April 25, 2004                [Page 74]

Internet-Draft           XMPP Instant Messaging             October 2003


   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive messages from the user with the specified JID.

   Example: User blocks based on roster group:

   <iq from='romeo@example.org/orchard' type='set' id='msg2'>
     <query xmlns='jabber:iq:privacy'>
       <list name='message-group-example'>
         <item type='group'
               value='Enemies'
               action='deny'
               order='4'>
           <message/>
         </item>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive messages from any users in the specified roster
   group.

   Example: User blocks based on subscription type:

   <iq from='romeo@example.org/orchard' type='set' id='msg3'>
     <query xmlns='jabber:iq:privacy'>
       <list name='message-sub-example'>
         <item type='subscription'
               value='none'
               action='deny'
               order='5'>
           <message/>
         </item>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive messages from any users with the specified
   subscription type.

   Example: User blocks globally:

   <iq from='romeo@example.org/orchard' type='set' id='msg4'>
     <query xmlns='jabber:iq:privacy'>
       <list name='message-global-example'>



Saint-Andre & Miller     Expires April 25, 2004                [Page 75]

Internet-Draft           XMPP Instant Messaging             October 2003


         <item action='deny' order='6'>
           <message/>
         </item>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive messages from any other users.

10.10 Blocking Inbound Presence Notifications

   Server-side privacy lists enable a user to block incoming presence
   notifications from other users based on the other user's JID, roster
   group, or subscription status (or globally). The following examples
   illustrate the protocol.

   Note: presence notifications do not include presence subscriptions,
   only presence information that is broadcasted to the user because the
   user previously subscribed to a contact's presence information. Thus
   this includes presence stanzas with no 'type' attribute or of
   type='unavailable' only.

   Example: User blocks based on JID:

   <iq from='romeo@example.org/orchard' type='set' id='presin1'>
     <query xmlns='jabber:iq:privacy'>
       <list name='presin-jid-example'>
         <item type='jid'
               value='tybalt@example.com'
               action='deny'
               order='7'>
           <presence-in/>
         </item>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive presence notifications from the user with the
   specified JID.

   Example: User blocks based on roster group:

   <iq from='romeo@example.org/orchard' type='set' id='presin2'>
     <query xmlns='jabber:iq:privacy'>
       <list name='presin-group-example'>
         <item type='group'



Saint-Andre & Miller     Expires April 25, 2004                [Page 76]

Internet-Draft           XMPP Instant Messaging             October 2003


               value='Enemies'
               action='deny'
               order='8'>
           <presence-in/>
         </item>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive presence notifications from any users in the
   specified roster group.

   Example: User blocks based on subscription type:

   <iq from='romeo@example.org/orchard' type='set' id='presin3'>
     <query xmlns='jabber:iq:privacy'>
       <list name='presin-sub-example'>
         <item type='subscription'
               value='to'
               action='deny'
               order='9'>
           <presence-in/>
         </item>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive presence notifications from any users with the
   specified subscription type.

   Example: User blocks globally:

   <iq from='romeo@example.org/orchard' type='set' id='presin4'>
     <query xmlns='jabber:iq:privacy'>
       <list name='presin-global-example'>
         <item action='deny' order='11'>
           <presence-in/>
         </item>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive presence notifications from any other users.





Saint-Andre & Miller     Expires April 25, 2004                [Page 77]

Internet-Draft           XMPP Instant Messaging             October 2003


10.11 Blocking Outbound Presence Notifications

   Server-side privacy lists enable a user to block outgoing presence
   notifications to other users based on the other user's JID, roster
   group, or subscription status (or globally). The following examples
   illustrate the protocol.

   Note: presence notifications do not include presence subscriptions,
   only presence information that is broadcasted to contacts because
   those contacts previously subscribed to the user's presence
   information. Thus this includes presence stanzas with no 'type'
   attribute or of type='unavailable' only.

   Example: User blocks based on JID:

   <iq from='romeo@example.org/orchard' type='set' id='presout1'>
     <query xmlns='jabber:iq:privacy'>
       <list name='presout-jid-example'>
         <item type='jid'
               value='tybalt@example.com'
               action='deny'
               order='13'>
           <presence-out/>
         </item>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not send presence notifications to the user with the specified
   JID.

   Example: User blocks based on roster group:

   <iq from='romeo@example.org/orchard' type='set' id='presout2'>
     <query xmlns='jabber:iq:privacy'>
       <list name='presout-group-example'>
         <item type='group'
               value='Enemies'
               action='deny'
               order='15'>
           <presence-out/>
         </item>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user



Saint-Andre & Miller     Expires April 25, 2004                [Page 78]

Internet-Draft           XMPP Instant Messaging             October 2003


   will not send presence notifications to any users in the specified
   roster group.

   Example: User blocks based on subscription type:

   <iq from='romeo@example.org/orchard' type='set' id='presout3'>
     <query xmlns='jabber:iq:privacy'>
       <list name='presout-sub-example'>
         <item type='subscription'
               value='from'
               action='deny'
               order='17'>
           <presence-out/>
         </item>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not send presence notifications to any users with the specified
   subscription type.

   Example: User blocks globally:

   <iq from='romeo@example.org/orchard' type='set' id='presout4'>
     <query xmlns='jabber:iq:privacy'>
       <list name='presout-global-example'>
         <item action='deny' order='23'>
           <presence-out/>
         </item>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not send presence notifications to any other users.

10.12 Blocking IQs

   Server-side privacy lists enable a user to block incoming IQ stanzas
   from other users based on the other user's JID, roster group, or
   subscription status (or globally). The following examples illustrate
   the protocol.

   Example: User blocks based on JID:

   <iq from='romeo@example.org/orchard' type='set' id='iq1'>
     <query xmlns='jabber:iq:privacy'>



Saint-Andre & Miller     Expires April 25, 2004                [Page 79]

Internet-Draft           XMPP Instant Messaging             October 2003


       <list name='iq-jid-example'>
         <item type='jid'
               value='tybalt@example.com'
               action='deny'
               order='29'>
           <iq/>
         </item>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive IQ stanzas from the user with the specified JID.

   Example: User blocks based on roster group:

   <iq from='romeo@example.org/orchard' type='set' id='iq2'>
     <query xmlns='jabber:iq:privacy'>
       <list name='iq-group-example'>
         <item type='group'
               value='Enemies'
               action='deny'
               order='31'>
           <iq/>
         </item>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive IQ stanzas from any users in the specified roster
   group.

   Example: User blocks based on subscription type:

   <iq from='romeo@example.org/orchard' type='set' id='iq3'>
     <query xmlns='jabber:iq:privacy'>
       <list name='iq-sub-example'>
         <item type='subscription'
               value='none'
               action='deny'
               order='17'>
           <iq/>
         </item>
       </list>
     </query>
   </iq>




Saint-Andre & Miller     Expires April 25, 2004                [Page 80]

Internet-Draft           XMPP Instant Messaging             October 2003


   As a result of creating and applying the foregoing list, the user
   will not receive IQ stanzas from any users with the specified
   subscription type.

   Example: User blocks globally:

   <iq from='romeo@example.org/orchard' type='set' id='iq4'>
     <query xmlns='jabber:iq:privacy'>
       <list name='iq-global-example'>
         <item action='deny' order='1'>
           <iq/>
         </item>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive IQ stanzas from any other users.

10.13 Blocking All Communication

   Server-side privacy lists enable a user to block all stanzas from and
   to other users based on the other user's JID, roster group, or
   subscription status (or globally). Note that this includes
   subscription-related presence stanzas, which are excluded by Blocking
   Inbound Presence Notifications (Section 10.10). The following
   examples illustrate the protocol.

   Example: User blocks based on JID:

   <iq from='romeo@example.org/orchard' type='set' id='all1'>
     <query xmlns='jabber:iq:privacy'>
       <list name='all-jid-example'>
         <item type='jid'
               value='tybalt@example.com'
               action='deny'
               order='23'/>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive any communications from, nor send any stanzas to,
   the user with the specified JID.

   Example: User blocks based on roster group:

   <iq from='romeo@example.org/orchard' type='set' id='all2'>



Saint-Andre & Miller     Expires April 25, 2004                [Page 81]

Internet-Draft           XMPP Instant Messaging             October 2003


     <query xmlns='jabber:iq:privacy'>
       <list name='all-group-example'>
         <item type='group'
               value='Enemies'
               action='deny'
               order='13'/>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive any communications from, nor send any stanzas to,
   any users in the specified roster group.

   Example: User blocks based on subscription type:

   <iq from='romeo@example.org/orchard' type='set' id='all3'>
     <query xmlns='jabber:iq:privacy'>
       <list name='all-sub-example'>
         <item type='subscription'
               value='none'
               action='deny'
               order='11'/>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive any communications from, nor send any stanzas to,
   any users with the specified subscription type.

   Example: User blocks globally:

   <iq from='romeo@example.org/orchard' type='set' id='all4'>
     <query xmlns='jabber:iq:privacy'>
       <list name='all-global-example'>
         <item action='deny' order='7'/>
       </list>
     </query>
   </iq>

   As a result of creating and applying the foregoing list, the user
   will not receive any communications from, nor send any stanzas to,
   any other users.

10.14 Blocked Entity Attempts to Communicate with User

   If a blocked entity attempts to send message or presence stanzas to



Saint-Andre & Miller     Expires April 25, 2004                [Page 82]

Internet-Draft           XMPP Instant Messaging             October 2003


   the user, the user's server SHOULD silently drop the stanza and MUST
   NOT return an error to the sending entity.

   If a blocked entity attempts to send an IQ stanza of type "get" or
   "set" to the user, the user's server MUST return to the sending
   entity a <feature-not-implemented/> stanza error, since this is the
   standard error code sent from a client that does not understand the
   namespace of an IQ get or set. IQ stanzas of other types SHOULD be
   silently dropped by the server.

   Example: Blocked entity attempts to send IQ get:

   <iq type='get'
       to='romeo@example.net'
       from='tybalt@example.com/pda'
       id='probing1'>
     <query xmlns='jabber:iq:version'/>
   </iq>

   Example: Server returns error to blocked entity:

   <iq type='error'
       from='romeo@example.net'
       to='tybalt@example.com/pda'
       id='probing1'>
     <query xmlns='jabber:iq:version'/>
     <error type='cancel'>
       <feature-not-implemented
           xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
     </error>
   </iq>


10.15 Higher-Level Heuristics

   When building a representation of a higher-level privacy heuristic, a
   client SHOULD use the simplest possible representation.

   For example, the heuristic "block all communications with any user
   not in my roster" could be constructed in any of the following ways:

   o  allow communications from all JIDs in my roster (i.e., listing
      each JID as a separate list item), but block communications with
      everyone else

   o  allow communications from any user who is in one of the groups
      that make up my roster (i.e., listing each group as a separate
      list item), but block communications from everyone else



Saint-Andre & Miller     Expires April 25, 2004                [Page 83]

Internet-Draft           XMPP Instant Messaging             October 2003


   o  allow communications from any user with whom I have a subscription
      of 'both' or 'to' or 'from' (i.e., listing each subscription value
      separately), but block communications from everyone else

   o  block communications from anyone whose subscription state is
      'none'

   The final representation is the simplest and SHOULD be used; here is
   the XML that would be sent in this case:

   <iq type='set' id='heuristic1'>
     <query xmlns='jabber:iq:privacy'>
       <list name='heuristic-example'>
         <item type='subscription'
               value='none'
               action='deny'
               order='437'/>
       </list>
     </query>
   </iq>


11. IANA Considerations

   For a number of related IANA considerations, refer to the relevant
   section of XMPP Core [1].

11.1 XML Namespace Name for Session Data

   A URN sub-namespace for session-related data in the Extensible
   Messaging and Presence Protocol (XMPP) is defined as follows.

   URI: urn:ietf:params:xml:ns:xmpp-session

   Specification: [RFCXXXX]

   Description: This is the XML namespace name for session-related data
      in the Extensible Messaging and Presence Protocol (XMPP) as
      defined by [RFCXXXX].

   Registrant Contact: IETF, XMPP Working Group, <xmppwg@jabber.org>


12. Internationalization Considerations

   For internationalization considerations, refer to the relevant
   section of XMPP Core [1].




Saint-Andre & Miller     Expires April 25, 2004                [Page 84]

Internet-Draft           XMPP Instant Messaging             October 2003


13. Security Considerations

   Core security considerations for XMPP are defined in the relevant
   section of XMPP Core [1].

   Additional considerations that apply only to instant messaging and
   presence applications of XMPP are defined in several places within
   this memo; specifically:

   o  When a server processes a stanza of any kind whose intended
      recipient is a user associated with one of the server's hostnames,
      the server MUST first apply any privacy rules (Section 10) that
      are in force (see Server Rules for Handling XML Stanzas (Section
      14)).

   o  When a server processes an inbound presence stanza of type "probe"
      whose intended recipient is a user associated with one of the
      server's hostnames, the server MUST NOT reveal the user's presence
      information if the sender is a user who is not authorized to
      receive that information as determined by presence subscriptions
      (see Client and Server Presence Responsibilities (Section 5.1)).

   o  When a server processes an outbound presence stanza with no type
      or of type "unavailable", it MUST follow the rules defined under
      Client and Server Presence Responsibilities (Section 5.1) in order
      to ensure that such presence information is not broadcasted to
      entities that are not authorized to know such information.


14. Server Rules for Handling XML Stanzas

   Basic routing and delivery rules for servers are defined in XMPP Core
   [1]. This section defines additional rules for XMPP-compliant instant
   messaging and presence servers.

   If the hostname of the domain identifier portion of the JID contained
   in the 'to' attribute of a stanza matches the hostname of the server
   itself and the JID contained in the 'to' attribute is of the form
   <user@somedomain> or <user@somedomain/resource>, the server MUST
   first apply any privacy rules (Section 10) that are in force. If
   privacy rules allow the stanza, it SHOULD be routed or delivered to
   the intended recipient of the stanza as represented by the JID
   contained in the 'to' attribute. The following additional rules apply
   to instant messaging and presence applications, over and above those
   defined in XMPP Core [1]:

   1.  If the JID is of the form <user@domain/resource> and an available
       resource matches the full JID, the recipient's server MUST



Saint-Andre & Miller     Expires April 25, 2004                [Page 85]

Internet-Draft           XMPP Instant Messaging             October 2003


       deliver the stanza to that resource.

   2.  If the JID is of the form <user@domain/resource> and no available
       resources match the full JID, the recipient's server (a) SHOULD
       silently ignore the stanza (i.e., neither deliver it nor return
       an error) if it is a presence stanza, (b) MUST return a
       <service-unavailable/> stanza error to the sender if it is an IQ
       stanza, and (c) MUST treat the stanza as if it were addressed to
       <user@domain> if it is a message stanza.

   3.  If the JID is of the form <user@somedomain> and there is at least
       one available resource available for the user, the recipient's
       server MUST follow these rules:

       1.  For message stanzas, the server SHOULD deliver the stanza to
           the highest-priority available resource (if the resource did
           not provide a value for the <priority/> element, the server
           SHOULD consider it to have provided a value of zero). If two
           resources have the same priority, the server MAY use some
           other rule (e.g., most recent connect time, most recent
           activity time, or highest availability as determined by some
           hierarchy of <show/> values) to choose between them. However,
           the server MUST NOT deliver the stanza to an available
           resource with a negative priority.

       2.  For presence stanzas other than those of type "probe", the
           server MUST deliver the stanza to all available resources,
           except that the server MUST NOT deliver the stanza to an
           available resource that provided a negative value for the
           <priority/> element; for presence probes, the server SHOULD
           reply based on the rules defined in Client and Server
           Presence Responsibilities (Section 5.1).

       3.  For IQ stanzas, the server itself MUST reply on behalf of the
           user with either an IQ result or an IQ error, and MUST NOT
           deliver the IQ stanza to any of the available resources.
           Specifically, if the semantics of the qualifying namespace
           define a reply that the server can provide, the server MUST
           reply to the stanza on behalf of the user; if not, the server
           MUST reply with a <service-unavailable/> stanza error.

   4.  If the JID is of the form <user@somedomain> and there are no
       available resources associated with the user, how the stanza is
       handled depends on the stanza type:

       1.  For presence stanzas of type "subscribe", the server MUST
           maintain a record of the stanza and deliver it when the user
           next becomes available, as specified under Client and Server



Saint-Andre & Miller     Expires April 25, 2004                [Page 86]

Internet-Draft           XMPP Instant Messaging             October 2003


           Presence Responsibilities (Section 5.1).

       2.  For all other presence stanzas, the server SHOULD silently
           ignore the stanza by not storing it for later delivery or
           replying to it on behalf of the user.

       3.  For message stanzas, the server MAY choose to store the
           stanza on behalf of the user and deliver it when the user
           next becomes available. However, if offline message storage
           is not enabled, the server MUST return to the sender a
           <service-unavailable/> stanza error. (Note: offline message
           storage is not defined in XMPP since it strictly is a matter
           of implementation and service provisioning.)

       4.  For IQ stanzas, the server itself MUST reply on behalf of the
           user with either an IQ result or an IQ error. Specifically,
           if the semantics of the qualifying namespace define a reply
           that the server can provide, the server MUST reply to the
           stanza on behalf of the user; if not, the server MUST reply
           with a <service-unavailable/> stanza error.


15. Compliance Requirements

   This section summarizes the specific aspects of the Extensible
   Messaging and Presence Protocol that MUST be supported by instant
   messaging servers and clients in order to be considered compliant
   implementations. All such applications MUST comply with the
   requirements specified in XMPP Core [1]. The text in this section
   specifies additional compliance requirements for instant messaging
   servers and clients; note well that the requirements described here
   supplement but do not supersede the core requirements.

15.1 Servers

   In addition to core server compliance requirements, an instant
   messaging and presence server MUST additionally support the following
   IM-related protocols:

   o  All server-related instant messaging syntax and semantics defined
      in this document, including presence broadcast on behalf of
      clients, presence subscriptions, roster storage and manipulation,
      privacy rules, and IM-specific routing and delivery rules


15.2 Clients

   In addition to core client compliance requirements, an instant



Saint-Andre & Miller     Expires April 25, 2004                [Page 87]

Internet-Draft           XMPP Instant Messaging             October 2003


   messaging client MUST additionally support the following IM-related
   protocols:

   o  Generation and handling of the IM-specific semantics of XML
      stanzas as defined by the XML schemas, including the 'type'
      attribute of message and presence stanzas as well as their child
      elements

   o  All client-related instant messaging syntax and semantics defined
      in this document, including presence subscriptions, roster
      management, and privacy rules

   o  End-to-end object encryption as defined in XMPP e2e [6]

Normative References

   [1]  Saint-Andre, P. and J. Miller, "XMPP Core",
        draft-ietf-xmpp-core-19 (work in progress), October 2003.

   [2]  Day, M., Aggarwal, S. and J. Vincent, "Instant Messaging /
        Presence Protocol Requirements", RFC 2779, February 2000.

   [3]  Bray, T., Paoli, J., Sperberg-McQueen, C. and E. Maler,
        "Extensible Markup Language (XML) 1.0 (2nd ed)", W3C REC-xml,
        October 2000, <http://www.w3.org/TR/REC-xml>.

   [4]  Bray, T., Hollander, D. and A. Layman, "Namespaces in XML", W3C
        REC-xml-names, January 1999, <http://www.w3.org/TR/
        REC-xml-names>.

   [5]  Bradner, S., "Key words for use in RFCs to Indicate Requirement
        Levels", BCP 14, RFC 2119, March 1997.

   [6]  Saint-Andre, P., "End-to-End Object Encryption in XMPP",
        draft-ietf-xmpp-e2e-05 (work in progress), August 2003.

Informative References

   [7]  Jabber Software Foundation, "Jabber Software Foundation",
        <http://www.jabber.org/>.

   [8]  Day, M., Rosenberg, J. and H. Sugano, "A Model for Presence and
        Instant Messaging", RFC 2778, February 2000.

   [9]  Dawson, F. and T. Howes, "vCard MIME Directory Profile", RFC
        2426, September 1998.





Saint-Andre & Miller     Expires April 25, 2004                [Page 88]

Internet-Draft           XMPP Instant Messaging             October 2003


Authors' Addresses

   Peter Saint-Andre
   Jabber Software Foundation

   EMail: stpeter@jabber.org


   Jeremie Miller
   Jabber Software Foundation

   EMail: jeremie@jabber.org

Appendix A. vCards

   Sections 3.1.3 and 4.1.4 of RFC 2779 [2] require that it be possible
   to retrieve out-of-band contact information for other users (e.g.,
   telephone number or email address). An XML representation of the
   vCard specification defined in RFC 2426 [9] is in common use within
   the Jabber community to provide such information but is out of scope
   for XMPP (documentation of this protocol is contained in "JEP-0054:
   vcard-temp", published by the Jabber Software Foundation [7]).

Appendix B. XML Schemas

   The following XML schemas are descriptive, not normative. For schemas
   defining the core features of XMPP, refer to XMPP Core [1].

B.1 jabber:client

   <?xml version='1.0' encoding='UTF-8'?>

   <xs:schema
       xmlns:xs='http://www.w3.org/2001/XMLSchema'
       xmlns:xml='http://www.w3.org/XML/1998/namespace'
       targetNamespace='jabber:client'
       xmlns='jabber:client'
       elementFormDefault='qualified'>

     <xs:import namespace='http://www.w3.org/XML/1998/namespace'
                schemaLocation='http://www.w3.org/2001/xml.xsd'/>

     <xs:element name='message'>
        <xs:complexType>
           <xs:sequence>
              <xs:element ref='subject'
                          minOccurs='0'
                          maxOccurs='unbounded'/>



Saint-Andre & Miller     Expires April 25, 2004                [Page 89]

Internet-Draft           XMPP Instant Messaging             October 2003


              <xs:element ref='body'
                          minOccurs='0'
                          maxOccurs='unbounded'/>
              <xs:element ref='thread'
                          minOccurs='0'
                          maxOccurs='1'/>
              <xs:any     namespace='##other'
                          minOccurs='0'
                          maxOccurs='unbounded'/>
              <xs:element ref='error'
                          minOccurs='0'
                          maxOccurs='1'/>
           </xs:sequence>
           <xs:attribute name='to'
                         type='xs:string'
                         use='optional'/>
           <xs:attribute name='from'
                         type='xs:string'
                         use='optional'/>
           <xs:attribute name='id'
                         type='xs:NMTOKEN'
                         use='optional'/>
           <xs:attribute ref='xml:lang' use='optional'/>
           <xs:attribute name='type' use='optional'>
             <xs:simpleType>
               <xs:restriction base='xs:NCName'>
                 <xs:enumeration value='chat'/>
                 <xs:enumeration value='error'/>
                 <xs:enumeration value='groupchat'/>
                 <xs:enumeration value='headline'/>
                 <xs:enumeration value='normal'/>
               </xs:restriction>
             </xs:simpleType>
           </xs:attribute>
        </xs:complexType>
     </xs:element>

     <xs:element name='body' type='xs:string'>
       <xs:complexType>
         <xs:attribute ref='xml:lang' use='optional'/>
       </xs:complexType>
     </xs:element>

     <xs:element name='subject' type='xs:string'>
       <xs:complexType>
         <xs:attribute ref='xml:lang' use='optional'/>
       </xs:complexType>
     </xs:element>



Saint-Andre & Miller     Expires April 25, 2004                [Page 90]

Internet-Draft           XMPP Instant Messaging             October 2003


     <xs:element name='thread' type='xs:NMTOKEN'/>

     <xs:element name='presence'>
       <xs:complexType>
         <xs:sequence>
           <xs:element ref='show'
                       minOccurs='0'
                       maxOccurs='1'/>
           <xs:element ref='status'
                       minOccurs='0'
                       maxOccurs='unbounded'/>
           <xs:element ref='priority'
                       minOccurs='0'
                       maxOccurs='1'/>
           <xs:any     namespace='##other'
                       minOccurs='0'
                       maxOccurs='unbounded'/>
           <xs:element ref='error'
                       minOccurs='0'
                       maxOccurs='1'/>
         </xs:sequence>
         <xs:attribute name='to'
                       type='xs:string'
                       use='optional'/>
         <xs:attribute name='from'
                       type='xs:string'
                       use='optional'/>
         <xs:attribute name='id'
                       type='xs:NMTOKEN'
                       use='optional'/>
         <xs:attribute ref='xml:lang' use='optional'/>
         <xs:attribute name='type' use='optional'>
           <xs:simpleType>
             <xs:restriction base='xs:NCName'>
               <xs:enumeration value='subscribe'/>
               <xs:enumeration value='subscribed'/>
               <xs:enumeration value='unsubscribe'/>
               <xs:enumeration value='unsubscribed'/>
               <xs:enumeration value='unavailable'/>
               <xs:enumeration value='error'/>
             </xs:restriction>
           </xs:simpleType>
         </xs:attribute>
       </xs:complexType>
     </xs:element>

     <xs:element name='show'>
       <xs:simpleType>



Saint-Andre & Miller     Expires April 25, 2004                [Page 91]

Internet-Draft           XMPP Instant Messaging             October 2003


         <xs:restriction base='xs:NCName'>
           <xs:enumeration value='away'/>
           <xs:enumeration value='chat'/>
           <xs:enumeration value='dnd'/>
           <xs:enumeration value='xa'/>
         </xs:restriction>
       </xs:simpleType>
     </xs:element>

     <xs:element name='status' type='xs:string'>
       <xs:complexType>
         <xs:attribute ref='xml:lang' use='optional'/>
       </xs:complexType>
     </xs:element>

     <xs:element name='priority' type='xs:byte'/>

     <xs:element name='iq'>
       <xs:complexType>
         <xs:sequence>
           <xs:any     namespace='##other'
                       minOccurs='0'
                       maxOccurs='1'/>
           <xs:element ref='error'
                       minOccurs='0'
                       maxOccurs='1'/>
         </xs:sequence>
         <xs:attribute name='to'
                       type='xs:string'
                       use='optional'/>
         <xs:attribute name='from'
                       type='xs:string'
                       use='optional'/>
         <xs:attribute name='id'
                       type='xs:NMTOKEN'
                       use='required'/>
         <xs:attribute ref='xml:lang' use='optional'/>
         <xs:attribute name='type' use='required'>
           <xs:simpleType>
             <xs:restriction base='xs:NCName'>
               <xs:enumeration value='get'/>
               <xs:enumeration value='set'/>
               <xs:enumeration value='result'/>
               <xs:enumeration value='error'/>
             </xs:restriction>
           </xs:simpleType>
         </xs:attribute>
       </xs:complexType>



Saint-Andre & Miller     Expires April 25, 2004                [Page 92]

Internet-Draft           XMPP Instant Messaging             October 2003


     </xs:element>

     <xs:element name='error'>
       <xs:complexType>
         <xs:sequence>
           <xs:any namespace='urn:ietf:params:xml:ns:xmpp-stanzas'
                   maxOccurs='1'/>
           <text   namespace='urn:ietf:params:xml:ns:xmpp-stanzas'
                   minOccurs='0'
                   maxOccurs='1'/>
           <xs:any
               namespace='##other'
               minOccurs='0'
               maxOccurs='1'/>
         </xs:sequence>
         <xs:attribute name='type' use='required'/>
           <xs:simpleType>
             <xs:restriction base='xs:NCName'>
               <xs:enumeration value='cancel'/>
               <xs:enumeration value='continue'/>
               <xs:enumeration value='modify'/>
               <xs:enumeration value='auth'/>
               <xs:enumeration value='wait'/>
             </xs:restriction>
           </xs:simpleType>
         </xs:attribute>
       </xs:complexType>
     </xs:element>

   </xs:schema>


B.2 jabber:server

   <?xml version='1.0' encoding='UTF-8'?>

   <xs:schema
       xmlns:xs='http://www.w3.org/2001/XMLSchema'
       xmlns:xml='http://www.w3.org/XML/1998/namespace'
       targetNamespace='jabber:server'
       xmlns='jabber:server'
       elementFormDefault='qualified'>

     <xs:import namespace='http://www.w3.org/XML/1998/namespace'
                schemaLocation='http://www.w3.org/2001/xml.xsd'/>

     <xs:element name='message'>
        <xs:complexType>



Saint-Andre & Miller     Expires April 25, 2004                [Page 93]

Internet-Draft           XMPP Instant Messaging             October 2003


           <xs:sequence>
              <xs:element ref='subject'
                          minOccurs='0'
                          maxOccurs='unbounded'/>
              <xs:element ref='body'
                          minOccurs='0'
                          maxOccurs='unbounded'/>
              <xs:element ref='thread'
                          minOccurs='0'
                          maxOccurs='1'/>
              <xs:any     namespace='##other'
                          minOccurs='0'
                          maxOccurs='unbounded'/>
              <xs:element ref='error'
                          minOccurs='0'
                          maxOccurs='1'/>
           </xs:sequence>
           <xs:attribute name='to'
                         type='xs:string'
                         use='required'/>
           <xs:attribute name='from'
                         type='xs:string'
                         use='required'/>
           <xs:attribute name='id'
                         type='xs:NMTOKEN'
                         use='optional'/>
           <xs:attribute ref='xml:lang' use='optional'/>
           <xs:attribute name='type' use='optional'>
             <xs:simpleType>
               <xs:restriction base='xs:NCName'>
                 <xs:enumeration value='chat'/>
                 <xs:enumeration value='error'/>
                 <xs:enumeration value='groupchat'/>
                 <xs:enumeration value='headline'/>
                 <xs:enumeration value='normal'/>
               </xs:restriction>
             </xs:simpleType>
           </xs:attribute>
        </xs:complexType>
     </xs:element>

     <xs:element name='body' type='xs:string'>
       <xs:complexType>
         <xs:attribute ref='xml:lang' use='optional'/>
       </xs:complexType>
     </xs:element>

     <xs:element name='subject' type='xs:string'>



Saint-Andre & Miller     Expires April 25, 2004                [Page 94]

Internet-Draft           XMPP Instant Messaging             October 2003


       <xs:complexType>
         <xs:attribute ref='xml:lang' use='optional'/>
       </xs:complexType>
     </xs:element>

     <xs:element name='thread' type='xs:NMTOKEN'/>

     <xs:element name='presence'>
       <xs:complexType>
         <xs:sequence>
           <xs:element ref='show'
                       minOccurs='0'
                       maxOccurs='1'/>
           <xs:element ref='status'
                       minOccurs='0'
                       maxOccurs='unbounded'/>
           <xs:element ref='priority'
                       minOccurs='0'
                       maxOccurs='1'/>
           <xs:any     namespace='##other'
                       minOccurs='0'
                       maxOccurs='unbounded'/>
           <xs:element ref='error'
                       minOccurs='0'
                       maxOccurs='1'/>
         </xs:sequence>
         <xs:attribute name='to'
                       type='xs:string'
                       use='required'/>
         <xs:attribute name='from'
                       type='xs:string'
                       use='required'/>
         <xs:attribute name='id'
                       type='xs:NMTOKEN'
                       use='optional'/>
         <xs:attribute ref='xml:lang' use='optional'/>
         <xs:attribute name='type' use='optional'>
           <xs:simpleType>
             <xs:restriction base='xs:NCName'>
               <xs:enumeration value='subscribe'/>
               <xs:enumeration value='subscribed'/>
               <xs:enumeration value='unsubscribe'/>
               <xs:enumeration value='unsubscribed'/>
               <xs:enumeration value='unavailable'/>
               <xs:enumeration value='error'/>
             </xs:restriction>
           </xs:simpleType>
         </xs:attribute>



Saint-Andre & Miller     Expires April 25, 2004                [Page 95]

Internet-Draft           XMPP Instant Messaging             October 2003


       </xs:complexType>
     </xs:element>

     <xs:element name='show'>
       <xs:simpleType>
         <xs:restriction base='xs:NCName'>
           <xs:enumeration value='away'/>
           <xs:enumeration value='chat'/>
           <xs:enumeration value='dnd'/>
           <xs:enumeration value='xa'/>
         </xs:restriction>
       </xs:simpleType>
     </xs:element>

     <xs:element name='status' type='xs:string'>
       <xs:complexType>
         <xs:attribute ref='xml:lang' use='optional'/>
       </xs:complexType>
     </xs:element>

     <xs:element name='priority' type='xs:byte'/>

     <xs:element name='iq'>
       <xs:complexType>
         <xs:sequence>
           <xs:any     namespace='##other'
                       minOccurs='0'
                       maxOccurs='1'/>
           <xs:element ref='error'
                       minOccurs='0'
                       maxOccurs='1'/>
         </xs:sequence>
         <xs:attribute name='to'
                       type='xs:string'
                       use='required'/>
         <xs:attribute name='from'
                       type='xs:string'
                       use='required'/>
         <xs:attribute name='id'
                       type='xs:NMTOKEN'
                       use='required'/>
         <xs:attribute ref='xml:lang' use='optional'/>
         <xs:attribute name='type' use='required'>
           <xs:simpleType>
             <xs:restriction base='xs:NCName'>
               <xs:enumeration value='get'/>
               <xs:enumeration value='set'/>
               <xs:enumeration value='result'/>



Saint-Andre & Miller     Expires April 25, 2004                [Page 96]

Internet-Draft           XMPP Instant Messaging             October 2003


               <xs:enumeration value='error'/>
             </xs:restriction>
           </xs:simpleType>
         </xs:attribute>
       </xs:complexType>
     </xs:element>

     <xs:element name='error'>
       <xs:complexType>
         <xs:sequence>
           <xs:any namespace='urn:ietf:params:xml:ns:xmpp-stanzas'
                   maxOccurs='1'/>
           <text   namespace='urn:ietf:params:xml:ns:xmpp-stanzas'
                   minOccurs='0'
                   maxOccurs='1'/>
           <xs:any
               namespace='##other'
               minOccurs='0'
               maxOccurs='1'/>
         </xs:sequence>
         <xs:attribute name='type' use='required'/>
           <xs:simpleType>
             <xs:restriction base='xs:NCName'>
               <xs:enumeration value='cancel'/>
               <xs:enumeration value='continue'/>
               <xs:enumeration value='modify'/>
               <xs:enumeration value='auth'/>
               <xs:enumeration value='wait'/>
             </xs:restriction>
           </xs:simpleType>
         </xs:attribute>
       </xs:complexType>
     </xs:element>

   </xs:schema>


B.3 session

   <?xml version='1.0' encoding='UTF-8'?>
   <xs:schema
       xmlns:xs='http://www.w3.org/2001/XMLSchema'
       targetNamespace='urn:ietf:params:xml:ns:xmpp-session'
       xmlns='urn:ietf:params:xml:ns:xmpp-session'
       elementFormDefault='qualified'>

     <xs:element name='session' type='empty'/>




Saint-Andre & Miller     Expires April 25, 2004                [Page 97]

Internet-Draft           XMPP Instant Messaging             October 2003


     <xs:simpleType name='empty'>
       <xs:restriction base='xs:string'>
         <xs:enumeration value=''/>
       </xs:restriction>
     </xs:simpleType>

   </xs:schema>


B.4 jabber:iq:privacy

   <?xml version='1.0' encoding='UTF-8'?>
   <xs:schema
       xmlns:xs='http://www.w3.org/2001/XMLSchema'
       targetNamespace='jabber:iq:privacy'
       xmlns='jabber:iq:privacy'
       elementFormDefault='qualified'>

     <xs:element name='query'>
       <xs:complexType>
         <xs:sequence>
           <xs:element ref='active'
                       minOccurs='0'
                       maxOccurs='1'/>
           <xs:element ref='default'
                       minOccurs='0'
                       maxOccurs='1'/>
           <xs:element ref='list'
                       minOccurs='0'
                       maxOccurs='unbounded'/>
         </xs:sequence>
       </xs:complexType>
     </xs:element>

     <xs:element name='active'>
       <xs:complexType>
         <xs:attribute name='name'
                       type='xs:string'
                       use='optional'/>
       </xs:complexType>
     </xs:element>

     <xs:element name='default'>
       <xs:complexType>
         <xs:attribute name='name'
                       type='xs:string'
                       use='optional'/>
       </xs:complexType>



Saint-Andre & Miller     Expires April 25, 2004                [Page 98]

Internet-Draft           XMPP Instant Messaging             October 2003


     </xs:element>

     <xs:element name='list'>
       <xs:complexType>
         <xs:sequence>
           <xs:element ref='item'
                       minOccurs='0'
                       maxOccurs='unbounded'/>
         </xs:sequence>
         <xs:attribute name='name'
                       type='xs:string'
                       use='required'/>
       </xs:complexType>
     </xs:element>

     <xs:element name='item'>
       <xs:complexType>
         <xs:sequence>
           <xs:element ref='iq'
                       minOccurs='0'
                       maxOccurs='1'/>
           <xs:element ref='message'
                       minOccurs='0'
                       maxOccurs='1'/>
           <xs:element ref='presence-in'
                       minOccurs='0'
                       maxOccurs='1'/>
           <xs:element ref='presence-out'
                       minOccurs='0'
                       maxOccurs='1'/>
         </xs:sequence>
         <xs:attribute name='order'
                       type='xs:unsignedInt'
                       use='required'/>
         <xs:attribute name='value'
                       type='xs:string'
                       use='optional'/>
         <xs:attribute name='action' use='required'>
           <xs:simpleType>
             <xs:restriction base='xs:NCName'>
               <xs:enumeration value='allow'/>
               <xs:enumeration value='deny'/>
             </xs:restriction>
           </xs:simpleType>
         </xs:attribute>
         <xs:attribute name='type' use='optional'>
           <xs:simpleType>
             <xs:restriction base='xs:NCName'>



Saint-Andre & Miller     Expires April 25, 2004                [Page 99]

Internet-Draft           XMPP Instant Messaging             October 2003


               <xs:enumeration value='group'/>
               <xs:enumeration value='jid'/>
               <xs:enumeration value='subscription'/>
             </xs:restriction>
           </xs:simpleType>
         </xs:attribute>
       </xs:complexType>
     </xs:element>

     <xs:element name='iq' type='empty'/>
     <xs:element name='message' type='empty'/>
     <xs:element name='presence-in' type='empty'/>
     <xs:element name='presence-out' type='empty'/>

     <xs:simpleType name='empty'>
       <xs:restriction base='xs:string'>
         <xs:enumeration value=''/>
       </xs:restriction>
     </xs:simpleType>

   </xs:schema>


B.5 jabber:iq:roster

   <?xml version='1.0' encoding='UTF-8'?>
   <xs:schema
       xmlns:xs='http://www.w3.org/2001/XMLSchema'
       targetNamespace='jabber:iq:roster'
       xmlns='jabber:iq:roster'
       elementFormDefault='qualified'>

     <xs:element name='query'>
       <xs:complexType>
         <xs:sequence>
           <xs:element ref='item'
                       minOccurs='0'
                       maxOccurs='unbounded'/>
         </xs:sequence>
       </xs:complexType>
     </xs:element>

     <xs:element name='item'>
       <xs:complexType>
         <xs:sequence>
           <xs:element ref='group'
                       minOccurs='0'
                       maxOccurs='unbounded'/>



Saint-Andre & Miller     Expires April 25, 2004               [Page 100]

Internet-Draft           XMPP Instant Messaging             October 2003


         </xs:sequence>
         <xs:attribute name='jid' type='xs:string' use='required'/>
         <xs:attribute name='name' type='xs:string' use='optional'/>
         <xs:attribute name='subscription' use='optional'>
           <xs:simpleType>
             <xs:restriction base='xs:NCNAME'>
               <xs:enumeration value='to'/>
               <xs:enumeration value='from'/>
               <xs:enumeration value='both'/>
               <xs:enumeration value='none'/>
               <xs:enumeration value='remove'/>
             </xs:restriction>
           </xs:simpleType>
         </xs:attribute>
         <xs:attribute name='ask' use='optional'>
           <xs:simpleType>
             <xs:restriction base='xs:NCNAME'>
               <xs:enumeration value='subscribe'/>
             </xs:restriction>
           </xs:simpleType>
         </xs:attribute>
       </xs:complexType>
     </xs:element>

     <xs:element name='group' type='xs:string'/>

   </xs:schema>


Appendix C. Differences Between Jabber Instant Messaging and XMPP

   This section is non-normative.

   XMPP has been adapted from the protocols originally developed in the
   Jabber open-source community, which can be thought of as "XMPP 0.9".
   Because there exists a large installed base of Jabber implementations
   and deployments, it may be helpful to specify the key differences
   between Jabber and XMPP in order to expedite and encourage upgrades
   of those implementations and deployments to XMPP. This section
   summarizes the differences that relate specifically to instant
   messaging and presence applications, while the corresponding section
   of XMPP Core [1] summarizes the differences that relate to all XMPP
   applications.

C.1 Session Creation

   The client-to-server authentication protocol developed in the Jabber
   community assumes that every client is an IM client and therefore



Saint-Andre & Miller     Expires April 25, 2004               [Page 101]

Internet-Draft           XMPP Instant Messaging             October 2003


   initiates an IM session upon successful authentication and resource
   binding, which are performed simultaneously (documention of this
   protocol is contained in "JEP-0078: Non-SASL Authentication",
   published by the Jabber Software Foundation [7]). XMPP maintains a
   stricter separation between core functionality and IM functionality;
   therefore, an IM session is not created until the client specifically
   requests one using the protocol defined under Session Establishment
   (Section 3).

C.2 Privacy Rules

   The Jabber community began to define a protocol for communications
   blocking (privacy rules) in late 2001, but that effort was deprecated
   once the XMPP Working Group was formed. Therefore the protocol
   defined under Blocking Communication (Section 10) is the only such
   protocol defined for use in the Jabber community.

Appendix D. Revision History

   Note to RFC Editor: please remove this entire appendix, and the
   corresponding entries in the table of contents, prior to publication.

D.1 Changes from draft-ietf-xmpp-im-17

   o  Added missing server handling rules for <user@domain/resource>
      cases.

   o  Further clarified privacy rules syntax by describing child
      elements of <item/>.

   o  Clarified several points related to session establishment.

   o  Checked all references.

   o  Completed a thorough proofreading and consistency check of the
      entire text.


D.2 Changes from draft-ietf-xmpp-im-16

   o  Added sentence to make explicit that blocking all communication
      includes subscription-related presence stanzas.

   o  Added clause to make explicit that privacy rules must be applied
      before handling of subscription-related presence stanzas and
      corresponding generation of roster pushes.

   o  Added syntax and semantics section for the 'jabber:iq:roster'



Saint-Andre & Miller     Expires April 25, 2004               [Page 102]

Internet-Draft           XMPP Instant Messaging             October 2003


      namespace.

   o  Removed content about 'jabber:iq:last' namespace.

   o  Added several internal references from the security considerations
      section to other sections of this document.

   o  Moved most delivery handling rules from XMPP IM to XMPP Core.

   o  Moved detailed stanza syntax descriptions from XMPP Core to XMPP
      IM.

   o  Moved stanza schemas from XMPP Core to XMPP IM.


D.3 Changes from draft-ietf-xmpp-im-15

   o  Specified stream error to be sent to active session if there is a
      conflict regarding session creation.

   o  Fixed several more typographical errors in the privacy rules
      examples.

   o  Corrected an error regarding server handling of IQ stanzas sent to
      bare JIDs.

   o  Added section on compliance requirements for instant messaging
      server and client implementations.

   o  Added non-normative section on differences between Jabber usage
      and XMPP specifications.


D.4 Changes from draft-ietf-xmpp-im-14

   o  Added subscription state charts.

   o  Fixed several typographical errors in the privacy rules examples.

   o  Changed datatype of 'order' attribute in privacy rules from
      nonNegativeInteger to unsignedInt.


D.5 Changes from draft-ietf-xmpp-im-13

   o  Made one small change to privacy list syntax rules.





Saint-Andre & Miller     Expires April 25, 2004               [Page 103]

Internet-Draft           XMPP Instant Messaging             October 2003


D.6 Changes from draft-ietf-xmpp-im-12

   o  Clarified meaning of the default message type as well as handling
      of unknown or unsupported types.

   o  Made several small editorial changes.


D.7 Changes from draft-ietf-xmpp-im-11

   o  Further clarified subscription syntax and semantics.

   o  Further clarified presence responsibilities for clients and
      servers.

   o  Added 'xml:lang' example to presence status.

   o  Added subsection on presence priority.

   o  Defined server handling of unsolicited presence stanzas of type
      "subscribed".

   o  Specified default resource priority if not provided.

   o  Corrected several errors in the schemas.

   o  Added privacy list business rule regarding roster changes.

   o  Removed the 'jabber:iq:privacy:error' namespace (not necessary).

   o  Documented message type='normal'.

   o  Made numerous small editorial changes throughout.


D.8 Changes from draft-ietf-xmpp-im-10

   o  Clarified presence responsibilities for servers and clients.

   o  Clarified the routing and delivery rules for servers.

   o  Made the 'xml:lang' examples more complete.

   o  Corrected several errors in the unsubscribe workflow.

   o  Made small editorial changes in several sections.





Saint-Andre & Miller     Expires April 25, 2004               [Page 104]

Internet-Draft           XMPP Instant Messaging             October 2003


D.9 Changes from draft-ietf-xmpp-im-09

   o  Clarified rules regarding allowable JID types in rosters.

   o  Further clarified the semantics and routing implications of
      presence priorities.

   o  Removed several obsolete subsections.


D.10 Changes from draft-ietf-xmpp-im-08

   o  Removed authorization content (now addressed in XMPP Core).

   o  Added protocol for initiating an IM session, including schema and
      IANA registration template.

   o  Corrected <*-condition/> elements to be <condition/>.

   o  Made small editorial changes to address RFC Editor requirements.


D.11 Changes from draft-ietf-xmpp-im-07

   o  Added several error cases for resource authorization and updated
      relevant schema.


D.12 Changes from draft-ietf-xmpp-im-06

   o  Specified that IQ result stanzas are required in response to
      roster pushes.

   o  Changed stanza error namespace names to conform to the format
      defined in "The IETF XML Registry" as specified in XMPP Core.

   o  Removed note to RFC Editor regarding provisional namespace names.


D.13 Changes from draft-ietf-xmpp-im-05

   o  Removed use of ask='unsubscribe' per list discussion.

   o  Clarified handling of resource conflict during authorization.

   o  Added schemas for jabber:iq:auth, jabber:iq:auth:error, and
      jabber:iq:privacy:error.




Saint-Andre & Miller     Expires April 25, 2004               [Page 105]

Internet-Draft           XMPP Instant Messaging             October 2003


   o  Corrected several small protocol errors in the examples.

   o  Clarified semantics of message types.


D.14 Changes from draft-ietf-xmpp-im-04

   o  Specified sending of unavailable presence after unsubscribe and
      subscription-cancellation actions.

   o  Further specified syntax and business rules for privacy lists.

   o  Brought error codes into line with definitions in
      draft-ietf-xmpp-core.

   o  Added note to RFC Editor regarding provisional namespace names.

   o  Removed vCard content and DTD, instead pointing to JSF
      documentation.


D.15 Changes from draft-ietf-xmpp-im-03

   o  Fixed order processing on privacy rules per list discussion.

   o  Made numerous small editorial changes.


D.16 Changes from draft-ietf-xmpp-im-02

   o  Added a great deal more detail to the narrative regarding
      server-side privacy rules as well as the interaction between
      rosters and subscriptions.

   o  Removed DTDs in favor of schemas (with the exception of vCard
      XML).

   o  Removed non-normative documentation of authentication using
      jabber:iq:auth and of in-band registration using
      jabber:iq:register, since these are maintained by the Jabber
      Software Foundation and are not part of the XMPP specification.


D.17 Changes from draft-ietf-xmpp-im-01

   o  Made numerous small editorial changes.





Saint-Andre & Miller     Expires April 25, 2004               [Page 106]

Internet-Draft           XMPP Instant Messaging             October 2003


D.18 Changes from draft-ietf-xmpp-im-00

   o  Moved registration and authentication via jabber:iq:auth to
      non-normative appendices.

   o  Changed initial presence stanza from MUST be empty to SHOULD be
      empty.

   o  Specified that user or clients should not send presence stanzas of
      type='probe'.

   o  Specified the algorithm for digest passwords.


D.19 Changes from draft-miller-xmpp-im-02

   o  Added information about the 'jabber:iq:last' protocol to meet the
      requirement defined in section 3.2.4 of RFC 2779.

   o  Added information about the 'jabber:iq:privacy' protocol to meet
      the requirement defined in section 2.3.5 of RFC 2779.

   o  Added information about the vCard XML protocol to meet the
      requirement defined in sections 3.1.3 and 4.1.4 of RFC 2779.

   o  Changed the material describing authentication (but not resource
      authorization) with 'jabber:iq:auth' to non-normative.

   o  Noted that the only watchers are subscribers.

   o  Nomenclature changes: (1) from "chunks" to "stanzas"; (2) from
      "host" to "server"; (3) from "node" to "client" or "user" (as
      appropriate).


















Saint-Andre & Miller     Expires April 25, 2004               [Page 107]

Internet-Draft           XMPP Instant Messaging             October 2003


Intellectual Property Statement

   The IETF takes no position regarding the validity or scope of any
   intellectual property or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; neither does it represent that it
   has made any effort to identify any such rights. Information on the
   IETF's procedures with respect to rights in standards-track and
   standards-related documentation can be found in BCP-11. Copies of
   claims of rights made available for publication and any assurances of
   licenses to be made available, or the result of an attempt made to
   obtain a general license or permission for the use of such
   proprietary rights by implementors or users of this specification can
   be obtained from the IETF Secretariat.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights which may cover technology that may be required to practice
   this standard. Please address the information to the IETF Executive
   Director.


Full Copyright Statement

   Copyright (C) The Internet Society (2003). All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works. However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assignees.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION



Saint-Andre & Miller     Expires April 25, 2004               [Page 108]

Internet-Draft           XMPP Instant Messaging             October 2003


   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Acknowledgment

   Funding for the RFC Editor function is currently provided by the
   Internet Society.











































Saint-Andre & Miller     Expires April 25, 2004               [Page 109]

