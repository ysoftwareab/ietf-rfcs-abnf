xmlns="http://purl.org/atom/ns#draft-ietf-atompub-format-05">
     <head>
       <title>Example Feed</title>
       <link href="http://example.org/"/>
       <updated>2003-12-13T18:30:02Z</updated>
       <author>
         <name>John Doe</name>
       </author>
     </head>
     <entry>
       <title>Atom-Powered Robots Run Amok</title>
       <link href="http://example.org/2003/12/13/atom03"/>
       <id>vemmi://example.org/2003/32397</id>
       <updated>2003-12-13T18:30:02Z</updated>
     </entry>
start = atomFeed | atomEntry

atomCommonAttributes =
      attribute xml:base { atomUri }?,
      attribute xml:lang { atomLanguageTag }?

atomPlainTextConstruct =
      atomCommonAttributes,
      attribute type { "TEXT" | "HTML" }?,
      text

atomXHTMLTextConstruct =
      atomCommonAttributes,
      attribute type { "XHTML" },
      (text|anyElement)*

atomTextConstruct = atomPlainTextConstruct | atomXHTMLTextConstruct

atomPersonConstruct =
      atomCommonAttributes,
      (element atom:name { text }
       & element atom:uri { atomUri }?
       & element atom:email { atomEmailAddress }?)


atomDateConstruct =
      atomCommonAttributes,
      xsd:dateTime


atomServiceConstruct =
      atomCommonAttributes,
      attribute href { atomUri }


atomIdentityConstruct =
      atomCommonAttributes,
      (atomUri)


atomFeed =
      element atom:feed {
         atomCommonAttributes,
         atomVersionAttribute,
         (atomHead
          & atomEntry*
          & anyElement*)
      }


atomVersionAttribute =
    attribute version {"draft-ietf-atompub-format-05 : do not deploy"}


atomHead =
         element atom:head {
         atomCommonAttributes,
         (atomTitle
          & atomUpdated
          & atomLink+
          & atomId?
          & atomAuthor?
          & atomContributor*
          & atomTagline?
          & atomGenerator?
          & atomInfo?
          & atomCopyright?
          & atomCategory*
          & atomIntrospection?
          & atomPost?
          & anyElement*)
      }

type="alternate" resolves to an HTML document, then that document
atomEntry =
         element atom:entry {
         atomCommonAttributes,
         atomVersionAttribute?,
         (atomTitle
          & atomId
          & atomLink*
          & atomUpdated
          & atomPublished?
          & atomAuthor?
          & atomContributor*
          & atomHost?
          & atomCopyright?
          & atomCategory*
          & atomEdit?
          & atomSummary?
          & atomContent?
          & atomHead?
          & anyElement*)
      }

atomTitle = element atom:title { atomTextConstruct }


atomId = element atom:id { atomIdentityConstruct }


atomLink = element atom:link {
      atomCommonAttributes,
      attribute href { atomUri },
      attribute rel { atomNCName | atomUri }?,
      attribute type { atomMediaType }?,
      attribute hreflang { atomLanguageTag }?,
      attribute title { text }?,
      attribute length { text }?,
      empty
rel_attribute = segment-nz-nc / URI

atomUpdated = element atom:updated { atomDateConstruct }


atomAuthor = element atom:author { atomPersonConstruct }


atomContributor = element atom:contributor { atomPersonConstruct }


atomCategory = element atom:category {
      atomCommonAttributes,
      attribute term { text },
      attribute scheme { atomUri }?,
      attribute label { text }?,
      empty
atomSummary = element atom:summary { atomTextConstruct }
atomInlineTextContent =
      element atom:content {
         atomCommonAttributes,
         attribute type { "TEXT" | "HTML" | atomMediaType }?,
         (text)*
      }

atomInlineXHTMLContent =
      element atom:content {
         atomCommonAttributes,
         attribute type { "XHTML" | atomMediaType }?,
         (text|anyElement)*
      }

atomOutOfLineContent =
      element atom:content {
         atomCommonAttributes,
         attribute type { "TEXT" | "HTML" | "XHTML" | atomMediaType }?,
         attribute src { atomUri },
         empty
      }

atomContent = atomInlineTextContent
    | atomInlineXHTMLContent
    | atomOutOfLineContent


atomIntrospection =
             element atom:introspection { atomServiceConstruct }


atomPost = element atom:post { atomServiceConstruct }


atomEdit = element atom:edit { atomServiceConstruct }


atomTagline = element atom:tagline { atomTextConstruct }


atomGenerator = element atom:generator {
      atomCommonAttributes,
      attribute url { atomUri }?,
      attribute version { text }?,
      text
atomInfo = element atom:info { atomTextConstruct }
start = atomFeed | atomEntry

atomCommonAttributes =
      attribute xml:base { atomUri }?,
      attribute xml:lang { atomLanguageTag }?

atomVersionAttribute =
    attribute version {"draft-ietf-atompub-format-05 : do not deploy"}

atomPlainTextConstruct =
      atomCommonAttributes,
      attribute type { "TEXT" | "HTML" }?,
      text

atomXHTMLTextConstruct =
      atomCommonAttributes,
      attribute type { "XHTML" },
      (text|anyElement)*

atomTextConstruct = atomPlainTextConstruct | atomXHTMLTextConstruct

atomPersonConstruct =
      atomCommonAttributes,
      (element atom:name { text }
       & element atom:uri { atomUri }?
       & element atom:email { atomEmailAddress }?)

atomDateConstruct =
      atomCommonAttributes,
      xsd:dateTime

atomServiceConstruct =
      atomCommonAttributes,
      attribute href { atomUri }

atomIdentityConstruct =
      atomCommonAttributes,
      (atomUri)


atomFeed =
      element atom:feed {
         atomCommonAttributes,
         atomVersionAttribute,
         (atomHead
          & atomEntry*
          & anyElement*)
      }

atomHead =
      [
         s:rule [
context = "atom:head"
test = "atom:link[@rel='alternate']"
context = "atom:head"
test = "atom:author or not(../atom:entry[count(atom:author) = 0])"
atomEntry =
      [
         s:rule [
context = "/atom:entry"
test = "@version"
context = "atom:entry"
test = "atom:link[@rel='alternate']"
context = "atom:entry"
test = "atom:author or ../atom:author"
atomTitle = element atom:title { atomTextConstruct }

atomId = element atom:id { atomIdentityConstruct }

atomLink = element atom:link {
      atomCommonAttributes,
      attribute href { atomUri },
      attribute rel { atomNCName | atomUri }?,
      attribute type { atomMediaType }?,
      attribute hreflang { atomLanguageTag }?,
      attribute title { text }?,
      attribute length { text }?,
      empty
atomUpdated = element atom:updated { atomDateConstruct }

atomPublished = element atom:published { atomDateConstruct }

atomAuthor = element atom:author { atomPersonConstruct }

atomContributor = element atom:contributor { atomPersonConstruct }

atomHost = element atom:host { text }

atomCopyright = element atom:copyright { atomTextConstruct }

atomCategory = element atom:category {
      atomCommonAttributes,
      attribute term { text },
      attribute scheme { atomUri }?,
      attribute label { text }?,
      empty
atomSummary = element atom:summary { atomTextConstruct }

atomInlineTextContent =
      element atom:content {
         atomCommonAttributes,
         attribute type { "TEXT" | "HTML" | atomMediaType }?,
         (text)*
      }

atomInlineXHTMLContent =
      element atom:content {
         atomCommonAttributes,
         attribute type { "XHTML" | atomMediaType }?,
         (text|anyElement)*
      }
atomOutOfLineContent =
      element atom:content {
         atomCommonAttributes,
         attribute type { "TEXT" | "HTML" | "XHTML" | atomMediaType }?,
         attribute src { atomUri },
         empty
      }

atomContent = atomInlineTextContent
    | atomInlineXHTMLContent
    | atomOutOfLineContent


atomIntrospection =
             element atom:introspection { atomServiceConstruct }

atomPost = element atom:post { atomServiceConstruct }


atomEdit = element atom:edit { atomServiceConstruct }


atomTagline = element atom:tagline { atomTextConstruct }


atomGenerator = element atom:generator {
      atomCommonAttributes,
      attribute url { atomUri }?,
      attribute version { text }?,
      text
atomInfo = element atom:info { atomTextConstruct }
atomNCName = xsd:string { minLength = "1" pattern = "[^:]*" }
atomMediaType = text
atomLanguageTag = text
atomUri = text
atomEmailAddress = text

anyForeignElement =
      element * - (atom:* | local:*)
      {
         (attribute * { text }
          | text
          | anyForeignElement)*
      }

anyForeignAttribute =
      attribute * - (atom:* | local:* | xml:*) { text }

anyElement =
      element * - atom:*
      {
         (attribute * { text }
          | text
          | anyElement)*
      }

