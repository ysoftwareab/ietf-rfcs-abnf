idx = Integer key
key = idx
p = @parts.reduce(context) do |o,p|
n = o[(o.is_a?(Array) ? p.to_i : p)]
key = JsonTools.fix_key(p,@last)
parent = parent context
parent = parent context
p = parent context
PATCH_OPERATIONS = {}

ops = JSON.load(ops)
op = operation['op']
ic = op.slice!(-1) if op[-1] == '-'
PO = PATCH_OPERATIONS[op.to_sym]
ptr = Pointer.new params['path']
obj = ptr[target]
ptr = Pointer.new params['path']
obj  = ptr[target]
from = Pointer.new params['from']
to = Pointer.new params['path']
obj = from[target]
val = obj[JsonTools.fix_key(obj,from.last)]
ptr = Pointer.new params['path']
obj = ptr[target]
ptr = Pointer.new(params['path'])
obj = ptr[target]
val = obj[JsonTools.fix_key(obj,ptr.last)]
ptr = Pointer.new params['path']
val = ptr.value target
ignore_case = params['ignore_case']
test_val = params['value']
ptr = Pointer.new params['path']
val = ptr.value target
test_val = params['value']
ptr = Pointer.new params['path']
ptr = Pointer.new params['path']
val = ptr.value target
ignore_case = params['ignore_case']
test_val = params['value']
regex = ignore_case ?
           Regexp.new(test_val, Regexp::IGNORECASE) :
           Regexp.new(test_val)
ptr = Pointer.new params['path']
test_val = params['value']
test_val == 'undefined'
val = ptr.value target
Numeric === val
String === val
TrueClass === val || FalseClass === val
Hash === val
Array === val
NilClass === val
ptr = Pointer.new params['path']
preds = params['apply']
op = pred['op']
ic = op.slice! -1 if op[-1] == '-'
preds = params['apply']
op = pred['op']
ic = op.slice! -1 if op[-1] == '-'
preds = params['apply']
op = pred['op']
ic = op.slice! -1 if op[-1] == '-'
PREDICATES = {}
my_hash = JSON.parse %Q/
     {
       "a": {
         "b": {
           "c": "123!ABC"
         }
       }
     }
my_patch = JSON.parse %Q!
     [
       {
         "op": "contains",
         "path": "/a/b/c",
         "value": "ABC"
       },
       {
         "op": "replace",
         "path": "/a/b/c",
         "value": 123
       }
     ]
patch = Patch.new_with_predicates my_patch

new_hash = patch.apply_to my_hash

