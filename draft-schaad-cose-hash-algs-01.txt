



Network Working Group                                          J. Schaad
Internet-Draft                                            August Cellars
Intended status: Informational                          25 February 2019
Expires: 29 August 2019


       CBOR Object Signing and Encryption (COSE): Hash Algorithms
                     draft-schaad-cose-hash-algs-01

Abstract

   The CBOR Object Signing and Encryption (COSE) syntax
   [I-D.ietf-cose-rfc8152bis-struct] does not define any direct methods
   for using hash algorithms.  There are however circumstances where
   hash algorithms are used: Indirect signatures where the hash of one
   or more contents are signed.  X.509 certificate or other object
   identification by the use of a thumbprint.  This document defines a
   set of hash algorithms that are identified by COSE Algorithm
   Identifiers.

Contributing to this document

   The source for this draft is being maintained in GitHub.  Suggested
   changes should be submitted as pull requests at TBD.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 29 August 2019.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction
       1.1.  Requirements Terminology
       1.2.  Open Issues
   2.  Hash Algorithm Identifiers
       2.1.  SHA-2 Hash Algorithms
   3.  IANA Considerations
       3.1.  COSE Algorithm Registry
   4.  Security Considerations
   5.  Normative References
   6.  Informative References
   Author's Address

1.  Introduction

   The CBOR Object Signing and Encryption (COSE) syntax does not define
   any direct methods for the use of hash algorithms.  It also does not
   define a structure syntax that is used to encode a digested object
   structure along the lines of the DigestedData ASN.1 structure in
   [CMS].  This omission was intentional as a structure consisting of
   jut a digest identifier, the content, and a digest value does not by
   itself provide any strong security service.  Additional, an
   application is going to be better off defining this type of structure
   so that it can add any additional data that needs to be hashed as
   well as methods of obtaining the data.

   While the above is true, there are some cases where having some
   standard hash algorithms defined for COSE with a common identifier
   makes a great deal of sense.  Two of the cases where these are going
   to be used are:

   *  Indirect signing of content, and

   *  Object identification.

   Indirect signing of content is a paradigm where the content is not
   directly signed, but instead a hash of the content is computed and
   that hash value, along with the hash algorithm, is included in the
   content that will be signed.  Doing indirect signing allows for the a
   signature to be validated without first downloading all of the
   content associated with the signature.  This capability can be of
   even grater importance in a constrained environment as not all of the
   content signed may be needed by the device.

   The use of hashes to identify objects is something that has been very
   common.  One of the primary things that has been identified by a hash
   function for secure message is a certificate.  Two examples of this
   can be found in [ESS] and the newly defined COSE equivalents in
   [I-D.ietf-cose-x509].

1.1.  Requirements Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

1.2.  Open Issues

   *  Are there additional SHA-2 formulations that need to be added or
      should some of the ones in this document be removed?

   *  Should additional hash algorithms be added to the document?

   *  Review the Recommended column in all of the tables to make sure
      that the values are correct.

   *  Are there recommendations that should be provided on what range of
      identifiers should be used for these algorithms?  Inputs would
      include the expected frequency of use for each algorithm.

2.  Hash Algorithm Identifiers

2.1.  SHA-2 Hash Algorithms

   The family of SHA-2 hash algorithms [FIPS-180-4] was designed by the
   United States National Security Agency and published in 2001.  Since
   that time some additional algorithms have been added to the original
   set to deal with length extension attacks and some performance
   issues.  While the SHA-3 hash algorithms has been published since
   that time, the SHA-2 algorithms are still broadly used.

   There are a number of different parameters for the SHA-2 hash
   functions.  The set of hash functions which have been chosen for
   inclusion in this document are based on those different parameters
   and some of the trade-offs involved.

   *  *SHA-256/64* provides a truncated hash.  The length of the
      truncation is designed to allow for smaller transmission size.
      The trade-off is that the odds that a collision will occur
      increase proportionally.  Locations that use this hash function
      need either to analysis the potential problems with having a
      collision occur, or where the only function of the hash is to
      narrow the possible choices.

      The latter is the case for [I-D.ietf-cose-x509], the hash value is
      used to select possible certificates and, if there are multiple
      choices then, each choice can be tested by using the public key.

   *  *SHA-256* is probably the most common hash function used
      currently.  SHA-256 is the most efficient hash algorithm for
      32-bit hardware.

   *  *SHA-384* and *SHA-512* hash functions are more efficient when run
      on 64-bit hardware.

   *  *SHA-512/256* provides a hash function that runs more efficiently
      on 64-bit hardware, but offers the same security levels as SHA-
      256.

    +-------------+-------+----------------+-----------+-------------+
    | Name        | Value | Description    | Reference | Recommended |
    +=============+=======+================+===========+=============+
    | SHA-256/64  | TBD1  | SHA-2 256-bit  | [This     | No          |
    |             |       | Hash truncated | Document] |             |
    |             |       | to 64-bits     |           |             |
    +-------------+-------+----------------+-----------+-------------+
    | SHA-256     | TBD2  | SHA-2 256-bit  | [This     | Yes         |
    |             |       | Hash           | Document] |             |
    +-------------+-------+----------------+-----------+-------------+
    | SHA-384     | TBD3  | SHA-2 384-bit  | [This     | Yes         |
    |             |       | Hash           | Document] |             |
    +-------------+-------+----------------+-----------+-------------+
    | SHA-512     | TBD4  | SHA-2 512-bit  | [This     | Yes         |
    |             |       | Hash           | Document] |             |
    +-------------+-------+----------------+-----------+-------------+
    | SHA-512/256 | TBD5  | SHA-2 512-bit  | [This     | Yes         |
    |             |       | Hash truncated | Document] |             |
    |             |       | to 256-bits    |           |             |
    +-------------+-------+----------------+-----------+-------------+

                      Table 1: SHA-2 Hash Functions

3.  IANA Considerations

3.1.  COSE Algorithm Registry

   IANA is requested to register the following algorithms in the "COSE
   Algorithms" registry.

   *  The set of SHA-2 hash functions found in Table 1.

4.  Security Considerations

   There are security considerations:

5.  Normative References

   [FIPS-180-4]
              National Institute of Standards and Technology, "Secure
              Hash Standard", FIPS PUB 180-4, August 2015.

   [I-D.ietf-cose-rfc8152bis-struct]
              Schaad, J., "CBOR Object Signing and Encryption (COSE) -
              Structures and Process", draft-ietf-cose-rfc8152bis-
              struct-01 (work in progress), 14 February 2019,
              <https://www.ietf.org/archive/id/draft-ietf-cose-
              rfc8152bis-struct-01>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

6.  Informative References

   [CMS]      Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
              RFC 5652, DOI 10.17487/RFC5652, September 2009,
              <https://www.rfc-editor.org/info/rfc5652>.

   [ESS]      Hoffman, P., Ed., "Enhanced Security Services for S/MIME",
              RFC 2634, DOI 10.17487/RFC2634, June 1999,
              <https://www.rfc-editor.org/info/rfc2634>.

   [I-D.ietf-cose-x509]
              Schaad, J., "CBOR Object Signing and Encryption (COSE):
              Headers for carrying and referencing X.509 certificates",
              draft-ietf-cose-x509-00 (work in progress), 29 January
              2019,
              <https://www.ietf.org/archive/id/draft-ietf-cose-x509-00>.

Author's Address

   Jim Schaad
   August Cellars

   Email: ietf@augustcellars.com
