send_rate = (((int)(Value_mantissa * 4096.0 / 10.0 + 0.5)) << 4) |
send_rate = (((int)((3.2 * 4096.0 / 10.0) + 0.5)) << 4) | 4;

          = (0x51f << 4) | 0x4

          = 0x51f4

value = (send_rate >> 4) * 10.0 / 4096.0 *
        power(10.0, (send_rate & x000f))
   Note the maximum transmission rate that can be represented by this
   scheme is approximately 9.99e+15 bytes per second.

   When this extension is present, a "cc_node_list" may be attached as
   the payload of the NORM_CMD(CC) message.  The presence of this header
   extension also implies that NORM receivers should respond according
   to the procedures described in Section 5.5.2.  The "cc_node_list"
   consists of a list of NormNodeIds and their associated congestion
   control status.  This includes the current limiting receiver (CLR)
   node, any potential limiting receiver (PLR) nodes that have been
   identified, and some number of receivers for which congestion control
   status is being provided, most notably including the receivers'
   current RTT measurement.  The maximum length of the "cc_node_list"
   provides for at least the CLR and one other receiver, but may be
   configurable for more timely feedback to the group.  The list length
   can be inferred from the length of the NORM_CMD(CC) message.

   Each item in the "cc_node_list" is in the following format:

      0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          cc_node_id                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    cc_flags   |     cc_rtt    |            cc_rate            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

              Congestion Control Node List Item Format

   The "cc_node_id" is the NormNodeId of the receiver which the item
   represents.

   The "cc_flags" field contains flags indicating the congestion control
   status of the indicated receiver.  The following flags are defined:
NORM_REPAIR_ADV_FLAG_LIMIT = 0x01

B_max = Maximum source block length (i.e., maximum number of source
           symbols per source block)

L_sym = Encoding symbol length in bytes (i.e., NormSegmentSize)

L_obj = Object length in bytes

N_total = The total number of source blocks into which the transport
             object is partitioned.

N_large = Number of larger source blocks (first set of blocks)

B_large = Size (in encoding symbols) of the larger source blocks

N_small = Number of smaller source blocks (second set of blocks)

B_small = Size (in encoding symbols) of the smaller source blocks

L_final = Length (in bytes) of the last source symbol of the last
             source block (All other symbols are of length L_sym).

B_large = B_ave [rounded up to the nearest integer] (Note it will
B_small = B_ave [rounded down to the nearest integer] (Note if
L_final = L_obj - (N_large*B_large + N_small*B_small - 1) * L_sym

T_backoff = RandomBackoff(Ksender*GRTTsender, GSIZEsender)

T_rcvrHoldoff =(Ksender+2)*GRTTsender

T_sndrAggregate = (Ksender+1)*GRTT

T_sndrHoldoff = (1*GRTT)

Rsender = --------------------------------------------------------------
          tRTT * (sqrt((2/3)*p) + 12 * sqrt((3/8)*p) * p *
          (1 + 32*(p^2)))

S = Nominal transmitted packet size. (In NORM, the "nominal"
       packet size can be determined by the sender as an
       exponentially weighted moving average (EWMA) of transmitted
       packet sizes to account for variable message sizes).

tRTT = The RTT estimate of the current "current limiting receiver"
       (CLR).

p = The loss event fraction of the CLR.

T_backoff = RandomBackoff(K*GRTTsender, GSIZEsender)

K = 6 for SSM operation.  A receiver SHALL cancel the backoff timeout
T_ccHoldoff = (K*GRTT)

RTT_rcvr = 0.5 * RTT_rcvrPrev + 0.5 * RTT_rcvrNew

RTT_clr = 0.9 * RTT_clr + 0.1 * RTT_clrNew

Rinitial = MIN(NormSegmentSize / GRTT, NormSegmentSize) bytes/second.

Rnew = Rrecv_min

Age = Seq_sender - Seq_clr;
Rsender = Rsender * 0.5;

