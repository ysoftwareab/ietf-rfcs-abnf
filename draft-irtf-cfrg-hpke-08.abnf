labeled_ikm = concat("HPKE-v1", suite_id, label, ikm)
labeled_info = concat(I2OSP(L, 2), "HPKE-v1", suite_id,
                           label, info)
eae_prk = LabeledExtract("", "eae_prk", dh)
shared_secret = LabeledExpand(eae_prk, "shared_secret",
                                   kem_context, Nsecret)
dh = DH(skE, pkR)
enc = SerializePublicKey(pkE)

pkRm = SerializePublicKey(pkR)
kem_context = concat(enc, pkRm)

shared_secret = ExtractAndExpand(dh, kem_context)
pkE = DeserializePublicKey(enc)
dh = DH(skR, pkE)

pkRm = SerializePublicKey(pk(skR))
kem_context = concat(enc, pkRm)

shared_secret = ExtractAndExpand(dh, kem_context)
dh = concat(DH(skE, pkR), DH(skS, pkR))
enc = SerializePublicKey(pkE)

pkRm = SerializePublicKey(pkR)
pkSm = SerializePublicKey(pk(skS))
kem_context = concat(enc, pkRm, pkSm)

shared_secret = ExtractAndExpand(dh, kem_context)
pkE = DeserializePublicKey(enc)
dh = concat(DH(skR, pkE), DH(skR, pkS))

pkRm = SerializePublicKey(pk(skR))
pkSm = SerializePublicKey(pkS)
kem_context = concat(enc, pkRm, pkSm)

shared_secret = ExtractAndExpand(dh, kem_context)
suite_id = concat("KEM", I2OSP(kem_id, 2))

suite_id = concat(
     "HPKE",
     I2OSP(kem_id, 2),
     I2OSP(kdf_id, 2),
     I2OSP(aead_id, 2)
default_psk = ""
default_psk_id = ""

got_psk = (psk != default_psk)
got_psk_id = (psk_id != default_psk_id)
psk_id_hash = LabeledExtract("", "psk_id_hash", psk_id)
info_hash = LabeledExtract("", "info_hash", info)
key_schedule_context = concat(mode, psk_id_hash, info_hash)

secret = LabeledExtract(shared_secret, "secret", psk)

key = LabeledExpand(secret, "key", key_schedule_context, Nk)
base_nonce = LabeledExpand(secret, "base_nonce",
                                key_schedule_context, Nn)
exporter_secret = LabeledExpand(secret, "exp",
                                     key_schedule_context, Nh)

shared_secret = Decap(enc, skR)
shared_secret = Decap(enc, skR)
shared_secret = AuthDecap(enc, skR, pkS)
shared_secret = AuthDecap(enc, skR, pkS)
ct = Seal(self.key, self.ComputeNonce(self.seq), aad, pt)
pt = Open(self.key, self.ComputeNonce(self.seq), aad, ct)
seq_bytes = I2OSP(seq, Nn)
ct = ctx.Seal(aad, pt)
ctx = Setup<MODE>R(enc, skR, info, ...)
ct = ctx.Seal(aad, pt)
ctx = SetupAuthPSKR(enc, skR, info, psk, psk_id, pkS)
exported = ctx.Export(exporter_context, L)
ctx = Setup<MODE>R(enc, skR, info, ...)
dkp_prk = LabeledExtract("", "dkp_prk", ikm)
sk = 0
counter = 0
bytes = LabeledExpand(dkp_prk, "candidate",
                             I2OSP(counter, 1), Nsk)
sk = OS2IP(bytes)
counter = counter + 1
dkp_prk = LabeledExtract("", "dkp_prk", ikm)
sk = LabeledExpand(dkp_prk, "sk", "", Nsk)
key = context.Export("response key", Nk)
nonce = context.Export("response nonce", Nn)

