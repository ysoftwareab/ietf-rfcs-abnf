

                                                               J. Arkko 
   Internet Draft                                              Ericsson 
   Document: draft-arkko-pppext-eap-aka-10.txt             H. Haverinen 
   Expires: December 2003                                         Nokia 
                                                              June 2003 
 
 
                          EAP AKA Authentication 
 
 
Status of this Memo 
 
   This document is an Internet-Draft and is subject to all provisions 
   of Section 10 of RFC2026. 
    
   Internet-Drafts are working documents of the Internet Engineering 
   Task Force (IETF), its areas, and its working groups.  Note that 
   other groups may also distribute working documents as Internet-
   Drafts. 
    
   Internet-Drafts are draft documents valid for a maximum of six 
   months and may be updated, replaced, or obsoleted by other documents 
   at any time.  It is inappropriate to use Internet-Drafts as 
   reference material or to cite them other than as "work in progress." 
    
   The list of current Internet-Drafts can be accessed at 
        http://www.ietf.org/ietf/1id-abstracts.txt 
   The list of Internet-Draft Shadow Directories can be accessed at 
        http://www.ietf.org/shadow.html. 
    
    
Abstract 
    
   This document specifies an Extensible Authentication Protocol (EAP) 
   mechanism for authentication and session key distribution using the 
   Universal Mobile Telecommunications System (UMTS) Authentication and 
   Key Agreement (AKA) mechanism. UMTS AKA is based on symmetric keys, 
   and runs typically in a UMTS Subscriber Identity Module, a smart 
   card like device.  
    
   EAP AKA includes optional identity privacy support and an optional 
   re-authentication procedure. 
 
 
Table of Contents 
    
   Status of this Memo................................................1 
   Abstract...........................................................1 
   1. Introduction and Motivation.....................................2 
   2. Terms and Conventions Used in This Document.....................4 
   3. Protocol Overview...............................................6 
   4. Identity Management............................................10 
   4.1. User Identity in EAP-Response/Identity.......................10 
     
   Arkko and Haverinen     Expires in six months             [Page 1] 


                        EAP AKA Authentication               June 2003 
    
   4.2. Obtaining Subscriber Identity via EAP AKA Messages...........12 
   4.3. Identity Privacy Support.....................................15 
   5. Re-authentication..............................................21 
   6. Message Format.................................................26 
   7. Message Authentication and Encryption..........................27 
   7.1. AT_MAC Attribute.............................................27 
   7.2. AT_CHECKCODE Attribute.......................................28 
   7.3. AT_IV, AT_ENCR_DATA and AT_PADDING Attributes................30 
   8. Messages.......................................................31 
   8.1. EAP-Request/AKA-Challenge....................................31 
   8.2. EAP-Response/AKA-Challenge...................................35 
   8.3. EAP-Response/AKA-Authentication-Reject.......................36 
   8.4. EAP-Response/AKA-Synchronization-Failure.....................37 
   8.5. EAP-Request/AKA-Identity.....................................38 
   8.6. EAP-Response/AKA-Identity....................................39 
   8.7. EAP-Request/AKA-Reauthentication.............................41 
   8.8. EAP-Response/AKA-Reauthentication............................43 
   8.9. EAP/AKA Notifications........................................46 
   9. Error Cases and the Usage of EAP-Failure and EAP-Success.......49 
   9.1. Processing Erroneous Packets.................................49 
   9.2. EAP-Failure..................................................49 
   9.3. EAP-Success..................................................50 
   10. Key Derivation................................................50 
   11. IANA and Protocol Numbering Considerations....................52 
   12. Security Considerations.......................................53 
   12.1. Identity Protection.........................................53 
   12.2. Mutual Authentication.......................................53 
   12.3. Key Derivation..............................................53 
   12.4. Brute-Force and Dictionary Attacks..........................53 
   12.5. Integrity Protection, Replay Protection and Confidentiality.54 
   12.6. Negotiation Attacks.........................................54 
   12.7. Fast Reconnect..............................................55 
   12.8. Acknowledged Result Indications.............................55 
   12.9. Man-in-the-middle Attacks...................................55 
   12.10. Generating Random Numbers..................................55 
   13. Security Claims...............................................55 
   14. Intellectual Property Right Notices...........................56 
   Acknowledgements and Contributions................................56 
   Authors' Addresses................................................56 
   Annex A. Pseudo-Random Number Generator...........................57 
 
1. Introduction and Motivation 
    
   This document specifies an Extensible Authentication Protocol (EAP) 
   mechanism for authentication and session key distribution using the 
   UMTS AKA authentication mechanism [1]. UMTS is a global third 
   generation mobile network standard. 
    
     
   Arkko and Haverinen     Expires in six months             [Page 2] 


                        EAP AKA Authentication               June 2003 
    
   AKA is based on challenge-response mechanisms and symmetric 
   cryptography. AKA typically runs in a UMTS Subscriber Identity 
   Module (USIM). Compared to the GSM mechanism, UMTS AKA provides 
   substantially longer key lengths and mutual authentication. 
    
   The introduction of AKA inside EAP allows several new applications. 
   These include the following: 
    
   - The use of the AKA also as a secure PPP authentication method in 
     devices that already contain an USIM. 
    
   - The use of the third generation mobile network authentication 
     infrastructure in the context of wireless LANs and IEEE 802.1x 
     technology through EAP over Wireless [2, 3]. 
    
   - Relying on AKA and the existing infrastructure in a seamless way 
     with any other technology that can use EAP. 
    
   AKA works in the following manner: 
    
   - The USIM and the home environment have agreed on a secret key 
     beforehand. 
    
   - The actual authentication process starts by having the home 
     environment produce an authentication vector, based on the secret 
     key and a sequence number. The authentication vector contains a 
     random part RAND, an authenticator part AUTN used for 
     authenticating the network to the USIM, an expected result part 
     XRES, a session key for integrity check IK, and a session key for 
     encryption CK. 
 
   - The RAND and the AUTN are delivered to the USIM. 
 
   - The USIM verifies the AUTN, again based on the secret key and the 
     sequence number. If this process is successful (the AUTN is valid 
     and the sequence number used to generate AUTN is within the 
     correct range), the USIM produces an authentication result, RES 
     and sends this to the home environment. 
 
   - The home environment verifies the correct result from the USIM. If 
     the result is correct, IK and CK can be used to protect further 
     communications between the USIM and the home environment. 
    
   When verifying AUTN, the USIM may detect that the sequence number 
   the network uses is not within the correct range. In this case, the 
   USIM calculates a sequence number synchronization parameter AUTS and 
   sends it to the network. AKA authentication may then be retried with 
   a new authentication vector generated using the synchronized 
   sequence number. 
    
   For a specification of the AKA mechanisms and how the cryptographic 
   values AUTN, RES, IK, CK and AUTS are calculated, see reference [1]. 
    

     
   Arkko and Haverinen     Expires in six months             [Page 3] 


                        EAP AKA Authentication               June 2003 
    
   It is also possible that the home environment delegates the actual 
   authentication task to an intermediate node. In this case the 
   authentication vector or parts of it are delivered to the 
   intermediate node, enabling it to perform the comparison between RES 
   and XRES, and possibly also use CK and IK. Such delivery MUST be 
   done in a secure manner. In EAP AKA, the EAP server node is such an 
   intermediate node. 
    
   In the third generation mobile networks, AKA is used both for radio 
   network authentication and IP multimedia service authentication 
   purposes. Different user identities and formats are used for these; 
   the radio network uses the International Mobile Subscriber 
   Identifier (IMSI), whereas the IP multimedia service uses the 
   Network Access Identifier (NAI) [4]. 
    
    
2. Terms and Conventions Used in This Document 
    
   The following terms will be used through this document: 
    
    
   AAA protocol 

      Authentication, Authorization and Accounting protocol 

   AAA server 

      The AAA server is responsible for storing shared secrets and 
      other credential information necessary for the authentication of 
      users. Cf. EAP server 

   AKA 

      Authentication and Key Agreement 

   AuC 

      Authentication Centre. The mobile network element that can 
      authenticate subscribers either in GSM or in UMTS networks. 

   Authenticator 

      The entity that terminates the protocol carrying EAP used by the 
      client, such as a Network Access Server (NAS) terminating the PPP 
      link. The EAP server may be co-located in the Authenticator. In 
      this case, the Authenticator may actually authenticate the user 
      based on information received from the AAA server. 

   EAP 

      Extensible Authentication Protocol [5]. 



     
   Arkko and Haverinen     Expires in six months             [Page 4] 


                        EAP AKA Authentication               June 2003 
    
   EAP server 

      The network element that terminates the EAP protocol. Typically, 
      the EAP server functionality is implemented in a AAA server. 

   GSM 

      Global System for Mobile communications. 

   NAI 

      Network Access Identifier [4]. 

   AUTN 

      Authentication value generated by the AuC which together with the 
      RAND authenticates the server to the client, 128 bits [1]. 

   AUTS 

      A value generated by the client upon experiencing a 
      synchronization failure, 112 bits. 

   RAND 

      Random number generated by the AuC, 128 bits [1]. 

   RES 

      Authentication result from the client, which together with the 
      RAND authenticates the client to the server, 128 bits [1]. 

   SQN 

      Sequence number used in the authentication process, 48 bits [1]. 

   SIM 

      Subscriber Identity Module. The SIM is an application 
      traditionally resident on smart cards distributed by GSM 
      operators. 

   SRES 

      The authentication result parameter in GSM, corresponds to the 
      RES parameter in UMTS aka, 32 bits. 

   USIM 

      UMTS Subscriber Identity Module. USIM is an application that is 
      resident e.g. on smart cards distributed by UMTS operators. 

 

     
   Arkko and Haverinen     Expires in six months             [Page 5] 


                        EAP AKA Authentication               June 2003 
    
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", 
   "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in 
   this document are to be interpreted as described in RFC 2119 [6] 
 
3. Protocol Overview 
    
   In this document, the term EAP Server refers to the network element 
   that terminates the EAP protocol. Usually the EAP server is separate 
   from the authenticator device, which is the network element closest 
   to the client, such as a Network Access Server (NAS) or an IEEE 
   802.1X bridge. Alternatively, the EAP server functionality may be 
   co-located in the authenticator although typically, the EAP server 
   functionality is implemented on a separate AAA server with whom the 
   authenticator communicates using an AAA protocol. (The exact AAA 
   communications are outside the scope of this document, however.) 
    
   The message flow below shows the basic successful full 
   authentication case with the EAP AKA. The EAP AKA uses two 
   roundtrips to authorize the user and generate session keys. As in 
   other EAP schemes, first an identity request/response message pair 
   is exchanged. (As specified in [5], the initial identity request is 
   not required, and MAY be bypassed in cases where the authenticator 
   can presume the identity, such as when using leased lines, dedicated 
   dial-ups, etc. Please see also Section 4.2 for specification how to 
   obtain the identity via EAP AKA messages.)  
    
   Next, the EAP server starts the actual AKA protocol by sending an 
   EAP-Request/AKA-Challenge message. EAP AKA packets encapsulate 
   parameters in attributes, encoded in a Type, Length, Value format. 
   The packet format and the use of attributes are specified in Section 
   6. The EAP-Request/AKA-Challenge message contains a random number 
   (AT_RAND) and an authorization vector (AT_AUTN), and a message 
   authentication code AT_MAC. The EAP-Request/AKA-Challenge message 
   MAY optionally contain encrypted data, which is used for Identity 
   privacy support, as described in Section 4.3. The AT_MAC attribute 
   contains a message authentication code covering the EAP packet. The 
   encrypted data is not shown in the figures of this section. 
    
   The client runs the AKA algorithm (perhaps inside an USIM) and 
   verifies the AUTN. If this is successful, the client is talking to a 
   legitimate EAP server and proceeds to send the EAP-Response/AKA-
   Challenge. This message contains a result parameter that allows the 
   EAP server in turn to authenticate the client, and the AT_MAC 
   attribute to integrity protect the EAP message. 
    









     
   Arkko and Haverinen     Expires in six months             [Page 6] 


                        EAP AKA Authentication               June 2003 
    
       Client                                             Authenticator 
          |                                                       | 
          |                      EAP-Request/Identity             | 
          |<------------------------------------------------------| 
          |                                                       | 
          | EAP-Response/Identity                                 | 
          | (Includes user's NAI)                                 | 
          |------------------------------------------------------>| 
          |                                                       | 
          |                            +------------------------------+ 
          |                            | Server runs UMTS algorithms, | 
          |                            | generates RAND and AUTN.     | 
          |                            +------------------------------+ 
          |                                                       | 
          |                         EAP-Request/AKA-Challenge     | 
          |                         (AT_RAND, AT_AUTN, AT_MAC)    | 
          |<------------------------------------------------------| 
          |                                                       | 
      +-------------------------------------+                     | 
      | Client runs UMTS algorithms on USIM,|                     | 
      | verifies AUTN and MAC, derives RES  |                     | 
      | and session key                     |                     | 
      +-------------------------------------+                     | 
          |                                                       | 
          | EAP-Response/AKA-Challenge                            | 
          | (AT_RES, AT_MAC)                                      | 
          |------------------------------------------------------>| 
          |                                                       | 
          |                          +--------------------------------+ 
          |                          | Server checks the given RES,   | 
          |                          | and MAC and finds them correct.| 
          |                          +--------------------------------+ 
          |                                                       | 
          |                                          EAP-Success  | 
          |<------------------------------------------------------| 
    
    
   The second message flow shows how the EAP server rejects the Client 
   due to a failed authentication. The same flow is also used in the 
   GSM compatible mode, except that the AT_AUTN attribute and AT_MAC 
   attribute are not used in the messages. 
    












     
   Arkko and Haverinen     Expires in six months             [Page 7] 


                        EAP AKA Authentication               June 2003 
    
       Client                                             Authenticator 
          |                                                       | 
          |                      EAP-Request/Identity             | 
          |<------------------------------------------------------| 
          |                                                       | 
          | EAP-Response/Identity                                 | 
          | (Includes user's NAI)                                 | 
          |------------------------------------------------------>| 
          |                                                       | 
          |                            +------------------------------+ 
          |                            | Server runs UMTS algorithms, | 
          |                            | generates RAND and AUTN.     | 
          |                            +------------------------------+ 
          |                                                       | 
          |                      EAP-Request/AKA-Challenge        | 
          |                      (AT_RAND, AT_AUTN, AT_MAC)       | 
          |<------------------------------------------------------| 
          |                                                       | 
      +-------------------------------------+                     | 
      | Client runs UMTS algorithms on USIM,|                     | 
      | possibly verifies AUTN, and sends an|                     | 
      | invalid response                    |                     | 
      +-------------------------------------+                     | 
          |                                                       | 
          | EAP-Response/AKA-Challenge                            | 
          | (AT_RES, AT_MAC)                                      | 
          |------------------------------------------------------>| 
          |                                                       | 
          |              +------------------------------------------+ 
          |              | Server checks the given RES and the MAC, | 
          |              | and finds one of them incorrct.          | 
          |              +------------------------------------------+ 
          |                                                       | 
          |                                          EAP-Failure  | 
          |<------------------------------------------------------| 
    
    
   The next message flow shows the client rejecting the AUTN of the EAP 
   server.  
    
   The client sends an explicit error message (EAP-Response/AKA-
   Authentication-Reject) to the Authenticator, as usual in AKA when 
   AUTN is incorrect. This allows the EAP server to produce the same 
   error statistics as AKA in general produces in UMTS. Please note 
   that this behavior is different from other EAP/AKA error cases, such 
   as when encountering an incorrect AT_MAC attribute, the client 
   silently discards the EAP/AKA message. 
    
    
    




     
   Arkko and Haverinen     Expires in six months             [Page 8] 


                        EAP AKA Authentication               June 2003 
    
       Client                                             Authenticator 
          |                                                       | 
          |                      EAP-Request/Identity             | 
          |<------------------------------------------------------| 
          |                                                       | 
          | EAP-Response/Identity                                 | 
          | (Includes user's NAI)                                 | 
          |------------------------------------------------------>| 
          |                                                       | 
          |                            +------------------------------+ 
          |                            | Server runs UMTS algorithms, | 
          |                            | generates RAND and a bad AUTN| 
          |                            +------------------------------+ 
          |                                                       | 
          |                         EAP-Request/AKA-Challenge     | 
          |                         (AT_RAND, AT_AUTN, AT_MAC)    | 
          |<------------------------------------------------------| 
          |                                                       | 
      +-------------------------------------+                     | 
      | Client runs UMTS algorithms on USIM |                     | 
      | and discovers AUTN that can not be  |                     | 
      | verified                            |                     | 
      +-------------------------------------+                     | 
          |                                                       | 
          | EAP-Response/AKA-Authentication-Reject                | 
          |------------------------------------------------------>| 
          |                                                       | 
          |                                                       | 
          |                                          EAP-Failure  | 
          |<------------------------------------------------------| 
    
    
   The AKA uses shared secrets between the Client and the Client's home 
   operator together with a sequence number to actually perform an 
   authentication. In certain circumstances it is possible for the 
   sequence numbers to get out of sequence. Here's what happens then: 
    

















     
   Arkko and Haverinen     Expires in six months             [Page 9] 


                        EAP AKA Authentication               June 2003 
    
       Client                                             Authenticator 
          |                                                       | 
          |                      EAP-Request/Identity             | 
          |<------------------------------------------------------| 
          |                                                       | 
          | EAP-Response/Identity                                 | 
          | (Includes user's NAI)                                 | 
          |------------------------------------------------------>| 
          |                                                       | 
          |                            +------------------------------+ 
          |                            | Server runs UMTS algorithms, | 
          |                            | generates RAND and AUTN.     | 
          |                            +------------------------------+ 
          |                                                       | 
          |                         EAP-Request/AKA-Challenge     | 
          |                         (AT_RAND, AT_AUTN, AT_MAC)    | 
          |<------------------------------------------------------| 
          |                                                       | 
      +-------------------------------------+                     | 
      | Client runs UMTS algorithms on USIM |                     | 
      | and discovers AUTN that contains an |                     | 
      | inappropriate sequence number       |                     | 
      +-------------------------------------+                     | 
          |                                                       | 
          | EAP-Response/AKA-Synchronization-Failure              | 
          | (AT_AUTS)                                             | 
          |------------------------------------------------------>| 
          |                                                       | 
          |                              +---------------------------+ 
          |                              | Perform resynchronization | 
          |                              | Using AUTS and            | 
          |                              | the sent RAND             | 
          |                              +---------------------------+ 
          |                                                       | 
    
   After the resynchronization process has taken place in the server 
   and AAA side, the process continues by the server side sending a new 
   EAP-Request/AKA-Challenge message. 
    
   In addition to the full authentication scenarios described above, 
   EAP AKA includes a re-authentication procedure, which is specified 
   in Section 5. 
    
4. Identity Management 
    
   This section specifies user identity management and identity privacy 
   support. 
    
4.1. User Identity in EAP-Response/Identity 
    
   In the beginning of an EAP authentication, the Authenticator issues 
   the EAP-Request/Identity packet to the client. The client responds 
   with EAP-Response/Identity, which contains the user's identity. The 
   formats of these packets are specified in [5]. 
     
   Arkko and Haverinen     Expires in six months            [Page 10] 


                        EAP AKA Authentication               June 2003 
    
    
   UMTS subscribers are identified with the International Mobile 
   Subscriber Identity (IMSI) [7]. The IMSI is composed of a three 
   digit Mobile Country Code (MCC), a two or three digit Mobile Network 
   Code (MNC) and a not more than 10 digit Mobile Subscriber 
   Identification Number (MSIN). In other words, the IMSI is a string 
   of not more than 15 digits. MCC and MNC uniquely identify the 
   operator. 
    
   Internet AAA protocols identify users with the Network Access 
   Identifier (NAI) [4]. When used in a roaming environment, the NAI is 
   composed of a username and a realm, separated with "@" 
   (username@realm). The username portion identifies the subscriber 
   within the realm. The AAA nodes use the realm portion of the NAI to 
   route AAA requests to the correct AAA server. The realm name used in 
   this protocol MAY be chosen by the operator and it MAY be a 
   configurable parameter in the EAP/AKA client implementation. In this 
   case, the client is typically configured with the NAI realm of the 
   home operator. Operators MAY reserve a specific realm name for 
   EAP/AKA users. This convention makes it easy to recognize that the 
   NAI identifies a subscriber that uses EAP/AKA. Such a reserved NAI 
   realm may be a useful hint to the first authentication method to use 
   during method negotiation. 
    
   There are three types of NAI username portions in EAP/AKA: non-
   pseudonym permanent usernames, pseudonym usernames and re-
   authentication usernames. The first two are only used on full 
   authentication and the last one only on re-authentication. When the 
   optional identity privacy support is not used, the non-pseudonym 
   permanent username is used.  
    
   The non-pseudonym permanent username MAY be derived from the IMSI. 
   In this case, the permanent username MUST be of the format "0imsi". 
   In other words, the first character of the username is the digit 
   zero (ASCII value 0x30), followed by the IMSI. The IMSI is an ASCII 
   string that consists of not more than 15 decimal digits (ASCII 
   values between 0x30 and 0x39) as specified in [7] 
    
   The EAP server MAY use the leading "0" as a hint to try EAP/AKA as 
   the first authentication method during method negotiation. The 
   EAP/AKA server MAY propose EAP/AKA even if the leading character was 
   not "0". 
    
   Alternatively, an  implementation may choose a permanent username 
   that is not based on the IMSI. In this case the selection of the 
   username, its format, and its processing is a local matter. In this 
   case, the client implementation MUST NOT prepend any leading 
   characters to the username. 
    
   When the optional identity privacy support is used on full 
   authentication, the client MAY use the pseudonym received upon the 
   previous full authentication sequence as the username portion of the 
   NAI, as specified in Section 4.3. The client MUST NOT modify the 

     
   Arkko and Haverinen     Expires in six months            [Page 11] 


                        EAP AKA Authentication               June 2003 
    
   pseudonym received in AT_NEXT_PSEUDONYM. For example, the client 
   MUST NOT prepend any leading characters in the pseudonym. 
    
   On re-authentication, the client uses the re-authentication identity 
   received upon the previous authentication sequence as the NAI. A new 
   re-authentication identity may be delivered as part of both full 
   authentication and re-authentication. The client MUST NOT modify the 
   re-authentication identity received in AT_NEXT_REAUTH_ID but the 
   client must use the re-authentication identity as it is. For 
   example, the client MUST NOT prepend any leading characters in the 
   re-authentication identity. 
    
   If no configured realm name is available, the client MAY derive the 
   realm name from the MCC and MNC portions of the IMSI. A recommended 
   way to derive the realm from the IMSI will be specified in [8]. 
   Alternatively, the realm name may be obtained by concatenating 
   "mnc", the MNC digits of IMSI, ".mcc", the MCC digits of IMSI and 
   ".owlan.org". For example, if the IMSI is 123456789098765, and the 
   MNC is three digits long, then the derived realm name is 
   "mnc456.mcc123.owlan.org". 
    
   If the client is not able to determine whether the MNC is two or 
   three digits long, the client MAY use a 3-digit MNC. If the correct 
   length of the MNC is two, then the MNC used in the realm name will 
   include the first digit of MSIN. Hence, when configuring AAA 
   networks for operators that have 2-digit MNCs, the network SHOULD 
   also be prepared for realm names with incorrect 3-digit MNCs. 
    
4.2. Obtaining Subscriber Identity via EAP AKA Messages 
    
   It may be useful to obtain the identity of the subscriber through 
   means other than EAP Request/Identity. This can eliminate the need 
   for an identity request when using EAP method negotiation. If this 
   was not possible then it might not be possible to negotiate EAP/AKA 
   as the second method since not all EAP implementations support 
   multiple EAP Identity requests. 
    
   EAP-Request/AKA-Identity and EAP-Response/AKA-Identity packets may 
   be used for obtaining the subscriber identity. The EAP-Request/AKA-
   Challenge, EAP-Response/AKA-Challenge, or the packets used on re-
   authentication may optionally include the AT_CHECKCODE attribute, 
   which enables the protocol peers to ensure the integrity of the AKA-
   Identity packets. AT_CHECKCODE is specified in Section 7.2. 
    
   If the EAP server has not received any identity (permanent identity, 
   pseudonym or re-authentication identity) from the client when 
   sending the first EAP/AKA request, then the EAP server SHOULD issue 
   the EAP-Request/AKA-Identity packet and includes the AT_ANY_ID_REQ 
   attribute (specified in Section 8.5). This attribute does not 
   contain any data. 
    
   If the EAP server has received an EAP-Response/Identity packet but 
   the contents do not appear to be a valid permanent identity, 
   pseudonym or a re-authentication identity, the EAP server SHOULD 
     
   Arkko and Haverinen     Expires in six months            [Page 12] 


                        EAP AKA Authentication               June 2003 
    
   issue an EAP-Request/AKA-Identity packet with the AT_ANY_ID_REQ 
   attribute. 
    
   In some environments the intermediate entities or software layers in 
   the client may modify the identity string in the EAP-
   Response/Identity packet. For example, some EAP layer 
   implementations may cache the identity string from the first 
   authentication and do not obtain a new identity string from the EAP 
   method implementation on subsequent authentication exchanges. 
   Because the identity string is used in key derivation, such 
   modifications will result in failed authentication unless the EAP 
   server uses the AT_ANY_ID_REQ attribute to obtain an unmodified copy 
   of the identity string. Therefore, in cases when there is a 
   possibility that an intermediate element or software layer may 
   modify the EAP-Response/Identity packet, the EAP server SHOULD 
   always use the EAP-Request/AKA-Identity packet with the 
   AT_ANY_ID_REQ attribute, even if the identity received in EAP-
   Response/Identity was valid. 
    
   The AT_ANY_ID_REQ attribute requests the client to include the 
   AT_IDENTITY attribute (specified in Section 8.6) in the EAP-
   Response/AKA-Identity packet. The identity format in the AT_IDENTITY 
   attribute is the same as in the Type-Data field of the EAP-
   Response/Identity packet. The AT_IDENTITY attribute contains a 
   permanent identity, a pseudonym identity or a re-authentication 
   identity. If the server does not support re-authentication, it uses 
   the AT_FULLAUTH_ID_REQ attribute instead of the AT_ANY_ID_REQ 
   attribute to directly request for a full authentication identity 
   (either the permanent identity or a pseudonym identity). If the 
   server uses the AT_FULLAUTH_ID_REQ attribute, the client MUST NOT 
   use a re-authentication identity in the AT_IDENTITY attribute. 
    
   The use of pseudonyms for anonymity is specified in Section 4.3. The 
   use of re-authentication identities is specified in Section 5. 
    
   The full authentication case is illustrated in the figure below. In 
   this case, AT_IDENTITY contains either the permanent identity or a 
   pseudonym identity. The same sequence is also used in case the 
   server uses the AT_FULLAUTH_ID_REQ in EAP-Request/AKA-Identity 
    














     
   Arkko and Haverinen     Expires in six months            [Page 13] 


                        EAP AKA Authentication               June 2003 
    
       Client                                             Authenticator 
          |                                                       | 
          |                            +------------------------------+ 
          |                            | Server does not have any     | 
          |                            | Subscriber identity available| 
          |                            | When starting EAP/AKA        | 
          |                            +------------------------------+ 
          |                                                       | 
          |          EAP-Request/AKA-Identity                     | 
          |          (AT_ANY_ID_REQ)                              | 
          |<------------------------------------------------------| 
          |                                                       | 
          |                                                       | 
          | EAP-Response/AKA-Identity                             | 
          | (AT_IDENTITY)                                         | 
          |------------------------------------------------------>| 
          |                                                       | 
    
   If the client wants to perform full authentication, it includes the 
   permanent identity or a pseudonym identity in the AT_IDENTITY 
   attribute. The client may use these identities in response to either 
   AT_ANY_ID_REQ or AT_FULLAUTH_ID_REQ. If the server uses the 
   AT_ANY_ID_REQ and the client wants to perform re-authentication, 
   then the client includes a re-authentication identity in the 
   AT_IDENTITY attribute. 
    
   If the client uses its full authentication identity and the 
   AT_IDENTITY attribute contains a valid permanent identity or a valid 
   pseudonym identity that the EAP server is able to decode to the 
   permanent identity, then the full authentication sequence proceeds 
   as usual with the EAP Server issuing the EAP-Request/AKA-Challenge 
   message. 
    
   On re-authentication, if the AT_IDENTITY attribute contains a valid 
   re-authentication identity and the server agrees on using re-
   authentication, then the server proceeds with the re-authentication 
   sequence and issues the EAP-Request/AKA-Reauthentication packet, as 
   specified in Section 5. If the server does not recognize the re-
   authentication identity, then it issues a second EAP-Request/AKA-
   Identity message and includes the AT_FULLAUTH_ID_REQ attribute. In 
   this case, a second EAP/AKA-Identity round trip is required. The 
   messages used on the first roundtrip are ignored. (However all AKA-
   Identity round trips are included in the calculation of the 
   AT_CHECKCODE attribute, as specified in Section 7.2). This is 
   illustrated below. 
    








     
   Arkko and Haverinen     Expires in six months            [Page 14] 


                        EAP AKA Authentication               June 2003 
    
       Client                                             Authenticator 
          |                                                       | 
          |                            +------------------------------+ 
          |                            | Server does not have any     | 
          |                            | Subscriber identity available| 
          |                            | When starting EAP/AKA        | 
          |                            +------------------------------+ 
          |                                                       | 
          |        EAP-Request/AKA-Identity                       | 
          |        (AT_ANY_ID_REQ)                                | 
          |<------------------------------------------------------| 
          |                                                       | 
          |                                                       | 
          | EAP-Response/AKA-Identity                             | 
          | (AT_IDENTITY containing a re-authentication identity) | 
          |------------------------------------------------------>| 
          |                                                       | 
          |                            +------------------------------+ 
          |                            | Server does not recognize    | 
          |                            | The re-authentication        | 
          |                            | Identity                     | 
          |                            +------------------------------+ 
          |                                                       | 
          |     EAP-Request/AKA-Identity                          | 
          |     (AT_FULLAUTH_ID_REQ)                              | 
          |<------------------------------------------------------| 
          |                                                       | 
          |                                                       | 
          | EAP-Response/AKA-Identity                             | 
          | (AT_IDENTITY with a full-auth. Identity)              | 
          |------------------------------------------------------>| 
          |                                                       | 
    
   If the server recognizes the re-authentication identity, but still 
   wants to fall back on full authentication, the server may issue the 
   EAP-Request/AKA-Challenge packet. In this case, the full 
   authentication procedure proceeds as usual. 
    
   An extra EAP/AKA-Identity round trip is also required in cases when 
   the AT_IDENTITY attribute contains a pseudonym identity that the EAP 
   server fails to decode. The operation in this case is specified in 
   Section 4.3. 
    
4.3. Identity Privacy Support 
    
   EAP/AKA includes optional identity privacy (anonymity) support that 
   can be used to hide the cleartext permanent identity and to make the 
   subscriber's connections unlinkable to eavesdroppers. Identity 
   privacy is based on temporary identities, or pseudonyms, which are 
   equivalent to but separate from the Temporary Mobile Subscriber 
   Identities (TMSI) that are used on cellular networks. Please see 
   Section 12.1 for security considerations concerning identity 
   privacy. 
    
     
   Arkko and Haverinen     Expires in six months            [Page 15] 


                        EAP AKA Authentication               June 2003 
    
   If identity privacy is not used or if the client does not have any 
   pseudonyms or re-authentication identities available, the client 
   transmits the permanent identity in the EAP-Response/Identity packet 
   or in the AT_IDENTITY attribute. 
    
   The EAP-Request/AKA-Challenge message MAY include an encrypted 
   pseudonym in the value field of the AT_ENCR_DATA attribute. The 
   AT_IV and AT_MAC attributes are also used to transport the pseudonym 
   to the client, as described in Section 8.1. Because the identity 
   privacy support is optional to implement, the client MAY ignore the 
   AT_IV and AT_ENCR_DATA attributes and always transmit the permanent 
   identity in the EAP-Response/Identity packet and in the AT_IDENTITY 
   attribute. 
    
   On receipt of the EAP-Request/AKA-Challenge, the client verifies the 
   AT_MAC attribute before looking at the AT_ENCR_DATA attribute. If 
   the AT_MAC is invalid, then the client MUST silently discard the EAP 
   packet. If the AT_MAC attribute is valid, then the client MAY 
   decrypt the encrypted data in AT_ENCR_DATA and use the obtained 
   pseudonym on the next full authentication. 
    
   If the client does not receive a new pseudonym in the EAP-
   Request/AKA-Challenge message, the client MAY use an old pseudonym 
   instead of the permanent identity on next full authentication. 
    
   The EAP server produces pseudonyms in an implementation-dependent 
   manner. Only the EAP server needs to be able to map the pseudonym to 
   the permanent identity. Regardless of construction method, the 
   pseudonym MUST conform to the grammar specified for the username 
   portion of an NAI.  
    
   In any case, it is necessary that permanent usernames and pseudonyms 
   are separate and recognizable from each other. It is also desirable 
   that EAP SIM and EAP AKA usernames be recognizable from each other 
   as an aid for the server to which method to offer. 
    
   In general, it is the task of the EAP server and the policies of its 
   administrator to ensure sufficient separation in the usernames. 
   Pseudonyms, for instance, are both produced and used by the EAP 
   server. The EAP server MUST compose pseudonyms so that it can 
   recognize if a NAI username is an EAP AKA pseudonym. For instance, 
   when the usernames have been derived from the IMSI, the pseudonym 
   could begin with a leading "2" character. 
    
   The client MAY transmit the received pseudonym in the first EAP-
   Response/Identity packet of the next full authentication with the 
   EAP server. The client concatenates the received pseudonym with the 
   "@" character and the NAI realm portion. The client selects the 
   realm name portion similarly as it select the realm name portion 
   when using the permanent identity. If the EAP server successfully 
   decodes the pseudonym received in the EAP-Response/Identity packet 
   to a known client permanent identity, the authentication proceeds 
   with the EAP-Request/AKA-Challenge message as usual. 
    
     
   Arkko and Haverinen     Expires in six months            [Page 16] 


                        EAP AKA Authentication               June 2003 
    
   Because the client may fail to save a pseudonym sent to in an EAP-
   Request/AKA-Challenge, for example due to malfunction, the EAP 
   server SHOULD maintain at least one old pseudonym in addition to the 
   most recent pseudonym. 
    
   If the EAP server requests the client to include its identity in the 
   EAP-Response/AKA-Identity packet, as specified in Section 4.2, the 
   client MAY transmit the received pseudonym in the AT_IDENTITY 
   attribute. If the EAP server successfully decodes the pseudonym to a 
   known identity, then the authentication proceeds with the EAP-
   Request/AKA-Challenge packet as usual. 
   If the EAP server fails to decode the pseudonym to a known identity, 
   then the EAP server requests the permanent identity (non-pseudonym 
   identity) by including the AT_PERMANENT_ID_REQ attribute (Section 
   8.5) in the EAP-Request/AKA-Identity message. Because another EAP 
   server may have generated the pseudonym using a different coding 
   scheme, the EAP server SHOULD use AT_PERMANENT_ID_REQ also in cases 
   when it does not recognize the format of the client identity. 
    
   The EAP server issues the EAP-Request/AKA-Identity message also in 
   the case when it received the undecodable pseudonym in AT_IDENTITY 
   included in the EAP-Response/AKA-Identity packet. In this case, a 
   second EAP/AKA-Identity round trip is required. 
    
   A received AT_PERMANENT_ID_REQ does not necessarily originate from 
   the valid network, but an active attacker may transmit an EAP-
   Request/AKA-Identity packet with an AT_PERMANENT_ID_REQ attribute to 
   the client, in an effort to find out the true identity of the user.  
   The client MAY silently discard any EAP-Request/AKA-Identity 
   messages that include AT_PERMANENT_ID_REQ for a while in order to 
   wait for an EAP-Request/AKA-Identity packet without 
   AT_PERMANENT_ID_REQ. If the valid network sent the message, the 
   message will be retransmitted, so the client can reconsider replying 
   to the message when it receives a retransmission. 
    
   Basically, there are two different policies that the client can 
   employ with regard to AT_PERMANENT_ID_REQ. A "conservative" client 
   assumes that the network is able to maintain pseudonyms robustly. 
   Therefore, if a conservative client has a pseudonym, the client 
   silently ignores the EAP packet with AT_PERMANENT_ID_REQ, because 
   the client believes that the valid network is able to decode the 
   pseudonym. (Alternatively, the conservative client may respond to 
   AT_PERMANENT_ID_REQ in certain circumstances, for example if the 
   pseudonym was received a long time ago.) The benefit of this policy 
   is that it protects the client against active attacks on anonymity. 
   On the other hand, a "liberal" client always accepts the 
   AT_PERMANENT_ID_REQ and responds with the permanent identity. The 
   benefit of this policy is that it works even if the valid network 
   sometimes loses pseudonyms and is not able to decode them to the 
   permanent identity. 
    
   The value field of the AT_PERMANENT_ID_REQ does not contain any data 
   but the attribute is included to request the client to include the 
   AT_IDENTITY attribute (Section 8.6) with the permanent 
     
   Arkko and Haverinen     Expires in six months            [Page 17] 


                        EAP AKA Authentication               June 2003 
    
   authentication identity in the EAP-Response/AKA-Identity message. In 
   this case, the AT_IDENTITY attribute contains the client's permanent 
   identity in the clear. 
    
   Please note that the EAP/AKA client and the EAP/AKA server only 
   process the AT_IDENTITY attribute. Entities that only pass EAP 
   packets through do not process this attribute. Hence, if the EAP 
   server is not co-located in the authenticator, then the 
   authenticator and other intermediate AAA elements (such as possible 
   AAA proxy servers) will continue to refer to the client with the 
   original identity from the EAP-Response/Identity packet regardless 
   if the decoding fails in the EAP server. 
    
   The figure below illustrates the case when the EAP server fails to 
   decode the pseudonym included in the EAP-Response/Identity packet. 
    
       Client                                             Authenticator 
          |                                                       | 
          |                               EAP-Request/Identity    | 
          |<------------------------------------------------------| 
          |                                                       | 
          | EAP-Response/Identity                                 | 
          | (Includes a pseudonym)                                | 
          |------------------------------------------------------>| 
          |                                                       | 
          |                            +------------------------------+ 
          |                            | Server fails to decode the   | 
          |                            | Pseudonym.                   | 
          |                            +------------------------------+ 
          |                                                       | 
          |  EAP-Request/AKA-Identity                             | 
          |  (AT_PERMANENT_ID_REQ)                                | 
          |<------------------------------------------------------| 
          |                                                       | 
          |                                                       | 
          | EAP-Response/AKA-Identity                             | 
          | (AT_IDENTITY with permanent identity)                 | 
          |------------------------------------------------------>| 
          |                                                       | 
    
   If the server recognizes the permanent identity, then the 
   authentication sequence proceeds as usual with the EAP Server 
   issuing the EAP-Request/AKA-Challenge message. 
     
   If the server does not recognize the permanent identity, or if the 
   server is not able to continue the authentication exchange with the 
   client after receiving the permanent identity, then the server 
   issues the EAP Failure packet and the authentication exchange 
   terminates. 
    
   The figure below illustrates the case when the EAP server fails to 
   decode the pseudonym included in the AT_IDENTITY attribute. 
    

     
   Arkko and Haverinen     Expires in six months            [Page 18] 


                        EAP AKA Authentication               June 2003 
    
       Client                                             Authenticator 
          |                                                       | 
          |                            +------------------------------+ 
          |                            | Server does not have any     | 
          |                            | Subscriber identity available| 
          |                            | When starting EAP/AKA        | 
          |                            +------------------------------+ 
          |                                                       | 
          |        EAP-Request/AKA-Identity                       | 
          |        (AT_ANY_ID_REQ)                                | 
          |<------------------------------------------------------| 
          |                                                       | 
          |                                                       | 
          |EAP-Response/AKA-Identity                              | 
          |(AT_IDENTITY with a pseudonym identity)                | 
          |------------------------------------------------------>| 
          |                                                       | 
          |                                                       | 
          |                            +------------------------------+ 
          |                            | Server fails to decode the   | 
          |                            | Pseudonym in AT_IDENTITY     | 
          |                            +------------------------------+ 
          |                                                       | 
          |                EAP-Request/AKA-Identity               | 
          |                (AT_PERMANENT_ID_REQ)                  | 
          |<------------------------------------------------------| 
          |                                                       | 
          |                                                       | 
          | EAP-Response/AKA-Identity                             | 
          | (AT_IDENTITY with permanent identity)                 | 
          |------------------------------------------------------>| 
          |                                                       | 
    
   In the worst case, there are three EAP/AKA-Identity round trips 
   before the server has obtained an acceptable identity: on the first 
   round, the client sends its re-authentication identity in 
   AT_IDENTITY. The server fails to accept it and request a full 
   authentication identity with a second EAP-Request/AKA-Identity. The 
   client responds with a pseudonym identity in AT_IDENTITY. The server 
   fails to decode the pseudonym and has to issue a third EAP-
   Request/AKA-Identity, including AT_PERMANENT_ID_REQ. Finally, the 
   server accepts the client's EAP-Response/AKA-Identity with the 
   AT_IDENTITY attribute and proceeds with full authentication. This is 
   illustrated in the figure below. 
    









     
   Arkko and Haverinen     Expires in six months            [Page 19] 


                        EAP AKA Authentication               June 2003 
    
       Client                                             Authenticator 
          |                                                       | 
          |                            +------------------------------+ 
          |                            | Server does not have any     | 
          |                            | Subscriber identity available| 
          |                            | When starting EAP/AKA        | 
          |                            +------------------------------+ 
          |                                                       | 
          |        EAP-Request/AKA-Identity                       | 
          |        (AT_ANY_ID_REQ)                                | 
          |<------------------------------------------------------| 
          |                                                       | 
          | EAP-Response/AKA-Identity                             | 
          | (AT_IDENTITY with re-authentication identity)         | 
          |------------------------------------------------------>| 
          |                                                       | 
          |                            +------------------------------+ 
          |                            | Server does not accept       | 
          |                            | The re-authentication        | 
          |                            | Identity                     | 
          |                            +------------------------------+ 
          |                                                       | 
          |     EAP-Request/AKA-Identity                          | 
          |     (AT_FULLAUTH_ID_REQ)                              | 
          |<------------------------------------------------------| 
          |                                                       | 
          |EAP-Response/AKA-Identity                              | 
          |(AT_IDENTITY with a pseudonym identity)                | 
          |------------------------------------------------------>| 
          |                                                       | 
          |                            +------------------------------+ 
          |                            | Server fails to decode the   | 
          |                            | Pseudonym in AT_IDENTITY     | 
          |                            +------------------------------+ 
          |                                                       | 
          |           EAP-Request/AKA-Identity                    | 
          |           (AT_PERMANENT_ID_REQ)                       | 
          |<------------------------------------------------------| 
          |                                                       | 
          |                                                       | 
          | EAP-Response/AKA-Identity                             | 
          | (AT_IDENTITY with permanent identity)                 | 
          |------------------------------------------------------>| 
          |                                                       | 
    
   After the last EAP-Response/AKA-Identity message, the full 
   authentication sequence proceeds as usual. If the EAP Server 
   recognizes the permanent identity and is able to proceed, the server 
   issues the EAP-Request/AKA-Challenge message. If the server does not 
   recognize the permanent identity, or if the server is not able to 
   continue the authentication exchange with the client after receiving 
   the permanent identity, then the server issues the EAP Failure 
   packet and the authentication exchange terminates. 
    
     
   Arkko and Haverinen     Expires in six months            [Page 20] 


                        EAP AKA Authentication               June 2003 
    
5. Re-authentication 
    
   In some environments, EAP authentication may be performed 
   frequently. Because the EAP AKA full authentication procedure makes 
   use of the UMTS AKA algorithms, and it therefore requires fresh 
   authentication vectors from the Authentication Centre, the full 
   authentication procedure may result in many network operations when 
   used very frequently. Therefore, EAP AKA includes a more inexpensive 
   re-authentication procedure that does not make use of the UMTS AKA 
   algorithms and does not need new vectors from the Authentication 
   Centre. 
    
   Re-authentication is optional to implement for both the EAP AKA 
   server and client. On each EAP authentication, either one of the 
   entities may also fall back on full authentication if they do not 
   want to use re-authentication. 
    
   Re-authentication is based on the keys derived on the preceding full 
   authentication. The same K_aut and K_encr keys as in full 
   authentication are used to protect EAP AKA packets and attributes, 
   and the original Master Key from full authentication is used to 
   generate a fresh Master Session Key, as specified in Section 10. 
    
   On re-authentication, the client protects against replays with an 
   unsigned 16-bit counter, included in the AT_COUNTER attribute. On 
   full authentication, both the server and the client initialize the 
   counter to one. The counter value of at least one is used on the 
   first re-authentication. On subsequent re-authentications, the 
   counter MUST be greater than on any of the previous re-
   authentications. For example, on the second re-authentication, 
   counter value is two or greater etc. The AT_COUNTER attribute is 
   encrypted. 
    
   The server includes an encrypted server nonce (AT_NONCE_S) in the 
   re-authentication request. The AT_MAC attribute in the client's 
   response is calculated over NONCE_S to provide a challenge/response 
   authentication scheme. The NONCE_S also contributes to the new 
   Master Session Key. 
    
   As discussed in Section 4.3, in some environments the client may 
   assume that the network can reliably store pseudonyms and therefore 
   the client may fail to respond to the AT_PERMANENT_ID_REQ attribute. 
   The network SHOULD store pseudonyms on a reliable database. Because 
   one of the objectives of the re-authentication procedure is to 
   reduce load on the network, the re-authentication procedure does not 
   require the EAP server to contact a reliable database. Therefore, 
   the re-authentication procedure makes use of separate re-
   authentication user identities. Pseudonyms and the permanent 
   identity are reserved for full authentication only. The network does 
   not need to store re-authentication identities as carefully as 
   pseudonyms. If a re-authentication identity is lost and the network 
   does not recognize it, the EAP server can fall back on full 
   authentication. 
    
     
   Arkko and Haverinen     Expires in six months            [Page 21] 


                        EAP AKA Authentication               June 2003 
    
   If the EAP server supports re-authentication, it MAY include the 
   skippable AT_NEXT_REAUTH_ID attribute in the encrypted data of EAP-
   Request/AKA-Challenge message. This attribute contains a new re-
   authentication identity for the next re-authentication. The client 
   MAY ignore this attribute, in which case it will use full 
   authentication next time. If the client wants to use re-
   authentication, it uses this re-authentication identity on next 
   authentication. Even if the client has a re-authentication identity, 
   the client MAY discard the re-authentication identity and use a 
   pseudonym or the permanent identity instead, in which case full 
   authentication will be performed. 
    
   The re-authentication identity received in AT_NEXT_REAUTH_ID 
   contains both the username portion and the realm portion of the 
   Network Access Identifier. The EAP Server can choose an appropriate 
   realm part in order to have the AAA infrastructure route subsequent 
   re-authentication related requests to the same AAA server. For 
   example, the realm part MAY include a portion that is specific to 
   the AAA server. Hence, it is sufficient to store the context 
   required for re-authentication in the AAA server that performed the 
   full authentication. 
    
   The client MAY use the re-authentication identity in the EAP-
   Response/Identity packet or, in response to server's AT_ANY_ID_REQ 
   attribute, the client MAY use the re-authentication identity in the 
   AT_IDENTITY attribute of the EAP-Response/AKA-Identity packet. 
    
   Even if the client uses a re-authentication identity, the server may 
   want to fall back on full authentication, for example because the 
   server does not recognize the re-authentication identity or does not 
   want to use re-authentication. If the server was able to decode the 
   re-authentication identity to the permanent identity, the server 
   issues the EAP-Request/AKA-Challenge packet to initiate full 
   authentication. If the server was not able to recover the client's 
   identity from the re-authentication identity, the server starts the 
   full authentication procedure by issuing an EAP-Request/AKA-Identity 
   packet. This packet always starts a full authentication sequence if 
   it does not include the AT_ANY_ID_REQ attribute. (As specified in 
   Sections 4.2 and 4.3, the server MAY use AT_ANY_ID_REQ, 
   AT_FULLAUTH_ID_REQ or AT_PERMANENT_ID_REQ attributes if it does not 
   know the client's identity.) 
    
   Both the client and the server SHOULD have an upper limit for the 
   number of subsequent re-authentications allowed before a full 
   authentication needs to be performed. Because a 16-bit counter is 
   used in re-authentication, the theoretical maximum number of re-
   authentications is reached when the counter value reaches 0xFFFF. 
    
   In order to use re-authentication, the client and the server need to 
   store the following values: original Master Key, K_aut, K_encr, 
   latest counter value and the next re-authentication identity. 
    
   The following figure illustrates the re-authentication procedure. 
   Encrypted attributes are denoted with '*'. The client uses its re-
     
   Arkko and Haverinen     Expires in six months            [Page 22] 


                        EAP AKA Authentication               June 2003 
    
   authentication identity in the EAP-Response/Identity packet. As 
   discussed above, an alternative way to communicate the re-
   authentication identity to the server is for the client to use the 
   AT_IDENTITY attribute in the EAP-Response/AKA-Identity message. This 
   latter case is not illustrated in the figure below, and it is only 
   possible when the server requests the client to send its identity by 
   including the AT_ANY_ID_REQ attribute in the EAP-Request/AKA-
   Identity packet. 
    
   If the server recognizes the re-authentication identity and agrees 
   on using re-authentication, then the server sends the EAP-
   Request/AKA-Reauthentication packet to the client. This packet MUST 
   include the encrypted AT_COUNTER attribute, with a fresh counter 
   value, the encrypted AT_NONCE_S attribute that contains a random 
   number chosen by the server, the AT_ENCR_DATA and the AT_IV 
   attributes used for encryption, and the AT_MAC attribute that 
   contains a message authentication code over the packet. The packet 
   MAY also include an encrypted AT_NEXT_REAUTH_ID attribute that 
   contains the next re-authentication identity.  
    
   Re-authentication identities are one-time identities. If the client 
   does not receive a new re-authentication identity, it MUST use 
   either the permanent identity or a pseudonym identity on the next 
   authentication to initiate full authentication. 
    
   The client verifies that the counter value is fresh (greater than 
   any previously used value). The client also verifies that AT_MAC is 
   correct. The client MAY save the next re-authentication identity 
   from the encrypted AT_NEXT_REAUTH_ID for next time. If all checks 
   are successful, the client responds with the EAP-Response/AKA-
   Reauthentication packet, including the AT_COUNTER attribute with the 
   same counter value and the AT_MAC attribute. 
    
   The server verifies the AT_MAC attribute and also verifies that the 
   counter value is the same that it used in the EAP-Request/AKA-
   Reauthentication packet. If these checks are successful, the re-
   authentication has succeeded and the server sends the EAP-Success 
   packet to the client. 
    















     
   Arkko and Haverinen     Expires in six months            [Page 23] 


                        EAP AKA Authentication               June 2003 
    
       Client                                             Authenticator 
          |                                                       | 
          |                               EAP-Request/Identity    | 
          |<------------------------------------------------------| 
          |                                                       | 
          | EAP-Response/Identity                                 | 
          | (Includes a re-authentication identity)               | 
          |------------------------------------------------------>| 
          |                                                       | 
          |                          +--------------------------------+ 
          |                          | Server recognizes the identity | 
          |                          | and agrees on using fast       | 
          |                          | re-authentication              | 
          |                          +--------------------------------+ 
          |                                                       | 
          |  EAP-Request/AKA-Reauthentication                     | 
          |  (AT_IV, AT_ENCR_DATA, *AT_COUNTER,                   | 
          |   *AT_NONCE_S, *AT_NEXT_REAUTH_ID, AT_MAC)            | 
          |<------------------------------------------------------| 
          |                                                       | 
          |                                                       | 
     +-----------------------------------------------+            | 
     | Client verifies AT_MAC and the freshness of   |            | 
     | the counter. Client MAY store the new re-     |            | 
     | authentication identity for next re-auth.     |            | 
     +-----------------------------------------------+            | 
          |                                                       | 
          | EAP-Response/AKA-Reauthentication                     | 
          | (AT_IV, AT_ENCR_DATA, *AT_COUNTER with same value,    | 
          |  AT_MAC)                                              | 
          |------------------------------------------------------>| 
          |                                                       | 
          |                          +--------------------------------+ 
          |                          | Server verifies AT_MAC and     | 
          |                          | the counter                    | 
          |                          +--------------------------------+ 
          |                                                       | 
          |                                          EAP-Success  | 
          |<------------------------------------------------------| 
          |                                                       | 
    
   If the client does not accept the counter value of EAP-Request/AKA-
   Reauthentication, it indicates the counter synchronization problem 
   by including the encrypted AT_COUNTER_TOO_SMALL in EAP-Response/AKA-
   Reauthentication. The server responds with EAP-Request/AKA-Challenge 
   to initiate a normal full authentication procedure. This is 
   illustrated in the following figure. Encrypted attributes are 
   denoted with '*'. 
    





     
   Arkko and Haverinen     Expires in six months            [Page 24] 


                        EAP AKA Authentication               June 2003 
    
       Client                                             Authenticator 
          |                                                       | 
          |                               EAP-Request/Identity    | 
          |<------------------------------------------------------| 
          |                                                       | 
          | EAP-Response/Identity                                 | 
          | (Includes a re-authentication identity)               | 
          |------------------------------------------------------>| 
          |                                                       | 
          |  EAP-Request/AKA-Reauthentication                     | 
          |  (AT_IV, AT_ENCR_DATA, *AT_COUNTER,                   | 
          |   *AT_NONCE_S, *AT_NEXT_REAUTH_ID, AT_MAC)            | 
          |<------------------------------------------------------| 
          |                                                       | 
     +-----------------------------------------------+            | 
     | AT_MAC is valid but the counter is not fresh. |            | 
     +-----------------------------------------------+            | 
          |                                                       | 
          | EAP-Response/AKA-Reauthentication                     | 
          | (AT_IV, AT_ENCR_DATA, *AT_COUNTER_TOO_SMALL,          | 
          |  *AT_COUNTER, AT_MAC)                                 | 
          |------------------------------------------------------>| 
          |                                                       | 
          |            +----------------------------------------------+ 
          |            | Server verifies AT_MAC but detects           | 
          |            | That client has included AT_COUNTER_TOO_SMALL| 
          |            +----------------------------------------------+ 
          |                                                       | 
          |                        EAP-Request/AKA-Challenge      | 
          |<------------------------------------------------------| 
          |                                                       | 
     +---------------------------------------------------------------+ 
     |                Normal full authentication follows.            | 
     +---------------------------------------------------------------+ 
          |                                                       | 
    
   In the figure above, the first three messages are similar to the 
   basic re-authentication case. When the client detects that the 
   counter value is not fresh, it includes the AT_COUNTER_TOO_SMALL 
   attribute in EAP-Response/AKA-Reauthentication. This attribute 
   doesn't contain any data but it is a request for the server to 
   initiate full authentication. In this case, the client MUST ignore 
   the contents of the server's AT_NEXT_REAUTH_ID attribute. 
    
   On receipt of AT_COUNTER_TOO_SMALL, the server verifies AT_MAC and 
   verifies that AT_COUNTER contains the same as in the EAP-
   Request/AKA-Reauthentication packet. If not, the server silently 
   discards the EAP-Response/AKA-Reauthentication packet. If all checks 
   on the packet are successful, the server transmits a EAP-
   Request/AKA-Challenge packet and the full authentication procedure 
   is performed as usual. Since the server already knows the subscriber 
   identity, it MUST NOT use the EAP-Request/AKA-Identity packet to 
   request the identity. 
    
     
   Arkko and Haverinen     Expires in six months            [Page 25] 


                        EAP AKA Authentication               June 2003 
    
6. Message Format 
    
   The Type-Data of the EAP AKA packets begins with a 1-octet Subtype 
   field, which is followed by a 2-octet reserved field. The rest of 
   the Type-Data consists of attributes that are encoded in Type, 
   Length, Value format. The figure below shows the generic format of 
   an attribute. 

       0                   1                   2                   3 
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
      |Attribute Type |    Length     | Value...   
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    

   Attribute Type 

      Indicates the particular type of attribute. The attribute type 
      values are listed in Section 11. 

   Length 

      Indicates the length of this attribute in multiples of 4 bytes. 
      The maximum length of an attribute is 1024 bytes. The length 
      includes the Attribute Type and Length bytes. 

   Value 

      The particular data associated with this attribute. This field is 
      always included and it is two or more bytes in length. The type 
      and length fields determine the format and length of the value 
      field. 

   When an attribute numbered within the range 0 through 127 is 
   encountered but not recognized, the EAP/AKA message containing that 
   attribute MUST be silently discarded. These attributes are called 
   non-skippable attributes. 

   When an attribute numbered in the range 128 through 255 is 
   encountered but not recognized that particular attribute is ignored, 
   but the rest of the attributes and message data MUST still be 
   processed. The Length field of the attribute is used to skip the 
   attribute value when searching for the next attribute. These 
   attributes are called skippable attributes. 

   EAP/AKA packets do not include a version field. However, should 
   there be a reason to revise this protocol in the future, new non-
   skippable or skippable attributes could be specified in order to 
   implement revised EAP/AKA versions in a backward-compatible manner. 

   Unless otherwise specified, the order of the attributes in an EAP 
   AKA message is insignificant, and an EAP AKA implementation should 
   not assume a certain order to be used. 

     
   Arkko and Haverinen     Expires in six months            [Page 26] 


                        EAP AKA Authentication               June 2003 
    
   Attributes can be encapsulated within other attributes. In other 
   words, the value field of an attribute type can be specified to 
   contain other attributes. 
    
7. Message Authentication and Encryption 
    
   This section specifies EAP/AKA attributes for attribute encryption 
   and EAP/AKA message authentication. 
    
   Encryption and integrity protection are based on the AKA session 
   keys CK and IK. Because the CK and IK keys are derived from the RAND 
   challenge, these attributes can only be used in the EAP-Request/AKA-
   Challenge message and any EAP/AKA messages sent after it. For 
   example, these attributes cannot be used in EAP-Request/AKA-
   Identity, because the RAND challenge has not yet been transmitted at 
   that point. Integrity protection with AT_MAC MUST be used in all 
   messages when keys have been derived.  
    
7.1. AT_MAC Attribute 
    
   The AT_MAC attribute can be used for EAP/AKA message integrity 
   protection. Whenever AT_ENCR_DATA (Section 7.3) is included in an 
   EAP message, it MUST be followed (not necessarily immediately) by an 
   AT_MAC attribute. Messages that do not meet this condition MUST be 
   silently discarded. 
    
   The value field of the AT_MAC attribute contains two reserved bytes 
   followed by a message authentication code (MAC). The MAC is 
   calculated over the whole EAP packet, concatenated with optional 
   message-specific data, with the exception that the value field of 
   the MAC attribute is set to zero when calculating the MAC. The 
   reserved bytes are set to zero when sending and ignored on 
   reception.  
    
   The contents of the message-specific data, if present, are specified 
   separately for each EAP/AKA message. The message-specific data is 
   included in order to protect data that is not transmitted with the 
   EAP packet. 
    
   The format of the AT_MAC attribute is shown below. 
    
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     AT_MAC    | Length = 5    |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   |                           MAC                                 | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
   The MAC algorithm is HMAC-SHA1-128 [9] keyed hash value. (The HMAC-
   SHA1-128 value is obtained from the 20-byte HMAC-SHA1 value by 
     
   Arkko and Haverinen     Expires in six months            [Page 27] 


                        EAP AKA Authentication               June 2003 
    
   truncating the output to 16 bytes. Hence, the length of the MAC is 
   16 bytes.) The message authentication key (K_aut) used in the 
   calculation of the MAC is derived from the AKA integrity key (IK) 
   and cipher key (CK), as specified in Section 10.  
    
7.2. AT_CHECKCODE Attribute 
    
   The AT_MAC attribute is not used in the very first EAP/AKA messages, 
   because keying material has not been derived yet. The client and the 
   server may exchange one or more pairs of EAP/AKA messages of the 
   Subtype AKA-Identity before keys are derived and before the AT_MAC 
   attribute can be applied. The EAP/AKA-Identity messages may also be 
   used upon re-authentication. 
     
   The AT_CHECKCODE attribute MAY be used to protect the EAP/AKA-
   Identity messages. AT_CHECKCODE is included in EAP-Request/AKA-
   Challenge and/or EAP-Response/AKA-Challenge upon full 
   authentication. In re-authentication, AT_CHECKCODE can be included 
   in EAP-Request/AKA-Reauthentication and/or EAP-Response/AKA-
   Reauthentication. Because the AT_MAC attribute is used in these 
   messages, AT_CHECKCODE will be integrity protected with AT_MAC. 
   The format of the AT_CHECKCODE attribute is shown below. 
    
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   | AT_CHECKCODE  | Length        |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   |                     Checkcode (0 or 20 bytes)                 | 
   |                                                               | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
   The value field of AT_CHECKCODE begins with two reserved bytes, 
   which may be followed by a 20-byte checkcode. If the checkcode is 
   not included in AT_CHECKCODE, then the attribute indicates that no 
   EAP/AKA-Identity messages were exchanged. This may occur in both 
   full authentication and re-authentication. The reserved bytes are 
   set to zero when sending and ignored on reception. 
    
   The checkcode is a hash value, calculated with SHA1 [10], over all 
   EAP-Request/AKA-Identity and EAP-Response/ AKA-Identity packets 
   exchanged in this authentication exchange. The packets are included 
   in the order that they were transmitted, that is, starting with the 
   first EAP-Request/ AKA-Identity message, followed by the 
   corresponding EAP-Response/ AKA-Identity, followed by the second 
   EAP-Request/ AKA-Identity (if used) etc. 
    
   EAP packets are included in the hash calculation "as-is", as they 
   were transmitted or received. All reserved bytes, padding bytes etc. 
   that are specified for various attributes are included as such, and 
   the receiver must not reset them to zero. No delimiter bytes, 
     
   Arkko and Haverinen     Expires in six months            [Page 28] 


                        EAP AKA Authentication               June 2003 
    
   padding or any other framing are included between the EAP packets 
   when calculating the checkcode. 
    
   Messages are included in request/response pairs; in other words only 
   full "round trips" are included. Packets that are silently discarded 
   are not included. The EAP server must only include an EAP-
   Request/AKA-Identity in the calculation once it has received a 
   corresponding response, with the same Identifier value. 
   Retransmissions or requests to which the server does not receive 
   response are not included. 
    
   The client must include the EAP-Request/AKA-Identity and the 
   corresponding response in the calculation only if the client 
   receives a subsequent EAP-Request/AKA-Challenge, or a follow-up EAP-
   Request/AKA-Identity with different attributes (attribute types) 
   than in the first EAP-Request/AKA-Identity. After sending EAP-
   Response/AKA-Identity, if the client receives another EAP-
   Request/AKA-Identity with the same attributes as in the previous 
   request, then the client's response to the first request must have 
   been lost. In this case the client must not include the first 
   request and its response in the calculation of the checkcode. 
    
   The AT_CHECKCODE attribute is optional to implement. It is specified 
   in order to allow protecting the EAP/ AKA-Identity messages and any 
   future extensions to them. The implementation of AT_CHECKCODE is 
   recommended. 
    
   If the receiver of AT_CHECKCODE implements this attribute, then the 
   receiver MUST check that the checkcode is correct. If the checkcode 
   is invalid, the receiver must terminate the authentication exchange. 
    
   If the EAP/AKA-Identity messages are extended with new attributes 
   then AT_CHECKCODE must be implemented and used. More specifically, 
   if the server includes any other attributes than 
   AT_PERMANENT_ID_REQ, AT_FULLAUTH_ID_REQ or AT_ANY_ID_REQ in the EAP-
   Request/AKA-Identity packet, then the server MUST include 
   AT_CHECKCODE in EAP-Request/AKA-Challenge or EAP-Request/AKA-
   Reauthentication. If the client includes any other attributes than 
   AT_IDENTITY in the EAP-Response/AKA-Identity message, then the 
   client MUST include AT_CHECKCODE in EAP-Response/AKA-Challenge or 
   EAP-Response/AKA-Reauthentication.  
    
   If the server implements the processing of any other attribute than 
   AT_IDENTITY for the EAP-Response/AKA-Identity message, then the 
   server MUST implement AT_CHECKCODE. In this case, if the server 
   receives any other attribute than AT_IDENTITY in the EAP-
   Response/AKA-Identity message, then the server MUST check that 
   AT_CHECKCODE is present in EAP-Response/AKA-Challenge or EAP-
   Response/AKA-Reauthentication. If AT_CHECKCODE is not included, the 
   server must terminate the authentication exchange. 
    
   Similarly, if the client implements the processing of any other 
   attribute than AT_PERMANENT_ID_REQ, AT_FULLAUTH_ID_REQ or 
   AT_ANY_ID_REQ for the EAP-Request/AKA-Identity packet, then the 
     
   Arkko and Haverinen     Expires in six months            [Page 29] 


                        EAP AKA Authentication               June 2003 
    
   client MUST implement AT_CHECKCODE. In this case, if the client 
   receives any other attribute than AT_PERMANENT_ID_REQ, 
   AT_FULLAUTH_ID_REQ or AT_ANY_ID_REQ in the EAP-Request/AKA-Identity 
   packet, then the client MUST check that AT_CHECKCODE is present in 
   EAP-Request/AKA-Challenge or EAP-Request/AKA-Reauthentication. If 
   the attribute was not included, the client must terminate the 
   authentication exchange. 
    
7.3. AT_IV, AT_ENCR_DATA and AT_PADDING Attributes 
    
   AT_IV and AT_ENCR_DATA attributes can be optionally used to transmit 
   encrypted information between the EAP/AKA client and server.  
    
   The value field of AT_IV contains two reserved bytes followed by a 
   16-byte initialization vector required by the AT_ENCR_DATA 
   attribute. The reserved bytes are set to zero when sending and 
   ignored on reception. The AT_IV attribute MUST be included if and 
   only if the AT_ENCR_DATA is included. Messages that do not meet this 
   condition MUST be silently discarded. 
    
   The sender of the AT_IV attribute chooses the initialization vector 
   by random. The sender MUST NOT reuse the initialization vector value 
   from previous EAP AKA packets but the sender MUST choose it freshly 
   for each AT_IV attribute. The sends SHOULD use a good source of 
   randomness to generate the initialization vector. The format of 
   AT_IV is shown below. 
    
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     AT_IV     | Length = 5    |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   |                 Initialization Vector                         | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
   The value field of the AT_ENCR_DATA attribute consists of two 
   reserved bytes followed by bytes encrypted using the Advanced 
   Encryption Standard (AES) [11] in the Cipher Block Chaining (CBC) 
   mode of operation, using the initialization vector from the AT_IV 
   attribute. The reserved bytes are set to zero when sending and 
   ignored on reception. Please see [12] for a description of the CBC 
   mode. The format of the AT_ENCR_DATA attribute is shown below. 
    








     
   Arkko and Haverinen     Expires in six months            [Page 30] 


                        EAP AKA Authentication               June 2003 
    
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   | AT_ENCR_DATA  | Length        |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   .                    Encrypted Data                             . 
   .                                                               . 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
    
   The encryption key (K_encr) is derived is derived from the AKA 
   integrity key (IK) and cipher key (CK), as specified in Section10. 
   The plaintext consists of nested EAP/AKA attributes. 
    
   The encryption algorithm requires the length of the plaintext to be 
   a multiple of 16 bytes. The sender may need to include the 
   AT_PADDING attribute as the last attribute within AT_ENCR_DATA. The 
   AT_PADDING attribute is not included if the total length of other 
   nested attributes within the AT_ENCR_DATA attribute is a multiple of 
   16 bytes. As usual, the Length of the Padding attribute includes the 
   Attribute Type and Attribute Length fields. The Length of the 
   Padding attribute is 4, 8 or 12 bytes. It is chosen so that the 
   length of the value field of the AT_ENCR_DATA attribute becomes a 
   multiple of 16 bytes. The actual pad bytes in the value field are 
   set to zero (0x00) on sending. The recipient of the message MUST 
   verify that the pad bytes are set to zero, and silently drop the 
   message if this verification fails. The format of the AT_PADDING 
   attribute is shown below. 
    
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |  AT_PADDING   | Length        | Padding...                    | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
8. Messages 
    
8.1. EAP-Request/AKA-Challenge 
    
   The format of the EAP-Request/AKA-Challenge packet is shown below. 
    








     
   Arkko and Haverinen     Expires in six months            [Page 31] 


                        EAP AKA Authentication               June 2003 
    
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     Code      |  Identifier   |            Length             | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     Type      |    Subtype    |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |    AT_RAND    | Length = 5    |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   |                             RAND                              | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |    AT_AUTN    | Length = 5    |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   |                        AUTN                                   | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     AT_IV     | Length = 5    |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   |                 Initialization Vector (optional)              | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   | AT_ENCR_DATA  | Length        |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   |                    Encrypted Data (optional)                  | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   | AT_CHECKCODE  | Length        |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   |                   Checkcode (optional)                        | 
   |                                                               | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     AT_MAC    | Length = 5    |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   |                           MAC                                 | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
   The semantics of the fields is described below: 
    

     
   Arkko and Haverinen     Expires in six months            [Page 32] 


                        EAP AKA Authentication               June 2003 
    
   Code 

      1 for Request 

   Identifier 

      See [5] 

   Length 

      The length of the EAP Request packet. 

   Type 

      23 

   Subtype 

      1 for AKA-Challenge 

   Reserved 

      Set to zero when sending, ignored on reception. 

   AT_RAND 

      The value field of this attribute contains two reserved bytes 
      followed by the AKA RAND parameter, 16 bytes (128 bits). The 
      reserved bytes are set to zero when sending and ignored on 
      reception. The AT_RAND attribute MUST be present in EAP-
      Request/AKA-Challenge. 

   AT_AUTN 

      The value field of this attribute contains two reserved bytes 
      followed by the AKA AUTN parameter, 16 bytes (128 bits). The 
      reserved bytes are set to zero when sending and ignored on 
      reception. The AT_AUTN attribute MUST be included.  

   AT_IV 

      See Section 7.3. 

   AT_ENCR_DATA 

      See Section 7.3. The nested attributes that are included in the 
      plaintext of AT_ENCR_DATA are described below. 

   AT_CHECKCODE 

      The AT_CHECKCODE attribute is optional to include. See section 
      7.2 


     
   Arkko and Haverinen     Expires in six months            [Page 33] 


                        EAP AKA Authentication               June 2003 
    
   AT_MAC 

      AT_MAC MUST be included. In EAP-Request/AKA-Challenge, there is 
      no message-specific data covered by the MAC. See Section 7.1. 

   In the EAP-Request/AKA-Challege message, the AT_IV, AT_ENCR_DATA and 
   AT_MAC attributes are used for Identity privacy and for 
   communicating the next re-authentication identity. The plaintext of 
   the AT_ENCR_DATA value field consists of nested attributes, which 
   are shown below. Later versions of this protocol MAY specify 
   additional attributes to be included within the encrypted data. 
    
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   | AT_NEXT_PS... | Length        | Actual Pseudonym Length       | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   .                        Next Pseudonym                         . 
   .                                                               . 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   | AT_NEXT_REAU..| Length        | Actual Re-Auth Identity Length| 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   .                   Next Re-authentication Username             . 
   .                                                               . 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |  AT_PADDING   | Length        | Padding...                    | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
   AT_NEXT_PSEUDONYM 

      This attribute is optional. The value field of this attribute 
      begins with a 2-byte actual pseudonym length, which specifies the 
      length of the pseudonym in bytes. This field is followed by a 
      pseudonym user name, of the indicated actual length, that the 
      client can use in the next authentication, as described in 
      Section 4.3. The user name does not include any terminating null 
      characters. Because the length of the attribute must be a 
      multiple of 4 bytes, the sender pads the pseudonym with zero 
      bytes when necessary. 

   AT_NEXT_REAUTH_ID 

      The AT_NEXT_REAUTH_ID attribute is optional to include. The value 
      field of this attribute begins with a 2-byte actual re-
      authentication identity length, which specifies the length of the 
      re-authentication identity in bytes. This field is followed by a 
      re-authentication identity, of the indicated actual length, that 
     
   Arkko and Haverinen     Expires in six months            [Page 34] 


                        EAP AKA Authentication               June 2003 
    
      the client can use in the next re-authentication, as described in 
      Section 5. The re-authentication identity includes both a 
      username portion and a realm name portion. The re-authentication 
      identity does not include any terminating null characters. 
      Because the length of the attribute must be a multiple of 4 
      bytes, the sender pads the re-authentication identity with zero 
      bytes when necessary.  

   AT_PADDING 

      AT_PADDING is optional to include. See Section 7.3. 

8.2. EAP-Response/AKA-Challenge 
    
   The format of the EAP-Response/AKA-Challenge packet is shown below.  
    
   Later versions of this protocol MAY make use of the AT_ENCR_DATA and 
   AT_IV attributes in this message to include encrypted (skippable) 
   attributes. AT_MAC, AT_ENCR_DATA and AT_IV attributes are not shown 
   in the figure below. If present, they are processed as in EAP-
   Request/AKA-Challenge packet. The EAP server MUST process EAP-
   Response/AKA-Challenge messages that include these attributes even 
   if the server did not implement these optional attributes. 
    
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     Code      |  Identifier   |            Length             | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     Type      |   Subtype     |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     AT_RES    |    Length     |          RES Length           | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-| 
   |                                                               | 
   |                             RES                               | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   | AT_CHECKCODE  | Length        |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   |                   Checkcode (optional)                        | 
   |                                                               | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     AT_MAC    | Length = 5    |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   |                           MAC                                 | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
     
   Arkko and Haverinen     Expires in six months            [Page 35] 


                        EAP AKA Authentication               June 2003 
    
   The semantics of the fields is described below: 
    
   Code 

      2 for Response 

   Identifier 

      See [5] 

   Length 

      The length of the EAP Response packet. 

   Type 

      23 

   Subtype 

      1 for AKA-Challenge 

   Reserved 

      Set to zero when sending, ignored on reception. 

   AT_RES 

      This attribute MUST be included in EAP-Response/AKA-Challenge. 
      The value field of this attribute begins with the 2-byte RES 
      Length, which is identifies the exact length of the RES in bits. 
      The RES length is followed by the UMTS AKA RES parameter. 
      According to the specification [13] the length of the AKA RES can 
      vary between 32 and 128 bits. Because the length of the AT_RES 
      attribute must be a multiple of 4 bytes, the sender pads the RES 
      with zero bits where necessary.  

   AT_CHECKCODE 

      The AT_CHECKCODE attribute is optional to include. See section 
      7.2 

   AT_MAC 

      AT_MAC MUST be included. In EAP-Response/AKA-Challenge, there is 
      no message-specific data covered by the MAC. See Section 7.1. 

8.3. EAP-Response/AKA-Authentication-Reject 
    
   The format of the EAP-Response/AKA-Authentication-Reject packet is 
   shown below. 
    


     
   Arkko and Haverinen     Expires in six months            [Page 36] 


                        EAP AKA Authentication               June 2003 
    
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     Code      |  Identifier   |            Length             | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     Type      |   Subtype     |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
   The semantics of the fields is described below: 
    
   Code 

      2 for Response 

   Identifier 

      See [5] 

   Length 

      The length of the EAP Response packet. 

   Type 

      23 

   Subtype 

      2 for AKA-Authentication-Reject 

   Reserved 

      Set to zero on sending, ignored on reception. 

    
8.4. EAP-Response/AKA-Synchronization-Failure 
    
   The format of the EAP-Response/AKA-Synchronization-Failure packet is 
   shown below. 
    
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     Code      |  Identifier   |            Length             | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     Type      |   Subtype     |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+| 
   |    AT_AUTS    | Length = 4    |                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               | 
   |                                                               | 
   |                             AUTS                              | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
     
   Arkko and Haverinen     Expires in six months            [Page 37] 


                        EAP AKA Authentication               June 2003 
    
   The semantics of the fields is described below: 
    
   Code 

      2 for Response 

   Identifier 

      See [5] 

   Length 

      The length of the EAP Response packet, 20. 

   Type 

      23 

   Subtype 

      4 for AKA-Synchronization-Failure 

   AT_AUTS 

      This attribute MUST be included in EAP-Response/AKA-
      Synchronization-Failure. The value field of this attribute 
      contains the AKA AUTS parameter, 112 bits (14 bytes). 

8.5. EAP-Request/AKA-Identity 
    
   The format of the EAP-Request/AKA-Identity packet is shown below. 
    
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     Code      |  Identifier   |            Length             | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     Type      |   Subtype     |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |AT_PERM..._REQ | Length = 1    |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |AT_FULL..._REQ | Length = 1    |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |AT_ANY_ID_REQ  | Length = 1    |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
   The semantics of the fields is described below: 
    
   Code 

      1 for Request 



     
   Arkko and Haverinen     Expires in six months            [Page 38] 


                        EAP AKA Authentication               June 2003 
    
   Identifier 

      See [5] 

   Length 

      The length of the EAP Request packet. 

   Type 

      23 

   Subtype 

      5 for AKA-Identity 

   Reserved 

      Set to zero on sending, ignored on reception. 

   AT_PERMANENT_ID_REQ 

      The AT_PERMANENT_ID_REQ attribute is optional to include and it 
      is included in the cases defined in Section 4.3. It MUST NOT be 
      included if AT_ANY_ID_REQ or AT_FULLAUTH_ID_REQ is included. The 
      value field only contains two reserved bytes, which are set to 
      zero on sending and ignored on reception. 

   AT_FULLAUTH_ID_REQ 

      The AT_FULLAUTH_ID_REQ attribute is optional to include and it is 
      included in the cases defined in Section 4.2. It MUST NOT be 
      included if AT_ANY_ID_REQ or AT_PERMANENT_ID_REQ is included. The 
      value field only contains two reserved bytes, which are set to 
      zero on sending and ignored on reception. 

   AT_ANY_ID_REQ 

      The AT_ANY_ID_REQ attribute is optional and it is included in the 
      cases defined in Section 4.2. It MUST NOT be included if 
      AT_PERMANENT_ID_REQ or AT_FULLAUTH_ID_REQ is included. The value 
      field only contains two reserved bytes, which are set to zero on 
      sending and ignored on reception. 

8.6. EAP-Response/AKA-Identity 
    
   The format of the EAP-Response/AKA-Identity packet is shown below. 
    






     
   Arkko and Haverinen     Expires in six months            [Page 39] 


                        EAP AKA Authentication               June 2003 
    
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     Code      |  Identifier   |            Length             | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |     Type      |   Subtype     |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   | AT_IDENTITY   | Length        | Actual Identity Length        | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   .                 Current Identity                              . 
   .                                                               . 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
   The semantics of the fields is described below: 
    
   Code 

      2 for Response 

   Identifier 

      See [5] 

   Length 

      The length of the EAP Response packet. 

   Type 

      23 

   Subtype 

      5 for AKA-Identity 

   Reserved 

      Set to zero on sending, ignored on reception. 

   AT_IDENTITY 

      The AT_IDENTITY attribute is optional to include and it is 
      included in cases defined in Section 4.2 and 4.3. The value field 
      of this attribute begins with 2-byte actual identity length, 
      which specifies the length of the identity in bytes. This field 
      is followed by the subscriber identity of the indicated actual 
      length, in the same Network Access Identifier format that is used 
      in EAP-Response/Identity, i.e. including the NAI realm portion. 
      The identity is the permanent identity, a pseudonym identity or a 
      re-authentication identity. The identity format is specified in 
      Section 4.1. The identity does not include any terminating null 
      characters. Because the length of the attribute must be a 
     
   Arkko and Haverinen     Expires in six months            [Page 40] 


                        EAP AKA Authentication               June 2003 
    
      multiple of 4 bytes, the sender pads the identity with zero bytes 
      when necessary. 

    
8.7. EAP-Request/AKA-Reauthentication 
    
   The format of the EAP-Request/AKA-Reauthentication packet is shown 
   below.  
    
     0                   1                   2                   3 
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |     Code      |  Identifier   |            Length             | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |     Type      |    Subtype    |           Reserved            | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    | AT_IV         | Length = 5    |           Reserved            | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |                                                               | 
    |                 Initialization Vector                         | 
    |                                                               | 
    |                                                               | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    | AT_ENCR_DATA  | Length        |           Reserved            | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |                                                               | 
    .                    Encrypted Data                             . 
    .                                                               . 
    |                                                               | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    | AT_CHECKCODE  | Length        |           Reserved            | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |                                                               | 
    |                   Checkcode (optional)                        | 
    |                                                               | 
    |                                                               | 
    |                                                               | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |  AT_MAC       | Length = 5    |           Reserved            | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |                                                               | 
    |                                                               | 
    |                              MAC                              | 
    |                                                               | 
    |                                                               | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
   Code 

      1 for Request 

   Identifier 

      See [5]. 
     
   Arkko and Haverinen     Expires in six months            [Page 41] 


                        EAP AKA Authentication               June 2003 
    
   Length 

      The length of the EAP packet. 

   Type 

      23 

   Subtype 

      13 

   Reserved 

      Set to zero when sending, ignored on reception. 

   AT_IV 

      The AT_IV attribute is MUST be included. See Section 7.3. 

   AT_ENCR_DATA 

      The AT_ENCR_DATA attribute MUST be included. See Section 7.3. The 
      plaintext consists of nested attributes as described below. 

   AT_CHECKCODE 

      The AT_CHECKCODE attribute is optional to include. See section 
      7.2 

   AT_MAC 

      AT_MAC MUST be included. No message-specific data is included in 
      the MAC calculation. See Section 7.1. 

   The AT_IV and AT_ENCR_DATA attributes are used for communicating 
   encrypted attributes. The plaintext of the AT_ENCR_DATA value field 
   consists of nested attributes, which are shown below. 
    















     
   Arkko and Haverinen     Expires in six months            [Page 42] 


                        EAP AKA Authentication               June 2003 
    
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |  AT_COUNTER   | Length = 1    |           Counter             | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   | AT_NONCE_S    | Length = 5    |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   |                                                               | 
   |                            NONCE_S                            | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   | AT_NEXT_REAU..| Length        | Actual Re-Auth Identity Length| 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |                                                               | 
   .                   Next Re-authentication Username             . 
   .                                                               . 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |  AT_PADDING   | Length        | Padding...                    | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
   AT_COUNTER 

      The AT_COUNTER attribute MUST be included. The value field 
      consists of a 16-bit unsigned integer counter value, represented 
      in network byte order. 

   AT_NONCE_S 

      The AT_NONCE_S attribute MUST be included. The value field 
      contains two reserved bytes followed by a random number generated 
      by the server (16 bytes) freshly for this EAP/AKA re-
      authentication. The random number is used as challenge for the 
      client and also a seed value for the new keying material. The 
      reserved bytes are set to zero upon sending and ignored upon 
      reception. 

   AT_NEXT_REAUTH_ID 

      The AT_NEXT_REAUTH_ID attribute is optional to include. The 
      attribute is described in Section 8.1. 

   AT_PADDING 

      The AT_PADDING attribute is optional to include. See section 7.3 

8.8. EAP-Response/AKA-Reauthentication 
    

     
   Arkko and Haverinen     Expires in six months            [Page 43] 


                        EAP AKA Authentication               June 2003 
    
   The format of the EAP-Response/AKA-Reauthentication packet is shown 
   below. 
    
     0                   1                   2                   3 
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |     Code      |  Identifier   |            Length             | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |     Type      |    Subtype    |           Reserved            | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    | AT_IV         | Length = 5    |           Reserved            | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |                                                               | 
    |                 Initialization Vector                         | 
    |                                                               | 
    |                                                               | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    | AT_ENCR_DATA  | Length        |           Reserved            | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |                                                               | 
    .                    Encrypted Data                             . 
    .                                                               . 
    |                                                               | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    | AT_CHECKCODE  | Length        |           Reserved            | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |                                                               | 
    |                   Checkcode (optional)                        | 
    |                                                               | 
    |                                                               | 
    |                                                               | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |  AT_MAC       | Length = 5    |           Reserved            | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |                                                               | 
    |                                                               | 
    |                              MAC                              | 
    |                                                               | 
    |                                                               | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
   Code 

      2 for Response 

   Identifier 

      See [5]. 

   Length 

      The length of the EAP packet. 


     
   Arkko and Haverinen     Expires in six months            [Page 44] 


                        EAP AKA Authentication               June 2003 
    
   Type 

      23 

   Subtype 

      13 

   Reserved 

      Set to zero when sending, ignored on reception. 

   AT_IV 

      The AT_IV attribute is MUST be included. See Section 7.3. 

   AT_ENCR_DATA 

      The AT_ENCR_DATA attribute MUST be included. See Section 7.3. The 
      plaintext consists of nested attributes as described below. 

   AT_CHECKCODE 

      The AT_CHECKCODE attribute is optional to include. See section 
      7.2 

   AT_MAC 

      For EAP-Response/AKA-Reauthentication, the MAC code is calculated 
      over the following data: 

          EAP packet| NONCE_S 

      The EAP packet is represented as specified in Section 7.1. It is 
      followed by the 16-byte NONCE_S value from the server's 
      AT_NONCE_S attribute. 

   The AT_IV and AT_ENCR_DATA attributes are used for communicating 
   encrypted attributes. The plaintext of the AT_ENCR_DATA value field 
   consists of nested attributes, which are shown below. 
    
    0                   1                   2                   3 
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |  AT_COUNTER   | Length = 1    |           Counter             | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |  AT_COUNTER...| Length = 1    |           Reserved            | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
   |  AT_PADDING   | Length        | Padding...                    | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               | 
   |                                                               | 
   |                                                               | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
     
   Arkko and Haverinen     Expires in six months            [Page 45] 


                        EAP AKA Authentication               June 2003 
    
   AT_COUNTER 

      The AT_COUNTER attribute MUST be included. The format of this 
      attribute is specified in Section 8.7. 

   AT_COUNTER_TOO_SMALL 

      The AT_COUNTER_TOO_SMALL attribute is optional to include, and it 
      is included in cases specified in Section 5. 

   AT_PADDING 

      The AT_PADDING attribute is optional to include. See section 7.3 

    
8.9. EAP/AKA Notifications 
    
   The EAP-Request/Notification, specified in [5], can be used to 
   convey a displayable message from the authenticator to the client. 
   Because these messages are textual messages, it may be hard for the 
   client to present them in the user's preferred language. Therefore, 
   EAP/AKA uses a separate EAP/AKA message subtype to transmit 
   localizable notification codes instead of the EAP-
   Request/Notification packet. 
    
   The EAP server MAY issue an EAP-Request/AKA-Notification packet to 
   the client. The client MAY show a notification message to the user 
   and the client MUST respond to the EAP server with an EAP-
   Response/AKA-Notification packet, even if the client did not 
   recognize the notification code.  
    
   The notification code is a 16-bit number. The most significant bit 
   is called the Failure bit (F bit). The F bit specifies whether the 
   notification implies failure. The code values with the F bit set to 
   zero (code values 0...32767) are used on unsuccessful cases. The 
   receipt of a notification code from this range implies failed 
   authentication, so the client can use the notification as a failure 
   indication. After receiving the EAP-Response/AKA-Notification for 
   these notification codes, the server MUST send the EAP-Failure 
   packet. 
    
   The receipt of a notification code with the F bit set to one (values 
   32768...65536) does not imply failure, so the client MUST NOT change 
   its state when it receives such a notification. 
    
   The second most significant bit of the notification code is called 
   the Phase bit (P bit). It specifies at which phase of the EAP/AKA 
   exchange the notification can be used. If the P bit is set to zero, 
   the notification can only be used after the EAP/AKA-Challenge round 
   in full authentication or the EAP/AKA-Reauthentication round in re-
   autentication. For these notifications, the AT_MAC attribute MUST be 
   included in both EAP-Request/AKA-Notification and EAP-Response/AKA-
   Notification. 
    
     
   Arkko and Haverinen     Expires in six months            [Page 46] 


                        EAP AKA Authentication               June 2003 
    
   If the P bit of the notification code is set to one, the 
   notification can only by used before the EAP/AKA-Challenge round in 
   full authentication or the EAP/AKA-Reauthentication round in 
   reauthentication. For these notifications, the AT_MAC attribute MUST 
   NOT be included in either EAP-Request/AKA-Notification or EAP-
   Response/AKA-Notification. 
    
   Some of the notification codes are authorization related and hence 
   not usually considered as part of the responsibility of an EAP 
   method. However, they are included as part of EAP/AKA because there 
   are currently no other ways to convey this information to the user 
   in a localizable way, and the information is potentially useful for 
   the user. An EAP/AKA server implementation may decide never to send 
   these EAP/AKA notifications. 
    
   The format of the EAP-Request/AKA-Notification packet is shown 
   below. 
    
     0                   1                   2                   3 
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |     Code      |  Identifier   |            Length             | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |     Type      |    Subtype    |           Reserved            | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |AT_NOTIFICATION| Length = 1    |F|P|     Notification Code     | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |  AT_MAC       | Length = 5    |           Reserved            | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |                                                               | 
    |                                                               | 
    |                              MAC                              | 
    |                                                               | 
    |                                                               | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
   Code 

      1 for Request 

   Identifier 

      See [5]. 

   Length 

      The length of the EAP packet. 

   Type 

      23 



     
   Arkko and Haverinen     Expires in six months            [Page 47] 


                        EAP AKA Authentication               June 2003 
    
   Subtype 

      12 

   Reserved 

      Set to zero when sending, ignored on reception. 

   AT_NOTIFICATION 

      The AT_NOTIFICATION attribute MUST be included. The value field 
      of this attribute contains a two-byte notification code. The 
      first and second bit (F and P) of the notification code are 
      interpreted as described above. 

      The following code values have been reserved. The descriptions 
      below illustrate the semantics of the notifications. The client 
      implementation MAY use different wordings when presenting the 
      notifications to the user. The "requested service" depends on the 
      environment where EAP/AKA is applied. 

      1026 - User has been temporarily denied access to the requested 
      service (Implies failure, used after the challenge round) 

      1031 - User has not subscribed to the requested service (Implies 
      failure, used after the challenge round) 

   AT_MAC 

      AT_MAC is included in cases described above. No message-specific 
      data is included in the MAC calculation. See Section 7.1. 

    
   The format of the EAP-Response/AKA-Notification packet is shown 
   below. Because this packet is only an acknowledgement of EAP-
   Request/AKA-Notification, it does not contain any mandatory 
   attributes. 
    
     0                   1                   2                   3 
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |     Code      |  Identifier   |            Length             | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |     Type      |    Subtype    |           Reserved            | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |  AT_MAC       | Length = 5    |           Reserved            | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    |                                                               | 
    |                                                               | 
    |                              MAC                              | 
    |                                                               | 
    |                                                               | 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
    
     
   Arkko and Haverinen     Expires in six months            [Page 48] 


                        EAP AKA Authentication               June 2003 
    
   Code 

      2 for Response 

   Identifier 

      See [5]. 

   Length 

      The length of the EAP packet. 

   Type 

      23 

   Subtype 

      12 

   Reserved 

      Set to zero when sending, ignored on reception. 

   AT_MAC 

      AT_MAC is included in cases described above. No message-specific 
      data is included in the MAC calculation. See Section 7.1. 

    
9. Error Cases and the Usage of EAP-Failure and EAP-Success 
    
9.1. Processing Erroneous Packets 
    
   In general, if an EAP/AKA client or server implementation detects an 
   error in a received EAP/AKA packet, the EAP/AKA implementation 
   silently ignores the EAP packet, does not change its state and does 
   not send any EAP messages to its peer. Examples of such errors, 
   specified in detail elsewhere in this document, are an invalid 
   AT_MAC value, a mandatory attribute is missing, illegal attributes 
   included and an unrecognized non-skippable attribute. If no valid 
   packets are received, the authentication exchange will eventually 
   time out. 
    
   If the EAP/AKA client receives an EAP/AKA Request of an unrecognized 
   subtype, the EAP/AKA client MUST silently discard the EAP request. 
    
9.2. EAP-Failure 
    
   As normally in EAP, the EAP server sends the EAP-Failure packet to 
   the client when the authentication procedure fails on the EAP 
   Server. In EAP/AKA, this may occur for example if the EAP server 
   does not recognize the user identity, or if the EAP server is not 

     
   Arkko and Haverinen     Expires in six months            [Page 49] 


                        EAP AKA Authentication               June 2003 
    
   able to obtain authentication vectors for the subscriber or the 
   authentication exchange times out. 
    
   The server can send EAP-Failure at any time in the EAP exchange. The 
   client MUST process EAP-Failure. 
    
9.3. EAP-Success 
    
   On full authentication, the server can only send EAP-Success after 
   the EAP/AKA-Challenge round. The client MUST silently discard any 
   EAP-Success packets if they are received before the client has 
   successfully authenticated the server and sent the EAP-Response/AKA-
   Challenge packet. 
    
   On re-authentication, EAP-Success can only be sent after the 
   EAP/AKA-Reauthentication round. The client MUST silently discard any 
   EAP-Success packets if they are received before the client has 
   successfully authenticated the server and sent the EAP-Response/AKA-
   Reauthentication packet. 
    
   If the client receives an EAP/AKA notification (section 8.9) that 
   indicates failure, then the client MUST no longer accept the EAP-
   Success packet even if the server authentication was successfully 
   completed. 
    
    
10. Key Derivation 
    
   This section specifies how EAP AKA keying material is derived. 
    
   On EAP AKA full authentication, a Master Key (MK) is derived from 
   the underlying UMTS AKA values (IK and CK keys) and the Identity as 
   follows. 
    
   MK = SHA1(Identity|IK|CK) 
    
   The hash function SHA1 is specified in [10]. In the formula above, 
   the "|" character denotes concatenation. Identity denotes the user 
   identity string without any terminating null characters. It is the 
   identity from the AT_IDENTITY attribute from the last EAP-
   Response/AKA-Identity packet, or, if AT_IDENTITY was not used, the 
   identity from the EAP-Response/Identity packet. 
    
   The Master Key is fed into a Pseudo-Random number Function (PRF), 
   which generates separate Transient EAP Keys (TEKs) for protecting 
   EAP AKA packets, as well as a Master Session Key (MSK) for link 
   layer security and an Extended Master Session Key (EMSK) for other 
   purposes. On re-authentication, the same TEKs will be used for 
   protecting EAP packets, but a new MSK and a new EMSK will be derived 
   from the original MK and new values exchanged in the re-
   authentication.  
    
   EAP AKA requires two TEKs for its own purposes, a message 
   authentication key K_aut and an encryption key K_encr, to be used 
     
   Arkko and Haverinen     Expires in six months            [Page 50] 


                        EAP AKA Authentication               June 2003 
    
   with the AT_MAC and AT_ENCR_DATA attributes. The same K_aut and 
   K_encr keys are used in full authentication and subsequent re-
   authentications.  
    
   Key derivation is based on the pseudo-random number generator 
   specified in NIST Federal Information Processing Standards 
   Publication 186-2 [14]. The pseudo-random number generator is 
   specified in the change notice 1 (2001 October 5)of [14] (Algorithm 
   1). As specified in the change notice (page 74), when Algorithm 1 is 
   used as a general-purpose random number generator, the "mod q" term 
   in step 3.2 is omitted. The function G used in the algorithm is 
   constructed via Secure Hash Standard as specified in Appendix 3.3 of 
   the standard. For convenience, the pseudo-random number algorithm 
   with the correct modification is cited in Annex A. 
    
   160-bit XKEY and XVAL values are used, so b = 160. On full 
   authentication, the Master Key is used as the initial secret seed 
   value XKEY  
         
   The optional user input values (XSEED_j) in Step 3.1 are set to 
   zero.  
    
   The resulting 320-bit random numbers x_0, x_1, ..., x_m-1 are 
   concatenated and partitioned into suitable-sized chunks and used as 
   keys in the following order: K_encr (128 bits), K_aut (128 bits), 
   Master Session Key (64 bytes), Extended Master Session Key (64 
   bytes).  
    
   On re-authentication, the same pseudo-random number generator can be 
   used to generate a new Master Session Key and a new Extended Master 
   Session Key. The seed value XKEY' is calculated as follows: 

      XKEY' = SHA1(Identity|counter|NONCE_S|MK) 

   In the formula above, the Identity denotes the re-authentication 
   user identity, without any terminating null characters, from the 
   AT_IDENTITY attribute of the EAP-Response/AKA-Identity packet, or, 
   if EAP-Response/AKA-Identity was not used on re-authentication, the 
   identity string from the EAP-Response/Identity packet. The counter 
   denotes the counter value from AT_COUNTER attribute used in the EAP-
   Response/AKA-Reauthentication packet. The counter is used in network 
   byte order. NONCE_S denotes the 16-byte NONCE_S value from the 
   AT_NONCE_S attribute used in the EAP-Request/AKA-Reauthentication 
   packet. The MK is the Master Key from the preceding full 
   authentication. The pseudo-random number generator is run with the 
   new seed value XKEY', and the resulting 320-bit random numbers x_0, 
   x_1, ..., x_m-1 are concatenated and partitioned into 64-byte chunks 
   and used as the new Master Session Key and the new Extended Master 
   Session Key.  
    
   The first 32 bytes of the MSK can be used as the Pairwise Master Key 
   (PMK) for IEEE 802.11i. 
    

     
   Arkko and Haverinen     Expires in six months            [Page 51] 


                        EAP AKA Authentication               June 2003 
    
   When the RADIUS attributes specified in [16] are used to transport 
   keying material, then the first 32 bytes of the MSK correspond to 
   MS-MPPE-RECV-KEY and the second 32 bytes to MS-MPPE-SEND-KEY. In 
   this case, only 64 bytes of keying material are used. 
    
    
    
11. IANA and Protocol Numbering Considerations 
    
   The realm name "owlan.org" has been reserved for NAI realm names 
   generated from the IMSI. 
    
   IANA has assigned the number 23 for EAP AKA authentication. 
    
   EAP AKA messages include a Subtype field. The following Subtypes are 
   specified: 

        AKA-Challenge...................................1 
        AKA-Authentication-Reject.......................2 
        AKA-Synchronization-Failure.....................4 
        AKA-Identity....................................5 
        AKA-Notification...............................12 
        AKA-Reauthentication...........................13 
    
   The Subtype-specific data is composed of attributes, which have 
   attribute type numbers. The following attribute types are specified: 

        AT_RAND.........................................1 
        AT_AUTN.........................................2 
        AT_RES..........................................3 
        AT_AUTS.........................................4 
        AT_PADDING......................................6 
        AT_PERMANENT_ID_REQ............................10 
        AT_MAC.........................................11 
        AT_ANY_ID_REQ..................................13 
        AT_IDENTITY....................................14 
        AT_FULLAUTH_ID_REQ.............................17 
        AT_COUNTER.....................................19 
        AT_COUNTER_TOO_SMALL...........................20 
        AT_NONCE_S.....................................21 
    
        AT_IV.........................................129 
        AT_ENCR_DATA..................................130 
        AT_NEXT_PSEUDONYM.............................132 
        AT_NEXT_REAUTH_ID.............................133 
        AT_CHECKCODE..................................134 
    
   All requests for value assignment from the various number spaces 
   described in this document require proper documentation, according 
   to the "Specification Required" policy described in [17]. Requests 
   must be specified in sufficient detail so that interoperability 
   between independent implementations is possible. Possible forms of 
   documentation include, but are not limited to, RFCs, the products of 

     
   Arkko and Haverinen     Expires in six months            [Page 52] 


                        EAP AKA Authentication               June 2003 
    
   another standards body (e.g. 3GPP), or permanently and readily 
   available vendor design notes. 
    
12. Security Considerations 
    
   The revised EAP base protocol [18] highlights several attacks that 
   are possible against the EAP protocol. This section discusses the 
   claimed security properties of EAP AKA as well as vulnerabilities 
   and security recommendations. 
    
12.1. Identity Protection 
    
   EAP/AKA includes optional Identity privacy support that protects the 
   privacy of the subscriber identity against passive eavesdropping. 
   The mechanism cannot be used on the first connection with a given 
   server, when the IMSI will have to be sent in the clear. The 
   terminal SHOULD store the pseudonym in a non-volatile memory so that 
   it can be maintained across reboots. An active attacker that 
   impersonates the network may use the AT_PERMANENT_ID_REQ attribute 
   (Section 4.3) to learn the subscriber's IMSI. However, as discussed 
   in Section 4.3, the terminal can refuse to send the cleartext IMSI 
   if it believes that the network should be able to recognize the 
   pseudonym.  
    
   If the client and server cannot guarantee that the pseudonym will be 
   maintained reliably and Identity privacy is required then additional 
   protection from an external security mechanism such as Protected 
   Extensible Authentication Protocol (PEAP) [19] may be used. The 
   benefits and the security considerations of using an external 
   security mechanism with EAP/AKA are beyond the scope of this 
   document. 
    
12.2. Mutual Authentication 
    
   EAP/AKA provides mutual authentication via the UMTS AKA mechanisms.  
    
12.3. Key Derivation 
    
   EAP/AKA supports key derivation with 128-bit effective key strength. 
   The key hierarchy is specified in Section 10.  
    
   The Transient EAP Keys used to protect EAP AKA packets (K_encr, 
   K_aut) and the Master Session Keys are cryptographically separate. 
   An attacker cannot derive any non-trivial information from K_encr or 
   K_aut based on the Master Session Key or vice versa. An attacker 
   also cannot calculate the pre-shared secret from the UMTS AKA IK, 
   UMTS AKA CK, EAP AKA K_encr, EAP AKA K_aut or from the Master 
   Session Key. 
    
12.4. Brute-Force and Dictionary Attacks 
    
   The effective strength of EAP/AKA values is 128 bits, and there are 
   no known computationally feasible brute-force attacks. Because UMTS 

     
   Arkko and Haverinen     Expires in six months            [Page 53] 


                        EAP AKA Authentication               June 2003 
    
   AKA is not a password protocol (the pre-shared secret must not be a 
   weak password), EAP/AKA is not vulnerable to dictionary attacks. 
    
12.5. Integrity Protection, Replay Protection and Confidentiality 
    
   AT_MAC, AT_IV and AT_ENCR_DATA attributes are used to provide 
   integrity, replay and confidentiality protection for EAP/AKA 
   Requests and Responses. Integrity protection includes the EAP 
   header. Integrity protection (AT_MAC) is based on a keyed message 
   authentication code. Confidentiality (AT_ENCR_DATA and AT_IV) is 
   based on a block cipher.  
    
   Because keys are not available in the beginning of the EAP methods, 
   the AT_MAC attribute cannot be used for protecting EAP/AKA-Identity 
   messages. However, the AT_CHECKCODE attribute can optionally be used 
   to protect the integrity of the EAP/AKA-Identity roundtrip. 
    
   On full authentication, replay protection is provided by the 
   underlying UMTS AKA scheme, which makes use of the RAND and AUTN 
   values. On re-authentication, a counter and a server nonce is used 
   to provide replay protection. 
   The contents of the EAP-Response/Identity packet are implicitly 
   integrity protected by including them in key derivation. 
    
   Because EAP/AKA is not a tunneling method, EAP Notification, EAP 
   Success or EAP Failure packets are not confidential, integrity 
   protected or replay protected. On physically insecure networks, this 
   may enable an attacker to mount denial of service attacks by sending 
   false EAP Notification, EAP Success or EAP Failure packets. However, 
   the attacker cannot force the peers to believe successful 
   authentication has occurred when mutual authentication failed or has 
   not happened yet. 
    
   An eavesdropper will see the EAP Notification, EAP Success and EAP 
   Failure packets sent in the clear. With EAP AKA, confidential 
   information MUST NOT be transmitted in EAP Notification packets. 
    
12.6. Negotiation Attacks 
    
   EAP/AKA does not protect the EAP-Response/Nak packet. Because 
   EAP/AKA does not protect the EAP method negotiation, EAP method 
   downgrading attacks may be possible, especially if the user uses the 
   same identity with EAP/AKA and other EAP methods. 
    
   As described in Section 6, EAP/AKA allows the protocol to be 
   extended by defining new attribute types. When defining such 
   attributes, it should be noted that any extra attributes included in 
   EAP-Request/AKA-Identity or EAP-Response/AKA-Identity packets are 
   not included in the MACs later on, and thus some other precautions 
   must be taken to avoid modifications to them. 
    
   EAP/AKA does not support ciphersuite negotiation or EAP/AKA protocol 
   version negotiation. 
    
     
   Arkko and Haverinen     Expires in six months            [Page 54] 


                        EAP AKA Authentication               June 2003 
    
12.7. Fast Reconnect 
    
   EAP/AKA includes an optional re-authentication ("fast reconnect") 
   procedure, as recommended in [18] for EAP types that are intended 
   for physically insecure networks. 
    
12.8. Acknowledged Result Indications 
    
   EAP/AKA does not provide acknowledged or integrity protected Success 
   or Failure indications. 
    
   If an EAP Success or an EAP Failure packet is lost when using 
   EAP/AKA over an unreliable medium, and if the protocol over which 
   EAP/AKA is transported does not address the possible loss of Success 
   or Failure, then the peer and authenticator may end up having a 
   different interpretation of the state of the authentication 
   conversation. 
    
   On physically insecure networks, an attacker may mount denial of 
   service attacks by sending false EAP Success or EAP Failure 
   indications. However, the attacker cannot force the client or the 
   authenticator to believe successful authentication has occurred when 
   mutual authentication failed or has not happened yet. 
    
12.9. Man-in-the-middle Attacks 
    
   In order to avoid man-in-the-middle attacks and session hijacking, 
   user data SHOULD be integrity protected on physically insecure 
   networks. The EAP/AKA Master Session Key or keys derived from it MAY 
   be used as the integrity protection keys, or, if an external 
   security mechanism such as PEAP is used, then the link integrity 
   protection keys MAY be derived by the external security mechanism.  
    
   There are man-in-the-middle attacks associated with the use of any 
   EAP method within a tunneled protocol such as PEAP, or within a 
   sequence of EAP methods followed by each other. This specification 
   does not address these attacks. If EAP/AKA is used with a tunneling 
   protocol or as part of a sequence of methods, there should be 
   cryptographic binding provided between the protocols and EAP/AKA to 
   prevent man-in-the-middle attacks through rogue authenticators being 
   able to setup one-way authenticated tunnels. EAP/AKA Master Session 
   Key MAY be used to provide the cryptographic binding. However the 
   mechanism how the binding is provided depends on the tunneling or 
   sequencing protocol, and it is beyond the scope of this document. 
    
12.10. Generating Random Numbers 
    
   An EAP/AKA implementation SHOULD use a good source of randomness to 
   generate the random numbers required in the protocol. Please see 
   [20] for more information on generating random numbers for security 
   applications. 
    
13. Security Claims 
    
     
   Arkko and Haverinen     Expires in six months            [Page 55] 


                        EAP AKA Authentication               June 2003 
    
   This section provides the security claims required by [18]. 
    
   [a] Intended use. EAP AKA is intended for use over both physically 
   insecure networks and physically or otherwise secure networks. 
   Applicable media include but are not limited to PPP, IEEE 802 wired 
   networks and IEEE 802.11. 
    
   [b] Mechanism. EAP AKA is based on the UMTS AKA mechanism, which is 
   an authentication and key agreement mechanism based on a symmetric 
   128-bit pre-shared secret.  
    
   [c] Security claims. The security properties of the method are 
   discussed in Section 12. 
    
   [d] Key strength. EAP/AKA supports key derivation with 128-bit 
   effective key strength. 
    
   [e] Description of key hierarchy. Please see Section 10. 
    
   [f] Indication of vulnerabilities. Vulnerabilities are discussed in 
   Section 12. 
    
14. Intellectual Property Right Notices 
    
   On IPR related issues, Nokia and Ericsson refer to the their 
   respective statements on patent licensing. Please see 
   http://www.ietf.org/ietf/IPR/NOKIA and 
   http://www.ietf.org/ietf/IPR/ERICSSON-General  
    
Acknowledgements and Contributions 
    
   The authors wish to thank Rolf Blom of Ericsson, Bernard Aboba of 
   Microsoft, Arne Norefors of Ericsson, N.Asokan of Nokia, Valtteri 
   Niemi of Nokia, Kaisa Nyberg of Nokia, Jukka-Pekka Honkanen of 
   Nokia, Pasi Eronen of Nokia, Olivier Paridaens of Alcatel and Ilkka 
   Uusitalo of Ericsson for interesting discussions in this problem 
   space. 
    
   The attribute format is based on the extension format of Mobile IPv4 
   [21]. 
    
Authors' Addresses 
    
   Jari Arkko 
   Ericsson 
   02420 Jorvas                 Phone:  +358 40 5079256 
   Finland                      Email:  jari.arkko@ericsson.com 
    
   Henry Haverinen 
   Nokia Mobile Phones 
   P.O. Box 88 
   33721 Tampere                Phone: +358 50 594 4899 
   Finland                      E-mail: henry.haverinen@nokia.com 
    
     
   Arkko and Haverinen     Expires in six months            [Page 56] 


                        EAP AKA Authentication               June 2003 
    
Annex A. Pseudo-Random Number Generator 
    
   The "|" character denotes concatenation, and "^" denotes involution. 
    
   Step 1: Choose a new, secret value for the seed-key, XKEY 
    
   Step 2: In hexadecimal notation let 
       t = 67452301 EFCDAB89 98BADCFE 10325476 C3D2E1F0 
       This is the initial value for H0|H1|H2|H3|H4  
       in the FIPS SHS [10] 
    
   Step 3: For j = 0 to m - 1 do 
         3.1 XSEED_j = optional user input 
         3.2 For i = 0 to 1 do 
             a. XVAL = (XKEY + XSEED_j) mod 2^b 
             b. w_i = G(t, XVAL) 
             c. XKEY = (1 + XKEY + w_i) mod 2^b 
         3.3 x_j = w_0|w_1 




































     
   Arkko and Haverinen     Expires in six months            [Page 57] 


                        EAP AKA Authentication               June 2003 
    
    
    
References 
    
    
   [1]   3GPP Technical Specification 3GPP TS 33.102 V5.1.0: "Technical 
         Specification Group Services and System Aspects; 3G Security; 
         Security Architecture (Release 5)", 3rd Generation Partnership 
         Project, December 2002. (NORMATIVE) 
    
   [2]   IEEE P802.1X/D11, "Standards for Local Area and Metropolitan 
         Area Networks: Standard for Port Based Network Access 
         Control", March 2001. (INFORMATIVE) 
    
   [3]   IEEE Draft 802.11eS/D1, "Draft Supplement to STANDARD FOR 
         Telecommunications and Information Exchange between Systems - 
         LAN/MAN Specific Requirements - Part 11: Wireless Medium 
         Access Control (MAC) and physical layer (PHY) specifications: 
         Specification for Enhanced Security", March 2001. 
         (INFORMATIVE) 
    
   [4]   Aboba, B. and M. Beadles, "The Network Access Identifier", RFC 
         2486, January 1999. (NORMATIVE) 
    
   [5]   L. Blunk, J. Vollbrecht, "PPP Extensible Authentication 
         Protocol (EAP)", RFC 2284, March 1998. (NORMATIVE) 
    
   [6]   S. Bradner, "Key words for use in RFCs to indicate Requirement 
         Levels", RFC 2119, March 1997. (NORMATIVE) 
    
   [7]   3GPP Technical Specification 3GPP TS 23.003 V5.5.1: "3rd 
         Generation Parnership Project; Technical Specification Group 
         Core Network; Numbering, addressing and identification 
         (Release 5)", 3rd Generation Parnership Project, January 2003 
         (NORMATIVE) 
    
   [8]   Draft 3GPP Technical Specification 3GPP TS 23.234 V 1.4.0: 
         "Technical Specification Group Services and System Aspects; 
         3GPP system to Wireless Local Area Network (WLAN) 
         Interworking; System Description", 3rd Generation Partnership 
         Project, work in progress, January 2003. (INFORMATIVE) 
    
   [9]   H. Krawczyk, M. Bellare, R. Canetti, "HMAC: Keyed-Hashing for 
         Message Authentication", RFC2104, February 1997. (NORMATIVE) 
    
   [10]  Federal Information Processing Standard (FIPS) Publication 
         180-1, "Secure Hash Standard," National Institute of Standards 
         and Technology, U.S. Department of Commerce, April 17, 1995. 
         (NORMATIVE) 
    
   [11]  Federal Information Processing Standard (FIPS) draft standard, 
         "Advanced Encryption Standard (AES)", 
 

     
   Arkko and Haverinen     Expires in six months            [Page 58] 


                        EAP AKA Authentication               June 2003 
    
    
         http://csrc.nist.gov/publications/drafts/dfips-AES.pdf, 
         September 2001. (NORMATIVE) 
    
   [12]  US National Bureau of Standards, "DES Modes of Operation", 
         Federal Information Processing Standard (FIPS) Publication 81, 
         December 1980. (NORMATIVE) 
    
   [13]  3GPP Technical Specification 3GPP TS 33.105 4.1.0: "Technical 
         Specification Group Services and System Aspects; 3G Security; 
         Cryptographic Algorithm Requirements (Release 4)", 3rd 
         Generation Partnership Project, June 2001 (NORMATIVE) 
    
   [14]  Federal Information Processing Standards (FIPS) Publication 
         186-2 (with change notice), "Digital Signature Standard 
         (DSS)", National Institute of Standards and Technology, 
         January 27, 2000, (NORMATIVE) 
         Available on-line at:  
         http://csrc.nist.gov/publications/fips/fips186-2/ 
         fips186-2-change1.pdf  
    
   [15]  B. Aboba, D. Simon, "PPP EAP TLS Authentication Protocol", RFC 
         2716, October 1999 (INFORMATIVE) 
    
   [16]  G. Zorn, "Microsoft Vendor-specific RADIUS Attributes", RFC 
         2548, March 1999 (INFORMATIVE) 
    
   [17]  T. Narten, H. Alvestrand, "Guidelines for Writing an IANA 
         Considerations Section in RFCs", RFC 2434, October 1998. 
         (NORMATIVE) 
    
   [18]  L. Blunk, J. Vollbrecht, B. Aboba, "Extensible Authentication 
         Protocol (EAP)", draft-ietf-pppext-rfc2284bis-07.txt, work-in-
         progress, October 2002. (NORMATIVE) 
    
   [19]  H. Andersson, S. Josefsson, G. Zorn, D. Simon, A. Palekar, 
         "Protected EAP Protocol (PEAP)", draft-josefsson-pppext-eap-
         tls-eap-05.txt, work-in-progress, September 2002. 
         (IMFORMATIVE) 
    
   [20]  D. Eastlake, 3rd, S. Crocker, J. Schiller, "Randomness 
         Recommendations for Security",  RFC 1750 (Informational), 
         December 1994. (INFORMATIVE) 
    
   [21]  C. Perkins (editor), "IP Mobility Support", RFC 3344, August 
         2002. (INFORMATIVE) 








     
   Arkko and Haverinen     Expires in six months            [Page 59] 

