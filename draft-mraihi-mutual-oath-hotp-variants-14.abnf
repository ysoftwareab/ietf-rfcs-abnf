OCRA = CryptoFunction(K, DataInput)

DataInput = {OCRASuite | 00 | C | Q | P | S | T} where:

hmac = Mac.getInstance(crypto);
crypto = "HmacSHA1";
crypto = "HmacSHA256";
crypto = "HmacSHA512";

codeDigits = Integer.decode(CryptoFunction.substring(
                CryptoFunction.lastIndexOf("-")+1));

counter = "0" + counter;
counterLength=8;
question = question + "0";
questionLength=128;
password = "0" + password;
passwordLength=20;
password = "0" + password;
passwordLength=32;
password = "0" + password;
passwordLength=64;
sessionInformation = "0" + sessionInformation;
sessionInformationLength=64;
sessionInformation = "0" + sessionInformation;
sessionInformationLength=128;
sessionInformation = "0" + sessionInformation;
sessionInformationLength=256;
sessionInformation = "0" + sessionInformation;
sessionInformationLength=512;
timeStamp = "0" + timeStamp;
timeStampLength=8;
bArray = hexStr2Bytes(counter);
bArray = hexStr2Bytes(question);
bArray = hexStr2Bytes(password);
bArray = hexStr2Bytes(sessionInformation);
bArray = hexStr2Bytes(timeStamp);
bArray = hexStr2Bytes(key);
result = Integer.toString(otp);
result = "0" + result;
myDate = df.parse(sDate);
b = new BigInteger("0" + myDate.getTime());
b = b.divide(new BigInteger("60000"));


ocraSuite = "OCRA-1:HOTP-SHA1-6:QN08";
seed = SEED;
counter = "";
question = "";
password = "";
sessionInformation = "";
timeStamp = "";
question = "" + i + i + i + i + i + i + i + i;
qHex = new String((new BigInteger(question,10))
                       .toString(16)).toUpperCase();
ocra = OCRA.generateOCRA(ocraSuite,seed,counter,
                           qHex,password,
                           sessionInformation,timeStamp);
             System.out.println("Key: Standard 20Byte  Q: "
                    + question + "  OCRA: " + ocra);
ocraSuite = "OCRA-1:HOTP-SHA256-8:C-QN08-PSHA1";
seed = SEED32;
counter = "";
question = "12345678";
password = PASS1234;
sessionInformation = "";
timeStamp = "";
counter = "" + i;
qHex = new String((new BigInteger(question,10))
                       .toString(16)).toUpperCase();
ocra = OCRA.generateOCRA(ocraSuite,seed,counter,
                       qHex,password,sessionInformation,timeStamp);
ocraSuite = "OCRA-1:HOTP-SHA256-8:QN08-PSHA1";
seed = SEED32;
counter = "";
question = "";
password = PASS1234;
sessionInformation = "";
timeStamp = "";
question = "" + i + i + i + i + i + i + i + i;

qHex = new String((new BigInteger(question,10))
                        .toString(16)).toUpperCase();
ocra = OCRA.generateOCRA(ocraSuite,seed,counter,
                     qHex,password,sessionInformation,timeStamp);
ocraSuite = "OCRA-1:HOTP-SHA512-8:C-QN08";
seed = SEED64;
counter = "";
question = "";
password = "";
sessionInformation = "";
timeStamp = "";
question = "" + i + i + i + i + i + i + i + i;
qHex = new String((new BigInteger(question,10))
                        .toString(16)).toUpperCase();
counter = "0000" + i;
ocra = OCRA.generateOCRA(ocraSuite,seed,counter,
                     qHex,password,sessionInformation,timeStamp);
ocraSuite = "OCRA-1:HOTP-SHA512-8:QN08-T1M";
seed = SEED64;
counter = "";
question = "";
password = "";
sessionInformation = "";
timeStamp = b.toString(16);
question = "" + i + i + i + i + i + i + i + i;
counter = "";
qHex = new String((new BigInteger(question,10))
                        .toString(16)).toUpperCase();
ocra = OCRA.generateOCRA(ocraSuite,seed,counter,
                     qHex,password,sessionInformation,timeStamp);

ocraSuite = "OCRA-1:HOTP-SHA256-8:QA08";
seed = SEED32;
counter = "";
question = "";
password = "";
sessionInformation = "";
timeStamp = "";
question = "CLI2222" + i + "SRV1111" + i;
qHex = asHex(question.getBytes());
ocra = OCRA.generateOCRA(ocraSuite,seed,counter,qHex,
                         password,sessionInformation,timeStamp);
question = "SRV1111" + i + "CLI2222" + i;
qHex = asHex(question.getBytes());
ocra = OCRA.generateOCRA(ocraSuite,seed,counter,qHex,
                         password,sessionInformation,timeStamp);
ocraSuite = "";
seed = SEED64;
counter = "";
question = "";
password = "";
sessionInformation = "";
timeStamp = "";
ocraSuite = ocraSuite1;
question = "CLI2222" + i + "SRV1111" + i;
qHex = asHex(question.getBytes());
password = "";
ocra = OCRA.generateOCRA(ocraSuite,seed,counter,qHex,
                         password,sessionInformation,timeStamp);
ocraSuite = ocraSuite2;
question = "SRV1111" + i + "CLI2222" + i;
qHex = asHex(question.getBytes());
password = PASS1234;
ocra = OCRA.generateOCRA(ocraSuite,seed,counter,qHex,
                         password,sessionInformation,timeStamp);
ocraSuite = "OCRA-1:HOTP-SHA256-8:QA08";
seed = SEED32;
counter = "";
question = "";
password = "";
sessionInformation = "";
timeStamp = "";
question = "SIG1" + i + "000";
qHex = asHex(question.getBytes());
ocra = OCRA.generateOCRA(ocraSuite,seed,counter,qHex,
                         password,sessionInformation,timeStamp);
ocraSuite = "OCRA-1:HOTP-SHA512-8:QA10-T1M";
seed = SEED64;
counter = "";
question = "";
password = "";
sessionInformation = "";
timeStamp = b.toString(16);
question = "SIG1" + i + "00000";
qHex = asHex(question.getBytes());
ocra = OCRA.generateOCRA(ocraSuite,seed,counter,
                         qHex,password,sessionInformation,timeStamp);
