schema          =  [WS] user-types [WS]

user-types      =  [user-types WS] user-type
user-type       =  "type" WS user-type-name WS any-type
user-type-name  =  UPPER *(ALPHA / DIGIT) ; first letter is uppercase

any-type        =  non-void-type / "void"
non-void-type   =  non-enum-type / enum-type
non-enum-type   =  base-data-type / aggregate-type / user-type-name

base-data-type  =  base-type / data-type

base-type       =  "uint" / "u8"  / "u16" / "u32" / "u64"
base-type       =/ "int" / "i8"  / "i16" / "i32" / "i64"
base-type       =/ "f32" / "f64"
base-type       =/ "bool"
base-type       =/ "string"

data-type       =  "data" / ("data<" integer ">")
integer         =  1*DIGIT

aggregate-type  =  optional-type
aggregate-type  =/ list-type
aggregate-type  =/ map-type
aggregate-type  =/ union-type
aggregate-type  =/ struct-type

optional-type   =  "optional<" non-enum-type ">"

list-type       =  "[" [integer] "]" non-void-type

map-type        =  "map[" (base-type / enum-type) "]" non-void-type

union-type      =  "(" [WS] union-members [WS] ")"
union-members   =  [union-members [WS] "|" [WS]] union-member
union-member    =  any-type [[WS] "=" [WS] integer]

struct-type     =  "{" [WS] struct-fields [WS] "}"
struct-fields   =  [struct-fields WS] struct-field
struct-field    =  1*ALPHA [WS] ":" [WS] non-void-type
enum-type       =  "<" [WS] enum-values [WS] ">"
enum-values     =  [enum-values WS] enum-value
enum-value      =  enum-value-name [[WS] "=" [WS] integer]
enum-value-name =  UPPER *(UPPER / DIGIT / "_")

UPPER           =  %x41-5A ; uppercase ASCII letters, i.e. A-Z
ALPHA           =  %x41-5A / %x61-7A ; A-Z / a-z
DIGIT           =  %x30-39 ; 0-9

WS              =  1*(%x0A / %x09 / " ") ; whitespace

foo => 255
bar => -255
buzz => "BARE"
JSMITH = 99
