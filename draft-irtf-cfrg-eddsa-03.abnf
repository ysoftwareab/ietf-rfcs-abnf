x0 = b7*128+b6*64+b5*32+b4*16+b3*8+b2*4+b1*2+b0
x1 = b15*128+b14*64+b13*32+b12*16+b11*8+b10*4+b9*2+b8

x3 = --------------------------,   y3 = ---------------------------
         1 + d * x1 * x2 * y1 * y2          1 - d * x1 * x2 * y1 * y2
x = (u/v)        = u v  (u v^7)         (mod p)

A = (Y1-X1)*(Y2-X2)
B = (Y1+X1)*(Y2+X2)
C = T1*2*d*T2
D = Z1*2*Z2
E = B-A
F = D-C
G = D+C
H = B+A
X3 = E*F
Y3 = G*H
T3 = E*H
Z3 = F*G
x = (u/v)        = u  v (u^5 v^3)         (mod p)

A = Z1*Z2
B = A^2
C = X1*X2
D = Y1*Y2
E = d*C*D
F = B-E
G = B+E
H = (X1+X2)*(Y1+Y2)
X3 = A*G*(H-C-D)
Y3 = A*G*(D-C)
Z3 = F*G

p = 2**255 - 19

d = -121665 * modp_inv(121666) % p

q = 2**252 + 27742317777372353535851937790883648493

A = (P[1]-P[0])*(Q[1]-Q[0]) % p
B = (P[1]+P[0])*(Q[1]+Q[0]) % p
C = 2 * P[3] * Q[3] * d % p
D = 2 * P[2] * Q[2] % p
E = B-A
F = D-C
G = D+C
H = B+A
Q = (0, 1, 1, 0)  # Neutral element
Q = point_add(Q, P)
P = point_add(P, P)
modp_sqrt_m1 = pow(2, (p-1) // 4, p)

x2 = (y*y-1) * modp_inv(d*y*y+1)
x = pow(x2, (p+3) // 8, p)
x = x * modp_sqrt_m1 % p
x = p - x
g_y = 4 * modp_inv(5) % p
g_x = recover_x(g_y, 0)
G = (g_x, g_y, 1, g_x * g_y % p)

zinv = modp_inv(P[2])
x = P[0] * zinv % p
y = P[1] * zinv % p
y = int.from_bytes(s, "little")
sign = y >> 255
x = recover_x(y, sign)
h = sha512(secret)
a = int.from_bytes(h[:32], "little")
A = point_compress(point_mul(a, G))
r = sha512_modq(prefix + msg)
R = point_mul(r, G)
Rs = point_compress(R)
h = sha512_modq(Rs + A + msg)
s = (r + h * a) % q
A = point_decompress(public)
Rs = signature[:32]
R = point_decompress(Rs)
s = int.from_bytes(signature[32:], "little")
h = sha512_modq(Rs + public + msg)
sB = point_mul(s, G)
hA = point_mul(h, A)
a=-1 for twisted Edwards curves", WWW
y = pow(x,(p+3)//8,p)
z = pow(2,(p - 1)//4,p)
ROTATIONS = [0,1,62,28,27,36,44,6,55,20,3,10,43,25,39,41,45,15,\
                 21,8,18,2,61,56,14]
PERMUTATION = [1,6,9,22,14,20,2,12,13,19,23,15,4,24,21,8,16,5,3,\
                   18,17,11,7,10]
RC = [0x0000000000000001,0x0000000000008082,0x800000000000808a,\
          0x8000000080008000,0x000000000000808b,0x0000000080000001,\
          0x8000000080008081,0x8000000000008009,0x000000000000008a,\
          0x0000000000000088,0x0000000080008009,0x000000008000000a,\
          0x000000008000808b,0x800000000000008b,0x8000000000008089,\
          0x8000000000008003,0x8000000000008002,0x8000000000000080,\
          0x000000000000800a,0x800000008000000a,0x8000000080008081,\
          0x8000000000008080,0x0000000080000001,0x8000000080008008]
c = [0]*5;
d = [0]*5;
t = s[PERMUTATION[0]]
t=[s[i],s[i+1],s[i+2],s[i+3],s[i+4],s[i],s[i+1]]
mp=bytearray()
r_b=8*r_w
s=[0]*25
idx=0
blocks=len(msg)//r_b
m=bytearray(msg[idx:])
out = bytearray()
rv=from_le(x)%(2**(b-1))
xs=s[(b-1)//8]>>((b-1)&7)
y = self.base_field.frombytes(s,b)
x=self.solve_x2(y).sqrt()
s=bytearray(yp.tobytes(b))
r=self.zero_elem()
s=self
r=r+s
s=s.double()
x=x//2
xn1=self.x*y.z
xn2=y.x*self.z
yn1=self.y*y.z
yn2=y.y*self.z
base_field=Field(1,2**255-19)
d=-base_field.make(121665)/base_field.make(121666)
f0=base_field.make(0)
f1=base_field.make(1)
xb=base_field.make(hexi("216936D3CD6E53FEC0A4E231FDD6DC5C692CC76"+\
        "09525A7B2C9562D608F25D51A"))
yb=base_field.make(hexi("666666666666666666666666666666666666666"+\
        "6666666666666666666666658"))
tmp=self.zero_elem()
zcp=self.z*y.z
A=(self.y-self.x)*(y.y-y.x)
B=(self.y+self.x)*(y.y+y.x)
C=(self.d+self.d)*self.t*y.t
D=zcp+zcp
tmp=self.zero_elem()
xys=self.x+self.y
H=-(x1s+y1s)
E=xys*xys+H
G=y1s-x1s
F=G-(z1s+z1s)
base_field=Field(1,2**448-2**224-1)
d=base_field.make(-39081)
f0=base_field.make(0)
f1=base_field.make(1)
xb=base_field.make(hexi("4F1970C66BED0DED221D15A622BF36DA9E14657"+\
        "0470F1767EA6DE324A3D3A46412AE1AF72AB66511433B80E18B00938E26"+\
        "26A82BC70CC05E"))
yb=base_field.make(hexi("693F46716EB6BC248876203756C9C7624BEA737"+\
        "36CA3984087789C1E05A0C2D73AD3FF1CE67C39C4FDBD132C4ED7C8AD98"+\
        "08795BF230FA14"))
tmp=self.zero_elem()
B=zcp*zcp
E=self.d*xcp*ycp
tmp=self.zero_elem()
xys=self.x+self.y
F=x1s+y1s
J=F-(z1s+z1s)
khash=self.H(privkey,None,None)
a=from_le(self.__clamp(khash[:self.b//8]))
khash=self.H(privkey,None,None)
a=from_le(self.__clamp(khash[:self.b//8]))
seed=khash[self.b//8:]
r=from_le(self.H(seed+msg,ctx,hflag))%self.l
R=(self.B*r).encode()
h=from_le(self.H(R+pubkey+msg,ctx,hflag))%self.l
S=((r+h*a)%self.l).to_bytes(self.b//8,byteorder="little")
A=self.B.decode(pubkey)
h=from_le(self.H(Rraw+pubkey+msg,ctx,hflag))%self.l
rhs=R+(A*h)
lhs=self.B*S
lhs = lhs.double()
rhs = rhs.double()
pEd25519=PureEdDSA({\
    "B":Edwards25519Point.stdbase(),\
    "H":lambda x,y,z:hashlib.sha512(x).digest()\
dompfx = b""
dompfx=b"SigEd448"+bytes([1 if hflag else 0,len(ctx)])+ctx
pEd448 = PureEdDSA({\
    "B":Edwards448Point.stdbase(),\
    "H":Ed448_inthash\
dompfx=b"SigEd448"+bytes([2,len(ctx)])+ctx
Ed25519 = EdDSA(pEd25519,None)
Ed25519ph = EdDSA(pEd25519,lambda x,y:hashlib.sha512(x).digest())
Ed448 = EdDSA(pEd448,None)
Ed448ph = EdDSA(pEd448,Ed448ph_prehash)

lineno = 0
line = sys.stdin.readline()
lineno = lineno + 1
fields = line.split(":")
secret = (binascii.unhexlify(fields[0]))[:32]
public = binascii.unhexlify(fields[1])
msg = binascii.unhexlify(fields[2])
signature = binascii.unhexlify(fields[3])[:64]

bad_msg = b"x"
bad_msg = munge_string(msg, len(msg) // 3, 4)
bad_signature = munge_string(signature, 20, 8)
bad_signature = munge_string(signature, 40, 16)
