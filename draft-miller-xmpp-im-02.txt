

Network Working Group                                          J. Miller
Internet-Draft                                            P. Saint-Andre
Expires: May 4, 2003                          Jabber Software Foundation
                                                       November 03, 2002


                         XMPP Instant Messaging
                        draft-miller-xmpp-im-02

Status of this Memo

   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC2026.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at http://
   www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on May 4, 2003.

Copyright Notice

   Copyright (C) The Internet Society (2002).  All Rights Reserved.

Abstract

   This document describes the specific extensions to and applications
   of the eXtensible Messaging and Presence Protocol (XMPP) that are
   necessary to create a basic instant messaging and presence
   application (specificlaly, an application that is compatible with the
   open-source Jabber instant messaging system).









Miller & Saint-Andre      Expires May 4, 2003                   [Page 1]

Internet-Draft           XMPP Instant Messaging            November 2002


Table of Contents

   1.    Introduction . . . . . . . . . . . . . . . . . . . . . . . .  4
   1.1   Overview . . . . . . . . . . . . . . . . . . . . . . . . . .  4
   1.2   Terminology  . . . . . . . . . . . . . . . . . . . . . . . .  4
   1.3   Requirements . . . . . . . . . . . . . . . . . . . . . . . .  4
   1.4   Conventions Used in this Document  . . . . . . . . . . . . .  4
   1.5   Discussion Venue . . . . . . . . . . . . . . . . . . . . . .  5
   1.6   Intellectual Property Notice . . . . . . . . . . . . . . . .  5
   2.    Registration . . . . . . . . . . . . . . . . . . . . . . . .  6
   2.1   Registration Data Flow . . . . . . . . . . . . . . . . . . .  6
   2.2   Cancellation Data Flow . . . . . . . . . . . . . . . . . . .  8
   2.3   Definition of the 'jabber:iq:register' Namespace . . . . . .  8
   2.3.1 Children . . . . . . . . . . . . . . . . . . . . . . . . . .  8
   2.3.2 DTD  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
   2.3.3 Schema . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
   3.    Authentication . . . . . . . . . . . . . . . . . . . . . . . 12
   3.1   Authentication Using SASL  . . . . . . . . . . . . . . . . . 12
   3.2   Authentication Using' jabber:iq:auth . . . . . . . . . . . . 13
   3.3   Definition of the 'jabber:iq:auth' Namespace . . . . . . . . 14
   3.3.1 Children . . . . . . . . . . . . . . . . . . . . . . . . . . 14
   3.3.2 DTD  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
   3.3.3 Schema . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
   4.    Exchanging Messages  . . . . . . . . . . . . . . . . . . . . 17
   4.1   Specifying an Intended Recipient . . . . . . . . . . . . . . 17
   4.2   Specifying a Message Type  . . . . . . . . . . . . . . . . . 17
   4.3   Specifying a Message Subject . . . . . . . . . . . . . . . . 18
   4.4   Specifying a Message Thread  . . . . . . . . . . . . . . . . 18
   4.5   Specifying a Message Body  . . . . . . . . . . . . . . . . . 19
   4.6   Specifying Additional Information  . . . . . . . . . . . . . 19
   4.7   Message-Related Errors . . . . . . . . . . . . . . . . . . . 19
   5.    Exchanging Presence Information  . . . . . . . . . . . . . . 20
   5.1   Node and Host Responsibilities . . . . . . . . . . . . . . . 20
   5.2   Sending Initial Presence . . . . . . . . . . . . . . . . . . 20
   5.3   Specifying Availability Status . . . . . . . . . . . . . . . 21
   5.4   Specifying Detailed Status Information . . . . . . . . . . . 21
   5.5   Probing for Presence . . . . . . . . . . . . . . . . . . . . 21
   5.6   Sending Final Presence . . . . . . . . . . . . . . . . . . . 21
   6.    Managing Subscriptions . . . . . . . . . . . . . . . . . . . 22
   6.1   Requesting a Subscription  . . . . . . . . . . . . . . . . . 22
   6.2   Handling a Subscription Request  . . . . . . . . . . . . . . 22
   6.3   Cancelling a Subscription from Another Entity  . . . . . . . 23
   6.4   Unsubscribing from Another Entity's Presence . . . . . . . . 23
   7.    Managing One's Roster  . . . . . . . . . . . . . . . . . . . 24
   7.1   Receiving One's Roster on Login  . . . . . . . . . . . . . . 24
   7.2   Adding a Roster Item . . . . . . . . . . . . . . . . . . . . 25
   7.3   Deleting a Roster Item . . . . . . . . . . . . . . . . . . . 26
   7.4   Definition of the 'jabber:iq:roster' Namespace . . . . . . . 27



Miller & Saint-Andre      Expires May 4, 2003                   [Page 2]

Internet-Draft           XMPP Instant Messaging            November 2002


   7.4.1 Children . . . . . . . . . . . . . . . . . . . . . . . . . . 27
   7.4.2 DTD  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
   7.4.3 Schema . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
   8.    Routing and Delivery Guidelines  . . . . . . . . . . . . . . 30
   9.    Security Considerations  . . . . . . . . . . . . . . . . . . 31
         References . . . . . . . . . . . . . . . . . . . . . . . . . 32
         Authors' Addresses . . . . . . . . . . . . . . . . . . . . . 32
         Full Copyright Statement . . . . . . . . . . . . . . . . . . 33











































Miller & Saint-Andre      Expires May 4, 2003                   [Page 3]

Internet-Draft           XMPP Instant Messaging            November 2002


1. Introduction

1.1 Overview

   The core features of the XMPP protocol are defined in XMPP Core [1].
   These features, specifically XML streams as well as the
   'jabber:client' and 'jabber:server' namespaces, provide the building
   blocks for many types of near-real-time applications, which may be
   layered on top of the core by sending XML chunks that are scoped by
   specific XML namespaces.  This document describes the specific
   extensions to and applications of XMPP Core that are used to create
   the basic functionality expected of an instant messaging and presence
   application as defined in RFC 2779 [2].  Extended namespaces for many
   other functionality areas have been defined and continue to be
   defined by the Jabber Software Foundation [3], including service
   discovery, multi-user chat, search, remote procedure calls, data
   gathering and forms submission, encryption, feature negotiation,
   message composing events, message expiration, delayed delivery, and
   file transfer; however, such functionality is not described herein
   because it is not required by [2].

1.2 Terminology

   This document inherits the terminology defined in [1].

1.3 Requirements

   For the purposes of this document, we stipulate that a basic instant
   messaging and presence application needs to enable a node to perform
   the following functionality:

   o  Register an account with a host

   o  Authenticate with a host

   o  Exchange messages with other nodes

   o  Exchange presence information with other nodes

   o  Manage subscriptions to and from other nodes

   o  Manage the items in the node's contact list (called a "roster")


1.4 Conventions Used in this Document

   The capitalized key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
   "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and



Miller & Saint-Andre      Expires May 4, 2003                   [Page 4]

Internet-Draft           XMPP Instant Messaging            November 2002


   "OPTIONAL" in this document are to be interpreted as described in RFC
   2119 [4].

1.5 Discussion Venue

   The authors welcome discussion and comments related to the topics
   presented in this document, preferably on the "xmppwg@jabber.org"
   mailing list (archives and subscription information are available at
   http://www.jabber.org/cgi-bin/mailman/listinfo/xmppwg/).

1.6 Intellectual Property Notice

   This document is in full compliance with all provisions of Section 10
   of RFC 2026.  Parts of this specification use the term "jabber" for
   identifying namespaces and other protocol syntax.  Jabber[tm] is a
   registered trademark of Jabber, Inc.  Jabber, Inc.  grants permission
   to the IETF for use of Jabber trademark in association with this
   specification and its successors, if any.

































Miller & Saint-Andre      Expires May 4, 2003                   [Page 5]

Internet-Draft           XMPP Instant Messaging            November 2002


2. Registration

   Registering with a host is necessary in order for a node to engage in
   any desired functionality.  Certainly such registration MAY (and
   frequently does) occur outside the context of an instant messaging
   and presence application.  However, XMPP also enables a node to
   register with a host within the context of an IM system.  This
   functionality is enabled by sending and receiving IQ chunks in a
   request-response pattern, where the IQ chunks contain <query/>
   elements in the 'jabber:iq:register' namespace.

2.1 Registration Data Flow

   Step 1: Node queries host regarding information that is required in
   order to register:

   <iq type="get"
       to="capulet.com"
       id="reg_1">
     <query xmlns="jabber:iq:register"/>
   </iq>

   Step 2: Host responds with the required registration fields:

   <iq type="result"
       from="capulet.com"
       id="reg_1">
     <query xmlns="jabber:iq:register">
       <instructions>
         Choose a username and password to register with this service.
       </instructions>
       <email/>
       <password/>
       <username/>
     </query>
   </iq>

   Note: the node is REQUIRED to provide information for all of the
   elements (other than <instructions/>) contained in the IQ result.
   (Note also that the XML chunk shown above does not include a 'to'
   attribute, since the connected socket does not yet have an account.)










Miller & Saint-Andre      Expires May 4, 2003                   [Page 6]

Internet-Draft           XMPP Instant Messaging            November 2002


   Step 3: Node provides required information:

   <iq type="set"
       to="capulet.com"
       id="reg_2">
     <query xmlns="jabber:iq:register">
       <email>juliet@capulet.com</email>
       <password>R0m30</password>
       <username>juliet</username>
     </query>
   </iq>

   Step 4: Host informs node of successful registration:

   <iq
       type="result"
       from="capulet.com"
       id="reg_2"/>

   Step 4 (alt 1): Host informs node of failed registration (required
   field not provided):

   <iq
       type="error"
       from="capulet.com"
       id="reg_2"/>
     <query xmlns="jabber:iq:register">
       <email>juliet@capulet.com</email>
       <password>R0m30</password>
     </query>
     <error code="406">Not Acceptable</error>
   </iq>



















Miller & Saint-Andre      Expires May 4, 2003                   [Page 7]

Internet-Draft           XMPP Instant Messaging            November 2002


   Step 4 (alt 2): Node is already registered:

   <iq
       type="error"
       from="capulet.com"
       id="reg_2"/>
     <query xmlns="jabber:iq:register">
       <registered/>
       <email>juliet@capulet.com</email>
       <password>R0m30</password>
       <username>juliet</username>
     </query>
     <error code="400">Bad Request</error>
   </iq>


2.2 Cancellation Data Flow

   The 'jabber:iq:register' namespace also makes it possible for a user
   to cancel a registration with a host by sending a <remove/> element
   as shown below.

   Step 1: Node sends request to unregister:

   <iq type="set"
       to="capulet.com"
       id="unreg_1">
     <query xmlns="jabber:iq:register">
       <remove/>
     </query>
   </iq>

   Step 2: Host informs node of successful unregistration:

   <iq
       type="result"
       from="capulet.com"
       id="unreg_1"/>


2.3 Definition of the 'jabber:iq:register' Namespace

2.3.1 Children

   While numerous fields are available for use in the
   'jabber:iq:register' namespace, only those fields (other than
   <instructions/>) sent from the host in an IQ result are REQUIRED in
   order to register.  The officially-recognized fields available for



Miller & Saint-Andre      Expires May 4, 2003                   [Page 8]

Internet-Draft           XMPP Instant Messaging            November 2002


   use are as follows:

   o  instructions

   o  username

   o  password

   o  name

   o  email

   o  address

   o  city

   o  state

   o  zip

   o  phone

   o  url

   o  date

   o  misc

   o  text

   o  remove - request to unregister (sent only in an IQ set)




















Miller & Saint-Andre      Expires May 4, 2003                   [Page 9]

Internet-Draft           XMPP Instant Messaging            November 2002


2.3.2 DTD

   <!ELEMENT query ((instructions? | username? |
       password? | name? | email? | address? |
       city? | state? | zip? | phone? | url? |
       date? | misc? | text? | remove?)*)>

   <!ELEMENT instructions (#PCDATA)>
   <!ELEMENT username (#PCDATA)>
   <!ELEMENT password (#PCDATA)>
   <!ELEMENT name (#PCDATA)>
   <!ELEMENT email (#PCDATA)>
   <!ELEMENT address (#PCDATA)>
   <!ELEMENT city (#PCDATA)>
   <!ELEMENT state (#PCDATA)>
   <!ELEMENT zip (#PCDATA)>
   <!ELEMENT phone (#PCDATA)>
   <!ELEMENT url (#PCDATA)>
   <!ELEMENT date (#PCDATA)>
   <!ELEMENT misc (#PCDATA)>
   <!ELEMENT text (#PCDATA)>
   <!ELEMENT remove EMPTY>


2.3.3 Schema

   <?xml version='1.0' encoding='UTF-8'?>
   <xsd:schema
       xmlns:xsd='http://www.w3.org/2001/XMLSchema'
       targetNamespace='http://www.jabber.org/protocol'
       xmlns='http://www.jabber.org/protocol'
       elementFormDefault='qualified'>

     <xsd:element name='query'>
       <xsd:complexType>
         <xsd:choice minOccurs='0' maxOccurs='unbounded'>
           <xsd:element ref='instructions'/>
           <xsd:element ref='username'/>
           <xsd:element ref='password'/>
           <xsd:element ref='name'/>
           <xsd:element ref='email'/>
           <xsd:element ref='address'/>
           <xsd:element ref='city'/>
           <xsd:element ref='state'/>
           <xsd:element ref='zip'/>
           <xsd:element ref='phone'/>
           <xsd:element ref='url'/>
           <xsd:element ref='date'/>



Miller & Saint-Andre      Expires May 4, 2003                  [Page 10]

Internet-Draft           XMPP Instant Messaging            November 2002


           <xsd:element ref='misc'/>
           <xsd:element ref='text'/>
           <xsd:element ref='remove'/>
         </xsd:choice>
       </xsd:complexType>
     </xsd:element>

     <xsd:element name='instructions' type='xsd:string'/>
     <xsd:element name='username' type='xsd:string'/>
     <xsd:element name='password' type='xsd:string'/>
     <xsd:element name='name' type='xsd:string'/>
     <xsd:element name='email' type='xsd:string'/>
     <xsd:element name='address' type='xsd:string'/>
     <xsd:element name='city' type='xsd:string'/>
     <xsd:element name='state' type='xsd:string'/>
     <xsd:element name='zip' type='xsd:string'/>
     <xsd:element name='phone' type='xsd:string'/>
     <xsd:element name='url' type='xsd:string'/>
     <xsd:element name='date' type='xsd:string'/>
     <xsd:element name='misc' type='xsd:string'/>
     <xsd:element name='text' type='xsd:string'/>
     <xsd:element name='remove'/>

   </xsd:schema>



























Miller & Saint-Andre      Expires May 4, 2003                  [Page 11]

Internet-Draft           XMPP Instant Messaging            November 2002


3. Authentication

   In order to gain access to the network of XMPP-compliant applications
   and thus engage in standard IM functionality such as exchanging
   messages and presence, a node must authenticate with a host.  The
   preferred authentication method is SASL.  Authentication using the
   older 'jabber:iq:auth' method is OPTIONAL and MAY be used if a node
   does not support SASL.

3.1 Authentication Using SASL

   If a node is capable of authenticating with SASL, it MUST include the
   agreed-upon SASL namespace within the opening <stream/> element with
   which it initiated communications with the host.

   For the protocol describing how a node authenticates with a host,
   refer to [1].

   Once a node has authenticated its streams with a host, it MUST
   provide a resource associated with the connection.  This is
   accomplished by means of the 'jabber:iq:auth' namespace.  The
   protocol for doing so is described below.

   Step 1: Node queries host regarding information that is still
   required to begin a session:

   <iq type="get" id="auth_1">
     <query xmlns="jabber:iq:auth">
       <username>juliet</username>
     </query>
   </iq>

   Step 2: Host responds with the required fields (in this case, only
   the username and resource):

   <iq type="result" id="auth_1">
     <query xmlns="jabber:iq:auth">
       <username>juliet</username>
       <resource/>
     </query>
   </iq>










Miller & Saint-Andre      Expires May 4, 2003                  [Page 12]

Internet-Draft           XMPP Instant Messaging            November 2002


   Step 3: Node sends resource information:

   <iq type="set" id="auth_2">
     <query xmlns="jabber:iq:auth">
       <username>juliet</username>
       <resource>balcony</resource>
     </query>
   </iq>

   Step 4: Host informs node of successful session initiation:

   <iq type="result" id="auth_2"/>


3.2 Authentication Using' jabber:iq:auth

   Earlier iterations of XMPP contained a client-server authentication
   protocol that was enforced after the stream was negotiated; this
   protocol, which uses the 'jabber:iq:auth' namespace, is described for
   completeness in this section.

   The 'jabber:iq:auth' namespace provides two things: (1) a simple way
   for a node to authenticate with a host and (2) a way to create a
   resource representing a specific connection or session associated
   with the node.

   The following is the data flow for a complete example of a node
   authenticating with a host.

   Step 1: Node queries host regarding information that is required in
   order to authenticate:

   <iq type="get" id="auth_1">
     <query xmlns="jabber:iq:auth">
       <username>juliet</username>
     </query>
   </iq>














Miller & Saint-Andre      Expires May 4, 2003                  [Page 13]

Internet-Draft           XMPP Instant Messaging            November 2002


   Step 2: Host responds with the required authentication fields:

   <iq type="result" id="auth_1">
     <query xmlns="jabber:iq:auth">
       <username>juliet</username>
       <digest/>
       <resource/>
     </query>
   </iq>

   Step 3: Node sends authentication information (encrypted password):

   <iq type="set" id="auth_2">
     <query xmlns="jabber:iq:auth">
       <username>juliet</username>
       <digest>64d60e40febe09264c52bc9cbddd5dd1147fae97</digest>
       <resource>balcony</resource>
     </query>
   </iq>

   Step 4: Host informs node of successful authentication:

   <iq type="result" id="auth_2"/>

   Step 4 (alt): Host informs node of failed authentication:

   <iq
       type="error"
       from="capulet.com"
       id="auth_2"/>
     <query xmlns="jabber:iq:auth">
       <username>juliet</username>
       <digest>64d60e40febe09264c5wrongpassword2bc9cbddd5dd1147fae97</digest>
       <resource>balcony</resource>
     </query>
     <error code="401">Unauthorized</error>
   </iq>


3.3 Definition of the 'jabber:iq:auth' Namespace

3.3.1 Children

   o  username - the unique username for this node (usually an IM user).

   o  password - the secret key or passphrase for the node's access to
      the host.




Miller & Saint-Andre      Expires May 4, 2003                  [Page 14]

Internet-Draft           XMPP Instant Messaging            November 2002


   o  digest - the concatenation of the stream id and the password,
      encrypted according to the SHA1 Secure Hash Algorithm [5] and
      represented as all lowercase hex.

   o  resource - unique value to represent current connection.


3.3.2 DTD

   <!ELEMENT query ((username? | (password | digest)? | resource)*)>

   <!ELEMENT username (#PCDATA)>
   <!ELEMENT password (#PCDATA)>
   <!ELEMENT digest (#PCDATA)>
   <!ELEMENT resource (#PCDATA)>




































Miller & Saint-Andre      Expires May 4, 2003                  [Page 15]

Internet-Draft           XMPP Instant Messaging            November 2002


3.3.3 Schema

   <?xml version='1.0' encoding='UTF-8'?>
   <xsd:schema
       xmlns:xsd='http://www.w3.org/2001/XMLSchema'
       targetNamespace='http://www.jabber.org/protocol'
       xmlns='http://www.jabber.org/protocol'
       elementFormDefault='qualified'>

     <xsd:element name='query'>
       <xsd:complexType>
         <xsd:choice minOccurs='0' maxOccurs='unbounded'>
           <xsd:element ref='username'/>
           <xsd:choice minOccurs='0' maxOccurs='1'>
             <xsd:element ref='password'/>
             <xsd:element ref='digest'/>
           </xsd:choice>
           <xsd:element ref='resource'/>
         </xsd:choice>
       </xsd:complexType>
     </xsd:element>

     <xsd:element name='username' type='xsd:string'/>
     <xsd:element name='password' type='xsd:string'/>
     <xsd:element name='digest' type='xsd:string'/>
     <xsd:element name='resource' type='xsd:string'/>

   </xsd:schema>























Miller & Saint-Andre      Expires May 4, 2003                  [Page 16]

Internet-Draft           XMPP Instant Messaging            November 2002


4. Exchanging Messages

   Exchanging messages is simple within XMPP: using a message chunk, a
   node can send a message to any other node (or, more generally, any
   entity).

4.1 Specifying an Intended Recipient

   A node SHOULD specify an intended recipient for the message by
   providing an appropriate JID in the 'to' attribute of the <message/>
   element.  Normally, the value of the 'to' attribute specifies an
   entity other than the sending node (for exceptions, see the next
   paragraph).  The intended recipient MAY be any valid JID (e.g., a
   node on the same host, a node on a different host, the host itself,
   or another host).

   If no 'to' address is specified, it is implied that the message is
   addressed to the sending node itself (i.e., the node@host sending the
   chunk); furthermore, a message explicitly or implicitly addressed to
   the sending node itself is processed by the host on behalf of that
   node.  A message addressed to a specific connected resource
   associated with the sending node is delivered to that node@host/
   resource (which MAY be different from the connected resource that
   generated the message).

4.2 Specifying a Message Type

   As mentioned in [1], there are several defined types of messages
   (specified by means of a 'type' attribute within the <message/>
   element).  In the context of an instant messaging application, a node
   MAY include a message type in order to capture the conversational
   context of the message, thus providing a hint regarding presentation
   (e.g., in a GUI).  If included, the 'type' attribute SHOULD have one
   of the following values (any other value MAY be ignored):

   o  chat -- The message is sent in the context of a one-to-one chat
      conversation.

   o  groupchat -- The message is sent in the context of a multi-user
      chat environment.

   o  headline -- The message is generated by an automated service that
      delivers content (news, sports, market information, etc.).

   o  error - A message returned to a sender specifying an error
      associated with a previous message sent by the sender (for a full
      list of error messages, see [1])




Miller & Saint-Andre      Expires May 4, 2003                  [Page 17]

Internet-Draft           XMPP Instant Messaging            November 2002


4.3 Specifying a Message Subject

   A message chunk MAY contain a child element specifying the subject of
   the message.  The subject MUST NOT contain mixed content.

   A message with a subject:

   <message to="romeo@montague.net" from="juliet@capulet.com/balcony">
     <subject>Imploring</subject>
     <body>Wherefore art thou, Romeo?</body>
   </message>


4.4 Specifying a Message Thread

   A message chunk MAY contain a child element specifying the thread of
   the message for the purpose of tracking a conversation thread.  The
   content of the <thread/> element is a random string that is generated
   by the sender; this string MAY be copied back to the sender in
   subsequent replies.  If included, the <thread/> element MUST have no
   attributes and MUST NOT contain mixed content.

   A simple threaded conversation:

   <message
       to="romeo@montague.net/orchard"
       from="juliet@capulet.com/balcony"
       type="chat">
     <body>Art thou not Romeo, and a Montague?</body>
     <thread>283461923759234</thread>
   </message>

   <message
       to="juliet@capulet.com/balcony"
       from="romeo@montague.net/orchard"
       type="chat">
     <body>Neither, fair saint, if either thee dislike.</body>
     <thread>283461923759234</thread>
   </message>

   <message
       to="romeo@montague.net/orchard"
       from="juliet@capulet.com/balcony"
       type="chat">
     <body>How cam'st thou hither, tell me, and wherefore?</body>
     <thread>283461923759234</thread>
   </message>




Miller & Saint-Andre      Expires May 4, 2003                  [Page 18]

Internet-Draft           XMPP Instant Messaging            November 2002


4.5 Specifying a Message Body

   A message chunk MAY (and usually will) contain a child element
   specifying the body of the message.  The body MUST NOT contain mixed
   content.  If it is necessary to provide the message body in an
   alternate form (e.g., encrypted using the public key infrastructure
   or formatted using XHTML), the alternate form SHOULD be contained in
   an appropriately-namespaced child of the message chunk other than the
   <body/> element.

4.6 Specifying Additional Information

   A message chunk MAY house an element containing content that extends
   the meaning of the message (e.g., an encrypted form of the message
   body).  In common usage this child element is often the <x/> element
   but MAY be any element, as long as the 'xmlns' namespace declaration
   is something other than the streams namespace and the default
   namespace; this extended namespace defines all elements contained
   within the child element.

4.7 Message-Related Errors

   If a message sent by a sender cannot be delivered, a host SHOULD
   return that message to the sender in a message chunk of type "error"
   along with an appropriate error message (for a list of error
   messages, see [1]).

   A message-related error:

   <message
       to="juliet@capulet.com"
       from="romeo@montague.net">
     <body>Sleep dwell upon thine eyes</body>
   </message>

   <message
       to="romeo@montague.net"
       from="juliet@capulet.com"
       type="error">
     <body>Sleep dwell upon thine eyes</body>
     <error code="404">No Such JID</error>
   </message>









Miller & Saint-Andre      Expires May 4, 2003                  [Page 19]

Internet-Draft           XMPP Instant Messaging            November 2002


5. Exchanging Presence Information

   Exchanging presence information is made relatively simple within XMPP
   by using presence chunks.  However, we see here a contrast to the
   handling of messages: although a node MAY send directed presence
   information to another entity, in general presence information is
   sent from a node to a host and then broadcasted by the host to any
   entities that are subscribed to the presence of the sending entity.

5.1 Node and Host Responsibilities

   When a node connects to a host, it sends an initial presence chunk to
   the host to express default availability.  This presence chunk MUST
   have no type.

   Upon receiving initial presence from a node, the host sends presence
   probes to any remote entities that are subscribed to that node's
   presence (as represented in the node's roster) in order to determine
   if they are available.  (The remote host is responsible for
   responding to the presence probe only when (1) the probing entity has
   been allowed to access the probed entity's presence, e.g., by server
   rules or user subscriptions, and (2) the probed entity is available;
   the probing entity's host then informs the probing entity of the
   probed entity's last known available presence, for all of the probed
   entity's resources if applicable.) The host then sends the node's
   initial presence chunk to any subscribed entities that are available.

   Throughout the active session of a connected resource associated with
   the node, the host is responsible for broadcasting any changes in the
   availability status of the connected resource to the subscribed
   entities that are available, so that such entities are apprised of
   availability changes.

   Finally, the host MUST notify all of the subscribed and available
   entities when a connected resource becomes unavailable.

5.2 Sending Initial Presence

   Upon authenticating, a node SHOULD send initial presence to its host
   indicating that the connected resource is available for
   communications.  This presence chunk MUST have no type.

   Initial presence sent from node to host:

   <presence/>






Miller & Saint-Andre      Expires May 4, 2003                  [Page 20]

Internet-Draft           XMPP Instant Messaging            November 2002


5.3 Specifying Availability Status

   A node MAY provide further information about its availability status
   by using the <show/> element.  As defined in [1], the recognized
   values for the show element are "away", "chat", "xa", and "dnd".

   Availability status:

   <presence>
     <show>away</show>
   </presence>


5.4 Specifying Detailed Status Information

   In conjunction with the  <show/> element, a node MAY provide detailed
   status information by using the <status/> element.  The content of
   this element is a natural-language description of the node's current
   availability status.

   Detailed status information:

   <presence>
     <show>dnd</show>
     <status>Busy fighting the Romans</status>
   </presence>


5.5 Probing for Presence

   A node or a host MAY probe for the current presence of another
   entity.  A node probing for the presence of another node MUST have
   permission to view the presence of the probed node.

   Presence probe:

   <presence type="probe" to="romeo@montague.net"/>


5.6 Sending Final Presence

   Upon ending its session with a host, a node SHOULD send a final
   presence chunk that is explicitly of type unavailable.

   Sending final presence to express unavailable state:

   <presence type="unavailable"/>




Miller & Saint-Andre      Expires May 4, 2003                  [Page 21]

Internet-Draft           XMPP Instant Messaging            November 2002


6. Managing Subscriptions

   In order to protect the privacy of instant messaging users and any
   other entities, presence and availability information is made
   available only to other entities that the user has approved.  When a
   user has agreed that another entity may view its presence, the entity
   is said to have a subscription to the user's presence information.
   Note well that a subscription lasts across sessions; indeed, it lasts
   until the subscriber unsubscribes or the subscribee cancels the
   previously-granted subscription.  Subscriptions are completed within
   XMPP by sending presence chunks containing specially-defined
   attributes of presence chunks.

6.1 Requesting a Subscription

   A request to subscribe to another entity's presence is made by
   sending a presence chunk of type "subscribe".

   Sending a subscription request:

   <presence
       to="juliet@capulet.com"
       from="romeo@montague.net"
       type="subscribe"/>


6.2 Handling a Subscription Request

   When a node receives a subscription request from another entity, it
   MAY accept the request by sending a presence chunk of type
   "subscribed" or decline the request by sending a presence chunk of
   type "unsubscribed".

   Accepting a subscription request:

   <presence
       to="romeo@montague.net"
       from="juliet@capulet.com"
       type="subscribed"/>












Miller & Saint-Andre      Expires May 4, 2003                  [Page 22]

Internet-Draft           XMPP Instant Messaging            November 2002


   Denying a presence subscription request:

   <presence
       to="romeo@montague.net"
       from="juliet@capulet.com"
       type="unsubscribed"/>


6.3 Cancelling a Subscription from Another Entity

   If a node would like to cancel a previously-granted subscription
   request, it sends a presence chunk of type "unsubscribed".

   Cancelling a previously granted subscription request:

   <presence
       to="romeo@montague.net"
       from="juliet@capulet.com"
       type="unsubscribed"/>


6.4 Unsubscribing from Another Entity's Presence

   If a node would like to unsubscribe from the presence of another
   entity, it sends a presence chunk of type "unsubscribe".

   Unsubscribing from an entity's presence:

   <presence
       to="juliet@capulet.com"
       from="romeo@montague.net"
       type="unsubscribe"/>



















Miller & Saint-Andre      Expires May 4, 2003                  [Page 23]

Internet-Draft           XMPP Instant Messaging            November 2002


7. Managing One's Roster

   One's list of contacts is called a roster.  A roster is stored by the
   host so that a user may access roster information from any connected
   resource.

7.1 Receiving One's Roster on Login

   Upon connecting to the host, a node SHOULD request the roster
   (however, because receiving the roster may not be desirable for all
   resources, e.g., a connection with limited bandwidth, the node's
   request for the roster is OPTIONAL).

   Node requests current roster from host:

   <iq id="roster_1" type="get">
     <query xmlns="jabber:iq:roster"/>
   </iq>

   Node receives roster from the host:

   <iq
       from="capulet.com"
       to="juliet@capulet.com/balcony"
       id="roster_1"
       type="result">
     <query xmlns="jabber:iq:roster>
       <item
           jid="romeo@montague.net"
           name="Romeo"
           subscription="both"/>
       <item
           jid="mercutio@montague.net"
           name="Mercutio"
           subscription="both">
         <group>Friends</group>
       </item>
       <item
           jid="benvolio@montague.net"
           name="Benvolio"
           subscription="both">
         <group>Friends</group>
       </item>
     </query>
   </iq>






Miller & Saint-Andre      Expires May 4, 2003                  [Page 24]

Internet-Draft           XMPP Instant Messaging            November 2002


7.2 Adding a Roster Item

   At any time, a node MAY add an item to its roster.

   Node adds a new item:

   <iq type="set" id="roster_2">
     <query xmlns="jabber:iq:roster">
       <item
           name="Nurse"
           jid="nurse@capulet.com">
         <group>Servants</group>
       </item>
     </query>
   </iq>

   The host is responsible for updating the roster information in
   persistent storage, and also for pushing that change out to all
   connected resources for the node using an IQ chunk of type "set".
   This enables all connected resources to remain in sync with the host-
   based roster information.






























Miller & Saint-Andre      Expires May 4, 2003                  [Page 25]

Internet-Draft           XMPP Instant Messaging            November 2002


   Host replies with an IQ result to the sending resource and pushes the
   updated roster information to all connected resources:

   <iq
       from="capulet.com"
       to="juliet@capulet.com/balcony"
       type="result"
       id="roster_2"/>
   <iq
       from="capulet.com"
       to="juliet@capulet.com/balcony"
       type="set"
       id="roster_3"/>
     <query xmlns="jabber:iq:roster">
       <item
           name="Nurse"
           jid="nurse@capulet.com">
         <group>Servants</group>
       </item>
     </query>
   </iq>
   <iq
       from="capulet.com"
       to="juliet@capulet.com/chamber"
       type="set"
       id="roster_3"/>
     <query xmlns="jabber:iq:roster">
       <item
           name="Nurse"
           jid="nurse@capulet.com"
           subscription="none">
         <group>Servants</group>
       </item>
     </query>
   </iq>


7.3 Deleting a Roster Item

   At any time, a node MAY delete an item from its roster by doing an IQ
   set and making sure that the value of the 'subscription' attribute is
   "remove".









Miller & Saint-Andre      Expires May 4, 2003                  [Page 26]

Internet-Draft           XMPP Instant Messaging            November 2002


   Node removes a item:

   <iq type="set" id="roster_2">
     <query xmlns="jabber:iq:roster">
       <item
           name="Nurse"
           jid="nurse@capulet.com"
           subscription="remove">
         <group>Servants</group>
       </item>
     </query>
   </iq>

   Note: as with adding a roster item, when deleting a roster item the
   host is responsible for updating the roster information in persistent
   storage, and also for pushing that change out to all connected
   resources for the node using an IQ chunk of type "set".

7.4 Definition of the 'jabber:iq:roster' Namespace

7.4.1 Children

   A <query/> element scoped by the 'jabber:iq:roster' namespace MAY
   contain zero or more <item/> elements.  An item element MAY contain
   the following attributes:

   o  jid - A REQUIRED attribute that contains the complete JID of the
      contact that this item represents

   o  name - An OPTIONAL attribute that contains a natural-language name
      for the contact

   o  subscription - The current status of the subscription related to
      this item.  Should be one of the following (all other values are
      ignored):

      *  none - no subscription.

      *  from - this entity has a subscription to the contact.

      *  to - the contact has a subscription to this entity.

      *  both - subscription is both to and from.

      *  remove - item is to be removed.

   o  ask - An OPTIONAL attribute specifying the current status of a
      request to this contact.  Should be one of the following (all



Miller & Saint-Andre      Expires May 4, 2003                  [Page 27]

Internet-Draft           XMPP Instant Messaging            November 2002


      other values are ignored):

      *  subscribe - this entity is asking to subscribe to that
         contact's presence.

      *  unsubscribe - this entity is asking unsubscribe from that
         contact's presence.

   An <item/> element MAY contain zero or more instances of the
   following element:

   o  group - Natural-language name of a user-specified group for the
      purpose of categorizing contacts into groups.


7.4.2 DTD

   <!ELEMENT query ((item)*)>

   <!ELEMENT item ((group)*)>
   <!ATTLIST item
       jid CDATA #REQUIRED
       name CDATA #IMPLIED
       subscription ( to | from | both | none | remove ) #IMPLIED
       ask ( subscribe | unsubscribe ) #IMPLIED
       >
   <!ELEMENT group (#PCDATA)>


7.4.3 Schema

   <?xml version='1.0' encoding='UTF-8'?>
   <xsd:schema
       xmlns:xsd='http://www.w3.org/2001/XMLSchema'
       targetNamespace='http://www.jabber.org/protocol'
       xmlns='http://www.jabber.org/protocol'
       elementFormDefault='qualified'>

     <xsd:element name='query'>
       <xsd:complexType>
         <xsd:sequence minOccurs='0' maxOccurs='unbounded'>
           <xsd:element ref='item'/>
         </xsd:sequence>
       </xsd:complexType>
     </xsd:element>

     <xsd:element name='item'>
       <xsd:complexType>



Miller & Saint-Andre      Expires May 4, 2003                  [Page 28]

Internet-Draft           XMPP Instant Messaging            November 2002


         <xsd:sequence minOccurs='0' maxOccurs='unbounded'>
           <xsd:element ref='group'/>
         </xsd:sequence>
         <xsd:attribute name='jid' type='xsd:string' use='required'/>
         <xsd:attribute name='name' type='xsd:string' use='optional'/>
         <xsd:attribute name='subscription' use='optional'>
           <xsd:simpleType>
             <xsd:restriction base='xsd:string'>
               <xsd:enumeration value='to'/>
               <xsd:enumeration value='from'/>
               <xsd:enumeration value='both'/>
               <xsd:enumeration value='none'/>
               <xsd:enumeration value='remove'/>
             </xsd:restriction>
           </xsd:simpleType>
         </xsd:attribute>
         <xsd:attribute name='ask' use='optional'>
           <xsd:simpleType>
             <xsd:restriction base='xsd:string'>
               <xsd:enumeration value='subscribe'/>
               <xsd:enumeration value='unsubscribe'/>
             </xsd:restriction>
           </xsd:simpleType>
         </xsd:attribute>
       </xsd:complexType>
     </xsd:element>

     <xsd:element name='group' type='xsd:string'/>

   </xsd:schema>





















Miller & Saint-Andre      Expires May 4, 2003                  [Page 29]

Internet-Draft           XMPP Instant Messaging            November 2002


8. Routing and Delivery Guidelines

   XML chunks that are not handled directly by a host (e.g., for the
   purpose of data storage or rebroadcasting) are routed or delivered to
   the intended recipient of the chunk as represented by a JID in the
   'to' attribute.  The following rules apply:

   o  If the JID contains a resource identifier (to="node@host/
      resource"), the chunk is delivered first to the resource that
      exactly matches the resource identifier, or secondarily to a
      resource that matches partially (e.g., resource "foo" partially
      matches resource identifier "foobar").

   o  If the JID contains a resource identifier and there are no
      matching resources, but there are other connected resources
      associated with the node, then message chunks are further
      processed as if no resource is specified (see next item).  For all
      other chunks, the host should return them to the sender with a
      type of "error" and an appropriate error code (503) and message.

   o  If the JID contains only a node@host and there is at least one
      connected resource available for the node, the host should deliver
      the chunk to an appropriate resource based on the availability
      state, priority, and connect time of the connected resource(s).
      (Existing XMPP implementations contain some hardcoded rules, based
      on <priority/> and most recent connection time, for the routing of
      such chunks.  A more flexible approach to routing would be
      desirable.)

   o  If the JID contains only a node@host and there are no connected
      resources available for the node (e.g., an IM user is offline),
      the host MAY choose to store the chunk (usually only message and
      presence subscription chunks) on behalf of the node and deliver
      the chunk when a resource becomes available for that node.

















Miller & Saint-Andre      Expires May 4, 2003                  [Page 30]

Internet-Draft           XMPP Instant Messaging            November 2002


9. Security Considerations

   For security considerations, refer to the relevant section of [1].
















































Miller & Saint-Andre      Expires May 4, 2003                  [Page 31]

Internet-Draft           XMPP Instant Messaging            November 2002


References

   [1]  Miller, J. and P. Saint-Andre, "XMPP Core (draft-miller-xmpp-
        core-02, work in progress)", November 2002.

   [2]  Day, M., Aggarwal, S., Mohr, G. and J. Vincent, "A Model for
        Presence and Instant Messaging", RFC 2779, February 2000,
        <http://www.ietf.org/rfc/rfc2779.txt>.

   [3]  Jabber Software Foundation, "Jabber Software Foundation", August
        2001, <http://www.jabber.org/>.

   [4]  Bradner, S., "Key words for use in RFCs to Indicate Requirement
        Levels", BCP 14, RFC 2119, March 1997.

   [5]  World Wide Web Consortium, "Secure Hash Algorithm - Version
        1.0", October 1997, <http://www.w3.org/PICS/DSig/SHA1_1_0.html>.


Authors' Addresses

   Jeremie Miller
   Jabber Software Foundation
   1899 Wynkoop Street, Suite 600
   Denver, CO  80202
   US

   EMail: jeremie@jabber.org
   URI:   http://www.jabber.org/people/jer.php


   Peter Saint-Andre
   Jabber Software Foundation
   1899 Wynkoop Street, Suite 600
   Denver, CO  80202
   US

   EMail: stpeter@jabber.org
   URI:   http://www.jabber.org/people/stpeter.php












Miller & Saint-Andre      Expires May 4, 2003                  [Page 32]

Internet-Draft           XMPP Instant Messaging            November 2002


Full Copyright Statement

   Copyright (C) The Internet Society (2002).  All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Acknowledgement

   Funding for the RFC Editor function is currently provided by the
   Internet Society.



















Miller & Saint-Andre      Expires May 4, 2003                  [Page 33]

