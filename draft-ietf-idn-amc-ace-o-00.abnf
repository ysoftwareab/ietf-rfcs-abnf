codept ==  45      ;
c1 = *s1;
c2 = *s2;
k = find_refpoint(state->refpoint, 1, n);
i = k - 1;
q = base32_decode(state->in_next[k++]);
delta = (delta << 4) | (q & 0xF);
k == 2 && p - 0xD8 <= 7  ?  special_refpoint[p - 0xD8]  :  p << (4*k);

k == 2 && p - 0xD8 <= 7  ?  special_refpoint[p - 0xD8] >> 4  :  p << 4;
status = encode_point(state, state->prefix[k]);
literal = 0;

codept = input[i];

literal = 1;
literal = 0;
status = encode_point(state,codept);
next_out = 0;
max_out = *output_length;

status = decode_point(state, &p);
literal = 0;

c = *state->in_next;
literal = !literal;
status = decode_point(state, output + next_out);
input_size = state->in_next - input + 1;
scratch_size = input_size;
status = amc_ace_o_encode(next_out, output, uppercase_flags,
                            &scratch_size, scratch_space);
unicode_max_length = 256,
ace_max_size = 256,
test_case_sensitivity = case_insensitive  /* suitable for host names */
input_length = 0;

c0 = getchar();
c1 = getchar();
c2 = getchar();
c3 = getchar();
output_size = ace_max_size;
status = amc_ace_o_encode(input_length, input, uppercase_flags,
                              &output_size, output);
r = fputs(output,stdout);
output_length = unicode_max_length;
status = amc_ace_o_decode(test_case_sensitivity, scratch, input,
                              &output_length, output, uppercase_flags);
r = putchar(uppercase_flags[i] ? 0x80 : 0);
codept = output[i];
r = putchar(codept >> 16);
r = putchar((codept >> 8) & 0xFF);
r = putchar(codept & 0xFF);
