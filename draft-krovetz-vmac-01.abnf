Tag = H_K1(M) + F_K2(Nonce)

n = bitlength(S) / 64
T = <empty string>
SReversed_i = W_8 || W_7 || ... || W_1
T = T || SReversed_i
n = ceil(numbits / BLOCKLEN)

Y = <empty string>
T = uint2str(index, 8) || uint2str(i, BLOCKLEN-8)
Y = Y || ENCIPHER(K, T)
Y = Y[1...numbits]

index = str2uint(Nonce) mod 2^i
Nonce = Nonce[1...bitlength(Nonce)-i] || zeros(i)

Nonce = zeros(BLOCKLEN - bitlength(Nonce)) || Nonce

T = ENCIPHER(K, Nonce)
Y = T[index * taglen + 1 ... index * taglen + taglen ]

HashedMessage = VHASH(K, M, taglen)
Pad           = PDF(K, Nonce, taglen)

Tag = <empty string>
T = Pad          [1 + 64 * i ... 64 * (i + 1)] +_64
            HashedMessage[1 + 64 * i ... 64 * (i + 1)]
Tag = Tag || T
L1KEYLEN     = 1024
FAVOR-ENDIAN = LITTLE

Y = <empty string>
A = L1-HASH(K, M, i)
B = L2-HASH(K, A, bitlength(M), i)
Y = Y || L3-HASH(K, B, i)
T = KDF(K, 128, L1KEYLEN + 128 * iter)
K = T[1 + 128 * iter ... L1KEYLEN + 128 * iter]
Y = <empty string>
t = ceil(bitlength(M) / L1KEYLEN)
M_i = zeropad(M_i, 128)
Y = Y || NH(K, M_i)
t = bitlength(M) / 64
Y = zeros(128)
i = 1
Y = Y +_128 ((M_i +_64 K_i) *_128 (M_{i+1} +_64 K_{i+1}))
i = i + 2
Y = zeros(2) || Y[3...128] // Zero two bits (ie, mod 2^126)

T = KDF(K, 192, 128 * (iter + 1))
T = T[1 + 128 * iter ... 128 * (iter + 1)]
k = str2uint(zeros(3) || T[ 4...32] || zeros(3) || T[ 36... 64] ||
                  zeros(3) || T[68...96] || zeros(3) || T[100...128])

n = bitlength(M) / 128
p127 = 2^127 - 1    // 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF in hex
y = 1
m_i = str2uint(M_i)
y = (y * k + m_i) mod p127
y = k

y = (y + (len mod L1KEYLEN) * 2^64) mod p127
Y = uint2str(y, 128)

p64 = 2^64 - 257     // 0xFFFFFFFFFFFFFEFF in hex
i = 0
need = iter + 1
T    = KDF(K, 224, 128 * (i + 1))
T    = T[1 + 128 * i ... 128 * (i + 1)]
k_1  = str2uint(T[ 0... 64])
k_2  = str2uint(T[65...128])
i    = i + 1
need = need - 1
m_1  = str2uint(M) div (2^64 - 2^32)
m_2  = str2uint(M) mod (2^64 - 2^32)
y = ((m_1 + k_1) * (m_2 + k_2)) mod p64
Y = uint2str(y, 64)

K  = "abcdefghijklmnop"              // A 128-bit VMAC key
N  = "bcdefghi"                      // A 64-bit nonce

