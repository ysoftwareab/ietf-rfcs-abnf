service-type-with-NA = srvtype-string "." NA-string
restricted-string    = ALPHA / "+" / "-"
srvtype-string       = restricted-string
NA-string            = restricted-string

SL_CHAR_ASCII = 3, SL_CHAR_LATIN1 = 4, SL_CHAR_UTF8 = 6
SL_TYPE_RESULT = 1, SL_ATTR_RESULT = 2, SL_SRV_RESULT = 3,
SL_SCOPE_RESULT = 4
SL_STR_VAL = 1, SL_INT_VAL = 2,  SL_OPAQUE_VAL = 3,
SL_BOOL_VAL = 4
err = SL_Register(
            sh,                              /* supply the SrvHandle   */
            "service:http://myhost.sun.com", /* supply the URL         */
            "en", 0,                         /* reg in English         */
            CHAR_ASCII,                      /* reg in UTF8            */
            "(SCOPE=ENGINEERING),"           /* declare attributes     */
            "(HOME PAGES="
              "schedule/index.html::Schedule::"
                 "This site contains updated timelines for all the work in"
                 "the F.L.O.R.B. project,"
              "snort/releases.html::Bob Snort's Home::"
                 "Release engineer Bob posts results of all the builds here,"
              "specs/index.html::Specs galore::"
                 "Technical specifications for the F.L.O.R.B. and X872"
                 "projects.)",
              -1,                            /* continual registration */
               0);                           /* use default refresh    */

pr = SL_GetService(sh, "http/engineering/HOME PAGE ="
              "specs/index.html::Specs galore::"
                 "Technical specifications for the F.L.O.R.B. and X872"
                 "projects./");

white = SPACE / TAB / CR / LF
query = listquery /         ; conjunction query
              generalquery /      ; complex query
              *white              ; ie. the query matches everything

predicate   = srvtype [ "." na ] "/" scope "/" query "/"

schemechar  = ALPHA / "+" / "-"
srvtype     = schemechar
na          = schemechar
                      ; omit na when it is "IANA", the default

scope       = ; Any string with the following restrictions:
                    ; "/", ",", and ":" are not allowed in this
                    ; string. "LOCAL" and "REMOTE" scope strings are
                    ; reserved.

safe-char   = ; Any character with the following restrictions:
                    ; "(", ")", ",", "=", "!", ">", "<", "/", "*"
                    ; are not allowed.
attr-tag    = 1*safe-char

safer-char  = ; As safe-char but SPACE is also not allowed.
keyword     = 1*safer-char

query-item  =  keyword / attr-tag comp-op value

comp-op     = "!=" / "==" / "<" / "<=" / ">" / ">="

value      =  string / integer / boolean / opaque

string     =  1*safe-char

integer    =  [-] 1*DIGIT
                      ; The integer MUST fall within the range of
                      ; values a 32 bit integer may take, ie.
                      ; "-2147483648" to "2147483647".

boolean    =  "TRUE" / "FALSE"
                      ; These values are the only exception to the
                      ; Internationalization rules in Section 8.0.
                      ; Independent of the translation of the
                      ; attributes, the boolean values remain the
                      ; indicated strings.

rad64-char =  ALPHA / DIGIT / "+" / "-" / white-sp
opaque     =  1*DIGIT ":" 4*rad64-char
                      ; The digits define the original length of the
                      ; opaque value. The restricted character string
                      ; is the radix-64 encoding of the opaque value.
                      ; See [RFC 1521], Section 5.2.

                      ; NOTE:  White space is ignored in decoding
                      ; radix-64 values.

list-query = 1#query-item

general-query   = "(" "&" general-query query-item-list ")" /
                        "(" "|" general-query query-item-list ")" /
                        "(" query-item ")"

query-item-list = general-query /
                        general-query query-item-list


attr-reg-list = 1#attr-reg
attr-reg      = keyword / "(" attr-tag = 1#value ")

attr-dereg-list = 1#attr-dereg
attr-dereg      = keyword / attr-tag

attr_select_list = 1#attr-select
attr_select      = keyword / attr-tag / partial-tag
partial_tag      = 1*safe-char "*"

