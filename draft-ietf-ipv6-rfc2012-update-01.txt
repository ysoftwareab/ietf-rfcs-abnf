IPv6 MIB Revision Design Team                             Bill Fenner
INTERNET-DRAFT                                          AT&T Research
Expires: May 2003                                    Keith McCloghrie
                                          Rajiv Raghunarayan (Editor)
                                                        Cisco Systems
                                                 Juergen Schoenwalder
                                                      TU Braunschweig
                                                        November 2002


                      Management Information Base
              for the Transmission Control Protocol (TCP)
                 draft-ietf-ipv6-rfc2012-update-01.txt

Status of this Document

This document is an Internet-Draft and is in full conformance with all
provisions of Section 10 of RFC2026.

Internet-Drafts are working documents of the Internet Engineering Task
Force (IETF), its areas, and its working groups.  Note that other 
groups may also distribute working documents as Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six months
and may be updated, replaced, or obsoleted by other documents at any
time.  It is inappropriate to use Internet-Drafts as reference material
or to cite them other than as "work in progress."

The list of current Internet-Drafts can be accessed at
http://www.ietf.org/ietf/1id-abstracts.txt

The list of Internet-Draft Shadow Directories can be accessed at
http://www.ietf.org/shadow.html.


This document is a product of the IPv6 MIB Revision Design Team.
Comments should be addressed to the editor/authors or the mailing 
list at ipng@sunroof.eng.sun.com.

Copyright Notice

Copyright (C) The Internet Society (2001). All Rights Reserved.



                                Abstract

This memo defines a portion of the Management Information Base (MIB) 
for use with network management protocols in the Internet community.  
In particular, it describes managed objects used for implementations 
of the Transmission Control Protocol (TCP) [5] in an IP version 
independent manner.





Raghunarayan, Editor                                           [Page 1]

INTERNET-DRAFT              Expires: May 2003             November 2002


                           Table of Contents


1. The SNMP Management Framework . . . . . . . . . . . . . . . . .    2
2. Revision History. . . . . . . . . . . . . . . . . . . . . . . .    3
3. Overview. . . . . . . . . . . . . . . . . . . . . . . . . . . .    6
4. Definitions . . . . . . . . . . . . . . . . . . . . . . . . . .    7
5. Open Issues . . . . . . . . . . . . . . . . . . . . . . . . . .   24
6. Acknowledgements. . . . . . . . . . . . . . . . . . . . . . . .   25
7. References. . . . . . . . . . . . . . . . . . . . . . . . . . .   25
8. Security Considerations . . . . . . . . . . . . . . . . . . . .   27
9. Editor's Address. . . . . . . . . . . . . . . . . . . . . . . .   27
10. Authors. . . . . . . . . . . . . . . . . . . . . . . . . . . .   28
11. Full Copyright Statement . . . . . . . . . . . . . . . . . . .   28


1.  The SNMP Management Framework

The SNMP Management Framework presently consists of five major
components:

o An overall architecture, described in RFC 2571 [7].

o Mechanisms for describing and naming objects and events for the
  purpose of management.  The first version of this Structure of
  Management Information (SMI) is called SMIv1 and described in STD 16,
  RFC 1155 [8], STD 16, RFC 1212 [9] and RFC 1215 [10]. The second
  version, called SMIv2, is described in STD 58, RFC 2578 [11], STD 58,
  RFC 2579 [12] and STD 58, RFC 2580 [13].

o Message protocols for transferring management information.  The first
  version of the SNMP message protocol is called SNMPv1 and described 
  in STD 15, RFC 1157 [14]. A second version of the SNMP message 
  protocol, which is not an Internet standards track protocol, is 
  called SNMPv2c and described in RFC 1901 [15] and RFC 1906 [16]. The 
  third version of the message protocol is called SNMPv3 and described
  in RFC 1906 [16], RFC 2572 [17] and RFC 2574 [18].

o Protocol operations for accessing management information.  The first
  set of protocol operations and associated PDU formats is described in
  STD 15, RFC 1157 [14]. A second set of protocol operations and
  associated PDU formats is described in RFC 1905 [19].

o A set of fundamental applications described in RFC 2573 [20] and the
  view-based access control mechanism described in RFC 2575 [21].

A more detailed introduction to the current SNMP Management Framework
can be found in RFC 2570 [22].





Raghunarayan, Editor                                           [Page 2]

INTERNET-DRAFT             Expires: May 2003              November 2002


Managed objects are accessed via a virtual information store, termed 
the Management Information Base or MIB.  Objects in the MIB are defined
using the mechanisms defined in the SMI.

This memo specifies a MIB module that is compliant to the SMIv2.  A 
MIB conforming to the SMIv1 can be produced through the appropriate
translations.  The resulting translated MIB must be semantically
equivalent, except where objects or events are omitted because no
translation is possible (use of Counter64).  Some machine readable
information in SMIv2 will be converted into textual descriptions in
SMIv1 during the translation process.  However, this loss of machine
readable information is not considered to change the semantics of the
MIB.


2.  Revision History

Changes from draft-ietf-ipv6-rfc2012-update-00.txt

4th November 2002

     Replaced the tcpConnectionStartTime and tcpListenerStartTime
     objects with tcpConnectionAge and tcpListenerAge respectively.
          
     Added tcpConnectionRemAddressType as an auxiliary object into 
     the tcpConnectionTable.
     
     Added new object, tcpConnectionId, to provide a link into the
     TCP-ESTATS-MIB.
     
     Included tcpConnectionAge and tcpConnectionProcess into the
     tcpConnectionGroup.
          
     Included tcpListenerAge and tcpListenerProcess into the 
     tcpListenerGroup.
     
     tcpListenerGroup added to the mandatory list for compliance.

Changes from draft-ietf-ipngwg-rfc2012-update-01.txt:

27 June 2002

     Replaced all occurrences of the term packets to segments, to be 
     consistent with the TCP specification.

     Added limits to tcpRtoMin, tcpRtoMax and tcpMaxConn.

     Added the scalar, tcpListenerTableLastChange.

     Updated the description of tcpConnectionLocalAddress - removed
     reference to 'listen' state.


Raghunarayan, Editor                                           [Page 3]

INTERNET-DRAFT             Expires: May 2003              November 2002


     Updated the description tcpConnection*Octets to explicitly
     indicate whether the count includes the TCP header octets.

     Updated the description of tcpConnectionStartTime and 
     tcpListenerStartTime - added clarifying text.

     Renamed tcpConnectionProcessID to tcpConnectionProcess.

     Updated the description of tcpListenerTable.

     Updated the description of tcpListenerLocalAddressType to include
     unknown (0) as a valid value.

     Updated the description of tcpListenerLocalAddress - the value 
     ''h (zero-length octet-string) represents the case wherein an
     application is will to accept connections for any IP interface
     associated with the node. 

     Removed tcpListenerRemAddressType.

     Removed tcpListenerHCConnectionsTimedOut and 
     tcpListenerHCConnectionsAccepted. Added them to open issues, to
     be added iff deemed required after discussions.

     Renamed tcpListenerConnectionsAccepted to tcpListenerEstablished
     and tcpListenerConnectionsTimedOut to tcpListenerTimeOuts.

     Renamed tcpListenerProcessID to tcpListenerProcess.

     Updated compliance statement for the object tcpConnectionState -
     support for the value 'deleteTCB (12)' deemed optional.

     Added RFC 2790 and RFC 2287 to the References section.

     Updated Contact-Info and Editor's address.

     Added Authors section.

Changes from draft-ietf-ipngwg-rfc2012-update-00.txt:

14 November 2001

     Added HC versions of connection counters.

     Added Listener table, with counters for accepted and timed out
     connection attempts.

     Added tcp{Connection,Listener}ProcessID to index into SYSAPPL-MIB
     or HOST-RESOURCES-MIB.

     Removed tcpConnectionRemAddrType, it must be the same as
     tcpConnectionLocalAddrType.
     
Raghunarayan, Editor                                           [Page 4]

INTERNET-DRAFT             Expires: May 2003              November 2002


Changes from draft-ops-rfc2012-update-00.txt

12 Jul 2001

     Turned into IPNG WG document

     Added tcpCountersGroup for per-connection counters

Changes from first draft posted to v6mib mailing list:

23 Feb 2001

     Made threshold for HC packet counters 1Mpps

     Added copyright statements and table of contents


21 Feb 2001 -- Juergen's changes

     Renamed tcpInetConn* to tcpConnection*

     Updated Conformance info

     Added missing tcpConnectionState and tcpConnState objects to
     SEQUENCEs

6 Feb 2001

     Removed v6-only objects.

     Renamed inetTcp* to tcpInet*

     Added SIZE restriction to InetAddress index objects.  (36 = 
     32-byte addresses plus 4-byte scope, but it's just a strawman)

     Used InetPortNumber TC from updated INET-ADDRESS-MIB

     Updated compliance statements.

     Added Keith to authors

     Added open issues section.

Changes from RFC 2012

     Deprecated tcpConnTable

     Added tcpConnectionTable





Raghunarayan, Editor                                           [Page 5]

INTERNET-DRAFT             Expires: May 2003              November 2002


3.  Overview

   The current TCP-MIB defined in this memo consists of two tables an
   a group of scalars:

   - The tcp group of scalars reports parameters and statistics of a
     TCP protocol engine.  Three scalars have been added to this group
     since the publication of RFC 2012.  The first two, tcpHCInSegs 
     and tcpHCOutSegs,  provide high-capacity counters for fast 
     networks. The third one, tcpListenerTableLastChange, provides
     management stations with an easier mechanism to validate their 
     listener caches.

   - The tcpConnectionTable provides access to status information for
     all TCP connections handled by a TCP protocol engine. The table
     also contains basic per connection statistics such as the number
     of segments/octets received and sent and it reports
     identification of the operating system level processes which
     handles TCP connections and the start time of a connection.

   - The tcpListenerTable provides access to information about all TCP
     listening endpoints known by a TCP protocol engine. The table
     also contains basic per listening endpoint statistics such as the
     number of connections established (tcpListenerEstablished), number
     of connections that timed out (tcpListenerTimeOuts).  Together, 
     tcpListenerEstablished and tcpListenerTimeOuts, also provide an 
     indication of the total number of connections accepted.  Finally,
     the tcpListenerTable also reports the identification of the
     operating system level processes which handles this listening TCP
     endpoint and the start time when the listening endpoint was 
     created.

3.1 Relationship to Other MIBs

   This section discusses the relationship of this TCP-MIB module to
   other MIB modules.

3.1.1 Relationship to RFC1213-MIB

   TCP related MIB objects were originally defined as part of the
   RFC1213-MIB defined in RFC 1213 [2]. The TCP related objects of
   the RFC1213-MIB were later copied into a separate MIB module and
   published in RFC 2012 [3] in SMIv2 format.

   The previous versions of the TCP-MIB both defined the tcpConnTable,
   which has been deprecated for basically two reasons:

   (1) The tcpConnTable only supports IPv4.

      The current approach in the IETF is to write IP version neutral
      MIBs rather than having different definitions for various
      version of IP. This reduces the amount of overhead when new
      
Raghunarayan, Editor                                           [Page 6]

INTERNET-DRAFT             Expires: May 2003              November 2002


      objects are introduced since there is only one place to add
      them. Hence, the approach taken in RFC 2452 of having separate
      tables is not continued.

   (2) The tcpConnTable mixes listening endpoints with connections.

      It turns out that connections tend to have a different behaviour
      and management access pattern compared to listening endpoints.
      Splitting the original tcpConnTable into two tables thus allows
      to add specific status and statistic objects for listening
      endpoints and connections.

3.1.2 Relationship to IPV6-TCP-MIB

   The IPV6-TCP-MIB defined in RFC 2452 has been moved to Historic
   since the approach of having separate IP version specific tables is
   not followed anymore. Implementation of RFC 2452 is thus not
   suggested anymore.

3.1.3 Relationship to HOST-RESOURCES-MIB and SYSAPPL-MIB

   The tcpConnectionTable and the tcpListenerTable report the
   identification of the operating system level process which handles
   a connection or a listening endpoint. The value is reported as an
   Unsigned32 which is expected to be the same as the hrSWRunIndex of
   the HOST-RESOURCES-MIB (RFC 2790 [24]) (if the value is smaller 
   than 2147483647) or the sysApplElmtRunIndex of the SYSAPPL-MIB
   (RFC 2287 [23]). This allows managment applications to identify the
   TCP connections that belong to an operating system level process
   which has proven to be valuable in operational environments.


4.  Definitions

TCP-MIB DEFINITIONS ::= BEGIN

IMPORTS
    MODULE-IDENTITY, OBJECT-TYPE, Integer32, Unsigned32,
    Gauge32, Counter32, Counter64, IpAddress, mib-2
                                       FROM SNMPv2-SMI
    TimeStamp, TimeInterval            FROM SNMPv2-TC
    MODULE-COMPLIANCE, OBJECT-GROUP    FROM SNMPv2-CONF
    InetAddress, InetAddressType,
    InetPortNumber                     FROM INET-ADDRESS-MIB;









Raghunarayan, Editor                                           [Page 7]

INTERNET-DRAFT             Expires: May 2003              November 2002


tcpMIB MODULE-IDENTITY
    LAST-UPDATED "200211040000Z"
    ORGANIZATION "IETF IPv6 MIB Revision Team"
    CONTACT-INFO
           "Rajiv Raghunarayan (editor)

            Cisco Systems Inc.
            170 West Tasman Drive
            San Jose, CA 95134

            Phone: +1 408 853 9612
            Email: <raraghun@cisco.com>"
    DESCRIPTION
           "The MIB module for managing TCP implementations."
    REVISION      "200211040000Z"
    DESCRIPTION
           "IP version neutral revision, published as RFC XXXX."
    REVISION      "9411010000Z"
    DESCRIPTION
           "Initial SMIv2 version, published as RFC 2012."
    REVISION      "9103310000Z"
    DESCRIPTION
           "The initial revision of this MIB module was part of 
            MIB-II."
    ::= { mib-2 49 }


-- the TCP base variables group

tcp      OBJECT IDENTIFIER ::= { mib-2 6 }


-- Scalars

tcpRtoAlgorithm OBJECT-TYPE
    SYNTAX      INTEGER {
                    other(1),    -- none of the following
                    constant(2), -- a constant rto
                    rsre(3),     -- MIL-STD-1778, Appendix B
                    vanj(4)      -- Van Jacobson's algorithm [1]
                }
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The algorithm used to determine the timeout value used for
            retransmitting unacknowledged octets."
    ::= { tcp 1 }

tcpRtoMin OBJECT-TYPE
    SYNTAX     Integer32 (0..2147483647)
    UNITS      "milliseconds"
    
    
Raghunarayan, Editor                                           [Page 8]

INTERNET-DRAFT             Expires: May 2003              November 2002


    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The minimum value permitted by a TCP implementation for the
            retransmission timeout, measured in milliseconds.  More
            refined semantics for objects of this type depend upon the
            algorithm used to determine the retransmission timeout.  In
            particular, when the timeout algorithm is rsre(3), an 
            object of this type has the semantics of the LBOUND 
            quantity described in RFC 793."
    ::= { tcp 2 }

tcpRtoMax OBJECT-TYPE
    SYNTAX     Integer32 (0..2147483647)
    UNITS      "milliseconds"
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The maximum value permitted by a TCP implementation for the
            retransmission timeout, measured in milliseconds.  More
            refined semantics for objects of this type depend upon the
            algorithm used to determine the retransmission timeout.  In
            particular, when the timeout algorithm is rsre(3), an 
            object of this type has the semantics of the UBOUND 
            quantity described in RFC 793."
    ::= { tcp 3 }

tcpMaxConn OBJECT-TYPE
    SYNTAX     Integer32 (-1 | 0..2147483647)
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The limit on the total number of TCP connections the entity
            can support.  In entities where the maximum number of
            connections is dynamic, this object should contain the 
            value -1."
    ::= { tcp 4 }

tcpActiveOpens OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of times TCP connections have made a direct
            transition to the SYN-SENT state from the CLOSED state."
    ::= { tcp 5 }

tcpPassiveOpens OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current


Raghunarayan, Editor                                           [Page 9]

INTERNET-DRAFT             Expires: May 2003              November 2002


    DESCRIPTION
           "The number of times TCP connections have made a direct
            transition to the SYN-RCVD state from the LISTEN state."
    ::= { tcp 6 }

tcpAttemptFails OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of times TCP connections have made a direct
            transition to the CLOSED state from either the SYN-SENT
            state or the SYN-RCVD state, plus the number of times TCP
            connections have made a direct transition to the LISTEN
            state from the SYN-RCVD state."
    ::= { tcp 7 }

tcpEstabResets OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of times TCP connections have made a direct
            transition to the CLOSED state from either the ESTABLISHED
            state or the CLOSE-WAIT state."
    ::= { tcp 8 }

tcpCurrEstab OBJECT-TYPE
    SYNTAX     Gauge32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of TCP connections for which the current state
            is either ESTABLISHED or CLOSE-WAIT."
    ::= { tcp 9 }

tcpInSegs OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The total number of segments received, including those
            received in error.  This count includes segments received
            on currently established connections."
    ::= { tcp 10 }

tcpOutSegs OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The total number of segments sent, including those on

Raghunarayan, Editor                                          [Page 10]

INTERNET-DRAFT             Expires: May 2003              November 2002


            current connections but excluding those containing only
            retransmitted octets."
    ::= { tcp 11 }

tcpRetransSegs OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The total number of segments retransmitted - that is, the
            number of TCP segments transmitted containing one or more
            previously transmitted octets."
    ::= { tcp 12 }

tcpInErrs OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The total number of segments received in error (e.g., bad
            TCP checksums)."
    ::= { tcp 14 }

tcpOutRsts OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of TCP segments sent containing the RST flag."
    ::= { tcp 15 }

-- { tcp 16 } was used to represent the ipv6TcpConnTable in RFC 2452,
-- which has since been obsoleted. It MUST not be used.

tcpHCInSegs OBJECT-TYPE
    SYNTAX     Counter64
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The total number of segments received, including those
            received in error, on systems that can receive more than 1
            million TCP segments per second.  This count includes
            segments received on currently established connections."
    ::= { tcp 17 }

tcpHCOutSegs OBJECT-TYPE
    SYNTAX     Counter64
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The total number of segments sent, including those on


Raghunarayan, Editor                                          [Page 11]

INTERNET-DRAFT             Expires: May 2003              November 2002


            current connections but excluding those containing only
            retransmitted octets, on systems that can transmit more 
            than 1 million TCP segments per second."
    ::= { tcp 18 }

tcpListenerTableLastChange OBJECT-TYPE
    SYNTAX     TimeStamp
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The value of sysUpTime at the time of the last
            creation or deletion of an entry in the tcpListenerTable.
            If the number of entries has been unchanged since the
            last re-initialization of the local network management
            subsystem, then this object contains a zero value."
    ::= { tcp 19 }

-- The TCP Connection table

tcpConnectionTable OBJECT-TYPE
    SYNTAX     SEQUENCE OF TcpConnectionEntry
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "A table containing information about existing TCP
            connections.  Note that unlike earlier TCP MIBs, there 
            is a seperate table for connections in the LISTEN state."
    ::= { tcp 20 }

tcpConnectionEntry OBJECT-TYPE
    SYNTAX     TcpConnectionEntry
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "A conceptual row of the tcpConnectionTable containing
            information about a particular current TCP connection.  
            Each row of this table is transient, in that it ceases to
            exist when (or soon after) the connection makes the
            transition to the CLOSED state."
    INDEX   { tcpConnectionLocalAddressType,
              tcpConnectionLocalAddress,
              tcpConnectionLocalPort,
              tcpConnectionRemAddressType,
              tcpConnectionRemAddress,
              tcpConnectionRemPort }
    ::= { tcpConnectionTable 1 }

TcpConnectionEntry ::= SEQUENCE {
        tcpConnectionLocalAddressType   InetAddressType,
        tcpConnectionLocalAddress       InetAddress,
        tcpConnectionLocalPort          InetPortNumber,
        tcpConnectionRemAddressType     InetAddressType,

Raghunarayan, Editor                                          [Page 12]

INTERNET-DRAFT             Expires: May 2003              November 2002


        tcpConnectionRemAddress         InetAddress,
        tcpConnectionRemPort            InetPortNumber,
        tcpConnectionState              INTEGER,
        tcpConnectionInSegs             Counter32,
        tcpConnectionOutSegs            Counter32,
        tcpConnectionInOctets           Counter32,
        tcpConnectionOutOctets          Counter32,
        tcpConnectionHCInSegs           Counter64,
        tcpConnectionHCOutSegs          Counter64,
        tcpConnectionHCInOctets         Counter64,
        tcpConnectionHCOutOctets        Counter64,
        tcpConnectionAge                TimeInterval,
        tcpConnectionProcess            Unsigned32,
        tcpConnectionId                 Integer32
    }

tcpConnectionLocalAddressType OBJECT-TYPE
    SYNTAX     InetAddressType
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The address type of tcpConnectionLocalAddress.  Only IPv4
            and IPv6 addresses are expected."
    ::= { tcpConnectionEntry 1 }

tcpConnectionLocalAddress OBJECT-TYPE
    SYNTAX     InetAddress (SIZE(0..36))
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The local IP address for this TCP connection."
    ::= { tcpConnectionEntry 2 }

tcpConnectionLocalPort OBJECT-TYPE
    SYNTAX     InetPortNumber
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The local port number for this TCP connection."
    ::= { tcpConnectionEntry 3 }

tcpConnectionRemAddressType OBJECT-TYPE
    SYNTAX     InetAddressType
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The address type of tcpConnectionRemAddress.  Only IPv4
            and IPv6 addresses are expected."
    ::= { tcpConnectionEntry 4 }

tcpConnectionRemAddress OBJECT-TYPE
    SYNTAX     InetAddress (SIZE(0..36))

Raghunarayan, Editor                                          [Page 13]

INTERNET-DRAFT             Expires: May 2003              November 2002


    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The remote IP address for this TCP connection."
    ::= { tcpConnectionEntry 5 }

tcpConnectionRemPort OBJECT-TYPE
    SYNTAX     InetPortNumber
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The remote port number for this TCP connection."
    ::= { tcpConnectionEntry 6 }

tcpConnectionState OBJECT-TYPE
    SYNTAX     INTEGER {
                    closed(1),
                    listen(2),  -- do we need this here???
                    synSent(3),
                    synReceived(4),
                    established(5),
                    finWait1(6),
                    finWait2(7),
                    closeWait(8),
                    lastAck(9),
                    closing(10),
                    timeWait(11),
                    deleteTCB(12)
                }
    MAX-ACCESS read-write
    STATUS     current
    DESCRIPTION
           "The state of this TCP connection.

            The value listen(2) is included only for parallelism to the
            old tcpConnTable, and should not be used.  A connection in
            LISTEN state should be present in the tcpListenerTable.

            The only value which may be set by a management station is
            deleteTCB(12).  Accordingly, it is appropriate for an agent
            to return a `badValue' response if a management station
            attempts to set this object to any other value.

            If a management station sets this object to the value
            deleteTCB(12), then this has the effect of deleting the TCB
            (as defined in RFC 793) of the corresponding connection on
            the managed node, resulting in immediate termination of the
            connection.

            As an implementation-specific option, a RST segment may be
            sent from the managed node to the other TCP endpoint (note
            however that RST segments are not sent reliably)."

Raghunarayan, Editor                                          [Page 14]

INTERNET-DRAFT             Expires: May 2003              November 2002


    ::= { tcpConnectionEntry 7 }

tcpConnectionInSegs OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of segments, including control segments without
            payload and retransmitted segments, received on this
            connection."
    ::= { tcpConnectionEntry 8 }

tcpConnectionOutSegs OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of segments, including control segments without
            payload and retransmitted segments, transmitted on this
            connection."
    ::= { tcpConnectionEntry 9 }

tcpConnectionInOctets OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of octets, including the TCP header, received on
            this connection.  This count includes retransmitted data."
    ::= { tcpConnectionEntry 10 }

tcpConnectionOutOctets OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of octets, including the TCP header, transmitted
            on this connection.  This count includes retransmitted 
            data."
    ::= { tcpConnectionEntry 11 }

tcpConnectionHCInSegs OBJECT-TYPE
    SYNTAX     Counter64
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of segments, including control segments without
            payload and retransmitted segments, received on this
            connection.  This is the 64-bit equivalent of the
            tcpConnectionInSegs counter."
    ::= { tcpConnectionEntry 12 }


Raghunarayan, Editor                                          [Page 15]

INTERNET-DRAFT             Expires: May 2003              November 2002


tcpConnectionHCOutSegs OBJECT-TYPE
    SYNTAX     Counter64
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of segments, including control segments without
            payload and retransmitted segments, transmitted on this
            connection.  This is the 64-bit equivalent of the
            tcpConnectionOutSegs counter."
    ::= { tcpConnectionEntry 13 }

tcpConnectionHCInOctets OBJECT-TYPE
    SYNTAX     Counter64
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of octets, including the TCP header, received on
            this connection.  This count includes retransmitted data.
            This counter is the 64-bit equivalent of the
            tcpConnectionInOctets counter."
    ::= { tcpConnectionEntry 14 }

tcpConnectionHCOutOctets OBJECT-TYPE
    SYNTAX     Counter64
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of octets, including the TCP header, transmitted
            on this connection.  This count includes retransmitted 
            data. This counter is the 64-bit equivalent of the
            tcpConnectionOutOctets counter."
    ::= { tcpConnectionEntry 15 }

tcpConnectionAge OBJECT-TYPE
    SYNTAX     TimeInterval
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "This object represents the age of the connection in 
            hundredths of a second."
    ::= { tcpConnectionEntry 16 }

tcpConnectionProcess OBJECT-TYPE
    SYNTAX     Unsigned32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The system's process ID for the process associated with 
            this connection, or zero if there is no such process.  This
            value is expected to be the same as HOST-RESOURCES-MIB::
            hrSWRunIndex or SYSAPPL-MIB::sysApplElmtRunIndex for some
            row in the appropriate tables."

Raghunarayan, Editor                                          [Page 16]

INTERNET-DRAFT             Expires: May 2003              November 2002


    ::= { tcpConnectionEntry 17 }

tcpConnectionId OBJECT-TYPE
    SYNTAX     Integer32 (0..2147483647)
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The connection id associated with this connection. This
            value is expected to be the same as TCP-ESTATS-MIB::
            tcpEStatsConnectIndex for some row in the appropriate
            tables."
    ::= { tcpConnectionEntry 18 }

-- The TCP Listener table

tcpListenerTable OBJECT-TYPE
    SYNTAX     SEQUENCE OF TcpListenerEntry
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "A table containing information about TCP listeners.  A 
            listening application can be represented in three 
            possible ways:

            1. An application that is willing to accept both IPv4 and
               IPv6 datagrams is represented by 
               tcpListenerLocalAddressType of unknown (0) and 
               tcpListenerLocalAddress of ''h (a zero-length 
               octet-string).

            2. An application which is willing to accept only IPv4 or
               IPv6 datagrams is represented by a 
               tcpListenerLocalAddressType of the appropriate address
               type and tcpListenerLocalAddress of ''h (a zero-length
               octet-string).

            3. An application which is a listening for data destined
               only to a specific IP address, but from any remote 
               system, is represented by a tcpListenerLocalAddressType 
               of an appropriate address type, with 
               tcpListenerLocalAddress the specific local address.

            NOTE: that address type in this table represents the 
            address type used for the communication, irrespective 
            of the higher-layer abstraction.  For example, an 
            application using IPv6 'sockets' to communicate via 
            IPv4 between ::ffff:10.0.0.1 and ::ffff:10.0.0.2 would 
            use InetAddressType ipv4(1))."
    ::= { tcp 21 }

tcpListenerEntry OBJECT-TYPE
    SYNTAX     TcpListenerEntry
    
Raghunarayan, Editor                                          [Page 17]

INTERNET-DRAFT             Expires: May 2003              November 2002


    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "A conceptual row of the tcpListenerTable containing
            information about a particular TCP listener."
    INDEX   { tcpListenerLocalAddressType,
              tcpListenerLocalAddress,
              tcpListenerLocalPort }
    ::= { tcpListenerTable 1 }

TcpListenerEntry ::= SEQUENCE {
        tcpListenerLocalAddressType       InetAddressType,
        tcpListenerLocalAddress           InetAddress,
        tcpListenerLocalPort              InetPortNumber,
        tcpListenerTimeOuts               Counter32,
        tcpListenerEstablished            Counter32,
        tcpListenerAge                    Unsigned32,
        tcpListenerProcess                Unsigned32
    }

tcpListenerLocalAddressType OBJECT-TYPE
    SYNTAX     InetAddressType
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The address type of tcpListenerLocalAddress.  Only IPv4 and
            IPv6 addresses are expected, or unknown (0) if connection
            initiation to all local IP addresses are accepted. "
    ::= { tcpListenerEntry 1 }

tcpListenerLocalAddress OBJECT-TYPE
    SYNTAX     InetAddress (SIZE(0..36))
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The local IP address for this TCP connection.  In the case
            of a listener which is willing to accept connections for 
            any IP interface associated with the node, a value of ''h
            (zero-length octet-string) is used."
    ::= { tcpListenerEntry 2 }

tcpListenerLocalPort OBJECT-TYPE
    SYNTAX     InetPortNumber
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The local port number for this TCP connection."
    ::= { tcpListenerEntry 3 }

tcpListenerTimeOuts OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only

Raghunarayan, Editor                                          [Page 18]

INTERNET-DRAFT             Expires: May 2003              November 2002


    STATUS     current
    DESCRIPTION
           "The number of connection attempts to this endpoint which
            have failed due to timeout of the three-way handshake, i.e.
            the row was removed from the tcpConnectionTable but
            tcpConnectionState never moved from synReceived to
            established."
    ::= { tcpListenerEntry 4 }

tcpListenerEstablished OBJECT-TYPE
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of connections which have been established to
            this endpoint."
    ::= { tcpListenerEntry 5 }

tcpListenerAge OBJECT-TYPE
    SYNTAX     Unsigned32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "This object represents the age of listener in seconds."
    ::= { tcpListenerEntry 6 }

tcpListenerProcess OBJECT-TYPE
    SYNTAX     Unsigned32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The system's process ID for the process associated with 
            this listener, or zero if there is no such process.  This 
            value is expected to be the same as HOST-RESOURCES-MIB::
            hrSWRunIndex or SYSAPPL-MIB::sysApplElmtRunIndex for some
            row in the appropriate tables."
    ::= { tcpListenerEntry 7 }

-- The deprecated TCP Connection table

tcpConnTable OBJECT-TYPE
    SYNTAX     SEQUENCE OF TcpConnEntry
    MAX-ACCESS not-accessible
    STATUS     deprecated
    DESCRIPTION
           "A table containing information about existing IPv4-specific
            TCP connections or listeners.  This table has been
            deprecated in favor of the version neutral
            tcpConnectionTable."
    ::= { tcp 13 }



Raghunarayan, Editor                                          [Page 19]

INTERNET-DRAFT             Expires: May 2003              November 2002


tcpConnEntry OBJECT-TYPE
    SYNTAX     TcpConnEntry
    MAX-ACCESS not-accessible
    STATUS     deprecated
    DESCRIPTION
           "A conceptual row of the tcpConnTable containing information
            about a particular current IPv4 TCP connection.  Each row 
            of this table is transient, in that it ceases to exist when
            (or soon after) the connection makes the transition to the
            CLOSED state."
    INDEX   { tcpConnLocalAddress,
              tcpConnLocalPort,
              tcpConnRemAddress,
              tcpConnRemPort }
    ::= { tcpConnTable 1 }

TcpConnEntry ::= SEQUENCE {
        tcpConnState         INTEGER,
        tcpConnLocalAddress  IpAddress,
        tcpConnLocalPort     Integer32,
        tcpConnRemAddress    IpAddress,
        tcpConnRemPort       Integer32
    }

tcpConnState OBJECT-TYPE
    SYNTAX     INTEGER {
                    closed(1),
                    listen(2),
                    synSent(3),
                    synReceived(4),
                    established(5),
                    finWait1(6),
                    finWait2(7),
                    closeWait(8),
                    lastAck(9),
                    closing(10),
                    timeWait(11),
                    deleteTCB(12)
                }
    MAX-ACCESS read-write
    STATUS     deprecated
    DESCRIPTION
           "The state of this TCP connection.

            The only value which may be set by a management station is
            deleteTCB(12).  Accordingly, it is appropriate for an agent
            to return a `badValue' response if a management station
            attempts to set this object to any other value.





Raghunarayan, Editor                                          [Page 20]

INTERNET-DRAFT             Expires: May 2003              November 2002


            If a management station sets this object to the value
            deleteTCB(12), then this has the effect of deleting the TCB
            (as defined in RFC 793) of the corresponding connection on
            the managed node, resulting in immediate termination of the
            connection.

            As an implementation-specific option, a RST segment may be
            sent from the managed node to the other TCP endpoint (note
            however that RST segments are not sent reliably)."
    ::= { tcpConnEntry 1 }

tcpConnLocalAddress OBJECT-TYPE
    SYNTAX     IpAddress
    MAX-ACCESS read-only
    STATUS     deprecated
    DESCRIPTION
           "The local IP address for this TCP connection.  In the case
            of a connection in the listen state which is willing to
            accept connections for any IP interface associated with the
            node, the value 0.0.0.0 is used."
    ::= { tcpConnEntry 2 }

tcpConnLocalPort OBJECT-TYPE
    SYNTAX     Integer32 (0..65535)
    MAX-ACCESS read-only
    STATUS     deprecated
    DESCRIPTION
           "The local port number for this TCP connection."
    ::= { tcpConnEntry 3 }

tcpConnRemAddress OBJECT-TYPE
    SYNTAX     IpAddress
    MAX-ACCESS read-only
    STATUS     deprecated
    DESCRIPTION
           "The remote IP address for this TCP connection."
    ::= { tcpConnEntry 4 }

tcpConnRemPort OBJECT-TYPE
    SYNTAX     Integer32 (0..65535)
    MAX-ACCESS read-only
    STATUS     deprecated
    DESCRIPTION
           "The remote port number for this TCP connection."
    ::= { tcpConnEntry 5 }

-- conformance information

tcpMIBConformance OBJECT IDENTIFIER ::= { tcpMIB 2 }




Raghunarayan, Editor                                          [Page 21]

INTERNET-DRAFT             Expires: May 2003              November 2002


tcpMIBCompliances OBJECT IDENTIFIER ::= { tcpMIBConformance 1 }
tcpMIBGroups      OBJECT IDENTIFIER ::= { tcpMIBConformance 2 }

-- compliance statements

tcpMIBCompliance2 MODULE-COMPLIANCE
    STATUS     current
    DESCRIPTION
           "The compliance statement for systems which implement TCP."
    MODULE  -- this module
        MANDATORY-GROUPS { tcpBaseGroup, tcpConnectionGroup,
                           tcpListenerGroup }
        GROUP       tcpHCGroup
        DESCRIPTION
           "This group is mandatory for those systems which are capable
            of receiving or transmitting more than 1 million TCP
            segments per second.  1 million segments per second will
            cause a Counter32 to wrap in just over an hour."
        GROUP       tcpStatisticsGroup
        DESCRIPTION
           "This group is optional.  It provides visibility for 
            counters that some systems already implement."
        GROUP       tcpHCStatisticsGroup
        DESCRIPTION
           "This group is mandatory for those systems which implement
            the tcpStatisticsGroup and are capable of receiving or
            transmitting more than 1 million TCP segments per second.
            1 million segments per second will cause a Counter32 to
            wrap in just over an hour."
        OBJECT      tcpConnectionState
        SYNTAX      INTEGER { closed(1), listen(2), synSent(3),
                              synReceived(4), established(5),
                              finWait1(6), finWait2(7), closeWait(8),
                              lastAck(9), closing(10), timeWait(11) }
        MIN-ACCESS  read-only
        DESCRIPTION
           "Write access is not required, nor is support for the value
            deleteTCB (12)."
    ::= { tcpMIBCompliances 2 }

tcpMIBCompliance MODULE-COMPLIANCE
    STATUS     deprecated
    DESCRIPTION
           "The compliance statement for IPv4-only systems which
            implement TCP.  In order to be IP version independent, this
            compliance statement is deprecated in favor of
            tcpMIBCompliance2.  However, agents are still encouraged to
            implement these objects in order to interoperate with the
            deployed base of managers."




Raghunarayan, Editor                                          [Page 22]

INTERNET-DRAFT             Expires: May 2003              November 2002


    MODULE  -- this module
        MANDATORY-GROUPS { tcpGroup }
        OBJECT      tcpConnState

        MIN-ACCESS  read-only
        DESCRIPTION
           "Write access is not required."
    ::= { tcpMIBCompliances 1 }


-- units of conformance

tcpGroup OBJECT-GROUP
    OBJECTS   { tcpRtoAlgorithm, tcpRtoMin, tcpRtoMax,
                tcpMaxConn, tcpActiveOpens,
                tcpPassiveOpens, tcpAttemptFails,
                tcpEstabResets, tcpCurrEstab, tcpInSegs,
                tcpOutSegs, tcpRetransSegs, tcpConnState,
                tcpConnLocalAddress, tcpConnLocalPort,
                tcpConnRemAddress, tcpConnRemPort,
                tcpInErrs, tcpOutRsts }
    STATUS     deprecated
    DESCRIPTION
           "The tcp group of objects providing for management of TCP
            entities."
    ::= { tcpMIBGroups 1 }

tcpBaseGroup OBJECT-GROUP
    OBJECTS   { tcpRtoAlgorithm, tcpRtoMin, tcpRtoMax,
                tcpMaxConn, tcpActiveOpens,
                tcpPassiveOpens, tcpAttemptFails,
                tcpEstabResets, tcpCurrEstab, tcpInSegs,
                tcpOutSegs, tcpRetransSegs,
                tcpInErrs, tcpOutRsts }
    STATUS     current
    DESCRIPTION
           "The group of counters common to TCP entities."
    ::= { tcpMIBGroups 2 }

tcpHCGroup OBJECT-GROUP
    OBJECTS    { tcpHCInSegs, tcpHCOutSegs }
    STATUS     current
    DESCRIPTION
           "The group of objects providing for counters of high speed
            TCP implementations."
    ::= { tcpMIBGroups 3 }







Raghunarayan, Editor                                          [Page 23]

INTERNET-DRAFT             Expires: May 2003              November 2002


tcpConnectionGroup OBJECT-GROUP
    OBJECTS    { tcpConnectionState, tcpConnectionAge, 
                 tcpConnectionProcess, tcpConnectionId }
    STATUS     current
    DESCRIPTION
           "The group provides general information about TCP 
            connections."
    ::= { tcpMIBGroups 4 }

tcpListenerGroup OBJECT-GROUP
    OBJECTS    { tcpListenerTableLastChange, tcpListenerAge, 
                 tcpListenerProcess }
    STATUS     current
    DESCRIPTION
           "This group has objects providing general information about
            TCP listeners."
    ::= { tcpMIBGroups 5 }

tcpStatisticsGroup OBJECT-GROUP
    OBJECTS    { tcpConnectionInSegs, tcpConnectionOutSegs,
                 tcpConnectionInOctets, tcpConnectionOutOctets,
                 tcpListenerTimeOuts, tcpListenerEstablished }
    STATUS     current
    DESCRIPTION
           "The segment and octet counters and other statistics 
            specific to a TCP connection or listener."
    ::= { tcpMIBGroups 6 }

tcpHCStatisticsGroup OBJECT-GROUP
    OBJECTS    { tcpConnectionHCInSegs, tcpConnectionHCOutSegs,
                 tcpConnectionHCInOctets, tcpConnectionHCOutOctets }
    STATUS     current
    DESCRIPTION
           "The group of objects providing for statistics for listeners
            or connections on high speed TCP implementations."
    ::= { tcpMIBGroups 7 }

END


5.  Open Issues

Does calculating the number of active TCP connections from the 
tcpConnectionTable have any operational concerns i.e. do we need a
counter for the same? Or does the current counter, tcpCurrEstab
(count of ESTABLISHED or CLOSE-WAIT connections), suffice?

Are the current per-connection byte/segment counters appropriate?  
Other stats?  [in optional conformance group] ConnSRTT? Number of 
half-open connections? Timeout for half-open connections?



Raghunarayan, Editor                                          [Page 24]

INTERNET-DRAFT             Expires: May 2003              November 2002


More HC counters? Do we need HC counter equivalents for 
tcpListenerTimeOuts and tcpListenerEstablished - will the 32 bit
counter wrap within the hour?

How about a BITS object indicating the various TCP protocol features 
supported by this entity?


6.  Acknowledgements

This document contains a modified subset of RFC 1213 and updates RFC
2012 and RFC 2452.  Acknowledgements are therefore due to the authors
and editors of these documents for their excellent work.


7.  References

[1] Daniele, M., Haberman, B., Routhier, S., and Schoenwaelder, J., 
    "Textual Conventions for Internet Network Addresses", RFC 3291,
    May 2002.

[2] Rose, M. and K. McCloghrie, "Management Information Base for 
    Network Management of TCP/IP-based internets", RFC 1213, March 
    1991.

[3] K. McCloghrie, "SNMPv2 Management Information Base for the
    Transmission Control Protocol using SMIv2", RFC 2012, November
    1996.

[4] Daniele, M., "IP Version 6 Management Information Base for the
    Transmission Control Protocol", RFC 2452, December 1998.

[5] Postel, J., "Transmission Control Protocol - DARPA Internet Program
    Protocol Specification", STD 7, RFC 793, DARPA, September 1981.

[6] Jacobson, V., "Congestion Avoidance and Control", SIGCOMM 1988,
    Stanford, California.

[7] Harrington, D., Presuhn, R., and B. Wijnen, "An Architecture for
    Describing SNMP Management Frameworks", RFC 2571, April 1999.

[8] Rose, M., and K. McCloghrie, "Structure and Identification of
    Management Information for TCP/IP-based Internets", STD 16, RFC
    1155, May 1990.

[9] Rose, M., and K. McCloghrie, "Concise MIB Definitions", STD 16, RFC
    1212, March 1991.

[10] Rose, M., "A Convention for Defining Traps for use with the SNMP",
     RFC 1215, March 1991.



Raghunarayan, Editor                                          [Page 25]

INTERNET-DRAFT             Expires: May 2003              November 2002


[11] McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose, 
     M., and S. Waldbusser, "Structure of Management Information 
     Version 2 (SMIv2)", STD 58, RFC 2578, April 1999.

[12] McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose, 
     M., and S. Waldbusser, "Textual Conventions for SMIv2", STD 58, 
     RFC 2579, April 1999.

[13] McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose, 
     M., and S. Waldbusser, "Conformance Statements for SMIv2", STD 58,
     RFC 2580, April 1999.

[14] Case, J., Fedor, M., Schoffstall, M., and J. Davin, "Simple 
     Network Management Protocol", STD 15, RFC 1157, May 1990.

[15] Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,
     "Introduction to Community-based SNMPv2", RFC 1901, January 1996.

[16] Case, J., McCloghrie, K., Rose, M., and S. Waldbusser, "Transport
     Mappings for Version 2 of the Simple Network Management Protocol
     (SNMPv2)", RFC 1906, January 1996.

[17] Case, J., Harrington D., Presuhn R., and B. Wijnen, "Message
     Processing and Dispatching for the Simple Network Management
     Protocol (SNMP)", RFC 2572, April 1999.

[18] Blumenthal, U., and B. Wijnen, "User-based Security Model (USM) 
     for version 3 of the Simple Network Management Protocol (SNMPv3)",
     RFC 2574, April 1999.

[19] Case, J., McCloghrie, K., Rose, M., and S. Waldbusser, "Protocol
     Operations for Version 2 of the Simple Network Management Protocol
     (SNMPv2)", RFC 1905, January 1996.

[20] Levi, D., Meyer, P., and B. Stewart, "SNMPv3 Applications", RFC
     2573, April 1999.

[21] Wijnen, B., Presuhn, R., and K. McCloghrie, "View-based Access
     Control Model (VACM) for the Simple Network Management Protocol
     (SNMP)", RFC 2575, April 1999.

[22] Case, J., Mundy, R., Partain, D., and B. Stewart, "Introduction to
     Version 3 of the Internet-standard Network Management Framework",
     RFC 2570, April 1999.

[23] Krupczak, C., Saperia, J., "Definitions of System-Level Managed 
     Objects for Applications", RFC 2287, February 1998.

[24] Waldbusser, S., Grillo, P., "Host Resources MIB", RFC 2790, March 
     2000.



Raghunarayan, Editor                                          [Page 26]

INTERNET-DRAFT             Expires: May 2003              November 2002


8.  Security Considerations

There are a number of management objects defined in this MIB that have 
a MAX-ACCESS clause of read-write and/or read-create.  Such objects may
be considered sensitive or vulnerable in some network environments.  
The support for SET operations in a non-secure environment without 
proper protection can have a negative effect on network operations.

There are a number of managed objects in this MIB that may contain
sensitive information. These are:

o The tcpConnectionLocalPort and tcpConnLocalPort objects can be used 
  to identify what ports are open on the machine and can thus what 
  attacks are likely to succeed, without the attacker having to run a 
  port scanner.

o The tcpConnectionState and tcpConnState objects have a MAX-ACCESS
  clause of read-write, which allows termination of an arbitrary
  connection.  Unauthorized access could cause a denial of service.

It is thus important to control even GET access to these objects and
possibly to even encrypt the values of these object when sending them
over the network via SNMP.  Not all versions of SNMP provide features
for such a secure environment.

SNMPv1 by itself is not a secure environment.  Even if the network
itself is secure (for example by using IPSec), even then, there is no
control as to who on the secure network is allowed to access and 
GET/SET (read/change/create/delete) the objects in this MIB.

It is recommended that the implementers consider the security features
as provided by the SNMPv3 framework.  Specifically, the use of the 
User-based Security Model RFC 2574 [18] and the View-based Access 
Control Model RFC 2575 [21] is recommended.

It is then a customer/user responsibility to ensure that the SNMP 
entity giving access to an instance of this MIB, is properly 
configured to give access to the objects only to those principals
(users) that have legitimate rights to indeed GET or SET
(change/create/delete) them.


9.  Editor's Address

Rajiv Raghunarayan
Cisco Systems Inc.
170 West Tasman Drive
San Jose, CA 95134
USA

Email: raraghun@cisco.com


Raghunarayan, Editor                                          [Page 27]

INTERNET-DRAFT             Expires: May 2003              November 2002


10. Authors

This document is an output of the IPv6 MIB revision team, and 
contributors to earlier versions of this document include:

Bill Fenner, AT&T Labs -- Research
Email: fenner@research.att.com

Brian Haberman
Email: bkhabs@nc.rr.com

Shawn A. Routhier, Wind River
Email: sar@epilogue.com

Juergen Schoenwalder, TU Braunschweig
Email: schoenw@ibr.cs.tu-bs.de

Dave Thaler, Microsoft
Email: dthaler@windows.microsoft

This documents updates parts of the MIBs from several documents. RFC
2012 has been the base document for these updations. RFC 2452 was
the first document to define the managed objects for implementations
of TCP over IPv6.

RFC 2012:

Keith McCloghrie, Cisco Systems (Editor)
kzm@cisco.com

RFC 2452:

Mike Daniele, Compaq Computer Corporation
daniele@zk3.dec.com


11.  Full Copyright Statement

Copyright (C) The Internet Society (2002). All Rights Reserved.

This document and translations of it may be copied and furnished to
others, and derivative works that comment on or otherwise explain it or
assist in its implementation may be prepared, copied, published and
distributed, in whole or in part, without restriction of any kind,
provided that the above copyright notice and this paragraph are 
included on all such copies and derivative works. However, this 
document itself may not be modified in any way, such as by removing the
copyright notice or references to the Internet Society or other 
Internet organizations, except as needed for the purpose of developing 
Internet standards in which case the procedures for copyrights defined 
in the Internet Standards process must be followed, or as required to
translate it into languages other than English.

Raghunarayan, Editor                                          [Page 28]

INTERNET-DRAFT             Expires: May 2003              November 2002


The limited permissions granted above are perpetual and will not be
revoked by the Internet Society or its successors or assigns.

This document and the information contained herein is provided on an 
"AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING 
TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT 
NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL
NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY 
OR FITNESS FOR A PARTICULAR PURPOSE.












































Raghunarayan, Editor                                          [Page 29]
