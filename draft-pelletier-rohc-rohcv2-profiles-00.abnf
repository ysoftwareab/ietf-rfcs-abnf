unscaled_value = delta_msn * stride + previous_unscaled_value
timestamp = delta_msn * ts_stride + previous_timestamp

IP-ID = delta_msn + previous_IP_ID_value
PS = 0 indicates 4-bit XI fields;
PS = 1 indicates 8-bit XI fields.

PS = 0: | X |   Index   |
                 +---+---+---+---+

                   0   1   2   3   4   5   6   7
                 +---+---+---+---+---+---+---+---+
PS = 1: | X | Reserved  |     Index     |
                 +---+---+---+---+---+---+---+---+
X = 1 indicates that the item corresponding to the Index is
X = 0 indicates that the item corresponding to the Index is
IP_ID_BEHAVIOR_SEQUENTIAL         = 0;
IP_ID_BEHAVIOR_SEQUENTIAL_SWAPPED = 1;
IP_ID_BEHAVIOR_RANDOM             = 2;
IP_ID_BEHAVIOR_ZERO               = 3;

UDP_LITE_COVERAGE_INFERRED  = 0;
UDP_LITE_COVERAGE_STATIC    = 1;
UDP_LITE_COVERAGE_IRREGULAR = 2;
UDP_LITE_COVERAGE_RESERVED  = 3;

REORDERING_NONE          = 0;
REORDERING_QUARTER       = 1;
REORDERING_HALF          = 2;
REORDERING_THREEQUARTERS = 3;

PROFILE_RTP_0101     = 1;
PROFILE_UDP_0102     = 2;
PROFILE_ESP_0103     = 3;
PROFILE_IP_0104      = 4;
PROFILE_RTP_0107     = 7; // With UDP-LITE
PROFILE_UDPLITE_0108 = 8; // Without RTP

ratio =:= irregular(2);
field =:= irregular(width) [ width ];
field =:= static [ 0 ];
item =:= irregular(32) [ 32 ];
item =:= compressed_value(0, 0) [ 0 ];
discriminator =:= '0' [ 1 ];
field =:= lsb(7, 63)  [ 7 ];
discriminator =:= '10'   [ 2 ];
field =:= lsb(14, 16383) [ 14 ];
discriminator =:= '110'  [ 3 ];
field =:= lsb(21, 65535) [ 21 ];
discriminator =:= '110'  [ 3 ];
field =:= lsb(29, 65535) [ 29 ];
field =:= sdvl(32);
field =:= static;
timestamp =:= sdvl(32);
timestamp =:= sdvl(32);
discriminator =:= '0'       [ 1 ];
item          =:= lsb(7, 8) [ 7 ];
discriminator =:= '1'          [ 1 ];
item          =:= lsb(31, 256) [ 31 ];
item =:= lsb_7_or_31 [ 8, 32 ];
item =:= compressed_value(0, 0) [ 0 ];
crc_value =:=
         crc(3, 0x06, 0x07, data_value, data_length) [ 3 ];
crc_value =:=
         crc(7, 0x79, 0x7f, data_value, data_length) [ 7 ];
payload_type =:= static [ 0 ];
reserved     =:= compressed_value(1, 0) [ 1 ];
payload_type =:= irregular(7)           [ 7 ];
csrc_list =:= static [ 0 ];
csrc_list =:= list_csrc(cc_value) [ VARIABLE ];
master =:= lsb(k, -1);
master =:= lsb(k, ((2^k) / 4) - 1);
master =:= lsb(k, ((2^k) / 2) - 1);
master =:= lsb(k, (((2^k) * 3) / 4) - 1);
length      =:= static;
next_header =:= static;
value       =:= static;
next_header =:= irregular(8) [ 8 ];
length      =:= irregular(8) [ 8 ];
value =:= irregular(length.UVALUE * 64 + 48) [ VARIABLE ];
length      =:= static;
next_header =:= static;
value       =:= static;
next_header =:= irregular(8) [ 8 ];
length      =:= irregular(8) [ 8 ];
value =:= irregular(length.UVALUE*64+48) [ VARIABLE ];
length      =:= static;
next_header =:= static;
value       =:= static;
next_header =:= irregular(8)                   [ 8 ];
length      =:= irregular(8)                   [ 8 ];
value       =:= irregular(length.UVALUE*64+48) [ VARIABLE ];
value     =:= irregular(16)             [ 16 ];
reserved1 =:= uncompressed_value(16, 0) [ 0 ];
value     =:= compressed_value(0, 0) [ 0 ];
reserved1 =:= compressed_value(0, 0) [ 0 ];
discriminator =:= compressed_value(1, 0) [ 1 ];
protocol      =:= uncompressed_value(16, 0x0800);
discriminator =:= compressed_value(1, 1) [ 1 ];
protocol      =:= uncompressed_value(16, 0x86DD);
r_flag    =:= uncompressed_value(1, 0) [ 1 ];
reserved0 =:= uncompressed_value(9, 0) [ 9 ];
version   =:= uncompressed_value(3, 0) [ 3 ];
c_flag           =:= static;
k_flag           =:= static;
s_flag           =:= static;
protocol         =:= static;
key              =:= static;
sequence_number  =:= static;
protocol =:= gre_proto                 [ 1 ];
c_flag   =:= irregular(1)              [ 1 ];
k_flag   =:= irregular(1)              [ 1 ];
s_flag   =:= irregular(1)              [ 1 ];
padding  =:= compressed_value(4, 0)    [ 4 ];
key      =:= optional32(k_flag.UVALUE) [ 0, 32 ];
checksum_and_res =:=
         optional_checksum(c_flag.UVALUE)             [ 0, 16 ];
sequence_number  =:= optional32(s_flag.UVALUE) [ 0, 32 ];
checksum_and_res =:=
         optional_checksum(c_flag.UVALUE) [ 0, 16 ];
sequence_number  =:=
         opt_lsb_7_or_31(s_flag.UVALUE)   [ 0, 8, 32 ];
next_header =:= static;
s_bit       =:= static;
res_bits    =:= static;
checksum    =:= inferred_mine_header_checksum;
orig_dest   =:= static;
orig_src    =:= static;
next_header =:= irregular(8)             [ 8 ];
s_bit       =:= irregular(1)             [ 1 ];
res_bits    =:= irregular(7)             [ 7 ];
orig_dest   =:= irregular(32)            [ 32 ];
orig_src    =:= optional32(s_bit.UVALUE) [ 0, 32 ];
next_header     =:= static;
length          =:= static;
res_bits        =:= static;
spi             =:= static;
sequence_number =:= static;
next_header =:= irregular(8)  [ 8 ];
length      =:= irregular(8)  [ 8 ];
spi         =:= irregular(32) [ 32 ];
res_bits        =:= irregular(16) [ 16 ];
sequence_number =:= irregular(32) [ 32 ];
auth_data       =:=
         irregular(length.UVALUE*32-32)  [ VARIABLE ];
sequence_number =:= lsb_7_or_31  [ 8, 32 ];
auth_data       =:=
         irregular(length.UVALUE*32-32) [ VARIABLE ];
spi             =:= static;
sequence_number =:= static;
nh_field        =:= static;
nh_field =:= compressed_value(8, next_header_value) [ 8 ];
spi      =:= irregular(32)                          [ 32 ];
sequence_number =:= irregular(32) [ 32 ];
sequence_number =:= lsb_7_or_31 [ 8, 32 ];
discriminator =:= '0'                       [ 1 ];
flow_label    =:= uncompressed_value(20, 0) [ 0 ];
reserved      =:= '0000'                    [ 4 ];
discriminator =:= '1'           [ 1 ];
flow_label    =:= irregular(20) [ 20 ];
version         =:= uncompressed_value(4, 6) [ 4 ];
tos_tc         =:= static;
flow_label     =:= static;
payload_length =:= inferred_ip_v6_length;
next_header    =:= static;
ttl_hopl       =:= static;
src_addr       =:= static;
dst_addr       =:= static;
version_flag =:= '1'            [ 1 ];
reserved     =:= '00'           [ 2 ];
flow_label   =:= fl_enc         [ 5, 21 ];
next_header  =:= irregular(8)   [ 8 ];
src_addr     =:= irregular(128) [ 128 ];
dst_addr     =:= irregular(128) [ 128 ];
tos_tc        =:= irregular(8)           [ 8 ];
ttl_hopl      =:= irregular(8)           [ 8 ];
reserved      =:= compressed_value(6, 0) [ 6 ];
reorder_ratio =:= reorder_choice         [ 2 ];
tos_tc       =:= irregular(8) [ 8 ];
ttl_hopl     =:= irregular(8) [ 8 ];
tos_tc       =:=
           static_or_irreg(tos_irregular_chain_flag) [ 0, 8 ];
ttl_hopl     =:=
           static_or_irreg(ttl_irregular_chain_flag) [ 0, 8 ];
ip_id =:= irregular(16) [ 16 ];
ip_id =:= uncompressed_value(16, 0) [ 0 ];
ip_id =:= irregular(16) [ 16 ];
ip_id =:= uncompressed_value(16, 0) [ 0 ];
behavior =:= irregular(2);
version        =:= uncompressed_value(4, 4)  [ 4 ];
hdr_length     =:= uncompressed_value(4, 5)  [ 4 ];
rf             =:= uncompressed_value(1, 0)  [ 1 ];
mf             =:= uncompressed_value(1, 0)  [ 1 ];
frag_offset    =:= uncompressed_value(13, 0) [ 13 ];
tos_tc         =:= static;
length         =:= inferred_ip_v4_length;
df             =:= static;
ttl_hopl       =:= static;
protocol       =:= static;
checksum       =:= inferred_ip_v4_header_checksum;
src_addr       =:= static;
dst_addr       =:= static;
ip_id_behavior =:= static;
version_flag =:= '0'           [ 1 ];
reserved     =:= '0000000'     [ 7 ];
protocol     =:= irregular(8)  [ 8 ];
src_addr     =:= irregular(32) [ 32 ];
dst_addr     =:= irregular(32) [ 32 ];
reserved       =:= '000'               [ 5 ];
reorder_ratio =:= reorder_choice       [ 2 ];
df             =:= irregular(1)        [ 1 ];
ip_id_behavior =:= ip_id_behavior_choice [ 2 ];
tos_tc         =:= irregular(8)        [ 8 ];
ttl_hopl       =:= irregular(8)        [ 8 ];
ip_id          =:=
         ip_id_enc_dyn(ip_id_behavior.UVALUE) [ 0, 16 ];
reserved       =:= '00000'             [ 5 ];
df             =:= irregular(1)        [ 1 ];
ip_id_behavior =:= ip_id_behavior_choice [ 2 ];
tos_tc         =:= irregular(8)        [ 8 ];
ttl_hopl       =:= irregular(8)        [ 8 ];
ip_id          =:=
         ip_id_enc_dyn(ip_id_behavior.UVALUE) [ 0, 16 ];
ip_id        =:=
         ip_id_enc_irreg(ip_id_behavior.UVALUE) [ 0, 16 ];
tos_tc       =:=
           static_or_irreg(tos_irregular_chain_flag) [ 0, 8 ];
ttl_hopl     =:=
           static_or_irreg(ttl_irregular_chain_flag) [ 0, 8 ];
ip_id          =:=
         ip_id_enc_irreg(ip_id_behavior.UVALUE) [ 0, 16 ];
src_port   =:= static;
dst_port   =:= static;
udp_length =:= inferred_udp_length;
checksum   =:= irregular(16);
src_port   =:= irregular(16) [ 16 ];
dst_port   =:= irregular(16) [ 16 ];
msn =:= irregular(16) [ 16 ];
reserved      =:= uncompressed_value(6, 0);
reorder_ratio =:= reorder_choice [ 2 ];
checksum =:= uncompressed_value(16, 0);
csrc_list =:= uncompressed_value(0, 0) [ 0 ];
csrc_list =:= list_csrc(cc_value) [ VARIABLE ];
rtp_version =:= uncompressed_value(2, 0) [  2 ];
ts_offset =:=
           field_scaling(ts_stride.UVALUE, ts_scaled.UVALUE,
                         timestamp.UVALUE) [ 32 ];
pad_bit         =:= static;
extension       =:= static;
cc              =:= static;
marker          =:= static;
payload_type    =:= static;
sequence_number =:= static;
timestamp       =:= static;
ssrc            =:= static;
csrc_list       =:= static;
ssrc            =:= irregular(32)  [ 32 ];
reserved        =:= compressed_value(1, 0)       [  1 ];
reorder_ratio   =:= reorder_choice               [  2 ];
list_present    =:= irregular(1)                 [  1 ];
tss_indicator   =:= irregular(1)                 [  1 ];
pad_bit         =:= irregular(1)                 [  1 ];
extension       =:= irregular(1)                 [  1 ];
marker          =:= irregular(1)                 [  1 ];
payload_type    =:= irregular(7)                 [  7 ];
sequence_number =:= irregular(16)                [ 16 ];
timestamp       =:= irregular(32)                [ 32 ];
ts_stride       =:=
           optional_stride(tss_indicator,
                           ts_stride_value)       [ VARIABLE ];
csrc_list       =:=
           csrc_list_dynchain(list_present, cc.UVALUE)  [ VARIABLE ];
checksum_coverage =:= inferred_udp_length [  0 ];
checksum_coverage =:= irregular(16)       [ 16 ];
checksum_coverage =:= irregular(16)       [ 16 ];
checksum_coverage =:= inferred_udp_length [  0 ];
checksum_coverage =:= static              [  0 ];
checksum_coverage =:= irregular(16)       [ 16 ];
src_port          =:= static;
dst_port          =:= static;
checksum_coverage =:= irregular(16);
checksum          =:= irregular(16);
src_port   =:= irregular(16) [ 16 ];
dst_port   =:= irregular(16) [ 16 ];
reserved =:= compressed_value(4, 0)      [  4 ];
coverage_behavior =:= irregular(2)       [  2 ];
reorder_ratio     =:= reorder_choice     [  2 ];
checksum_coverage =:=
           checksum_coverage_dynchain(coverage_behavior.UVALUE) [ 16 ];
msn =:= irregular(16)                    [ 16 ];
coverage_behavior =:= irregular(2)       [  2 ];
reserved =:= compressed_value(6, 0)      [  6 ];
checksum_coverage =:=
           checksum_coverage_dynchain(coverage_behavior.UVALUE) [ 16 ];
checksum_coverage =:=
        checksum_coverage_dynchain(coverage_behavior.UVALUE) [ 0, 16 ];
spi             =:= static;
sequence_number =:= static;
spi =:= irregular(32) [ 32 ];
sequence_number =:= irregular(32)             [ 32 ];
msn             =:= irregular(16)             [ 16 ];
reserved        =:= uncompressed_value(6, 0)  [  6 ];
reorder_ratio   =:= reorder_choice            [  2 ];
ip_id_offset =:= lsb(k, p) [ VARIABLE ];
ip_id_offset =:= lsb(k, p) [ VARIABLE ];
ip_id =:= ip_id_lsb(behavior, 8, 3) [ 8 ];
ip_id =:= irregular(16)  [ 16 ];
df =:= irregular(1) [ 1 ];
df =:= compressed_value(1, 0) [ 1 ];
outer_headers  =:= baseheader_outer_headers  [ VARIABLE ];
version        =:= uncompressed_value(4, 4)  [ 4 ];
header_length  =:= uncompressed_value(4, 5)  [ 4 ];
rf             =:= uncompressed_value(1, 0)  [ 1 ];
mf             =:= uncompressed_value(1, 0)  [ 1 ];
frag_offset    =:= uncompressed_value(13, 0) [ 13 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
rtp_version =:= uncompressed_value(2, 0)     [  2 ];
outer_headers  =:= baseheader_outer_headers  [ VARIABLE ];
version =:= uncompressed_value(4, 6)         [ 4 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
rtp_version =:= uncompressed_value(2, 0)     [  2 ];
ts_offset =:=
           field_scaling(ts_stride.UVALUE, ts_scaled.UVALUE,
                         timestamp.UVALUE) [ 32 ];
tos_tc          =:= static;
dest_addr       =:= static;
version         =:= static;
ttl_hopl        =:= static;
src_addr        =:= static;
df              =:= static;
ip_id_behavior  =:= static;
payload_length  =:= inferred_ip_v6_length;
checksum        =:= inferred_ip_v4_header_checksum;
length          =:= inferred_ip_v4_length;
flow_label      =:= static;
next_header     =:= static;
src_port        =:= static;
dst_port        =:= static;
udp_length      =:= inferred_udp_length;
checksum        =:= irregular(16);
pad_bit         =:= static;
extension       =:= static;
cc              =:= static;
marker          =:= uncompressed_value(1, 0);
payload_type    =:= static;
sequence_number =:= static;
timestamp       =:= static;
ssrc            =:= static;
csrc_list       =:= static;

discriminator        =:= '1111101'               [ 7 ];
marker               =:= irregular(1)            [ 1 ];
header_crc   =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
ip_id_indicator      =:= irregular(1)            [ 1 ];
ip_id_behavior       =:= ip_id_behavior_choice   [ 2 ];
reorder_ratio        =:= reorder_choice          [ 2 ];
df           =:= dont_fragment(version.UVALUE)   [ 1 ];
control_crc3         =:= control_crc3            [ 3 ];
ttl_hopl_outer_flag  =:= irregular(1)            [ 1 ];
ttl_hopl_present     =:= irregular(1)            [ 1 ];
tos_tc_outer_flag    =:= irregular(1)            [ 1 ];
tos_tc_present       =:= irregular(1)            [ 1 ];
ts_indicator         =:= irregular(1)            [ 1 ];
tss_indicator        =:= irregular(1)            [ 1 ];
pt_present           =:= irregular(1)            [ 1 ];
list_present         =:= irregular(1)            [ 1 ];
pad_bit              =:= irregular(1)            [ 1 ];
extension            =:= irregular(1)            [ 1 ];
reserved             =:= compressed_value(6, 0)  [ 6 ];
ip_id                =:=
         optional_ip_id_lsb(ip_id_behavior.UVALUE,
                            ip_id_indicator.CVALUE) [ 0, 8, 16 ];
tos_tc               =:=
         tos_tc_enc(tos_tc_present.CVALUE)              [ 0, 8 ];
ttl_hopl             =:=
         static_or_irreg(ttl_hopl_present.CVALUE,
                         ttl_hopl.ULENGTH)              [ 0, 8 ];
sequence_number =:= sdvl(sequence_number.ULENGTH) [ 8, 16 ];
ts_scaled            =:=
           optional_scaled_timestamp(tss_indicator,
                                     tsc_indicator)     [ VARIABLE ];
ts_scaled            =:=
           optional_scaled_timestamp(tss_indicator,
                                     tsc_indicator)     [ VARIABLE ];
payload_type         =:= optional_pt(pt_present) [ 0, 8 ];
ts_stride            =:=
           optional_stride(tss_indicator,
                           ts_stride_value)             [ VARIABLE ];
csrc_list            =:= list_csrc(cc.UVALUE)    [ VARIABLE ];

discriminator =:= '0'                             [ 1 ];
msn           =:= msn_lsb(4, 4)                   [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
timestamp     =:= inferred_scaled_field           [ 0 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '100'                           [ 3 ];
msn           =:= msn_lsb(6, 16)                  [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
timestamp     =:= inferred_scaled_field           [ 0 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '101'                           [ 3 ];
msn           =:= msn_lsb(5, 8)                   [ 5 ];
marker        =:= irregular(1)                    [ 1 ];
ts_scaled     =:= lsb(4, 3)                       [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
discriminator =:= '1010'                          [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
msn           =:= msn_lsb(5, 8)                   [ 5 ];
ip_id =:= ip_id_lsb(ip_id_behavior.UVALUE, 4, 3)  [ 4 ];
timestamp     =:= inferred_scaled_field           [ 0 ];
discriminator =:= '1011'                          [ 4 ];
marker        =:= irregular(1)                    [ 1 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
msn           =:= msn_lsb(4, 4)                   [ 4 ];
ts_scaled     =:= lsb(4, 3)                       [ 4 ];
discriminator =:= '110'                           [ 3 ];
msn           =:= msn_lsb(7, 32)                  [ 7 ];
ts_scaled     =:= lsb(6, 15)                      [ 6 ];
marker        =:= irregular(1)                    [ 1 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
discriminator =:= '1100'                          [ 4 ];
msn           =:= msn_lsb(7, 32)                  [ 7 ];
ip_id =:= ip_id_lsb(ip_id_behavior.UVALUE, 6, 3)  [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
timestamp     =:= inferred_scaled_field           [ 0 ];
discriminator =:= '1101'                          [ 4 ];
msn           =:= msn_lsb(7, 32)                  [ 7 ];
ts_scaled     =:= lsb(5, 7)                       [ 5 ];
marker        =:= irregular(1)                    [ 1 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
outer_headers  =:= baseheader_outer_headers  [ VARIABLE ];
version        =:= uncompressed_value(4, 4)  [ 4 ];
header_length  =:= uncompressed_value(4, 5)  [ 4 ];
rf             =:= uncompressed_value(1, 0)  [ 1 ];
mf             =:= uncompressed_value(1, 0)  [ 1 ];
frag_offset    =:= uncompressed_value(13, 0) [ 13 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
outer_headers  =:= baseheader_outer_headers  [ VARIABLE ];
version =:= uncompressed_value(4, 6)         [ 4 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
tos_tc         =:= static;
dest_addr      =:= static;
version        =:= static;
ttl_hopl       =:= static;
src_addr       =:= static;
df             =:= static;
ip_id_behavior =:= static;
payload_length =:= inferred_ip_v6_length;
checksum       =:= inferred_ip_v4_header_checksum;
length         =:= inferred_ip_v4_length;
flow_label     =:= static;
next_header    =:= static;
src_port       =:= static;
dst_port       =:= static;
udp_length     =:= inferred_udp_length;
checksum       =:= irregular(16);
discriminator        =:= '1111101'                [ 7 ];
ip_id_indicator      =:= irregular(1)             [ 1 ];
reorder_ratio        =:= reorder_choice           [ 2 ];
msn                  =:= msn_lsb(6, 16)           [ 6 ];
df           =:= dont_fragment(version.UVALUE)    [ 1 ];
header_crc   =:= crc7(THIS.UVALUE, THIS.ULENGTH)  [ 7 ];
ttl_hopl_outer_flag  =:= irregular(1)             [ 1 ];
ttl_hopl_present     =:= irregular(1)             [ 1 ];
tos_tc_outer_flag    =:= irregular(1)             [ 1 ];
ip_id_behavior       =:= ip_id_behavior_choice    [ 2 ];
control_crc3 =:= control_crc3                     [ 3 ];
tos_tc_present       =:= irregular(1)             [ 1 ];
reserved             =:= compressed_value(7, 0)   [ 7 ];
ip_id                =:=
         optional_ip_id_lsb(ip_id_behavior.UVALUE,
                            ip_id_indicator.CVALUE)  [ 0, 8, 16 ];
tos_tc               =:=
         tos_tc_enc(tos_tc_present.CVALUE)               [ 0, 8 ];
ttl_hopl             =:=
         static_or_irreg(ttl_hopl_present.CVALUE,
                         ttl_hopl.ULENGTH)               [ 0, 8 ];

discriminator =:= '0'                             [ 1 ];
msn           =:= msn_lsb(4, 4)                   [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '100'                           [ 3 ];
msn           =:= msn_lsb(6, 16)                  [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '101'                           [ 3 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
msn           =:= msn_lsb(6, 16)                  [ 6 ];
ip_id =:= ip_id_lsb(ip_id_behavior.UVALUE, 4, 3)  [ 4 ];
discriminator =:= '110'                           [ 3 ];
msn           =:= msn_lsb(6, 16)                  [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
discriminator =:= '1100'                          [ 4 ];
ip_id =:= ip_id_lsb(ip_id_behavior.UVALUE, 5, 3)  [ 5 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
msn           =:= msn_lsb(8, 64)                  [ 8 ];
outer_headers  =:= baseheader_outer_headers  [ VARIABLE ];
version        =:= uncompressed_value(4, 4)  [ 4 ];
header_length  =:= uncompressed_value(4, 5)  [ 4 ];
rf             =:= uncompressed_value(1, 0)  [ 1 ];
mf             =:= uncompressed_value(1, 0)  [ 1 ];
frag_offset    =:= uncompressed_value(13, 0) [ 13 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
outer_headers  =:= baseheader_outer_headers  [ VARIABLE ];
version =:= uncompressed_value(4, 6) [ 4 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
tos_tc          =:= static;
dest_addr       =:= static;
version         =:= static;
ttl_hopl        =:= static;
src_addr        =:= static;
df              =:= static;
ip_id_behavior  =:= static;
payload_length  =:= inferred_ip_v6_length;
checksum        =:= inferred_ip_v4_header_checksum;
length          =:= inferred_ip_v4_length;
flow_label      =:= static;
next_header     =:= static;
spi             =:= static;
sequence_number =:= static;
discriminator        =:= '1111101'               [ 7 ];
ip_id_indicator      =:= irregular(1)            [ 1 ];
df           =:= dont_fragment(version.UVALUE)   [ 1 ];
header_crc   =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
ttl_hopl_outer_flag  =:= irregular(1)            [ 1 ];
ttl_hopl_present     =:= irregular(1)            [ 1 ];
tos_tc_outer_flag    =:= irregular(1)            [ 1 ];
tos_tc_present       =:= irregular(1)            [ 1 ];
reorder_ratio        =:= reorder_choice          [ 2 ];
ip_id_behavior       =:= ip_id_behavior_choice   [ 2 ];
control_crc3 =:= control_crc3                    [ 3 ];
reserved             =:= compressed_value(5, 0)  [ 5 ];
sequence_number =:=
           sdvl(sequence_number.ULENGTH) [ 8, 16, 24, 32 ];
ip_id                =:=
         optional_ip_id_lsb(ip_id_behavior.UVALUE,
                            ip_id_indicator.CVALUE) [ 0, 8, 16 ];
tos_tc               =:=
         tos_tc_enc(tos_tc_present.CVALUE)              [ 0, 8 ];
ttl_hopl             =:=
         static_or_irreg(ttl_hopl_present.CVALUE,
                         ttl_hopl.ULENGTH)              [ 0, 8 ];
discriminator =:= '0'                             [ 1 ];
msn           =:= msn_lsb(4, 4)                   [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '100'                           [ 3 ];
msn           =:= msn_lsb(6, 16)                  [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '101'                           [ 3 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
msn           =:= msn_lsb(6, 16)                  [ 6 ];
ip_id =:= ip_id_lsb(ip_id_behavior.UVALUE, 4, 3)  [ 4 ];
discriminator =:= '110'                           [ 3 ];
msn           =:= msn_lsb(6, 16)                  [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
discriminator =:= '1100'                          [ 4 ];
ip_id =:= ip_id_lsb(ip_id_behavior.UVALUE, 5, 3)  [ 5 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
msn           =:= msn_lsb(8, 64)                  [ 8 ];
outer_headers  =:= baseheader_outer_headers  [ VARIABLE ];
version        =:= uncompressed_value(4, 4)  [ 4 ];
header_length  =:= uncompressed_value(4, 5)  [ 4 ];
rf             =:= uncompressed_value(1, 0)  [ 1 ];
mf             =:= uncompressed_value(1, 0)  [ 1 ];
frag_offset    =:= uncompressed_value(13, 0) [ 13 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
outer_headers  =:= baseheader_outer_headers        [ VARIABLE ];
version =:= uncompressed_value(4, 6)               [ 4 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
tos_tc         =:= static;
dest_addr      =:= static;
version        =:= static;
ttl_hopl       =:= static;
src_addr       =:= static;
df             =:= static;
ip_id_behavior =:= static;
payload_length =:= inferred_ip_v6_length;
checksum       =:= inferred_ip_v4_header_checksum;
length         =:= inferred_ip_v4_length;
flow_label     =:= static;
next_header    =:= static;
discriminator        =:= '1111101'               [ 7 ];
ip_id_indicator      =:= irregular(1)            [ 1 ];
reorder_ratio        =:= reorder_choice          [ 2 ];
msn                  =:= msn_lsb(6, 16)          [ 6 ];
df           =:= dont_fragment(version.UVALUE)   [ 1 ];
header_crc   =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
ttl_hopl_outer_flag  =:= irregular(1)            [ 1 ];
ttl_hopl_present     =:= irregular(1)            [ 1 ];
tos_tc_outer_flag    =:= irregular(1)            [ 1 ];
ip_id_behavior       =:= ip_id_behavior_choice   [ 2 ];
control_crc3 =:= control_crc3                    [ 3 ];
tos_tc_present       =:= irregular(1)            [ 1 ];
reserved             =:= compressed_value(7, 0)  [ 7 ];
ip_id                =:=
         optional_ip_id_lsb(ip_id_behavior.UVALUE,
                            ip_id_indicator.CVALUE) [ 0, 8, 16 ];
tos_tc               =:=
         tos_tc_enc(tos_tc_present.CVALUE)              [ 0, 8 ];
ttl_hopl             =:=
         static_or_irreg(ttl_hopl_present.CVALUE,
                         ttl_hopl.ULENGTH)              [ 0, 8 ];

discriminator =:= '0'                             [ 1 ];
msn           =:= msn_lsb(4, 4)                   [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '100'                           [ 3 ];
msn           =:= msn_lsb(6, 16)                  [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '101'                           [ 3 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
msn           =:= msn_lsb(6, 16)                  [ 6 ];
ip_id =:= ip_id_lsb(ip_id_behavior.UVALUE, 4, 3)  [ 4 ];
discriminator =:= '110'                           [ 3 ];
msn           =:= msn_lsb(6, 16)                  [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
discriminator =:= '1100'                          [ 4 ];
ip_id =:= ip_id_lsb(ip_id_behavior.UVALUE, 5, 3)  [ 5 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
msn           =:= msn_lsb(8, 64)                  [ 8 ];
outer_headers  =:= baseheader_outer_headers  [ VARIABLE ];
version        =:= uncompressed_value(4, 4)  [ 4 ];
header_length  =:= uncompressed_value(4, 5)  [ 4 ];
rf             =:= uncompressed_value(1, 0)  [ 1 ];
mf             =:= uncompressed_value(1, 0)  [ 1 ];
frag_offset    =:= uncompressed_value(13, 0) [ 13 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
version =:= uncompressed_value(2, 0) [  2 ];
outer_headers  =:= baseheader_outer_headers  [ VARIABLE ];
version =:= uncompressed_value(4, 6) [ 4 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
version =:= uncompressed_value(2, 0) [  2 ];
ts_offset =:=
           field_scaling(ts_stride.UVALUE, ts_scaled.UVALUE,
                         timestamp.UVALUE) [ 32 ];
tos_tc            =:= static;
dest_addr         =:= static;
version           =:= static;
ttl_hopl          =:= static;
src_addr          =:= static;
df                =:= static;
ip_id_behavior    =:= static;
payload_length    =:= inferred_ip_v6_length;
checksum          =:= inferred_ip_v4_header_checksum;
length            =:= inferred_ip_v4_length;
flow_label        =:= static;
next_header       =:= static;
src_port          =:= static;
dst_port          =:= static;
checksum_coverage =:= irregular(16);
checksum          =:= irregular(16);
pad_bit           =:= static;
extension         =:= static;
cc                =:= static;
marker            =:= uncompressed_value(1, 0);
payload_type      =:= static;
sequence_number   =:= static;
timestamp         =:= static;
ssrc              =:= static;
csrc_list         =:= static;
discriminator        =:= '1111101'               [ 7 ];
marker               =:= irregular(1)            [ 1 ];
header_crc   =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
ip_id_indicator      =:= irregular(1)            [ 1 ];
ip_id_behavior       =:= ip_id_behavior_choice   [ 2 ];
reorder_ratio        =:= reorder_choice          [ 2 ];
df           =:= dont_fragment(version.UVALUE)   [ 1 ];
control_crc3 =:= control_crc3                    [ 3 ];
ttl_hopl_outer_flag  =:= irregular(1)            [ 1 ];
ttl_hopl_present     =:= irregular(1)            [ 1 ];
tos_tc_outer_flag    =:= irregular(1)            [ 1 ];
tos_tc_present       =:= irregular(1)            [ 1 ];
ts_indicator         =:= irregular(2)            [ 2 ];
tss_indicator        =:= irregular(2)            [ 2 ];
pt_present           =:= irregular(1)            [ 1 ];
list_present         =:= irregular(1)            [ 1 ];
pad_bit              =:= irregular(1)            [ 1 ];
extension            =:= irregular(1)            [ 1 ];
coverage_behavior    =:= irregular(2)            [ 2 ];
reserved             =:= compressed_value(4, 0)  [ 4 ];
sequence_number =:= sdvl(sequence_number.ULENGTH) [ 8, 16 ];
ip_id                =:=
         optional_ip_id_lsb(ip_id_behavior.UVALUE,
                            ip_id_indicator.CVALUE) [ 0, 8, 16 ];
tos_tc               =:=
         tos_tc_enc(tos_tc_present.CVALUE)              [ 0, 8 ];
ttl_hopl             =:=
         static_or_irreg(ttl_hopl_present.CVALUE,
                         ttl_hopl.ULENGTH)              [ 0, 8 ];
ts_scaled            =:=
           optional_scaled_timestamp(tss_indicator,
                                     tsc_indicator)     [ VARIABLE ];
ts_scaled            =:=
           optional_scaled_timestamp(tss_indicator,
                                     tsc_indicator)     [ VARIABLE ];
payload_type         =:= optional_pt(pt_present) [ 0, 8 ];
ts_stride            =:=
           optional_stride(tss_indicator,
                           ts_stride_value)             [ VARIABLE ];
csrc_list            =:= list_csrc(cc.UVALUE)    [ VARIABLE ];

discriminator =:= '0'                             [ 1 ];
msn           =:= msn_lsb(4, 4)                   [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
timestamp     =:= inferred_scaled_field           [ 0 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '100'                           [ 3 ];
msn           =:= msn_lsb(6, 16)                  [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
timestamp     =:= inferred_scaled_field           [ 0 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '101'                           [ 3 ];
msn           =:= msn_lsb(5, 8)                   [ 5 ];
marker        =:= irregular(1)                    [ 1 ];
ts_scaled     =:= lsb(4, 3)                       [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
discriminator =:= '1010'                          [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
msn           =:= msn_lsb(5, 8)                   [ 5 ];
ip_id =:= ip_id_lsb(ip_id_behavior.UVALUE, 4, 3)  [ 4 ];
timestamp     =:= inferred_scaled_field           [ 0 ];
discriminator =:= '1011'                          [ 4 ];
marker        =:= irregular(1)                    [ 1 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
msn           =:= msn_lsb(4, 4)                   [ 4 ];
ts_scaled     =:= lsb(4, 3)                       [ 4 ];
discriminator =:= '110'                           [ 3 ];
msn           =:= msn_lsb(7, 32)                  [ 7 ];
ts_scaled     =:= lsb(6, 15)                      [ 6 ];
marker        =:= irregular(1)                    [ 1 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
discriminator =:= '1100'                          [ 4 ];
msn           =:= msn_lsb(7, 32)                  [ 7 ];
ip_id =:= ip_id_lsb(ip_id_behavior.UVALUE, 6, 3)  [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
timestamp     =:= inferred_scaled_field           [ 0 ];
discriminator =:= '1101'                          [ 4 ];
msn           =:= msn_lsb(7, 32)                  [ 7 ];
ts_scaled     =:= lsb(5, 7)                       [ 5 ];
marker        =:= irregular(1)                    [ 1 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
outer_headers  =:= baseheader_outer_headers  [ VARIABLE ];
version        =:= uncompressed_value(4, 4)  [ 4 ];
header_length  =:= uncompressed_value(4, 5)  [ 4 ];
rf             =:= uncompressed_value(1, 0)  [ 1 ];
mf             =:= uncompressed_value(1, 0)  [ 1 ];
frag_offset    =:= uncompressed_value(13, 0) [ 13 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
outer_headers  =:= baseheader_outer_headers  [ VARIABLE ];
version =:= uncompressed_value(4, 6) [ 4 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
tos_tc            =:= static;
dest_addr         =:= static;
version           =:= static;
ttl_hopl          =:= static;
src_addr          =:= static;
df                =:= static;
ip_id_behavior    =:= static;
payload_length    =:= inferred_ip_v6_length;
checksum          =:= inferred_ip_v4_header_checksum;
length            =:= inferred_ip_v4_length;
flow_label        =:= static;
next_header       =:= static;
src_port          =:= static;
dst_port          =:= static;
checksum_coverage =:= irregular(16);
checksum          =:= irregular(16);
discriminator        =:= '1111101'               [ 7 ];
ip_id_indicator      =:= irregular(1)            [ 1 ];
reorder_ratio        =:= reorder_choice          [ 2 ];
msn                  =:= msn_lsb(6, 16)          [ 6 ];
df            =:= dont_fragment(version.UVALUE)  [ 1 ];
header_crc   =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
ttl_hopl_outer_flag  =:= irregular(1)            [ 1 ];
ttl_hopl_present     =:= irregular(1)            [ 1 ];
tos_tc_outer_flag    =:= irregular(1)            [ 1 ];
ip_id_behavior       =:= ip_id_behavior_choice   [ 2 ];
control_crc3 =:= control_crc3                    [ 3 ];
tos_tc_present       =:= irregular(1)            [ 1 ];
coverage_behavior    =:= irregular(2)            [ 2 ];
reserved             =:= compressed_value(5, 0)  [ 5 ];
ip_id                =:=
         optional_ip_id_lsb(ip_id_behavior.UVALUE,
                            ip_id_indicator.CVALUE) [ 0, 8, 16 ];
tos_tc               =:=
         tos_tc_enc(tos_tc_present.CVALUE)              [ 0, 8 ];
ttl_hopl             =:=
         static_or_irreg(ttl_hopl_present.CVALUE,
                         ttl_hopl.ULENGTH)              [ 0, 8 ];

discriminator =:= '0'                             [ 1 ];
msn           =:= msn_lsb(4, 4)                   [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '100'                           [ 3 ];
msn           =:= msn_lsb(6, 16)                  [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
ip_id         =:= inferred_sequential_ip_id       [ 0 ];
discriminator =:= '101'                           [ 3 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
msn           =:= msn_lsb(6, 16)                  [ 6 ];
ip_id =:= ip_id_lsb(ip_id_behavior.UVALUE, 4, 3)  [ 4 ];
discriminator =:= '110'                           [ 3 ];
msn           =:= msn_lsb(6, 16)                  [ 6 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
discriminator =:= '1100'                          [ 4 ];
ip_id =:= ip_id_lsb(ip_id_behavior.UVALUE, 5, 3)  [ 5 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
msn           =:= msn_lsb(8, 64)                  [ 8 ];
