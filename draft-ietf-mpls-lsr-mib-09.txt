


Network Working Group                               Cheenu Srinivasan
Internet Draft                                  Parama Networks, Inc.
Expires: April 2003                                                  
                                                     Arun Viswanathan
                                               Force10 Networks, Inc.
                                                                     
                                                     Thomas D. Nadeau
                                                  Cisco Systems, Inc.
                                                                     
                                                         October 2002
                                  
                                  
 Multiprotocol Label Switching (MPLS) Label Switching Router  (LSR)
                     Management Information Base
                                  
                   draft-ietf-mpls-lsr-mib-09.txt
                                  
Status of this Memo
   
   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC 2026.
   
   Internet-Drafts are working documents of the In ternet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.
   
   Internet-Drafts are draft documents valid for a maximum of six
   months and may be updated, replaced, or obsoleted by other
   documents at any time.  It is inappropriate to use Internet-
   Drafts as reference material or to cite them other than as "work
   in progress."
   
   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.
   
   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.
   
   
Abstract
   
   This memo defines a portion of the Management Information Base
   (MIB) for use with network management protocols in the Internet
   community.  In particular, it describes managed objects for
   modeling a Multiprotocol Label Switching (MPLS) Label Switching
   Router  (LSR).


Table of Contents

1. Introduction                                                    2
2. Terminology                                                     3
3. The SNMP Management Framework                                   3



IETF MPLS Working Group          Expires April 2003          [Page 1]

Internet Draft              MPLS-LSR MIB             October 11, 2002



4. Feature Checklist                                               4
5. Outline                                                         5
 5.1. Summary of LSR MIB                                          5
6. Brief Description of MIB Objects                                5
 6.1. mplsInterfaceConfTable                                      6
 6.2. mplsInterfacePerfTable                                      6
 6.3. mplsInSegmentTable                                          6
 6.4. mplsInSegmentPerfTable                                      6
 6.5. mplsOutSegmentTable                                         6
 6.6. mplsOutSegmentPerfTable                                     6
 6.7. mplsXCTable                                                 6
 6.8. mplsLabelStackTable                                         7
 6.9. mplsTrafficParamTable                                       7
7. Use of 32-bit and 64-bit Counters                               7
8. Example of LSP Setup                                            7
9. Application of the Interface Group to MPLS                      9
 9.1. Support of the MPLS Layer by ifTable                        9
10. The Use of RowPointer                                         10
11. MPLS Label Switching Router  MIB Definitions                  11
12. Security Considerations                                       41
13. Acknowledgments                                               42
14. References                                                    42
15. Authors' Addresses                                            44
16. Full Copyright Statement                                      44



1. Introduction
   
   This memo defines a portion of the Management Information Base
   (MIB) for use with network management protocols in the Internet
   community.  In particular, it describes managed objects for
   modeling a Multi-Protocol Label Switching (MPLS) [RFC3031] Label
   Switching Router  (LSR).
   
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
   NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   RFC 2119, reference [RFC2119].


2. Terminology
   
   This document uses terminology from the document describing the
   MPLS architecture [RFC3031].  A label switched path (LSP) is
   modeled as a connection consisting of one or more incoming
   segments (in-segments) and/or one or more outgoing segments (out-
   segments) at a Label Switching Router  (LSR).  The association or
   interconnection of the in-segments and out-segments is
   accomplished by using a cross-connect.  We use the terminology



IETF MPLS Working Group          Expires April 2003          [Page 2]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   "connection" and "LSP" interchangeably where the meaning is clear
   from the context.


3. The SNMP Management Framework
   
   The SNMP Management Framework presently consists of five major
   components:
   
   -  An overall architecture, described in RFC 2571 [RFC2571].
   
   -  Mechanisms for describing and naming objects and events for the
      purpose of management.  The first version of this Structure of
      Management Information (SMI) is called SMIv1 and described in
      STD 16, RFC 1155 [RFC1155], STD 16, RFC 1212 [RFC1212] and STD
      16, RFC 1215 [RFC1215].  The second version, called SMIv2, is
      described in STD 58, RFC 2578 [RFC2578], STD 58, RFC 2579
      [RFC2579] and STD 58, RFC 2580 [RFC2580].
   
   -  Message protocols for transferring management information.  The
      first version of the SNMP message protocol is called SNMPv1
      and described in STD 15, RFC 1157 [RFC1157].  A second version
      of the SNMP message protocol, which is not an Internet
      standards track protocol, is called SNMPv2c and described in
      RFC 1901 [RFC1901] and RFC 1906 [RFC1906].  The third version
      of the message protocol is called SNMPv3 and described in RFC
      1906 [RFC1906], RFC 2572 [RFC2572] and RFC 2574 [RFC2574].
   
   -  Protocol operations for accessing management information.  The
      first set of protocol operations and associated PDU formats is
      described in STD 15, RFC 1157 [RFC1157].  A second set of
      protocol operations and associated PDU formats is described in
      RFC 1905 [RFC1905].
   
   -  A set of fundamental applications described in RFC 2573
      [RFC2573] and the view-based access control mechanism
      described in RFC 2575 [RFC2575].
   
   A more detailed introduction to the current SNMP Management
   Framework can be found in RFC 2570 [RFC2570].
   
   Managed objects are accessed via a virtual information store,
   termed the Management Information Base or MIB.  Objects in the MIB
   are defined using the mechanisms defined in the SMI.
   
   This memo specifies a MIB module that is compliant to the SMIv2.
   A MIB conforming to the SMIv1 can be produced through the
   appropriate translations.  The resulting translated MIB must be
   semantically equivalent, except where objects or events are
   omitted because no translation is possible (use of Counter64).



IETF MPLS Working Group          Expires April 2003          [Page 3]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   Some machine readable information in SMIv2 will be converted into
   textual descriptions in SMIv1 during the translation process.
   However, this loss of machine readable information is not
   considered to change the semantics of the MIB.


4. Feature Checklist
   
   The MPLS Label Switching Router  MIB (LSR MIB) is designed to
   satisfy the following requirements and constraints:
   
   - The MIB supports LSP establishment via an MPLS signaling
      protocol wherein the LSP parameters are specified using this
      MIB at the head end of the LSP and end-to-end LSP
      establishment is accomplished via signaling. The MIB also
      supports manually configured LSPs, i.e. those for which label
      associations at each hop of the LSP are provisioned by the
      administrator via this MIB.
   
   - The MIB supports the enabling and disabling of MPLS capability
      on MPLS capable interfaces of an LSR.
   
   -  The MIB allows resource sharing between two or more LSPs, i.e.
      it allows specification of sharing of bandwidth and other LSR
      resources between different LSPs.
   
   -  Both per-platform and per-interface label spaces are supported.
   
   -  MPLS packets can be forwarded solely based on an incoming top
      label [RFC3031, RFC3032].
   
   -  Support is provided for next-hop resolution when the outgoing
      interface is a shared media interface.  In the point-to-
      multipoint case, each outgoing segment can reside on a
      different shared media interface.
   
   -  The MIB supports point-to-point, point-to-multipoint and
      multipoint-to-point connections at an LSR.
   
   -  For multipoint-to-point connections all outgoing packets can
      have the same top label.
   
   -  For multipoint-to-point connections, the outgoing resources of
      the merged connections can be shared.
   
   -  For multipoint-to-point connections, packets from different
      incoming connections can have distinct outgoing label stacks
      beneath the (identical) top label.
   
   -  In the point-to-multipoint case each outgoing connection can



IETF MPLS Working Group          Expires April 2003          [Page 4]

Internet Draft              MPLS-LSR MIB             October 11, 2002



      have a distinct label stack including the top label.
   
   -  All the members of a point-to-multipoint connection can share
      the resources allocated for the ingress segments.
   
   -  The MIB provides cross-connect capability to "pop" an incoming
      label and forward the packet with the remainder of the label
      stack unchanged and without pushing any labels ("pop-and-go")
      [RFC3032].
   
   -  The MIB supports persistent as well as non-persistent LSPs.
   
   -  Performance counters are provided for in-segments and out-
      segments as well as for measuring MPLS performance on a per-
      interface basis.


5. Outline
   
   Configuring LSPs through an LSR involves the following steps:
   
   -  Enabling MPLS on MPLS capable interfaces.
   
   -  Configuring in-segments and out-segments.
   
   -  Setting up the cross-connect table to associate segments and/or
      to indicate connection origination and termination.
   
   -  Optionally specifying label stack actions.
   
   -  Optionally specifying segment traffic parameters.


5.1.  Summary of LSR MIB
   
   The MIB objects for performing these actions consist of the
   following tables:
   
   -  The interface configuration table (mplsInterfaceConfTable),
      which is used for enabling the MPLS protocol on MPLS-capable
      interfaces.
   
   -  The in-segment (mplsInSegmentTable) and out-segment
      (mplsOutSegmentTable) tables, which are used for configuring
      LSP segments at an LSR.
   
   -  The cross-connect table (mplsXCTable), which is used to
      associate in and out segments together, in order to form a
      cross-connect.
   



IETF MPLS Working Group          Expires April 2003          [Page 5]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   -  The label stack table (mplsLabelStackTable), which is used for
      specifying label stack operations.
   
   -  The Traffic Parameter table (mplsTrafficParamTable), which is
      used for specifying LSP-related traffic parameters.
   
   Further, the MPLS in-segment and out-segment performance tables,
   mplsInSegmentPerfTable and mplsOutSegmentPerfTable, contain the
   objects necessary to measure the performance of LSPs, and
   mplsInterfacePerfTable has objects to measure MPLS performance on
   a per-interface basis.
   
   These tables are described in the subsequent sections.


6. Brief Description of MIB Objects
   
   Sections 6.1-6.2 describe objects pertaining to MPLS-capable
   interfaces of an LSR.  The objects described in Sections 6.3-6.8,
   were derived from the Incoming Label Map (ILM) and Next Hop Label
   Forwarding Entry (NHLFE) as specified in the MPLS architecture
   document [RFC3031]. Section 6.9 describes objects for specifying
   traffic parameters for in and out segments. It is appropriate to
   note that the in-segment, out-segment, and cross-connect tables
   were modeled after similar tables found in [RFC2515].


6.1.   mplsInterfaceConfTable
   
   This table represents the interfaces that are MPLS capable.  An
   LSR creates an entry in this table for every MPLS capable
   interface on that LSR.


6.2.  mplsInterfacePerfTable
   
   This table contains objects to measure the MPLS performance of
   MPLS capable interfaces and is an AUGMENT to
   mplsInterfaceConfTable.


6.3.  mplsInSegmentTable
   
   This table contains a description of the incoming MPLS segments to
   an LSR and their associated parameters.


6.4.  mplsInSegmentPerfTable
   
   The MPLS In-Segment Performance Table has objects to help measure



IETF MPLS Working Group          Expires April 2003          [Page 6]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   the performance of an incoming segment configured on an LSR.  It
   is an AUGMENT to mplsInSegmentTable.  High capacity counters are
   provided for objects that are likely to wrap around quickly on
   high-speed interfaces.


6.5.  mplsOutSegmentTable
   
   The Out-Segment Table contains a description of the outgoing MPLS
   segments at an LSR and their associated parameters.


6.6.  mplsOutSegmentPerfTable
   
   The MPLS Out-Segment Table contains objects to help measure the
   performance of an outgoing segment configured on an LSR.  It is an
   AUGMENT to mplsOutSegmentTable.  High capacity counters are
   provided for objects that are likely to wrap around quickly on
   high-speed interfaces.


6.7.  mplsXCTable
   
   The mplsXCTable specifies information for associating segments
   together in order to instruct the LSR to switch between the
   specified segments.  It supports point-to-point, point-to-multi-
   point and multi-point-to-point connections.
   
   The operational status object indicates the packet forwarding
   state of a cross-connect entry. For example, when the operational
   status objects is 'down' it indicates that the specified cross-
   connect entry will not forward packets.  Likewise, when it is set
   to 'up' it indicates that packets will be forwarded.
   
   The administrative status object indicates the forwarding state
   desired by the operator.


6.8.  mplsLabelStackTable
   
   The mplsLabelStackTable specifies the label stack to be pushed
   onto a packet, beneath the top label.  Entries to this table are
   referred to from mplsXCTable.


6.9.  mplsTrafficParamTable
   
   The mplsTrafficParamTable contains objects for specifying the
   traffic parameters of in-segments and out-segments.  Entries in
   this table are referred to from mplsInSegmentTable and



IETF MPLS Working Group          Expires April 2003          [Page 7]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   mplsOutSegmentTable.


7. Use of 32-bit and 64-bit Counters
   
   64-bit counters are provided in this MIB for high speed interfaces
   where the use of 32-bit counters might be impractical. The
   requirements on the use of 32-bit and 64-bit counters (copied
   verbatim from [RFC2863]) are as follows.
   
   For interfaces that operate at 20,000,000 (20 million) bits per
   second or less, 32-bit byte and packet counters MUST be supported.
   For interfaces that operate faster than 20,000,000 bits/second,
   and slower than 650,000,000 bits/second, 32-bit packet counters
   MUST be supported and 64-bit octet counters MUST be supported.
   For interfaces that operate at 650,000,000 bits/second or faster,
   64-bit packet counters AND 64-bit octet counters MUST be
   supported.


8. Example of LSP Setup
   
   In this section we provide a brief example of setting up an LSP
   using the MIB objects described in section 11.  While this example
   is not meant to illustrate every nuance of the MIB, it is intended
   as an aid to understanding some of the key concepts.  It is meant
   to be read after going through the MIB itself.
   
   Suppose that one would like to manually create a best-effort,
   unidirectional LSP.  Assume that the LSP enters the LSR via MPLS
   interface A with ifIndex 12 and exits the LSR via MPLS interface B
   with ifIndex 13.  Let us assume that we do not wish to have a
   label stack beneath the top label on the outgoing labeled packets.
   The following example illustrates which rows and corresponding
   objects might be created to accomplish this. Those objects
   relevant to illustrating the relationships amongst different
   tables are shown here. Other objects may be needed before
   conceptual row activation can happen.
   
   The RowStatus values shown in this section are those to be used in
   the set request, typically createAndGo(4) which is used to create
   the conceptual row and have its status immediately set to active.
   A subsequent retrieval operation on the conceptual will return a
   different value, such as active(1). Please see [RFC2579] for a
   detailed discussion on the use of RowStatus.
   
   First, the traffic parameter entries must be set-up for both
   segments.
   
   In mplsTrafficParamTable for the incoming direction:



IETF MPLS Working Group          Expires April 2003          [Page 8]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   
   {
      mplsTrafficParamIndex           = 5
      mplsTrafficParamMaxRate         = 100000,
      mplsTrafficParamMeanRate        = 100000,
      mplsTrafficParamMaxBurstSize    = 2000,
      mplsTrafficParamRowStatus       = createAndGo(4)
   }
   
   In mplsTrafficParamTable for the outgoing direction:
   {
      mplsTrafficParamIndex           = 6
      mplsTrafficParamMaxRate         = 100000,
      mplsTrafficParamMeanRate        = 100000,
      mplsTrafficParamMaxBurstSize    = 2000,
      mplsTrafficParamRowStatus       = createAndGo(4)
   }
   
   Note that if we were setting up a bi-directional LSP, the segments
   in the reverse direction can share the traffic parameter entries
   (and hence resources) with the segments in the forward direction.
   
   We must next create the appropriate in-segment and out-segment
   entries with suitable traffic parameters by pointing to the
   appropriate traffic parameter entries that we have just created.
   
   
   In mplsInSegmentTable:
   {
      mplsInSegmentIfIndex            = 12, -- incoming interface
      mplsInSegmentLabel              = 21, -- incoming label
      mplsInSegmentNPop               = 1,
      -- RowPointer MUST point to the first accesible column.
      mplsInSegmentTrafficParamPtr    = mplsTrafficParamMaxRate.5,
      mplsInSegmentRowStatus          = createAndGo(4)
   }
   
   In mplsOutSegmentTable:
   {
      mplsOutSegmentIndex             = 1,
      mplsOutSegmentIfIndex           = 13, -- outgoing interface
      mplsOutSegmentPushTopLabel      = true(1),
      mplsOutSegmentTopLabel          = 22, -- outgoing label
      -- RowPointer MUST point to the first accesible column.
      mplsOutSegmentTrafficParamPtr   = mplsTrafficParamMaxRate.6,
      -- Other mandatory parameters needed to activate the row go
      here.
      mplsOutSegmentRowStatus         = createAndGo(4)
   }
   



IETF MPLS Working Group          Expires April 2003          [Page 9]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   Next, a cross-connect entry is created thereby associating the
   newly created segments together.
   
   In mplsXCTable:
   {
      mplsXCIndex             = 2,
      mplsXCLspId             = 'c021041502'H, -- 192.33.4.21.2
      mplsInSegmentIfIndex    = 12,
      mplsInSegmentLabel      = 21,
      mplsOutSegmentIndex     = 1,
      mplsXCIsPersistent      = false (1),
      mplsLabelStackIndex     = 0, -- only a single
                                   -- outgoing label
      -- Other mandatory parameters for activating the row go here.
      mplsXCRowStatus         = createAndGo(4)
   }
   
   Note that the mplsInSegmentXCIndex and mplsOutSegmentXCIndex
   objects will automatically be populated with the value 2 when
   these segments are referred to from the corresponding cross-
   connect entry.


9. Application of the Interface Group to MPLS
   
   The Interfaces Group of MIB II defines generic managed objects for
   managing interfaces.  This memo contains the media-specific
   extensions to the Interfaces Group for managing MPLS interfaces.
   
   This memo assumes the interpretation of the Interfaces Group to be
   in accordance with [RFC2863] which states that the interfaces
   table (ifTable) contains information on the managed resource's
   interfaces and that each sub-layer below the internetwork layer of
   a network interface is considered an interface.  Thus, the MPLS
   interface is represented as an entry in the ifTable.  The inter-
   relation of entries in the ifTable is defined by Interfaces Stack
   Group defined in [RFC2863].
   
   When using MPLS interfaces, the interface stack table might appear
   as follows:
      
      +----------------------------------------+
      |   MPLS interface; ifType = mpls(166)   +
      +----------------------------------------+
      |            Underlying Layer            +
      +----------------------------------------+
   
   In the above diagram, "Underlying Layer" refers to the ifIndex of
   any interface type for which MPLS interworking has been defined.
   Examples include ATM, Frame Relay, Ethernet, etc.



IETF MPLS Working Group          Expires April 2003         [Page 10]

Internet Draft              MPLS-LSR MIB             October 11, 2002





9.1.  Support of the MPLS Layer by ifTable
   
   Some specific interpretations of ifTable for the MPLS layer
   follow.
   
   Object        Use for the MPLS layer
   
   ifIndex       Each MPLS interface is represented by an ifEntry.
   
   ifDescr       Description of the MPLS interface.
   
   ifType        The value that is allocated for MPLS is 166.
   
   ifSpeed       The total bandwidth in bits per second for use by
                 the MPLS layer.
   
   ifPhysAddress Unused.
   
   ifAdminStatus This variable indicates the administrator's intent
                 as to whether MPLS should be enabled, disabled, or
                 running in some diagnostic testing mode on this
                 interface.  Also see [RFC2863].
   
   ifOperStatus  This value reflects the actual operational status
                 of MPLS on this interface.
   
   ifLastChange  See [RFC2863].
   
   ifInOctets    The number of received octets over the interface,
                 i.e., the number of received, octets received as
                 labeled packets.
   
   ifOutOctets   The number of transmitted octets over the
                 interface, i.e., the number of octets transmitted
                 as labeled packets.
   
   ifInErrors    The number of labeled packets dropped due to
                 uncorrectable errors.
   
   ifInUnknownProtos
                 The number of received packets discarded during
                 packet header validation, including packets with
                 unrecognized label values.
   
   ifOutErrors   See [RFC2863].
   
   ifName        Textual name (unique on this system) of the
                 interface or an octet string of zero length.



IETF MPLS Working Group          Expires April 2003         [Page 11]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   
   ifLinkUpDownTrapEnable
                 Default is disabled (2).
   
   ifConnectorPresent
                 Set to false (2).
   
   ifHighSpeed   See [RFC2863].
   
   ifHCInOctets  The 64-bit version of ifInOctets; supported if
                 required by the compliance statements in [RFC2863].
   
   ifHCOutOctets The 64-bit version of ifOutOctets; supported if
                 required by the compliance statements in [RFC2863].
   
   ifAlias       The non-volatile 'alias' name for the interface as
                 specified by a network manager.
   
   ifCounterDiscontinuityTime
                 See [RFC2863].


10.   The Use of RowPointer

   RowPointer is a textual convention used to identify a conceptual
   row in an SNMP Table by pointing to one of its objects. In this
   MIB, it is used in mplsInSegmentTable and mplsOutSegmentTable for
   the following purposes. First, it indicates a particular traffic
   parameter table. An example of such a table is
   mplsTrafficParamTable. Second, it is used to indicate a specific
   instance of a traffic parameter entry that is associated with a
   given in-segment or out-segment entry. In the in-segment and out-
   segment tables, mplsTrafficParamPtr MUST point to the first
   column of the appropriate conceptual row [].


11.   MPLS Label Switching Router  MIB Definitions

MPLS-LSR-MIB DEFINITIONS ::= BEGIN

IMPORTS
   MODULE-IDENTITY, OBJECT-TYPE, NOTIFICATION-TYPE,
   Integer32, Counter32, Unsigned32, Counter64, Gauge32,
   zeroDotZero
      FROM SNMPv2-SMI
   MODULE-COMPLIANCE, OBJECT-GROUP, NOTIFICATION-GROUP
      FROM SNMPv2-CONF
   TruthValue, RowStatus, StorageType, RowPointer,
   TimeStamp
      FROM SNMPv2-TC



IETF MPLS Working Group          Expires April 2003         [Page 12]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   InterfaceIndex, InterfaceIndexOrZero
      FROM IF-MIB
   mplsMIB, MplsLSPID, MplsLabel, MplsBitRate, MplsBurstSize,
   MplsOwner
      FROM MPLS-TC-MIB
   AddressFamilyNumbers
      FROM IANA-ADDRESS-FAMILY-NUMBERS-MIB
   InetAddress, InetAddressType
      FROM INET-ADDRESS-MIB
   ;

mplsLsrMIB MODULE-IDENTITY
   LAST-UPDATED "200210051200Z"  -- 5 October 2002 12:00:00 GMT
   ORGANIZATION "Multiprotocol Label Switching (MPLS) Working Group"
   CONTACT-INFO
       "
                Cheenu Srinivasan
        Postal: Parama Networks, Inc.
                1030 Broad Street
                Shrewsbury, NJ 07702
        Tel:    +1-732-544-9120 x731
        Email:  cheenu@paramanet.com
       
                Arun Viswanathan
        Postal: Force10 Networks, Inc.
                1440 McCarthy Blvd
                Milpitas, CA 95035
        Tel:    +1-408-571-3516
        Email:  arun@force10networks.com
       
                Thomas D. Nadeau
        Postal: Cisco Systems, Inc.
                250 Apollo Drive
                Chelmsford, MA 01824
        Tel:    +1-978-244-3051
        Email:  tnadeau@cisco.com
       
       Comments about this document should be emailed
        directly to the MPLS working group mailing list at
        mpls@uu.net.
       "
   DESCRIPTION
       "This MIB contains managed object definitions for the
        Multiprotocol Label Switching (MPLS) Router as
        defined in: Rosen, E., Viswanathan, A., and R.
        Callon, Multiprotocol Label Switching Architecture,
        RFC 3031, January 2001."
   
   -- Revision history.
   REVISION



IETF MPLS Working Group          Expires April 2003         [Page 13]

Internet Draft              MPLS-LSR MIB             October 11, 2002



       "200210051200Z"  -- 5 October 2002 12:00:00 GMT
   DESCRIPTION
       "Initial revision, published as part of RFC XXXX."
   ::= { mplsMIB 2 }

-- Top level components of this MIB.

-- Notifications
mplsLsrNotifications OBJECT IDENTIFIER ::= { mplsLsrMIB 0 }
-- Tables, Scalars
mplsLsrObjects       OBJECT IDENTIFIER ::= { mplsLsrMIB 1 }
-- Conformance
mplsLsrConformance   OBJECT IDENTIFIER ::= { mplsLsrMIB 2 }


-- MPLS Interface Configuration Table.

mplsInterfaceConfTable  OBJECT-TYPE
   SYNTAX        SEQUENCE OF MplsInterfaceConfEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This table specifies per-interface MPLS capability
        and associated information."
   ::= { mplsLsrObjects 1 }

mplsInterfaceConfEntry OBJECT-TYPE
   SYNTAX        MplsInterfaceConfEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "A conceptual row in this table is created
        automatically by an LSR for every interface capable
        of supporting MPLS and is enabled to do so. A
        conceptual row in this table will exist iff a
        corresponding entry in ifTable exists with ifType =
        mpls(166). If this associated entry in ifTable is
        operationally disabled (thus disabling MPLS on that
        interface), the corresponding entry in this table
        MUST be deleted shortly thereafter. An conceptual
        row with index 0 is created if the LSR supports per-
        platform labels. This conceptual row represents the
        per-platform label space and contains parameters
        that apply to all interfaces that participate in the
        per-platform label space. Other conceptual rows in
        this table represent MPLS interfaces that may
        participate in either the per-platform or per-
        interface label spaces, or both. Further information
        about label space participation of an interface is
        provided in the DESCRIPTION clause of



IETF MPLS Working Group          Expires April 2003         [Page 14]

Internet Draft              MPLS-LSR MIB             October 11, 2002



        mplsInterfaceLabelParticipationType."
   INDEX { mplsInterfaceConfIndex }
   ::= { mplsInterfaceConfTable 1 }

MplsInterfaceConfEntry ::= SEQUENCE {
  mplsInterfaceConfIndex              InterfaceIndexOrZero,
  mplsInterfaceLabelMinIn             MplsLabel,
  mplsInterfaceLabelMaxIn             MplsLabel,
  mplsInterfaceLabelMinOut            MplsLabel,
  mplsInterfaceLabelMaxOut            MplsLabel,
  mplsInterfaceTotalBandwidth         MplsBitRate,
  mplsInterfaceAvailableBandwidth     MplsBitRate,
  mplsInterfaceLabelParticipationType BITS
}

mplsInterfaceConfIndex OBJECT-TYPE
   SYNTAX        InterfaceIndexOrZero
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This is a unique index for an entry in the
        MplsInterfaceConfTable.  A non-zero index for an
        entry indicates the ifIndex for the corresponding
        interface entry in of the MPLS-layer in the ifTable.
        Note that the per-platform label space may apply to
        several interfaces, and therefore the configuration
        of the per-platform label space interface parameters
        will apply to all of the interfaces that are
        participating in the per-platform label space."
   REFERENCE
       "RFC 2863 - The Interfaces Group MIB, McCloghrie, K.,
        and F. Kastenholtz, June 2000"
   ::= { mplsInterfaceConfEntry 1 }

mplsInterfaceLabelMinIn OBJECT-TYPE
   SYNTAX        MplsLabel
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This is the minimum value of an MPLS label that this
        LSR is willing to receive on this interface."
   ::= { mplsInterfaceConfEntry 2 }

mplsInterfaceLabelMaxIn OBJECT-TYPE
   SYNTAX        MplsLabel
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This is the maximum value of an MPLS label that this
        LSR is willing to receive on this interface."



IETF MPLS Working Group          Expires April 2003         [Page 15]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   ::= { mplsInterfaceConfEntry 3 }

mplsInterfaceLabelMinOut OBJECT-TYPE
   SYNTAX        MplsLabel
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This is the minimum value of an MPLS label that this
        LSR is willing to send on this interface."
   ::= { mplsInterfaceConfEntry 4 }

mplsInterfaceLabelMaxOut OBJECT-TYPE
   SYNTAX        MplsLabel
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This is the maximum value of an MPLS label that this
        LSR is willing to send on this interface."
   ::= { mplsInterfaceConfEntry 5 }

mplsInterfaceTotalBandwidth OBJECT-TYPE
   SYNTAX        MplsBitRate
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This value indicates the total amount of usable
        bandwidth on this interface and is specified in
        kilobits per second (Kbps).  This variable is not
        applicable when applied to the interface with index
        0. When this value cannot be measured, this value
        should contain the nominal bandwidth."
::= { mplsInterfaceConfEntry 6 }

mplsInterfaceAvailableBandwidth OBJECT-TYPE
   SYNTAX        MplsBitRate
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This value indicates the total amount of available
        bandwidth available on this interface and is
        specified in kilobits per second (Kbps).  This value
        is calculated as the difference between the amount
        of bandwidth currently in use and that specified in
        mplsInterfaceTotalBandwidth.  This variable is not
        applicable when applied to the interface with index
        0. When this value cannot be measured, this value
        should contain the nominal bandwidth."
::= { mplsInterfaceConfEntry 7 }

mplsInterfaceLabelParticipationType OBJECT-TYPE



IETF MPLS Working Group          Expires April 2003         [Page 16]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   SYNTAX  BITS {
                  perPlatform (0),
                  perInterface (1)
              }
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Either the perPlatform(0) or perInterface(1) bit
        MUST be set. Note however that an interface could
        participate in both label spaces in which case both
        bits would be set. If the value of the
        mplsInterfaceConfIndex for this entry is zero, then
        only the perPlatform(0) bit MUST be set and the
        perInterface(1) bit is meaningless. If the
        perInterface(1) bit is set then the value of
        mplsInterfaceLabelMinIn, mplsInterfaceLabelMaxIn,
        mplsInterfaceLabelMinOut, and
        mplsInterfaceLabelMaxOut for this entry reflect the
        label ranges for this interface.  If only the
        perPlatform(0) bit is set, then the value of
        mplsInterfaceLabelMinIn, mplsInterfaceLabelMaxIn,
        mplsInterfaceLabelMinOut, and
        mplsInterfaceLabelMaxOut for this entry must be
        identical to the instance of these objects with
        index 0."
   REFERENCE
       "Rosen, E., Viswanathan, A., and R. Callon,
        Multiprotocol Label Switching Architecture, RFC
        3031, January 2001."
::= { mplsInterfaceConfEntry 8 }

-- End of mplsInterfaceConfTable


-- MPLS Interface Performance Table.

mplsInterfacePerfTable  OBJECT-TYPE
   SYNTAX        SEQUENCE OF MplsInterfacePerfEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This table provides MPLS performance information on
        a per-interface basis."
   ::= { mplsLsrObjects 2 }

mplsInterfacePerfEntry OBJECT-TYPE
   SYNTAX        MplsInterfacePerfEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION



IETF MPLS Working Group          Expires April 2003         [Page 17]

Internet Draft              MPLS-LSR MIB             October 11, 2002



       "An entry in this table is created by the LSR for
        every interface capable of supporting MPLS.  Its is
        an extension to the mplsInterfaceConfEntry table."
   AUGMENTS      { mplsInterfaceConfEntry }
      ::= { mplsInterfacePerfTable 1 }

MplsInterfacePerfEntry ::= SEQUENCE {
      -- incoming direction
      mplsInterfaceInLabelsUsed          Gauge32,
      mplsInterfaceLabelLookupFailures      Counter32,
      
      -- outgoing direction
      mplsInterfaceOutLabelsUsed         Gauge32,
      mplsInterfaceOutFragments          Counter32
   }

mplsInterfaceInLabelsUsed OBJECT-TYPE
   SYNTAX        Gauge32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This object counts the number of labels that are in
        use at this point in time on this interface in the
        incoming direction. If the interface participates in
        the per-platform label space only, then the value of
        this instance of this object MUST be identical with
        the value of the instance with index 0. If the
        interface participates in the per-interface label
        space, then this instance of this object MUST
        represent the number of of per-interface labels that
        are in use at this point in time on this interface."
   ::= { mplsInterfacePerfEntry 1 }

mplsInterfaceLabelLookupFailures  OBJECT-TYPE
   SYNTAX        Counter32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This object counts the number of labeled packets
        that have been received on this interface and were
        discarded because there was no matching cross-
        connect entry. This object MUST count on a per-
        interface basis regardless of which label space the
        interface participates in."
   ::= { mplsInterfacePerfEntry 2 }

mplsInterfaceOutLabelsUsed OBJECT-TYPE
   SYNTAX        Gauge32
   MAX-ACCESS    read-only
   STATUS        current



IETF MPLS Working Group          Expires April 2003         [Page 18]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   DESCRIPTION
       "This object counts the number of top-most labels in
        the outgoing label stacks that are in use at this
        point in time on this interface. This object MUST
        count on a per-interface basis regardless of which
        label space the interface participates in."
   ::= { mplsInterfacePerfEntry 3 }

mplsInterfaceOutFragments OBJECT-TYPE
   SYNTAX        Counter32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This object counts the number of outgoing MPLS
        packets that required fragmentation before
        transmission on this interface. This object MUST
        count on a per-interface basis regardless of which
        label space the interface participates in."
::= { mplsInterfacePerfEntry 4 }

-- In-segment table.

mplsInSegmentTable  OBJECT-TYPE
   SYNTAX        SEQUENCE OF MplsInSegmentEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This table contains the collection of incoming
        segments to an LSR."
   ::= { mplsLsrObjects 3 }

mplsInSegmentEntry  OBJECT-TYPE
   SYNTAX        MplsInSegmentEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "An entry in this table represents one incoming
        segment.  An entry can be created by a network
        administrator or an SNMP agent, or an MPLS signaling
        protocol.  The creator of the entry is denoted by
        mplsInSegmentOwner.  An entry in this table is
        indexed by the ifIndex of the incoming interface and
        the (top) label. The value of mplsInSegmentRowStatus
        cannot be active(1)unless the ifTable entry
        corresponding to mplsInSegmentIfIndex exists. An
        entry in this table must match any incoming packets
        for further processing. A match indicates an
        instance of mplsXCEntry based on which
        forwarding/switching actions are taken."
   INDEX { mplsInSegmentIfIndex, mplsInSegmentLabel }



IETF MPLS Working Group          Expires April 2003         [Page 19]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   ::= { mplsInSegmentTable 1 }

MplsInSegmentEntry ::= SEQUENCE {
  mplsInSegmentIfIndex              InterfaceIndexOrZero,
  mplsInSegmentLabel                MplsLabel,
  mplsInSegmentNPop                 Integer32,
  mplsInSegmentAddrFamily           AddressFamilyNumbers,
  mplsInSegmentXCIndex              Unsigned32,
  mplsInSegmentOwner                MplsOwner ,
  mplsInSegmentTrafficParamPtr      RowPointer,
  mplsInSegmentRowStatus            RowStatus,
  mplsInSegmentStorageType          StorageType
}

mplsInSegmentIfIndex OBJECT-TYPE
   SYNTAX        InterfaceIndexOrZero
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This is a unique index for an entry in the
        MplsInSegmentTable.  This value represents the
        interface index for the incoming MPLS interface.  A
        value of zero represents an incoming label from the
        per-platform label space.  In this case, the
        mplsInSegmentLabel is interpreted to be an MPLS-type
        label."
   ::= { mplsInSegmentEntry 1 }

mplsInSegmentLabel OBJECT-TYPE
   SYNTAX        MplsLabel
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "The incoming label for this segment."
   ::= { mplsInSegmentEntry 2 }

mplsInSegmentNPop OBJECT-TYPE
   SYNTAX        Integer32 (1..2147483647)
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "The number of labels to pop from the incoming
        packet.  Normally only the top label is popped from
        the packet and used for all switching decisions for
        that packet.  Note that technologies which do not
        support label popping should set this value to its
        default value of 1. This object cannot be modified
        if mplsInSegmentRowStatus is active(1)."
   DEFVAL        { 1 }
   ::= { mplsInSegmentEntry 3 }



IETF MPLS Working Group          Expires April 2003         [Page 20]

Internet Draft              MPLS-LSR MIB             October 11, 2002




mplsInSegmentAddrFamily OBJECT-TYPE
   SYNTAX        AddressFamilyNumbers
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "The IANA address family [IANAFamily] of the incoming
        packet which is used at an egress LSR to deliver
        packets to the appropriate layer 3 entity.  A value
        of other(0) indicates that the family type is either
        unknown or undefined; this is not a legal value at
        an egress LSR. This object cannot be modified if
        mplsInSegmentRowStatus is active(1)."
   ::= { mplsInSegmentEntry 4 }

mplsInSegmentXCIndex OBJECT-TYPE
SYNTAX        Unsigned32 (0..4294967295)
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Index into mplsXCTable which identifies which cross-
        connect entry this segment is part of.  A value of
        zero indicates that this entry is not referred to by
        any cross-connect entry.  When a cross-connect entry
        is created which this in-segment is a part of, this
        object is automatically updated to reflect the value
        of mplsXCIndex of that cross-connect entry."
   ::= { mplsInSegmentEntry 5 }
   
mplsInSegmentOwner OBJECT-TYPE
   SYNTAX        MplsOwner
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Denotes the entity that created and is responsible
        for managing this segment."
   ::= { mplsInSegmentEntry 6 }

mplsInSegmentTrafficParamPtr OBJECT-TYPE
   SYNTAX            RowPointer
   MAX-ACCESS        read-create
   STATUS            current
   DESCRIPTION
     "This variable represents a pointer to the traffic
     parameter specification for this in-segment.  This
     value may point at an entry in the
     mplsTrafficParamTable to indicate which
     mplsTrafficParamEntry is to be assigned to this
     segment.  This value may optionally point at an
     externally defined traffic parameter specification



IETF MPLS Working Group          Expires April 2003         [Page 21]

Internet Draft              MPLS-LSR MIB             October 11, 2002



     table.  A value of zeroDotZero indicates best-effort
     treatment.  By having the same value of this object,
     two or more segments can indicate resource sharing.
     This object cannot be modified if
     mplsInSegmentRowStatus is active(1)."
   DEFVAL { zeroDotZero }
   ::= { mplsInSegmentEntry 7 }

mplsInSegmentRowStatus OBJECT-TYPE
   SYNTAX        RowStatus
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "This variable is used to create, modify, and/or
        delete a row in this table."
   ::= { mplsInSegmentEntry 8 }
   
mplsInSegmentStorageType OBJECT-TYPE
   SYNTAX        StorageType
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "This variable indicates the storage type for this
        object. This object cannot be modified if
        mplsInSegmentRowStatus is active(1). If this
        variable is set to readOnly(5), and the
        corresponding LFIB entry is removed, then the agent
        must remove this row shortly thereafter [RFC2579]."
   ::= { mplsInSegmentEntry 9 }

-- End of mplsInSegmentTable


-- In-segment performance table.

mplsInSegmentPerfTable  OBJECT-TYPE
   SYNTAX        SEQUENCE OF MplsInSegmentPerfEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This table contains statistical information for
        incoming MPLS segments to an LSR."
   ::= { mplsLsrObjects 4 }

mplsInSegmentPerfEntry  OBJECT-TYPE
   SYNTAX        MplsInSegmentPerfEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "An entry in this table contains statistical



IETF MPLS Working Group          Expires April 2003         [Page 22]

Internet Draft              MPLS-LSR MIB             October 11, 2002



        information about one incoming segment which was
        configured in the mplsInSegmentTable. The counters
        in this entry should behave in a manner similar to
        that of the interface.
        mplsInSegmentPerfDiscontinuityTime indicates the
        time of the last discontinuity in these objects."
   AUGMENTS      { mplsInSegmentEntry }
   ::= { mplsInSegmentPerfTable 1 }

MplsInSegmentPerfEntry ::= SEQUENCE {
    mplsInSegmentOctets                 Counter32,
    mplsInSegmentPackets                Counter32,
    mplsInSegmentErrors                 Counter32,
    mplsInSegmentDiscards               Counter32,
    
    -- high capacity counter
    mplsInSegmentHCOctets               Counter64,
    
    mplsInSegmentPerfDiscontinuityTime  TimeStamp
   }

mplsInSegmentOctets OBJECT-TYPE
   SYNTAX        Counter32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This value represents the total number of octets
        received by this segment. It MUST be equal to the
        least significant 32 bits of mplsInSegmentHCOctets."
   ::= { mplsInSegmentPerfEntry 1 }

mplsInSegmentPackets OBJECT-TYPE
   SYNTAX        Counter32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Total number of packets received by this segment."
   ::= { mplsInSegmentPerfEntry 2 }

mplsInSegmentErrors OBJECT-TYPE
   SYNTAX        Counter32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "The number of errored packets received on this
        segment."
   ::= { mplsInSegmentPerfEntry 3 }

mplsInSegmentDiscards OBJECT-TYPE
   SYNTAX        Counter32



IETF MPLS Working Group          Expires April 2003         [Page 23]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "The number of labeled packets received on this in-
        segment, which were chosen to be discarded even
        though no errors had been detected to prevent their
        being transmitted.  One possible reason for
        discarding such a labeled packet could be to free up
        buffer space."
   ::= { mplsInSegmentPerfEntry 4 }

mplsInSegmentHCOctets OBJECT-TYPE
   SYNTAX        Counter64
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "The total number of octets received.  This is the 64
        bit version of mplsInSegmentOctets."
   ::= { mplsInSegmentPerfEntry 5 }
   
mplsInSegmentPerfDiscontinuityTime OBJECT-TYPE
   SYNTAX              TimeStamp
   MAX-ACCESS  read-only
   STATUS      current
   DESCRIPTION
       "The value of sysUpTime on the most recent occasion
        at which any one or more of this segment's Counter32
        or Counter64 suffered a discontinuity. If no such
        discontinuities have occurred since the last re-
        initialization of the local management subsystem,
        then this object contains a zero value."
   ::= { mplsInSegmentPerfEntry 6 }

-- End of mplsInSegmentPerfTable.


-- Out-segment table.

mplsOutSegmentIndexNext OBJECT-TYPE
   SYNTAX        Unsigned32 (0..4294967295)
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This object contains the next appropriate value to
        be used for mplsOutSegmentIndex when creating
        entries in the mplsOutSegmentTable.  If the number
        of unassigned entries is exhausted, this object will
        take on the value of 0.  To obtain the
        mplsOutSegmentIndex value for a new entry, the
        manager must first issue a management protocol



IETF MPLS Working Group          Expires April 2003         [Page 24]

Internet Draft              MPLS-LSR MIB             October 11, 2002



        retrieval operation to obtain the current value of
        this object.  The agent should modify the value to
        reflect the next unassigned index after each
        retrieval operation.  After a manager retrieves a
        value the agent will determine through its local
        policy when this index value will be made available
        for reuse."
   ::= { mplsLsrObjects 5 }


mplsOutSegmentTable  OBJECT-TYPE
   SYNTAX        SEQUENCE OF MplsOutSegmentEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This table contains a representation of the outgoing
        segments from an LSR."
   ::= { mplsLsrObjects 6 }

mplsOutSegmentEntry  OBJECT-TYPE
   SYNTAX        MplsOutSegmentEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "An entry in this table represents one outgoing
        segment.  An entry can be created by a network
        administrator or an SNMP agent, or an MPLS signaling
        protocol.  The object mplsOutSegmentOwner indicates
        the creator of this entry. The value of
        mplsOutSegmentRowStatus cannot be active(1)unless
        the ifTable entry corresponding to
        mplsOutSegmentIfIndex exists."
   INDEX { mplsOutSegmentIndex }
   ::= { mplsOutSegmentTable 1 }

MplsOutSegmentEntry ::= SEQUENCE {
  mplsOutSegmentIndex                Unsigned32,
  mplsOutSegmentIfIndex              InterfaceIndexOrZero,
  mplsOutSegmentPushTopLabel         TruthValue,
  mplsOutSegmentTopLabel             MplsLabel,
  mplsOutSegmentNextHopIpAddrType    InetAddressType,
  mplsOutSegmentNextHopIpAddr        InetAddress,
  mplsOutSegmentXCIndex              Unsigned32,
  mplsOutSegmentOwner                MplsOwner ,
  mplsOutSegmentTrafficParamPtr      RowPointer,
  mplsOutSegmentRowStatus            RowStatus,
  mplsOutSegmentStorageType          StorageType
}

mplsOutSegmentIndex OBJECT-TYPE



IETF MPLS Working Group          Expires April 2003         [Page 25]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   SYNTAX        Unsigned32(0..2147483647)
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This value contains a unique index for this row.
        While a value of 0 is not valid as an index for this
        row it can be supplied as a valid value to index
        mplsXCTable to access entries for which no out-
        segment has been configured."
   ::= { mplsOutSegmentEntry 1 }

mplsOutSegmentIfIndex OBJECT-TYPE
   SYNTAX        InterfaceIndex
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "This value must contain the interface index of the
        outgoing interface. This object cannot be modified
        if mplsOutSegmentRowStatus is active(1). The
        mplsOutSegmentRowStatus cannot be set to active(1)
        until this object is set to a value corresponding to
        a valid ifEntry."
   ::= { mplsOutSegmentEntry 2 }

mplsOutSegmentPushTopLabel OBJECT-TYPE
   SYNTAX        TruthValue
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "This value indicates whether or not a top label
        should be pushed onto the outgoing packet's label
        stack.  The value of this variable MUST be set to
        true if the outgoing interface does not support pop-
        and-go (for example an ATM interface) or if it is a
        tunnel origination.  Note that it is considered an
        error in the case that mplsOutSegmentPushTopLabel is
        set to false, but the cross-connect entry which
        refers to this out-segment has a non-zero
        mplsLabelStackIndex.  The LSR MUST ensure that this
        situation does not happen. This object cannot be
        modified if mplsOutSegmentRowStatus is active(1)."
   DEFVAL { true }
   ::= { mplsOutSegmentEntry 3 }

mplsOutSegmentTopLabel OBJECT-TYPE
   SYNTAX        MplsLabel
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "If mplsOutSegmentPushTopLabel is true then this



IETF MPLS Working Group          Expires April 2003         [Page 26]

Internet Draft              MPLS-LSR MIB             October 11, 2002



        represents the label that should be pushed onto the
        top of the outgoing packet's label stack. Otherwise
        this value SHOULD be set to 0 by the management
        station and MUST be ignored by the agent. This
        object cannot be modified if mplsOutSegmentRowStatus
        is active(1)."
   DEFVAL { 0 }
   ::= { mplsOutSegmentEntry 4 }

mplsOutSegmentNextHopIpAddrType OBJECT-TYPE
   SYNTAX        InetAddressType
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Indicates that the next hop address type is IPv4
        when set to ipv4 (1) or IPv6 when set to ipv6 (2).
        A value of unknown (0) is allowed only when the
        outgoing interface is of type point-to-point. If any
        other values are attempted in a set operation the
        agent MUST return an inconsistentValue error. This
        object cannot be modified if mplsOutSegmentRowStatus
        is active(1)."
   ::= { mplsOutSegmentEntry 5 }

mplsOutSegmentNextHopIpAddr OBJECT-TYPE
   SYNTAX        InetAddress
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "The IPv4 or IPv6 address of the next hop.  Its value
        is significant only when
        mplsOutSegmentNextHopIpAddrType is ipv4 (1) or ipv6
        (2). Otherwise a management entity SHOULD set this
        to 0 and an agent MUST ignore it. Likewise an agent
        MUST return a value of 0 for a retrieval operation.
        This object cannot be modified if
        mplsOutSegmentRowStatus is active(1)."
   ::= { mplsOutSegmentEntry 6 }

mplsOutSegmentXCIndex OBJECT-TYPE
   SYNTAX        Unsigned32 (0..4294967295)
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Index into mplsXCTable which identifies which cross-
        connect entry this segment is part of.  A value of
        zero indicates that this entry is not referred to by
        any cross-connect entry.  When a cross-connect entry
        is created which this out-segment is a part of, this
        object is MUST be updated by the agent to reflect



IETF MPLS Working Group          Expires April 2003         [Page 27]

Internet Draft              MPLS-LSR MIB             October 11, 2002



        the value of mplsXCIndex of that cross-connect
        entry."
   ::= { mplsOutSegmentEntry 7 }

mplsOutSegmentOwner OBJECT-TYPE
   SYNTAX        MplsOwner
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Denotes the entity which created and is responsible
        for managing this segment."
   ::= { mplsOutSegmentEntry 8 }

mplsOutSegmentTrafficParamPtr OBJECT-TYPE
   SYNTAX        RowPointer
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
     "This variable represents a pointer to the traffic
      parameter specification for this out-segment.  This
      value may point at an entry in the
      mplsTrafficParamTable to indicate which
      mplsTrafficParamEntry is to be assigned to this
      segment.  This value may optionally point at an
      externally defined traffic parameter specification
      table.  A value of zeroDotZero indicates best-effort
      treatment.  By having the same value of this object,
      two or more segments can indicate resource sharing.
      This object cannot be modified if
      mplsOutSegmentRowStatus is active(1)."
   DEFVAL { zeroDotZero }
   ::= { mplsOutSegmentEntry 9 }

mplsOutSegmentRowStatus OBJECT-TYPE
   SYNTAX        RowStatus
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "For creating, modifying, and deleting this row."
   ::= { mplsOutSegmentEntry 10 }

mplsOutSegmentStorageType OBJECT-TYPE
   SYNTAX        StorageType
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "This variable indicates the storage type for this
        object. This object cannot be modified if
        mplsOutSegmentRowStatus is active(1). If this
        variable is set to readOnly(5), and the



IETF MPLS Working Group          Expires April 2003         [Page 28]

Internet Draft              MPLS-LSR MIB             October 11, 2002



        corresponding LFIB entry is removed, then the agent
        must remove this row shortly thereafter."
   ::= { mplsOutSegmentEntry 11 }

-- End of mplsOutSegmentTable


-- Out-segment performance table.

mplsOutSegmentPerfTable  OBJECT-TYPE
   SYNTAX        SEQUENCE OF MplsOutSegmentPerfEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This table contains statistical information about
        outgoing segments from an LSR. The counters in this
        entry should behave in a manner similar to that of
        the interface."
   ::= { mplsLsrObjects 7 }

mplsOutSegmentPerfEntry  OBJECT-TYPE
   SYNTAX        MplsOutSegmentPerfEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "An entry in this table contains statistical
        information about one outgoing segment configured in
        mplsOutSegmentTable.
        mplsOutSegmentPerfDiscontinuityTime indicates the
        time of the last discontinuity in these objects. "
   AUGMENTS      { mplsOutSegmentEntry }
      ::= { mplsOutSegmentPerfTable 1 }

MplsOutSegmentPerfEntry ::= SEQUENCE {
      mplsOutSegmentOctets                Counter32,
      mplsOutSegmentPackets               Counter32,
      mplsOutSegmentErrors                Counter32,
      mplsOutSegmentDiscards              Counter32,
      
      -- HC counter
      mplsOutSegmentHCOctets              Counter64,
      
      mplsOutSegmentPerfDiscontinuityTime  TimeStamp
   }

mplsOutSegmentOctets OBJECT-TYPE
   SYNTAX        Counter32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION



IETF MPLS Working Group          Expires April 2003         [Page 29]

Internet Draft              MPLS-LSR MIB             October 11, 2002



       "This value contains the total number of octets sent
        on this segment. It MUST be equal to the least
        significant 32 bits of mplsOutSegmentHCOctets."
   ::= { mplsOutSegmentPerfEntry 1 }

mplsOutSegmentPackets OBJECT-TYPE
   SYNTAX        Counter32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This value contains the total number of packets sent
        on this segment."
   ::= { mplsOutSegmentPerfEntry 2 }

mplsOutSegmentErrors OBJECT-TYPE
   SYNTAX        Counter32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Number of packets that could not be sent due to
        errors on this segment."
   ::= { mplsOutSegmentPerfEntry 3 }

mplsOutSegmentDiscards OBJECT-TYPE
   SYNTAX        Counter32
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "The number of labeled packets received on this out-
        segment, which were chosen to be discarded even
        though no errors had been detected to prevent their
        being transmitted.  One possible reason for
        discarding such a labeled packet could be to free up
        buffer space."
   ::= { mplsOutSegmentPerfEntry 4 }

mplsOutSegmentHCOctets OBJECT-TYPE
   SYNTAX        Counter64
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Total number of octets sent.  This is the 64 bit
        version of mplsOutSegmentOctets."
   ::= { mplsOutSegmentPerfEntry 5 }
   
mplsOutSegmentPerfDiscontinuityTime OBJECT-TYPE
   SYNTAX      TimeStamp
   MAX-ACCESS  read-only
   STATUS      current
   DESCRIPTION



IETF MPLS Working Group          Expires April 2003         [Page 30]

Internet Draft              MPLS-LSR MIB             October 11, 2002



       "The value of sysUpTime on the most recent occasion
        at which any one or more of this segment's Counter32
        or Counter64 suffered a discontinuity. If no such
        discontinuities have occurred since the last re-
        initialization of the local management subsystem,
        then this object contains a zero value."
   ::= { mplsOutSegmentPerfEntry 6 }
   

-- End of mplsOutSegmentPerfTable.

-- Cross-connect table.

mplsXCIndexNext OBJECT-TYPE
   SYNTAX        Unsigned32 (0..4294967295)
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This object contains an appropriate value to be used
        for mplsXCIndex when creating entries in the
        mplsXCTable.  The value 0 indicates that no
        unassigned entries are available.  To obtain the
        value of mplsXCIndex for a new entry in the
        mplsXCTable, the manager issues a management
        protocol retrieval operation to obtain the current
        value of mplsXCIndex.  After each retrieval
        operation, the agent should modify the value to
        reflect the next unassigned index.  After a manager
        retrieves a value the agent will determine through
        its local policy when this index value will be made
        available for reuse."
   ::= { mplsLsrObjects 8 }

mplsXCTable  OBJECT-TYPE
   SYNTAX        SEQUENCE OF MplsXCEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This table specifies information for switching
        between LSP segments.  It supports point-to-point,
        point-to-multipoint and multipoint-to-point
        connections.  mplsLabelStackTable specifies the
        label stack information for a cross-connect LSR and
        is referred to from mplsXCTable."
   ::= { mplsLsrObjects 9 }

mplsXCEntry  OBJECT-TYPE
   SYNTAX        MplsXCEntry
   MAX-ACCESS    not-accessible
   STATUS        current



IETF MPLS Working Group          Expires April 2003         [Page 31]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   DESCRIPTION
       "A row in this table represents one cross-connect
        entry.  It is indexed by the following objects:
       
        - cross-connect index mplsXCIndex that uniquely
          identifies a group of cross-connect entries
        - interface index of the in-segment,
        mplsXCInSegmentIfIndex
        - incoming label(s), mplsXCInSegmentLabel
        - out-segment index, mplsXCOutSegmentIndex
       
       LSPs originating at this LSR:
        These are represented by using the special
        combination of values mplsXCInSegmentIfIndex=0 and
        mplsXCInSegmentLabel=0 as indexes.  In this case
        the mplsXCOutSegmentIndex MUST be non-zero.
       
       LSPs terminating at this LSR:
       These are represented by using the special value
        mplsXCOutSegmentIndex=0 as index.
       
       Special labels:
        Entries indexed by reserved MPLS label values 0
        through 15 imply LSPs terminating at this LSR and
        MUST have mplsXCOutSegmentIfIndex = 0.  Note that
        situations where LSPs are terminated with incoming
        label equal to 0, should have
        mplsXCInSegmentIfIndex = 0 as well, but can be
        distinguished from LSPs originating at this LSR
        because the mplsXCOutSegmentIfIndex = 0.  The
        mplsXCOutSegmentIfIndex MUST only be set to 0 in
        the case of LSPs terminating at this LSR.
       
        An entry can be created by a network administrator
        or by an SNMP agent as instructed by an MPLS
        signaling protocol."
   INDEX {
      mplsXCIndex,
      mplsXCInSegmentIfIndex,
      mplsXCInSegmentLabel,
      mplsXCOutSegmentIndex
   }
   ::= { mplsXCTable 1 }

MplsXCEntry ::= SEQUENCE {
      mplsXCIndex                 Unsigned32,
      mplsXCInSegmentIfIndex      InterfaceIndexOrZero,
      mplsXCInSegmentLabel        MplsLabel,
      mplsXCOutSegmentIndex       Unsigned32,
      mplsXCLspId                 MplsLSPID,



IETF MPLS Working Group          Expires April 2003         [Page 32]

Internet Draft              MPLS-LSR MIB             October 11, 2002



      mplsXCLabelStackIndex       Unsigned32,
      mplsXCIsPersistent          TruthValue,
      mplsXCOwner                 MplsOwner ,
      mplsXCRowStatus             RowStatus,
      mplsXCStorageType           StorageType,
      mplsXCAdminStatus           INTEGER,
      mplsXCOperStatus            INTEGER
   }

mplsXCIndex OBJECT-TYPE
   SYNTAX        Unsigned32 (1..2147483647)
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "Primary index for the conceptual row identifying a
        group of cross-connect segments."
   ::= { mplsXCEntry 1 }

mplsXCInSegmentIfIndex OBJECT-TYPE
   SYNTAX        InterfaceIndexOrZero
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "Interface index of the in-segment for LSPs not
        originating at this LSR. Zero (along with
        mplsXCInSegmentLabel) otherwise."
   ::= { mplsXCEntry 2 }

mplsXCInSegmentLabel OBJECT-TYPE
   SYNTAX        MplsLabel
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "Incoming label."
   ::= { mplsXCEntry 3 }

mplsXCOutSegmentIndex OBJECT-TYPE
   SYNTAX        Unsigned32 (1..2147483647)
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "Index of out-segment for LSPs not terminating on
        this LSR; zero otherwise."
   ::= { mplsXCEntry 4 }

mplsXCLspId OBJECT-TYPE
   SYNTAX        MplsLSPID
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION



IETF MPLS Working Group          Expires April 2003         [Page 33]

Internet Draft              MPLS-LSR MIB             October 11, 2002



       "This value identifies the label switched path that
        this cross-connect entry belongs to. This object
        cannot be modified if mplsXCRowStatus is active(1)."
   ::= { mplsXCEntry 5 }

mplsXCLabelStackIndex OBJECT-TYPE
   SYNTAX        Unsigned32 (0..4294967295)
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Primary index into mplsLabelStackTable identifying a
        stack of labels to be pushed beneath the top label.
        Note that the top label identified by the out-
        segment ensures that all the components of a
        multipoint-to-point connection have the same
        outgoing label.  A value of 0 indicates that no
        labels are to be stacked beneath the top label. This
        object cannot be modified if mplsXCRowStatus is
        active(1)."
   ::= { mplsXCEntry 6 }

mplsXCIsPersistent OBJECT-TYPE
   SYNTAX        TruthValue
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Denotes whether or not this cross-connect entry and
        associated in- and out-segments should be restored
        automatically after failures.  This value MUST be
        set to false in cases where this cross-connect entry
        was created by a signaling protocol. This object
        cannot be modified if mplsXCRowStatus is active(1)."
   DEFVAL        { false }
   ::= { mplsXCEntry 7 }
   
mplsXCOwner OBJECT-TYPE
   SYNTAX    MplsOwner
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Denotes the entity that created and is responsible
        for managing this cross-connect. This object cannot
        be modified if mplsXCRowStatus is active(1)."
   ::= { mplsXCEntry 8 }

mplsXCRowStatus OBJECT-TYPE
   SYNTAX        RowStatus
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION



IETF MPLS Working Group          Expires April 2003         [Page 34]

Internet Draft              MPLS-LSR MIB             October 11, 2002



       "For creating, modifying, and deleting this row."
   ::= { mplsXCEntry 9 }
   
mplsXCStorageType OBJECT-TYPE
   SYNTAX        StorageType
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "Defines the storage type support provided for this
        object by the agent. If this variable is set to
        readOnly(5), and the corresponding LFIB entry is
        removed, then the agent must remove this row shortly
        thereafter."
   ::= { mplsXCEntry 10 }

mplsXCAdminStatus OBJECT-TYPE
   SYNTAX   INTEGER {
         up(1),     -- ready to pass packets
         down(2),
         testing(3) -- in some test mode
      }
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "The desired operational status of this segment."
   ::= { mplsXCEntry 11 }

mplsXCOperStatus OBJECT-TYPE
   SYNTAX   INTEGER {
         up(1),            -- ready to pass packets
         down(2),
         testing(3),       -- in some test mode
         unknown(4),       -- status cannot be determined
                           -- for some reason.
         dormant(5),
         notPresent(6),    -- some component is missing
         lowerLayerDown(7) -- down due to the state of
                           -- lower layer interfaces
      }
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "The actual operational status of this cross-
        connect."
   ::= { mplsXCEntry 12 }

-- End of mplsXCTable


-- Label stack table.



IETF MPLS Working Group          Expires April 2003         [Page 35]

Internet Draft              MPLS-LSR MIB             October 11, 2002



mplsMaxLabelStackDepth  OBJECT-TYPE
   SYNTAX        Integer32 (1..2147483647)
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "The maximum stack depth supported by this LSR."
::= { mplsLsrObjects 10 }

mplsLabelStackIndexNext  OBJECT-TYPE
   SYNTAX        Unsigned32 (0..4294967295)
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This object contains an appropriate value to be used
        for mplsLabelStackIndex when creating entries in the
        mplsLabelStackTable.  The value 0 indicates that no
        unassigned entries are available.  To obtain an
        mplsLabelStackIndex value for a new entry, the
        manager issues a management protocol retrieval
        operation to obtain the current value of this
        object.  After each retrieval operation, the agent
        should modify the value to reflect the next
        unassigned index.  After a manager retrieves a value
        the agent will determine through its local policy
        when this index value will be made available for
        reuse."
::= { mplsLsrObjects 11 }

mplsLabelStackTable OBJECT-TYPE
   SYNTAX        SEQUENCE OF MplsLabelStackEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This table specifies the label stack to be pushed
        onto a packet, beneath the top label.  Entries into
        this table are referred to from mplsXCTable."
   ::= { mplsLsrObjects 12 }

mplsLabelStackEntry OBJECT-TYPE
   SYNTAX        MplsLabelStackEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "An entry in this table represents one label which is
        to be pushed onto an outgoing packet, beneath the
        top label.  An entry can be created by a network
        administrator or by an SNMP agent as instructed by
        an MPLS signaling protocol."
   INDEX { mplsLabelStackIndex, mplsLabelStackLabelIndex }
   ::= { mplsLabelStackTable 1 }



IETF MPLS Working Group          Expires April 2003         [Page 36]

Internet Draft              MPLS-LSR MIB             October 11, 2002




MplsLabelStackEntry ::= SEQUENCE {
      mplsLabelStackIndex             Unsigned32,
      mplsLabelStackLabelIndex        Unsigned32,
      mplsLabelStackLabel             MplsLabel,
      mplsLabelStackRowStatus         RowStatus,
      mplsLabelStackStorageType       StorageType
   }

mplsLabelStackIndex OBJECT-TYPE
   SYNTAX        Unsigned32 (1..2147483647)
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "Primary index for this row identifying a stack of
        labels to be pushed on an outgoing packet, beneath
        the top label."
   ::= { mplsLabelStackEntry 1 }

mplsLabelStackLabelIndex OBJECT-TYPE
   SYNTAX        Unsigned32 (1..2147483647)
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "Secondary index for this row identifying one label
        of the stack.  Note that an entry with a smaller
        mplsLabelStackLabelIndex would refer to a label
        higher up the label stack and would be popped at a
        downstream LSR before a label represented by a
        higher mplsLabelStackLabelIndex at a downstream
        LSR."
   ::= { mplsLabelStackEntry 2 }

mplsLabelStackLabel OBJECT-TYPE
   SYNTAX        MplsLabel
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "The label to pushed."
   ::= { mplsLabelStackEntry 3 }

mplsLabelStackRowStatus OBJECT-TYPE
   SYNTAX        RowStatus
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "For creating, modifying, and deleting this row."
   ::= { mplsLabelStackEntry 4 }
   
mplsLabelStackStorageType OBJECT-TYPE



IETF MPLS Working Group          Expires April 2003         [Page 37]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   SYNTAX        StorageType
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       " Defines the storage type support provided for this
        object by the agent. If this variable is set to
        readOnly(5), and the corresponding LFIB entry is
        removed, then the agent must remove this row shortly
        thereafter."
   ::= { mplsLabelStackEntry 5 }

-- End of mplsLabelStackTable

-- Traffic Parameter table.

mplsTrafficParamIndexNext OBJECT-TYPE
   SYNTAX        Unsigned32 (0..4294967295)
   MAX-ACCESS    read-only
   STATUS        current
   DESCRIPTION
       "This object contains an appropriate value which will
        be used for mplsTrafficParamIndex when creating
        entries in the mplsTrafficParamTable.  The value 0
        indicates that no unassigned entries are available.
        To obtain the mplsTrafficParamIndex value for a new
        entry, the manager issues a management protocol
        retrieval operation to obtain the current value of
        this object.  After each retrieval operation, the
        agent should modify the value to reflect the next
        unassigned index.  After a manager retrieves a value
        the agent will determine through its local policy
        when this index value will be made available for
        reuse."
   ::= { mplsLsrObjects 13 }

mplsTrafficParamTable OBJECT-TYPE
   SYNTAX        SEQUENCE OF MplsTrafficParamEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "This table specifies the Traffic Parameter objects
        for in and out-segments."
   ::= { mplsLsrObjects 14 }

mplsTrafficParamEntry OBJECT-TYPE
   SYNTAX        MplsTrafficParamEntry
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "An entry in this table represents the TrafficParam



IETF MPLS Working Group          Expires April 2003         [Page 38]

Internet Draft              MPLS-LSR MIB             October 11, 2002



        objects for one or more in or out segments.  A
        single entry can be pointed to by multiple segments
        indicating resource sharing."
   INDEX { mplsTrafficParamIndex }
   ::= { mplsTrafficParamTable 1 }

MplsTrafficParamEntry ::= SEQUENCE {
      mplsTrafficParamIndex           Unsigned32,
      mplsTrafficParamMaxRate         MplsBitRate,
      mplsTrafficParamMeanRate        MplsBitRate,
      mplsTrafficParamMaxBurstSize    MplsBurstSize,
      mplsTrafficParamRowStatus       RowStatus,
      mplsTrafficParamStorageType     StorageType
   }

mplsTrafficParamIndex OBJECT-TYPE
   SYNTAX        Unsigned32 (1..2147483647)
   MAX-ACCESS    not-accessible
   STATUS        current
   DESCRIPTION
       "Uniquely identifies this row of the table.  Note
        that zero represents an invalid index."
   ::= { mplsTrafficParamEntry 1 }

mplsTrafficParamMaxRate OBJECT-TYPE
   SYNTAX        MplsBitRate
   UNITS         "kilobits per second"
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Maximum rate in kilobits/second."
   ::= { mplsTrafficParamEntry 2 }

mplsTrafficParamMeanRate OBJECT-TYPE
   SYNTAX        MplsBitRate
   UNITS         "kilobits per second"
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Mean rate in kilobits/second."
   ::= { mplsTrafficParamEntry 3 }

mplsTrafficParamMaxBurstSize OBJECT-TYPE
   SYNTAX        MplsBurstSize
   UNITS         "bytes"
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "Maximum burst size in bytes."
   ::= { mplsTrafficParamEntry 4 }



IETF MPLS Working Group          Expires April 2003         [Page 39]

Internet Draft              MPLS-LSR MIB             October 11, 2002




mplsTrafficParamRowStatus OBJECT-TYPE
   SYNTAX        RowStatus
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       "For creating, modifying, and deleting this row."
   ::= { mplsTrafficParamEntry 5 }
   
mplsTrafficParamStorageType OBJECT-TYPE
   SYNTAX        StorageType
   MAX-ACCESS    read-create
   STATUS        current
   DESCRIPTION
       " Defines the storage type support provided for this
        object by the agent. If this variable is set to
        readOnly(5), and the corresponding LFIB entry is
        removed, then the agent must remove this row shortly
        thereafter."
   ::= { mplsTrafficParamEntry 6 }

-- End of mplsTrafficParamTable

-- Notification Configuration

mplsXCNotificationsEnable OBJECT-TYPE
   SYNTAX        TruthValue
   MAX-ACCESS    read-write
   STATUS        current
   DESCRIPTION
       "If this object is set to true(1), then it enables
        the emission of mplsXCUp and mplsXCDown
        notifications; otherwise these notifications are not
        emitted."
   DEFVAL { false }
   ::= { mplsLsrObjects 15 }

-- Cross-connect.

mplsXCUp NOTIFICATION-TYPE
   OBJECTS     {
      mplsXCOperStatus,  -- start of range
      mplsXCOperStatus   -- end of range
   }
   STATUS      current
   DESCRIPTION
       "This notification is generated when the
        mplsXCOperStatus object for one or more contiguous
        entries in mplsXCTable are about to enter the up(1)
        state from some other.  The included values of



IETF MPLS Working Group          Expires April 2003         [Page 40]

Internet Draft              MPLS-LSR MIB             October 11, 2002



        mplsXCOperStatus MUST both be set equal to this
        other state.  The two instances of mplsXCOperStatus
        in this notification indicate the range of indexes
        that are affected.  Note that all the indexes of the
        two ends of the range can be derived from the
        instance identifiers of these two objects.  For
        cases where a contiguous range of cross-connects
        have transitioned into the up(1) state at roughly
        the same time, the device SHOULD issue a single
        notification for each range of contiguous indexes in
        an effort to minimize the emission of a large number
        of notifications.  If a notification has to be
        issued for just a single cross-connect entry, then
        the instance identifier (and values) of the two
        mplsXCOperStatus objects MUST be the identical."
   ::= { mplsLsrNotifications 1 }

mplsXCDown NOTIFICATION-TYPE
   OBJECTS     {
      mplsXCOperStatus,  -- start of range
      mplsXCOperStatus   -- end of range
   }
   STATUS      current
   DESCRIPTION
       " This notification is generated when the
        mplsXCOperStatus object for one or more contiguous
        entries in mplsXCTable are about to enter the
        down(2) state from some other.  The included values
        of mplsXCOperStatus MUST both be set equal to this
        other state.  The two instances of mplsXCOperStatus
        in this notification indicate the range of indexes
        that are affected.  Note that all the indexes of the
        two ends of the range can be derived from the
        instance identifiers of these two objects.  For
        cases where a contiguous range of cross-connects
        have transitioned into the down(2) state at roughly
        the same time, the device SHOULD issue a single
        notification for each range of contiguous indexes in
        an effort to minimize the emission of a large number
        of notifications.  If a notification has to be
        issued for just a single cross-connect entry, then
        the instance identifier (and values) of the two
        mplsXCOperStatus objects MUST be the identical."
   ::= { mplsLsrNotifications 2 }

-- End of notifications.


-- Module compliance.




IETF MPLS Working Group          Expires April 2003         [Page 41]

Internet Draft              MPLS-LSR MIB             October 11, 2002



mplsLsrGroups
   OBJECT IDENTIFIER ::= { mplsLsrConformance 1 }

mplsLsrCompliances
   OBJECT IDENTIFIER ::= { mplsLsrConformance 2 }

mplsLsrModuleCompliance MODULE-COMPLIANCE
   STATUS current
   DESCRIPTION
       "Compliance statement for agents that support the
        MPLS-LSR-MIB."
   MODULE -- this module

      -- The mandatory groups have to be implemented
      -- by all LSRs.  However, they may all be supported
      -- as read-only objects in the case where manual
      -- configuration is unsupported.

      MANDATORY-GROUPS {
         mplsInterfaceGroup,
         mplsInSegmentGroup,
         mplsOutSegmentGroup,
         mplsXCGroup,
         mplsPerfGroup,
         mplsSegmentDiscontinuityGroup
      }

      GROUP mplsHCInSegmentPerfGroup
      DESCRIPTION
          "This group is mandatory for those in-segment
           entries for which the object
           mplsInSegmentOutOctets wraps around too
           quickly."

      GROUP mplsHCOutSegmentPerfGroup
      DESCRIPTION
          "This group is mandatory for those out-segment
           entries for which the object
           mplsOutSegmentOctets wraps around too quickly."
          
      GROUP mplsTrafficParamGroup
      DESCRIPTION
          "This group is mandatory for those LSRs that
           support QoS resource reservation."

      -- Depending on whether the device implements
      -- persistent cross-connects or not one of the
      -- following two groups is mandatory.

      GROUP mplsXCIsPersistentGroup



IETF MPLS Working Group          Expires April 2003         [Page 42]

Internet Draft              MPLS-LSR MIB             October 11, 2002



      DESCRIPTION
          "This group is mandatory for devices which
           support persistent cross-connects.  The
           following constraints apply: mplsXCIsPersistent
           must at least be read-only returning true(2)."

      GROUP mplsXCIsNotPersistentGroup
      DESCRIPTION
          "This group is mandatory for devices which
           support non-persistent cross-connects.  The
           following constraints apply: mplsXCIsPersistent
           must at least be read-only returning false(1)."


      -- mplsInSegmentTable
          
      OBJECT     mplsInSegmentXCIndex
      DESCRIPTION
          "Write access is not required."

      OBJECT      mplsInSegmentNPop
      MIN-ACCESS  read-only
      DESCRIPTION
          "Write access is not required.  This object
           should be set to 1 if it is read-only."

      OBJECT      mplsInSegmentAddrFamily
      DESCRIPTION
          "Write access is not required.  A value of
           other(0) should be supported because there may
           be cases where the agent may not know about or
           support any address types."

      OBJECT      mplsInSegmentStorageType
      SYNTAX      INTEGER { other(1) }
      DESCRIPTION
          "Only other(1) needs to be supported."

      -- mplsOutSegmentTable

      OBJECT      mplsOutSegmentIfIndex
      MIN-ACCESS  read-only
      DESCRIPTION
          "Write access is not required."
      
      OBJECT      mplsOutSegmentPushTopLabel
      MIN-ACCESS  read-only
      DESCRIPTION
          "Write access is not required."




IETF MPLS Working Group          Expires April 2003         [Page 43]

Internet Draft              MPLS-LSR MIB             October 11, 2002



      OBJECT      mplsOutSegmentTopLabel
      MIN-ACCESS  read-only
      DESCRIPTION
          "Write access is not required."

      OBJECT      mplsOutSegmentNextHopIpAddrType
      SYNTAX      InetAddressType { unknown(0), ipv4(1), ipv6(2) }
      MIN-ACCESS  read-only
      DESCRIPTION
          "An implementation is only required to support
           ipv4(1) and ipv6(2)."

      OBJECT      mplsOutSegmentNextHopIpAddr
      SYNTAX      InetAddress (SIZE(0|4|16))
      MIN-ACCESS  read-only
      DESCRIPTION
          "An implementation is only required to support
           IPv4 and globally unique IPv6 addresses. Write
           access is not required."

      OBJECT      mplsOutSegmentRowStatus
      SYNTAX      INTEGER {
         active(1),
         notInService(2),
         createAndGo(4),
         destroy(6)
      }
      MIN-ACCESS  read-only
      DESCRIPTION
          "The notReady(3) and createAndWait(5) states need
           not be supported."
      OBJECT      mplsOutSegmentStorageType
      SYNTAX      INTEGER { other(1) }
      DESCRIPTION
          "Only other(1) needs to be supported."

      -- mplsXCTable

      OBJECT      mplsXCLabelStackIndex
      MIN-ACCESS  read-only
      DESCRIPTION
          "Write access is not required."

      OBJECT      mplsXCIsPersistent
      MIN-ACCESS  read-only
      DESCRIPTION
          "Write access is not required."

      OBJECT      mplsXCAdminStatus
      SYNTAX      INTEGER { up(1), down(2) }



IETF MPLS Working Group          Expires April 2003         [Page 44]

Internet Draft              MPLS-LSR MIB             October 11, 2002



      MIN-ACCESS  read-only
      DESCRIPTION
          "A value of testing(3) need not be supported."

      OBJECT      mplsXCOperStatus
      SYNTAX      INTEGER { up(1), down(2) }
      DESCRIPTION
          "Only up(1) and down(2) need to be supported."
      
      OBJECT      mplsXCRowStatus
      SYNTAX      INTEGER {
         active(1),
         notInService(2),
         createAndGo(4),
         destroy(6)
      }
      MIN-ACCESS  read-only
      DESCRIPTION
          "The notReady(3) and createAndWait(5) states need
           not be supported."
      
      OBJECT      mplsXCStorageType
      SYNTAX      INTEGER { other(1) }
      DESCRIPTION
          "Only other(1) needs to be supported."

   ::= { mplsLsrCompliances 1 }


-- Units of conformance.

mplsInterfaceGroup OBJECT-GROUP
   OBJECTS {
      mplsInterfaceLabelMinIn,
      mplsInterfaceLabelMaxIn,
      mplsInterfaceLabelMinOut,
      mplsInterfaceLabelMaxOut,
      mplsInterfaceTotalBandwidth,
      mplsInterfaceAvailableBandwidth,
      mplsInterfaceLabelParticipationType
   }
   STATUS  current
   DESCRIPTION
          "Collection of objects needed for MPLS interface
           configuration and performance information."
   ::= { mplsLsrGroups 1 }

mplsInSegmentGroup  OBJECT-GROUP
   OBJECTS {
      mplsInSegmentNPop,



IETF MPLS Working Group          Expires April 2003         [Page 45]

Internet Draft              MPLS-LSR MIB             October 11, 2002



      mplsInSegmentAddrFamily,
      mplsInSegmentXCIndex,
      mplsInSegmentOctets,
      mplsInSegmentDiscards,
      mplsInSegmentOwner,
      mplsInSegmentRowStatus,
      mplsInSegmentStorageType,
      mplsInSegmentTrafficParamPtr
   }
   STATUS  current
   DESCRIPTION
          "Collection of objects needed to implement an in-
           segment."
   ::= { mplsLsrGroups 2 }

mplsOutSegmentGroup  OBJECT-GROUP
   OBJECTS {
      mplsOutSegmentIndexNext,
      mplsOutSegmentIfIndex,
      mplsOutSegmentPushTopLabel,
      mplsOutSegmentTopLabel,
      mplsOutSegmentNextHopIpAddrType,
      mplsOutSegmentNextHopIpAddr,
      mplsOutSegmentXCIndex,
      mplsOutSegmentOwner,
      mplsOutSegmentOctets,
      mplsOutSegmentDiscards,
      mplsOutSegmentErrors,
      mplsOutSegmentRowStatus,
      mplsOutSegmentStorageType,
      mplsOutSegmentTrafficParamPtr
   }
   STATUS  current
   DESCRIPTION
          "Collection of objects needed to implement an out-
           segment."
   ::= { mplsLsrGroups 3 }

mplsXCGroup  OBJECT-GROUP
   OBJECTS {
      mplsXCIndexNext,
      mplsXCLabelStackIndex,
      mplsXCOwner,
      mplsXCAdminStatus,
      mplsXCOperStatus,
      mplsXCRowStatus,
      mplsXCNotificationsEnable,
      mplsXCStorageType
   }
   STATUS  current



IETF MPLS Working Group          Expires April 2003         [Page 46]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   DESCRIPTION
          "Collection of objects needed to implement a
           cross-connect entry."
   ::= { mplsLsrGroups 4 }

mplsXCOptionalGroup  OBJECT-GROUP
   OBJECTS { mplsXCLspId }
   STATUS  current
   DESCRIPTION
          "Collection of optional objects for implementing
           a cross-connect entry."
   ::= { mplsLsrGroups 5 }

mplsPerfGroup OBJECT-GROUP
   OBJECTS {
      mplsInSegmentOctets,
      mplsInSegmentPackets,
      mplsInSegmentErrors,
      mplsInSegmentDiscards,
      mplsOutSegmentOctets,
      mplsOutSegmentPackets,
      mplsOutSegmentDiscards,
      mplsInterfaceInLabelsUsed,
      mplsInterfaceLabelLookupFailures ,
      mplsInterfaceOutFragments,
      mplsInterfaceOutLabelsUsed
   }
   
   STATUS  current
   DESCRIPTION
          "Collection of objects providing performance
           information
        about an LSR."
   ::= { mplsLsrGroups 6 }

mplsHCInSegmentPerfGroup OBJECT-GROUP
   OBJECTS { mplsInSegmentHCOctets }
   STATUS  current
   DESCRIPTION
          "Object(s) providing performance information
           specific to out-segments for which the object
           mplsInterfaceInOctets wraps around too quickly."
   ::= { mplsLsrGroups 7 }

mplsHCOutSegmentPerfGroup OBJECT-GROUP
   OBJECTS { mplsOutSegmentHCOctets }
   STATUS  current
   DESCRIPTION
          "Object(s) providing performance information
           specific to out-segments for which the object



IETF MPLS Working Group          Expires April 2003         [Page 47]

Internet Draft              MPLS-LSR MIB             October 11, 2002



           mplsInterfaceOutOctets wraps around too
           quickly."
   ::= { mplsLsrGroups 8 }
   
mplsTrafficParamGroup OBJECT-GROUP
   OBJECTS {
      mplsTrafficParamIndexNext,
      mplsTrafficParamMaxRate,
      mplsTrafficParamMeanRate,
      mplsTrafficParamMaxBurstSize,
      mplsTrafficParamRowStatus,
      mplsTrafficParamStorageType
   }
   STATUS  current
   DESCRIPTION
          "Object(s) required for supporting QoS resource
           reservation."
   ::= { mplsLsrGroups 9 }

mplsXCIsPersistentGroup OBJECT-GROUP
   OBJECTS { mplsXCIsPersistent }
   STATUS  current
   DESCRIPTION
          "Objects needed to support persistent cross-
           connects."
   ::= { mplsLsrGroups 10 }

mplsXCIsNotPersistentGroup OBJECT-GROUP
   OBJECTS { mplsXCIsPersistent }
   STATUS  current
   DESCRIPTION
          "Objects needed to support non-persistent cross-
           connects."
   ::= { mplsLsrGroups 11 }
   
mplsLabelStackGroup OBJECT-GROUP
   OBJECTS {
      mplsLabelStackLabel,
      mplsLabelStackRowStatus,
      mplsLabelStackStorageType,
      mplsMaxLabelStackDepth,
      mplsLabelStackIndexNext
   }
   STATUS current
   DESCRIPTION
          "Objects needed to support label stacking which
           is an optional feature for an LSR."
      ::= { mplsLsrGroups 12 }
      
mplsSegmentDiscontinuityGroup OBJECT-GROUP



IETF MPLS Working Group          Expires April 2003         [Page 48]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   OBJECTS {
      mplsInSegmentPerfDiscontinuityTime,
      mplsOutSegmentPerfDiscontinuityTime
   }
   STATUS  current
   DESCRIPTION
       " A collection of objects providing information
        specific to segment discontinuities.."
   ::= { mplsLsrGroups 13 }

mplsLsrNotificationGroup NOTIFICATION-GROUP
   NOTIFICATIONS {
      mplsXCUp,
      mplsXCDown
   }
   STATUS  current
   DESCRIPTION
          "Set of notifications implemented in this module.
           None is mandatory."
   ::= { mplsLsrGroups 14 }

END


12.   Security Considerations
   
   It is clear that this MIB is potentially useful for monitoring of
   MPLS LSRs.  This MIB can also be used for configuration of certain
   objects, and anything that can be configured can be incorrectly
   configured, with potentially disastrous results.
   
   At this writing, no security holes have been identified beyond
   those that SNMP Security [RFC2571] is itself intended to address.
   These relate to primarily controlled access to sensitive
   information and the ability to configure a device - or which might
   result from operator error, which is beyond the scope of any
   security architecture.
   
   There are a number of management objects defined in this MIB which
   have a MAX-ACCESS clause of read-write and/or read-create.  Such
   objects may be considered sensitive or vulnerable in some network
   environments.  The support for SET operations in a non-secure
   environment without proper protection can have a negative effect
   on network operations.  The use of SNMP Version 3 is recommended
   over prior versions, for configuration control, as its security
   model is improved.
   
   SNMPv1 or SNMPv2 are by themselves not a secure environment.  Even
   if the network itself is secure (for example by using IPSec
   [RFC2401]), there is no control as to who on the secure network is



IETF MPLS Working Group          Expires April 2003         [Page 49]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   allowed to access and GET/SET (read/change/create/delete) the
   objects in this MIB.  It is recommended that the implementers
   consider the security features as provided by the SNMPv3
   framework.  Specifically, the use of the User-based Security Model
   [RFC2574] and the View-based Access Control [RFC2575] is
   recommended.  It is then a customer/user responsibility to ensure
   that the SNMP entity giving access to an instance of this MIB is
   properly configured to give access to the objects only to those
   principals (users) that have legitimate rights to indeed GET or
   SET (change/create/delete) them.
   
   There are a number of managed objects in this MIB that may contain
   information that may be sensitive from a business perspective, in
   that they represent a customer's interface to the MPLS network.
   Allowing uncontrolled access to these objects could result in
   malicious and unwanted disruptions of network traffic or incorrect
   configurations for these customers.  There are no objects that are
   particularly sensitive in their own right, such as passwords or
   monetary amounts.


13.   Acknowledgments
   
   We wish to thank Ron Bonica, Adrian Farrel, Eric Gray, Tim
   Mancour, Keith McCloghrie, Bala Rajagopalan, Dan Tappan, Vasanthi
   Thirumalai, Joseph Benoit and Joan Cucchiara.


14.   References
   
   [Assigned]    Reynolds, J., and J. Postel, "Assigned Numbers",
                 RFC 1700, October 1994. See also:
                 http://www.isi.edu/in-notes/iana/assignments/smi-
                 numbers
   
   [IANAFamily]  Internet Assigned Numbers Authority (IANA), ADDRESS
                 FAMILY NUMBERS, (http://www.isi.edu/in-
                 notes/iana/assignements/address-family-numbers),
                 for MIB see:
                 ftp://ftp.isi.edu/mib/iana.mib/ianaaddressfamilynum
                 bers.mib
   
   [TCMIB]       Nadeau, T., Cucchiara, J., Srinivasan, C,
                 Viswanathan, A. and H. Sjostrand, "Definition of
                 Textual Conventions and OBJECT-IDENTITIES for Multi-
                 Protocol Label Switching (MPLS) Management",
                 Internet Draft <draft-ietf-mpls-tc-mib-03.txt>,
                 January 2002.
   
   [RFC1155]     Rose, M., and K. McCloghrie, "Structure and



IETF MPLS Working Group          Expires April 2003         [Page 50]

Internet Draft              MPLS-LSR MIB             October 11, 2002



                 Identification of Management Information for TCP/IP-
                 based Internets", RFC 1155, May 1990.
   
   [RFC1157]     Case, J., Fedor, M., Schoffstall, M., and J. Davin,
                 "Simple Network Management Protocol", RFC 1157, May
                 1990.
   
   [RFC1215]     M. Rose, "A Convention for Defining Traps for use
                 with the SNMP", RFC 1215, March 1991.
   
   [RFC1901]     Case, J., McCloghrie, K., Rose, M., and S.
                 Waldbusser, "Introduction to Community-based
                 SNMPv2", RFC 1901, January 1996.
   
   [RFC1905]     Case, J., McCloghrie, K., Rose, M., and S.
                 Waldbusser, "Protocol Operations for Version 2 of
                 the Simple Network Management Protocol (SNMPv2)",
                 RFC 1905, January 1996.
   
   [RFC1906]     Case, J., McCloghrie, K., Rose, M., and S.
                 Waldbusser, "Transport Mappings for Version 2 of
                 the Simple Network Management Protocol (SNMPv2)",
                 RFC 1906, January 1996.
   
   [RFC2119]     Bradner, S., "Key words for use in RFCs to Indicate
                 Requirement Levels", BCP 14, RFC 2119, March 1997.
   
   [RFC2863]     McCloghrie, K., and F. Kastenholtz, "The Interfaces
                 Group MIB using SMIv2", RFC 2863, June 2000
   
   [RFC2401]     Kent, S., and Atkinson, R., "Security Architecture
                 for the Internet Protocol", RFC 2401, November
                 1998.
   
   [RFC2515]     Tesink, K., "Definitions of Managed Objects for ATM
                 Management", RFC 2515, Feb. 1999
   
   [RFC2570]     Case, J., Mundy, R., Partain, D., and B. Stewart,
                 "Introduction to Version 3 of the Internet-standard
                 Network Management Framework", RFC 2570, April
                 1999.
   
   [RFC2571]     Harrington, D., Presuhn, R., and B. Wijnen, "An
                 Architecture for Describing SNMP Management
                 Frameworks", RFC 2571, April 1999.
   
   [RFC2572]     Case, J., Harrington D., Presuhn R., and B. Wijnen,
                 "Message Processing and Dispatching for the Simple
                 Network Management Protocol (SNMP)", RFC 2572,
                 April 1999.



IETF MPLS Working Group          Expires April 2003         [Page 51]

Internet Draft              MPLS-LSR MIB             October 11, 2002



   
   [RFC2573]     Levi, D., Meyer, P., and B. Stewart, "SNMPv3
                 Applications", RFC 2573, April 1999.
   
   [RFC2574]     Blumenthal, U., and B. Wijnen, "User-based Security
                 Model (USM) for version 3 of the Simple Network
                 Management Protocol (SNMPv3)", RFC 2574, April
                 1999.
   
   [RFC2575]     Wijnen, B., Presuhn, R., and K. McCloghrie, "View-
                 based Access Control Model (VACM) for the Simple
                 Network Management Protocol (SNMP)", RFC 2575,
                 April 1999.
   
   [RFC2578]     McCloghrie, K., Perkins, D., Schoenwaelder, J.,
                 Case, J., Rose, M., and S. Waldbusser, "Structure
                 of Management Information Version 2 (SMIv2)", STD
                 58, RFC 2578, April 1999.
   
   [RFC2579]     McCloghrie, K., Perkins, D., Schoenwaelder, J.,
                 Case, J., Rose, M., and S. Waldbusser, "Textual
                 Conventions for SMIv2", STD 58, RFC 2579, April
                 1999.
   
   [RFC2702]     Awduche, D., Malcolm, J., Agogbua, J., O'Dell, M.,
                 and J. McManus, "Requirements for Traffic
                 Engineering Over MPLS", RFC 2702, September 1999.
   
   [RFC2580]     McCloghrie, K., Perkins, D., Schoenwaelder, J.,
                 Case, J., Rose, M., and S. Waldbusser, "Conformance
                 Statements for SMIv2", STD 58, RFC 2580, April
                 1999.
   
   [RFC3031]     Rosen, E., Viswanathan, A., and R. Callon,
                 "Multiprotocol Label Switching Architecture", RFC
                 3031, January 2001.
   
   [RFC3032]     Rosen, E., Rekhter, Y., Tappan, D., Farinacci, D.,
                 Federokow, G., Li, T., and A. Conta, "MPLS Label
                 Stack Encoding", RFC 3032, January 2001.


15.   Authors' Addresses

  Cheenu Srinivasan
  Parama Networks, Inc.
  1030 Broad Street
  Shrewsbury, NJ 07702
  Phone: +1-732-544-9120 x731
  Email: cheenu@paramanet.com



IETF MPLS Working Group          Expires April 2003         [Page 52]

Internet Draft              MPLS-LSR MIB             October 11, 2002



  
  Arun Viswanathan
  Force10 Networks, Inc.
  1440 McCarthy Blvd
  Milpitas, CA 95035
  Phone: +1-408-571-3516
  Email: arun@force10networks.com
  
  Thomas D. Nadeau
  Cisco Systems, Inc.
  250 Apollo Drive
  Chelmsford, MA 01824
  Phone: +1-978-244-3051
  Email: tnadeau@cisco.com


16.   Full Copyright Statement

   
   Copyright (C) The Internet Society (2001).  All Rights Reserved.
   
   This document and translations of it may be copied and furnished
   to others, and derivative works that comment on or otherwise
   explain it or assist in its implementation may be prepared,
   copied, published and distributed, in whole or in part, without
   restriction of any kind, provided that the above copyright notice
   and this paragraph are included on all such copies and derivative
   works.  However, this document itself may not be modified in any
   way, such as by removing the copyright notice or references to the
   Internet Society or other Internet organizations, except as needed
   for the  purpose of developing Internet standards in which case
   the procedures for copyrights defined in the Internet Standards
   process must be followed, or as required to translate it into
   languages other than English.
   
   The limited permissions granted above are perpetual and will not
   be revoked by the Internet Society or its successors or assigns.
   This document and the information contained herein is provided on
   an "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET
   ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.










IETF MPLS Working Group          Expires April 2003         [Page 53]


