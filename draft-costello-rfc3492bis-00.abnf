base         = 36
tmin         = 1
tmax         = 26
skew         = 38
damp         = 700
initial_bias = 72
initial_n    = 128 = 0x80

punycode_success    = 0,
punycode_bad_input  = 1, /* Input is invalid.                       */
punycode_big_output = 2, /* Output would exceed the space provided. */
punycode_overflow   = 3  /* Wider integers needed to process input. */
initial_bias = 72, initial_n = 0x80, delimiter = 0x2D };

delta = firsttime ? delta / damp : delta >> 1;
input_length = (punycode_uint) input_length_orig;

n = initial_n;
delta = 0;
out = 0;
max_out = *output_length;
bias = initial_bias;

h = b = (punycode_uint) out;
n = m;

t = k <= bias /* + tmin */ ? tmin :     /* +tmin not needed */
              k >= bias + tmax ? tmax : k - bias;
q = (q - t) / (base - t);
bias = adapt(delta, h + 1, h == b);
delta = 0;
n = initial_n;
out = i = 0;
max_out = *output_length > maxint ? maxint
            : (punycode_uint) *output_length;
bias = initial_bias;

digit = decode_digit(input[in++]);
t = k <= bias /* + tmin */ ? tmin :     /* +tmin not needed */
          k >= bias + tmax ? tmax : k - bias;
bias = adapt(i - oldi, out + 1, oldi == 0);

unicode_max_length = 256,
ace_max_length = 256
input_length = 0;

r = scanf("%2s%lx", uplus, &codept);
output_length = ace_max_length;
status = punycode_encode(input_length, input, case_flags,
                             &output_length, output);
c = output[j];
r = puts(output);
input_length = strlen(input) - 1;
pp = strchr(print_ascii, *p);
output_length = unicode_max_length;
status = punycode_decode(input_length, input, &output_length,
                             output, case_flags);
r = printf("%s+%04lX\n",
                 case_flags[j] ? "U" : "u",
                 (unsigned long) output[j] );
