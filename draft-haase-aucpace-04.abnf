w = IHF(username,password,salt, sigma).

salt = strong_AuCPace_salt_derivation(q,username,password).  This
DSI2 = "CPace25519-2", DSI3 = "AuCPace25-Ta", DSI4 = "AuCPace25-Tb",
DSI5 = "AuCPace25519".  (ASCII encoding without ANSI-C style trailing
cs = scalar_cofactor_clearing(s)

csi = 1 / (8 * cs) % p.

QI = UNCLAMPED_X25519(Q, 8 * si).

bytes = [ord(b) for b in k]
m = hashlib.sha512()
p = 2^255 - 19

H_block_SHA512 = 128
DSI1 = b"CPace25519-1"
ZPAD_len = max(0,H_block_SHA512 - len(CI) - len(PRS))
ZPAD = ZPAD_len * "\0"

u = littleEndianStringToInteger(m.digest())
DSI = b"AuCPace25519"
F = GF(2^255 - 19)
m = hashlib.sha512()
H_block_SHA512 = 128
ZPAD_len = max(0,H_block_SHA512 - len(DSI) - len(password))
ZPAD = ZPAD_len * "\0"
u = littleEndianStringToInteger(m.digest())
u = F(u)
Z = map_to_curve_elligator2_curve25519(u)
OrderSubgroup = 2^252 + 27742317777372353535851937790883648493
SF = GF(OrderSubgroup)
coFactor = SF(8)
scalar = clampScalar25519(scalar_string)
inverse_scalar = 1 /  (SF(scalar) * coFactor)
inverse_scalar_shifted = Integer(inverse_scalar) * 8
m = hashlib.sha512(b"CPace25519-2")
DSI3 = b"AuCPace25-Ta"
DSI4 = b"AuCPace25-Tb"
DSI5 = b"AuCPace25519"
m = hashlib.sha512(DSI3)
Ta = m.digest()
Ta = Ta[:16]

m = hashlib.sha512(DSI4)
Tb = m.digest()
Tb = Tb[:16]

m = hashlib.sha512(DSI5)
SK = m.digest()

U = X25519(Z,r):
IU = inverse_X25519(U)
U = X25519(Z,r):
IU = inverse_X25519(U)
DSI5 = 417543506163653235353139 string ('AuCPace25519') of len(12)
pw   = 70617373776f7264 ('password') string of len(8)
ZPAD = 108 zero bytes
name = 757365726e616d65 ('username') string of len(8)
u = SHA512(DSI||password||ZPAD||username) as 512 bit int:
    0xfec497749d249426e4895e05d0bb4f565aa4423f33d19e6b20aa3837eb77d16e
    <<256
    + 0xb8f5b1b51c1557c088356d7ca09bd78f259f1d5f4041d466f4edd40f041a0bb3

Z = Elligator2(u) as base field element coordinate:
     0x3c01681e4c6d4a43b527c789bcf6046b53ac14c516dfbbbb0f8916826b537f4b

ZQ = X25519(Z,q):
U = X25519(Z,r):
UQ = X25519(U,q):
ZQ = inverse_X25519(Z,r)
