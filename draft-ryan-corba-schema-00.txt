INTERNET-DRAFT                                               V. Ryan
Expires 15 October, 1999                                      R. Lee
                                                         S. Seligman
                                              Sun Microsystems, Inc.
                                                      15 April, 1999

       Schema for Representing CORBA Objects in an LDAP Directory
                    <draft-ryan-corba-schema-00.txt>

Status of this Memo

   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC2026.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet- Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   Copyright (C) The Internet Society (1999). All Rights Reserved.
   Please see the Copyright section near the end of this document for
   more information.


Abstract

   CORBA [CORBA] is the Common Object Request Broker Architecture
   defined by the Object Management Group. This document defines the
   schema for representing CORBA objects in an LDAP directory [LDAPv3].
   It defines schema elements to represent a reference to a CORBA
   object.

1. Introduction

   This document assumes that the reader has a general understanding of
   CORBA.




Ryan, et. al.                                                   [Page 1]





INTERNET-DRAFT          Schema for CORBA Objects                Apr 1999


   Traditionally, LDAP directories have been used to store data. Users
   and programmers think of the directory as a hierarchy of directory
   entries, each containing a set of attributes.  You look up an entry
   from the directory and extract the attribute(s) of interest.  For
   example, you can look up a person's telephone number from the
   directory.  Alternatively, you can search the directory for entries
   with a particular set of attributes.  For example, you can search for
   all persons in the directory with the surname "Smith".

   CORBA applications require access to CORBA objects. Traditionally,
   CORBA applications have used the COS Naming service for storage and
   retrieval of CORBA object references. When deployed in environments
   with a directory, CORBA applications should be able to use the
   directory as a repository for CORBA object references. The directory
   provides a centrally administered, and possibly replicated, service
   for use by CORBA applications distributed across the network.

   For example, an application server may use the directory for
   "registering" CORBA objects representing the services that it
   manages, so that a client can later search the directory to locate
   those services as it needs.

   The motivation for this document is to define a common way for
   applications to store and retrieve CORBA object references from the
   directory.  Using this common schema, any CORBA application that
   needs to read or store CORBA object references in the directory can
   do so in an interoperable way.

2 Representation of CORBA Objects

   This document defines schema elements to represent a CORBA object.
   It is a reference to the object, rather than the object itself, that
   is stored in the LDAP directory. Applications in possession of a
   reference to an object can invoke calls on that object.  Such a
   reference is termed an "interoperable object reference," or IOR.
   Access to CORBA objects by using IORs is achieved transparently to
   the application, by means of the Internet Inter-ORB Protocol.

2.1 Representation of CORBA Object References in the Directory

   A CORBA object is represented in the directory by the object class
   corbaObject. corbaObject is an auxiliary object class, which means
   that it needs to be mixed in with a structural object class.

   The object class corbaContainer represents a directory entry
   dedicated to storing a CORBA object reference. It is a structural
   object class.  corbaContainer is not required in cases where
   corbaObject is mixed in with another structural object class.



Ryan, et. al.                                                   [Page 2]





INTERNET-DRAFT          Schema for CORBA Objects                Apr 1999


   The definitions for the object classes corbaObject and corbaContainer
   are presented in Section 4.

   The corbaObject class has one mandatory attribute (corbaIor) and two
   optional attribute (corbaRepositoryId and description).  corbaIor is
   used to store the object's stringified IOR.  corbaRepositoryId is a
   multivalued attribute that is used to store the repository ids of the
   interfaces implemented by the CORBA object.  description is used to
   store a textual description of a CORBA object.

   corbaIor and corbaRepositoryId are defined in Section 3; description
   is defined in [v3Schema].


3 Attribute Type Definitions

   The following attribute types are defined in this document:


       corbaIor
       corbaRepositoryId



3.1 corbaIor

   This attribute stores the string representation of the interoperable
   object reference (IOR) for a CORBA object. An IOR is an opaque handle
   for the object which contains the information necessary to locate the
   object, even if the object is in another ORB.

   This attribute's syntax is 'Directory String' and its case is
   significant.


       ( 1.3.6.1.4.1.42.2.27.4.1.14
         NAME 'corbaIor'
         DESC 'Stringified interoperable object reference for a CORBA object'
         EQUALITY caseExactMatch
         SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
         SINGLE-VALUE
       )


3.2 corbaRepositoryId

   Each CORBA interface has a unique "repository id" (also called "type
   id") that identifies the interface.  A CORBA object has one or more



Ryan, et. al.                                                   [Page 3]





INTERNET-DRAFT          Schema for CORBA Objects                Apr 1999


   repository ids, one for each interface that it implements (for
   example, as a result of interface inheritance).

   The format of a repository can be any string, but the OMG specifies
   four standard formats:

      a. IDL-style

       IDL:Prefix/ModuleName/InterfaceName:VersionNumber

   For example, the repository id for the "NamingContext" in OMG's COS
   Naming module is:  "IDL:omg.org/CosNaming/NamingContext:1.0".

      b. RMI-style

       RMI:ClassName:HashCode[:SUID]

   This format is used by RMI-IIOP remote objects [RMI-IIOP].
   "ClassName" is the fully qualified name of the class (for example,
   "java.lang.String"). "HashCode" is the object's hash code (that is,
   that obtained by invoking the "hashCode()" method).  "SUID" is the
   "stream unique identifier", which is a 64-bit number that uniquely
   identifies the serialization version of the class; SUID is optional
   in the repository id.

      c. DCE-style

       DCE:UUID

   This format is used for DCE/CORBA interoperability [CORBA-DCE].
   "UUID" represents a DCE UUID.

      d. "local"


   This format is defined by the local Object Request Broker (ORB).

   The corbaRepositoryId attribute is a multivalued attribute; each
   value records a single repository id of an interface implemented by
   the CORBA object identified in corbaIor.  This attribute need not
   contain a complete list of the interfaces implemented by the CORBA
   object.  The only requirement is that the repository ids be those of
   interfaces implemented by the CORBA object identified by the corbaIor
   attribute.

   This attribute's syntax is 'Directory String' and its case is
   significant.




Ryan, et. al.                                                   [Page 4]





INTERNET-DRAFT          Schema for CORBA Objects                Apr 1999



       ( 1.3.6.1.4.1.42.2.27.4.1.15
         NAME 'corbaRepositoryId'
         DESC 'Repository ids of interfaces implemented by a CORBA object'
         EQUALITY caseExactMatch
         SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
       )






4 Object Class Definitions

   The following object classes are defined in this document:


       corbaContainer
       corbaObject


4.1 corbaContainer

   This structural object class represents a container for a CORBA
   object reference.


       ( 1.3.6.1.4.1.42.2.27.4.2.10
         NAME 'corbaContainer'
         DESC 'Container for a CORBA object'
         SUP top
         STRUCTURAL
         MUST ( cn )
       )


4.2 corbaObject

   This auxiliary object class represents a CORBA object reference.  It
   must be mixed in with a structural object class.










Ryan, et. al.                                                   [Page 5]





INTERNET-DRAFT          Schema for CORBA Objects                Apr 1999



       ( 1.3.6.1.4.1.42.2.27.4.2.9
         NAME 'corbaObject'
         DESC 'CORBA object representation'
         SUP top
         AUXILIARY
         MUST ( corbaIor )
         MAY ( corbaRepositoryId description )
       )


5. Security Considerations

   Obtaining a reference to an object and storing it in the directory
   may make a handle to the object available to a wider audience.  This
   may have security implications.

6. Acknowledgements

   We would like to thank Sanjeev Krishnan of Sun Microsystems and Simon
   Nash of IBM  for their comments and suggestions.

7. Copyright

   Copyright (C) The Internet Society (1999). All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the  purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF



Ryan, et. al.                                                   [Page 6]





INTERNET-DRAFT          Schema for CORBA Objects                Apr 1999


   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

8. References

   [CORBA] The Object Management Group, "Common Object Request Broker
   Architecture Specification 2.0," http://www.omg.org

   [CORBA-DCE] Distributed Systems Technology Center and Digital
   Equipment Corporation, "DCE/CORBA Interworking Specification," May
   1998.
   http://www.omg.org/library/schedule/DCE_CORBA_Interworking_RFP.html


   [LDAPv3] M. Wahl, T. Howes, S. Kille, "Lightweight Directory Access
   Protocol (v3)," RFC-2251, December 1997.
   http://www.ietf.org/rfc/rfc2251.txt

   [RMI-IIOP] IBM and Java Software, Sun Microsystems, Inc., "RMI over
   IIOP," February 1999.  http://www.ibm.com/java/jdk/rmi-iiop/
   http://developer.java.sun.com/developer/earlyAccess/rmi-
   iiop/index.html


   [v3Schema] M. Wahl, "A Summary of the X.500(96) User Schema for use
   with LDAPv3," RFC-2256, December 1997.
   http://www.ietf.org/rfc/rfc2256.txt


9. Authors' Addresses

   Rosanna Lee
   Sun Microsystems, Inc.
   Mail Stop UCUP02-206
   901 San Antonio Road
   Palo Alto, CA 94303
   USA
   +1 408 863 3221
   rosanna.lee@eng.sun.com

   Vincent Ryan
   Sun Microsystems, Inc.
   Mail Stop EDUB03
   901 San Antonio Road
   Palo Alto, CA 94303
   USA
   +353 1 819 9151
   vincent.ryan@ireland.sun.com




Ryan, et. al.                                                   [Page 7]





INTERNET-DRAFT          Schema for CORBA Objects                Apr 1999


   Scott Seligman
   Sun Microsystems, Inc.
   Mail Stop UCUP02-209
   901 San Antonio Road
   Palo Alto, CA 94303
   USA
   +1 408 863 3222
   scott.seligman@eng.sun.com


10. Appendix - LDAP Schema

   -- Attribute types --

   ( 1.3.6.1.4.1.42.2.27.4.1.14
     NAME 'corbaIor'
     DESC 'Stringified interoperable object reference for a CORBA object'
     EQUALITY caseExactMatch
     SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
     SINGLE-VALUE
   )

   ( 1.3.6.1.4.1.42.2.27.4.1.15
     NAME 'corbaRepositoryId'
     DESC 'Repository ids of interfaces implemented by a CORBA object'
     EQUALITY caseExactMatch
     SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   )

   -- from RFC-2256 --

   ( 2.5.4.13
     NAME 'description'
     EQUALITY caseIgnoreMatch
     SUBSTR caseIgnoreSubstringsMatch
     SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{1024}
   )

   -- Object classes --

   ( 1.3.6.1.4.1.42.2.27.4.2.9
     NAME 'corbaObject'
     DESC 'CORBA object representation'
     SUP top
     AUXILIARY
     MUST ( corbaIor )
     MAY ( corbaRepositoryId description )
   )



Ryan, et. al.                                                   [Page 8]





INTERNET-DRAFT          Schema for CORBA Objects                Apr 1999


   ( 1.3.6.1.4.1.42.2.27.4.2.10
     NAME 'corbaContainer'
     DESC 'Container for a CORBA object'
     SUP top
     STRUCTURAL
     MUST ( cn )
   )

   -- Matching rule from ISO X.520 --

   ( 2.5.13.5
     NAME 'caseExactMatch'
     SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
   )





































Ryan, et. al.                                                   [Page 9]


