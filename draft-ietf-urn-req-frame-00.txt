
Internet Draft                                          Karen R. Sollins
draft-ietf-urn-req-frame-00.txt                                  MIT/LCS
Expires May 26, 1997                                   November 26, 1996

	Requirements and a Framework for URN Resolution Systems


Status of this draft
     This document is an Internet-Draft.  Internet-Drafts are working
     documents of the Internet Engineering Task Force (IETF), its
     areas, and its working groups.  Note that other groups may also
     distribute working documents as Internet-Drafts.

     Internet-Drafts are draft documents valid for a maximum of six
     months and may be updated, replaced, or obsoleted by other
     documents at any time.  It is inappropriate to use Internet-
     Drafts as reference material or to cite them other than as
     ``work in progress.''

     To learn the current status of any Internet-Draft, please check
     the ``1id-abstracts.txt'' listing contained in the Internet-
     Drafts Shadow Directories on ftp.is.co.za (Africa),
     nic.nordu.net (Europe), munnari.oz.au (Pacific Rim),
     ds.internic.net (US East Coast), or ftp.isi.edu (US West Coast).


Abstract:

This document addresses the issues of the discovery of local URN
resolution services that in turn will directly translate URNs into
URLs and URCs.  The document falls into three major parts, the
assumptions underlying the work, the requirements in order to be a
viable URN-resolution-service discovery service or UDS, and a
framework for designing UDSs.  The requirements fall into three major
areas: evolvability, usability, and security and privacy.  A UDS that
is compliant with the framework will not necessarily be compliant with
the requirements.  Compliance with the requirements will need to be
validated separately.

1. Introduction

The purpose of this document is to lay out the engineering criteria for
what we will call here a URN-resolution-service discovery service (UDS).
__________

Acknowledgments

Foremost acknowledgment for this document goes to Lewis Girod, as my
co-author on a previous URN requirements document and for his insightful
comments on this version of the document.  In addition, I recognize the
contributors to a previous URN framework document, the "Knoxville"
group.  There are too many of you to acknowledge here individually, but
thank you.  Finally, I must thank the contributors to the URN working
group mailing list (urn-ietf@bunyip.com), for their animated discussions
on these and related topics.

URN Resolution Requirements                                      Page  1

This is a component of the realization of an information infrastructure.
In the case of this work, that infrastructure is to be available, "in
the Internet" or globally, and hence the solutions to the problems we
are addressing must globally scalable.  In this work, we are focussing
specifically on naming of resources and resolution of those names to the
exclusion of other problems such as typing, resource access and
availability, security of the resources, etc.  Those are all important
problems, but not part of this effort.

The Uniform Resource Identifier Working Group defined a naming
architecture, as demonstrated in a series of three RFCs 1736[RFC1736],
1737{RFC1737}, and 1738[RFC1738].  Although several further documents
are needed to complete the description of that architecture, it
incorporates three core functions often associated with "naming":
identification, location, and mnemonics or semantics.  Names may provide
the ability to distinguish one resource from another, by distinguishing
their "names".  Names may help to provide access to a resource by
including "location" information.  Lastly, names may have other semantic
or mnemonic information that either helps human users remember or figure
out the names, or include other semantic information about the resource
being named.  The URI working group concluded that there was need for
persistent, globally unique identifiers, distinct from location or other
semantic information; these "names" provide identity, in that if two of
them are "the same" (under some simple rule of canonicalization), they
identify the same resource.  Furthermore, the group decided that these
"names" were generally to be for machine, rather than human consumption.
One can imagine a variety human-friendly naming (HFN) schemes supporting
different suites of applications and user communities.  These will need
to provide mappings to URNs in tighter or looser couplings, depending on
the namespace.  It is these that will be mnemonic, content-full, and
perhaps mutable, to track changes in use and semantics.  They may
provide nicknaming and other aliasing, relative or short names, context
sensitive names, descriptive names, etc.  The URI naming architecture as
described in the introductions to RFCs 1736 and 1737 lays out three
sorts of components to the naming architecture: identifiers called
Uniform Resource Names (URNs), locators called Uniform Resource Locators
(URLs) and semantic meta-information called Uniform Resource
Characteristics (URCs).  This document focusses on part of the problem
of the translation from URN to URL and/or URC.

Within the URI community there has been a concept used frequently that
for lack of a better term we will call a _hint_.  A hint is something
that helps in the resolution of a URN.  Examples of hints are: 1) the
name of a resolution service that may further resolve the URN, 2) the
address of such a service, 3) a location at which the resource was
previously found.  The defining feature of hints is that they are only
hints; they may be out of date, temporarily invalid, or only applicable
within a specific locality.  They do not provide a guarantee of access,
but they probably will help in the resolution process.  Wemust assume
that most resolutions of URNs will be provided by the use of locally
stored hints, because maintaining a database of globally available,
completely up-to-date location information is infeasible for performance
reasons.  There are a number of circumstances in which one can imagine
that hints become invalid, either because a resource has moved or
because a different URN resolution service has taken over the

URN Resolution Requirements                                      Page  2

responsibility for resolution of the URN.  Hints may be found in a
variety of places.  It is generally assumed that a well engineered
system will maintain a set of hints for each URN at each location where
that URN is found.  In addition, for those situations in which those
hints found locally fail, a well-engineered system will provide a
fall-back mechanism for discovering further hints.  It is this fall-back
mechanism, a UDS, that is being addressed in this document.  As with all
hints, there can never be a guarantee that access to a resource will be
available to all clients, even if the resource is accessible to some.
However, a UDS is expected to work with reasonably high reliability,
and, hence, may result in increased response time.  The remainder of
this document falls into three sections.  The first identifies several
sets of assumptions underlying this work.  The next lays out the
requirements for a URN-resolution-service discovery service.  This
section is probably the most critical of the document, because it is
this that provides the metric for whether or not a proposed scheme for a
UDS is adequate or not.  For the reader short on time, each of the three
major subsections of the requirements section concludes with a summary
list of the requirements identified in that section.  The final section
of the document lays out a framework for such UDSs.  The purpose of this
last section is to bound the search space for UDS schemes.  One must be
careful not to assume that because a UDS scheme fits within the
framework that it necessarily meets the requirements.  As will be
discussed further in this last section, designing within the framework
does not guarantee compliance, so compliance evaluation must also be
part of the process of evaluation of a scheme.

2. Assumptions

Based on previous internet drafts and discussion in both the URN BOFs
and on the URN WG mailing list, three major areas of assumptions are
apparent: longevity, delegation, and independence.  Each will be
discussed separately.

The URN requirements state that a URN is to be a "persistent
identifier".  It is probably the case that nothing will last forever,
but in the time frame of resources, users of those resources, and the
systems to support the resources, the identifier should be considered to
be persistent or have a longer lifetime than those other entities.
There are two assumptions that are implied by longevity of URNs:
mobility and evolution.  "Mobility" assumes that.  everything will move
over the life of a URN.  For example, resources will move from one
machine to another, because individual machines have a much shorter
lifetime than resources, generally measured in a number of years less
than a decade.  Owners of resources may move and wish their resources to
follow them.  The services themselves will move.  "Evolutions" assumes
that the supporting infrastructure will evolve.  This may take the form
of entirely new transport protocols or new versions of existing
protocols.  Furthermore, services such as storage services may evolve;
it is even possible that within a human lifetime the Unix file system
model may no longer be in use!  Clearly there will be evolution of and
improvement in supporting authentication and security mechanisms.  These
are only examples.  In general, we must assume that almost any piece of
the supporting infrastructure of URN resolution will evolve.  In order
to deal with both the mobility and evolution assumptions that derive

URN Resolution Requirements                                      Page  3

from the assumption of longevity, we must assume that users and their
applications can remain independent of these mutating details of the
supporting infrastructure.

The second and third assumptions are two forms of modularity, delegation
and isolation.  The delegation assumption is that an entity may
partition and pass off some of its authority or responsibility.  One of
those responsibilities is for assigning URNs; practically speaking,
there cannot be only a single authority for assigning URNs.  We expect
that there will be a multi-tiered naming authority delegation.
Furthermore, it is difficult to imagine a non-partitioned and delegated
global UDS, meaning that hint discovery and resolution will be
partitioned and delegated.  In some UDS schemes, the delegation of
naming authority will form a basis for delegating the management and
dispensing of location information.

The third assumption is independence or isolation of one authority from
another and, at least to some extent from its parent.  Underlying much
of the thinking and discussion in the URI and URN working groups has
been the assumption that when a component delegates authority to another
component, the delegatee can operate in that domain independently of its
peers and within bounds specified by the delegation, independently of
the delegator.  This isolation is critically important in order to allow
for independence of policy and mechanism.

There are a number of more specific assumptions that fall under this
rubric of isolation.  First, we assume that the publisher of a resource
can choose resolution services, independently of choices made by others.
At any given time, the owner of a namespace may choose a particular URN
resolution service for that delegated namespace.  Such a URN resolution
service may be outside the UDS service model, and just identified or
located by the UDS service.  Second, it must be possible to make a
choice among UDS services, perhaps based on different underlying
internal architectures.  The reason that this is an assumption is that
there must be an evolutionary path through a sequence of core UDS
services.  Although at any given time there is likely to be only one or
a small set of such services, the number is likely to increase during a
transition period from one architecture to another.  Thus, it must be
assumed that clients can make a choice among a probably very small set
of UDSs.  Third, there must be independence in the choice about levels
and models of security and authenticity required.  This choice may be
made by the owner of a naming subspace, in controlling who can modify
hints in that subspace.  A naming authority may delegate this choice to
the owners of the resources named by the names it has assigned.  There
may be limitations on this freedom of choice in order to allow other
participants to have the level of security and authenticity they
require, for example, in order to maintain the integrity of the UDS
infrastructure as a whole.  Fourth, there is an assumption of
independence of choice of the rule of canonicalization of URNs within a
namespace, limited by any restrictions or constraints that may have been
set by its parent namespace.  This is a choice held by naming
authorities over their own subnamespaces.  Rules for canonicalization
will be discussed further in the framework section below.  Thus, there
are assumptions of independence and isolation to allow for delegated,
independent authority in a variety of domains.

URN Resolution Requirements                                      Page  4

The modularity assumptions of delegation and isolation imply
independence of decision and implementation, leading to a
decentralization that provides a certain degree of safety from denial of
service.  Based on these these assumptions in conjunction with that of
longevity and those for URLs and URNs as detailed in RFCs 1736 and 1737,
we can now turn to the requirements for a URN services delegation
service.

3. Requirements

The requirements applying to a URN-resolution-service discovery service
or UDS center around three important design goals: evolvability,
usability, and security and privacy.  At its core the function of a UDS
is to provide hints for accessing a resource given a URN for it.  These
hints may range in applicability from local to global, and from
short-lived to long-lived.  They also may vary in their degree of
verifiable authenticity.  While it may be neither feasible nor necessary
that initial implementations support every requirement, every
implementation must support evolution to systems that do support every
requirement.

It is also important to note that there are other requirements, not
applicable specifically to a UDS that must also be met.  A whole URN
system will consist of namespaces, the resolution information for them,
and the mapping from names in the namespaces to resolution information
(or hints).  URN schemes must meet the requirements of RFC 1737.
Resolution information, to the extent it is expressed as URLs must meet
the requirements of RFC 1736.  But this does not tell the whole story.
Although the URN working group will identify several acceptable
namespaces and the rules binding them, such as how delegation occurs,
how it is expressed in the names, how and to what extent binding to hint
information will be constrained by the namespace, in the long run a
document will be needed to guide the evaluation criteria for acceptance
of new namespaces.  These are not included in the list of requirements
below because they are not requirements for a UDS, but rather for naming
schemes themselves.

3.1 Evolution

One of the lessons of the Internet that we must incorporate into the
development of mechanisms for resolving URNs is that we must be prepared
for change.  Such changes may happen slowly enough to be considered
evolutionary modifications of existing services or dramatically enough
to be considered revolutionary.  They may permeate the Internet universe
bit by bit, living side by side with earlier services or they may take
the Internet by storm, causing an apparent complete transformation over
a short period of time.  There are several directions in which we can
predict the need for evolution, even at this time, prior to the
deployment of any such service.  At the very least, the community and
the mechanisms proposed should be prepared for these.

First, we expect there to be additions and changes to the mechanisms.
The community already understands that there must be a capacity for new
URN schemes.  A URN scheme will define a set of URNs that meet the URN
requirements[RFC1737], but may have further constraints on the internal

URN Resolution Requirements                                      Page  5

structure of the URN.  The requirements document would allow for an
overall plan in which URN schemes are free to specify parts of the URN
that are left opaque in the larger picture.  In fact, a URN scheme may
choose to make public the algorithms for any such "opaque" part of the
URN.  For example, although it may be unnecessary to know the structure
of an ISBN, the algorithm for understanding the structure of an ISBN has
been made public.  Other schemes may either choose not to make their
algorithms public, or choose a scheme in which knowledge of the scheme
does not provide any significant semantics to the user.  In any case, we
must be prepared for a growing number of URN schemes.

Often in conjunction with a new URN scheme, but possibly independently
of any particular URN scheme, new resolution services may evolve.  For
example, one can imagine a specialized resolution service based on the
particular structure of ISBNs that improves the efficiency of finding
documents given their ISBNs.  Alternatively, one can also imagine a
general purpose resolution service that trades performance for
generality; although it exhibits only average performance resolving
ISBNs, it makes up for this weakness by understanding all existing URN
schemes, so that its clients can use the same service to resolve URNs
regardless of naming scheme.  In this context, there will always be room
for improvement of services, through improved performance, better
adaptability to new URN schemes, or lower cost.  In any case, new models
for URN resolution will evolve and we must be prepared to allow for
their participation in the overall resolution of URNs.

If we begin with one overall plan for URN resolution, into which the
enhancements described above may fit, we must also be prepared for an
evolution in the authentication schemes that will be considered either
useful or necessary in the future.  There is no single globally accepted
authentication scheme, and there may never be one.  Even if one does
exist at some point in time, there will always be threats to it, and so
we must always be prepared to move on to newer and better schemes, as
the old ones become too easily spoofed or guessed.

Lastly, in terms of mechanism, although we may develop and deploy a
single UDS scheme initially, we must be prepared for that top level
model to evolve.  Thus, if the UDS model supports an apparently
centralized (from a policy standpoint) scheme for inserting and
modifying authoritative information, over time we must be prepared to
evolve to a different model, perhaps one that has a more distributed
model of authority and authenticity.  If the model has no core but
rather a cascaded partial discovery of information, we may find that
this becomes unmanageable with an increase in scaling.  Whatever the
core of the model, we must be prepared for it to evolve with changes in
scaling, performance, and policy constraints such as security and cost.

Second, in addition to the evolution of resolution mechanisms, we expect
that the community will follow an evolutionary path towards the
separation of semantics from identification.  The URN requirements
document suggested this path as well, and there has been general
agreement in much of the community that such a separation is desirable.
This is a problem that the public at large has generally not understood.
Today we see the problem most clearly with the use of URLs for
identification.  When a web page moves, its URL becomes invalid.

URN Resolution Requirements                                      Page  6

Suppose such a URL is embedded in some page, stored in long term
storage.  There are three possible outcomes to this scenario.  One
possibility is that the client is left high and dry with some message
saying that the page cannot be found.  Alternatively, a "forwarding
pointer" may be left behind, in the form of an explicit page requesting
the client to click on a new URL.  Although this will allow the client
to find the intended page, the broken link cannot be fixed because the
URL is embedded in a file outside of the client's control.  A third
alternative is that the target server supplies an HTTP redirect so that
the new page is provided for the client automatically.  In this case,
the client may not even realize that the URL is no longer correct.  The
real problem with both of these latter two situations is that they only
work as long as the forwarding pointer can be found at the old URL.
Semantics, in this case location information, was embedded in the
identifier, and the resolution system was designed to depend on the
semantics being correct.  There are few cases in which we can expect
semantics of any sort to remain valid for a long time, but in many cases
references need to have long lifespans.  Most documents are only useful
while their references still function.

We expect the evolution to separation of semantics from identification
to move along at least three paths.  The first will be to develop
temporary aliases to capture the semantics currently embedded in
identifiers.  This will require additional translation, but it will
allow for the development of semantics-free URNs.  Second, we expect
locally shared or private aliases to arise, again supported by a
translation mechanism and allowing for the long-term storage of global,
semantics-free URNs.  Such an aliasing scheme may be used to permit
local aliases for named resources as well as to present these aliases to
users in lieu of the URNs themselves.  Lastly, we expect there may be a
development of global aliases.  These will be more user friendly "names"
that would be shared on a much larger scale, and might be defined in
some global registry.  This may include trademarked names as well as
names in extremely common use.  As with the other alias systems, a
facility for translation is needed.  However, in this case, since the
system of aliases is of global scope, the translation facility will be
very slow if each time an alias is translated it needs to query a
centralized or even reasonably distributed global registry.  In order to
achieve acceptable speeds, the translation facility will need to
maintain a local cache, possibly in cooperation with other nearby alias
caches.  Clearly this is all postulation at present, but it is provided
here to demonstrate some of the scope of evolution for which we must be
prepared.

A third evolutionary requirement is even more mechanical than the
others.  At any point in time, the community is likely to be supporting
a compromise position with respect to resolution.  We will probably be
operating in a situation balanced between feasibility and the ideal,
perhaps with policy controls used to help stabilize the service.
Ideally, the service would be providing exactly what the customers
wanted and they in turn would not request more support than they need.
Since we will always be in a situation in which some service provision
resources will be in short supply, some form of policy controls will
always be necessary.  For example, suppose hint entries are being
submitted in such volume that the hint servers are using up their excess

URN Resolution Requirements                                      Page  7

capacity and need more disk space.  An effective solution to this
problem would be a mechanism such as a pricing policy.  This pricing
policy has the dual effect of both encouraging conservative use of
resources and collecting revenue for the improvement and maintenance of
the system.  As technology changes and the balance of which resources
are in short supply changes, the mechanisms and policies for controlling
their use must evolve as well.

In summary, the requirements in the area of evolvability are:

   * To support evolution of mechanisms, specifically for
      a) a growing set of URN schemes;
      b) new local URN resolution schemes;
      c) new authentication schemes;
      d) alternative UDS schemes active simultaneously;
   * To support and encourage the evolution toward the separation of
     global identification from short-lived, locally useful, or human
     friendly semantics;
   * To support the development and deployment of pricing models to
     manage human behavior with respect to limited resources.

3.2 Usability and Feature Set Requirements

Usability can be evaluated from three distinct perspectives: those of a
publisher wishing to make a piece of information public, those of a
client requesting URN resolution, and those of the provider or manager
of resolution information.  We will separately address the usability
requirements from each of these three perspectives.

It is worth noting that there are two additional sorts of participants
in the whole naming process, as discussed in the URN WG.  They are the
naming authorities which choose and assign names, and the authors who
include URNs in their resources.  These two are not relevant to the
design of a UDS and hence are not discussed further here.

3.2.1 The Publisher

The publisher must be able to make URNs known to potential customers.
From the perspective of a publisher, it is of primary importance that
URNs be correctly and efficiently resolvable by potential clients.
Publishers also stand to gain from long-lived URNs, since they increase
the chance that references continue to point to their published
resources.  The publisher must also be able to choose easily among a
variety of potential services that might translate URNs to location
information.  In order to allow for this mobility among resolution
services, the architecture for resolution services specified within the
IETF should not result in a scenario in which changing from one
resolution service to another is an expensive operation.

The publisher should be able to arrange for multiple access points to a
published resource.  For this to be useful, resolution services should
be prepared to provide different resolution or hint information to
different clients, based on a variety of information including location
and the various access privileges the client might have.  For example,
companies might arrange for locally replicated copies of popular

URN Resolution Requirements                                      Page  8

resources, and would like to provide access to the local copies only for
their own employees.  This is distinct from access control on the
resource as a whole, and may be applied differently to different copies.

The publisher should be able to provide both long and short term
information about accessing the resource.  Long term information is
likely to be such information as the long term location of the resource
or the location or identity of a resolution service with which the
publisher has a long term relationship.  One can imagine that the
arrangement with such a long term "authoritative" resolution service
might be a guarantee of reliability, resiliency to failure, and atomic
updates.  Shorter term information is useful for short term changes in
services or to avoid short lived congestion or failure problems.  For
example, if the actual repository of the resource is temporarily
inaccessible, the resource might be made available from another
repository.  This short term information can be viewed as temporary
refinements of the longer term information, and as such should be more
easily and quickly made available, but may be less reliable.

Lastly, the publishers will be the source of much hint information that
will be stored and served by the manager of the infrastructure.  Despite
the fact that many publishers will not understand the details of the UDS
mechanism, it must be easy and straightforward to install hint
information.  The publisher must be able not only to express hints, but
also to verify that what is being served by the manager is correct.
Furthermore, to the extent that there are security constraints on hint
information, the publisher must be able to both express them and verify
compliance to them easily.

3.2.2 The Client

From the perspective of the client, simplicity and usability are
paramount.  Of critical importance to serving clients effectively is
that there be an efficient protocol through which the client can acquire
hint information.  Since resolving the name is only the first step on
the way to getting access to a resource, the amount of time spent on it
must be minimized.

Furthermore, it will be important to be able to build simple, standard
interfaces to the UDS so that both the client and applications on the
client's behalf can interpret hints and subsequently make informed
choices.  The client, perhaps with the assistance of the application,
must be able to specify preferences and priorities and then apply them.
If the ordering of hints is only partial, the client may become directly
involved in the choice and interpretation of them and hence they must be
understandable to that client.  On the other hand, in general it should
be possible to configure default preferences, with individual
preferences viewed as overriding any defaults.

From the client's perspective, although URNs will provide important
functionality, the client is most likely to interact directly only with
human friendly names (HFNs).  As in direct human interaction (not
computer mediated), the sharing of names will be on a small,private, or
domain specific scale.  HFNs will be the sorts of references and names
that are easy to remember, type, choose among, assign, etc.  There will

URN Resolution Requirements                                      Page  9

also need to be a number of mechanisms for mapping HFNs to URNs.  Such
services as "yellow pages" or "search tools" fall into this category.
Although we are mentioning HFNs here, it is important to recognize that
HFNs and the mappings from HFNs to URNs is and must remain a separate
functionality from a UDS.  Hence, although HFNs will be critical to
clients, they do not fall into the domain of this document.

3.2.3 The Management

Finally, we must address the usability concerns with respect to the
management of the hint infrastructure itself.  What we are terming
"management" is a service that is distinct from publishing; it is the
core of a UDS.  It involves the storage and provision of hints to the
clients, so that they can find published resources.  It also provides
security to the extent that there is a commitment for provision of such
security; this is addressed below.

The management of hints must be as unobtrusive as possible. First, its
infrastructure (hint storage servers and distribution protocols) should
have as little impact as possible on other network activities.  It must
be remembered that this is an auxiliary activity and must remain in the
background.

Second, in order to make hint management feasible, there will need to be
a system for economic incentives and disincentives.  Recovering the cost
of running the system is only one reason for levying charges.  The
introduction of payments often has a beneficial impact on social
behavior.  It may be necessary to discourage certain forms of behavior
that when out of control have serious negative impact on the whole
community.  At the same time, payment policies should encourage behavior
that benefits the community as a whole.  Thus, for example, a small
one-time charge for authoritatively storing a hint will encourage
conservative use of hints.  If we assume that there is a fixed cost for
managing a hint, then the broader its applicability across the URN
space, the more cost effective it is.  That is, when one hint can serve
for a whole collection of URNs, there will be an incentive to submit one
general hint over a large number of more specific hints.  Similar
policies can be instituted to discourage the frequent changing of hints.
In these ways and others, cost effective behavior can be encouraged.

Lastly, symmetric to issues of usability for publishers, it must also be
simple for the management to configure the mapping of URNs to hints.  It
must be easy both to understand the configuration and to verify that
configuration is correct.  With respect to management, this requirement
may have an impact not only on the information itself but also on how it
is partitioned among network servers that collaboratively provide the
management service or UDS.  For example, it should be straightforward to
bring up a server and verify that the data it is managing is correct.
Since we are discussing a global and probably growing service,
encouraging volunteer participants requires that, as with the DNS, such
volunteers can feel confident about the service they are providing and
its benefit to both themselves and the rest of the community.


URN Resolution Requirements                                      Page 10

To summarize, the usability requirements fall into three areas based on
participation in hint management and discovery:

   * The publisher
      a) URN to hint resolution must be correct and efficient;
      b) Publishers must be able to select among URN resolution
         services to locate their resources;
      c) Publishers must be able to arrange for multiple access points
         for their location information;
      d) Publishers must be able to provide for both long-lived and
         short-lived hints;
      e) It must be relatively easy for publishers to install and
         observer their hint information and any security constraints
         they need for their hints.
   * The client
      a) The interface to the UDS must be simple, effective, and
         efficient;
      b) The client and client applications must be able to understand
         the information stored in and provided by the UDS, in order
         to be able to make informed choices.
   * The management
      a) The management of hints must be as unobtrusive as possible,
         avoiding using too many network resources;
      b) A pricing scheme may be necessary to provide not only cost
         recovery, but also social incentives and disincentives to
         encourage certain sorts of behavior deemed necessary to meet
         other requirements;
      c) The configuration and verification of configuration of
         individual UDS servers must be simple enough not to
         discourage configuration and verification.

3.3 Security and Privacy Requirements

Although much of the information we are discussing in this document
might be considered "meta-information", there are some important
security and privacy concerns that must be addressed by a service
supporting that information.  By first considering the sorts of attacks
that are of concern, we can then focus on the security and privacy
issues that are important.  The reader will notice that integrity plays
less of a role here than might be expected.  To the extent that servers
provide access control, the information they manage will have certain
integrity guarantees.  Beyond that we must recognize that we are dealing
merely with hint information about the location of possibly interesting
resources.  Therefore we believe that the benefit of providing integrity
guarantees beyond those provided by the servers themselves does not
outweigh the cost.

Because the majority of the activity will be the distribution of hint
information, the threats of concern are those affecting the maintenance
of correct information to distribute and the availability of the sources
of information.  The first approach to URN resolution is to discover
local hints.  By being local, they will be as widely distributed as
possible.  The drawback of such wide distribution is the inability to
update them; therefore, they will become out of date with time.  An
alternative or backup mechanism would concentrate hint information in

URN Resolution Requirements                                      Page 11

servers, thus requiring that update information only be distributed to
these servers.  Hence the vulnerable points are the sources of the
information and the distribution network among them.  If one assumes
that there will be principals of some sort that are responsible for the
information about each URN entry in the URN resolution service, then one
major threat is an attacker that masquerades as a valid principal and
inserts incorrect information into the service.  A second threat vector
results from the fact that the service itself will be implemented by a
set of servers that collaborate and share the hint information critical
to their activities.  By masquerading as a valid server in this pool, an
attacker can both provide incorrect information to clients and provide
incorrect information to other servers, which those servers will then
distribute.  A third threat is that if the resolution service is too
centralized, service can be denied by a variety of network attacks
ranging from flooding the service with queries to causing various
network problems that will reduce access to the service.  The more
centralized a service is the more vulnerable is the community that
trusts it not to be compromised.  We can turn each of these into a
security goal.

* ACCESS CONTROL ON HINTS: There needs to be an authoritative version of
  each hint, and it must support change control limited only to those
  principals with the right to modify it.  The choice of who those
  principals are or whether they are unlimited must be made by the
  publisher of a hint. 

* SERVER AUTHENTICITY: Servers and clients must be able to learn the
  identity of the servers with which they communicate.  This will be a
  matter of degree and it is possible that there will be more
  trustworthy, but less accessible servers, supported by a larger
  cluster of less authenticatable servers that are more widely
  available.  In the worst case, if the client receives what appears to
  be invalid information, the client should assume that the hint may be
  inaccurate and confirmation of the data should be sought from more
  reliable but less accessible data.

* SERVER DISTRIBUTION: Broad availability will provide resistance to
  denial of service.  It is only to the extent that the services are
  available that they provide any degree of trustworthiness.  In
  addition, the distribution of services will reduce to vulnerability
  of the whole community, by reducing the trust put in any single
  server.  This must be mitigated by the fact that to the extent trust
  is based on a linked set of servers, if any one fails, the whole
  chain of trust fails; the more elements there are in such a chain,
  the more vulnerable it may become.


_Ensuring_ privacy for clients and publishers is in some respects
essentially impossible.  Fortunately, assuring a reasonable degree of
privacy for those who want it is possible.  The privacy of clients is
primarily threatened by packet sniffers and servers that log requests.
A server or a packet sniffer can without much difficulty record the
contents of queries as they pass by and compile the information into a
relation between URNs and clients.  This can be combatted by anonymizing
queries through a trusted, fairly local gateway, although it involves an

URN Resolution Requirements                                      Page 12

extra step and another potential bottleneck.  The additional step can be
mitigated by caching responses in the gateway, thus often avoiding the
need to forward requests beyond it.  A second alternative is to send
only partial queries.  As will be discussed further in the framework
section, there may be two reasons for transformation of a URN, first to
canonicalize it and second to extract the identity of another server to
which to send a further request.  This second alternative of sending
partial queries would be achieved by also extracting some partial URN to
further resolve at each stage.  This would not anonymize the queries,
but might make them more difficult to chain together into a complete
story for logging.

On the other hand, to the degree that the search process is distributed,
packet sniffing at a single point is less likely to reveal data about a
specific person, and is hence less threatening to privacy.  Furthermore,
if clients have flexibility in terms of the specific services they
choose to use, they can regularly switch services in the hopes of
foiling a packet sniffer watching their usual access point.

The privacy of publishers is much easier to safeguard.  Since they are
trying to publish something, in some situations privacy is probably not
desired.  However, publishers do have information that they might like
to keep private: information about who their clients are, and
information about what names exist in their namespace.  The information
about who their clients are may be difficult to collect depending on the
implementation of the resolution system.  For example, if the resolution
information relating to a given publisher is widely replicated, the hits
to _each_ replicated copy will need to be recorded.  Of course,
determining if a specific client is requesting a given name can be
approached from the other direction, by watching the client as we saw
above.

The other privacy issue for publishers has to do with access control
over URN resolution.  This issue is dependent on the implementation of
the publisher's authoritative URN resolution server.  URN resolution
servers can be designed to require proof of identity in order to be
issued resolution information; if the client does not have permission to
access the URN requested, the service denies that such a URN exists.  An
encrypted protocol can also be used so that both the request and the
response are obscured.  Encryption is possible in this case because the
identity of the final recipient is known (i.e. the URN server).

In summary, security and privacy requirements can be identified as some
degree of protection from threats:

   * It must be possible to create authoritative versions of a hint
     with access to modification privileges controlled;
   * It must be possible to determine the identity of servers or avoid
     contact with unauthenticated servers;
   * Broad availability of servers will reduce the thread to denial
     of service;
   * Client privacy is threatened by packet sniffing and server
     logging.  It is desirable to reduce these threats as much as
     possible;
   * It should be feasible for publishers to keep private certain

URN Resolution Requirements                                      Page 13

     information such as an overall picture of the resources they are
     publishing and the identity of their clients;
   * Publishers should be able to restrict access to the resolution of
     the URNs for the resources they publish, if they wish.

4. The Framework

With these assumptions and requirements in mind, one can conclude with a
general framework within which UDS designs will fall.  As stated
earlier, although this framework is put forth as a suggested guide for
UDS designers, compliance with it will in no way guarantee compliance
with the requirements.  Such an evaluation must be performed separately.
It is also understood that there may be UDS services that do not meet
the requirements in clearly identified ways.  This may be true
especially with early plans and experiments.  For example, although a
careful threat analysis may have been done to understand security
requirements, not all those security requirements may be addressed, in
order to use existing facilities to allow for early deployment for
experimentation purposes.  All such lack of compliance should be clearly
documented.

The design of the framework is based on a simple assumption about the
syntax of a URN.  This assumed syntax is:

	URN:<NID>:<NSS>

where URN: is a prefix on all URNs, NID is the namespace identifier, and
NSS is the namespace specific string.  The prefix identifies each URN as
such.  The NID determines the general syntax for all URNs within its
namespace.  The NSS is probably partitioned into a set of delegated and
subdelegated namespaces, and this is probably reflected in further
syntax specifications.  In the more complex environments, each delegated
namespace will be permitted to choose the syntax of the variable part of
the namespace that has been delegated to it.  In simpler namespaces, the
syntax will be restricted completely by the parent namespace.  For
example, although the DNS does not meet all the requirements for URNs,
it has a completely restricted syntax, such that any further structuring
must be done only by adding further refinements to the left, maintaining
the high order to low order, right to left structure.  A delegated
syntax might be one in which a host is named by the DNS, but to the
right of that and separated by an "@" is a string whose internal
ordering is defined by the file system on the host, which may be defined
high order to low order, left to right.  Of course, much more complex
and nested syntaxes should be possible, especially given the need to
grandfather namespaces.  In order to resolve URNs, rules will be needed
for two reasons.  One is simply to canonicalize those namespaces that do
not fall into a straightforward (probably right to left or left to
right) ordering of the components of a URN, as determined by the
delegated naming authorities involved.  It is also possible that rules
will be needed in order to derive from URNs the names of UDS servers to
be used in stages.

The NID defines a top level syntax.  This syntax will determine whether
the NID alone or in conjunction with some extraction from the NSS (for
the top level naming authority name) to identify the first level server

URN Resolution Requirements                                      Page 14

to be contacted.  Each stage of the lookup either a new rule for
generating the strings used in yet another lookup (the strings being the
identify of another UDS server and possibly a string to be resolved if
it is different than the original URN) or a reference outside the UDS to
a private URN resolution service, sidestepping any furthere use of the
UDS scheme.  Figure 1 depicts this process.


                            URN:<NID><NSS>
                                 |
                                 |
                                 |
                                 |
                                 v
                       +-------------------+
                       |Global NID registry|
                       +-------------------+
                                 |
       	       	       	       	 |
                                 |
              (return rule or URN resolution service reference)
                                 |
                                 +----------------------------------+
                                 |                                  |
                       +->(apply rule to determine UDS server)	    |
		       |         |				    |
		       |         |				    |
		       |         |				    |
                       |    +----------+			    |
                       |    |UDS server|	  +-----------------+
                       |    +----------+	  |
                       |      |	  |		  v
 		       |      |	  |   (set of choices)
 		       |      |	  +----+----------(...)--------+
                       |   (rule)      |                       |
                       |      |	       |		       |
 		       |      |	       |		       |
 		       +------+	       |		       |
 			      	       v		       v
 				  +----------+		  +----------+
 				  |private   |		  |private   |
                                  |URN	     |            |URN	     |
                                  |resolution|		  |resolution|
                                  |service   |		  |service   |
 				  +----------+		  +----------+



        Figure 1: A UDS framework


There are several points worth noting about the UDS framework.  First,
it leaves open the determination of the protocols and data organization,
distribution and replication needed to support a particular UDS scheme.
Second, it leaves open the location of the computations engendered by

URN Resolution Requirements                                      Page 15

the rules.  Third, it leaves open the possibility that partitioning
(distribution) of the UDS database need not be on the same boundaries as
the name delegation.  This may seem radical to some, but if the
information is stored in balanced B-trees for example, the partitioning
may not be along those naming authority delegation boundaries.  Lastly,
it leaves open access to the Global NID Registry.  Is this distributed
to every client, or managed in widely distributed servers?  One concept
that has not been addressed in Figure 1 is that there may be more than
one UDS available at any given time, in order to allow for evolution to
new schemes.  Thus, the picture should probably look more like Figure 2.


                         URN:<NID>:<NSS>
                               |
        		       |
		   +-----------+-------(...)-------+
		   |				   |
		   |				   |
		   |				   |
		   v				   v
	 +---------------------+	+---------------------+
	 |Global NID registry 1|        |Global NID registry N|
	 +---------------------+        +---------------------+
                   .                               .
                   .                               .
                   .                               .


        Figure 2: More than one co-existing UDS scheme


If we are to support more than one co-existing UDS scheme, there will
need to be coordination between them with respect to storage and
propagation of information and modifications.  The issue is that
generally it should be assumed that all information should be available
through any operational UDS scheme.  One cannot expect potential
publishers to submit updates to N UDS schemes.  Hence there will need to
be a straightforward mapping of information from one to the other of
these schemes.  It is possible that that transformation will only go in
one direction, because a newer UDS service is replacing an older one,
which is not kept up to date, in order to encourage transfer to the
newer one.  Thus, at some point, updates may be made only to the newer
one and not be made available to the older one.  Such a situation should
probably be avoided, if possible.

This framework is presented in order to suggest to UDS scheme designers
a direction in which to start designing.  It is obvious to the reader
that adherence to this framework will in no way guarantee compliance
with the requirements or even assumption described in Sections 2 and 3.
These must be reviewed independently as part of the design process.
There is no single correct design that will meet these requirements.
Furthermore, it is assumed that preliminary proposals may not meet all
the requirements, but should be expected to itemized and justify any
lack of compliance.


URN Resolution Requirements                                      Page 16

5. References

[RFC1736] Kunze, J., "Functional Recommendations for Internet Resource
Locators", RFC 1736, February, 1995.

[RFC1737] Sollins, K. and Masinter, L., "Functional Requirements for
Uniform Resource Names", RFC 1738, December, 1994.

[RFC1738] Berners-Lee, T., Masinter, L., McCahill, M., "Uniform
Resource Locators (URL)", RFC 1738, December, 1994.


6. Contact information:

Karen Sollins
MIT Laboratory for Computer Science
545 Technology Sq.
Cambridge, MA 02139

Tel: +1 617 253 6006
Email: sollins@lcs.mit.edu

This InternetDraft expires on May 26, 1997.


































URN Resolution Requirements                                      Page 17
