PS = 0 indicates 4-bit XI fields;
PS = 1 indicates 8-bit XI fields.

PS = 0: | X |   Index   |
                 +---+---+---+---+

                   0   1   2   3   4   5   6   7
                 +---+---+---+---+---+---+---+---+
PS = 1: | X | Reserved  |     Index     |
                 +---+---+---+---+---+---+---+---+

X = 1 indicates that the item corresponding to the Index is
X = 0 indicates that the item corresponding to the Index is
unscaled_value = scaling_factor * scaled_value + residue

IP_ID_BEHAVIOR_SEQUENTIAL = 0;
IP_ID_BEHAVIOR_SEQUENTIAL_SWAPPED = 1;
IP_ID_BEHAVIOR_RANDOM = 2;
IP_ID_BEHAVIOR_ZERO = 3;

field =:= irregular(width) [ width ];
field =:= static [ 0 ];
field =:= irregular(width) [ width ];
field =:= uncompressed_value(width, 0) [ 0 ];
field =:= static [ 0 ];
field =:= lsb(8, 63) [ 8 ];
field =:= lsb(16, 16383) [ 16 ];
field =:= irregular(32) [ 32 ];
item =:= irregular(32) [ 32 ];
item =:= compressed_value(0, 0) [ 0 ];
discriminator =:= '0'       [ 1 ];
item          =:= lsb(7, 8) [ 7 ];
discriminator =:= '1'          [ 1 ];
item          =:= lsb(31, 256) [ 31 ];
item =:= lsb_7_or_31 [ 8, 32 ];
item =:= compressed_value(0, 0) [ 0 ];
crc_value =:=
       crc(3, 0x06, 0x07, data_value, data_length) [ 3 ];
crc_value =:=
       crc(7, 0x79, 0x7f, data_value, data_length) [ 7 ];
length      =:= static;
next_header =:= static;
value       =:= static;
next_header =:= irregular(8) [ 8 ];
length      =:= irregular(8) [ 8 ];
value =:=
       irregular(length.UVALUE * 64 + 48) [ length.UVALUE * 64 + 48 ];
discriminator =:= '00000000' [ 8 ];
discriminator =:= '10000000'                     [ 8 ];
length        =:= irregular(8)                   [ 8 ];
value         =:=
       irregular(length.UVALUE*64+48) [ length.UVALUE * 64 + 48 ];
length      =:= static;
next_header =:= static;
value       =:= static;
next_header =:= irregular(8) [ 8 ];
length      =:= irregular(8) [ 8 ];
value =:=
       irregular(length.UVALUE*64+48) [ length.UVALUE * 64 + 48 ];
discriminator =:= '00000000' [ 8 ];
discriminator =:= '10000000'                     [ 8 ];
length        =:= irregular(8)                   [ 8 ];
value         =:=
       irregular(length.UVALUE*64+48) [ length.UVALUE * 64 + 48 ];
length      =:= static;
next_header =:= static;
value       =:= static;
next_header =:= irregular(8)                   [ 8 ];
length      =:= irregular(8)                   [ 8 ];
value       =:=
       irregular(length.UVALUE*64+48) [ length.UVALUE * 64 + 48 ];
discriminator =:= '00000000' [ 8 ];
discriminator =:= '10000000'                     [ 8 ];
length        =:= irregular(8)                   [ 8 ];
value         =:=
       irregular(length.UVALUE*64+48) [ length.UVALUE * 64 + 48 ];
value     =:= irregular(16)             [ 16 ];
reserved1 =:= uncompressed_value(16, 0) [ 0 ];
value     =:= compressed_value(0, 0) [ 0 ];
reserved1 =:= compressed_value(0, 0) [ 0 ];
discriminator =:= compressed_value(1, 0)         [ 1 ];
protocol      =:= uncompressed_value(16, 0x0800) [ 0 ];
discriminator =:= compressed_value(1, 1)         [ 1 ];
protocol      =:= uncompressed_value(16, 0x86DD) [ 0 ];
r_flag    =:= uncompressed_value(1, 0) [ 1 ];
reserved0 =:= uncompressed_value(9, 0) [ 9 ];
version   =:= uncompressed_value(3, 0) [ 3 ];
c_flag           =:= static;
k_flag           =:= static;
s_flag           =:= static;
protocol         =:= static;
key              =:= static;
sequence_number  =:= static;
protocol =:= gre_proto                 [ 1 ];
c_flag   =:= irregular(1)              [ 1 ];
k_flag   =:= irregular(1)              [ 1 ];
s_flag   =:= irregular(1)              [ 1 ];
padding  =:= compressed_value(4, 0)    [ 4 ];
key      =:= optional32(k_flag.UVALUE) [ 0, 32 ];
checksum_and_res =:=
       optional_checksum(c_flag.UVALUE)             [ 0, 16 ];
sequence_number  =:= optional32(s_flag.UVALUE) [ 0, 32 ];
discriminator    =:= '00000000'    [ 8 ];
checksum_and_res =:=
       optional_checksum(c_flag.UVALUE) [ 0, 16 ];
sequence_number  =:=
       optional32(s_flag.UVALUE)        [ 0, 8, 32 ];
discriminator    =:= '10000'                   [ 5 ];
c_flag           =:= irregular(1)              [ 1 ];
k_flag           =:= irregular(1)              [ 1 ];
s_flag           =:= irregular(1)              [ 1 ];
checksum_and_res =:=
       optional_checksum(c_flag.UVALUE)             [ 0, 16 ];
key              =:= optional32(k_flag.UVALUE) [ 0, 32 ];
sequence_number  =:= optional32(s_flag.UVALUE) [ 0, 32 ];
checksum_and_res =:=
       optional_checksum(c_flag.UVALUE) [ 0, 16 ];
sequence_number  =:=
       opt_lsb_7_or_31(s_flag.UVALUE)   [ 0, 8, 32 ];
next_header =:= static;
s_bit       =:= static;
res_bits    =:= static;
checksum    =:= inferred_mine_header_checksum;
orig_dest   =:= static;
orig_src    =:= static;
next_header =:= irregular(8)             [ 8 ];
s_bit       =:= irregular(1)             [ 1 ];
res_bits    =:= irregular(7)             [ 7 ];
orig_dest   =:= irregular(32)            [ 32 ];
orig_src    =:= optional32(s_bit.UVALUE) [ 0, 32 ];
discriminator =:= '00000000' [ 8 ];
discriminator =:= '10000000'               [ 8 ];
s_bit         =:= irregular(1)             [ 1 ];
res_bits      =:= irregular(7)             [ 7 ];
orig_dest     =:= irregular(32)            [ 32 ];
orig_src      =:= optional32(s_bit.UVALUE) [ 0, 32 ];
next_header     =:= static;
length          =:= static;
res_bits        =:= static;
spi             =:= static;
sequence_number =:= static;
next_header =:= irregular(8)  [ 8 ];
length      =:= irregular(8)  [ 8 ];
spi         =:= irregular(32) [ 32 ];
res_bits        =:= irregular(16) [ 16 ];
sequence_number =:= irregular(32) [ 32 ];
auth_data       =:=
       irregular(length.UVALUE*32-32)  [ length.UVALUE*32-32 ];
discriminator   =:= '00000000'    [ 8 ];
sequence_number =:= irregular(32) [ 32 ];
auth_data       =:=
       irregular(length.UVALUE*32-32)  [ length.UVALUE*32-32 ];
discriminator   =:= '10000000'    [ 8 ];
length          =:= irregular(8)  [ 8 ];
res_bits        =:= irregular(16) [ 16 ];
spi             =:= irregular(32) [ 32 ];
sequence_number =:= irregular(32) [ 32 ];
auth_data       =:=
       irregular(length.UVALUE*32-32)  [ length.UVALUE*32-32 ];
sequence_number =:= lsb_7_or_31  [ 8, 32 ];
auth_data       =:=
       irregular(length.UVALUE*32-32) [ length.UVALUE*32-32 ];
spi             =:= static;
sequence_number =:= static;
nh_field        =:= static;
nh_field =:= compressed_value(8, next_header_value) [ 8 ];
spi      =:= irregular(32)                          [ 32 ];
sequence_number =:= irregular(32) [ 32 ];
discriminator   =:= '00000000'    [ 8 ];
sequence_number =:= irregular(32) [ 32 ];
discriminator   =:= '10000000'    [ 8 ];
spi             =:= irregular(32) [ 32 ];
sequence_number =:= irregular(32) [ 32 ];
sequence_number =:= lsb_7_or_31 [ 8, 32 ];
discriminator =:= '0'                       [ 1 ];
flow_label    =:= uncompressed_value(20, 0) [ 0 ];
reserved      =:= '0000'                    [ 4 ];
discriminator =:= '1'           [ 1 ];
flow_label    =:= irregular(20) [ 20 ];
version         =:= uncompressed_value(4, 6) [ 4 ];
tos_tc         =:= static;
ip_ecn_flags   =:= static;
flow_label     =:= static;
payload_length =:= inferred_ip_v6_length;
next_header    =:= static;
ttl_hopl       =:= static;
src_addr       =:= static;
dst_addr       =:= static;
version_flag =:= '1'            [ 1 ];
reserved     =:= '00'           [ 2 ];
flow_label   =:= fl_enc         [ 5, 21 ];
next_header  =:= irregular(8)   [ 8 ];
src_addr     =:= irregular(128) [ 128 ];
dst_addr     =:= irregular(128) [ 128 ];
tos_tc       =:= irregular(6) [ 6 ];
ip_ecn_flags =:= irregular(2) [ 2 ];
ttl_hopl     =:= irregular(8) [ 8 ];
tos_tc       =:= irregular(6) [ 6 ];
ip_ecn_flags =:= irregular(2) [ 2 ];
reserved     =:= '000'        [ 3 ];
flow_label   =:= fl_enc       [ 5, 21 ];
tos_tc       =:= static_or_irreg(ecn_used.UVALUE, 6) [ 0, 6 ];
ip_ecn_flags =:= static_or_irreg(ecn_used.UVALUE, 2) [ 0, 2 ];
tos_tc       =:= static_or_irreg(ecn_used.UVALUE, 6) [ 0, 6 ];
ip_ecn_flags =:= static_or_irreg(ecn_used.UVALUE, 2) [ 0, 2 ];
ttl_hopl     =:= irregular(8)                        [ 8 ];
ip_id =:= irregular(16) [ 16 ];
ip_id =:= uncompressed_value(16, 0) [ 0 ];
ip_id =:= irregular(16) [ 16 ];
ip_id =:= uncompressed_value(16, 0) [ 0 ];
behavior =:= irregular(2);
version        =:= uncompressed_value(4, 4)  [ 4 ];
hdr_length     =:= uncompressed_value(4, 5)  [ 4 ];
rf             =:= uncompressed_value(1, 0)  [ 1 ];
mf             =:= uncompressed_value(1, 0)  [ 1 ];
frag_offset    =:= uncompressed_value(13, 0) [ 13 ];
tos_tc         =:= static;
ip_ecn_flags   =:= static;
length         =:= inferred_ip_v4_length;
df             =:= static;
ttl_hopl       =:= static;
protocol       =:= static;
checksum       =:= inferred_ip_v4_header_checksum;
src_addr       =:= static;
dst_addr       =:= static;
ip_id_behavior =:= static;
version_flag =:= '0'           [ 1 ];
reserved     =:= '0000000'     [ 7 ];
protocol     =:= irregular(8)  [ 8 ];
src_addr     =:= irregular(32) [ 32 ];
dst_addr     =:= irregular(32) [ 32 ];
reserved       =:= '00000'             [ 5 ];
df             =:= irregular(1)        [ 1 ];
ip_id_behavior =:= ip_id_behavior_choice(is_innermost) [ 2 ];
tos_tc         =:= irregular(6)        [ 6 ];
ip_ecn_flags   =:= irregular(2)        [ 2 ];
ttl_hopl       =:= irregular(8)        [ 8 ];
ip_id          =:=
       ip_id_enc_dyn(ip_id_behavior.UVALUE) [ 0, 16 ];
reserved       =:= '0000'              [ 4 ];
ip_id_behavior =:= ip_id_behavior_choice(is_innermost) [ 2 ];
ttl_flag       =:= irregular(1)        [ 1 ];
df             =:= irregular(1)        [ 1 ];
tos_tc         =:= irregular(6)        [ 6 ];
ip_ecn_flags   =:= irregular(2)        [ 2 ];
ip_id          =:=
       ip_id_enc_dyn(ip_id_behavior.UVALUE) [ 0, 16 ];
ttl_hopl     =:=
         static_or_irreg(ttl_flag.UVALUE, 8) [ 0, 8 ];
ip_id        =:=
       ip_id_enc_irreg(ip_id_behavior.UVALUE) [ 0, 16 ];
tos_tc       =:= static_or_irreg(ecn_used.UVALUE, 6) [ 0, 6 ];
ip_ecn_flags =:= static_or_irreg(ecn_used.UVALUE, 2) [ 0, 2 ];
ip_id        =:=
       ip_id_enc_irreg(ip_id_behavior.UVALUE)             [ 0, 16 ];
tos_tc       =:= static_or_irreg(ecn_used.UVALUE, 6) [ 0, 6 ];
ip_ecn_flags =:= static_or_irreg(ecn_used.UVALUE, 2) [ 0, 2 ];
ttl_hopl     =:= irregular(8)                        [ 8 ];
ip_id          =:=
       ip_id_enc_irreg(ip_id_behavior.UVALUE) [ 0, 16 ];
type     =:= uncompressed_value(8, 0) [ 8 ];
padding  =:=
       uncompressed_value(nbits-8, 0)      [ nbits-8 ];
pad_len =:= compressed_value(8, nbits-8) [ 8 ];
pad_len =:= static;
type =:= uncompressed_value(8, 1) [ 8 ];
type   =:= uncompressed_value(8, 2) [ 8 ];
length =:= uncompressed_value(8, 4) [ 8 ];
mss =:= irregular(16) [ 16 ];
mss    =:= static;
type   =:= uncompressed_value(8, 3) [ 8 ];
length =:= uncompressed_value(8, 3) [ 8 ];
wscale =:= irregular(8) [ 8 ];
wscale =:= static;
discriminator =:= '0'        [ 1 ];
tsval         =:= lsb(7, -1) [ 7 ];
discriminator =:= '10'        [ 2 ];
tsval         =:= lsb(14, -1) [ 14 ];
discriminator =:= '110'               [ 3 ];
tsval         =:= lsb(21, 0x00040000) [ 21 ];
discriminator =:= '111'               [ 3 ];
tsval         =:= lsb(29, 0x04000000) [ 29 ];
type   =:= uncompressed_value(8, 8)  [ 8 ];
length =:= uncompressed_value(8, 10) [ 8 ];
tsval  =:= irregular(32) [ 32 ];
tsecho =:= irregular(32) [ 32 ];
tsval  =:= ts_lsb [ 8, 16, 24, 32 ];
tsecho =:= ts_lsb [ 8, 16, 24, 32 ];
discriminator =:= '0'         [ 1 ];
sack_offset   =:= lsb(15, -1) [ 15 ];
discriminator =:= '10'        [ 2 ];
sack_offset   =:= lsb(22, -1) [ 22 ];
discriminator =:= '11'        [ 2 ];
sack_offset   =:= lsb(30, -1) [ 30 ];
block_start =:=
       sack_var_length_enc(prev_block_end) [ 16, 24, 32 ];
block_end   =:=
       sack_var_length_enc(block_start)    [ 16, 24, 32 ];
type    =:= uncompressed_value(8, 5) [ 8 ];
length  =:= static;
block_2 =:= uncompressed_value(0, 0);
block_3 =:= uncompressed_value(0, 0);
block_4 =:= uncompressed_value(0, 0);
discriminator =:= '00000001';
block_1       =:= sack_block(ack_value);
discriminator =:= '00000010';
block_1       =:= sack_block(ack_value);
block_2       =:= sack_block(block_1_end.UVALUE);
discriminator =:= '00000011';
block_1       =:= sack_block(ack_value);
block_2       =:= sack_block(block_1_end.UVALUE);
block_3       =:= sack_block(block_2_end.UVALUE);
discriminator =:= '00000100';
block_1       =:= sack_block(ack_value);
block_2       =:= sack_block(block_1_end.UVALUE);
block_3       =:= sack_block(block_2_end.UVALUE);
block_4       =:= sack_block(block_3_end.UVALUE);
discriminator =:= '00000000';
block_1       =:= static;
block_2       =:= static;
block_3       =:= static;
block_4       =:= static;
discriminator =:= '00000001';
block_1       =:= sack_block(ack_value);
discriminator =:= '00000010';
block_1       =:= sack_block(ack_value);
block_2       =:= sack_block(block_1_end.UVALUE);
discriminator =:= '00000011';
block_1       =:= sack_block(ack_value);
block_2       =:= sack_block(block_1_end.UVALUE);
block_3       =:= sack_block(block_2_end.UVALUE);
discriminator =:= '00000100';
block_1       =:= sack_block(ack_value);
block_2       =:= sack_block(block_1_end.UVALUE);
block_3       =:= sack_block(block_2_end.UVALUE);
block_4       =:= sack_block(block_3_end.UVALUE);
type   =:= uncompressed_value(8, 4) [ 8 ];
length =:= uncompressed_value(8, 2) [ 8 ];
length_msb =:= uncompressed_value(1, 0) [ 1 ];
type       =:= static;
length_lsb =:= static;
contents   =:= static;
type          =:= irregular(8)      [ 8 ];
option_static =:= one_bit_choice    [ 1 ];
length_lsb    =:= irregular(7)      [ 7 ];
contents      =:=
       irregular(length_lsb.UVALUE*8-16) [ length_len.UVALUE*8-16 ];
discriminator =:= '11111111' [ 8 ];
discriminator =:= '00000000'        [ 8 ];
contents      =:=
       irregular(length_lsb.UVALUE*8-16) [ length_lsb.UVALUE*8-16 ];
tcp_options =:= static [ 0 ];
tcp_options =:= list_tcp_options [ VARIABLE ];
port =:= static [ 0 ];
port =:= lsb(8, 64) [ 8 ];
port =:= irregular(16) [ 16 ];
ip_ecn_flags =:=
       compressed_value(2, ip_inner_ecn) [ 2 ];
ip_ecn_flags =:= static [ 0 ];
rsf_idx  =:= '00' [ 2 ];
rsf_flag =:= uncompressed_value(3, 0x00);
rsf_idx  =:= '01' [ 2 ];
rsf_flag =:= uncompressed_value(3, 0x04);
rsf_idx  =:= '10' [ 2 ];
rsf_flag =:= uncompressed_value(3, 0x02);
rsf_idx  =:= '11' [ 2 ];
rsf_flag =:= uncompressed_value(3, 0x01);
padding =:= compressed_value(2, 0x0) [ 2 ];
padding =:= compressed_value(0, 0x0);
seq_number_residue =:=
         field_scaling(payload_size, seq_number_scaled.UVALUE,
                       seq_number.UVALUE) [ 32 ];
ack_number_residue =:=
         field_scaling(ack_stride.UVALUE, ack_number_scaled.UVALUE,
                       ack_number.UVALUE) [ 32 ];
ack_stride     =:= uncompressed_value(16, 0);
src_port      =:= static;
dst_port      =:= static;
seq_number    =:= static;
ack_number    =:= static;
data_offset   =:= inferred_offset;
tcp_res_flags =:= static;
tcp_ecn_flags =:= static;
urg_flag      =:= static;
ack_flag      =:= uncompressed_value(1, 1);
rsf_flags     =:= uncompressed_value(3, 0);
window        =:= static;
urg_ptr       =:= static;
src_port =:= irregular(16) [ 16 ];
dst_port =:= irregular(16) [ 16 ];
ecn_used        =:= one_bit_choice          [ 1 ];
ack_stride_flag =:= irregular(1)            [ 1 ];
ack_zero        =:= irregular(1)            [ 1 ];
urp_zero        =:= irregular(1)            [ 1 ];
tcp_res_flags   =:= irregular(4)            [ 4 ];
tcp_ecn_flags   =:= irregular(2)            [ 2 ];
urg_flag        =:= irregular(1)            [ 1 ];
ack_flag        =:= irregular(1)            [ 1 ];
psh_flag        =:= irregular(1)            [ 1 ];
rsf_flags       =:= irregular(3)            [ 3 ];
msn             =:= irregular(16)           [ 16 ];
seq_number      =:= irregular(32)           [ 32 ];
ack_number      =:=
       zero_or_irreg(ack_zero.CVALUE, 32)        [ 0, 32 ];
window          =:= irregular(16)           [ 16 ];
checksum        =:= irregular(16)           [ 16 ];
urg_ptr         =:=
       zero_or_irreg(urp_zero.CVALUE, 16)        [ 0, 16 ];
ack_stride      =:=
       static_or_irreg(ack_stride_flag.CVALUE, 16) [ 0, 16 ];
options         =:= list_tcp_options        [ VARIABLE ];
reserved          =:= '0'                      [ 1 ];
window_presence   =:= irregular(1)             [ 1 ];
list_present      =:= irregular(1)             [ 1 ];
src_port_presence =:= irregular(2)             [ 2 ];
dst_port_presence =:= irregular(2)             [ 2 ];
ack_stride_flag   =:= irregular(1)             [ 1 ];
ack_presence      =:= irregular(1)             [ 1 ];
urp_presence      =:= irregular(1)             [ 1 ];
urg_flag          =:= irregular(1)             [ 1 ];
ack_flag          =:= irregular(1)             [ 1 ];
psh_flag          =:= irregular(1)             [ 1 ];
rsf_flags         =:= rsf_index_enc            [ 2 ];
ecn_used          =:= one_bit_choice           [ 1 ];
msn               =:= irregular(16)            [ 16 ];
seq_number        =:= irregular(32)            [ 32 ];
src_port          =:=
       port_replicate(src_port_presence)      [ 0, 8, 16 ];
dst_port          =:=
       port_replicate(dst_port_presence)      [ 0, 8, 16 ];
window            =:=
       static_or_irreg(window_presence, 16)   [ 0, 16 ];
urg_point         =:=
       static_or_irreg(urp_presence, 16)    [ 0, 16 ];
ack_number        =:=
       static_or_irreg(ack_presence, 32)    [ 0, 32 ];
ecn_padding       =:=
       optional_2bit_padding(ecn_used.CVALUE)     [ 0, 2 ];
tcp_res_flags =:=
       static_or_irreg(ecn_used.CVALUE, 4)        [ 0, 4 ];
tcp_ecn_flags     =:=
       static_or_irreg(ecn_used.CVALUE, 2)        [ 0, 2 ];
checksum          =:= irregular(16)            [ 16 ];
ack_stride        =:=
       static_or_irreg(ack_stride_flag.CVALUE, 16)  [ 0, 16 ];
options           =:=
       tcp_list_presence_enc(list_present.CVALUE) [ VARIABLE ];
ip_ecn_flags  =:= tcp_irreg_ip_ecn(ip_inner_ecn)  [ 0, 2 ];
tcp_res_flags =:=
       tstatic_or_irreg(ecn_used.CVALUE, 4)            [ 0, 4 ];
tcp_ecn_flags =:=
       static_or_irreg(ecn_used.CVALUE, 2)             [ 0, 2 ];
checksum      =:= irregular(16)                   [ 16 ];
tos_tc =:= static [ 0 ];
tos_tc  =:= irregular(6)           [ 6 ];
padding =:= compressed_value(2, 0) [ 2 ];
ip_id_offset =:= lsb(k, p) [ k ];
ip_id_offset =:= lsb(k, p) [ k ];
ip_id =:= ip_id_lsb(behavior, 8, 3) [ 8 ];
ip_id =:= irregular(16)  [ 16 ];
df =:= irregular(1) [ 1 ];
df =:= compressed_value(1, 0) [ 1 ];
outer_headers  =:= baseheader_outer_headers        [ VARIABLE ];
version        =:= uncompressed_value(4, 4)        [ 4 ];
header_length  =:= uncompressed_value(4, 5)        [ 4 ];
rf             =:= uncompressed_value(1, 0)        [ 1 ];
mf             =:= uncompressed_value(1, 0)        [ 1 ];
frag_offset    =:= uncompressed_value(13, 0)       [ 13 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
outer_headers  =:= baseheader_outer_headers        [ VARIABLE ];
version =:= uncompressed_value(4, 6)               [ 4 ];
extension_headers =:= baseheader_extension_headers [ VARIABLE ];
seq_number_residue =:=
         field_scaling(payload_size, seq_number_scaled.UVALUE,
                       seq_number.UVALUE) [ 32 ];
ack_number_residue =:=
         field_scaling(ack_stride.UVALUE, ack_number_scaled.UVALUE,
                       ack_number.UVALUE) [ 32 ];
ack_stride     =:= uncompressed_value(16, 0);
tcp_ecn_flags  =:= static;
data_offset    =:= inferred_offset;
tcp_res_flags  =:= static;
rsf_flags      =:= uncompressed_value(3, 0);
dest_port      =:= static;
tos_tc         =:= static;
src_port       =:= static;
urg_flag       =:= uncompressed_value(1, 0);
window         =:= static;
dest_addr      =:= static;
version        =:= static;
ttl_hopl       =:= static;
src_addr       =:= static;
df             =:= static;
ack_number     =:= static;
urg_ptr        =:= static;
seq_number     =:= static;
ack_flag       =:= uncompressed_value(1, 1);
payload_length =:= inferred_ip_v6_length;
checksum       =:= inferred_ip_v4_header_checksum;
length         =:= inferred_ip_v4_length;
flow_label     =:= static;
next_header    =:= static;
ip_ecn_flags   =:= static;
ip_id_behavior =:= static;
ecn_used       =:= static;

discriminator        =:= '1111101'                [ 7 ];
ttl_hopl_outer_flag  =:=
         compressed_value(1, ttl_irregular_chain_flag) [ 1 ];
ack_flag             =:= irregular(1)             [ 1 ];
psh_flag             =:= irregular(1)             [ 1 ];
rsf_flags            =:= rsf_index_enc            [ 2 ];
msn                  =:= lsb(4, 4)                [ 4 ];
seq_indicator        =:= irregular(2)             [ 2 ];
ack_indicator        =:= irregular(2)             [ 2 ];
ack_stride_indicator =:= irregular(1)             [ 1 ];
window_indicator     =:= irregular(1)             [ 1 ];
ip_id_indicator      =:= irregular(1)             [ 1 ];
urg_ptr_present      =:= irregular(1)             [ 1 ];
reserved             =:= compressed_value(1, 0)   [ 1 ];
ecn_used             =:= one_bit_choice           [ 1 ];
tos_tc_present       =:= irregular(1)             [ 1 ];
ttl_hopl_present     =:= irregular(1)             [ 1 ];
list_present         =:= irregular(1)             [ 1 ];
ip_id_behavior       =:= ip_id_behavior_choice(true)     [ 2 ];
urg_flag             =:= irregular(1)             [ 1 ];
df                   =:= dont_fragment(version.UVALUE)   [ 1 ];
header_crc           =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
seq_number           =:=
       variable_length_32_enc(seq_indicator.CVALUE) [ 0, 8, 16, 32 ];
ack_number           =:=
       variable_length_32_enc(ack_indicator.CVALUE) [ 0, 8, 16, 32 ];
ack_stride           =:=
       static_or_irreg(ack_stride_indicator.CVALUE, 16)  [ 0, 16 ];
window               =:=
       static_or_irreg(window_indicator.CVALUE, 16)      [ 0, 16 ];
ip_id                =:=
       optional_ip_id_lsb(ip_id_behavior.UVALUE,
                          ip_id_indicator.CVALUE)      [ 0, 8, 16 ];
urg_ptr              =:=
       static_or_irreg(urg_ptr_present.CVALUE, 16)     [ 0, 16 ];
tos_tc               =:=
       tos_tc_enc(tos_tc_present.CVALUE)               [ 0, 8 ];
ttl_hopl             =:=
       static_or_irreg(ttl_hopl_present.CVALUE, 8)     [ 0, 8 ];
options              =:=
       tcp_list_presence_enc(list_present.CVALUE)      [ VARIABLE ];
discriminator =:= '101110'                        [ 6 ];
seq_number    =:= lsb(18, 65535)                  [ 18 ];
msn           =:= lsb(4, 4)                       [ 4 ];
psh_flag      =:= irregular(1)                    [ 1 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
discriminator      =:= '1100'                          [ 4 ];
seq_number_scaled  =:= lsb(4, 7)                       [ 4 ];
msn                =:= lsb(4, 4)                       [ 4 ];
psh_flag           =:= irregular(1)                    [ 1 ];
header_crc         =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
discriminator =:= '0'                             [ 1 ];
ack_number    =:= lsb(15, 8191)                   [ 15 ];
msn           =:= lsb(4, 4)                       [ 4 ];
psh_flag      =:= irregular(1)                    [ 1 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
discriminator      =:= '1101'                          [ 4 ];
ack_number_scaled  =:= lsb(4, 3)                       [ 4 ];
msn                =:= lsb(4, 4)                       [ 4 ];
psh_flag           =:= irregular(1)                    [ 1 ];
header_crc         =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
discriminator =:= '100'                           [ 3 ];
psh_flag      =:= irregular(1)                    [ 1 ];
msn           =:= lsb(4, 4)                       [ 4 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
seq_number    =:= lsb(14, 8191)                   [ 14 ];
ack_number    =:= lsb(15, 8191)                   [ 15 ];
discriminator      =:= '1010'                          [ 4 ];
header_crc         =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
psh_flag           =:= irregular(1)                    [ 1 ];
ack_number         =:= lsb(16, 16383)                  [ 16 ];
msn                =:= lsb(4, 4)                       [ 4 ];
seq_number_scaled  =:= lsb(4, 7)                       [ 4 ];
discriminator =:= '101111'                        [ 6 ];
ack_number    =:= lsb(18, 65535)                  [ 18 ];
window        =:= irregular(16)                   [ 16 ];
msn           =:= lsb(4, 4)                       [ 4 ];
psh_flag      =:= irregular(1)                    [ 1 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
discriminator =:= '10110'                         [ 5 ];
rsf_flags     =:= rsf_index_enc                   [ 2 ];
list_present  =:= irregular(1)                    [ 1 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH) [ 7 ];
msn           =:= lsb(4, 4)                       [ 4 ];
psh_flag      =:= irregular(1)                    [ 1 ];
ttl_hopl      =:= lsb(3, 3)                       [ 3 ];
ecn_used      =:= one_bit_choice                  [ 1 ];
seq_number    =:= lsb(16, 65535)                  [ 16 ];
ack_number    =:= lsb(16, 16383)                  [ 16 ];
options       =:=
       tcp_list_presence_enc(list_present.CVALUE)      [ VARIABLE ];
discriminator =:= '1010'                                 [ 4 ];
ip_id         =:= ip_id_lsb(ip_id_behavior.UVALUE, 4, 3) [ 4 ];
seq_number    =:= lsb(16, 32767)                         [ 16 ];
msn           =:= lsb(4, 4)                              [ 4 ];
psh_flag      =:= irregular(1)                           [ 1 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH)        [ 3 ];
discriminator      =:= '11010'                         [ 5 ];
ip_id              =:=
       ip_id_lsb(ip_id_behavior.UVALUE, 7, 3)               [ 7 ];
seq_number_scaled  =:= lsb(4, 7)                       [ 4 ];
msn                =:= lsb(4, 4)                       [ 4 ];
psh_flag           =:= irregular(1)                    [ 1 ];
header_crc         =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
discriminator =:= '1001'                                 [ 4 ];
ip_id         =:= ip_id_lsb(ip_id_behavior.UVALUE, 4, 3) [ 4 ];
ack_number    =:= lsb(16, 16383)                         [ 16 ];
msn           =:= lsb(4, 4)                              [ 4 ];
psh_flag      =:= irregular(1)                           [ 1 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH)        [ 3 ];
discriminator     =:= '0'                             [ 1 ];
ack_number_scaled =:= lsb(4, 3)                       [ 4 ];
ip_id      =:= ip_id_lsb(ip_id_behavior.UVALUE, 3, 1) [ 3 ];
msn               =:= lsb(4, 4)                       [ 4 ];
psh_flag          =:= irregular(1)                    [ 1 ];
header_crc        =:= crc3(THIS.UVALUE, THIS.ULENGTH) [ 3 ];
discriminator =:= '1000'                                 [ 4 ];
ip_id         =:= ip_id_lsb(ip_id_behavior.UVALUE, 4, 3) [ 4 ];
ack_number    =:= lsb(16, 16383)                         [ 16 ];
seq_number    =:= lsb(16, 32767)                         [ 16 ];
msn           =:= lsb(4, 4)                              [ 4 ];
psh_flag      =:= irregular(1)                           [ 1 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH)        [ 3 ];
discriminator      =:= '11011'                          [ 5 ];
seq_number_scaled  =:= lsb(4, 7)                        [ 4 ];
ip_id        =:= ip_id_lsb(ip_id_behavior.UVALUE, 7, 3) [ 7 ];
ack_number         =:= lsb(16, 16383)                   [ 16 ];
msn                =:= lsb(4, 4)                        [ 4 ];
psh_flag           =:= irregular(1)                     [ 1 ];
header_crc         =:= crc3(THIS.UVALUE, THIS.ULENGTH)  [ 3 ];
discriminator =:= '1100'                                 [ 4 ];
window        =:= lsb(15, 16383)                         [ 15 ];
ip_id         =:= ip_id_lsb(ip_id_behavior.UVALUE, 5, 3) [ 5 ];
ack_number    =:= lsb(16, 32767)                         [ 16 ];
msn           =:= lsb(4, 4)                              [ 4 ];
psh_flag      =:= irregular(1)                           [ 1 ];
header_crc    =:= crc3(THIS.UVALUE, THIS.ULENGTH)        [ 3 ];
discriminator =:= '1011'                                 [ 4 ];
ip_id         =:= ip_id_lsb(ip_id_behavior.UVALUE, 4, 3) [ 4 ];
list_present  =:= irregular(1)                           [ 1 ];
header_crc    =:= crc7(THIS.UVALUE, THIS.ULENGTH)        [ 7 ];
msn           =:= lsb(4, 4)                              [ 4 ];
psh_flag      =:= irregular(1)                           [ 1 ];
ttl_hopl      =:= lsb(3, 3)                              [ 3 ];
ecn_used      =:= one_bit_choice                         [ 1 ];
ack_number    =:= lsb(15, 8191)                          [ 15 ];
rsf_flags     =:= rsf_index_enc                          [ 2 ];
seq_number    =:= lsb(14, 8191)                          [ 14 ];
options       =:=
       tcp_list_presence_enc(list_present.CVALUE)       [ VARIABLE ];
