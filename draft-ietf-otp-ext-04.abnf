extended-challenge = otp-challenge 1*LWSP-char capability-list
                        (NL / *LWSP-char)
otp-challenge     = <a standard OTP challenge>
capability-list   = "ext" *("," extension-set-id)
extension-set-id  = *<any CHAR except LWSP, CTLs, or ",">
extended-response = type 1*(":" argument) NL
type              = token
argument          = token
token             = 1*<any CHAR except ":" and CTLs>
NL                = <new line sequence appropriate for the context
                        in which OTP is being used>

hex-response  = "hex:" hex-64bit NL
hex-64bit     = 16(hex-char *LWSP-char)
hex-char      = ("A" / "B" / "C" / "D" / "E" / "F" /
                       "a" / "b" / "c" / "d" / "e" / "f" /
                       "0" / "1" / "2" / "3" / "4" / "5" /
                       "6" / "7" / "8" / "9")

word-response = "word:" word-64bit NL
word-64bit    = 6(otp-word 1*LWSP-char)
otp-word      = <any valid word in the standard OTP coding
                      dictionary>

init-hex-response = "init-hex:" current-OTP ":" new-params ":"
                        new-OTP NL

current-OTP     = hex-64bit
new-OTP         = hex-64bit

new-params      = algorithm SPACE sequence-number SPACE seed
algorithm       = "md4" / "md5" / "sha1"
sequence-number = 4*3DIGIT
seed            = 16*1(ALPHA / DIGIT)

init-word-response = "init-word:" current-OTP ":" new-params ":"
                        new-OTP NL

current-OTP     = word-64bit
new-OTP         = word-64bit

new-params      = algorithm SPACE sequence-number SPACE seed
algorithm       = "md4" / "md5" / "sha1"
sequence-number = 4*3DIGIT
seed            = 16*1(ALPHA / DIGIT)

