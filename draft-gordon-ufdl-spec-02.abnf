version = "3.2.0";
bgcolor = ["ivory"];
page_1 = new page
body_label = new label
value = "This is a UFDL form.";
version = "4.0.0";
bgcolor = ["ivory"];
     
page_1 = new page
bgcolor = ["seashell"];
	
next_page_button = new button
value = "Next Page";
url = ["#page_2.global"];
page_2 = new page
fontinfo = ["Helvetica", "14", "plain"];
	
hello_label = new label
value = "Hello, world.";
page_1 = new page
bgcolor = ["seashell"];
	

hello_label = new label
value = "Hello, world.";
fontcolor = ["blue"];  
next_page_button = new button
value = "Next Page";
url = ["#page_2.global"];
date_field = new field
date_field = new field
size = ["20", "1"];
date_field = new field
size = ["20", "1"];
label = "Today's Date";
format = ["date", "long"];
value = "*";
itemlocation = [["after", "name_field"]];
version = "3.2.0";
bgcolor = ["ivory"];
page_1 = new page
page_1 = new page
bgcolor = ["seashell"];
     
bar_box = new box
bar_box = new box
bgcolor = ["black"];
size = ["60", "5"];
version = "3.2.0";
bgcolor = ["ivory"];
fontinfo = ["Helvetica", "10", "plain"];
     
page_1 = new page
page_2 = new page
page_10 = new page
Page_one = new page
bgcolor = ["cornsilk"];
fontinfo = ["Times", "14", "plain"];
button_label = new label
save_button = new button
save_button = new button
bgcolor = ["cyan"];
fontinfo = ["Helvetica", "12"];
type = "save";
value = "Save Form";
p1_toolbar = new toolbar
bgcolor = ["cyan"];
title_label = new label
value = "Student Registration Form";
fontinfo = ["Helvetica", "16", "bold"];
itemlocation = [["within", "p1_toolbar"]];
close_button = new button
type = "close";
value = "Close Form";
itemlocation = [["within", "p1_toolbar"], ["below", "title_label"], 
                           ["alignhorizc2c", "title_label"]];
value = "Submit Form";
fontinfo = ["Helvetica", 16", "bold"];
url = global.global.db_address

value = "Submit Form"; )
url = global.global.db_address; )
value = total_field.value + "3400"; )
fontinfo = ["Helvetica", "16", "bold"]; )
value = itemnext->value;

itemlocation = [["after", itemprevious]];

url = ["#"+.global.pagenext->global];

url = [global.global->pagefirst->itemfirst->url[0]];

url = ["#page_2.global"];

url = ["#"+.global.pagenext->global];

url = [global.global->pagefirst->submitButton.url[0]];

value = global.global.pagelast->resultField.value;
    
url = ["#"+.global.pageprevious->global];

url = ["#"+.global.pagenext->global];

value = global.itemfirst->value;

value = global.itemlast->value;
  
itemlocation = [["after", itemprevious]];

value = itemnext->value;

itemlocation = [["after", itemprevious]];
value = itemprevious->value;
value = global.global.pagefirst->itemfirst->value;
    
male_check == "on" ? "male" : "female"
name_field == "Smith" ? "on" : "off"
Assignment           =             Assign right operand to left 
                                        operand
saveButton = new button
type = "save";
value = "Save";
bgcolor = [mouseover=="on" ? "white" : "gray90"];
format = ["integer", range=["1","100"]]; 
     using a user-defined variable name
delay = [the_repeat = "once", the_time = "10"];
     using both UFDL-defined and user-defined variable names
format = [the_type = "string", length = ["5", "25"]]; 
    Array elements for UFDL-defined option types must be coded in the 
    position they are documented in this specification, unless they 
    have UFDL-defined variable names listed in this specification. For 
    example, the elements for the size option must always be in the 
    order [width, height], but the elements for check and format types 
    in the format option can be in any order, since they have 
    UFDL-defined variable names.

   Decisions in Arrays

    A decision can be used to determine any element within an array, so
    long as that element is not itself an array.

    For example, the following format line is valid. 
format = [check_1.value == "on" ? "string" : "integer"];

format = ["integer", check_1 == "on" ? range = ["10","20"] :
range = ["0","10"];

itemlocation = [["below", "field1"], ["alignl2l", "field2"], 
                    ["alignr2c", "field3"]];
itemlocation = [the_pos= ["below", "field1"], the_align= 
                    ["alignl2l", "field2"]];
format = ["integer", range=["1","10"]];
format = ["integer", range=[the_low="1", the_high="10"]];
version = "4.0.0";
next = "page_one.title_list";
page_one = new page
next = "name_field";        
bgcolor = ["LightBlue"];
form_title = new label
       .......
title_list = new list
next = "name_field";
name_field = new field
next = "page_two.your_signature";
page_two = new page
bgcolor = ["PaleGreen"];
form_title = new label
your_signature = new tablet
next = "page_one.global";
version = "4.0.0";
next = "page_one.global";
page_one = new page
next = "name_field";        
bgcolor = ["LightBlue"];
form_title = new label
name_field = new field
next_page = new button
value = "Page 2";
type = "pagedone";
url = "#page_two.global";
page_two = new page
next = "your_signature";        
bgcolor = ["PaleGreen"];
form_title = new label
your_signature = new tablet
first_page = new button
value = "Page 1";
type = "pagedone";
url = "#page_one.global";
page_one = new page
value = "This example demonstrates the use of quoted strings "
            "that span multiple lines.";

empSigButton = new button
type = "signature";
value = signer;
format = ["string", "mandatory"];
signformat = "application/uwi_form;csp=\"Microsoft Base 
     Cryptographic Provider v1.0\";csptype=rsa_full;hashalg=sha1";
signoptions = ["omit", "triggeritem", "coordinates"];
signitemrefs = ["omit", "PAGE1.mgrSigButton", 
     "PAGE1.admSigButton",
				"PAGE1.empSignature", 
signature = "empSignature";
     }
     ...
empSignature = new signature
       {
signformat = "application/uwi_form;csp=\"Microsoft Base 
     Cryptographic Provider v1.0\";csptype=rsa_full;hashalg=sha1";
signer = "Jane D Smith, jsmith@insurance.com";
signature = "PAGE1.empSignature";
signitemrefs = ["omit", "PAGE1.mgrSigButton", 
     "PAGE1.admSigButton",
				"PAGE1.empSignature", 
     "PAGE1.mgrSignature",
				"PAGE1.admSignature"];
signoptions = ["omit", "triggeritem", "coordinates"];
mimedata = "MIIFMgYJKoZIhvcNAQcCoIIFIzCCBR8CAQExDzANBgkg"
submitButton = new button
type = "done";
value = "Submit";
url = ["http://www.server.dmn/cgi-bin/warehouse.exe"];
transmititems = ["omit", "data"];
transmitdatagroups = ["keep", "enclosures", "related"];
transmititemrefs = ["omit", "page1.toolbar"];
transmitoptions = ["omit", "bgcolor", "fontcolor"];
     }

employeeSignatureButton = new button
type = "signature";
value = "Sign This Section";
signature = "empSignature";
signitemrefs = ["keep", "page1.nameField", "page1.nameLabel", 
                       "page1.dateField", "page1.dateLabel", 
                       "page1.evaluationField", 
                       "page1.evaluationLabel"];
     }

    For details on each filter, see the option descriptions later in 
    this document.

   Order of Precedence of Filters

    Within each family of filters, there are item filters and option 
    filters. In addition, there are item type filters, which filter an 
    entire type of items (all fields, for example), and item instance 
    filters (which filter specific instances of items). The same filter
    levels exist for option filters.

    The settings in filters are applied by a UFDL parser in the 
    following manner:

itemTag = new item
option = setting;
                    }

version = "4.0.0";

page1 = new page
submitButton = new button
value = "Filter Submission";
type = "done";
url = ["http://www.server.dmn/cgi-bin/processForm"];
transmititems = ["omit", "data"];
transmitdatagroups = ["keep", "enclosures", "related"];
transmititemrefs = ["omit", "page1.data2"];
transmitoptions = ["omit" "filename"];
encloseButton = new button
image = "encloseImageData";
type = "enclose";
datagroup = ["enclosures", "related"];
data1 = new data
datagroup = ["enclosures"];
filename = "jobdescr.frm";
mimedata = "dfksdfsdfhsdhskdljhf";
data2 = new data
datagroup = ["related"];
filename = "resume.doc";
mimedata = "dfhsjdfsjhfjs";
encloseImageData = new data
filename = "c:\images\enclose.jpg";
mimedata = "aswWWW8MjfbyhsUE&LKKELFir8dfd";
		  "UUUmnskshie3mkjkkeiIIUIUOlfRlgdsoepgejgjj";
		  "1sd\35fnnII\fjkess9Wfgjgkggkll\\rgakkk2klgjgkg";
version = "4.0.0";

page1 = new page
submitButton = new button
value = "Filter Submission";
type = "done";
url = ["http://www.server.dmn/cgi-bin/processForm"];
transmititems = ["omit", "data"];
transmitdatagroups = ["keep", "enclosures", "related"];
transmititemrefs = ["omit", "page1.data2"];
transmitoptions = ["omit" "filename"];
encloseButton = new button
image = "encloseImageData";
type = "enclose";
datagroup = ["enclosures", "related"];
data1 = new data
datagroup = ["enclosures"];
mimedata = "dfksdfsdfhsdhskdljhf";
version = <version_number>;
version = "3.2.0";
saveformat = "application/uwi_form; content-encoding=\"gzip\" ";
label = "Time Sheet";
bgcolor = ["ivory"];
fontinfo = ["Helvetica", "10", "plain"];

page_1 = new page
bgcolor = ["seashell"];
next = "Name_field";

page_2 = new page
fontinfo = ["Helvetica", "14", "plain"];
next = "Activity_popup";

sendStatus_action = new action
delay = ["repeat", "600"];
type = "submit";
url = ["http://www.server.com/cgi-bin/recv_status"];
grabSearch_action = new action
type = "link";
url = ["http://www.server.com/application/ index/search.frm"];
autoSave_action = new action
delay = ["once", "300"];
type = "save";
autoCancel_action = new action
delay = ["once", "600"];
type = "cancel";
blue_box = new box
bgcolor = ["blue"];
size = ["25", "4"];
empSignatureButton = new button 
type = "signature";
format = ["string", "mandatory"];
value = signer;
signer="";
signature = "empSignature";
signoptions = ["omit", "triggeritem", "coordinates"];
signitemrefs = ["omit", "page1.empSignatureButton", 
                       "page1.empSignature"];
      }

    There are two steps to making a signature button mandatory:
    
     - Assign a format of ["string", "mandatory"].

     - Set the button's value to equal the button's signer option 
       setting.

    By setting the format to mandatory, you specify that the button 
    must have a value setting that is not empty before the user submits
    the form. By then equating the value to the setting of the signer 
    option, you make sure that the only way a button's value is set is 
    if somebody uses it to sign the form. (The signer option stores the
    identity of the person who signed the form using the button.)

   Behavior of Buttons in Digital Signatures

    1) A digital signature button is the means by which the user can 
       digitally sign a form. To make a button a signature button, 
       set its type to signature.

    2) You can set up a signature button to sign the whole form or just
       part of it. You do this by setting up filters on the signature, 
       using the signdatagroups, signgroups, signitemrefs, signitems, 
       signoptionrefs, and signoptions options. To learn about 
       filtering, see "Filters"in section 2.7.
       
       Important:You should always at a minimum filter out the 
       triggeritem and coordinates options. These options change 
       when a submission is triggered or when a user clicks an 
       image button, respectively. You should also consider 
       filtering out any parts of the form that a subsequent 
       user will change, including subsequent signatures and 
       signature buttons; and custom options that might change 
       (like odbc_rowcount).

    3) Signature buttons allow users to do the following:
       
       - Sign the form or portion of the form the button specifies.

       - Delete their signatures (a signature can be deleted only by 
         the user whose signature it is, and if the signature is 
         currently valid and not signed by some other signature).

       - View the signature and view the UFDL text of what the 
         signature applies to.

    4) All option references, calculations, and other formulas in any 
       signed portion of a form are frozen once they have been signed. 
       Their setting will be valued at the setting they contained at 
       the moment when the signature was created. If the user deletes 
       the digital signature, however, then the formulas will become 
       unfrozen, and will change dynamically as normal.

    5) The usual options for other buttons (i.e. size, image, value) 
       can also be used with signature buttons.

   Examples

    Example 1 - Link button

    This button links the form to a server (www.server.com) and 
getHelp_button = new button
value = "Get Help";
type = "link";
url = ["http://www.server.com/application/help/formHelp.frm"];
submit_button = new button
value = "Process Form";
fontinfo = ["Helvetica", "18", "bold", "italic"];
type = "done";
url = ["http://www.server.com/cgi-bin/formProcessor"];
enclose_button = new button
value = "Enclose File";
fontinfo = ["Helvetica", "18", "bold", "italic"];
type = "enclose";
datagroup = ["Images_Asia", "Images_Eur" , "Images_SAmer"];
empSigButton = new button
type = "signature";
value = signer;
format = ["string", "mandatory"];
signformat = "application/uwi_form;csp=\"Microsoft Base 
     Cryptographic Provider v1.0\";csptype=rsa_full;hashalg=sha1";
signoptions = ["omit", "triggeritem", "coordinates"];
signitemrefs = ["omit", "PAGE1.mgrSigButton", 
     "PAGE1.admSigButton", "PAGE1.empSignature", 
     "PAGE1.mgrSignature", "PAGE1.admSignature"];
signature = "empSignature"; 
     }
     ...
empSignature = new signature
signformat = "application/uwi_form;csp=\"Microsoft Base 
     Cryptographic Provider v1.0\";csptype=rsa_full;hashalg=sha1";
signer = "Jane D Smith, jsmith@insurance.com";
signature = "PAGE1.empSignature";
signitemrefs = ["omit", "PAGE1.mgrSigButton", 
     "PAGE1.admSigButton", "PAGE1.empSignature", 
     "PAGE1.mgrSignature", "PAGE1.admSignature"];
signoptions = ["omit", "triggeritem", "coordinates"];
mimedata = "MIIFMgYJKoZIhvcNAQcCoIIFIzCCBR8CAQExDzANBgkg"
countryPopup = new popup
label = "Country";
group = "country";
format = ["string", "mandatory"];
     }
albCell = new cell
value = "Albania";
type = "select";
     }
algCell = new cell
value = "Algeria";
group = "country";
type = "select";
     }
banCell = new cell
value = "Bangladesh";
group = "country";
type = "select";
     }

   Usage Notes
 
    1) Use the type option to establish a cell's behavior. Select cells
       that have a type of select (the default type).

    2) Cells can have both value and label options. These options 
       affect the form differently depending on whether the cell is 
       linked to a combobox, a popup, or a list. In general, the label 
       of the cell will be displayed as a choice, while the value of 
       the cell will be displayed if that cell is selected.  For more 
       information, refer to the appropriate item type.

    3) Cells take their color and font information from the combobox, 
       list and popup items with which they are associated. In this 
       way, a cell's appearance can vary according to the list the 
       user is viewing.

    4) To get the value of a cell that a user has selected from a list,
       you need to dereference it, like this:
        <page_tag>.<list_tag>.value->value

    For example:
     page1.countryPopup.value->value

    When a user selects a cell from a list, the item tag of the cell is
    stored as the value of the list. Hence the dereference syntax.
healthPlan_check = new check
value = "on";
label = "Activate Health Plan";
labelfontinfo = ["Times", "14", "bold"];
labelfontcolor = ["blue"];
CATEGORY_POPUP = new combobox
group = "combo_Group";
label = "Choose a Color:";
RED_CELL = new cell
group = "combo_Group";
type = "select";
value = "Red";
WHITE_CELL = new cell 
group = "combo_Group";
type = "select";
value = "White";
BLUE_CELL = new cell
group = "combo_Group";
type = "select";
value = "Blue";
Supporting_Documents_1 = new data
filename = "smithltr.doc";
mimetype = "application/uwi_bin";
mimedata = 
income_field = new field
label = "Annual income";
value = "23000";
size = ["20", "1"];
fontinfo = ["Courier", "12", "plain"];
labelfontinfo = ["Helvetica", "12", "plain"];
labelfontcolor = ["blue"];
job_field = new field
label = "Job Description";
size = ["50", "5"];
scrollvert = "always";
scrollhoriz = "wordwrap";
fontinfo = ["Times", "12", "plain]";
labelfontinfo = ["Helvetica", "12", "plain"];
labelfontcolor = ["blue"];
fullPicture_button = new button
help = "button_help";
fontinfo = ["Times", "14", "plain"];
type = "link";
url = ["http://www.server.com/application/fullPic.frm"];
button_help = new help
value = "Pressing this button will bring a full-sized image in 
               a form " 
                "down to your viewer.";
box = new box
size = ["30", "3"];
     }
label = new label
itemlocation = [["alignhorizc2c", "box"],
				["alignvertc2c", "box"]];
value = "Great Insurance";
fontcolor = ["white"];
fontinfo = ["Helvetica", "14", "bold"];
     // Note: you could also specify bgcolor = ["transparent"], but you
              don't
     // need to because the default is transparent.
     }

   Examples

    Example 1
    This is an example of a text label. The text is centered in the 
    space the label occupies. The label width is 30 characters (thus 
    it is bigger than the text in the label).
MAINMENU_LABEL = new label
value = "Welcome to the Main Menu";
fontinfo = ["Helvetica", "24", "bold", "italic"];
size = ["30", "1"];
justify = "center";
RHYME_LABEL = new label
value = "Little miss Muffet\n Sat on her tuffet,\n"
                "Eating her curds and whey.\n When along came a 
                 spider,\n"
                "who sat down beside her,\n and frightened miss 
                 Muffet away!";
fontinfo = ["Times", "16", "italic"];
BLUE_LINE = new line
size = ["40", "0"];
thickness = "5";
width=larger of label width and widest cell, 
height=number of cells in list
MAINMENU_LIST = new list
group = "list_Group";
label = "Options Menu";
labelfontcolor = ["blue"];
size = ["3", "20"];
SUBMIT_CELL = new cell
group = "list_Group";
type = "submit";
url = ["http://www.server.com/cgi-bin/processForm"];
value = "Submit Form";
SAVE_CELL = new cell
group = "list_Group";
type = "save";
value = "Save Form";
CANCEL_CELL = new cell
group = "list_Group";
type = "cancel";
value = "Cancel this Form";
CATEGORY_POPUP = new popup
group = "popup_Group";
label = "Choose a Category:";
HISTORY_CELL = new cell
group = "popup_Group";
type = "select";
value = "World History";
SCIENCE_CELL = new cell
group = "popup_Group";
type = "select";
value = "Physical Sciences";
MUSIC_CELL = new cell
group = "popup_Group";
type = "select";
value = "Music";
NAME_RADIO = new radio
value = "on";
group = "search_Group";
label = "Search by Name";
NUMBER_RADIO = new radio
group = "search_Group";
label = "Search by Number";
OCCUPATION_RADIO = new radio
group = "search_Group";
label = "Search by Occupation";
empSigButton = new button
type = "signature";
value = signer;
format = ["string", "mandatory"];
signformat = "application/uwi_form;csp=\"Microsoft Base 
     Cryptographic Provider v1.0\";csptype=rsa_full;hashalg=sha1";
signoptions = ["omit", "triggeritem", "coordinates"];
signitemrefs = ["omit", "PAGE1.mgrSigButton", 
                      "PAGE1.admSigButton","PAGE1.empSignature", 
                      "PAGE1.mgrSignature","PAGE1.admSignature"];
signature = "empSignature";
     }
     ...
empSignature = new signature
      {
signformat = "application/uwi_form;csp=\"Microsoft Base
     Cryptographic Provider v1.0\";csptype=rsa_full;hashalg=sha1";
signer = "Jane D Smith, jsmith@insurance.com";
signature = "PAGE1.empSignature";
signitemrefs = ["omit", "PAGE1.mgrSigButton",
                        "PAGE1.admSigButton","PAGE1.empSignature",
                        "PAGE1.mgrSignature", "PAGE1.admSignature"];
signoptions = ["omit", "triggeritem", "coordinates"];
mimedata ="MIIFMgYJKoZIhvcNAQcCoIIFIzCCBR8CAQExDzANBgkg"
width=1 character if label empty, otherwise 
size = ["1", "3"];
WELCOME_SPACER = new spacer
label = "Welcome to Information Line";
sketch_tablet = new tablet
fontcolor = ["blue"];
size = ["30", "5"];
image = "sketch_data";
sketch_data = new data
sign_tablet = new tablet
fontcolor = ["blue"];
size = ["30", "5"];
image = "sign_logo";
     }
     ...
sign_data = new data
mimedata = "R0lGODdhYABPAPAAAP///wAAACwAAAAAYABA/"
     "Art68+Y7im7ku2KkzXnOzh9v7qNw+k+TbDoLFTvCSPzMrSzTE+p"
     "yai3YUk9R6hee2JFP2stju+uG0ptvdeKptb+cX8wfY1jdYU4KpdJw"
     "44yAJEqcW28cA5M0oEKnqKasZwydrK9Wo6JTt9p5iwt8bi/b7E0"
     "rvKixzbHJyrDq2uNggaXUs1NlLi36AW3AGv7VWhIPAzvdGi/vvr0Of"
     "ft3Nrx89JewCQJYTirxi2PwgnRpNoMV5FIIboOnqTszFMhVI0yOz";
     }

    4) The fontcolor option determines the pen color.

    5) The pen width is two pixels.

    6) The value can be used to set the initial size of the tablet. 
       If no size is indicated, and no mimedata exists, the tablet will
       size itself to the size of the text entered in the value.

    7) If an enclosure mechanism is used to replace an image stored 
       in a data item with a new image, then buttons, labels, and 
       tablets whose image option is set to the identifier of the 
       image data item will be updated to display the new image. 
       For details, see the data option description.

   Example

    This example shows a blank tablet with a background color of pale 
    green. It is 40 characters wide and 10 characters high.
users_signature = new tablet
bgcolor = ["PaleGreen"];
size = ["40", "10"];
fontinfo = ["Courier", "12"];    // This governs the size.
fontcolor = ["black"];           // This governs pen color.
image = "signature_data";
signature_data = new data
TOOL_BAR = new toolbar
bgcolor = ["cornsilk"];
COMPANY_NAME = new label
value = "My Company";
itemlocation = [["within", "TOOL_BAR"]]; 
TB_SPACER = new spacer
itemlocation = [["within", "TOOL_BAR"], ["below", "COMPANY_NAME"]];
SUBMIT_BUTTON  = new button
value = "Submit Form";
type = "submit";
url = ["http://www.server.com/cgi-bin/formProcessor"];
itemlocation = [["within", "TOOL_BAR"], ["below", "TB_SPACER"]];
CANCEL_BUTTON  = new button
type = "cancel";
itemlocation = [["within","TOOL_BAR"], ["after", "SUBMIT_BUTTON"]];
STATUS_EVENT = new ma_event
active = "off";
ma_id = "UF45567 \t /home/users/preferences01";
fontinfo = [<font name>, <point size>, <weight>, <effects>, 
                  <form>];
value = "Sample expression";
value = field_one.value;
value = "Sample " +. field_two.value;

datagroup = [<datagroup reference1>, ... <datagroup referencen>];
fontinfo = [<font name>, <point size>, <weight>, 
                  <effects>, <form>];
activated = "<status>";

saveButton = new button
type = "save";
value = "Save";
bgcolor = [activated=="on" ? "white" : "LightPink3"];
     }

    The button will appear white when the user activates it, and gray 
    otherwise.

   Usage Notes
 
    1) Default: off

    2) Any pre-defined setting for activated, including a formula 
       setting, will be destroyed as soon as the first activated event 
       appears. The activated option is not intended to be set by UFDL 
       script, but rather by external forces-a form viewing program, 
       for example. 

    3) activated is set to on when an item is activated, and remains 
       on until any transaction initiated by the item is properly under
       way. For example, in a print button, activated will be turned on
       when the user initiates the print action, and will remain on 
       until network results indicate the print action is taking place.
    
    4) The activated option is not included in form descriptions that 
       are saved or transmitted.

    5) Specific details on activated behavior for each item:

       *      action - actions set activated to on when they fire, and 
         off when the transaction they initiate is under way.

       *      button - buttons set activated to maybe when the user 
         holds the mouse pointer or SPACE bar down on the button. They 
         set it to on if the user releases the pointer or SPACE bar 
         while over the button, and they set activated to off when the 
         transaction the button initiates is under way.

       *      cell - cells behave in the same manner as buttons. In the
         split second during which a user selects a select type of 
         cell, it sets activated to on. It turns activated off as soon 
         as the action of being selected is finished. Cells that 
         initiate network transactions set activated to on from the 
         beginning of the request to the time when the request produces
         results. Note that there is no maybe status for a cell.
       *      combobox and popup - comoboxes and popup lists set 
         activated to on when their lists are popped open, and off when
         the lists are not open. Note that the "field" portion of a 
         combobox does not register an activated setting.

       *      page - a page sets activated to on while it is displayed 
         on screen, and off when it is not.
  
       *      form - a form sets activated to on while it is displayed 
         on screen, and off when it is not.
active = <status>;

active = "on";

bgcolor = [<color name>];
bgcolor = [<RGB triplet>]; 
bgcolor = ["forest green"];
bgcolor = ["34", "139", "34"];
bgcolor = ["transparent"];

bordercolor = [<color name>];
bordercolor = [<RGB triplet>]; 
bordercolor = ["light blue"];
bordercolor = ["173", "216", "230"];

borderwidth = <width>;

borderwidth = "5";

coordinates = [<X_coordinate>, <Y_coordinate>];

coordinates = ["180", "255"];

data = <data_item>;

encloseImageButton = new button
value = "Update Image";
type = "enclose";
data = "displayImage";
     }

    If a user enclosed another file, then the data item referred to in 
    the button's data option would be replaced with the new data item. 
    (The data item would use the same item tag-the one that's referred 
    to in the data option.)

   Usage Notes
    1) A data option may specify only zero or one data items.

    2) If an item with a type setting of enclose and a data option is 
       used to enclose a second data item, then the second data item 
       will replace the first.

    3) If an enclosure mechanism is used to replace an image stored in 
       a data item with a new image (see above), then buttons, labels, 
       and tablets whose image option is set to the identifier of the 
       image data item will be updated to display the new image.

    4) A data item referred to in a data option may also have a 
       datagroup option and thus belong to the datagroups of other 
       actions, buttons, or cells.
datagroup = [<datagroup reference1>, ... <datagroup referencen>];
datagroup = ["Business_Letters", "Personal_Letters", 
                 "Form_Letters"];
delay = [<repeat factor>, <interval>];

delay = ["once", "900"];

editstate = <edit state>;

editstate = "readonly";

filename = <file name>;

filename = "std_logo.frm";

focused = "<status>";

saveButton = new button 
type = "save";
value = "Save";
bgcolor = [focused=="on" ? "white" : "blue"];
     }

   Usage Notes

    1) Default: off

    2) Any pre-defined setting for focused, including a formula 
       setting, will be destroyed as soon as the first activated event 
       appears. The focused option is not intended to be set by UFDL 
       script, but rather by external forces-a form viewing program, 
       for example. 

    3) focused is set to on when an item, page, or form receives the 
       input focus, and is set to off when it does not.

    4) An object's focus does not change when the form application 
       displaying it becomes active or inactive on a desktop. For 
       example, a page that is open on screen will have a focus set 
       to on, even if the page is minimized or is not the currently 
       active application on the desktop.

    5) In objects that are hierarchical, it is possible for more than 
       one object to have the focus at one time. For example, a form, 
       a page, and a field can all be focused at the same time.

    6) When a form viewing application is closing a form, it should set
       all focus options to off and then resolve all formulas before 
       shutting down.

    7) focused may only be set by a desktop form viewing application.

    8) The focused option is not included in form descriptions that 
       are saved or transmitted.
fontcolor = [<color name>];
fontcolor = [<RGB triplet>]; 
fontcolor = ["210", "105", "30"];

fontinfo = [<font name>, <point size>, <weight>, <effects>, 
                 <form>];
fontinfo = ["Times", "14", "bold", "italic"];

format = [<data type>, <format flag>, <check flag>];
format = ["integer", "comma_delimit", range=["10", "1000"]];

format = ["dollar", "mandatory", message= "Entry incorrect-try 
              again."];

format = ["date", "long"];

format = ["string", template=["###-###-####", 
              "###-###-####-###"] ];

format = ["string", page1.allowIncompleteCheck=="on" ? "optional"
              : "mandatory"];

presentation="yy/mm/dd"  Available only when formatting dates, to 
                             create custom template for presentation 
                             of dates, using Y for year, M for month, 
                             and D for day
                             - Example: "date", presentation= 
                               "YY/MM/DD"
                               * this could yield 98/12/23
  
range=["low","high"]     The field's value must be in the range 
                             specified. The range can be alphabetic, 
                             numeric, days of the week, days of the 
                             month, or months.
                             Ranges cannot vary from high to low. For 
                             example, 10 to one, the year 2000 to 1900,
                             etc. are invalid.
    
length=["min","max"]     Restrict the length of the formatted input
                             data to a minimum of "min" bytes and a 
                             maximum of "max" bytes.

template=["a","b",...]   This is a list of formats permitted for 
                             the field. There is no restriction on the 
                             number of formats. Field contents must 
                             match one of the formats in the list. You 
                             may use any of the following wild card 
                             characters:
	                     -?- represents any one (1) character?
	                     -*- represents any number of characters
	                     -#- represents any one (1) numeric 
                                 character
	                     -%- represents any number of numeric 
                                 characters
	                     -@- represents any one (1) alphabetic 
                                 character
                             -!- represents any number of alphabetic 
                                 characters (which can include none)
message="help"           Sets the error message that is displayed 
                             if the user input fails the type checking.
                             The default message is, "This entry is 
                             invalid. Please try again."

template="a*" creates such a situation. Data cannot be both an 
group = <group reference>;
group = "coverage_type";

help = <item reference>;

help = "page_1.general_help";
image = <item reference>;

image = "page_lst.company_logo";

itemlocation = [[<specification1>], ... [<specificationn>]];
itemlocation = [["absolute", "60", "60"]];

itemlocation = [["absolute", "60", "100"],
itemlocation = [["below", "persInfo_label"],
persInfo_label = new label
value = "Personal Information";
itemlocation = [["absolute", "20", "30"]];
     }

    Example 2 - Offsetting an Item

    These samples show two ways in which to offset a field below the 
    label in example one. The first sample shows how to do so using 
    only the absolute positioning scheme. The second sample shows how 
    to do so using both relational and absolute positioning schemes.
lastName_field = new field
label = "Last Name";
itemlocation = [["absolute", "20", "100"],
lastName_field = new field
label = "Last Name";
itemlocation = [["below", "persInfo_label"],
itemlocation = [["alignvertbetween", "label_one", "label_two"]];

itemlocation = [["alignl2c", "the_firm"], ["expandr2r", 
                   "the_firm"]];

itemlocation = [["within", "main_toolbar"], ["below",
                   "company_logo"]];

itemlocation = [["absolute", "10", "10"], ["extent", "300", 
                   "30"]];

itemlocation = [["below", "field_1"], ["extent", "100", "20"]];

justify = <alignment>;

justify = "center";

label = <label text>;

label = "Student Registration Form";

label = "This label spans\ntwo lines.";
labelbgcolor = [<color name>];
labelbgcolor = [<RGB triplet>];
labelbgcolor = ["red"];
labelbgcolor = ["255", "0", "0"];
labelbgcolor = ["transparent"];

labelbordercolor = [<color name>];
labelbordercolor = [<RGB triplet>];
labelbordercolor = ["blue1"];
labelbordercolor = ["0", "0", "255"];

labelborderwidth = <width>;

labelborderwidth = "15";

labelfontcolor = [<color name>];
labelfontcolor = [<RGB triplet>]; 
labelfontcolor = ["green1"];
labelfontcolor = ["0", "255", "0"];

labelfontinfo = [<font name>, <point size>, <weight>, <effects>,
                      <form>];
labelfontinfo = ["Palatino", "12", "underline"];

mimedata = <data>;
mimedata =
empSignature = new signature
       {
signformat = "application/uwi_form";
signer = "Jane D Smith, jsmith@insurance.com";
signature = "PAGE1.empSignature";
signitemrefs = ["omit", "PAGE1.mgrSigButton", 
signoptions = ["omit", "triggeritem", "coordinates"];
mimedata = "MIIFMgYJKoZIhvcNACooIIFIzCCBR8CAQExDzANBgkg"
	    "AQUFADALB\ngkqhkiG9w0BBwGgggQZMCA36gAwSRiADjdhfHJl"
	    "6hMrc5DySSP+X5j\nANfBGSOI\n9w0BAQQwDwYDVQQHEwhJbn"
            "Rlcm5ldDEXMBUGA1UEChM\nOVmVyaVNpZ24sIEluYy4xNDAKn"
	    "1ZlcmlTaWduIENsYXNzIDEgQ0Eg\nLSJbmRdWFsIFN1YnNjcmliy"
	    "ZXIwHhcNOTgwMTI3MwMDAwOTgwM\M1OTU5WjCCARExETA";
       }

mimetype = <MIME type>;

mimetype = "image/gif";

mouseover = "<status>";
saveButton = new button
type = "save";
value = "Save";
bgcolor = [mouseover=="on" ? "white" : "blue"];
     }

   Usage Notes

    1) Default: off

    2) An object's mouseover option is set to on when the mouse pointer
       is over the object, and to off when the mouse pointer is not 
       over the object.

    3) A page global mouseover option is set to on when the mouse 
       pointer is over the page (even if it is also over an item on 
       the page).

    4) A mouseover option in a toolbar is set to on when the mouse 
       pointer is over the toolbar (even if it is also over an item 
       in the toobar).

    5) The mouseover option is not included in form descriptions that 
       are is saved or transmitted.
next = <item reference>;

next = "address_field";

previous = <item reference>;

previous = "date_field";

printsettings = [<page list>, <dialog settings>];
pages=["keep"|"omit", "<page tag 1>", "<page tag 2>", ...]

dialog=[active="on"|"off", orientation="portrait"|"landscape", copies="1"]

printsettings=[pages=["omit", "page2"], dialog=["on", 
orientation="landscape", copies="2"]];

saveformat = <MIME type>;

encoding=\"gzip\""   UFDL format

save_button = new button
type = "save";
saveformat = "application/x-www-form-urlencoded";
     }

    When a user clicks this button, the form will be converted to HTML 
    format (see Usage Note 3 below) and saved to the user's drive.

    Example 2 - Compressed UFDL format in form global characteristics

    This example shows how to use saveformat as a form global 
    characteristic and to specify that the saved form be compressed.
version = "3.2.0";
bgcolor = ["ivory"];
saveformat = "application/uwi_form; content-encoding = \"gzip\"";

page_1 = new page
version = "3.2.0";
bgcolor = ["ivory"];
saveformat = "application/uwi_form; content-encoding = \"gzip\"";

page_1 = new page
save_button = new button
type = "save";
value = "Save Form";
saveformat = "application/uwi_form";
scrollhoriz = <option>;

scrollhoriz = "always";

scrollvert = <option>;

scrollvert = "fixed";

signature = <name of signature>;
							   
signature = "mysig";

signdatagroups = [<datagroup filter>, <datagroup reference>,
                       ... <datagroup referencen>];
signdatagroups = ["keep", "Business_Letters"];

signer = <identity of user>;

signer = "John Smith jsmith@acme.org";

signformat = "<MIMEtype>;csp=\"<csp>\";csptype=<csptype>;
hashalg=<alg>";

empSigButton = new button
type = "signature";
value = signer;
format = ["string", "mandatory"];
signformat = "application/uwi_form;csp=\"Microsoft Base 
     Cryptographic Provider v1.0\";csptype=rsa_full;hashalg=sha1";
signoptions = ["omit", "triggeritem", "coordinates"];
signitemrefs = ["omit", "PAGE1.mgrSigButton", 
                        "PAGE1.admSigButton", "PAGE1.empSignature",
                        "PAGE1.mgrSignature", "PAGE1.admSignature"];
signature = "empSignature";
     }

   Usage Notes

    1) A UFDL Viewer automatically copies the signformat option from a 
       signature button to its associated signature item.

    2) You must escape the quotation marks around the name of the 
       cryptographic service provider. Escape them using the 
       backslash (\).

    3) The list below describes the settings you may use for the 
       csptype parameter. (Note that you may also use a numeric value, 
       as described below the table.)

       Setting         Meaning
       rsa_full        Full RSA implementation (this is the default)
       rsa_sig         For a CSP that supplies only RSA signature 
                       algorithms
       dss             For a CSP that supplies algorithms compliant 
                       with the Digital Signature Standard
       dss_dh          For a CSP that supplies DSS compliant algorithms 
                       and Diffie-Hellman encryption
       fortezza        For a CSP that supplies Fortezza algorithms

    4) Instead of using one of the settings in the table above for 
       csptype, you may use the numeric value that is defined for it in
       the cryptographic API. For example, csptype=dss and csptype=3 
       produce the same result.
signgroups = [<group filter>, <group reference>, ... 
                   <group referencen>];
signgroups = ["omit", "yesnoradiobuttons", "monthlypaycells"];

signitemrefs = [<item filter>, <item reference>, ... 
                     <item referencen>];
signitemrefs = ["omit", "field1", "page1.field2"];

signitems = [<item filter>, <item type>, ... <item typen>];
signitems = ["keep", "box", "button", "field"];

signoptionrefs = [<option filter>, <option reference>, ... 
                       <option referencen>];
signoptionrefs = ["keep", "page1.field1.value"];
							  
signoptions = [<option filter>, <option type>, ... 
                    <option typen>];
signoptions = ["omit", "url", "printsettings"];

signoptions = ["omit", "triggeritem", "coordinates"];
       
size = [<width>, <height>];

size = ["80", "5"];

thickness = <thickness>;

size = ["40", "0"];
thickness = "5";

size = ["0", "20"];
thickness = "10";

transmitdatagroups = [<transmit flag>, <datagroup identifier1>,
                       ... <datagroup identifiern>];
transmitdatagroups = ["keep", "enclosures"];
 
transmitdatagroups = ["omit", "other"];
transmitformat = <MIME_type>;

encoding=\"gzip\""   format
send_button = new button
type = "done";
url = ["mailto:user@host.domain"];
transmitformat = "application/uwi_form";
     }

    When a user clicks the button, the entire form definition will be 
    submitted, unless other transmit options specify a partial 
    submission.

    Example 2 - Compressed UFDL format specified in form global

    This example shows how to use the transmitformat option as a form 
    global option. Here, it specifies that data should be submitted in 
    compressed UFDL format.
version = "3.2.0";
bgcolor = ["ivory"];
transmitformat = "application/uwi_form; content-encoding=\"gzip\"";

page_1 = new page
status_action = new action
type = "submit";
url = ["http://www.host.domain/cgi-bin/recvStatus"];
transmitformat = "application/x-www-form-urlencoded";
delay = ["repeat", "180"];
     }

    Every 180 seconds, the form definition will be converted to HTML 
    form format as specified in Usage Note 4. Other transmit options 
    could override the choice of items to include in an HTML form 
    (see Usage Notes 5 and 6).

   Usage Notes

    1) Default: UFDL format (not compressed)

    2) You can include this option as a form global option and in the 
       definitions of items that trigger form submissions. These items 
       have a type option setting of submit or done.

    3) HTML Format by Item Type
       The general syntax of a submitted HTML form is:
       <item reference>=<value>&< item reference>=<value>&...
       Note: the ampersand separates form items.
 
       The syntax of an HTML form entry by item type:

    Item Type           HTML Format
    check               <item tag>=<value option setting>
    field               <item tag>=<value option setting>
    list                <item tag>=
                        <value option setting of selected cell>
                        Note: <item reference> identifies the list.
    popup               <item tag>=
                        <value option setting of selected cell>
                        Note: <item reference> identifies the popup.
    radio               <group option setting>=
                        <item tag of selected radio>
    <custom>            <item tag>=<value option setting>
    all other items     <item tag>=<value option setting>

      Note: combo boxes are not supported in HTML.
 
    Substitutions and Omissions: 
transmitformat = "application/x-www-form-urlencoded";
transmitoptions = ["omit", "value"];

transmitgroups = [<transmit flag>, <group identifier1>, 
                   ... <group identifiern>];
transmitgroups = ["keep", "countries", "departments"];

transmitgroups = ["omit", "fillType"];

transmititemrefs = [<transmit flag>, <item identifier1>, 
                     ... <item identifiern>];
transmititemrefs = ["keep", "page1.MgrSignButton"];

transmititems = ["omit", "button"];
transmititemrefs = ["keep", "page1.MgrSignButton"];

transmititems = [<transmit flag>, <item type1>, ... <item typen>];
transmititems = ["omit", "box", "help", "spacer", "toolbar"];

transmitoptionrefs = [<transmit flag>, <option identifier1>, 
                       ... <option identifiern>];
transmitoptions = ["omit", "value"];
transmitoptionrefs = ["keep", "page1.NameField.value"];

transmititemrefs = ["omit", "MgrSignButton"];
transmitoptionrefs = ["keep", "page1.MgrSignButton.signature"];

transmitoptions = [<transmit flag>, <option identifier1>, 
                    ... <option identifiern>];
transmitoptions = ["keep", "active", "mimedata", "value"];

triggeritem = <item reference>;

triggeritem = "Page_one.submit_button";
type = <task type>;

type = "save";

url = [<the URL1>, <the URL2>, ... <the URLn>];
url = ["http://www.host.domain/cgi-bin/recv_status"];
url = ["#page_2.expense_field"];

value = <setting>;

value = "My Form Title";

value = "This value spans\ntwo lines.";

version = <version>;

version = "3.2.0";

sql_query = ["SELECT NAME FROM EMPLOYEE WHERE ID = "];

LOGO_IMAGE = new label
image = "LOGO_DATA";
LOGO_DATA = new data
mimedata = "<image data>";
LOGO_IMAGE = new label
image = "LOGO_DATA";
LOGO_DATA = new data
mimedata = "<image data>";
image = "LOGO_DATA";
LOGO_DATA = new data
mimedata = "<image data>";
LOGO_IMAGE = new label
image = "LOGO_DATA";
LOGO_DATA = new data
mimedata = "<image data>";
version = "4.0.0";

page1 = new page
field1 = new field
label = "Field 1";
format = ["string", "mandatory"];
value = "high";
label = "Field 2";
format = ["string", "mandatory"];
status_option = toggle(field1.value, "high", "low");
value = status_option=="1"?"Declined":"";
str_length = strlen("This is a literal string");

str_length = strlen(surnameField.value);

auto_set = set("statusField.value", "Confirmed.");

commentField = new field
label = "Comments";
itemlocation = [["below", "deptField"]];
size = ["50", countLines(value, "50")];
     }

    In the example above, the field's height will be set by the number 
    that countLines returns. The calculation is based on a 
    dynamically-generated value, and the field's set width (50).
replaceField = new field
label = "Test replace()";
format = ["string", "mandatory"];
id_value = replace(value, "3", "6", "east");
     }

    The result of replace in the above example would be "Go east, 
    young man!".
stringLengthField = new field
label = "The length of this label is:";
format = ["string", "mandatory"];
value = strlen(label);
     }

    The result of strlen in the above example would be "28".
testStrmatch = new field
label = "Test strmatch()";
format = ["string", "mandatory"];
value = "To be or not to be, etc.";
id_value = strmatch("?o be* ?o be*", value);
     }

    The result of strmatch in the above example would be "1".
testStrpbrk = new field
label = "testField";
format = ["string", "mandatory"];
value = "To be or not to be, etc.";
id_value = strpbrk(value, "lLmMnNoOpP");
     }

    The result of strpbrk in the above example would be "9".
testStrrstr = new field
label = "testField";
format = ["string", "mandatory"];
value = "To be or not to be, etc.";
id_value = strrstr(value, "be");
     }

    The result of strrstr in the above example would be "16".
testStrstr = new field
label = "testField";
format = ["string", "mandatory"];
value = "To be or not to be, etc.";
id_value = strstr(value, "be");
     }

    The result of strstr in the above example would be "3".
surnameField = new field
label = "Surname";
format = ["string", "mandatory"];
value = "Watson";
id_value = substr(value, "0", "4");
     }

    The result of substr in the above example would be "Watso".
tolowerField = new field
label = "Type in Here";
format = ["string", "mandatory"];
value = "Hello!";
id_value = tolower(value);
     }

    The result of tolower in the above example would be "hello!".
toupperField = new field
label = "Type in Here";
format = ["string", "mandatory"];
value = "Hello!";
id_value = toupper(value);
     }

    The result of toupper in the above example would be "HELLO!".
trimField = new field
label = "     Test trim()  ";
format = ["string", "mandatory"];
value = trim(label);
     }

    The result of trim in the above example would be "Test trim()".
URLDecodeField = new field 
label = " Test URLDecode";
format = ["string", "mandatory"];
value = URLDecode("This%20is%20a%20line%0D");
     }

    The result of URLDecode in the above example would be "This is a 
    line\r".
URLEncodeField = new field
label = " Test URLEncode";
format = ["string", "mandatory"];
     }

    The result of URLEncode in the above example would be 
    "This%20is%20a%20line%0D".
absTest = new field
label = "Test abs";
format = ["string", "mandatory"];
value = abs("-2341.23");
     }

    The result of abs in the above example would be "2341.23".
arccosineField = new field
label = " Test acos";
format = ["string", "mandatory"];
value = acos("0.5");
     }

P = R * annuity_factor          R = P / annuity_factor

presentValueInv = new field
label = "The present value to invest is:";
format = ["string", "mandatory"];
value = paymentField.value * annuity(".05", "7");
     }

    In the example above, annuity would return "5.786373", and, if the 
    desired payment entered into paymentField were $1, then the value 
    of presentValueInv would be $5.78. (That is, a person would have 
    to invest $5.78 at 5% for seven payments.)
arcsineField = new field
label = " Test asin";
value = asin("0.5");
     }

    The result of asin in the above example would be "0.523599".
arctangentField = new field
label = " Test atan";
format = ["string", "mandatory"];
value = atan("0.5");
     }

    The result of atan in the above example would be "0.463648".
ceilingTest = new field
label = "Test ceiling";
format = ["string", "mandatory"];
value = ceiling("-19.6");
     }

    The result of ceiling in the above example would be "-19".
totalAmountField = new field
label = "Total Amount of Loan";
format = ["string", "mandatory"];
value = principleField.value * compound(".1", "7");
     }

    The result of compound in the above example would be "1.948717". 
    The value of the field would then be 1.948717 x the amount in the 
    field called principleField.
cosineField = new field 
label = " Test cos";
format = ["string", "mandatory"];
value = cos("2");
     }
     
    The result of cos in the above example would be "-0.416147".
deg2radField = new field
label = " Test deg2rad";
format = ["string", "mandatory"];
value = deg2rad("114.591559");
     }

    The result of deg2rad in the above example would be "2.00000".
expTest = new field
label = "Test exp";
format = ["string", "mandatory"];
value = exp("3");
     }

    The result of exp in the above example would be "1.098612".
factTest = new field
label = "Test fact";
format = ["string", "mandatory"];
value = fact("8");
     }

    The result of fact in the above example would be "40320".
floorTest = new field
label = "Test floor";
format = ["string", "mandatory"];
value = floor("-19.6");
     }

    The result of floor in the above example would be "-20".
lnTest = new field
label = "Test ln";
format = ["string", "mandatory"];
value = ln("1");
     }

    The result of ln in the above example would be "0".
logTest = new field
label = "Test log";
format = ["string", "mandatory"];
value = log("100", "10");
     }

    The result of log in the above example would be "2".
modTest = new field
label = "Test mod";
format = ["string", "mandatory"];
value = mod("-3.5", ".3");
     }

    The result of mod in the above example would be "-0.200000".
piTest = new field
label = "Test pi";
format = ["string", "mandatory"];
value = pi();
     }

    The result of pi in the above example would be "3.14159265359" 
    (precision is machine-dependent).
powerTest = new field
label = "Test power";
format = ["string", "mandatory"];
value = power("0.1", "-2");
     }
 
    The result of power in the above example would be "100.00000".
rad2degField = new field
label = " Test rad2deg";
format = ["string", "mandatory"];
value = rad2deg("2");
     }

    The result of rad2deg in the above example would be "114.591559".
randTest = new field
label = "Test rand";
format = ["string", "mandatory"];
value = rand("45", "90");
     }

    The result of rand in the above example would be an integer in the 
    range [45,90].
roundTest = new field
label = "Test round";
format = ["string", "mandatory"];
value = round("-323.235", ".01");
     }

    The result of round in the above example would be "-323.2400".
sineField = new field
label = " Test sin";
format = ["string", "mandatory"];
value = sin("2");
     }

    The result of sin in the above example would be "0.909297".
label = "Test sqrt";
format = ["string", "mandatory"];
value = sqrt("19.5"); 
     }

    The result of sqrt in the above example would be "4.415880".
tanField = new field
label = " Test tan";
format = ["string", "mandatory"];
value = tan("2");
     }

    The result of tan in the above example would be "-2.185040".
anTest = new field
label = "Test applicationName";
value = applicationName();
     }

    The result of applicationName in the above example, if the form 
    were running in an application named "Viewer", would be "Viewer".
avTest = new field
label = "Test applicationVersion";
format = ["string", "mandatory"];
value = applicationVersion();
     }

    The result of applicationVersion in the above example, if running 
    in an application at version 3.2.4, would be "03.02.04".
avnTest = new field
label = "Test applicationVersionNum";
format = ["string", "mandatory"];
value = applicationVersionNum();
     }

    The result of applicationVersionNum in the above example, if 
    running in an application at version v3.2.4, would be "50463744",
    which is the decimal representation of 0x03020400.
decimalTest = new field
label = "Test decimal";
format = ["string", "mandatory"];
value = decimal("-4a", "16");
     }

    The result of decimal in the above example would be "-74".
Field1 = new field
label = "Field 1";
format = ["dollar", "add_ds", "comma_delimit"];
value = "";
     }
Field2 = new field
label = "Field 2";
format = ["string", "mandatory"];
value = formatString(Field3.value, "Field1.format");
     }
Field3 = new field
label = "Field 3";
     ]

    The result of formatString in Field2 would be $30,095.60.
	
     //Example 2
Field4 = new field
value = "$1.00";
format = ["dollar"];
backend_value = formatString(value,"backend_format");
backend_format = ["integer"];
Field1 = new field
label = "Test isValidFormat1";
format = ["integer", "mandatory"];
value = "45";
     }
Field2 = new field
label = "Test isValidFormat2";
format = ["string", "mandatory"];
value = isValidFormat("23.2", "Field1.format");
     }

    The result of isValidFormat in the above example would be "0" 
    because the string to check contains a non-integer number 
    representation and the specified format to check is of type 
    integer.
field1 = new field
label = "Test set 1";
format = ["string", "mandatory"];
value = "gold";
     }
field2 = new field
label = "Test set 2";
format = ["string", "mandatory"];
value = set("field1.value", "silver");
     }
 
    The result of set in the above example would be "1" and the value 
    of field1 would be set to "silver".
timeStampField = new field
value = toggle(nameField.value)=="1"?now():"";
label = "Time Stamp";
editstate = "readonly";
     }

nameField = new field
value = "";
     }	

    In the example above, toggle has just a <reference> parameter. 
    Every time the nameField's value changes, toggle will return "1", 
    and then a new time will be entered into timeStampField, using 
    the now function.

noChoiceAllowed = new check
label = "Simple Application - No Choices";
value = "off";
logic_1 = toggle(noChoiceAllowed.value, "off", "on")
			== "1" ? set("option1.value", "off") + 
			set("option2.value", "off") + 
			set("option3.value", "off") : "";
     }

    In the example above, toggle is used to change form behavior based 
    on whether the noChoiceAllowed check box is checked. When the 
    check's value changes from off to on, toggle will return a "1". 
    That will trigger the decision set up in the logic_1 option - thus 
    the items called option1, option2, and option3 will become 
    deselected (their values will be off). Normally, you would also set
    their active options to be off, but to save room, this example 
    omits that step.
dateTest = new field
label = "Test date";
format = ["string", "mandatory"];
value = date();
     }

    The result of date in the above example, if run on January 18th, 
    1998, would be "19980118".
dtsTest = new field
label = "Test dts";
format = ["string", "mandatory"];
value = dateToSeconds("980319", "09:39:16");
     }

    The result of dateToSeconds in the above example would be 
    "89030056"
dayTest = new field
label = "Test day";
format = ["string", "mandatory"];
value = day("890300356");
     }

    The result of day in the above example would be "19".
label = "Test dayOfWeek";
format = ["string", "mandatory"];
value = dayOfWeek("890300356");
     }

    The result of dayOfWeek in the above example would be "5".
eomTest = new field
label = "Test endOfMonth";
format = ["string", "mandatory"];
value = endOfMonth("890300356");
     }

    The result of endOfMonth in the above example would be "891337156".
hourTest = new field
label = "Test hour";
format = ["string", "mandatory"];
value = hour("890300356");
     }

    The result of hour in the above example would be "9".
minuteTest = new field
label = "Test minute";
format = ["string", "mandatory"];
value = minute("890300356");
     }

    The result of minute in the above example would be "39".
monthTest = new field
label = "Test month";
format = ["string", "mandatory"];
value = month("890300356");
     }

    The result of month in the above example would be "3".
nowTest = new field
label = "Test now";
format = ["string", "mandatory"];
value = now();
     }

    The result of now in the above example, if run at 09:39:16 GMT on 
    Thursday, March 19th, 1998 would be "890300356".
secondTest = new field
label = "Test second";
format = ["string", "mandatory"];
value = second("890300356");
     }

    The result of second in the above example would be "16".
timeTest = new field
format = ["string", "mandatory"];
value = time();
     }
    The result of time in the above example, if run at 3:22 in the 
    afternoon, would be "3:22:PM".
yearTest = new field
label = "Test year";
format = ["string", "mandatory"];
value = year("890300356");
     }

    The result of year in the above example would be "1998".
bgcolor = ["<R value>","<G value>", 
                                      "<B value>"];
bordercolor = ["<R value>","<G value>", 
                                          "<B value>"];
fontcolor = ["<R value>","<G value>", 
labelbgcolor = ["<R value>","<G value>", 
labelbordercolor = ["<R value>","<G value>",
labelfontcolor = ["<R value>","<G value>", 
orientation = portrait
copies = 1
label_1=(struct label*)malloc
fontcolor=["blue"];
value=strdup("This is a          value="This is a literal string";
ping_action = new action
delay = ["repeat", "120"];
type = "submit";
url = ["http://www.server.domain/cgi-bin/status"];
