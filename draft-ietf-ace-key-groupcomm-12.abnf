gname = tstr

permissions = uint . bits roles

roles = &(
      Requester: 1,
      Responder: 2,
      Monitor: 3,
      Verifier: 4
scope_entry = AIF_Generic<gname, permissions>

scope = << [ + scope_entry ] >>

       Figure 4: Example CDLL definition of scope, using the default
                      Authorization Information Format

gname = tstr

role = tstr

scope_entry = [ gname , ? ( role / [ 2*role ] ) ]

scope = << [ + scope_entry ] >>

      Figure 5: CDLL definition of scope, using as example group name
                      encoded as tstr and role as tstr
sign_info_req = nil

sign_info_res = [ + sign_info_entry ]

sign_info_entry =
pub_key_enc = int / nil
gname = tstr

id = bstr

role = tstr

comb_role = [ 2*role ]

inclusion = bool

get_pub_keys = null / [ [ inclusion, *(role / comb_role) ], [ *id ] ]

      Figure 6: CDLL definition of get_pub_keys, using as example node
                identifier encoded as bstr and role as tstr

scope = h'826667726F7570316673656E646572'
N_S = h'018a278f7faab55a'
N_C = h'25a8991cd700ac01'


scope = 0x4f826667726F7570316673656E646572
N_S = 0x48018a278f7faab55a
N_C = 0x4825a8991cd700ac01

gname = tstr

permissions = uint . bits roles

roles = &(
      Requester: 1,
      Responder: 2,
      Monitor: 3,
      Verifier: 4
scope_entry = AIF_Generic<gname, permissions>

scope = << [ + scope_entry ] >>

semantics = int

sequence = [semantics, scope]

extended_scope = #6.TBD_TAG(<< sequence >>)

       Figure 28: Example CDLL definition of scope, using the default
                      Authorization Information Format
gname = tstr

role = tstr

scope_entry = [ gname , ? ( role / [ 2*role ] ) ]

scope = << [ + scope_entry ] >>

semantics = int

sequence = [semantics, scope]

extended_scope = #6.TBD_TAG(<< sequence >>)

      Figure 29: CDLL definition of scope, using as example group name
                      encoded as tstr and role as tstr

sign_info_entry =
pub_key_enc = int / nil
gname = tstr

              Figure 30: 'sign_info_entry' with general format
