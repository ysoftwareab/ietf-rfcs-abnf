


Internetworking Over NBMA (ion) Working Group
INTERNET DRAFT: <draft-ietf-ion-mib-01.txt>                 Maria Greene
Expiration Date: August, 1997                     Independent Contractor

                                                           James Luciani
                                                            Bay Networks

                                                           Kenneth White
                                                            Ted T.I. Kuo
                                                               IBM Corp.

                                                           February 1997

                   Definitions of Managed Objects for
               Classical IP and ARP Over ATM Using SMIv2

                      <draft-ietf-ion-mib-01.txt>


Status of this Memo

  This document is an Internet Draft. Internet Drafts are working
  documents of the Internet Engineering Task Force (IETF), its Areas,
  and its Working Groups. Note that other groups may also distribute
  working documents as Internet Drafts.

  Internet Drafts are draft documents valid for a maximum of six
  months. Internet Drafts may be updated, replaced, or obsoleted by
  other documents at any time. It is not appropriate to use Internet
  Drafts as reference material or to cite them other than as a "working
  draft" or "work in progress."

  Please check the I-D abstract listing contained in each Internet
  Draft directory to learn the current status of this or any Internet
  Draft. Distribution of this document is unlimited.

Abstract

  The purpose of this memo is to define the Management Information Base
  (MIB) for supporting Classical IP and ARP over ATM as specified in
  Classical IP and ARP over ATM, refer to
  reference [3]. Support of an ATM interface by an IP layer
  will require implementation of objects from several Managed
  Information Bases (MIBs) as well as their enhancement in order
  to enable usage of ATM transports. It is the intent of this MIB to
  fully adhere to all prerequisite MIBs unless explicitly stated.
  Deviations will be documented in corresponding conformance statements.
  The specification of this MIB will utilize the



Expires August 1997                                             [Page 1]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


  Structure of Management Information (SMI) for Version 2 of the
  Simple Network Management Protocol Version (refer to RFC1902,
  reference [1]).


  Table of Contents

  1.0 Introduction............................................. 2
  2.0 The SNMPv2 Network Management Framework.................. 3
  2.1 Object Definitions....................................... 4
  3.0 Structure of the MIB..................................... 4
  3.1 Basic Support MIB Definitions............................ 5
  3.1.1 ATM Logical IP Subnet (LIS) Table...................... 5
  3.1.2 ATM Logical IP IF Mapping Table........................ 6
  3.1.3 ATMARP Remote Server Table............................. 6
  3.1.4 ATM VC Table........................................... 7
  3.1.5 Notifications.......................................... 7         .
  3.2 Client Supported MIB Definitions......................... 7
  3.2.1 ATMARP Client Table.................................... 8
  3.3 Server Supported MIB Definitions......................... 9
  3.3.1 ATMARP Server Table.................................... 9
  3.3.2 Notifications.......................................... 9
  4.0 Definitions.............................................. 10
  5.0 Security Considerations.................................. 32
  6.0 Acknowledgments.......................................... 32
  7.0 References............................................... 32
  8.0 Authors' Addresses....................................... 34


1.  Introduction

  This document is a product of the Internetworking Over NBMA Working
  Group. Its purpose is to define a MIB module for extending the
  traditional MIBs supported by a TCP/IP implementation to support
  Classical IP and ARP over ATM.

  Many MIB related RFCs and Internet Drafts have been considered in the
  development of this document. The ones that are considered central to
  the extensions defined by this document are:

         o RFC 2011 -  SNMPv2 Management Information Base for the
                   Internet Protocol using SMIv2 [10]. The IP over ATM
                   MIB provides extensions to the IP Group for handling
                   IP over ATM flows. A basic understanding of the IP
                   Group is essential for understanding this document.

         o RFC 1573 - Interfaces Group Evolution [2]. This document is
                   important since it provides several very useful



Expires August 1997                                             [Page 2]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


                   enhancements over the interface group defined in RFC
                   1213 that aid in handling ATM related interfaces.

         o RFC 1695 - Definitions of Managed Objects for ATM Management
                   [4].  Support of this MIB is required for
                   implementing the layers between AAL5 and ATM. The
                   contents of this MIB will not explicitly be address
                   here. RFC 1695 provides a basis for managing ATM
                   interface layering and management of:

                            - ATM Switched Virtual Connections (SVCs)
                            - ATM Permanent Virtual Connections (PVCs)


  The ATM Forum UNI ILMI MIB is specified by the ATM Forum in various
versions of the UNI specification. The ILMI MIBs being defined are not
supported via SNMP agents but via SNMP requests sent over an ATM network
to an ATM entity encapsulated in an AAL5 header.  Support of the ILMI
MIB(s) is considered out of the scope of this document.



2.  The SNMPv2 Network Management Framework

  The SNMP Network Management Framework presently consists of three
  major components.  They are:

  o the SMI, described in RFC 1902 [1], - the mechanisms used for
    describing and naming objects for the purpose of management.

  o the MIB-II, STD 17, RFC 1213 [5], - the core set of managed
    objects for the Internet suite of protocols.

  o the protocol, RFC 1157 [9] and/or RFC 1905 [7] - the protocol
    for accessing managed information.

  Textual conventions are defined in RFC 1903 [6], and conformance
  statements are defined in RFC 1904 [8].

  The Framework permits new objects to be defined for the purpose of
  experimentation and evaluation.

  This memo specifies a MIB module that is compliant to the SNMPv2 SMI.
  A semantically identical MIB conforming to the SNMPv1 SMI can be
  produced through the appropriate translation.






Expires August 1997                                             [Page 3]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


2.1.  Object Definitions

  Managed objects are accessed via a virtual information store, termed
  the Management Information Base or MIB.  Objects in the MIB are
  defined using the subset of Abstract Syntax Notation One (ASN.1)
  defined in the SMI.  In particular, each object object type is named
  by an OBJECT IDENTIFIER, an administratively assigned name.  The
  object type together with an object instance serves to uniquely
  identify a specific instantiation of the object.  For human
  convenience, we often use a textual string, termed the descriptor, to
  refer to the object type.



3.  Structure of the MIB

  The Classical ARP and IP over ATM MIB structure is split into three
  components:

    o Basic Support MIB Definitions
    o Client Supported MIB Definitions
    o ATMARP Server MIB Definitions

  All IP and ARP over ATM entities, both clients and ATMARP servers, are
  required to support the MIB definitions in the Basic Support MIB
  Definitions section. Clients need to additionally support the MIB
  definitions outlined in the Client specific section and ATMARP Servers
  must additionally support the ATMARP Server specific MIB definitions.

  Implementation of the Definitions of Managed Objects for ATM
  Management [4] defines the modeling of the various layers within an
  ATM Interface. This modeling is assumed as a prerequisite for the IP-
  ATM MIB. The IP-ATM MIB makes no assumptions on how this layering is
  actually implemented within a system. Several of the MIB tables
  defined by the IP-ATM MIB, like the base TCP/IP MIBs, requires that an
  ifIndex exist that points to an ATM Interface.  Refer to the
  Definitions of Managed Objects for ATM Management (RFC 1695) for the
  definition of an ATM Interface interface layering.

  The use of an IP over ATM Virtual Interface layer is not explicitly
  required by the IP-ATM MIB. The use of virtual layers above an RFC1695
  defined interface layer is not absolutely necessary for modeling the
  attachment of IP to an ATM network. The IP-ATM MIB uses a generic
  ifIndex that must related to a ATM Physical Interface in its MIB
  definitions.  It up to the implementers of this MIB to determine their
  own ATM interface layering (assuming compliance with RFC 1573 and RFC
  1695).  The IANA ifType propVirtual was created for this purpose and
  is used in RFC 1695.



Expires August 1997                                             [Page 4]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


3.1.  Basic Support MIB Definitions

  Basic support that must be implemented by both Clients and ATMARP
  Servers consist of:

    o ATM Logical IP Subnet (LIS) Table
    o ATM Logical IP IF Mapping Table
    o ATMARP Remote Server Table
    o ATM VC Table
    o Notifications


3.1.1.  ATM Logical IP Subnet (LIS) Table

  The ATM Logical IP Subnet (LIS) Table defines the subnets that this
  system is a member of for purposes of reaching destinations over a ATM
  transport.  The LIS table is indexed by the subnet address
  (ipAtmLisSubnetAddr) and not ifIndex.  The ipAtmLisIfMappingTable
  described in the next section provides the mapping between Logical IP
  Subnets and the interface layer. It is possible that the same LIS can
  be reached via different ATM physical interfaces.

  The ipAddrTable and the ipAtmClientTable provides the mapping from a
  local IP address to a ATM physical interface. One or more ipAddrTable
  entries can point to the same ipAtmLisEntry. An ipAddrEntry's
  ipAdEntAddr ANDed with its ipAdEntNetMask should equal an
  ipAtmLisEntry's ipAtmLisSubnetAddr. Given that a interface can be
  multi-homed each local IP address associated with an interface
  requires an entry in the ipAddrTable. Each ipAddrTable entry for a
  local IP address associated with a ATM physical interface should map
  to an entry in the ipAtmLisTable.

  The bulk of the objects in a ipAtmLisEntry exists to control ATMARP
  for a particular LIS:

         ipAtmLisInactivityTimer
         ipAtmLisMinHoldingTime
         ipAtmLisQDepth
         ipAtmLisMaxCalls
         ipAtmLisCacheEntryAge
         ipAtmLisRetries
         ipAtmLisTimeout

  An ipAtmLisMaxCalls defines the maximum number of VCs that can be
  established simultaneously per LIS. An ipAtmLisDefaultPeakCellRate
  defines the best effort default peak cell rate in both the forward and
  backwards direction when establishing a VCCs.




Expires August 1997                                             [Page 5]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


  The ipAddrTable's ipAdEntReasmMaxSize is the "The size of the largest
  IP datagram which this entity can re-assemble from incoming IP
  fragmented datagrams received on this interface" and is different from
  the ipAtmLisTable's ipAtmLisDefaultMtu with is the default MTU used
  within an LIS. Note that this is the default MTU used within the LIS
  represented by this entry. Note that this is the default MTU not the
  actual which is represented as ipAtmVcNegotiatedMtu in the
  ipAtmVcTable.

  The ipAtmLisRowStatus object enables entries in the ipAtmLisTable to
  be created or deleted via SNMP. Creation of an ipAtmLisTable entry
  results in the adding of a corresponding ipAddrTable entry and a
  ipAtmLisIfMappingTable entry. Creation of multiple ipAddrTable entries
  and ipAtmLisIfMappingTable entries for the same LIS is not addressed
  by this document.  When ipAtmLisRowStatus is changed from 'active(1)'
  to 'notInService(2)' or from 'active(1)' to 'destroy(6)', this has
  the side-effect of removing all entries from the ipNetToMediaTable
  that are associated with this LIS (in other words, it flushes the
  entity's ATMARP cache). It also removes the ipAtmVcTable entries that
  were associated with those ipNetToMediaTable entries. Destroying the
  row removes the corresponding entries in the ipAtmArpSrvrTable,
  ipAtmArpClientTable, ipAtmLisIfMappingTable and the
  ipAtmArpRemoteSrvrTable.


3.1.2.  ATM Logical IP IF Mapping Table

  The ipAtmLisIfMappingTable maps a LIS to all ATM physical interfaces
  that it is configured to be supported from. Each entry in the
  ipAtmLisIfMappingTable should map to a ipAddrTable entry.  It is also
  possible for a system, most commonly a switch, to have multiple LISes
  associated with the same ATM physical interface.


3.1.3.  ATMARP Remote Server Table

  Entries in the ipAtmArpRemoteSrvrTable exists to locally configure the
  remote ATMARP Servers that exist on a per LIS basis. Classic2 requires
  that at least one ATMARP server be configured per LIS where SVC
  traffic is intended. PVC usage doesn't require use of ATMARP. No
  ipAtmArpRemoteSrvrTable entries should be configured for a LIS where
  only PVCs will be used. An entry in the ipAtmArpRemoteSrvrTable is
  indexed by the subnet address of the LIS, ipAtmLisSubnetAddr, and the
  ATM address of the remote ATMARP server, ipAtmArpRemoteSrvrAddr.

  If a PVC is intended to be used to communicate with a remote ATMARP
  server then ipAtmArpRemoteSrvrVpi and ipAtmArpRemoteSrvrVci need to be
  set when the entry is created.  Otherwise they will be filled in when
  a SVC is established with the remote ATMARP server.


Expires August 1997                                             [Page 6]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


3.1.4.  ATM VC Table

  A entry in the ipAtmVcTable should have at least one corresponding
  ipNetToMediaTable entry.  Both tables use the ipNetToMediaTable's
  indexes ipNetToMediaIfIndex and ipNetToMediaNetAddress.  The
  ipAtmVcTable has the additional indexes ipAtmVcVpi and ipAtmVcVci. A
  ipAtmVcEntry exists for every VC per ATM physical interface per
  destination IP address.  Refer to the following diagram that
  illustrates the relationship between ipAtmVcTable and the
  ipNetToMediaTable:

         ipAtmVcTable                        ipNetToMediatable
       -------------------------------     ----------------------------
        ipNetToMediaIfIndex               ipNetToMediaIfIndex      
        ipNetToMediaNetAddress            ipNetToMediaNetAddress   
        ipAtmVcVpi                                                 
        ipAtmVcVci                                                 
        ipAtmVcType                                                
                                          ipNetToMediaPhysAddress  
        ipAtmVcNegotiatedEncapsType                                
        ipAtmVcNegotiatedMtu                                       
        ipAtmVcRowStatus                                           
                                          ipNetToMediaType         
       -------------------------------     ----------------------------

  ipAtmVcType indicates if the entry is for a SVC or PVC. A ipAtmVcEntry
  corresponding to a PVC would have to have its ipAtmVcVpi and
  ipAtmVcVci configured. The associating ipNetToMediaTable entry would
  have its ipNetToMediaType set to static(4). ipNetToMediaTable entries
  created during the ATMARP processing have a ipNetToMediaType of
  dynamic(3).  It is possible to locally configure a ipNetToMediaTable
  entry and a ipAtmVcTable entry for a SVC without using ATMARP.  For
  this situation the ipNetToMediaType would be static(4).


3.1.5.  Notifications

  Both ATM clients and ATMARP Servers must support generation of a
  ipAtmMtuExceed notification.


3.2.  Client Supported MIB Definitions

  The ATMARP Client Table is the only additional MIB table that a client
  must implement.






Expires August 1997                                             [Page 7]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


3.2.1.  ATMARP Client Table

  A entry in the ipAtmArpClientTable should have a corresponding
  ipAddrTable entry where both are indexed by the same ipAdEntAddr.
  Refer to the following diagram that illustrates the relationship
  between ipAtmArpClientTable and ipAddrTable entries:

         ipAtmArpClientTable                      ipAddrTable
       ------------------------------------     ------------------------
        ipAdEntAddr                             ipAdEntAddr         
                                                ipAdEntNetMask      
                                                ipAdEntIfIndex      
        ipAtmArpClientAtmAddr                                       
        ipAtmArpClientSrvrInUse                                     
        ipAtmArpClientInArpReqsIn                                   
        ipAtmArpClientInArpReqsOut                                  
        ipAtmArpClientInArpRepliesIn                                
        ipAtmArpClientInArpRepliesOut                               
        ipAtmArpClientInArpInvalidReqsIn                            
        ipAtmArpClientInArpInvalidReqsOut                           
        ipAtmArpClientArpReqsOut                                    
        ipAtmArpClientArpRepliesIn                                  
        ipAtmArpClientArpNaksIn                                     
        ipAtmArpClientArpOpUnknown                                  
        ipAtmArpClientArpSrvrNoResp                                 
        ipAtmArpClientRowStatus                                     
                                                ipAdEntBcastAddr    
                                                ipAdEntReasmMaxSize 
       ------------------------------------     ------------------------

  Both tables use the same index, ipAdEntAddr.  The ipAddrTable's
  ipAdEntNetMask when ANDed with its ipAdEntAddr yield the subnet of the
  LIS which indexes the ipAtmLisTable. The ipAddrTable's ipAdEntIfIndex
  points to the a physical interface ifTable entry.  The attachment
  point for IP into an ATM network is via an ATM interface's ifIndex.
  This ifIndex is contained in an ipAddrTable entry.

  ipAtmArpClientAtmAddr is the local ATM address associated with the
  corresponding ATM ifTable entry. ipAtmArpClientSrvrInUse is the ATM
  address of the ATMARP server being used for aparticular client. If
  SVCs are not being used then the value of this object is 0.

  It is sometimes possible for a system to have multiple IP addresses
  configured within the same IP subnet. The indexing of this table would
  seem to preclude that, however, it is possible to have additional
  entries in the ipAddrTable with the same ifIndex and with the same
  subnet address. The mechanism for adding these entries to the
  ipAddrTable (which is read-only) is beyond the scope of this document.



Expires August 1997                                             [Page 8]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


3.3.  Server Supported Objects

  ATMARP servers must support:

    o ATMARP Server Table
    o Notifications

  as defined in the following sections. This table exists only on a
  system where at least one ATMARP server is present.


3.3.1.  ATMARP Server Table

  This table defines the list of ATMARP servers within a LIS. Each entry
  of the table defines each ATMARP server's ATM address, the LIS it is a
  member of, and various InATMARP and ATMARP statistics.

  An entry in this table provides information about an ATMARP server
  within a LIS and is indexed by ipAdEntAddr and the ipAtmArpSrvrAddr
  (ATM address of the ATMARP server).

  Entries may be created by a management application using the
  ipAtmArpSrvrRowStatus object. In an SVC environment, the
  ipAtmArpSrvrAddr must be specified before the entry's
  ipAtmArpSrvrRowStatus can be set to 'active(1)'. In a PVC environment,
  the ipAtmArpSrvrVpi and ipAtmArpSrvrVci values must also be specified;
  these values are the VPI/VCI of a PVC that was established using some
  mechanism outside the scope of this MIB module (generally RFC1695, the
  AToM MIB).  Entries in this table may also be created by the system
  and not by a management application, for example as a result of ILMI.

  Entries in this table may be deleted by setting the
  ipAtmArpSrvrRowStatus object to 'destroy(6)'. This includes entries
  that were added by the system and not by a management application.


3.3.2.  Notifications

  An ATMARP Server must support the following notifications:

       o ipAtmDuplicateIpAddress
       o ipAtmLisCreate
       o ipAtmLisDelete

  Generation of ipAtmLisCreate and ipAtmLisDelete notifications is
  controlled by the ipAtmLisTrapEnable object. These notifications
  indicated when a ipAtmLisEntry is either created or deleted. The
  purpose of these notifications is to enable Network Management



Expires August 1997                                             [Page 9]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


  Applications to dynamically discover the existence of ATMARP Server
  LIS participation in order to eventually determine LIS composition via
  subsequent SNMP queries.  It is permissible for a ATM client only
  system to support the ipAtmLisTrapEnable object and generate
  ipAtmLisCreate and ipAtmLisDelete notifications.


4.  Definitions


  IP-ATM-MIB DEFINITIONS ::= BEGIN

  IMPORTS
      MODULE-IDENTITY, OBJECT-TYPE, NOTIFICATION-TYPE,
      experimental, Integer32, IpAddress, Counter32
          FROM SNMPv2-SMI
      TEXTUAL-CONVENTION, RowStatus
          FROM SNMPv2-TC
      MODULE-COMPLIANCE, OBJECT-GROUP, NOTIFICATION-GROUP
          FROM SNMPv2-CONF
      AtmAddr, AtmConnKind
          FROM ATM-TC-MIB
      ipNetToMediaNetAddress, ipNetToMediaIfIndex,
      ipNetToMediaPhysAddress, ipAdEntAddr, ipAdEntAddr
          FROM RFC1213-MIB
      ;

  ipAtmMIB MODULE-IDENTITY
      LAST-UPDATED "9703010000Z" -- March 1, 1997
      ORGANIZATION "IETF Internetworking Over NBMA Working Group (ion)"
      CONTACT-INFO
          "Maria Greene (greene@ultranet.com)
           Independent Contractor

           Jim Luciani (jluciani@BayNetworks.com)
           Bay Networks

           Kenneth White (kennethw@vnet.ibm.com)
           Ted Kuo (tkuo@eos.ncsu.edu)
           IBM Corp."
      DESCRIPTION
          "This module defines a portion of the management
          information base (MIB) for managing Classical IP and ARP
          over ATM entities."  -- Need to get an "official" experimental
  number from IANA
      ::= { experimental 2001 }

  -- *************************************************************** --



Expires August 1997                                            [Page 10]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


  Textual Conventions --
  ***************************************************************

  IpAtmEncapsType ::= TEXTUAL-CONVENTION
      STATUS      current
      DESCRIPTION
          "The encapsulation type used on a VC."
      SYNTAX      INTEGER {
                      llcSnap(1),
                      vcMuxed(2),
                      other(3)
                  }

  IpAtmVpiInteger ::= TEXTUAL-CONVENTION
      STATUS     current
      DESCRIPTION
          "An integer large enough to hold a VPI."
      SYNTAX     Integer32 (0..255)

  IpAtmVciInteger ::= TEXTUAL-CONVENTION
      STATUS     current
      DESCRIPTION
          "An integer large enough to hold a VCI."
      SYNTAX     Integer32 (0..65535)

  --
  -- Top-level structure of the MIB
  --

  ipAtmObjects        OBJECT IDENTIFIER ::= { ipAtmMIB 1 }
  ipAtmNotifications  OBJECT IDENTIFIER ::= { ipAtmMIB 2 }
  ipAtmConformance    OBJECT IDENTIFIER ::= { ipAtmMIB 3 }

  -- ***************************************************************
  -- MIB Objects
  --
  ***************************************************************

  ipAtmLisTrapEnable  OBJECT-TYPE
      SYNTAX      INTEGER { enabled(1), disabled(2) }
      MAX-ACCESS  read-write
      STATUS      current
      DESCRIPTION
         "Indicates whether ipAtmLisCreate and ipAtmLisDelete
          traps should be generated by this system.

          By default, this object should have the value
          enabled(1) for systems where ATMARP servers are
          present and disabled(2) on systems where only
          clients reside."
      ::= { ipAtmObjects 1 }



Expires August 1997                                            [Page 11]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


  --
  -- The Logical IP Subnet Table
  --

  ipAtmLisTable OBJECT-TYPE
      SYNTAX      SEQUENCE OF IpAtmLisEntry
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "There is one entry in this table for every Logical IP Subnet
          (LIS) that this system is a member of."
      ::= { ipAtmObjects 2 }

  ipAtmLisEntry OBJECT-TYPE
      SYNTAX      IpAtmLisEntry
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "Information about a single LIS that this system is a member
          of.

          This table is indexed by an IP subnet address.

          Membership in a LIS is independent of the actual ATM
          physical interfaces being used. The ipAtmLisTable defines
          all LISes that a system is a member of. The ipAddrTable
          and the ipAtmClientTable provides the mapping from local
          IP address to ATM physical interface. The
          ipAtmLisIfMappingTable provides the mappings between
          Logical IP Subnets and interfaces.

          The ipAtmLisTable is indexed by ipAtmLisSubnetAddr.
          An entry in the ipAddrTable should exist for each
          ipAddrEntry that is associated with an IP over ATM
          interface. Its ipAdEntAddr and ipAdEntNetMask when ANDed
          should map to a ipAtmLisSubnetAddr."
      INDEX       { ipAtmLisSubnetAddr }
      ::= { ipAtmLisTable 1 }

  IpAtmLisEntry ::= SEQUENCE {
      ipAtmLisSubnetAddr          IpAddress,
      ipAtmLisDefaultMtu          Integer32,
      ipAtmLisDefaultEncapsType   IpAtmEncapsType,
      ipAtmLisInactivityTimer     Integer32,
      ipAtmLisMinHoldingTime      Integer32,
      ipAtmLisQDepth              Integer32,
      ipAtmLisMaxCalls            Integer32,
      ipAtmLisCacheEntryAge       Integer32,
      ipAtmLisRetries             Integer32,
      ipAtmLisTimeout             Integer32,
      ipAtmLisDefaultPeakCellRate Integer32,


Expires August 1997                                            [Page 12]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


      ipAtmLisActiveVcs           Counter32,
      ipAtmLisRowStatus           RowStatus }

  ipAtmLisSubnetAddr OBJECT-TYPE
      SYNTAX      IpAddress
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "The IP subnet address associated with this LIS."
      ::= { ipAtmLisEntry 1 }

  ipAtmLisDefaultMtu OBJECT-TYPE
      SYNTAX      Integer32 (0..65535)
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "The default MTU used within this LIS. Note that the actual
          size used for a VC between two members of the LIS may be
          negotiated during connection setup and may be different than
          this value. The ipAtmVcNegotiatedMtu object indicates the
          actual MTU in use for a particular VC."
      DEFVAL { 9180 }
      ::= { ipAtmLisEntry 2 }

  ipAtmLisDefaultEncapsType OBJECT-TYPE
      SYNTAX      IpAtmEncapsType
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "The default encapsulation to use on VCs created for this
          LIS. Note that the actual encapsulation type may be negotiated
          during connection setup and may be different than this
          value. The ipAtmVcNegotiatedEncapsType object indicates the
          actual encapsulation in use for a particular VC."
      DEFVAL { llcSnap }
      ::= { ipAtmLisEntry 3 }

  ipAtmLisInactivityTimer OBJECT-TYPE
      SYNTAX      Integer32 (0..65535)
      UNITS       "seconds"
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "The time, in seconds, before a call established for an
          ipNetToMediaEntry on a client will timeout due to no
          traffic being passed on the VC. A value of 0 implies
          no time out."
      REFERENCE
          "RFC1755, Sec. 3.4 VC Teardown"


Expires August 1997                                            [Page 13]

Greene et al.           IP and ARP over ATM MIB         19 February 1997

      DEFVAL      { 300 }
      ::= { ipAtmLisEntry 4 }

  ipAtmLisMinHoldingTime OBJECT-TYPE
      SYNTAX      Integer32 (0..65535)
      UNITS       "seconds"
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "The minimum amount of time, in seconds, that a call will
           remain open. If 0 then ipAtmInactivityTimer will
           completely determine when a call is terminated."
      DEFVAL      { 60 }
      ::= { ipAtmLisEntry 5 }

  ipAtmLisQDepth OBJECT-TYPE
      SYNTAX      Integer32 (1..65535)
      UNITS       "packets"
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "The maximum number of entries that will be queued while
          waiting for an ATMARP reply."
      DEFVAL      { 1 }
      ::= { ipAtmLisEntry 6 }

  ipAtmLisMaxCalls OBJECT-TYPE
      SYNTAX      Integer32 (1..65535)
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "The maximum number of VCs that can be established
          simultaneously."
      DEFVAL      { 500 }
      ::= { ipAtmLisEntry 7 }

  ipAtmLisCacheEntryAge OBJECT-TYPE
      SYNTAX      Integer32 (60..900)
      UNITS       "seconds"
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "The time, in seconds, before an ipNetToMediaEntry will age
          out of the table. Note that the default value will be
          different for a client and a server."
      DEFVAL      { 900 }
      ::= { ipAtmLisEntry 8 }

  ipAtmLisRetries OBJECT-TYPE
      SYNTAX      Integer32 (0..10)
      MAX-ACCESS  read-create

Expires August 1997                                            [Page 14]

Greene et al.           IP and ARP over ATM MIB         19 February 1997

      STATUS      current
      DESCRIPTION
          "The number of times the ATMARP request will be retried when
          no response is received in the timeout interval indicated by
          ipAtmLisTimeout."
      DEFVAL      { 2 }
      ::= { ipAtmLisEntry 9 }

  ipAtmLisTimeout OBJECT-TYPE
      SYNTAX      Integer32 (1..60)
      UNITS       "seconds"
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "The time to wait, in seconds, before retransmission of an ARP
          PDU."
      DEFVAL      { 10 }
      ::= { ipAtmLisEntry 10 }

  ipAtmLisDefaultPeakCellRate OBJECT-TYPE
      SYNTAX Integer32
      MAX-ACCESS read-create
      STATUS current
      DESCRIPTION
          "This object is the signalling parameter that
           should be used when setting up all best effort
           VCCs. This parameter applies to the forward and
           backward direction on a per best effort VCC basis.
           A value of zero implies that no configured default
           exists and that local policy should be used to
           determine the actual default to used during
           call setup. ATM Signaling Support for IP over ATM
           (RFC 1755) recommends 1/10th of the ATM interface's
           speed."
      ::= { ipAtmLisEntry 11 }

  ipAtmLisActiveVcs OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "Number of active Vcs."
      ::= { ipAtmLisEntry 12 }

  ipAtmLisRowStatus OBJECT-TYPE
      SYNTAX      RowStatus
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "This object allows entries to be created and deleted in the
          ipAtmLisTable.

Expires August 1997                                            [Page 15]

Greene et al.           IP and ARP over ATM MIB         19 February 1997

          When the ipAtmLisRowStatus deleted (by setting this object to
          'destroy(6)'), this has the side-effect of removing all
          entries from the ipNetToMediaTable that are associated with
          this LIS (in other words, it flushes the entity's ATMARP
          cache). It also removes the ipAtmVcTable entries that were
          associated with those ipNetToMediaTable entries. Destroying
          the row also removes the corresponding entries in the
          ipAtmArpSrvrTable, ipAtmArpClientTable,
          ipAtmLisIfMappingTable and ipAtmArpRemoteSrvrTable."
      REFERENCE
          "RFC 1903, 'Textual Conventions for version 2 of the Simple
          Network Management Protocol (SNMPv2).'"
      ::= { ipAtmLisEntry 13 }

  --
  -- The Logical IP Interface Mapping Table
  --

  ipAtmLisIfMappingTable OBJECT-TYPE
      SYNTAX      SEQUENCE OF IpAtmLisIfMappingEntry
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "There is one entry in this table for every combination
           of ipAtmLisEntry and IP over ATM interface."
      ::= { ipAtmObjects 3 }

  ipAtmLisIfMappingEntry OBJECT-TYPE
      SYNTAX      IpAtmLisIfMappingEntry
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "Defines an entry in the ipAtmLisIfMappingTable."
      INDEX  { ipAtmLisSubnetAddr, ipAdEntIfIndex }
      ::= { ipAtmLisIfMappingTable 1 }

  IpAtmLisIfMappingEntry ::= SEQUENCE {
      ipAtmLisIfMappingStatus    RowStatus }

  ipAtmLisIfMappingStatus OBJECT-TYPE
      SYNTAX      RowStatus
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "This object allows entries to be created and deleted in the
          ipAtmLisIfMappingTable."
      REFERENCE
          "RFC 1903, 'Textual Conventions for version 2 of the Simple
          Network Management Protocol (SNMPv2).'"
      ::= { ipAtmLisIfMappingEntry 1 }


Expires August 1997                                            [Page 16]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


  --
  -- The ATMARP Client Table
  --

  ipAtmArpClientTable OBJECT-TYPE
      SYNTAX      SEQUENCE OF IpAtmArpClientEntry
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "The ATMARP clients running on this system."
      ::= { ipAtmObjects 4 }

  ipAtmArpClientEntry OBJECT-TYPE
      SYNTAX      IpAtmArpClientEntry
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "Information about a single ATMARP Client. Clients can be
          started and stopped by adding and removing entries from this
          table. Note that adding and removing entries from this table
          may have the same effect on the corresponding ipAddrTable
          entry. An entry in the ipAtmArpClientTable has a corresponding
          entry in the ipAddrTable. Both are indexed by ipAdEntAddr.
          The ifIndex and subnet mask of a client entry are the
          ipAddrEntry's ipAdEntIfIndex and ipAdEntNetMask respectively.
          A remote creation of an object in this table requires
          that either the corresponding ipAddrTable entry exists or
          that ipAdEntIfIndex and ipAdEntNetMask be specified in the
          creation of a ipAtmArpClientEntry at a minimum in order
          to create the corresponding ipAddrEntry. Specification
          of ipAdEntBcastAddr and ipAdEntReasmMaxSize to complete a
          ipAddrEntry is implementation dependent."
      INDEX       { ipAdEntAddr }
      ::= { ipAtmArpClientTable 1 }

  IpAtmArpClientEntry ::= SEQUENCE {
      ipAtmArpClientAtmAddr             AtmAddr,
      ipAtmArpClientSrvrInUse           AtmAddr,
      ipAtmArpClientInArpReqsIn         Counter32,
      ipAtmArpClientInArpReqsOut        Counter32,
      ipAtmArpClientInArpRepliesIn      Counter32,
      ipAtmArpClientInArpRepliesOut     Counter32,
      ipAtmArpClientInArpInvalidReqsIn  Counter32,
      ipAtmArpClientInArpInvalidReqsOut Counter32,
      ipAtmArpClientArpReqsOut          Counter32,
      ipAtmArpClientArpRepliesIn        Counter32,
      ipAtmArpClientArpNaksIn           Counter32,
      ipAtmArpClientArpOpUnknown        Counter32,
      ipAtmArpClientArpSrvrNoResp       Counter32,
      ipAtmArpClientRowStatus           RowStatus }



Expires August 1997                                            [Page 17]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


  ipAtmArpClientAtmAddr OBJECT-TYPE
      SYNTAX      AtmAddr
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "The ATM address of the client."
      ::= { ipAtmArpClientEntry 1 }

  ipAtmArpClientSrvrInUse OBJECT-TYPE
      SYNTAX      AtmAddr
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The ATM address of the ATMARP Server in use by this
           client. A 0 length octet string implies that communication
           with a ATMARP Server is not in effect."
      DEFVAL { ''H }
      ::= { ipAtmArpClientEntry 2 }

  ipAtmArpClientInArpReqsIn OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The number of InATMARP requests received by this client."
      ::= { ipAtmArpClientEntry 3 }

  ipAtmArpClientInArpReqsOut OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The number of InATMARP requests sent by this client."
      ::= { ipAtmArpClientEntry 4 }

  ipAtmArpClientInArpRepliesIn OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The number of InATMARP replies received by this client."
      ::= { ipAtmArpClientEntry 5 }

  ipAtmArpClientInArpRepliesOut OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION



Expires August 1997                                            [Page 18]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


          "Total number of InATMARP replies sent by this client."
      ::= { ipAtmArpClientEntry 6 }

  ipAtmArpClientInArpInvalidReqsIn OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The number of times that this client detected an invalid
           InATMARP request."
      ::= { ipAtmArpClientEntry 7 }

  ipAtmArpClientInArpInvalidReqsOut OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The number of times that this client did not receive
           a InATMARP reply."
      ::= { ipAtmArpClientEntry 8 }

  ipAtmArpClientArpReqsOut OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "Total number of ATMARP requests sent by this client."
      ::= { ipAtmArpClientEntry 9 }

  ipAtmArpClientArpRepliesIn OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "Total number of ATMARP replies received by this client."
      ::= { ipAtmArpClientEntry 10 }

  ipAtmArpClientArpNaksIn OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "Total number of negative ATMARP replies
           received by this client."
      ::= { ipAtmArpClientEntry 11 }

  ipAtmArpClientArpOpUnknown OBJECT-TYPE
      SYNTAX      Counter32



Expires August 1997                                            [Page 19]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The number of times that this client received
           an ATMARP message with an operation code for which it
           is not coded to support."
      ::= { ipAtmArpClientEntry 12 }

  ipAtmArpClientArpSrvrNoResp OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The number of times this client failed to receive
           a response from a ATMARP Server within the
           ipAtmLisTimeout value for ipAtmLisRetries times.
           This may imply that the client will re-elect a
           primary ATMARP server for this LIS from the
           ipAtmRemoteArpSrvrTable."
      ::= { ipAtmArpClientEntry 13 }

  ipAtmArpClientRowStatus OBJECT-TYPE
      SYNTAX      RowStatus
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "This object allows entries to be created and deleted from the
          ipAtmArpClientTable."
      REFERENCE
          "RFC 1903, 'Textual Conventions for version 2 of the Simple
          Network Management Protocol (SNMPv2).'"
      ::= { ipAtmArpClientEntry 14 }

  --
  -- The ATMARP Server Table
  --

  ipAtmArpSrvrTable OBJECT-TYPE
      SYNTAX      SEQUENCE OF IpAtmArpSrvrEntry
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "The ATMARP servers running on this system."
      ::= { ipAtmObjects 5 }

  ipAtmArpSrvrEntry OBJECT-TYPE
      SYNTAX      IpAtmArpSrvrEntry
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION



Expires August 1997                                            [Page 20]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


          "Information about an ATMARP server within a LIS. An entry in
          this table has two indexes: first the ipAdEntAddr, which is
          the IP address that this system uses as a member of the LIS,
          and then the ipAtmArpSrvrAddr, which is the ATM address of the
          ATMARP server.

          Entries may be created by a management application using the
          ipAtmArpSrvrRowStatus object. In an SVC environment, the
          ipAtmArpSrvrAddr must be specified before the entry's
          ipAtmArpSrvrRowStatus can be set to 'active(1)'. In a PVC
          environment, the ipAtmArpSrvrVpi and ipAtmArpSrvrVci values
          must also be specified; these values are the VPI/VCI of a PVC
          that was established using some mechanism outside the scope of
          this MIB module (generally RFC1695, the AToM MIB).  Entries in
          this table may also be created by the system and not by a
          management application, for example as a result of ILMI.

          Entries in this table may be deleted by setting the
          ipAtmArpSrvrRowStatus object to 'destroy(6)'. This includes
          entries that were added by the system and not by a management
          application."
      INDEX  { ipAdEntAddr, ipAtmArpSrvrAddr }
      ::= { ipAtmArpSrvrTable 1 }

  IpAtmArpSrvrEntry ::= SEQUENCE {
      ipAtmArpSrvrAddr                 AtmAddr,
      ipAtmArpSrvrLis                  IpAddress,
      ipAtmArpSrvrInArpReqsIn          Counter32,
      ipAtmArpSrvrInArpReqsOut         Counter32,
      ipAtmArpSrvrInArpRepliesIn       Counter32,
      ipAtmArpSrvrInArpRepliesOut      Counter32,
      ipAtmArpSrvrInArpInvalidReqsIn   Counter32,
      ipAtmArpSrvrInArpInvalidReqsOut  Counter32,
      ipAtmArpSrvrArpReqsIn            Counter32,
      ipAtmArpSrvrArpRepliesOut        Counter32,
      ipAtmArpSrvrArpNaksOut           Counter32,
      ipAtmArpSrvrArpDupIpAddr         Counter32,
      ipAtmArpSrvrArpOpUnknown         Counter32,
      ipAtmArpSrvrRowStatus            RowStatus }

  ipAtmArpSrvrAddr OBJECT-TYPE
      SYNTAX      AtmAddr
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "The ATM address of the ATMARP server."
      ::= { ipAtmArpSrvrEntry 1 }




Expires August 1997                                            [Page 21]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


  ipAtmArpSrvrLis OBJECT-TYPE
      SYNTAX      IpAddress
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "The subnet address that identifies the LIS this server is
          associated with."
      ::= { ipAtmArpSrvrEntry 2 }

  ipAtmArpSrvrInArpReqsIn OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The number of InATMARP requests received by this ATMARP
          server."
      ::= { ipAtmArpSrvrEntry 3 }

  ipAtmArpSrvrInArpReqsOut OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The number of InATMARP requests sent by this ATMARP server."
      ::= { ipAtmArpSrvrEntry 4 }

  ipAtmArpSrvrInArpRepliesIn OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The number of InATMARP replies received by this ATMARP
          server."
      ::= { ipAtmArpSrvrEntry 5 }

  ipAtmArpSrvrInArpRepliesOut OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The number of InATMARP replies sent by this ATMARP server."
      ::= { ipAtmArpSrvrEntry 6 }

  ipAtmArpSrvrInArpInvalidReqsIn OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION



Expires August 1997                                            [Page 22]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


          "The number of invalid InATMARP requests received by
           this ATMARP server."
      ::= { ipAtmArpSrvrEntry 7 }

  ipAtmArpSrvrInArpInvalidReqsOut OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The number of times that this server did not receive
           a InATMARP reply."
      ::= { ipAtmArpSrvrEntry 8 }

  ipAtmArpSrvrArpReqsIn OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "Total number of ATMARP requests received by this ATMARP
          server."
      ::= { ipAtmArpSrvrEntry 9 }

  ipAtmArpSrvrArpRepliesOut OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "Total number of ATMARP replies sent by this ATMARP server."
      ::= { ipAtmArpSrvrEntry 10 }

  ipAtmArpSrvrArpNaksOut OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "Total number of negative ATMARP replies sent by this
           ATMARP server."
      ::= { ipAtmArpSrvrEntry 11 }

  ipAtmArpSrvrArpDupIpAddr OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The number of times that a duplicate IP address was
           detected by this ATMARP server."
      ::= { ipAtmArpSrvrEntry 12 }




Expires August 1997                                            [Page 23]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


  ipAtmArpSrvrArpOpUnknown OBJECT-TYPE
      SYNTAX      Counter32
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The number of times that this ATMARP server received
           an ATMARP message with an operation code for which it
           is not coded to support."
      ::= { ipAtmArpSrvrEntry 13 }

  ipAtmArpSrvrRowStatus OBJECT-TYPE
      SYNTAX      RowStatus
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "This object allows entries to be created and deleted from the
          ipAtmArpSrvrTable."
      REFERENCE
          "RFC 1903, 'Textual Conventions for version 2 of the Simple
          Network Management Protocol (SNMPv2).'"
      ::= { ipAtmArpSrvrEntry 14 }

  --
  -- The Remote ATMARP Server Table
  --

  ipAtmArpRemoteSrvrTable OBJECT-TYPE
      SYNTAX      SEQUENCE OF IpAtmArpRemoteSrvrEntry
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "A table of non-local ATMARP servers associated with a LIS.
          An entry in this table has two indexes: first the
          ipAtmLisSubnetAddr of the LIS that the corresponding
          ATMARP server provides ATMARP services for, and then the
          ipAtmArpRemoteSrvrAddr, which is the ATM address of the
          remote ATMARP server."
      ::= { ipAtmObjects 6 }

  ipAtmArpRemoteSrvrEntry OBJECT-TYPE
      SYNTAX      IpAtmArpRemoteSrvrEntry
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "Information about one non-local ATMARP server."
      INDEX  { ipAtmLisSubnetAddr, ipAtmArpRemoteSrvrAddr }
      ::= { ipAtmArpRemoteSrvrTable 1 }

  IpAtmArpRemoteSrvrEntry ::= SEQUENCE {
      ipAtmArpRemoteSrvrAddr      AtmAddr,



Expires August 1997                                            [Page 24]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


      ipAtmArpRemoteSrvrVpi       IpAtmVpiInteger,
      ipAtmArpRemoteSrvrVci       IpAtmVciInteger,
      ipAtmArpRemoteSrvrRowStatus RowStatus }

  ipAtmArpRemoteSrvrAddr OBJECT-TYPE
      SYNTAX      AtmAddr
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "The ATM address of the remote ATMARP server."
      ::= { ipAtmArpRemoteSrvrEntry 1 }

  ipAtmArpRemoteSrvrVpi OBJECT-TYPE
      SYNTAX      IpAtmVpiInteger
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "The VPI of the VC between this system and the ATMARP
          server. In an SVC environment, this object may be implemented
          as read-only by the agent."
      ::= { ipAtmArpRemoteSrvrEntry 2 }

  ipAtmArpRemoteSrvrVci OBJECT-TYPE
      SYNTAX      IpAtmVciInteger
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "The VCI of the VC between this system and the ATMARP
          server. In an SVC environment, this object may be implemented
          as read-only by the agent."
      ::= { ipAtmArpRemoteSrvrEntry 3 }

  ipAtmArpRemoteSrvrRowStatus OBJECT-TYPE
      SYNTAX      RowStatus
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "This object allows entries to be created and deleted from the
          ipAtmArpRemoteSrvrTable."
      REFERENCE
          "RFC 1903, 'Textual Conventions for version 2 of the Simple
          Network Management Protocol (SNMPv2).'"
      ::= { ipAtmArpRemoteSrvrEntry 4 }

  --
  -- The VC Table
  --

  ipAtmVcTable OBJECT-TYPE
      SYNTAX      SEQUENCE OF IpAtmVcEntry



Expires August 1997                                            [Page 25]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "A system that support IP over ATM is an IP system and
          therefore must support all of the appropriate tables from
          RFC1213, MIB-II. This includes the ipNetToMediaTable (the ARP
          cache). This ipAtmVcTable keeps a set of VCs for each entry in
          the ARP cache that was put there by this IP over ATM system
          acting as either a host or server."
      ::= { ipAtmObjects 7 }

  ipAtmVcEntry OBJECT-TYPE
      SYNTAX      IpAtmVcEntry
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "A VC (permanent or switched) that this host or server has
          opened with another member of a LIS. Additional information
          can be determined about the VC from RFC1695, the AToM MIB.

          In an SVC environment, entries can usually not be created in
          this table by a management application, therefore the agent
          treats the ipAtmVcRowStatus object as not-accessible.

          In a PVC environment, the ipAtmVcVpi and ipAtmVcVci objects
          must be specified before the ipAtmVcRowStatus object can be
          set to 'active(1)'. The VPI/VCI values must correspond to
          those of a PVC established on the same interface indicated by
          the ipNetToMediaIfIndex using a mechanism outside the scope of
          this MIB (generally using RFC1695, the AToM MIB)."
      INDEX       { ipNetToMediaIfIndex,
                    ipNetToMediaNetAddress,
                    ipAtmVcVpi,
                    ipAtmVcVci
                  }
      ::= { ipAtmVcTable 1 }


  IpAtmVcEntry ::= SEQUENCE {
      ipAtmVcVpi                  IpAtmVpiInteger,
      ipAtmVcVci                  IpAtmVciInteger,
      ipAtmVcType                 AtmConnKind,
      ipAtmVcNegotiatedMtu        Integer32,
      ipAtmVcNegotiatedEncapsType IpAtmEncapsType,
      ipAtmVcRowStatus            RowStatus }

  ipAtmVcVpi OBJECT-TYPE
      SYNTAX      IpAtmVpiInteger



Expires August 1997                                            [Page 26]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "The VPI value for the Virtual Circuit."
      ::= { ipAtmVcEntry 1 }

  ipAtmVcVci OBJECT-TYPE
      SYNTAX      IpAtmVciInteger
      MAX-ACCESS  not-accessible
      STATUS      current
      DESCRIPTION
          "The VCI value for the Virtual Circuit."
      ::= { ipAtmVcEntry 2 }

  ipAtmVcType OBJECT-TYPE
      SYNTAX      AtmConnKind
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The type of the Virtual Circuit."
      ::= { ipAtmVcEntry 3 }

  ipAtmVcNegotiatedEncapsType OBJECT-TYPE
      SYNTAX      IpAtmEncapsType
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "The encapsulation type used when communicating over this
          circuit."
      ::= { ipAtmVcEntry 4 }

  ipAtmVcNegotiatedMtu OBJECT-TYPE
      SYNTAX      Integer32 (0..65535)
      MAX-ACCESS  read-only
      STATUS      current
      DESCRIPTION
          "The MTU used when communicating over this circuit."
      ::= { ipAtmVcEntry 5 }

  ipAtmVcRowStatus OBJECT-TYPE
      SYNTAX      RowStatus
      MAX-ACCESS  read-create
      STATUS      current
      DESCRIPTION
          "This objects allows rows to be created and deleted in the
          ipAtmVcTable."
      REFERENCE
          "RFC 1903, 'Textual Conventions for version 2 of the Simple



Expires August 1997                                            [Page 27]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


          Network Management Protocol (SNMPv2).'"
      ::= { ipAtmVcEntry 6 }

  -- ***************************************************************
  -- Notifications
  -- ***************************************************************

  ipAtmMtuExceeded NOTIFICATION-TYPE
      OBJECTS {
          ipNetToMediaIfIndex,
          ipNetToMediaNetAddress,
          ipAtmVcVpi,
          ipAtmVcVci
      }
      STATUS  current
      DESCRIPTION
          "A frame was received that exceeds the negotiated MTU size."
      ::= { ipAtmNotifications 1 }

  ipAtmDuplicateIpAddress NOTIFICATION-TYPE
      OBJECTS {
          ipNetToMediaIfIndex,
          ipNetToMediaNetAddress,
          ipNetToMediaPhysAddress,
          ipNetToMediaPhysAddress
      }
      STATUS  current
      DESCRIPTION
          "The ATMARP server has detected more than one ATM end point
          attempting to associate the same IP address with different ATM
          hardware addresses."
      ::= { ipAtmNotifications 2 }

  ipAtmLisCreate NOTIFICATION-TYPE
      OBJECTS {
          ipAtmLisSubnetAddr
      }
      STATUS  current
      DESCRIPTION
          "Generation of this trap occurs when a ipAtmLisEntry is
          created and ipAtmLisTrapEnable is enabled(1)."
      ::= { ipAtmNotifications 3 }

  ipAtmLisDelete NOTIFICATION-TYPE
      OBJECTS {
          ipAtmLisSubnetAddr
      }
      STATUS  current



Expires August 1997                                            [Page 28]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


      DESCRIPTION
          "Generation of this trap occurs when a ipAtmLisEntry is
          deleted and ipAtmLisTrapEnable is enabled(1)."
      ::= { ipAtmNotifications 4 }

  -- ***************************************************************
  -- Conformance Definitions
  -- ***************************************************************

  ipAtmGroups      OBJECT IDENTIFIER ::= { ipAtmConformance 1 }
  ipAtmCompliances OBJECT IDENTIFIER ::= { ipAtmConformance 2 }

  -- compliance statements ipAtmCompliance MODULE-COMPLIANCE
      STATUS  current
      DESCRIPTION
          "The compliance statement for agents that support the IP-ATM
          MIB."
      MODULE -- this module
          MANDATORY-GROUPS { ipAtmGeneralGroup,
                             ipAtmBasicNotificationsGroup
                }
          GROUP       ipAtmClientGroup
          DESCRIPTION
              "This group is mandatory for all hosts where ip over
              ATM client support is required."
          GROUP       ipAtmSrvrGroup
          DESCRIPTION
              "This group is mandatory for all hosts where ATMARP
              servers are present."
          GROUP       ipAtmSrvrNotificationsGroup
          DESCRIPTION
              "This group is mandatory for all hosts where ATMARP
              servers are present."

          OBJECT ipAtmLisDefaultMtu
              MIN-ACCESS  read-only
              DESCRIPTION
                  "The agent is not required to allow the user to change
                  the default MTU from the value 9180."

          OBJECT ipAtmLisDefaultEncapsType
              MIN-ACCESS  read-only
              DESCRIPTION
                  "The agent is not required to allow the user to
                  specify the default encapsulation type for the LIS."

          OBJECT ipAtmArpRemoteSrvrVpi
              MIN-ACCESS  read-only



Expires August 1997                                            [Page 29]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


              DESCRIPTION
                  "Implementations that do not support IP over ATM over
                  PVCs are not required to allow the user to specify the
                  VPI of the connection to the ATMARP server."

          OBJECT ipAtmArpRemoteSrvrVci
              MIN-ACCESS  read-only
              DESCRIPTION
                  "Implementations that do not support IP over ATM over
                  PVCs are not required to allow the user to specify the
                  VCI of the connection to the ATMARP server."

          OBJECT ipAtmLisDefaultPeakCellRate
              MIN-ACCESS  read-only
              DESCRIPTION
                  "Implementations that do not support IP over ATM over
                  PVCs are not required to allow the user to specify
                  a best effort default peak cell rate."

          OBJECT ipAtmVcRowStatus
              MIN-ACCESS  read-only
              DESCRIPTION
                  "Implementations that do not support IP over ATM over
                  PVCs are not required to allow entries in the
                  ipAtmVcTable to be created by the user."
      ::= { ipAtmCompliances 1 }

  -- units of conformance ipAtmGeneralGroup OBJECT-GROUP
      OBJECTS {
          ipAtmLisDefaultMtu,
          ipAtmLisDefaultEncapsType,
          ipAtmLisInactivityTimer,
          ipAtmLisMinHoldingTime,
          ipAtmLisQDepth,
          ipAtmLisMaxCalls,
          ipAtmLisCacheEntryAge,
          ipAtmLisRetries,
          ipAtmLisTimeout,
          ipAtmLisDefaultPeakCellRate,
          ipAtmLisActiveVcs,
          ipAtmLisRowStatus,
          ipAtmLisIfMappingStatus,
          ipAtmArpRemoteSrvrVpi,
          ipAtmArpRemoteSrvrVci,
          ipAtmArpRemoteSrvrRowStatus,
          ipAtmVcType,
          ipAtmVcNegotiatedEncapsType,
          ipAtmVcNegotiatedMtu,
          ipAtmVcRowStatus


Expires August 1997                                            [Page 30]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


      }
      STATUS  current
      DESCRIPTION
          "The required objects."
      ::= { ipAtmGroups 1 }

  ipAtmClientGroup OBJECT-GROUP
      OBJECTS {
          ipAtmArpClientAtmAddr,
          ipAtmArpClientSrvrInUse,
          ipAtmArpClientInArpReqsIn,
          ipAtmArpClientInArpReqsOut,
          ipAtmArpClientInArpRepliesIn,
          ipAtmArpClientInArpRepliesOut,
          ipAtmArpClientInArpInvalidReqsIn,
          ipAtmArpClientInArpInvalidReqsOut,
          ipAtmArpClientArpReqsOut,
          ipAtmArpClientArpRepliesIn,
          ipAtmArpClientArpNaksIn,
          ipAtmArpClientArpOpUnknown,
          ipAtmArpClientArpSrvrNoResp,
          ipAtmArpClientRowStatus
        }
      STATUS  current
      DESCRIPTION
          "This group is mandatory for all hosts where ip over
           ATM client support is required."
      ::= { ipAtmGroups 2 }

  ipAtmSrvrGroup OBJECT-GROUP
      OBJECTS {
          ipAtmLisTrapEnable,
          ipAtmArpSrvrLis,
          ipAtmArpSrvrInArpReqsIn,
          ipAtmArpSrvrInArpReqsOut,
          ipAtmArpSrvrInArpRepliesIn,
          ipAtmArpSrvrInArpRepliesOut,
          ipAtmArpSrvrInArpInvalidReqsIn,
          ipAtmArpSrvrInArpInvalidReqsOut,
          ipAtmArpSrvrArpReqsIn,
          ipAtmArpSrvrArpRepliesOut,
          ipAtmArpSrvrArpNaksOut,
          ipAtmArpSrvrArpDupIpAddr,
          ipAtmArpSrvrArpOpUnknown,
          ipAtmArpSrvrRowStatus
       }
      STATUS  current
      DESCRIPTION



Expires August 1997                                            [Page 31]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


          "This group is mandatory for all hosts where ATMARP
           servers are present."
      ::= { ipAtmGroups 3 }

  ipAtmBasicNotificationsGroup NOTIFICATION-GROUP
      NOTIFICATIONS {
            ipAtmMtuExceeded
         }
      STATUS        current
      DESCRIPTION
              "The notifications which an IP over ATM entity
              is required to implement."
      ::= { ipAtmGroups 4 }

  ipAtmSrvrNotificationsGroup NOTIFICATION-GROUP
      NOTIFICATIONS {
            ipAtmDuplicateIpAddress,
            ipAtmLisCreate,
            ipAtmLisDelete
         }
      STATUS        current
      DESCRIPTION
              "The notifications which an IP over ATM ATMARP server
              is required to implement."
      ::= { ipAtmGroups 5 }

  END


5.  Security Considerations

  Security issues are not discussed in this memo.


6.  Acknowledgments

  This document is a product of the Internetworking Over NBMA Working
  Group. The authors of this document would like to recognize Keith
  McCloghrie from Cisco Systems for his support as our mentor from the
  Network Management Area.


7.  References


[1]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and
     Waldbusser S., "Structure of Management Information for version 2
     of the Simple Network Management Protocol (SNMPv2)", RFC 1902,



Expires August 1997                                            [Page 32]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


     January 1996.


[2]  McCloghrie, K., and Kastenholtz, F., "Interfaces Group Evolution",
     RFC 1573, Hughes LAN Systems, FTP Software, January 1994.


[3]  Network Working Group, Laubach M., and Halpern J., "Classical IP
     and ARP over ATM", Internet Draft, November 26, 1996.


[4]  Ahmed, M., and Tesink, K., "Definitions of Managed Objects for ATM
     Management Version 8.0 using SMIv2", RFC 1695, Bell Communications
     Research, August 1994.


[5]  McCloghrie, K., and M. Rose, Editors, "Management Information Base
     for Network Management of TCP/IP-based internets: MIB-II", STD 17,
     RFC 1213, Hughes LAN Systems, Performance Systems International,
     March 1991.


[6]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and S.
     Waldbusser, "Textual Conventions for version 2 of the Simple
     Network Management Protocol (SNMPv2)", RFC 1903, January 1996.


[7]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and S.
     Waldbusser, "Protocol Operations for version 2 of the Simple
     Network Management Protocol (SNMPv2)", RFC 1905, January 1996.


[8]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and S.
     Waldbusser, "Conformance Statements for version 2 of the Simple
     Network Management Protocol (SNMPv2)", RFC 1904, January 1996.


[9]  Case, J., M. Fedor, M. Schoffstall, J. Davin, "Simple Network
     Management Protocol", RFC 1157, SNMP Research, Performance Systems
     International, MIT Laboratory for Computer Science, May 1990.


[10] Network Working Group, and McCloghrie K., "SNMPv2 MIB for IP", RFC
     2011, November 1996.







Expires August 1997                                            [Page 33]

Greene et al.           IP and ARP over ATM MIB         19 February 1997


8.  Authors' Addresses

  Maria N. Greene
  Independent Contractor
  E-mail: greene@ultranet.com

  James Luciani
  Bay Networks, Inc.
  3 Federal St., BL3-04
  Billerica, MA 01821, USA
  Phone: +1-508-439-4734
  E-mail: luciani@baynetworks.com

  Kenneth D. White
  Dept. G80/Bldg 503
  IBM Corporation
  Research Triangle Park, NC 27709, USA
  Phone: +1-919-254-0102
  E-mail: kennethw@vnet.ibm.com

  Ted T.I. Kuo
  Dept. JDG/Bldg 503
  IBM Corporation
  Research Triangle Park, NC 27709, USA
  Phone: +1-919-859-3524
  E-mail: tkuo@eos.ncsu.edu






















Expires August 1997                                            [Page 34]

