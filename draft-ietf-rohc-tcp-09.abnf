p=2^(k-1)-1.

control_fields  = ecn_used,           %[  1 ]
                     msn,                %[ 16 ]
                     ip_inner_ecn,       %[  2 ]
                     seq_number_scaled,  %[ 32 ]
                     seq_number_residue, %[ 32 ]
                     ack_stride,         %[ 16 ]
                     ack_number_scaled,  %[ 16 ]
                     ack_number_residue; %[ 16 ]


uc_format = field; %[ 32 ]

co_format_irreg_enc = field, %[ 32 ]
co_format_static_enc = field, %[ 0 ]
uc_format = field; %[ 16 ]

co_format_irreg_enc = field, %[ 16 ]
co_format_static_enc = field, %[ 0 ]
uc_format = field; %[ 8 ]

co_format_irreg_enc = field, %[ 8 ]
co_format_static_enc = field, %[ 0 ]
uc_format = field; %[ 32 ]

co_format_not_present = field, %[ 0 ]
co_format_8_bit = field, %[ 8 ]
co_format_16_bit = field, %[ 16 ]
co_format_32_bit = field, %[ 32 ]
uc_format = field; %[ 16 ]

co_format_not_present = field, %[ 0 ]
co_format_8_bit = field, %[ 8 ]
co_format_16_bit = field, %[ 16 ]
uc_format = item; % 0 or 32 bits

co_format_present = item, %[ 32 ]
co_format_not_present = item, %[ 0 ]
lsb_7_or_31 ===
uc_format = item; % 7 or 31 bits

co_format_lsb_7  = discriminator, %[ 1 ]
                        item,          %[ 7 ]
co_format_lsb_31 = discriminator, %[ 1 ]
                        item,          %[ 31 ]
uc_format = item; % 32 bits

co_format_present = item, % 8 or 32 bits
co_format_not_present = item, %[ 0 ]
uc_format = ;

co_format = crc_value, %[ 3 ]
uc_format = ;

co_format = crc_value, %[ 7 ]
ip_dest_opt ===
uc_format = next_header, %[ 8 ]
                 length,      %[ 8 ]
                 value;       % n bits

default_methods =
co_format_dest_opt_static = next_header, %[ 8 ]
                                 length,      %[ 8 ]
co_format_dest_opt_dynamic = value, % n bits
co_format_dest_opt_replicate_0 = discriminator, %[ 8 ]
co_format_dest_opt_replicate_1 = discriminator, %[ 8 ]
                                      length,        %[ 8 ]
                                      value,         % n bits
ip_hop_opt ===
uc_format = next_header, %[ 8 ]
                 length,      %[ 8 ]
                 value;       % n bits

default_methods =
co_format_hop_opt_static = next_header, %[ 8 ]
                                length,      %[ 8 ]
co_format_hop_opt_dynamic = value, % n bits
co_format_hop_opt_replicate_0 = discriminator, %[ 8 ]
co_format_hop_opt_replicate_1 = discriminator, %[ 8 ]
                                     length,        %[ 8 ]
                                     value,         % n bits
ip_rout_opt ===
uc_format = next_header, %[ 8 ]
                 length,      %[ 8 ]
                 value;       % n bits
default_methods =
co_format_rout_opt_static = next_header, %[ 8 ]
                                 length,      %[ 8 ]
                                 value,       % n bits
co_format_rout_opt_dynamic =
co_format_rout_opt_replicate_0 = discriminator, %[ 8 ]
co_format_rout_opt_replicate_1 = discriminator, %[ 8 ]
                                      length,        %[ 8 ]
                                      value,         % n bits
uc_format = value,     % 0 or 16 bits
                 reserved1; % 0 or 16 bits

co_format_cs_present = value,     %[ 16 ]
                            reserved1, %[ 0 ]
co_format_not_present = value,     %[ 0 ]
                             reserved1, %[ 0 ]
gre_proto ===
uc_format = protocol; %[ 16 ]

default_methods =
co_format_ether_v4 = discriminator, %[ 1 ]
co_format_ether_v6 = discriminator, %[ 1 ]
gre ===
uc_format = c_flag,           %[ 1 ]
                 r_flag,           %[ 1 ]
                 k_flag,           %[ 1 ]
                 s_flag,           %[ 1 ]
                 reserved0,        %[ 9 ]
                 version,          %[ 3 ]
                 protocol,         %[ 16 ]
                 checksum_and_res, % 0 or 32 bits
                 key,              % 0 or 32 bits
                 sequence_number;  % 0 or 32 bits

default_methods =
co_format_gre_static = protocol, %[ 1 ]
                            c_flag,   %[ 1 ]
                            r_flag,   %[ 1 ]
                            k_flag,   %[ 1 ]
                            s_flag,   %[ 1 ]
                            version,  %[ 3 ]
                            key,      % 0 or 32 bits
co_format_gre_dynamic = checksum_and_res, % 0 or 16 bits
                             sequence_number,  % 0 or 32 bits
co_format_gre_replicate_0 = discriminator,    %[ 8 ]
                                 checksum_and_res, % 0 or 16 bits
                                 sequence_number,  % 0, 8 or 32 bits
co_format_gre_replicate_1 = discriminator,    %[ 8 ]
                                 c_flag,           %[ 1 ]
                                 r_flag,           %[ 1 ]
                                 k_flag,           %[ 1 ]
                                 s_flag,           %[ 1 ]
                                 reserved,         %[ 1 ]
                                 version,          %[ 3 ]
                                 checksum_and_res, % 0 or 16 bits
                                 key,              % 0 or 32 bits
                                 sequence_number,  % 0 or 32 bits
co_format_gre_irregular = checksum_and_res, % 0 or 16 bits
                               sequence_number,  % 0, 8 or 32 bits
mine ===
uc_format = next_header, %[ 8 ]
                 s_bit,       %[ 1 ]
                 res_bits,    %[ 7 ]
                 checksum,    %[ 16 ]
                 orig_dest,   %[ 32 ]
                 orig_src;    %  0 or 32 bits

default_methods =
co_format_mine_static = next_header, %[ 8 ]
                             s_bit,       %[ 1 ]
                             res_bits,    %[ 7 ]
                             orig_dest,   %[ 32 ]
                             orig_src,    %  0 or 32 bits
co_format_mine_dynamic =
co_format_mine_replicate_0 = discriminator, %[ 8 ]
                                  checksum,      %[ 0 ]
co_format_mine_replicate_1 = discriminator, %[ 8 ]
                                  s_bit,         %[ 1 ]
                                  res_bits,      %[ 7 ]
                                  orig_dest,     %[ 32 ]
                                  orig_src,      % 0 or 32 bits
ah ===
uc_format = next_header,     %[ 8 ]
                 length,          %[ 8 ]
                 res_bits,        %[ 16 ]
                 spi,             %[ 32 ]
                 sequence_number, %[ 32 ]
                 auth_data;       % n bits

default_methods =
co_format_ah_static = next_header, %[  8 ]
                           length,      %[  8 ]
                           spi,         %[ 32 ]
co_format_ah_dynamic = res_bits,        %[ 16 ]
                            sequence_number, %[ 32 ]
                            auth_data,       %  n bits
co_format_ah_replicate_0 = discriminator,   %[ 8 ]
                                sequence_number, % 8 or 32 bits
                                auth_data,       % n bits
co_format_ah_replicate_1 = discriminator,   %[ 8 ]
                                length,          %[ 8 ]
                                res_bits,        %[ 16 ]
                                spi,             %[ 32 ]
                                sequence_number, %[ 32 ]
                                auth_data,       %  n bits
co_format_ah_irregular = sequence_number, % 8 or 32 bits
                              auth_data,       % n bits
esp_null ===
uc_format = spi,             %[ 32 ]
                 sequence_number, %[ 32 ]
                 next_header;     %[ 8 ]

default_methods =
co_format_esp_static = nh_field, %[ 8 ]
                            spi,      %[ 32 ]
co_format_esp_dynamic = sequence_number, %[ 32 ]
co_format_esp_replicate_0 = discriminator,   %[ 8 ]
                                 sequence_number, % 8 or 32 bits
co_format_esp_replicate_1 = discriminator,   %[ 8 ]
                                 spi,             %[ 32 ]
                                 sequence_number, %[ 32 ]
co_format_esp_irregular = sequence_number, % 8 or 32 bits
irreg_tos_tc ===
uc_format = tos_tc; %[ 6 ]

co_format_tos_tc_present = tos_tc, %[ 6 ]
co_format_tos_tc_not_present = tos_tc, %[ 0 ]
ip_irreg_ecn ===
uc_format = ip_ecn_flags; %[ 2 ]

co_format_tc_present = ip_ecn_flags, %[ 2 ]
co_format_tc_not_present = ip_ecn_flags, %[ 0 ]
fl_enc ===
uc_format = flow_label;

co_format_fl_zero = discriminator, %[ 1 ]
                         flow_label,    %[ 0 ]
                         reserved,      %[ 4 ]
co_format_fl_non_zero = discriminator, %[ 1 ]
                             flow_label,    %[ 20 ]
uc_format = version,        %[   4 ]
                 tos_tc,         %[   6 ]
                 ip_ecn_flags,   %[   2 ]
                 flow_label,     %[  20 ]
                 payload_length, %[  16 ]
                 next_header,    %[   8 ]
                 ttl_hopl,       %[   8 ]
                 src_addr,       %[ 128 ]
                 dst_addr;       %[ 128 ]

default_methods =
co_format_ipv6_static = version_flag, %[ 1 ]
                             reserved,     %[ 2 ]
                             flow_label,   % 5 or 21 bits
                             next_header,  %[ 8 ]
                             src_addr,     %[ 128 ]
                             dst_addr,     %[ 128 ]
co_format_ipv6_dynamic = tos_tc,       %[ 6 ]
                              ip_ecn_flags, %[ 2 ]
                              ttl_hopl,     %[ 8 ]
co_format_ipv6_replicate = tos_tc,       %[ 6 ]
                                ip_ecn_flags, %[ 2 ]
co_format_ipv6_innermost_irregular =
uc_format = ip_id; %[ 16 ]

co_format_ip_id_seq = ip_id, %[ 16 ]
co_format_ip_id_zero = ip_id, %[ 0 ]
uc_format = ip_id; %[ 16 ]

co_format_ip_id_seq = ip_id, %[ 0 ]
co_format_ip_id_seq_swapped = ip_id, %[ 0 ]
co_format_ip_id_rand = ip_id, %[ 16 ]
co_format_ip_id_zero = ip_id, %[ 0 ]
ip_id_behavior_enc ===
uc_format = ip_id_behavior; %[ 2 ]

default_methods =
co_format_sequential = ip_id_behavior, %[ 2 ]
co_format_sequential_swapped = ip_id_behavior, %[ 2 ]
co_format_random = ip_id_behavior, %[ 2 ]
co_format_zero = ip_id_behavior, %[ 2 ]
       {
       let (ip_id_behavior:uncomp_value = 0b11);
uc_format = version,      %[ 4 ]
                 hdr_length,   %[ 4 ]
                 tos_tc,       %[ 6 ]
                 ip_ecn_flags, %[ 2 ]
                 length,       %[ 16 ]
                 ip_id,        %[ 16 ]
                 rf,           %[ 1 ]
                 df,           %[ 1 ]
                 mf,           %[ 1 ]
                 frag_offset,  %[ 13 ]
                 ttl_hopl,     %[ 8 ]
                 protocol,     %[ 8 ]
                 checksum,     %[ 16 ]
                 src_addr,     %[ 32 ]
                 dst_addr;     %[ 32 ]
control_fields  = ip_id_behavior; %[ 2 ]

default_methods =
co_format_ipv4_static = version_flag, %[ 1 ]
                             reserved,     %[ 7 ]
                             protocol,     %[ 8 ]
                             src_addr,     %[ 32 ]
                             dst_addr,     %[ 32 ]
co_format_ipv4_dynamic = reserved,       %[ 5 ]
                              df,             %[ 1 ]
                              ip_id_behavior, %[ 2 ]
                              tos_tc,         %[ 6 ]
                              ip_ecn_flags,   %[ 2 ]
                              ttl_hopl,       %[ 8 ]
                              ip_id,          % 0/16 bits
co_format_ipv4_replicate_0 = discriminator, %[ 8 ]
                                  ip_id,         % 0 or 16 bits
                                  tos_tc,        %[ 6 ]
                                  ip_ecn_flags,  %[ 2 ]
co_format_ipv4_replicate_1 = discriminator,  %[ 5 ]
                                  df,             %[ 1 ]
                                  ip_id_behavior, %[ 2 ]
                                  tos_tc,         %[ 6 ]
                                  ip_ecn_flags,   %[ 2 ]
                                  ttl_hopl,       %[ 8 ]
                                  ip_id,          % 0/16 bits
co_format_ipv4_outer_irregular_without_ttl =
                                       ip_id,        % 0 or 16 bits
                                       tos_tc,       % 0 or 6 bits
                                       ip_ecn_flags, % 0 or 2 bits
co_format_ipv4_outer_irregular_with_ttl =
                                       ip_id,        % 0 or 16 bits
                                       tos_tc,       % 0 or 6 bits
                                       ip_ecn_flags, % 0 or 2 bits
                                       ttl_hopl,     %[ 8 ]
co_format_ipv4_innermost_irregular = ip_id, % 0 or 16 bits
uc_format  =   port;        %[ 16 ]

co_format_port_static_enc   = port,      %[ 0 ]
co_format_port_lsb8         = port,      %[ 8 ]
co_format_port_irr_enc      = port,      %[ 16 ]
uc_format = field; %[ 16 ]

co_format_non_zero = field, %[ 16 ]
co_format_zero = field, %[ 0 ]
uc_format = ack_number; %[ 32 ]

co_format_ack_non_zero = ack_number, %[ 32 ]
co_format_ack_zero = ack_number, %[ 0 ]
tcp_ecn_flags_enc ===
uc_format = tcp_ecn_flags; %[ 2 ]

co_format_irreg = tcp_ecn_flags, %[ 2 ]
co_format_unused =
       {
       let(ecn_used:uncomp_value == 0);
       tcp_ecn_flags ::= static;
tcp_res_flags_enc ===
uc_format = tcp_res_flags; %[ 4 ]

co_format_irreg = tcp_res_flags, %[ 4 ]
co_format_unused =
tcp_irreg_ip_ecn ===
uc_format = ip_ecn_flags;     %[ 2 ]

co_format_tc_present = ip_ecn_flags,       %[ 2 ]
co_format_tc_not_present = ip_ecn_flags, %[ 0 ]
rsf_index_enc ===
uc_format = rsf_flag; %[ 3 ]

co_format_none     = rsf_idx, %[ 2 ]
co_format_rst_only = rsf_idx, %[ 2 ]
co_format_syn_only = rsf_idx, %[ 2 ]
co_format_fin_only = rsf_idx, %[ 2 ]
uc_format = ;

co_format_used = padding, %[ 2 ]
co_format_unused = padding,
tcp ===
uc_format = src_port,      %[ 16 ]
                 dst_port,      %[ 16 ]
                 seq_number,    %[ 32 ]
                 ack_number,    %[ 32 ]
                 data_offset,   %[ 4 ]
                 tcp_res_flags, %[ 4 ]
                 tcp_ecn_flags, %[ 2 ]
                 urg_flag,      %[ 1 ]
                 ack_flag,      %[ 1 ]
                 psh_flag,      %[ 1 ]
                 rsf_flags,     %[ 3 ]
                 window,        %[ 16 ]
                 checksum,      %[ 16 ]
                 urg_ptr,       %[ 16 ]
                 options;       %  n bits
default_methods =
co_format_tcp_static = src_port, %[ 16 ]
                            dst_port, %[ 16 ]
co_format_tcp_dynamic = ecn_used,        %[ 1 ]
                             ack_stride_zero, %[ 1 ]
                             ack_zero,        %[ 1 ]
                             urp_zero,        %[ 1 ]
                             tcp_res_flags,   %[ 4 ]
                             tcp_ecn_flags,   %[ 2 ]
                             urg_flag,        %[ 1 ]
                             ack_flag,        %[ 1 ]
                             psh_flag,        %[ 1 ]
                             rsf_flags,       %[ 3 ]
                             msn,             %[ 16 ]
                             seq_number,      %[ 32 ]
                             ack_number,      %  0 or 32 bits
                             window,          %[ 16 ]
                             checksum,        %[ 16 ]
                             urg_ptr,         %  0 or 16 bits
                             ack_stride,      %  0 or 16 bits
                             options,         %  n bits
co_format_tcp_replicate = reserved,          %[ 2 ]
                               window_presence,   %[ 1 ]
                               list_present,      %[ 1 ]
                               src_port_presence, %[ 2 ]
                               dst_port_presence, %[ 2 ]
                               ack_presence,      %[ 1 ]
                               urp_presence,      %[ 1 ]
                               urg_flag,          %[ 1 ]
                               ack_flag,          %[ 1 ]
                               psh_flag,          %[ 1 ]
                               rsf_flags,         %[ 2 ]
                               ecn_used,          %[ 1 ]
                               msn,               %[ 16 ]
                               seq_number,        %[ 32 ]
                               src_port,          %  0, 8 or 16 bits
                               dst_port,          %  0, 8 or 16 bits
                               window,            %  0 or 16 bits
                               urg_point,         %  0 or 16 bits
                               ack_number,        %  0 or 32 bits
                               ecn_padding,       %  0 or 2 bits
                               tcp_res_flags,     %  0 or 4 bits
                               tcp_ecn_flags,     %  0 or 2 bits
                               options,           %  n bits
co_format_tcp_irregular = ip_ecn_flags,  % 0 or 2 bits
                               tcp_res_flags, % 0 or 4 bits
                               tcp_ecn_flags, % 0 or 2 bits
                               checksum,      %[ 16 ]
uc_format = type,    %[ 8 ]
                 padding; % (nbits - 8) bits

default_methods =
co_format_eol_list_item = pad_len, %  8 bits
                               padding, %[ 0 ]
co_format_eol_irregular =
tcp_opt_nop ===
uc_format = type; %[ 8 ]

default_methods =
co_format_nop_list_item =
co_format_nop_irregular =
tcp_opt_mss ===
uc_format = type,   %[ 8 ]
                 length, %[ 8 ]
                 mss;    %[ 16 ]

default_methods =
co_format_mss_list_item = mss, %[ 16 ]
co_format_mss_irregular =
tcp_opt_wscale ===
uc_format = type,   %[ 8 ]
                 length, %[ 8 ]
                 wscale; %[ 8 ]

default_methods =
co_format_wscale_list_item = wscale, %[ 8 ]
co_format_wscale_irregular =
ts_lsb ===
uc_format = tsval;

                % Few bits (7 and 14) bits
                % can only increase, while
                % the larger formats allow
                % decreasing timestamp to
                % allow prelink reordering.
co_format_tsval_7 = discriminator, %[ 1 ]
                         tsval,         %[ 7 ]
co_format_tsval_14 = discriminator, %[ 2 ]
                          tsval,         %[ 14 ]
co_format_tsval_21 = discriminator, %[ 3 ]
                          tsval,         %[ 21 ]
co_format_tsval_29 = discriminator, %[ 3 ]
                          tsval,         %[ 29 ]
tcp_opt_tsopt ===
uc_format = type,   %[ 8 ]
                 length, %[ 8 ]
                 tsval,  %[ 32 ]
                 tsecho; %[ 32 ]

default_methods =
co_format_tsopt_list_item = tsval,  %[ 32 ]
                                 tsecho, %[ 32 ]
co_format_tsopt_irregular = tsval,  % 16, 24 or 32 bits
                                 tsecho, % 16, 24 or 32 bits
uc_format = sack_field; %[ 32 ]

default_methods =
co_format_lsb_15 = discriminator, %[ 1 ]
                        sack_offset,   %[ 15 ]
co_format_lsb_22 = discriminator, %[ 2 ]
                        sack_offset,   %[ 22 ]
co_format_lsb_30 = discriminator, %[ 2 ]
                        sack_offset,   %[ 30 ]
uc_format = block_start, %[ 32 ]
                 block_end;   %[ 32 ]

co_format_0 = block_start, % 16, 24 or 32 bits
                   block_end,   % 16, 24 or 32 bits
uc_format = type,    %[ 8 ]
                 length,  %[ 8 ]
                 block_1, %[ 64 ]
                 block_2, % 0 or 64 bits
                 block_3, % 0 or 64 bits
                 block_4; % 0 or 64 bits

default_methods =
co_format_sack1_list_item = discriminator,
                                 block_1,
     {
       let(length:uncomp_value == 10);
       discriminator ::= '00000001';
       block_1 ::= tcp_opt_sack_block (ack_value);
     };

co_format_sack2_list_item = discriminator,
                                 block_1,
                                 block_2,
co_format_sack3_list_item = discriminator,
                                 block_1,
                                 block_2,
                                 block_3,
co_format_sack4_list_item = discriminator,
                                 block_1,
                                 block_2,
                                 block_3,
                                 block_4,
co_format_sack_unchanged_irregular = discriminator,
                                          block_1,
                                          block_2,
                                          block_3,
                                          block_4,
co_format_sack1_irregular = discriminator,
                                 block_1,
co_format_sack2_irregular = discriminator,
                                 block_1,
                                 block_2,
co_format_sack3_irregular = discriminator,
                                 block_1,
                                 block_2,
                                 block_3,
co_format_sack4_irregular = discriminator,
                                 block_1,
                                 block_2,
                                 block_3,
                                 block_4,
tcp_opt_sack_permitted ===
uc_format = type,   %[ 8 ]
                 length; %[ 8 ]

default_methods =
co_format_sack_permitted_list_item =
co_format_sack_permitted_irregular =
tcp_opt_generic ===
uc_format = type,       %[ 8 ]
                 length_msb, %[ 1 ]
                 length_lsb, %[ 7 ]
                 contents;   % n bits

control_fields = option_static; %[ 1 ]

default_methods =
co_format_generic_list_item = type,          %[ 8 ]
                                   option_static, %[ 1 ]
                                   length_lsb,    %[ 7 ]
                                   contents,      % n bits
co_format_generic_irregular_static =
co_format_generic_irregular_stable = discriminator, %[ 8 ]
co_format_generic_irregular_full = discriminator, %[ 8 ]
                                        contents,      % n bits
uc_format = item,
                 tail;

default_methods = {
co_format_list_end =
co_format_eol = item,
                     tail
co_format_nop = item,
                     tail
co_format_mss  = item,
                      tail
co_format_wscale = item,
                        tail
co_format_tsopt = item,
                       tail
co_format_sack = item,
                      tail
co_format_permitted = item,
                           tail
co_format_generic = item,
                         tail
uc_format = tcp_options;

co_format_list_not_present = tcp_options, %[ 0 ]
co_format_list_present = tcp_options, % 8 + n*8 bits
uc_format = tos_tc; %[ 6 ]

co_format_static = tos_tc, %[ 0 ]
co_format_irreg = tos_tc,  %[ 6 ]
                       padding, %[ 2 ]
uc_format = ip_id; %[ 16 ]

default_methods =
co_format_nbo = ip_id_offset, % k bits
co_format_non_nbo = ip_id_offset, % k bits
uc_format = df; %[ 1 ]

co_format_v4 = df, %[ 1 ]
co_format_v6 = df,
uc_format_v4 = version,        %[  4 ]
                    header_length,  %[  4 ]
                    tos_tc,         %[  6 ]
                    ip_ecn_flags,   %[  2 ]
                    length,         %[ 16 ]
                    ip_id,          %[ 16 ]
                    rf,             %[  1 ]
                    df,             %[  1 ]
                    mf,             %[  1 ]
                    frag_offset,    %[ 13 ]
                    ttl_hopl,       %[  8 ]
                    next_header,    %[  8 ]
                    checksum,       %[ 16 ]
                    src_addr,       %[ 32 ]
                    dest_addr,      %[ 32 ]
                    src_port,       %[ 16 ]
                    dest_port,      %[ 16 ]
                    seq_number,     %[ 32 ]
                    ack_number,     %[ 32 ]
                    data_offset,    %[  4 ]
                    tcp_res_flags,  %[  4 ]
                    tcp_ecn_flags,  %[  2 ]
                    urg_flag,       %[  1 ]
                    ack_flag,       %[  1 ]
                    psh_flag,       %[  1 ]
                    rsf_flags,      %[  3 ]
                    window,         %[ 16 ]
                    tcp_checksum,   %[ 16 ]
                    urg_ptr,        %[ 16 ]
                    options_list,   % n bits
uc_format_v6 = version,        %[   4 ]
                    tos_tc,         %[   6 ]
                    ip_ecn_flags,   %[   2 ]
                    flow_label,     %[  20 ]
                    payload_length, %[  16 ]
                    next_header,    %[   8 ]
                    ttl_hopl,       %[   8 ]
                    src_addr,       %[ 128 ]
                    dest_addr,      %[ 128 ]
                    src_port,       %[  16 ]
                    dest_port,      %[  16 ]
                    seq_number,     %[  32 ]
                    ack_number,     %[  32 ]
                    data_offset,    %[   4 ]
                    tcp_res_flags,  %[   4 ]
                    tcp_ecn_flags,  %[   2 ]
                    urg_flag,       %[   1 ]
                    ack_flag,       %[   1 ]
                    psh_flag,       %[   1 ]
                    rsf_flags,      %[   3 ]
                    window,         %[  16 ]
                    tcp_checksum,   %[  16 ]
                    urg_ptr,        %[  16 ]
                    options_list,   % n bits
control_fields  = ip_id_behavior;   % 2 bits

default_methods =
co_format_co_common = discriminator,        %[ 7 ]
                           ttl_hopl_outer_flag,  %[ 1 ]
                           ack_flag,             %[ 1 ]
                           psh_flag,             %[ 1 ]
                           rsf_flags,            %[ 2 ]
                           msn,                  %[ 4 ]
                           seq_indicator,        %[ 2 ]
                           ack_indicator,        %[ 2 ]
                           ack_stride_indicator, %[ 1 ]
                           window_indicator,     %[ 1 ]
                           ip_id_indicator,      %[ 2 ]
                           urg_ptr_present,      %[ 1 ]
                           ecn_used,             %[ 1 ]
                           tos_tc_present,       %[ 1 ]
                           ttl_hopl_present,     %[ 1 ]
                           list_present,         %[ 1 ]
                           ip_id_behavior,       %[ 2 ]
                           urg_flag,             %[ 1 ]
                           df,                   %[ 1 ]
                           header_crc,           %[ 7 ]
                           seq_number,           % 0, 8, 16, 32 bits
                           ack_number,           % 0, 8, 16, 32 bits
                           ack_stride,           % 0 or 16 bits
                           window,               % 0 or 16 bits
                           ip_id,                % 0, 8, 16 bits
                           urg_ptr,              % 0 or 16 bits
                           tos_tc,               % 0 or 8 bits
                           ttl_hopl,             % 0 or 8 bits
                           options_list,         % n bits
co_format_rnd_1 = discriminator, %[ 8 ]
                       seq_number,    %[ 16 ]
                       msn,           %[ 4 ]
                       psh_flag,      %[ 1 ]
                       header_crc,    %[ 3 ]
co_format_rnd_2 = discriminator,     %[ 4 ]
                       seq_number_scaled, %[ 4 ]
                       msn,               %[ 4 ]
                       psh_flag,          %[ 1 ]
                       header_crc,        %[ 3 ]
co_format_rnd_3 = discriminator, %[ 1 ]
                       ack_number,    %[ 15 ]
                       msn,           %[ 4 ]
                       psh_flag,      %[ 1 ]
                       header_crc,    %[ 3 ]
co_format_rnd_4 = discriminator,     %[ 4 ]
                       ack_number_scaled, %[ 4 ]
                       msn,               %[ 4 ]
                       psh_flag,          %[ 1 ]
                       header_crc,        %[ 3 ]
co_format_rnd_5 = discriminator, %[ 3 ]
                       psh_flag,      %[ 1 ]
                       msn,           %[ 4 ]
                       header_crc,    %[ 3 ]
                       seq_number,    %[ 14 ]
                       ack_number,    %[ 15 ]
co_format_rnd_6 = discriminator,     %[ 5 ]
                       header_crc,        %[ 3 ]
                       psh_flag,          %[ 1 ]
                       ack_number,        %[ 15 ]
                       msn,               %[ 4 ]
                       seq_number_scaled, %[ 4 ],
co_format_rnd_7 = discriminator, %[ 4 ]
                       seq_number,    %[ 14 ]
                       window,        %[ 14 ]
                       msn,           %[ 4 ]
                       psh_flag,      %[ 1 ]
                       header_crc,    %[ 3 ]
co_format_rnd_8 = discriminator, %[ 8 ]
                       ack_number,    %[ 16 ]
                       window,        %[ 16 ]
                       msn,           %[ 4 ]
                       psh_flag,      %[ 1 ]
                       header_crc,    %[ 3 ]
co_format_rnd_9 = discriminator,     %[ 6 ]
                       seq_number_scaled, %[ 4 ]
                       window,            %[ 14 ]
                       msn,               %[ 4 ]
                       psh_flag,          %[ 1 ]
                       header_crc,        %[ 3 ]
co_format_rnd_10 = discriminator, %[ 7 ]
                        ecn_used,      %[ 1 ]
                        list_present,  %[ 1 ]
                        header_crc,    %[ 7 ]
                        msn,           %[ 4 ]
                        psh_flag,      %[ 1 ]
                        ttl_hopl,      %[ 3 ]
                        rsf_flags,     %[ 2 ]
                        seq_number,    %[ 14 ]
                        ack_number,    %[ 16 ]
                        options_list,  % 0 or X bits
co_format_seq_1 = discriminator, %[ 4 ]
                       ip_id,         %[ 4 ]
                       seq_number,    %[ 16 ]
                       msn,           %[ 4 ]
                       psh_flag,      %[ 1 ]
                       header_crc,    %[ 3 ]
co_format_seq_2 = discriminator,     %[ 5 ]
                       ip_id,             %[ 7 ]
                       seq_number_scaled, %[ 4 ]
                       msn,               %[ 4 ]
                       psh_flag,          %[ 1 ]
                       header_crc,        %[ 3 ]
co_format_seq_3 = discriminator, %[ 4 ]
                       ip_id,         %[ 4 ]
                       ack_number,    %[ 16 ]
                       msn,           %[ 4 ]
                       psh_flag,      %[ 1 ]
                       header_crc,    %[ 3 ]
co_format_seq_4 = discriminator,     %[ 1 ]
                       ack_number_scaled, %[ 4 ]
                       ip_id,             %[ 3 ]
                       msn,               %[ 4 ]
                       psh_flag,          %[ 1 ]
                       header_crc,        %[ 3 ]
co_format_seq_5 = discriminator, %[ 4 ]
                       ip_id,         %[ 4 ]
                       ack_number,    %[ 16 ]
                       seq_number,    %[ 16 ]
                       msn,           %[ 4 ]
                       psh_flag,      %[ 1 ]
                       header_crc,    %[ 3 ]
co_format_seq_6 = discriminator,     %[ 6 ]
                       seq_number_scaled, %[ 4 ]
                       ip_id,             %[ 6 ]
                       ack_number,        %[ 16 ]
                       msn,               %[ 4 ]
                       psh_flag,          %[ 1 ]
                       header_crc,        %[ 3 ]
co_format_seq_7 = discriminator, %[ 5 ]
                       seq_number,    %[ 14 ]
                       ip_id,         %[ 5 ]
                       window,        %[ 16 ]
                       msn,           %[ 4 ]
                       psh_flag,      %[ 1 ]
                       header_crc,    %[ 3 ]
co_format_seq_8 = discriminator, %[ 5 ]
                       window,        %[ 14 ]
                       ip_id,         %[ 5 ]
                       ack_number,    %[ 16 ]
                       msn,           %[ 4 ]
                       psh_flag,      %[ 1 ]
                       header_crc,    %[ 3 ]
co_format_seq_9 = discriminator,     %[ 6 ]
                       ip_id,             %[ 6 ]
                       seq_number_scaled, %[ 4 ]
                       window,            %[ 16 ]
                       msn,               %[ 4 ]
                       psh_flag,          %[ 1 ]
                       header_crc,        %[ 3 ]
co_format_seq_10 = discriminator, %[ 4 ]
                        ip_id,         %[ 4 ]
                        list_present,  %[ 1 ]
                        header_crc,    %[ 7 ]
                        msn,           %[ 4 ]
                        psh_flag,      %[ 1 ]
                        ttl_hopl,      %[ 3 ]
                        ecn_used,      %[ 1 ]
                        ack_number,    %[ 15 ]
                        rsf_flags,     %[ 2 ]
                        seq_number,    %[ 14 ]
                        options_list,  % Nx8 bits
