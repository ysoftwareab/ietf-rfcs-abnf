AA = A
BB = B

CC = C
DD = D

a = b + ((a + F(b,c,d) + X[k] + T[i]) <<< s). */
a = b + ((a + G(b,c,d) + X[k] + T[i]) <<< s). */
a = b + ((a + H(b,c,d) + X[k] + T[i]) <<< s). */
a = b + ((a + H(b,c,d) + X[k] + T[i]) <<< s). */
a = b + ((a + H(b,c,d) + X[k] + T[i]) <<< s). */
a = b + ((a + I(b,c,d) + X[k] + T[i]) <<< s). */






a = b + ((a + I(b,c,d) + X[k] + T[i]) <<< s). */

a = b + ((a + I(b,c,d) + X[k] + T[i]) <<< s). */

A = A + AA
B = B + BB
C = C + CC
D = D + DD

index = (unsigned int)((context->count[0] >> 3) & 0x3F);

partLen = 64 - index;

index = 0;
  }
  else
i = 0;

  /* Buffer remaining input */
  MD5_memcpy
index = (unsigned int)((context->count[0] >> 3) & 0x3f);
padLen = (index < 56) ? (56 - index) : (120 - index);
