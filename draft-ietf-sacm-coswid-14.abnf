concise-swid-tag = {
   global-attributes,
tag-id => text / bstr .size 16,
tag-version => integer,
software-name => text,
entity => entity-entry / [ 2* entity-entry ],
tag-id = 0
software-name = 1
entity = 2
evidence = 3
link = 4
software-meta = 5
payload = 6
corpus = 8
patch = 9
media = 10
supplemental = 11
tag-version = 12
software-version = 13
version-scheme = 14

multipartnumeric = 1
multipartnumeric-suffix = 2
alphanumeric = 3
decimal = 4
semver = 16384

   The following describes each member of the concise-swid-tag root map.
   o  global-attributes: A list of items including an optional language
      definition to support the processing of text-string values and an
      unbounded set of any-attribute items.  Described in Section 2.5.

   o  tag-id (index 0): A 16 byte binary string or textual identifier
      uniquely referencing a software component.  The tag identifier
      MUST be globally unique.  If represented as a 16 byte binary
      string, the identifier MUST be a valid universally unique
      identifier as defined by [RFC4122].  There are no strict
      guidelines on how this identifier is structured, but examples
      include a 16 byte GUID (e.g. class 4 UUID) [RFC4122], or a text
      string appended to a DNS domain name to ensure uniqueness across
      organizations.

   o  tag-version (index 12): An integer value that indicate the
      specific release revision of the tag.  Typically, the initial
      value of this field is set to 0 and the value is monotonically
      increased for subsequent tags produced for the same software
      component release.  This value allows a CoSWID tag producer to
      correct an incorrect tag previously released without indicating a
      change to the underlying software component the tag represents.
      For example, the tag version could be changed to add new metadata,
      to correct a broken link, to add a missing payload entry, etc.
      When producing a revised tag, the new tag-version value MUST be
      greater than the old tag-version value.

   o  corpus (index 8): A boolean value that indicates if the tag
      identifies and describes an installable software component in its
      pre-installation state.  Installable software includes a
      installation package or installer for a software component, a
      software update, or a patch.  If the CoSWID tag represents
      installable software, the corpus item MUST be set to "true".  If
      not provided, the default value MUST be considered "false".

   o  patch (index 9): A boolean value that indicates if the tag
      identifies and describes an installed patch that has made
      incremental changes to a software component installed on an
      endpoint.  Typically, an installed patch has made a set of file
      modifications to pre-installed software and does not alter the
      version number or the descriptive metadata of an installed
      software component.  If a CoSWID tag is for a patch, the patch
      item MUST be set to "true".  If not provided, the default value
      MUST be considered "false".

      Note: If the software component's version number is modified, then
      the correct course of action would be to replace the previous
      primary tag for the component with a new primary tag that
      reflected this new version.  In such a case, the new tag would
      have a patch item value of "false" or would omit this item
      completely.

   o  supplemental (index 11): A boolean value that indicates if the tag
      is providing additional information to be associated with another
      referenced SWID or CoSWID tag.  This allows tools and users to
      record their own metadata about a software component without
      modifying SWID primary or patch tags created by a software
      provider.  If a CoSWID tag is a supplemental tag, the supplemental
      item MUST be set to "true".  If not provided, the default value
      MUST be considered "false".

   o  software-name (index 1): This textual item provides the software
      component's name.  This name is likely the same name that would
      appear in a package management tool.

   o  software-version (index 13): A textual value representing the
      specific release or development version of the software component.

   o  version-scheme (index 14): An integer or textual value
      representing the versioning scheme used for the software-version
      item.  If an integer value is used it MUST be an index value in
      the range -256 to 65535.  Integer values in the range -256 to -1
      are reserved for testing and use in closed environments (see
      section Section 5.2.2).  Integer values in the range 0 to 65535
      correspond to registered entries in the IANA "SWID/CoSWID Version
      Scheme Value" registry (see section Section 5.2.4.  If a string
      value is used it MUST be a private use name as defined in section
      Section 5.2.2.  String values based on a Version Scheme Name from
      the IANA "SWID/CoSWID Version Scheme Value" registry MUST NOT be
      used, as these values are less concise than their index value
      equivalent.

   o  media (index 10): This text value is a hint to the tag consumer to
      understand what target platform this tag applies to.  This item
      represents a query as defined by the W3C Media Queries
      Recommendation (see [W3C.REC-css3-mediaqueries-20120619]).

   o  software-meta (index 5): An open-ended map of key/value data
      pairs.  A number of predefined keys can be used within this item
      providing for common usage and semantics across the industry.  Use
      of this map allows any additional attribute to be included in the
      tag.  It is expected that industry groups will use a common set of
      attribute names to allow for interoperability within their
      communities.  Described in Section 2.8.

   o  entity (index 2): Provides information about one or more
      organizations responsible for producing the CoSWID tag, and
      producing or releasing the software component referenced by this
      CoSWID tag.  Described in Section 2.6.

   o  link (index 4): Provides a means to establish relationship arcs
      between the tag and another items.  A given link can be used to
      establish the relationship between tags or to reference another
      resource that is related to the CoSWID tag, e.g. vulnerability
      database association, ROLIE feed [RFC8322], MUD resource
      [RFC8520], software download location, etc).  This is modeled
      after the HTML "link" element.  Described in Section 2.7.

   o  payload (index 6): This item represents a collection of software
      artifacts (described by child items) that compose the target
      software.  For example, these artifacts could be the files
      included with an installer for a corpus tag or installed on an
      endpoint when the software component is installed for a primary or
      patch tag.  The artifacts listed in a payload may be a superset of
      the software artifacts that are actually installed.  Based on user
      selections at install time, an installation might not include
      every artifact that could be created or executed on the endpoint
      when the software component is installed or run.  Described in
      Section 2.9.3.

   o  evidence-entry (index 3): This item can be used to record the
      results of a software discovery process used to identify untagged
      software on an endpoint or to represent indicators for why
      software is believed to be installed on the endpoint.  In either
      case, a CoSWID tag can be created by the tool performing an
      analysis of the software components installed on the endpoint.
      Described in Section 2.9.4.

   o  $$coswid-extension: This CDDL socket is used to add new
      information structures to the concise-swid-tag root map.  See
      Section 2.2.

global-attributes = (
     ? lang,
     * any-attribute,
any-attribute = (
label => text / int / [ 2* text ] / [ 2* int ]
label = text / int

entity-entry = {
     global-attributes,
entity-name => text,
role => $role / [ 2* $role ],
entity-name = 31
reg-id = 32
role = 33
thumbprint = 34

tag-creator=1
software-creator=2
aggregator=3
distributor=4
licensor=5

link-entry = {
     global-attributes,
     ? artifact => text,
href => any-uri,
rel => $rel,
media = 10
artifact = 37
href = 38
ownership = 39
rel = 40
media-type = 41
use = 42

shared=1
private=2
abandon=3

ancestor=1
component=2
feature=3
installationmedia=4
packageinstaller=5
parent=6
patches=7
requires=8
see-also=9
supersedes=10
supplemental=11
optional=1
required=2
recommended=3

software-meta-entry = {
     global-attributes,
     ? activation-status => text,
     ? channel-type => text,
     ? colloquial-version => text,
     ? description => text,
     ? edition => text,
     ? entitlement-data-required => bool,
     ? entitlement-key => text,
     ? generator => text,
     ? persistent-id => text,
     ? product => text,
     ? product-family => text,
     ? revision => text,
     ? summary => text,
     ? unspsc-code => text,
     ? unspsc-version => text,
     * $$software-meta-extension,
activation-status = 43
channel-type = 44
colloquial-version = 45
description = 46
edition = 47
entitlement-data-required = 48
entitlement-key = 49
generator = 50
persistent-id = 51
product = 52
product-family = 53
revision = 54
summary = 55
unspsc-code = 56
unspsc-version = 57

hash-entry = [
     hash-alg-id: int,
     hash-value: bytes,
path-elements-group = ( ? directory => directory-entry / [ 2* directory-entry ],
                        ? file => file-entry / [ 2* file-entry ],
                      )

esource-collection = (
  path-elements-group,
  ? process => process-entry / [ 2* process-entry ],
  ? resource => resource-entry / [ 2* resource-entry ],
  * $$resource-collection-extension,
filesystem-item = (
  global-attributes,
  ? key => bool,
  ? location => text,
fs-name => text,
file-entry = {
  filesystem-item,
  ? size => integer,
  ? file-version => text,
  ? hash => hash-entry,
  * $$file-extension,
directory-entry = {
  filesystem-item,
path-elements => { path-elements-group },
process-entry = {
  global-attributes,
process-name => text,
resource-entry = {
  global-attributes,
type => text,
directory = 16
file = 17
process = 18
resource = 19
size = 20
file-version = 21
key = 22
location = 23
fs-name = 24
root = 25
path-elements = 26
process-name = 27
pid = 28
type = 29

   The following describes each member of the groups and maps
   illustrated above.
   o  filesystem-item: A list of common items used for representing the
      filesystem root, relative location, name, and significance of a
      file or directory item.

   o  global-attributes: The global-attributes group described in
      Section 2.5.

   o  directory (index 16): A directory item allows child directory and
      file items to be defined within a directory hierarchy for the
      software component.

   o  file (index 17): A file item allows details about a file to be
      provided for the software component.

   o  process (index 18): A process item allows details to be provided
      about the runtime behavior of the software component, such as
      information that will appear in a process listing on an endpoint.

   o  resource (index 19): A resource item can be used to provide
      details about an artifact or capability expected to be found on an
      endpoint or evidence collected related to the software component.
      This can be used to represent concepts not addressed directly by
      the directory, file, or process items.  Examples include: registry
      keys, bound ports, etc.  The equivalent construct in [SWID] is
      currently under specified.  As a result, this item might be
      further defined through extension in the future.

   o  size (index 20): The file's size in bytes.

   o  file-version (index 21): The file's version as reported by
      querying information on the file from the operating system.

   o  key (index 22): A boolean value indicating if a file or directory
      is significant or required for the software component to execute
      or function properly.  These are files or directories that can be
      used to affirmatively determine if the software component is
      installed on an endpoint.

   o  location (index 23): The filesystem path where a file is expected
      to be located when installed or copied.  The location MUST be
      either relative to the location of the parent directory item
      (preferred) or relative to the location of the CoSWID tag if no
      parent is defined.  The location MUST NOT include a file's name,
      which is provided by the fs-name item.

   o  fs-name (index 24): The name of the directory or file without any
      path information.
   o  root (index 25): A filesystem-specific name for the root of the
      filesystem.  The location item is considered relative to this
      location if specified.  If not provided, the value provided by the
      location item is expected to be relative to its parent or the
      location of the CoSWID tag if no parent is provided.

   o  path-elements (index 26): This group allows a hierarchy of
      directory and file items to be defined in payload or evidence
      items.

   o  process-name (index 27): The software component's process name as
      it will appear in an endpoint's process list.

   o  pid (index 28): The process ID identified for a running instance
      of the software component in the endpoint's process list.  This is
      used as part of the evidence item.

   o  type (index 29): A string indicating the type of resource.

   o  $$resource-collection-extension: This CDDL socket can be used to
      extend the resource-collection group model.  This can be used to
      add new specialized types of resources.  See Section 2.2.

   o  $$file-extension: This CDDL socket can be used to extend the file-
      entry group model.  See Section 2.2.

   o  $$directory-extension: This CDDL socket can be used to extend the
      directory-entry group model.  See Section 2.2.

   o  $$process-extension: This CDDL socket can be used to extend the
      process-entry group model.  See Section 2.2.

   o  $$resource-extension: This CDDL socket can be used to extend the
      resource-entry group model.  See Section 2.2.

payload-entry = {
     global-attributes,
     resource-collection,
     * $$payload-extension,
evidence-entry = {
     global-attributes,
     resource-collection,
     ? date => time,
     ? device-id => text,
     * $$evidence-extension,
date = 35
device-id = 36

concise-swid-tag = {
  global-attributes,
tag-id => text / bstr .size 16,
tag-version => integer,
software-name => text,
entity => entity-entry / [ 2* entity-entry ],
any-uri = text
label = text / int

any-attribute = (
label => text / int / [ 2* text ] / [ 2* int ]
global-attributes = (
  ? lang => text,
  * any-attribute,
hash-entry = [
  hash-alg-id: int,
  hash-value: bytes,
entity-entry = {
  global-attributes,
entity-name => text,
role => $role / [ 2* $role ],
link-entry = {
  global-attributes,
  ? artifact => text,
href => any-uri,
rel => $rel,
software-meta-entry = {
  global-attributes,
  ? activation-status => text,
  ? channel-type => text,
  ? colloquial-version => text,
  ? description => text,
  ? edition => text,
  ? entitlement-data-required => bool,
  ? entitlement-key => text,
  ? generator => text,
  ? persistent-id => text,
  ? product => text,
  ? product-family => text,
  ? revision => text,
  ? summary => text,
  ? unspsc-code => text,
  ? unspsc-version => text,
  * $$software-meta-extension,
path-elements-group = ( ? directory => directory-entry / [ 2* directory-entry ],
                        ? file => file-entry / [ 2* file-entry ],
                      )

resource-collection = (
  path-elements-group,
  ? process => process-entry / [ 2* process-entry ],
  ? resource => resource-entry / [ 2* resource-entry ],
  * $$resource-collection-extension,
file-entry = {
  filesystem-item,
  ? size => uint,
  ? file-version => text,
  ? hash => hash-entry,
  * $$file-extension,
directory-entry = {
  filesystem-item,
  ? path-elements => { path-elements-group },
  * $$directory-extension,
process-entry = {
  global-attributes,
process-name => text,
resource-entry = {
  global-attributes,
type => text,
filesystem-item = (
  global-attributes,
  ? key => bool,
  ? location => text,
fs-name => text,
payload-entry = {
  global-attributes,
  resource-collection,
  * $$payload-extension,
evidence-entry = {
  global-attributes,
  resource-collection,
  ? date => time,
  ? device-id => text,
  * $$evidence-extension,
tag-id = 0
software-name = 1
entity = 2
evidence = 3
link = 4
software-meta = 5
payload = 6
hash = 7
corpus = 8
patch = 9
media = 10
supplemental = 11
tag-version = 12
software-version = 13
version-scheme = 14
lang = 15
directory = 16
file = 17
process = 18
resource = 19
size = 20
file-version = 21
key = 22
location = 23
fs-name = 24
root = 25
path-elements = 26
process-name = 27
pid = 28
type = 29
entity-name = 31
reg-id = 32
role = 33
thumbprint = 34
date = 35
device-id = 36
artifact = 37
href = 38
ownership = 39
rel = 40
media-type = 41
use = 42
activation-status = 43
channel-type = 44
colloquial-version = 45
description = 46
edition = 47
entitlement-data-required = 48
entitlement-key = 49
generator = 50
persistent-id = 51
product = 52
product-family = 53
revision = 54
summary = 55
unspsc-code = 56
unspsc-version = 57

multipartnumeric = 1
multipartnumeric-suffix = 2
alphanumeric = 3
decimal = 4
semver = 16384

tag-creator=1
software-creator=2
aggregator=3
distributor=4
licensor=5

shared=1
private=2
abandon=3

ancestor=1
component=2
feature=3
installationmedia=4
packageinstaller=5
parent=6
patches=7
requires=8
see-also=9
supersedes=10

optional=1
required=2
recommended=3

signed-coswid = #6.18(COSE-Sign1-coswid)

cose-label = int / tstr
cose-values = any

protected-signed-coswid-header = {
       1 => int,                      ; algorithm identifier
       3 => "application/swid+cbor",
       4 => bstr,                     ; key identifier
       * cose-label => cose-values,
unprotected-signed-coswid-header = {
       * cose-label => cose-values,
COSE-Sign1-coswid = [
       protected: bstr .cbor protected-signed-coswid-header,
       unprotected: unprotected-signed-coswid-header,
       payload: bstr .cbor concise-swid-tag,
       signature: bstr,
