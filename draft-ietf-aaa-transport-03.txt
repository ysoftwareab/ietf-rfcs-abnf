





AAA Working Group                                          Bernard Aboba
INTERNET-DRAFT                                                 Microsoft
Category: Standards Track                                  Jonathan Wood
<draft-ietf-aaa-transport-03.txt>                 Sun Microsystems, Inc.
30 May 2001

                         AAA Transport Profile

This document is an Internet-Draft and is in full conformance with all
provisions of Section 10 of RFC2026.

Internet-Drafts are working documents of the Internet Engineering Task
Force (IETF), its areas, and its working groups.  Note that other groups
may also distribute working documents as Internet- Drafts.

Internet-Drafts are draft documents valid for a maximum of six months
and may be updated, replaced, or obsoleted by other documents at any
time.  It is inappropriate to use Internet-Drafts as reference material
or to cite them other than as "work in

The list of current Internet-Drafts can be accessed at
http://www.ietf.org/ietf/1id-abstracts.txt

The list of Internet-Draft Shadow Directories can be accessed at
http://www.ietf.org/shadow.html.

Copyright Notice

Copyright (C) The Internet Society (2001).  All Rights Reserved.

Abstract

This document discusses transport issues that arise with protocols for
Authentication, Authorization and Accounting.  It also provides
recommendations on the use of transport by AAA protocols. This includes
usage of standards-track RFCs as well as experimental proposals.















Aboba & Wood                 Standards Track                    [Page 1]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


Table of Contents

1.      Introduction ...........................................    3
1.1     Requirements language ..................................    3
1.2     Terminology ............................................    3
2.      Issues in transport usage ..............................    5
2.1     Application-driven versus network-driven ...............    5
2.2     Slow failover ..........................................    6
2.3     Use of Nagle Algorithm .................................    6
2.4     Multiple connections ...................................    7
2.5     Duplicate detection ....................................    7
2.6     Invalidation of transport parameter estimates ..........    8
2.7     Inability to use fast retransmit .......................    8
2.8     Congestion avoidance ...................................    8
2.9     Delayed acknowledgments ................................   10
2.10    Premature failover .....................................   10
2.11    Head of line blocking ..................................   10
2.12    Connection load balancing ..............................   11
3.      AAA transport profile ..................................   11
3.1     Transport mappings .....................................   11
3.2     Application layer watchdog .............................   11
3.3     Use of Nagle Algorithm .................................   14
3.4     Multiple connections ...................................   15
3.5     Connection load balancing ..............................   15
3.6     Duplicate detection ....................................   16
3.7     Invalidation of transport parameter estimates ..........   17
3.8     Inability to use fast re-transmit ......................   18
3.9     Head of line blocking ..................................   18
3.10    Congestion avoidance ...................................   19
3.11    Premature failover .....................................   20
4.      References .............................................   20
5.      Appendix A - AAA Intermediaries ........................   22
5.1     Relays and proxies .....................................   23
5.2     Re-directs .............................................   25
5.3     Store and forward proxies ..............................   26
5.4     Transport layer proxies ................................   28
6.      Security considerations ................................   29
7.      IANA considerations ....................................   29
8.      Acknowledgments ........................................   29
9.      Author addresses .......................................   29
10.     Intellectual property statement ........................   29
11.     Full copyright statement ...............................   30









Aboba & Wood                 Standards Track                    [Page 2]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


1.  Introduction

This document discusses transport issues that arise with protocols for
Authentication, Authorization and Accounting.  It also provides
recommendations on the use of transport by AAA protocols.  This includes
usage of standards-track RFCs as well as experimental proposals.

1.1.  Requirements language

In this document, the key words "MAY", "MUST,  "MUST  NOT",  "optional",
"recommended",  "SHOULD",  and  "SHOULD  NOT",  are to be interpreted as
described in [1].

1.2.  Terminology


Accounting
          The act of collecting information on resource usage for the
          purpose of trend analysis, auditing, billing, or cost
          allocation.

Administrative Domain
          An internet, or a collection of networks, computers, and
          databases under a common administration.  Computer entities
          operating in a common administration may be assumed to share
          administratively created security associations.

Attendant A node designed to provide the service interface between a
          client and the local domain.

Authentication
          The act of verifying a claimed identity, in the form of a pre-
          existing label from a mutually known name space, as the
          originator of a message (message authentication) or as the
          end-point of a channel (entity authentication).

Authorization
          The act of determining if a particular right, such as access
          to some resource, can be granted to the presenter of a
          particular credential.

Billing   The act of preparing an invoice.

Client    A node wishing to obtain service from an attendant within an
          administrative domain.

Relay     Relays forward requests and responses based on routing-related
          AVPs and domain forwarding table entries. Since relays do not



Aboba & Wood                 Standards Track                    [Page 3]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


          enforce policies, they do not examine or alter non-routing
          AVPs. As a result, relays never originate messages, do not
          need to understand the semantics of messages or non-routing
          AVPs, and are capable of handling any extension or message
          type. Since relays make decisions based on information in
          routing AVPs and domain forwarding tables they do not keep
          state on NAS resource usage or conversations in progress.

Re-direct Rather than forwarding requests and responses between clients
          and servers, Re-directs refer clients to servers and allow
          them to communicate directly. Since Re-directs do not sit in
          the forwarding path, they do not alter any AVPs transitting
          between client and server. Re-direct proxies do not originate
          messages and are capable of handling any message type,
          although they may be configured only to re-direct messages of
          certain types, while acting as Routing or Policy proxies for
          other types.  As with Routing proxies, re-directs do not keep
          state with respect to conversations or NAS resources.

Proxy     In addition to forwarding requests and responses, proxies
          enforce policies relating to resource usage and provisioning.
          This is typically accomplished by tracking the state of NAS
          devices. While proxies typically do not respond to client
          Requests prior to receiving a Response from the server, they
          may originate Reject messages in cases where policies are
          violated. As a result, proxies need to understand the
          semantics of the messages passing through them, and may not
          support all extensions.

Store and forward proxy
          Store and forward proxies distinguish themselves from other
          proxy species by sending a reply to the NAS prior to proxying
          the request to the server. As a result, store and forward
          proxies need to implement AAA client and server functionality
          for the messages that they handle. Store and Forward proxies
          also typically keep state on conversations in progress in
          order to assure delivery of proxied Requests and Responses.
          While store and forward proxies are most frequently deployed
          for accounting, they also can be used to implement
          authentication/authorization policy.

Local Proxy
          A Local Proxy is a proxy that exists within the same
          administrative domain as the network device (e.g. NAS) that
          issued the AAA request. Typically a local proxy is used to
          multiplex AAA messages to and from a large number of network
          devices, and may implement policy.




Aboba & Wood                 Standards Track                    [Page 4]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


Network Access Identifier
          The Network Access Identifier (NAI) is the userID submitted by
          the client during network access authentication.  In roaming,
          the purpose of the NAI is to identify the user as well as to
          assist in the routing of the authentication request.  The NAI
          may not necessarily be the same as the user's e-mail address
          or the user-ID submitted in an application layer
          authentication.

2.  Issues in AAA transport usage

Issues that arise in AAA transport usage include:

       Application-driven versus network-driven
       Slow failover
       Use of Nagle Algorithm
       Multiple connections
       Duplicate detection
       Invalidation of transport parameter estimates
       Inability to use fast re-transmit
       Congestion avoidance
       Delayed acknowledgments
       Premature Failover
       Head of line blocking
       Connection load balancing

We discuss each of these issues in turn.

2.1.  Application-driven versus network-driven

Steady state AAA transport behavior is typically application rather than
network driven. For example, a 48-port NAS with an average session time
of 20 minutes will on average send only 144 authentication/authorization
requests/hour, and an equivalent number of accounting requests.  This
translates to an average inter-packet spacing of 25 seconds.

Even on much larger NAS devices, the inter-packet spacing is often
larger than the Round Trip Time (RTT). For example, a 2048-port NAS with
an average session time of 10 minutes will on average send 3.4
authentication/authorization requests/second, and an equivalent number
of accounting requests. This translates to an average inter-packet
spacing of 293 ms.

Note that transient behavior can result in much lower inter-packet
spacing. For example, after a NAS reboot previously stored accounting
records may be sent to the accounting server in rapid succession.
Similarly, after recovery from a power failure, users may respond with a
large number of simultaneous logins. Thus while application-driven AAA



Aboba & Wood                 Standards Track                    [Page 5]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


transport behavior is the norm, there are situations in which behavior
may be network driven.

Note that even with high inter-packet spacings as seen by the NAS, it is
possible for AAA clients and servers to experience congestion, even in
the absence of any other traffic. For example, while a given AAA client
may not send substantial traffic, many AAA clients may interact with a
given AAA proxy or server. Thus routers close to a heavily loaded proxy
or server may experience congestion, even though traffic close to the
client is very light. For example, if 10,000 48-ports NASes were to use
the same AAA proxy or server, that proxy or server would receive 400
authentication/authorization requests/second and an equivalent number of
accounting requests. For 1000 octet requests, this could generate as
much as 6.4 Mbps of incoming traffic at the AAA proxy or server.

While such a transaction rate is within the capabilities of the fastest
AAA servers, Relays and proxies, implementations exist that cannot
handle such a high load, and thus high queuing delays and/or dropped
packets may be experienced at the server, even if the routers on the
path are not congested. Thus, a well designed AAA protocol needs to be
able to handle congestion occurring at the AAA server, as well as
congestion experienced within the network.

2.2.  Slow failover

Where TCP [5] is used as the transport, AAA implementations will
experience very slow fail over times if they wait until a TCP connection
times out before resending on another connection.  This is not an issue
for SCTP [6], which enables adjustment of the failover timer at the
transport layer.

2.3.  Use of Nagle Algorithm

AAA protocol messages are often smaller than the maximum segment size
(MSS). While exceptions occur when certificate-based authentication
issued or where a low path MTU is found, typically AAA protocol messages
are less than 1000 octets.  Therefore, the total packet count, and
associated network overhead can be reduced by combining multiple AAA
messages within a single packet. While this does not reduce the work
required by the application in parsing packets and responding to the
messages, it does reduce the number of packets processed by routers
along the path.

However, within the application-driven regime, the NAS will typically
receive a reply from the home server prior to having another request to
send. This implies, for example, that accounting requests will typically
be sent individually rather than being batched by the transport layer.
As a result, within the application-driven regime, the Nagle algorithm



Aboba & Wood                 Standards Track                    [Page 6]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


[12] is ineffective.

2.4.  Multiple connections

Since the RADIUS [2] Identifier field is a single octet, a maximum of
256 requests can be in progress between two endpoints described by a
5-tuple: (NAS IP address, NAS port, UDP, RADIUS server IP address,
RADIUS server port).  In order to get around this limitation, RADIUS
clients have utilized more than one sending port, sometimes even going
to the extreme of using a different sending port for each NAS port.

Were this behavior to be extended to AAA protocols operating over
reliable transport, the result would be multiplication of the effective
slow-start ramp-up by the number of connections. For example, if a NAS
had ten connections open to a AAA relay or proxy, and used a per-
connection initial window [20] of 2, then the effective initial window
would be 20. This is inappropriate, since it would permit the NAS to
send a large burst of packets into the network.

2.5.  Duplicate detection

In order to avoid spurious re-transmits, it is necessary for TCP [24]
and SCTP [6] to include logic for estimating the re-transmission timer.
However, even with a good RTO estimator, RTT distributions are typically
heavy-tailed so that there will be some number of false re-transmits. As
a result, AAA servers must be prepared to receive duplicate requests,
and it is typical for server implementations to cache responses so as to
make it possible respond to such duplicate requests more efficiently.

Where failover/failback and connection load balancing are supported,
duplicate requests may be sent to different servers. As a result, AAA
servers must be prepared to detect duplicate requests sent to multiple
servers. For example, AAA servers may eliminate duplicates based on an
end-to-end session-identifier that is unique for a given client. This is
helpful in detecting duplicate accounting messages as well as in
ensuring consistency between AAA servers tracking simultaneous logins.
For example, where a session corresponding to an end-to-end session
identifier is already being tracked, an access request involving the
same session identifier may be ignored as a duplicate.

2.6.  Invalidation of transport parameter estimates

Congestion control principles [9],[16] require the ability of a
transport protocol to respond effectively to congestion, as sensed via
increasing delays, packet loss, or explicit congestion notification.
With network-driven applications, it is possible to respond to
congestion on a timescale comparable to the round-trip time (RTT).




Aboba & Wood                 Standards Track                    [Page 7]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


However, with application-driven AAA protocols, the time between sends
may be considerably larger than the RTT, so that the network conditions
can not be assumed to persist between sends. For example, the congestion
window may grow during a period in which congestion is being
experienced, because few packets are sent, limiting the opportunity for
feedback. Similarly, after congestion is detected, the congestion window
may remain small, even though the network conditions that existed at the
time of congestion no longer apply by the time when the next packets are
sent. In addition, due to the low sampling interval, estimates of RTT
and RTO may become invalid.

2.7.  Inability to use fast re-transmit

When congestion window validation [13] is implemented, the result is
that AAA protocols operate much of the time in slow-start with an
initial congestion window set to 1 or 2, depending on the implementation
[20]. This implies that AAA protocols gain little benefit from the
windowing features of reliable transport.

Since the congestion window is so small, it is generally not possible to
receive enough duplicate ACKs (3) to trigger fast re-transmit. As a
result, dropped packets will require a retransmission timeout (RTO).

2.8.  Congestion avoidance

The law of conservation of packets [9] suggests that a client should not
send another packet into the network until it can be reasonably sure
that a packet has exited the network on the same path. In the case of a
AAA client, the law suggests that it should not retransmit to the same
server or choose another server until it can be reasonably sure that a
packet has exited the network on the same path.  If the client advances
the window as responses arrive, then the client will "self clock",
adjusting its transmission rate to the available bandwidth.

While a AAA client using a reliable transport such as TCP [5] or SCTP
[6] will self-clock when communicating directly with a AAA-server, end-
to-end self-clocking is not assured when AAA intermediaries are
present.

As described in the Appendix, AAA intermediaries include Relays,
Proxies, Re-directs, Store and Forward proxies, and Transport proxies.
Of these intermediaries, only Transport and Re-direct proxies provide a
direct transport connection between the AAA client and server, thereby
ensuring that end-to-end self-clocking will  occur.

However when Relays, Proxies or Store and Forward proxies are used, two
separate and de-coupled transport connections are provided. One
connection operates between the AAA client and intermediary, and another



Aboba & Wood                 Standards Track                    [Page 8]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


between the intermediary and server. Since the two transport connections
are de-coupled, transport layer ACKs do not flow end-to-end, and self-
clocking does not occur.

For example, consider what happens when the bottleneck exists between a
AAA Relay  and a AAA server.  Self-clocking will occur between the AAA
client and AAA Relay, causing the AAA client to adjust its sending rate
to the rate at which transport ACKs flow back from the AAA Relay.
However, since this rate is higher than the bottleneck bandwidth, the
overall system will not self-clock.

Since there is no direct transport connection between the AAA client and
AAA server, the AAA client does not have the ability to estimate end-to-
end transport parameters and adjust its sending rate to the bottleneck
bandwidth between the Relay and server. As a result, the incoming rate
at the AAA Relay can be higher than the rate at which packets can be
sent to the AAA server.

In this case, the end-to-end performance will be determined by details
of the intermediary  implementation.  In general the end-to-end
transport performance in the presence of Relays, Proxies or Store and
Forward proxies will always be worse in terms of delay and packet loss
than if the AAA client and server were communicating directly.

For example, if the Relay/Proxy operates with a large receive buffer, it
is possible that a large queue will develop on the receiving side, since
the AAA client is able to send packets to the AAA Relay/Proxy more
rapidly than the Relay/Proxy can send them to the AAA server.
Eventually, the buffer will overflow, causing wholesale packet loss as
well as high delay.

Methods to induce fine-grained coupling between the two transport
connections are difficult to implement.  One possible solution is for
the AAA Relay/Proxy to operate with a receive buffer that is no larger
than its send buffer. If this is done, "back pressure" (closing of the
receive window) will cause the Relay/Proxy to reduce the AAA client
sending rate when the Relay/Proxy send buffer fills. However, unless
multiple connections exist between the AAA client and AAA Relay/Proxy,
closing of the receive window will affect all traffic sent by the AAA
client, even traffic destined to AAA servers where no bottleneck exists.
Since multiple connections between a AAA client and proxy result in
multiplication of the effective slow-start ramp rate, this is not
recommended.  As a result, use of "back pressure" cannot enable
individual AAA client-server conversations to self-clock, and this
technique appears impractical for use in AAA.






Aboba & Wood                 Standards Track                    [Page 9]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


2.9.  Delayed Acknowledgments

As described in Appendix A, ACKs may comprise as much as half of the
traffic generated in a AAA exchange. This occurs because AAA
conversations are typically application-driven, and therefore there is
frequently not enough traffic to enable ACK piggybacking.  As a result,
AAA protocols running over TCP or SCTP transport may experience a
doubling of traffic as compared with implementations utilizing UDP
transport.

It is typically not possible to address this issue via the sockets API.
ACK parameters (such as the value of the delayed ACK timer) are
typically fixed by the TCP implementation and therefore not tunable by
the application.

2.10.  Premature failover

RADIUS [2] failover implementations are typically based on the concept
of primary and secondary servers, in which all traffic flows to the
primary server unless it is unavailable. However, the failover algorithm
was never specified. As a result, RADIUS failover implementations vary
in quality, with some failing over prematurely, violating the law of
"conservation of packets".

Where a Relay, Proxy or Store and Forward proxy is present, the NAS has
no direct connection to a AAA server, and is unable to estimate the end-
to-end transport parameters. As a result, a NAS awaiting an application-
layer response from the server has no transport-based mechanism for
determining an appropriate failover timer.

For example, if the path between the AAA Relay/Proxy and server includes
a high delay link, it is possible that the NAS will failover to another
Relay/Proxy while packets are still in flight. This violates the
principle of "conservation of packets" since the NAS will inject
additional packets into the network before having evidence that a
previously sent packet has left the network.  Such behavior can result
in worsening the situation on an already congested link, resulting in
congestive collapse [9].

2.11.  Head of line blocking

Head of line blocking occurs during periods of packet loss where the
time between sends is shorter than the Re-transmission timeout value
(RTO). In such situations, packets back up in the send queue until the
lost packet can be successfully re-transmitted.

Head of line blocking is typically an issue only on larger NASes. For
example, a 48-port NAS with an average inter-packet spacing of 25



Aboba & Wood                 Standards Track                   [Page 10]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


seconds is unlikely to have an RTO greater than this unless severe
packet loss is experienced. However, a 2048-port NAS with an average
inter-packet spacing of 293 ms may experience head-of-line blocking
since the inter-packet spacing is less than the minimum RTO value of 1
second.

2.12.  Connection load balancing

In order to lessen queuing delays and ameliorate the head of line
blocking problem, it is desirable for a AAA protocol to be able to load
balance between multiple connections. While sophisticated load dynamic
balancing techniques are possible, substantial benefits can be achieved
by use of static load balancing. In static load balancing, traffic is
distributed between servers based on static "weights" corresponding to
server capacity.

3.  AAA transport profile

In order to address the issues described previously, it is recommended
that AAA protocols make use of standards track as well as experimental
techniques. Recommendations on AAA transport usage are described below.

3.1.  Transport mappings

AAA Servers MUST support TCP & SCTP. NASes MUST support TCP, and MAY
support SCTP. As support for SCTP improves, it is possible that SCTP
support will be required on NASes at some point in the future. TCP is
required on NASes because not all NASes have SCTP in their protocol
stacks, and because existing firewalls may not support SCTP.  AAA
intermediaries (Relays, Proxies, Re-directs, Store and Forward proxies,
etc.)  inherent all the obligations of Servers with respect to transport
support.

3.2.  Application layer watchdog

In order to enable AAA implementations to more quickly detect transport
and application-layer failures, AAA protocols MUST support an
application layer watchdog message.  The watchdog operates on all open
connections and is used to suspend and eventually close connections that
are experiencing difficulties. The watchdog is also used to re-open and
validate connections that have returned to health.  The watchdog is used
in order to enable a NAS or intermediary to determine when to resend on
another connection.  The watchdog protocol is not intended as a cluster
heartbeat mechanism comparable to that proposed in [31].

The application layer watchdog message enables failover from a server
that has failed either because it is unreachable or because its
applications functions have failed. This is distinct from the purpose of



Aboba & Wood                 Standards Track                   [Page 11]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


the SCTP heartbeat, which is to enable failover between interfaces. The
SCTP heartbeat may enable a failover to another path to reach the same
server, but not a failover if the server system or the application
service has failed. Therefore both mechanisms MAY be used together.

The watchdog may be utilized either within primary/secondary or load
balancing configurations.  It operates as follows:

[1]  Watchdog behavior is controlled by a single timer (Tw), which
     ranges between 30 and 60 seconds. In order to avoid synchronization
     behaviors that can occur with fixed timers among distributed
     systems, each time the watchdog interval is calculated with a
     jitter by using the Tw value (which defaults to 30 seconds) and
     randomly adding or subtracting a random value drawn between 0.5 and
     2 seconds. Alternative calculations to create jitter MAY be used.
     These MUST be pseudo-random and not cyclic.

[2]  When a response is received, Tw is reset. Receiving a watchdog from
     a peer constitutes activity, and Tw should be reset.  On sending a
     message, if the queue is empty, then Tw is reset. If the watchdog
     timer expires and the queue is empty, then a watchdog packet is
     sent. Watchdog packets are not retransmitted where AAA protocols
     operate over reliable transports.

     If the queue is not empty, then failover is initiated. The AAA
     client MAY resend the request to an alternate server, reusing the
     end-to-end identifier so as to permit duplicate detection. However,
     the client MUST NOT close the primary connection until the
     primary's watchdog timer has expired twice without a response (note
     that the watchdog is not sent a second time, however). Once the
     primary connection has failed, subsequent requests are sent to the
     alternate server until the watchdog timer on the primary connection
     is reset.

     Suspension of the primary connection prevents flapping between
     primary and alternate connections, and ensures that failover
     behavior remains consistent.  The application may not receive a
     response to the watchdog message due to a connectivity problem, in
     which case a transport layer ACK will not have been received, or
     the lack of response may be due to an application problem. Without
     transport layer visibility, the application is unable to tell the
     difference, and must behave conservatively.

     In situations where no transport layer ACK is received on the
     primary connection after multiple re-transmissions, the RTO will be
     exponentially backed off. Due to Karn's algorithm as implemented
     SCTP and TCP, the RTO estimator will not be reset until another ACK
     is received in response to a non-re-transmitted request. Thus, in



Aboba & Wood                 Standards Track                   [Page 12]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


     cases where the problem occurs at the transport layer, after the
     client fails over to the alternate server, the RTO of the primary
     will remain at a high value unless an ACK is received on the
     primary connection.

     In the case where the problem occurs at the transport layer,
     subsequent requests sent on the primary connection will not receive
     the same service as was originally provided. For example, instead
     of failover occuring after 3 retransmissions, failover might occur
     without even a single retransmission if RTO has been sufficiently
     backed off. Of course, if the lack of a watchdog response was due
     to an application layer problem, then RTO will not have been backed
     off. However, without transport layer visibility, there is no way
     for the application to know this.

     Suspending use of the primary connection until a response is
     received to a watchdog message guarantees that the RTO timer will
     have been reset before the primary connection is reused. If no
     response is received after the second Tw expiration, then the
     primary connection is closed and so the suspension becomes
     permanent.

[3]  After the the expiration of two watchdog timers without a response,
     the AAA client SHOULD cause a transport reset or close to be done
     on the connection.  While the connection is in the closed state,
     the AAA client MUST NOT attempt to send further watchdog messages
     on the connection. However, after the connection is closed, the AAA
     client continues to periodically attempt to re-open the connection.
     The AAA client SHOULD wait to the transport to report connection
     failure before attempting again, but MAY chose to bound this wait
     time by the watchdog interval, Tw. If the connection is
     successfully opened, then the watchdog message is sent. Once three
     watchdog messages have been sent and responded to, the connection
     is returned to service, and transactions are once again sent over
     it.

     When using SCTP as a transport, it is not necessary to disable
     SCTP's transport-layer heartbeats. However If AAA implementations
     have access to SCTP's heartbeat parameters, they MAY chose to
     ensure that SCTP's heartbeat interval is longer than the AAA
     protocol's watchdog interval, Tw.  This will ensure both that
     alternate paths are still probed by SCTP, while the primary path
     has a minumum of heartbeat redundancy.

3.2.1.  Primary/secondary failover support

The watchdog timer may be integrated with primary/secondary style
failover so as to provide improved reliability and basic load balancing.



Aboba & Wood                 Standards Track                   [Page 13]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


In order to balance load among multiple AAA servers, each AAA server is
designated the primary for a portion of the NASes, and designated as
secondaries of varying priority for the remainder.  In this way load can
be balanced among the AAA servers.

Within primary/secondary configurations, the watchdog timer operates as
follows:

[1]  Assume that each NAS is initially configured with a single primary
     AAA intermediary or server, and one or more secondary connections.

[2]  The watchdog message mechanism is used to suspend and eventually
     close primary connections that are experiencing difficulties. It is
     also used to re-open and validate connections that have returned to
     health.

[3]  Once a secondary is promoted to primary status, either on a
     temporary or permanent basis, the next server on the list of
     secondaries is promoted to fill the open secondary slot.

[4]  The AAA client periodically attempts to re-open closed connections,
     so that it is possible that a previously closed connection can be
     returned to service and become eligible for use again.
     Implementations will typically retain a limit on the number of
     connections open at a time, so that once a previously closed
     connection is brought online again, the lowest priority secondary
     connection will be closed. In order to prevent periodic closing and
     re-opening of secondary connections, it is recommended that
     functioning connections remain open for a minimum of 5 minutes.

[5]  In order to enable diagnosis of failover behavior, it is
     recommended that a table of failover events be kept within the MIB.
     These failover events SHOULD include appropriate transaction
     identifiers so that client and server data can be compared,
     providing insight into the cause of the problem (transport or
     application layer).

3.3.  Use of Nagle Algorithm

While AAA protocols typically operate in the application-driven regime,
there are circumstances in which they are network driven. For example,
where a NAS reboots, or where connectivity is restored between a NAS and
a AAA proxy, it is possible that multiple packets will be available for
sending.

As a result, there are circumstances where the transport-layer batching
provided by the Nagle Algorithm (12) is useful, and as a result, AAA
implementations MUST enable the Nagle algorithm, RFC 896 [12].



Aboba & Wood                 Standards Track                   [Page 14]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


3.4.  Multiple connections

AAA protocols SHOULD use only a single persistent connection between a
AAA client and a AAA proxy or server, and SHOULD provide for pipelining
of requests, so that more than one request can be in progress at a time.
In order to minimize use of inactive connections in roaming situations,
a AAA proxy MAY bring down a connection to a AAA server if the
connection has been unutilized (discounting the watchdog) for a certain
period of time, which MUST NOT be less than BRINGDOWN_INTERVAL (5
minutes).

A AAA client/intermediary connected to multiple intermediaries/servers
can treat them as primary/secondary or balance load between them.

3.5.  Connection load balancing

Primary/secondary failover is capable of providing improved resilience
and basic load balancing. However, it does not ameliorate head of line
blocking, since only a single connection is in use at a time.

A AAA client maintaining multiple connections MAY load balance between
them. Using multiple connections at a time reduces, but does not
eliminate head of line blocking issues experienced on TCP connections.
This issue does not exist with SCTP connections utilizing multiple
streams.

In connection load balancing configurations, the application watchdog
operates as follows:

[1]  Assume that each NAS is initially configured with multiple
     connections to AAA intermediaries or servers.

[2]  In static load balancing, transactions are apportioned among the
     connections based on the total number of connections and a "weight"
     assigned to each connection. Pearson's hash [29] applied to the NAI
     [28] can be used to determine which connection will handle a given
     transaction. Hashing on the NAI provides highly granular load
     balancing, while ensuring that all traffic for a given conversation
     will be sent to the same intermediary or server.  In dynamic load
     balancing, the value of the "weight" can vary based on conditions
     such as AAA server load. Such techniques, while sophisticated, are
     beyond the scope of this document.

[3]  Transactions are distributed to connections based on the total
     number of available connections and their weights.  A change in the
     number of available connections forces recomputation of the hash
     table. In order not to cause conversations in progress to be
     switched to new destinations, on recomputation a transitional



Aboba & Wood                 Standards Track                   [Page 15]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


     period is required in which both old and new hash tables are needed
     in order to permit aging out of conversations in progress. Note
     that this requires a way to easily to determine whether a Request
     represents a new conversation or the continuation of an existing
     conversation.  As a result, removing and adding of connections is
     an expensive operation, and it is recommended that the hash table
     only be recomputed once a connection is closed or returned to
     service.

     Suspended connections, although they are not used, do not force
     hash table reconfiguration until they are closed. Similarly, re-
     opened connections not accumulating sufficient watchdog responses
     do not force a reconfiguration until they are returned to service.
     While a connection is suspended, transactions that were to have
     been assigned to it are instead assigned to the next available
     server. While this results in a momentary imbalance, it is felt
     that this is a relatively small price to pay in order to reduce
     hash table thrashing.

[4]  In order to enable diagnosis of load balancing behavior, it is
     recommended that in addition to a table of failover events, a table
     of transaction outcomes be kept on each client, indexed by AAA
     server. That way, the effectiveness of the load balancing algorithm
     can be evaluated.

3.6.  Duplicate detection

AAA protocols MUST support an end-to-end message identifier, to enable
the home server to detect duplicates. Hop-by-hop identifiers whose value
may change at each hop are not sufficient, since a AAA server may
receive the same message from multiple proxies.  For example, a AAA
client can send a request to Proxy1, then failover and resend the
request to Proxy2; both proxies forward the request to the home AAA
server, with different hop-by-hop identifiers. A Session-ID is
insufficient as it does not distinguish different messages for the the
same session.

Proper treatment of the end-to-end message identifier ensures that AAA
operations are idempotent. For example, without an end-to-end
identifier, a AAA server keeping track of simultaneous logins might send
an Accept in response to an initial Request, and then a Reject in
response to a duplicate Request (where the user was allowed only one
simultaneous login). Depending on which Response arrived first, the user
might be allowed access or not.

However, if the server were to store the end-to-end message identifier
along with the simultaneous login information, then the duplicate
Request (which utilizes the same end-to-end message identifier) could be



Aboba & Wood                 Standards Track                   [Page 16]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


identified and the correct response can be returned (no answer, since a
Response was already in transit).

3.7.  Invalidation of transport parameter estimates

In order to address invalidation of transport parameter estimates, AAA
protocol implementations MAY utilize Congestion Window Validation (RFC
2861) [13] and RTO Validation [30].

RFC 2581 [14] recommends that a connection go into slow-start after a
period where no traffic has been sent within the RTO interval. RFC 2861
[13] recommends only increasing the congestion window if it was full
when the ACK arrived. The congestion window is reduced by half once
every RTO interval if no traffic is received.

When Congestion Window Validation is used, the congestion window will
not build during application-driven periods, and instead will be
decayed. As a result, AAA applications operating within the application-
driven regime will typically run with a congestion window equal to the
initial window [21] much of the time.  This implies that AAA protocols
will typically operate in "perpetual slowstart".

During periods in which AAA behavior is application-driven this will
have no effect, since the time between packets will be larger than RTT,
and thus AAA will operate with an effective congestion window of 1.
However, during network-driven periods, the effect will be to space out
sending of AAA packets. Thus instead of being able to send a large burst
of packets into the network, a NAS will need to wait several RTTs as the
congestion window builds during slow-start.

For example, a NAS operating with an initial window of 2, with 35 AAA
requests to send would take approximately 6 RTTs to send them, as the
congestion window builds during slow start: 2, 3, 3, 6, 9, 12. After the
backlog is cleared, the implementation will once again be application-
driven and the congestion window size will decay.

Note that RFC 2861 [13] does not address the issue of RTO validation.
This is also a problem, particularly when the Congestion Manager [19] is
implemented. During periods of high packet loss, the RTO may be
repeatedly increased via exponential back-off, and may attain a high
value. Due to lack of timely feedback on RTT and RTO during application-
driven periods, the high RTO estimate may persist long after the
conditions that generated it have dissipated.

In order to address this issue, an RTO validation procedure is required.
The following procedure [30] is recommended, and will be documented in
the form of an Internet-Draft at some point in the future:




Aboba & Wood                 Standards Track                   [Page 17]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


   After the congestion window is decayed according to [13], reset the
   estimated RTO to 3 seconds. After the next packet comes in, re-calculate
   RTTavg, RTTdev, and RTO according to the method described in [14].

3.8.  Inability to use fast re-transmit

When Congestion Window Validation (RFC 2861) [13] is used, AAA
implementations will operate with a congestion window equal to the
initial window much of the time. As a result, the window size will often
not be large enough to enable use of fast re-transmit.

To address this issue, AAA implementations SHOULD implement Limited
Transmit, as described in RFC 3042 [21]. Rather than reducing the number
of duplicate ACKs required for triggering fast recovery, which would
increase the number of inappropriate re-transmissions, Limited Transmit
enables the window size be increased, thus enabling the sending of
additional packets which in turn may trigger fast re-transmit without a
change to the algorithm.

However, if congestion window validation [13] is implemented, this
proposal will only have an effect in situations where the time between
packets is less than the estimated retransmission timeout (RTO). If the
time between packets is greater than RTO,  additional packets will
typically not be available for sending so as to take advantage of the
increased window size. As a result, AAA protocols will typically operate
with the lowest possible congestion window size, resulting in a re-
transmission timeout for every lost packet.

3.9.  Head of line blocking

TCP inherently does not provide a solution to the head-of-line blocking
problem, although its effects can be lessened by implementation Limited
Transmit [21], and connection load balancing.

3.9.1.  Using SCTP streams to prevent Head of line blocking

Each diameter node SHOULD distribute its messages evenly across the
range of SCTP streams that it and its peer have agreed upon. (A lost
message in one stream will not cause any other streams to block.) A
trivial and effective implementation of this simply increments a counter
for the stream ID to send on. When the counter reaches the maximum
number of streams for the association, it resets to 0.

Diameter peers MUST be able to accept messages on any stream. Note that
streams are used *solely* to prevent head-of-the-line blocking. All
identifying information is carried within the diamter payload.





Aboba & Wood                 Standards Track                   [Page 18]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


SCTP peers can allocate up to 65535 streams for an association. The cost
for idle streams may or may not be zero, depending on the
implementation, and the cost for non-idle streams is always greater than
0. So administrators may wish to limit the number of possible streams on
their diameter nodes according to the resources (i.e. memory, CPU power,
etc.)  of a particular node.

Stream IDs do not need to be preserved by proxies. For example, consider
the following case, where B serves as a proxy between A and C:

A --------------------- B -------------------- C
    1000 streams            2000 streams

    msg 1: str id 0          msg 1: str id 0
    msg 2: str id 1          msg 2: str id 1
    ...
    msg 1000: str id 999     msg 1000: str id 999
    msg 1001: str id 0       msg 1001: str id 1000

This distribution scheme acts like a hash table. It is possible, yet
unlikely, that two messages will end up in the same stream, and even
less likely that there will be message loss resulting in blocking when
this happens. If it does turn out to be a problem, local administrators
can increase the number of streams on their nodes to improve
performance.

3.10.  Congestion avoidance

In order to improve upon default timer estimates, AAA implementations
MAY implement the Congestion Manager (CM) [19]. CM is an end-system
module that:

      (i) Enables an ensemble of multiple concurrent streams from a sender
          destined to the same receiver and sharing the same congestion
           properties to perform proper congestion avoidance and control, and

     (ii) Allows applications to easily adapt to network congestion.

The CM helps integrate congestion management across all applications and
transport protocols. The CM maintains congestion parameters (available
aggregate and per-stream bandwidth, per-receiver round-trip times, etc.)
and exports an API that enables applications to learn about network
characteristics, pass information to the CM, share congestion
information with each other, and schedule data transmissions.

The CM enables the AAA application to access transport parameters
(RTTavg, RTTdev) via callbacks. RTO estimates are currently not
available via the callback interface, though they probably should be.



Aboba & Wood                 Standards Track                   [Page 19]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


Where available, transport parameters SHOULD be used to improve upon
default timer values.

3.11.  Premature Failover

Premature failover is prevented by the watchdog functionality described
above.  If the next hop does not return a reply, the AAA client will
send a watchdog message to it to verify liveness. If a watchdog reply is
received, then the AAA client will know that the next hop server is
functioning at the application layer. As a result, it is only necessary
to provide terminal error messages, such as the following:

   "Busy": Intermediary/Server too busy to handle additional requests, NAS
   should failover all requests to another intermediary/server.

   "Can't Locate": Intermediary can't locate the AAA server for the indicated
   realm; NAS should failover that request to another proxy.

   "Can't Forward": Intermediary has tried both primary and secondary AAA
   servers with no response; NAS should failover the request to another
   intermediary.

Note that these messages differ in their scope. The "Busy" message tells
the NAS that the intermediary/server is too busy for ANY request. The
"Can't Locate" and "Can't Forward" messages indicate that the ultimate
destination cannot be reached or isn't responding, implying per-request
failover.

4.  References


[1]  Bradner, S., "Key words for use in RFCs to Indicate Requirement
     Levels", BCP 14, RFC 2119, March 1997.

[2]  Rigney, C., Willens, S., Rubens, A., Simpson, W., "Remote
     Authentication Dial In User Service (RADIUS)", RFC  2865, June
     2000.

[3]  Rigney, C., "RADIUS  Accounting", RFC 2866, June 2000.

[4]  Calhoun, P., Rubens, A., Akhtar, H., Guttman, E., "DIAMETER Base
     Protocol", Internet draft (work in progress), draft-ietf-aaa-
     diameter-04.txt, May 2001.

[5]  Postel, J., "Transmission Control Protocol", STD 7, RFC 793,
     September 1981.





Aboba & Wood                 Standards Track                   [Page 20]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


[6]  R. Stewart et al., "Stream Control Transmission Protocol", RFC
     2960, October 2000.

[7]  Aboba, B., Vollbrecht, J., "Proxy Chaining and Policy
     Implementation in Roaming", RFC 2607, June 1999.

[8]  Aboba, B., Arkko, J., "Introduction to Accounting Management", RFC
     2985, June 2000.

[9]  Jacobson, V., "Congestion Avoidance and Control", Computer
     Communication Review, vol. 18, no. 4, pp. 314-329, Aug.  1988.
     ftp://ftp.ee.lbl.gov/papers/congavoid.ps.Z

[10] Blunk, L. and J. Vollbrecht, "PPP Extensible Authentication
     Protocol (EAP)", RFC 2284, March 1998.

[11] Rigney, C., Willats, W., Calhoun, P., "RADIUS Extensions", RFC
     2869, June 2000.

[12] Nagle, J., "Congestion Control in IP/TCP", RFC 896, January 1984.

[13] Handley, M., Padhye, J., Floyd, S., "TCP Congestion Window
     Validation", RFC 2861, June 2000.

[14] Allman, M., Paxson, V. and W. Stevens, "TCP Congestion Control",
     RFC 2581, April 1999.

[15] Paxson, V., Allman, M., Dawson, S., Fenner, W., Griner, J.,
     Heavens, I., Lahey, K., Semke, J. and B. Volz, "Known TCP
     Implementation Problems", RFC 2525, March 1999.

[16] Floyd, S., "Congestion Control Principles", RFC 2914, September
     2000.

[17] Dawkins, S., Montenegro, G., Kojo, M. and V. Magret, "End-to-end
     Performance Implications of Slow Links", Internet draft (work in
     progress), draft-ietf-pilc-slow-06.txt, May 2001.

[18] Jacobson, V., Braden, R. and D. Borman, "TCP Extensions for High
     Performance", RFC 1323, May 1992.

[19] Balakrishnan, H., Seshan, S., "The Congestion Manager", Internet
     draft (work in progress), draft-ietf-ecm-cm-04.txt, May 2001.

[20] Allman, M., Floyd, S. and C. Partridge, "Increasing TCP's Initial
     Window", RFC 2414, September 1998.





Aboba & Wood                 Standards Track                   [Page 21]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


[21] Allman, M., Balakrishnan H., Floyd, S., "Enhancing TCP's Loss
     Recovery Using Limited Transmit", RFC 3042, January 2001.

[22] Mathis, M., ahdavi, J., Floyd, S., Romanow, A., "TCP Selective
     Acknowledgment Options", RFC 2018, October 1996.

[23] Floyd, S., Henderson, T., "The NewReno Modification to TCP's Fast
     Recovery Algorithm", RFC 2582, April 1999.

[24] Paxson, V., Allman, M., "Computing TCP's Retransmission Timer", RFC
     2988, November 2000.

[25] Floyd, S., Mahdavi, J., Mathis, M., Podolsky, M., Romanow, A., "An
     Extension to the Selective Acknowledgment (SACK) Option for TCP",
     RFC 2883, July 2000.

[26] Montenegro, G., Dawkins, S., Kojo, M., Magret, V., Vaidya, N.,
     "Long Thin Networks", RFC 2757, January 2000.

[27] Touch, J., "TCP Control Block Interdependence", RFC 2140, April
     1997.

[28] Aboba, B. and M. Beadles, "The Network Access Identifier", RFC
     2486, January 1999.

[29] Volz, B., Gonczi, S., Lemon, T., Stevens, R., "DHC Load Balancing
     Algorithm", RFC 3074, February 2001.

[30] Allison Mankin, personal communication.

[31] Droms, R., Kinnear, K., Stapp, M., Volz, B., Gonczi, S., Rabil, G.,
     Dooley, M., Kapur, A., "DHCP Failover Protocol", Internet draft
     (work in progress), draft-ietf-dhc-failover-08.txt, July 2000.

[32] Paxson, V., "Measurement and Analysis of End-to-End Internet
     Dynamics", Ph.D. Thesis, Computer Science Division, University of
     California, Berkeley, April 1997.

5.  Appendix A - AAA Intermediaries

As described in [2],[7] AAA intermediaries have become popular in order
to support services such as roaming and shared use networks. Such
intermediaries are used both for authentication/authorization, as well
as accounting [8].

AAA intermediaries include:

   Relays



Aboba & Wood                 Standards Track                   [Page 22]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


   Proxies
   Re-directs
   Store and Forward proxies
   Transport layer proxies

The transport layer behavior of each of these intermediaries is
described below.

5.1.  Relays and proxies

While the application-layer behavior of relays and proxies is quite
different, at the transport layer the behavior is similar.  In both
cases, two connections are established, one from the client (NAS) to the
relay/proxy, and another from the relay/proxy to the server The
relay/proxy does not respond to a client request until it receives a
response from the server.  Since the two connections are de-coupled, the
end-to-end conversation between the client and server may not self
clock.

Since AAA transport is typically application-driven, there is frequently
not enough traffic to enable ACK piggybacking.  As a result, the Nagle
algorithm is rarely triggered, and delayed ACKs may comprise nearly half
the traffic.  Thus AAA protocols running over reliable transport will
see packet traffic nearly double compared with UDP transport.  Since ACK
parameters (such as the value of the delayed ACK timer) are typically
fixed by the TCP implementation and are not tunable by the application,
there is little that can be done about this.
























Aboba & Wood                 Standards Track                   [Page 23]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


A typical trace of a conversation between a AAA client, proxy and server
is shown below:

Time            NAS           Relay/Proxy           Server
------          ---           -----------           ------

0               Request
                ------->
OTTnp + Tpr                     Request
                                ------->

OTTnp + TdA                     Delayed ACK
                                <-------

OTTnp + OTTps +                                 Reply/ACK
Tpr + Tsr                                       <-------

OTTnp + OTTps +
Tpr + Tsr +                     Reply
OTTsp + TpR                     <-------

OTTnp + OTTps +
Tpr + Tsr +                     Delayed ACK
OTTsp + TdA                     ------->

OTTnp + OTTps +
OTTsp + OTTpn +
Tpr + Tsr +      Delayed ACK
TpR + TdA        ------->

Key
---
OTT   = One-way Trip Time
OTTnp = One-way trip time (NAS to Relay/Proxy)
OTTpn = One-way trip time (Relay/Proxy to NAS)
OTTps = One-way trip time (Relay/Proxy to Server)
OTTsp = One-way trip time (Server to Relay/Proxy)
TdA   = Delayed ACK timer
Tpr   = Relay/Proxy request processing time
TpR   = Relay/Proxy reply processing time
Tsr   = Server request processing time

At time 0, the NAS sends a request to the relay/proxy. Ignoring the
serialization time, the request arrives at the relay/proxy at time
OTTnp, and the relay/proxy takes an additional Tpr in order to forward
the request toward the home server. At time TdA after receiving the
request, the relay/proxy sends a delayed ACK. The delayed ACK is sent,
rather than being piggybacked on the reply, as long as TdA < OTTps +



Aboba & Wood                 Standards Track                   [Page 24]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


OTTsp + Tpr + Tsr + TpR.

Typically Tpr < TdA, so that the delayed ACK is sent after the
relay/proxy forwards the request toward the server, but before the
relay/proxy receives the reply from the server. However, depending on
the TCP implementation on the relay/proxy and when the request is
received, it is also  possible for the delayed ACK to be sent prior to
forwarding the request.

At time OTTnp + OTTps + Tpr, the server receives the request, and Tsr
later it generates the reply. Where Tsr < TdA, the reply will contain a
piggybacked ACK. However, depending on the server responsiveness and TCP
implementation, the ACK and reply may be sent separately. This can
occur, for example, where a slow database or storage system must be
accessed prior to sending the reply.

At time OTTnp + OTTps + OTTsp + Tpr + Tsr the reply/ACK reaches the
relay/proxy, which then takes TpR additional time to forward the reply
to the NAS. At TdA after receiving the reply, the relay/proxy generates
a delayed ACK. Typically TpR < TdA so that the delayed ACK is sent to
the server after the relay/proxy forwards the reply to the NAS. However,
depending on the circumstances and the relay/proxy TCP implementation,
the delayed ACK may be sent first.

As with a delayed ACK sent in response to a request, which may be
piggybacked if the reply can be received quickly enough, piggybacking of
the ACK sent in response to a reply from the server is only possible if
additional request traffic is available.  However, due to the high
inter-packet spacings in typical AAA scenarios, this is unlikely unless
the AAA protocol supports a reply ACK.

At time OTTnp + OTTps + OTTsp + OTTpn + Tpr + Tsr + TpR the NAS receives
the reply. TdA later, a delayed ACK is generated.

5.2.  Re-directs

Re-directs operate by referring a NAS to the AAA server, enabling the
NAS to talk to the AAA server directly.  Since a direct transport
connection is established, the end-to-end connection will self-clock.

With re-directs, delayed ACKs are less frequent than with application-
layer proxies since the Re-direct and Server will typically piggyback
replies with ACKs.








Aboba & Wood                 Standards Track                   [Page 25]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


The sequence of events is as follows:

Time            NAS             Re-direct       Server
------          ---             ---------       ------

0               Request
                ------->
OTTnp + Tpr                     Redirect/ACK
                                <-------

OTTnp + Tpr +   Request
OTTpn + Tnr     ------->

OTTnp + OTTpn +
Tpr + Tsr +                                     Reply/ACK
OTTns                                           <-------

OTTnp + OTTpn +
OTTns + OTTsn +
Tpr + Tsr +      Delayed ACK
TdA              ------->

Key
---
OTT   = One-way Trip Time
OTTnp = One-way trip time (NAS to Re-direct)
OTTpn = One-way trip time (Re-direct to NAS)
OTTns = One-way trip time (NAS to Server)
OTTsn = One-way trip time (Server to NAS)
TdA   = Delayed ACK timer
Tpr   = Re-direct processing time
Tnr   = NAS re-direct processing time
Tsr   = Server request processing time

5.3.  Store and Forward proxies

With a store and forward proxy, the proxy may send a reply to the NAS
prior to forwarding the request to the server. While store and forward
proxies are most frequently deployed for accounting [8], they also can
be used to implement authentication/authorization policy, as described
in [7].

As noted in [8], store and forward proxies can have a negative effect on
accounting reliability. By sending a reply to the NAS without receiving
one from the accounting server, store and forward proxies fool the NAS
into thinking that the accounting request had been accepted by the
accounting server when this is not the case. As a result, the NAS can
delete the accounting packet from non-volatile storage before it has



Aboba & Wood                 Standards Track                   [Page 26]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


been accepted by the accounting server. The leaves the proxy responsible
for delivering accounting packets. If the proxy involves moving parts
(e.g. a disk drive) while the NAS does not, overall system reliability
can be reduced. As a result, store and forward proxies SHOULD NOT be
used.

The sequence of events is as  follows:

Time            NAS             Proxy           Server
------          ---             -----           ------

0               Request
                ------->
OTTnp + TpR                     Reply/ACK
                                <-------

OTTnp + Tpr                     Request
                                ------->

OTTnp + OTTph +                                 Reply/ACK
Tpr + Tsr                                       <-------

OTTnp + OTTph +
Tpr + Tsr +                     Reply
OTThp + TpR                     <-------

OTTnp + OTTph +
Tpr + Tsr +                     Delayed ACK
OTThp + TdA                     ------->

OTTnp + OTTph +
OTThp + OTTpn +
Tpr + Tsr +      Delayed ACK
TpR + TdA        ------->

Key
---
OTT   = One-way Trip Time
OTTnp = One-way trip time (NAS to Proxy)
OTTpn = One-way trip time (Proxy to NAS)
OTTph = One-way trip time (Proxy to Home server)
OTThp = One-way trip time (Home Server to Proxy)
TdA   = Delayed ACK timer
Tpr   = Proxy request processing time
TpR   = Proxy reply processing time
Tsr   = Server request processing time





Aboba & Wood                 Standards Track                   [Page 27]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


5.4.  Transport layer proxies

With a transport layer proxy, the proxy may acts as an intermediary,
forwarding transport ACKs between the NAS and the Home Server. This type
of proxy effectively splices together the NAS-proxy and proxy-AAA server
connections into a single conection that behaves as though it operated
end-to-end. As a result, transport proxies will exhibit end-to-end self-
clocking. However, since these proxies need to operate at the transport
layer, they cannot be implemented purely as applications and AAA
transport proxies are rare.

With a transport proxy, the sequence of events is as follows:

Time            NAS             Proxy           Home Server
------          ---             -----           -----------

0               Request
                ------->
OTTnp + Tpr                     Request
                                ------->

OTTnp + OTTph +                                 Reply/ACK
Tpr + Tsr                                       <-------

OTTnp + OTTph +
Tpr + Tsr +                     Reply/ACK
OTThp + TpR                     <-------

OTTnp + OTTph +
OTThp + OTTpn +
Tpr + Tsr +      Delayed ACK
TpR + TdA        ------->


OTTnp + OTTph +
OTThp + OTTpn +
Tpr + Tsr +                     Delayed ACK
TpR + TpD                       ------->

Key
---
OTT   = One-way Trip Time
OTTnp = One-way trip time (NAS to Proxy)
OTTpn = One-way trip time (Proxy to NAS)
OTTph = One-way trip time (Proxy to Home server)
OTThp = One-way trip time (Home Server to Proxy)
TdA   = Delayed ACK timer
Tpr   = Proxy request processing time



Aboba & Wood                 Standards Track                   [Page 28]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


TpR   = Proxy reply processing time
Tsr   = Server request processing time
TpD   = Proxy delayed ack processing time

6.  Security Considerations

General security considerations concerning TCP congestion control are
discussed in RFC 2581 [14].

7.  IANA Considerations

This draft does not create any new number spaces for IANA
administration.

8.  Acknowledgments

Thanks to Allison Mankin of ISI, Barney Wolff of Databus, and Pat
Calhoun of Sun Microsystems for fruitful discussions relating to AAA
transport.

9.  Authors' Addresses

Bernard Aboba
Microsoft Corporation
One Microsoft Way
Redmond, WA 98052

Phone: +1 (425) 936-6605
Fax:   +1 (425) 936-7329
Email: bernarda@microsoft.com

Jonathan Wood
Sun Microsystems, Inc.
901 San Antonio Road
Palo Alto, CA 94303

Email: jonathan.wood@eng.sun.com

10.  Intellectual Property Statement

The IETF takes no position regarding the validity or scope of any
intellectual property or other rights that might be claimed to  pertain
to the implementation or use of the technology described in this
document or the extent to which any license under such rights might or
might not be available; neither does it represent that it has made any
effort to identify any such rights.  Information on the IETF's
procedures with respect to rights in standards-track and standards-
related documentation can be found in BCP-11.  Copies of claims of



Aboba & Wood                 Standards Track                   [Page 29]





INTERNET-DRAFT            AAA Transport Profile              30 May 2001


rights made available for publication and any assurances of licenses to
be made available, or the result of an attempt made to obtain a general
license or permission for the use of such proprietary rights by
implementors or users of this specification can be obtained from the
IETF Secretariat.

The IETF invites any interested party to bring to its attention any
copyrights, patents or patent applications, or other proprietary rights
which may cover technology that may be required to practice this
standard.  Please address the information to the IETF Executive
Director.

11.  Full Copyright Statement

Copyright (C) The Internet Society (2001).  All Rights Reserved.
This document and translations of it may be copied and furnished to
others, and derivative works that comment on or otherwise explain it or
assist in its implementation may be prepared, copied, published and
distributed, in whole or in part, without restriction of any kind,
provided that the above copyright notice and this paragraph are included
on all such copies and derivative works.  However, this document itself
may not be modified in any way, such as by removing the copyright notice
or references to the Internet Society or other Internet organizations,
except as needed for the purpose of developing Internet standards in
which case the procedures for copyrights defined in the Internet
Standards process must be followed, or as required to translate it into
languages other than English.  The limited permissions granted above are
perpetual and will not be revoked by the Internet Society or its
successors or assigns.  This document and the information contained
herein is provided on an "AS IS" basis and THE INTERNET SOCIETY AND THE
INTERNET ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE."

12.  Expiration Date

This memo is filed as <draft-ietf-aaa-transport-03.txt>,  and  expires
December 1, 2001.












Aboba & Wood                 Standards Track                   [Page 30]


