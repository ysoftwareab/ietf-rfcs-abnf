Networking Working Group                                          Z. Ali
Internet-Draft                                               C. Filsfils
Intended status: Standards Track                                N. Kumar
Expires: September 10, 2019                                 C. Pignataro
                                                               R. Gandhi
                                                            F. Brockners
                                                     Cisco Systems, Inc.
                                                                J. Leddy
                                                              Individual
                                                           S. Matsushima
                                                                SoftBank
                                                               R. Raszuk
                                                            Bloomberg LP
                                                                D. Voyer 
                                                             Bell Canada 
                                                                G. Dawra 
                                                                LinkedIn 
                                                              B. Peirens 
                                                                Proximus 
                                                                 M. Chen
                                                                   C. Li  
                                                                  Huawei 
                                                                F. Iqbal
                                                              Individual
                                                                 G. Naik 
                                                       Drexel University 
                                                          March 11, 2019

     Operations, Administration, and Maintenance (OAM) in Segment 
              Routing Networks with IPv6 Data plane (SRv6)              
                   draft-ali-6man-spring-srv6-oam-00.txt

Abstract

    This document defines building blocks for Operations, Administration, 
    and Maintenance (OAM) in Segment Routing Networks with IPv6 Dataplane 
    (SRv6). The document also describes some SRv6 OAM mechanisms.  

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."


Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

     Ali, et al.            Expires September 10, 2019              [Page 1] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

  Table of Contents
  1. Introduction.........................................................3 
        2. Conventions Used in This Document..............................3 
           2.1. Abbreviations.............................................3 
           2.2. Terminology and Reference Topology........................3 
        3. OAM Building Blocks............................................4 
           3.1. O-flag in Segment Routing Header..........................4 
              3.1.1. O-flag Processing....................................5 
           3.2. OAM Segments..............................................5 
              3.2.1. End.OP: OAM Endpoint with Punt.......................6 
              3.2.2. End.OTP: OAM Endpoint with Timestamp and Punt........6 
           3.3. SRH TLV...................................................7 
        4. OAM Mechanisms.................................................7 
           4.1. Ping......................................................7 
              4.1.1. Classic Ping.........................................7 
              4.1.2. Pinging a SID Function...............................9 
           4.2. Error Reporting..........................................11 
           4.3. Traceroute...............................................11 
              4.3.1. Classic Traceroute..................................12 
              4.3.2. Traceroute to a SID Function........................13 
           4.4. OAM Data Piggybacked in Data traffic.....................17 
              4.4.1. IOAM Data Field Encapsulation in SRH................17 
              4.4.2. Procedure...........................................18 
           4.5. Monitoring of SRv6 Paths.................................20 
        5. Security Considerations.......................................20 
        6. IANA Considerations...........................................21 
           6.1. ICMPv6 type Numbers Registry.............................21 
           6.2. SRv6 OAM Endpoint Types..................................21 
           6.3. SRv6 IOAM TLV............................................21 
        7. References....................................................22 
           7.1. Normative References.....................................22 
           7.2. Informative References...................................23
                 
     Ali, et al.            Expires September 10, 2019              [Page 2] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 
                 
     1. Introduction 

     This document defines building blocks for 
     Operations, Administration, and Maintenance (OAM) in Segment Routing 
     Networks with IPv6 Dataplane (SRv6). The document also describes 
     some SRv6 OAM mechanisms. 

     2. Conventions Used in This Document 

     2.1. Abbreviations 
      
        ECMP: Equal Cost Multi-Path. 
      
        SID: Segment ID. 

        SL: Segment Left. 
      
        SR: Segment Routing. 
      
        SRH: Segment Routing Header. 
      
        SRv6: Segment Routing with IPv6 Data plane. 
      
        TC: Traffic Class. 
      
        UCMP: Unequal Cost Multi-Path. 

        ICMPv6: multi-part ICMPv6 messages [RFC4884].
      
     2.2. Terminology and Reference Topology 

     This document uses the terminology defined in [I-D.draft-filsfils-
     spring-srv6-network-programming]. The readers are expected to be 
     familiar with the same. 

     Throughout the document, the following simple topology is used for 
     illustration.  

           +--------------------------| N100 |------------------------+ 
           |                                                          | 
              ====== link1====== link3------ link5====== link9------      
              ||N1||======||N2||======| N3 |======||N4||======| N5 | 
              ||  ||------||  ||------|    |------||  ||------|    |   
              ====== link2====== link4------ link6======link10------   
                             |                      | 
                             |       ------         | 
                             +-------| N6 |---------+ 
                               link7 |    | link8   
                                     ------ 
    
                           Figure 1 Reference Topology 
                           
     Ali, et al.            Expires September 10, 2019              [Page 3] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

     In the reference topology:  

     Nodes N1, N2, and N4 are SRv6 capable nodes.  

     Nodes N3, N5 and N6 are classic IPv6 nodes.  

     Node N100 is a controller.  

     Node k has a classic IPv6 loopback address A:k::/128. 

     A SID at node k with locator block B and function F is represented 
     by B:k:F::

     The IPv6 address of the nth Link between node X and Y at the X side 
     is represented as 2001:DB8:X:Y:Xn::, e.g., the IPv6 address of link6 
     (the 2nd link) between N3 and N4 at N3 in Figure 1 is 
     2001:DB8:3:4:32::.  Similarly, the IPv6 address of link5 (the 1st 
     link between N3 and N4) at node 3 is 2001:DB8:3:4:31::. 

     B:k:1:: is explicitly allocated as the END function at Node k.  

     B:k::Cij is explicitly allocated as the END.X function at node k 
     towards neighbor node i via jth Link between node i and node j. 
     e.g., B:2:C31 represents END.X at N2 towards N3 via link3 (the 1st 
     link between N2 and N3). Similarly, B:4:C52 represents the END.X at 
     N4 towards N5 via link10.   

     <S1, S2, S3> represents a SID list where S1 is the first SID and S3 
     is the last SID. (S3, S2, S1; SL) represents the same SID list but 
     encoded in the SRH format where the rightmost SID (S1) in the SRH is 
     the first SID and the leftmost SID (S3) in the SRH is the last SID. 

     (SA, DA) (S3, S2, S1; SL) represents an IPv6 packet, SA is the IPv6 
     Source Address, DA the IPv6 Destination Address, (S3, S2, S1; SL) is 
     the SRH header that includes the SID list <S1, S2, S3>. 

     3. OAM Building Blocks 

     This section defines the various building blocks for 
     implementing OAM mechanisms in SRv6 networks.  

     3.1. O-flag in Segment Routing Header 

     [I-D. draft-ietf-6man-segment-routing-header] describes the Segment 
     Routing Header (SRH) and how SR capable nodes use it. The SRH 
     contains an 8-bit "Flags" field [I-D. draft-ietf-6man-segment-
     routing-header]. This document defines the following bit in the 
     SRH.Flags to carry the O-flag:  

               0 1 2 3 4 5 6 7 
              +-+-+-+-+-+-+-+-+ 
              |   |O|         | 
              +-+-+-+-+-+-+-+-+ 
              
     Ali, et al.            Expires September 10, 2019              [Page 4] 
      
     Internet-Draft                 SRv6 OAM                      March 2019   
         
    Where:  
      
        - O-flag: OAM flag. When set, it indicates that this packet is an 
          operations and management (OAM) packet. This document defines 
          the usage of the O-flag in the SRH.Flags. 
        - The document does not define any other flag in the SRH.Flags 
          and meaning and processing of any other bit in SRH.Flags is 
          outside of the scope of this document.  
      
     3.1.1. O-flag Processing 
      
     Implementation of the O-flag is OPTIONAL. A node MAY ignore 
     SRH.Flags.O-flag. It is also possible that a node is capable of 
     supporting the O-bit but based on a local decision it MAY ignore it 
     during processing on some local SIDs. If a node does not support the 
     O-flag, then upon reception it simply ignores it. If a node supports 
     the O-flag, it can optionally advertise its potential via node 
     capability advertisement in IGP [I-D.bashandy-isis-srv6-
     extensions] and BGP-LS [I-D.dawra-idr-bgpls-srv6-ext].  

     The SRH.Flags.O-flag implements the "punt a timestamped copy and 
     forward" behavior.  

     When N receives a packet whose IPv6 DA is S and S is a local SID, N          
     executes the following the pseudo-code, before the execution of the 
     local SID S.  
       1. IF SRH.Flags.O-flag is True and SRH.Flags.O-flag is locally 
          supported for S THEN 
            a. Timestamp a local copy of the packet. ;; Ref1 
            b. Punt the time-stamped copy of the packet to CPU for processing 
               in software (slow-path).      ;; Ref2  
     Ref1: Timestamping is done in hardware, as soon as possible during 
     the packet processing. As timestamping is done on a copy of the 
     packet which is locally punted, timestamp value can be carried in 
     the local packet (punt) header.  
     Ref1: Hardware (microcode) just punts the packet. Software (slow path)     
     implements the required OAM 
     mechanism. Timestamp is not carried in the packet forwarded to the 
     next hop.  

     3.2. OAM Segments 

     OAM Segment IDs (SIDs) is another component of the SRv6 OAM building 
     Blocks. This document defines a 
     couple of OAM SIDs. Additional SIDs will be added in the later 
     version of the document.  
     
     Ali, et al.            Expires September 10, 2019              [Page 5] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

     3.2.1. End.OP: OAM Endpoint with Punt 

     Many scenarios require punting of SRv6 OAM packets at the desired 
     nodes in the network.  The "OAM Endpoint with Punt" function (End.OP 
     for short) represents a particular OAM function to implement the 
     punt behavior for an OAM packet. It is described using the 
     pseudocode as follows: 

     When N receives a packet destined to S and S is a local End.OP SID, 
     N does: 

      1.   Punt the packet to CPU for SW processing (slow-path)  ;; Ref1 

     Ref1: Hardware (microcode) punts the packet. Software (slow path) 
     implements the required OAM mechanisms. 

     Please note that in an SRH containing END.OP SID, it is RECOMMENDED 
     to set the SRH.Flags.O-flag = 0.  

     3.2.2. End.OTP: OAM Endpoint with Timestamp and Punt 

     Scenarios demanding performance management of an SR policy/ path 
     requires hardware timestamping before hardware punts the packet to 
     the software for OAM processing. The "OAM Endpoint with Timestamp 
     and Punt" function (End.OTP for short) represents an OAM SID 
     function to implement the timestamp and punt behavior for an OAM 
     packet. It is described using the pseudocode as follows:  

     When N receives a packet destined to S and S is a local End.OTP SID, 
     N does: 

      1.   Timestamp the packet                   ;; Ref1 

      2.   Punt the packet to CPU for SW processing (slow-path)  ;; Ref2 

        Ref1: Timestamping is done in hardware, as soon as possible 
     during the packet processing. 
      
        Ref2: Hardware (microcode) timestamps and punts the packet.   
        Software (slow path) implements the required OAM mechanisms. 
      

     Please note that in an SRH containing END.OTP SID, it is RECOMMENDED 
     to set the SRH.Flags.O-flag = 0. 
     
     Ali, et al.            Expires September 10, 2019              [Page 6] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

     3.3 SRH TLV 

     SRH TLV plays an important role in carrying OAM and Performance    
     Management (PM) metadata. For example, when SRH TLV piggybacks OAM 
     information onto the data traffic (i.e., for In-situ OAM (IOAM) in SRv6 
     networks). 

     4. OAM Mechanisms 

     This section describes how OAM mechanisms can be implemented using 
     the OAM building blocks described in the previous section. 
     Additional OAM mechanisms will be added in a future revision of the 
     document.  

     [RFC4443] describes Internet Control Message Protocol for IPv6 
     (ICMPv6) that is used by IPv6 devices for network diagnostic and 
     error reporting purposes. As Segment Routing with IPv6 data plane 
     (SRv6) simply adds a new type of Routing Extension Header, existing 
     ICMPv6 ping mechanisms can be used in an SRv6 network. This section 
     describes the applicability of ICMPv6 in the SRv6 network and how 
     the existing ICMPv6 mechanisms can be used for providing OAM 
     functionality.  

     The document does not propose any changes to the standard ICMPv6 
     [RFC4443], [RFC4884] or standard ICMPv4 [RFC792].   

     4.1. Ping 

      
     There is no hardware or software change required for ping operation 
     at the classic IPv6 nodes in an SRv6 network. That includes the 
     classic IPv6 node with ingress, egress or transit roles. 
     Furthermore, no protocol changes are required to the standard ICMPv6 
     [RFC4443], [RFC4884] or standard ICMPv4 [RFC792]. In other words, 
     existing ICMP ping mechanisms work seamlessly in the SRv6 networks.  

     The following subsections outline some use cases of the ICMP ping in 
     the SRv6 networks.  

     4.1.1. Classic Ping 

     The existing mechanism to ping a remote IP prefix, along the 
     shortest path, continues to work without any modification. The 
     initiator may be an SRv6 node or a classic IPv6 node. Similarly, the 
     egress or transit may be an SRv6 capable node or a classic IPv6 
     node.  
     
     Ali, et al.            Expires September 10, 2019              [Page 7] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

     If an SRv6 capable ingress node wants to ping an IPv6 prefix via an 
     arbitrary segment list <S1, S2, S3>, it needs to initiate ICMPv6 
     ping with an SR header containing the SID list <S1, S2, S3>. This is 
     illustrated using the topology in Figure 1. Assume all the links 
     have IGP metric 10 except both links between node2 and node3, which 
     have IGP metric set to 100. User issues a ping from node N1 to a 
     loopback of node 5, via segment list <B:2:C31, B:4:C52>.  

     Figure 2 contains sample output for a ping request initiated at node 
     N1 to the loopback address of node N5 via a segment list <B:2:C31, 
     B:4:C52>.  

     > ping A:5:: via segment-list B:2:C31, B:4:C52  

     Sending 5, 100-byte ICMP Echos to B5::, timeout is 2 seconds: 
     !!!!! 
     Success rate is 100 percent (5/5), round-trip min/avg/max = 0.625 
     /0.749/0.931 ms 
              Figure 2 A sample ping output at an SRv6 capable node 

     All transit nodes process the echo request message like any other 
     data packet carrying SR header and hence do not require any change. 
     Similarly, the egress node (IPv6 classic or SRv6 capable) does not 
     require any change to process the ICMPv6 echo request. For example, 
     in the ping example of Figure 2:  

        - Node N1 initiates an ICMPv6 ping packet with SRH as follows 
          (A:1::, B:2:C31)(A:5::, B:4:C52, B:2:C31, SL=2, NH = 
          ICMPv6)(ICMPv6 Echo Request).  
        - Node N2, which is an SRv6 capable node, performs the standard 
          SRH processing. Specifically, it executes the END.X function 
          (B:2:C31) and forwards the packet on link3 to N3.  
        - Node N3, which is a classic IPv6 node, performs the standard 
          IPv6 processing. Specifically, it forwards the echo request 
          based on DA B:4:C52 in the IPv6 header.  
        - Node N4, which is an SRv6 capable node, performs the standard 
          SRH processing. Specifically, it observes the END.X function 
          (B:4:C52) with PSP (Penultimate Segment POP) on the echo 
          request packet and removes the SRH and forwards the packet 
          across link10 to N5.  
        - The echo request packet at N5 arrives as an IPv6 packet without 
          an SRH. Node N5, which is a classic IPv6 node, performs the 
          standard IPv6/ ICMPv6 processing on the echo request and 
          responds, accordingly.  

     Ali, et al.            Expires September 10, 2019              [Page 8] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

     4.1.2. Pinging a SID Function  

     The classic ping described in the previous section cannot be used to 
     ping a remote SID function, as explained using an example in the 
     following.  

     Consider the case where the user wants to ping the remote SID 
     function B:4:C52, via B:2:C31, from node N1. Node N1 constructs the 
     ping packet (A:1::, B:2:C31)(B:4:C52, B:2:C31, SL=1; 
     NH=ICMPv6)(ICMPv6 Echo Request). The ping fails because the node N4 
     receives the ICMPv6 echo request with DA set to B:4:C52 but the next 
     header is ICMPv6, instead of SRH. To solve this problem, the 
     initiator needs to mark the ICMPv6 echo request as an OAM packet.  

     The OAM packets are identified either by setting the O-flag in SRH 
     or by inserting the END.OP/ END.OTP SIDs at an appropriate place in 
     the SRH. The following illustration uses END.OTP SID but the 
     procedures are equally applicable to the END.OP SID.  

     In an SRv6 network, the user can exercise two flavors of the ping: 
     end-to-end ping or segment-by-segment ping, as outlined in the 
     following.  

     4.1.2.1. End-to-end ping using END.OP/ END.OTP  

     The end-to-end ping illustration uses the END.OTP SID but the 
     procedures are equally applicable to the END.OP SID.  
      
          Consider the same example where the user wants to ping a remote 
          SID function B:4:C52, via B:2:C31, from node N1. To force a 
          punt of the ICMPv6 echo request at the node N4, node N1 inserts 
          the END.OTP SID just before the target SID B:4:C52 in the SRH. 
          The ICMPv6 echo request is processed at the individual nodes 
          along the path as follows:  

        - Node N1 initiates an ICMPv6 ping packet with SRH as follows 
          (A:1::, B:2:C31)(B:4:C52, B:4:OTP, B:2:C31; SL=2; 
          NH=ICMPv6)(ICMPv6 Echo Request).  
        - Node N2, which is an SRv6 capable node, performs the standard 
          SRH processing. Specifically, it executes the END.X function 
          (B:2:C31) on the echo request packet.  
        - Node N3 receives the packet as follows (A:1::, 
          B:4:OTP)(B:4:C52, B:4:OTP, B:2:C31 ; SL=1; NH=ICMPv6)(ICMPv6 
          Echo Request). Node N3, which is a classic IPv6 node, performs 
          the standard IPv6 processing. Specifically, it forwards the 
          echo request based on DA B:4:OTP in the IPv6 header.  
        - When node N4 receives the packet (A:1::, B:4:OTP)(B:4:C52, 
          B:4:OTP, B:2:C31 ; SL=1; NH=ICMPv6)(ICMPv6 Echo Request), it 
          processes the END.OTP SID, as described in the pseudocode in 
          Section 3. The packet gets punted to the ICMPv6 process for 
          processing. The ICMPv6 process checks if the next SID in SRH 
          (the target SID B:4:C52) is locally programmed.  

     Ali, et al.            Expires September 10, 2019              [Page 9] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

        - If the target SID is not locally programmed, N4 responses with 
          the ICMPv6 message (Type: "SRv6 OAM (TBA)", Code: "SID not 
          locally implemented (TBA)"); otherwise a success is returned.  

     4.1.2.2. Segment-by-segment ping using O-flag (Proof of Transit)  

     Consider the same example where the user wants to ping a remote SID 
     function B:4:C52, via B:2:C31, from node N1. However, in this ping, 
     the node N1 wants to get a response from each segment node in the 
     SRH as a "proof of transit". In other words, in the segment-by-segment 
     ping case, the node N1 expects a response from node N2 and node N4 for 
     their respective local SID function. When a response to O-bit is desired 
     from the last SID in a SID-list, it is the responsibility of the ingress 
     node to use USP as the last SID. E.g., in this example, the target SID 
     B:4:C52 is a USP SID.  

     To force a punt of the ICMPv6 echo request at node N2 and node N4, 
     node N1 sets the O-flag in SRH. The ICMPv6 echo request is processed 
     at the individual nodes along the path as follows:  and

        - Node N1 initiates an ICMPv6 ping packet with SRH as follows 
          (A:1::, B:2:C31)(B:4:C52, B:2:C31; SL=1, Flags.O=1; 
          NH=ICMPv6)(ICMPv6 Echo Request).  
        - When node N2 receives the packet (A:1::, B:2:C31)(B:4:C52, 
          B:2:C31; SL=1, Flags.O=1; NH=ICMPv6)(ICMPv6 Echo Request) 
          packet, it processes the O-flag in SRH, as described in the 
          pseudocode in Section 3. A time-stamped copy of the packet gets 
          punted to the ICMPv6 process for processing. Node N2 continues 
          to apply the B:2:C31 SID function on the original packet and 
          forwards it, accordingly. As B:4:C52 is a USP SID, N2 does not 
          remove the SRH. 
          The ICMPv6 process at node N2 checks if its local SID (B:2:C31) is 
          locally programmed or not and responds to the ICMPv6 Echo 
          Request.  
        - If the target SID is not locally programmed, N4 responses with 
          the ICMPv6 message (Type: "SRv6 OAM (TBA)", Code: "SID not 
          locally implemented (TBA)"); otherwise a success is returned. 
          Please note that, as mentioned in Section 3, if node N2 does 
          not support the O-flag, it simply ignores it and process the 
          local SID, B:2:C31.  
        - Node N3, which is a classic IPv6 node, performs the standard 
          IPv6 processing. Specifically, it forwards the echo request 
          based on DA B:4:C52 in the IPv6 header.  

     Ali, et al.            Expires September 10, 2019             [Page 10] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

        - When node N4 receives the packet (A:1::, B:4:C52)(B:4:C52, 
          B:2:C31; SL=0, Flags.O=1; NH=ICMPv6)(ICMPv6 Echo Request), it  
          processes the O-flag in SRH, as described in the pseudocode in 
          Section 3. A time-stamped copy of the packet gets punted to the 
          ICMPv6 process for processing. The ICMPv6 process at node N4 
          checks if its local SID (B:2:C31) is locally programmed or not 
          and responds to the ICMPv6 Echo Request. If the target SID is 
          not locally programmed, N4 responses with the ICMPv6 message 
          (Type: "SRv6 OAM (TBA)", Code: "SID not locally implemented 
          (TBA)"); otherwise a success is returned.  

     Support for O-flag is part of node capability advertisement. That 
     enables node N1 to know which segment nodes are capable of 
     responding to the ICMPv6 echo request. Node N1 processes the echo 
     responses and presents data to the user, accordingly.  

     Please note that segment-by-segment ping can be used to address 
     proof of transit use-case.   

     4.2. Error Reporting 

     Any IPv6 node can use ICMPv6 control messages to report packet 
     processing errors to the host that originated the datagram packet. 
     To name a few such scenarios: 

        - If the router receives an undeliverable IP datagram, or 
        - If the router receives a packet with a Hop Limit of zero, or  
        - If the router receives a packet such that if the router 
          decrements the packet's Hop Limit it becomes zero, or 
        - If the router receives a packet with problem with a field in 
          the IPv6 header or the extension headers such that it cannot 
          complete processing the packet, or  
        - If the router cannot forward a packet because the packet is 
          larger than the MTU of the outgoing link.  

     In the scenarios listed above, the ICMPv6 response also contains the 
     IP header, IP extension headers and leading payload octets of the 
     "original datagram" to which the ICMPv6 message is a response. 
     Specifically, the "Destination Unreachable Message", "Time Exceeded 
     Message", "Packet Too Big Message" and "Parameter Problem Message" 
     ICMPV6 messages can contain as much of the invoking packet as 
     possible without the ICMPv6 packet exceeding the minimum IPv6 MTU 
     [RFC4443], [RFC4884]. In an SRv6 network, the copy of the invoking 
     packet contains the SR header. The packet originator can use this 
     information for diagnostic purposes. For example, traceroute can use 
     this information as detailed in the following.  


     4.3. Traceroute 
     
     Ali, et al.            Expires September 10, 2019             [Page 11] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

     There is no hardware or software change required for traceroute 
     operation at the classic IPv6 nodes in an SRv6 network. That 
     includes the classic IPv6 node with ingress, egress or transit 
     roles. Furthermore, no protocol changes are required to the standard 
     traceroute operations. In other words, existing traceroute 
     mechanisms work seamlessly in the SRv6 networks.  

     The following subsections outline some use cases of the traceroute 
     in the SRv6 networks.   

     4.3.1. Classic Traceroute 

     The existing mechanism to traceroute a remote IP prefix, along the 
     shortest path, continues to work without any modification. The 
     initiator may be an SRv6 node or a classic IPv6 node. Similarly, the 
     egress or transit may be an SRv6 node or a classic IPv6 node.  

     If an SRv6 capable ingress node wants to traceroute to IPv6 prefix 
     via an arbitrary segment list <S1, S2, S3>, it needs to initiate 
     traceroute probe with an SR header containing the SID list <S1, S2, 
     S3>. That is illustrated using the topology in Figure 1. Assume all 
     the links have IGP metric 10 except both links between node2 and 
     node3, which have IGP metric set to 100. User issues a traceroute 
     from node N1 to a loopback of node 5, via segment list <B:2:C31, 
     B:4:C52>. Figure 3 contains sample output for the traceroute 
     request. 

     > traceroute A:5:: via segment-list B:2:C31, B:4:C52 

     Tracing the route to B5:: 

      1  2001:DB8:1:2:21:: 0.512 msec 0.425 msec 0.374 msec 
         SRH: (A:5::, B:4:C52, B:2:C31, SL=2) 
      
      2  2001:DB8:2:3:31:: 0.721 msec 0.810 msec 0.795 msec 
         SRH: (A:5::, B:4:C52, B:2:C31, SL=1) 
      
      3  2001:DB8:3:4::41:: 0.921 msec 0.816 msec 0.759 msec 
         SRH: (A:5::, B:4:C52, B:2:C31, SL=1) 

      4  2001:DB8:4:5::52:: 0.879 msec 0.916 msec 1.024 msec 

           Figure 3 A sample traceroute output at an SRv6 capable node 

     Please note that information for hop2 is returned by N3, which is a 
     classic IPv6 node. Nonetheless, the ingress node is able to display 
     SR header contents as the packet travels through the IPv6 classic 
     node. This is because the "Time Exceeded Message" ICMPv6 message can 
     contain as much of the invoking packet as possible without the 

     Ali, et al.            Expires September 10, 2019             [Page 12] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

     ICMPv6 packet exceeding the minimum IPv6 MTU [RFC4443]. The SR 
     header is also included in these ICMPv6 messages initiated by the 
     classic IPv6 transit nodes that are not running SRv6 software. 
     Specifically, a node generating ICMPv6 message containing a copy of 
     the invoking packet does not need to understand the extension 
     header(s) in the invoking packet.  

     The segment list information returned for hop1 is returned by N2, 
     which is an SRv6 capable node. Just like for hop2, the ingress node 
     is able to display SR header contents for hop1.  

     There is no difference in processing of the traceroute probe at an 
     IPv6 classic node and an SRv6 capable node. Similarly, both IPv6 
     classic and SRv6 capable nodes may use the address of the interface on 
     which probe was received as the source address in the ICMPv6 
     response. ICMP extensions defined in [RFC5837] can be used to also 
     display information about the IP interface through which the 
     datagram would have been forwarded had it been forwardable, and the 
     IP next hop to which the datagram would have been forwarded, the IP 
     interface upon which a datagram arrived, the sub-IP component of an 
     IP interface upon which a datagram arrived. 

     The information about the IP address of the incoming interface on 
     which the traceroute probe was received by the reporting node is 
     very useful. This information can also be used to verify if SID 
     functions B:2:C31 and B:4:C52 are executed correctly by N2 and N4, 
     respectively. Specifically, the information displayed for hop2 
     contains the incoming interface address 2001:DB8:2:3:31:: at N3. 
     This matches with the expected interface bound to END.X function 
     B:2:C31 (link3). Similarly, the information displayed for hop5 
     contains the incoming interface address 2001:DB8:4:5::52:: at N5. 
     This matches with the expected interface bound to the END.X function 
     B:4:C52 (link10).  

     4.3.2. Traceroute to a SID Function 

     The classic traceroute described in the previous section cannot be 
     used to traceroute a remote SID function, as explained using an 
     example in the following.  

     Consider the case where the user wants to traceroute the remote SID 
    function B:4:C52, via B:2:C31, from node N1. The trace route fails at N4. 
     This is because the node N4 trace route probe where next header is 
     UDP or ICMPv6, instead of SRH (even though the hop limit is set to 1). 
     To solve this problem, the 
     initiator needs to mark the ICMPv6 echo request as an OAM packet. 

     The OAM packets are identified either by setting the O-flag in SRH      
     or by inserting the END.OP or END.OTP SID at an appropriate place in the 
     SRH.  

     Ali, et al.            Expires September 10, 2019             [Page 13] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

     In an SRv6 network, the user can exercise two flavors of the 
     traceroute: hop-by-hop traceroute or overlay traceroute.  

        - In hop-by-hop traceroute, user gets responses from all nodes 
          including classic IPv6 transit nodes, SRv6 capable transit 
          nodes as well as SRv6 capable segment endpoints. E.g., consider 
          the example where the user wants to traceroute to a remote SID 
          function B:4:C52, via B:2:C31, from node N1. The traceroute 
          output will also display information about node3, which is a 
          transit (underlay) node.  
        - The overlay traceroute, on the other hand, does not trace the 
          underlay nodes. In other words, the overlay traceroute only 
          displays the nodes that acts as SRv6 segments along the route. 
          I.e., in the example where the user wants to traceroute to a 
          remote SID function B:4:C52, via B:2:C31, from node N1, the 
          overlay traceroute would only display the traceroute 
          information from node N2 and node N4; it will not display 
          information from node 3.  

     4.3.2.1. Hop-by-hop traceroute using END.OP/ END.OTP  

     In this section, hop-by-hop traceroute to a SID function is 
     exemplified using UDP probes. However, the procedure is equally 
     applicable to other implementation of traceroute mechanism. 
     Furthermore, the illustration uses the END.OTP SID but the 
     procedures are equally applicable to the END.OP SID 

     Consider the same example where the user wants to traceroute to a 
     remote SID function B:4:C52, via B:2:C31, from node N1. To force a 
     punt of the traceroute probe only at the node N4, node N1 inserts 
     the END.OTP SID just before the target SID B:4:C52 in the SRH. The 
     traceroute probe is processed at the individual nodes along the path 
     as follows. 

        - Node N1 initiates a traceroute probe packet with a 
          monotonically increasing value of hop count and SRH as follows 
          (A:1::, B:2:C31)(B:4:C52, B:4:OTP, B:2:C31; SL=2; 
          NH=UDP)(Traceroute probe).  
        - When node N2 receives the packet with hop-count = 1, it 
          processes the hop count expiry. Specifically, the node N2 
          responses with the ICMPv6 message (Type: "Time Exceeded", Code: 
          "Time to Live exceeded in Transit").  
        - When Node N2 receives the packet with hop-count > 1, it 
          performs the standard SRH processing. Specifically, it executes 
          the END.X function (B:2:C31) on the traceroute probe. 

     Ali, et al.            Expires September 10, 2019             [Page 14] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 
 
        - When node N3, which is a classic IPv6 node, receives the packet 
          (A:1::, B:4:OTP)(B:4:C52, B:4:OTP, B:2:C31 ; HC=1, SL=1; 
          NH=UDP)(Traceroute probe) with hop-count = 1, it processes the 
          hop count expiry. Specifically, the node N3 responses with the 
          ICMPv6 message (Type: "Time Exceeded", Code: "Time to Live 
          exceeded in Transit").  
        - When node N3, which is a classic IPv6 node, receives the packet 
          with hop-count > 1, it performs the standard IPv6 processing. 
          Specifically, it forwards the traceroute probe based on DA 
          B:4:OTP in the IPv6 header.  
        - When node N4 receives the packet (A:1::, B:4:OTP)(B:4:C52, 
          B:4:OTP, B:2:C31 ; SL=1; HC=1, NH=UDP)(Traceroute probe), it 
          processes the END.OTP SID, as described in the pseudocode in  
          Section 3. The packet gets punted to the traceroute process for 
          processing. The traceroute process checks if the next SID in 
          SRH (the target SID B:4:C52) is locally programmed. If the 
          target SID B:4:C52 is locally programmed, node N4 responses 
          with the ICMPv6 message (Type: Destination unreachable, Code: 
          Port Unreachable). If the target SID B:4:C52 is not a local 
          SID, node N4 silently drops the traceroute probe.  

     Figure 4 displays a sample traceroute output for this example.  

     > traceroute srv6 B:4:C52 via segment-list B:2:C31 

     Tracing the route to SID function B:4:C52 

      1  2001:DB8:1:2:21 0.512 msec 0.425 msec 0.374 msec 
         SRH: (B:4:C52, B:4:OTP, B:2:C31; SL=2) 
      
      2  2001:DB8:2:3:31 0.721 msec 0.810 msec 0.795 msec 
         SRH: (B:4:C52, B:4:OTP, B:2:C31; SL=1) 
      
      3  2001:DB8:3:4::41 0.921 msec 0.816 msec 0.759 msec 
         SRH: (B:4:C52, B:4:OTP, B:2:C31; SL=1) 

           Figure 4 A sample output for hop-by-hop traceroute to a SID 
                                    function 

     4.3.2.2. Tracing SRv6 Overlay  

     The overlay traceroute does not trace the underlay nodes, i.e., only 
     displays the nodes that acts as SRv6 segments along the path. This 
     is achieved by setting the SRH.Flags.O bit.   

     In this section, overlay traceroute to a SID function is exemplified 
     using UDP probes. However, the procedure is equally applicable to 
     other implementation of traceroute mechanism.  
     
     Ali, et al.            Expires September 10, 2019             [Page 15] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

     Consider the same example where the user wants to traceroute to a 
     remote SID function B:4:C52, via B:2:C31, from node N1.  

        - Node N1 initiates a traceroute probe with SRH as follows 
          (A:1::, B:2:C31)(B:4:C52, B:2:C31; HC=64, SL=1, Flags.O=1; 
          NH=UDP)(Traceroute Probe). Please note that the hop-count is 
          set to 64 to skip the underlay nodes from tracing. The O-flag 
          in SRH is set to make the overlay nodes (nodes processing the 
          SRH) respond.  
        - When node N2 receives the packet (A:1::, B:2:C31)(B:4:C52, 
          B:2:C31; SL=1, HC=64, Flags.O=1; NH=UDP)(Traceroute Probe), it 
          processes the O-flag in SRH, as described in the pseudocode in 
          Section 3. A time-stamped copy of the packet gets punted to the 
          traceroute process for processing. Node N2 continues to apply 
          the B:2:C31 SID function on the original packet and forwards 
          it, accordingly. The traceroute 
          process at node N2 checks if its local SID (B:2:C31) is locally 
          programmed. If the SID is not locally programmed, it silently 
          drops the packet. Otherwise, it performs the egress check by 
          looking at the SL value in SRH.  
        - As SL is not equal to zero (i.e., it's not egress node), node 
          N2 responses with the ICMPv6 message (Type: "SRv6 OAM (TBA)", 
          Code: "O-flag punt at Transit (TBA)"). Please note that, as 
          mentioned in Section 3, if node N2 does not support the O-flag, 
          it simply ignores it and processes the local SID, B:2:C31.  
        - When node N3 receives the packet (A:1::, B:4:C52)(B:4:C52, 
          B:2:C31; SL=0, HC=63, Flags.O=1; NH=UDP)(Traceroute Probe),  
          performs the standard IPv6 processing. Specifically, it 
          forwards the traceroute probe based on DA B:4:C52 in the IPv6 
          header. Please note that there is no hop-count expiration at 
          the transit nodes.   
        - When node N4 receives the packet (A:1::, B:4:C52)(B:4:C52, 
          B:2:C31; SL=0, HC=62, Flags.O=1; NH=UDP)(Traceroute Probe), it  
          processes the O-flag in SRH, as described in the pseudocode in 
          Section 3. A time-stamped copy of the packet gets punted to the 
          traceroute process for processing. The traceroute process at 
          node N4 checks if its local SID (B:2:C31) is locally 
          programmed. If the SID is not locally programmed, it silently 
          drops the packet. Otherwise, it performs the egress check by 
          looking at the SL value in SRH. As SL is equal to zero (i.e., 
          N4 is the egress node), node N4 tries to consume the UDP probe. 
          As UDP probe is set to access an invalid port, the node N4 
          responses with the ICMPv6 message (Type: Destination 
          unreachable, Code: Port Unreachable).  

     Figure 5 displays a sample overlay traceroute output for this 
     example. Please note that the underlay node N3 does not appear in 
     the output.  

     Ali, et al.            Expires September 10, 2019             [Page 16] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

     > traceroute srv6 B:4:C52 via segment-list B:2:C31 

     Tracing the route to SID function B:4:C52 

      1  2001:DB8:1:2:21:: 0.512 msec 0.425 msec 0.374 msec 
         SRH: (B:4:C52, B:4:OTP, B:2:C31; SL=2) 
      
      2  2001:DB8:3:4::41:: 0.921 msec 0.816 msec 0.759 msec 
         SRH: (B:4:C52, B:4:OTP, B:2:C31; SL=1) 

        Figure 5 A sample output for overlay traceroute to a SID function 
      
4.4 OAM Data Piggybacked in Data traffic


   OAM data can be piggybacked in the data packet while the
   packet traverses a path between two points in the network
   (also known as In-situ OAM (iOAM) data).
   This section defines how iOAM data fields are transported as part of the     
   Segment Routing with IPv6 data plane (SRv6) header.


4.4.1 IOAM Data Field Encapsulation in SRH

   The SRv6 encapsulation header (SRH) is defined in
   [I-D.6man-segment-routing-header].  IOAM data fields are carried in
   the SRH, using a single SRH TLV.  The different IOAM data fields
   defined in [I-D.ietf-ippm-ioam-data] are added as sub-TLVs.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  SRH-TLV-Type |     LEN       |    RESERVED                   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<-+
   |  IOAM-Type    | IOAM HDR LEN  |    RESERVED                   |  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  I
   !                                                               |  O
   !                                                               |  A
   ~                 IOAM Option and Data Space                    ~  M
   |                                                               |  |
   |                                                               |  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<-+
   |                                                               |
   |                                                               |
   |                 Payload + Padding (L2/L3/...)                 |

     Ali, et al.            Expires September 10, 2019             [Page 17] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

   |                                                               |

   |                                                               |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                Figure 1: IOAM data encapsulation in SRH

   SRH-TLV-Type: IOAM TLV Type for SRH is defined as TBA1.

   The fields related to the encapsulation of IOAM data fields in the
   SRH are defined as follows:

   IOAM-Type:  8-bit field defining the IOAM Option type, as defined in
      Section 7.2 of [I-D.ietf-ippm-ioam-data].

   IOAM HDR LEN:  8-bit unsigned integer.  Length of the IOAM HDR in
      4-octet units.

   RESERVED:  8-bit reserved field MUST be set to zero upon transmission
      and ignored upon receipt.

   IOAM Option and Data Space:  IOAM option header and data is present
      as defined by the IOAM-Type field, and is defined in Section 4 of
      [I-D.ietf-ippm-ioam-data].
 
   The IOAM TLVs MAY change en route [I-D.ietf-ippm-ioam-data].  For the
   IOAM TLVs carried in SRH that can change en route, the most
   significant bit of the SRH-TLV-Type is set
   [I-D.6man-segment-routing-header].  Furthermore, such IOAM TLV in SRH
   is considered mutable for ICV computation, the Type Length, and
   Variable Length Data is ignored for ICV Computation as defined in
   [RFC4302].


4.4.2.  Procedure

   This section summarizes the procedure for IOAM data encapsulation in
   SRv6 SRH.  The SR nodes implementing the IOAM functionality follows
   the MTU and other considerations outlined in
   [I-D.6man-extension-header-insertion].

     Ali, et al.            Expires September 10, 2019             [Page 18] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

4.4.2.1  Ingress Node

   The ingress node of an SR domain or an SR Policy
   [I-D.spring-segment-routing-policy] may insert the IOAM TLV in the
   SRH of the data packet.  The ingress node may also insert the IOAM
   data about the local information in the IOAM TLV in the SRH.  When
   IOAM data from the last node in the segment-list (Egress node) is
   desired, the ingress uses an Ultimate Segment Pop (USP) SID at the
   Egress node.

4.4.2.2  SR Segment Endpoint Node

   The SR segment endpoint node is any node receiving an IPv6 packet
   where the destination address of that packet is a local SID or a
   local interface address.  As part of the SR Header processing as
   described in [I-D.6man-segment-routing-header] and
   [I-D.spring-srv6-network-programming], the SR Segment Endpoint node
   performs the following IOAM operations.  The description borrows the
   terminology used in [I-D.6man-segment-routing-header].  Specifically,
   n refers to the number of segments encoded in the SRH, "Hdr Ext Len"
   refers to the length of the SRH.  The "SRH Header Len" is the length
   of the SRH header, which is 8 octets
   [I-D.6man-segment-routing-header].

   The SR Segment Endpoint node compares the "Hdr Ext Len" of the SRH
   with the length of the "segment-list" in the SRH.  Specifically, if
   the SRH.Hdr_Ext_Len > n*16 + 8, the node looks for the presence of
   the IOAM TLV in the SRH.  If an IOAM TLV is present in the SRH and is
   supported by the Segment Endpoint Node, the SR segment endpoint node
   MAY modify the IOAM TLV in SRH with local IOAM data as per IOAM draft
   [I-D.ietf-ippm-ioam-data].

4.4.2.3  Egress Node

   The Egress node is the last node in the segment-list of the SRH. When
   IOAM data from the Egress node is desired, a USP SID advertised by
   the Egress node is used.

   The processing of IOAM TLV at the Egress node is similar to the
   processing of IOAM TLV at the SR Segment Endpoint Node.  The only
   difference is that the Egress node also performs the functionality
   required by the Egress node in an IOAM domain.  E.g., the Egress node
   may telemeter the IOAM data to a controller.

     Ali, et al.            Expires September 10, 2019             [Page 19] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

     4.6. Monitoring of SRv6 Paths 

     In the recent past, network operators are interested in performing
     network OAM functions in a centralized manner.  Various data models
     like YANG are available to collect data from the network and manage
     it from a centralized entity.

     SR technology enables a centralized OAM entity to perform path 
     monitoring from centralized OAM entity without control plane 
     intervention on monitored nodes. [I.D-draft-ietf-spring-oam-usecase] 
     describes such a centralized OAM mechanism. Specifically, the draft 
     describes a procedure that can be used to perform path continuity 
     check between any nodes within an SR domain from a centralized 
     monitoring system, with minimal or no control plane intervene on the 
     nodes. However, the draft focuses on SR networks with MPLS data 
     plane. The same concept applies to the SRv6 networks. This document 
     describes how the concept can be used to perform path monitoring in 
     an SRv6 network. This document describes how the concept can be used 
     to perform path monitoring in an SRv6 network as follows. 
      
     In the above reference topology, N100 is the centralized monitoring 
     system implementing an END function B:100:1::. In order to verify a 
     segment list <B:2:C31, B:4:C52>, N100 generates a probe packet with 
     SRH set to (B:100:1::, B:4:C52, B:2:C31, SL=2). The controller routes 
     the probe packet towards the first segment, which is B:2:C31. N2 
     performs the standard SRH processing and forward it over link3 with 
     the DA of IPv6 packet set to B:4:C52. N4 also performs the normal 
     SRH processing and forward it over link10 with the DA of IPv6 packet 
     set to B:100:1::. This makes the probe loops back to the centralized 
     monitoring system.  

     In the reference topology in Figure 1, N100 uses an IGP protocol 
     like OSPF or ISIS to get the topology view within the IGP domain. 
     N100 can also use BGP-LS to get the complete view of an inter-domain 
     topology. In other words, the controller leverages the visibility of 
     the topology to monitor the paths between the various endpoints 
     without control plane intervention required at the monitored nodes. 

     5. Security Considerations 

     This document does not define any new protocol extensions and relies 
     on existing procedures defined for ICMP. This document does not 
     impose any additional security challenges to be considered beyond 
     security considerations described in [RFC4884], [RFC4443], [RFC792] 
     and RFCs that updates these RFCs.  

     Ali, et al.            Expires September 10, 2019             [Page 20] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

     6. IANA Considerations 

     6.1.   ICMPv6 type Numbers Registry 

     This document defines one ICMPv6 Message, a type that has been 
     allocated from the "ICMPv6 'type' Numbers" registry of [RFC4443]. 
     Specifically, it requests to add the following to the "ICMPv6 Type 
     Numbers" registry:  

         TBA (suggested value: 162) SRv6 OAM Message. 

     The document also requests the creation of a new IANA registry to 
     the  

     "ICMPv6 'Code' Fields" against the "ICMPv6 Type Numbers TBA - SRv6 
     OAM Message" with the following codes: 

     Code  Name                                    Reference 
     ------------------------------------------------------- 
     0     No Error                                This document  
     1     SID is not locally implemented          This document 
     2     O-flag punt at Transit                  This document 
      

     6.2. SRv6 OAM Endpoint Types 

     This I-D requests to IANA to allocate, within the "SRv6 Endpoint 
     Behaviors Registry" sub-registry belonging to the top-level 
     "Segment-routing with 
     IPv6 dataplane (SRv6) Parameters" registry [I-D.filsfils-spring-
     srv6-network-programming], the following allocations: 

      

                +-------------+-----+-------------------+-----------+ 
                | Value (Suggested | Endpoint Behavior | Reference | 
                | Value)           |                   |           | 
                +------------------+-------------------+-----------+ 
                | TBA (40)         |        End.OP     | [This.ID] | 
                | TBA (41)         |        End.OTP    | [This.ID] | 
                +------------------+-------------------+-----------+ 

     6.3. SRv6 IOAM TLV 

     Ali, et al.            Expires September 10, 2019             [Page 21] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 
     
   IANA is requested to allocate SRH TLV Type for IOAM TLV data fields
   under registry name "Segment Routing Header TLVs" requested by [I-
   D.6man-segment-routing-header].

    +--------------+--------------------------+---------------+

    | SRH TLV Type | Description              | Reference     |
    +--------------+--------------------------+---------------+
    | TBA1         | TLV for IOAM Data Fields | This document |
    +--------------+--------------------------+---------------+
 

     7. References 

     7.1. Normative References 

   [RFC792]   J. Postel, "Internet Control Message Protocol", RFC 792,
              September 1981.

   [RFC4443]  A. Conta, S. Deering, M. Gupta, Ed., "Internet Control
              Message Protocol (ICMPv6) for the Internet Protocol
              Version 6 (IPv6) Specification", RFC 4443, March 2006.

   [RFC4884]  R. Bonica, D. Gan, D. Tappan, C. Pignataro, "Extended ICMP
              to Support Multi-Part Messages", RFC 4884, April 2007.

   [RFC5837]  A. Atlas, Ed., R. Bonica, Ed., C. Pignataro, Ed., N. Shen,
              JR. Rivers, "Extending ICMP for Interface and Next-Hop
              Identification", RFC 5837, April 2010.

   [I-D.filsfils-spring-srv6-network-programming]  C. Filsfils, et al.,
              "SRv6 Network Programming",
              draft-filsfils-spring-srv6-network-programming, work in
              progress.

   [I-D.6man-segment-routing-header]  Previdi, S., Filsfils, et al,
              "IPv6 Segment Routing Header (SRH)",
              draft-ietf-6man-segment-routing-header, work in progress.

   [I-D.ietf-ippm-ioam-data]  Brockners, F., Bhandari, S., Pignataro,
              C., Gredler, H., Leddy, J., Youell, S., Mizrahi, T.,
              Mozes, D., Lapukhov, P., Chang, R., and Bernier, D., "Data
              Fields for In-situ OAM", draft-ietf-ippm-ioam-data, work
              in progress.

     Ali, et al.            Expires September 10, 2019             [Page 22] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

     7.2. Informative References 

   [I-D.bashandy-isis-srv6-extensions] IS-IS Extensions to Support Routing 
              over IPv6 Dataplane. L. Ginsberg, P. Psenak, C. Filsfils, 
              A. Bashandy, B. Decraene, Z. Hu, 
              draft-bashandy-isis-srv6-extensions, work in progress. 

   [I-D.dawra-idr-bgpls-srv6-ext] G. Dawra, C. Filsfils, K. Talaulikar, 
              et al., BGP Link State extensions for IPv6 Segment Routing
              (SRv6), draft-dawra-idr-bgpls-srv6-ext, work in progress.

   [I-D.ietf-spring-oam-usecase]  A Scalable and Topology-Aware MPLS
              Dataplane Monitoring System. R. Geib, C. Filsfils, C.
              Pignataro, N. Kumar, draft-ietf-spring-oam-usecase, work
              in progress.

   [I-D.brockners-inband-oam-data]  F. Brockners, et al., "Data Formats
              for In-situ OAM", draft-brockners-inband-oam-data, work in
              progress.

   [I-D.brockners-inband-oam-transport]  F.Brockners, at al.,
              "Encapsulations for In-situ OAM Data",
              draft-brockners-inband-oam-transport, work in progress.

   [I-D.brockners-inband-oam-requirements]  F.Brockners, et al.,
              "Requirements for In-situ OAM",
              draft-brockners-inband-oam-requirements, work in progress.

   [I-D.spring-segment-routing-policy]  Filsfils, C., et al., "Segment
              Routing Policy for Traffic Engineering",
              draft-filsfils-spring-segment-routing-policy, work in
              progress. 
              
     8. Acknowledgments 

     To be added.  

Authors' Addresses

   Clarence Filsfils
   Cisco Systems, Inc.
   Email: cfilsfil@cisco.com


   Zafar Ali
   Cisco Systems, Inc.
   Email: zali@cisco.com


   Nagendra Kumar
   Cisco Systems, Inc.
   Email: naikumar@cisco.com
   
     Ali, et al.            Expires September 10, 2019             [Page 23] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 


   Carlos Pignataro
   Cisco Systems, Inc.
   Email: cpignata@cisco.com



   Rakesh Gandhi
   Cisco Systems, Inc.
   Canada
   Email: rgandhi@cisco.com


   Frank Brockners
   Cisco Systems, Inc.
   Germany
   Email: fbrockne@cisco.com

   John Leddy
   Comcast
   Email: John_Leddy@cable.comcast.com


   Robert Raszuk
   Bloomberg LP
   731 Lexington Ave
   New York City, NY10022, USA
   Email: robert@raszuk.net


   Satoru Matsushima
   SoftBank
   Japan
   Email: satoru.matsushima@g.softbank.co.jp

   Daniel Voyer 
   Bell Canada 
   Email: daniel.voyer@bell.ca 

   Gaurav Dawra  
   LinkedIn 
   Email: gdawra.ietf@gmail.com 
      
   Bart Peirens 
   Proximus 
   Email: bart.peirens@proximus.com 

     Ali, et al.            Expires September 10, 2019             [Page 24] 
      
     Internet-Draft                 SRv6 OAM                      March 2019 

   Mach Chen  
   Huawei 
   Email: mach.chen@huawei.com 

   Cheng Li
   Huawei
   Email: chengli13@huawei.com

   Faisal Iqbal
   Individual
   Email: faisal.ietf@gmail.com

      
   Gaurav Naik 
   Drexel University 
   United States of America 
   Email: gn@drexel.edu 































      
      
     Ali, et al.                                                   [Page 25] 
      
    

