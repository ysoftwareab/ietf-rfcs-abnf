PS = 01                               if len(P) mod 128 = 120,
PS = 0202                             if len(P) mod 128 = 112,
PS = 030303                           if len(P) mod 128 = 104,
PS = 04040404                         if len(P) mod 128 = 96,
PS = 0505050505                       if len(P) mod 128 = 88,
PS = 060606060606                     if len(P) mod 128 = 80,
PS = 07070707070707                   if len(P) mod 128 = 72,
PS = 0808080808080808                 if len(P) mod 128 = 64,
PS = 090909090909090909               if len(P) mod 128 = 56,
PS = 0A0A0A0A0A0A0A0A0A0A             if len(P) mod 128 = 48,
PS = 0B0B0B0B0B0B0B0B0B0B0B           if len(P) mod 128 = 40,
PS = 0C0C0C0C0C0C0C0C0C0C0C0C         if len(P) mod 128 = 32,
PS = 0D0D0D0D0D0D0D0D0D0D0D0D0D       if len(P) mod 128 = 24,
PS = 0E0E0E0E0E0E0E0E0E0E0E0E0E0E     if len(P) mod 128 = 16,
PS = 0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F   if len(P) mod 128 = 8,
PS = 10101010101010101010101010101010 if len(P) mod 128 = 0.

MAC_KEY = initial MAC_KEY_LEN bytes of K

ENC_KEY = final ENC_KEY_LEN bytes of K

S = CBC-ENC(ENC_KEY, P || PS),

T = MAC(MAC_KEY, A || S || AL),

C = S || T.

L = 16 * ( floor(M / 16) + 2)

IV  = random
C_i = / IV                          if i=0,
              \ CIPHER(K, P_i XOR C_{i-1})  if i=1, 2, ... , n.

P_i = CIPHER-INV(K, P_1 XOR IV)     for i=1, 2, ... , n.
