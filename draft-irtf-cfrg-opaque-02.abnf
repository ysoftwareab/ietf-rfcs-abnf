response = CreateCredentialResponse(request, server_public_key, credential_file)

                               response
                      <-------------------------

server_mac_key =
     HKDF-Expand-Label(handshake_secret, "server mac", "", Nh)
client_mac_key =
     HKDF-Expand-Label(handshake_secret, "client mac", "", Nh)
handshake_encrypt_key =
     HKDF-Expand-Label(handshake_secret, "handshake enc", "", Nh)

info = "3DH keys" || I2OSP(len(client_nonce), 2) || client_nonce
                    || I2OSP(len(server_nonce), 2) || server_nonce
                    || I2OSP(len(client_identity), 2) || client_identity
                    || I2OSP(len(server_identity), 2) || server_identity

   See Section 6.2 for more information about identities client_identity
   and server_identity.

   Let "epkS" and "eskS" be "server_keyshare" and the corresponding
   secret key, and "epkU" and "eskU" be "client_keyshare" and the
   corresponding secret key.  The input parameter "IKM" the
   concatenation of three DH values computed by the client as follows:

IKM = epkS^eskU || pkS^eskU || epkS^skU

IKM = epkU^eskS || epkU^skS || pkU^eskS
info_pad = HKDF-Expand(Ke2, "encryption pad", len(server_info))
enc_server_info = xor(info_pad, server_info)

client_identity = client_public_key and server_identity =
info = "HMQV keys" || I2OSP(len(client_nonce), 2) || client_nonce
                    || I2OSP(len(server_nonce), 2) || server_nonce
                    || I2OSP(len(client_identity), 2) || client_identity
                    || I2OSP(len(server_identity), 2) || server_identity

   Second, the IKM derivation would change.  Assuming HMQV is
   instantiated with a cyclic group of prime order p with bit length L,
   clients would compute "IKM" as follows:

   u' = (eskU + u \* skU) mod p
IKM = (epkS \* pkS^s)^u'

IKM = (epkU \* pkU^u)^s'

hashInput = I2OSP(len(epkU), 2) || epkU ||
               I2OSP(len(info), 2) || info ||
               I2OSP(len("client"), 2) || "client"
u = Hash(hashInput) mod L

hashInput = I2OSP(len(epkS), 2) || epkS ||
               I2OSP(len(info), 2) || info ||
               I2OSP(len("server"), 2) || "server"
s = Hash(hashInput) mod L

