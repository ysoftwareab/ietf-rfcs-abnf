z  =  (x + y) mod 2^w.

Wt = M(i)t
Wt = SSIG1(W(t-2)) + W(t-7) + SSIG0(t-15) + W(t-16)

a = H(i-1)0
b = H(i-1)1
c = H(i-1)2
d = H(i-1)3
e = H(i-1)4
f = H(i-1)5
g = H(i-1)6
h = H(i-1)7

T1 = h + BSIG1(e) + CH(e,f,g) + Kt + Wt
T2 = BSIG0(a) + MAJ(a,b,c)
h = g
g = f
f = e
e = d + T1
d = c
c = b
b = a
a = T1 + T2

Wt = M(i)t
Wt = SSIG1(W(t-2)) + W(t-7) + SSIG0(t-15) + W(t-16)
a = H(i-1)0
b = H(i-1)1
c = H(i-1)2
d = H(i-1)3
e = H(i-1)4
f = H(i-1)5
g = H(i-1)6
h = H(i-1)7

T1 = h + BSIG1(e) + CH(e,f,g) + Kt + Wt
T2 = BSIG0(a) + MAJ(a,b,c)
h = g
g = f
f = e
e = d + T1
d = c
c = b
b = a
a = T1 + T2

shaSuccess = 0      constant returned by each function on
                            success
shaNull = 1         constant returned by each function when
                            presented with a null pointer parameter
shaInputTooLong = 2  constant returned by each function when the
                            input data is too long
shaSuccess = 0,
SHA1_Message_Block_Size = 64, SHA256_Message_Block_Size = 64,
SHA512_Message_Block_Size = 128, SHA1HashSize = 20,
SHA224HashSize = 28, SHA256HashSize = 32, SHA384HashSize = 48,
SHA512HashSize = 64, SHA1HashSizeBits = 160,
SHA224HashSizeBits = 224, SHA256HashSizeBits = 256,
SHA384HashSizeBits = 384, SHA512HashSizeBits = 512
A = context->Intermediate_Hash[0];
B = context->Intermediate_Hash[1];
C = context->Intermediate_Hash[2];
D = context->Intermediate_Hash[3];
E = context->Intermediate_Hash[4];

temp = SHA1_ROTL(5,A) + SHA_Ch(B, C, D) + E + W[t] + K[0];
E = D;
D = C;
C = SHA1_ROTL(30,B);
B = A;
A = temp;
temp = SHA1_ROTL(5,A) + SHA_Parity(B, C, D) + E + W[t] + K[1];
E = D;
D = C;
C = SHA1_ROTL(30,B);
B = A;
A = temp;
temp = SHA1_ROTL(5,A) + SHA_Maj(B, C, D) + E + W[t] + K[2];
E = D;
D = C;
C = SHA1_ROTL(30,B);
B = A;
A = temp;
temp = SHA1_ROTL(5,A) + SHA_Parity(B, C, D) + E + W[t] + K[3];
E = D;
D = C;
C = SHA1_ROTL(30,B);
B = A;
A = temp;
A = context->Intermediate_Hash[0];
B = context->Intermediate_Hash[1];
C = context->Intermediate_Hash[2];
D = context->Intermediate_Hash[3];
E = context->Intermediate_Hash[4];
F = context->Intermediate_Hash[5];
G = context->Intermediate_Hash[6];
H = context->Intermediate_Hash[7];

temp1 = H + SHA256_SIGMA1(E) + SHA_Ch(E,F,G) + K[t] + W[t];
temp2 = SHA256_SIGMA0(A) + SHA_Maj(A,B,C);
H = G;
G = F;
F = E;
E = D + temp1;
D = C;
C = B;
B = A;
A = temp1 + temp2;
ADDTO4_temp = (word1)[3],                                  \
ADDTO4_temp2 = (word1)[2],                                 \
ADDTO4_temp = (word1)[1],                                  \
ADDTO2_temp = (word1)[1],                                  \
A = context->Intermediate_Hash[0];
B = context->Intermediate_Hash[1];
C = context->Intermediate_Hash[2];
D = context->Intermediate_Hash[3];
E = context->Intermediate_Hash[4];
F = context->Intermediate_Hash[5];
G = context->Intermediate_Hash[6];
H = context->Intermediate_Hash[7];

temp1 = H + SHA512_SIGMA1(E) + SHA_Ch(E,F,G) + K[t] + W[t];
temp2 = SHA512_SIGMA0(A) + SHA_Maj(A,B,C);
H = G;
G = F;
F = E;
E = D + temp1;
D = C;
C = B;
B = A;
A = temp1 + temp2;
err = hashes[hashno].funcReset(psha);
j = length;
err = hashes[hashno].funcInput(psha,
        (const unsigned char *) testarray, j);
err = hashes[hashno].funcFinalBits(psha, extrabits,
      number_extrabits);
err = hashes[hashno].funcResult(psha, Message_Digest);
err = hashes[hashno].funcReset(psha);
err = hashes[hashno].funcInput(psha, buf, nread);
err = hashes[hashno].funcResult(psha, Message_Digest);
err = shaSuccess;

err = hash(&sha, 0, loopno, hashno, hashstr, strlen(hashstr),
          1, 0, 0, resultstr, printResults, printPassFail);

err = hashfile(&sha, hashno, hashfilename, resultstr,
          printResults, printPassFail);

err = hash(&sha, testno, loopno, hashno,
                      hashes[hashno].tests[testno].testarray,
                      hashes[hashno].tests[testno].length,
                      hashes[hashno].tests[testno].repeatcount,
                      hashes[hashno].tests[testno].number_extrabits,
                      hashes[hashno].tests[testno].extrabits,
                      hashes[hashno].tests[testno].resultarray,
                      printResults, printPassFail);
err = hashes[hashno].funcInput(&sha, (const unsigned char *)
        hashes[hashno].tests[1].testarray, 1);
err = hashes[hashno].funcReset(0);
ap = argv[xoptind] + avplace;

c = *++ap;

cp = strchr(optstring, c);
avplace = 0;
xoptarg = argv[xoptind++];
xoptarg = ap + 1;
avplace = 0;
xoptarg = NULL;
