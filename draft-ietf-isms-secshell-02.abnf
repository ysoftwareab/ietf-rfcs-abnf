statusInformation = -- success or errorIndication
statusInformation =            -- success or errorIndication
           generateRequestMsg(
           IN   messageProcessingModel  -- typically, SNMP version
           IN   globalData              -- message header, admin data
           IN   maxMessageSize          -- of the sending SNMP entity
           IN   securityModel           -- for the outgoing message
           IN   securityEngineID        -- authoritative SNMP entity
           IN   securityName            -- on behalf of this principal
           IN   securityLevel           -- Level of Security requested
           IN   scopedPDU               -- message (plaintext) payload
           OUT  securityParameters      -- filled in by Security Module
           OUT  wholeMsg                -- complete generated message
           OUT  wholeMsgLength          -- length of generated message
                )

statusInformation =            -- success or errorIndication
           generateResponseMsg(
           IN   messageProcessingModel  -- typically, SNMP version
           IN   globalData              -- message header, admin data
           IN   maxMessageSize          -- of the sending SNMP entity
           IN   securityModel           -- for the outgoing message
           IN   securityEngineID        -- authoritative SNMP entity
           IN   securityName            -- on behalf of this principal
           IN   securityLevel           -- Level of Security requested
           IN   scopedPDU               -- message (plaintext) payload
           IN   securityStateReference  -- reference to security state
                                        -- information from original
                                        -- request
           OUT  securityParameters      -- filled in by Security Module
           OUT  wholeMsg                -- complete generated message
           OUT  wholeMsgLength          -- length of generated message
                )

result =                         -- SUCCESS or errorIndication
statusInformation =  -- errorIndication or success
                            -- error counter OID/value if error
tmSessionID = a unique local identifier
tmTransportDomain = tDomainSSH
tmTransportAddress = x.x.x.x:y
tmSecurityLevel = "authPriv"


tmSecurityName = the user name authenticated by SSH

tmAuthMechanism = "password"
tmAuthProtocol = "password"
tmSecurityLevel = appropriate choice from SnmpSecurityLevel
tmAuthzRef = "[todo] authorization data obtained during the
tmAuthMechanism = "publickey"
tmAuthProtocol = public key algorithm name
tmSecurityLevel = appropriate choice from SnmpSecurityLevel
tmAuthzRef = "[todo] authorization data obtained during the
tmAuthMechanism = "hostbased"
tmAuthProtocol = public key algorithm for host key
tmSecurityLevel = appropriate choice from SnmpSecurityLevel
tmAuthzRef = "[todo] authorization data obtained during the
messageProcessingModel = SNMPv3
securityModel = SSHSM
sessionID = tmSessionID


statusInformation =            -- success or errorIndication
           generateRequestMsg(
           IN   messageProcessingModel  -- typically, SNMP version
           IN   globalData              -- message header, admin data
           IN   maxMessageSize          -- of the sending SNMP entity
           IN   securityModel           -- for the outgoing message
           IN   securityEngineID        -- authoritative SNMP entity
           IN   securityName            -- on behalf of this principal
           IN   securityLevel           -- Level of Security requested
           IN   scopedPDU               -- message (plaintext) payload
           OUT  securityParameters      -- filled in by Security Module
           OUT  wholeMsg                -- complete generated message
           OUT  wholeMsgLength          -- length of generated message
           OUT  tmStateReference    -- reference to session info
                )
statusInformation = -- success or errorIndication
           generateResponseMsg(
           IN   messageProcessingModel  -- typically, SNMP version
           IN   globalData              -- message header, admin data
           IN   maxMessageSize          -- of the sending SNMP entity
           IN   securityModel           -- for the outgoing message
           IN   securityEngineID        -- authoritative SNMP entity
           IN   securityName            -- on behalf of this principal
           IN   securityLevel           -- Level of Security requested
           IN   scopedPDU               -- message (plaintext) payload
           IN   securityStateReference  -- reference to security state
                                        -- information from original
                                        -- request
           OUT  securityParameters      -- filled in by Security Module
           OUT  wholeMsg                -- complete generated message
           OUT  wholeMsgLength          -- length of generated message
           OUT  tmStateReference    -- reference to session info
                )

      1) verify securityModel = sshsmSecurityModel
      determine whether we need to use the SSH subsystem for Request/
      Responses ("SNMP"), or for Notifications ("SNMPNotification") or
      Reports. [discuss] #34 - how do we determine this? [discuss] #35 -
      which subsystem is used for Reports?
      2) If there is a securityStateReference, extract the
      tmStateReference information from the cachedSecurityData from the
      Request message.  At this point, the cachedSecurityData can now be
      discarded. [todo] clarify which data can be discarded.
      2b) [todo] #13 - If the message is a Response, and a session never
      existed or has been closed, or the Request/Response subsystem
      never existed or was closed, then discard the message, and
      generate a Report
      3) If there is no securityStateReference, then lookup the session
      info indexed by {securityModel, securityName, securityLevel}, and
      set tmStateReference.
      [todo] insert check for msgflags versus session/transport
      characterstics here, and in the transport-mapping portion.
      4) If there is no session info for this index, then create an
      incomplete tmStateReference indexed by the provided {securityName,
      securityLevel}.  Store the securityModel and maxMessageSize
      information.  When the TMSP gets the incomplete tmStateReference,
      it will recognize that it needs to establish a new session, and
      fill in the rest of the information for subsequent use.
      5) fill in the securityParameters with the serialization of a
      zero-length OCTET STRING.
      6) The wholeMsg is now serialized and then represents the
      unauthenticated message being prepared.
      7) The completed message (wholeMsg) with its length
      (wholeMsgLength) and securityParameters (a zero-length octet
      string) and tmStateReference is returned to the calling module
      with the statusInformation set to success.

statusInformation =  -- errorIndication or success
                            -- error counter OID/value if error
