command-select  =/ convert

uid             =/ "UID" SP convert
                    ; Unique identifiers used instead of message
                    ; sequence numbers
   
convert         = "CONVERT" SP sequence-set SP convert-params SP
                        ( convert-att /
                          "(" convert-att *(SP convert-att) ")" )

convert-att     = "UID" /
                        "BODYPARTSTRUCTURE" section-convert /
                        "BINARY" section-convert [partial] /
                        "BINARY.SIZE" section-convert /
                        "BODY[HEADER]" /
                        "BODY[" section-part ".HEADER]" /
                        "BODY[" section-part ".MIME]"
                    ; "partial" is defined in [RFC3516]
                    ; section-part is defined in [RFC3501].
   
convert-params = "(" (quoted-to-mime-type / default-conversion)
                       [SP "(" transcoding-params ")"] ")" 

quoted-to-mime-type = DQUOTE to-mime-type DQUOTE

transcoding-params  = transcoding-param 
                            *(SP transcoding-param)

transcoding-param-names  = transcoding-param-name
                            *(SP transcoding-param-name)

transcoding-param  = transcoding-param-name SP
                           transcoding-param-value 
    
transcoding-param-name = astring
               ; <transcod-param-name-nq> represented as a quoted,
               ; literal or atom. Note that
               ; <transcod-param-name-nq> allows for "%" which is
               ; not allowed in atoms. Such values must be
               ; represented as quoted or literal.

transcod-param-name-nq = Feature-tag
               ; Feature-tag is defined in [MEDIAFEAT-REG].

transcoding-param-value = astring 
    
default-conversion = "NIL"

message-data   =/ nz-number SP "CONVERTED" SP convert-correlator
                         SP convert-msg-attrs

convert-correlator = "(" "TAG" SP tag-string ")"

tag-string = string
                    ; tag of the command that caused
                    ; the CONVERTED response, sent as
                    ; a string.

convert-msg-attrs = "(" convert-msg-att *(SP convert-msg-att) ")"
                    ; "UID" MUST be the first data item, if present.

convert-msg-att = msg-att-semistat / msg-att-conv-static
                    
msg-att-conv-static  = "UID" SP uniqueid
                    ; MUST NOT change for a message
      
msg-att-semistat = 
                   ( "BINARY" section-convert ["<" number ">"] SP 
                      (nstring / literal8 / converterror-phrase) ) /
                   ( "BINARY.SIZE" section-convert SP
                      (number / converterror-phrase) ) /
                   ( "BODYPARTSTRUCTURE" section-convert SP
                      (body / converterror-phrase) )
                    ; MUST NOT change during an IMAP "session",
                    ; but not necessarily static in a long term.

section-convert = section-binary
                    ; <section-binary> is defined in [RFC3516].
                    ;
                    ; Note that unlike [RFC3516], conversion
                    ; of a top level multipart/* is allowed.

resp-text-code =/ "TEMPFAIL" /
                            "MAXCONVERTMESSAGES" SP nz-number /
                            "MAXCONVERTPARTS" SP nz-number

mimetype-and-params = quoted-to-mime-type
              [SP "(" transcoding-params ")"]
              ; always includes a specific MIME type

converterror-phrase = "(" "ERROR" SP
               convert-err-descript SP convert-error-code ")"

convert-error-code = "TEMPFAIL" [SP nz-number]
                             / bad-params
                             / missing-params
          
convert-err-descript = string
               ; Human readable text explaining the conversion error

quoted-from-mime-type = DQUOTE from-concrete-mime-type DQUOTE

bad-params = "BADPARAMETERS"
                 1*(SP (quoted-from-mime-type / nil)
                    SP mimetype-and-params)
              ; nil is only returned when the body part doesn't exist

missing-params = "MISSINGPARAMETERS"
                 1*(SP quoted-from-mime-type SP
                       mimetype-and-missing-params)

mimetype-and-missing-params = quoted-to-mime-type
              "(" transcoding-param-names ")"
              ; always includes a specific MIME type
    
convert-entry-req = available-conversions /
                             available-transcoding-parameters 
     
available-conversions = "/convert/" from-mime-type "/types"

any-mime-type  = "@"

from-mime-type = (type-name "/" any-mime-type) /
                          concrete-mime-type
                          ; "type/@" or "type/subtype" 
                          ; type-name is defined in [MIME-MTSRP].

concrete-mime-type = type-name "/" subtype-name  
                          ; i.e.  "type/subtype".
                          ; type-name and subtype-name
                          ; are defined in [MIME-MTSRP].
                          ;
                          ; Note that [METADATA] allows for '.'
                          ; in annotation names, but prohibits
                          ; use of "priv" or "shared" as
                          ; a component of an annotation name,
                          ; e.g. e.g. foo.priv.bar is disallowed.
                          ; But note that such conflict is
                          ; unlikely.

from-concrete-mime-type = concrete-mime-type
    
to-mime-type = concrete-mime-type
    
available-transcoding-parameters = "/convert/"
                          from-concrete-mime-type "/"
                          to-mime-type "/params"
            ; Name of an annotation containing transcoding parameters.
            ; i.e. /convert/frmtype/frmsubtype/totype/tosubtype/params.

types-shared-value = from-concrete-mime-type
                              *(";" from-concrete-mime-type)
    
params-shared-value = transcoding-param-name
                               *(";" transcoding-param-name)


