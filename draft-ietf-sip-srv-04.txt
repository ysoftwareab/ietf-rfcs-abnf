





Internet Engineering Task Force                                   SIP WG
Internet Draft                                 J.Rosenberg,H.Schulzrinne
draft-ietf-sip-srv-04.txt                        dynamicsoft,Columbia U.
January 24, 2002
Expires: July 2002


                       SIP: Locating SIP Servers

STATUS OF THIS MEMO

   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC2026.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress".

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt

   To view the list Internet-Draft Shadow Directories, see
   http://www.ietf.org/shadow.html.


Abstract

   The Session Initiation Protocol (SIP) uses DNS procedures to allow a
   client to resolve a SIP URI into the IP address, port, and transport
   protocol of the next hop to contact. It also uses DNS to allow a
   server to send a response to a backup client if the primary client
   has failed. This document describes those DNS procedures in detail.


1 Introduction

   The Session Initiation Protocol (SIP) [1] is a client-server protocol
   used for the initiation and management of communications sessions
   between users. SIP end systems are called user agents, and
   intermediate elements are known as proxy servers. A typical SIP
   configuration, referred to as the SIP "trapezoid" is shown in Figure
   1. In this diagram, a caller in domain A (UA1) wishes to call Joe in



J.Rosenberg,H.Schulzrinne                                     [Page 1]

Internet Draft                  sip-srv                 January 24, 2002


   domain B (joe@B). To do so, it communicates with proxy 1 in its
   domain (domain A). Proxy 1 forwards the request to the proxy for the
   domain of the called party (domain B), which is proxy 2. Proxy 2
   forwards the call to the called party, UA 2.



  ............................          ..............................    
  .                          .          .                            .    
  .                +-------+ .          . +-------+                  .    
  .                |       | .          . |       |                  .    
  .                | Proxy |------------- | Proxy |                  .    
  .                |   1   | .          . |  2    |                  .    
  .                |       | .          . |       |                  .    
  .              / +-------+ .          . +-------+ \                .    
  .             /            .          .            \               .    
  .            /             .          .             \              .    
  .           /              .          .              \             .    
  .          /               .          .               \            .    
  .         /                .          .                \           .    
  .        /                 .          .                 \          .    
  .       /                  .          .                  \         .    
  .   +-------+              .          .                +-------+   .    
  .   |       |              .          .                |       |   .    
  .   |       |              .          .                |       |   .    
  .   | UA 1  |              .          .                | UA 2  |   .    
  .   |       |              .          .                |       |   .    
  .   +-------+              .          .                +-------+   .    
  .              Domain A    .          .   Domain B                 .    
  ............................          ..............................    
                                                                          
                                                                          
                                                                          
                                                                          
                                                                          
                                                                          
                                                                          
                                                                          
                                                                          
                                                                          
                                                                          
                                                                          
                                                                          



   Figure 1: The SIP trapezoid





J.Rosenberg,H.Schulzrinne                                     [Page 2]

Internet Draft                  sip-srv                 January 24, 2002


   As part of this call flow, proxy 1 needs to determine a SIP server
   for domain B. To do this, proxy 1 makes use of DNS procedures, using
   both SRV [2] and NAPTR [3] records. This document describes the
   specific problems that SIP uses DNS to help solve, and provides a
   solution.

2 Problems DNS is Needed to Solve

   DNS is needed to help solve two aspects of the general call flow
   described in the Introduction. The first is for proxy 1 to discover
   the SIP server in domain B, in order to forward the call for joe@B.
   The second is for proxy 2 to identify a backup for proxy 1 in the
   event it fails after forwarding the request.

   For the first aspect, proxy 1 specifically needs to determine the IP
   address, port and transport protocol for the server in domain B.
   Transport Protocol is particularly noteworthy. Unlike many other
   protocols, SIP can run over a variety of transport protocols,
   including TCP, UDP, TLS/TCP and SCTP. Thus, clients need to be able
   to automatically determine which transport protocols are available.
   The proxy sending the request has a particular set of transport
   protocols it supports and a preference for using those transport
   protocols. Proxy 2 has its own set of transport protocols it
   supports, and relative preferences for those transport protocols. All
   proxies must implement both UDP and TCP, so that there is always an
   intersection of capabilities. Some form of DNS procedures are needed
   for proxy 1 to discover the available transport protocols for SIP
   services at domain B, and the relative preferences of those transport
   protocols. Proxy 1 intersects its list of supported transport
   protocols with those of proxy 2 and then chooses the protocol
   preferred by proxy 2.

   It is important to note that DNS lookups can be used multiple times
   throughout processing of a call. In general, an element that wishes
   to send a request (called a client) may need to perform DNS
   processing to determine the IP address, port, and transport protocol
   of a next hop element, called a server (it can be a proxy or a user
   agent). Such processing could, in principle, occur at every hop
   between elements.

   Since SIP is used for the establishment of interactive communications
   services, the time it takes to complete a transaction between a
   caller and called party is important. Typically, the time from when
   the caller initiates a call until the time the called party is
   alerted should be no more than a few seconds. Given that there can be
   multiple hops, each of which is doing DNS lookups in addition to
   other potentially time-intensive operations, the amount of time
   available for DNS lookups at each hop is limited.



J.Rosenberg,H.Schulzrinne                                     [Page 3]

Internet Draft                  sip-srv                 January 24, 2002


   Scalability and high availability are important in SIP. SIP services
   scale up through clustering techniques. Typically, in a realistic
   version of the network in Figure 1, proxy 2 would be a cluster of
   homogeneously configured proxies. DNS needs to provide the ability
   for domain B to configure a set of servers, along with prioritization
   and weights in order to provide a crude level of capacity-based load
   balancing.

   SIP assures high availability by having upstream elements detect
   failures. For example, assume that proxy 2 is implemented as a
   cluster of two proxies, proxy 2.1 and proxy 2.2. If proxy 1 sends a
   request to proxy 2.1 and the request fails, it retries the request by
   sending it to proxy 2.2. This request would fail, and that would be
   detected by proxy 1. Proxy 1 would then try proxy 2.2. In many cases,
   proxy 1 will not know which domains it will ultimately communicate
   with. That information would be known when a user actually makes a
   call to another user in that domain. Proxy 1 may never communicate
   with that domain again after the call completes. Proxy 1 may
   communicate with thousands of different domains within a few minutes,
   and proxy 2 could receive requests from thousands of different
   domains within a few minutes. Because of this "many-to-many"
   relationship, and the possibly long intervals between communications
   between a pair of domains, it is not generally possible for an
   element to maintain dynamic availability state for the proxies it
   will communicate with. When a proxy gets its first call with a
   particular domain, it will try the servers in that domain in some
   order until it finds one that is available. The identity of the
   available server would ideally be cached for some amount of time in
   order to reduce call setup delays of subsequent calls. The client
   cannot query a failed server continuously to determine when it
   becomes available again, since this does not scale. Furthermore, the
   availability state must eventually be flushed in order to
   redistribute load to recovered elements when they come back online.

   It is possible for elements to fail in the middle of a transaction.
   For example, after proxy 2 forwards the request to UA 2, proxy 1
   fails. UA 2 sends its response to proxy 2, which tries to forward it
   to proxy 1, which is no longer available. The second aspect of the
   flow in the introduction for which DNS is needed, is for proxy 2 to
   identify a backup for proxy 1 that it can send the response to. This
   problem is more realistic in SIP than it is in other transactional
   protocols. The reason is that a SIP response can take a long time to
   be generated, because a human user frequently needs to be consulted
   in order to generate that response. As such, it is not uncommon for
   tens of seconds to elapse between a call request and its acceptance.

3 Terminology




J.Rosenberg,H.Schulzrinne                                     [Page 4]

Internet Draft                  sip-srv                 January 24, 2002


   In this document, the key words "MUST", "MUST NOT", "REQUIRED",
   "SHALL", "SHALLNOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
   and "OPTIONAL" are to be interpreted as described in RFC 2119 [4] and
   indicate requirement levels for compliant SIP implementations.

4 Client Usage

   Usage of DNS differs for clients and for servers. This section
   discusses client usage. We assume that the client is stateful (either
   a UAC or a stateful proxy). Stateless proxies are discussed in
   Section 4.4.

   The procedures here are invoked when a client needs to send a request
   to a server identified by a SIP URI, or when an element wishes to
   send a request to a specific configured server, independent of the
   SIP URI (called an outbound proxy), but the outbound proxy is
   identified by a domain name instead of a numeric IP address.
   Frequently, this is because the URI is contained in the Request-URI
   of a request to be sent. The procedures defined here in no way affect
   this URI (i.e., the URI is not rewritten with the result of the DNS
   looksup), they only result in an IP address, port and transport
   protocol where the request can be sent.

   The procedures here MUST be done exactly once per transaction. That
   is, once a server has successfully been contacted (success is defined
   below), all retransmissions of the request and the ACK for non-2xx
   responses MUST be sent to the same host. Furthermore, a CANCEL for a
   particular request MUST be sent to the same host that the request was
   delivered to.

   Because the ACK request for 2xx responses constitutes a different
   transaction, there is no requirement that it be delivered to the same
   server that received the original request (indeed, if that server did
   not record-route, it will most definitely not get the ACK).

   If the request is being delivered to an outbound proxy, a temporary
   URI, used for purposes of this specification, is constructed. That
   URI is of the form sip:<proxy>, where <proxy> is the domain of the
   outbound proxy.

   We defined TARGET as the value of the maddr parameter of the URI, if
   present, otherwise, the host value of the hostport component of the
   URI. It identifies the domain to be contacted.

   We determine the transport protocol, port and IP address of a
   suitable instance of TARGET in Sections 4.1 and 4.2.

4.1 Selecting a Transport Protocol



J.Rosenberg,H.Schulzrinne                                     [Page 5]

Internet Draft                  sip-srv                 January 24, 2002


   First, the client selects a transport protocol.

   If the URI specifies a transport protocol in the transport parameter,
   that transport protocol MUST be used.

   Otherwise, if no transport protocol is specified, but the TARGET is a
   numeric IP address, the client SHOULD use UDP.

   Otherwise, if no transport protocol is specified, and the target is
   not a numeric IP address, the client SHOULD perform a NAPTR query for
   the domain in the SIP URI. The services relevant for the task of
   transport protocol selection are those with NAPTR service fields with
   values "SIP+D2x", where x is a letter that corresponds to a transport
   protocol supported by the domain. This specification defines D2U for
   UDP, D2T for TCP, D2S for SCTP and D2L for TLS over TCP. We also
   establish an IANA registry for NAPTR service name to transport
   protocol mappings.

   These NAPTR records provide a mapping from a domain to the SRV record
   for contacting a server with the specific transport protocol in the
   NAPTR services field. The resource record will contain a replacement
   value and an empty regular expression, which is the SRV record for
   that particular transport protocol. If the server supports multiple
   transport protocols, there will be multiple NAPTR records, each with
   a different service value. As per RFC 2915 [3], the client MUST
   discard any records whose services fields indicate transport
   protocols not supported by the client. The NAPTR processing in RFC
   2915 will result in selection of a transport protocol (and an SRV
   record along with it) with most preferred transport protocol of the
   server that is supported by the client.

   As an example, consider example.com. A client wishes to contact a SIP
   server in example.com. It performs a NAPTR query for that domain, and
   the following records are returned:


    ;;       order pref flags service           regexp  replacement
        IN NAPTR 90   50  "s"  "SIP+D2T"           ""  _sip._tcp.school.edu
        IN NAPTR 100  50  "s"  "SIP+D2U"           ""  _sip._udp.example.com
        IN NAPTR 110  50  "s"  "SIP+D2S"           ""  tls-sip.example.com



   This indicates that the server supports TCP, UDP, and TLS, in that
   order. If the client supports UDP and TLS, UDP will be used, based on
   an SRV lookup of _sip._udp.example.com.

   It is not necessary for the domain suffixes in the replacement field



J.Rosenberg,H.Schulzrinne                                     [Page 6]

Internet Draft                  sip-srv                 January 24, 2002


   to match the domain of the original query (i.e., example.com above).
   However, for backwards compatibility with RFC 2543, a domain MUST
   maintain SRV records for the domain of the original query, even if
   the NAPTR record is in a different domain. As an example, even though
   the SRV record for TCP is _sip._tcp.school.edu, there MUST also be an
   SRV record at _sip._tcp.example.com.


        RFC 2543 will look up the SRV records for the domain
        directly. If these do not exist because the NAPTR
        replacement points to a different domain, the client will
        fail.

   If no NAPTR records are found, the client constructs SRV queries for
   those transport protocols it supports, and does a query for each.
   Queries are done using the service identifier "_sip". A particular
   transport is supported if the query is successful. The client MAY use
   any transport protocol it desires which is supported by the server.


        This is a change from RFC 2543, which used to merge the
        priority values across different SRV records.

4.2 Determining Port and IP

   Once the transport protocol has been determined, the next step is to
   determine the IP address and port.

   If TARGET is a numeric IP address, the client uses that address. If
   the URI also contains a port, it uses that port. If no port is
   specified, it uses the default port for the particular transport
   protocol.

   If the TARGET was not a numeric IP address, but a port is present in
   the URI, the client performs an A or AAAA record lookup of the domain
   name. The result will be a list of IP address, each of which can be
   contacted at the specific port from the URI and transport protocol
   determined previously. Processing then proceeds as described in
   Section 4.3 of this document.


        There is a weird case where, where the URI had a domain
        name and a port. SRV records will potentially be used to
        determine the transport protocol, based on the algorithms
        above, but A records used for the actual lookup. That seems
        odd.

   If the TARGET was not a numeric IP address, and no port was present



J.Rosenberg,H.Schulzrinne                                     [Page 7]

Internet Draft                  sip-srv                 January 24, 2002


   in the URI, the client performs an SRV query using the service
   identifier "_sip" and the transport protocol as determined from
   Section 4.1, as specified in RFC 2782 [2]. The procedures of RFC
   2782, as described in the Section titled "Usage rules" are followed,
   augmented by the additional procedures of Section 4.3 of this
   document.


        This is a change. Previously, if the port was explicit, but
        with a value of 5060, SRV records were used. Now, A records
        will be used. A result of this is that the URL comparison
        rules need to change to reflect that sip:user@example.com
        and sip:user@example.com:5060 are NOT equivalent any
        longer. I think this should not cause any serious
        interoperability issues, but further consideration is
        needed.

4.3 Details of RFC 2782 Process

   RFC 2782 spells out the details of how a set of SRV records are
   sorted and then tried. However, it only states that the client should
   "try to connect to the (protocol, address, service)" without giving
   any details on what happens in the event of failure. Those details
   are described here for SIP.

   The client client MAY maintain a table indicating the status of a
   particular host (that is, whether it was ever successfully contacted,
   or whether attempts to contact it resulted in a failure). The table
   is indexed with the IP address, port, and transport for a particular
   host. If a particular host is listed with a status of "failed", that
   entry SHOULD be discarded after one hour, so that the host can be
   used once more if it has recovered.

   When processing the list of SRV entries (or A records, depending on
   how the URI was resolved), the client MAY remove any entries for
   hosts which are marked as "failed" in the table. The remaining
   entries are then tried according to RFC 2782.

   For SIP requests, failure occurs if the transaction layer reports a
   503 error response or a transport failure of some sort (generally,
   due to ICMP errors or TCP connection failures). Failure also occurs
   if the transaction layer times out without ever having received any
   response, provisional or final (i.e., timer B or timer F fires). If a
   failure occurs, the client SHOULD create a new request, which is
   identical to the previous, but has a different value of the Via
   branch ID than the previous (and therefore constitutes a new SIP
   transaction). That request is sent to the next element in the list as
   specified by RFC 2782.



J.Rosenberg,H.Schulzrinne                                     [Page 8]

Internet Draft                  sip-srv                 January 24, 2002


4.4 Consideration for Stateless Proxies

   The process of the previous sections is highly stateful. When a
   server is contacted successfully, all requests for the transaction,
   as well as CANCEL requests for that transaction, MUST go to the same
   server. The identity of the successfully contacted server is a form
   of transaction state. This presents a challenge for stateless
   proxies, which still need to meet the requirement for sending all
   requests in the transaction to the same server.

   The requirement is not difficult to meet in the simple case where
   there were no failures when attempting to contact a server. Whenever
   the stateless proxy receives the request, it performs the appropriate
   DNS queries as described above. Unfortunately, the procedures of RFC
   2782 and RFC 2915 are not guaranteed to be deterministic. This is
   because records that contain the same priority and weight (in the
   case of SRV) or order and preference (in the case of NAPTR) have no
   specified order. The stateless proxy MUST define a deterministic
   order to the records in that case, using any algorithm at its
   disposal. One suggestion is to alphabetize them, for example. To make
   processing easier for stateless proxies, it is RECOMMENDED that
   domain administrators make the weights of SRV records with equal
   priority different (for example, using weights of 1000 and 1001 if
   two servers are equivalent, rather than assigning both a weight of
   1000), and similarly for NAPTR records. If the first server is
   contacted successfully, the proxy can remain stateless. However, if
   the first server is not contacted successfully, and a subsequent
   server is, the proxy cannot remain stateless for this transaction. If
   it were stateless, a retransmission could very well go to a different
   server if the failed one recovers between retransmissions. As such,
   whenever a proxy does not successfully contact the first server, it
   SHOULD act as a stateful proxy.

   Unfortunately, it is still possible for a stateless proxy to deliver
   retransmissions to different servers, even if it follows the
   recommendations above. This can happen if the DNS TTLs expire in the
   middle of a transaction, and the entries had changed. This is
   unavoidable. Network implementors should be aware of this limitation,
   and not use stateless proxies that access DNS if this error is deemed
   critical.

5 Server Usage

   RFC 2543bis defines procedures for sending responses from a server
   back to the client. Typically, for unicast requests, the response is
   sent back to the source IP address where the request came from, using
   the port contained in the Via header. However, it is important to
   provide failover support when the client element fails between



J.Rosenberg,H.Schulzrinne                                     [Page 9]

Internet Draft                  sip-srv                 January 24, 2002


   sending the request and receiving the response.

   The procedures here are invoked when a server sends a response to the
   client and that response fails. "Fails" is defined here as any
   response which causes an ICMP error message to be returned, or when
   the transport connection the request came in on closes before the
   response can be sent.

   In these cases, the server examines the value of the sent-by
   construction in the topmost Via header. If it contains a numeric IP
   address, the server attempts to send the response to that address,
   using the transport protocol from the Via header, and the port from
   sent-by, if present, else the default for that transport protocol.

   If, however, the sent-by field contained a domain name and a port
   number, the server queries for A records with that name. It tries to
   send the response to each element on the resulting list of IP
   addresses, using the port from the Via, and the transport protocol
   from the Via. As in the client processing, the next entry in the list
   is tred if the one before it results in a failure.

   If, however, the sent-by field contained a domain name and no port,
   the server queries for SRV records using the service identifier
   "_sip" and the transport protocol from the topmost Via header. The
   resulting list is sorted as described in [2], and the response is
   sent to the topmost element on the new list described there. If that
   results in a failure, the next entry on the list is tried.

6 Constructing SIP URIs

   In many cases, and element needs to construct a SIP URI for inclusion
   in a Contact header in a REGISTER, or in a Record-Route header in an
   INVITE. According to [1], these URIs have to have the property that
   they resolve to the specific element that inserted them. However, if
   they are constructed with just an IP address, for example:


   sip:1.2.3.4
   sip:user@foo.com;maddr=1.2.3.4



   then should the element fail, there is no way to route the request or
   response through a backup.

   SRV provides a way to fix this. Instead of using an IP address, a
   domain name that resolves to an SRV record can be used:




J.Rosenberg,H.Schulzrinne                                    [Page 10]

Internet Draft                  sip-srv                 January 24, 2002


   sip:server23.provider.com
   sip:user@foo.com;maddr=server23.provider.com



   The SRV records for a particular target can be set up so that there
   is a single record with a low value for the priority field, and this
   record points to the specific element that constructed the URI.
   However, there are additional records with higher priority that point
   to backup elements that would be used in the event of failure. This
   allows the constraint of [1] to be met while allowing for robust
   operation.

7 Security Considerations

   The authors do not believe that this specification introduces any
   additional security issues beyond those already described in RFC 2782
   and RFC 2915.

8 Registration of NATPR D2X Resolution Service


   Name: Domain Name to Transport Protocol
      * Mnemonic: D2X, where X is managed by an IANA registration process
      * Number of Operands: 1
      * Type of Each Operand: Each operand is a domain
      * Format of Each Operand: Each operand is a domain name in standard
        format
      * Algorithm: Opaque
      * Input String: The domain name from the SIP URI being used to
        generate the NAPTR query.
      * Output: One or more SRV record keys
      * Constraints: All records MUST only use the S flag. The P flag is
        expressly forbidden.
      * Error Conditions:
         o No overlap in transport protocol between client and server
      * Security Considerations: none



9 IANA Considerations

   The usage of NAPTR records described here requires well known values
   for the service fields for each transport supported by SIP. The table
   of mappings from service field values to transport protocols is to be
   maintained by IANA. New entries in the table MAY be added at any time
   when new transport protocols become available. Such additions are
   subject to expert review.



J.Rosenberg,H.Schulzrinne                                    [Page 11]

Internet Draft                  sip-srv                 January 24, 2002


   The registration MUST include the following information:

        Service Field: The service field being registered. An example
             for a new fictitious transport protocol called NCTP might
             be "SIP+D2N".

        Protocol: The specific transport protocol associated with that
             service field. This MUST include the name and acronym for
             the protocol, along with reference to a document that
             describes the transport protocol. For example - "New
             Connectionless Transport Protocol (NCTP), RFC5766".

        Name and Contact Information: The name, address, email address
             and telephone number for the person performing the
             registration.

   The following values are to be placed into the registry:


   Services Field               Protocol
   SIP+D2T                       TCP
   SIP+D2U                       UDP
   SIP+D2L                       TLS over TCP (RFC 2246)
   SIP+D2S                       SCTP (RFC 2960)



10 Changes Since -03

        o Added IANA registration process.

        o Included text discussing the problem of DNS TTL expiration for
          stateless proxies.

        o Clarified that maintenance of the table of availability for
          servers is not a cache, and it is totally unrelated to DNS
          processing.

        o Changed the construction of the services field in NAPTR to
          include the transport protocol, so its SIP+D2X, where X
          depends on the transport protocol.

        o Relaxed the constraint that the domain suffix in the NAPTR
          records equal that of the target.

        o Added a section on how to construct URIs for insertion into
          Contact and Record-Route headers.




J.Rosenberg,H.Schulzrinne                                    [Page 12]

Internet Draft                  sip-srv                 January 24, 2002


11 Acknowledgements

   The authors would like to thank Patrik Faltstrom for his useful
   comments.

12 Author's Addresses


   Jonathan Rosenberg
   dynamicsoft
   72 Eagle Rock Avenue
   First Floor
   East Hanover, NJ 07936
   email: jdrosen@dynamicsoft.com

   Henning Schulzrinne
   Columbia University
   M/S 0401
   1214 Amsterdam Ave.
   New York, NY 10027-7003
   email: schulzrinne@cs.columbia.edu




13 Bibliography

   [1] J. Rosenberg, H. Schulzrinne, et al.  , "SIP: Session initiation
   protocol," Internet Draft, Internet Engineering Task Force, Oct.
   2001.  Work in progress.

   [2] A. Gulbrandsen, P. Vixie, and L. Esibov, "A DNS RR for specifying
   the location of services (DNS SRV)," Request for Comments 2782,
   Internet Engineering Task Force, Feb. 2000.

   [3] M. Mealling and R. Daniel, "The naming authority pointer (NAPTR)
   DNS resource record," Request for Comments 2915, Internet Engineering
   Task Force, Sept. 2000.

   [4] S. Bradner, "Key words for use in RFCs to indicate requirement
   levels," Request for Comments 2119, Internet Engineering Task Force,
   Mar. 1997.



   Full Copyright Statement

   Copyright (c) The Internet Society (2002). All Rights Reserved.



J.Rosenberg,H.Schulzrinne                                    [Page 13]

Internet Draft                  sip-srv                 January 24, 2002


   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works. However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.




























J.Rosenberg,H.Schulzrinne                                    [Page 14]

