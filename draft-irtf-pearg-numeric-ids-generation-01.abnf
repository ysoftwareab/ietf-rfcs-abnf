id_range = max_id - min_id + 1;
next_id = min_id + (random() % id_range);
count = next_id;

next_id = min_id;
id_range = max_id - min_id + 1;
next_id = min_id + (random() % id_range);
count = id_range;

next_id = min_id + (random() % id_range);
id_range = max_id - min_id + 1;

counter = 0;

offset = F(CONTEXT, counter, secret_key);
next_id = min_id + (offset % id_range);

id_inc= 1;


count = max_id - min_id + 1;

next_id= lookup_counter(CONTEXT);

next_id = min_id;
next_id = next_id + id_inc;
counter = 0;

id_range = max_id - min_id + 1;
offset = F(CONTEXT, secret_key);
count = id_range;

next_id = min_id +
                  (counter + offset) % id_range;

id_inc = 1;


id_range = max_id - min_id + 1;
offset = F(CONTEXT, secret_key1);
index = G(CONTEXT, secret_key2) % TABLE_LENGTH;
count = id_range;

next_id = min_id + (offset + table[index]) % id_range;
ID = offset(CONTEXT_1) + linear(CONTEXT_2);

ehemeral_port = offset(Dest_IP) + linear()

Frag_ID = offset(Srd_IP, Dst_IP) + linear()

count = max_id - min_id + 1;

next_id= offset(CONTEXT_1) + linear(CONTEXT_2);

next_id = min_id;
id_inc= 1;


count = max_id - min_id + 1;

next_id = min_id;
next_id = next_id + id_inc;
next_id = random();        /* Initialization value */
id_inc = 500;            /* Determines the trade-off */


id_range = max_id - min_id + 1;

count = id_range;

next_id = next_id + (random() % id_inc) + 1;

next_id = min_id + (next_id % id_range);

