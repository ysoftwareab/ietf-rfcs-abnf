provides="
      OpenFlow ">
      <load library="BaseTypeLibrary"/>
      <load library="BaseLFBLibrary"/>
      <frameDefs>
         <frameDef>
            <name>Arbitrary</name>
            <synopsis>Any kind of Frame</synopsis>
         </frameDef>
      </frameDefs>
      <dataTypeDefs>
         <dataTypeDef>
            <name>IEEEMAC</name>
            <synopsis>An IEEE MAC Address</synopsis>
            <typeRef>byte[6]</typeRef>
         </dataTypeDef>
         <dataTypeDef>
            <name>SwitchDescriptionType</name>
            <synopsis>The type of the switch description</synopsis>
            <struct>
               <component componentID="1">
                  <name>MFR</name>
                  <synopsis>Manufacturer description</synopsis>
                  <typeRef>string[256]</typeRef>
               </component>
               <component componentID="2">
                  <name>HW</name>
                  <synopsis>Hardware description</synopsis>
                  <typeRef>string[256]</typeRef>
               </component>
               <component componentID="3">
                  <name>SF</name>
                  <synopsis>Software description</synopsis>
                  <typeRef>string[256]</typeRef>
               </component>
               <component componentID="4">
                  <name>SerialNum</name>
                  <synopsis>Serial Number</synopsis>
                  <typeRef>string[32]</typeRef>
               </component>
               <component componentID="5">
                  <name>DP</name>
                  <synopsis>Human Readable description of datapath
                  </synopsis>
                  <typeRef>string[256]</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>MPLSLabelValue</name>
            <synopsis>An MPLS label.</synopsis>
            <atomic>
               <baseType>uint32</baseType>
               <rangeRestriction>
                  <allowedRange min="0" max="1048575"/>
               </rangeRestriction>
            </atomic>
         </dataTypeDef>
         <dataTypeDef>
            <name>MPLSTrafficClassValues</name>
            <synopsis>The MPLS Traffic Class</synopsis>
            <atomic>
               <baseType>uchar</baseType>
               <rangeRestriction>
                  <allowedRange min="0" max="7"/>
               </rangeRestriction>
            </atomic>
         </dataTypeDef>
         <dataTypeDef>
            <name>IPv4ToSbits</name>
            <synopsis>TOSBits</synopsis>
            <atomic>
               <baseType>uchar</baseType>
               <rangeRestriction>
                  <allowedRange min="0" max="63"/>
               </rangeRestriction>
            </atomic>
         </dataTypeDef>
         <dataTypeDef>
            <name>WildcardsType</name>
            <synopsis>Wildcards for fields</synopsis>
            <struct>
               <component componentID="1">
                  <name>InPort</name>
                  <synopsis>Input Port Wildcard</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="2">
                  <name>VLANID</name>
                  <synopsis>VLan ID Wildcard</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="3">
                  <name>VLANPCP</name>
                  <synopsis>Vlan priority Wildcard</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="4">
                  <name>DLType</name>
                  <synopsis>Ethernet frame typ Wildcard</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="5">
                  <name>IPToS</name>
                  <synopsis>IP ToS Wildcard</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="6">
                  <name>IPProtocol</name>
                  <synopsis>IP Protocol Wildcard</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="7">
                  <name>TPSource</name>
                  <synopsis>TCP/UDP/SCTP source port Wildcard</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="8">
                  <name>TPDestination</name>
                  <synopsis>TCP/UDP/SCTP destination port Wildcard
                  </synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="9">
                  <name>MPLSLabel</name>
                  <synopsis>MPLS label Wildcard</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="10">
                  <name>MPLSTC</name>
                  <synopsis>MPLS TC Wildcard</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>MatchFieldType</name>
            <synopsis>A Match Field Type</synopsis>
            <struct>
               <component componentID="1">
                  <name>IngressPort</name>
                  <synopsis>Numerical representation of incoming port,
                     starting at 1. This may be a physical or
                     switch-defined virtual port.</synopsis>
                  <typeRef>uint32</typeRef>
               </component>
               <component componentID="2">
                  <name>Wildcards</name>
                  <synopsis>Wildcards for match fields</synopsis>
                  <typeRef>WildcardsType</typeRef>
               </component>
               <component componentID="3">
                  <name>EthernetSourceAddress</name>
                  <synopsis>Ethernet source address</synopsis>
                  <typeRef>IEEEMAC</typeRef>
               </component>
               <component componentID="4">
                  <name>EthernetSourceAddressMask</name>
                  <synopsis>Ethernet source address mask</synopsis>
                  <typeRef>IEEEMAC</typeRef>
               </component>
               <component componentID="5">
                  <name>EthernetDestinationAddress</name>
                  <synopsis>Ethernet destination address</synopsis>
                  <typeRef>IEEEMAC</typeRef>
               </component>
               <component componentID="6">
                  <name>EthernetDestinationAddressMask</name>
                  <synopsis>Ethernet destination address mask</synopsis>
                  <typeRef>IEEEMAC</typeRef>
               </component>
               <component componentID="7">
                  <name>VlanID</name>
                  <synopsis>VLAN identifier of outermost VLAN tag.
                  </synopsis>
                  <typeRef>VlanIDType</typeRef>
               </component>
               <component componentID="8">
                  <name>VlanPriority</name>
                  <synopsis>VLAN PCP Field of outermost VLAN tag.
                  </synopsis>
                  <typeRef>VlanPriorityType</typeRef>
               </component>
               <component componentID="9">
                  <name>EtherType</name>
                  <synopsis>Ethernet type of the OpenFlow packet payload
                     after VLAN tags. 802.3 frames have special handling
                  </synopsis>
                  <typeRef>uint16</typeRef>
               </component>
               <component componentID="10">
                  <name>IPv4TOS</name>
                  <synopsis>Specify as 8-bit value and place ToS in
                    upper 6 bits for match</synopsis>
                  <typeRef>IPv4ToSbits</typeRef>
               </component>
               <component componentID="11">
                  <name>IPProto</name>
                  <synopsis>IP protocol or lower 8 bits of ARP opcode.
                     Only the lower 8 bits of the ARP opcode are used
                     for the match</synopsis>
                  <typeRef>uchar</typeRef>
               </component>
               <component componentID="12">
                  <name>IPv4SourceAddress</name>
                  <synopsis>IPv4 Source Address to match</synopsis>
                  <typeRef>IPv4Addr</typeRef>
               </component>
               <component componentID="13">
                  <name>IPv4SourceAddressMask</name>
                  <synopsis>IPv4 Source Address mask</synopsis>
                  <typeRef>IPv4Addr</typeRef>
               </component>
               <component componentID="14">
                  <name>IPv4DestinationAddress</name>
                  <synopsis>IPv4 Destination Address to match</synopsis>
                  <typeRef>IPv4Addr</typeRef>
               </component>
               <component componentID="15">
                  <name>IPv4DestinationAddressMask</name>
                  <synopsis>IPv4 Destination Address mask</synopsis>
                  <typeRef>IPv4Addr</typeRef>
               </component>
               <component componentID="16">
                  <name>TCPSourcePort</name>
                  <synopsis>Source Port for TCP and ICMP to match
                  </synopsis>
                  <typeRef>uint16</typeRef>
               </component>
               <component componentID="17">
                  <name>TCPDestinationPort</name>
                  <synopsis>Destination Port for TCP and ICMP to match
                  </synopsis>
                  <typeRef>uint16</typeRef>
               </component>
               <component componentID="18">
                  <name>MPLSlabel</name>
                  <synopsis>Match on outermost MPLS tag.</synopsis>
                  <typeRef>MPLSLabelValue</typeRef>
               </component>
               <component componentID="19">
                  <name>MPLSTrafficClass</name>
                  <synopsis>Match on outermost MPLS tag for traffic
                     class.</synopsis>
                  <typeRef>MPLSTrafficClassValues</typeRef>
               </component>
               <component componentID="20">
                  <name>Metadata</name>
                  <synopsis>MetaData</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="21">
                  <name>MetadataMask</name>
                  <synopsis>MetaData Mask</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>FlowEntry</name>
            <synopsis>A Flow entry</synopsis>
            <struct>
               <component componentID="1">
                  <name>Cookie</name>
                  <synopsis>Opaque data chosen by controller</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="2">
                  <name>MatchFields</name>
                  <synopsis>Match Fields: to match against packets. These
                     consist of the ingress port and packet headers, and
                     optionally metadata specified by a previous table
                  </synopsis>
                  <typeRef>MatchFieldType</typeRef>
               </component>
               <component componentID="3">
                  <name>Counters</name>
                  <synopsis>Counters: to update for matching packets
                  </synopsis>
                  <typeRef>FlowCounterType</typeRef>
               </component>
               <component componentID="4">
                  <name>Instructions</name>
                  <synopsis>Instruction: what to do with the packet of
                     the flow</synopsis>
                  <array>
                     <struct>
                        <component componentID="1">
                           <name>InstructionType</name>
                           <synopsis>The instruction type</synopsis>
                           <typeRef>InstructionTypes</typeRef>
                        </component>
                        <component componentID="2">
                           <name>InstructionIndex</name>
                           <synopsis>The instruction index.</synopsis>
                           <typeRef>uint32</typeRef>
                        </component>
                     </struct>
                     <contentKey contentKeyID="1">
                        <contentKeyField>InstructionType
                        </contentKeyField>
                     </contentKey>
                  </array>
               </component>
               <component componentID="5">
                  <name>Timeouts</name>
                  <synopsis>Timeouts for the flow entry</synopsis>
                  <struct>
                     <component componentID="1">
                        <name>IdleTimeout</name>
                        <synopsis>Timeout to expire if no flows are
                           matched for this flow entry</synopsis>
                        <typeRef>uint16</typeRef>
                     </component>
                     <component componentID="2">
                        <name>HardTimeout</name>
                        <synopsis>Timeout to expire for this flow entry
                           regardless of idle timeout</synopsis>
                        <typeRef>uint16</typeRef>
                     </component>
                     <component componentID="6">
                        <name>Timers</name>
                        <synopsis>Timers per flow</synopsis>
                        <struct>
                           <component componentID="1">
                              <name>Duration_Sec</name>
                              <synopsis>Time flow has been alive in
                                 seconds</synopsis>
                              <typeRef>uint32</typeRef>
                           </component>
                           <component componentID="2">
                              <name>Duration_nSec</name>
                              <synopsis>Time flow has been alive in
                                 nanoseconds beyond Duration_Sec
                              </synopsis>
                              <typeRef>uint32</typeRef>
                           </component>
                        </struct>
                     </component>
                     <component componentID="7">
                        <name>Priority</name>
                        <synopsis>Priority within the specified flow
                           table</synopsis>
                        <typeRef>uint16</typeRef>
                     </component>
                  </struct>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>ActionRowType</name>
            <synopsis>An Action Row for the action table</synopsis>
            <struct>
               <component componentID="1">
                  <name>Action</name>
                  <synopsis>The type of action</synopsis>
                  <typeRef>ActionType</typeRef>
               </component>
               <component componentID="2">
                  <name>ActionTableIndex</name>
                  <synopsis>Index of the Table this action applies to
                  </synopsis>
                  <typeRef>uint32</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>ActionType</name>
            <synopsis>The type of action</synopsis>
            <atomic>
               <baseType>uint16</baseType>
               <specialValues>
                  <specialValue value="1">
                     <name>OUTPUT</name>
                     <synopsis>Output to switch port</synopsis>
                  </specialValue>
                  <specialValue value="2">
                     <name>SetVLANVID</name>
                     <synopsis>Set the 802.1q VLAN id</synopsis>
                  </specialValue>
                  <specialValue value="3">
                     <name>SetVLANPCP</name>
                     <synopsis>Set the 802.1q priority</synopsis>
                  </specialValue>
                  <specialValue value="4">
                     <name>SetDLSrc</name>
                     <synopsis>Set Ethernet source address</synopsis>
                  </specialValue>
                  <specialValue value="5">
                     <name>SetDLDst</name>
                     <synopsis>Set Ethernet destination address
                     </synopsis>
                  </specialValue>
                  <specialValue value="6">
                     <name>SetIPSrc</name>
                     <synopsis>Set IP source address</synopsis>
                  </specialValue>
                  <specialValue value="7">
                     <name>SetIPDst</name>
                     <synopsis>Set IP Destination address</synopsis>
                  </specialValue>
                  <specialValue value="8">
                     <name>SetIPTOS</name>
                     <synopsis>Set ToS field</synopsis>
                  </specialValue>
                  <specialValue value="9">
                     <name>SetIPECN</name>
                     <synopsis>Set ECN field</synopsis>
                  </specialValue>
                  <specialValue value="10">
                     <name>SetTPSource</name>
                     <synopsis>TCP/UDP/SCTP source port</synopsis>
                  </specialValue>
                  <specialValue value="11">
                     <name>SetTPDestination</name>
                     <synopsis>TCP/UDP/SCTP destination port</synopsis>
                  </specialValue>
                  <specialValue value="12">
                     <name>CopyTTLOut</name>
                     <synopsis>Copy TTL "outwards" -- from
                        next-to-outermost to outermost</synopsis>
                  </specialValue>
                  <specialValue value="13">
                     <name>CopyTTLIn</name>
                     <synopsis>Copy TTL "inwards" -- from outermost to
                        next-to-outermost</synopsis>
                  </specialValue>
                  <specialValue value="14">
                     <name>SetMPLSLabel</name>
                     <synopsis>Set MPLS label</synopsis>
                  </specialValue>
                  <specialValue value="15">
                     <name>SetMPLSTC</name>
                     <synopsis>Set MPLS TC</synopsis>
                  </specialValue>
                  <specialValue value="16">
                     <name>SetMPLSTTL</name>
                     <synopsis>Set MPLS TTL</synopsis>
                  </specialValue>
                  <specialValue value="17">
                     <name>PushVLANTag</name>
                     <synopsis>Push a new VLAN tag</synopsis>
                  </specialValue>
                  <specialValue value="18">
                     <name>PopVLANTag</name>
                     <synopsis>Pop the outer VLAN tag</synopsis>
                  </specialValue>
                  <specialValue value="19">
                     <name>PushMPLSTag</name>
                     <synopsis>Push a new MPLS tag</synopsis>
                  </specialValue>
                  <specialValue value="20">
                     <name>PopMPLSTag</name>
                     <synopsis>Pop the outer MPLS tag</synopsis>
                  </specialValue>
                  <specialValue value="21">
                     <name>SetQueue</name>
                     <synopsis>Set queue ID when outputting to a port
                     </synopsis>
                  </specialValue>
                  <specialValue value="22">
                     <name>Group</name>
                     <synopsis>Apply group</synopsis>
                  </specialValue>
                  <specialValue value="23">
                     <name>SetIPTTL</name>
                     <synopsis>Set IP TTL</synopsis>
                  </specialValue>
                  <specialValue value="24">
                     <name>DecIPTTL</name>
                     <synopsis>Decrement IP TTL</synopsis>
                  </specialValue>
               </specialValues>
            </atomic>
         </dataTypeDef>
         <dataTypeDef>
            <name>TableCounterType</name>
            <synopsis>Counter per table</synopsis>
            <struct>
               <component componentID="1">
                  <name>ReferenceCount</name>
                  <synopsis>Active Entries</synopsis>
                  <typeRef>uint32</typeRef>
               </component>
               <component componentID="2">
                  <name>PacketLookups</name>
                  <synopsis>Packet Lookups</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="3">
                  <name>PacketMatches</name>
                  <synopsis>Packet Matches</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>Actions</name>
            <synopsis>Actions to perform. An Array of ActionRowTypes
            </synopsis>
            <array>
               <typeRef>ActionRowType</typeRef>
            </array>
         </dataTypeDef>
         <dataTypeDef>
            <name>FlowCounterType</name>
            <synopsis>Counter per flow</synopsis>
            <struct>
               <component componentID="1">
                  <name>ReceivedPackets</name>
                  <synopsis>Packets Received</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="2">
                  <name>ReceivedBytes</name>
                  <synopsis>Bytes Received</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="3">
                  <name>DurationS</name>
                  <synopsis>Duration in seconds</synopsis>
                  <typeRef>uint32</typeRef>
               </component>
               <component componentID="4">
                  <name>DurationNS</name>
                  <synopsis>Duration in nanoseconds</synopsis>
                  <typeRef>uint32</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>InstructionTypes</name>
            <synopsis>Instructions supported</synopsis>
            <atomic>
               <baseType>uchar</baseType>
               <specialValues>
                  <specialValue value="1">
                     <name>GotoTable</name>
                     <synopsis>Indicates the next table in the processing
                        pipeline. The table-id must be greater than the
                        current table-id. The flows of last table of the
                        pipeline can not include this instruction
                     </synopsis>
                  </specialValue>
                  <specialValue value="2">
                     <name>WriteMetadata</name>
                     <synopsis>Writes the masked metadata value into the
                        metadata field. The mask specifies which bits of
                        the metadata register should be modified (i.e.
                        new metadata = old metadata and ~mask | value and
                        mask)</synopsis>
                  </specialValue>
                  <specialValue value="3">
                     <name>WriteAction</name>
                     <synopsis>Merges the specifieed action(s) into the
                        current action set. If an action of the given
                        type exists in the current set, overwrite it,
                        otherwise add it.</synopsis>
                  </specialValue>
                  <specialValue value="4">
                     <name>ApplyActions</name>
                     <synopsis>Applies the specific action(s)
                        immediately, without any change to the Action
                        Set. This instruction may be used to modify the
                        packet between two tables or to execute multiple
                        actions of the same type. The actions are
                        specified as an action list</synopsis>
                  </specialValue>
                  <specialValue value="5">
                     <name>ClearActions</name>
                     <synopsis>Clears all the actions in the action set
                        immediately.</synopsis>
                  </specialValue>
               </specialValues>
            </atomic>
         </dataTypeDef>
         <dataTypeDef>
            <name>WriteMetadataTableType</name>
            <synopsis>Metadata and mask for the write metadata
               instruction per row</synopsis>
            <struct>
               <component componentID="1">
                  <name>Metadata</name>
                  <synopsis>The metadata</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="2">
                  <name>MetadataMask</name>
                  <synopsis>The metadata mask</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>FlowTableMissConfigType</name>
            <synopsis>Types to configure the default behavior of
               unmatched packets in a Flow Table</synopsis>
            <atomic>
               <baseType>uint32</baseType>
               <specialValues>
                  <specialValue value="1">
                     <name>Controller</name>
                     <synopsis>Send to the controller</synopsis>
                  </specialValue>
                  <specialValue value="2">
                     <name>Continue</name>
                     <synopsis>Continue to the next table in the pipeline
                        or send to the controller if the FlowTable is the
                        last.</synopsis>
                  </specialValue>
                  <specialValue value="3">
                     <name>Drop</name>
                     <synopsis>Drop the packet</synopsis>
                  </specialValue>
               </specialValues>
            </atomic>
         </dataTypeDef>
         <dataTypeDef>
            <name>PacketInTypes</name>
            <synopsis>Packet-in Types</synopsis>
            <atomic>
               <baseType>uchar</baseType>
               <specialValues>
                  <specialValue value="1">
                     <name>NoMatch</name>
                     <synopsis>No Matching flow</synopsis>
                  </specialValue>
                  <specialValue value="2">
                     <name>Action</name>
                     <synopsis>Explicit action to send to controller
                     </synopsis>
                  </specialValue>
               </specialValues>
            </atomic>
         </dataTypeDef>
         <dataTypeDef>
            <name>GroupCounterType</name>
            <synopsis>Counters per group</synopsis>
            <struct>
               <component componentID="1">
                  <name>ReferenceCount</name>
                  <synopsis>Flow Entries</synopsis>
                  <typeRef>uint32</typeRef>
               </component>
               <component componentID="2">
                  <name>PacketCount</name>
                  <synopsis>Packet Count</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="3">
                  <name>ByteCount</name>
                  <synopsis>Byte Count</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>GroupBucketExecuteType</name>
            <synopsis>To determine which Action Bucket(s) should be
               executed</synopsis>
            <atomic>
               <baseType>uchar</baseType>
               <specialValues>
                  <specialValue value="1">
                     <name>all</name>
                     <synopsis>Execute all buckets in the group. This
                        group is used for multicast or broadcast
                        forwarding. The packet is effectively cloned for
                        each bucket; one packet is processed for each
                        bucket of the group. If a bucket directs a packet
                        explicitly out the ingress port, this packet
                        clone is dropped. If the controller writer wants
                        to forward out the ingress port, the group should
                        include an extra bucket which includes an output
                        action to the OFPP_IN_PORT virtual port.
                     </synopsis>
                  </specialValue>
                  <specialValue value="2">
                     <name>select</name>
                     <synopsis>Execute one bucket in the group. Packets
                        are sent to a single bucket in the group, based
                        on a switch-computed selection algorithm (e.g.
                        hash on some user-configured tuple or simple
                        round robin). All configuration and state for the
                        selection algorithm is external to OpenFlow. When
                        a port speciffied in a bucket in a select group
                        goes down, the switch may restrict bucket
                        selection to the remaining set (those with
                        forwarding actions to live ports) instead of
                        dropping packets destined to that port. This
                        behavior may reduce the disruption of a downed
                        link or switch.</synopsis>
                  </specialValue>
                  <specialValue value="3">
                     <name>indirect</name>
                     <synopsis>Execute the one defined bucket in this
                        group. Allows multiple flows or groups to point
                        to a common group identifier, supporting faster,
                        more efficient convergence (e.g. next hops for IP
                        forwarding). This group type is effectively
                        identical to an all group with one bucket.
                     </synopsis>
                  </specialValue>
                  <specialValue value="4">
                     <name>fastfailover</name>
                     <synopsis>Execute the first live bucket. Each action
                        bucket is associated with a specific port and/or
                        group that controls its liveness. Enables the
                        switch to change forwarding without requiring a
                        round trip to the controller. If no buckets are
                        live, packets are dropped. This group type must
                        implement a liveness mechanism</synopsis>
                  </specialValue>
               </specialValues>
            </atomic>
         </dataTypeDef>
         <dataTypeDef>
            <name>BucketCounterType</name>
            <synopsis>Counters per bucket</synopsis>
            <struct>
               <component componentID="1">
                  <name>PacketCount</name>
                  <synopsis>Packet Count</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="2">
                  <name>ByteCount</name>
                  <synopsis>Byte Count</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>GroupTableEntry</name>
            <synopsis>A Row of the Group Table</synopsis>
            <struct>
               <component componentID="1">
                  <name>GroupID</name>
                  <synopsis>Group Identifier uniquely identifying the
                     group</synopsis>
                  <typeRef>uint32</typeRef>
               </component>
               <component componentID="2">
                  <name>GroupType</name>
                  <synopsis>The group type to determine which action
                     bucket will be executed.</synopsis>
                  <typeRef>GroupBucketExecuteType</typeRef>
               </component>
               <component componentID="3">
                  <name>GroupCounters</name>
                  <synopsis>Counters per group</synopsis>
                  <typeRef>GroupCounterType</typeRef>
               </component>
               <component componentID="4">
                  <name>ActionBuckets</name>
                  <synopsis>An ordered list of action buckets. Each
                     action bucket is a set of actions similar to a flow
                     table.</synopsis>
                  <array>
                     <typeRef>ActionBucket</typeRef>
                  </array>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>ActionBucket</name>
            <synopsis>An Action Bucket</synopsis>
            <struct>
               <component componentID="1">
                  <name>Weight</name>
                  <synopsis>Relative weight of bucket. Only defined for
                     select groups.</synopsis>
                  <typeRef>uint16</typeRef>
               </component>
               <component componentID="2">
                  <name>WatchPort</name>
                  <synopsis>Port whose state affects whether this bucket
                     is live. Required for fast failover group</synopsis>
                  <typeRef>uint32</typeRef>
               </component>
               <component componentID="3">
                  <name>WatchGroup</name>
                  <synopsis>Group whose state affects whether this group
                     is live. Only required for fast failover groups
                  </synopsis>
                  <typeRef>uint32</typeRef>
               </component>
               <component componentID="4">
                  <name>Actions</name>
                  <synopsis>Actions for this bucket</synopsis>
                  <typeRef>Actions</typeRef>
               </component>
               <component componentID="5">
                  <name>BucketCounter</name>
                  <synopsis>A counter for this bucket</synopsis>
                  <typeRef>BucketCounterType</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>PortNumberType</name>
            <synopsis>Port Number values</synopsis>
            <atomic>
               <baseType>uint32</baseType>
               <specialValues>
                  <specialValue value="0xfffffff8">
                     <name>InPort</name>
                     <synopsis>Sent the packet out the input port. This
                        virtual port must be explicitly used in order to
                        send back out of the input port</synopsis>
                  </specialValue>
                  <specialValue value="0xfffffff9">
                     <name>Table</name>
                     <synopsis>Submit the packet to the first flow table.
                        NBL This destination port can only be used in
                        packet-out messages</synopsis>
                  </specialValue>
                  <specialValue value="0xfffffffa">
                     <name>Normal</name>
                     <synopsis>Process with normal L2/L3 switching
                     </synopsis>
                  </specialValue>
                  <specialValue value="0xfffffffb">
                     <name>Flood</name>
                     <synopsis>Send the packet to all physical ports in
                        VLAN, except input port and those blocked or link
                        down.</synopsis>
                  </specialValue>
                  <specialValue value="0xfffffffc">
                     <name>All</name>
                     <synopsis>Send the packet to all physical ports,
                        except input port.</synopsis>
                  </specialValue>
                  <specialValue value="0xfffffffd">
                     <name>Controller</name>
                     <synopsis>Send the packet to the controller.
                     </synopsis>
                  </specialValue>
                  <specialValue value="0xfffffffe">
                     <name>Local</name>
                     <synopsis>Local openflow "port".</synopsis>
                  </specialValue>
                  <specialValue value="0xffffffff">
                     <name>Any</name>
                     <synopsis>Wildcard port used only for flow mod
                        (delete) and flow stats requests. Selects all
                        flows regardless of output port (including flows
                        with no output port).</synopsis>
                  </specialValue>
               </specialValues>
            </atomic>
         </dataTypeDef>
         <dataTypeDef>
            <name>PortConfigurationType</name>
            <synopsis>Types of configuration for the OpenFlow port
            </synopsis>
            <struct>
               <component componentID="1">
                  <name>PortDown</name>
                  <synopsis>Port is administatively down</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="2">
                  <name>NoReceiving</name>
                  <synopsis>Drop all packets received by this port
                  </synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="3">
                  <name>NoForwarding</name>
                  <synopsis>Drop packets forwarded to the port</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="4">
                  <name>NoPacket_In</name>
                  <synopsis>Do not send packet-in messages for port
                  </synopsis>
                  <typeRef>boolean</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>PortStateType</name>
            <synopsis>Current State of the port</synopsis>
            <struct>
               <component componentID="1">
                  <name>LinkDown</name>
                  <synopsis>No physical link present</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="2">
                  <name>PortBlocked</name>
                  <synopsis>Port is blocked</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="3">
                  <name>PortLive</name>
                  <synopsis>Live for Fast Failover Group</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>PortFeaturesType</name>
            <synopsis>Port Features</synopsis>
            <struct>
               <component componentID="1">
                  <name>SpeedTypes</name>
                  <synopsis>Types of Speed supported</synopsis>
                  <struct>
                     <component componentID="1">
                        <name>10MB_HD</name>
                        <synopsis>10 Mb half-duplex rate support.
                        </synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                     <component componentID="2">
                        <name>10MB_FD</name>
                        <synopsis>10 Mb full-duplex rate support.
                        </synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                     <component componentID="3">
                        <name>100MB_HD</name>
                        <synopsis>100 Mb half-duplex rate support.
                        </synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                     <component componentID="4">
                        <name>100MB_FD</name>
                        <synopsis>100 Mb full-duplex rate support.
                        </synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                     <component componentID="5">
                        <name>1GB_HD</name>
                        <synopsis>1 Gb half-duplex rate support.
                        </synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                     <component componentID="6">
                        <name>1GB_FD</name>
                        <synopsis>1 Gb full-duplex rate support.
                        </synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                     <component componentID="7">
                        <name>10GB_FD</name>
                        <synopsis>10 Gb full-duplex rate support.
                        </synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                     <component componentID="8">
                        <name>40GB_FD</name>
                        <synopsis>40 Gb full-duplex rate support.
                        </synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                     <component componentID="9">
                        <name>100GB_FD</name>
                        <synopsis>100 Gb full-duplex rate support.
                        </synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                     <component componentID="10">
                        <name>1TB_FD</name>
                        <synopsis>1 Tb full-duplex rate support.
                        </synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                     <component componentID="11">
                        <name>Other</name>
                        <synopsis>Other rate, not listed.</synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                  </struct>
               </component>
               <component componentID="2">
                  <name>MediumConnected</name>
                  <synopsis>Medium Connected to the port</synopsis>
                  <struct>
                     <component componentID="1">
                        <name>Copper</name>
                        <synopsis>Copper Medium</synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                     <component componentID="2">
                        <name>Fiber</name>
                        <synopsis>Fiber Medium</synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                  </struct>
               </component>
               <component componentID="3">
                  <name>Auto</name>
                  <synopsis>Auto-negotiation</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="4">
                  <name>PauseTypes</name>
                  <synopsis>Pause Types supported of the port</synopsis>
                  <struct>
                     <component componentID="1">
                        <name>Pause</name>
                        <synopsis>Pause</synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                     <component componentID="2">
                        <name>AsymmetricPause</name>
                        <synopsis>Asymmetric pause</synopsis>
                        <typeRef>boolean</typeRef>
                     </component>
                  </struct>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>PortCounterType</name>
            <synopsis>Counter per port</synopsis>
            <struct>
               <component componentID="1">
                  <name>ReceivedPackets</name>
                  <synopsis>Packets Received</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="2">
                  <name>TransmittedPackets</name>
                  <synopsis>Packets Transmitted</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="3">
                  <name>ReceivedBytes</name>
                  <synopsis>Bytes Received</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="4">
                  <name>TransmittedBytes</name>
                  <synopsis>Bytes Transmitted</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="5">
                  <name>ReceivedDrops</name>
                  <synopsis>Drops Received</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="6">
                  <name>TransmitDrops</name>
                  <synopsis>Transmit Drops</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="7">
                  <name>RecieveErrors</name>
                  <synopsis>Errors in reception</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="8">
                  <name>TransmitErrors</name>
                  <synopsis>Errors in transmittion</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="9">
                  <name>ReceivedFrameAlignmentErrors</name>
                  <synopsis>Frame Alignment Errors received</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="10">
                  <name>ReceiveOverrunErrors</name>
                  <synopsis>Received Overrun Errors</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="11">
                  <name>ReceivedCRCErrors</name>
                  <synopsis>CRC Errors in received packets</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="12">
                  <name>Collisions</name>
                  <synopsis>Collisions</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>QueuePropertyType</name>
            <synopsis>Property type for a queue</synopsis>
            <atomic>
               <baseType>uint16</baseType>
               <specialValues>
                  <specialValue value="0">
                     <name>None</name>
                     <synopsis>No property defined</synopsis>
                  </specialValue>
                  <specialValue value="1">
                     <name>MinimumRate</name>
                     <synopsis>Minimum datarate guaranteed</synopsis>
                  </specialValue>
               </specialValues>
            </atomic>
         </dataTypeDef>
         <dataTypeDef>
            <name>QueueArrayPropertiesType</name>
            <synopsis>Type Definition for property</synopsis>
            <struct>
               <component componentID="1">
                  <name>Property</name>
                  <synopsis>One of Queue Priority Types</synopsis>
                  <typeRef>QueuePropertyType</typeRef>
               </component>
               <component componentID="2">
                  <name>Length</name>
                  <synopsis>Length of property</synopsis>
                  <typeRef>uint32</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>QueueCounterType</name>
            <synopsis>Counters per queue</synopsis>
            <struct>
               <component componentID="1">
                  <name>TransmitPackets</name>
                  <synopsis>Packets Transmitted</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="2">
                  <name>TransmitBytes</name>
                  <synopsis>Bytes Transmitted</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="3">
                  <name>TransimtOverrunErrors</name>
                  <synopsis>Overrun Errors</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
            </struct>
         </dataTypeDef>
         <dataTypeDef>
            <name>ActionRowType</name>
            <synopsis>The ActionSet Row Type</synopsis>
            <struct>
               <component componentID="1">
                  <name>ActionTypes</name>
                  <synopsis>The type of action for the action set
                  </synopsis>
                  <typeRef>ActionType</typeRef>
               </component>
               <component componentID="2">
                  <name>LFBClassID</name>
                  <synopsis>The LFBClassID this action is supposed to go
                  </synopsis>
                  <typeRef>uint32</typeRef>
               </component>
               <component componentID="3">
                  <name>LFBInstanceID</name>
                  <synopsis>The LFBInstanceID this action is supposed to
                     go</synopsis>
                  <typeRef>uint32</typeRef>
               </component>
               <component componentID="4">
                  <name>ActionTableIndex</name>
                  <synopsis>The index of the action in the
                     LFBClass.LFBInstance. If the LFB class is a group,
                     then the index is the group index.</synopsis>
                  <optional/>
                  <typeRef>uint32</typeRef>
               </component>
            </struct>
         </dataTypeDef>
      </dataTypeDefs>
      <metadataDefs>
         <metadataDef>
            <name>IngressPort</name>
            <synopsis>The Ingress port the packet has arrived from.
            </synopsis>
            <metadataID>1024</metadataID>
            <typeRef>uint32</typeRef>
         </metadataDef>
         <metadataDef>
            <name>InPhyPort</name>
            <synopsis>The Port Index of the Physical interface the frame
               entered the switch</synopsis>
            <metadataID>1025</metadataID>
            <typeRef>uint32</typeRef>
         </metadataDef>
         <metadataDef>
            <name>PacketID</name>
            <synopsis>The PacketID metadata is used to uniquely identify
               a packet within the Flow Table or the Group Table to
               continue processing it after it has been returned from an
               OFActionLFB.</synopsis>
            <metadataID>1026</metadataID>
            <typeRef>uint32</typeRef>
         </metadataDef>
         <metadataDef>
            <name>ActionIndex</name>
            <synopsis>The Action Index metadata is used to point the row
               in the array in an Action LFB</synopsis>
            <metadataID>1027</metadataID>
            <typeRef>uint32</typeRef>
         </metadataDef>
         <metadataDef>
            <name>GroupIndex</name>
            <synopsis>The Group index metadata is used to point to the
               row of the array in an Group LFB</synopsis>
            <metadataID>1028</metadataID>
            <typeRef>uint32</typeRef>
         </metadataDef>
         <metadataDef>
            <name>LFBClassIDMetadata</name>
            <synopsis>The LFBClassID</synopsis>
            <metadataID>1029</metadataID>
            <typeRef>uint32</typeRef>
         </metadataDef>
         <metadataDef>
            <name>LFBInstanceIDMetadata</name>
            <synopsis>The LFB Instance ID</synopsis>
            <metadataID>1030</metadataID>
            <typeRef>uint32</typeRef>
         </metadataDef>
         <metadataDef>
            <name>QueueID</name>
            <synopsis>The Queue ID</synopsis>
            <metadataID>1031</metadataID>
            <typeRef>uint32</typeRef>
         </metadataDef>
         <metadataDef>
            <name>BufferID</name>
            <synopsis>The Buffer ID of a stored packet in the switch
               requried for the PacketOut message</synopsis>
            <metadataID>1032</metadataID>
            <typeRef>uint32</typeRef>
         </metadataDef>
         <metadataDef>
            <name>RedirectReason</name>
            <synopsis>The reason the packet was redirected to the
               controller</synopsis>
            <metadataID>1033</metadataID>
            <atomic>
               <baseType>uchar</baseType>
               <specialValues>
                  <specialValue value="1">
                     <name>NoMatch</name>
                     <synopsis>No match on the Flow Table (table miss)
                     </synopsis>
                  </specialValue>
                  <specialValue value="2">
                     <name>Action</name>
                     <synopsis>Specific Output to controller action.
                     </synopsis>
                  </specialValue>
               </specialValues>
            </atomic>
         </metadataDef>
         <metadataDef>
            <name>FlowTableID</name>
            <synopsis>The FlowTable ID the packet was sent to the
               controller from</synopsis>
            <metadataID>1034</metadataID>
            <typeRef>uchar</typeRef>
         </metadataDef>
         <metadataDef>
            <name>ActionList</name>
            <synopsis>The Action List that may come along with the packet
               in a PacketOut message</synopsis>
            <metadataID>1035</metadataID>
            <array>
               <typeRef>ActionRowType</typeRef>
            </array>
         </metadataDef>
         <metadataDef>
            <name>ActionSet</name>
            <synopsis>The Action Set per packet.</synopsis>
            <metadataID>1036</metadataID>
            <array>
               <typeRef>ActionRowType</typeRef>
               <contentKey contentKeyID="1">
                  <contentKeyField>ActionTypes</contentKeyField>
               </contentKey>
            </array>
         </metadataDef>
      </metadataDefs>
      <LFBClassDefs>
         <LFBClassDef LFBClassID="1024">
            <name>OFSwitch</name>
            <synopsis>Similar to the FEProtocol and FEObject LFB, the
               OpenFlowSwitch LFB contains information required for the
               openflow protocol.</synopsis>
            <version>1.1</version>
            <components>
               <component componentID="1" access="read-only">
                  <name>DatapathID</name>
                  <synopsis>Datapath unique ID. The lower 48-bits are for
                     a MAC address, while the upper 16-bits are
                     implementer-defined.</synopsis>
                  <typeRef>uint64</typeRef>
               </component>
               <component componentID="2" access="read-write">
                  <name>HandleFragments</name>
                  <synopsis>if true drop fragments. If false no special
                     handling.</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="3" access="read-write">
                  <name>ReassembleFragments</name>
                  <synopsis>If true, reassemble fragments</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="4" access="read-write">
                  <name>InvalidTTLtoController</name>
                  <synopsis>Send packets with invalid TTL ie. 0 or 1 to
                     controller</synopsis>
                  <typeRef>boolean</typeRef>
               </component>
               <component componentID="5" access="read-only">
                  <name>SwitchDescription</name>
                  <synopsis>Information about the switch</synopsis>
                  <typeRef>SwitchDescriptionType</typeRef>
               </component>
               <component componentID="6" access="read-write">
                  <name>Ports</name>
                  <synopsis>The Ports that this switch has. It is an
                     array of the Port Numbers</synopsis>
                  <array>
                     <typeRef>uint32</typeRef>
                  </array>
               </component>
            </components>
            <capabilities>
               <capability componentID="31">
                  <name>FlowStatistics</name>
                  <synopsis>Whether the switch keep flow statistics
                  </synopsis>
                  <typeRef>boolean</typeRef>
               </capability>
               <capability componentID="32">
                  <name>TableStatistics</name>
                  <synopsis>Whether the switch keep table statistics
                  </synopsis>
                  <typeRef>boolean</typeRef>
               </capability>
               <capability componentID="33">
                  <name>PortStatistics</name>
                  <synopsis>Whether the switch keep port statistics
                  </synopsis>
                  <typeRef>boolean</typeRef>
               </capability>
               <capability componentID="34">
                  <name>GroupStatistics</name>
                  <synopsis>Whether the switch keep group statistics
                  </synopsis>
                  <typeRef>boolean</typeRef>
               </capability>
               <capability componentID="35">
                  <name>IPReassembly</name>
                  <synopsis>Whether the switch can reassemble IP
                     fragments</synopsis>
                  <typeRef>boolean</typeRef>
               </capability>
               <capability componentID="36">
                  <name>QueueStats</name>
                  <synopsis>Whether the switch keeps queue statistics
                  </synopsis>
                  <typeRef>boolean</typeRef>
               </capability>
               <capability componentID="37">
                  <name>ARPMatchIP</name>
                  <synopsis>Whether the switch matches IP addresses in
                     APR packets</synopsis>
                  <typeRef>boolean</typeRef>
               </capability>
               <capability componentID="38">
                  <name>ActionsSupported</name>
                  <synopsis>What actions are supported</synopsis>
                  <array>
                     <atomic>
                        <baseType>ActionType</baseType>
                        <rangeRestriction>
                           <allowedRange min="0" max="65534"/>
                        </rangeRestriction>
                     </atomic>
                     <contentKey contentKeyID="1">
                        <contentKeyField>ActionType</contentKeyField>
                     </contentKey>
                  </array>
               </capability>
               <capability componentID="39">
                  <name>TablesSupported</name>
                  <synopsis>Number of tables supported by the datapath
                  </synopsis>
                  <typeRef>uchar</typeRef>
               </capability>
            </capabilities>
            <events baseID="61">
               <event eventID="1">
                  <name>PortAdded</name>
                  <synopsis> This event is sent when a port is added
                  </synopsis>
                  <eventTarget>
                     <eventField>Ports</eventField>
                  </eventTarget>
                  <eventCreated/>
               </event>
               <event eventID="2">
                  <name>PortDeleted</name>
                  <synopsis>This event is sent when a port is deleted
                  </synopsis>
                  <eventTarget>
                     <eventField>Ports</eventField>
                  </eventTarget>
                  <eventDeleted/>
               </event>
               <event eventID="3">
                  <name>PortModified</name>
                  <synopsis>This event is sent when a port is modified
                  </synopsis>
                  <eventTarget>
                     <eventField>Ports</eventField>
                  </eventTarget>
                  <eventChanged/>
               </event>
            </events>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1025">
            <name>OFFlowTables</name>
            <synopsis>An LFB that houses all OpenFlow Flow Tables
               residing in the switch</synopsis>
            <version>1.1</version>
            <inputPorts>
               <inputPort group="true">
                  <name>InputPort</name>
                  <synopsis>An Input port that expects packets from an
                     OFPort LFB</synopsis>
                  <expectation>
                     <frameExpected>
                        <ref>Arbitrary</ref>
                     </frameExpected>
                     <metadataExpected>
                        <ref>IngressPort</ref>
                        <ref>InPhyPort</ref>
                     </metadataExpected>
                  </expectation>
               </inputPort>
               <inputPort group="true">
                  <name>PacketReturn</name>
                  <synopsis>A port that expects the packet to be returned
                     from an OFActionLFB. If the OFActionLFB is the
                     OFQueueLFB then the QueueID metadata is expected as
                     well.</synopsis>
                  <expectation>
                     <frameExpected>
                        <ref>Arbitrary</ref>
                     </frameExpected>
                     <metadataExpected>
                        <ref>PacketID</ref>
                        <ref dependency="optional">QueueID</ref>
                     </metadataExpected>
                  </expectation>
               </inputPort>
               <inputPort group="true">
                  <name>RedirectPacketIn</name>
                  <synopsis>A port that expects a packet from the
                     controller</synopsis>
                  <expectation>
                     <frameExpected>
                        <ref>Arbitrary</ref>
                     </frameExpected>
                     <metadataExpected>
                        <ref>ActionList</ref>
                        <ref>IngressPort</ref>
                     </metadataExpected>
                  </expectation>
               </inputPort>
            </inputPorts>
            <outputPorts>
               <outputPort group="false">
                  <name>OutputPort</name>
                  <synopsis>A port that produces packets leaving the flow
                     table to go to the OFOutputAction (to be sent to an
                     output port)</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                     <metadataProduced>
                        <ref>IngressPort</ref>
                        <ref>InPhyPort</ref>
                        <ref availability="conditional">QueueID</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
               <outputPort group="false">
                  <name>GroupPort</name>
                  <synopsis>A port that produces packets leaving the flow
                     table to go to the OFGroupTable.</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                     <metadataProduced>
                        <ref>IngressPort</ref>
                        <ref>InPhyPort</ref>
                        <ref>GroupIndex</ref>
                        <ref availability="conditional">QueueID</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
               <outputPort group="true">
                  <name>ActionPort</name>
                  <synopsis>A port that sends the packet to an OFAction
                     LFB</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                     <metadataProduced>
                        <ref>LFBClassIDMetadata</ref>
                        <ref>PacketID</ref>
                        <ref availability="conditional">ActionIndex</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
               <outputPort group="false">
                  <name>ActionSetPort</name>
                  <synopsis>A port that sends the packet to the ActionSet
                     LFB</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                     <metadataProduced>
                        <ref>IngressPort</ref>
                        <ref>InPhyPort</ref>
                        <ref>ActionSet</ref>
                        <ref availability="conditional">QueueID</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
               <outputPort group="false">
                  <name>RedirectPacketOut</name>
                  <synopsis>A port that sends a packet or part of it to
                     the controller</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                     <metadataProduced>
                        <ref>IngressPort</ref>
                        <ref>InPhyPort</ref>
                        <ref>RedirectReason</ref>
                        <ref>FlowTableID</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
            </outputPorts>
            <components>
               <component componentID="1" access="read-write">
                  <name>FlowTables</name>
                  <synopsis>Flow entries inside the FlowTable LFB
                  </synopsis>
                  <array>
                     <struct>
                        <component componentID="1">
                           <name>FlowEntries</name>
                           <synopsis>An array of Flow Entries</synopsis>
                           <array>
                              <typeRef>FlowEntry</typeRef>
                           </array>
                        </component>
                        <component componentID="2">
                           <name>FlowTableCounter</name>
                           <synopsis>A counter for each Flow Table
                           </synopsis>
                           <typeRef>TableCounterType</typeRef>
                        </component>
                        <component componentID="3">
                           <name>MissBehaviour</name>
                           <synopsis>What should the FlowTable do if a
                              miss occurs</synopsis>
                           <typeRef>FlowTableMissConfigType</typeRef>
                        </component>
                     </struct>
                  </array>
               </component>
               <component componentID="2" access="read-write">
                  <name>ApplyActionList</name>
                  <synopsis>Table of actions for each flow</synopsis>
                  <array>
                     <typeRef>Actions</typeRef>
                  </array>
               </component>
               <component componentID="3" access="read-write">
                  <name>WriteActions</name>
                  <synopsis>Table of Actions to write to the ActionSet
                  </synopsis>
                  <array>
                     <typeRef>Actions</typeRef>
                  </array>
               </component>
               <component componentID="4" access="read-write">
                  <name>WriteMetadataTable</name>
                  <synopsis>The write MetaDataTable</synopsis>
                  <array>
                     <typeRef>WriteMetadataTableType</typeRef>
                  </array>
               </component>
               <component componentID="5" access="read-write">
                  <name>GotoFlowTable</name>
                  <synopsis>Containing the FlowTable IDs this flow should
                     go to.</synopsis>
                  <array>
                     <typeRef>uint32</typeRef>
                  </array>
               </component>
               <component componentID="6" access="read-write">
                  <name>GroupTable</name>
                  <synopsis>Table of group indeces to point a packet to
                  </synopsis>
                  <array>
                     <typeRef>uint32</typeRef>
                  </array>
               </component>
            </components>
            <events baseID="61">
               <event eventID="1">
                  <name>FlowRemoved</name>
                  <synopsis>If a CE subscribes to this event, it will
                     send an event when a flow is removed.</synopsis>
                  <eventTarget>
                     <eventField>FlowEntries</eventField>
                     <eventSubscript>FlowEntry</eventSubscript>
                  </eventTarget>
                  <eventDeleted/>
                  <eventReports>
                     <eventReport>
                        <eventField>FlowTableID</eventField>
                     </eventReport>
                     <eventReport>
                        <eventField>FlowEntries</eventField>
                        <eventSubscript>FlowEntry</eventSubscript>
                        <eventField>Cookie</eventField>
                     </eventReport>
                     <eventReport>
                        <eventField>FlowEntries</eventField>
                        <eventSubscript>FlowEntry</eventSubscript>
                        <eventField>MatchFields</eventField>
                     </eventReport>
                     <eventReport>
                        <eventField>FlowEntries</eventField>
                        <eventSubscript>FlowEntry</eventSubscript>
                        <eventField>Timeouts</eventField>
                        <eventSubscript>IdleTimeout</eventSubscript>
                     </eventReport>
                     <eventReport>
                        <eventField>FlowEntries</eventField>
                        <eventSubscript>FlowEntry</eventSubscript>
                        <eventField>Priority</eventField>
                     </eventReport>
                  </eventReports>
               </event>
            </events>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1026">
            <name>OFGroupTable</name>
            <synopsis>The OpenFlow Group Tables</synopsis>
            <version>1.1</version>
            <inputPorts>
               <inputPort group="false">
                  <name>PacketIn</name>
                  <synopsis>A port to expect packets, the GroupIndex
                     metadata, the IngressPort and InPhyPort and
                     optionally the QueueID if the packet has already
                     been through the OFActionSetQueue LFB.</synopsis>
                  <expectation>
                     <frameExpected>
                        <ref>Arbitrary</ref>
                     </frameExpected>
                     <metadataExpected>
                        <ref>GroupIndex</ref>
                        <ref>IngressPort</ref>
                        <ref>InPhyPort</ref>
                        <ref dependency="optional">QueueID</ref>
                     </metadataExpected>
                  </expectation>
               </inputPort>
               <inputPort group="true">
                  <name>PacketReturn</name>
                  <synopsis>A port that expects the packet to be returned
                     from an OFActionLFB. If the OFActionLFB is the
                     OFQueueLFB then the QueueID metadata is expected as
                     well.</synopsis>
                  <expectation>
                     <frameExpected>
                        <ref>Arbitrary</ref>
                     </frameExpected>
                     <metadataExpected>
                        <ref>PacketID</ref>
                        <ref dependency="optional">QueueID</ref>
                     </metadataExpected>
                  </expectation>
               </inputPort>
            </inputPorts>
            <outputPorts>
               <outputPort group="true">
                  <name>PacketOut</name>
                  <synopsis>The port to return the packet to caller
                  </synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                  </product>
               </outputPort>
               <outputPort group="true">
                  <name>ActionPort</name>
                  <synopsis>A port that sends the packet to an
                     OFActionLFB</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                     <metadataProduced>
                        <ref>LFBClassIDMetadata</ref>
                        <ref>LFBInstanceIDMetadata</ref>
                        <ref availability="conditional">ActionIndex</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
            </outputPorts>
            <components>
               <component componentID="1" access="read-write">
                  <name>GroupTable</name>
                  <synopsis>The group table</synopsis>
                  <array>
                     <typeRef>GroupTableEntry</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1027">
            <name>OFPort</name>
            <synopsis>Input or Output port of an OpenFlow switch
            </synopsis>
            <version>1.1</version>
            <inputPorts>
               <inputPort group="false">
                  <name>PacketOut</name>
                  <synopsis>The input port of the Port LFB from the
                     OFActionOutput LFB to output packets.</synopsis>
                  <expectation>
                     <frameExpected>
                        <ref>Arbitrary</ref>
                     </frameExpected>
                     <metadataExpected>
                        <ref dependency="optional">QueueID</ref>
                     </metadataExpected>
                  </expectation>
               </inputPort>
            </inputPorts>
            <outputPorts>
               <outputPort group="false">
                  <name>PacketIn</name>
                  <synopsis>Sends a packet to the OFFlowTables that is
                     received by the OFPort LFB.</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                     <metadataProduced>
                        <ref>IngressPort</ref>
                        <ref>InPhyPort</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
               <outputPort group="true">
                  <name>QueueOut</name>
                  <synopsis>Sends a packet to the OFQueue LFB to be
                     processed and output from the switch</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                  </product>
               </outputPort>
            </outputPorts>
            <components>
               <component componentID="1" access="read-only">
                  <name>PortNumber</name>
                  <synopsis>The port number uniquely identifies a port
                     within a switch.</synopsis>
                  <typeRef>PortNumberType</typeRef>
               </component>
               <component componentID="2" access="read-only">
                  <name>IEEEMAC</name>
                  <synopsis>MAC Address of the port</synopsis>
                  <typeRef>IEEEMAC</typeRef>
               </component>
               <component componentID="3" access="read-only">
                  <name>Name</name>
                  <synopsis>Human readable name of the port</synopsis>
                  <typeRef>string[16]</typeRef>
               </component>
               <component componentID="4" access="read-write">
                  <name>Configuration</name>
                  <synopsis>Configuration of the port</synopsis>
                  <typeRef>PortConfigurationType</typeRef>
               </component>
               <component componentID="5" access="read-only">
                  <name>State</name>
                  <synopsis>State of the OpenFlow Switch</synopsis>
                  <typeRef>PortStateType</typeRef>
               </component>
               <component componentID="6" access="read-only">
                  <name>CurrentFeatures</name>
                  <synopsis>Current features of the port</synopsis>
                  <typeRef>PortFeaturesType</typeRef>
               </component>
               <component componentID="7" access="read-write">
                  <name>Advertised</name>
                  <synopsis>Features advertised by the port</synopsis>
                  <typeRef>PortFeaturesType</typeRef>
               </component>
               <component componentID="8" access="read-only">
                  <name>CurrentSpeed</name>
                  <synopsis>Current port bitrate in kbps</synopsis>
                  <typeRef>uint32</typeRef>
               </component>
               <component componentID="9" access="read-only">
                  <name>MaximumSpeed</name>
                  <synopsis>Maximum port bitrate in kbps</synopsis>
                  <typeRef>uint32</typeRef>
               </component>
               <component componentID="10" access="read-only">
                  <name>PortCounter</name>
                  <synopsis>Counters for the port</synopsis>
                  <typeRef>PortCounterType</typeRef>
               </component>
            </components>
            <capabilities>
               <capability componentID="31">
                  <name>Supported</name>
                  <synopsis>Features Supported by the port</synopsis>
                  <typeRef>PortFeaturesType</typeRef>
               </capability>
               <capability componentID="32">
                  <name>Peer</name>
                  <synopsis>Features advertised by the peer</synopsis>
                  <typeRef>PortFeaturesType</typeRef>
               </capability>
            </capabilities>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1028">
            <name>OFQueue</name>
            <synopsis>A queue LFB that can be attached to a port and be
               used to map flows on it. Flows mapped to a queue will be
               treated according to that queue's configuration</synopsis>
            <version>1.1</version>
            <inputPorts>
               <inputPort group="true">
                  <name>PacketIn</name>
                  <synopsis>An input port that expects any kind of frame.
                  </synopsis>
                  <expectation>
                     <frameExpected>
                        <ref>Arbitrary</ref>
                     </frameExpected>
                  </expectation>
               </inputPort>
            </inputPorts>
            <components>
               <component componentID="1" access="read-only">
                  <name>QueueID</name>
                  <synopsis>ID for the specific queue</synopsis>
                  <typeRef>uint32</typeRef>
               </component>
               <component componentID="2" access="read-write">
                  <name>Properties</name>
                  <synopsis>List of queue properties</synopsis>
                  <array>
                     <typeRef>QueueArrayPropertiesType</typeRef>
                  </array>
               </component>
               <component componentID="3" access="read-only">
                  <name>QueueCounter</name>
                  <synopsis>Counters for the queue</synopsis>
                  <typeRef>QueueCounterType</typeRef>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1029">
            <name>OFRedirectIn</name>
            <synopsis>The OFRedirectIn LFB abstracts the process for the
               controller to inject data packets into the switch to input
               data packets into the data path.</synopsis>
            <version>1.1</version>
            <derivedFrom>RedirectIn</derivedFrom>
            <outputPorts>
               <outputPort group="false">
                  <name>PacketIn</name>
                  <synopsis>An output port that sends a packet in the
                     data path</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                     <metadataProduced>
                        <ref>ActionList</ref>
                        <ref>IngressPort</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
               <outputPort group="false">
                  <name>BufferIn</name>
                  <synopsis>An output port that sends only the buffer id
                     to locate a buffered packet</synopsis>
                  <product>
                     <metadataProduced>
                        <ref>BufferID</ref>
                        <ref>ActionList</ref>
                        <ref>IngressPort</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
            </outputPorts>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1030">
            <name>OFRedirectOut</name>
            <synopsis>The OFRedirectOut LFB abstracts the process for the
               switch to deliver data packets to the controller
            </synopsis>
            <version>1.1</version>
            <derivedFrom>RedirectOut</derivedFrom>
            <inputPorts>
               <inputPort group="true">
                  <name>Outgoing</name>
                  <synopsis>The input port expects either the whole
                     packet to be sent to the controller or part of it
                     along with the buffer ID</synopsis>
                  <expectation>
                     <frameExpected>
                        <ref>Arbitrary</ref>
                     </frameExpected>
                     <metadataExpected>
                        <ref>IngressPort</ref>
                        <ref>InPhyPort</ref>
                        <ref>RedirectReason</ref>
                        <ref dependency="optional">FlowTableID</ref>
                        <ref dependency="optional">BufferID</ref>
                     </metadataExpected>
                  </expectation>
               </inputPort>
            </inputPorts>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1031">
            <name>OFActionSet</name>
            <synopsis>The ActionSet LFB</synopsis>
            <version>1.1</version>
            <inputPorts>
               <inputPort group="false">
                  <name>PacketIn</name>
                  <synopsis>A port that expects a packet along with
                     metadata</synopsis>
                  <expectation>
                     <metadataExpected>
                        <ref>IngressPort</ref>
                        <ref>InPhyPort</ref>
                        <ref>ActionSet</ref>
                        <ref dependency="optional">QueueID</ref>
                     </metadataExpected>
                  </expectation>
               </inputPort>
               <inputPort group="true">
                  <name>PacketReturn</name>
                  <synopsis>A port that expects the packet to be returned
                     from an OFActionLFB. If the OFActionLFB is the
                     OFQueueLFB then the QueueID metadata is expected as
                     well.</synopsis>
                  <expectation>
                     <frameExpected>
                        <ref>Arbitrary</ref>
                     </frameExpected>
                     <metadataExpected>
                        <ref>PacketID</ref>
                        <ref dependency="optional">QueueID</ref>
                     </metadataExpected>
                  </expectation>
               </inputPort>
            </inputPorts>
            <outputPorts>
               <outputPort group="false">
                  <name>OutputPort</name>
                  <synopsis>A port that produces packets leaving the flow
                     table to go to the OFOutputAction (to be sent to an
                     output port)</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                     <metadataProduced>
                        <ref>IngressPort</ref>
                        <ref>InPhyPort</ref>
                        <ref availability="conditional">QueueID</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
               <outputPort group="false">
                  <name>GroupPort</name>
                  <synopsis>A port that produces packets leaving the flow
                     table to go to the OFGroupTable.</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                     <metadataProduced>
                        <ref>IngressPort</ref>
                        <ref>InPhyPort</ref>
                        <ref>GroupIndex</ref>
                        <ref availability="conditional">QueueID</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
               <outputPort group="true">
                  <name>ActionPort</name>
                  <synopsis>A port that sends the packet to an OFAction
                     LFB</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                     <metadataProduced>
                        <ref>LFBClassIDMetadata</ref>
                        <ref>PacketID</ref>
                        <ref availability="conditional">ActionIndex</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
            </outputPorts>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1032">
            <name>OFBuffer</name>
            <synopsis>An LFB that buffers packets and send them to the
               controller</synopsis>
            <version>1.1</version>
            <inputPorts>
               <inputPort group="false">
                  <name>FlowTableIn</name>
                  <synopsis>A packet received by a Flow Table to be
                     buffered and sent to the controller</synopsis>
                  <expectation>
                     <frameExpected>
                        <ref>Arbitrary</ref>
                     </frameExpected>
                     <metadataExpected>
                        <ref>IngressPort</ref>
                        <ref>InPhyPort</ref>
                     </metadataExpected>
                  </expectation>
               </inputPort>
               <inputPort group="false">
                  <name>ControllerIn</name>
                  <synopsis>A Buffer ID received as metadata along with
                     optional Action list from the controller</synopsis>
                  <expectation>
                     <metadataExpected>
                        <ref>BufferID</ref>
                        <ref dependency="optional">ActionList</ref>
                     </metadataExpected>
                  </expectation>
               </inputPort>
            </inputPorts>
            <outputPorts>
               <outputPort group="false">
                  <name>ToFlowTable</name>
                  <synopsis>When a buffer ID has been received optionally
                     along with the Action List metadata it is sent to
                     the Flow Tables for process</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                     <metadataProduced>
                        <ref availability="conditional">ActionList</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
               <outputPort group="false">
                  <name>ToRedirectOut</name>
                  <synopsis>When a packet has been received it will be
                     buffered and the buffer id will be sent to the
                     redirect out.</synopsis>
                  <product>
                     <metadataProduced>
                        <ref availability="unconditional">BufferID</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
            </outputPorts>
            <components>
               <component componentID="1" access="read-write">
                  <name>MissSendLen</name>
                  <synopsis>Max bytes of new flow that datapath should
                     send to the controller.</synopsis>
                  <typeRef>uint16</typeRef>
               </component>
            </components>
            <capabilities>
               <capability componentID="31">
                  <name>MaxBufferedPackets</name>
                  <synopsis>Maximum packets buffered at once.</synopsis>
                  <typeRef>uint32</typeRef>
               </capability>
            </capabilities>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1033">
            <name>OFAction</name>
            <synopsis>An LFB that performs one specific action on a
               packet in the OpenFlow switch. The OFActionLFB expects any
               kind of packet and as metadata the FlowTableInstanceID to
               know from which Flow Table the packet has arrived from and
               the Action Index to specify the row in the Action Table,
               if there is an Action table.</synopsis>
            <version>1.1</version>
            <inputPorts>
               <inputPort group="true">
                  <name>PacketIn</name>
                  <synopsis>An input port that gets the packet to perform
                     the action on. Expects the ClassID of the LFB that
                     calls it to know to which LFB to return it to. Can
                     accept calls from the OFFlowTables or the
                     OFGroupLFB.</synopsis>
                  <expectation>
                     <frameExpected>
                        <ref>Arbitrary</ref>
                     </frameExpected>
                     <metadataExpected>
                        <ref>PacketID</ref>
                        <ref>LFBClassIDMetadata</ref>
                        <ref dependency="optional">ActionIndex</ref>
                        <ref dependency="optional">IngressPort</ref>
                        <ref dependency="optional">InPhyPort</ref>
                        <ref dependency="optional">QueueID</ref>
                     </metadataExpected>
                  </expectation>
               </inputPort>
            </inputPorts>
            <outputPorts>
               <outputPort group="true">
                  <name>PacketOut</name>
                  <synopsis>The output port from which the packet will
                     be send back to the LFB (OFFlowTables or
                     OFGroupTable) from which it came from.</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                     <metadataProduced>
                        <ref>PacketID</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
            </outputPorts>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1034">
            <name>OFActionOutput</name>
            <synopsis>An LFB that performs the Output Action</synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <outputPorts>
               <outputPort group="true">
                  <name>PortOutput</name>
                  <synopsis>Send a copy of the packet to the specified
                     port(s)</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                  </product>
               </outputPort>
            </outputPorts>
            <components>
               <component componentID="1" access="read-write">
                  <name>OutputActionTable</name>
                  <synopsis>Output to switch port</synopsis>
                  <array>
                     <struct>
                        <component componentID="1">
                           <name>Port</name>
                           <synopsis>The port to send the packet out
                           </synopsis>
                           <typeRef>PortNumberType</typeRef>
                        </component>
                        <component componentID="2">
                           <name>MaxLength</name>
                           <synopsis>If the port is the controller sets
                              the maximum number of bytes to send.
                           </synopsis>
                           <typeRef>uint16</typeRef>
                        </component>
                     </struct>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1035">
            <name>OFActionSetVLANVID</name>
            <synopsis>An LFB that performs the Set VLANID Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>SetVLANVIDActionTable</name>
                  <synopsis>Set the 802.1q VLAN ID</synopsis>
                  <array>
                     <typeRef>uint16</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1036">
            <name>SetVLANPriorityActionTable</name>
            <synopsis>An LFB that performs the Set VLAN Priority Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>SetVLANPriorityActionTable</name>
                  <synopsis>Set the 802.1q VLAN Priority</synopsis>
                  <array>
                     <typeRef>uchar</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1037">
            <name>OFActionSetMACSource</name>
            <synopsis>An LFB that performs the Set MAC Source Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>SetMACSourceActionTable</name>
                  <synopsis>Set MAC source address</synopsis>
                  <array>
                     <typeRef>IEEEMAC</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1038">
            <name>OFActionSetMACDestination</name>
            <synopsis>An LFB that performs the Set MAC Destination
            Action</synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>SetMACDestinationActionTable</name>
                  <synopsis>Set MAC destination address</synopsis>
                  <array>
                     <typeRef>IEEEMAC</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1039">
            <name>OFActionSetIPSource</name>
            <synopsis>An LFB that performs the Set IP Source Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>SetIPSourceActionTable</name>
                  <synopsis>Set the IP source address</synopsis>
                  <array>
                     <typeRef>IPv4Addr</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1040">
            <name>OFActionSetIPDestination</name>
            <synopsis>An LFB that performs the Set IP Destination Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>SetIPDestinationActionTable</name>
                  <synopsis>Set the IP destination address</synopsis>
                  <array>
                     <typeRef>IPv4Addr</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1041">
            <name>OFActionSetIPTOS</name>
            <synopsis>An LFB that performs the Set VLANID Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>SetIPTOSActionTable</name>
                  <synopsis>Set IP ToS field</synopsis>
                  <array>
                     <typeRef>uchar</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1042">
            <name>OFActionSetIPECN</name>
            <synopsis>An LFB that performs the Set IP ECN Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>SetIPECNActionTable</name>
                  <synopsis>Set IP ECN field</synopsis>
                  <array>
                     <typeRef>uchar</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1043">
            <name>OFActionSetTCPSource</name>
            <synopsis>An LFB that performs the Set TCP/UDP/SCTP Source
               port Action</synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>SetTCPSourceActionTable</name>
                  <synopsis>Sets TCP/UDP/SCTP source port</synopsis>
                  <array>
                     <typeRef>uint16</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1044">
            <name>OFActionSetTCPDestination</name>
            <synopsis>An LFB that performs the Set TCP/UDP/SCTP
               Destination port Action</synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>SetTCPDestinationActionTable</name>
                  <synopsis>Sets TCP/UDP/SCTP destination port
                  </synopsis>
                  <array>
                     <typeRef>uint16</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1045">
            <name>OFActionCopyTTLOut</name>
            <synopsis>An LFB that performs the copy TTL outwards Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1046">
            <name>OFActionCopyTTLIn</name>
            <synopsis>An LFB that performs the copy TTL inwards Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1047">
            <name>OFActionSetMPLSLabel</name>
            <synopsis>An LFB that performs the Set MPLS Label Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>SetMPLSLabelActionTable</name>
                  <synopsis>Sets MPLS Label Table</synopsis>
                  <array>
                     <typeRef>uint32</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1048">
            <name>OFActionSetMPLSTC</name>
            <synopsis>An LFB that performs the Set MPLS Traffic Class
               Action</synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>SetMPLSTCActionTable</name>
                  <synopsis>Sets MPLS Label Table</synopsis>
                  <array>
                     <typeRef>uchar</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1049">
            <name>OFActionSetMPLSTTL</name>
            <synopsis>An LFB that performs the Set MPLS TTL Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>OFActionSetMPLSTTL</name>
                  <synopsis>Sets MPLS TTL Table</synopsis>
                  <array>
                     <typeRef>uchar</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1050">
            <name>OFActionDecrementMPLSTTL</name>
            <synopsis>An LFB that performs the decrementation of the
               MPLS TTL Action</synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1051">
            <name>OFActionPushVLan</name>
            <synopsis>An LFB that performs the Push VLAN Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>PushVLANTable</name>
                  <synopsis>Push VLAN Table</synopsis>
                  <array>
                     <typeRef>uint16</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1052">
            <name>OFActionPopVLAN</name>
            <synopsis>An LFB that performs the Pop VLAN Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1053">
            <name>OFActionPushMPLS</name>
            <synopsis>An LFB that performs the Push MPLS Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>PushMPLSTable</name>
                  <synopsis>Push MPLS Table</synopsis>
                  <array>
                     <typeRef>uint16</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1054">
            <name>OFActionPopMPLS</name>
            <synopsis>An LFB that performs the Pop MPLS Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>PopMPLSTable</name>
                  <synopsis>Pop MPLS Table</synopsis>
                  <array>
                     <typeRef>uint16</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1055">
            <name>OFActionSetQueue</name>
            <synopsis>An LFB that performs the Set Queue Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <outputPorts>
               <outputPort group="true">
                  <name>QueuePacketOut</name>
                  <synopsis>The output port from which the packet will be
                     send back to the Flow Table/GroupTable from which it
                     came from.</synopsis>
                  <product>
                     <frameProduced>
                        <ref>Arbitrary</ref>
                     </frameProduced>
                     <metadataProduced>
                        <ref>PacketID</ref>
                        <ref>QueueID</ref>
                     </metadataProduced>
                  </product>
               </outputPort>
            </outputPorts>
            <components>
               <component componentID="1" access="read-write">
                  <name>SetQueueTable</name>
                  <synopsis>Sets Queue Table</synopsis>
                  <array>
                     <typeRef>uint32</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1056">
            <name>OFActionSetIPTTL</name>
            <synopsis>An LFB that performs the Set IP TTL Action
            </synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
            <components>
               <component componentID="1" access="read-write">
                  <name>SetIPTTLActionTable</name>
                  <synopsis>Sets IP TTL Table</synopsis>
                  <array>
                     <typeRef>uchar</typeRef>
                  </array>
               </component>
            </components>
         </LFBClassDef>
         <LFBClassDef LFBClassID="1057">
            <name>OFActionDecrementIPTTL</name>
            <synopsis>An LFB that performs the decrementation of the IP
               TTL Action</synopsis>
            <version>1.1</version>
            <derivedFrom>OFAction</derivedFrom>
         </LFBClassDef>
      </LFBClassDefs>
