quoted-string = <quoted-string, defined in [Part1], Section 1.2.2>
token         = <token, defined in [Part1], Section 1.2.2>
OWS           = <OWS, defined in [Part1], Section 1.2.2>

auth-scheme    = token
auth-param     = token "=" ( token / quoted-string )

challenge   = auth-scheme 1*SP 1#auth-param

      Note: User agents will need to take special care in parsing the
      WWW-Authenticate or Proxy-Authenticate header field value if it
      contains more than one challenge, or if more than one WWW-
      Authenticate header field is provided, since the contents of a
      challenge can itself contain a comma-separated list of
      authentication parameters.

      Note: Many browsers fail to parse challenges containing unknown
      schemes.  A workaround for this problem is to list well-supported
      schemes (such as "basic") first.

realm       = "realm" "=" realm-value
realm-value = quoted-string

credentials = auth-scheme ( token
                               / quoted-string
                               / #auth-param )

Authorization = credentials

Proxy-Authenticate = 1#challenge

Proxy-Authorization = credentials

WWW-Authenticate = 1#challenge

Authorization = credentials

OWS = <OWS, defined in [Part1], Section 1.2.2>

Proxy-Authenticate = *( "," OWS ) challenge *( OWS "," [ OWS
    challenge ] )
Proxy-Authorization = credentials

WWW-Authenticate = *( "," OWS ) challenge *( OWS "," [ OWS challenge
    ] )

auth-param = token "=" ( token / quoted-string )
auth-scheme = token

challenge = auth-scheme 1*SP *( "," OWS ) auth-param *( OWS "," [ OWS
    auth-param ] )
credentials = auth-scheme ( token / quoted-string / [ ( "," /
    auth-param ) *( OWS "," [ OWS auth-param ] ) ] )

quoted-string = <quoted-string, defined in [Part1], Section 1.2.2>

realm = "realm=" realm-value
realm-value = quoted-string

token = <token, defined in [Part1], Section 1.2.2>

