
Network Working Group                                 M. Nottingham, Ed.
Internet-Draft
Expires: September 13, 2005                                R. Sayre, Ed.
                                               Boswijck Memex Consulting
                                                          March 12, 2005


                      The Atom Syndication Format
                      draft-ietf-atompub-format-06

Status of this Memo

   This document is an Internet-Draft and is subject to all provisions
   of Section 3 of RFC 3667.  By submitting this Internet-Draft, each
   author represents that any applicable patent or other IPR claims of
   which he or she is aware have been or will be disclosed, and any of
   which he or she become aware will be disclosed, in accordance with
   RFC 3668.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as
   Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on September 13, 2005.

Copyright Notice

   Copyright (C) The Internet Society (2005).

Abstract

   This document specifies Atom, an XML-based Web content and metadata
   syndication format.






Nottingham & Sayre     Expires September 13, 2005               [Page 1]

Internet-Draft                 Atom Format                    March 2005


Table of Contents

   1.   Introduction . . . . . . . . . . . . . . . . . . . . . . . .   4
     1.1  Editorial Notes  . . . . . . . . . . . . . . . . . . . . .   4
     1.2  Example  . . . . . . . . . . . . . . . . . . . . . . . . .   5
     1.3  Notational Conventions . . . . . . . . . . . . . . . . . .   5
   2.   Atom Documents . . . . . . . . . . . . . . . . . . . . . . .   7
   3.   Common Atom Constructs . . . . . . . . . . . . . . . . . . .   9
     3.1  Text Constructs  . . . . . . . . . . . . . . . . . . . . .   9
       3.1.1  "type" Attribute . . . . . . . . . . . . . . . . . . .   9
     3.2  Person Constructs  . . . . . . . . . . . . . . . . . . . .  11
       3.2.1  The "atom:name" Element  . . . . . . . . . . . . . . .  11
       3.2.2  The "atom:uri" Element . . . . . . . . . . . . . . . .  11
       3.2.3  The "atom:email" Element . . . . . . . . . . . . . . .  11
     3.3  Date Constructs  . . . . . . . . . . . . . . . . . . . . .  11
   4.   Atom Element Definitions . . . . . . . . . . . . . . . . . .  13
     4.1  Container Elements . . . . . . . . . . . . . . . . . . . .  13
       4.1.1  The "atom:feed" Element  . . . . . . . . . . . . . . .  13
       4.1.2  The "atom:entry" Element . . . . . . . . . . . . . . .  14
       4.1.3  The "atom:content" Element . . . . . . . . . . . . . .  16
     4.2  Metadata Elements  . . . . . . . . . . . . . . . . . . . .  19
       4.2.1  The "atom:author" Element  . . . . . . . . . . . . . .  19
       4.2.2  The "atom:category" Element  . . . . . . . . . . . . .  20
       4.2.3  The "atom:contributor" Element . . . . . . . . . . . .  20
       4.2.4  The "atom:copyright Element  . . . . . . . . . . . . .  20
       4.2.5  The "atom:generator" Element . . . . . . . . . . . . .  21
       4.2.6  The "atom:icon" Element  . . . . . . . . . . . . . . .  21
       4.2.7  The "atom:id" Element  . . . . . . . . . . . . . . . .  21
       4.2.8  The "atom:image" Element . . . . . . . . . . . . . . .  23
       4.2.9  The "atom:link" Element  . . . . . . . . . . . . . . .  23
       4.2.10   The "atom:published" Element . . . . . . . . . . . .  26
       4.2.11   The "atom:source-feed" Element . . . . . . . . . . .  26
       4.2.12   The "atom:subtitle" Element  . . . . . . . . . . . .  26
       4.2.13   The "atom:summary" Element . . . . . . . . . . . . .  27
       4.2.14   The "atom:title" Element . . . . . . . . . . . . . .  27
       4.2.15   The "atom:updated" Element . . . . . . . . . . . . .  27
   5.   Securing Atom Documents  . . . . . . . . . . . . . . . . . .  28
     5.1  Digital Signatures . . . . . . . . . . . . . . . . . . . .  28
     5.2  Encryption . . . . . . . . . . . . . . . . . . . . . . . .  28
   6.   Extending Atom . . . . . . . . . . . . . . . . . . . . . . .  29
     6.1  Extensions From Non-Atom Vocabularies  . . . . . . . . . .  29
     6.2  Extensions To the Atom Vocabulary  . . . . . . . . . . . .  29
     6.3  Software Processing of Foreign Markup  . . . . . . . . . .  29
     6.4  Extension Elements . . . . . . . . . . . . . . . . . . . .  29
       6.4.1  Simple Extension Elements  . . . . . . . . . . . . . .  30
       6.4.2  Structured Extension Elements  . . . . . . . . . . . .  30
   7.   IANA Considerations  . . . . . . . . . . . . . . . . . . . .  31
     7.1  Registry of Link Relations . . . . . . . . . . . . . . . .  31



Nottingham & Sayre     Expires September 13, 2005               [Page 2]

Internet-Draft                 Atom Format                    March 2005


   8.   Security Considerations  . . . . . . . . . . . . . . . . . .  33
     8.1  HTML and XHTML Content . . . . . . . . . . . . . . . . . .  33
     8.2  URIs . . . . . . . . . . . . . . . . . . . . . . . . . . .  33
     8.3  IRIs . . . . . . . . . . . . . . . . . . . . . . . . . . .  33
     8.4  Encryption and Signing . . . . . . . . . . . . . . . . . .  33
   9.   References . . . . . . . . . . . . . . . . . . . . . . . . .  34
     9.1  Normative References . . . . . . . . . . . . . . . . . . .  34
     9.2  Informative References . . . . . . . . . . . . . . . . . .  35
        Authors' Addresses . . . . . . . . . . . . . . . . . . . . .  36
   A.   Contributors . . . . . . . . . . . . . . . . . . . . . . . .  37
   B.   Collected RELAX NG Compact Schema  . . . . . . . . . . . . .  38
   C.   Change Log . . . . . . . . . . . . . . . . . . . . . . . . .  45
        Intellectual Property and Copyright Statements . . . . . . .  48






































Nottingham & Sayre     Expires September 13, 2005               [Page 3]

Internet-Draft                 Atom Format                    March 2005


1.  Introduction

   Atom is an XML-based document format that describes lists of related
   information known as "feeds".  Feeds are composed of a number of
   items, known as "entries", each with an extensible set of attached
   metadata.  For example, each entry has a title.

   The primary use case that Atom addresses is the syndication of Web
   content such as Weblogs and news headlines to Web sites as well as
   directly to user agents.  However, nothing precludes it from being
   used for other purposes and kinds of content.

1.1  Editorial Notes

   The Atom format is a work-in-progress, and this draft is both
   incomplete and likely to change rapidly.  As a result, THE FORMAT
   DESCRIBED BY THIS DRAFT SHOULD NOT BE DEPLOYED, either in production
   systems or in any non-experimental fashion on the Internet.

   Discussion of this draft happens in two fora;

      The mailing list <http://www.imc.org/atom-syntax/index.html>
      The Atom Wiki Web site
      <http://www.intertwingly.net/wiki/pie/FrontPage>

   Active development takes place on the mailing list, while the Wiki is
   used for issue tracking and new proposals.
























Nottingham & Sayre     Expires September 13, 2005               [Page 4]

Internet-Draft                 Atom Format                    March 2005


1.2  Example

   A minimal, single-entry Atom Feed Document:

   <?xml version="1.0" encoding="UTF-8"?>
   <feed
       xmlns="http://purl.org/atom/ns#draft-ietf-atompub-format-06">

     <title>Example Feed</title>
     <link href="http://example.org/"/>
     <updated>2003-12-13T18:30:02Z</updated>
     <author>
     <name>John Doe</name>
     </author>

     <entry>
     <title>Atom-Powered Robots Run Amok</title>
     <link href="http://example.org/2003/12/13/atom03"/>
     <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
     <updated>2003-12-13T18:30:02Z</updated>
     </entry>
   </feed>

   [[anchor4: Ask yourself: is the example atom:entry valid?]]

1.3  Notational Conventions

   This specification describes conformance in terms of two kinds of
   artefacts; Atom Feed Documents and Atom Entry documents.
   Additionally, it places some requirements on Atom Processors.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in BCP 14, [RFC2119], as
   scoped to those conformance targets.

   This specification uses XML Namespaces [W3C.REC-xml-names-19990114]
   to uniquely identify XML elements names.  It uses the following
   namespace prefixes for the indicated namespace URIs;

   "atom": http://purl.org/atom/ns#draft-ietf-atompub-format-06

   Note that the choice of any namespace prefix is arbitrary and not
   semantically significant.

   Atom is specified using terms from the XML Infoset
   [W3C.REC-xml-infoset-20040204].  However, this specification uses a
   shorthand for two common terms; the phrase "Information Item" is



Nottingham & Sayre     Expires September 13, 2005               [Page 5]

Internet-Draft                 Atom Format                    March 2005


   omitted when naming Element Information Items and Attribute
   Information Items.

   Therefore, when this specification uses the term "element," it is
   referring to an Element Information Item in Infoset terms.  Likewise,
   when it uses the term "attribute," it is referring to an Attribute
   Information Item.

   Some sections of this specification are illustrated with fragments of
   a non-normative RELAX NG Compact schema [RELAX-NG].  However, the
   text of this specification provides the definition of conformance.  A
   collected schema appears in an informative appendix.







































Nottingham & Sayre     Expires September 13, 2005               [Page 6]

Internet-Draft                 Atom Format                    March 2005


2.  Atom Documents

   This specification describes two kinds of Atom Documents; Atom Feed
   Documents and Atom Entry Documents.

   An Atom Feed Document is a representation of an Atom feed, including
   metadata about the feed, and some or all of the entries associated
   with it.  Its root is the atom:feed element.

   An Atom Entry Document represents exactly one Atom Entry, outside of
   the context of an Atom Feed.  Its root is the atom:entry element.

   namespace
     atom ="http://purl.org/atom/ns#draft-ietf-atompub-format-06"

   start = atomFeed | atomEntry

   Both kinds of Atom documents are specified in terms of the XML
   Information Set, serialised as XML 1.0 [W3C.REC-xml-20040204] and
   identified with the "application/atom+xml" media type.  Atom
   Documents MUST be well-formed XML.

   Atom constrains the appearance and content of elements and
   attributes; unless otherwise stated, Atom Documents MAY contain other
   Information Items as appropriate.  In particular, Comment Information
   Items and Processing Instruction Information Items SHOULD be ignored
   in the normal processing of an Atom Document.

   Any element in an Atom Document MAY have an xml:base attribute.  XML
   Base [W3C.REC-xmlbase-20010627] processing MUST be applied to any
   relative reference [RFC3987] present in an Atom Document.  This
   includes such elements and attributes as specified by Atom itself, as
   well as those specified by extensions to Atom.

   Any element in an Atom Document MAY have an xml:lang attribute, whose
   content indicates the natural language for the element and its
   children.  The language context is only significant for elements and
   attributes declared to be "language-sensitive" by this specification.
   Requirements regarding the content and interpretation of xml:lang are
   specified in XML 1.0 [W3C.REC-xml-20040204], Section 2.12.

   atomCommonAttributes =
      attribute xml:base { atomUri }?,
      attribute xml:lang { atomLanguageTag }?

   Atom allows the use of IRIs [RFC3987], rather than only URIs
   [RFC3986].  For resolution, IRIs can easily be converted to URIs.
   When comparing IRIs serving as Identity Constructs, they MUST NOT be



Nottingham & Sayre     Expires September 13, 2005               [Page 7]

Internet-Draft                 Atom Format                    March 2005


   converted to URIs.  Please note that by definition, every URI is an
   IRI, so any URI can be used where an IRI is needed.

   [[anchor7: discussion of white space]]

   Atom is an extensible format.  See the section titled 'Extending
   Atom' later in this document for a full description of how Atom
   Documents can be extended.

   Atom Processors MAY keep state (e.g., metadata in atom:feed, entries)
   sourced from Atom Feed Documents and combine them with other Atom
   Feed Documents, in order to facilitate a contiguous view of the
   contents of a feed.  The manner in which Atom Feed Documents are
   combined in order to reconstruct a feed (e.g., updating entries and
   metadata, dealing with missing entries) is out of the scope of this
   specification, but may be defined by an extension to Atom.



































Nottingham & Sayre     Expires September 13, 2005               [Page 8]

Internet-Draft                 Atom Format                    March 2005


3.  Common Atom Constructs

   Many of Atom's elements share a few common structures.  This section
   defines a few such structures and their requirements for convenient
   reference by the appropriate element definitions.

   When an element is identified as being a particular kind of
   construct, it inherits the corresponding requirements from that
   construct's definition in this section.

3.1  Text Constructs

   A Text construct contains human readable text, usually in small
   quantities.  Except for the "type" attribute, the content of Text
   constructs is language-sensitive.


   atomPlainTextConstruct =
      atomCommonAttributes,
      attribute type { "text" | "html" }?,
      text

   atomXHTMLTextConstruct =
      atomCommonAttributes,
      attribute type { "xhtml" },
      (text|anyElement)*

   atomTextConstruct = atomPlainTextConstruct | atomXHTMLTextConstruct


3.1.1  "type" Attribute

   Text constructs MAY have a "type" attribute.  [[anchor11: Some feel
   type attributes with different allowable values in different elements
   is confusing.]].  When present, the value MUST be one of "text",
   "html" or "xhtml".  If the "type" attribute is not provided, Atom
   Processors MUST behave as though it were present with a value of
   "text".

   Note that MIME media types [RFC2045] are not acceptable values for
   the "type" attribute.

   If the value is "text", the content of the Text construct MUST NOT
   contain child elements.  Such text is intended to be presented to
   humans in a readable fashion.  Thus, Atom Processors MAY display it
   using normal text rendering techniques such as proportional fonts,
   white-space collapsing, and justification.




Nottingham & Sayre     Expires September 13, 2005               [Page 9]

Internet-Draft                 Atom Format                    March 2005


   If the value of "type" is "html", the content of the Text construct
   MUST NOT contain child elements, and SHOULD be suitable for handling
   as HTML [W3C.REC-html401-19991224].  Any markup within MUST be
   escaped; for example, "<br>" as "&lt;br>".  HTML markup within SHOULD
   be such that it could validly appear directly within an HTML <DIV>
   element, after unescaping.  Atom Processors that display such content
   MAY use markup to aid in its display.

   [[anchor12: example atom entry w/ escaped markup]]

   If the value of "type" is "xhtml", the content of the Text construct
   MUST be a single XHTML div element [W3C.REC-xhtml-basic-20001219].
   The XHTML div MUST contain XHTML text and markup that could validly
   appear within an XHTML div element.  The XHTML div element itself
   MUST NOT be considered part of the content.  Atom Processors which
   display the content MAY use the markup to aid in displaying it.
   Escaped markup is interpreted as a text representation of markup, and
   MUST NOT be interpreted as markup itself.

   Example:

   ...
   <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
         This is <b>XHTML</b> content.
      </div>
   </summary>
   ...
   <summary type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml">
         This is <xhtml:b>XHTML</xhtml:b> content.
      </xhtml:div>
   </summary>
   ...

   The following example assumes that the XHTML namespace has been bound
   to the "xh" prefix earlier in the document:

   ...
   <summary type="xhtml">
      <xh:div>
         This is <xh:b>XHTML</xh:b> content.
      </xh:div>
   </summary>
   ...






Nottingham & Sayre     Expires September 13, 2005              [Page 10]

Internet-Draft                 Atom Format                    March 2005


3.2  Person Constructs

   A Person construct is an element that describes a person,
   corporation, or similar entity (hereafter, 'person').

   Person constructs MAY be extended by namespace-qualified element
   children.

   This specification assigns no significance to the order of appearance
   of the child elements in a Person construct.


   atomPersonConstruct =
      atomCommonAttributes,
         (element atom:name { text } &
          element atom:uri { atomUri }?  &
          element atom:email { atomEmailAddress }?)

3.2.1  The "atom:name" Element

   The "atom:name" element's content conveys a human-readable name for
   the person.  The content of atom:name is language sensitive.  Person
   constructs MUST contain exactly one "atom:name" element.

3.2.2  The "atom:uri" Element

   The "atom:uri" element's content conveys an IRI associated with the
   person.  Person constructs MAY contain an atom:uri element, but MUST
   NOT contain more than one.  The content of atom:uri in a Person
   construct MUST be an IRI reference [RFC3987].

   xml:base [W3C.REC-xmlbase-20010627] processing MUST be applied to the
   atom:uri element's content.

3.2.3  The "atom:email" Element

   The "atom:email" element's content conveys an e-mail address
   associated with the person.  Person constructs MAY contain an
   atom:email element, but MUST NOT contain more than one.  Its content
   MUST conform to the addr-spec BNF rule in [RFC2822].

3.3  Date Constructs

   A Date construct is an element whose content MUST conform to the
   date-time BNF rule in [RFC3339].  I.e., the content of this element
   matches this regular expression:





Nottingham & Sayre     Expires September 13, 2005              [Page 11]

Internet-Draft                 Atom Format                    March 2005


   [0-9]{8}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)
        ?(Z|[\+\-][0-9]{2}:[0-9]{2})

   As a result, the date values conform to the following specifications:
   [RFC3339], [W3C.REC-xmlschema-2-20041028],
   [W3C.NOTE-datetime-19980827], and [ISO.8601.1988].


   atomDateConstruct =
      atomCommonAttributes,
      xsd:dateTime








































Nottingham & Sayre     Expires September 13, 2005              [Page 12]

Internet-Draft                 Atom Format                    March 2005


4.  Atom Element Definitions

4.1  Container Elements

4.1.1  The "atom:feed" Element

   [[anchor21: Substantially changed from format-05, review carefully.]]

   The "atom:feed" element is the document (i.e., top-level) element of
   an Atom Feed Document, acting as a container for metadata and data
   associated with the feed.  Its element children consist of one or
   more metadata elements followed by zero or more atom:entry child
   elements.

   This specification assigns no significance to the order of atom:entry
   elements within the feed.


   atomFeed =
      element atom:feed {
         atomCommonAttributes,
         (atomAuthor?
          & atomCategory*
          & atomContributor*
          & atomCopyright?
          & atomGenerator?
          & atomIcon?
          & atomId?
          & atomImage?
          & atomLink+
          & atomSubtitle?
          & atomTitle
          & atomUpdated
          & anyElement* ),
         atomEntry*
      }

   The following child elements are defined by this specification (note
   that the presence of some of these elements is required):

   o  atom:feed elements MUST contain exactly one atom:author element,
      UNLESS all of the atom:feed element's child atom:entry elements
      contain an atom:author element.  atom:feed elements MUST NOT
      contain more than one atom:author element.  [[anchor22:
      inheritance]]
   o  atom:feed elements MAY contain any number of atom:category
      elements.




Nottingham & Sayre     Expires September 13, 2005              [Page 13]

Internet-Draft                 Atom Format                    March 2005


   o  atom:feed elements MAY contain any number of atom:contributor
      elements.
   o  atom:feed elements MUST NOT contain more than one atom:copyright
      element.
   o  atom:feed elements MUST NOT contain more than one atom:generator
      element.
   o  atom:feed elements MUST NOT contain more than one atom:icon
      element.
   o  atom:feed elements MUST NOT contain more than one atom:image
      element.
   o  atom:feed elements MUST NOT contain more than one atom:id element.
   o  atom:feed elements MUST contain at least one atom:link element
      with a relation of "alternate".
   o  atom:feed elements SHOULD contain one atom:link element with a rel
      attribute value of "self" and SHOULD contain a href attribute with
      an absolute URI as its value.  This URI identifies the feed and a
      representation equivalent to the feed.
   o  atom:feed elements MUST NOT contain more than one atom:link
      element with a rel attribute value of "alternate" that has the
      same type attribute value.  If a feed's atom:link element with
      type="alternate" resolves to an HTML document, then that document
      SHOULD have a autodiscovery link element [Atom-autodiscovery] that
      reflects back to the feed.  atom:feed elements MAY contain
      additional atom:link elements beyond those described above.
   o  atom:feed elements MUST NOT contain more than one atom:subtitle
      element.
   o  atom:feed elements MUST contain exactly one atom:title element.
   o  atom:feed elements MUST contain exactly one atom:updated element.
   o  atom:feed elements MUST NOT contain atom:entry elements with
      identical atom:id values.

4.1.2  The "atom:entry" Element

   The "atom:entry" element represents an individual entry, acting as a
   container for metadata and data associated with the entry.  This
   element can appear as a child of the atom:feed element, or it can
   appear as the document (i.e., top-level) element of a standalone Atom
   Entry Document.

   The atom:entry element MAY contain any namespace-qualified
   [W3C.REC-xml-names-19990114] elements as children.  This
   specification assigns no significance to the order of appearance of
   the child elements of atom:entry.








Nottingham & Sayre     Expires September 13, 2005              [Page 14]

Internet-Draft                 Atom Format                    March 2005


   atomEntry =
      element atom:entry {
         atomCommonAttributes,
         (atomAuthor?
          & atomCategory*
          & atomContent?
          & atomContributor*
          & atomCopyright?
          & atomId
          & atomLink*
          & atomPublished?
          & atomSourceFeed?
          & atomSummary?
          & atomTitle
          & atomUpdated &
          anyElement*)
      }

   The following child elements are defined by this specification (note
   that it requires the presence of some of these elements):

   o  atom:entry elements MUST contain exactly one atom:author element,
      unless, in an Atom Feed Document, the atom:feed element contains
      an atom:author element itself.  atom:entry elements MUST NOT
      contain more than one atom:author element.  [[anchor24: What if
      there's a source-feed element? This is busted.  We should make
      author required for atom:feed and optional for atom:entry.  No
      inheritance co-constraints required.  --R.  Sayre]]
   o  atom:entry elements MAY contain any number of atom:category
      elements.
   o  atom:entry elements MAY contain any number of atom:contributor
      elements.
   o  atom:entry elements MUST NOT contain more than one atom:copyright
      element.
   o  atom:entry elements MUST contain exactly one atom:id element.
   o  atom:entry elements that contain no child atom:content element
      MUST contain at least one atom:link element with a rel attribute
      value of "alternate".  [[anchor25: "atom:entry elements MUST NOT
      contain more than one atom:link element with a rel attribute value
      of "alternate" that has the same type attribute value." This
      requirement predates @hreflang.  Keep it? --R.  Sayre]] atom:entry
      elements MAY contain additional atom:link elements beyond those
      described above.
   o  atom:entry elements MUST NOT contain more than one atom:published
      element.
   o  atom:entry elements MUST NOT contain more than one
      atom:source-feed element.




Nottingham & Sayre     Expires September 13, 2005              [Page 15]

Internet-Draft                 Atom Format                    March 2005


   o  atom:entry elements MUST contain an atom:summary element in any of
      the following cases: [[anchor26: Do these requirements reflect the
      WG's decisions? --R.  Sayre]]
      *  the atom:entry element contains no atom:content element.
         [[anchor27: Net result: Atom entries MUST have an atom:summary
         or an atom:content element.]]
      *  the atom:entry contains an atom:content that has a "src"
         attribute (and is thus empty).
      *  the atom:entry contains content that is encoded in Base64; i.e.
         the "type" attribute of atom:content is a MIME media type
         [RFC2045] and does not begin with "text/" nor end with "+xml".
   o  atom:entry elements MUST NOT contain more than one atom:summary
      element.
   o  atom:entry elements MUST have exactly one "atom:title" element.
   o  atom:entry elements MUST contain exactly one atom:updated element.

4.1.3  The "atom:content" Element

   The "atom:content" element either contains or links to the content of
   the entry.  Except for the "type" and "src" attributes, the content
   of atom:content is language-sensitive.  atom:entry elements MUST
   contain zero or one atom:content elements.





























Nottingham & Sayre     Expires September 13, 2005              [Page 16]

Internet-Draft                 Atom Format                    March 2005


   atomInlineTextContent =
      element atom:content {
         atomCommonAttributes,
         attribute type { "text" | "html" | atomMediaType }?,
         (text)*
      }

   atomInlineXHTMLContent =
      element atom:content {
         atomCommonAttributes,
         attribute type {
            "xhtml" |
            atomMediaType
         }?,
         (text|anyElement)*
      }

   atomOutOfLineContent =
      element atom:content {
         atomCommonAttributes,
         attribute type {
            "text" |
            "html" |
            "xhtml" |
            atomMediaType }?,
         attribute src { atomUri },
         empty
      }

   atomContent =
      atomInlineTextContent |
      atomInlineXHTMLContent |
      atomOutOfLineContent

4.1.3.1  The "type" attribute

   atom:content MAY have a "type" attribute.  When present, the value
   MAY be one of "text", "html", or "xhtml".  Failing that, it MUST be a
   MIME media type [RFC2045] with a discrete top-level type (see Section
   5 of [RFC2045]).  If the type attribute is not provided, Atom
   Processors MUST behave as though it were present with a value of
   "text".

4.1.3.2  The "src" attribute

   atom:content MAY have a "src" attribute, whose value MUST be an IRI
   reference [RFC3987].  If the "src" attribute is present, Atom
   Processors MAY use the IRI to retrieve the content.  If the "src"



Nottingham & Sayre     Expires September 13, 2005              [Page 17]

Internet-Draft                 Atom Format                    March 2005


   attribute is present, atom:content MUST be empty.  That is to say,
   the content may be retrievable using "src=" IRI, or it may be
   contained within atom:content, but not both.

   If the "src" attribute is present, the "type" attribute SHOULD be
   provided and MUST be a MIME media type [RFC2045], rather than "text",
   "html", or "xhtml".  The value is advisory; that is to say, upon
   dereferencing the IRI to retrieve the content, if the server
   providing that content also provides a media type, the
   server-provided media type is authoritative.

   If the value of type begins with "text/" or ends with "+xml", the
   content SHOULD be local; that is to say, no "src" attribute should be
   provided.  [[anchor31: J.  Reschke: I'm not sure I understand what
   this is for.  It seems to discourage putting XML data out-of-band.
   Why? ...  Explaining the issue instead of just trying to enforce it
   may lead to better results...]]

4.1.3.3  Processing Model

   Atom Documents MUST conform to the following rules.  Atom Processors
   MUST interpret atom:content according to the first applicable rule.

   1.  If the value of "type" is "text", the content of atom:content
       MUST NOT contain child elements.  Such text is intended to be
       presented to humans in a readable fashion.  Thus, Atom Processors
       MAY display it using normal text rendering techniques such as
       proportional fonts, white-space collapsing, and justification.
   2.  If the value of "type" is "html", the content of atom:content
       MUST NOT contain child elements, and SHOULD be suitable for
       handling as HTML [W3C.REC-html401-19991224].  The HTML markup
       must be escaped; for example, "<br>" as "&lt;br>".  The HTML
       markup SHOULD be such that it could validly appear directly
       within an HTML <DIV> element.  Atom Processors that display the
       content SHOULD use the markup to aid in displaying it.
   3.  If the value of "type" is "xhtml", the content of atom:content
       MUST be a single XHTML div element
       [W3C.REC-xhtml-basic-20001219].  The XHTML div MUST contain XHTML
       text and markup that could validly appear within an XHTML div
       element.  The XHTML div element itself MUST NOT be considered
       part of the content.  Atom Processors that display the content
       MAY use the markup to aid in displaying it.  Escaped markup is
       interpreted as a text representation of markup, and MUST NOT be
       interpreted as markup itself.
   4.  If the value of "type" ends with "+xml" or "/xml"
       (case-insensitive), the content of atom:content may include child
       elements, and SHOULD be suitable for handling as the indicated
       media type.  If the "src" attribute is not provided, this would



Nottingham & Sayre     Expires September 13, 2005              [Page 18]

Internet-Draft                 Atom Format                    March 2005


       normally mean that the "atom:content" element would contain a
       single child element which would serve as the root element of the
       XML document of the indicated type.
   5.  If the value of "type" begins with "text/" (case-insensitive),
       the content of atom:content MUST NOT contain child elements.
   6.  For all other values of "type", the content of atom:content MUST
       be a valid Base64 encoding [RFC3548], which when decoded SHOULD
       be suitable for handling as the indicated media type.  In this
       case, the characters in the Base64 encoding may be preceded and
       followed in the atom:content element by whitespace, and lines are
       separated by a single newline (U+000A) character.

4.1.3.4  Examples

   XHTML inline:

   ...
   <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
         This is <b>XHTML</b> content.
      </div>
   </content>
   ...
   <content type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml">
         This is <xhtml:b>XHTML</xhtml:b> content.
      </xhtml:div>
   </content>
   ...

   The following example assumes that the XHTML namespace has been bound
   to the "xh" prefix earlier in the document:

   ...
   <content type="xhtml">
      <xh:div>
         This is <xh:b>XHTML</xh:b> content.
      </xh:div>
   </content>
   ...

4.2  Metadata Elements

4.2.1  The "atom:author" Element

   The "atom:author" element is a Person construct that indicates the
   author of the entry or feed.




Nottingham & Sayre     Expires September 13, 2005              [Page 19]

Internet-Draft                 Atom Format                    March 2005


   atomAuthor = element atom:author { atomPersonConstruct }

4.2.2  The "atom:category" Element

   The "atom:category" element conveys information about a category
   associated with an entry or feed.


   atomCategory =
      element atom:category {
         atomCommonAttributes, attribute term { text },
         attribute scheme { atomUri }?,
         attribute label { text }?,
         empty
      }

4.2.2.1  The "term" Attribute

   The "term" attribute is a string that identifies the category to
   which the entry or feed belongs.  Category elements MUST have a
   "term" attribute.

4.2.2.2  The "scheme" Attribute

   The "scheme" attribute is an IRI that identifies a categorization
   scheme.  Category elements MAY have a "scheme" attribute.

4.2.2.3  The "label" attribute

   The "label" attribute provides a human-readable label for display in
   end-user applications.  The content of the "label" attribute is
   language-sensitive.  Category elements MAY have a "label" attribute.

4.2.3  The "atom:contributor" Element

   The "atom:contributor" element is a Person construct that indicates a
   person or other entity who contributed to the entry or feed.


   atomContributor = element atom:contributor { atomPersonConstruct }

4.2.4  The "atom:copyright Element

   The "atom:copyright" element is a Text construct that conveys a
   human-readable copyright statement for an entry or feed.


   atomCopyright = element atom:copyright { atomTextContstruct }



Nottingham & Sayre     Expires September 13, 2005              [Page 20]

Internet-Draft                 Atom Format                    March 2005


   The atom:copyright element SHOULD NOT be used to convey
   machine-readable licensing information.

   If an atom:entry element does not contain an atom:copyright element,
   then the atom:copyright element of the containing atom:feed element's
   atom:head element, if present, is considered to apply to the entry.

4.2.5  The "atom:generator" Element

   The "atom:generator" element's content identifies the agent used to
   generate a feed, for debugging and other purposes.


   atomGenerator =
      element atom:generator {
         atomCommonAttributes,
         attribute uri { atomUri }?,
         attribute version { text }?,
         text
      }

   The content of this element, when present, MUST be a string that is a
   human-readable name for the generating agent.

   The atom:generator element MAY have a "uri" attribute whose value
   MUST be an IRI reference [RFC3987].  When dereferenced, that IRI
   SHOULD produce a representation that is relevant to that agent.

   The atom:generator element MAY have a "version" attribute that
   indicates the version of the generating agent.  When present, its
   value is unstructured text.

4.2.6  The "atom:icon" Element

   The "atom:icon" element's content is an IRI [RFC3987] which
   identifies an image which provides iconic visual identification for a
   feed.  The image SHOULD have an aspect ratio of one (horizontal) to
   one (vertical), and should be suitable for presentation at a small
   size.


   atomIcon = element atom:icon { atomCommonAttributes, (atomUri) }

4.2.7  The "atom:id" Element

   [[anchor45: Substantially changed from format-05, review carefully]]

   The "atom:id" element conveys a permanent, universally unique



Nottingham & Sayre     Expires September 13, 2005              [Page 21]

Internet-Draft                 Atom Format                    March 2005


   identifier for an entry or feed.


   atomId = element atom:id { atomCommonAttributes, (atomUri) }

   Its content MUST be an IRI, as defined by [RFC3987].  Note that the
   definition of "IRI" excludes relative references.  Though the IRI
   might use a dereferencable scheme, Atom Processors MUST NOT assume it
   can be dereferenced.

   When an Atom document is relocated, migrated, syndicated,
   republished, exported or imported, the content of its atom:id element
   MUST NOT change.  Put another way, an atom:id element pertains to all
   instantiations of a particular Atom entry or feed; revisions retain
   the same content in their atom:id elements.

   The content of an atom:id element MUST be created in a way that
   assures uniqueness; it is suggested that the atom:id element be
   stored along with the associated resource.

   Because of the risk of confusion between IRIs that would be
   equivalent if dereferenced, the following normalization strategy is
   strongly encouraged when generating atom:id elements:

   o  Provide the scheme in lowercase characters.
   o  Provide the host, if any, in lowercase characters.
   o  Only perform percent-encoding where it is essential.
   o  Use uppercase A-through-F characters when percent-encoding.
   o  Prevent dot-segments appearing in paths.
   o  For schemes that define a default authority, use an empty
      authority if the default is desired.
   o  For schemes that define an empty path to be equivalent to a path
      of "/", use "/".
   o  For schemes that define a port, use an empty port if the default
      is desired.
   o  Preserve empty fragment identifiers and queries.
   o  Ensure that all components of the IRI are appropriately
      character-normalized, e.g.  by using NFC or NFKC.

4.2.7.1  Comparing atom:id

   Instances of atom:id elements can be compared to determine whether an
   entry or feed is the same as one seen before.  Processors MUST
   compare atom:id elements on a character-by-character basis (in a
   case-sensitive fashion).  Comparison operations MUST be based solely
   on the IRI character strings, and MUST NOT rely on dereferencing the
   IRIs.




Nottingham & Sayre     Expires September 13, 2005              [Page 22]

Internet-Draft                 Atom Format                    March 2005


   As a result, two IRIs that resolve to the same resource but are not
   character-for-character identical will be considered different for
   the purposes of identifier comparison.

   For example:

      http://www.example.org/thing
      http://www.example.org/Thing
      http://www.EXAMPLE.org/thing
      HTTP://www.example.org/thing

   are four distinct identifiers, despite their differences in case.

   Likewise,

      http://www.example.com/~bob
      http://www.example.com/%7ebob
      http://www.example.com/%7Ebob

   are three distinct identifiers, because IRI %-escaping is significant
   for the purposes of comparison.

4.2.8  The "atom:image" Element

   The "atom:image" element's content is an IRI [RFC3987] which
   identifies an image which provides visual identification for a feed.
   The image SHOULD have an aspect ratio of 2 (horizontal) to 1
   (vertical).


   atomImage = element atom:image { atomCommonAttributes, (atomUri) }

4.2.9  The "atom:link" Element

   The "atom:link" element is an empty element that defines a reference
   from an entry or feed to a Web resource.


   atomLink =
      element atom:link {
         atomCommonAttributes,
         attribute href { atomUri },
         attribute rel { atomNCName | atomUri }?,
         attribute type { atomMediaType }?,
         attribute hreflang { atomLanguageTag }?,
         attribute title { text }?,
         attribute length { text }?,
         empty



Nottingham & Sayre     Expires September 13, 2005              [Page 23]

Internet-Draft                 Atom Format                    March 2005


      }

4.2.9.1  The "href" Attribute

   The "href" attribute contains the link's IRI.  atom:link elements
   MUST have a href attribute, whose value MUST be a IRI reference
   [RFC3987].

   xml:base [W3C.REC-xmlbase-20010627] processing MUST be applied to the
   href attribute's content.

4.2.9.2  The "rel" Attribute

   atom:link elements MAY have an "rel" attribute that indicates the
   link relation type.  If the "rel" attribute is not present, the link
   element MUST be interpreted as if the link relation type is
   "alternate".


   rel_attribute = segment-nz-nc / IRI

   The value of "rel" MUST be either a name that is non-empty and does
   not contain any colon (":") characters, or a IRI [RFC3987].  Note
   that use of a relative reference is not allowed.  If a name is given,
   implementations MUST consider the link relation type to be equivalent
   to the same name registered within the IANA Registry of Link
   Relations Section 7, and thus the IRI that would be obtained by
   appending the value of the rel attribute to the string
   "http://www.iana.org/assignments/relation/".  The value of "rel"
   describes the meaning of the link, but does not impose any behavioral
   requirements on implementations.

   This document defines five initial values for the Registry of Link
   Relations:

   The value "alternate" signifies that the IRI in the value of the href
   attribute identifies an alternate version of the resource described
   by the containing element.

   The value "related" signifies that the IRI in the value of the href
   attribute identifies a resource related to the resource described by
   the containing element.  For example, the feed for a site that
   discusses the performance of the search engine at
   "http://search.example.com" might contain, as a child of atom:feed:

   <link rel="related" href="http://search.example.com/">

   An identical link might appear as a child of any atom:entry whose



Nottingham & Sayre     Expires September 13, 2005              [Page 24]

Internet-Draft                 Atom Format                    March 2005


   content contains a discussion of that same search engine.

   The value "self" signifies that the IRI in the value of the href
   attribute identifies a resource equivalent to the containing element.

   The value "enclosure" signifies that the IRI in the value of the href
   attribute identifies a related resource which is potentially large in
   size and may require special handling by consuming software.  For
   Link constructs with rel="enclosure", the length attribute SHOULD be
   provided.

   The value "via" signifies that the IRI in the value of the href
   attribute identifies a resource that is the source of the information
   provided in the containing element.

4.2.9.3  The "type" Attribute

   Link elements MAY have a type attribute, whose value MUST conform to
   the syntax of a MIME media type [RFC2045].

   The type attribute's value is an advisory media type; it is a hint
   about the type of the representation that is expected to be returned
   when the value of the href attribute is dereferenced.  Note that the
   type attribute does not override the actual media type returned with
   the representation.

4.2.9.4  The "hreflang" Attribute

   The "hreflang" attribute's content describes the language of the
   resource pointed to by the href attribute.  When used together with
   the rel="alternate", it implies a translated version of the entry.
   Link elements MAY have an hreflang attribute, whose value MUST be a
   language tag [RFC3066].

4.2.9.5  The "title" Attribute

   The "title" attribute conveys human-readable information about the
   link.  The content of the "title" attribute is language sensitive.
   Link elements MAY have a title attribute.

4.2.9.6  The "length" Attribute

   The "length" attribute indicates an advisory length of the linked
   content in octets; it is a hint about the content length of the
   representation returned when the IRI in the href attribute is
   dereferenced.  Note that the length attribute does not override the
   actual content length of the representation as reported by the
   underlying protocol.



Nottingham & Sayre     Expires September 13, 2005              [Page 25]

Internet-Draft                 Atom Format                    March 2005


   Link elements MAY have a length attribute.

4.2.10  The "atom:published" Element

   The "atom:published" element is a Date construct indicating an
   instant in time associated with an event early in the life cycle of
   the entry.  Typically, atom:published will be associated with the
   initial creation or first availability of the resource.


   atomPublished = element atom:published { atomDateConstruct }

4.2.11  The "atom:source-feed" Element

   If an atom:entry is copied from one feed into another feed, then the
   source atom:feed's metadata (all child elements of atom:feed other
   than the atom:entry elements) MAY be preserved within the copied
   entry by adding an atom:source-feed child element, if it is not
   already present in the entry, and including some or all of the source
   feed's metadata elements as the atom:source-feed element's children.
   Such metadata SHOULD be preserved if the source atom:feed contains
   any of the child elements atom:author, atom:contributor,
   atom:copyright, or atom:category and those child elements are not
   present in the source atom:entry.


   atomSourceFeed =
      element atom:source-feed {
         atomCommonAttributes,
         (atomAuthor?
          & atomCategory*
          & atomContributor*
          & atomCopyright?
          & atomGenerator?
          & atomIcon?
          & atomId?
          & atomImage?
          & atomLink+
          & atomSubtitle?
          & atomTitle
          & atomUpdated
          & anyElement* )
      }

4.2.12  The "atom:subtitle" Element

   The "atom:subtitle" element is a Text construct that conveys a
   human-readable description or subtitle for a feed.



Nottingham & Sayre     Expires September 13, 2005              [Page 26]

Internet-Draft                 Atom Format                    March 2005


   atomSubtitle = element atom:subtitle { atomTextConstruct }

4.2.13  The "atom:summary" Element

   The "atom:summary" element is a Text construct that conveys a short
   summary, abstract or excerpt of an entry.


   atomSummary = element atom:summary { atomTextConstruct }

4.2.14  The "atom:title" Element

   The "atom:title" element is a Text construct that conveys a
   human-readable title for an entry or feed.


   atomTitle = element atom:title { atomTextConstruct }

4.2.15  The "atom:updated" Element

   The "atom:updated" element is a Date construct indicating the most
   recent instant in time when an entry or feed was modified in a way
   the publisher considers significant.  Therefore, not all
   modifications necessarily result in a changed atom:updated value.


   atomUpdated = element atom:updated { atomDateConstruct }

   Publishers MAY change the value of this element over time.






















Nottingham & Sayre     Expires September 13, 2005              [Page 27]

Internet-Draft                 Atom Format                    March 2005


5.  Securing Atom Documents

   Because Atom is an XML-based format, existing XML security mechanisms
   can be used to secure its content.

5.1  Digital Signatures

   The root of an Atom document (i.e., atom:feed in an Atom Feed
   Document, atom:entry in an Atom Entry Document) MAY have an Enveloped
   Signature, as described by XML-Signature and Syntax Processing
   [W3C.REC-xmldsig-core-20020212].

   Processors MUST NOT reject an Atom Document containing such a
   signature because they are not capable of verifying it; they MUST
   continue processing and MAY inform the user of their failure to
   validate the signature.

   In other words, the presence of an element with the namespace IRI
   "http://www.w3.org/2000/09/xmldsig#" and a local name of "Signature"
   as a child of the document element must not cause an Atom Processor
   to fail merely because of its presence.

   Other elements in an Atom Document MUST NOT be signed unless their
   definitions explicitly specify such a capability.

5.2  Encryption

   The root of an Atom Document (i.e., atom:feed in an Atom Feed
   Document, atom:entry in an Atom Entry Document) MAY be encrypted,
   using the mechanisms described by XML Encryption Syntax and
   Processing [W3C.REC-xmlenc-core-20021210].




















Nottingham & Sayre     Expires September 13, 2005              [Page 28]

Internet-Draft                 Atom Format                    March 2005


6.  Extending Atom

6.1  Extensions From Non-Atom Vocabularies

   This specification describes Atom's XML markup vocabulary.  Markup
   from other vocabularies ("foreign markup") can be used in an Atom
   document.  Note that the atom:content element is designed to support
   the inclusion of arbitrary foreign markup.

6.2  Extensions To the Atom Vocabulary

   Future versions of this specification may add new elements and
   attributes to the Atom markup vocabulary.  Software written to
   conform to this version of the specification will not be able to
   process such markup correctly and, in fact, will not be able to
   distinguish it from markup error.  For the purposes of this
   discussion, unrecognized markup from the Atom vocabulary will be
   considered "foreign "markup".

   Unlike markup from other vocabularies, foreign markup from the Atom
   vocabulary MAY appear at any location in an Atom document.

6.3  Software Processing of Foreign Markup

   Software processing an Atom Document which encounters foreign markup
   in a location that is legal according to this specification MUST NOT
   stop processing or signal an error.  It may be the case that the
   software is able to process the foreign markup correctly and does so.
   Otherwise, such markup is termed "unknown foreign markup".

   When unknown foreign markup is encountered as a child of atom:entry,
   atom:feed, or a Person Construct, software MAY [[anchor67: Changed to
   MAY from SHOULD.  Republishers might want to copy it.  --R.  Sayre]]
   bypass the markup and any textual content and MUST NOT change its
   behavior as a result of the markup's presence.

   When unknown foreign markup is encountered in a Text Contruct or
   atom:content element, software SHOULD ignore the markup and process
   any text content of foreign elements as though the surrounding markup
   were not present.

6.4  Extension Elements

   Atom allows foreign markup anywhere in an Atom document.  Child
   elements of atom:entry and atom:feed are considered "metadata"
   elements, and are described below.  Child elements of Person
   Constructs are considered to apply to the construct.  The role of
   other foreign markup is undefined by this specification.



Nottingham & Sayre     Expires September 13, 2005              [Page 29]

Internet-Draft                 Atom Format                    March 2005


6.4.1  Simple Extension Elements

   A Simple Extension element MUST NOT have any attributes or child
   elements.  The element MAY contain either character data, or be
   empty.

   The element can be interpreted as a simple property (or name/value
   pair) of the parent element that encloses it.  The pair consisting of
   the namespace-URI of the element and the local name of the element
   can be interpreted as the name of the property.  The character data
   content of the element can be interpreted as the value of the
   property.  If the element is empty, then the property value can be
   interpreted as an empty string.

6.4.2  Structured Extension Elements

   The root element of a Structured Extension element MUST have at least
   one attribute or child element.  It MAY have attributes, it MAY
   contain well-formed XML content (including character data), or it MAY
   be empty.

   The structure of a Structured Extension element, including the order
   of its child elements, could be significant.

   This specification does not provide an interpretation of a Structured
   Extension element.  The syntax of the XML contained in the element,
   and an interpretation of how the element relates to its containing
   element is defined by the specification of the Atom extension.























Nottingham & Sayre     Expires September 13, 2005              [Page 30]

Internet-Draft                 Atom Format                    March 2005


7.  IANA Considerations

   An Atom Document, when serialized as XML 1.0, can be identified with
   the following media type:

   MIME media type name: application
   MIME subtype name: atom+xml
   Mandatory parameters: None.
   Optional parameters:
      "charset": This parameter has identical semantics to the charset
         parameter of the "application/xml" media type as specified in
         [RFC3023].
   Encoding considerations: Identical to those of "application/xml" as
      described in [RFC3023], section 3.2.
   Security considerations: As defined in this specification.
      [[anchor71: update upon publication]]
      In addition, as this media type uses the "+xml" convention, it
      shares the same security considerations as described in [RFC3023],
      section 10.
   Interoperability considerations: There are no known interoperability
      issues.
   Published specification: This specification.  [[anchor72: update upon
      publication]]
   Applications that use this media type: No known applications
      currently use this media type.

   Additional information:

   Magic number(s): As specified for "application/xml" in [RFC3023],
      section 3.2.
   File extension: .atom
   Fragment identifiers: As specified for "application/xml" in
      [RFC3023], section 5.
   Base URI: As specified in [RFC3023], section 6.
   Macintosh File Type code: TEXT
   Person and email address to contact for further information: Mark
      Nottingham <mnot@pobox.com>
   Intended usage: COMMON
   Author/Change controller: This specification's author(s).
      [[anchor73: update upon publication]]

7.1  Registry of Link Relations

   This registry is maintained by IANA and initially contains five
   values: "alternate", "related", "self", "enclosure", and "via".  New
   assignments are subject to IESG Approval, as outlined in [RFC2434].
   Requests should be made by email to IANA, which will then forward the
   request to the IESG requesting approval.  The request should contain



Nottingham & Sayre     Expires September 13, 2005              [Page 31]

Internet-Draft                 Atom Format                    March 2005


   discussion of at least the following five topics:

   o  A value for the "rel" attribute that conforms to the syntax rule
      given in Section 4.2.9.2
   o  Common name for link type.
   o  Description of link type semantics.
   o  Expected display characteristics.
   o  Security considerations.











































Nottingham & Sayre     Expires September 13, 2005              [Page 32]

Internet-Draft                 Atom Format                    March 2005


8.  Security Considerations

8.1  HTML and XHTML Content

   Text Constructs and atom:content allow the delivery of HTML and XHTML
   to receiving software, which may process it.  Many elements in these
   languages are considered 'unsafe' in that they open clients to one or
   more types of attack.  Implementers of software which processes Atom
   should carefully consider their handling of every type of element
   when processing incoming (X)HTML in Atom documents.  See the security
   sections of RFC 2854 and HTML 4.01 for guidance.

   Atom Processors should pay particular attention to the security of
   the IMG, SCRIPT, EMBED, OBJECT, FRAME, FRAMESET, IFRAME, META, and
   LINK elements, but other elements may also have negative security
   properties.

   (X)HTML can either directly contain or indirectly reference
   executable content.

8.2  URIs

   Atom Processors handle URIs.  See Section 7 of [RFC3986].

8.3  IRIs

   Atom Processors handle IRIs.  See Section 8 of [RFC3987].

8.4  Encryption and Signing

   Atom document can be encrypted and signed using
   [W3C.REC-xmlenc-core-20021210] and [W3C.REC-xmldsig-core-20020212],
   respectively, and is subject to the security considerations implied
   by their use.

















Nottingham & Sayre     Expires September 13, 2005              [Page 33]

Internet-Draft                 Atom Format                    March 2005


9.  References

9.1  Normative References

   [Atom-autodiscovery]
              Pilgrim, M., "Atom Feed Autodiscovery",  work-in-progress,
              August 2004.

   [ISO.8601.1988]
              International Organization for Standardization, "Data
              elements and interchange formats - Information interchange
              - Representation of dates and times", ISO Standard 8601,
              June 1988.

   [RFC2045]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
              Extensions (MIME) Part One: Format of Internet Message
              Bodies", RFC 2045, November 1996.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2822]  Resnick, P., "Internet Message Format", RFC 2822, April
              2001.

   [RFC3023]  Murata, M., St. Laurent, S. and D. Kohn, "XML Media
              Types", RFC 3023, January 2001.

   [RFC3066]  Alvestrand, H., "Tags for the Identification of
              Languages", BCP 47, RFC 3066, January 2001.

   [RFC3339]  Klyne, G. and C. Newman, "Date and Time on the Internet:
              Timestamps", RFC 3339, July 2002.

   [RFC3548]  Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", RFC 3548, July 2003.

   [RFC3986]  Berners-Lee, T., Fielding, R. and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, January 2005.

   [RFC3987]  Duerst, M. and M. Suignard, "Internationalized Resource
              Identifiers (IRIs)", RFC 3987, January 2005.

   [W3C.NOTE-datetime-19980827]
              Wolf, M. and C. Wicksteed, "Date and Time Formats", W3C
              NOTE NOTE-datetime-19980827, August 1998.

   [W3C.REC-html401-19991224]



Nottingham & Sayre     Expires September 13, 2005              [Page 34]

Internet-Draft                 Atom Format                    March 2005


              Raggett, D., Hors, A. and I. Jacobs, "HTML 4.01
              Specification", W3C REC REC-html401-19991224, December
              1999.

   [W3C.REC-xhtml-basic-20001219]
              Baker, M., Ishikawa, M., Matsui, S., Stark, P., Wugofski,
              T. and T. Yamakami, "XHTML Basic", W3C
              REC REC-xhtml-basic-20001219, December 2000.

   [W3C.REC-xml-20040204]
              Yergeau, F., Paoli, J., Sperberg-McQueen, C., Bray, T. and
              E. Maler, "Extensible Markup Language (XML) 1.0 (Third
              Edition)", W3C REC REC-xml-20040204, February 2004.

   [W3C.REC-xml-infoset-20040204]
              Cowan, J. and R. Tobin, "XML Information Set (Second
              Edition)", W3C REC REC-xml-infoset-20040204, February
              2004.

   [W3C.REC-xml-names-19990114]
              Hollander, D., Bray, T. and A. Layman, "Namespaces in
              XML", W3C REC REC-xml-names-19990114, January 1999.

   [W3C.REC-xmlbase-20010627]
              Marsh, J., "XML Base", W3C REC REC-xmlbase-20010627, June
              2001.

   [W3C.REC-xmldsig-core-20020212]
              Solo, D., Reagle, J. and D. Eastlake, "XML-Signature
              Syntax and Processing", W3C REC REC-xmldsig-core-20020212,
              February 2002.

   [W3C.REC-xmlenc-core-20021210]
              Reagle, J. and D. Eastlake, "XML Encryption Syntax and
              Processing", W3C REC REC-xmlenc-core-20021210, December
              2002.

   [W3C.REC-xmlschema-2-20041028]
              Malhotra, A. and P. Biron, "XML Schema Part 2: Datatypes
              Second Edition", W3C REC REC-xmlschema-2-20041028, October
              2004.

9.2  Informative References

   [RELAX-NG]
              OASIS Technical Committee: RELAX NG, "RELAX NG
              Specification", December 2001.




Nottingham & Sayre     Expires September 13, 2005              [Page 35]

Internet-Draft                 Atom Format                    March 2005


   [RFC2434]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", BCP 26, RFC 2434,
              October 1998.


Authors' Addresses

   Mark Nottingham (editor)

   Email: mnot@pobox.com
   URI:   http://www.mnot.net/


   Robert Sayre (editor)
   Boswijck Memex Consulting

   Email: rfsayre@boswijck.com
   URI:   http://boswijck.com

































Nottingham & Sayre     Expires September 13, 2005              [Page 36]

Internet-Draft                 Atom Format                    March 2005


Appendix A.  Contributors

   The following people contributed to preliminary drafts of this
   document: Tim Bray, Mark Pilgrim, and Sam Ruby.  Norman Walsh
   provided the Relax NG schema.  The content and concepts within are a
   product of the Atom community and the Atom Publishing Format and
   Protocol Working Group.












































Nottingham & Sayre     Expires September 13, 2005              [Page 37]

Internet-Draft                 Atom Format                    March 2005


Appendix B.  Collected RELAX NG Compact Schema

   This appendix is informative.


   # -*- Relax NG -*-

   namespace local = ""

   namespace
     atom = "http://purl.org/atom/ns#draft-ietf-atompub-format-06"

   namespace s = "http://www.ascc.net/xml/schematron"

   start = atomFeed | atomEntry

   ## Attribute definitions

   atomCommonAttributes =
      attribute xml:base { atomUri }?,
      attribute xml:lang { atomLanguageTag }?

   ## Common Atom Constructs

   atomPlainTextConstruct =
      atomCommonAttributes,
      attribute type { "TEXT" | "HTML" }?,
      text

   atomXHTMLTextConstruct =
      atomCommonAttributes,
      attribute type { "XHTML" },
      (text|anyElement)*

   atomTextConstruct =
      atomPlainTextConstruct | atomXHTMLTextConstruct

   atomPersonConstruct =
      atomCommonAttributes,
         (element atom:name { text }
          & element atom:uri { atomUri }?
          & element atom:email { atomEmailAddress }?)

   atomDateConstruct =
      atomCommonAttributes,
      xsd:dateTime





Nottingham & Sayre     Expires September 13, 2005              [Page 38]

Internet-Draft                 Atom Format                    March 2005


   ## Container elements

   # atom:feed
   # TODO: Test for multiple atom:link/@rel='alternate' with
   # the same @type The following tests are simple to do,
   # but my validator is giving me trouble.
   # TODO: Debug and add them back
   # Test for at least one atom:link/@rel='alternate'
   # Test for atom:author or all atom:entry have atom:author

   # atom:feed

   atomFeed =
      [
         s:rule [
            context = "atom:feed"
   	 s:assert [
               test = "atom:link[@rel='alternate']"
   	    "An atom:feed must have at least one link element
   	    with a rel attribute of 'alternate'."
            ]
         ]
         s:rule [
            context = "atom:feed"
            s:assert [
      test = "atom:author or not(../atom:entry[count(atom:author) = 0])"
      "An atom:feed must have an atom:author unless all of
      its atom:entry children have an atom:author."
            ]
         ]
      ]

      element atom:feed {
         atomCommonAttributes,
         (atomAuthor?
          & atomCategory*
          & atomContributor*
          & atomCopyright?
          & atomGenerator?
          & atomIcon?
          & atomId?
          & atomImage?
          & atomLink+
          & atomSubtitle?
          & atomTitle
          & atomUpdated
          & anyElement* ),
         atomEntry*



Nottingham & Sayre     Expires September 13, 2005              [Page 39]

Internet-Draft                 Atom Format                    March 2005


      }


   # atom:entry
   # TODO: Test for multiple atom:link @rel='alternate'
   # with the same @type
   # TODO: Test for required atom:summary

   atomEntry =
      [
         s:rule [
            context = "atom:entry"
   	 s:assert [
               test = "atom:link[@rel='alternate']"
               "An atom:entry must have at least one link element
                with a rel attribute of 'alternate'."
            ]
         ]
         s:rule [
            context = "atom:entry"
            s:assert [
               test = "atom:author or ../atom:author"
   	    "An atom:entry must have an atom:author
   	    if the parent atom:feed does not."
            ]
         ]

      ]

      element atom:entry {
         atomCommonAttributes,
         (atomAuthor?
          & atomCategory*
          & atomContent?
          & atomContributor*
          & atomCopyright?
          & atomId
          & atomLink*
          & atomPublished?
          & atomSourceFeed?
          & atomSummary?
          & atomTitle
          & atomUpdated &
          anyElement*)
      }






Nottingham & Sayre     Expires September 13, 2005              [Page 40]

Internet-Draft                 Atom Format                    March 2005


   # atom:content

   atomInlineTextContent =
      element atom:content {
         atomCommonAttributes,
         attribute type { "text | "html" | atomMediaType }?,
         (text)*
      }

   atomInlineXHTMLContent =
      element atom:content {
         atomCommonAttributes,
         attribute type { "xhtml" | atomMediaType }?,
         (text|anyElement)*
      }


   atomOutOfLineContent =
      element atom:content {
         atomCommonAttributes,
         attribute type { "text" | "html" | "xhtml" | atomMediaType }?,
         attribute src { atomUri },
         empty
      }

   atomContent = atomInlineTextContent
    | atomInlineXHTMLContent
    | atomOutOfLineContent



   ## Metadata Elements

   # atom:author

   atomAuthor = element atom:author { atomPersonConstruct }

   # atom:category

   atomCategory = element atom:category {
      atomCommonAttributes,
      attribute term { text },
      attribute scheme { atomUri }?,
      attribute label { text }?,
      empty
   }

   # atom:contributor



Nottingham & Sayre     Expires September 13, 2005              [Page 41]

Internet-Draft                 Atom Format                    March 2005


   atomContributor = element atom:contributor { atomPersonConstruct }

   # atom:copyright

   atomCopyright = element atom:copyright { atomTextConstruct }

   # atom:generator

   atomGenerator = element atom:generator {
      atomCommonAttributes,
      attribute uri { atomUri }?,
      attribute version { text }?,
      text
   }

   # atom:icon

   atomIcon = element atom:icon { atomCommonAttributes, (atomUri) }

   # atom:id

   atomId = element atom:id {  }

   # atom:image

   atomImage = element atom:image { atomCommonAttributes, (atomUri) }

   # atom:link

   atomLink = element atom:link {
      atomCommonAttributes,
      attribute href { atomUri },
      attribute rel { atomNCName | atomUri }?,
      attribute type { atomMediaType }?,
      attribute hreflang { atomLanguageTag }?,
      attribute title { text }?,
      attribute length { text }?,
      empty
   }

   # atom:published

   atomPublished = element atom:published { atomDateConstruct }

   # atom:source-feed

   atomSourceFeed =
      element atom:source-feed {



Nottingham & Sayre     Expires September 13, 2005              [Page 42]

Internet-Draft                 Atom Format                    March 2005


         atomCommonAttributes,
         (  atomTitle
         & atomUpdated
         & atomLink+
         & atomIcon
         & atomId?
         & atomImage?
         & atomSubtitle?
         & atomAuthor?
         & atomContributor*
         & atomCopyright?
         & atomCategory*
         & atomGenerator?
         & anyElement* )
      }

   # atom:subtitle

   atomSubtitle = element atom:subtitle { atomTextConstruct }

   # atom:summary

   atomSummary = element atom:summary { atomTextConstruct }

   # atom:title

   atomTitle = element atom:title { atomTextConstruct }

   # atom:updated
   # TODO: Test for a timezone that SHOULD be UTC

   atomUpdated = element atom:updated { atomDateConstruct }


   # Low-level simple types

   # TODO: can anything more specific be said about these types?

   atomNCName = xsd:string { minLength = "1" pattern = "[^:]*" }
   atomMediaType = text
   atomLanguageTag = text
   atomUri = text
   atomEmailAddress = text

   # Extensibility

   anyForeignElement =
      element * - (atom:* | local:*)



Nottingham & Sayre     Expires September 13, 2005              [Page 43]

Internet-Draft                 Atom Format                    March 2005


      {
         (attribute * { text }
          | text
          | anyForeignElement)*
      }

   anyForeignAttribute =
      attribute * - (atom:* | local:* | xml:*) { text }

   anyElement =
      element * - atom:*
      {
         (attribute * { text }
          | text
          | anyElement)*
      }

   # EOF

































Nottingham & Sayre     Expires September 13, 2005              [Page 44]

Internet-Draft                 Atom Format                    March 2005


Appendix C.  Change Log

   [[anchor85: This section should be removed before final
   publication.]]

   -06:  Move Identity Construct into atom:id (only place it's used)
      atom:id values must be unique within a feed.
      restore atom:copyright definition mistakenly dropped during
      alphabetizing.
      Remove atom:head, add atom:source-feed, and "Extension Construct"
      text in an effort to accurately reflect WG consensus on data model
      and extensibility, acknowledging two opinions in favor of
      atom:head.
      Note @hreflang issue.
      Add comment on atom:entry/atom:summary requirements.
      Rework atom:id text.  The dereferencing section didn't talk about
      dereferencing.
      Remove protocol reference.
      Alphabetize where appropriate (PaceOrderSpecAlphabetically).
      Add mI language (PaceExtendingAtom).
      Add atom:icon and atom:image (PaceImageAndIcon).
      Change atom:tagline to atom:subtitle
      Add inline XHTML language (PaceXHTMLNamespaceDiv).
      Change "TEXT" etc, to lowercase
      Change example id IRI to urn:uuid:...
      Add rel="self" (PaceFeedLink).
      Add Feed State text (PaceNoFeedState).
      Move to IRIs (PaceIRI).
      Add rel="via" (PaceLinkRelVia).
      Add rel="enclosure" (PaceEnclosuresAndPix).
      Remove info and host (PaceRemoveInfoAndHost)
      Clarify order of entries (PaceEntryOrder).
      Remove version attribute (PaceRemoveVersionAttr).
      Date format roundup (PaceDatesXSD).
      Remove Service construct and elements.
      fix atom:contributor cardinality typo
      Removed motivation/design principles note; if we haven't come up
      with them by now...
      Put conformance text into notational conventions.
      Removed instances of 'software'; too specific.
      Added refs to HTML and XHTML.
      Updated ref to Infoset.
      Various editorial tweaks.
      Fix RFC 3023 refs in IANA section
      Adjust head/link requirement






Nottingham & Sayre     Expires September 13, 2005              [Page 45]

Internet-Draft                 Atom Format                    March 2005


      fix @version typos
   -05:  Add RNC from N.  Walsh.
      Re-organize element definitions.
      Lift the prohibition on other types of DSig and encryption.
      Remove text on "indiscriminate use" of DSig and XMLEnc.
   -04:  Update URI terms for 2396bis.
      Add Category construct (PaceCategoryRevised).
      Insert paranoid XHTML interpretation guidelines.
      Adjust atom:copyright, per chairs' instruction.
      Add atom:host as child element of atom:entry, per chairs'
      direction (PacePersonConstruct).
      Add link/content co-constraint (PaceContentOrLink).
      Remove atom:origin as a side effect of adding atom:head to
      atom:entry (PaceHeadInEntry).
      Add optional length attribute to atom:link (PaceLinkRelated).
      Add Link registry to Link Construct, IANA Considerations
      placeholder (PaceFieldingLinks).
      Change definition of atom:updated (PaceUpdatedDefinition).
   -03:  Move definition of Link @rel to format spec, restrict
      acceptable values (PaceMoveLinkElement, PaceLinkAttrDefaults).
      Add Service Construct, head/post, head/introspection, entry/edit
      (PaceServiceElement).
      Add Text Construct, entry/content (PaceReformedContent3).
      Add entry/published (PaceDatePublished).
      Adjust definition of Identity Construct per chairs' direction to
      "fix it."
      Add Sayre to editors.
   -02:  Removed entry/modified, entry/issued, entry/created; added
      entry/updated (PaceDateUpdated).
      Changed date construct from W3C date-time to RFC3339
      (PaceDateUpdated).
      Feed links to HTML pages should be reflected back
      (PaceLinkReflection).
      Added Identity construct (PaceIdConstruct).
      Changed feed/id and entry/id to be Identity constructs
      (PaceIdConstruct).
      Changed entry/origin's content so that it's the same as the feed's
      id, rather than its link/@rel="alternate" (PaceIdConstruct).
      Added "Securing Atom Documents" (PaceDigitalSignatures).
   -01:  Constrained omission of "Information Item" to just elements and
      attributes.
      Clarified xml:lang inheritence.
      Removed entry- and feed-specific langauge about xml:lang (covered
      by general discussion of xml:lang)
      Changed xml:lang to reference XML for normative requirements.






Nottingham & Sayre     Expires September 13, 2005              [Page 46]

Internet-Draft                 Atom Format                    March 2005


      Changed "...  MUST be a string" to "...  is unstructued text."
      Remomved langauge about DOCTYPEs, PIs, Comments, Entities.
      Changed atom:url to atom:uri, @url to @uri
      Introduced atom:head
      Introduced "Atom Feed Document" and "Atom Entry Document".
      Removed requirement for all elements and attributes to be
      namespace-qualified; now children of selective elements
      Added extensibility to Person constructs.
      Removed requirement for media types to be registered
      (non-registered media types are legal)
      Added atom:origin (PaceEntryOrigin)
      Added requirement for entry/id to be present and a URI
      (PaceEntryIdRequired).
      Clarified approach to Comments, PIs and well-formedness, as per
      RFC3470.
      Referenced escaping algorithm in XML.
      Assorted editorial nits and cleanup, refactoring
   -00:  Initial IETF Internet-Draft submission.
      Added optional version attribute to entry
      (PaceEntryElementNeedsVersionAttribute).
      Added hreflang attribute (PaceHrefLang).
      Clarified inheritence of copyright element (PaceItemCopyright).
      Added xml:lang to entries (PaceItemLang).
      Tweaked Infoset-related language (PaceNoInfoSet).
      Clarified lack of structure in version attribute
      (PaceVersionAsText).
      Changed approach to XML Base (PaceXmlBaseEverywhere).
      Added XML Base processing to atom:id (PaceXmlBaseId).
      Various editorial cleanup and adjustments for IETF publication.






















Nottingham & Sayre     Expires September 13, 2005              [Page 47]

Internet-Draft                 Atom Format                    March 2005


Intellectual Property Statement

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.


Disclaimer of Validity

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Copyright Statement

   Copyright (C) The Internet Society (2005).  This document is subject
   to the rights, licenses and restrictions contained in BCP 78, and
   except as set forth therein, the authors retain all their rights.


Acknowledgment

   Funding for the RFC Editor function is currently provided by the
   Internet Society.




Nottingham & Sayre     Expires September 13, 2005              [Page 48]


