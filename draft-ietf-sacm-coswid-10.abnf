concise-swid-tag = {
   global-attributes,
tag-id => text,
tag-version => integer,
software-name => text,
entity => entity-entry / [ 2* entity-entry ],
tag-id = 0
software-name = 1
entity = 2
evidence = 3
link = 4
software-meta = 5
payload = 6
corpus = 8
patch = 9
media = 10
supplemental = 11
tag-version = 12
software-version = 13
version-scheme = 14

multipartnumeric = 1
multipartnumeric-suffix = 2
alphanumeric = 3
decimal = 4
semver = 16384

   The following describes each member of the concise-swid-tag root map.
   o  global-attributes: A list of items including an optional language
      definition to support the processing of text-string values and an
      unbounded set of any-attribute items.  Described in Section 2.4.

   o  tag-id (index 0): A textual identifier uniquely referencing a
      (composite) software component.  The tag identifier MUST be
      globally unique.  There are no strict guidelines on how this
      identifier is structured, but examples include a 16 byte GUID
      (e.g.  class 4 UUID) [RFC4122], or a text string appended to a DNS
      domain name to ensure uniqueness across organizations.

   o  tag-version (index 12): An integer value that indicate the
      specific release revision of the tag.  Typically, the initial
      value of this field is set to 0, and the value is monotonically
      increased for subsequent tags produced for the same software
      component release.  This value allows a CoSWID tag producer to
      correct an incorrect tag previously released, without indicating a
      change to the underlying software component the tag represents.
      For example, the tag version would be changed to add new metadata,
      to correct a broken link, to add a missing payload entry, etc.
      When producing a revised tag, the new tag-version value MUST be
      greater than the old tag-version value.

   o  corpus (index 8): A boolean value that indicates if the tag
      identifies and describes an installable software component in its
      pre-installation state.  Installable software includes a
      installation package or installer for a software component, a
      software update, or a patch.  If the CoSWID tag represents
      installable software, the corpus item MUST be set to "true".  If
      not provided the default value MUST be considered "false".

   o  patch (index 9): A boolean value that indicates if the tag
      identifies and describes an installed patch which has made
      incremental changes to a software component installed on a
      computing device.  Typically, an installed patch has made a set of
      file modifications to pre-installed software, and does not alter
      the version number or the descriptive metadata of an installed
      software component.  If a CoSWID tag is for a patch, the patch
      item MUST be set to "true".  If not provided the default value
      MUST be considered "false".

   o  supplemental (index 11): A boolean value that indicates if the tag
      is providing additional information to be associated with another
      referenced SWID or CoSWID tag.  Tags using this item help to
      ensure that primary and patch tags provided by a software provider
      are not modified by software management tools, while allowing
      these tools to provide their own software metadata for a software
      component.  If a CoSWID tag is a supplemental tag, the
      supplemental item MUST be set to "true".  If not provided the
      default value MUST be considered "false".

   o  software-name (index 1): This textual item provides the software
      component's name.  This name is likely the same name that would
      appear in a package management tool.

   o  software-version (index 13): A textual value representing the
      specific release or development version of the software component.

   o  version-scheme (index 14): An 8-bit integer or textual value
      representing the versioning scheme used for the software-version
      item.  If an integer value is used it MUST be a value from the
      SWID/CoSWID Version Scheme Value Registry (see section
      Section 5.2.1 or a value in the private use range: 32768-65535.

      An initial set of pre-defined version-scheme index and text values
      are defined in Section 4.1 that are based on the version-scheme
      values defined in [SWID].  These pre-defined version-scheme values
      are registered with IANA in the "SWID/CoSWID Version Scheme Value"
      registry Section 5.2.1, and MAY be expanded in the future.

      The value of an ownership item MUST be one of the following:

      *  The index (preferred) or string value of a role from the IANA
         in the "SWID/CoSWID Version Scheme Value" registry.

      *  An index value in the range 32768 through 65535, to indicate
         that a private use index value is used.

      *  A string value prefixed with "x_", to indicate that a private
         use string value is used.

   o  media (index 10): This text value is a hint to the tag consumer to
      understand what this tag applies to.  This item represents a query
      as defined by the W3C Media Queries Recommendation (see
      [W3C.REC-css3-mediaqueries-20120619]).

   o  software-meta (index 5): An open-ended map of key/value data
      pairs.  A number of predefined keys can be used within this item
      providing for common usage and semantics across the industry.  Use
      of this map allows any additional attribute to be included in the
      tag.  It is expected that industry groups will use a common set of
      attribute names to allow for interoperability within their
      communities.  Described in Section 2.7.

   o  entity (index 2): Provides information about one or more
      organizations responsible for producing the CoSWID tag, and
      producing or releasing the software component referenced by this
      CoSWID tag.  Described in Section 2.5.

   o  link (index 4): Provides a means to establish relationship arcs
      between the tag and another items.  A given link can be used to
      establish the relationship between tags or to reference another
      resource that is related to the CoSWID tag, e.g.  vulnerability
      database association, ROLIE feed [RFC8322], MUD resource
      [RFC8520], software download location, etc).  This is modeled
      after the HTML "link" element.  Described in Section 2.6.

   o  payload (index 6): This item represents the software artifacts
      that compose the target software.  For example, the files included
      with an installer for a corpus tag or installed on an endpoint
      when the software component is installed for a primary or patch
      tag.  The artifacts listed in a payload may be a superset of the
      software artifacts that are actually installed.  Based on user
      selections at install time, an installation might not include
      every artifact that could be created or executed on the endpoint
      when the software component is installed or run.  Described in
      Section 2.8.3.

   o  evidence-entry (index 3): This item records the results of a
      software discovery process used to identify untagged software on
      an endpoint.  This item provides a means to represent indicators
      for why software is believed to be installed on the endpoint.  In
      such a case, a CoSWID tag is created when the endpoint is scanned
      by the tool performing the scan.  Described in Section 2.8.4.

   o  $$coswid-extension: This CDDL socket is used to add new
      information structures to the concise-swid-tag root map.  See
      Section 2.1.

global-attributes = (
     ? lang,
     * any-attribute,
any-attribute = (
label => text / int / [ 2* text ] / [ 2* int ]
label = text / int

entity-entry = {
     global-attributes,
entity-name => text,
role => $role / [ 2* $role ],
entity-name = 31
reg-id = 32
role = 33
thumbprint = 34

tag-creator=1
software-creator=2
aggregator=3
distributor=4
licensor=5

link-entry = {
     global-attributes,
     ? artifact => text,
href => any-uri,
rel => $rel,
media = 10
artifact = 37
href = 38
ownership = 39
rel = 40
media-type = 41
use = 42

shared=1
private=2
abandon=3

ancestor=1
component=2
feature=3
installationmedia=4
packageinstaller=5
parent=6
patches=7
requires=8
see-also=9
supersedes=10
supplemental=11

optional=1
required=2
recommended=3

entId='b0c55172-38e9-4e36-be86-92206ad8eddb'] would match
software-meta-entry = {
     global-attributes,
     ? activation-status => text,
     ? channel-type => text,
     ? colloquial-version => text,
     ? description => text,
     ? edition => text,
     ? entitlement-data-required => bool,
     ? entitlement-key => text,
     ? generator => text,
     ? persistent-id => text,
     ? product => text,
     ? product-family => text,
     ? revision => text,
     ? summary => text,
     ? unspsc-code => text,
     ? unspsc-version => text,
     * $$meta-extension,
activation-status = 43
channel-type = 44
colloquial-version = 45
description = 46
edition = 47
entitlement-data-required = 48
entitlement-key = 49
generator = 50
persistent-id = 51
product = 52
product-family = 53
revision = 54
summary = 55
unspsc-code = 56
unspsc-version = 57

hash-entry = [ hash-alg-id: int, hash-value: bytes ]

resource-collection = (
     ? directory => directory-entry,
     ? file => file-entry,
     ? process => process-entry,
     ? resource => resource-entry,
filesystem-item = (
     global-attributes,
     ? key => bool,
     ? location => text,
fs-name => text,
path-elements-entry = [ [ * file-entry ],
                           [ * directory-entry ],
                         ]

file-entry = {
     filesystem-item,
     ? size => integer,
     ? file-version => text,
     ? hash => hash-entry,
     * $$file-extension
directory-entry = {
     filesystem-item,
path-elements => path-elements-entry,
process-entry = {
     global-attributes,
process-name => text,
resource-entry = {
     global-attributes,
type => text,
directory = 16
file = 17
process = 18
resource = 19
size = 20
file-version = 21
key = 22
location = 23
fs-name = 24
root = 25
path-elements = 26
process-name = 27
pid = 28
type = 29

payload-entry = {
     global-attributes,
     resource-collection,
     * $$payload-extension
evidence-entry = {
     global-attributes,
     resource-collection,
     ? date => time,
     ? device-id => text,
     * $$evidence-extension
date = 35
device-id = 36

concise-swid-tag = {
   global-attributes,
tag-id => text,
tag-version => integer,
software-name => text,
entity => entity-entry / [ 2* entity-entry ],
any-uri = text
label = text / int

any-attribute = (
label => text / int / [ 2* text ] / [ 2* int ]
global-attributes = (
   ? lang => text,
   * any-attribute,
hash-entry = [ hash-alg-id: int,
                hash-value: bytes,
              ]

entity-entry = {
   global-attributes,
entity-name => text,
role => $role / [ 2* $role ],
link-entry = {
   global-attributes,
   ? artifact => text,
href => any-uri,
rel => $rel,
software-meta-entry = {
   global-attributes,
   ? activation-status => text,
   ? channel-type => text,
   ? colloquial-version => text,
   ? description => text,
   ? edition => text,
   ? entitlement-data-required => bool,
   ? entitlement-key => text,
   ? generator => text,
   ? persistent-id => text,
   ? product => text,
   ? product-family => text,
   ? revision => text,
   ? summary => text,
   ? unspsc-code => text,
   ? unspsc-version => text,
   * $$meta-extension,
resource-collection = (
   ? directory => directory-entry,
   ? file => file-entry,
   ? process => process-entry,
   ? resource => resource-entry,
   * $$resource-collection-extension
file-entry = {
   filesystem-item,
   ? size => integer,
   ? file-version => text,
   ? hash => hash-entry,
   * $$file-extension
path-elements-entry = [ [ * file-entry ],
                         [ * directory-entry ],
                       ]

directory-entry = {
   filesystem-item,
path-elements => path-elements-entry,
process-entry = {
   global-attributes,
process-name => text,
resource-entry = {
   global-attributes,
type => text,
filesystem-item = (
   global-attributes,
   ? key => bool,
   ? location => text,
fs-name => text,
payload-entry = {
   global-attributes,
   resource-collection,
   * $$payload-extension
evidence-entry = {
   global-attributes,
   resource-collection,
   ? date => time,
   ? device-id => text,
   * $$evidence-extension
tag-id = 0
software-name = 1
entity = 2
evidence = 3
link = 4
software-meta = 5
payload = 6
hash = 7
corpus = 8
patch = 9
media = 10
supplemental = 11
tag-version = 12
software-version = 13
version-scheme = 14
lang = 15
directory = 16
file = 17
process = 18
resource = 19
size = 20
file-version = 21
key = 22
location = 23
fs-name = 24
root = 25
path-elements = 26
process-name = 27
pid = 28
type = 29
entity-name = 31
reg-id = 32
role = 33
thumbprint = 34
date = 35
device-id = 36
artifact = 37
href = 38
ownership = 39
rel = 40
media-type = 41
use = 42
activation-status = 43
channel-type = 44
colloquial-version = 45
description = 46
edition = 47
entitlement-data-required = 48
entitlement-key = 49
generator = 50
persistent-id = 51
product = 52
product-family = 53
revision = 54
summary = 55
unspsc-code = 56
unspsc-version = 57

multipartnumeric = 1
multipartnumeric-suffix = 2
alphanumeric = 3
decimal = 4
semver = 16384

tag-creator=1
software-creator=2
aggregator=3
distributor=4
licensor=5

shared=1
private=2
abandon=3
ancestor=1
component=2
feature=3
installationmedia=4
packageinstaller=5
parent=6
patches=7
requires=8
see-also=9
supersedes=10
supplemental=11

optional=1
required=2
recommended=3

signed-coswid = #6.18(COSE-Sign1-coswid)

cose-label = int / tstr
cose-values = any

protected-signed-coswid-header = {
       1 => int,                      ; algorithm identifier
       3 => "application/swid+cbor",
       * cose-label => cose-values,
unprotected-signed-coswid-header = {
       4 => bstr,                     ; key identifier
       * cose-label => cose-values,
COSE-Sign1-coswid = [
       protected: bstr .cbor protected-signed-coswid-header,
       unprotected: unprotected-signed-coswid-header,
       payload: bstr .cbor concise-swid-tag,
       signature: bstr,
