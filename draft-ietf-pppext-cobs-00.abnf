Unused       = 0x00,   /* Unused (framing character placeholder) */
DiffZero     = 0x01,   /* Range 0x01 - 0xCE:                     */
DiffZeroMax  = 0xCF,   /* n-1 explicit characters plus a zero    */
Diff         = 0xD0,   /* 207 explicit characters, no added zero */
Resume       = 0xD1,   /* Unused (resume preempted packet)       */
Reserved     = 0xD2,   /* Unused (reserved for future use)       */
RunZero      = 0xD3,   /* Range 0xD3 - 0xDF:                     */
RunZeroMax   = 0xDF,   /* 3-15 zeroes                            */
Diff2Zero    = 0xE0,   /* Range 0xE0 - 0xFE:                     */
Diff2ZeroMax = 0xFE,   /* 0-30 explicit characters plus 2 zeroes */
Error        = 0xFF    /* Unused (PPP LCP renegotiation)         */
ptr = StuffData(head, hlength, ptr, &stuffstate);

ptr = StuffData(data, dlength, ptr, &stuffstate);

obuf = buffer;
tx = cb->tx + cb->txpri;
count = tx->count;
count = 0;
tx = cb->tx;
mb = tx->bufs;
tx = cb->tx + cb->txpri;
count = tx->count;
dp = mtod(mb,u_char *);
mb2 = mb;
len = mb->m_len;
mb2 = mb2->m_next;
dp = mtod(mb2,u_char *);
len = mb2->m_len;
chr = 0xD0 + count;
count = 0;
dp = mtod(mb,u_char *);
len = mb->m_len;
mb2 = mb;
count = 0;
mb2 = mb2->m_next;
dp = mtod(mb2,u_char *);
len = mb2->m_len;
chr = 0xD0;
chr = count+1;
mb2 = mb2->m_next;
dp = mtod(mb2,u_char *);
len = mb2->m_len;
chr = count + 0xE0;
mb = m_free(mb);
chr = *mtod(mb,u_char *);
chr = 0;
count = tx->zskip;
len = mb->m_len;
count = 0;
mb = m_free(mb);
mb = m_free(mb);
count = 0;
fcs = 0xFFFF;
dp = mtod(mb2,u_char *);
fcs = (fcs >> 8) ^ fcstab[(fcs ^ *dp++) & 0xff];
mb2 = dtom(dp);
mb2 = mb2->m_next;
dp = mtod(mb2,u_char *);
fcs = ~fcs;
tx = cb->tx + pri;
mlen = mb->m_len;
dp = mtod(mb,u_char *) + mlen;
fcs = cb->rxfcs;
count = cb->rxcount;
rxlchar = chr = cb->rxlchar;
chr = *buffer++;
rxlchar = chr;
mb = cb->mhead = NULL;
mb2 = m_get(M_DONTWAIT,MT_PPPRX);
mb = mb2;
dp = mtod(mb,u_char *);
mlen = 0;
fcs = (fcs >> 8) ^ fcstab[fcs & 0xff];
count = cb->rxcount = cb->rxlcount = cb->zadd = 0;
fcs = cb->rxfcs = 0xFFFF;
mb = cb->mhead = cb->savedpkt;
mb = mb->m_next;
mlen = mb->m_len;
dp = mtod(mb,u_char *) + mlen;
dp = NULL;
mlen = 0;
fcs = cb->savedfcs;
rxlchar = chr;
rxlchar = chr;
chr = 0x7E;
mb2 = m_get(M_DONTWAIT,MT_PPPRX);
mb = mb2;
dp = mtod(mb,u_char *);
mlen = 0;
fcs = (fcs >> 8) ^ fcstab[(fcs ^ chr) & 0xff];
count = 0;
count = chr - 0xE0;
count = chr-1;
fcs = (fcs >> 8) ^ fcstab[fcs & 0xff];
