statusInformation = -- success or errorIndication
statusInformation =            -- success or errorIndication
           generateRequestMsg(
           IN   messageProcessingModel  -- typically, SNMP version
           IN   globalData              -- message header, admin data
           IN   maxMessageSize          -- of the sending SNMP entity
           IN   securityModel           -- for the outgoing message
           IN   securityEngineID        -- authoritative SNMP entity
           IN   securityName            -- on behalf of this principal
           IN   securityLevel           -- Level of Security requested
           IN   scopedPDU               -- message (plaintext) payload
           OUT  securityParameters      -- filled in by Security Module
           OUT  wholeMsg                -- complete generated message
           OUT  wholeMsgLength          -- length of generated message
                )

statusInformation =            -- success or errorIndication
           generateResponseMsg(
           IN   messageProcessingModel  -- typically, SNMP version
           IN   globalData              -- message header, admin data
           IN   maxMessageSize          -- of the sending SNMP entity
           IN   securityModel           -- for the outgoing message
           IN   securityEngineID        -- authoritative SNMP entity
           IN   securityName            -- on behalf of this principal
           IN   securityLevel           -- Level of Security requested
           IN   scopedPDU               -- message (plaintext) payload
           IN   securityStateReference  -- reference to security state
                                        -- information from original
                                        -- request
           OUT  securityParameters      -- filled in by Security Module
           OUT  wholeMsg                -- complete generated message
           OUT  wholeMsgLength          -- length of generated message
                )

result =                         -- SUCCESS or errorIndication
statusInformation =  -- errorIndication or success
                            -- error counter OID/value if error
statusInformation =
tmSessionID = a unique local identifier
tmTransportDomain = TCP/IPv4
tmTransportAddress = x.x.x.x:y
tmSecurityLevel = "authPriv"
tmPrivProtocol = from the SSH session parameters
tmAuthMechanism = "password"
tmAuthProtocol = "password"
tmSecurityLevel = appropriate choice from SnmpSecurityLevel
tmAuthzData = "[todo] authorization data obtained during the
tmAuthMechanism = "publickey"
tmAuthProtocol = public key algorithm name
tmSecurityLevel = appropriate choice from SnmpSecurityLevel
tmAuthzData = "[todo] authorization data obtained during the
tmAuthMechanism = "hostbased"
tmAuthProtocol = public key algorithm for host key
tmSecurityLevel = appropriate choice from SnmpSecurityLevel
tmAuthzData = "[todo] authorization data obtained during the
tmAuthMechanism = ""
tmAuthProtocol = RADIUS
tmRadiusServer = x.x.x.x:y
tmSecurityLevel = appropriate choice from SnmpSecurityLevel
tmAuthzData = "[todo] authorization data obtained during the
messageProcessingModel = SNMPv3
securityModel = SSHSM
sessionID = tmSessionID


statusInformation =
statusInformation =
statusInformation =            -- success or errorIndication
           generateRequestMsg(
           IN   messageProcessingModel  -- typically, SNMP version
           IN   globalData              -- message header, admin data
           IN   maxMessageSize          -- of the sending SNMP entity
           IN   securityModel           -- for the outgoing message
           IN   securityEngineID        -- authoritative SNMP entity
           IN   securityName            -- on behalf of this principal
           IN   securityLevel           -- Level of Security requested
           IN   scopedPDU               -- message (plaintext) payload
           OUT  securityParameters      -- filled in by Security Module
           OUT  wholeMsg                -- complete generated message
           OUT  wholeMsgLength          -- length of generated message
           OUT  tmStateReference    -- reference to session info
                )


statusInformation = -- success or errorIndication
           generateResponseMsg(
           IN   messageProcessingModel  -- typically, SNMP version
           IN   globalData              -- message header, admin data
           IN   maxMessageSize          -- of the sending SNMP entity
           IN   securityModel           -- for the outgoing message
           IN   securityEngineID        -- authoritative SNMP entity
           IN   securityName            -- on behalf of this principal
           IN   securityLevel           -- Level of Security requested
           IN   scopedPDU               -- message (plaintext) payload
           IN   securityStateReference  -- reference to security state
                                        -- information from original
                                        -- request
           OUT  securityParameters      -- filled in by Security Module
           OUT  wholeMsg                -- complete generated message
           OUT  wholeMsgLength          -- length of generated message
           OUT  tmStateReference    -- reference to session info
                )
      1) verify securityModel = sshsmSecurityModel
      2) If there is a securityStateReference, extract the
      tmStateReference information from the cachedSecurityData from the
      Request message.  At this point, the cachedSecurityData can now be
      discarded. [todo] clarify which data can be discarded.
      3) If there is no securityStateReference, then lookup the session
      info indexed by {securityEngineID, securityName, securityLevel},
      and set tmStateReference.
      4) If there is no session info for this index, then create an
      incomplete tmStateReference indexed by the provided
      {securityEngineID, securityName, securityLevel}.  Store the
      securityModel and maxMessageSize information.  When the TMSP gets
      the incomplete tmStateReference, it will recognize that it needs
      to establish a new session, and fill in the rest of the
      information for subsequent use.
      5) fill in securityParameters with a NULL octet string.
         [todo] we don't need to send securityEngineID, unless it is
         needed for a discovery mechanism..
         [todo] we don't need to send Boots and Time values
         [todo] we don't need to send a username, since we use the one
         from SSH authentication.
         [todo] we don't need to call authenticateOutgoingMsg()
      6) The wholeMsg is now serialized and then represents the
      unauthenticated message being prepared.
      7) The completed message (wholeMsg) with its length
      (wholeMsgLength) and securityParameters (a NULL octet string) and
      tmStateReference is returned to the calling module with the
      statusInformation set to success.

statusInformation =  -- errorIndication or success
                            -- error counter OID/value if error
