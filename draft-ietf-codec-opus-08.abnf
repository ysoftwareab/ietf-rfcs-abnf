i=0                                      i=0

fs = ft - min(val/(rng/ft)+1, ft) .

val = val - (rng/ft)*(ft-fh[k]) .

rng = (rng/ft)*(fh[k]-fl[k]) .

rng = rng - (rng/ft)*(ft-fh[k]).

val = ((val<<8) + (255-sym)) & 0x7FFFFFFF .

ft = (1<<logp), followed by ec_dec_update() with the 3-tuple
ft = (1<<ftb), using the returned value fs to search the table for
t = ec_decode((ft-1>>ftb-8)+1), the decoder state is updated using
i=-d


i=1


log_gain = min(max(2*gain_index - 16,
                           previous_log_gain + gain_index - 4), 63)

i = ilog(w2_Q18[k])
f = (w2_Q18[k]>>(i-8)) & 127
y = ((i&1) ? 32768 : 46214) >> ((32-i)>>1)
min_center_Q15 = (NDeltaMin[i]>>1) + \  NDeltaMin[k]
                                             /_
k=0
                                                    d_LPC
                                                     __
max_center_Q15 = 32768 - (NDeltaMin[i]>>1) - \  NDeltaMin[k]
                                                     /_
k=i+1
center_freq_Q15 = clamp(min_center_Q15[i],
                               (NLSF_Q15[i-1] + NLSF_Q15[i] + 1)>>1,
                               max_center_Q15[i])

        NLSF_Q15[i-1] = center_freq_Q15 - (NDeltaMin_Q15[i]>>1)

          NLSF_Q15[i] = NLSF_Q15[i-1] + NDeltaMin_Q15[i] .

k=1

k=0

k=0

maxabs_Q12 = min((maxabs_Q17 + 16) >> 5, 163838) .

lag = lag_high*lag_scale + lag_low + lag_min

lag = lag_prev + (delta_lag_index - 9)

j=0

ft=sum(f(i)).

k=1                          k=-d


k=1                          k=-d


g_ana = 0.94 - 0.02*C, and

g_syn = 0.94 + 0.02*C,


b_ana = F_ana * [0.25, 0.5, 0.25], and

b_syn = F_syn * [0.25, 0.5, 0.25].


c_tilt = 0.4, and as
c_tilt = 0.04 + 0.06 * C


predGain = ( | | 1 - (r_k)  )    ,
k=1


LSF_q = argmin { (LSF - c)' * W * (LSF - c) + mu * rate },
                 c in C


M = \  Ms,
                                     /_
s=1


T = | | Ms
s=1


RD = u * (b - cb_i)' * W_ltp * (b - cb_i) + r_i,


y0 = round_towards_zero( (K-1) * R / sum(abs(R)))

J = -R * y / ||y||

samples=NULL;
nsamples=csamples=0;
nread=fread(buf,2*_nchannels,1024/(2*_nchannels),_fin);
samples=(float *)opus_realloc(samples,
          _nchannels*csamples*sizeof(*samples));
s=buf[2*(xi*_nchannels+ci)+1]<<8|buf[2*(xi*_nchannels+ci)];
s=((s&0xFFFF)^0x8000)-0x8000;
window=(float *)opus_malloc((3+_nchannels)*_window_sz
             *sizeof(*window));
c=window+_window_sz;
s=c+_window_sz;
x=s+_window_sz;
e2=0;
p=0;
ti=0;
re=im=0;
im-=s[ti]*x[ci*_window_sz+xk];
a=*(const float *)_a;
b=*(const float *)_b;
nchannels=1;
fin1=fopen(_argv[nchannels],"rb");
fin2=fopen(_argv[nchannels+1],"rb");
xlength=read_pcm16(&x,fin1,nchannels);
ylength=read_pcm16(&y,fin2,nchannels);
nframes=(xlength-TEST_WIN_SIZE+TEST_WIN_STEP)/TEST_WIN_STEP;
xb=(float *)opus_malloc(nframes*NBANDS*sizeof(*xb));
eb=(float *)opus_malloc(nframes*NBANDS*sizeof(*eb));
nmr=(float *)opus_malloc(nframes*NBANDS*sizeof(*nmr));
err=x[xi]-y[xi];
nmr_sum=0;
thresh=xb[(9*nframes*NBANDS+5)/10];
mismatch=0;
weight=0;
err=-100;
err=10*OPUS_LOG10F(mismatch/weight);
