dfs_number = 0
dfs_number = 0
max_block_id = 0
explore_list = { computing_rtr }
next_rtr = remove_head(explore_list)
ear_list = empty
cur_node = intf.remote_node
cur_intf = intf
not_done = true

cur_intf = cur_node.lowpoint_parent_intf
cur_node = cur_node.lowpoint_parent
cur_intf = cur_node.dfs_parent_intf
cur_node = cur_node.dfs_parent
not_done = false

localroot = x
localroot = cur_node.localroot
y = remove_end_item_from_list(ear_list)
x = pop(Stack)
y = remove_start_item_from_list(working_list)
next_topo_order = 1
y = remove_start_item_from_list(topo_order_list)
min_node = remove_lowest(spf_heap)
path_metric = min_node.spf_metric + intf.metric
max_block_id = 0
D_lower = D.order_proxy.LOWER
D_higher = D.order_proxy.HIGHER
D_topo_order = D.order_proxy.topo_order
X=A.local_root, and if A is the local root, let that be strictly
A=X.order_proxy
B=Y.order_proxy
A=Y.order_proxy
B=X.order_proxy

topo = Topology()
node_id_set= set()
cols_list = []
line = line.rstrip('\r\n')
cols=line.split(',')
nodea_node_id = int(cols[0])
nodeb_node_id = int(cols[1])
node = Node()
nodea_node_id = int(cols[0])
nodeb_node_id = int(cols[1])
metric = int(cols[2])
reverse_metric = int(cols[2])
reverse_metric=int(cols[3])
nodea = topo.node_dict[nodea_node_id]
nodeb = topo.node_dict[nodeb_node_id]
nodea_intf = Interface()
nodeb_intf = Interface()
explore_list = [computing_rtr]
next_rtr = explore_list.pop()
global_dfs_number = None

global_dfs_number = 0
max_block_id = None

max_block_id = 0
ear_list = []
cur_intf = intf
not_done = True


cur_intf = cur_intf.remote_node.lowpoint_parent_intf
cur_intf = cur_intf.remote_node.dfs_parent_intf
not_done = False


localroot = x
localroot = cur_intf.remote_node.localroot

y = ear_list.pop()
gadag_root = topo.gadag_root
stack = []
x = stack.pop()
bundle_list = []
bundle = Bundle()
working_list = []
topo_order_list = []
y = working_list.pop(0)
next_topo_order = 1
y = topo_order_list.pop(0)
spf_heap = []
min_node = heapq.heappop(spf_heap)[2]
path_metric = min_node.spf_metric + intf.metric
spf_heap = []
min_node = heapq.heappop(spf_heap)[2]
path_metric = min_node.spf_metric + intf.metric
P = topo.named_proxy_dict[prefix]
P = topo.named_proxy_dict[prefix]
P = topo.named_proxy_dict[prefix]
D_lower = D.order_proxy.LOWER
D_higher = D.order_proxy.HIGHER
D_topo_order = D.order_proxy.topo_order
alt = Alternate()
cand_alt_list = [None]
min_metric = 2147483647
cand_alt_list = [intf]
min_metric = intf.metric
gadag_edge_list = []
local_node =  "%04d" % (intf.local_node.node_id)
remote_node = "%04d" % (intf.remote_node.node_id)
intf_data = "%03d" % (intf.link_data)
edge_string=(local_node+','+remote_node+','+
                              intf_data+'\n')
filename = file_prefix + '_gadag.csv'
edge_list = []
node_next_hops_dict = node.blue_next_hops_dict
node_next_hops_dict = node.red_next_hops_dict
gadag_root =  "%04d" % (topo.gadag_root.node_id)
dest_node =  "%04d" % (dest_node_id)
local_node =  "%04d" % (intf.local_node.node_id)
remote_node = "%04d" % (intf.remote_node.node_id)
intf_data = "%03d" % (intf.link_data)
edge_string=(gadag_root+','+dest_node+','+local_node+
                                ','+remote_node+','+intf_data+'\n')
filename = file_prefix + '_' + color + '_to_all.csv'
edge_list = []
alt_list = x.alt_dict[dest_node_id]
gadag_root =  "%04d" % (topo.gadag_root.node_id)
dest_node =  "%04d" % (dest_node_id)
prim_local_node =  \
                         "%04d" % (alt.failed_intf.local_node.node_id)
prim_remote_node = \
                         "%04d" % (alt.failed_intf.remote_node.node_id)
prim_intf_data = \
                         "%03d" % (alt.failed_intf.link_data)
alt_local_node = "None"
alt_remote_node = "None"
alt_intf_data = "None"
alt_local_node = \
                             "%04d" % (alt_intf.local_node.node_id)
alt_remote_node = \
                             "%04d" % (alt_intf.remote_node.node_id)
alt_intf_data = \
                             "%03d" % (alt_intf.link_data)
edge_string = (gadag_root+','+dest_node+','+
                         prim_local_node+','+prim_remote_node+','+
                         prim_intf_data+','+alt_local_node+','+
                         alt_remote_node+','+alt_intf_data+','+
                         alt.fec +'\n')
filename = file_prefix + '_alts_to_all.csv'
node = topo.node_dict[node_id]
node = topo.node_dict[node_id]
gadag_root_list = []
data = [[01,02,10],[02,03,10],[03,04,11],[04,05,10,20],[05,06,10],
             [06,07,10],[06,07,10],[06,07,15],[07,01,10],[07,51,10],
             [51,52,10],[52,53,10],[53,03,10],[01,55,10],[55,06,10],
             [04,12,10],[12,13,10],[13,14,10],[14,15,10],[15,16,10],
             [16,17,10],[17,04,10],[05,76,10],[76,77,10],[77,78,10],
             [78,79,10],[79,77,10]]
line = (str(item[0])+','+str(item[1])+','+
                         str(item[2])+','+str(item[3])+'\n')
line = (str(item[0])+','+str(item[1])+','+
                         str(item[2])+'\n')
topo = Create_Topology_From_File('example_topo_input_file.csv')
res_file_base = 'example_topo'
found_in_gadag = false
min_node = remove_lowest(spf_heap)
found_in_gadag = true
path_metric = min_node.spf_metric + intf.metric
end_ear = Mod_SPF(spf_root, block_root)
y = end_ear.spf_prev_hop
y = y.local_node.spf_prev_intf
direction = A_TO_B
direction = B_TO_A
direction = B_TO_A
block_has_ear = false
           for all interfaces of x
              if ( (intf.remote_node.block_id == block_id) &&
                    intf.remote_node.IN_GADAG )
block_has_ear = true
cand_intf = remove_lowest(ordered_intfs_tree)
ear_end = SPF_for_Ear(cand_intf.local_node,
                     cand_intf.remote_node,
                     cand_intf.remote_node.localroot,
                     SPF method)
y = ear_end.spf_prev_hop
y = y.local_node.spf_prev_intf


                   Figure 37: SPF-based GADAG algorithm

end_ear = SPF_for_Ear(x,y,block_root,hybrid)
cur = end_ear
intf = cur.spf_prev_hop
prev = intf.local_node
cur = prev
x = pop(Stack)
y = intf.remote_node
