ead = 1* (
     ead_label : int,
     ead_value : any,
PRK = Extract( salt, IKM )

G_XY = X25519( Y, G_X ) = X25519( X, G_Y )

PRK_2e = HMAC-SHA-256( salt, G_XY )
PRK_3e2m = Extract( PRK_2e, G_RX ), where G_RX is the ECDH shared
PRK_4x3m = Extract( PRK_3e2m, G_IY ), where G_IY is the ECDH shared
OKM = EDHOC-KDF( PRK, transcript_hash, label, context, length )
          = Expand( PRK, info, length )

info = (
     transcript_hash : bstr,
     label : tstr,
     context : bstr,
     length : uint,
TH_4 = H( TH_3, CIPHERTEXT_3 )

PRK_4x3m = Extract( nonce, PRK_4x3m )

message_1 = (
     METHOD : int,
     SUITES_I : suites,
     G_X : bstr,
     C_I : bstr / int,
     ? EAD_1 : ead,
suites = [ 2* int ] / int

message_2 = (
     G_Y_CIPHERTEXT_2 : bstr,
     C_R : bstr / int,
ID_CRED_R = { 4 : kid_R }, then only the byte string or
message_3 = (
     CIPHERTEXT_3 : bstr,
ID_CRED_I = { 4 : kid_I }, only the byte string or integer
message_4 = (
     CIPHERTEXT_4 : bstr,
error = (
     ERR_CODE : int,
     ERR_INFO : any,
suites = [ 2* int ] / int

ead = 1* (
     ead_label : int,
     ead_value : any,
message_1 = (
     METHOD : int,
     SUITES_I : suites,
     G_X : bstr,
     C_I : bstr / int,
     ? EAD_1 : ead,
message_2 = (
     G_Y_CIPHERTEXT_2 : bstr,
     C_R : bstr / int,
message_3 = (
     CIPHERTEXT_3 : bstr,
message_4 = (
     CIPHERTEXT_4 : bstr,
error = (
     ERR_CODE : int,
     ERR_INFO : any,
info = (
     transcript_hash : bstr,
     label : tstr,
     context : bstr,
     length : uint,
