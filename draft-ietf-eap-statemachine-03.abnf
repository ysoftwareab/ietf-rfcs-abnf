a = b = X the action causes the value of the expression following
methodState=CONT: The method always continues at this point (and the
      peer wants to continue it). The decision variable is always set to
      FAIL.

methodState=MAY_CONT: At this point, the authenticator can decide
      either to continue the method or end the conversation. The
      decision variable tells us what to do in the case the conversation
      ends. If the current situation does not satisfy the peer's
      security policy (that is, if the authenticator now decides to
      allow access, the peer will not use it), set decision=FAIL.
      Otherwise, set decision=COND_SUCC.

methodState=DONE: The method never continues at this point, (or the
      peer sees no point in continuing it).

      If either (a) the authenticator has informed us that it will not
      allow access, or (b) we're not willing to talk to this
      authenticator (e.g. our security policy is not satisfied), set
decision=FAIL. (Note that this state can occur even if the method
decision=COND_SUCC.

allowNotifications=TRUE.  Otherwise, set allowNotifications=FALSE.

selectedMethod = NONE        |                        |
methodState = NONE           |                        |
allowNotifications = TRUE    |                        |
decision = FAIL              |          UCT           |          IDLE
idleWhile = ClientTimeout    |                        |
eapSuccess = FALSE           |                        |
eapFail = FALSE              |                        |
eapKeyData = NONE            |                        |
eapKeyAvailable = FALSE      |                        |
eapRestart = FALSE           |                        |





ignore = m.check(eapReqData) |         ignore         |       DISCARD
eapRespData =              |------------------------+--------------
       m.buildResp(reqId)       |                        |
eapKeyData = m.getKey()  |                        |
selectedMethod = reqMethod |                        |
methodState = INIT         |                        |
eapRespData =              |                        |
       buildNak(reqId)          |          else          | SEND_RESPONSE
eapRespData =                |                        |
     buildIdentity(reqId)       |                        |
eapRespData =                |                        |
     buildNotify(reqId)         |                        |
eapRespData = lastRespData   |                        |
eapReq = FALSE               |                        |
eapNoResp = TRUE             |                        |
lastId = reqId               |                        |
lastRespData = eapRespData   |          UCT           |          IDLE
eapReq = FALSE               |                        |
eapResp = TRUE               |                        |
idleWhile = ClientTimeout    |                        |
eapKeyAvailable = TRUE     |                        |
eapSuccess = TRUE            |                        |
eapFail = TRUE               |                        |
currentId = NONE              |                     |
eapSuccess = FALSE            |                     |
eapFail = FALSE               |         UCT         |   SELECT_ACTION
eapTimeout = FALSE            |                     |
eapKeyData = NONE             |                     |
eapKeyAvailable = FALSE       |                     |
eapRestart = FALSE            |                     |
retransWhile =                |                     |
     calculateTimeout(           |---------------------+----------------
      retransCount, eapSRTT,     |       eapResp       |        RECEIVED
      eapRTTVAR, methodTimeout)  |                     |
eapReqData = lastReqData    |---------------------+----------------
eapReq = TRUE               |        else         |            IDLE
decision =                    |---------------------+----------------
     Policy.getDecision()        | decision == SUCCESS |         SUCCESS
ignore = m.check(eapRespData) |       !ignore       | METHOD_RESPONSE
eapKeyData = m.getKey()     |                     |
methodState = END           |        else         |  METHOD_REQUEST
methodState = CONTINUE      |                     |
currentMethod =               |                     |
     Policy.getNextMethod()      |                     |
currentMethod==NOTIFICATION)|                     |
methodState = CONTINUE      |                     |
methodState = PROPOSED      |                     |
currentId = nextId(currentId) |         UCT         |    SEND_REQUEST
eapReqData =                  |                     |
     m.buildReq(currentId)       |                     |
methodTimeout = m.getTimeout()|                     |
eapResp = FALSE               |                     |
eapNoReq = TRUE               |                     |
retransCount = 0              |         UCT         |            IDLE
lastReqData = eapReqData      |                     |
eapResp = FALSE               |                     |





eapReq = TRUE                 |                     |
eapTimeout = TRUE             |                     |
eapReqData =                  |                     |
     buildFailure(currentId)     |                     |
eapFail = TRUE                |                     |
eapReqData =                  |                     |
     buildSuccess(currentId)     |                     |
eapKeyAvailable = TRUE      |                     |
eapSuccess = TRUE             |                     |
currentMethod = NONE          |      rxResp &&      |
currentId = respId          |    EXPANDED_NAK)    |
currentId = NONE            |        else         |  PICK_UP_METHOD
currentMethod = respMethod  |---------------------+----------------
decision =                    |---------------------+----------------
     Policy.getDecision()        | decision == SUCCESS |         SUCCESS
ignore =                      |---------------------+----------------
     m.check(aaaEapRespData)     |       !ignore       | METHOD_RESPONSE
aaaEapKeyData = m.getKey()  |                     |
methodState = END           |        else         |  METHOD_REQUEST
methodState = CONTINUE      |                     |





currentMethod =               |                     |
     Policy.getNextMethod()      |                     |
currentMethod==NOTIFICATION)|                     |
methodState = CONTINUE      |                     |
methodState = PROPOSED      |                     |
currentId = nextId(currentId) |                     |
aaaEapReqData =               |         UCT         |    SEND_REQUEST
     m.buildReq(currentId)       |                     |
aaaMethodTimeout =            |                     |
     m.getTimeout()              |                     |
aaaEapResp = FALSE            |                     |
aaaEapNoReq = TRUE            |                     |
aaaEapResp = FALSE            |                     |
aaaEapReq = TRUE              |                     |
aaaEapReqData =               |                     |
     buildFailure(currentId)     |                     |
aaaEapFail = TRUE             |                     |
aaaEapReqData =               |                     |
     buildSuccess(currentId)     |                     |
aaaEapKeyAvailable = TRUE   |                     |
aaaEapSuccess = TRUE          |                     |
decision =                    |---------------------+----------------
     Policy.getDecision()        | decision == SUCCESS |         SUCCESS
aaaEapRespData = NONE         |  currentId == NONE  |        AAA_IDLE
retransWhile =                |                     |
     calculateTimeout(           |---------------------+----------------
      retransCount, eapSRTT,     |       eapResp       |       RECEIVED2
      eapRTTVAR, methodTimeout)  |                     |
eapReqData = lastReqData    |---------------------+----------------
eapReq = TRUE               |        else         |           IDLE2
aaaIdentity = eapRespData   |                     |
aaaEapRespData = eapRespData  |                     |
aaaFail = FALSE               |      aaaEapReq      |    AAA_RESPONSE
aaaSuccess = FALSE            |---------------------+----------------
aaaEapReq = FALSE             |     aaaTimeout      |        TIMEOUT_
aaaEapNoReq = FALSE           |                     |        FAILURE2
aaaEapResp = TRUE             |---------------------+----------------
                                 |       aaaFail       |        FAILURE2
                                 |---------------------+----------------
                                 |     aaaSuccess      |        SUCCESS2
eapReqData = aaaEapReqData    |         UCT         |   SEND_REQUEST2
currentId = getId(eapReqData) |                     |
methodTimeout =               |                     |
     aaaMethodTimeout            |                     |
eapResp = FALSE               |                     |
eapNoReq = TRUE               |                     |
retransCount = 0              |         UCT         |           IDLE2
lastReqData = eapReqData      |                     |
eapResp = FALSE               |                     |
eapReq = TRUE                 |                     |
eapTimeout = TRUE             |                     |
eapReqData = aaaEapReqData    |                     |
eapFail = TRUE                |                     |
eapReqData = aaaEapReqData    |                     |





eapKeyData = aaaEapKeyData    |                     |
eapKeyAvailable =             |                     |
     aaaEapKeyAvailable          |                     |
eapSuccess = TRUE             |                     |
