
INTERNET DRAFT                                        Neil Haller
draft-haller-otp-01.txt                                  Bellcore
August 1, 1995                                         Craig Metz
                                       Kaman Sciences Corporation


                     A One-Time Password System


STATUS OF THIS MEMO

  This document is an Internet Draft. Internet Drafts are working
  documents of the Internet Engineering Task Force (IETF), its Areas
  and Working Groups. Note that other groups may also distribute
  working documents as Internet Drafts.

  Internet Drafts are draft documents valid for a maximum of six
  months. Drafts may be updated, replaced, or obsoleted by other
  documents at any time. It is not appropriate to use Internet Drafts
  as reference material or to cite them other than as a "working
  draft" or "work in progress."

  To learn the current status of any Internet Draft, please check the
  1id-abstracts.txt listing contained in the Internet-Drafts Shadow
  Directories on ftp.is.co.za (Africa), ds.internic.net (US East
  Coast), nic.nordu.net (Europe), ftp.isi.com (US West Coast), or
  munnari.oz.au (Pacific Rim).

  The distribution of this Internet Draft is unlimited. It is filed
  as <draft-haller-otp-01.txt> and it expires on February 1, 1996.

ABSTRACT

  This document describes a one-time password authentication system
  (OTP). The OTP system provides authentication for system access
  [login] and other applications requiring authentication that is
  secure against passive attacks based on replaying captured reusable
  passwords. OTP evolved from the S/KEY* One-Time Password System
  that was released by Bellcore and is described in references [3]
  and [5].

OVERVIEW

  One form of attack on networked computing systems is eavesdropping
  on network connections to obtain authentication information such as
  the login IDs and passwords of legitimate users. Once this
  information is captured, it can be used at a later time to gain
  access to the computing system. One-time password systems are
  designed to counter this type of attack, called a "replay attack"
  [4].

  The authentication system described in this document uses a secret
  pass-phase known only by the user to generate a sequence of single
  use (one-time) passwords. With this system, the user's secret

---------
 *   S/KEY is a trademark of Bellcore


Haller                                                   [Page 1]





INTERNET DRAFT     A One Time Password System       August 1,1995


  pass-phrase never crosses the network at any time such as during
  authentication or during pass-phrase changes. Thus, it is not
  vulnerable to replay attacks. Added security is provided by the
  property that no secret information need be stored on any system,
  including the server being protected.

  The OTP system protects against external passive attacks against
  the authentication subsystem. It does not prevent a network
  eavesdropper from gaining access to private information, and does
  not provide protection against either "social engineering" or
  against active attacks where the potential intruder is able to
  intercept and modify the packet stream.

INTRODUCTION

  There are two entities in the operation of the OTP one-time
  password system. The client must generate the appropriate one-time
  password from the user's secret pass-phrase and from information
  provided in the challenge from the server. The server must send a
  challenge that includes the appropriate generation parameters to
  the client, must verify the one-time password received, must store
  the last valid one-time password it received, and must store the
  corresponding one-time password sequence number. The server must
  also facilitate the changing of the user's secret pass-phrase in a
  secure manner.

  The OTP system generator passes the user's secret pass-phrase,
  along with a "seed" received from the server as part of the
  challenge, through multiple iterations of a secure hash function to
  produce a one-time password. On each use, the number of secure hash
  function iterations is reduced by one.  Thus, a unique sequence of
  passwords is generated. The server verifies the one-time password
  received from the client by computing the secure hash function once
  and comparing the result with the previously accepted one-time
  password.  This technique was first suggested by Leslie Lamport
  [1].

SECURE HASH FUNCTION

  The security of the OTP system is based on the non-invertability of
  a secure hash function. Such a function must be tractable to
  compute in the forward direction, but computationally infeasible to
  invert.

  The interfaces are currently defined for three such hash
  algorithms, MD4 [2] and MD5 [6] by Ronald Rivest, and SHA [7] by
  NIST.  Clearly, the generator and server must use the same
  algorithm in order to interoperate. Other hash algorithms may be
  specified for use with this system by publishing the appropriate
  interfaces.

  The secure hash algorithms listed above have the property that they
  accept an input that is arbitrarily long and produce a fixed size
  output. The OTP system folds this output to 64 bits using the
  algorithms in the Appendix A. 64 bits is also the length of the
  one-time passwords. This is believed to be long enough to be secure

Haller                                                   [Page 2]





INTERNET DRAFT     A One Time Password System       August 1,1995


  and short enough to be entered manually (see below, Form of Output)
  when necessary.

GENERATION OF ONE-TIME PASSWORDS

  This section describes the generation of the one-time passwords.
  This consists of an initial step in which all inputs are combined,
  a computation step where the secure hash function is applied a
  specified number of times, and an output function where the 64 bit
  one-time password is converted to a human readable form.

  Initial Step

  In principle, the user's secret pass-phrase may be of any length.
  To reduce the risk from techniques such as exhaustive search or
  dictionary attacks, it MUST contain at least 10 characters (see
  Form of Inputs below). All implementations MUST support at least a
  63 character pass-phrase. The secret pass-phrase is frequently, but
  is not required to be, textual information provided by a user.

  In this step, the pass phrase is concatenated with a seed that is
  transmitted from the server in clear text. This non-secret seed
  allows a client to use the same secret pass-phrase on multiple
  machines (using different seeds) and to safely recycle secret
  passwords by changing the seed. The seed is a string of characters
  that must not contain any blanks and should consist of strictly
  alphanumeric characters from the ISO-646 Invariant Code set.

  The result of the concatenation is passed through the secure hash
  function, and then is reduced to 64 bits using one of the function
  dependent algorithms shown in Appendix A.

  Computation Step

  A sequence of one-time passwords is produced by applying the secure
  hash function multiple times to the output of the initial step
  (called S). That is, the first one-time password to be used is
  produced by passing S through the secure hash function a number of
  times (N) specified by the user. The next one-time password to be
  used is generated by passing S though the secure hash function N-1
  times. An eavesdropper who has monitored the transmission of a
  one-time password would not be able to generate the next required
  password because doing so would mean inverting the hash function.

  Form of Inputs

  The secret pass-phrase is seen only by the OTP generator. To allow
  interchangeability of generators, all generators must support a
  secret pass-phrase of 10 to 63 characters. Implementations may
  support a longer pass-phrase, but such implementations risk the
  loss of interchangeability with implementations supporting only the
  minimum.

  To achieve a uniform minimum pass-phrase complexity, all generators
  must enforce the following rules: Pass-phrases MUST be at least 10
  characters in length, MUST contain at least one upper case

Haller                                                   [Page 3]





INTERNET DRAFT     A One Time Password System       August 1,1995


  alphabetic, MUST contain at least one lower case alphabetic, and
  MUST contain at least one non-blank non-alphabetic.

  The seed must consist of purely alphanumeric characters and must be
  of one to 16 characters in length.

  The sequence number and seed together constitute a larger unit of
  data called the challenge. The challenge gives the generator the
  parameters it needs to calculate the correct one-time password from
  the secret pass-phrase. The challenge is in a standard syntax so
  that automated generators can recognize the challenge in context
  and extract these parameters. The syntax of the challenge is:

          otp-<algorithm identifier> <sequence integer> <seed>

  The three tokens are separated by a white space (defined as any
  number of blanks and/or tabs) and the entire challenge string must
  be terminated with either a space or a new line. The string "otp-"
  MUST be in lower case.  The algorithm identifier is case sensitive
  (the existing identifiers are all lower case), and the seed is case
  insensitive and converted before use to lower case.  If additional
  algorithms are defined, appropriate identifiers (short, but not
  limited to three or four characters) must be defined. The currently
  defined algorithm identifiers are:

    md4       MD4 Message Digest
    md5       MD5 Message Digest
    sha1      NIST Secure Hash Algorithm

  An example of an OTP challenge is:   otp-md4 487 dog2

  Form of Output

  The one-time password generated by the above procedure is 64 bits
  in length. Entering a 64 bit number is a difficult and error prone
  process. Some generators insert this password into the input stream
  and some others make it available for system "cut and paste." Still
  other arrangements require the one-time password to be entered
  manually. The OTP system is designed to facilitate this manual
  entry without impeding automatic methods. The one-time password
  therefore may be converted to, and all servers MUST accept it as, a
  sequence of six short (1 to 4 letter) easily typed words that only
  use characters from ISO-646 IVCS. Each word is chosen from a
  dictionary of 2048 words; at 11 bits per word, all one-time
  passwords may be encoded.

  The two extra bits in this encoding are used to store a checksum.
  The 64 bits of key are broken down into pairs of bits, then these
  pairs are summed together. The two least significant bits of this
  sum are encoded in the last two bits of the six word sequence with
  the least significant bit of the sum as the last bit encoded. All
  OTP generators MUST calculate this checksum and all OTP servers
  MUST verify this checksum explicitly as part of the operation of
  decoding this representation of the one-time password.

  Generators MUST produce the six word format in upper case with

Haller                                                   [Page 4]





INTERNET DRAFT     A One Time Password System       August 1,1995


  single spaces used as separators, and servers MUST accept it
  without regard to case and white space used as a separator. The two
  lines below represent the same one-time password.  The first is
  valid as output from a generator and as input a server, the second
  is valid only as human input to a server.

          OUST COAT FOAL MUG BEAK TOTE
          oust coat foal  mug  beak  tote

  Interoperability requires at all OTP servers and generators use the
  same dictionary. The standard dictionary is defined as an appendix
  to RFC 1760 [5] and is not included in this document.

  To facilitate the implementation of smaller generators, hexadecimal
  output is an acceptable alternative for the presentation of the
  one-time password. All implementations of the server software MUST
  accept case-insensitive hexadecimal as well as six-word format.
  The hexadecimal digits may be separated by white space so servers
  are required to ignore all white space. Examples of hexadecimal
  format are:

            3503785b369cda8b
            e5cc a1b8 7c13 096b
            C7 48 90 F4 27 7B A1 CF

  In addition to accepting 6-word and hexadecimal encodings of the 64
  bit one-time password, servers are encouraged to accept the
  alternate dictionary encoding described in Appendix B. Note that
  the design of the alternate dictionary encoding implies that the
  acceptance of any alternate dictionary implies the acceptance of
  all alternate dictionaries. The alternate dictionary is stored only
  in the generators that use it and need not be stored on any server.

VERIFICATION OF ONE-TIME PASSWORDS

  An application on the server system that requires OTP
  authentication is expected to issue an OTP challenge as described
  above. Given the parameters from this challenge and the secret
  pass-phrase, the generator can compute (or lookup) the one-time
  password which is passed to the server to be verified.

  The server system has a database containing, for each user, the
  one-time password from the last successful authentication or the
  first OTP of a newly initialized sequence. To authenticate the
  user, the server decodes the one-time password received from the
  client into a 64-bit key and then runs this key through the secure
  hash function once. If the result of this operation matches the
  stored previous OTP, the authentication is successful and the
  accepted one-time password is stored for future use.

PASS-PHRASE CHANGES

  Because the number of hash function applications executed by the
  client decreases by one each time, at some point the user must
  reinitialize the system or be unable to authenticate. The method of
  doing this is under discussion and will be provided in a subsequent

Haller                                                   [Page 5]





INTERNET DRAFT     A One Time Password System       August 1,1995


  document.

  Implementations MUST provide clients with a means of reinitializing
  a sequence through explicit specification of the first one-time
  password of a sequence. This allows a client to initialize without
  making it necessary to send a secret pass-phrase over the network
  as only the one-time password is sent. When the sequence of one-
  time password is reinitialized, implementations MUST verify that
  the seed is changed. Installations are advised to discourage any
  operation that sends the secret pass-phrase over a network as such
  practice defeats the concept of a one-time password.

ACKNOWLEDGMENTS

  The idea behind OTP authentication was first proposed by Leslie
  Lamport [1]. Bellcore's S/KEY system, from which OTP is derived,
  was proposed by Phil Karn, who also wrote most of the Bellcore
  reference implementation.







































Haller                                                   [Page 6]





INTERNET DRAFT     A One Time Password System       August 1,1995


REFERENCES

  [1]  Leslie Lamport, "Password Authentication with Insecure
       Communication", Communications of the ACM 24.11 (November
       1981), 770-772

  [2]  R. L. Rivest, The MD4 Message-Digest Algorithm, "Request For
       Comments (RFC) 1320", MIT and RSA Data Security, Inc., April
       1992

  [3]  Neil Haller, "The S/KEY One-Time Password System", Proceedings
       of the ISOC Symposium on Network and Distributed System
       Security, February 1994, San Diego, CA

  [4]  Neil Haller & Ran Atkinson, On Internet Authentication,
       "Request for Comments (RFC) 1704", Bellcore and Naval Research
       Laboratory, October 1994

  [5]  Neil Haller, The S/KEY One-Time Password System, "Request for
       Comments (RFC) 1760", Bellcore, February 1995

  [6]  R. L. Rivest, The MD5 Message-Digest Algorithm, "Request For
       Comments (RFC) 1321", MIT and RSA Data Security, Inc., April
       1992

  [7]  National Institute of Standards and Technology (NIST),
       "Announcing the Secure Hash Standard", FIPS 180-1, U.S.
       Department of Commerce, April 1995.

  [8]  International Standards Organization,    , ISO-646, 1993,
       Geneva, Switzerland



SECURITY CONSIDERATIONS

  This entire document is about Security Considerations.


AUTHOR'S ADDRESS

  Neil Haller
  Bellcore
  MRE 2Q-280
  445 South Street
  Morristown, NJ, 07960-6438, USA

  Phone: +1 201 829-4478
  Fax:  +1 201 829-2504
  Email: nmh@bellcore.com


  Craig Metz
  Kaman Sciences Corporation
  For NRL Code 5544
  4555 Overlook Avenue, S.W.

Haller                                                   [Page 7]





INTERNET DRAFT     A One Time Password System       August 1,1995


  Washington, DC, 20375-5337

  Phone: +1 202 404-7122
  Fax:  +1 202 404-7942
  Email: cmetz@cs.nrl.navy.mil




















































Haller                                                   [Page 8]





INTERNET DRAFT     A One Time Password System       August 1,1995


        Appendix A   -   Interfaces to Secure Hash Algorithms


MD4 Message Digest (see reference [2])

          strcpy(buf,seed);
          strcat(buf,passwd);
          MDbegin(&md)
          MDupdate(&md,(unsigned char *)buf,8*buflen);

          /* Fold result to 64 bits */
          md.buffer[0] ^= md.buffer[2];
          md.buffer[1] ^= md.buffer[3];


MD5 Message Digest (see reference [6])

          MD5_CTX mdCxt;

          strcpy(buf,seed);
          strcat(buf,passwd);

          /* Crunch the key through MD5  */
          MD5Init(&mdCxt);
          MD5Update(&mdCxt,(unsigned char *)bits,strlen(bits));
          MD5Update(&mdCxt,(unsigned char *)buf,buflen);
          MD5Final(&mdCxt);

          /* Fold result to 64 bits */
          for( i = 0; i < 8; i++ )
              result[i] = mdCxt.digest[i] ^ mdCxt.digest[i+8];


SHA Secure Hash Algorithm (see reference [7])


          /*  Fold 160 bit result to 64 bits */
          md.buffer[0] ^= md.buffer[2];
          md.buffer[1] ^= md.buffer[3];
          md.buffer[0] ^= md.buffer[4];

















Haller                                                   [Page 9]





INTERNET DRAFT     A One Time Password System       August 1,1995


          Appendix B   -   Alternative Dictionary Algorithm


The purpose of alternative dictionary encoding of the OTP one-time
password is to allow the use of language specific or friendly words.
Servers are encouraged to accept this encoding in addition to the
standard 6-word and hexadecimal encodings.


GENERATOR ENCODING USING AN ALTERNATE DICTIONARY

  Standard 6-word encoding uses the placement of a word in the
  dictionary to represent an 11-bit number.  Using the alternative
  dictionary encoding, the dictionary is an ordered collection of
  2048 words such that word W and value N obey the relationship:

          alg( uppercase( W ) ) % 2048 == N
  where
          alg is the hash algorithm used (e.g. MD4, MD5, SHA).

  In addition, no words in the standard dictionary may be chosen.
  The generator expands the 64-bit one-time password to 66 bits by
  computing parity as with the standard 6-word encoding.  The six
  11-bit numbers are then converted to words using the dictionary
  that was created such that the above relationship holds.


SERVER DECODING OF ALTERNATE DICTIONARY ONE-TIME PASSWORDS

  The server accepting alternative dictionary encoding converts each
  word to an 11-bit number using the above encoding. These numbers
  are then used in the same way as the decoded standard dictionary
  words to form the 66-bit one-time password.
























Haller                                                  [Page 10]




