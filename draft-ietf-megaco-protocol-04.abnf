parm=value....}

Event=1139 { Line/DTMF {ACTION=AccumulateByDigitMap{GenMap} } }

megacoMessage = LWSP [authenticationHeader SEP ] message

authenticationHeader = AuthToken EQUAL SecurityParmIndex COLON
                       SequenceNum COLON AuthData

SecurityParmIndex = 8(HEXDIG)
SequenceNum = 8(HEXDIG)
AuthData = 16(HEXDIG)

message = MegacopToken SLASH Version SEP mId SEP ( errorDescriptor |
        1*(transactionRequest | transactionReply |
transactionPending = PendingToken EQUAL TransactionID LBRKT
                     [TimeNotation] RBRKT

transactionRequest = TransToken EQUAL TransactionID LBRKT
                     actionRequest *(COMMA actionRequest) RBRKT

actionRequest = CtxToken EQUAL ContextID LBRKT
               ((contextProperties COMMA commandList) |
                contextProperties | commandList ) RBRKT

contextProperties = contextProperty *(COMMA contextProperty)
contextProperty = topologyDescriptor ; | bridgeDescriptor
commandList = commandRequest *(COMMA commandRequest)

commandRequest = (ammRequest | subtractRequest | auditRequest |
                  notifyRequest | serviceChangeRequest)

transactionReply = ReplyToken EQUAL TransactionID LBRKT
                   ( errorDescriptor | ( actionReply
                   *(COMMA actionReply ))) RBRKT
actionReply = CtxToken EQUAL ContextID LBRKT ( errorDescriptor |
              ( commandReply *(COMMA commandReply)) ) RBRKT

commandReply = (serviceChangeReply | auditReply | ammsReply |
ammRequest = (AddToken | MoveToken | ModifyToken ) EQUAL TerminationID
             [LBRKT ammParameter *(COMMA ammParameter) RBRKT]

ammParameter= (mediaDescriptor | modemDescriptor | muxDescriptor |
               eventsDescriptor | signalsDescriptor |
               digitMapDescriptor | auditDescriptor)

ammsReply = ( AddToken | MoveToken | ModifyToken | SubtractToken )
        ( commandError | ( [EQUAL TerminationID] [terminationAudit] ))

commandError = EQUAL TerminationID LBRKT errorDescriptor RBRKT

subtractRequest = subtractToken EQUAL TerminationID [ LBRKT
                  auditDescriptor RBRKT]

auditRequest = (AuditValueToken | AuditCapToken ) EQUAL TerminationID
               [ LBRKT auditDescriptor RBRKT ]

auditReply = ( AuditValueToken | AuditCapToken) ( contextAudit |
               commandError |
             [EQUAL TerminationID] terminationAudit )

terminationAudit = LBRKT auditReturnParameter
                   *(COMMA auditReturnParameter) RBRKT

contextAudit = EQUAL CtxToken terminationIDList

auditReturnParameter = (mediaDescriptor | modemDescriptor |
                        muxDescriptor | eventsDescriptor |
                        signalsDescriptor | digitMapDescriptor |
                        observedEventsDescriptor |
                        statisticsDescriptor | packagesDescriptor )

auditDescriptor = AuditToken LBRKT auditItem  *(COMMA auditItem) RBRKT

notifyRequest = NotifyToken EQUAL TerminationID
               LBRKT observedEventsDescriptor RBRKT

notifyReply = NotifyToken ( commandError | [EQUAL TerminationID] )
serviceChangeRequest = serviceChangeToken EQUAL TerminationID
                       LBRKT serviceChangeDescriptor RBRKT

serviceChangeReply = serviceChangeToken (commandError |
         ([EQUAL TerminationID] [LBRKT serviceChangeDescriptor RBRKT]
errorDescriptor = ErrorToken EQUAL ErrorCode LBRKT quotedString RBRKT

ErrorCode = 1*3(DIGIT) ; could be extended

TransactionID = UINT32

mId = ( domainAddress | domainName ) [":" portNumber] | deviceName

domainName = "<" (ALPHA | DIGIT) *63(ALPHA | DIGIT | "-" | ".") ">"
deviceName = pathNAME

ContextID = (UINT32 | "-" | "$")

domainAddress = "[" (IPv4address | IPv6address) "]"
IPv6address = hexpart [ ":" IPv4address ]
IPv4address = V4hex DOT V4hex DOT V4hex DOT V4hex
V4hex = 1*3(DIGIT) ; "0".."225"
IPv6prefix = hexpart SLASH 1*2DIGIT
hexpart = hexseq "::" [ hexseq ] | "::" [ hexseq ] | hexseq
hexseq = hex4 *( ":" hex4)
hex4 = 1*4HEXDIG

portNumber = UINT16

terminationIDList = LBRKT TerminationID *(COMMA TerminationID) RBRKT

pathNAME = NAME *(["/"] ["*"] (ALPHA | DIGIT)) ["*"]

TerminationID = "$" | "*" | "ROOT" | pathNAME

mediaDescriptor = mediaToken LBRKT mediaParm *(COMMA mediaParm) RBRKT

mediaParm = (streamParm | streamDescriptor |
streamParm = ( localDescriptor | remoteDescriptor |
               localControlDescriptor )

streamDescriptor = StreamToken EQUAL StreamID LBRKT streamParm
                   *(COMMA streamParm) RBRKT

localControlDescriptor = LocalControlToken LBRKT localParm
                         *(COMMA localParm) RBRKT

localParm = ( streamMode | propertyParm )

streamMode = ModeToken EQUAL streamModes

streamModes = (SendonlyToken | RecvonlyToken | SendrecvToken |
                   InactiveToken | LoopbackToken | DeleteToken )

propertyParm = pkgdName propertyValue
propertyValue = (EQUAL alternativeValue| INEQUAL VALUE)
alternativeValue = ( VALUE | LSBRKT VALUE *(COMMA VALUE) RSBRKT  |
                LSBRKT VALUE DOT DOT VALUE RSBRKT )

INEQUAL = LWSP (">" | "<" | "#" ) LWSP
LSBRKT = LWSP "[" LWSP
RSBRKT = LWSP "]" LWSP

localDescriptor = LocalToken EQUAL (tvList | octetStringParm)

OctetStringParm = (SdpToken | extensionParameter)LBRKT OctetString
tvList = TagValueToken EQUAL LBRKT NAME propertyValue
         *(NAME propertyValue) RBRKT

remoteDescriptor = RemoteToken EQUAL  (tvList | octetStringParm)

terminationStateDescriptor = TerminationStateToken LBRKT
             terminationStateParm *(COMMA terminationStateParm) RBRKT

terminationStateParm =(terminationBuffered | propertyParm |
serviceStates = ServiceStatesToken EQUAL ( TestToken |
                OutOfSvcToken | InSvcToken )

terminationBuffered = BufferedEventHandlingToken LBRKT
                      bufferedEventHandling [COMMA
bufferedEventHandling = ( loopControl  | processControl)

loopControl = (StepToken | LoopToken )
processControl = ( ProcessToken | DiscardToken )

muxDescriptor = MuxToken EQUAL MuxType  terminationIDList

MuxType = ( H221Token | H223Token | H226Token |
            H225-0Token | extensionParameter)

StreamID = UINT16
pkgdName = [ (PackageName | "*")  SLASH ] (ItemID | "*" )
PackageName = NAME
ItemId = NAME

eventsDescriptor = EventsDescriptorToken EQUAL RequestID LBRKT
                   requestedEvent *(COMMA requestedEvent) RBRKT

requestedEvent = pkgdName [ LBRKT eventParameter
                *(COMMA eventParameter) RBRKT ]

eventParameter = ( eventAction | eventOther )

eventAction = ActionToken LBRKT requestedActions RBRKT

eventOther = eventParameterName EQUAL VALUE

eventParameterName = NAME
requestedActions = requestedAction LWSP [COLON LWSP
                   embeddedSignalEvents ]
                   [COLON LWSP InterceptToken ]

requestedAction = ( accumulateDescriptor | NotifyActionToken |
                  AccumulateToken | extensionParameter )

accumulateDescriptor = DigitMapToken ((EQUAL digitMapName ) |
           (LBRKT digitMapValue RBRKT ))

embeddedSignalEvents = firstembedding [COMMA firstEmbedding]
firstEmbedding = ( secondEvent | signalsDescriptor )

secondEvent = EventsDescriptorToken EQUAL RequestID LBRKT
             secondRequestedEvent *(COMMA secondRequestedEvent) RBRKT
secondRequestedEvent = pkgdName [ LBRKT secondEventParameter
                     *(COMMA secondEventParameter) RBRKT ]

secondEventParameter = ( secondEventAction | eventOther )

secondEventAction = ActionToken LBRKT secondAction RBRKT

secondAction = requestedAction LWSP [COLON LWSP signalsDescriptor ]
              [COLON LWSP InterceptToken ]

signalsDescriptor = SignalsDescriptorToken LBRKT signalRequest
                 *(COMMA signalRequest) RBRKT

signalRequest = signalName [ LBRKT sigParameter
                *(COMMA sigParameter) RBRKT ]

signalName = pkgdName
sigParameter = sigParameterName EQUAL VALUE
sigParameterName = NAME

observedEventsDescriptor = ObservedEventsToken EQUAL RequestID
                   LBRKT observedEvent *(COMMA observedEvent) RBRKT

observedEvent = [ TimeNotation LWSP COLON] LWSP signalRequest

RequestID = UINT32

modemDescriptor = ModemToken (( EQUAL modemType) |
                 (LSBRKT modemType *(COMMA modemType) RSBRKT))
                 [ LBRKT NAME propertyValue
                  *(COMMA NAME propertyValue) RBRKT ]

modemType =  (V18Token | V34Token | V90Token | V91Token |
              SynchISDNToken  |extensionParameter)

digitMapDescriptor = DigitMapToken EQUAL digitMapName
                    LBRKT digitMapValue RBRKT
digitMapName = NAME
digitMapValue=["L" COLON Timer COMMA] ["M" COLON Timer COMMA] digitMap
Timer = 1*2DIGIT
digitMap = (digitString | LWSP "(" LWSP digitStringList LWSP ")" LWSP)
digitStringList = digitString *( LWSP "|" LWSP digitString )
digitString = 1*(digitStringElement)
digitStringElement = digitPosition [DOT]
digitPosition = digitMapLetter | digitMapRange
digitMapRange = ("x" | LWSP "[" LWSP digitLetter LWSP "]" LWSP)
digitLetter = *((DIGIT "-" DIGIT ) | digitMapLetter)
digitMapLetter=DIGIT | "#" | "*" | "A" | "B" | "C" | "D" | MFSig | "T"

MFSig = "K0" | "K1" | "K2" | "S0" | "S1" | "S2" | "S3"

auditItem = ( MuxToken | ModemToken | MediaToken |
                      EventsDescriptorToken | SignalsDescriptorToken |
                    DigitMapToken | StatsToken | ObservedEventsToken |
                    PackagesToken )

serviceChangeDescriptor = ServicesToken LBRKT serviceChangeParm
                          *(COMMA serviceChangeParm) RBRKT

serviceChangeParm = (serviceChangeMethod | serviceChangeReason |
                   serviceChangeDelay | serviceChangePort |
                   serviceChangeProfile | extension |
                   serviceChangeMgcId )
serviceChangeMethod = MethodToken EQUAL (FailoverToken |
                ForcedToken | GracefulToken | RestartToken |
                DisconnectedToken | HandOffToken | extensionParameter)

serviceChangeReason = ReasonToken  EQUAL VALUE
serviceChangeDelay = DelayToken   EQUAL UINT32
serviceChangePort = PortToken    EQUAL portNumber
serviceChangeMgcId = MgcIdToken   EQUAL mId
serviceChangeProfile = ProfileToken EQUAL NAME SLASH Version
extension = extensionParameter EQUAL VALUE

packagesDescriptor = PackagesToken LBRKT packagesItem
                    *(COMMA packagesItem) RBRKT

Version = 1*2(DIGIT) DOT 1*2(DIGIT)
packagesItem = NAME

TimeNotation = Date "T" Time; per ISO 8601:1988
Date = 8(DIGIT)
Time = 8(DIGIT)
statisticsDescriptor = StatsToken LBRKT statisticsParameter
                    *(COMMA statisticsParameter ) RBRKT

statisticsParameter = ( pkgdName EQUAL VALUE ) |
                      ( extension)

topologyDescriptor = TopologyToken LBRKT terminationA COMMA
                     terminationB COMMA topologyDirection RBRKT
terminationA = TerminationID
terminationB = TerminationID
topologyDirection = BothwayToken | IsolateToken | OnewayToken

extensionParameter = "X"  ("-" | "+") 1*6(ALPHA | DIGIT)

OctetString = *(nonEscapeChar)
nonEscapeChar = ( "" | %x01-7C | %x7E-FF )
quotedString = DQUOTE 1*64(SafeChar) DQUOTE

UINT16 = 1*5(DIGIT)  ; %x0-FFFF
UINT32 = 1*10(DIGIT) ; %x0-FFFFFFFF
UINT64 = 1*20(DIGIT) ; %x0-FFFFFFFFFFFFFFFF

NAME = ALPHA *63(ALPHA | DIGIT | "_" )
VALUE = quotedString | 1*64(SafeChar)
SafeChar = DIGIT | ALPHA | "+" | "-" | "&" |
         "!" | "_" | "/" | "'" | "?" | "@" |
         "^" | "`" | "~" | "*" | "$" | "
         "(" | ")" | "%" | "|" | "."

EQUAL                = LWSP %x3D LWSP ; "="
COLON                = %x3A           ; ":"
LBRKT                = LWSP %x7B LWSP ; "{"
RBRKT                = LWSP %x7D LWSP ; "}"
COMMA                = LWSP %x2C LWSP ; ","
DOT                  = %x2E           ; "."
SLASH                = %x2F           ; "/"
ALPHA                = %x41-5A | %x61-7A ; A-Z | a-z
DIGIT                = %x30-39         ; 0-9
DQUOTE               = %x22            ; " (Double Quote)
HEXDIG               = ( DIGIT | "A" | "B" | "C" | "D" | "E" | "F" )
SP                   = %x20        ; space
HTAB                 = %x09        ; horizontal tab
CR                   = %x0D        ; Carriage return
LF                   = %x0A        ; linefeed
LWSP                 = *( WSP | COMMENT | EOL )
EOL                  = (CR [LF] | LF )
WSP                  = SP | HTAB ; white space
SEP                  = ( WSP | EOL | COMMENT) LWSP
COMMENT              = ";" *(SafeChar| RestChar | WSP) EOL
Restchar             = ";" | "[" | "]" | "{" | "}" | ":" | "," | "#" |
                       "<" | ">" | "=" | %x22


ActionToken                = ("Action"                | "AN")
AccumulateToken            = ("Accumulate"            | "AM")
AddToken                   = ("Add"                   | "A")
AuditToken                 = ("Audit"                 | "AT")
AuditCapToken              = ("AuditCapability"       | "AC")
AuditValueToken            = ("AuditValue"            | "AV")
AuthToken                  = ("Authentication"        | "AU")
AvgLatencyToken            = ("AverageLatency"        | "AL")
BothwayToken               = ("Bothway"               | "BW")
BufferedEventHandlingToken = ("BufferedEventHandling" | "BE")
CtxToken                   = ("Context"               | "C")
DigitMapToken              = ("DigitMap"              | "DM")
DiscardToken               = ("Discard"               | "DS")
DisconnectedToken          = ("Disconnected"          | "DC")
DelayToken                 = ("Delay"                 | "DL")
DeleteToken                = ("Delete"                | "DE")
ErrorToken                 = ("Error"                 | "ER")
EventsDescriptorToken      = ("Events"                | "E")
FailoverToken              = ("Failover"              | "FL")
ForcedToken                = ("Forced"                | "FO")
GracefulToken              = ("Graceful"              | "GR")
H221Token                  = ("H221" )
H223Token                  = ("H223" )
H226Token                  = ("H226" )
H225-0Token                = ("H225-0")
HandoffToken               = ("HandOff"               | "HO")
InactiveToken              = ("Inactive"              | "IN")
InterceptToken             = ("Intercept"             | "IC")
IsolateToken               = ("Isolate"               | "IS")
InSvcToken                 = ("InService"             | "IV")
JitterToken                = ("Jitter"                | "JI")
LocalToken                 = ("Local"                 | "L")
LocalControlToken          = ("LocalControl"          | "O")
LoopbackToken              = ("Loopback"              | "LB")
LoopToken                  = ("Loop"                  | "LP")
MediaToken                 = ("Media"                 | "M")
MegacopToken               = ("MEGACO"                | "!")
MethodToken                = ("Method"                | "MT")
MgcIdToken                 = ("MgcIdToTry"            | "MG")
ModeToken                  = ("Mode"                  | "MO")
ModifyToken                = ("Modify"                | "MF")
ModemToken                 = ("Modem"                 | "MD")
MoveToken                  = ("Move"                  | "MV")
MuxToken                   = ("Mux"                   | "MX")
NotifyActionToken          = ("NotifyAction"          | "NA")
NotifyToken                = ("Notify"                | "N")
ObservedEventsToken        = ("ObservedEvents"        | "OE")
OctetsRecvdToken           = ("OctetsReceived"        | "OR")
OnewayToken                = ("Oneway"                | "OW")
OctetsSentToken            = ("OctetsSent"            | "OT")
OutOfSvcToken              = ("OutOfService"          | "OS")
PackagesToken              = ("Packages"              | "PG")
PendingToken               = ("Pending"               | "PN")
PktsLostToken              = ("PacketsLost"           | "PL")
PktsRecvdToken             = ("PacketsRecived"        | "PR")
PktsSentToken              = ("PacketsSent"           | "PS")
PortToken                  = ("Port"                  | "PT")
ProcessToken               = ("Process"               | "PC")
ProfileToken               = ("Profile"               | "PF")
ReasonToken                = ("Reason"                | "RE")
RecvonlyToken              = ("ReceiveOnly"           | "RC")
ReplyToken                 = ("Reply"                 | "P")
RestartToken               = ("Restart"               | "RS")
RemoteToken                = ("Remote"                | "R")
SdpToken                   = ("SDP"                   | "D")
SignalsDescriptorToken     = ("Signals"               | "SG")
SendonlyToken              = ("SendOnly"              | "SO")
SendrecvToken              = ("SendReceive"           | "SR")
ServicesToken              = ("Services"              | "SV")
ServiceStatesToken         = ("ServiceStates"         | "SI")
ServiceChangeToken         = ("ServiceChange"         | "SC")
StatsToken                 = ("Statistics"            | "SA")
StepToken                  = ("Step"                  | "SP")
StreamToken                = ("Stream"                | "ST")
SubtractToken              = ("Subtract"              | "S")
SynchISDNToken             = ("SynchISDN"             | "SN")
TagValueToken              = ("TagValue"              | "TV")
TerminationStateToken      = ("TerminationState"      | "TS")
TestToken                  = ("Test"                  | "TE")
TopologyToken              = ("Topology"              | "TP")
TransToken                 = ("Transaction"           | "T")
V18Token                   = ("V18")
V34Token                   = ("V34")
V90Token                   = ("V90")
V91Token                   = ("V91")
VersionToken               = ("Version"               | "V")
Transaction = 9998 {
Context = - {
ServiceChange = ROOT {Services {
Method=Restart, Version=1.0, Port=55555, Profile=ResGW}
Reply = 9998 {
Context = - {ServiceChange = ROOT }
Transaction = 9999 {
Context = - {
Modify = A4444 {
                 Media {
                     TerminationState {
                         BufferedEventHandling{Step,Process}
                      },
Stream = 1111 {
                          LocalControl {
Mode = SendReceive,
Local = SDP {c=LOCAL
m=audio 0 LOCAL 0
a=sendrecv
a=ptime:10
Events = 2222 {Package1/offhook}
Reply = 9999 {
Context = - {Modify}
Transaction = 10000 {
Context = - {
Notify = A4444 {ObservedEvents =2222 {
              19990729T22000000:Package1/offhook}}
Reply = 10000 {
Context = - {Notify}
Transaction = 10001 {
Context = - {
Modify = A4444 {
Events = 2223 {
                     Package1/onhook {
                         Action { DigitMap=Dialplan0 }
                     }
DigitMap= Dialplan0{
Reply = 10001 {
Context = - {Modify}
Transaction = 10002 {
Context = - {
Notify = A4444 {ObservedEvents =2223 {
              19990729T22010001:Package1/digits{digits=16135551212}}}
Reply = 10002 {
Context = - {Notify}
Transaction = 10003 {
Context = $ {
Add = A4444,
Add = $ {
                Media {
Stream = 1111 {
                       LocalControl {
Mode = ReceiveOnly,
Local = SDP {c=IN IP4 ANY
m=audio ANY RTP/AVP ANY
a=sendrecv
Remote = SDP {c=IN IP4 ANY
m=audio ANY RTP/AVP ANY
a=sendrecv
Events = 2224 {Package1/onhook}
Reply = 10003 {
Context = 2000 {
           Add,
Add= A4445{
              Media {
Stream = 1111 {
Local = SDP {v=0
c=IN IP4 45.123.1.1
m=audio 5555 RTP/AVP 0 4
a=ptime:20
Transaction = 50003 {
Context = $ {
Add = A5555 {
               Signals { Package1/Ring {variant=NorthAmerica}}
Add  = $ {
               Media {
Stream = 1212 {
                      LocalControl {
Mode = SendReceive,
Local=SDP{c=IN IP4 ANY
m=audio ANY RTP/AVP ANY
a=sendrecv
Remote=SDP{c=IN IP4 45.123.1.1
m=audio 5555 RTP/AVP 0 4
a=sendrecv
Reply = 50003 {
Context = 5000 {
           Add,
Add = A5556{
              Media {
Stream = 1212 {
Local = SDP {c=IN IP4 111.1.1.1
m=audio 1111 RTP/AVP 0 4}
Transaction = 10004 {
Context = 2000 {
Modify = A4445 {
              Media {
Stream = 1111 {
Remote = SDP {c=IN IP4 111.1.1.1
m=audio 1111 RTP/AVP 0 4}
Reply = 10004 {
Context = 2000 {Modify}
Transaction = 50004 {
Context = 5000 {
Notify = A5555 {ObservedEvents =1234 {
                      19990729T22020002:Package1/offhook}}
Reply = 50004 {
Context = - {Notify}
Transaction = 50005 {
Context = 5000 {
Modify = A5555 {
Events = 1235 {Package1/onhook},
Modify = A5556 {
                      Signals {Package1/Clear}
Reply = 50005 {
Context = 5000 {Modify, Modify}
Transaction = 10005 {
Context = 2000 {
Modify = A4445 {
                      Media {
Stream = 1111 {
                            LocalControl {
Mode=SendReceive
Reply = 10005 {
Context = 2000 {Modify= A4445
Transaction = 50006 {
Context = - {AuditValue = A5556{
                   Audit{Media, DigitMap, Events, Signals }}
Reply = 50006 {
Context = - {
                   AuditValue {
                       Media {
                          TerminationState {
                              BufferedEventHandling{Process}
                          },
Stream = 1212 {
                              LocalControl {
Mode = SendReceive,
Local = SDP {c=IN IP4 111.1.1.1
m=audio 1111 RTP/AVP 0 4

Remote=SDP{c=IN IP4 45.123.1.1
m=audio 5555 RTP/AVP 0 4
a=sendrecv
Transaction = 50007 {
Context = 5000 {
Notify = A5555 {ObservedEvents =1235 {
                       19990729T24020002:Package1/onhook}
Reply = 50007 {
Context = - {Notify}
Transaction = 50008 {
Context = 5000 {
Subtract = A5555 ,
Subtract = A5556
Reply = 50008 {
Context = 5000 {
                  Subtract {
                       Statistics { ; what are the stats for a TDM connection?
                          TDMPkg/OctetsSent=45123
                          }
                    },
                    Subtract {
                       Statistics {
                          RTPPkg/PacketsSent=1245,
                          RTPPkg/OctetsSent=62345,
                          RTPPkg/PacketsReceived=780,
                          RTPPkg/OctetsReceived=45123,
                          RTPPkg/PacketsLost=10,
                          RTPPkg/Jitter=27,
                          RTPPkg/AverageLatency=48
                       }
                    }
Transaction = 9999 {
Context = $ {
Add = $ {
Mux = H221 {DS0_A},
Stream = 1111 {
                              LocalControl {
Mode = SendReceive,
Events = 2222 {
                             Bonding/CallID {Action {NotifyAction}},
                             Bonding/TransferRate {Action {NotifyAction}}
Reply = 9999 {
Context = 2000 {Add= A4444}
Transaction = 10000 {
Context = 2000 {
Notify = A4444 {ObservedEvents =2222 {
                                       19990729T22040400:Bonding/CallID{CallID=x},
                                       Bonding/TransferRate {TransferRate=384}
                                   }
Reply = 10000 {
Context = 2000 {Notify}
Transaction = 10001 {
Context = 2000 {
Modify = A4444 {
                      Signals {
                        Bonding/AddPhoneNrs{Phone=N1,Phone=N2,Phone=N3,
Phone=N4,Phone=N5}
Transaction = 10002 {
Context = 2000 {
Modify = A4444 {
Mux = H221 {DS0_1,DS0_2,DS0_3,DS0_4,DS0_5}
Transaction = 10003 {
Context = 2000 {
Modify = A4444 {
Events = 2223 {Bonding/H221Frames}
Transaction = 10004 {
Context = 2000 {
Notify = A4444 {ObservedEvents =2223 {
                      19990729T22050005:Bonding/H221Frames{H221Frame=x}}}
Reply = 10004 {
Context = 2000 {Notify}
Transaction = 10013 {
Context = 2000 {
Add  = $ {
Mux = H225-0 {A4444}, ;not sure what terminationId belongs in
Local = SDP {c=IN IP4 ANY
m=audio ANY RTP/AVP 0 99
a=rtpmap:99 G729
Remote = SDP {c=IN IP4 45.123.1.1
m=audio 5555 RTP/AVP 0 4}

Reply = 10013 {
Context = 2000 {
Add= A4445 {
                    Media {
Stream = 1212 {
Local = SDP {c=IN IP4 111.1.1.1
m=audio 6666 RTP/AVP 0 99
a=rtpmap:98 G729}
Transaction = 10013 {
Context = 2000 {
Modify= A4445 {
                      Media {
Stream = 1212 {
                              LocalControl {Mode = SendReceive},
Remote = SDP {m=audio
a=sendrecv}
Transaction = 10004 {
Context = 2000 {
Notify = A4444 {
ObservedEvents =2224 {
Transaction = 10013 {
Context = 2000 {
Modify= A4445 {
                      Media { Stream = 1213 {
                        LocalControl {Mode = SendReceive},
Local = SDP {c=IN IP4 ANY
m=video ANY RTP/AVP 34},
                                      ;RTP profile for H.263 is 34
Remote = SDP {c=IN IP4 45.123.1.2
m=video 5556 RTP/AVP 34}
Modify= A4444 {
                      Media { Stream = 1213 {
                              LocalControl {Mode = SendReceive},
Local = SDP {m=video
a=sendrecv}
Transaction = 9999 {
Context = $ {
Add = DS0/13/2 {
                   Media { TerminationState {
                             BufferedEventHandling{Step,Process}},
Stream = 1111 {
                               LocalControl {
Mode = SendReceive,
Local = SDP {c=LOCAL
m=audio 0 LOCAL 0
a=recv
a=ptime:10
Add = $ {
Mux = H225-0 {DS0/13/2}, ; is terminationId correct here
Mode = ReceiveOnly,
Local = SDP {c=IN IP4 ANY
m=audio ANY RTP/AVP ANY
a=sendrecv
Remote = SDP {c=IN IP4 ANY
m=audio ANY RTP/AVP ANY
a=sendrecv
Reply = 9999 {
Context = 2000 {
                 Add,
Add= A4445 {
                   Media {
Stream = 1111 {
Local = SDP {v=0
c=IN IP4 45.123.1.1
m=audio 5555 RTP/AVP 0 4
a=ptime:20
Transaction = 10000 {
Context = 2000 {
Modify = A4445 {
                   Media {
Stream = 1111 {
Remote = SDP {c=IN IP4 111.1.1.1
m=audio 1111 RTP/AVP 0 4}
Reply = 10000 {
Context = 2000 {Modify}
Transaction = 10001 {
Context = 2000 {
Modify = A4445 {
                   Media {
Stream = 1111 {
Local = SDP {a=sendrecv}
Reply = 10001 {
Context = 2000 {Modify}
Transaction = 50003 {
Context = $ {
Add = DS0/12/2 {
                                   Media { Stream = 1212 {
                                LocalControl {
Mode = ReceiveOnly,
Local= SDP {c=LOCAL
m=text 0 LOCAL 0
Modem=V18,
Add  = $ {
                      Media { Stream = 1212 {
                                LocalControl {
Mode = ReceiveOnly,
Local= SDP {c=IN IP4 ANY
m=text ANY RTP/AVP 0 95
a=rtpmap:95 T140
Remote= SDP {c=IN IP4 ANY
m=text ANY RTP/AVP 0 95
a=rtpmap:95 T140
Reply = 50003 {
Context = 5000 {Add,
Add = A5556 {
                                   Media {
Stream = 1212 {
Local = SDP {c=IN IP4 111.1.1.1
m=text 1111 RTP/AVP 0 95
a=rtpmap:95 T140}
Transaction = 50004 {
Context = 2000 {
Modify = A5556 {
                      Media {
Stream = 1212 {
                             LocalControl {
Mode = SendReceive
Remote = SDP {c=IN IP4 222.2.2.2
m=text 2222 RTP/AVP 0 95
a=rtpmap:95 T140
Reply = 50004 {
Context = 2000 {Modify}
Transaction = 50005 {
Context = 2000 {
Modify = DS0/12/2 {
                      Media {
Stream = 1212 {
                             LocalControl {
Mode = SendReceive
Reply = 50005 {
Context = 2000 {Modify}
