name = definition

       The name of a rule is simply the name itself (without any 
       enclosing "<" and ">") and is separated from its definition by 
       the equal character "=". Whitespace is only significant in that 
       indentation of continuation lines is used to indicate a rule 
       definition that spans more than one line. Certain basic rules 
       are in uppercase, such as SP, TAB, CRLF, DIGIT, ALPHA, etc. 
       Angle brackets are used within definitions whenever their 
       presence will facilitate discerning the use of rule names.

OCTET            = <any 8-bit character>        ; ( 0-255 )
CHAR             = <any US-ASCII character>     ; (0 - 127) [16]
HIGHALPHA        = <any US-ASCII uppercase      ; ( 65 - 90 )
                          letter>
LOWALPHA         = <any US-ASCII lowercase      ; ( 97 -122 )
                          letter>
ALPHA            = HIGHALPHA / LOWALPHA
DIGIT            = <any US-ASCII digit
                          "0" through "9">             ; ( 48 - 57 )
CTL              = <any US-ASCII control        ; ( 0 - 31 )
                          and DEL>                     ; ( 127 )
CR               = <US-ASCII CR,
                          carriage return>             ; ( 13 )
LF               = <US-ASCII LF, linefeed>      ; ( 10 )
SP               = <US-ASCII SP, space>         ; ( 32 )
HTAB             = <US-ASCII HT,
                          horizontal-tab>              ; ( 9 )
CRLF             = CR LF
LWSP-char        = SP / HTAB                    ; semantics = SP
tspecials        = "(" / ")" / "<" / ">" / "@"
                        / "," / ";" / ":" / "\" / <">
                        / "/" / "[" / "]" / "?" / "="

token            = 1*<any CHAR except SP,
                          CTLs, or tspecials>

quoted-string    = <"> *(qtext) <">
qtext            = <any CHAR excepting <">, "'" & CR,
                          & including linear-white-space>

phrase           = 1*word
word             = token / quoted-string
delimiters       = tspecials / linear-white-space

text             = <any CHAR,                   ; for generic
                          including bare CR,           ; field contents
                          but NOT including CRLF>

HTTP-message     = Simple-Request       ; HTTP/0.9 messages
                        / Simple-Response
                        / Full-Request         ; HTTP/1.0 messages
                        / Full-Response

Full-Request     = Request-Line         ; see Section 5.1
                          *General-Header      ; see Section 4.3
                          *Request-Header      ; see Section 5.5
                          *Object-Header       ; see Section 7
                          CRLF
                          [ Object-Body ]

Full-Response    = Status-Line          ; see Section 6.1
                          *General-Header      ; see Section 4.3
                          *Response-Header     ; see Section 6.4
                          *Object-Header       ; see Section 7
                          CRLF
                          [ Object-Body ]

HTTP-header      = field-name ":" [ field-value ] CRLF

field-name       = 1*<any CHAR, excluding CTLs, SP, and ":">

field-value      = *( field-content / comment )
                          [ CRLF 1*LWSP-char field-value ]

field-content    = <the US-ASCII characters making up the
                          field-value and consisting of combinations
                          of token, tspecials, and quoted-string,
                          or else consisting of text>

comment          = "(" *(ctext / comment) ")"
ctext            = <any CHAR excluding "(", ")", "` & CR,
                          & including linear-white-space>

Object-Body      = *OCTET

HTTP-date        = rfc1123-date / rfc850-date / asctime-date

rfc1123-date     = wkday "," SP date1 SP time SP "GMT"
rfc850-date      = weekday "," SP date2 SP time SP "GMT"
asctime-date     = wkday SP date3 SP time SP 4DIGIT

date1            = 2DIGIT SP month SP 4DIGIT
                          ; day month year (e.g. 02 Jun 1982)
date2            = 2DIGIT "-" month "-" 2DIGIT
                          ; day-month-year (e.g. 02-Jun-82)
date3            = month SP ( 2DIGIT / ( SP 1DIGIT ))
                          ; month day (e.g. Jun  2)

time             = 2DIGIT ":" 2DIGIT ":" 2DIGIT
                          ; 00:00:00 - 23:59:59

wkday            = "Mon" / "Tue" / "Wed"
                        / "Thu" / "Fri" / "Sat" / "Sun"

weekday          = "Monday" / "Tuesday" / "Wednesday"
                        / "Thursday" / "Friday" / "Saturday" / "Sunday"

month            = "Jan" / "Feb" / "Mar" / "Apr"
                        / "May" / "Jun" / "Jul" / "Aug"
                        / "Sep" / "Oct" / "Nov" / "Dec"

media-type       = type "/" subtype *( ";" parameter)
type             = token                      ; case-insensitive
subtype          = token                      ; case-insensitive

parameter        = attribute "=" value
attribute        = token                      ; case-insensitive
value            = token / quoted-string      ; sometimes
                                                     ; case-sensitive

boundary         = 0*69( bchar / SP ) bchar
bchar            = DIGIT / ALPHA / "'" / "(" / ")" / "+"
                        / "_" / "," / "-" / "." / "/" / ":" / "=" / "?"

multipart-body   = discard-text 1*encapsulation
                          close-delimiter discard-text

encapsulation    = delimiter body-part CRLF

delimiter        = "--" boundary CRLF
                          ; taken from Content-type field.  There must
                          ; be no space between "--" and boundary.

close-delimiter  = "--" boundary "--" CRLF
                          ; Again, no space by "--"

discard-text     = *(*text CRLF)
                          ; to be ignored upon receipt

body-part        = *Object-Header
                          CRLF
                          [ Object-Body ]      ; May be recursive
                                               ; if boundary differs

General-Header   = Date
                        / Forwarded
                        / Message-ID
                        / MIME-Version

Date             = "Date" ":" HTTP-date

Forwarded        = "Forwarded" ":" "by" URI [ "(" product ")" ]
                          [ "for" FQDN ]

FQDN             = <Fully-Qualified Domain Name>

Message-ID       = "Message-ID" ":" "<" addr-spec ">"
addr-spec        = unique-string "@" FQDN
unique-string    = <1*CHAR, not including whitespace or ">">

MIME-Version     = "MIME-Version" ":" 1*DIGIT "." 1*DIGIT

Request          = Simple-Request / Full-Request

Simple-Request   = "GET" URI CRLF          ; HTTP/0.9 request

Full-Request     = Request-Line            ; see Section 5.1
                          *General-Header         ; see Section 4.3
                          *Request-Header         ; see Section 5.5
                          *Object-Header          ; see Section 7
                          CRLF
                          [ Object-Body ]         ; see Section 3.2

Request-Line     = Method URI HTTP-Version CRLF

Method           = "GET" / "HEAD"          ; case-sensitive
                        / "PUT" / "POST"
                        / "DELETE" / extension-method

extension-method = token

HTTP-Version     = "HTTP" "/" 1*DIGIT "." 1*DIGIT

URI              = <As defined in RFC 1630>

Request-Header   = User-Agent
                        / If-Modified-Since
                        / Pragma
                        / Authorization
                        / Proxy-Authorization
                        / Referer
                        / From
                        / Accept
                        / Accept-Encoding
                        / Accept-Language

User-Agent       = "User-Agent" ":" 1*product

product          = token ["/" product-version]
product-version  = 1*DIGIT "." 1*DIGIT

If-Modified-Since = "If-Modified-Since" ":" HTTP-date

Pragma           = "Pragma" ":" 1*#pragma-param

pragma-param     = "no-cache" / extension-pragma
extension-pragma = token

Authorization        = "Authorization" ":" (("Basic" uu-encoded)
                            / (extension-scheme extension-encrypted))

uu-encoded           = <UU encoding of userid-password>
userid-password      = [word] ":" [word]

extension-scheme     = token
extension-encrypted  = token

Proxy-Authorization = "Proxy-Authorization" ":"
                             (("Basic" uu-encoded)
                             /(extension-scheme extension-encrypted))

Referer          = "Referer" ":" URI

From             = "From" ":" addr-spec

Accept           = "Accept" ":"
                          1#( ("*" / type) "/" ("*" / subtype)
                             *(";" accept-param) )

accept-param     = ("q" "=" ( "0" / "1" / float) )
                        / ("mxb" "=" 1*DIGIT)

float            = < ANSI-C floating point text representation,
                            where (0.0 < float < 1.0) >

Accept-Encoding    = "Accept-Encoding" ":" 1#encoding-mechanism

encoding-mechanism = "x-compress" / "x-gzip" / extension-encoding
extension-encoding = token

Accept-Language  = "Accept-Language" ":"
                          1#(language-dialect *1(";" language-param) )

language-dialect = ("*" / language) ["/" ("*" / dialect) ]

language-param   = "q" "=" ( "0" / "1" / float)

language         = <As defined in ISO 639 but case-insensitive>

dialect          = <As defined in ISO 3166 but case-insensitive>

Response         = Simple-Response / Full-Response

Simple-Response  = [Object-Body]

Full-Response    = Status-Line              ; see Section 6.1
                          *General-Header          ; see Section 4.3
                          *Response-Header         ; see Section 6.4
                          *Object-Header           ; see Section 7
                          CRLF
                          [ Object-Body ]          ; see Section 3.2

Status-Line      = HTTP-Version Status-Code Reason-Phrase CRLF

Status-Code      = 3DIGIT

Reason-Phrase    = *token

Response-Header  = Server
                        / WWW-Authenticate
                        / Proxy-Authenticate

Server           = "Server" ":" 1*product

WWW-Authenticate = "WWW-Authenticate" ":" ("Basic" realm)
                        / (extension-scheme realm)

realm            = token

Proxy-Authenticate = "Proxy-Authenticate" ":" ("Basic" realm)
                          / (extension-scheme realm)

realm              = token

Object-Header    = Allow
                        / Content-Length
                        / Content-Type
                        / Content-Encoding
                        / Content-Transfer-Encoding
                        / Content-Language
                        / Expires
                        / Last-Modified
                        / URI-header
                        / Location
                        / Version
                        / Derived-From
                        / Release
                        / Title
                        / Link
                        / extension-header

extension-header = HTTP-header

Allow            = "Allow" ":" 1#method

Content-Length   = "Content-Length" ":" 1*DIGIT

Content-Type     = "Content-Type" ":" media-type

Content-Encoding = "Content-Encoding" ":" encoding-mechanism

Content-Language =  "Content-Language" ":" 1#lang-dia

lang-dia         = language ["/" dialect ]

Expires          = "Expires" ":" HTTP-date

Last-Modified    = "Last-Modified" ":" HTTP-date

URI-header       = "URI" ":" 1#( URI [";" vary] )

vary             =  "vary" "=" <"> 1#vary-param <">
vary-param       = "type" / "language" / "version" / "encoding"
                        / extension-vary

extension-vary   = token

vary="type,language"

vary="encoding"

URI-header       = "Location" ":" URI

Version          = "Version" ":" 1*DIGIT *( "." 1*DIGIT )

Derived-From     = "Derived-From" ":" 1*DIGIT *( "." 1*DIGIT )

Release          = "Release" ":" *text

Title            = "Title" ":" *text

Link             = "Link" ":" 1#(URI *1(";" "REL" "=" relation) )

relation         = "UseIndex" / "UseGlossary" / "Contents"
                        / "Next" / "Previous" / "Parent"
                        / "BookMark" / "Made" / "Help"

