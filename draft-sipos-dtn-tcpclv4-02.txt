



Delay Tolerant Networking                                       B. Sipos
Internet-Draft                                           RKF Engineering
Obsoletes: RFC7242 (if approved)                               M. Demmer
Intended status: Experimental                                UC Berkeley
Expires: February 2, 2017                                         J. Ott
                                                        Aalto University
                                                            S. Perreault
                                                          August 1, 2016


   Delay-Tolerant Networking TCP Convergence Layer Protocol Version 4
                       draft-sipos-dtn-tcpclv4-02

Abstract

   This document describes a revised protocol for the TCP-based
   convergence layer for Delay-Tolerant Networking (DTN).  The protocol
   revision is based on implementation issues in the original [RFC7242]
   and updates to the Bundle Protocol contents, encodings, and
   convergence layer requirements in [I-D.ietf-dtn-bpbis].  The majority
   of this specification is unchanged from TCPCL version 3.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on February 2, 2017.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents



Sipos, et al.           Expires February 2, 2017                [Page 1]

Internet-Draft                 DTN TCPCLv4                   August 2016


   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Requirements Language . . . . . . . . . . . . . . . . . . . .   4
     2.1.  Definitions Specific to the TCPCL Protocol  . . . . . . .   5
   3.  General Protocol Description  . . . . . . . . . . . . . . . .   5
     3.1.  Bidirectional Use of TCP Connection . . . . . . . . . . .   7
     3.2.  Example Message Exchange  . . . . . . . . . . . . . . . .   7
   4.  Connection Establishment  . . . . . . . . . . . . . . . . . .   8
     4.1.  Contact Header  . . . . . . . . . . . . . . . . . . . . .   9
       4.1.1.  Connection Option Encoding  . . . . . . . . . . . . .  10
     4.2.  Validation and Parameter Negotiation  . . . . . . . . . .  11
   5.  Established Connection Operation  . . . . . . . . . . . . . .  14
     5.1.  Message Type Codes  . . . . . . . . . . . . . . . . . . .  14
     5.2.  Upkeep and Status Messages  . . . . . . . . . . . . . . .  15
       5.2.1.  Connection Upkeep (KEEPALIVE) . . . . . . . . . . . .  15
       5.2.2.  Message Rejection (REJECT)  . . . . . . . . . . . . .  16
     5.3.  Connection Security . . . . . . . . . . . . . . . . . . .  17
       5.3.1.  Requester Role  . . . . . . . . . . . . . . . . . . .  17
       5.3.2.  Responder Role  . . . . . . . . . . . . . . . . . . .  18
       5.3.3.  TLS Handshake Result  . . . . . . . . . . . . . . . .  18
       5.3.4.  Example TLS Initiation  . . . . . . . . . . . . . . .  18
     5.4.  Bundle Transfer . . . . . . . . . . . . . . . . . . . . .  19
       5.4.1.  Bundle Data Transmission (DATA_SEGMENT) . . . . . . .  20
       5.4.2.  Bundle Acknowledgments (ACK_SEGMENT)  . . . . . . . .  21
       5.4.3.  Bundle Refusal (REFUSE_BUNDLE)  . . . . . . . . . . .  22
       5.4.4.  Bundle Length (LENGTH)  . . . . . . . . . . . . . . .  24
   6.  Connection Termination  . . . . . . . . . . . . . . . . . . .  24
     6.1.  Shutdown Message (SHUTDOWN) . . . . . . . . . . . . . . .  25
     6.2.  Idle Connection Shutdown  . . . . . . . . . . . . . . . .  27
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  27
   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  28
     8.1.  Port Number . . . . . . . . . . . . . . . . . . . . . . .  28
     8.2.  Protocol Versions . . . . . . . . . . . . . . . . . . . .  29
     8.3.  Message Types . . . . . . . . . . . . . . . . . . . . . .  29
     8.4.  Connection Option Types . . . . . . . . . . . . . . . . .  30
     8.5.  REFUSE_BUNDLE Reason Codes  . . . . . . . . . . . . . . .  31
     8.6.  SHUTDOWN Reason Codes . . . . . . . . . . . . . . . . . .  32
     8.7.  REJECT Reason Codes . . . . . . . . . . . . . . . . . . .  32
   9.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  33
   10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  33
     10.1.  Normative References . . . . . . . . . . . . . . . . . .  33



Sipos, et al.           Expires February 2, 2017                [Page 2]

Internet-Draft                 DTN TCPCLv4                   August 2016


     10.2.  Informative References . . . . . . . . . . . . . . . . .  34
   Appendix A.  Significant changes from RFC7242 . . . . . . . . . .  34
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  35

1.  Introduction

   This document describes the TCP-based convergence-layer protocol for
   Delay-Tolerant Networking.  Delay-Tolerant Networking is an end-to-
   end architecture providing communications in and/or through highly
   stressed environments, including those with intermittent
   connectivity, long and/or variable delays, and high bit error rates.
   More detailed descriptions of the rationale and capabilities of these
   networks can be found in "Delay-Tolerant Network Architecture"
   [RFC4838].

   An important goal of the DTN architecture is to accommodate a wide
   range of networking technologies and environments.  The protocol used
   for DTN communications is the revsided Bundle Protocol (BP)
   [I-D.ietf-dtn-bpbis], an application-layer protocol that is used to
   construct a store-and- forward overlay network.  As described in the
   Bundle Protocol specification [I-D.ietf-dtn-bpbis], it requires the
   services of a "convergence- layer adapter" (CLA) to send and receive
   bundles using the service of some "native" link, network, or Internet
   protocol.  This document describes one such convergence-layer adapter
   that uses the well-known Transmission Control Protocol (TCP).  This
   convergence layer is referred to as TCPCL.

   The locations of the TCPCL and the BP in the Internet model protocol
   stack are shown in Figure 1.  In particular, when BP is using TCP as
   its bearer with TCPCL as its convergence layer, both BP and TCPCL
   reside at the application layer of the Internet model.




















Sipos, et al.           Expires February 2, 2017                [Page 3]

Internet-Draft                 DTN TCPCLv4                   August 2016


         +-------------------------+
         |     DTN Application     | -\
         +-------------------------|   |
         |  Bundle Protocol (BP)   |   -> Application Layer
         +-------------------------+   |
         | TCP Conv. Layer (TCPCL) | -/
         +-------------------------+
         |          TCP            | ---> Transport Layer
         +-------------------------+
         |           IP            | ---> Network Layer
         +-------------------------+
         |   Link-Layer Protocol   | ---> Link Layer
         +-------------------------+
         |    Physical Medium      | ---> Physical Layer
         +-------------------------+

        Figure 1: The Locations of the Bundle Protocol and the TCP
       Convergence-Layer Protocol above the Internet Protocol Stack

   This document describes the format of the protocol data units passed
   between entities participating in TCPCL communications.  This
   document does not address:

   o  The format of protocol data units of the Bundle Protocol, as those
      are defined elsewhere in [RFC5050] and [I-D.ietf-dtn-bpbis].

   o  Mechanisms for locating or identifying other bundle nodes within
      an internet.

   Note that this document describes version 3 of the protocol.
   Versions 0, 1, and 2 were never specified in an Internet-Draft, RFC,
   or any other public document.  These prior versions of the protocol
   were, however, implemented in the DTN reference implementation
   [DTNIMPL] in prior releases; hence, the current version number
   reflects the existence of those prior versions.

   This is an experimental protocol produced within the IRTF's Delay-
   Tolerant Networking Research Group (DTNRG).  It represents the
   consensus of all active contributors to this group.  If this protocol
   is used on the Internet, IETF standard protocols for security and
   congestion control should be used.

2.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].




Sipos, et al.           Expires February 2, 2017                [Page 4]

Internet-Draft                 DTN TCPCLv4                   August 2016


2.1.  Definitions Specific to the TCPCL Protocol

   This section contains definitions that are interpreted to be specific
   to the operation of the TCPCL protocol, as described below.

   TCP Connection:  A TCP connection refers to a transport connection
      using TCP as the transport protocol.

   TCPCL Connection:  A TCPCL connection (as opposed to a TCP
      connection) is a TCPCL communication relationship between two
      bundle nodes.  The lifetime of a TCPCL connection is bound to the
      lifetime of an underlying TCP connection.  Therefore, a TCPCL
      connection is initiated when a bundle node initiates a TCP
      connection to be established for the purposes of bundle
      communication.  A TCPCL connection is terminated when the TCP
      connection ends, due either to one or both nodes actively
      terminating the TCP connection or due to network errors causing a
      failure of the TCP connection.  For the remainder of this
      document, the term "connection" without the prefix "TCPCL" refer
      to a TCPCL connection.

   Connection parameters:  The connection parameters are a set of values
      used to affect the operation of the TCPCL for a given connection.
      The manner in which these parameters are conveyed to the bundle
      node and thereby to the TCPCL is implementation dependent.
      However, the mechanism by which two bundle nodes exchange and
      negotiate the values to be used for a given session is described
      in Section 4.2.

   Transmission:  Transmission refers to the procedures and mechanisms
      (described below) for conveyance of a bundle from one node to
      another.

3.  General Protocol Description

   The service of this protocol is the transmission of DTN bundles over
   TCP.  This document specifies the encapsulation of bundles,
   procedures for TCP setup and teardown, and a set of messages and node
   requirements.  The general operation of the protocol is as follows.

   First, one node establishes a TCPCL connection to the other by
   initiating a TCP connection.  After setup of the TCP connection is
   complete, an initial contact header is exchanged in both directions
   to set parameters of the TCPCL connection and exchange a singleton
   endpoint identifier for each node (not the singleton Endpoint
   Identifier (EID) of any application running on the node) to denote
   the bundle-layer identity of each DTN node.  This is used to assist
   in routing and forwarding messages, e.g., to prevent loops.



Sipos, et al.           Expires February 2, 2017                [Page 5]

Internet-Draft                 DTN TCPCLv4                   August 2016


   Once the TCPCL connection is established and configured in this way,
   bundles can be transmitted in either direction.  Each bundle is
   transmitted in one or more logical segments of formatted bundle data.
   Each logical data segment consists of a DATA_SEGMENT message header,
   a Self-Delimiting Numeric Value (SDNV) as defined in [RFC6256]
   containing the length of the segment, and finally the byte range of
   the bundle data.  The choice of the length to use for segments is an
   implementation matter.  The first segment for a bundle must set the
   'start' flag, and the last one must set the 'end' flag in the
   DATA_SEGMENT message header.

   If multiple bundles are transmitted on a single TCPCL connection,
   they MUST be transmitted consecutively.  Interleaving data segments
   from different bundles is not allowed.  Bundle interleaving can be
   accomplished by fragmentation at the BP layer.

   An optional feature of the protocol is for the receiving node to send
   acknowledgments as bundle data segments arrive (ACK_SEGMENT).  The
   rationale behind these acknowledgments is to enable the sender node
   to determine how much of the bundle has been received, so that in
   case the connection is interrupted, it can perform reactive
   fragmentation to avoid re-sending the already transmitted part of the
   bundle.

   When acknowledgments are enabled, then for each data segment that is
   received, the receiving node sends an ACK_SEGMENT code followed by an
   SDNV containing the cumulative length of the bundle that has been
   received.  The sending node may transmit multiple DATA_SEGMENT
   messages without necessarily waiting for the corresponding
   ACK_SEGMENT responses.  This enables pipelining of messages on a
   channel.  In addition, there is no explicit flow control on the TCPCL
   layer.

   Another optional feature is that a receiver may interrupt the
   transmission of a bundle at any point in time by replying with a
   REFUSE_BUNDLE message, which causes the sender to stop transmission
   of the current bundle, after completing transmission of a partially
   sent data segment.  Note: This enables a cross-layer optimization in
   that it allows a receiver that detects that it already has received a
   certain bundle to interrupt transmission as early as possible and
   thus save transmission capacity for other bundles.

   For connections that are idle, a KEEPALIVE message may optionally be
   sent at a negotiated interval.  This is used to convey liveness
   information.

   Finally, before connections close, a SHUTDOWN message is sent on the
   channel.  After sending a SHUTDOWN message, the sender of this



Sipos, et al.           Expires February 2, 2017                [Page 6]

Internet-Draft                 DTN TCPCLv4                   August 2016


   message may send further acknowledgments (ACK_SEGMENT or
   REFUSE_BUNDLE) but no further data messages (DATA_SEGMENT).  A
   SHUTDOWN message may also be used to refuse a connection setup by a
   peer.

3.1.  Bidirectional Use of TCP Connection

   There are specific messages for sending and receiving operations (in
   addition to connection setup/teardown).  TCPCL is symmetric, i.e.,
   both sides can start sending data segments in a connection, and one
   side's bundle transfer does not have to complete before the other
   side can start sending data segments on its own.  Hence, the protocol
   allows for a bi-directional mode of communication.

   Note that in the case of concurrent bidirectional transmission,
   acknowledgment segments may be interleaved with data segments.

3.2.  Example Message Exchange

   The following figure visually depicts the protocol exchange for a
   simple session, showing the connection establishment and the
   transmission of a single bundle split into three data segments (of
   lengths L1, L2, and L3) from Node A to Node B.

   Note that the sending node may transmit multiple DATA_SEGMENT
   messages without necessarily waiting for the corresponding
   ACK_SEGMENT responses.  This enables pipelining of messages on a
   channel.  Although this example only demonstrates a single bundle
   transmission, it is also possible to pipeline multiple DATA_SEGMENT
   messages for different bundles without necessarily waiting for
   ACK_SEGMENT messages to be returned for each one.  However,
   interleaving data segments from different bundles is not allowed.

   No errors or rejections are shown in this example.

















Sipos, et al.           Expires February 2, 2017                [Page 7]

Internet-Draft                 DTN TCPCLv4                   August 2016


                 Node A                              Node B
                 ======                              ======
       +-------------------------+         +-------------------------+
       |     Contact Header      | ->   <- |     Contact Header      |
       +-------------------------+         +-------------------------+

       +-------------------------+
       |   DATA_SEGMENT (start)  | ->
       |    SDNV length [L1]     | ->
       |  Bundle Data 0..(L1-1)  | ->
       +-------------------------+
       +-------------------------+         +-------------------------+
       |     DATA_SEGMENT        | ->   <- |       ACK_SEGMENT       |
       |    SDNV length [L2]     | ->   <- |     SDNV length [L1]    |
       |Bundle Data L1..(L1+L2-1)| ->      +-------------------------+
       +-------------------------+
       +-------------------------+         +-------------------------+
       |    DATA_SEGMENT (end)   | ->   <- |       ACK_SEGMENT       |
       |     SDNV length [L3]    | ->   <- |   SDNV length [L1+L2]   |
       |Bundle Data              | ->      +-------------------------+
       |    (L1+L2)..(L1+L2+L3-1)|
       +-------------------------+
                                           +-------------------------+
                                        <- |       ACK_SEGMENT       |
                                        <- |  SDNV length [L1+L2+L3] |
                                           +-------------------------+

       +-------------------------+         +-------------------------+
       |       SHUTDOWN          | ->   <- |         SHUTDOWN        |
       +-------------------------+         +-------------------------+

   Figure 2: A Simple Visual Example of the Flow of Protocol Messages on
             a Single TCP Session between Two Nodes (A and B)

4.  Connection Establishment

   For bundle transmissions to occur using the TCPCL, a TCPCL connection
   must first be established between communicating nodes.  It is up to
   the implementation to decide how and when connection setup is
   triggered.  For example, some connections may be opened proactively
   and maintained for as long as is possible given the network

   conditions, while other connections may be opened only when there is
   a bundle that is queued for transmission and the routing algorithm
   selects a certain next-hop node.

   To establish a TCPCL connection, a node must first establish a TCP
   connection with the intended peer node, typically by using the



Sipos, et al.           Expires February 2, 2017                [Page 8]

Internet-Draft                 DTN TCPCLv4                   August 2016


   services provided by the operating system.  Port number 4556 has been
   assigned by IANA as the well-known port number for the TCP
   convergence layer.  Other port numbers MAY be used per local
   configuration.  Determining a peer's port number (if different from
   the well-known TCPCL port) is up to the implementation.

   If the node is unable to establish a TCP connection for any reason,
   then it is an implementation matter to determine how to handle the
   connection failure.  A node MAY decide to re-attempt to establish the
   connection.  If it does so, it MUST NOT overwhelm its target with
   repeated connection attempts.  Therefore, the node MUST retry the
   connection setup only after some delay (a 1-second minimum is
   RECOMMENDED), and it SHOULD use a (binary) exponential backoff
   mechanism to increase this delay in case of repeated failures.  In
   case a SHUTDOWN message specifying a reconnection delay is received,
   that delay is used as the initial delay.  The default initial delay
   SHOULD be at least 1 second but SHOULD be configurable since it will
   be application and network type dependent.

   The node MAY declare failure after one or more connection attempts
   and MAY attempt to find an alternate route for bundle data.  Such
   decisions are up to the higher layer (i.e., the BP).

   Once a TCP connection is established, each node MUST immediately
   transmit a contact header over the TCP connection.  The format of the
   contact header is described in Section 4.1.

   Upon receipt of the contact header, both nodes perform the validation
   and negotiation procedures defined in Section 4.2

   After receiving the contact header from the other node, either node
   MAY also refuse the connection by sending a SHUTDOWN message.  If
   connection setup is refused, a reason MUST be included in the
   SHUTDOWN message.

4.1.  Contact Header

   Once a TCP connection is established, both parties exchange a contact
   header.  This section describes the format of the contact header and
   the meaning of its fields.

   The format for the Contact Header is as follows:









Sipos, et al.           Expires February 2, 2017                [Page 9]

Internet-Draft                 DTN TCPCLv4                   August 2016


                         1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +---------------+---------------+---------------+---------------+
     |                          magic='dtn!'                         |
     +---------------+---------------+---------------+---------------+
     |     version   |              Option count (SDNV)              |
     +---------------+---------------+---------------+---------------+
     |                 Options list (sequence of TLV)                |
     +---------------+---------------+---------------+---------------+

                      Figure 3: Contact Header Format

   The fields of the contact header are:

   magic:  A four-byte field that always contains the byte sequence 0x64
      0x74 0x6e 0x21, i.e., the text string "dtn!" in US-ASCII (and UTF-
      8).

   version:  A one-byte field value containing the value 4 (current
      version of the protocol).

   Option count:  A SDNV-encoded count of connection options to follow.

   Option list:  A sequence of type-length-value (TLV) encoded
      connection options as shown in Figure 4 and described in
      Section 4.1.1

   Each option within a contact header represents the configuration of
   the peer which has sent the contact header.  The manner in which
   options are configured and chosen for the various parameters in the
   contact header is implementation dependent.

4.1.1.  Connection Option Encoding

   Each of the contact header Options SHALL be encoded as a sequence of
   TLV data as shown in Figure 4.

   Option Type:  An SDNV-encoded field which SHALL determine the
      encoding and interpretation of the option value.

   Value Length:  An SDNV-encoded field which SHALL define the length
      (in octets) of the Value Data to follow.  The Value Length does
      not include the length of the Option Type or Value Length fields
      themselves.

   Value Data:  The encoded type-dependent data of the option.





Sipos, et al.           Expires February 2, 2017               [Page 10]

Internet-Draft                 DTN TCPCLv4                   August 2016


   The order of items within the Option list SHALL not be significant.
   Each option type SHALL be present no more than one time in a Contact
   Header.  Each option type SHALL be considered to have a default value
   if not present in a contact header.  The option type defines how the
   particular Value Data is encoded and interpreted.  If a TCPCL peer
   receives an Option Type which is unknown to it, the peer may send a
   SHUTDOWN and terminate the connection.  Otherwise, the peer SHALL
   ignore the option and continue contact header processing.

                         +-----------------------+
                         |  Option Type (SDNV)   |
                         +-----------------------+
                         |  Value Length (SDNV)  |
                         +-----------------------+
                         | Value Data (variable) |
                         +-----------------------+

                    Figure 4: Connection Option Format

4.2.  Validation and Parameter Negotiation

   Upon reception of the contact header, each node follows the following
   procedures to ensure the validity of the TCPCL connection and to
   negotiate values for the connection parameters.

   If the magic string is not present or is not valid, the connection
   MUST be terminated.  The intent of the magic string is to provide
   some protection against an inadvertent TCP connection by a different
   protocol than the one described in this document.  To prevent a flood
   of repeated connections from a misconfigured application, a node MAY
   elect to hold an invalid connection open and idle for some time
   before closing it.

   If a node receives a contact header containing a version that is
   greater than the current version of the protocol that the node
   implements, then the node SHALL terminate the connection.  If a node
   receives a contact header with a version that is lower than the
   version of the protocol that the node implements, the node may either
   terminate the connection due to the version mismatch or may adapt its
   operation to conform to the older version of the protocol.  This
   decision is an implementation matter.

   A node calculates the parameters for a TCPCL connection by
   negotiating the values from its own preferences (conveyed by the
   contact header it sent to the peer) with the preferences of the peer
   node (expressed in the contact header that it received from the
   peer).




Sipos, et al.           Expires February 2, 2017               [Page 11]

Internet-Draft                 DTN TCPCLv4                   August 2016


   The negotatiated parameters defined by this specification are listed
   in Table 1 and described in the following paragraphs.

   +--------------+------+---------------------------------------------+
   | Type         | Code | Description                                 |
   +--------------+------+---------------------------------------------+
   | Handle       | 0x1  | Determine how peer handles LENGTH messages. |
   | LENGTH       |      |                                             |
   |              |      |                                             |
   | Acknowledge  | 0x2  | Determine how peer handles acknowledgment   |
   | Intermediate |      | of non-final bundle segments.               |
   |              |      |                                             |
   | Acknowledge  | 0x3  | Determine how peer handles acknowledgement  |
   | Bundle       |      | of final bundle segments and bundle         |
   |              |      | refusal.                                    |
   |              |      |                                             |
   | Keepalive    | 0x4  | The maximum keepalive interval of the peer. |
   |              |      |                                             |
   | Peer EID     | 0x5  | The Endpoint ID of the peer.                |
   |              |      |                                             |
   | BP Versions  | 0x6  | The set of BP versions supported by the     |
   |              |      | peer.                                       |
   |              |      |                                             |
   | Segment MRU  | 0x7  | The largest segment length supported by the |
   |              |      | peer.                                       |
   |              |      |                                             |
   | Handle TLS   | 0x8  | Determine how peer handles STARTTLS         |
   |              |      | messages.                                   |
   +--------------+------+---------------------------------------------+

                     Table 1: Connection Option Types

   Handle LENGTH:  This parameter is a value enumerated by Table 2 and
      encoded as a single octet.  The value determines whether LENGTH
      messages (as described in Section 5.4.4) are handled by this peer.

      If the value is IGNORE then the LENGTH message SHOULD NOT be sent
      to this peer.  If the value is ALLOW then the LENGTH message
      SHOULD be sent to this peer.  If the value is REQUIRE then the
      LENGTH message SHALL be sent to this peer.  The default Handle
      LENGTH value is ALLOW.

   Acknowledge Intermediate:  This parameter is a value enumerated by
      Table 2 and encoded as a single octet.  The value determines how
      any non-final ACK_SEGMENT (i.e. one with its E flag not set as
      described in Section 5.4.2) is handled by this peer.





Sipos, et al.           Expires February 2, 2017               [Page 12]

Internet-Draft                 DTN TCPCLv4                   August 2016


      If the value is IGNORE then any non-final ACK_SEGMENT message
      SHOULD NOT be sent to this peer.  If the value is ALLOW then any
      non-final ACK_SEGMENT message SHOULD be sent to this peer.  If the
      value is REQUIRE then any non-final ACK_SEGMENT message SHALL be
      sent to this peer.  The default Acknowledge Intermediate value is
      ALLOW.

   Acknowledge Bundle:  This parameter is a value enumerated by Table 2
      and encoded as a single octet.  The value determines how any final
      ACK_SEGMENT (i.e. one with its E flag set as described in
      Section 5.4.2) is handled by this peer.  This value also
      determines how any REFUSE_BUNDLE message is handled by this peer.

      If the value is IGNORE then any final ACK_SEGMENT or REFUSE_BUNDLE
      message SHOULD NOT be sent to this peer.  If the value is ALLOW
      then any final ACK_SEGMENT or REFUSE_BUNDLE message SHOULD be sent
      to this peer.  If the value is REQUIRE then any final ACK_SEGMENT
      or REFUSE_BUNDLE message SHALL be sent to this peer.  The default
      Acknowledge Bundle value is ALLOW.

   Keepalive:  This parameter is encoded as a two-octet unsigned integer
      in network byte order (U16).  The value is the maximum keepalive
      time interval (in seconds) for this peer.  The negotiated
      keepalive interval is set to the minimum value from both contact
      headers.  If one or both contact headers contains the value zero,
      then the keepalive feature (described in Section 5.2.1) is
      disabled.  The default Keepalive value is zero.

   Peer EID:  This parameter is a byte string containing the UTF-8
      encoded EID of some singleton endpoint in which the sending node
      is a member, in the canonical format of <scheme name>:<scheme-
      specific part>.  The default Peer EID value is the empty string.

   BP Versions:  This parameter is a sequence of bytes, each containing
      an individual Bundle Protocol version number supported by this
      peer.  The set of supported BP versions of the connection is the
      intersection of the BP versions indicated by both of the contact
      headers.

      If interoperating with a TCPCL Version 3 node, a TCPCL Version 4
      node MAY assume that the TCPCL Version 3 node supports exactly one
      BP Version: 0x06 of [RFC5050].  If there is no common supported BP
      version then the connection SHOULD be shutdown with reason
      "Contact Failure", as no possible bundle exchange can occur.
      Otherwise, the default BP Versions value is the single version 4
      (this specification).





Sipos, et al.           Expires February 2, 2017               [Page 13]

Internet-Draft                 DTN TCPCLv4                   August 2016


   Segment MRU:  This parameter is an SDNV-encoded integer.  The value
      indicates the maximum Data Length within of DATA_SEGMENT which
      this peer will accept, or zero if there is no maximum length.  Any
      DATA_SEGMENT send to this peer SHALL have a data payload no longer
      than this peer's maximum length.  The default Segment MRU value is
      zero.

   +---------+------+--------------------------------------------------+
   | Name    | Code | Description                                      |
   +---------+------+--------------------------------------------------+
   | IGNORE  | 0x01 | The peer sending this option will ignore any     |
   |         |      | such messages.                                   |
   |         |      |                                                  |
   | ALLOW   | 0x02 | The peer sending this option will process any    |
   |         |      | such messages and act upon the data.             |
   |         |      |                                                  |
   | REQUIRE | 0x03 | The peer sending this option will refuse to      |
   |         |      | operate without such messages.                   |
   +---------+------+--------------------------------------------------+

                   Table 2: Receiver Handle Enumeration

   Once this process of parameter negotiation is completed, the protocol
   defines no additional mechanism to change the parameters of an
   established connection; to effect such a change, the connection MUST
   be terminated and a new connection established.

5.  Established Connection Operation

   This section describes the protocol operation for the duration of an
   established connection, including the mechanisms for transmitting
   bundles over the connection.

5.1.  Message Type Codes

   After the initial exchange of a contact header, all messages
   transmitted over the connection are identified by a one-byte header
   with the following structure:

                                0 1 2 3 4 5 6 7
                               +-+-+-+-+-+-+-+-+
                               | type  | flags |
                               +-+-+-+-+-+-+-+-+

              Figure 5: Format of the One-Byte Message Header

   type: Indicates the type of the message as per Table 3 below.




Sipos, et al.           Expires February 2, 2017               [Page 14]

Internet-Draft                 DTN TCPCLv4                   August 2016


   flags: Optional flags defined based on message type.

   The types and values for the message type code are as follows.

   +---------------+------+--------------------------------------------+
   | Type          | Code | Description                                |
   +---------------+------+--------------------------------------------+
   | DATA_SEGMENT  | 0x1  | Indicates the transmission of a segment of |
   |               |      | bundle data, as described in Section       |
   |               |      | 5.4.1.                                     |
   |               |      |                                            |
   | ACK_SEGMENT   | 0x2  | Acknowledges reception of a data segment,  |
   |               |      | as described in Section 5.4.2.             |
   |               |      |                                            |
   | REFUSE_BUNDLE | 0x3  | Indicates that the transmission of the     |
   |               |      | current bundle SHALL be stopped, as        |
   |               |      | described in Section 5.4.3.                |
   |               |      |                                            |
   | KEEPALIVE     | 0x4  | KEEPALIVE message for the connection, as   |
   |               |      | described in Section 5.2.1.                |
   |               |      |                                            |
   | SHUTDOWN      | 0x5  | Indicates that one of the nodes            |
   |               |      | participating in the connection wishes to  |
   |               |      | cleanly terminate the connection, as       |
   |               |      | described in Section 6.                    |
   |               |      |                                            |
   | LENGTH        | 0x6  | Contains the length (in bytes) of the next |
   |               |      | bundle, as described in Section 5.4.4.     |
   +---------------+------+--------------------------------------------+

                       Table 3: TCPCL Message Types

5.2.  Upkeep and Status Messages

5.2.1.  Connection Upkeep (KEEPALIVE)

   The protocol includes a provision for transmission of KEEPALIVE
   messages over the TCP connection to help determine if the connection
   has been disrupted.

   As described in Section 4.1, one of the parameters in the contact
   header is the keepalive_interval.  Both sides populate this field
   with their requested intervals (in seconds) between KEEPALIVE
   messages.

   The format of a KEEPALIVE message is a one-byte message type code of
   KEEPALIVE (as described in Table 2) with no additional data.  Both
   sides SHOULD send a KEEPALIVE message whenever the negotiated



Sipos, et al.           Expires February 2, 2017               [Page 15]

Internet-Draft                 DTN TCPCLv4                   August 2016


   interval has elapsed with no transmission of any message (KEEPALIVE
   or other).

   If no message (KEEPALIVE or other) has been received for at least
   twice the keepalive_interval, then either party MAY terminate the
   session by transmitting a one-byte SHUTDOWN message (as described in
   Table 2) and by closing the TCP connection.

   Note: The keepalive_interval should not be chosen too short as TCP
   retransmissions may occur in case of packet loss.  Those will have to
   be triggered by a timeout (TCP retransmission timeout (RTO)), which
   is dependent on the measured RTT for the TCP connection so that
   KEEPALIVE messages may experience noticeable latency.

5.2.2.  Message Rejection (REJECT)

   If a TCPCL endpoint receives a message which is uknown to it
   (possibly due to an unhandled protocol mismatch) or is inappropriate
   for the current connection state (e.g. a KEEPALIVE or LENGTH message
   received after feature negotation has disabled those features), there
   is a protocol-level message to signal this condition in the form of a
   REJECT reply.

   The format of a REJECT message follows:

                      +-----------------------------+
                      |       Message Header        |
                      +-----------------------------+
                      |   Rejected Message Header   |
                      +-----------------------------+
                      |     Reason Code (byte)      |
                      +-----------------------------+

                    Figure 6: Format of REJECT Messages

   The Rejected Message Header is a copy of the Message Header to which
   the REJECT message is sent as a response.  The REJECT Reason Code
   indicates why the REJECT itself was sent.  The specified values of
   the reason code are:












Sipos, et al.           Expires February 2, 2017               [Page 16]

Internet-Draft                 DTN TCPCLv4                   August 2016


   +-------------+------+----------------------------------------------+
   | Name        | Code | Description                                  |
   +-------------+------+----------------------------------------------+
   | Message     | 0x01 | A message was received with a Message Type   |
   | Type        |      | code unknown to the TCPCL endpoint.          |
   | Unknown     |      |                                              |
   |             |      |                                              |
   | Message     | 0x02 | A message was received but the TCPCL         |
   | Unsupported |      | endpoint cannot comply with the message      |
   |             |      | contents.                                    |
   |             |      |                                              |
   | Message     | 0x03 | A message was received while the connection  |
   | Unexpected  |      | is in a state in which the message is not    |
   |             |      | expected.                                    |
   +-------------+------+----------------------------------------------+

                       Table 4: REJECT Reason Codes

5.3.  Connection Security

   This version of the TCPCL supports establishing a connection-level
   Transport Layer Security (TLS) session within an existing TCPCL
   connection.

   When TLS is used within the TCPCL it affects the entire connection,
   and it can technically be initiated by either endpoint of the
   connection.  By convention, this protocol uses the endpoint which
   initiated the underlying TCP connection as the initiator of the TLS
   session request.  Once a TLS session is established within TCPCL,
   there is no mechanism provided to end the TLS session and downgrade
   the connection.  If a non-TLS connection is desired after a TLS
   session is started then the entire TCPCL connection MUST be shutdown
   first.

5.3.1.  Requester Role

   A STARTTLS message SHOULD be sent by the TCP client immediately after
   reception of the TCPCL Contact Header from the server.  Upon sending
   a STARTTLS message, the requester SHALL enter a waiting state.

   While in the waiting state, upon reception of a confirmation STARTTLS
   message the requestor SHALL begin a TLS handshake in accordance with
   [RFC5246].  While in the waiting state, the recepiton of any message
   other than a STARTTLS reply MAY cause a connection shutdown depending
   upon security policy of the endpoint.






Sipos, et al.           Expires February 2, 2017               [Page 17]

Internet-Draft                 DTN TCPCLv4                   August 2016


5.3.2.  Responder Role

   Upon reception of a STARTTLS message while not already within a TLS
   session and while not acting as a TLS requester and if the endpoint
   supports TLS connections, a STARTTLS message SHALL be sent in
   response.  If an endpoint receives a STARTTLS message but cannot
   support a TLS connection (for any reason) then a REJECT message SHALL
   be sent in response containing a Reason Code of "Message Unsupported.
   Upon reception of a STARTTLS message while already within a TLS
   session, a REJECT message SHOULD be sent in response containing a
   Reason Code of "Message Unexpected".  Upon sending a response
   STARTTLS message the responder SHALL begin a TLS handshake in
   accordance with [RFC5246].

5.3.3.  TLS Handshake Result

   If a TLS handshake cannot negotiate a TLS session, either endpoint of
   the TCPCL connection SHOULD cause a TCPCL shutdown with reason "TLS
   negotiation failed".  After a TLS handshake failure, if the
   connection is not shutdown then either endpoint MAY request a new TLS
   handshake.  Unless the TLS parameters change between two sequential
   handshakes, the subsequent handshake is likely to fail just as the
   earlier one.

   After a TLS session is successfuly established, both TCPCL endpoints
   SHALL re-exchange TCPCL Contact Header messages.  Any information
   cached from the prior Contact Header exchange SHALL be discarded.
   This re-exchange avoids man-in-the-middle attack in identical fashon
   to [RFC2595].

5.3.4.  Example TLS Initiation

   A summary of a typical STARTTLS usage is shown in the sequence below
   where the client/requester role is represented by the prefix "C" and
   the server/responder role is represented by the prefix "S".
   Unordered or "simultaneous" actions are shown as "C/S".















Sipos, et al.           Expires February 2, 2017               [Page 18]

Internet-Draft                 DTN TCPCLv4                   August 2016


                 Node A                              Node B
                 ======                              ======

       +-------------------------+
       |  Open TCP Connnection   | ->
       +-------------------------+         +-------------------------+
                                        <- |   Accept Connection     |
                                           +-------------------------+

       +-------------------------+         +-------------------------+
       |     Contact Header      | ->   <- |     Contact Header      |
       +-------------------------+         +-------------------------+

                       ... plaintext TCPCL messaging ...

       +-------------------------+
       |       STARTTLS          | ->
       +-------------------------+         +-------------------------+
                                        <- |       STARTTLS          |
                                           +-------------------------+

       +-------------------------+         +-------------------------+
       |     TLS Negotiation     | ->   <- |     TLS Negotiation     |
       +-------------------------+         +-------------------------+

       +-------------------------+         +-------------------------+
       |     Contact Header      | ->   <- |     Contact Header      |
       +-------------------------+         +-------------------------+

                       ... secured TCPCL messaging ...

       +-------------------------+         +-------------------------+
       |       SHUTDOWN          | ->   <- |         SHUTDOWN        |
       +-------------------------+         +-------------------------+

   Figure 7: A simple visual example of TCPCL TLS Establishment between
                                 two nodes

5.4.  Bundle Transfer

   All of the message in this section are directly associated with
   tranfering a bundle between TCPCL endpoints.  Each of the messages
   contains a Bundle ID number which is used to correlate messages
   originating from sender and receiver of a bundle.  The Bundle ID
   provides a similar behaivior to a datagram sequence number, but there
   are no requirements on Bundle ID ordering or reuse.





Sipos, et al.           Expires February 2, 2017               [Page 19]

Internet-Draft                 DTN TCPCLv4                   August 2016


   Bundle IDs SHOULD be unique within a limited scope dependant upon
   implementation needs.  Sequential bundle transfers SHALL NOT use the
   same Bundle ID.  Bundle ID numbers MAY be reused after a window of
   either count or time.  Bundle ID reuse SHOULD take into account
   unacknowledged bundle segments if acknowledgement is used within a
   connection.  For example, Bundle IDs in the range 1--50 inclusive can
   be used for sequential bundle transmissions in ascending order before
   recycling back to 1.  This allows discrimination between 50 adjacent
   bundle transfers.

   A TCPCL endpoint SHALL support Bundle IDs at least between 0 and 2^14
   (two-bytes encoded).  A TCPCL endpoint MAY support larger Bundle IDs
   depending upon implementation needs.  For bidirectional bundle
   transfers, a TCPCL endpoint SHOULD NOT rely on any relation between
   Bundle IDs originating from each side of the TCPCL connection.  Upon
   reception of a Bundle ID not able to be handled by an endpoint, a
   REFUSE_BUNDLE message SHOULD be sent in response.

5.4.1.  Bundle Data Transmission (DATA_SEGMENT)

   Each bundle is transmitted in one or more data segments.  The format
   of a DATA_SEGMENT message follows in Figure 8 and its use of header
   flags is shown in Figure 9.

                      +-----------------------------+
                      |       Message Header        |
                      +-----------------------------+
                      |      Bundle ID (SDNV)       |
                      +-----------------------------+
                      |     Data length (SDNV)      |
                      +-----------------------------+
                      | Data contents (byte string) |
                      +-----------------------------+

                 Figure 8: Format of DATA_SEGMENT Messages

                                  4 5 6 7
                                 +-+-+-+-+
                                 |0|0|S|E|
                                 +-+-+-+-+

               Figure 9: Format of DATA_SEGMENT Header flags

   The type portion of the message header contains the value 0x1.

   The flags portion of the message header byte contains two optional
   values in the two low-order bits, denoted 'S' and 'E' above.  The 'S'
   bit MUST be set to one if it precedes the transmission of the first



Sipos, et al.           Expires February 2, 2017               [Page 20]

Internet-Draft                 DTN TCPCLv4                   August 2016


   segment of a new bundle.  The 'E' bit MUST be set to one when
   transmitting the last segment of a bundle.

   Following the message header, the length field is an SDNV containing
   the number of bytes of bundle data that are transmitted in this
   segment.  Following this length is the actual data contents.

   Determining the size of the segment is an implementation matter.  In
   particular, a node may, based on local policy or configuration, only
   ever transmit bundle data in a single segment, in which case both the
   'S' and 'E' bits MUST be set to one.

   In the Bundle Protocol specification [RFC5050], a single bundle
   comprises a primary bundle block, a payload block, and zero or more
   additional bundle blocks.  The relationship between the protocol
   blocks and the convergence-layer segments is an implementation-
   specific decision.  In particular, a segment MAY contain more than
   one protocol block; alternatively, a single protocol block (such as
   the payload) MAY be split into multiple segments.

   However, a single segment MUST NOT contain data of more than a single
   bundle.

   Once a transmission of a bundle has commenced, the node MUST only
   send segments containing sequential portions of that bundle until it
   sends a segment with the 'E' bit set.

5.4.2.  Bundle Acknowledgments (ACK_SEGMENT)

   Although the TCP transport provides reliable transfer of data between
   transport peers, the typical BSD sockets interface provides no means
   to inform a sending application of when the receiving application has
   processed some amount of transmitted data.  Thus, after transmitting
   some data, a Bundle Protocol agent needs an additional mechanism to
   determine whether the receiving agent has successfully received the
   segment.

   To this end, the TCPCL protocol offers an optional feature whereby a
   receiving node transmits acknowledgments of reception of data
   segments.  This feature is enabled if, and only if, during the
   exchange of contact headers, both parties set the flag to indicate
   that intermediate or final acknowledgments are enabled (see
   Section 4.1).

   The format of an ACK_SEGMENT message follows in Figure 10 and its use
   of header flags is the same as for DATA_SEGMENT (shown in Figure 9).
   The flags of an ACK_SEGMENT message SHALL be identical to the flags
   of the DATA_SEGMENT message for which it is a reply.



Sipos, et al.           Expires February 2, 2017               [Page 21]

Internet-Draft                 DTN TCPCLv4                   August 2016


                      +-----------------------------+
                      |       Message Header        |
                      +-----------------------------+
                      |      Bundle ID (SDNV)       |
                      +-----------------------------+
                      | Acknowledged length (SDNV)  |
                      +-----------------------------+

                 Figure 10: Format of ACK_SEGMENT Messages

   To transmit an acknowledgment, a node first transmits a message
   header with the ACK_SEGMENT type code and all flags set to zero, then
   transmits an SDNV containing the cumulative length in bytes of the
   received segment(s) of the current bundle.  The length MUST fall on a
   segment boundary.  That is, only full segments can be acknowledged.

   For example, suppose the sending node transmits four segments of
   bundle data with lengths 100, 200, 500, and 1000, respectively.
   After receiving the first segment, the node sends an acknowledgment
   of length 100.  After the second segment is received, the node sends
   an acknowledgment of length 300.  The third and fourth
   acknowledgments are of length 800 and 1800, respectively.

5.4.3.  Bundle Refusal (REFUSE_BUNDLE)

   As bundles may be large, the TCPCL supports an optional mechanisms by
   which a receiving node may indicate to the sender that it does not
   want to receive the corresponding bundle.

   To do so, upon receiving a LENGTH or DATA_SEGMENT message, the node
   MAY transmit a REFUSE_BUNDLE message.  As data segments and
   acknowledgments may cross on the wire, the bundle that is being
   refused SHALL be identified by the Bundle ID of the refusal.

   The format of the message is as follows:

                      +-----------------------------+
                      |       Message Header        |
                      +-----------------------------+
                      |      Bundle ID (SDNV)       |
                      +-----------------------------+

                Figure 11: Format of REFUSE_BUNDLE Messages








Sipos, et al.           Expires February 2, 2017               [Page 22]

Internet-Draft                 DTN TCPCLv4                   August 2016


                                  4 5 6 7
                                 +-+-+-+-+
                                 | RCode |
                                 +-+-+-+-+

              Figure 12: Format of REFUSE_BUNDLE Header flags

   The RCode field, which stands for "reason code", contains a value
   indicating why the bundle was refused.  The following table contains
   semantics for some values.  Other values may be registered with IANA,
   as defined in Section 8.

   +------------+-------+----------------------------------------------+
   | Name       | RCode | Semantics                                    |
   +------------+-------+----------------------------------------------+
   | Unknown    | 0x0   | Reason for refusal is unknown or not         |
   |            |       | specified.                                   |
   |            |       |                                              |
   | Completed  | 0x1   | The receiver now has the complete bundle.    |
   |            |       | The sender MAY now consider the bundle as    |
   |            |       | completely received.                         |
   |            |       |                                              |
   | No         | 0x2   | The receiver's resources are exhausted. The  |
   | Resources  |       | sender SHOULD apply reactive bundle          |
   |            |       | fragmentation before retrying.               |
   |            |       |                                              |
   | Retransmit | 0x3   | The receiver has encountered a problem that  |
   |            |       | requires the bundle to be retransmitted in   |
   |            |       | its entirety.                                |
   +------------+-------+----------------------------------------------+

                    Table 5: REFUSE_BUNDLE Reason Codes

   The receiver MUST, for each bundle preceding the one to be refused,
   have either acknowledged all DATA_SEGMENTs or refused the bundle.
   This allows the sender to identify the bundles accepted and refused
   by means of a simple FIFO list of segments and acknowledgments.

   The bundle refusal MAY be sent before the entire data segment is
   received.  If a sender receives a REFUSE_BUNDLE message, the sender
   MUST complete the transmission of any partially sent DATA_SEGMENT
   message (so that the receiver stays in sync).  The sender MUST NOT
   commence transmission of any further segments of the refused bundle
   subsequently.  Note, however, that this requirement does not ensure
   that a node will not receive another DATA_SEGMENT for the same bundle
   after transmitting a REFUSE_BUNDLE message since messages may cross
   on the wire; if this happens, subsequent segments of the bundle
   SHOULD also be refused with a REFUSE_BUNDLE message.



Sipos, et al.           Expires February 2, 2017               [Page 23]

Internet-Draft                 DTN TCPCLv4                   August 2016


   Note: If a bundle transmission is aborted in this way, the receiver
   may not receive a segment with the 'E' flag set to '1' for the
   aborted bundle.  The beginning of the next bundle is identified by
   the 'S' bit set to '1', indicating the start of a new bundle.

5.4.4.  Bundle Length (LENGTH)

   The LENGTH message contains the total length, in bytes, of the next
   bundle, formatted as an SDNV.  Its purpose is to allow nodes to
   preemptively refuse bundles that would exceed their resources.  It is
   an optimization.

   The format of the LENGTH message is as follows:

                      +-----------------------------+
                      |       Message Header        |
                      +-----------------------------+
                      |      Bundle ID (SDNV)       |
                      +-----------------------------+
                      | Total bundle length (SDNV)  |
                      +-----------------------------+

                   Figure 13: Format of LENGTH Messages

   LENGTH messages MUST NOT be sent unless the corresponding flag bit is
   set in the contact header.  If the flag bit is set, LENGTH messages
   MAY be sent at the sender's discretion.  LENGTH messages MUST NOT be
   sent unless the next DATA_SEGMENT message has the 'S' bit set to "1"
   (i.e., just before the start of a new bundle).

   A receiver MAY send a BUNDLE_REFUSE message as soon as it receives a
   LENGTH message without waiting for the next DATA_SEGMENT message.
   The sender MUST be prepared for this and MUST associate the refusal
   with the right bundle.

   Upon reception of a LENGTH message when either LENGTH has not been
   negotiated or not immediately before the start of a starting
   DATA_SEGMENT the reciever MAY send a REJECT message with a Reason
   Code of "Message Unexpected".

6.  Connection Termination

   This section describes the procedures for ending a TCPCL connection.








Sipos, et al.           Expires February 2, 2017               [Page 24]

Internet-Draft                 DTN TCPCLv4                   August 2016


6.1.  Shutdown Message (SHUTDOWN)

   To cleanly shut down a connection, a SHUTDOWN message MUST be
   transmitted by either node at any point following complete
   transmission of any other message.  In case acknowledgments have been
   negotiated, a node SHOULD acknowledge all received data segments
   first and then shut down the connection.

   The format of the SHUTDOWN message is as follows:

                   +-----------------------------------+
                   |       Message Header              |
                   +-----------------------------------+
                   |   Reason Code (optional byte)     |
                   +-----------------------------------+
                   | Reconnection Delay (optional U16) |
                   +-----------------------------------+

                  Figure 14: Format of SHUTDOWN Messages

                                  4 5 6 7
                                 +-+-+-+-+
                                 |0|0|R|D|
                                 +-+-+-+-+

                Figure 15: Format of SHUTDOWN Header flags

   It is possible for a node to convey additional information regarding
   the reason for connection termination.  To do so, the node MUST set
   the 'R' bit in the message header flags and transmit a one-byte
   reason code immediately following the message header.  The specified
   values of the reason code are:



















Sipos, et al.           Expires February 2, 2017               [Page 25]

Internet-Draft                 DTN TCPCLv4                   August 2016


   +------------+------+-----------------------------------------------+
   | Name       | Code | Description                                   |
   +------------+------+-----------------------------------------------+
   | Idle       | 0x00 | The connection is being closed due to         |
   | timeout    |      | idleness.                                     |
   |            |      |                                               |
   | Version    | 0x01 | The node cannot conform to the specified      |
   | mismatch   |      | TCPCL protocol version.                       |
   |            |      |                                               |
   | Busy       | 0x02 | The node is too busy to handle the current    |
   |            |      | connection.                                   |
   |            |      |                                               |
   | Contact    | 0x03 | The node cannot interpret or negotiate        |
   | Failure    |      | contact header option.                        |
   |            |      |                                               |
   | TLS        | 0x04 | The node failed to negotiate TLS session and  |
   | failure    |      | cannot continue the connection.               |
   +------------+------+-----------------------------------------------+

                      Table 6: SHUTDOWN Reason Codes

   It is also possible to convey a requested reconnection delay to
   indicate how long the other node must wait before attempting
   connection re-establishment.  To do so, the node sets the 'D' bit in

   the message header flags and then transmits an SDNV specifying the
   requested delay, in seconds, following the message header (and
   optionally, the SHUTDOWN reason code).  The value 0 SHALL be
   interpreted as an infinite delay, i.e., that the connecting node MUST
   NOT re-establish the connection.  In contrast, if the node does not
   wish to request a delay, it SHOULD omit the reconnection delay field
   (and set the 'D' bit to zero).  Note that in the figure above, the
   reconnection delay SDNV is represented as a two-byte field for
   convenience.

   A connection shutdown MAY occur immediately after TCP connection
   establishment or reception of a contact header (and prior to any
   further data exchange).  This may, for example, be used to notify
   that the node is currently not able or willing to communicate.
   However, a node MUST always send the contact header to its peer
   before sending a SHUTDOWN message.

   If either node terminates a connection prematurely in this manner, it
   SHOULD send a SHUTDOWN message and MUST indicate a reason code unless
   the incoming connection did not include the magic string.  If a node
   does not want its peer to reopen the connection immediately, it
   SHOULD set the 'D' bit in the flags and include a reconnection delay




Sipos, et al.           Expires February 2, 2017               [Page 26]

Internet-Draft                 DTN TCPCLv4                   August 2016


   to indicate when the peer is allowed to attempt another connection
   setup.

   If a connection is to be terminated before another protocol message
   has completed, then the node MUST NOT transmit the SHUTDOWN message
   but still SHOULD close the TCP connection.  In particular, if the
   connection is to be closed (for whatever reason) while a node is in
   the process of transmitting a bundle data segment, the receiving node
   is still expecting segment data and might erroneously interpret the
   SHUTDOWN message to be part of the data segment.

6.2.  Idle Connection Shutdown

   The protocol includes a provision for clean shutdown of idle TCP
   connections.  Determining the length of time to wait before closing
   idle connections, if they are to be closed at all, is an
   implementation and configuration matter.

   If there is a configured time to close idle links and if no bundle
   data (other than KEEPALIVE messages) has been received for at least
   that amount of time, then either node MAY terminate the connection by
   transmitting a SHUTDOWN message indicating the reason code of 'Idle
   timeout' (as described in Table 4).  After receiving a SHUTDOWN
   message in response, both sides may close the TCP connection.

7.  Security Considerations

   One security consideration for this protocol relates to the fact that
   nodes present their endpoint identifier as part of the connection
   header exchange.  It would be possible for a node to fake this value
   and present the identity of a singleton endpoint in which the node is
   not a member, essentially masquerading as another DTN node.  If this
   identifier is used outside of a TLS-secured session or without
   further verification as a means to determine which bundles are
   transmitted over the connection, then the node that has falsified its
   identity may be able to obtain bundles that it should not have.
   Therefore, a node SHALL NOT use the endpoint identifier conveyed in
   the TCPCL connection message to derive a peer node's identity unless
   it can corroborate it via other means.

   These concerns may be mitigated through the use of the Bundle
   Security Protocol [RFC6257].  In particular, the Bundle
   Authentication Block defines mechanism for secure exchange of bundles
   between DTN nodes.  Thus, an implementation could delay trusting the
   presented endpoint identifier until the node can securely validate
   that its peer is in fact the only member of the given singleton
   endpoint.




Sipos, et al.           Expires February 2, 2017               [Page 27]

Internet-Draft                 DTN TCPCLv4                   August 2016


   TCPCL can be used to provide point-to-point transport security, but
   does not provide security of data-at-rest and does not guarantee end-
   to-end bundle security.  The mechanisms defined in [RFC6257] and
   [I-D.ietf-dtn-bpsec] are to be used instead.

   Even when using TLS to secure the TCPCL connection, the actual
   ciphersuite negotiated between the TLS peers may be insecure.  TLS
   can be used to perform authentication without data confidentiality,
   for example.  It is up to security policies within each TCPCL node to
   ensure that the negotiated TLS ciphersuite meets transport security
   requirements.  This is identical behavior to STARTTLS use in
   [RFC2595].

   Another consideration for this protocol relates to denial-of-service
   attacks.  A node may send a large amount of data over a TCP
   connection, requiring the receiving node to handle the data, attempt
   to stop the flood of data by sending a REFUSE_BUNDLE message, or
   forcibly terminate the connection.  This burden could cause denial of
   service on other, well-behaving connections.  There is also nothing
   to prevent a malicious node from continually establishing connections
   and repeatedly trying to send copious amounts of bundle data.  A
   listening node MAY take countermeasures such as ignoring TCP SYN
   messages, closing TCP connections as soon as they are established,
   waiting before sending the contact header, sending a SHUTDOWN message
   quickly or with a delay, etc.

8.  IANA Considerations

   In this section, registration procedures are as defined in [RFC5226]

8.1.  Port Number

   Port number 4556 has been previously assigned as the default port for
   the TCP convergence layer in [RFC7242].  This assignment is unchanged
   by protocol version 4.
















Sipos, et al.           Expires February 2, 2017               [Page 28]

Internet-Draft                 DTN TCPCLv4                   August 2016


     +------------------------+-------------------------------------+
     | Parameter              | Value                               |
     +------------------------+-------------------------------------+
     | Service Name:          | dtn-bundle                          |
     |                        |                                     |
     | Transport Protocol(s): | TCP                                 |
     |                        |                                     |
     | Assignee:              | Simon Perreault <simon@per.reau.lt> |
     |                        |                                     |
     | Contact:               | Simon Perreault <simon@per.reau.lt> |
     |                        |                                     |
     | Description:           | DTN Bundle TCP CL Protocol          |
     |                        |                                     |
     | Reference:             | [RFC7242]                           |
     |                        |                                     |
     | Port Number:           | 4556                                |
     +------------------------+-------------------------------------+

8.2.  Protocol Versions

   IANA has created, under the "Bundle Protocol" registry, a sub-
   registry titled "Bundle Protocol TCP Convergence-Layer Version
   Numbers" and initialized it with the following table.  The
   registration procedure is RFC Required.

               +-------+-------------+---------------------+
               | Value | Description | Reference           |
               +-------+-------------+---------------------+
               | 0     | Reserved    | [RFC7242]           |
               |       |             |                     |
               | 1     | Reserved    | [RFC7242]           |
               |       |             |                     |
               | 2     | Reserved    | [RFC7242]           |
               |       |             |                     |
               | 3     | TCPCL       | [RFC7242]           |
               |       |             |                     |
               | 4     | TCPCLbis    | This specification. |
               |       |             |                     |
               | 5-255 | Unassigned  |
               +-------+-------------+---------------------+

8.3.  Message Types

   IANA has created, under the "Bundle Protocol" registry, a sub-
   registry titled "Bundle Protocol TCP Convergence-Layer Message Types"
   and initialized it with the contents below.  The registration
   procedure is RFC Required.




Sipos, et al.           Expires February 2, 2017               [Page 29]

Internet-Draft                 DTN TCPCLv4                   August 2016


                       +----------+---------------+
                       | Code     | Message Type  |
                       +----------+---------------+
                       | 0x0      | Reserved      |
                       |          |               |
                       | 0x1      | DATA_SEGMENT  |
                       |          |               |
                       | 0x2      | ACK_SEGMENT   |
                       |          |               |
                       | 0x3      | REFUSE_BUNDLE |
                       |          |               |
                       | 0x4      | KEEPALIVE     |
                       |          |               |
                       | 0x5      | SHUTDOWN      |
                       |          |               |
                       | 0x6      | LENGTH        |
                       |          |               |
                       | 0x7      | REJECT        |
                       |          |               |
                       | 0x8      | STARTTLS      |
                       |          |               |
                       | 0x9--0xf | Unassigned    |
                       +----------+---------------+

                            Message Type Codes

8.4.  Connection Option Types

   IANA will createe, under the "Bundle Protocol" registry, a sub-
   registry titled "Bundle Protocol TCP Convergence-Layer Option Types"
   and initialize it with the contents below.  The registration
   procedure is RFC Required for values less than 2^14 (16384).  Values
   greater than or equal to 2^14 (16384) are to be used for experimental
   option types.

















Sipos, et al.           Expires February 2, 2017               [Page 30]

Internet-Draft                 DTN TCPCLv4                   August 2016


                +-------------+--------------------------+
                | Code        | Option Type              |
                +-------------+--------------------------+
                | 0x0         | Reserved                 |
                |             |                          |
                | 0x1         | Handle LENGTH            |
                |             |                          |
                | 0x2         | Acknowledge Intermediate |
                |             |                          |
                | 0x3         | Acknowledge Bundle       |
                |             |                          |
                | 0x4         | Keepalive                |
                |             |                          |
                | 0x5         | Peer EID                 |
                |             |                          |
                | 0x6         | BP Versions              |
                |             |                          |
                | 0x7         | Segment MRU              |
                |             |                          |
                | 0x8         | Handle TLS               |
                |             |                          |
                | 0x9--0x3ffe | Unassigned               |
                |             |                          |
                | 0x3fff--    | Experimental             |
                +-------------+--------------------------+

                            Message Type Codes

8.5.  REFUSE_BUNDLE Reason Codes

   IANA has created, under the "Bundle Protocol" registry, a sub-
   registry titled "Bundle Protocol TCP Convergence-Layer REFUSE_BUNDLE
   Reason Codes" and initialized it with the contents of Table 3.  The
   registration procedure is RFC Required.

















Sipos, et al.           Expires February 2, 2017               [Page 31]

Internet-Draft                 DTN TCPCLv4                   August 2016


                 +----------+---------------------------+
                 | Code     | Refusal Reason            |
                 +----------+---------------------------+
                 | 0x0      | Unknown                   |
                 |          |                           |
                 | 0x1      | Completed                 |
                 |          |                           |
                 | 0x2      | No Resources              |
                 |          |                           |
                 | 0x3      | Retransmit                |
                 |          |                           |
                 | 0x4--0x7 | Unassigned                |
                 |          |                           |
                 | 0x8--0xf | Reserved for future usage |
                 +----------+---------------------------+

                        REFUSE_BUNDLE Reason Codes

8.6.  SHUTDOWN Reason Codes

   IANA has created, under the "Bundle Protocol" registry, a sub-
   registry titled "Bundle Protocol TCP Convergence-Layer SHUTDOWN
   Reason Codes" and initialized it with the contents of Table 4.  The
   registration procedure is RFC Required.

                     +------------+------------------+
                     | Code       | Shutdown Reason  |
                     +------------+------------------+
                     | 0x00       | Idle timeout     |
                     |            |                  |
                     | 0x01       | Version mismatch |
                     |            |                  |
                     | 0x02       | Busy             |
                     |            |                  |
                     | 0x03       | Contact Failure  |
                     |            |                  |
                     | 0x04       | TLS failure      |
                     |            |                  |
                     | 0x05--0xFF | Unassigned       |
                     +------------+------------------+

                           SHUTDOWN Reason Codes

8.7.  REJECT Reason Codes

   EDITOR NOTE: sub-registry to-be-created upon publication of this
   specification.




Sipos, et al.           Expires February 2, 2017               [Page 32]

Internet-Draft                 DTN TCPCLv4                   August 2016


   IANA will create, under the "Bundle Protocol" registry, a sub-
   registry titled "Bundle Protocol TCP Convergence-Layer REJECT Reason
   Codes" and initialized it with the contents of Table 4.  The
   registration procedure is RFC Required.

                   +-----------+----------------------+
                   | Code      | Rejection Reason     |
                   +-----------+----------------------+
                   | 0x00      | reserved             |
                   |           |                      |
                   | 0x01      | Message Type Unknown |
                   |           |                      |
                   | 0x02      | Message Unsupported  |
                   |           |                      |
                   | 0x03      | Message Unexpected   |
                   |           |                      |
                   | 0x04-0xFF | Unassigned           |
                   +-----------+----------------------+

                            REJECT Reason Codes

9.  Acknowledgments

   This memo is based on comments on implementation of [RFC7242]
   provided from Scott Burleigh.

10.  References

10.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC5050]  Scott, K. and S. Burleigh, "Bundle Protocol
              Specification", RFC 5050, DOI 10.17487/RFC5050, November
              2007, <http://www.rfc-editor.org/info/rfc5050>.

   [RFC5226]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", BCP 26, RFC 5226,
              DOI 10.17487/RFC5226, May 2008,
              <http://www.rfc-editor.org/info/rfc5226>.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,
              DOI 10.17487/RFC5246, August 2008,
              <http://www.rfc-editor.org/info/rfc5246>.



Sipos, et al.           Expires February 2, 2017               [Page 33]

Internet-Draft                 DTN TCPCLv4                   August 2016


   [RFC6256]  Eddy, W. and E. Davies, "Using Self-Delimiting Numeric
              Values in Protocols", RFC 6256, DOI 10.17487/RFC6256, May
              2011, <http://www.rfc-editor.org/info/rfc6256>.

   [I-D.ietf-dtn-bpbis]
              Burleigh, S., Fall, K., and E. Birrane, "Bundle Protocol",
              draft-ietf-dtn-bpbis-04 (work in progress), July 2016.

   [refs.IANA-BP]
              IANA, "Bundle Protocol registry", May 2016.

10.2.  Informative References

   [RFC2595]  Newman, C., "Using TLS with IMAP, POP3 and ACAP",
              RFC 2595, DOI 10.17487/RFC2595, June 1999,
              <http://www.rfc-editor.org/info/rfc2595>.

   [RFC4838]  Cerf, V., Burleigh, S., Hooke, A., Torgerson, L., Durst,
              R., Scott, K., Fall, K., and H. Weiss, "Delay-Tolerant
              Networking Architecture", RFC 4838, DOI 10.17487/RFC4838,
              April 2007, <http://www.rfc-editor.org/info/rfc4838>.

   [RFC6257]  Symington, S., Farrell, S., Weiss, H., and P. Lovell,
              "Bundle Security Protocol Specification", RFC 6257,
              DOI 10.17487/RFC6257, May 2011,
              <http://www.rfc-editor.org/info/rfc6257>.

   [RFC7242]  Demmer, M., Ott, J., and S. Perreault, "Delay-Tolerant
              Networking TCP Convergence-Layer Protocol", RFC 7242,
              DOI 10.17487/RFC7242, June 2014,
              <http://www.rfc-editor.org/info/rfc7242>.

   [I-D.ietf-dtn-bpsec]
              Birrane, E. and K. McKeever, "Bundle Protocol Security
              Specification", draft-ietf-dtn-bpsec-02 (work in
              progress), July 2016.

Appendix A.  Significant changes from RFC7242

   The areas in which changes from [RFC7242] have been made to existing
   messages are:

   o  Added a bundle identification number to all bundle-related
      messages (LENGTH, DATA_SEGMENT, ACK_SEGMENT, REFUSE_BUNDLE).

   o  Added bundle protocol version negotation to contact header.

   o  Use flags in ACK_SEGMENT to mirror flags from DATA_SEGMENT.



Sipos, et al.           Expires February 2, 2017               [Page 34]

Internet-Draft                 DTN TCPCLv4                   August 2016


   The areas in which extensions from [RFC7242] have been made as new
   messages and codes are:

   o  Changed contact header negotation from single-octet bit flags to
      extensible TLV-encoded options.

   o  Added contact option to negotiate maximum segment size (per each
      direction).

   o  Added contact option to negotiate acceptable Bundle Protoocl
      versions.

   o  Added REJECT message to indicate an unknown or unhandled message
      was received.

   o  Added STARTTLS message and connection security mechanism.

   o  Added TLS failure SHUTDOWN reason code.

Authors' Addresses

   Brian Sipos
   RKF Engineering Solutions, LLC
   1229 19th Street NW
   Wasington, DC  20036
   US

   Email: BSipos@rkf-eng.com


   Michael Demmer
   University of California, Berkeley
   Computer Science Division
   445 Soda Hall
   Berkeley, CA  94720-1776
   US

   Email: demmer@cs.berkeley.edu


   Joerg Ott
   Aalto University
   Department of Communications and Networking
   PO Box 13000
   Aalto  02015
   Finland

   Email: jo@netlab.tkk.fi



Sipos, et al.           Expires February 2, 2017               [Page 35]

Internet-Draft                 DTN TCPCLv4                   August 2016


   Simon Perreault
   Quebec, QC
   Canada

   Email: simon@per.reau.lt














































Sipos, et al.           Expires February 2, 2017               [Page 36]
