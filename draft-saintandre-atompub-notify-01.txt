
Network Working Group                                     P. Saint-Andre
Internet-Draft                                Jabber Software Foundation
Expires: March 2, 2005                                     J. Hildebrand
                                                            Jabber, Inc.
                                                                B. Wyman
                                                              PubSub.com
                                                       September 1, 2004



   Transporting Atom Notifications over the Extensible Messaging and
                        Presence Protocol (XMPP)
                   draft-saintandre-atompub-notify-01


Status of this Memo


   By submitting this Internet-Draft, I certify that any applicable
   patent or other IPR claims of which I am aware have been disclosed,
   and any of which I become aware will be disclosed, in accordance with
   RFC 3668.


   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as
   Internet-Drafts.


   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."


   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.


   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.


   This Internet-Draft will expire on March 2, 2005.


Copyright Notice


   Copyright (C) The Internet Society (2004).  All Rights Reserved.


Abstract


   This memo describes a method for notifying interested parties about
   changes in syndicated information encapsulated in the Atom feed
   format, where such notifications are delivered via an extension to
   the Extensible Messaging and Presence Protocol (XMPP) for
   publish-subscribe functionality.




Saint-Andre, et al.      Expires March 2, 2005                  [Page 1]
Internet-Draft                ATOM-PUBSUB                 September 2004



Table of Contents


   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1   Overview . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.2   Terminology  . . . . . . . . . . . . . . . . . . . . . . .  4
     1.3   Discussion Venue . . . . . . . . . . . . . . . . . . . . .  4
   2.  Process Flows  . . . . . . . . . . . . . . . . . . . . . . . .  4
     2.1   Notification of Entry Creation . . . . . . . . . . . . . .  5
     2.2   Notification of Entry Modification . . . . . . . . . . . .  7
     2.3   Notification of Entry Deletion . . . . . . . . . . . . . .  8
   3.  Implementation Notes . . . . . . . . . . . . . . . . . . . . .  9
   4.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . .  9
   5.  Security Considerations  . . . . . . . . . . . . . . . . . . .  9
   6.  References . . . . . . . . . . . . . . . . . . . . . . . . . .  9
   6.1   Normative References . . . . . . . . . . . . . . . . . . . .  9
   6.2   Informative References . . . . . . . . . . . . . . . . . . . 10
       Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . 10
       Intellectual Property and Copyright Statements . . . . . . . . 11


































Saint-Andre, et al.      Expires March 2, 2005                  [Page 2]
Internet-Draft                ATOM-PUBSUB                 September 2004



1.  Introduction


1.1  Overview


   The Atom Publishing Format and Protocol Working Group has been
   chartered to develop two technologies relevant to content
   syndication:


   1.  A data format for syndication of information about
       periodically-updated resources (such as weblog entries and news
       stories) available on the World Wide Web.
   2.  A protocol for publishing, editing, deleting, and otherwise
       managing such resources.


   Content syndication follows a classic "observer" or
   "publish-subscribe" design pattern: a person or application publishes
   information to a "channel", and an event notification (or the data
   itself) is broadcasted to all those who are interested in knowing
   when information is published or modified for that channel.  On the
   Internet today, publication of periodically-updated resources is
   handled by means of standard technologies such as [HTTP], and it is
   not envisioned that this will change since [ATOM-PROTOCOL] specifies
   the use of HTTP for publication.  However, existing methods for
   learning that a resource has been updated are currently limited to
   "polling" for changes via HTTP, which is inherently inefficient.
   What is needed is a technology that can be relied on to "push"
   information only when a resource undergoes a state change, and only
   to those who are interested in learning about such state changes.


   One possible technology for doing so is email, since [SMTP] provides
   a way to initiate the sending of information from "publishers" to
   "subscribers" (think, for example, of email lists such as those used
   to announce newly-published RFCs).  While email is one possible
   solution, it is not necessarily the best solution for Atom; in
   particular, [ATOM-FORMAT] defines an XML data format for content
   syndication, which implies that it might be beneficial to use a
   native XML delivery mechanism rather than to attach a special XML
   media type to email messages.  Thankfully, a specialized XML delivery
   protocol has been developed through the IETF: the Extensible
   Messaging and Presence Protocol (XMPP) as specified in [XMPP-CORE].
   XMPP has the added benefit of being optimized for near-real-time data
   delivery, which may be important in applications of Atom that require
   subscribers to be notified about syndicated content in a highly
   timely manner.


   While the semantics of a normal XMPP <message/> element may be
   suitable for Atom content notifications, there also exists an XMPP
   extension that provides more structured communications in the context




Saint-Andre, et al.      Expires March 2, 2005                  [Page 3]
Internet-Draft                ATOM-PUBSUB                 September 2004



   of information "channels" or "nodes" of the kind that are used in
   content syndication.  This extension is specified in [XMPP-PUBSUB]
   and may be especially useful for delivering notifications related to
   changes in Atom resources.  Therefore, this memo describes a method
   for notifying interested parties about changes in syndicated
   information encapsulated in the Atom feed format, where such
   notifications are delivered via the XMPP publish-subscribe extension.


1.2  Terminology


   This document inherits terminology from [ATOM-FORMAT],
   [ATOM-PROTOCOL], [XMPP-CORE], and [XMPP-PUBSUB].


   The capitalized key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
   "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in RFC
   2119 [TERMS].


1.3  Discussion Venue


   The authors welcomes discussion and comments related to the topics
   presented in this document.  The preferred forum is the
   <atom-syntax@imc.org> mailing list, for which subscription
   information and archive links are available at
   <<http://www.ietf.org/html.charters/atompub-charter.html>>.


2.  Process Flows


   The following process flows demonstrate how Atom-formatted data
   (specifically, feed entries) can be delivered using the XMPP pubsub
   extension.  The actors in these process flows are an application and
   one or more XMPP users.  The application acts as a translator between
   HTTP and XMPP, since it generates XMPP pubsub requests when certain
   events occur at an Atom-aware HTTP service (e.g., an HTTP POST to
   create a new dynamic resource).  The XMPP pubsub service then
   translates those pubsub requests into notifications that are sent to
   a potentially large number of XMPP users who have subscribed to such
   events (e.g., who have asked to receive an XMPP notification whenever
   a new dynamic resource is created for a certain Atom "channel").  Of
   course, an XMPP user is not necessarily a human, and could represent
   another application on the XMPP network (e.g., a chatroom bot or a
   content management system).


   Note well that an HTTP user (e.g., a weblog author) would still
   publish information using the methods defined in [ATOM-PROTOCOL]; the
   process flows described herein enable the HTTP service with which an
   HTTP user interacts to generate notifications that are delivered via
   an XMPP pubsub service to a potentially large number of XMPP users




Saint-Andre, et al.      Expires March 2, 2005                  [Page 4]
Internet-Draft                ATOM-PUBSUB                 September 2004



   who want to receive such information.


   We can visualize the architecture as follows:


          +-----------+
          | HTTP User |
          +-----------+
               |
               | [Atom API]
               |
         +--------------+
         | HTTP Service |
         +--------------+
               |
               | [XMPP Pubsub]
               |
      +---------------------+
      | XMPP Pubsub Service |
      +---------------------+
               |
               | [XMPP Pubsub]
               |
          +-----------+
          | XMPP User |
          +-----------+



2.1  Notification of Entry Creation


   When a content author publishes a new dynamic resource, many entities
   may be interested in learning that the resource is now available.
   The process flow is as follows:


   o  Author publishes a new entry to the HTTP service via the Atom API.
   o  The HTTP service sends data for the new Atom entry in an XMPP
      pubsub "publish" request to a specific node at the XMPP pubsub
      service.
   o  The XMPP pubsub service sends an XMPP message notification to each
      XMPP entity that is subscribed to the pubsub node.


   The result is that the XMPP subscribers will receive something close
   to real-time notification whenever a new feed entry has been
   published.


   Obviously the first step is out of scope for this memo, since it is
   described in [ATOM-PROTOCOL].  The XMPP protocols for the last two
   steps are shown below.





Saint-Andre, et al.      Expires March 2, 2005                  [Page 5]
Internet-Draft                ATOM-PUBSUB                 September 2004



   First the HTTP service sends an XMPP pubsub "publish" request to the
   XMPP pubsub service:


   <iq type='set'
       from='http-service.example.org'
       to='pubsub.example.org'
       id='publish1'>
     <pubsub xmlns='http://jabber.org/protocol/pubsub'>
       <publish node='http://example.org/feeds/atom-example.xml'>
         <item id='70b2a83be71dfca04df91133d953fb22b41b4267'>
           <entry version='draft-ietf-atompub-format-01: do not deploy'
           xmlns='http://purl.org/atom/ns#draft-ietf-atompub-format-01'>
             <title>Atom-Powered Robots Run Amuck</title>
             <link rel='alternate'
                   type='text/html'
                   href='http://example.org/2003/12/13/atom03'/>
             <id>tag:example.org,2003-12-13:robots</id>
             <issued>2003-12-13T08:29:29-04:00</issued>
             <modified>2003-12-13T08:29:29-04:00</modified>
           </entry>
         </item>
       </publish>
     </pubsub>
   </iq>


   The XMPP pubsub service then sends a pubsub notification to each XMPP
   subscriber; depending on pubsub node configuration, the notification
   may or may not contain the Atom payload (we assume here that the
   payload will be delivered).


   <message from='pubsub.example.org'
            to='alice@example.net'>
     <event xmlns='http://jabber.org/protocol/pubsub#event'>
       <items node='http://example.org/feeds/atom-example.xml'>
         <item id='70b2a83be71dfca04df91133d953fb22b41b4267'>
           <entry version='draft-ietf-atompub-format-01: do not deploy'
           xmlns='http://purl.org/atom/ns#draft-ietf-atompub-format-01'>
             <title>Atom-Powered Robots Run Amuck</title>
             <link rel='alternate'
                   type='text/html'
                   href='http://example.org/2003/12/13/atom03'/>
             <id>tag:example.org,2003-12-13:robots</id>
             <issued>2003-12-13T08:29:29-04:00</issued>
             <modified>2003-12-13T08:29:29-04:00</modified>
           </entry>
         </item>
        </items>
     </event>




Saint-Andre, et al.      Expires March 2, 2005                  [Page 6]
Internet-Draft                ATOM-PUBSUB                 September 2004



   </message>



2.2  Notification of Entry Modification


   When a content author updates an existing dynamic resource, many
   entities may be interested in learning that the resource has been
   modified.  The process flow is as follows:


   o  Author updates an existing entry at the HTTP service via the Atom
      API.
   o  The HTTP service sends data for the updated Atom entry in an XMPP
      pubsub "publish" request to a specific node at the XMPP pubsub
      service, specifying the same Item ID as previously supplied.
   o  The XMPP pubsub service sends an XMPP message notification to each
      XMPP entity that is subscribed to the pubsub node.


   First the HTTP service sends an XMPP pubsub "publish" request to the
   XMPP pubsub service (note the modified title and time):


   <iq type='set'
       from='http-service.example.org'
       to='pubsub.example.org'
       id='publish2'>
     <pubsub xmlns='http://jabber.org/protocol/pubsub'>
       <publish node='http://example.org/feeds/atom-example.xml'>
         <item id='70b2a83be71dfca04df91133d953fb22b41b4267'>
           <entry version='draft-ietf-atompub-format-01: do not deploy'
           xmlns='http://purl.org/atom/ns#draft-ietf-atompub-format-01'>
             <title>Atom-Powered Robots Run Amok</title>
             <link rel='alternate'
                   type='text/html'
                   href='http://example.org/2003/12/13/atom03'/>
             <id>tag:example.org,2003-12-13:robots</id>
             <issued>2003-12-13T08:29:29-04:00</issued>
             <modified>2003-12-13T08:41:41-04:00</modified>
           </entry>
         </item>
       </publish>
     </pubsub>
   </iq>


   Subject to node configuration and/or subscription options, each XMPP
   subscriber would then receive a pubsub notification, which may or may
   not contain the Atom payload.







Saint-Andre, et al.      Expires March 2, 2005                  [Page 7]
Internet-Draft                ATOM-PUBSUB                 September 2004



   <message from='pubsub.example.org'
            to='alice@example.net'>
     <event xmlns='http://jabber.org/protocol/pubsub#event'>
       <items node='http://example.org/feeds/atom-example.xml'>
         <item id='70b2a83be71dfca04df91133d953fb22b41b4267'>
           <entry version='draft-ietf-atompub-format-01: do not deploy'
           xmlns='http://purl.org/atom/ns#draft-ietf-atompub-format-01'>
             <title>Atom-Powered Robots Run Amok</title>
             <link rel='alternate'
                   type='text/html'
                   href='http://example.org/2003/12/13/atom03'/>
             <id>tag:example.org,2003-12-13:robots</id>
             <issued>2003-12-13T08:29:29-04:00</issued>
             <modified>2003-12-13T08:41:41-04:00</modified>
           </entry>
         </item>
        </items>
     </event>
   </message>



2.3  Notification of Entry Deletion


   If a content author deletes an existing dynamic resource, many
   entities may be interested in learning that the resource is no longer
   available.  The process flow is as follows:


   o  Author deletes an existing entry at the HTTP service via the Atom
      API.
   o  The HTTP service sends an XMPP pubsub "retract" request to a
      specific node at the XMPP pubsub service, specifying the same Item
      ID as previously supplied.
   o  The XMPP pubsub service sends an XMPP message notification to each
      XMPP entity that is subscribed to the pubsub node.


   First the HTTP service sends an XMPP pubsub "retract" request to the
   XMPP pubsub service:


   <iq type='set'
       from='http-service.example.org'
       to='pubsub.example.org'
       id='delete1'>
     <pubsub xmlns='http://jabber.org/protocol/pubsub'>
       <retract node='http://example.org/feeds/atom-example.xml'>
         <item id='70b2a83be71dfca04df91133d953fb22b41b4267'/>
       </retract>
     </pubsub>
   </iq>




Saint-Andre, et al.      Expires March 2, 2005                  [Page 8]
Internet-Draft                ATOM-PUBSUB                 September 2004



   Subject to node configuration and/or subscription options, each XMPP
   subscriber would then receive a pubsub notification that the item was
   deleted.


   <message from='pubsub.example.org'
            to='alice@example.net'>
     <event xmlns='http://jabber.org/protocol/pubsub#event'>
       <items node='http://example.org/feeds/atom-example.xml'>
         <retract id='70b2a83be71dfca04df91133d953fb22b41b4267'/>
        </items>
     </event>
   </message>



3.  Implementation Notes


   The pubsub ItemIDs MUST conform to the rules defined in
   [XMPP-PUBSUB].  One possible method for generating a unique ItemID is
   to concatenate the XMPP address of the pubsub service, the pubsub
   node to which the item is published, and the atom:id of the feed
   entry, then hash the resulting string using the [SHA1] algorithm.


   It is the responsibility of the receiving application to remove or
   ignore duplicate entries that might be received from multiple feeds.


4.  IANA Considerations


   This document requires no action on the part of the IANA.


5.  Security Considerations


   Detailed security considerations for the relevant protocols profiled
   in this memo are given in [ATOM-PROTOCOL], [ATOM-FORMAT],
   [XMPP-CORE], and [XMPP-PUBSUB]; this memo introduces no new security
   concerns above and beyond those described in the foregoing
   specifications.


6.  References


6.1  Normative References


   [ATOM-PROTOCOL]
              Gregorio, J. and R. Sayre, "The Atom Publishing Protocol",
              draft-ietf-atompub-protocol-01 (work in progress), July
              2004.


   [ATOM-FORMAT]
              Nottingham, M., "The Atom Syndication Format",




Saint-Andre, et al.      Expires March 2, 2005                  [Page 9]
Internet-Draft                ATOM-PUBSUB                 September 2004



              draft-ietf-atompub-format-01 (work in progress), July
              2004.


   [TERMS]    Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.


   [XMPP-CORE]
              Saint-Andre, P., "Extensible Messaging and Presence
              Protocol (XMPP): Core", draft-ietf-xmpp-core-24 (work in
              progress), May 2004.


   [XMPP-PUBSUB]
              Millard, P., "Publish-Subscribe", JSF JEP 0060, July 2004.


6.2  Informative References


   [HTTP]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter,
           L., Leach, P. and T. Berners-Lee, "Hypertext Transfer
           Protocol -- HTTP/1.1", RFC 2616, June 1999.


   [SMTP]  Klensin, J., "Simple Mail Transfer Protocol", RFC 2821, April
           2001.


   [SHA1]  Eastlake, D. and P. Jones, "US Secure Hash Algorithm 1
           (SHA1)", RFC 3174, September 2001.



Authors' Addresses


   Peter Saint-Andre
   Jabber Software Foundation


   EMail: stpeter@jabber.org



   Joe Hildebrand
   Jabber, Inc.


   EMail: jhildebrand@jabber.com



   Bob Wyman
   PubSub.com


   EMail: bob@wyman.us







Saint-Andre, et al.      Expires March 2, 2005                 [Page 10]
Internet-Draft                ATOM-PUBSUB                 September 2004



Intellectual Property Statement


   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.


   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.


   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.



Disclaimer of Validity


   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.



Copyright Statement


   Copyright (C) The Internet Society (2004).  This document is subject
   to the rights, licenses and restrictions contained in BCP 78, and
   except as set forth therein, the authors retain all their rights.



Acknowledgment


   Funding for the RFC Editor function is currently provided by the
   Internet Society.





Saint-Andre, et al.      Expires March 2, 2005                 [Page 11]