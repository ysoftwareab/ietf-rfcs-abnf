challenge         = "HMACDigest" digest-challenge
digest-challenge  = 1#( realm | [domain] | [reason] |
                          [algorithm] | [pw-algorithm] |
                          [salt] | [auth-param] )
realm             = "realm" "=" quoted-string
domain            = "domain" "=" <"> URI *( 1*SP URI ) <">
URI               = absoluteURI | abs_path
reason            = "reason" "=" ("unauthorized" | "integrity" |
                           token)
algorithm         = "algorithm" "=" ( "HMAC-SHA-1" | "HMAC-MD5" |
                           token )
pw-algorithm      = "pw-algorithm" "=" ( "SHA-1" | "MD5" |
                           token )
salt              = "salt" "=" quoted-string
credentials      = "HMACDigest" digest-response
digest-response  = 1#( username | realm | nonce | digest-uri |
                         created | response | [headers] |
                         [auth-param] )
username         = "username" "=" quoted-string
nonce            = "nonce" "=" quoted-string
digest-uri       = "uri" "=" request-uri
created          = "created" "=" TODO-TIMESTAMP
response         = "response" "=" request-digest
request-digest   = <"> *LHEX <">
LHEX             =  "0" | "1" | "2" | "3" |
                          "4" | "5" | "6" | "7" |
                          "8" | "9" | "a" | "b" |
                          "c" | "d" | "e" | "f"
headers          = "headers" "=" header-list
header-list      = <"> field-name *( 1*SP field-name ) <">


PORT = 8888
user = "user"
password = "password"
salt = 'xyzzy'
realm = "HMACDigest Sample"
algo = "HMAC-SHA-1"
pw_algo = "MD5"
key_str = "%s:%s:%s" % (user,
                           md5.new(password+salt).hexdigest(),
                           realm)
key = md5.new(key_str).hexdigest()

digest_header = 'HMACDigest realm="%s", '
auth = self.headers.getheader('authorization')
cred = urllib2.parse_http_list(fields)
cred = urllib2.parse_keqv_list(cred)
names = cred.get('headers','').split()
vals = ''.join([self.headers.getheader(h) for h in names])
msg = "%s:%s:%s:%s:%s" % (self.command, self.path,
                                     cred['nonce'], cred['created'],
                                     vals)
auth_header = digest_header % (realm, algo, pw_algo, salt)
httpd = BaseHTTPServer.HTTPServer(("", PORT), HMACDigestHandler)
PORT = 8888
username = "user"
password = "password"
params = {}
headers = { "Accept": "text/X-Oh-Several-Things+xml, */*",
               "User-Agent": "libwww-perl/5.803",
               "X-Freedom-Is-What-You-Think-It-Is":
               "But there ain't no train to Stockholm"}

conn = httplib.HTTPConnection("localhost",PORT)
response = conn.getresponse()
data = response.read()

wa = response.getheader('WWW-Authenticate')
challenge = urllib2.parse_keqv_list(urllib2.parse_http_list(kv))
realm = challenge['realm']
algorithm = challenge.get('algorithm', 'HMAC-SHA-1')
pw_algorithm = challenge.get('pw-algorithm', 'SHA-1')
salt = challenge.get('salt','')

hashmod = sha
hashmod = md5

pwhashmod = sha
pwhashmod = md5

key = "%s:%s:%s" % (username,
                       pwhashmod.new(password+salt).hexdigest(),
                       realm)
key = pwhashmod.new(key).hexdigest()

keys = headers.keys()
keylist = ''.join(["%s " % k for k in keys])
header_vals = ''.join([headers[k] for k in keys])

created = time.strftime('%Y-%m-%dT%H:%M%SZ',time.gmtime())
nonce = sha.new(str(random.getrandbits(512))+created).hexdigest()
msg = "%s:%s:%s:%s:%s" % ("GET", "/", nonce, created, header_vals)
response = hmac.new(key, msg, hashmod).hexdigest()

auth = 'username="%s", realm="%s", nonce="%s", uri="%s", ' \
          'created="%s", response="%s", headers="%s"'
auth = auth % (username, realm, nonce, "/",
                  created, response, keylist)

response = conn.getresponse()
data = response.read()

