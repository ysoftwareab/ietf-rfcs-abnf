smingFile               = optsep *(moduleStatement optsep)

moduleStatement         = moduleKeyword sep ucIdentifier optsep "{" stmtsep
                                 *(importStatement stmtsep)
                                 organizationStatement stmtsep
                                 contactStatement stmtsep
                                 descriptionStatement stmtsep
                                 1*(revisionStatement stmtsep)
                                 *(extensionStatement stmtsep)
                                 *(typedefStatement stmtsep)
                                 *(identityStatement stmtsep)
                                 *(classStatement stmtsep)
                             "}" optsep ";"

extensionStatement      = extensionKeyword sep lcIdentifier optsep
                                 "{" stmtsep
                                 *1(statusStatement stmtsep)
                                 descriptionStatement stmtsep
                                 *1(abnfStatement stmtsep)
                             "}" optsep ";"

typedefStatement        = typedefKeyword sep ucIdentifier optsep
                                 "{" stmtsep
                                 typedefTypeStatement stmtsep
                                 *1(defaultStatement stmtsep)
                                 *1(formatStatement stmtsep)
                                 *1(unitsStatement stmtsep)
                                 *1(statusStatement stmtsep)
                                 descriptionStatement stmtsep
                             "}" optsep ";"

identityStatement       = identityKeyword sep ucIdentifier optsep
   			      *1(":" optsep qucIdentifier optsep)
                                 "{" stmtsep
                                 *1(statusStatement stmtsep)
                                 descriptionStatement stmtsep
                             "}" optsep ";"

classStatement          = classKeyword sep ucIdentifier optsep
   			      *1(":" optsep qucIdentifier optsep)
                                 "{" stmtsep
                                 attributeStatement stmtsep
                                 *(eventStatement stmtsep)
                                 *1(statusStatement stmtsep)
                                 descriptionStatement stmtsep
                             "}" optsep ";"

attributeStatement      = attributeKeyword sep
   			      qucIdentifier sep
   			      lcIdentifier optsep
                                 "{" stmtsep
                                 accessStatement stmtsep
                                 *1(defaultStatement stmtsep)
                                 *1(formatStatement stmtsep)
                                 *1(unitsStatement stmtsep)
                                 *1(statusStatement stmtsep)
                                 descriptionStatement stmtsep
                             "}" optsep ";"

eventStatement          = eventKeyword sep lcIdentifier
                                 optsep "{" stmtsep
                                 *1(attributesStatement stmtsep)
                                 *1(statusStatement stmtsep)
                                 descriptionStatement stmtsep
                             "}" optsep ";"

importStatement         = importKeyword sep ucIdentifier optsep
                                 "(" optsep
                                 identifierList optsep
                             ")" optsep ";"

revisionStatement       = revisionKeyword optsep "{" stmtsep
                                 dateStatement stmtsep
                                 descriptionStatement stmtsep
                             "}" optsep ";"

typedefTypeStatement    = typeKeyword sep refinedBaseType optsep ";"

dateStatement           = dateKeyword sep date optsep ";"

organizationStatement   = organizationKeyword sep text optsep ";"

contactStatement        = contactKeyword sep text optsep ";"

formatStatement         = formatKeyword sep format optsep ";"

unitsStatement          = unitsKeyword sep units optsep ";"

statusStatement         = statusKeyword sep status optsep ";"

accessStatement         = accessKeyword sep access optsep ";"

defaultStatement        = defaultKeyword sep anyValue optsep ";"

descriptionStatement    = descriptionKeyword sep text optsep ";"

abnfStatement           = abnfKeyword sep text optsep ";"

attributesStatement     = attributesKeyword optsep "(" optsep
                                 qlcIdentifierList optsep
                                 ")" optsep ";"

refinedBaseType         = OctetStringKeyword *1(optsep numberSpec) /
                             PointerKeyword *1(optsep pointerSpec) /
                             Integer32Keyword *1(optsep numberSpec) /
                             Unsigned32Keyword *1(optsep numberSpec) /
                             Integer64Keyword *1(optsep numberSpec) /
                             Unsigned64Keyword *1(optsep numberSpec) /
                             Float32Keyword *1(optsep floatSpec) /
                             Float64Keyword *1(optsep floatSpec) /
                             Float128Keyword *1(optsep floatSpec) /
                             EnumerationKeyword optsep namedSignedNumberSpec /
                             BitsKeyword optsep namedNumberSpec

refinedType             = qucIdentifier *1(optsep anySpec)

anySpec                 = pointerSpec / numberSpec / floatSpec

pointerSpec             = "(" optsep qlcIdentifier optsep ")"
numberSpec              = "(" optsep numberElement
                                 *furtherNumberElement
                                 optsep ")"

furtherNumberElement    = optsep "|" optsep numberElement

numberElement           = signedNumber *1numberUpperLimit

numberUpperLimit        = optsep ".." optsep signedNumber

floatSpec               = "(" optsep floatElement
                                 *furtherFloatElement
                                 optsep ")"

furtherFloatElement     = optsep "|" optsep floatElement

floatElement            = floatValue *1floatUpperLimit

floatUpperLimit         = optsep ".." optsep floatValue

namedNumberSpec         = "(" optsep namedNumberList optsep ")"

namedNumberList         = namedNumberItem
                                 *(optsep "," optsep namedNumberItem)
                                 *1(optsep ",")

namedNumberItem         = lcIdentifier optsep "(" optsep number
                                 optsep ")"

namedSignedNumberSpec   = "(" optsep namedSignedNumberList optsep ")"

namedSignedNumberList   = namedSignedNumberItem
                                 *(optsep "," optsep namedSignedNumberItem)
                                 *1(optsep ",")

namedSignedNumberItem   = lcIdentifier optsep "(" optsep signedNumber
                                 optsep ")"

identifierList          = identifier
                                 *(optsep "," optsep identifier)
                                 *1(optsep ",")

qIdentifierList         = qIdentifier
                                 *(optsep "," optsep qIdentifier)
                                 *1(optsep ",")

qlcIdentifierList       = qlcIdentifier
                                 *(optsep "," optsep qlcIdentifier)
                                 *1(optsep ",")
bitsValue               = "(" optsep bitsList optsep ")"

bitsList                = *1(lcIdentifier
                                 *(optsep "," optsep lcIdentifier))
                                 *1(optsep ",")

identifier              = ucIdentifier / lcIdentifier

qIdentifier             = qucIdentifier / qlcIdentifier

ucIdentifier            = ucAlpha *63(ALPHA / DIGIT / "-")

qucIdentifier           = *1(ucIdentifier "::") ucIdentifier

lcIdentifier            = lcAlpha *63(ALPHA / DIGIT / "-")

qlcIdentifier           = *1(ucIdentifier "::") lcIdentifier

attrIdentifier          = lcIdentifier *("." lcIdentifier)

qattrIdentifier         = *1(ucIdentifier ".") attrIdentifier

text                    = textSegment *(optsep textSegment)

textSegment             = DQUOTE *textAtom DQUOTE

textAtom                = textVChar / HTAB / SP / lineBreak

date                    = DQUOTE 4DIGIT "-" 2DIGIT "-" 2DIGIT
                                 *1(" " 2DIGIT ":" 2DIGIT)
                                 DQUOTE
                             ; always in UTC

format                  = textSegment

units                   = textSegment

anyValue                = bitsValue /
                             signedNumber /
                             hexadecimalNumber /
                             floatValue /
                             text /
   			  qlcIdentifier
                             ; Note: `qlcIdentifier' includes the
                             ; syntax of enumeration labels and
   			  ; identities.
                             ; They are not named literally to
                             ; avoid reduce/reduce conflicts when
                             ; building LR parsers based on this
                             ; grammar.

status                  = currentKeyword /
                             deprecatedKeyword /
                             obsoleteKeyword

access                  = noaccessKeyword /
                             eventonlyKeyword /
                             readonlyKeyword /
                             readwriteKeyword

number                  = hexadecimalNumber / decimalNumber

negativeNumber          = "-" decimalNumber

signedNumber            = number / negativeNumber

decimalNumber           = "0" / (nonZeroDigit *DIGIT)

zeroDecimalNumber       = 1*DIGIT

hexadecimalNumber       = "0x" 1*(HEXDIG HEXDIG)

floatValue              = neginfKeyword /
                             posinfKeyword /
                             snanKeyword /
                             qnanKeyword /
                             signedNumber "." zeroDecimalNumber
                                 *1("E" ("+"/"-") zeroDecimalNumber)

unknownStatement        = unknownKeyword optsep *unknownArgument
                                 optsep ";"

unknownArgument         = ("(" optsep unknownList optsep ")") /
                             ("{" optsep *unknownStatement optsep "}") /
                             qucIdentifier /
                             anyValue /
                             anySpec

unknownList             = namedNumberList /
                             qIdentifierList

unknownKeyword          = lcIdentifier

moduleKeyword           = "module"
importKeyword           = "import"
revisionKeyword         = "revision"
dateKeyword             = "date"
organizationKeyword     = "organization"
contactKeyword          = "contact"
descriptionKeyword      = "description"
extensionKeyword        = "extension"
typedefKeyword          = "typedef"
typeKeyword             = "type"
identityKeyword         = "identity"
classKeyword            = "class"
attributeKeyword        = "attribute"
eventKeyword            = "event"
attributesKeyword       = "attributes"
formatKeyword           = "format"
unitsKeyword            = "units"
statusKeyword           = "status"
accessKeyword           = "access"
defaultKeyword          = "default"
abnfKeyword             = "abnf"

OctetStringKeyword      = "OctetString"
PointerKeyword          = "Pointer"
Integer32Keyword        = "Integer32"
Unsigned32Keyword       = "Unsigned32"
Integer64Keyword        = "Integer64"
Unsigned64Keyword       = "Unsigned64"
Float32Keyword          = "Float32"
Float64Keyword          = "Float64"
Float128Keyword         = "Float128"
BitsKeyword             = "Bits"
EnumerationKeyword      = "Enumeration"

currentKeyword          = "current"
deprecatedKeyword       = "deprecated"
obsoleteKeyword         = "obsolete"

noaccessKeyword         = "noaccess"
eventonlyKeyword        = "eventonly"
readonlyKeyword         = "readonly"
readwriteKeyword        = "readwrite"

neginfKeyword           = "neginf"
posinfKeyword           = "posinf"
snanKeyword             = "snan"
qnanKeyword             = "qnan"

sep                     = 1*(comment / lineBreak / WSP)
                             ; unconditional separator

optsep                  = *(comment / lineBreak / WSP)

stmtsep                 = *(comment /
                               lineBreak /
                               WSP /
                               unknownStatement)

comment                 = "//" *(WSP / VCHAR) lineBreak

lineBreak               = CRLF / LF

textVChar               = %x21 / %x23-7E
                             ; any VCHAR except DQUOTE

ucAlpha                 = %x41-5A

lcAlpha                 = %x61-7A

nonZeroDigit            = %x31-39

ALPHA          =  %x41-5A / %x61-7A
                          ; A-Z / a-z

CR             =  %x0D
                          ; carriage return

CRLF           =  CR LF
                          ; Internet standard newline

DIGIT          =  %x30-39
                          ; 0-9

DQUOTE         =  %x22
                          ; " (Double Quote)

HEXDIG         =  DIGIT / "A" / "B" / "C" / "D" / "E" / "F"

HTAB           =  %x09
                          ; horizontal tab

LF             =  %x0A
                          ; linefeed

SP             =  %x20
                          ; space

VCHAR          =  %x21-7E
                          ; visible (printing) characters

WSP            =  SP / HTAB
                          ; white space

