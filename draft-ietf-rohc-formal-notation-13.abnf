field   =:=   encoding_method;

ctrl_field_2 =:= encoding_method_2;
field_1      =:= encoding_method_1;
field_2      =:= encoding_method_2;
field_3      =:= encoding_method_3;
ctrl_field_1 =:= encoding_method_4;
field_2      =:= encoding_method_3;
field_3      =:= encoding_method_4;
ctrl_field_2 =:= encoding_method_5;
ctrl_field_3 =:= encoding_method_6; // This is a control field
                                           // with no uncompressed value
header_length  =:= uncompressed_value(4, 5);
version        =:= uncompressed_value(4, 4);
reserved       =:= uncompressed_value(1, 0);
offset         =:= uncompressed_value(13, 0);
more_fragments =:= uncompressed_value(1, 0);

src_addr       =:= irregular(32);
dest_addr      =:= irregular(32);
length         =:= irregular(16);
id             =:= irregular(16);
ttl            =:= irregular(8);
protocol       =:= irregular(8);
tos            =:= irregular(6);
ecn            =:= irregular(2);
dont_frag      =:= irregular(1);

checksum       =:= inferred_ip_v4_header_checksum [ 0 ];
SOME_CONSTANT = 3;

other_field     =:= irregular(8);
tcp_list_length =:= (data_offset + 20) / 4;

o  ==, !=, for equality and its negative. "x == y" returns true if x
      is equal to y.  Returns false otherwise. "x != y" returns true if
      x is not equal to y.  Returns false otherwise.
field_3 =:= lsb(16, 16)  [ 26 ];

field_3 =:= lsb(16, 16); ENFORCE(field_3.ULENGTH == 26);

version   =:=   uncompressed_value(4, 6);

padding =:= uncompressed_value(nbits - 8, 0);

pad_to_octet_boundary      =:=   compressed_value(3, 0);

discriminator     =:=   '01101';

discriminator     =:=   compressed_value(5, 13);

tcp_checksum  =:=   irregular(16);

field            =:=   static;

src_port  =:=   static;

field  =:=   lsb(<num_lsbs_param>, <offset_param>);

tcp_sequence_number   =:=   lsb(14, 8192);

field   =:=   crc(<num_bits>, <bit_pattern>, <initial_value>,
                       <block_data_value>, <block_data_length>);

crc_field =:= crc(3, 0x6, 0xF, THIS.CVALUE, THIS.CLENGTH);

field_2 =:= uncompressed_value(12, 9); //  0 bits
field_1 =:= irregular(4);              //  4 bits
field_2 =:= uncompressed_value(12, 9);  // 12 bits
field_1 =:= irregular(4);               //  4 bits
field_1 =:= some_encoding;
scaled_field =:= lsb(4, 0);
field =:= uncompressed_value(4, 6);
field_1 =:= uncompressed_value(4, 1);
field_2 =:= uncompressed_value(4, 2);
field_3 =:= lsb(3, -1);
field_4 =:= irregular(3);      // set ULENGTH to 3
field_4 =:= '1010';            // set ULENGTH to zero
variable_bits =:= irregular(variable_length);
constant_bits =:= static;
field_1 =:= static;
field_2 =:= uncompressed_value(4, 2);
field_3 =:= lsb(4, 0);
discriminator =:= '0'; // 1 bit
discriminator =:= '1';           //  1 bit
field_1       =:= irregular(4);  //  4 bits
field_3       =:= irregular(24); // 24 bits
fnspec     = S *(constdef S) [globctl S] 1*(methdef S)
constdef   = constname S "=" S expn S ";"
globctl    = CONTROL S formbody
methdef    = id S [parmlist S] "{" S 1*(formatdef S) "}"
              / id S [parmlist S] STRQ *STRCHAR STRQ S ";"
parmlist   = "(" S id S *( "," S id S ) ")"
formatdef  = formhead S formbody
formhead   = UNCOMPRESSED [ 1*WS id ]
              / COMPRESSED [ 1*WS id ]
              / CONTROL / INITIAL / DEFAULT
formbody   = "{" S *((fielddef/enforcer) S) "}"
fielddef   = fieldgroup S ["=:=" S encspec S] [lenspec S] ";"
fieldgroup = fieldname *( S ":" S fieldname )
fieldname  = id
encspec    = "'" *("0"/"1") "'"
              / id [ S "(" S expn S *( "," S expn S ) ")"]
lenspec    = "[" S expn S *("," S expn S) "]"
enforcer   = ENFORCE S "(" S expn S ")" S ";"
expn  = *(expnb S "||" S) expnb
expnb = *(expna S "&&" S) expna
expna = *(expn7 S ("=="/"!=") S) expn7
expn7 = *(expn6 S ("<"/"<="/">"/">=") S) expn6
expn6 = *(expn4 S ("+"/"-") S) expn4
expn4 = *(expn3 S ("*"/"/"/"%") S) expn3
expn3 = expn2 [S "^" S expn3]
expn2 = ["!" S] expn1
expn1 = expn0 / attref / constname / litval / id
expn0 = "(" S expn S ")" / VARIABLE
attref       = fieldnameref "." attname
fieldnameref = fieldname / THIS
attname      = ( U / C ) ( LENGTH / VALUE )
litval       = ["-"] "0b" 1*("0"/"1")
                / ["-"] "0x" 1*(DIGIT/"a"/"b"/"c"/"d"/"e"/"f")
                / ["-"] 1*DIGIT
                / false / true


constname = UPCASE *(UPCASE / DIGIT / "_")
id        = ALPHA *(ALPHA / DIGIT / "_")
ALPHA     = %x41-5A / %x61-7A
UPCASE    = %x41-5A
DIGIT     = %x30-39
COMMENT   = "//" *(SP / HTAB / VCHAR) CRLF
SP        = %x20
HTAB      = %x09
VCHAR     = %x21-7E
CRLF      = %x0A / %x0D.0A
NL        = COMMENT / CRLF
WS        = SP / HTAB / NL
S         = *WS
STRCHAR   = SP / HTAB / %x21 / %x23-7E
STRQ      = %x22
C            = %d67
COMPRESSED   = %d67.79.77.80.82.69.83.83.69.68
CONTROL      = %d67.79.78.84.82.79.76
DEFAULT      = %d68.69.70.65.85.76.84
ENFORCE      = %d69.78.70.79.82.67.69
INITIAL      = %d73.78.73.84.73.65.76
LENGTH       = %d76.69.78.71.84.72
THIS         = %d84.72.73.83
U            = %d85
UNCOMPRESSED = %d85.78.67.79.77.80.82.69.83.83.69.68
VALUE        = %d86.65.76.85.69
VARIABLE     = %d86.65.82.73.65.66.76.69
false        = %d102.97.108.115.101
true         = %d116.114.117.101



version_no  =:= irregular(2);
type        =:= irregular(2);
flow_id     =:= irregular(4);
sequence_no =:= irregular(4);
flag_bits   =:= irregular(4);
version_no  =:= irregular(2);
type        =:= irregular(2);
flow_id     =:= irregular(4);
sequence_no =:= irregular(4);
flag_bits   =:= irregular(4);
version_no    =:= uncompressed_value(2, 1)  [ 0 ];
type          =:= irregular(2)              [ 2 ];
flow_id       =:= irregular(4)              [ 4 ];
sequence_no   =:= irregular(4)              [ 4 ];
abc_flag_bits =:= irregular(3)              [ 3 ];
reserved_flag =:= uncompressed_value(1, 0)  [ 0 ];
version_no    =:= uncompressed_value(2, 1);
type          =:= irregular(2);
flow_id       =:= static;
sequence_no   =:= lsb(0, -3);
abc_flag_bits =:= irregular(3);
reserved_flag =:= uncompressed_value(1, 0);
flow_id     =:= uncompressed_value(4, 1);
sequence_no =:= uncompressed_value(4, 0);
version_no    =:= uncompressed_value(2, 1);
type          =:= irregular(2);
flow_id       =:= static;
sequence_no   =:= lsb(2, -3);
abc_flag_bits =:= irregular(3);
reserved_flag =:= uncompressed_value(1, 0);
version_no    =:= uncompressed_value(2, 1) [ 2 ];
reserved_flag =:= uncompressed_value(1, 0) [ 1 ];
discriminator =:= '0'          [ 1 ];
type          =:= irregular(2) [ 2 ];
flow_id       =:= irregular(4) [ 4 ];
sequence_no   =:= irregular(4) [ 4 ];
abc_flag_bits =:= irregular(3) [ 3 ];
discriminator =:= '1'          [ 1 ];
type          =:= irregular(2) [ 2 ];
flow_id       =:= static       [ 0 ];
sequence_no   =:= lsb(2, -3)   [ 2 ];
abc_flag_bits =:= static       [ 0 ];
version_no    =:= uncompressed_value(2, 1) [ 2 ];
reserved_flag =:= uncompressed_value(1, 0) [ 1 ];
discriminator =:= '00'         [ 2 ];
type          =:= irregular(2) [ 2 ];
flow_id       =:= irregular(4) [ 4 ];
sequence_no   =:= irregular(4) [ 4 ];
abc_flag_bits =:= irregular(3) [ 3 ];
discriminator =:= '01'                     [ 2 ];
type          =:= irregular(2)             [ 2 ];
flow_id       =:= static                   [ 0 ];
sequence_no   =:= lsb(2, -3)               [ 2 ];
abc_flag_bits =:= uncompressed_value(3, 7) [ 0 ];
discriminator =:= '1'          [ 1 ];
type          =:= irregular(2) [ 2 ];
flow_id       =:= static       [ 0 ];
sequence_no   =:= lsb(2, -3)   [ 2 ];
abc_flag_bits =:= static       [ 0 ];
version_no    =:= uncompressed_value(2, 1) [ 2 ];
reserved_flag =:= uncompressed_value(1, 0) [ 1 ];
type          =:= irregular(2);
flow_id       =:= static;
sequence_no   =:= lsb(2, -3);
discriminator =:= '00'         [ 2 ];
flow_id       =:= irregular(4) [ 4 ]; // Overrides default
sequence_no   =:= irregular(4) [ 4 ]; // Overrides default
abc_flag_bits =:= irregular(3) [ 3 ];
discriminator =:= '01' [ 2 ];
abc_flag_bits =:= uncompressed_value(3, 7);
discriminator =:= '1' [ 1 ];
abc_flag_bits =:= static;
version_no    =:= uncompressed_value(2, 1) [ 2 ];
reserved_flag =:= uncompressed_value(1, 0) [ 1 ];
type          =:= irregular(2);
flow_id       =:= static;
scaled_seq_no =:= lsb(1, -1);
discriminator =:= '00'         [ 2 ];
flow_id       =:= irregular(4) [ 4 ];
scaled_seq_no =:= irregular(4) [ 4 ]; // Overrides default
abc_flag_bits =:= irregular(3) [ 3 ];
discriminator =:= '01' [ 2 ];
abc_flag_bits =:= uncompressed_value(3, 7);
discriminator =:= '1' [ 1 ];
abc_flag_bits =:= static;
version_no    =:= uncompressed_value(2, 1) [ 2 ];
reserved_flag =:= uncompressed_value(1, 0) [ 1 ];
type          =:= irregular(2);
scaled_seq_no =:= lsb(1, -1);
flow_id       =:= static;
discriminator =:= '00'         [ 2 ];
flow_id       =:= irregular(4) [ 4 ];
scaled_seq_no =:= irregular(4) [ 4 ];
abc_flag_bits =:= irregular(3) [ 3 ];
discriminator =:= '01'                      [ 2 ];
type          =:= uncompressed_value(2, 3)  [ 0 ];
abc_flag_bits =:= uncompressed_value(3, 7)  [ 0 ];
discriminator =:= '1'    [ 1 ];
abc_flag_bits =:= static [ 0 ];
