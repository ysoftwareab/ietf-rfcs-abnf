example1 = MkInternetHeader 4 5 0 21 111 0 0 123 1
n = pad 32 options => padding = bitVector =>
NO = Int

DATA = String

NOxDATA = (NO, DATA)

PTS = MkPlace "Packets To Send" NOxDATA [(1, "COL"),
     (2, "OUR"), (3, "ED "), (4, "PET"), (5, "RI "), (6, "NET")]

NS = MkPlace "NextSend" NO (pure 1)

A = MkPlace "A" NOxDATA empty

input1 = MkInput PTS (NO, DATA) pure

input2 = MkInput NS NO pure

output1 = MkOutput (NO, DATA) PTS pure

output2 = MkOutput NO NS pure

output3 = MkOutput (NO, DATA) A pure

sendPacket = MkTransition [input1, input2] [output1, output2,
     output3] (\((n, d), n') => if n == n'
                                then pure ((n, d), n, (n, d))
                                else empty)
names = MkPdu `{{MkInternetHeader}} [
     MkField "Version",
     MkField "IHL",
     MKField "Type of Service",
     MkField "Total Length",
     MkField "Identification",
     MkField "Flags",
     MkField "Fragment Offset",
     MkField "Time to Live",
     MkField "Protocol"]
test = Init
          |> SendPacket ((1, "COL"), 1)
          |> TransmitPacket ((1, "COL"), True)
          |> ReceivePacket ((1, "COL"), "", 1)
          |> TransmitAck 1
          |> ReceiveAck (1, 1)
sdp = MkSyntax [
     "session-description" `Eq` (Concat (TermName "version-field")
       (TermName "origin-field") [
         TermName "session-name-field",
         Optional (TermName "information-field"),
         Optional (TermName "uri-field"),
         Repeat Nothing Nothing (TermName "email-field"),
         Repeat Nothing Nothing (TermName "phone-field"),
         Optional (TermName "connection-field"),
         Repeat Nothing Nothing (TermName "bandwidth-field"),
         Repeat (Just 1) Nothing (TermName "time-description"),
         Optional (TermName "key-field"),
         Repeat Nothing Nothing (TermName "attribute-field"),
         Repeat Nothing Nothing (TermName "media-description")
         ]),
     ...
     ]

same = MkIso to from toFrom fromTo
     where
       to : Sdp -> SessionDescription

       from : SessionDescription -> Abnf

       toFrom : (x : SessionDescription ) -> to (from x) = x

       fromTo : (x : Sdp) -> from (to x) = x
rulename = "rulename" `Eq` (Concat (TermDec 97 []) (TermDec 98 [])
     [TermDec 99 []])
rulename = %d97 %d98 %d99

                                  Figure 2

internetHeader = `[
n = pad 32 options => padding = bitVector =>
n = pad 32 options => padding = bitVector =>
dscp = `[
version = [O, I, O, O] => (ihl : (Unsigned 4, Data)) ->
U = ()
B = Bool
INT = Int
INTINF = Integer
R = Double
S = String
P = (U, I)
INTlist = Type
INTlist = List INT
WholeNumber = INT

DayOff = Weekend
isSocratesMortal = \h => \f => f h
