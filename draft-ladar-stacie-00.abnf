rounds = CalculateHashRounds(password, bonus)

seed = ExtractEntropySeed(rounds, username, password, salt)

master_key = HashedKeyDerivation(seed, rounds, username, password, \
     salt)
password_key = HashedKeyDerivation(master_key, rounds, username, \
     password, salt)

verification_token = HashedTokenDerivation(password_key, username, \
     salt)
ephemeral_login_token = HashedTokenDerivation(verification_token, \
     username, salt, nonce)


characters = len(password.decode("utf-8"))

dynamic = operator.sub(24, characters)

dynamic = max(1, dynamic)

variable = pow(2, dynamic)

total = operator.add(variable, bonus)

total = max(8, total)

total = min(pow(2, 24), total)

rounds = CalculateHashRounds(password, bonus)


salt = SHA512.new(username).digest()
key = \
               SHA512.new(salt + struct.pack('>I', 0)[1:4]).digest() + \
               SHA512.new(salt + struct.pack('>I', 1)[1:4]).digest()
key = salt

hmac = HMAC(key, None, SHA512)

seed = hmac.digest()

seed = ExtractEntropySeed(rounds, username, password, salt)


count = 0
hashed = ""

hashed = SHA512.new(hashed + seed + username + salt + \
               password + struct.pack('>I', count)[1:4]).digest()
count = operator.add(count, 1)

master_key = HashedKeyDerivation(seed, rounds, username, password, \
     salt)
password_key = HashedKeyDerivation(master_key, rounds, username, \
     password, salt)


count = 0
rounds = 8
hashed = ""

hashed = SHA512.new(hashed + seed + username + salt + \
               nonce + struct.pack('>I', count)[1:4]).digest()
count = operator.add(count, 1)

verification_token = HashedTokenDerivation(password_key, username, \
     salt)
ephemeral_login_token = HashedTokenDerivation(verification_token, \
     username, salt, nonce)


hashed = SHA512.new(master_key + realm + shard).digest()
realm_key = str().join(chr(operator.xor(ord(a), ord(b))) \
         for a,b in zip(hashed, shard))

realm_vector_key = str().join(chr(operator.xor(ord(a), ord(b))) \
         for a,b in zip(realm_key[0:16], realm_key[16:32]))

realm_cipher_key = realm_key[32:64]

realm_key = RealmKeyDerivation(master_key, realm, shard)

realm_vector_key = ExtractRealmVectorKey(realm_key)
realm_cipher_key = ExtractRealmCipherKey(realm_key)


password = "password"
username = "user@example.tld"
