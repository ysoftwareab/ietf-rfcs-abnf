representation-data-digest = digest-algorithm "="
                                   <encoded digest output>

Digest = 1#representation-data-digest

id-sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=

Content-Digest = 1#content-digest
content-digest = digest-algorithm "="
                       <encoded digest output>

id-sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=

Want-Digest = 1#want-digest-value
Want-Content-Digest = 1#want-digest-value
want-digest-value = digest-algorithm [ ";" "q" "=" qvalue]

digest-algorithm = token

adler32=03da0195 and adler32=3DA0195 are both valid checksums
sha-256=47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=

iwgAla3RXA==

       Figure 5: Partial response from a gzip-encoded representation

iwiAeyJoZWxsbyI6ICJ3b3JsZCJ9Aw==

            Figure 17: Response with Digest of encoded response

id-sha-256=X48E9qOokqqrvdts8nOJRJN3OWDUoyWxBf7kbu9DBPE=

iwiAeyJoZWxsbyI6ICJ3b3JsZCJ9Aw==

             Figure 20: Response with Digest of Encoded Content

log = logging.getLogger()

indent = 2 if isinstance(item, dict) and len(item) > 1 else None
json_bytes = json.dumps(item, indent=indent).encode()
checksum_bytes = algorithm(bytes_).digest()
content_encoded = encode_item(item, encoding)
item = {"hello": "world"}

