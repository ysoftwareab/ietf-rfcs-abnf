XCON-URI = "xcon" ":" [conf-object-id "@"] host [ ":" port ]

conf-object-id = 1*( unreserved / "+" / "=" / "/" )


aspect-ratio=TRUE) so that blanking is not necessary.  The
ratio= FALSE).
XCON_USERID = "xcon_userid" ":" conf-object-id

conf-object-id = 1*( unreserved / "+" / "=" / "/" )

start = element conference-info { conference-type }
conference-type =
     attribute entity { text },
     anyAttribute,
     conference-description-type,
     element language { xsd:language }?,
     element host-info { conference-info-urn* }?,
     element conference-state { conference-state-type }?,
     element floor-information { floor-information-type }?,
     element users { users-type },
     element sidebars-by-ref { sidebars-by-ref-type }?,
     element sidebars-by-val { sidebars-by-val-type }?,
     anyElement*
conference-description-type =
     element conference-description {
       attribute lang { xsd:language }?,
       anyAttribute,
       element display-text { text }?,
       element subject { text }?,
       element free-text { text }?,
       element keywords {
         list { xsd:string* }
       }?,
       element allow-sidebars { xsd:boolean }?,
       element conference-time { conferencetime-type }?,
       element conf-uris {
         (element conference-password { text }?,
          conference-info-urn)*
       }?,
       element service-uris { conference-info-urn* }?,
       element maximum-user-count { xsd:int }?,
       element available-media { conference-media-type }?,
       anyElement*
     }
conferencetime-type =
     anyAttribute,
     element entry {
       element base { text }?,
       element mixing-start-offset {
         xsd:dateTime { pattern = ".+T.+Z.*" },
         attribute required-participant { text },
         anyAttribute
       }?,
       element mixing-end-offset {
         xsd:dateTime { pattern = ".+T.+Z.*" },
         attribute required-participant { text },
         anyAttribute
       }?,
       element can-join-after-offset {
         xsd:dateTime { pattern = ".+T.+Z.*" }
       }?,
       element must-join-before-offset {
         xsd:dateTime { pattern = ".+T.+Z.*" }
       }?,
       element notify-end-of-conference { xsd:int }?,
       element allowed-extend-mixing-end-offset { xsd:boolean }?,
       anyElement*
     }*,
     anyElement*
conference-media-type =
     anyAttribute,
     element entry { conference-medium-type }*,
     anyElement*
conference-medium-type =
     attribute label { text },
     anyAttribute,
     element display-text { text }?,
     element type { text }?,
     element status { media-status-type }?,
     element mixing-mode { mix-mode-type }?,
     element codecs { codecs-type }?,
     element controls { controls-type }?,
     anyElement*
controls-type =
     anyAttribute,
     element control { control-type }*,
     anyElement*
mix-mode-type =
     xsd:string "moderator-controlled"
     | xsd:string "FCFS"
     | xsd:string "automatic"
codecs-type =
     attribute decision { decision-type },
     anyAttribute,
     element codec { codec-type }*,
     anyElement*
codec-type =
     attribute name { text },
     attribute policy { policy-type },
     anyAttribute
decision-type =
     xsd:string "automatic" | xsd:string "moderator-controlled"
policy-type = xsd:string "allowed" | xsd:string "disallowed"
control-type =
     anyAttribute,
     (element mute { xsd:boolean }
      | element pause-video { xsd:boolean }
      | element gain {
          xsd:int { minInclusive = "-127" maxInclusive = "127" }
        }
      | element video-layout {
          xsd:string "single-view"
          | xsd:string "dual-view"
          | xsd:string "dual-view-crop"
          | xsd:string "dual-view-2x1"
          | xsd:string "dual-view-2x1-crop"
          | xsd:string "quad-view"
          | xsd:string "multiple-3x3"
          | xsd:string "multiple-4x4"
          | xsd:string "multiple-5x1"
          | xsd:string "automatic"
        }
      | anyElement*)
conference-state-type =
     anyAttribute,
     element allow-conference-event-subscription { xsd:boolean }?,
     element user-count { xsd:unsignedInt }?,
     element active { xsd:boolean }?,
     element locked { xsd:boolean }?,
     anyElement*
floor-information-type =
     anyAttribute,
     (element conference-ID { xsd:unsignedInt },
      element allow-floor-events { xsd:boolean },
      element floor-request-handling { floor-request-type },
      element conference-floor-policy { Conference-floor-policy },
      anyElement*)*
floor-request-type = xsd:string "block" | xsd:string "confirm"
Conference-floor-policy =
     anyAttribute,
     element floor {
       anyAttribute,
       element media-label { xsd:nonNegativeInteger }+,
       (element algorithm {
          xsd:string "moderator-controlled"
          | xsd:string "FCFS"
          | xsd:string "random"
        },
        element max-floor-users { xsd:nonNegativeInteger },
        element moderator-id { text },
        anyElement*)*
     }+
users-type =
     anyAttribute,
     element join-handling { join-handling-type }?,
     element user-admission-policy { user-admission-policy-type }?,
     element allowed-users-list { UserList }?,
     element denied-users-list { deny-user-list }?,
     element user { user-type }*,
     anyElement*
user-admission-policy-type =
     xsd:string "closedAuthenticated"
     | xsd:string "openAuthenticated"
     | xsd:string "anonymous"
join-handling-type =
     xsd:string "block"
     | xsd:string "confirm"
     | xsd:string "allow"
     | xsd:string "authenticate"
     | xsd:string "directed-operator"
deny-user-list =
     anyAttribute,
     element target {
       attribute uri { xsd:anyURI },
       anyAttribute
     }*,
     anyElement*
UserList =
     anyAttribute,
     element target { target-type }*,
     anyElement*,
     element persistent-list {
       element user {
         attribute name { text },
         attribute nickname { text },
         element e-mail { text }
       }*,
       anyElement
     }?
target-type =
     attribute uri { xsd:anyURI },
     attribute method { method-type },
     anyAttribute
method-type =
     xsd:string "dial-in" | xsd:string "dial-out" | xsd:string "refer"
user-type =
     attribute entity { xsd:anyURI },
     anyAttribute,
     element display-text { text }?,
     element associated-aors { conference-info-urn* }?,
     element provide-anonymity { "private" | "semi-private" }?,
     element roles { text }?,
     element languages {
       list { xsd:language }
     }?,
     element cascaded-focus { xsd:anyURI }?,
     element allow-refer-users-dynamically { xsd:boolean }?,
     element allow-invite-users-dynamically { xsd:boolean }?,
     element allow-remove-users-dynamically { xsd:boolean }?,
     element endpoint { endpoint-type }*,
     anyElement*
endpoint-type =
     attribute entity { text },
     anyAttribute,
     element display-text { text }?,
     element referred { conference-info-urn* }?,
     element status { endpoint-status-type }?,
     element joining-method { joining-type }?,
     element joining-info { conference-info-urn* }?,
     element disconnection-method { disconnection-type }?,
     element disconnection-info { conference-info-urn* }?,
     element media { media-type }*,
     element call-info { conference-info-urn* }?,
     anyElement*
media-type =
     attribute id { xsd:int },
     anyAttribute,
     element display-text { text }?,
     element type { text }?,
     element label { text }?,
     element src-id { text }?,
     element status { media-status-type }?,
     element to-mixer { mixer-type }?,
     element from-mixer { mixer-type }?,
     anyElement*
mixer-type =
     anyAttribute,
     (element floor { xsd:boolean },
      element controls { controls-type })?,
     anyElement*
sidebars-by-ref-type =
     anyAttribute,
     element entry { conference-info-urn* }*,
     anyElement*
sidebars-by-val-type =
     anyAttribute,
     element entry { conference-type }*,
     anyElement*
anyElement =
     element * {
       (attribute * { text }
        | text
        | anyElement)*
     }
anyAttribute =
     attribute * - (entity
                    | lang
                    | required-participant
                    | label
                    | decision
                    | name
                    | policy
                    | uri
                    | method
                    | id
                    | local:*
                    | ns1:*) { text }*
conference-info-urn =
     element * - (ns2:* | local:*) {
       mixed {
         (attribute * { text }
          | conference-info-urn)*
       }
     }
media-status-type = "recvonly" | "sendonly" | "sendrecv" | "inactive"
endpoint-status-type =
     "pending"
     | "dialing-out"
     | "dialing-in"
     | "alerting"
     | "on-hold"
     | "connected"
     | "muted-via-focus"
     | "disconnecting"
     | "disconnected"
joining-type = "dialed-in" | "dialed-out" | "focus-owner"
disconnection-type = "departed" | "booted" | "failed" | "busy"


entity="conference123@example.com">
disconnection-type = "departed" | "booted" | "failed" | "busy"


content="text/html;charset=iso-8859-1"/>
XCON-URI = "xcon" ":" [conf-object-id "@"] host [ ":" port ] [RFC xxxx]

conf-object-id = 1*( unreserved / "+" / "=" / "/" )


   host, port, and unreserved are defined in RFC3986[9]

   [Note to the RFC Editor: replace xxxx with the number this RFC gets
   assigned.]
XCON_USERID = "xcon_userid" ":" conf-object-id  [ RFC xxxx ]

conf-object-id = 1*( unreserved / "+" / "=" / "/" )


xmlns="http://relaxng.org/ns/structure/1.0"
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
