obs-fold         = <obs-fold, see [Messaging], Section 5.2>
protocol-name    = <protocol-name, see [Messaging], Section 9.7>
protocol-version = <protocol-version, see [Messaging], Section 9.7>
request-target   = <request-target, see [Messaging], Section 3.2>

UA ======================================= O
                                   <   response

UA =========== A =========== B =========== C =========== O
                  <             <             <             <

UA =========== A =========== B - - - - - - C - - - - - - O
                     <             <

URI-reference = <URI-reference, see [RFC3986], Section 4.1>
absolute-URI  = <absolute-URI, see [RFC3986], Section 4.3>
relative-part = <relative-part, see [RFC3986], Section 4.2>
authority     = <authority, see [RFC3986], Section 3.2>
uri-host      = <host, see [RFC3986], Section 3.2.2>
port          = <port, see [RFC3986], Section 3.2.3>
path-abempty  = <path-abempty, see [RFC3986], Section 3.3>
segment       = <segment, see [RFC3986], Section 3.3>
query         = <query, see [RFC3986], Section 3.4>
fragment      = <fragment, see [RFC3986], Section 3.5>

absolute-path = 1*( "/" segment )
partial-URI   = relative-part [ "?" query ]

http-URI = "http:" "//" authority path-abempty [ "?" query ]
                [ "#" fragment ]

https-URI = "https:" "//" authority path-abempty [ "?" query ]
                 [ "#" fragment ]

field-name     = token

field-value    = *( field-content / obs-fold )
field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
field-vchar    = VCHAR / obs-text

token          = 1*tchar

tchar          = "!" / "#" / "$" / "%" / "&" / "'" / "*"
                    / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
                    / DIGIT / ALPHA
                    ; any VCHAR, except delimiters
quoted-string  = DQUOTE *( qdtext / quoted-pair ) DQUOTE
qdtext         = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
obs-text       = %x80-FF

comment        = "(" *( ctext / quoted-pair / comment ) ")"
ctext          = HTAB / SP / %x21-27 / %x2A-5B / %x5D-7E / obs-text

quoted-pair    = "\" ( HTAB / SP / VCHAR / obs-text )

OWS            = *( SP / HTAB )
                    ; optional whitespace
RWS            = 1*( SP / HTAB )
                    ; required whitespace
BWS            = OWS
                    ; "bad" whitespace
Trailer = 1#field-name

Host = uri-host [ ":" port ] ; Section 2.4

Via = 1#( received-protocol RWS received-by [ RWS comment ] )

received-protocol = [ protocol-name "/" ] protocol-version
                         ; see [Messaging], Section 9.7
received-by       = ( uri-host [ ":" port ] ) / pseudonym
pseudonym         = token

media-type = type "/" subtype *( OWS ";" OWS parameter )
type       = token
subtype    = token

name=value pairs.

parameter      = token "=" ( token / quoted-string )

charset = token

content-coding   = token

language-tag = <Language-Tag, see [RFC5646], Section 2.1>

range-unit       = bytes-unit / other-range-unit

bytes-unit       = "bytes"

byte-ranges-specifier = bytes-unit "=" byte-range-set
byte-range-set  = 1#( byte-range-spec / suffix-byte-range-spec )
byte-range-spec = first-byte-pos "-" [ last-byte-pos ]
first-byte-pos  = 1*DIGIT
last-byte-pos   = 1*DIGIT

bytes=0-499

bytes=500-999

suffix-byte-range-spec = "-" suffix-length
suffix-length = 1*DIGIT

bytes=-500

bytes=9500-

bytes=0-0,-1

bytes=500-600,601-999
bytes=500-700,601-999

other-range-unit = token

Content-Type = media-type

Content-Encoding = 1#content-coding

Content-Language = 1#language-tag

Content-Length = 1*DIGIT

Content-Location = absolute-URI / partial-URI

Content-Range       = byte-content-range
                         / other-content-range

byte-content-range  = bytes-unit SP
                           ( byte-range-resp / unsatisfied-range )

byte-range-resp     = byte-range "/" ( complete-length / "*" )
byte-range          = first-byte-pos "-" last-byte-pos
unsatisfied-range   = "*/" complete-length

complete-length     = 1*DIGIT

other-content-range = other-range-unit SP other-range-resp
other-range-resp    = *VCHAR

method = token
Expect  = "100-continue"

Max-Forwards = 1*DIGIT

If-Match = "*" / 1#entity-tag

If-None-Match = "*" / 1#entity-tag

If-Modified-Since = HTTP-date

If-Unmodified-Since = HTTP-date
If-Range = entity-tag / HTTP-date

Range = byte-ranges-specifier / other-ranges-specifier
other-ranges-specifier = other-range-unit "=" other-range-set
other-range-set = 1*VCHAR

weight = OWS ";" OWS "q=" qvalue
qvalue = ( "0" [ "." 0*3DIGIT ] )
            / ( "1" [ "." 0*3("0") ] )

Accept = #( media-range [ accept-params ] )

media-range    = ( "*/*"
                      / ( type "/" "*" )
                      / ( type "/" subtype )
                      ) *( OWS ";" OWS parameter )
accept-params  = weight *( accept-ext )
accept-ext = OWS ";" OWS token [ "=" ( token / quoted-string ) ]
Accept-Charset = 1#( ( charset / "*" ) [ weight ] )

Accept-Encoding  = #( codings [ weight ] )
codings          = content-coding / "identity" / "*"

Accept-Language = 1#( language-range [ weight ] )
language-range  =
               <language-range, see [RFC4647], Section 2.1>

auth-scheme    = token

auth-param     = token BWS "=" BWS ( token / quoted-string )

token68        = 1*( ALPHA / DIGIT /
                          "-" / "." / "_" / "~" / "+" / "/" ) *"="

challenge   = auth-scheme [ 1*SP ( token68 / #auth-param ) ]

      Note: Many clients fail to parse a challenge that contains an
      unknown scheme.  A workaround for this problem is to list well-
      supported schemes (such as "basic") first.

credentials = auth-scheme [ 1*SP ( token68 / #auth-param ) ]

Authorization = credentials

Proxy-Authorization = credentials

From    = mailbox

mailbox = <mailbox, see [RFC5322], Section 3.4>

Referer = absolute-URI / partial-URI

User-Agent = product *( RWS ( product / comment ) )

product         = token ["/" product-version]
product-version = token

HTTP-date    = IMF-fixdate / obs-date

IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
day-name     = %x4D.6F.6E ; "Mon", case-sensitive
                  / %x54.75.65 ; "Tue", case-sensitive
                  / %x57.65.64 ; "Wed", case-sensitive
                  / %x54.68.75 ; "Thu", case-sensitive
                  / %x46.72.69 ; "Fri", case-sensitive
                  / %x53.61.74 ; "Sat", case-sensitive
                  / %x53.75.6E ; "Sun", case-sensitive

date1        = day SP month SP year
                  ; e.g., 02 Jun 1982

day          = 2DIGIT
month        = %x4A.61.6E ; "Jan", case-sensitive
                  / %x46.65.62 ; "Feb", case-sensitive
                  / %x4D.61.72 ; "Mar", case-sensitive
                  / %x41.70.72 ; "Apr", case-sensitive
                  / %x4D.61.79 ; "May", case-sensitive
                  / %x4A.75.6E ; "Jun", case-sensitive
                  / %x4A.75.6C ; "Jul", case-sensitive
                  / %x41.75.67 ; "Aug", case-sensitive
                  / %x53.65.70 ; "Sep", case-sensitive
                  / %x4F.63.74 ; "Oct", case-sensitive
                  / %x4E.6F.76 ; "Nov", case-sensitive
                  / %x44.65.63 ; "Dec", case-sensitive
year         = 4DIGIT

GMT          = %x47.4D.54 ; "GMT", case-sensitive

time-of-day  = hour ":" minute ":" second
                  ; 00:00:00 - 23:59:60 (leap second)

hour         = 2DIGIT
minute       = 2DIGIT
second       = 2DIGIT

obs-date     = rfc850-date / asctime-date
rfc850-date  = day-name-l "," SP date2 SP time-of-day SP GMT
date2        = day "-" month "-" 2DIGIT
                  ; e.g., 02-Jun-82

day-name-l   = %x4D.6F.6E.64.61.79    ; "Monday", case-sensitive
            / %x54.75.65.73.64.61.79       ; "Tuesday", case-sensitive
            / %x57.65.64.6E.65.73.64.61.79 ; "Wednesday", case-sensitive
            / %x54.68.75.72.73.64.61.79    ; "Thursday", case-sensitive
            / %x46.72.69.64.61.79          ; "Friday", case-sensitive
            / %x53.61.74.75.72.64.61.79    ; "Saturday", case-sensitive
            / %x53.75.6E.64.61.79          ; "Sunday", case-sensitive

asctime-date = day-name SP date3 SP time-of-day SP year
date3        = month SP ( 2DIGIT / ( SP 1DIGIT ))
                  ; e.g., Jun  2

Date = HTTP-date

Location = URI-reference

Retry-After = HTTP-date / delay-seconds

delay-seconds  = 1*DIGIT

Vary = "*" / 1#field-name

Last-Modified = HTTP-date

ETag       = entity-tag

entity-tag = [ weak ] opaque-tag
weak       = %x57.2F ; "W/", case-sensitive
opaque-tag = DQUOTE *etagc DQUOTE
etagc      = %x21 / %x23-7E / obs-text
                ; VCHAR except double quotes, plus obs-text

      Note: Previously, opaque-tag was defined to be a quoted-string
      ([RFC2616], Section 3.11); thus, some recipients might perform
      backslash unescaping.  Servers therefore ought to avoid backslash
      characters in entity tags.

WWW-Authenticate = 1#challenge

title="Login to \"apps\"", Basic realm="simple"

Proxy-Authenticate = 1#challenge

Accept-Ranges     = acceptable-ranges
acceptable-ranges = 1#range-unit / "none"

Allow = #method

Server = product *( RWS ( product / comment ) )

example-list      = 1#example-list-elmt
example-list-elmt = token ; see Section 4.2.3

Accept = [ ( "," / ( media-range [ accept-params ] ) ) *( OWS "," [
    OWS ( media-range [ accept-params ] ) ] ) ]
Accept-Charset = *( "," OWS ) ( ( charset / "*" ) [ weight ] ) *( OWS
    "," [ OWS ( ( charset / "*" ) [ weight ] ) ] )
Accept-Encoding = [ ( "," / ( codings [ weight ] ) ) *( OWS "," [ OWS
    ( codings [ weight ] ) ] ) ]
Accept-Language = *( "," OWS ) ( language-range [ weight ] ) *( OWS
    "," [ OWS ( language-range [ weight ] ) ] )
Accept-Ranges = acceptable-ranges
Allow = [ ( "," / method ) *( OWS "," [ OWS method ] ) ]
Authorization = credentials

BWS = OWS

Content-Encoding = *( "," OWS ) content-coding *( OWS "," [ OWS
    content-coding ] )
Content-Language = *( "," OWS ) language-tag *( OWS "," [ OWS
    language-tag ] )
Content-Length = 1*DIGIT
Content-Location = absolute-URI / partial-URI
Content-Range = byte-content-range / other-content-range
Content-Type = media-type

Date = HTTP-date

ETag = entity-tag
Expect = "100-continue"

From = mailbox

GMT = %x47.4D.54 ; GMT

HTTP-date = IMF-fixdate / obs-date
Host = uri-host [ ":" port ]

IMF-fixdate = day-name "," SP date1 SP time-of-day SP GMT
If-Match = "*" / ( *( "," OWS ) entity-tag *( OWS "," [ OWS
    entity-tag ] ) )
If-Modified-Since = HTTP-date
If-None-Match = "*" / ( *( "," OWS ) entity-tag *( OWS "," [ OWS
    entity-tag ] ) )
If-Range = entity-tag / HTTP-date
If-Unmodified-Since = HTTP-date
Last-Modified = HTTP-date
Location = URI-reference

Max-Forwards = 1*DIGIT

OWS = *( SP / HTAB )

Proxy-Authenticate = *( "," OWS ) challenge *( OWS "," [ OWS
    challenge ] )
Proxy-Authorization = credentials

RWS = 1*( SP / HTAB )
Range = byte-ranges-specifier / other-ranges-specifier
Referer = absolute-URI / partial-URI
Retry-After = HTTP-date / delay-seconds

Server = product *( RWS ( product / comment ) )

Trailer = *( "," OWS ) field-name *( OWS "," [ OWS field-name ] )

URI-reference = <URI-reference, see [RFC3986], Section 4.1>
User-Agent = product *( RWS ( product / comment ) )

Vary = "*" / ( *( "," OWS ) field-name *( OWS "," [ OWS field-name ]
    ) )
Via = *( "," OWS ) ( received-protocol RWS received-by [ RWS comment
    ] ) *( OWS "," [ OWS ( received-protocol RWS received-by [ RWS
    comment ] ) ] )

WWW-Authenticate = *( "," OWS ) challenge *( OWS "," [ OWS challenge
    ] )

absolute-URI = <absolute-URI, see [RFC3986], Section 4.3>
absolute-path = 1*( "/" segment )
accept-ext = OWS ";" OWS token [ "=" ( token / quoted-string ) ]
accept-params = weight *accept-ext
acceptable-ranges = ( *( "," OWS ) range-unit *( OWS "," [ OWS
    range-unit ] ) ) / "none"
asctime-date = day-name SP date3 SP time-of-day SP year
auth-param = token BWS "=" BWS ( token / quoted-string )
auth-scheme = token
authority = <authority, see [RFC3986], Section 3.2>

byte-content-range = bytes-unit SP ( byte-range-resp /
    unsatisfied-range )
byte-range = first-byte-pos "-" last-byte-pos
byte-range-resp = byte-range "/" ( complete-length / "*" )
byte-range-set = *( "," OWS ) ( byte-range-spec /
    suffix-byte-range-spec ) *( OWS "," [ OWS ( byte-range-spec /
    suffix-byte-range-spec ) ] )
byte-range-spec = first-byte-pos "-" [ last-byte-pos ]
byte-ranges-specifier = bytes-unit "=" byte-range-set
bytes-unit = "bytes"

challenge = auth-scheme [ 1*SP ( token68 / [ ( "," / auth-param ) *(
    OWS "," [ OWS auth-param ] ) ] ) ]
charset = token
codings = content-coding / "identity" / "*"
comment = "(" *( ctext / quoted-pair / comment ) ")"
complete-length = 1*DIGIT
content-coding = token
credentials = auth-scheme [ 1*SP ( token68 / [ ( "," / auth-param )
    *( OWS "," [ OWS auth-param ] ) ] ) ]
ctext = HTAB / SP / %x21-27 ; '!'-'''
    / %x2A-5B ; '*'-'['
    / %x5D-7E ; ']'-'~'
    / obs-text

date1 = day SP month SP year
date2 = day "-" month "-" 2DIGIT
date3 = month SP ( 2DIGIT / ( SP DIGIT ) )
day = 2DIGIT
day-name = %x4D.6F.6E ; Mon
    / %x54.75.65 ; Tue
    / %x57.65.64 ; Wed
    / %x54.68.75 ; Thu
    / %x46.72.69 ; Fri
    / %x53.61.74 ; Sat
    / %x53.75.6E ; Sun
day-name-l = %x4D.6F.6E.64.61.79 ; Monday
    / %x54.75.65.73.64.61.79 ; Tuesday
    / %x57.65.64.6E.65.73.64.61.79 ; Wednesday
    / %x54.68.75.72.73.64.61.79 ; Thursday
    / %x46.72.69.64.61.79 ; Friday
    / %x53.61.74.75.72.64.61.79 ; Saturday
    / %x53.75.6E.64.61.79 ; Sunday
delay-seconds = 1*DIGIT

entity-tag = [ weak ] opaque-tag
etagc = "!" / %x23-7E ; '#'-'~'
    / obs-text

field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
field-name = token
field-value = *( field-content / obs-fold )
field-vchar = VCHAR / obs-text
first-byte-pos = 1*DIGIT
fragment = <fragment, see [RFC3986], Section 3.5>

hour = 2DIGIT
http-URI = "http://" authority path-abempty [ "?" query ] [ "#"
    fragment ]
https-URI = "https://" authority path-abempty [ "?" query ] [ "#"
    fragment ]

language-range = <language-range, see [RFC4647], Section 2.1>
language-tag = <Language-Tag, see [RFC5646], Section 2.1>
last-byte-pos = 1*DIGIT

mailbox = <mailbox, see [RFC5322], Section 3.4>
media-range = ( "*/*" / ( type "/*" ) / ( type "/" subtype ) ) *( OWS
    ";" OWS parameter )
media-type = type "/" subtype *( OWS ";" OWS parameter )
method = token
minute = 2DIGIT
month = %x4A.61.6E ; Jan
    / %x46.65.62 ; Feb
    / %x4D.61.72 ; Mar
    / %x41.70.72 ; Apr
    / %x4D.61.79 ; May
    / %x4A.75.6E ; Jun
    / %x4A.75.6C ; Jul
    / %x41.75.67 ; Aug
    / %x53.65.70 ; Sep
    / %x4F.63.74 ; Oct
    / %x4E.6F.76 ; Nov
    / %x44.65.63 ; Dec

obs-date = rfc850-date / asctime-date
obs-fold = <obs-fold, see [Messaging], Section 5.2>
obs-text = %x80-FF
opaque-tag = DQUOTE *etagc DQUOTE
other-content-range = other-range-unit SP other-range-resp
other-range-resp = *VCHAR
other-range-set = 1*VCHAR
other-range-unit = token
other-ranges-specifier = other-range-unit "=" other-range-set

parameter = token "=" ( token / quoted-string )
partial-URI = relative-part [ "?" query ]
path-abempty = <path-abempty, see [RFC3986], Section 3.3>
port = <port, see [RFC3986], Section 3.2.3>
product = token [ "/" product-version ]
product-version = token
protocol-name = <protocol-name, see [Messaging], Section 9.7>
protocol-version = <protocol-version, see [Messaging], Section 9.7>
pseudonym = token

qdtext = HTAB / SP / "!" / %x23-5B ; '#'-'['
    / %x5D-7E ; ']'-'~'
    / obs-text
query = <query, see [RFC3986], Section 3.4>
quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
qvalue = ( "0" [ "." *3DIGIT ] ) / ( "1" [ "." *3"0" ] )

range-unit = bytes-unit / other-range-unit
received-by = ( uri-host [ ":" port ] ) / pseudonym
received-protocol = [ protocol-name "/" ] protocol-version
relative-part = <relative-part, see [RFC3986], Section 4.2>
request-target = <request-target, see [Messaging], Section 3.2>
rfc850-date = day-name-l "," SP date2 SP time-of-day SP GMT

second = 2DIGIT
segment = <segment, see [RFC3986], Section 3.3>
subtype = token
suffix-byte-range-spec = "-" suffix-length
suffix-length = 1*DIGIT

tchar = "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "." /
    "^" / "_" / "`" / "|" / "~" / DIGIT / ALPHA
time-of-day = hour ":" minute ":" second
token = 1*tchar
token68 = 1*( ALPHA / DIGIT / "-" / "." / "_" / "~" / "+" / "/" )
    *"="
type = token

unsatisfied-range = "*/" complete-length
uri-host = <host, see [RFC3986], Section 3.2.2>

weak = %x57.2F ; W/
weight = OWS ";" OWS "q=" qvalue

year = 4DIGIT

