c=constant k=key b=blockcount n=nonce

state = constants | key | counter | nonce
working_state = state
key_stream = chacha20_block(key, counter, nonce)
block = plaintext[((counter-1)*64)..(counter*64-1)]
key_stream = chacha20_block(key, counter, nonce)
block = plaintext[(counter*64)..len(plaintext)-1]
r = (le_bytes_to_num(key[0..15])
s = le_num(key[16..31])
accumulator = 0
p = (1<<130)-5
n = le_bytes_to_num([0x01] | msg[((i-1)*16)..(i*16)])
a = (r * a) % p
Acc = 00
Block = 6f4620636968706172676f7470797243
Acc = ((Acc+Block)*r) % P = 2c88c77849d64ae9147ddeb88e69c83fc

Acc = 2c88c77849d64ae9147ddeb88e69c83fc
Block = 6f7247206863726165736552206d7572
Acc = ((Acc+Block)*r) % P = 2d8adaf23b0337fa7cccfb4ea344b30de

Acc = 2d8adaf23b0337fa7cccfb4ea344b30de
Block = 7075
nonce = constant | iv
counter = 0
block = chacha20_block(key,counter,nonce)
otk = poly1305_key_gen(key, iv, constant)
nonce = constant | iv
ciphertext = chacha_encrypt(key, 1, nonce, plaintext)
mac_data = aad | pad16(aad)
tag = poly1305_mac(mac_data, otk)
