url-acap  = "acap://" url-server "/" url-enc-entry [url-filter]
               [url-extension]

attribute-dacl  = "dataset.acl" *("." name-component)

attribute-dset  = dataset-std 1*("." name-component)
                     ;; MUST be defined in a dataset class specification

attribute-name  = attribute-std / attr-site / attr-user / vendor-name

attribute-std   = "entry" / "subdataset" / "modtime" / "dataset.inherit"
                     / attribute-dacl / attribute-dset
attr-site       = "site" 1*("." name-component)

attr-user       = "user." name-component 1*("." name-component)

byowner         = "/byowner/" owner "/" [dataset-class "/" dataset-sub]

dataset-class   = dataset-std / vendor-name

dataset-normal  = "/" [dataset-class "/" (owner-prefix / dataset-tail)]

dataset-name    = byowner / dataset-normal

dataset-std     = name-component
                     ;; MUST be registered with IANA and the spec MUST
                     ;; be published as a standards track or
                     ;; IESG-approved experimental RFC

dataset-sub     = *(dname-component "/")
                     ;; The rules for this portion of the namespace may
                     ;; be further restricted by the dataset class
                     ;; specification.

dataset-tail    = owner "/" dataset-sub

dname-component = 1*UTF8-CHAR
                     ;; MUST NOT begin with "." or contain "/"

name-component  = 1*UTF8-CHAR
                     ;; MUST NOT contain ".", "/", "%", or "*"

owner           = "site" / owner-host / owner-group / owner-user / "~"

owner-group     = "group/" dname-component

owner-host      = "host/" dname-component

owner-prefix    = "group/" / "host/" / "user/"

owner-user      = "user/" dname-component

vendor-name     = vendor-token *("." name-component)

vendor-token    = "vendor." name-component
                     ;; MUST be registered with IANA
ALPHA              = %x41-5A / %x61-7A
                        ;; alphabetic letters
ATOM-CHAR          = "!" / %x23-27 / %x2A-5B / %x5D-7A / %x7C-7E
                        ;; Any CHAR except ATOM-SPECIALS

ATOM-SPECIALS      = "(" / ")" / "{" / SPACE / CTL / QUOTED-SPECIALS

BASE64-CHAR        = ALPHA / DIGIT / "+" / "/"
                        ;; case-sensitive

CHAR               = %x01-7F

CR                 = %x0C

CRLF               = CR LF

CTL                = %x00-1F / %x7F

DIGIT              = "0" / DIGIT-NZ

DIGIT-NZ           = %x31-39
                        ; non-zero digits ("1" - "9")

LF                 = %x0A

OCTET              = %x00-FF

QUOTED-CHAR        = SAFE-UTF8-CHAR / "\" QUOTED-SPECIALS

QUOTED-SPECIALS    = <"> / "\"

SAFE-CHAR          = %x01-09 / %x0B-0C / %x0E-21 /
                        %x23-5B / %x5D-7F
                        ;; any TEXT-CHAR except QUOTED-SPECIALS

SAFE-UTF8-CHAR     = SAFE-CHAR / UTF8-2 / UTF8-3 / UTF8-4 /
                        UTF8-5 / UTF8-6

SPACE              = %x20

TAG-CHAR           = %x21 / %x23-27 / %x2C-5B / %x5D-7A / %x7C-7E
                        ;; Any ATOM-CHAR except "*" or "+"

TEXT-CHAR          = %x01-09 / %x0B-0C / %x0E-7F
                        ;; any CHAR except CR and LF

TEXT-UTF8-CHAR     = SAFE-UTF8-CHAR / QUOTED-SPECIALS

UTF8-1             = %x80-BF
UTF8-2             = %xC0-DF UTF8-1

UTF8-3             = %xE0-EF 2UTF8-1

UTF8-4             = %xF0-F7 3UTF8-1

UTF8-5             = %xF8-FB 4UTF8-1

UTF8-6             = %xFC-FD 5UTF8-1

UTF8-CHAR          = TEXT-UTF8-CHAR / CR / LF

acl                = "(" *acl-identrights ")"

acl-identifier     = string-utf8
                        ;; MUST NOT contain TAB

acl-identrights    = string-utf8
                        ;; The identifier followed by a TAB, followed by
                        ;; the rights.

acl-delobject      = "(" dataset SPACE attribute [SPACE entry-name] ")"

acl-object         = "(" dataset [SPACE attribute [SPACE entry-name]] ")"

acl-rights         = quoted

atom               = ALPHA *1023ATOM-CHAR

attribute          = string-utf8
                        ;; dot-separated attribute name
                        ;; MUST NOT contain "*" or "%"

attribute-store    = attribute SPACE (value-nildef /
                        "(" 1*(metadata-write-q SPACE value-store) ")")
                        ;; MUST NOT include the same metadata twice

auth-type          = iana-token
                        ;; as defined in SASL [SASL]

base64-token       = *(4BASE64-CHAR) [base64-terminal]

base64-terminal    = (2BASE64-CHAR "==") / (3BASE64-CHAR "=")

command            = tag SPACE (command-any / command-auth /
                        command-nonauth) CRLF
                        ;; Modal based on state
command-authent    = "AUTHENTICATE" SPACE auth-type [SPACE base64-token]
                        *(CRLF base64-token)

command-any        = "NOOP" / command-lang / "LOGOUT"

command-auth       = command-delacl / command-dsince /
                        command-freectx / command-getquota /
                        command-lrights / command-myrights /
                        command-search / command-setacl /
                        command-store
                        ;; only valid in authenticated state

command-delacl     = "DELETEACL" SPACE acl-delobject [SPACE acl-identifier]

command-dsince     = "DELETEDSINCE" SPACE dataset SPACE time

command-extend     = extend-token [SPACE extension-data]

command-freectx    = "FREECONTEXT" SPACE context

command-getquota   = "GETQUOTA" SPACE dataset

command-lang       = "LANG" *(SPACE lang-tag)

command-lrights    = "LISTRIGHTS" SPACE acl-object

command-myrights   = "MYRIGHTS" SPACE acl-object

command-nonauth    = command-authent
                        ;; only valid in non-authenticated state

command-search     = "SEARCH" SPACE (dataset / context)
                        *(SPACE search-modifier)
                        SPACE search-criteria
                        ;; MUST NOT include same search-modifier twice

command-setacl     = "SETACL" SPACE acl-object SPACE acl-identifier
                        SPACE acl-rights

command-store      = "STORE" SPACE store-entry-list

comparator         = <"> comparator-name <">

comparator-name    = ["+" / "-"] iana-token

context            = string-utf8
                        ;; MUST NOT begin with slash ("/")
dataset            = string-utf8
                        ;; slash-separated dataset name
                        ;; begins with slash

entry              = entry-name / entry-path

entry-name         = string-utf8
                        ;; entry name MUST NOT contain slash
                        ;; MUST NOT begin with "."

entry-path         = string-utf8
                        ;; slash-separated path to entry
                        ;; begins with slash

entry-relative     = string-utf8
                        ;; potentially relative path to entry

extend-token       = atom
                        ;; MUST be defined by a standards track or
                        ;; IESG approved experimental protocol extension

extension-data     = extension-item *(SPACE extension-item)

extension-item     = extend-token / string / number /
                        "(" [extension-data] ")"

iana-token         = atom
                        ;; MUST be registered with IANA

initial-greeting   = "*" SPACE "ACAP" *(SPACE "(" init-capability ")") CRLF

init-capability    = init-cap-context / init-cap-extend /
                        init-cap-implem / init-cap-sasl

init-cap-context   = "CONTEXTLIMIT" SPACE string

init-cap-extend    = iana-token [SPACE string-list]

init-cap-implem    = "IMPLEMENTATION" SPACE string

init-cap-sasl      = "SASL" SPACE string-list

lang-tag           = <"> Language-Tag <">
                        ;; Language-Tag rule is defined in [LANG-TAGS]

literal            = "{" number [ "+" ] "}" CRLF *OCTET
                        ;; The number represents the number of octets
                        ;; MUST be literal-utf8 except for values
literal-utf8       = "{" number [ "+" ] "}" CRLF *UTF8-CHAR
                        ;; The number represents the number of octets
                        ;; not the number of characters

metadata           = attribute [ "(" metadata-type-list ")" ]
                        ;; attribute MAY end in "*" as wildcard.

metadata-list      = metadata *(SPACE metadata)

metadata-type      = "attribute" / "myrights" / "size" /
                        "count" / metadata-write

metadata-type-q    = <"> metadata-type <">

metadata-type-list = metadata-type-q *(SPACE metadata-type-q)

metadata-write     = "value" / "acl"

metadata-write-q   = <"> metadata-write <">

nil                = "NIL"

number             = *DIGIT
                        ;; A 32-bit unsigned number.
                        ;; (0 <= n < 4,294,967,296)

nz-number          = DIGIT-NZ *DIGIT
                        ;; A 32-bit unsigned non-zero number.
                        ;; (0 < n < 4,294,967,296)

position           = number
                        ;; "0" if context is not enumerated
                        ;; otherwise this is non-zero

quota-limit        = number

quota-usage        = number

quoted             = <"> *QUOTED-CHAR <">
                        ;; limited to 1024 octets between the <">s

response           = response-addto / response-alert / response-bye /
                        response-change / response-cont /
                        response-deleted / response-done / response-entry /
                        response-extend / response-listr /
                        response-lang / response-mtimei / response-mtimeu /
                        response-myright / response-quota /
                        response-refer / response-remove / response-stat
response-addto     = "*" SPACE "ADDTO" SPACE context SPACE entry-name
                        SPACE position SPACE return-data-list

response-alert     = "*" SPACE "ALERT" SPACE resp-body CRLF
                       ;; Client MUST display alert text to user

response-bye       = "*" SPACE "BYE" SPACE resp-body CRLF
                       ;; Server will disconnect condition

response-change    = "*" SPACE "CHANGE" SPACE context SPACE entry-name
                        SPACE position SPACE position SPACE return-data-list

response-cont      = "+" SPACE (quoted / base64-token)

response-deleted   = tag SPACE "DELETED" SPACE entry-name

response-done      = tag SPACE resp-cond-state CRLF

response-entry     = tag SPACE "ENTRY" SPACE entry SPACE return-data-list

response-extend    = (tag / "*") SPACE extend-token [SPACE extension-data]

response-lang      = "*" SPACE "LANG" SPACE lang-tag 1*(SPACE comparator)

response-listr     = tag SPACE "LISTRIGHTS" SPACE acl-rights
                        *(SPACE acl-rights)

response-mtimei    = tag SPACE "MODTIME" SPACE time

response-mtimeu    = "*" SPACE "MODTIME" SPACE context SPACE time

response-myright   = tag SPACE "MYRIGHTS" SPACE acl-rights

response-quota     = "*" SPACE "QUOTA" SPACE dataset SPACE quota-limit
                        SPACE quota-usage [SPACE extension-data]

response-refer     = tag SPACE "REFER" SPACE dataset 1*(SPACE
                        <"> url-relative <">)

response-remove    = "*" SPACE "REMOVEFROM" SPACE context SPACE
                        entry-name SPACE position

response-stat      = "*" SPACE resp-cond-state CRLF

resp-body          = ["(" resp-code ")" SPACE] quoted
resp-code          = "AUTH-TOO-WEAK" / "ENCRYPT-NEEDED" /
                        resp-code-inval / resp-code-mod /
                        resp-code-noexist / resp-code-perm / "QUOTA" /
                        resp-code-refer / resp-code-toomany / "TOOOLD" /
                        "TRANSITION-NEEDED" / "TRYFREECONTEXT" /
                        "TRYLATER" / "WAYTOOMANY" / resp-code-ext

resp-code-ext      = iana-token [SPACE extension-data]
                        ;; unknown response codes are ignored by the client.

resp-code-inval    = "INVALID" 1*(SPACE entry-path SPACE attribute)

resp-code-mod      = "MODIFIED" SPACE entry-path

resp-code-noexist  = "NOEXIST" SPACE dataset

resp-code-perm     = "PERMISSION" SPACE acl-object

resp-code-refer    = "REFER" 1*(SPACE <"> url-relative <">)

resp-code-toomany  = "TOOMANY" SPACE nz-number

resp-cond-state    = ("OK" / "NO" / "BAD") SPACE resp-body
                        ;; Status condition

return-data        = return-metadata / return-meta-list
                        ;; return-meta-list format is used when "*" is
                        ;; in the RETURN pattern on SEARCH

return-data-list   = return-data *(SPACE return-data)

return-meta-list   = "(" return-metadata *(SPACE return-metadata) ")"

return-metadata    = nil / string / value-list / acl

searchkey-equal    = "EQUAL" SPACE attribute SPACE comparator
                        SPACE value-nil

searchkey-comp     = "COMPARE" SPACE attribute SPACE comparator SPACE value

searchkey-prefix   = "PREFIX" SPACE attribute SPACE comparator SPACE value

searchkey-range    = "RANGE" SPACE nz-number SPACE nz-number
                        SPACE time

searchkey-strict   = "COMPARESTRICT" SPACE attribute SPACE comparator
                        SPACE value
searchkey-substr   = "SUBSTRING" SPACE attribute SPACE comparator
                         SPACE value

searchmod-depth    = "DEPTH" SPACE number

searchmod-hard     = "HARDLIMIT" SPACE nz-number

searchmod-limit    = "LIMIT" SPACE number SPACE number

searchmod-make     = "MAKECONTEXT" [SPACE "ENUMERATE"]
                        [SPACE "NOTIFY"] SPACE context

searchmod-ninh     = "NOINHERIT"

searchmod-return   = "RETURN" SPACE "(" [metadata-list] ")"

searchmod-sort     = "SORT" SPACE "(" sort-list ")"

search-criteria    = "ALL" / searchkey-equal / searchkey-comp /
                        searchkey-strict / searchkey-range /
                        searchkey-prefix / searchkey-substr /
                        "NOT" SPACE search-criteria /
                        "OR" SPACE search-criteria SPACE search-criteria /
                        "AND" SPACE search-criteria SPACE search-criteria

search-modifier    = searchmod-depth / searchmod-hard /
                        searchmod-limit / searchmod-make / searchmod-ninh /
                        searchmod-return / searchmod-sort

sort-list          = sort-item *(SPACE sort-item)

sort-item          = attribute SPACE comparator

store-entry        = "(" entry-path *(SPACE store-modifier)
                            *(SPACE attribute-store) ")"
                        ;; MUST NOT include the same store-modifier twice
                        ;; MUST NOT include the same attribute twice

store-entry-list   = store-entry *(SPACE store-entry)
                        ;; MUST NOT include the same entry twice

store-modifier     = store-mod-unchang / store-mod-nocreate

store-mod-nocreate = "NOCREATE"

store-mod-unchang  = "UNCHANGEDSINCE" SPACE time

string             = quoted / literal
string-list        = string *(SPACE string)

string-utf8        = quoted / literal-utf8

tag                = 1*32TAG-CHAR

time               = <"> time-year time-month time-day time-hour
                        time-minute time-second time-subsecond <">
                        ;; Timestamp in UTC

time-day           = 2DIGIT ;; 01-31

time-hour          = 2DIGIT ;; 00-23

time-minute        = 2DIGIT ;; 00-59

time-month         = 2DIGIT ;; 01-12

time-second        = 2DIGIT ;; 00-60

time-subsecond     = *DIGIT

time-year          = 4DIGIT

value              = string

value-any          = value-nil / value-list

value-list         = "(" [value *(SPACE value)] ")"

value-nil          = value / nil

value-nildef       = value-nil / "DEFAULT"

value-store        = value-nildef / value-list / acl

url-acap           = "acap://" url-server "/" url-enc-entry [url-filter]
                        [url-extension]
                        ;; url-enc-entry interpreted relative to "/"

url-attr-list      = url-enc-attr *("&" url-enc-attr)

url-auth           = ";AUTH=" ("*" / url-enc-auth)

url-achar          = uchar / "&" / "=" / "~"
                        ;; See RFC 1738 for definition of "uchar"
url-char           = uchar / "=" / "~" / ":" / "@" / "/"
                        ;; See RFC 1738 for definition of "uchar"

url-enc-attr       = 1*url-char
                        ;; encoded version of attribute name

url-enc-auth       = 1*url-achar
                        ;; encoded version of auth-type above

url-enc-entry      = 1*url-char
                        ;; encoded version of entry-relative above

url-enc-user       = *url-achar
                        ;; encoded version of login userid

url-extension      = *("?" 1*url-char)

url-filter         = "?" url-attr-list

url-relative       = url-acap / [url-enc-entry] [url-filter]
                        ;; url-enc-entry is relative to base URL

url-server         = [url-user [url-auth] "@"] hostport
                        ;; See RFC 1738 for definition of "hostport"

