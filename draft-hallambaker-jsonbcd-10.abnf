JSON-text = (object / array)

                                 Figure 1



                                 Figure 2
object = *cdef begin-object [

                                 Figure 3


            *( member value-separator | x-member )

                                 Figure 4


            (member | x-member) ] end-object

                                 Figure 5



                                 Figure 6


member = tag value

                                 Figure 7


x-member = tag x-value

                                 Figure 8



                                 Figure 9


tag = string name-separator | b-string | c-tag

                                 Figure 10



                                 Figure 11


array = *cdef begin-array [  *( value value-separator | x-value )

                                 Figure 12
x-value = b-value / d-value

                                 Figure 15



                                 Figure 16


value = false / null / true / object / array / number / string

                                 Figure 17



                                 Figure 18


name-separator  = ws %x3A ws  ; : colon

                                 Figure 19


value-separator = ws %x2C ws  ; , comma

                                 Figure 20

begin-array     = ws %x5B ws  ; [ left square bracket

                                 Figure 22
begin-object    = ws %x7B ws  ; { left curly bracket

                                 Figure 23


end-array       = ws %x5D ws  ; ] right square bracket

                                 Figure 24


end-object      = ws %x7D ws  ; } right curly bracket

                                 Figure 25



                                 Figure 26


ws = *( %x20 %x09 %x0A  %x0D )

                                 Figure 27



                                 Figure 28


false = %x66.61.6c.73.65   ; false

                                 Figure 29


null  = %x6e.75.6c.6c      ; null

                                 Figure 30


true  = %x74.72.75.65      ; true

                                 Figure 31

number = [ minus ] int [ frac ] [ exp ]

                                 Figure 32
decimal-point = %x2E       ; .

                                 Figure 33


digit1-9 = %x31-39         ; 1-9

                                 Figure 34


e = %x65 / %x45            ; e E

                                 Figure 35


exp = e [ minus / plus ] 1*DIGIT

                                 Figure 36


frac = decimal-point 1*DIGIT

                                 Figure 37


int = zero / ( digit1-9 *DIGIT )

                                 Figure 38


minus = %x2D               ; -

                                 Figure 39


plus = %x2B                ; +

                                 Figure 40


zero = %x30                ; 0

                                 Figure 41



                                 Figure 42
string = quotation-mark *char quotation-mark

                                 Figure 43


char = unescaped /

                                 Figure 44


escape = %x5C              ; \

                                 Figure 48


quotation-mark = %x22      ; "

                                 Figure 49


unescaped = %x20-21 / %x23-5B / %x5D-10FFFF

                                 Figure 50

b-value = b-atom | b-string | b-data | b-integer |

                                 Figure 51
b-string = *( string-chunk ) string-term

                                 Figure 54


b-data = *( data-chunk ) data-last

                                 Figure 55



                                 Figure 56


b-integer = p-int8 | p-int16 | p-int32 | p-int64 | p-bignum16 |

                                 Figure 57


b-float = binary64

                                 Figure 60

d-value = d-integer | d-float

                                 Figure 89



                                 Figure 90


d-float = binary16 | binary32 | binary128 | binary80 |

                                 Figure 91


