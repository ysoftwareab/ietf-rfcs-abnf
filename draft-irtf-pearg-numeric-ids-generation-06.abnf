id_range = max_id - min_id + 1;
next_id = min_id + (random() % id_range);
retry = id_range;

next_id = min_id;
id_range = max_id - min_id + 1;
retry = id_range;

next_id = min_id + (random() % id_range);

id_range = max_id - min_id + 1;

retry = 0;

offset = F(CONTEXT, retry, secret_key);
next_id = min_id + (offset % id_range);

id_range = max_id - min_id + 1;
retry = id_range;
id_inc = increment() % id_range;

next_id = min_id + random() % id_range;
next_id = next_id + id_inc;
next_id = min_id + id_inc - (max_id - next_id);
retry = retry - id_inc;

counter = 0;

id_range = max_id - min_id + 1;
id_inc = increment() % id_range;
offset = F(CONTEXT, secret_key);
retry = id_range;

next_id = min_id + (offset + counter) % id_range;
counter = counter + id_inc;

retry = retry - id_inc;

id_range = max_id - min_id + 1;
id_inc = increment() % id_range;
offset = F(CONTEXT, secret_key1);
index = G(CONTEXT, secret_key2) % TABLE_LENGTH;
retry = id_range;

next_id = min_id + (offset + table[index]) % id_range;
retry = retry - id_inc;

ID = offset(CONTEXT) + mono(CONTEXT);

ephemeral_port = offset(Dest_IP) + mono()

Frag_ID = offset(IP_src_addr, IP_dst_addr) + mono()

id = random() % 50000;

id_range = max_id - min_id + 1;
retry = id_range;
id_inc = increment() % id_range;

next_id = min_id + (offset(CONTEXT) + \
                               mono(CONTEXT)) % id_range;

retry = retry - id_inc;

next_id = min_id;
id_inc= 1;


id_range = max_id - min_id + 1;
retry = id_range;

next_id = min_id;
next_id = next_id + id_inc;
next_id = random();        /* Initialization value */
id_rinc = 500;             /* Determines the trade-off */


id_range = max_id - min_id + 1;
retry = id_range;


id_inc = (random() % id_rinc) + 1;

next_id = next_id + id_inc;
next_id = min_id + id_inc - (max_id - next_id);
retry = retry - id_inc;

