UTF8-xtra-2-head= %xC2-DF
UTF8-xtra-3-head= %xE0 %xA0-BF / %xE1-EC %x80-BF /
                      = %xED %x80-9F / %xEE-EF %x80-BF
UTF8-xtra-4-head= %xF0 %x90-BF / %xF1-F7 %x80-BF
UTF8-xtra-5-head= %xF8 %x88-BF / %xF9-FB %x80-BF
UTF8-xtra-6-head= %xFC %x84-BF / %xFD    %x80-BF
UTF8-xtra-tail  = %x80-BF
UTF8-xtra-char  = UTF8-xtra-2-head 1( UTF8-xtra-tail ) /
                        UTF8-xtra-3-head 1( UTF8-xtra-tail ) /
                        UTF8-xtra-4-head 2( UTF8-xtra-tail ) /
                        UTF8-xtra-5-head 3( UTF8-xtra-tail ) /
                        UTF8-xtra-6-head 4( UTF8-xtra-tail )
                          News Article Format                  July 2001

text            = %d1-9 /            ; all UTF-8 characters except
                        %d11-12 /          ; US-ASCII NUL, CR and LF
                        %d14-127 /
                        UTF8-xtra-char
ctext           = NO-WS-CTL /        ; all of <text> except
                        %d33-39 /          ; SP, HTAB, "(", ")"
                        %d42-91 /          ; and "\"
                        %d93-126 /
                        UTF8-xtra-char
qtext           = NO-WS-CTL /        ; all of <text> except
                        %d33 /             ; SP, HTAB, "\" and DQUOTE
                        %d35-91 /
                        %d93-126 /
                        UTF8-xtra-char
utext           = NO-WS-CTL /        ; Non white space controls
                        %d33-126 /         ; The rest of US-ASCII
                        UTF8-xtra-char
strict-text     = %d1-9 /            ; text restricted to
                        %d11-12 /          ; US-ASCII
                        %d14-127
strict-qtext    = NO-WS-CTL /        ; qtext restricted to
                        %d33 /             ; US-ASCII
                        %d35-91 /
                        %d93-127
strict-qcontent = strict-qtext / strict-quoted-pair
ALPHA           = %x41-5A /          ; A-Z
                        %x61-7A            ; a-z
CR              = %x0D               ; carriage return
CRLF            = CR LF
DIGIT           = %x30-39            ; 0-9
HTAB            = %x09               ; horizontal tab
LF              = %x0A               ; line feed
SP              = %x20               ; space
NO-WS-CTL       = %d1-8 /            ; US-ASCII control characters
                        %d11 /             ; which do not include the
                        %d12 /             ; carriage return, line feed,
                        %d14-31 /          ; and whitespace characters
                        %d127
specials        = "(" / ")" /        ; Special characters used in
                        "<" / ">" /        ;  other parts of the syntax
                        "[" / "]" /
                        ":" / ";" /
                        "@" / "
                        "," / "." /
                        DQUOTE
WSP             = SP / HTAB          ; Whitespace characters
FWS             = ([*WSP CRLF] 1*WSP); Folding whitespace
ccontent        = ctext / quoted-pair / comment
comment         = "(" *([FWS] ccontent) [FWS] ")"
CFWS            = *([FWS] comment) (([FWS] comment) / FWS )
DQUOTE          = %d34              ; quote mark
quoted-pair     = "\" text
atext           = ALPHA / DIGIT /
                        "!" / "#" /        ; Any character except
                        "$" / "%" /        ; controls, SP, and specials.
                        "&" / "'" /        ; Used for atoms
                        "*" / "+" /
                        "-" / "/" /
                        "=" / "?" /
                        "^" / "_" /
                        "`" / "}" /
                        "|" / "}" /
                        "~"
atom            = [CFWS] 1*atext [CFWS]
dot-atom        = [CFWS] dot-atom-text [CFWS]
dot-atom-text   = 1*atext *( "." 1*atext )
qcontent        = qtext / quoted-pair
quoted-string   = [CFWS]
                           DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                           [CFWS]
word            = atom / quoted-string
phrase          = 1*word
unstructured    = *( [FWS] utext ) [FWS]

        NOTE: CFWS occurs at many places in the syntax in order to allow
        comments and extra whitespace to be inserted almost anywhere.
        The syntax is in fact ambiguous insofar as it may be impossible
        to tell in which of several possible ways a given comment or WS
        was produced. However, this does not lead to semantic ambiguity
                          News Article Format                  July 2001

        because, unless specifically stated otherwise, the presence of
        absence of a comment or additional WS has no semantic meaning
        and, in particular, it is a matter of indifference whether it
        forms a part of the syntactic construct preceding it or the one
        following it.

        NOTE: Following [RFC 2234], literal text included in the syntax
        is to be regarded as case-insensitive.  However, in
        contradistinction to [RFC 2822], the Netnews protocols are
        sensitive to case in some instances (as in newsgroup names, some
        header parameters, etc.). Care has been taken to indicate this
        explicitly where required.

article           = 1*header separator body
header            = header-name ":" 1*SP header-content CRLF
header-name       = 1*name-character *( "-" 1*name-character )
name-character    = ALPHA / DIGIT
header-content    = USENET-header-content
                               *( [CFWS] ";" header-parameter ) /
                          other-header-content
header-parameter  = USENET-header-parameter /
                          other-header-parameter
                          News Article Format                  July 2001

attribute         = USENET-token / iana-token / x-token
value             = token / quoted-string
USENET-token      = <A token defined in this standard for
                           use in conjunction with a specific
                           USENET-header-parameter>
iana-token        = <A token defined in an experimental
                           or standards-track RFC and registered with
                           IANA>
x-token           = [CFWS] "x-" token-core [CFWS]
token             = [CFWS] token-core [CFWS]
token-core        = 1*<any (US-ASCII) CHAR except SP, CTLs,
                                    or tspecials>
tspecials         = "(" / ")" / "<" / ">" / "@" /
                          "," / ";" / ":" / "\" / DQUOTE /
                          "/" / "[" / "]" / "?" / "="
separator         = CRLF
body              = *( *998text CRLF )

address = mailbox / group
group = phrase ":" [mailbox-list] ";"
Date-content        = date-time
zone                = (( "+" / "-" ) 4DIGIT) / "UT" / "GMT"

From-content        = mailbox-list
addr-spec           = local-part "@" domain
local-part          = dot-atom / strict-quoted-string

        NOTE: This syntax ensures that the local-part of an addr-spec is
        restricted to pure US-ASCII (and is thus in strict compliance
        with [RFC 2822]), whilst allowing any UTF-8 character to be used
        in a preceding quoted-string containing the poster's full name.
        If some future extension to the Mail protocols should relax this
        restriction, one would expect the Netnews protocols to follow.

Message-ID-content = msg-id
id-left            = dot-atom-text / no-fold-quote
id-right           = dot-atom-text / no-fold-literal
no-fold-quote      = DQUOTE *( strict-qtext / strict-quoted-pair )
                              DQUOTE
no-fold-literal    = DQUOTE *( dtext / strict-quoted-pair ) DQUOTE

Subject-content     = [ back-reference ] pure-subject
pure-subject        = 1*( [FWS] utext )
back-reference      = %x52.65.3A.20
                                    ; which is a case-sensitive "Re: "

Newsgroups-content  = newsgroup-name
                               *( *FWS ng-delim *FWS newsgroup-name )
                               *FWS
newsgroup-name      = component *( "." component )
component           = 1*component-glyph
ng-delim            = ","
component-glyph     = combiner-base *combiner-mark
combiner-base       = combiner-ASCII / combiner-extended
combiner-ASCII      = "0"-"9" / %x41-5A / %x61-7A / "+" / "-" / "_"
combiner-extended   = <any character with a Unicode code value of
                             0080 or greater and a combining class of 0,
                             but excluding any character in Unicode
                             categories Cc, Cf, Cs, Zs, Zl, and Zp>
combiner-mark       = <any character with a Unicode code value of
                             0080 or greater and a combining class other
                             than 0>

        NOTE: the excluded characters are control characters (Cc),
        format control characters (Cf), surrogates (Cs), and separators
        (Zs, Zl, Zp). In particular, this excludes all whitespace
        characters.

Path-content        = *( path-identity [FWS] delimiter [FWS] )
                               tail-entry *FWS
path-identity       = 1*( ALPHA / DIGIT / "-" / "." / ":" / "_" )
delimiter           = "/" / "?" / "%" / "," / "!"
tail-entry          = 1*( ALPHA / DIGIT / "-" / "." / ":" / "_" )

        NOTE: A Path-content will inevitably contain at least one path-
        identity, except possibly in the case of a proto-article that
        has not yet been injected onto the network.

        NOTE: Observe that the syntax does not allow comments within the
        Path header; this is to simplify processing by relaying and
        injecting agents which have a requirement to process this header
        extremely rapidly.

Reply-To-content    = From-content  ; see 5.2

Sender-content      = mailbox

Organization-content= 1*( [FWS] utext )

        NOTE: Posting and injecting agents are discouraged from
        providing a default value for this header unless it is
        acceptable to all posters using those agents. Unless this header
        contains useful information (including some indication of the
        posters physical location) posters are discouraged from
        including it.

Keywords-content    = phrase *( "," phrase )

        NOTE: The list is comma separated NOT space separated.

Summary-content     = 1*( [FWS] utext )

Distribution-content= distribution *( dist-delim distribution )
dist-delim          = ","
distribution        = positive-distribution /
                               negative-distribution
distribution-name   = ALPHA 1*distribution-rest
distribution-rest   = ALPHA / "+" / "-" / "_"

        NOTE: The use of ALPHA in the syntax ensures that distribution
        names are always in US-ASCII.

Followup-To-content = Newsgroups-content / "poster"

Mail-Copies-To-content    = copy-addr / "nobody" / "poster"
copy-addr                 = mailbox
                          News Article Format                  July 2001

Posted-And-Mailed-content = "yes" / "no"

References-content  = msg-id *( CFWS msg-id )

        NOTE: This differs from the syntax of [RFC 2822] by requiring at
        least one CFWS between the msg-ids (this was an [RFC 1036]
        requirement).

Expires-content     = date-time

Archive-content     = [CFWS] ("no" | "yes" ) [CFWS]
Filename-token      = [CFWS] "filename" [CFWS]

Control-content     = CONTROL-verb CONTROL-argument
CONTROL-verb        = <the verb defined in this standard
                               (or an extension of it) for a specific
                               CONTROL message>
verb                = token
CONTROL-arguments   = <the argument defined in this standard
                               (or an extension of it) for a specific
                               CONTROL message>
arguments           = *( CFWS value )  ; see 4.1
Approved-content    = From-content  ; see 5.2

Replaces-content    = msg-id *( CFWS msg-id )
Disposition-token   = [CFWS] "disposition" [CFWS]
Disposition-value   = "replace" / "revise" / "repost"
Supersedes-content  = msg-id

        NOTE: There is no "c" in "Supersedes".

id-left-side        = dot-atom-text / no-fold-quote

id-left-side        = ( atom-text / no-fold-quote )
                               *( dollars-sequence )
dollars-sequence    = version-number / random-dollars-sequence
version-number      = "$" %d118 "=" 1*DIGIT ; $v=digits
Xref-content      = [CFWS] server-name 1*( CFWS location )
server-name       = path-identity  ; see 5.6.1
location          = newsgroup-name ":" article-locator
                             [ CFWS ( "revise" / "repost" )
                               ":" article-locator ]
article-locator   = 1*( %x21-7E ) ; US-ASCII printable characters

Lines-content       = [CFWS] 1*digit

User-Agent-content  = product-token *( CFWS product-token )
product-token       = value ["/" product-version]  ; see 4.1
product-version     = value

host-value          = dot-atom /
                            [ dot-atom ":" ]
                              ( dotted-quad / ; see [RFC 820]
                                ipv6-numeric ) ; see [RFC 2373]
sender-value        = ( mailbox / "verified" )
date-value          = 1*DIGIT [ ":" date-time ]

posting-account=client0002623; logging-data=2427;
posting-date="965243133: Wed 2 Aug 2000 20:05:33 -0100 (BST)"


usage=inject
usage=relay
batch             = 1*( batch-header article )
batch-header      = "#!" SP "rnews" SP article-size CRLF
article-size      = 1*digit

newgroup-verb       = "newgroup"
newgroup-arguments  = CFWS newsgroup-name [ CFWS newgroup-flag ]
newgroup-flag       = "moderated"

groupinfo-body      = [ newsgroups-tag CRLF ]
                               1*( newsgroups-line CRLF )
newsgroups-tag      = %x46.6F.72 SP %x79.6F.75.72 SP
                               %x6E.65.77.73.67.72.6F.75.70.73 SP
                               %x66.69.6C.65.3A
                               ; case sensitive
                               ; "For your newsgroups file:"
newsgroups-line     = newsgroup-name
                               [ 1*HTAB newsgroup-description ]
                               [ 1*WSP moderation-flag ]
moderation-flag     = %x28.4D.6F.64.65.72.61.74.65.64.29
                               ; case sensitive "(Moderated)"
differences = content-language ;
boundary = nxtlang

rmgroup-verb        = "rmgroup"
rmgroup-arguments   = CFWS newsgroup-name

mvgroup-verb      = "mvgroup"
mvgroup-arguments = CFWS ( mvgrp-groups / mvgrp-hrchy )
mvgrp-groups      = newsgroup-name
                             CFWS newsgroup-name [ CFWS newgroup-flag ]
mvgrp-hrchy       = groupnamepart ".*" CFWS groupnamepart ".*"
groupnamepart     = newsgroup-name    ; syntactically

checkgroup-verb     = "checkgroups"
checkgroup-arguments= [ chkscope ] [ chksernr ]
chkscope            = 1*( CFWS ["!"] newsgroup-name )
chksernr            = CFWS "#" 1*DIGIT

checkgroups-body    = *( valid-group CRLF )
valid-group         = newsgroups-line ; see 7.1.2
cancel-verb         = "cancel"
cancel-arguments    = CFWS message-id

ihave-arguments     = *( msg-id SP ) relayer-name
sendme-arguments    = ihave-arguments
relayer-name        = path-identity  ; see 5.6.1
ihave-body          = *( msg-id CRLF )
sendme-body         = ihave-body

