provides="vbng">
  <frameDefs>
    <frameDef>
      <name>Arbitrary</name>
      <synopsis>Any kind of packet</synopsis>
    </frameDef>
    <frameDef>
      <name>EthernetFrame</name>
      <synopsis>An ethernet frame</synopsis>
    </frameDef>
    <frameDef>
      <name>IPv4Packet</name>
      <synopsis>An IPv4 packet</synopsis>
    </frameDef>
  </frameDefs>
  <dataTypeDefs>
    <!-- For Port LFB -->
    <dataTypeDef>
      <name>operstates</name>
      <synopsis>
        The possible operational states of a port link (RFC 2863)
      </synopsis>
      <atomic>
        <baseType>uchar</baseType>
        <specialValues>
          <specialValue value="0">
            <name>OS_UNKNOWN</name>
            <synopsis>Unknown value</synopsis>
          </specialValue>
          <specialValue value="1">
            <name>OS_NOTPRESENT</name>
            <synopsis>The link is not present</synopsis>
          </specialValue>
          <specialValue value="2">
            <name>OS_DOWN</name>
            <synopsis>The link is operationally down</synopsis>
          </specialValue>
          <specialValue value="3">
            <name>OS_LOWERLAYERDOWN</name>
            <synopsis>The link of the lower port is down</synopsis>
          </specialValue>
          <specialValue value="4">
            <name>OS_TESTING</name>
            <synopsis>The Link is undergoing some testing</synopsis>
          </specialValue>
          <specialValue value="5">
            <name>OS_DORMANT</name>
            <synopsis>Link is in the dormant state</synopsis>
          </specialValue>
          <specialValue value="6">
            <name>OS_UP</name>
            <synopsis>The Link is operationally up</synopsis>
          </specialValue>
        </specialValues>
      </atomic>
    </dataTypeDef>
    <dataTypeDef>
      <name>adminstates</name>
      <synopsis>
        The possible administrative states of a port link (RFC 2863)
      </synopsis>
      <atomic>
        <baseType>uchar</baseType>
        <specialValues>
          <specialValue value="1">
            <name>AS_DOWN</name>
            <synopsis>The link is operationally down</synopsis>
          </specialValue>
          <specialValue value="2">
            <name>AS_LOWERLAYERDOWN</name>
            <synopsis>The link of the lower port is down</synopsis>
          </specialValue>
          <specialValue value="3">
            <name>AS_DORMANT</name>
            <synopsis>Link is in the dormant state</synopsis>
          </specialValue>
          <specialValue value="4">
            <name>AS_UP</name>
            <synopsis>The Link is operationally up</synopsis>
          </specialValue>
        </specialValues>
      </atomic>
    </dataTypeDef>
    <dataTypeDef>
      <name>devstats</name>
      <synopsis>Port stats</synopsis>
      <struct>
        <component componentID="1">
          <name>rx_packets</name>
          <synopsis>Total packets received</synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="2">
          <name>tx_packets</name>
          <synopsis>Total packets transmitted</synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="3">
          <name>rx_bytes</name>
          <synopsis>Total bytes received</synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="4">
          <name>tx_bytes</name>
          <synopsis>Total bytes transmitted</synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="5">
          <name>rx_errors</name>
          <synopsis>Total packet receive errors</synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="6">
          <name>tx_errors</name>
          <synopsis>Total packet transmit errors</synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="7">
          <name>rx_dropped</name>
          <synopsis>
      Total packet received and dropped. Typically because no
      space
    </synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="8">
          <name>tx_dropped</name>
          <synopsis>
      Total packet transmit dropped Typically because no space
    </synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="9">
          <name>multicast</name>
          <synopsis>Total multicast packets received</synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="10">
          <name>tx_collisions</name>
          <synopsis>Total transmit packet collisions on the
           link</synopsis>
          <optional/>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="11">
          <name>rx_length_errors</name>
          <synopsis>rx errors because of length mismatch</synopsis>
          <optional/>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="12">
          <name>rx_over_errors</name>
          <synopsis>rx errors because of buffer overflows</synopsis>
          <optional/>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="13">
          <name>rx_crc_errors</name>
          <synopsis>rx errors because of crc errors</synopsis>
          <optional/>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="14">
          <name>rx_frame_errors</name>
          <synopsis>rx errors because of frame alignment
           error</synopsis>
          <optional/>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="15">
          <name>rx_fifo_errors</name>
          <synopsis>rx errors because of fifo overruns</synopsis>
          <optional/>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="16">
          <name>rx_missed_errors</name>
          <synopsis>rx errors because of missed packets</synopsis>
          <optional/>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="17">
          <name>tx_aborted_errors</name>
          <synopsis>tx errors because of tx abort</synopsis>
          <optional/>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="18">
          <name>tx_carrier_errors</name>
          <synopsis>tx errors because of carrier problems</synopsis>
          <optional/>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="19">
          <name>tx_fifo_errors</name>
          <synopsis>tx errors because of fifo problems</synopsis>
          <optional/>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="20">
          <name>tx_heartbeat_errors</name>
          <synopsis>tx errors because of heartbeat problems</synopsis>
          <optional/>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="21">
          <name>tx_window_errors</name>
          <synopsis>tx errors because of windowing problems</synopsis>
          <optional/>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="22">
          <name>rx_compressed</name>
          <synopsis>Total rx compressed packets</synopsis>
          <optional/>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="23">
          <name>tx_compressed</name>
          <synopsis>Total tx compressed packets</synopsis>
          <optional/>
          <typeRef>uint64</typeRef>
        </component>
      </struct>
    </dataTypeDef>
    <dataTypeDef>
      <name>PortInfo</name>
      <synopsis>Describing the Port Details</synopsis>
      <struct>
        <component componentID="1">
          <name>name</name>
          <synopsis>The name of the port</synopsis>
          <optional/>
          <typeRef>string[16]</typeRef>
        </component>
        <component componentID="2">
          <name>ifindex</name>
          <synopsis>The ifindex of the port</synopsis>
          <typeRef>uint32</typeRef>
        </component>
        <component componentID="3">
          <name>L2Address</name>
          <synopsis>The MAC address</synopsis>
          <optional/>
          <typeRef>byte[6]</typeRef>
        </component>
        <component componentID="4">
          <name>mtu</name>
          <synopsis>The Maximum transmit unit for this port</synopsis>
          <optional/>
          <typeRef>uint32</typeRef>
        </component>
        <component componentID="5">
          <name>flags</name>
          <synopsis>
      flags for config and operational state. On the FE CE
      direction, these flags depend on flags mask to point to
      which flags to change
      </synopsis>
          <optional/>
          <typeRef>uint32</typeRef>
        </component>
        <component componentID="6">
          <name>flagsmask</name>
          <synopsis>
      Mask for flags for config and operational state In config
      direction, a bit turned on indicates that the FE is to set
      the corresponding flags to value specified
      </synopsis>
          <optional/>
          <typeRef>uint32</typeRef>
        </component>
        <component componentID="7">
          <name>stats</name>
          <synopsis>The 64-bit port stats</synopsis>
          <optional/>
          <typeRef>devstats</typeRef>
        </component>
        <component componentID="8">
          <name>operstate</name>
          <synopsis>The Link operational state of the port</synopsis>
          <optional/>
          <typeRef>operstates</typeRef>
        </component>
        <component componentID="9">
          <name>operstate</name>
          <synopsis>The Link operational state of the port</synopsis>
          <optional/>
          <typeRef>adminstates</typeRef>
        </component>
        <component componentID="10">
          <name>promiscuity</name>
          <synopsis>The port promiscuity</synopsis>
          <optional/>
          <typeRef>uint32</typeRef>
        </component>
      </struct>
    </dataTypeDef>
    <!-- For Classifier -->
    <dataTypeDef>
      <name>ethaddrs_key</name>
      <synopsis>Ethernet address key structure</synopsis>
      <struct>
        <component componentID="1">
          <name>eth_dst</name>
          <synopsis>Destination Ethernet address</synopsis>
          <optional/>
          <typeRef>byte[6]</typeRef>
        </component>
        <component componentID="2">
          <name>eth_dst_mask</name>
          <synopsis>Destination Ethernet address mask</synopsis>
          <optional/>
          <typeRef>byte[6]</typeRef>
        </component>
        <component componentID="3">
          <name>eth_src</name>
          <synopsis>Source Ethernet address</synopsis>
          <optional/>
          <typeRef>byte[6]</typeRef>
        </component>
        <component componentID="4">
          <name>eth_src_mask</name>
          <synopsis>Source Ethernet address mask</synopsis>
          <optional/>
          <typeRef>byte[6]</typeRef>
        </component>
      </struct>
    </dataTypeDef>
    <dataTypeDef>
      <name>inaddr_key</name>
      <synopsis>IPv4 Address key structure</synopsis>
      <struct>
        <component componentID="1">
          <name>src</name>
          <synopsis>IP Source address (BE)</synopsis>
          <optional/>
          <typeRef>octetstring[4]</typeRef>
        </component>
        <component componentID="2">
          <name>src_mask</name>
          <synopsis>IP Source address mask (BE)</synopsis>
          <optional/>
          <typeRef>octetstring[4]</typeRef>
        </component>
        <component componentID="3">
          <name>dst</name>
          <synopsis>IP Destination address (BE)</synopsis>
          <optional/>
          <typeRef>octetstring[4]</typeRef>
        </component>
        <component componentID="4">
          <name>dst_mask</name>
          <synopsis>IP Destination address mask (BE)</synopsis>
          <optional/>
          <typeRef>octetstring[4]</typeRef>
        </component>
      </struct>
    </dataTypeDef>
    <dataTypeDef>
      <name>PPPoE_control_key</name>
      <synopsis>PPPoE control key structure</synopsis>
      <struct>
        <component componentID="1">
          <name>PPPoEControl</name>
          <synopsis>PPPoE Control Traffic. Default 0x8863</synopsis>
          <optional/>
          <typeRef>uint16</typeRef>
        </component>
        <component componentID="2">
          <name>PPPControl</name>
          <synopsis>PPP Control Protocol Traffic</synopsis>
          <optional/>
          <typeRef>uint16</typeRef>
        </component>
      </struct>
    </dataTypeDef>
    <dataTypeDef>
      <name>PPPoE_subscriber_key</name>
      <synopsis>PPPoE control key structure</synopsis>
      <struct>
        <component componentID="1">
          <name>PPPSessionID</name>
          <synopsis>Session ID</synopsis>
          <optional/>
          <typeRef>uint16</typeRef>
        </component>
        <component componentID="2">
          <name>SubMACAddress</name>
          <synopsis>Session ID</synopsis>
          <optional/>
          <typeRef>octetstring[6]</typeRef>
        </component>
      </struct>
    </dataTypeDef>
    <dataTypeDef>
      <name>keyinfo</name>
      <synopsis>Describes the BNG classifier key</synopsis>
      <struct>
        <component componentID="1">
          <name>ip_proto</name>
          <synopsis>Transport protocols: TCP, UDP, SCTP, ICMP,
           ICMPV6</synopsis>
          <optional/>
          <atomic>
            <baseType>uchar</baseType>
            <specialValues>
              <specialValue value="1">
                <name>IPPROTO_ICMP</name>
                <synopsis/>
              </specialValue>
              <specialValue value="6">
                <name>IPPROTO_TCP</name>
                <synopsis/>
              </specialValue>
              <specialValue value="17">
                <name>IPPROTO_UDP</name>
                <synopsis/>
              </specialValue>
              <specialValue value="132">
                <name>IPPROTO_SCTP</name>
                <synopsis/>
              </specialValue>
              <specialValue value="58">
                <name>IPPROTO_ICMPV6</name>
                <synopsis/>
              </specialValue>
            </specialValues>
          </atomic>
        </component>
        <component componentID="2">
          <name>eth</name>
          <synopsis>Ethernet header key</synopsis>
          <optional/>
          <typeRef>ethaddrs_key</typeRef>
        </component>
        <component componentID="3">
          <name>ip</name>
          <synopsis>IP header key</synopsis>
          <optional/>
          <typeRef>inaddr_key</typeRef>
        </component>
        <component componentID="4">
          <name>PPPControl</name>
          <synopsis>PPPoE control headers</synopsis>
          <optional/>
          <typeRef>PPPoE_control_key</typeRef>
        </component>
        <component componentID="5">
          <name>PPPSubscriberTraffic_key</name>
          <synopsis>PPPoE data headers</synopsis>
          <optional/>
          <typeRef>PPPoE_subscriber_key</typeRef>
        </component>
      </struct>
    </dataTypeDef>
    <dataTypeDef>
      <name>filteractinfo</name>
      <synopsis>Basic filter action row entry</synopsis>
      <struct>
        <component componentID="1">
          <name>factype</name>
          <synopsis>Action type name</synopsis>
          <typeRef>string[16]</typeRef>
        </component>
        <component componentID="2">
          <name>faction</name>
          <synopsis>Action</synopsis>
          <atomic>
            <baseType>uchar</baseType>
            <specialValues>
              <specialValue value="0">
                <name>Drop</name>
                <synopsis>Drop packet</synopsis>
              </specialValue>
              <specialValue value="1">
                <name>ForwardPacket</name>
                <synopsis>Forward packet</synopsis>
              </specialValue>
              <specialValue value="2">
                <name>Redirect</name>
                <synopsis>Redirect packet to controller</synopsis>
              </specialValue>
            </specialValues>
          </atomic>
        </component>
      </struct>
    </dataTypeDef>
    <dataTypeDef>
      <name>ClassifierFilterInfo</name>
      <synopsis>Basic filter row entry</synopsis>
      <struct>
        <component componentID="1">
          <name>fname</name>
          <synopsis>Filter type name</synopsis>
          <typeRef>string[16]</typeRef>
        </component>
        <component componentID="2">
          <name>actions</name>
          <synopsis>The actions graph</synopsis>
          <array type="variable-size">
            <typeRef>filteractinfo</typeRef>
          </array>
        </component>
        <component componentID="3">
          <name>keys</name>
          <synopsis>Match filter keys</synopsis>
          <optional/>
          <array type="variable-size">
            <typeRef>keyinfo</typeRef>
          </array>
        </component>
      </struct>
    </dataTypeDef>
    <!-- For PPPoE LFB -->
    <dataTypeDef>
      <name>PPPoETableEntry</name>
      <synopsis>PPPoE Table Entry</synopsis>
      <struct>
        <component componentID="1">
          <name>SubscriberID</name>
          <synopsis>Subscriber Identifier</synopsis>
          <typeRef>uint32</typeRef>
        </component>
        <component componentID="2">
          <name>PPPSessionID</name>
          <synopsis>Session ID</synopsis>
          <typeRef>uint16</typeRef>
        </component>
        <component componentID="3">
          <name>SubscriberMACAddress</name>
          <synopsis>MAC Address</synopsis>
          <typeRef>octetstring[6]</typeRef>
        </component>
        <component componentID="4">
          <name>LocalMACAddress</name>
          <synopsis>Local MAC Address</synopsis>
          <typeRef>octetstring[6]</typeRef>
        </component>
        <component componentID="5">
          <name>MSS</name>
          <synopsis>Maximum Segment Size</synopsis>
          <optional/>
          <typeRef>uint16</typeRef>
        </component>
        <component componentID="6">
          <name>MRU</name>
          <synopsis>Maximum Receive Unit</synopsis>
          <optional/>
          <typeRef>uint16</typeRef>
        </component>
        <component componentID="7">
          <name>MagicNumber</name>
          <synopsis>PPP magic number</synopsis>
          <optional/>
          <typeRef>uint32</typeRef>
        </component>
        <component componentID="8">
          <name>PeerMagicNumber</name>
          <synopsis>Peer PPP magic number</synopsis>
          <optional/>
          <typeRef>uint32</typeRef>
        </component>
      </struct>
    </dataTypeDef>
    <dataTypeDef>
      <name>SubcriberStats</name>
      <synopsis>Subscriber Statistics</synopsis>
      <struct>
        <component componentID="1">
          <name>SubscriberID</name>
          <synopsis>ID of the subscriber</synopsis>
          <typeRef>uint32</typeRef>
        </component>
        <component componentID="2">
          <name>rx_encap_packets</name>
          <synopsis>Total packets received at the encap side</synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="3">
          <name>tx_encap_packets</name>
          <synopsis>Total packets transmitted at the encap side</synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="4">
          <name>rx_encap_bytes</name>
          <synopsis>Total bytes received at the encap side</synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="5">
          <name>tx_encap_bytes</name>
          <synopsis>Total bytes transmitted at the encap side</synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="6">
          <name>rx_decap_packets</name>
          <synopsis>Total packets received at the encap side</synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="7">
          <name>tx_decap_packets</name>
          <synopsis>Total packets transmitted at the encap side</synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="8">
          <name>rx_decap_bytes</name>
          <synopsis>Total bytes received at the encap side</synopsis>
          <typeRef>uint64</typeRef>
        </component>
        <component componentID="9">
          <name>tx_decap_bytes</name>
          <synopsis>Total bytes transmitted at the encap side</synopsis>
          <typeRef>uint64</typeRef>
        </component>
      </struct>
    </dataTypeDef>
    <!-- For IPv4 Routing LFB -->
    <dataTypeDef>
      <name>SubscriberRoutingTableEntry</name>
      <synopsis>A routing table entry</synopsis>
      <struct>
        <component componentID="1">
          <name>SubscriberID</name>
          <synopsis>Subscriber Identifier. Has been generated
           upstream</synopsis>
          <optional/>
          <typeRef>uint32</typeRef>
        </component>
        <component componentID="2">
          <name>IPv4Address</name>
          <synopsis>The destination IPv4 address</synopsis>
          <typeRef>octetstring[4]</typeRef>
        </component>
        <component componentID="3">
          <name>Prefixlen</name>
          <synopsis>The prefix length</synopsis>
          <atomic>
            <baseType>uchar</baseType>
            <rangeRestriction>
              <allowedRange min="0" max="32"/>
            </rangeRestriction>
          </atomic>
        </component>
        <component componentID="4">
          <name>HopSelector</name>
          <synopsis>
                 The HopSelector produced by the prefix matching LFB,
                 which will be used as an array index to find next-hop
                 information.</synopsis>
          <typeRef>uint32</typeRef>
        </component>
      </struct>
    </dataTypeDef>
    <dataTypeDef>
      <name>IPv4NextHopInfoType</name>
      <synopsis>
           Data type for entry of IPv4 next-hop information table
           in IPv4NextHop LFB.  The table uses a hop selector
           received from upstream LFB as a search key to look up
           index of the table to find the next-hop information.
         </synopsis>
      <struct>
        <component componentID="1">
          <name>OutIfiIndex</name>
          <synopsis>
                The interface index of the port that is to pass
                onto downstream LFB, indicating what port this packet
                should be sent out from.</synopsis>
          <typeRef>uint32</typeRef>
        </component>
        <component componentID="2">
          <name>MTU</name>
          <synopsis>
                Maximum Transmission Unit for outgoing port
               </synopsis>
          <typeRef>uint32</typeRef>
        </component>
        <component componentID="3">
          <name>NextHopIPAddr</name>
          <synopsis>The next-hop IPv4 address</synopsis>
          <typeRef>octetstring[4]</typeRef>
        </component>
        <component componentID="4">
          <name>NextHopMACAddr</name>
          <synopsis>The next-hop MAC address</synopsis>
          <typeRef>octetstring[6]</typeRef>
        </component>
      </struct>
    </dataTypeDef>
    <!-- For PolicerLFB -->
    <dataTypeDef>
      <name>PolicerTableEntry</name>
      <synopsis>A routing table entry</synopsis>
      <struct>
        <component componentID="1">
          <name>SubscriberID</name>
          <synopsis>Subscriber Identifier. Has been generated
           upstream</synopsis>
          <typeRef>uint32</typeRef>
        </component>
        <component componentID="2">
          <name>CIR</name>
          <synopsis>Committed Information Rate</synopsis>
          <typeRef>uint32</typeRef>
        </component>
        <component componentID="3">
          <name>PIR</name>
          <synopsis>Peak Information Rate </synopsis>
          <typeRef>uint32</typeRef>
        </component>
        <component componentID="4">
          <name>CBS</name>
          <synopsis>Committed Burst Size</synopsis>
          <typeRef>uint32</typeRef>
        </component>
        <component componentID="5">
          <name>PBS</name>
          <synopsis>Peak Burst Size</synopsis>
          <typeRef>uint32</typeRef>
        </component>
      </struct>
    </dataTypeDef>
  </dataTypeDefs>
  <metadataDefs>
    <metadataDef>
      <name>SubID</name>
      <synopsis>The ID of the subscriber</synopsis>
      <metadataID>1001</metadataID>
      <typeRef>uint32</typeRef>
    </metadataDef>
    <metadataDef>
      <name>OutIfIndex</name>
      <synopsis>Interface Index to output packets</synopsis>
      <metadataID>1002</metadataID>
      <typeRef>uint32</typeRef>
    </metadataDef>
  </metadataDefs>
  <LFBClassDefs>
    <LFBClassDef LFBClassID="2001">
      <name>Port</name>
      <synopsis>A Port LFB</synopsis>
      <version>1.0</version>
      <inputPorts>
        <inputPort>
          <name>IngressInPort</name>
          <synopsis>Ingress port from outside the BNG to be
           sent inside</synopsis>
          <expectation>
            <frameExpected>
              <ref>Arbitraty</ref>
            </frameExpected>
          </expectation>
        </inputPort>
        <inputPort>
          <name>EgressInPort</name>
          <synopsis>Egress port from within the BNG to be
           sent outside</synopsis>
          <expectation>
            <frameExpected>
              <ref>Arbitraty</ref>
            </frameExpected>
            <metadataExpected>
              <ref>OutIfIndex</ref>
            </metadataExpected>
          </expectation>
        </inputPort>
      </inputPorts>
      <outputPorts>
        <outputPort>
          <name>IngressOutPort</name>
          <synopsis>Ingress port to send packets within the
           BNG</synopsis>
          <product>
            <frameProduced>
              <ref>Arbitrary</ref>
            </frameProduced>
          </product>
        </outputPort>
        <outputPort>
          <name>EgressOutPort</name>
          <synopsis>Egress port to send packets out from the
           BNG</synopsis>
          <product>
            <frameProduced>
              <ref>Arbitrary</ref>
            </frameProduced>
          </product>
        </outputPort>
      </outputPorts>
      <components>
        <component componentID="1" access="read-write">
          <name>ports</name>
          <synopsis>the table of all ports</synopsis>
          <array type="variable-size">
            <typeRef>PortInfo</typeRef>
          </array>
        </component>
      </components>
      <events baseID="161">
        <event eventID="1">
          <name>PortChanged</name>
          <synopsis>
           An existing port has been updated.
           When the change occurs we report the table row that has
           changed including its contents + index (port ifindex).
          </synopsis>
          <eventTarget>
            <eventField>ports</eventField>
          </eventTarget>
          <eventChanged/>
          <eventReports>
            <eventReport>
              <eventField>ports</eventField>
              <eventSubscript>_pifindex_</eventSubscript>
            </eventReport>
          </eventReports>
        </event>
        <event eventID="2">
          <name>PortDeleted</name>
          <synopsis>
           An existing port has been deleted.
           When the change occurs we report the table row that
           has changed including its contents + index (port ifindex).
          </synopsis>
          <eventTarget>
            <eventField>ports</eventField>
          </eventTarget>
          <eventDeleted/>
          <eventReports>
            <eventReport>
              <eventField>ports</eventField>
              <eventSubscript>_pifindex_</eventSubscript>
            </eventReport>
          </eventReports>
        </event>
        <event eventID="3">
          <name>PortCreated</name>
          <synopsis>
        A new port has been created. When the change occurs we
        report the table row that has changed including its
        contents + index (port ifindex).
        </synopsis>
          <eventTarget>
            <eventField>ports</eventField>
          </eventTarget>
          <eventCreated/>
          <eventReports>
            <eventReport>
              <eventField>ports</eventField>
              <eventSubscript>_pifindex_</eventSubscript>
            </eventReport>
          </eventReports>
        </event>
        <event eventID="4">
          <name>PortStatsChanged</name>
          <synopsis>
        Event used to advertise synchronously port stats. The
        ForCES eventInterval property is useful for specifying the
        synchronous interval.
        </synopsis>
          <eventTarget>
            <eventField>ports</eventField>
          </eventTarget>
          <eventChanged/>
          <eventReports>
            <eventReport>
              <eventField>ports</eventField>
              <eventSubscript>_pifindex_</eventSubscript>
            </eventReport>
          </eventReports>
        </event>
      </events>
    </LFBClassDef>
    <LFBClassDef LFBClassID="2002">
      <name>Classifier</name>
      <synopsis>A Classifier LFB. Classifies frames</synopsis>
      <version>1.0</version>
      <inputPorts>
        <inputPort>
          <name>InPort</name>
          <synopsis>Input for the Classifier. Input could be from
          Port or tunneling infrastructure</synopsis>
          <expectation>
            <frameExpected>
              <ref>Arbitrary</ref>
            </frameExpected>
          </expectation>
        </inputPort>
      </inputPorts>
      <outputPorts>
        <outputPort>
          <name>ControlOut</name>
          <synopsis>Redirects packet towards the control plane.
          </synopsis>
          <product>
            <frameProduced>
              <ref>Arbitrary</ref>
            </frameProduced>
          </product>
        </outputPort>
        <outputPort>
          <name>EthernetOut</name>
          <synopsis>Port to send Ethenet frames</synopsis>
          <product>
            <frameProduced>
              <ref>EthernetFrame</ref>
            </frameProduced>
            <metadataProduced>
              <ref>SubID</ref>
            </metadataProduced>
          </product>
        </outputPort>
        <outputPort>
          <name>IPv4Out</name>
          <synopsis>Port to send IPv4 packets</synopsis>
          <product>
            <frameProduced>
              <ref>IPv4Packet</ref>
            </frameProduced>
            <metadataProduced>
              <ref>SubID</ref>
            </metadataProduced>
          </product>
        </outputPort>
      </outputPorts>
      <components>
        <component componentID="1" access="read-write">
          <name>Filters</name>
          <synopsis>The table of filters</synopsis>
          <array type="variable-size">
            <typeRef>ClassifierFilterInfo</typeRef>
          </array>
        </component>
      </components>
      <events baseID="61">
        <event eventID="1">
          <name>FilterChanged</name>
          <synopsis>
             A Filter instance has been updated. When the change occurs
             we report the table row that has changed including
             its contents + index.
          </synopsis>
          <eventTarget>
            <eventField>Filters</eventField>
          </eventTarget>
          <eventChanged/>
          <eventReports>
            <eventReport>
              <eventField>Filters</eventField>
              <eventSubscript>_findex_</eventSubscript>
            </eventReport>
          </eventReports>
        </event>
        <event eventID="2">
          <name>FilterDeleted</name>
          <synopsis>
             An existing Filter has been deleted. When the change
             occurs we report the table row that has changed including
             its contents + index.
          </synopsis>
          <eventTarget>
            <eventField>Filters</eventField>
          </eventTarget>
          <eventDeleted/>
          <eventReports>
            <eventReport>
              <eventField>Filters</eventField>
              <eventSubscript>_findex_</eventSubscript>
            </eventReport>
          </eventReports>
        </event>
        <event eventID="3">
          <name>FilterCreated</name>
          <synopsis>
              A new filter has been created. When the change occurs
              we report the table row that has changed including
              its contents + index.
           </synopsis>
          <eventTarget>
            <eventField>Filters</eventField>
          </eventTarget>
          <eventCreated/>
          <eventReports>
            <eventReport>
              <eventField>Filters</eventField>
              <eventSubscript>_findex_</eventSubscript>
            </eventReport>
          </eventReports>
        </event>
      </events>
    </LFBClassDef>
    <LFBClassDef LFBClassID="2003">
      <name>PPPoE</name>
      <synopsis>PPPoE LFB to encap and decap packets.</synopsis>
      <version>1.0</version>
      <inputPorts>
        <inputPort>
          <name>EncapIn</name>
          <synopsis>A port to encapsulate an IP packet</synopsis>
          <expectation>
            <frameExpected>
              <ref>IPv4Packet</ref>
            </frameExpected>
            <metadataExpected>
              <ref>SubID</ref>
              <ref>OutIfIndex</ref>
            </metadataExpected>
          </expectation>
        </inputPort>
        <inputPort>
          <name>DecapIn</name>
          <synopsis>A port to decapsulate a PPPoE packet</synopsis>
          <expectation>
            <frameExpected>
              <ref>EthernetFrame</ref>
            </frameExpected>
            <metadataExpected>
              <ref>SubID</ref>
            </metadataExpected>
          </expectation>
        </inputPort>
      </inputPorts>
      <outputPorts>
        <outputPort>
          <name>EncapOut</name>
          <synopsis>After Encaping an IPv4 Packet create an Ethernet
           frame</synopsis>
          <product>
            <frameProduced>
              <ref>EthernetFrame</ref>
            </frameProduced>
          </product>
        </outputPort>
        <outputPort>
          <name>DecapOut</name>
          <synopsis>Generates IPv4 packets</synopsis>
          <product>
            <frameProduced>
              <ref>IPv4Packet</ref>
            </frameProduced>
            <metadataProduced>
              <ref>SubID</ref>
            </metadataProduced>
          </product>
        </outputPort>
      </outputPorts>
      <components>
        <component componentID="1" access="read-write">
          <name>PPPoEInfo</name>
          <synopsis>Table with PPPoE Subscriber Information</synopsis>
          <array>
            <typeRef>PPPoETableEntry</typeRef>
          </array>
        </component>
        <component componentID="2" access="read-only">
          <name>Stats</name>
          <synopsis>Table with statistics for Encap and Decap
           packets per subscriber</synopsis>
          <array>
            <typeRef>SubcriberStats</typeRef>
          </array>
        </component>
      </components>
      <events baseID="161">
        <event eventID="1">
          <name>SubChanged</name>
          <synopsis>
         An existing PPPoE Subscriber has been updated.
         When the change occurs we report the table row that has
         changed including its contents + subscriberID.
        </synopsis>
          <eventTarget>
            <eventField>PPPoEInfo</eventField>
          </eventTarget>
          <eventChanged/>
          <eventReports>
            <eventReport>
              <eventField>PPPoEInfo</eventField>
              <eventSubscript>_SubscriberID_</eventSubscript>
            </eventReport>
          </eventReports>
        </event>
        <event eventID="2">
          <name>SubDeleted</name>
          <synopsis>
         An existing PPPoE Subscriber has been deleted.
         When the change occurs we report the table row that has
         changed including its contents + subscriberID.
        </synopsis>
          <eventTarget>
            <eventField>PPPoEInfo</eventField>
          </eventTarget>
          <eventDeleted/>
          <eventReports>
            <eventReport>
              <eventField>PPPoEInfo</eventField>
              <eventSubscript>_SubscriberID_</eventSubscript>
            </eventReport>
          </eventReports>
        </event>
        <event eventID="3">
          <name>SubCreated</name>
          <synopsis>
      A new PPPoE Subscriber has been created.
     When the change occurs we report the table row that has
     changed including its contents + subscriberID.
      </synopsis>
          <eventTarget>
            <eventField>PPPoEInfo</eventField>
          </eventTarget>
          <eventCreated/>
          <eventReports>
            <eventReport>
              <eventField>PPPoEInfo</eventField>
              <eventSubscript>_SubscriberID_</eventSubscript>
            </eventReport>
          </eventReports>
        </event>
        <event eventID="4">
          <name>StatsChanged</name>
          <synopsis>
      Event used to advertise synchronously encap stats. The
      ForCES eventInterval property is useful for specifying the
      synchronous interval.
      </synopsis>
          <eventTarget>
            <eventField>Stats</eventField>
          </eventTarget>
          <eventChanged/>
          <eventReports>
            <eventReport>
              <eventField>Stats</eventField>
              <eventSubscript>_SubscriberID_</eventSubscript>
            </eventReport>
          </eventReports>
        </event>
      </events>
    </LFBClassDef>
    <LFBClassDef LFBClassID="2004">
      <name>IPv4Routing</name>
      <synopsis>IPv4 Routing LFB</synopsis>
      <version>1.0</version>
      <inputPorts>
        <inputPort>
          <name>InPort</name>
          <synopsis>Input port for packets</synopsis>
          <expectation>
            <frameExpected>
              <ref>IPv4Packet</ref>
            </frameExpected>
            <metadataExpected>
              <ref>SubID</ref>
            </metadataExpected>
          </expectation>
        </inputPort>
      </inputPorts>
      <outputPorts>
        <outputPort>
          <name>NormalOut</name>
          <synopsis>Output port for packets</synopsis>
          <product>
            <frameProduced>
              <ref>IPv4Packet</ref>
            </frameProduced>
            <metadataProduced>
              <ref>SubID</ref>
              <ref>OutIfIndex</ref>
            </metadataProduced>
          </product>
        </outputPort>
        <outputPort>
          <name>ExceptionOut</name>
          <synopsis>Port for errors</synopsis>
          <product>
            <frameProduced>
              <ref>IPv4Packet</ref>
            </frameProduced>
          </product>
        </outputPort>
      </outputPorts>
      <components>
        <component componentID="1" access="read-write">
          <name>IPv4RoutingTable</name>
          <synopsis>
           A table for IPv4 Longest Prefix Match.  The
           destination IPv4 address of every input packet is
           used as a search key to look up the table to find
           out a next-hop selector.
           </synopsis>
          <array>
            <typeRef>SubscriberRoutingTableEntry</typeRef>
          </array>
        </component>
        <component componentID="2" access="read-write">
          <name>IPv4NextHopTable</name>
          <synopsis>
           The IPv4NextHopTable component.  A
           HopSelector is used to match the table index
           to find out a row that contains the next-hop
           information result.
           </synopsis>
          <array>
            <typeRef>IPv4NextHopInfoType</typeRef>
          </array>
        </component>
      </components>
    </LFBClassDef>
    <LFBClassDef LFBClassID="2005">
      <name>Policer</name>
      <synopsis>Policer LFB</synopsis>
      <version>1.0</version>
      <inputPorts>
        <inputPort>
          <name>InUpstreamPort</name>
          <synopsis>Input port for the Policer LFB for upstream
           traffic</synopsis>
          <expectation>
            <frameExpected>
              <ref>IPv4Packet</ref>
            </frameExpected>
            <metadataExpected>
              <ref>SubID</ref>
            </metadataExpected>
          </expectation>
        </inputPort>
        <inputPort>
          <name>InDownstreamPort</name>
          <synopsis>Input port for the Policer LFB  for downstream
           traffic</synopsis>
          <expectation>
            <frameExpected>
              <ref>IPv4Packet</ref>
            </frameExpected>
            <metadataExpected>
              <ref>SubID</ref>
            </metadataExpected>
          </expectation>
        </inputPort>
      </inputPorts>
      <outputPorts>
        <outputPort>
          <name>OutUpstreamPort</name>
          <synopsis>Output port for the Policer LFB  for upstream
           traffic</synopsis>
          <product>
            <frameProduced>
              <ref>IPv4Packet</ref>
            </frameProduced>
            <metadataProduced>
              <ref>SubID</ref>
            </metadataProduced>
          </product>
        </outputPort>
        <outputPort>
          <name>OutDownstreamPort</name>
          <synopsis>Output port for the Policer LFB  for downstream
           traffic</synopsis>
          <product>
            <frameProduced>
              <ref>IPv4Packet</ref>
            </frameProduced>
            <metadataProduced>
              <ref>SubID</ref>
            </metadataProduced>
          </product>
        </outputPort>
      </outputPorts>
      <components>
        <component componentID="1" access="read-write">
          <name>UpstreamPolicy</name>
          <synopsis>Policy entries for upstream traffic</synopsis>
          <array>
            <typeRef>BandwidthTableEntry</typeRef>
          </array>
        </component>
        <component componentID="2" access="read-write">
          <name>DownstreamPolicy</name>
          <synopsis>Policy entries for downstream traffic</synopsis>
          <array>
            <typeRef>PolicerTableEntry</typeRef>
          </array>
        </component>
      </components>
    </LFBClassDef>
  </LFBClassDefs>
