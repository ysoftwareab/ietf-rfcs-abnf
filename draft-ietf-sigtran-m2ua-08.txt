Network Working Group                                   Ken Morneault
INTERNET-DRAFT                                              Ram Dantu
                                                        Cisco Systems
                                                      Greg Sidebottom
                                                      Nortel Networks
                                                           Tom George
                                                              Alcatel
                                                       Brian Bidulock
                                                              OpenSS7
                                                          Jacob Heitz
                                                               Lucent


Expires in six months                                       June 2001



                  SS7 MTP2-User Adaptation Layer
                  <draft-ietf-sigtran-m2ua-08.txt>


Status of This Memo

This document is an Internet-Draft and is in full conformance with all
provisions of Section 10 of RFC 2026. Internet-Drafts are working
documents of the Internet Engineering Task Force (IETF), its areas,
and its working groups.  Note that other groups MAY also distribute
working documents as Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six months
and MAY be updated, replaced, or obsoleted by other documents at any
time.  It is inappropriate to use Internet-Drafts as reference
material or to cite them other than as 'work in progress'.

The list of current Internet-Drafts can be accessed at
http://www.ietf.org/ietf/1id-abstracts.txt

The list of Internet-Draft Shadow Directories can be accessed at
http://www.ietf.org/shadow.html.

To learn the current status of any Internet-Draft, please check the
'1id-abstracts.txt' listing contained in the Internet- Drafts Shadow
Directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),
munnari.oz.au (Pacific Rim), ftp.ietf.org (US East Coast), or
ftp.isi.edu (US West Coast).




Abstract

This Internet Draft defines a protocol for backhauling of SS7 MTP2
User signaling messages over IP using the Stream Control
Transmission Protocol (SCTP).  This protocol would be used between a
Signaling Gateway (SG) and Media Gateway Controller (MGC).  It is
assumed that the SG receives SS7 signaling over a standard SS7
interface using the SS7 Message Transfer Part (MTP) to provide
transport.  The Signaling Gateway would act as a Signaling Link
Terminal.




Morneault, et al                                                [Page 1]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


                        TABLE OF CONTENTS

1.  Introduction..............................................2
  1.1  Scope..................................................2
  1.2  Terminology............................................3
  1.3  Signaling Transport Architecture.......................3
  1.4  Services Provide by the M2UA Adaptation Layer..........6
  1.5  Function Provided by the M2UA Layer....................8
  1.6  Definition of the M2UA Boundaries......................9
2.  Conventions...............................................9
3.  Protocol Elements.........................................9
  3.1  Common Message Header.................................10
  3.2  M2UA Message Header...................................11
  3.3  M2UA Messages.........................................11
4.  Procedures...............................................20
  4.1  Procedures to Support Service in Section 1.4.1........20
  4.2  Procedures to Support Service in Section 1.4.2........21
  4.3  Procedures to Support Service in Section 1.4.3........21
5.  Examples of MTP2 User Adaptation (M2UA) Procedures.......26
  5.1  Establishment of associations between SG and MGC......26
       examples
  5.2  MTP Level 2 / MTP Level 3 Boundary Examples...........28
  5.3  Layer Management Communication Examples...............29
6.  Timers...................................................30
7.  Security.................................................30
8.  IANA Considerations......................................31
  8.1 SCTP Payload Protocol Identifier.......................31
  8.2 IUA Protocol Extensions................................31
9.  Acknowledgements.........................................31
10. References...............................................32
11. Author's Addresses.......................................33
































Morneault, et al                                                [Page 2]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


1.  Introduction

1.1 Scope

There is a need for Switched Circuit Network SCN signaling protocol
delivery from an Signaling Gateway (SG) to a Media Gateway
Controller (MGC) or IP Signaling Point (IPSP).  The delivery
mechanism SHOULD meet the following criteria:

*  Support for MTP Level 2 / MTP Level 3 interface boundary
*  Support for communication between Layer Management modules on SG 
   and MGC
*  Support for management of SCTP active associations between the SG and 
   MGC

The SG will terminate up to MTP Level 2 and the MGC will terminate 
MTP Level 3 and above.  In other words, the SG will transport MTP 
Level 3 messages over an IP network to a MGC or IPSP.

1.2 Terminology

MTP2-User - A protocol that uses the services of MTP Level 2 
(i.e. MTP3).

Interface - For the purposes of this document, an interface is a SS7
signaling link.

Backhaul - Refers to the transport of signaling from the point of
interface for the associated data stream (i.e., SG function in the MGU)
back to the point of call processing (i.e., the MGCU), if this is not
local [4].

Association - An association refers to a SCTP association.  The
association will provide the transport for the delivery of protocol
data units for one or more interfaces.

Stream - A stream refers to an SCTP stream; a uni-directional logical
channel established from one SCTP endpoint to another associated SCTP
endpoint, within which all user messages are delivered in-sequence
except for those submitted to the un-ordered delivery service.

Interface Identifier - The Interface Identifier identifies the physical 
interface at the SG for which the signaling messages are sent/received. 
The format of the Interface Identifier parameter can be text or integer, 
the values of which are assigned according to network operator policy.  
The values used are of local significance only, coordinated between the 
SG and ASP.

Application Server (AS) - A logical entity serving a specific application
instance.  An example of an Application Server is a MGC handling the
MTP Level 3 and call processing for SS7 links terminated by the
Signaling Gateways.  Practically speaking, an AS is modeled at the SG
as an ordered list of one or more related Application Server Processes
(e.g., primary, secondary, tertiary, ...).

Application Server Process (ASP) - A process instance of an Application
Server.  Examples of Application Server Processes are primary or backup
MGC instances.

Fail-over - The capability to re-route signaling traffic as required
to an alternate Application Server Process within an Application Server 
in the event of failure or unavailability of a currently used Application 
Server Process.  Fail-back MAY apply upon the return to service of a 
previously unavailable Application Server Process.

Morneault, et al                                                [Page 3]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


Signaling Link Terminal (SLT) - Refers to the means of performing all
of the functions defined at MTP level 2 regardless of their
implementation [2].

Layer Management - Layer Management is a nodal function in an SG or
ASP that handles the inputs and outputs between the M2UA layer and a
local management entity.

MTP - The Message Transfer Part of the SS7 protocol.

MTP2 - MTP Level 2, the signalling datalink layer of SS7

MTP3 - MTP Level 3, the signalling network layer of SS7

Network Byte Order: Most significant byte first, a.k.a Big Endian.

Host - The computing platform that the ASP process is running on.

1.3  M2UA Overview

The framework architecture that has been defined for SCN signaling
transport over IP [6] uses two components:  a signaling common 
transport protocol and an adaptation module to support the services 
expected by a particular SCN signaling protocol from its underlying 
protocol layer.

Within this framework architecture, this document defines a SCN
adaptation module that is suitable for the transport of SS7 MTP2 User
messages.  The only SS7 MTP2 User is MTP3.  The M2UA uses the services
of the Stream Control Transmission Protocol [5] as the underlying 
reliable signaling common transport protocol.

In a Signaling Gateway, it is expected that the SS7 MTP2-User signaling
is transmitted and received from the PSTN over a standard SS7 network
interface, using the SS7 Message Transfer Part Level 1 and Level 2 [3,4]
to provide reliable transport of the MTP3-User signaling messages to and
from an SS7 Signaling End Point (SEP) or Signaling Transfer Point (STP).
The SG then provides a inter-working of transport functions
with the IP transport, in order to transfer the MTP2-User signaling
messages to and from an Application Server Process where the peer MTP2-
User protocol layer exists.

1.3.1  Example - SG to MGC

In a Signaling Gateway, it is expected that the SS7 signaling is
received over a standard SS7 network termination, using the SS7 Message
Transfer Part (MTP) to provide transport of SS7 signaling messages to
and from an SS7 Signaling End Point (SEP) or SS7 Signaling Transfer
Point (STP).  In other words, the SG acts as a Signaling Link Terminal
(SLT) [2].  The SG then provides interworking of transport functions
with IP Signaling Transport, in order to transport the MTP3 signaling
messages to the MGC where the peer MTP3 protocol layer exists, as shown
below:








Morneault, et al                                                [Page 4]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


    ******    SS7    ******      IP     *******
    *SEP *-----------* SG *-------------* MGC *
    ******           ******             *******

    +----+                              +----+
    |S7UP|                              |S7UP|
    +----+                              +----+
    |MTP +                              |MTP |
    | L3 |            (NIF)             |L3  |
    +----+         +----+----+          +----+
    |MTP |         |MTP |M2UA|          |M2UA|
    |    |         |    +----+          +----+
    |L2  |         |L2  |SCTP|          |SCTP|
    |L1  |         |L1  +----+          +----+
    |    |         |    |IP  |          |IP  |
    +----+         +---------+          +----+

    NIF  - Nodal Interworking Function
    SEP  - SS7 Signaling Endpoint
    IP   - Internet Protocol
    SCTP - Stream Control Transmission Protocol
           (Refer to Reference [5])

            Figure 1  M2UA in the SG to MGC Application

Note: STPs MAY be present in the SS7 path between the SEP and the SG.

It is recommended that the M2UA use the services of the Stream
Control Transmission Protocol (SCTP) as the underlying reliable
common signaling transport protocol.  The use of SCTP provides
the following features:

  - explicit packet-oriented delivery (not stream-oriented)
  - sequenced delivery of user messages within multiple streams,
    with an option for order-of-arrival delivery of individual
    user messages,
  - optional multiplexing of user messages into SCTP datagrams,
  - network-level fault tolerance through support of multi-homing
    at either or both ends of an association,
  - resistance to flooding and masquerade attacks, and
  - data segmentation to conform to discovered path MTU size

There are scenarios without redundancy requirements and
scenarios in which redundancy is supported below the transport
layer.  In these cases, the SCTP functions above MAY NOT be a
requirement and TCP can be used as the underlying common
transport protocol.

1.3.2  Support for the management of SCTP associations between the SG
       and ASPs

The M2UA layer at the SG maintains the availability state of all
configured ASPs, in order to manage the SCTP associations and the 
traffic between the SG and ASPs.  As well, the active/inactive state 
of remote ASP(s) are also maintained.  The Active ASP(s) are the one(s) 
currently receiving traffic from the SG.

The M2UA layer MAY be instructed by local management to establish an
SCTP association to a peer M2UA node.  This can be achieved using the 
M-SCTP ESTABLISH primitive to request, indicate and confirm the
establishment of an SCTP association with a peer M2UA node.

The M2UA layer MAY also need to inform local management of the status of
the underlying SCTP associations using the M-SCTP STATUS request and
indication primitive. For example, the M2UA MAY inform local management
of the reason for the release of an SCTP association, determined either
locally within the M2UA layer or by a primitive from the SCTP.

Also the M3UA layer may need to inform the local management of the 
change in status of an ASP or AS.  This may be achieved using the M-ASP 
STATUS request or M-AS STATUS request primitives.

1.3.3 Signaling Network Architecture

A Signaling Gateway will support the transport of MTP2-User signaling
traffic received from the SS7 network to one or more distributed ASPs
(e.g., MGCs).  Clearly, the M2UA protocol description cannot in itself
meet any performance and reliability requirements for such transport.
A physical network architecture is required, with data on the
availability and transfer performance of the physical nodes involved in
any particular exchange of information.  However, the M2UA protocol MUST
be flexible enough allow its operation and management in a variety of
physical configurations that will enable Network Operators to meet
their performance and reliability requirements.

To meet the stringent SS7 signaling reliability and performance
requirements for carrier grade networks, these Network Operators SHOULD
ensure that there is no single point of failure provisioned in the end-
to-end network architecture between an SS7 node and an IP ASP.

Depending of course on the reliability of the SG and ASP functional
elements, this can typically be met by the spreading links in a linkset
across SGs, the provision of redundant QoS-bounded IP network paths for
SCTP Associations between SCTP End Points, and redundant Hosts.  The
distribution of ASPs within the available Hosts is also important.  For 
a particular Application Server, the related ASPs SHOULD be distributed 
over at least two Hosts.

An example logical network architecture relevant to carrier-grade
operation in the IP network domain is shown in Figure 2 below:




Morneault, et al                                                [Page 5]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


  ********                                         **************
  *      *_________________________________________*  ********  * Host1
  *      *                                _________*  * ASP1 *  *
  *  SG1 *   SCTP Associations           |         *  ********  *
  *      *_______________________        |         *            *
  ********                       |       |         **************
                                 |       |
  ********                       |       |
  *      *_______________________________|
  *      *                       |
  *  SG2 *    SCTP Associations  |
  *      *____________           |
  *      *            |          |
  ********            |          |                 **************
                      |          |_________________*  ********  * Host2
                      |____________________________*  * ASP2 *  *
                                                   *  ********  *
                                                   *            *
                                                   **************
                                                           .
                                                           .
                                                           .

                    Figure 2 - Logical Model Example


For carrier grade networks, Operators SHOULD ensure that under failure
or isolation of a particular ASP, stable calls or transactions are not
lost.  This implies that ASPs need, in some cases, to share the call/-
transaction state or be able to pass the call/transaction state between
each other.  Also, in the case of ASPs performing call processing,
coordination MAY be required with the related Media Gateway to transfer
the MGC control for a particular trunk termination.  However, this
sharing or communication is outside the scope of this document.

1.3.4  ASP Fail-over Model and Terminology

The M2UA layer supports ASP fail-over functions in order to support a 
high availability of call and transaction processing capability.  All 
MTP2-User messages incoming to a SG from the SS7 network are assigned 
to the unique Application Server, based on the Interface Identifier of 
the message.

The M2UA layer supports a n+k redundancy model (active-standby, 
loadsharing, broadcast) where 1 ASP is the minimum number of redundant 
ASPs required to handle traffic and k ASPs are available to take over 
for a failed or unavailable ASP.  Note that 1+1 active/standby redundancy 
is a subset of this model.  A simplex 1+0 model is also supported as a 
subset, with no ASP redundancy.



Morneault, et al                                                [Page 6]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


To avoid a single point of failure, it is recommended that a minimum of
two ASPs be configured in an AS list, resident in separate hosts and, 
therefore, available over different SCTP associations.  For example, in 
the network shown in Figure 2, all messages for the Interface Identifiers 
could be sent to ASP1 in Host1 or ASP2 in Host2.  The AS list at SG1 
might look like the following:

    Interface Identiers - Application Server #1
        ASP1/Host1  - State = Active
        ASP2/Host2  - State = Inactive

In this 1+1 redundancy case, ASP1 in Host1 would be sent any incoming
message for the Interface Identifiers registered.  ASP2 in Host2 would
normally be brought to the active state upon failure of ASP1/Host1.  
In this example, both ASPs are Inactive or Active, meaning that the 
related SCTP association and far-end M2UA peer is ready.

The two ASPs MAY share state information via shared memory, or MAY
use an ASP to ASP protocol to pass state information. The ASP to ASP
protocol is outside the scope of this document.

1.3.5 Client/Server Model

It is recommended that the SG and ASP be able to support both client
and server operation.  The peer endpoints using M2UA SHOULD be
configured so that one always takes on the role of client and the
other the role of server for initiating SCTP associations.  The
default orientation would be for the SG to take on the role of server
while the ASP is the client.  In this case, ASPs SHOULD initiate the
SCTP association to the SG.

The SCTP (and UDP/TCP) Registered User Port Number Assignment for M2UA
is 2904.

1.4  Services Provided by the M2UA Adaptation Layer

The SS7 MTP3/MTP2(MTP2-User) interface is retained at the termination
point in the IP network, so that the M2UA protocol layer is required to
provide the equivalent set of services to its users as provided by the
MTP Level 2 to MTP Level 3.

1.4.1  Support for MTP Level 2 / MTP Level 3 interface boundary

M2UA supports a MTP Level 2 / MTP Level 3 interface boundary that enables 
a seamless, or as seamless as possible, operation of the MTP2-User peers 
in the SS7 and IP domains.  An example of the primitives that need to be
supported can be found in [7].


Morneault, et al                                                [Page 7]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


1.4.2  Support for communication between Layer Management modules
       on SG and MGC

The M2UA layer needs to provide some messages that will facilitate 
communication between Layer Management modules on the SG and MGC.

To facilitate reporting of errors that arise because of backhauling MTP
Level 3 scenario, the following primitive is defined:

M-ERROR

The M-ERROR message is used to indicate an error with a received
M2UA message (e.g., an interface identifier value is not known to the 
SG).

1.4.3  Support for management of active associations between SG and MGC

As discussed in Section 1.3.2, the M2UA layer on the SG keeps the state 
of the configured ASPs.  A set of primitives between M2UA layer and the 
Layer Management are defined below to help the Layer Management manage 
the association(s) between the SG and the MGC. The M2UA layer can be 
instructed by the Layer Management to establish a SCTP association to 
a peer M2UA node.  This procedure can be achieved using the M-SCTP 
ESTABLISH primitive.

M-SCTP ESTABLISH

The M-SCTP ESTABLISH primitive is used to request, indicate and confirm
the establishment of a SCTP association to a peer M2UA node.

M-SCTP RELEASE

The M-SCTP RELEASE primitives are used to request, indicate, and
confirm the release of a SCTP association to a peer M2UA node.

The M2UA layer MAY also need to inform the status of the SCTP
association(s) to the Layer Management.  This can be achieved using
the following primitive.

Morneault, et al                                                [Page 8]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


M-SCTP STATUS

The M-SCTP STATUS primitive is used to request and indicate the status
of underlying SCTP association(s).

The Layer Management MAY need to inform the M2UA layer of an AS/ASP
status (i.e., failure, active, etc.), so that messages can be exchanged 
between M2UA layer peers to stop traffic to the local M2UA user.  This 
can be achieved using the following primitive.

M-ASP STATUS

The ASP status is stored inside M2UA layer on both the SG and MGC
sides.  The M-ASP STATUS primitive can be used by Layer Management to
request the status of the Application Server Process from the M2UA
layer.  This primitive can also be used to indicate the status of the
Application Server Process.

M-ASP MODIFY

The M-ASP MODIFY primitive can be used by Layer Management to modify
the status of the Application Server Process.  In other words, the
Layer Management on the ASP side uses this primitive to initiate
the ASPM procedures.

M-AS STATUS

The M-AS STATUS primitive can be used by Layer Management to request
the status of the Application Server.  This primitive can also be
used to indicate the status of the Application Server.

1.5  Functions Provided by the M2UA Layer

1.5.1  Mapping

The M2UA layer MUST maintain a map of a Interface ID to a physical
interface on the Signaling Gateway.  A physical interface would be a
V.35 line, T1 line/timeslot, E1 line/timeslot, etc.   The M2UA layer
MUST also maintain a map of Interface Identifier to SCTP association
and to the related stream within the association.

The SG maps an Interface Identifier to an SCTP association/stream
only when an ASP sends an ASP Active message for a particular Interface
Identifier.  It MUST be noted, however, that this mapping is dynamic
and could change at any time due to a change of ASP state.  This mapping
could even temporarily be invalid, for example during failover of one
ASP to another.  Therefore, the SG MUST maintain the states of AS/ASP
and reference them during the routing of an messages to an AS/ASP.

An example of the logical view of relationship between SS7 link, 
Interface Identifier, AS and ASP in the SG is shown below:

            /-------------------------------------------------+
           /   /----------------------------------------------|--+
          /   /                                               v  |
         /   /    +----+             act+-----+   +-------+ -+--+|-+-  
SS7 link1-------->|IID |-+          +-->| ASP |-->| Assoc |      v
           /      +----+ |  +----+  |   +-----+   +-------+ -+--+--+-
          /              +->| AS |--+                        Streams 
         /        +----+ |  +----+   stb+-----+
SS7 link2-------->|IID |-+              | ASP |
                  +----+                +-----+

where IID = Interface Identifier

A SG can support more than one AS.  An AS can support more than
one Interface Identifier. 

1.5.2 Status of ASPs

The M2UA layer on the SG MUST maintain the state of the ASPs it is
supporting.  The state of an ASP changes because of reception of
peer-to-peer messages (ASPM messages as described in Section 3.3.2)
or reception of indications from the local SCTP association.  ASP
state transition procedures are described in Section 4.3.1.

At a SG, an Application Server list MAY contain active and inactive
ASPs to support ASP fail-over procedures.  When, for example, both 
a primary and a back-up ASP are available, M2UA peer protocol is 
required to control which ASP is currently active.  The ordered 
list of ASPs within a logical Application Server is kept updated in 
the SG to reflect the active Application Server Process.

Also the M2UA layer MAY need to inform the local management of the
change in status of an ASP or AS.  This can be achieved using the M-ASP
STATUS or M-AS STATUS primitives.

1.5.3  SCTP Specifics

1.5.3.1  SCTP Stream Management

SCTP allows a user specified number of streams to be opened during 
initialization of the association.  It is the responsibility of the 
M2UA layer to ensure proper management of these streams.  Because of 
the unidirectional nature of streams, a M2UA layer is not aware of the 
stream information from its peer M2UA layer.  Instead, the Interface 
Identifier is in the M2UA message header.

The use of SCTP streams within M2UA is recommended in order to minimize
transmission and buffering delay, therefore improving the overall 
performance and reliability of the signaling elements.  A separate
SCTP stream can be used for each SS7 link.  Or, an implementation may 
choose to split the SS7 link across several streams based on SLS.  
This method may be of particular interest for high speed links (MTP3b)
since high speed links have a 24-bit sequence number and the stream
sequence number is 16-bits.

SCTP Stream '0' SHOULD not be used for MTP2 User Adaptation (MAUP) 
messages (see Section 3) since stream '0' SHOULD onlt be used for ASP 
Management (ASPM) messages (see Section 4.3.3).

1.5.4  Seamless SS7 Network Management Interworking

The M2UA layer on the SG SHOULD pass an indication of unavailability of
the M2UA-User (MTP3) to the local Layer Management, if the currently
active ASP moves from the ACTIVE state.  If the AS moves to the DOWN
state while SS7 links are in-service, the SG SHOULD follow the MTP 2 
processor outage procedures [2].

1.5.5  Flow Control / Congestion

It is possible for the M2UA layer to be informed of IP network 
congestion onset and abatement by means of an implementation-dependent 
function (i.e. an indication from the SCTP).  The handling of
this congestion indication by M2UA is implementation dependent.

1.5.6  Audit of Link State

After a failover of one ASP to another ASP, it may be necessary for the 
M2UA on the ASP to audit the current SS7 link state to ensure consistency.
The M2UA on the SG would respond to the audit request with information
regarding the current state of the link (i.e. in-service, out-of-service,
congestion state, LPO/RPO state).


Morneault, et al                                                [Page 9]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


1.6  Definition of the M2UA Boundaries

1.6.1  Definition of the M2UA / MTP Level 3 boundary

DATA
ESTABLISH
RELEASE
STATE
DATA RETRIEVAL
DATA RETRIEVAL COMPLETE

1.6.2  Definition of the M2UA / MTP Level 2 boundary

DATA
ESTABLISH
RELEASE
STATE
DATA RETRIEVAL
DATA RETRIEVAL COMPLETE

1.6.3  Definition of the Lower Layer Boundary between M2UA and SCTP

The upper layer and layer management primitives provided by SCTP are
provided in Reference [5] Section 9.

1.6.4  Definition of Layer Management / M2UA Boundary

   M-SCTP ESTABLISH request
   Direction: LM -> M2UA
   Purpose: LM requests ASP to establish an SCTP association with an SG.
  	
   M-STCP ESTABLISH confirm 
   Direction: M2UA -> LM
   Purpose: ASP confirms to LM that it has established an SCTP 
            association with an SG.

   M-SCTP ESTABLISH indication 
   Direction: M2UA -> LM
   Purpose: SG informs LM that an ASP has established an SCTP 
            association.

   M-SCTP RELEASE request 
   Direction: LM -> M2UA
   Purpose: LM requests ASP to release an SCTP association with SG.

   M-SCTP RELEASE confirm
   Direction: M2UA -> LM
   Purpose: ASP confirms to LM that it has released SCTP association 
            with SG.

   M-SCTP RELEASE indication
   Direction: M2UA -> LM
   Purpose: SG or IPSP informs LM that ASP has released an SCTP 
            association.

   M-SCTP STATUS request 
   Direction: LM -> M2UA
   Purpose: LM requests M2UA to report status of SCTP association.

   M-SCTP STATUS indication 
   Direction: M2UA -> LM
   Purpose: M2UA reports status of SCTP association.

   M-ASP STATUS request 
   Direction: LM -> M2UA
   Purpose: LM requests SG to report status of remote ASP.

   M-ASP STATUS indication 
   Direction: M2UA -> LM
   Purpose: SG reports status of remote ASP.

   M-AS-STATUS request 
   Direction: LM -> M2UA
   Purpose: LM requests SG to report status of AS.

   M-AS-STATUS indication 
   Direction: M2UA -> LM
   Purpose: SG reports status of AS.

   M-NOTIFY indication 
   Direction: M2UA -> LM
   Purpose: ASP reports that it has received a NOTIFY message 
            from its peer.

   M-ERROR indication 
   Direction: M2UA -> LM
   Purpose: ASP or SG reports that it has received an ERROR 
            message from its peer.

   M-ASP-UP request 
   Direction: LM -> M2UA
   Purpose: LM requests ASP to start its operation and send an ASP UP
            message to the SG.

   M-ASP-UP confirm
   Direction: M2UA -> LM
   Purpose: ASP reports that it has received an ASP UP Acknowledgement
            message from the SG.

   M-ASP-DOWN request 
   Direction: LM -> M2UA
   Purpose: LM requests ASP to stop its operation and send an ASP DOWN 
            message to the SG.

   M-ASP-DOWN confirm
   Direction: M2UA -> LM
   Purpose: ASP reports that is has received an ASP DOWN Acknowledgement
            message from the SG.

   M-ASP-ACTIVE request 
   Direction: LM -> M2UA
   Purpose: LM requests ASP to send an ASP ACTIVE message to the SG.

   M-ASP-ACTIVE confirm
   Direction: M2UA -> LM
   Purpose: ASP reports that is has received an ASP ACTIVE Acknowledgement
            message from the SG.  

   M-ASP-INACTIVE request 
   Direction: LM -> M2UA
   Purpose: LM requests ASP to send an ASP INACTIVE message to the SG.

   M-ASP-INACTIVE confirm
   Direction: M2UA -> LM
   Purpose: ASP reports that is has received an ASP INACTIVE Acknowledgement
            message from the SG.

2.0 Conventions

The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD
NOT, RECOMMENDED, NOT RECOMMENDED, MAY, and OPTIONAL, when they appear
in this document, are to be interpreted as described in [RFC2119].

3.0  Protocol Elements

This section describes the format of various messages used in this
protocol.

Morneault, et al                                               [Page 10]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


3.1  Common Message Header

The protocol messages for MTP2-User Adaptation require a message
structure which contains a version, message class, message type, message
length, and message contents.   This message header is common among all
signaling protocol adaptation layers:


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Version    |     Spare     | Message Class | Message Type  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        Message Length                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                  Figure 3  Common Message Header

All fields in an M2UA message MUST be transmitted in the network byte
order, unless otherwise stated.

3.1.1  Version

The version field (vers) contains the version of the M2UA adapation
layer.  The supported versions are:

       Value    Version
       -----    -------
         1      Release 1.0

3.1.2  Message Type

The following List contains the valid Message Classes:

   Message Class: 8 bits (unsigned integer)

         0        Management (MGMT) Message [IUA/M2UA/M3UA/SUA]
         1        Transfer Messages [M3UA]
         2        SS7 Signalling Network Management (SSNM) Messages [M3UA/SUA]
         3        ASP State Maintenance (ASPSM) Messages [IUA/M2UA/M3UA/SUA]
         4        ASP Traffic Maintenance (ASPTM) Messages [IUA/M2UA/M3UA/SUA]
         5        Q.921/Q.931 Boundary Primitives Tranport (QPTM)
                  Messages [IUA]
         6        MTP2 User Adaptatation (MAUP) Messages [M2UA]
         7        Connectionless Messages [SUA]
         8        Connection-Oriented Messages [SUA]
      9 to 127    Reserved by the IETF
    128 to 255    Reserved for IETF-Defined Message Class extensions

The following list contains the message types for the defined messages.

     MTP2 User Adaptatation (MAUP) Messages

         0        Reserved
         1        Data     
         2        Establish Request
         3        Establish Confirm 
         4        Release Request 
         5        Release Confirm  
         6        Release Indication      
         7        State Request                
         8        State Confirm             
         9        State Indication                
        10        Data Retrieval Request        
        11        Data Retrieval Confirm    
        12        Data Retrieval Indication     
        13        Data Retrieval Complete Indication  
        14        Congestion Indication  
     15 to 127    Reserved by the IETF
    128 to 255  Reserved for IETF-Defined MAUP extensions


Morneault, et al                                               [Page 11]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


     Application Server Process State Maintenance (ASPSM) messages

         0        Reserved
         1        ASP Up (UP)
         2        ASP Down (DOWN)
         3        Reserved
         4        ASP Up Ack (UP ACK)
         5        ASP Down Ack (DOWN ACK)
         6        Reserved
      7 to 127    Reserved by the IETF
    128 to 255    Reserved for IETF-Defined ASPSM extensions

     Application Server Process Traffic Maintenance (ASPTM) messages

         0        Reserved
         1        ASP Active (ACTIVE)
         2        ASP Inactive (INACTIVE)
         3        ASP Active Ack (ACTIVE ACK)
         4        ASP Inactive Ack (INACTIVE ACK)
      5 to 127    Reserved by the IETF
    128 to 255    Reserved for IETF-Defined ASPTM extensions

     Management (MGMT) Messages

         0        Error (ERR)
         1        Notify (NTFY)
      2 to 127    Reserved by the IETF
    128 to 255    Reserved for IETF-Defined MGMT extensions

3.1.3  Reserved

The Reserved field is 8-bits.  It SHOULD be set to all '0's and
ignored by the receiver.

3.1.4  Message Length

The Message Length defines the length of the message in octets, 
including the header.  The Message Length includes parameter
padding bytes, if any.

3.1.5 Variable-Length Parameter Format

M2UA messages consist of a Common Header followed by zero or more
variable-length parameters, as defined by the message type.  The
variable-length parameters contained in a message are defined in a
Tag-Length-Value format as shown below.

   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |          Parameter Tag        |       Parameter Length        |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  \                                                               \
  /                       Parameter Value                         /
  \                                                               \
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

Mandatory paramters MUST be placed before optional parameters in a 
message.

Parameter Tag: 16 bits (unsigned integer)

The Type field is a 16 bit identifier of the type of parameter.  It 
takes a value of 0 to 65534.  The common parameter Tags (used by all 
User Adaptation layers) defined are as follows:

   Parameter Value     Parameter Name
   ---------------     --------------
         0 (0x0)       Reserved
         1 (0x1)       Interface Identifier (Integer)
         2 (0x2)       Interface Identifier (Integer Range)
         3 (0x3)       Interface Identifier (Text)
         4 (0x4)       Info String
         5 (0x5)       Unused
         6 (0x6)       Unused
         7 (0x7)       Diagnostic Information
         8 (0x8)       Heartbeat Data
         9 (0x9)       Unused
        10 (0xa)       Reason
        11 (0xb)       Traffic Mode Type
        12 (0xc)       Error Code
        13 (0xd)       Status Type/Information
        14 (0xe)       ASP Identifier

The M2UA specific parameter Tags defined are as follows:

   Parameter Value     Parameter Name
   ---------------     --------------
     768 (0x0300)      Protocol Data 1
     769 (0x0301)      Protocol Data 2 (TTC)
     770 (0x0302)      State Request
     771 (0x0303)      State Result
     772 (0x0304)      State Event
     773 (0x0305)      Congestion Status
     774 (0x0306)      Discard Status
     775 (0x0307)      Action
     776 (0x0308)      Sequence Number
     777 (0x0309)      Retrieval Result

Parameter Length: 16 bits (unsigned integer)

The Parameter Length field contains the size of the parameter in bytes,
including the Parameter Tag, Parameter Length, and Parameter Value
fields.  The Parameter Length does not include any padding bytes.

Parameter Value: variable-length.

The Parameter Value field contains the actual information to be
transferred in the parameter.

The total length of a parameter (including Tag, Parameter Length and Value
fields) MUST be a multiple of 4 bytes.  If the length of the parameter is
not a multiple of 4 bytes, the sender pads the Parameter at the end (i.e.,
after the Parameter Value field) with all zero bytes.  The length of the
padding is NOT included in the parameter length field.  A sender SHOULD
NOT pad with more than 3 bytes. The receiver MUST ignore the padding
bytes.

3.2  M2UA Message Header

In addition to the common message header, there will be a M2UA specific
message header.  The M2UA specific message header will immediately
follow the common message header, but will only be used with MAUP
messages.

This message header will contain the Interface Identifier.  The
Interface Identifier identifies the physical interface at the SG for
which the signaling messages are sent/received. The format of the
Interface Identifier parameter can be text or integer, the values of 
which are assigned according to network operator policy.  The values 
used are of local significance only, coordinated between the SG and 
ASP.

The integer formatted Interface Identifier MUST be supported.  The
text formatted Interface Identifier MAY optionally be supported.


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0x1)           |           Length=8            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier (integer)                |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Figure 4  M2UA Message Header (Integer-based Interface Identifier)


The Tag value for Integer-based Interface Identifier is 0x1.  The length 
is always set to a value of 8.


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0x3)           |             Length            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                   Interface Identifier (text)                 |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

     Figure 5  M2UA Message Header (Text-based Interface Identifier)

The Tag value for the Text-based Interface Identifier is 0x3.  The
length is variable.


3.3 M2UA Messages

The following section defines the messages and parameter contents.  The
M2UA messages will use the common message header (Figure 3) and the
M2UA message header (Figure 4).

3.3.1 MTP2 User Adaptation Messages

3.3.1.1 Data

The Data message contains an SS7 MTP2-User Protocol Data Unit (PDU).  The 
Data message contains the following parameter:

    Protocol Data (mandatory)









Morneault, et al                                               [Page 12]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


The format for the Data Message parameters is as follows:


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x300)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                       Protocol Data                           |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


The Protocol Data field contains the MTP2-User application message in
network byte order starting with the Signaling Information Octet (SIO).

The format for a Data Message with TTC PDU parameters is as follows:


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x301)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                       Protocol Data                           |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


The Protocol Data field contains the MTP2-User application message in
network byte order starting with the Length Indicator (LI) octet.
The Japanese TTC variant uses the spare bits of the LI octet for 
priority.

3.3.1.2  Establish (Request, Confirmation)

The Establish Request message is used to establish the link or to
indicate that the channel has been established.  The MGC controls the 
state of the SS7 link.  When the MGC desires the SS7 link to be 
in-service, it will send the Establish Request message.  Note that the 
gateway MAY already have the SS7 link established at its layer.  If so, 
upon receipt of an Establish Request, the gateway takes no action except 
to send an Establish Confirm.

When the MGC sends an M2UA Establish Request message, the MGC MAY 
start a timer.  This timer would be stopped upon receipt of an M2UA 
Establish Confirm.  If the timer expires, the MGC would re-send the 
M2UA Establish Request message and restart the timer.  In other words,
the MGC MAY continue to request the establishment of the data link 
on periodic basis until the desired state is achieved or take some 
other action (notify the Management Layer).

The mode (Normal or Emergency) for bringing the link in service is
defaulted to Normal.  The State Request (described in Section 3.3.1.4
below) can be used to change the mode to Emergency.

3.3.1.3  Release (Request, Indication, Confirmation)

This Release Request message is used to release the channel.  The
Release Confirm and Indication messages are used to indicate that the
channel has been released.

3.3.1.4  State Request

The State Request message can be sent from a MGC to cause an action
on a particular SS7 link supported by the Signaling Gateway.  The
gateway sends a State Confirm to the MGC if the action has been success-
fully completed.  The State Confirm reflects that state value received
in the State Request message.

Morneault, et al                                               [Page 13]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001



    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x302)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             State                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The valid values for State are shown in the following table.

         Define           Value        Description
   STATUS_LPO_SET          0x0      Request local processor outage
   STATUS_LPO_CLEAR        0x1      Request local processor outage
                                    recovered
   STATUS_EMER_SET         0x2      Request emergency alignment
                                    procedure
   STATUS_EMER_CLEAR       0x3      Request normal alignment (cancel
                                    emergency) procedure
   STATUS_FLUSH_BUFFERS    0x4      Flush receive, transmit and retransmit
                                    queues
   STATUS_CONTINUE         0x5      Continue
   STATUS_AUDIT            0x6      Audit state of link
   STATUS_CONG_CLEAR       0x7      Congestion cleared
   STATUS_CONG_ACCEPT      0x8      Congestion accept
   STATUS_CONG_DISCARD     0x9      Congestion discard 

3.3.1.5  State Confirm

The State Confirm message will be sent by the SG in response to a State
Request from the MGC.  The State Confirm reflects that state value 
received in the State Request message.  There is also a field to indicate 
whether or not the the State Request was successfully completed.

Morneault, et al                                               [Page 13]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001



    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x302)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             State                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x303)          |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             Result                            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The valid values for State are shown in the following table.  The value
of the State field should reflect the value received in the State Request
message.

         Define           Value        Description
   STATUS_LPO_SET          0x0      Request local processor outage
   STATUS_LPO_CLEAR        0x1      Request local processor outage
                                    recovered
   STATUS_EMER_SET         0x2      Request emergency alignment
                                    procedure
   STATUS_EMER_CLEAR       0x3      Request normal alignment (cancel
                                    emergency) procedure
   STATUS_FLUSH_BUFFERS    0x4      Flush receive, transmit and retransmit
                                    queues
   STATUS_CONTINUE         0x5      Continue
   STATUS_AUDIT            0x6      Audit state of link

The valid values for the Result field are shown in the following table.

         Define           Value        Description
   STATUS_SUCCESS          0x0      Successfully completed Request
   STATUS_FAILURE          0x1      Failed to complete Request

3.3.1.6  State Indication

The MTP2 State Indication message can be sent from a gateway to an
ASP to indicate a condition on a link.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x304)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             Event                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The valid values for Event are shown in the following table.

       Define            Value          Description
   EVENT_RPO_ENTER        0x1      Remote entered processor outage
   EVENT_RPO_EXIT         0x2      Remote exited processor outage

3.3.1.7  Congestion Indication

The Congestion Indication message can be sent from a Signaling Gateway 
to an ASP to indicate the congestion status and discard status of a link.  
When the MSU buffer fill increases above an Onset threshold or decreases 
below an Abatement threshold or crosses a Discard threshold in either
direction, the SG SHALL send a congestion indication message.

The SG shall send the message only when there is actually a change
in either the discard level or the congestion level to report,
meaning it is different from the previously sent message.  In addition, 
the SG SHALL use an implementation dependent algorithm to limit the 
frequency of congestion indication messages. 

An implementation may optionally send Congestion Indication messages on
a "high priority" stream in order to potentially reduce delay (Refer to
[12] for more details).

The Congestion Indication message contains the following parameters:

    Congestion Status (mandatory)
    Discard Status (optional)

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x305)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Congestion Status                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x306)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         Discard Status                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The valid values for Congestion Status and Discard Status are shown in 
the following table.

              Define          Value        Description
       LEVEL_NONE              0x0      No congestion.
       LEVEL_1                 0x1      Congestion Level 1
       LEVEL_2                 0x2      Congestion Level 2
       LEVEL_3                 0x3      Congestion Level 3
       LEVEL_4                 0x4      Discarding

For networks that do not support multiple levels of congestion, only the
LEVEL_NONE and LEVEL_3 values will be used.  For networks that support
multiple levels of congestion, it is possible for all values to be used.
Refer to [2] and [9] for more details.

When the SG runs out of buffer space for MSUs received from the MGC, the 
SG shall send a Congestion Indication message with Congestion Status and 
Discard Status set to LEVEL_DISCARDING and discard MSUs received from the 
MGC.

3.3.1.8  Retrieval Request

The MTP2 Retrieval Request message is used during the MTP Level 3
changeover procedure to request the BSN, to retrieve PDUs from the
transmit and retransmit queues or to flush PDUs from the retransmit
queue.

The Retrieval Request message contains the following parameters:

    Action (mandatory)
    Sequence Number (optional)


Morneault, et al                                               [Page 14]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x307)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Action                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x308)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Sequence Number                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The valid values for Action are shown in the following table.

        Define         Value       Description
   ACTION_RTRV_BSN      0x1     Retrieve the backward sequence number
   ACTION_RTRV_MSGS     0x2     Retrieve the PDUs from the retransmit
                                queue
   ACTION_DROP_MSGS     0x3     Drop the PDUs in the retransmit queue
   ACTION_RTRV_TRANS    0x4     Retrieve the PDUs from the transmit 
                                queue

In the Retrieval Request message, the Sequence Number field SHOULD NOT 
be present if the Action field is ACTION_RTRV_BSN, ACTION_DROP_MSGS or 
ACTION_RTRV_TRANS.  The Sequence Number field contains the Forward 
Sequnce Number (FSN) of the far end if the Action is ACTION_RTRV_MSGS.

3.3.1.9  Retrieval Confirm

The MTP2 Retrieval Confirm message is sent by the Signaling Gateway
in response to a Retrieval Request message. 

The Retrieval Confirm message contains the following parameters:

    Action (mandatory)
    Result (mandatory)
    Sequence Number (optional)


Morneault, et al                                               [Page 14]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x307)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Action                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x309)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Result                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x308)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Sequence Number                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The valid values for Action are the same as in Retrieval Request.  

The values for Result are shown below: in the following table.

        Define         Value       Description
   RESULT_SUCCESS       0x0     Action successful
   RESULT_FAILURE       0x1     Action failed

When the Signaling Gateway sends a Retrieval Confirm to a Retrieval 
Request, it echos the Action field.  If the Action was ACTION_RTRV_BSN 
and the SG successfully retrieved the BSN, the SG will put the Backward 
Sequence Number (BSN) in the Sequence Number field and will indicate a 
success in the Result field.  If the BSN could not be retrieved, the 
Sequence Number field will not be included and the Result field will 
indicate failure.  

For a Retrieval Confirm with Action of ACTION_RTRV_MSGS and 
ACTION_RTRV_TRANS, the value of of Result field will indicate success or 
failure.  A failure means that the buffers could not be retrieved.  The 
Sequence Number field is not used with ACTION_RTRV_MSGS.

For a Retrieval Confirm with an Action of ACTION_DROP_MSGS, the Result 
value will indicate success or failure.  The Sequence Number field is 
not used with ACTION_DROP_MSGS. 

3.3.1.10  Retrieval Indication

The Retrieval Indication message is sent by the Signaling Gateway with a 
PDU from the transmit or retransmit queue.  The Retrieval Indication 
message does not contain the Action or seq_num fields, just a MTP3 
Protocol Data Unit (PDU) from the transmit or retransmit queue.


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          Tag (0x300)          |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |              PDU from transmit or retransmit queue            |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

For TTC Data messages, the following parameter will be used to indicate
a TTC PDU which starts at LI.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          Tag (0x301)          |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |            TTC PDU from transmit or retransmit queue          |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The M2UA implementation MAY consider the use of the bundling feature
of SCTP for Retrieval Indication messages.

3.3.1.11  Retrieval Complete Indication

The MTP2 Retrieval Complete Indication message is exactly the same as
the MTP2 Retrieval Indication message except that it also indicates that
it contains the last PDU from the transmit or retransmit queue.

3.3.2  Application Server Process Maintenance (ASPM) Messages

The ASPM messages will only use the common message header.

3.3.2.1  ASP UP (ASPUP)

The ASP UP (ASPUP) message is used to indicate to a remote M2UA peer
that the Adaptation layer is ready to receive traffic or maintenance
messages.

Morneault, et al                                               [Page 15]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


The ASPUP message contains the following parameters

    ASP Identifier (optional)
    Info String (optional)

The format for ASPUP Message parameters is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xe)           |             Length            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        ASP Identifier*                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0x4)           |             Length            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                          INFO String*                         |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The optional ASP Identifier parameter would contain a unique value 
that is locally significant to the ASPs that support an AS.  The SG
would save the ASP Identifier to be used, if necessary, with the 
Notify message (see Section 3.3.3.2).

The optional INFO String parameter can carry any meaningful 8-bit ASCII
character string along with the message.  Length of the INFO String
parameter is from 0 to 255 characters.  No procedures are presently
identified for its use but the INFO String MAY be used for debugging
purposes.


Morneault, et al                                               [Page 16]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


3.3.2.2 ASP Up Ack

The ASP UP Ack message is used to acknowledge an ASP Up message received
from a remote M2UA peer.

The ASPUP Ack message contains the following parameters:

     INFO String (optional)

The format for ASPUP Ack Message parameters is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0x4)           |             Length            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                          INFO String*                         |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The format and description of the optional Info String parameter is the
same as for the ASP UP message (See Section 3.3.2.1).

3.3.2.3  ASP Down (ASPDN)

The ASP Down (ASPDN) message is used to indicate to a remote M2UA peer
that the adaptation layer is not ready to receive traffic or
maintenance messages.

The ASPDN message contains the following parameters

     Reason
     INFO String (optional)

The format for the ASPDN message parameters is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xa)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                              Reason                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0x4)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                         INFO String*                          |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The format and description of the optional Info String parameter is the
same as for the ASP Up message (See Section 3.3.2.1).

The Reason parameter indicates the reason that the remote M2UA
adaptation layer is unavailable.  The valid values for Reason are shown
in the following table.

     Value         Description
     0x1           Management 

3.3.2.4 ASP Down Ack

The ASP Down Ack message is used to acknowledge an ASP Down message
received from a remote M2UA peer.

The ASP Down Ack message contains the following parameters:

     Reason
     INFO String (optional)

The format for the ASPDN Ack message parameters is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xa)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                              Reason                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0x4)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                         INFO String*                          |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The format and description of the optional Info String parameter is the
same as for the ASP UP message (See Section 3.3.2.1).

The format of the Reason parameter is the same as for the ASP Down message
(See Section 3.3.2.3).

3.3.2.5  ASP Active (ASPAC)

The ASPAC message is sent by an ASP to indicate to an SG that it is
Active and ready to be used.

The ASPAC message contains the following parameters

     Traffic Mode Type (mandatory)
     Interface Identifier (optional)
        - Combination of integer and integer ranges, OR
        - string (text formatted)
     INFO String (optional)

The format for the ASPAC message using integer formatted Interface
Identifiers is as follows:


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xb)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     Traffic Mode Type                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Tag (0x1=integer)         |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                     Interface Identifiers*                    |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Tag (0x8=integer range)    |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier Start1*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier Stop1*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier Start2*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier Stop2*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     .                                                            .
     .                                                            .
     .                                                            .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier StartN*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier StopN*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |              Additional Interface Identifiers                 |
   |                    of Tag Type 0x1 or 0x8                     |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x4)             |             Length            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                          INFO String*                         |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


The format for the ASPAC message using text formatted (string)
Interface Identifiers is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xb)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     Traffic Mode Type                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Tag (0x3=string)        |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                     Interface Identifier*                     |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |              Additional Interface Identifiers                 |
   |                        of Tag Type 0x3                        |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x4)             |             Length            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                          INFO String*                         |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


The Traffic Mode Type parameter identifies the traffic mode of
operation of the ASP within an AS.  The valid values for Type are
shown in the following table:

    Value          Description
     0x1            Over-ride
     0x2            Load-share
     0x3            Broadcast

Within a particular AS, only one Traffic Mode Type can be used.
The Over-ride value indicates that the ASP is operating in Over-ride
mode, where the ASP takes over all traffic in an Application Server
(i.e., primary/back-up operation), over-riding any currently active
ASPs in the AS.   In Load-share mode, the ASP will share in the traffic 
distribution with any other currently active ASPs.  In Broadcast mode,
all of the Active ASPs receive all message traffic in the Application
Server.



Morneault, et al                                               [Page 17]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


The optional Interface Identifiers parameter contains a list of
Interface Identifier integers (Type 0x1 or Type 0x8) or text strings
(Type 0x3)indexing the Application Server traffic that the sending
ASP is configured/registered to receive.  If integer formatted
Interface Identifiers are being used, the ASP can also send ranges of
Interface Identifiers (Type 0x8).  Interface Identifier types Integer
(0x1) and Integer Range (0x8) are allowed in the same message.  Text
formatted Interface Identifiers (0x3) cannot be used with either
Integer (0x1) or Integer Range (0x8) types.  

If no Interface Identifiers are included, the message is for all 
provisioned Interface Identifiers within the AS(s) in which the
ASP is provisioned.  If only a subset of Interface Identifiers are 
included, the ASP is noted as Active for all the Interface Identifiers 
provisioned for that AS.

Note:  If the optional Interface Identifier parameter is present, the
integer formatted Interface Identifier MUST be supported, while the
text formatted Interface Identifier MAY be supported.

An SG that receives an ASPAC with an incorrect or unsupported Traffic 
Mode Type for a particular Interface Identifier will respond with an 
Error Message (Cause: Unsupported Traffic Handling Mode).

The format and description of the optional Info String parameter is the
same as for the ASP UP message (See Section 3.3.2.1).

3.3.2.6 ASP Active Ack

The ASPAC Ack message is used to acknowledge an ASP-Active message
received from a remote M2UA peer.

The ASPAC Ack message contains the following parameters:

     Traffic Mode Type (mandatory)
     Interface Identifier (optional)
        - Combination of integer and integer ranges, OR
        - string (text formatted)
     INFO String (optional)

The format for the ASPAC Ack message with Integer-formatted Interface
Identifiers is as follows:


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xb)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      Traffic Mode Type                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Tag (0x1=integer)         |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                     Interface Identifiers*                    |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Tag (0x8=integer range)    |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier Start1*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier Stop1*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier Start2*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier Stop2*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    .                                                            .
    .                                                            .
    .                                                            .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier StartN*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier StopN*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |              Additional Interface Identifiers                 |
   |                    of Tag Type 0x1 or 0x8                     |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x4)             |             Length            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                          INFO String*                         |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The format for the ASP Active Ack message using text formatted (string)
Interface Identifiers is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xb)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     Traffic Mode Type                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Tag (0x3=string)        |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                     Interface Identifier*                     |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |              Additional Interface Identifiers                 |
   |                        of Tag Type 0x3                        |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x4)             |             Length            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                          INFO String*                         |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


The format and description of the optional Info String parameter is the
same as for the ASP UP message (See Section 3.3.2.1.)

The format of the Type and Interface Identifier parameters is the same
as for the ASP Active message (See Section 3.3.2.5).

3.3.2.7  ASP Inactive (ASPIA)

The ASPIA message is sent by an ASP to indicate to an SG that it is no
longer an active ASP to be used from within a list of ASPs.  The SG will
respond with an ASPIA Ack message and either discard incoming messages 
or buffer for a timed period and then discard.

The ASPIA message contains the following parameters

     Traffic Mode Type (mandatory)
     Interface Identifiers (optional)
        - Combination of integer and integer ranges, OR
        - string (text formatted)
     INFO String (optional)

The format for the ASP Inactive message parameters using Integer
formatted Interface Identifiers is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xb)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     Traffic Mode Type                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Tag (0x1=integer)         |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                     Interface Identifiers*                    |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Tag (0x8=integer range)    |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier Start1*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier Stop1*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier Start2*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier Stop2*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    .                                                            .
    .                                                            .
    .                                                            .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier StartN*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier StopN*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |              Additional Interface Identifiers                 |
   |                    of Tag Type 0x1 or 0x8                     |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0x4)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                          INFO String*                         |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


The format for the ASP Inactive message using text formatted (string)
Interface Identifiers is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xb)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     Traffic Mode Type                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Tag (0x3=string)        |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                     Interface Identifier*                     |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |              Additional Interface Identifiers                 |
   |                        of Tag Type 0x3                        |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x4)             |             Length            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                          INFO String*                         |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


The Traffic Mode Type parameter identifies the traffic mode of
operation of the ASP within an AS.  The valid values for Traffic Mode
Type are shown in the following table:

    Value          Description
     0x1            Over-ride

The format and description of the optional Interface Identifiers and
Info String parameters is the same as for the ASP Active message (See
Section 3.3.2.3.)

The optional Interface Identifiers parameter contains a list of
Interface Identifier integers indexing the Application Server traffic
that the sending ASP is configured/registered to receive, but does not
want to receive at this time.

3.3.2.8 ASP Inactive Ack

The ASPIA Ack message is used to acknowledge an ASP-Inactive message
received from a remote M2UA peer.

The ASPIA Ack message contains the following parameters:

     Traffic Mode Type (mandatory)
     Interface Identifiers (optional)
        - Combination of integer and integer ranges, OR
        - string (text formatted)
     INFO String (optional)

The format for the ASPIA Ack message is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xb)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     Traffic Mode Type                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Tag (0x1=integer)         |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                     Interface Identifiers*                    |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Tag (0x8=integer range)    |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier Start1*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier Stop1*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier Start2*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier Stop2*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    .                                                             .
    .                                                             .
    .                                                             .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier StartN*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier StopN*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |              Additional Interface Identifiers                 |
   |                    of Tag Type 0x1 or 0x8                     |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x4)             |             Length            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                          INFO String*                         |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The format for the ASP Inactive Ack message using text formatted
(string) Interface Identifiers is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xb)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     Traffic Mode Type                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Tag (0x3=string)        |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                     Interface Identifier*                     |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |              Additional Interface Identifiers                 |
   |                        of Tag Type 0x3                        |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x4)             |             Length            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                          INFO String*                         |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


The format of the Traffic Mode Type and Interface Identifier
parameters is the same as for the ASP Inactive message
(See Section 3.3.2.7).

The format and description of the optional Info String parameter is
the same as for the ASP Up message (See Section 3.3.2.1).

3.3.3  Layer Management (MGMT) Messages

3.3.3.1  Error (ERR)

The Error message is used to notify a peer of an error event
associated with an incoming message.  For example, the message type
might be unexpected given the current state, or a parameter value might
be invalid.

The ERR message contains the following parameters:

     Error Code (mandatory)
     Diagnostic Information (optional)

The format for the ERR message is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xc)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          Error Code                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0x7)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                     Diagnostic Information*                   |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The Error Code parameter indicates the reason for the Error Message.
The Error parameter value can be one of the following values:

     Invalid Version                        0x1
     Invalid Interface Identifier           0x2
     Unsupported Message Class              0x3
     Unsupported Message Type               0x4
     Unsupported Traffic Handling Mode      0x5
     Unexpected Message                     0x6
     Protocol Error                         0x7
     Unsupported Interface Identifier Type  0x8
     Invalid Stream Identifier              0x9

The "Invalid Version" error would be sent if a message was
received with an invalid or unsupported version.  The Error message
would contain the supported version in the Common header.  The
Error message could optionally provide the supported version in
the Diagnostic Information area.

The "Invalid Interface Identifier" error would be sent by a SG if
an ASP sends a message with an invalid (unconfigured) Interface
Identifier value.

The "Unsupported Traffic Handling Mode" error would be sent by a SG
if an ASP sends an ASP Active with an unsupported Traffic Handling
Mode.  An example would be a case in which the SG did not support
load-sharing.

The "Unexpected Message" error would be sent by an ASP if it received
a MAUP message from an SG while it was in the Inactive state.

The "Protocol Error" error would be sent for any protocol anomaly
(i.e. a bogus message).

The "Invalid Stream Identifier" error would be sent if a message
was received on an unexpected SCTP stream (i.e.  a MGMT message
was received on a stream other than "0").

The "Unsupported Interface Identifier Type" error would be sent by
a SG if an ASP sends a Text formatted Interface Identifier and the
SG only supports Integer formatted Interface Identifiers.  When
the ASP receives this error, it will need to resend its message with
an Integer formatted Interface Identifier.

The "Unsupported Message Class" error would be sent if a message with 
an unexpected or unsupported Message Class is received.

The "Unsupported Interface Identifier Type" error would be sent by
a SG if an ASP sends a Text formatted Interface Identifier and the
SG only supports Integer formatted Interface Identifiers.  When
the ASP receives this error, it will need to resend its message with
an Integer formatted Interface Identifier.

The optional Diagnostic information can be any information germain to
the error condition, to assist in identification of the error condition.
In the case of an Invalid Version Error Code the Diagnostic information
includes the supported Version parameter.  In the other cases, the
Diagnostic information MAY be the first 40 bytes of the offending message.

Morneault, et al                                               [Page 19]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


3.3.3.2  Notify (NTFY)

The Notify message is used to provide an autonomous indication of M2UA
events to an M2UA peer.

The NTFY message contains the following parameters:

     Status Type (mandatory)
     Status Information (mandatory)
     ASP Identifier (optional)
     Interface Identifiers (optional)
     INFO String (optional)

The format for the Notify message with Integer-formatted Interface
Identifiers is as follows:


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xd)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |        Status Type            |      Status Information       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xe)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        ASP Identifier*                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     Tag (0x1=integer)         |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                     Interface Identifiers*                    |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Tag (0x8=integer range)    |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier Start1*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier Stop1*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier Start2*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier Stop2*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    .                                                             .
    .                                                             .
    .                                                             .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Interface Identifier StartN*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Interface Identifier StopN*                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |              Additional Interface Identifiers                 |
   |                    of Tag Type 0x1 or 0x8                     |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x4)             |             Length            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                          INFO String*                         |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


The format for the Notify message with Text-formatted Interface
Identifiers is as follows:


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xd)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |        Status Type            |      Status Information       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Tag (0xe)           |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        ASP Identifier*                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Tag (0x3=string)        |            Length             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                     Interface Identifier*                     |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |              Additional Interface Identifiers                 |
   |                        of Tag Type 0x3                        |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Tag (0x4)             |             Length            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   |                          INFO String*                         |

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


The Status Type parameter identifies the type of the Notify message.
The following are the valid Status Type values:

      Value          Description
       0x1   Application Server state change (AS_State_Change)
       0x2   Other

The Status Information parameter contains more detailed information for
the notification, based on the value of the Status Type.  If the Status
Type is AS_State_Change the following Status Information values are used:

      Value          Description
       1      Application Server Down (AS_Down)
       2      Application Server Inactive (AS_Inactive)
       3      Application Server Active (AS_Active)
       4      Application Server Pending (AS_Pending)

These notifications are sent from an SG to an ASP upon a change in status
of a particular Application Server.  The value reflects the new state of
the Application Server.  The Interface Identifiers of the AS MAY be 
placed in the message if desired.

If the Status Type is Other, then the following Status Information values
are defined:

      Value          Description
         1    Insufficient ASP resources active in AS
         2    Alternate ASP Active
         3    ASP Failure

In the Insufficent ASP Resources case, the SG is indicating to an 
"Inactive" ASP(s) in the AS that another ASP is required in order to 
handle the load of the AS (Load-sharing mode).  For the Alternate ASP 
Active case, the formerly Active ASP is informed when an alternate 
ASP transitions to the ASP-Active state in Over-ride mode.  The ASP 
ID (if available) of the Alternate ASP MUST be placed in the message.  
For the ASP Failure case, the SG is indicating to ASP(s) in the AS
that one of the ASPs has failed (i.e. the ASP Transition to Down due 
to SCTP Communication Down Indication).  The ASP ID (if available) of
the failed ASP MUST be placed in the message.

For each of the Status Information values in Status Type Other, the
Interface Identifiers of the affected AS MAY be placed in the message
if desired.

The format and description of the optional Interface Identifiers and
Info String parameters is the same as for the ASP Active message
(See Section 3.3.2.3).


Morneault, et al                                               [Page 20]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


4.0  Procedures

The M2UA layer needs to respond to various primitives it receives from
other layers as well as messages it receives from the peer-to-peer
messages.  This section describes various procedures involved in
response to these events.

4.1  Procedures to Support Service in Section 1.4.1

These procedures achieve the M2UA layer's "Transport of MTP Level 2 /
MTP Level 3 boundary" service.

4.1.1  MTP Level 2 / MTP Level 3 Boundary Procedures

On receiving a primitive from the local upper layer, the M2UA layer will
send the corresponding MAUP message (see Section 3) to its peer.  The
M2UA layer MUST fill in various fields of the common and specific headers
correctly.  In addition the message SHOULD to be sent on the SCTP stream
that corresponds to the SS7 link.

4.1.2  MAUP Message Procedures

On receiving MAUP messages from a peer M2UA layer, the M2UA layer on an
SG or MGC needs to invoke the corresponding layer primitives to the
local MTP Level 2 or MTP Level 3 layer.

Morneault, et al                                               [Page 21]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


4.2  Procedures to Support Service in Section 1.4.2

These procedures achieve the M2UA layer's "Support for Communication
between Layer Managements" service.

4.2.1  Layer Management Primitives Procedure

On receiving primitives from the local Layer Management, the M2UA layer 
will take the requested action and provide an appropriate response 
primitive to Layer Management.

An M-SCTP ESTABLISH request from Layer Management will initiate the
establishment of an SCTP association.  An M-SCTP ESTABLISH confirm
will be sent to Layer Management when the initiated association set-up
is complete.  An M-SCTP ESTABLISH indication is sent to Layer
Management upon successful completion of an incoming SCTP association
set-up from a peer M2UA node

An M-SCTP RELEASE request from Layer Management will initiate the
tear-down of an SCTP association.  An M-SCTP RELEASE confirm will
be sent by Layer Management when the association teardown is complete.
An M-SCTP RELEASE indication is sent to Layer Management upon
successful tear-down of an SCTP association initiated by a peer M2UA.

M-SCTP STATUS request and indication support a Layer Management
query of the local status of a particular SCTP association.

M-NOTIFY indication and M-ERROR indication indicate to Layer
Management the notification or error information contained in a
received M2UA Notify or Error message respectively.  These indications
can also be generated based on local M2UA events.

M-ASP STATUS request/indication and M-AS-STATUS request/indication
support a Layer Management query of the local status of a particular
ASP or AS.  No M2UA peer protocol is invoked.

M-ASP Up request, M-ASP Down request, M-ASP-INACTIVE request and
M-ASP-ACTIVE request allow Layer Management at an ASP to initiate
state changes.  These requests result in outgoing M2UA ASP UP,
ASP DOWN, ASP INACTIVE and ASP ACTIVE messages.

M-ASP Up confirmation, M-ASP Down confirmation, M-ASP-INACTIVE
confirmation and M-ASP-ACTIVE confirmation indicate to Layer
Management that the previous request has been confirmed.

All MGMT messages are sent on a sequenced stream to ensure ordering.
SCTP stream '0' SHOULD be used.

4.2.2 MGMT message procedures

Upon receipt of MGMT messages the M2UA layer MUST invoke the corresponding
Layer Management primitives indications (e.g., M-AS Status ind., M-ASP
Status ind., M-ERROR ind...) to the local layer management.

M-NOTIFY indication and M-ERROR indication indicate to Layer Management
the notification or error information contained in a received M2UA
Notify or Error message.  These indications can also be generated
based on local M2UA events.

All MGMT messages are sent on a sequenced stream to ensure ordering.
SCTP stream '0' SHOULD be used.

4.3 Procedures to Support Service in Section 1.4.3

These procedures achieve the M2UA layer's "Support for management of
active associations between SG and MGC" service.

4.3.1 AS and ASP State Maintenance

The M2UA layer on the SG maintains the state of each ASP, in each
Appliction Server that is configured to receive traffic.

4.3.1.1  ASP States

The state of the each ASP, in each AS that it is configured, is
maintained in the M2UA layer on the SG. The state of an ASP changes
due to events. The events include

    * Reception of messages from peer M2UA layer at that ASP
    * Reception of some messages from the peer M2UA layer at other
      ASPs in the AS
    * Reception of indications from SCTP layer

The ASP state transition diagram is shown in Figure 6.  The possible
states of an ASP are the following:

ASP Down: Application Server Process is unavailable and/or the related
SCTP association is down. Initially all ASPs will be in this state.
An ASP in this state SHOULD NOT not be sent any M2UA messages.

ASP-INACTIVE: The remote M2UA peer at the ASP is available (and the
related SCTP association is up) but application traffic is stopped.
In this state the ASP can be sent any non-MAUP M2UA messages.

ASP-ACTIVE: The remote M2UA peer at the ASP is available and
application traffic is active.


                 Figure 6  ASP State Transition Diagram

                                  +-------------+
           +----------------------|             |
           |   Alternate  +-------| ASP-ACTIVE  |
           |       ASP    |       +-------------+
           |    Takeover  |           ^     |
           |              |    ASP    |     | ASP
           |              |    Active |     | Inactive
           |              |           |     v
           |              |       +-------------+
           |              |       |             |
           |              +------>|  ASP-INACT  |
           |                      +-------------+
           |                          ^    |
 ASP Down/ |                     ASP  |    | ASP Down /
 SCTP CDI  |                     Up   |    | SCTP CDI
           |                          |    v
           |                      +-------------+
           +--------------------->|             |
                                  |  ASP Down   |
                                  +-------------+



SCTP CDI: The local SCTP layer's Communication Down Indication to the
Upper Layer Protocol (M2UA) on an SG. The local SCTP will send this
indication when it detects the loss of connectivity to the ASP's peer
SCTP layer. SCTP CDI is understood as either a SHUTDOWN COMPLETE
notification and COMMUNICATION LOST notification from the SCTP.

When an SCTP association fails at the SG, M2UA shall change the states 
of all ASPs reached through the aborted SCTP association to ASP-DOWN.


Morneault, et al                                               [Page 22]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


4.3.1.2  AS States

The state of the AS is maintained in the M2UA layer on the SG.

The state of an AS changes due to events.  These events include the
following:

   * ASP state transitions
   * Recovery timer triggers

The possible states of an AS are the following:

AS-DOWN: The Application Server is unavailable.  This state implies
that all related ASPs are in the ASP Down state for this AS.  When
the AS transitions to the AS-DOWN state, all of the SS7 links (Interface
Identifiers) for this AS should be taken out-of-service.  Initially the 
AS will be in this state.

AS-INACTIVE: The Application Server is available but no application 
traffic is active (i.e., one or more related ASPs are in the ASP-Inactive 
state, but none in the ASP-Active state).

AS-ACTIVE: The Application Server is available and application traffic
is active.  This state implies that one ASP is in the ASP-ACTIVE state.

AS-PENDING: An active ASP has transitioned from active to inactive or
down and it was the last remaining active ASP in the AS. A recovery
timer T(r) will be started and all incoming SCN messages will be
queued by the SG.  If an ASP becomes active before T(r) expires, the
AS will move to AS-ACTIVE state and all the queued messages will be
sent to the active ASP.

If T(r) expires before an ASP becomes active, the SG stops queueing
messages and discards all previously queued messages.  In addition,
the SG SHALL send the Stop primitive to MTP2 to take the link out of 
service.  The AS will move to AS-Inactive if at least one ASP is in 
ASP-Inactive state, otherwise it will move to AS-DOWN state.

If an ASP transitions to the ASP-DOWN state and all ASPs in the AS are
in the ASP-DOWN state, then the SG SHALL send the Stop primitive to MTP2 
to take the link out of service and moves the AS to the AS-DOWN state.
 

                 Figure 7  AS State Transition Diagram

      +----------+  one ASP trans ACTIVE   +-------------+
      |          |------------------------>|             |      
      | AS-INACT |                         |  AS-ACTIVE  |
      |          |                         |             |
      |          |<                        |             |
      +----------+ \                       +-------------+
         ^   |      \ Tr Expires                ^    |
         |   |       \ at least one             |    |
         |   |        \ ASP in UP               |    |
         |   |         \                        |    |
         |   |          \                       |    |
         |   |           \                      |    |
 one ASP |   |            \            one ASP  |    | Last ACTIVE ASP
 trans   |   | all ASP     \------\    trans to |    | trans to INACT 
 to      |   | trans to            \   ACTIVE   |    | or DOWN
 INACT   |   | DOWN                 \           |    | (start Tr timer)
         |   |                       \          |    |
         |   |                        \         |    |
         |   |                         \        |    |
         |   v                          \       |    v         
      +----------+                       \ +-------------+
      |          |                        -|             |      
      | AS-DOWN  |                         | AS-PENDING  |
      |          |                         |  (queueing) |
      |          |<------------------------|             |
      +----------+    Tr Expiry and no     +-------------+
                     ASP in INACTIVE state

    Tr = Recovery Timer


Morneault, et al                                               [Page 23]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


4.3.2 ASPM procedures for primitives

Before the establishment of an SCTP association the ASP state at both
the SG and ASP is assumed to be "Down".

As the ASP is responsible for initiating the setup of an SCTP
association to an SG, the M2UA layer at an ASP receives an M-SCTP
ESTABLISH request primitive from the Layer Management, the M2UA layer
will try to establish an SCTP association with the remote M2UA peer at
an SG.  Upon reception of an eventual SCTP-Communication Up confirm
primitive from the SCTP, the M2UA layer will invoke the primitive
M-SCTP ESTABLISH confirm to the Layer Management.

At the SG, the M2UA layer will receive an SCTP Communication Up
indication primitive from the SCTP. The M2UA layer will then invoke
the primitive M-SCTP ESTABLISH indication to the Layer Management.

Once the SCTP association is established and assuming that the local
M2UA-User is ready, the local ASP M2UA Application Server Process
Maintenance (ASPM) function will initiate the ASPM procedures, using
the ASP Up/-Down/-Active/-Inactive messages to convey the ASP-state to
the SG - see Section 4.3.3.

The Layer Management and the M2UA layer on SG can communicate the
status of the application server using the M-AS STATUS primitives.
The Layer Managements and the M2UA layers on both the SG and ASP
can communicate the status of an SCTP association using the
M-SCTP STATUS primitives.

If the Layer Management on SG or ASP wants to bring down an SCTP
association for management reasons, they would send M-SCTP RELEASE
request primitive to the local M2UA layer. The M2UA layer would release
the SCTP association and upon receiving the SCTP Communication Down
indication from the underlying SCTP layer, it would inform the local
Layer Management using M-SCTP RELEASE confirm primitive.

If the M2UA layer receives an SCTP-Communication Down or Restart
indication from the underlying SCTP layer, it will inform the Layer
Management by invoking the M-SCTP RELEASE indication primitive.  At the 
SG, M2UA shall change the states of all ASPs reached through the aborted 
SCTP association to ASP-DOWN.  Athe ASP, M2UA shall either cause other
ASPs to become active or send link-out-of-service primitives to MTP3.

At an ASP, the Layer Management MAY try to reestablish the SCTP
association using M-SCTP ESTABLISH request primitive.

4.3.3 ASPM procedures for peer-to-peer messages

All ASPM messages are sent on a sequenced stream to ensure ordering.
SCTP stream '0' SHOULD be used.  

4.3.3.1 ASP-Inactive

After an ASP has successfully established an SCTP association to an SG,
the SG waits for the ASP to send an ASP Up message, indicating that the
ASP M2UA peer is available.  The ASP is always the initiator of the
ASP Up exchange.

When an ASP Up message is received at an SG and internally the ASP is
not considered locked-out for local management reasons, the SG marks
the remote ASP as Inactive.  If the ASP UP message contains an ASP
Identifier, the SG saves the ASP Identifier for that ASP.  The SG 
responds with an ASP Up Ack message in acknowledgement.  The SG sends 
an ASP Up Ack message in response to a received ASP Up message even if 
the ASP is already marked as "Inactive" at the SG.

If for any local reason the SG cannot respond with an ASP Up Ack, the 
SG responds to the ASP Up with a ASP Down Ack message.

When the ASP sends an ASP Up it starts timer T(ack).  If the ASP does 
not receive a response to an ASP Up within T(ack), the ASP MAY restart 
T(ack) and resend ASP Up messages until it receives an ASP Up Ack 
message.  T(ack) SHOULD be provisionable, with a default of 2 seconds.  
Alternatively, retransmission of ASP Up messages MAY be put under 
control of Layer Management.  In this method, expiry of T(ack) results 
in a M-ASP-Up confirmation carrying a negative indication.  

The ASP MUST wait for the ASP Up Ack message from the SG before
sending any ASP traffic control messages (ASPAC or ASPIA) or MAUP
messages or it will risk message loss.  If the SG receives MAUP
messages before an ASP Up is received, the SG SHOULD discard them.


Morneault, et al                                               [Page 24]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


4.3.3.2 ASP Down

The ASP will send an ASP Down to a SG when the ASP is to be removed
from the list of ASPs in the Application Server that it is a member
and no longer receive any M2UA traffic or management messages.

Whether the ASP is permanently removed from an AS is a function of
configuration management.

The SG marks the ASP as "Down" and returns an ASP Down Ack message to
the ASP if one of the following events occur:

     - to acknowledge an ASP Down message received from a remote M2UA 
       peer 
     - to reply to an ASPM message from an ASP which is locked out 
       for management reasons. 

The SG sends an ASP Down Ack message in response to a received ASP Down
message from the ASP even if the ASP is already marked as "Down" at
the SG.

At the ASP, the ASP Down Ack message received is not acknowledged. 
Layer Management is informed with an M-ASP Down confirm primitive.

When the ASP sends an ASP Down it starts timer T(ack).  If the ASP does 
not receive a response to an ASP Down within T(ack), the ASP MAY 
restart T(ack) and resend ASP Down messages  until it receives an 
ASP Down Ack message.  T(ack) SHOULD be provisionable, with a default 
of 2 seconds.  Alternatively, retransmission of ASP Down messages MAY 
be put under control of Layer Management.  In this method, expiry of 
T(ack) results in a M-ASP-Down confirmation carrying a negative 
indication.  

4.3.3.3  M2UA Version Control

If a ASP Up message with an unsupported version is received, the
receiving end responds with an Error message, indicating the version 
the receiving node supports.

This is useful when protocol version upgrades are being performed in a
network.  A node upgraded to a newer version SHOULD support the older
versions used on other nodes it is communicating with.  Because ASPs
initiate the ASP Up procedure it is assumed that the Error message 
would normally come from the SG.

4.3.3.4 ASP Active

Any time after the ASP has received a ASP Up Ack from the SG, the ASP
can send an ASP Active (ASPAC) to the SG indicating that the ASP is 
ready to start processing traffic. 

When an ASP Active (ASPAC) message is received, the SG responds to the
ASP with a ASPAC Ack message acknowledging that the ASPAC was received
and starts sending traffic for the associated Application Server
to that ASP.  Note that the SG sends an ASP Active Ack message in 
response to a received ASP Active message even if the ASP is already 
marked as "Active" at the SG.  

The ASP MUST wait for the ASP Active Ack message from the SG before
sending any Data messages or it will risk message loss.  If the SG
receives MAUP messages before an ASP Active is received, the SG SHOULD
discard these messages.

At the ASP, the ASP-Active Ack message received is not acknowledged. 
Layer Management is informed with an M-ASP Active confirm primitive.

Morneault, et al                                               [Page 25]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


When the ASP sends an ASP Active it starts timer T(ack).  If 
the ASP does not receive a response to an ASP Active within T(ack), the 
ASP MAY restart T(ack) and resend ASP Active messages  until it 
receives an ASP Active Ack message.  T(ack) SHOULD be provisionable, with 
a default of 2 seconds.  Alternatively, retransmission of ASP Active 
messages may be put under control of Layer Management.  In this method, 
expiry of T(ack) results in a M-ASP-Active confirmation carrying a 
negative indication.  

There are three modes of Application Server traffic handling in the SG
M2UA - Over-ride, Load-share and Broadcast.  The Traffic Mode Type 
parameter in the ASPAC messge indicates the mode used in a particular 
Application Server.  If the SG determines that the mode indicates in 
an ASPAC is incompatible with the traffic handling mode currently used 
in the AS, the SG responds with an Error message indicating Unsupported 
Traffic Handling Mode.

For Over-ride mode AS, the reception of an ASPAC message at an SG causes 
the redirection of all traffic for the AS to the ASP that sent the ASPAC.  
The SG responds to the ASPAC with an ASP Active Ack message to the ASP.  
Any previously active ASP in the AS is now considered Inactive and will 
no longer receive traffic from the SG within the AS.  The SG sends a 
Notify (Alternate ASP-Active) to the previously active ASP in the AS, 
after stopping all traffic to that ASP.

In the case of a Load-share mode AS, reception of an ASPAC message at 
an SG causes the redirection of some traffic to the ASP sending the 
ASPAC.  The algorithm at the SG for load-sharing traffic within an AS 
to all the active ASPs is implementation dependent.  The algorithm 
could, for example be round-robin or based on information in the Data 
message (e.g., such as the SLS in the Routing Label).  

In the case of a Broadcast mode AS, reception of an ASPAC message at 
an SG causes the traffic to be sent to the ASP sending the ASPAC and
the same traffic continues to be sent to the other Active ASP(s).

4.3.3.5 ASP Inactive

When an ASP wishes to withdraw from receiving traffic within an AS,
the ASP sends an ASP Inactive (ASPIA) to the SG.  

There are three modes of Application Server traffic handling in the SG
M2UA when withdrawing an ASP from service - Over-ride, Load-share and
Broadcast.  The Traffic Mode Type parameter in the ASPIA messge indicates 
the mode used in a particular Application Server.  If the SG determines 
that the mode indicates in an ASPAC is incompatible with the traffic 
handling mode currently used in the AS, the SG responds with an Error 
message indicating Unsupported Traffic Handling Mode.

In the case of an Over-ride mode AS, where normally another ASP has
already taken over the traffic within the AS with an Over-ride ASPAC,
the ASP which sends the ASPIA is already considered by the SG to be
"Inactive" (i.e., in the "Inactive" state).  An ASPIA Ack  message is
sent to the ASP, after ensuring that all traffic is stopped to the ASP.

In the case of a Load-share mode AS, the SG moves the ASP to the 
"Inactive" state and the AS traffic is re-allocated across the 
remaining "active" ASPs per the load-sharing algorithm currently used
within the AS.  A NTFY(Insufficient ASP resources active in AS) may be 
sent to all inactive ASPs, if required.  An ASPIA Ack message is sent 
to the ASP after all traffic is halted and Layer Management is informed 
with an ASP-INACTIVE indication primitive.

In the case of a Broadcast mode AS, the SG moves the ASP to the 
"Inactive" state and stops sending the AS traffic to the ASP.  The
SG continues to send the AS traffic to the remaining "active" ASPs.  
A NTFY(Insufficient ASP resources active in AS) may be sent to all 
inactive ASPs, if required.  An ASPIA Ack message is sent to the ASP 
after all traffic is halted and Layer Management is informed with an 
ASP-INACTIVE indication primitive.

When the ASP sends an ASP Inactive it starts timer T(ack).  If the ASP 
does not receive a response to an ASP Inactive within T(ack), the ASP 
MAY restart T(ack) and resend ASP Inactive messages  until it receives 
an ASP Inactive Ack message.  T(ack) SHOULD be provisionable, with a 
default of 2 seconds.  Alternatively, retransmission of ASP Inactive 
messages may be put under control of Layer Management.  In this method, 
expiry of T(ack) results in a M-ASP-Inactive confirmation carrying a 
negative indication.  

If no other ASPs are Active in the Application Server, the SG either
discards all incoming messages for the AS or starts buffering the
incoming messages for T(r) seconds, after which messages will be
discarded.  T(r) is configurable by the network operator.  If the SG
receives an ASPAC from an ASP in the AS before expiry of T(r), the
buffered traffic is directed to the ASP and the timer is cancelled.



Morneault, et al                                               [Page 26]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


4.3.3.6 Notify

A Notify message reflecting a change in the AS state is sent to all
ASP(s) in the AS, except those in the "Down" state, with appropriate
Status Information.

In the case where a Notify (AS-Pending) message is sent by an SG
that now has no ASP(s) active to service the traffic, the Notify does
not explicitly force the ASP(s) receiving the message to become
active.  The ASP remain in control of what (and when) action is
taken.

In addition, the Notify message will be sent to all ASP(s) in the
AS, except those in the "Down" state, when an ASP fails with the
ASP Identifier of the failed ASP.

5.0  Examples of MTP2 User Adaptation (M2UA) Procedures

5.1  Establishment of associations between SG and MGC examples

5.1.1 Single ASP in an Application Server (1+0 sparing)

This scenario shows the example M2UA message flows for the establishment
of traffic between an SG and an ASP, where only one ASP is configured
within an AS (no backup).  It is assumed that the SCTP association is
already set-up.

             SG                       ASP1
              |
              |<---------ASP Up----------|
              |--------ASP Up Ack------->|
              |                          |
              |<-------ASP Active--------|
              |------ASP_Active Ack----->|
              |                          |

5.1.2 Two ASPs in Application Server (1+1 sparing)

This scenario shows the example M2UA message flows for the establishment
of traffic between an SG and two ASPs in the same Application Server,
where ASP1 is configured to be active and ASP2 to be standby in the event
of communication failure or the withdrawal from service of ASP1.  ASP2 MAY
act as a hot, warm, or cold standby depending on the extent to which ASP1
and ASP2 share call/transaction state or can communicate call state under
failure/withdrawal events.  


       SG                        ASP1                        ASP2
        |                         |                          |
        |<--------ASP Up----------|                          |
        |-------ASP Up Ack------->|                          |
        |                         |                          |
        |<-----------------------------ASP Up----------------|
        |----------------------------ASP Up Ack------------->|
        |                         |                          |
        |                         |                          |
        |<-------ASP Active-------|                          |
        |-----ASP-Active Ack----->|                          |
        |                         |                          |




Morneault, et al                                               [Page 27]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001




Morneault, et al                                               [Page 28]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


5.2 ASP Traffic Fail-over Examples

5.2.1 (1+1 Sparing, withdrawal of ASP, Back-up Over-ride)

Following on from the example in Section 5.1.2, and ASP withdraws from
service:

       SG                       ASP1                       ASP2
        |                         |                          |
        |<-----ASP Inactive-------|                          |
        |----ASP Inactive Ack---->|                          |
        |--------------------NTFY(AS-Down) (Optional)------->|
        |                         |                          |
        |<------------------------------ ASP Active----------|
        |-----------------------------ASP-Active Ack)------->|
        |                                                    |

In this case, the SG notifies ASP2 that the AS has moved to the
Down state.  The SG could have also (optionally) sent a Notify
message when the AS moved to the Pending state.

Note: If the SG detects loss of the M2UA peer (through a detection
of SCTP failure), the initial SG-ASP1 ASP Inactive message exchange 
would not occur.

5.2.2 (1+1 Sparing, Back-up Over-ride)

Following on from the example in Section 5.1.2, and ASP2 wishes to over-
ride ASP1 and take over the traffic:

       SG                       ASP1                       ASP2
        |                         |                          |
        |<------------------------------ ASP Active----------|
        |-----------------------------ASP-Active Ack-------->|
        |----NTFY( Alt ASP-Act)-->|
        |     (optional)          |                          |


In this case, the SG notifies ASP1 that an alternative ASP has
overridden it.


Morneault, et al                                               [Page 29]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


5.3  SG to MGC, MTP Level 2 to MTP Level 3 Boundary Procedures

When the M2UA layer on the ASP has a MAUP message to send to the SG, it 
will do the following:

  - Determine the correct SG

  - Find the SCTP association to the chosen SG

  - Determine the correct stream in the SCTP association based on  
    the SS7 link

  - Fill in the MAUP message, fill in M2UA Message Header, fill in
    Common Header

  - Send the MAUP message to the remote M2UA peer in the SG, over the  
    SCTP association

When the M2UA layer on the SG has a MAUP message to send to the ASP, it 
will do the following:

  - Determine the AS for the Interface Identifier

  - Determine the Active ASP (SCTP association) within the AS

  - Determine the correct stream in the SCTP association based on  
    the SS7 link

  - Fill in the MAUP message, fill in M2UA Message Header, fill in
    Common Header

  - Send the MAUP message to the remote M2UA peer in the ASP, over the  
    SCTP association

5.3.1  SS7 Link Alignment

The MGC can request that a SS7 link be brought into alignment using the
normal or emergency procedure.  An example of the message flow to bring
a SS7 link in-service using the normal alignment procedure is shown
below.

       MTP2            M2UA                  M2UA               MTP3 
        SG              SG                    ASP                ASP

        <----Start Req---|<---Establish Req----|<----Start Req------

        ---In Serv Ind-->|----Establish Cfm--->|----In Serv Ind---->


An example of the message flow to bring a SS7 link in-service using the
emergency alignment procedure.

 MTP2            M2UA                               M2UA           MTP3
  SG              SG                                ASP             ASP

  <----Emer Req----|<--State Req (STATUS_EMER_SET)----|<----Emer Req---

  -----Emer Cfm--->|---State Cfm (STATUS_EMER_SET)--->|----Emer Cfm---->

  <---Start Req----|<-------Establish Req-------------|<---Start Req----

  ---In Serv Ind-->|--------Establish Cfm------------>|---In Serv Ind-->


Morneault, et al                                               [Page 24]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001

5.3.2  SS7 Link Release

The MGC can request that a SS7 link be taken out-of-service.  It uses
the Release Request message as shown below.

     MTP2               M2UA                  M2UA                MTP3 
      SG                 SG                    ASP                 ASP

       <-----Stop Req-----|<---Release Req------|<-----Stop Req------

       --Out of Serv Ind->|----Release Cfm----->|--Out of Serv Ind-->


The SG can autonomously indicate that a SS7 link has gone out-of-service
as shown below.

       MTP2           M2UA                  M2UA              MTP3 
        SG             SG                    ASP              ASP

         --Out of Serv->|----Release Ind----->|--Out of Serv-->


5.3.3  Set and Clear Local Processor Outage

The MGC can set a Local Processor Outage condition.  It uses the
State Request message as shown below.

  MTP2            M2UA                               M2UA           MTP3
   SG              SG                                ASP             ASP

   <----LPO Req----|<---State Req (STATUS_LPO_SET)----|<----LPO Req---

   -----LPO Cfm--->|----State Cfm (STATUS_LPO_SET)--->|----LPO Cfm---->


The MGC can clear a Local Processor Outage condition.  It uses the
State Request message as shown below.

  MTP2            M2UA                               M2UA          MTP3
   SG              SG                                ASP            ASP

   <---LPO Req---|<---State Req (STATUS_LPO_CLEAR)----|<----LPO Req---

   ----LPO Cfm-->|----State Cfm (STATUS_LPO_CLEAR)--->|----LPO Cfm---->


5.3.4  Notification of Remote Processor Outage

The SG can indicate Remote has entered or exited the Processor Outage 
condition.  It uses the State Indication message as shown below.

 MTP2           M2UA                                M2UA           MTP3
  SG             SG                                 ASP             ASP

  ----RPO Ind---->|----State Ind (EVENT_RPO_ENTER)-->|-----RPO Ind---->

  -RPO Rcvr Ind-->|----State Ind (EVENT_RPO_EXIT)--->|--RPO Rcvr Ind-->


Morneault, et al                                               [Page 30]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


5.3.5  Notification of Link Congestion

The SG can indicate that a link has become congested.  It uses the 
Congestion Indication message as shown below.

 MTP2           M2UA                                M2UA           MTP3
  SG             SG                                 ASP             ASP

  ----Cong Ind---->|--------Cong Ind (STATUS)------->|----Cong Ind---->

  -Cong Cease Ind->|--------Cong Ind (STATUS)------->|-Cong Cease Ind->

5.3.6  SS7 Link Changeover

An example of the message flow for an error free changeover is shown 
below.  In this example, there were three messages in the retransmission 
queue that needed to be retrieved.


  MTP2          M2UA                            M2UA             MTP3
   SG            SG                              ASP              ASP

   <-Rtrv BSN Req-|<--Rtrv Req (ACTION_RTRV_BSN)--|<--Rtrv BSN Req---
                               (seq_num = 0)

   -Rtrv BSN Cfm->|---Rtrv Cfm (ACTION_RTRV_BSN)->|---Rtrv BSN Cfm-->
                               (seq_num = BSN)

   <-Rtrv Msg Req-|<-Rtrv Req (ACTION_RTRV_MSGS)--|<--Rtrv Msg Req---
                               (seq_num = FSN)

   -Rtrv Msg Cfm->|--Rtrv Cfm (ACTION_RTRV_MSGS)->|---Rtrv Msg Cfm-->
                               (seq_num = 0)

   -Rtrv Msg Ind->|---------Retrieval Ind ------->|---Rtrv Msg Ind-->
   -Rtrv Msg Ind->|---------Retrieval Ind ------->|---Rtrv Msg Ind-->
   -Rtrv Msg Ind->|---------Retrieval Ind ------->|---Rtrv Msg Ind-->

   -Rtrv Compl Ind->|----Retrieval Compl Ind ---->|-Rtrv Compl Ind-->


Note:  The number of Retrieval Indication is dependent on the number of
messages in the retransmit queue that have been requested.  Only one
Retrieval Complete Indication SHOULD be sent.

An example of a message flow with an error retrieving the BSN is shown
below.

  MTP2          M2UA                            M2UA             MTP3
   SG            SG                              ASP              ASP

   <-Rtrv BSN Req-|<--Rtrv Req (ACTION_RTRV_BSN)--|<--Rtrv BSN Req---

   -BSN Not Rtrv->|---Rtrv Cfm (ACTION_RTRV_BSN)->|---BSN Not Rtrv-->
                               (seq_num = -1)

An example of a message flow with an error retrieving the messages is 
shown below.

   <-Rtrv BSN Req-|<--Rtrv Req (ACTION_RTRV_BSN)--|<--Rtrv BSN Req---

   -Rtrv BSN Cfm->|---Rtrv Cfm (ACTION_RTRV_BSN)->|---Rtrv BSN Cfm-->
                               (seq_num = BSN)

   <-Rtrv Msg Req-|<-Rtrv Req (ACTION_RTRV_MSGS)--|<--Rtrv Msg Req---
                               (seq_num = FSN)

   -Rtrv Msg Cfm->|--Rtrv Cfm (ACTION_RTRV_MSGS)->|---Rtrv Msg Cfm-->
                               (seq_num = -1)

An example of a message flow for a request to drop messages (clear
retransmission buffers) is shown below.


  MTP2          M2UA                            M2UA             MTP3
   SG            SG                              ASP              ASP

 <-Clr TB/RTB Req-|<-Rtrv Req (ACTION_DROP_MSGS)-|<--Clr TB/RTB Req---

 -Clr TB/RTB Ind->|-Rtrv Cfm (ACTION_DROP_MSGS)->|---Clr TB/RTB Ind-->


5.3.7  Flush and Continue

The following message flow shows a request to flush buffers. 

  MTP2            M2UA                              M2UA          MTP3
   SG              SG                               ASP            ASP

   <--Flush Req----|<-State Req (STATUS_FLUSH_BUFS)--|<---Flush Req--

   ---Flush Cfm--->|--State Cfm (STATUS_FLUSH_BUFS)->|---Flush Cfm-->

The following message flow shows a request to continue.

  MTP2            M2UA                              M2UA          MTP3
   SG              SG                               ASP            ASP

   <---Cont Req----|<--State Req (STATUS_CONTINUE)---|<---Cont Req---

   ----Cont Cfm--->|---State Cfm (STATUS_CONTINUE)-->|----Cont Cfm-->


5.3.8  Auditing of SS7 link state

It may be necessary for the ASP to audit the current state of a SS7 link.
The flows below show an example of the request and all the potential
responses.

Below is an example in which the SS7 link is out-of-service.

 MTP2           M2UA                              M2UA           MGMT
  SG             SG                               ASP             ASP

                 |<----State Req (STATUS_AUDIT)----|<----Audit-------

                 |-----State Cfm (STATUS_AUDIT)--->|

                                                                 MTP3
                                                                  ASP

                 |-----------Release Ind---------->|-Out of Serv Ind->

Below is an example in which the SS7 link is in-service.

 MTP2           M2UA                              M2UA           MGMT
  SG             SG                               ASP             ASP

                 |<----State Req (STATUS_AUDIT)----|<----Audit-------

                 |-----State Cfm (STATUS_AUDIT)--->|

                                                                 MTP3
                                                                  ASP

                 |-----------Establish Cfm-------->|---In Serv Ind-->

Below is an example in which the SS7 link is in-service, but congested.

 MTP2           M2UA                              M2UA           MGMT
  SG             SG                               ASP             ASP

                 |<----State Req (STATUS_AUDIT)----|<----Audit-------

                 |-----State Cfm (STATUS_AUDIT)--->|

                                                                 MTP3
                                                                  ASP

                 |-----------Establish Cfm-------->|---In Serv Ind-->

                 |----------Congestion Ind-------->|---Cong Ind----->

Below is an example in which the SS7 link is in-service, but in Remote
Processor Outage.

 MTP2           M2UA                              M2UA           MGMT
  SG             SG                               ASP             ASP

                 |<----State Req (STATUS_AUDIT)----|<----Audit-------

                 |-----State Cfm (STATUS_AUDIT)--->|

                                                                 MTP3
                                                                  ASP

                 |-----------Establish Ind-------->|---In Serv Ind-->

                 |---State Ind (EVENT_RPO_ENTER)-->|----RPO Enter--->

6.0 Timer Values

The recommended default values for M2UA timers are:

     T(r)                                    2 seconds
     T(ack)                                  2 seconds

7.0 Security

M2UA is designed to carry signaling messages for telephony services. 
As such, M2UA MUST involve the security needs of several parties: the 
end users of the services; the network providers and the applications 
involved.  Additional requirements MAY come from local regulation.   
While having some overlapping security needs, any security solution 
SHOULD fulfill all of the different parties' needs.

7.1 Threats

There is no quick fix, one-size-fits-all solution for security.  As a
transport protocol, M2UA has the following security objectives:

 * Availability of reliable and timely user data transport.
 * Integrity of user data transport.
 * Confidentiality of user data.

M2UA runs on top of SCTP.  SCTP [5] provides certain transport related
security features, such as:

 * Blind Denial of Service Attacks
 * Flooding
 * Masquerade
 * Improper Monopolization of Services

When M2UA is running in professionally managed corporate or service
provider network, it is reasonable to expect that this network includes
an appropriate security policy framework. The "Site Security Handbook" 
[10] SHOULD be consulted for guidance.

Morneault, et al                                               [Page 31]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001



When the network in which M2UA runs in involves more than one party, it
MAY NOT be reasonable to expect that all parties have implemented 
security in a sufficient manner.  In such a case, it is recommended that 
IPSEC is used to ensure confidentiality of user payload.  Consult [11] 
for more information on configuring IPSEC services.

7.2 Protecting Confidentiality

Particularly for mobile users, the requirement for confidentiality MAY
include the masking of IP addresses and ports.  In this case application
level encryption is not sufficient; IPSEC ESP SHOULD be used instead.
Regardless of which level performs the encryption, the IPSEC ISAKMP
service SHOULD be used for key management.

8.0 IANA Considerations

8.1 SCTP Payload Protocol Identifier

A request will be made to IANA to assign an M2UA value for the Payload
Protocol Identifier in SCTP Payload Data chunk.  The following SCTP 
Payload Protocol Identifier will be registered:

        M2UA    0x10

The SCTP Payload Protocol Identifier is included in each SCTP Data chunk,
to indicate which protocol the SCTP is carrying.  This Payload Protocol
Identifier is not directly used by SCTP but MAY be used by certain 
network entities to identify the type of information being carried in a 
Data chunk.

The User Adaptation peer MAY use the Payload Protocol Identifier as a 
way of determining additional information about the data being presented 
to it by SCTP.

8.2  M2UA Protocol Extensions

This protocol may also be extended through IANA in three ways:

 -- through definition of additional message classes,
 -- through definition of additional message types, and
 -- through definition of additional message parameters.

The definition and use of new message classes, types and parameters is 
an integral part of SIGTRAN adaptation layers.  Thus, these extensions 
are assigned by IANA through an IETF Consensus action as defined in 
[RFC2434].

The proposed extension must in no way adversely affect the general 
working of the protocol.

8.2.1 IETF Defined Message Classes

The documentation for a new message class MUST include the following
information:

(a) A long and short name for the message class.
(b) A detailed description of the purpose of the message class.

8.2.2 IETF Defined Message Types

Documentation of the message type MUST contain the following information:

(a) A long and short name for the new message type.
(b) A detailed description of the structure of the message.
(c) A detailed definition and description of intended use of each field
    within the message.
(d) A detailed procedural description of the use of the new message type
    within the operation of the protocol.
(e) A detailed description of error conditions when receiving this message
    type.

When an implementation receives a message type which it does not support, 
it MUST respond with an Error (ERR) message with an Error Code of
Unsupported Message Type.

8.2.3 IETF-defined TLV Parameter Extension

Documentation of the message parameter MUST contain the following
information:

(a) Name of the parameter type.
(b) Detailed description of the structure of the parameter field. This
    structure MUST conform to the general type-length-value format
    described in Section 3.1.5.
(c) Detailed definition of each component of the parameter value.
(d) Detailed description of the intended use of this parameter type,
    and an indication of whether and under what circumstances
    multiple instances of this parameter type may be found within the
    same message type. 

9.0  Acknowledgements

The authors would like to thank John Loughney, Neil Olson, Michael 
Tuexen, Nikhil Jain, Steve Lorusso, Dan Brendes, Joe Keller, Heinz 
Prantner, Barry Nagelberg, Naoto Makinae, Joyce Archibald and Mark
Kobine for their valuable comments and suggestions.






















Morneault, et al                                               [Page 32]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


10.0  References

[1] ITU-T Recommendation Q.700, 'Introduction To ITU-T Signalling
    System No. 7 (SS7)'

[2] ITU-T Recommendation Q.701-Q.705, 'Signalling System No. 7 (SS7) -
    Message Transfer Part (MTP)'

[3] ANSI T1.111 'Signalling System Number 7 - Message Transfer Part'

[4] Bellcore GR-246-CORE 'Bell Communications Research Specification
    of Signaling System Number 7', Volume 1, December 1995

[5] Stream Control Transmission Protocol, RFC 2960, October 2000

[6] Architectural Framework for Signaling Transport, RFC 2719, 
    October 1999

[7] ITU-T Recommendation Q.2140, 'B-ISDN ATM Adaptation Layer', February
    1995

[8] ITU-T Recommendation Q.2210, 'Message transfer part level 3
    functions and messages using the services of ITU-T
    Recommendation Q.2140', August 1995

[9] ITU-T Recommendation Q.751.1, 'Network Element Management Information
    Model for the Messsage Transfer Part', October 1995

[10] Site Security Handbook, RFC 2196, September 1997

[11] Security Architecture for the Internet Protocol, RFC 2401

[12] SCTP Dynamic Addition of IP addresses, draft-ietf-tsvwg-addip-
     sctp-00.txt, May 7, 2001


Morneault, et al                                               [Page 33]

Internet Draft         SS7 MTP2 User Adaptation Layer          June 2001


11.0  Author's Addresses

Ken Morneault                                     Tel: +1-703-484-3323
Cisco Systems Inc.                           EMail: kmorneau@cisco.com
13615 Dulles Technology Drive
Herndon, VA. 20171
USA

Ram Dantu, Ph.D.                                   Tel +1-469-255-0716
Cisco Systems                                   EMail rdantu@cisco.com
17919 Waterview
Dallas, TX 75252
USA

Greg Sidebottom                                   Tel: +1-613-763-7305
Nortel Networks                     EMail: gregside@nortelnetworks.com
3685 Richmond Rd,
Nepean, Ontario
Canada  K2H5B7

Tom George                                        Tel: +1-972-519-3168
Alcatel USA                          EMail: tom.george@usa.alcatel.com
1000 Coit Road
Plano, TX 74075
USA

Brian Bidulock                                     Tel +1-972-839-4489
OpenSS7 Project                            EMail: bidulock@openss7.org
c/o #424, 4701 Preston Park Blvd.
Dallas, TX 75093
USA

Jacob Heitz                                        Tek +1-510-747-2917
Lucent Technologies                           Email: jheitz@lucent.com
1701 Harbor Bay Parkway
Alameda, CA, 94502
USA


This Internet Draft expires December 2001.



