



SACM Working Group                                           H. Birkholz
Internet-Draft                                            Fraunhofer SIT
Intended status: Standards Track                     J. Fitzgerald-McKay
Expires: July 8, 2018                              Department of Defense
                                                              C. Schmidt
                                                   The MITRE Corporation
                                                           D. Waltermire
                                                                    NIST
                                                        January 04, 2018


                      Concise Software Identifiers
                       draft-ietf-sacm-coswid-03

Abstract

   This document defines a concise representation of ISO 19770-2:2015
   Software Identifiers (SWID tags) that is interoperable with the XML
   schema definition of ISO 19770-2:2015 and augmented for application
   in Constrained-Node Networks.  Next to the inherent capability of
   SWID tags to express arbitrary context information, CoSWID support
   the definition of additional semantics via well-defined data
   definitions incorporated by extension points.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on July 8, 2018.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents



Birkholz, et al.          Expires July 8, 2018                  [Page 1]

Internet-Draft                   COSWID                     January 2018


   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Concise SWID Extensions . . . . . . . . . . . . . . . . .   4
     1.2.  Requirements Notation . . . . . . . . . . . . . . . . . .   4
   2.  Concise SWID Data Definition  . . . . . . . . . . . . . . . .   4
   3.  Description of the SWID Attribute Vocabulary Definition . . .   9
   4.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   9
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .   9
   6.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  11
   7.  Change Log  . . . . . . . . . . . . . . . . . . . . . . . . .  11
   8.  Contributors  . . . . . . . . . . . . . . . . . . . . . . . .  12
   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  12
     9.1.  Normative References  . . . . . . . . . . . . . . . . . .  12
     9.2.  Informative References  . . . . . . . . . . . . . . . . .  13
   Appendix A.  Explicit file-hash Type Used in Concise SWID Tags
                (label 56) . . . . . . . . . . . . . . . . . . . . .  14
   Appendix B.  CoSWID Attributes for Firmware (label 57)  . . . . .  14
   Appendix C.  Signed Concise SWID Tags using COSE  . . . . . . . .  16
   Appendix D.  CoSWID used as Reference Integrity Measurements
                (CoSWID RIM) . . . . . . . . . . . . . . . . . . . .  17
   Appendix E.  CBOR Web Token for Concise SWID Tags . . . . . . . .  18
   Appendix F.  Group Definitions  . . . . . . . . . . . . . . . . .  18
   Appendix G.  Item Definitions . . . . . . . . . . . . . . . . . .  19
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  26

1.  Introduction

   SWID tags have several use-applications including but not limited to:

   o  Software Inventory Management, a part of the Software Asset
      Management [SAM] process, which requires an accurate list of
      discernible deployed software components.

   o  Vulnerability Assessment, which requires a semantic link between
      standardized vulnerability descriptions and IT-assets [X.1520].

   o  Remote Attestation, which requires a link between reference
      integrity measurements (RIM) and security logs of measured
      software components [I-D.birkholz-tuda].



Birkholz, et al.          Expires July 8, 2018                  [Page 2]

Internet-Draft                   COSWID                     January 2018


   SWID tags, as defined in ISO-19770-2:2015 [SWID], provide a
   standardized format for a record that identifies and describes a
   specific release of a software product.  Different software products,
   and even different releases of a particular software product, each
   have a different SWID tag record associated with them.  In addition
   to defining the format of these records, ISO-19770-2:2015 defines
   requirements concerning the SWID tag life-cycle.  Specifically, when
   a software product is installed on an endpoint, that product's SWID
   tag is also installed.  Likewise, when the product is uninstalled or
   replaced, the SWID tag is deleted or replaced, as appropriate.  As a
   result, ISO-19770-2:2015 describes a system wherein there is a
   correspondence between the set of installed software products on an
   endpoint, and the presence on that endpoint of the SWID tags
   corresponding to those products.

   SWID tags are meant to be flexible and able to express a broad set of
   metadata about a software product.  Moreover, there are multiple
   types of SWID tags, each providing different types of information.
   For example, a "corpus tag" is used to describe an application's
   installation image on an installation media, while a "patch tag" is
   meant to describe a patch that modifies some other application.
   While there are very few required fields in SWID tags, there are many
   optional fields that support different uses of these different types
   of tags.  While a SWID tag that consisted only of required fields
   could be a few hundred bytes in size, a tag containing many of the
   optional fields could be many orders of magnitude larger.

   This document defines a more concise representation of SWID tags in
   the Concise Binary Object Representation (CBOR) [RFC7049].  This is
   described via the Concise Data Definition Language (CDDL)
   [I-D.ietf-cbor-cddl].  The resulting Concise SWID data definition is
   interoperable with the XML schema definition of ISO-19770-2:2015
   [SWID].  The vocabulary, i.e., the CDDL names of the types and
   members used in the CoSWID data definition, is mapped to more concise
   labels represented as small integers.  The names used in the CDDL
   data definition and the mapping to the CBOR representation using
   integer labels is based on the vocabulary of the XML attribute and
   element names defined in ISO-19770-2:2015.

   Real-world instances of SWID tags can be fairly large, and the
   communication of SWID tags in use-applications such as those
   described earlier can cause a large amount of data to be transported.
   This can be larger than acceptable for constrained devices and
   networks.  CoSWID tags significantly reduce the amount of data
   transported as compared to a typical SWID tag.  This reduction is
   enable through the use of CBOR, which maps human-readable labels of
   that content to more concise integer labels (indices).  This allows




Birkholz, et al.          Expires July 8, 2018                  [Page 3]

Internet-Draft                   COSWID                     January 2018


   SWID tags to be part of an enterprise security solution for a wider
   range of endpoints and environments.

1.1.  Concise SWID Extensions

   This document specifies a standard equivalent to the ISO-19770-2:2015
   standard.  The corresponding CoSWID data definition includes two
   kinds of augmentation.

   o  the explicit definition of types for attributes that are typically
      stored in the "any attribute" of an ISO-19770-2:2015 in XML
      representation.  These are covered in the main body of this
      document.

   o  the inclusion of extension points in the CoSWID data definition
      that allow for additional uses of CoSWID tags that go beyond the
      original scope of ISO-19770-2:2015 tags.  These are covered in
      appendices to this document.

1.2.  Requirements Notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in RFC
   2119, BCP 14 [RFC2119].

2.  Concise SWID Data Definition

   The following is a CDDL representation of the ISO-19770-2:2015 [SWID]
   XML schema definition of SWID tags.  This representation includes
   every SWID tag fields and attribute and thus supports all SWID tag
   use cases.  The CamelCase notation used in the XML schema definition
   is changed to a hyphen-separated notation (e.g.  ResourceCollection
   is named resource-collection in the CoSWID data definition).  This
   deviation from the original notation used in the XML representation
   reduces ambiguity when referencing certain attributes in
   corresponding textual descriptions.  An attribute referred by its
   name in CamelCase notation explicitly relates to XML SWID tags, an
   attribute referred by its name in hyphen-separated notation
   explicitly relates to CoSWID tags.  This approach simplifies the
   composition of further work that reference both XML SWID and CoSWID
   documents.

   Human-readable names of members in the CDDL data definition are
   mapped to integer indices via a block of rules at the bottom of the
   definition.  The 66 character strings of the SWID vocabulary that
   would have to be stored or transported in full if using the original
   vocabulary are replaced.



Birkholz, et al.          Expires July 8, 2018                  [Page 4]

Internet-Draft                   COSWID                     January 2018


   Concise Software Identifiers are tailored to be used in the domain of
   constrained-node networks.  A typical endpoint is capable of storing
   the CoSWID tag of installed software, a constrained-node might lack
   that capability.  CoSWID address these constraints and the
   corresponding specification is augmented to retain their usefulness
   in the thing-2-thing domain.  Specific examples include, but are not
   limited to limiting the scope of hash algorithms to the IANA Named
   Information tables or including firmware attributes addressing
   devices that do not necessarily provide a file-system to store a
   CoSWID tag in.

   In order to create a valid CoSWID document the structure of the
   corresponding CBOR message MUST adhere to the following CDDL data
   definition.

   <CODE BEGINS>
   concise-software-identity = {
     global-attributes,
     ? entity-entry,
     ? payload-xor-evidence-entry,
     ? link-entry,
     ? software-meta-entry,
   ;  ? payload-entry,
     ? any-element-entry,
     ? corpus,
     ? patch,
     ? media,
     swid-name,
     ? supplemental,
     tag-id,
     ? tag-version,
     ? software-version,
     ? version-scheme,
   }

   any-uri = text
   label = text / int

   any-attribute = (
     label => text / int / [ 2* text ] / [ 2* int ]
   )

   any-element-map = {
     global-attributes,
     * label => any-element-map / [ 2* any-element-map ],
   }

   global-attributes = (



Birkholz, et al.          Expires July 8, 2018                  [Page 5]

Internet-Draft                   COSWID                     January 2018


     ? lang,
     * any-attribute,
   )

   resource-collection = (
     ? directory-entry,
     ? file-entry,
     ? process-entry,
     ? resource-entry
     * $$resource-extension
   )

   file = {
     filesystem-item,
     ? size,
     ? file-version,
     ? file-hash,
   }

   filesystem-item = (
     global-attributes,
     ? key,
     ? location,
     fs-name,
     ? root,
   )

   directory = {
     filesystem-item,
     path-elements,
   }

   process = {
     global-attributes,
     process-name,
     ? pid,
   }

   resource = {
     global-attributes,
     type,
   }

   entity = {
     global-attributes,
     extended-data,
     entity-name,
     ? reg-id,



Birkholz, et al.          Expires July 8, 2018                  [Page 6]

Internet-Draft                   COSWID                     January 2018


     role,
     ? thumbprint,
   }

   evidence = {
     global-attributes,
     resource-collection,
     ? date,
     ? device-id,
   }

   link = {
     global-attributes,
     ? artifact,
     href,
     ? media-type,
     ? ownership,
     rel,
     ? type,
     ? use,
   }

   software-meta = {
     global-attributes,
     ? activation-status,
     ? channel-type,
     ? colloquial-version,
     ? description,
     ? edition,
     ? entitlement-data-required,
     ? entitlement-key,
     ? generator,
     ? persistent-id,
     ? product,
     ? product-family,
     ? revision,
     ? summary,
     ? unspsc-code,
     ? unspsc-version,
   }

   payload = {
     global-attributes,
     resource-collection,
   }

   payload-xor-evidence-entry = ((3: evidence) // (6: payload))
   tag-id = (0: text)



Birkholz, et al.          Expires July 8, 2018                  [Page 7]

Internet-Draft                   COSWID                     January 2018


   swid-name = (1: text)
   entity-entry = (2: entity / [ 2* entity ])
   evidence-entry = (3: evidence)
   link-entry = (4: link / [ 2* link ])
   software-meta-entry = (5: software-meta / [ 2* software-meta ])
   payload-entry = (6: payload)
   any-element-entry = (7: any-element-map / [ 2* any-element-map ])
   corpus = (8: bool)
   patch = (9: bool)
   media = (10: text)
   supplemental = (11: bool)
   tag-version = (12: integer)
   software-version = (13: text)
   version-scheme = (14: text)
   lang = (15: text)
   directory-entry = (16: directory / [ 2* directory ])
   file-entry = (17: file / [ 2* file ])
   process-entry = (18: process / [ 2* process ])
   resource-entry = (19: resource / [ 2* resource ])
   size = (20: integer)
   file-version = (21: text)
   key = (22: bool)
   location = (23: text)
   fs-name = (24: text)
   root = (25: text)
   path-elements = (26: { * file-entry,
                          * directory-entry,
                        }
                   )
   process-name = (27: text)
   pid = (28: integer)
   type = (29: text)
   extended-data = (30: any-element-map / [ 2* any-element-map ])
   entity-name = (31: text)
   reg-id = (32: any-uri)
   role = (33: text / [2* text])
   thumbprint = (34: text)
   date = (35: time)
   device-id = (36: text)
   artifact = (37: text)
   href = (38: any-uri)
   ownership = (39: "shared" / "private" / "abandon")
   rel = (40: text)
   media-type = (41: text)
   use = (42: "optional" / "required" / "recommended")
   activation-status = (43: text)
   channel-type = (44: text)
   colloquial-version = (45: text)



Birkholz, et al.          Expires July 8, 2018                  [Page 8]

Internet-Draft                   COSWID                     January 2018


   description = (46: text)
   edition = (47: text)
   entitlement-data-required = (48: bool)
   entitlement-key = (49: text)
   generator = (50: text)
   persistent-id = (51: text)
   product = (52: text)
   product-family = (53: text)
   revision = (54: text)
   summary = (55: text)
   unspsc-code = (56: text)
   unspsc-version = (57: text)
   file-hash = (58: [ hash-alg-id: int,
                      hash-value: bstr,
                    ]
               )
   <CODE ENDS>

3.  Description of the SWID Attribute Vocabulary Definition

   Yet to be written still...

4.  IANA Considerations

   This document will include requests to IANA:

   o  Integer indices for SWID content attributes and information
      elements.

   o  Content-Type for CoAP to be used in COSE.

5.  Security Considerations

   SWID tags contain public information about software products and, as
   such, do not need to be protected against disclosure on an endpoint.
   Similarly, SWID tags are intended to be easily discoverable by
   applications and users on an endpoint in order to make it easy to
   identify and collect all of an endpoint's SWID tags.  As such, any
   security considerations regarding SWID tags focus on the application
   of SWID tags to address security challenges, and the possible
   disclosure of the results of those applications.

   A signed SWID tag whose signature is intact can be relied upon to be
   unchanged since it was signed.  If the SWID tag was created by the
   software author, this generally means that it has undergone no change
   since the software application with which the tag is associated was
   installed.  By implication, this means that the signed tag reflects
   the software author's understanding of the details of that software



Birkholz, et al.          Expires July 8, 2018                  [Page 9]

Internet-Draft                   COSWID                     January 2018


   product.  This can be useful assurance when the information in the
   tag needs to be trusted, such as when the tag is being used to convey
   golden measurements.  By contrast, the data contained in unsigned
   tags cannot be trusted to be unmodified.

   SWID tags are designed to be easily added and removed from an
   endpoint along with the installation or removal of software products.
   On endpoints where addition or removal of software products is
   tightly controlled, the addition or removal of SWID tags can be
   similarly controlled.  On more open systems, where many users can
   manage the software inventory, SWID tags may be easier to add or
   remove.  On such systems, it may be possible to add or remove SWID
   tags in a way that does not reflect the actual presence or absence of
   corresponding software products.  Similarly, not all software
   products automatically install SWID tags, so products may be present
   on an endpoint without providing a corresponding SWID tag.  As such,
   any collection of SWID tags cannot automatically be assumed to
   represent either a complete or fully accurate representation of the
   software inventory of the endpoint.  However, especially on devices
   that more strictly control the ability to add or remove applications,
   SWID tags are an easy way to provide an preliminary understanding of
   that endpoint's software inventory.

   Any report of an endpoint's SWID tag collection provides information
   about the software inventory of that endpoint.  If such a report is
   exposed to an attacker, this can tell them which software products
   and versions thereof are present on the endpoint.  By examining this
   list, the attacker might learn of the presence of applications that
   are vulnerable to certain types of attacks.  As noted earlier, SWID
   tags are designed to be easily discoverable by an endpoint, but this
   does not present a significant risk since an attacker would already
   need to have access to the endpoint to view that information.
   However, when the endpoint transmits its software inventory to
   another party, or that inventory is stored on a server for later
   analysis, this can potentially expose this information to attackers
   who do not yet have access to the endpoint.  As such, it is important
   to protect the confidentiality of SWID tag information that has been
   collected from an endpoint, not because those tags individually
   contain sensitive information, but because the collection of SWID
   tags and their association with an endpoint reveals information about
   that endpoint's attack surface.

   Finally, both the ISO-19770-2:2015 XML schema definition and the
   Concise SWID data definition allow for the construction of "infinite"
   SWID tags or SWID tags that contain malicious content with the intend
   if creating non-deterministic states during validation or processing
   of SWID tags.  While software product vendors are unlikely to do
   this, SWID tags can be created by any party and the SWID tags



Birkholz, et al.          Expires July 8, 2018                 [Page 10]

Internet-Draft                   COSWID                     January 2018


   collected from an endpoint could contain a mixture of vendor and non-
   vendor created tags.  For this reason, tools that consume SWID tags
   ought to treat the tag contents as potentially malicious and should
   employ input sanitizing on the tags they ingest.

6.  Acknowledgements

7.  Change Log

   Changes from version 00 to version 01:

   o  Added CWT usage for absolute SWID paths on a device

   o  Fixed cardinality of type-choices including arrays

   o  Included first iteration of firmware resource-collection

   Changes since adopted as a WG I-D -00:

   o  Removed redundant any-attributes originating from the ISO-
      19770-2:2015 XML schema definition

   o  Fixed broken multi-map members

   o  Introduced a more restrictive item (any-element-map) to represent
      custom maps, increased restriction on types for the any-attribute,
      accordingly

   o  Fixed X.1520 reference

   o  Minor type changes of some attributes (e.g.  NMTOKENS)

   o  Added semantic differentiation of various name types (e,g. fs-
      name)

   Changes from version 00 to version 01:

   o  Ambiguity between evidence and payload eliminated by introducing
      explicit members (while still

   o  allowing for "empty" SWID tags)

   o  Added a relatively restrictive COSE envelope using cose_sign1 to
      define signed CoSWID (single signer only, at the moment)

   o  Added a definition how to encode hashes that can be stored in the
      any-member using existing IANA tables to reference hash-algorithms




Birkholz, et al.          Expires July 8, 2018                 [Page 11]

Internet-Draft                   COSWID                     January 2018


   Changes from version 01 to version 02:

   o  Enforced a more strict separation between the core CoSWID
      definition and additional usage by moving content to corresponding
      appendices.

   o  Removed artifacts inherited from the reference schema provided by
      ISO (e.g.  NMTOKEN(S))

   o  Simplified the core data definition by removing group and type
      choices where possible

   o  Minor reordering of map members

   o  Added a first extension point to address requested flexibility for
      extensions beyond the any-element

8.  Contributors

9.  References

9.1.  Normative References

   [I-D.ietf-ace-cbor-web-token]
              Jones, M., Wahlstroem, E., Erdtman, S., and H. Tschofenig,
              "CBOR Web Token (CWT)", draft-ietf-ace-cbor-web-token-10
              (work in progress), December 2017.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC4108]  Housley, R., "Using Cryptographic Message Syntax (CMS) to
              Protect Firmware Packages", RFC 4108,
              DOI 10.17487/RFC4108, August 2005,
              <https://www.rfc-editor.org/info/rfc4108>.

   [RFC4949]  Shirey, R., "Internet Security Glossary, Version 2",
              FYI 36, RFC 4949, DOI 10.17487/RFC4949, August 2007,
              <https://www.rfc-editor.org/info/rfc4949>.

   [RFC7049]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", RFC 7049, DOI 10.17487/RFC7049,
              October 2013, <https://www.rfc-editor.org/info/rfc7049>.






Birkholz, et al.          Expires July 8, 2018                 [Page 12]

Internet-Draft                   COSWID                     January 2018


   [RFC7228]  Bormann, C., Ersue, M., and A. Keranen, "Terminology for
              Constrained-Node Networks", RFC 7228,
              DOI 10.17487/RFC7228, May 2014,
              <https://www.rfc-editor.org/info/rfc7228>.

   [RFC8152]  Schaad, J., "CBOR Object Signing and Encryption (COSE)",
              RFC 8152, DOI 10.17487/RFC8152, July 2017,
              <https://www.rfc-editor.org/info/rfc8152>.

   [SAM]      "Information technology - Software asset management - Part
              5: Overview and vocabulary", ISO/IEC 19770-5:2013,
              November 2013.

   [SWID]     "Information technology - Software asset management - Part
              2: Software identification tag'", ISO/IEC 19770-2:2015,
              October 2015.

   [X.1520]   "Recommendation ITU-T X.1520 (2014), Common
              vulnerabilities and exposures", April 2011.

9.2.  Informative References

   [I-D.banghart-sacm-rolie-softwaredescriptor]
              Waltermire, D. and S. Banghart, "Definition of the ROLIE
              Software Descriptor Extension", draft-banghart-sacm-rolie-
              softwaredescriptor-01 (work in progress), May 2017.

   [I-D.birkholz-tuda]
              Fuchs, A., Birkholz, H., McDonald, I., and C. Bormann,
              "Time-Based Uni-Directional Attestation", draft-birkholz-
              tuda-04 (work in progress), March 2017.

   [I-D.ietf-cbor-cddl]
              Birkholz, H., Vigano, C., and C. Bormann, "Concise data
              definition language (CDDL): a notational convention to
              express CBOR data structures", draft-ietf-cbor-cddl-00
              (work in progress), July 2017.

   [I-D.ietf-sacm-terminology]
              Birkholz, H., Lu, J., Strassner, J., Cam-Winget, N., and
              A. Montville, "Security Automation and Continuous
              Monitoring (SACM) Terminology", draft-ietf-sacm-
              terminology-14 (work in progress), December 2017.








Birkholz, et al.          Expires July 8, 2018                 [Page 13]

Internet-Draft                   COSWID                     January 2018


Appendix A.  Explicit file-hash Type Used in Concise SWID Tags (label
             56)

   CoSWID add explicit support for the representation of file-hashes
   using algorithms that are registered at the Named Information Hash
   Algorithm Registry via the file-hash member (label 56).

   file-hash = (56: [ hash-alg-id: int, hash-value: bstr ] )

   The number used as a value for hash-alg-id MUST refer the ID in the
   Named Information Hash Algorithm table; other hash algorithms MUST
   NOT be used.  The hash-value MUST represent the raw hash value of the
   file-entry the file-hash type is included in.

Appendix B.  CoSWID Attributes for Firmware (label 57)

   The ISO-19770-2:2015 specification of SWID tags assumes the existence
   of a file system a software component is installed and stored in.  In
   the case of constrained-node networks [RFC7228] or network equipment
   this assumption might not apply.  Concise software instances in the
   form of (modular) firmware are often stored directly on a block
   device that is a hardware component of the constrained-node or
   network equipment.  Multiple differentiable block devices or
   segmented block devices that contain parts of modular firmware
   components (potentially each with their own instance version) are
   already common at the time of this writing.

   The optional attributes that annotate a firmware package address
   specific characteristics of pieces of firmware stored directly on a
   block-device in contrast to software deployed in a file-system.  In
   essence, trees of relative path-elements expressed by the directory
   and file structure in CoSWID tags are typically unable to represent
   the location of a firmware on a constrained-node (small thing).  The
   composite nature of firmware and also the actual composition of small
   things require a set of attributes to address the identification of
   the correct component in a composite thing for each individual piece
   of firmware.  A single component also potentially requires a number
   of distinct firmware parts that might depend on each other
   (versions).  These dependencies can be limited to the scope of the
   component itself or extend to the scope of a larger composite device.
   In addition, it might not be possible (or feasible) to store a CoSWID
   tag document (permanently) on a small thing along with the
   corresponding piece of firmware.

   To address the specific characteristics of firmware, the extension
   point "$$resource-extension" is used to allow for an additional type
   of resource description--firmware-entry--thereby increasing the self-
   descriptiveness and flexibility of CoSWID.  The optional use of the



Birkholz, et al.          Expires July 8, 2018                 [Page 14]

Internet-Draft                   COSWID                     January 2018


   extension point "$$resource-extension" in respect to firmware MUST
   adhere to the following CDDL data definition.

<CODE BEGINS>
$$resource-extension //= (firmware-entry,)

firmware = {
  firmware-name,                  ; inherited from RFC4108
  ? firmware-version,
  ? firmware-package-identifier,  ; inherited from RFC4108
  ? dependency,                   ; inherited from RFC4108
  ? component-index,              ; equivalent to RFC4108 fwPkgType
  ? block-device-identifier,
  ? target-hardware-identifier,   ; an RFC4108 alternative to model-label
  model-label,
  ? firmware-hash,                ; a hash for a single, incl. NI hash-algo index
  ? firmware-package,         ; RCF4108, experimental, this is an actual firmware blob!
}

firmware-entry = (57: firmware / [ 2* firmware ])
firmware-hash = (58: [ hash-alg-id: int,
                      hash-value: bstr,
                     ]
                )
firmware-name = (59 : text)
firmware-version = (60 : text / int)
component-index = (61 : int)
model-label = (62: text / int)
block-device-identifier = (63 : text / int)
firmware-package = (64: bstr)
firmware-package-identifier = (65: text)
target-hardware-identifier = (66: text)
dependency = (67: { ? firmware-name,
                    ? firmware-version,
                    ? firmware-package-identifier,
                  }
             )
<CODE ENDS>

   The members of the firmware group that constitutes the content of the
   firmware-entry is based on the metadata about firmware defined in
   [RFC4108].  As with every semantic differentiation that is supported
   by the resource-collection type, the use of firmware-entry is
   optional.  It is REQUIRED not to instantiate more than one firmware-
   entry, as the firmware group is used in a map and therefore only
   allows for unique labels.





Birkholz, et al.          Expires July 8, 2018                 [Page 15]

Internet-Draft                   COSWID                     January 2018


   The optional cms-firmware-package member allows to include the actual
   firmware in the CoSWID tag that also expresses its metadata as a
   byte-string.  This option enables a CoSWID tag to be used as a
   container or wrapper that composes both firmware and its metadata in
   a single document (which again can be signed, encrypted and/or
   compressed).  In consequence, a CoSWID tag about firmware can be
   conveyed as an identifying document across endpoints or used as a
   reference integrity measurement as usual.  Alternatively, it can also
   convey an actual piece of firmware, serve its intended purpose as a
   SWID tag and then - due to the lack of a location to store it - be
   discarded.

Appendix C.  Signed Concise SWID Tags using COSE

   SWID tags, as defined in the ISO-19770-2:2015 XML schema, can include
   cryptographic signatures to protect the integrity of the SWID tag.
   In general, tags are signed by the tag creator (typically, although
   not exclusively, the vendor of the software product that the SWID tag
   identifies).  Cryptographic signatures can make any modification of
   the tag detectable, which is especially important if the integrity of
   the tag is important, such as when the tag is providing reference
   integrity measurments for files.

   The ISO-19770-2:2015 XML schema uses XML DSIG to support
   cryptographic signatures.  CoSWID tags require a different signature
   scheme than this.  COSE (CBOR Object Signing and Encryption) provides
   the required mechanism [RFC8152].  Concise SWID can be wrapped in a
   COSE Single Signer Data Object (cose-sign1) that contains a single
   signature.  The following CDDL defines a more restrictive subset of
   header attributes allowed by COSE tailored to suit the requirements
   of Concise SWID.




















Birkholz, et al.          Expires July 8, 2018                 [Page 16]

Internet-Draft                   COSWID                     January 2018


<CODE BEGINS>
signed-coswid = #6.997(COSE-Sign1-coswid) ; see TBS7 in current COSE I-D

label = int / tstr  ; see COSE I-D 1.4.
values = any        ; see COSE I-D 1.4.

unprotected-signed-coswid-header = {
    1 => int,                   ; algorithm identifier
    3 => "application/coswid",  ; request for CoAP IANA registry to become an int
    * label => values,
}

protected-signed-coswid-header = {
    4 => bstr,                  ; key identifier
    * label => values,
}

COSE-Sign1-coswid = [
    protected: bstr .cbor protected-signed-coswid-header,
    unprotected: unprotected-signed-coswid-header,
    payload: bstr .cbor concise-software-identity,
    signature: bstr,
]
<CODE ENDS>

Appendix D.  CoSWID used as Reference Integrity Measurements (CoSWID
             RIM)

   A vendor supplied signed CoSWID tag that includes hash-values for the
   files that compose a software component can be used as a RIM
   (reference integrity measurement).  A RIM is a type of declarative
   guidance that can be used to assert the compliance of an endpoint by
   assessing the installed software.  In the context of remote
   attestation based on an attestation via hardware rooted trust, a
   verifier can appraise the integrity of the conveyed measurements of
   software components using a CoSWID RIM provided by a source, such as
   [I-D.banghart-sacm-rolie-softwaredescriptor].

   RIM Manifests (RIMM):  A group of SWID tags about the same
      (sub-)system, system entity, or (sub-)component (compare
      [RFC4949]).  A RIMM manifest is a distinct document that is
      typically conveyed en-block and constitutes declarative guidance
      in respect to a specific (target) endpoint (compare
      [I-D.ietf-sacm-terminology]).

   If multiple CoSWID compose a RIMM, the following CDDL data definition
   SHOULD be used.




Birkholz, et al.          Expires July 8, 2018                 [Page 17]

Internet-Draft                   COSWID                     January 2018


   RIMM = [ + concise-software-identity / signed-coswid ]

Appendix E.  CBOR Web Token for Concise SWID Tags

   A typical requirement regarding specific instantiations of endpoints
   - and, as a result, specific instantiations of software components -
   is a representation of the absolute path of a CoSWID tag document in
   a file system in order to derive absolute paths of files represented
   in the corresponding CoSWID tag.  The absolute path of an evidence
   CoSWID tag can be included as a claim in the header of a CBOR Web
   Token [I-D.ietf-ace-cbor-web-token].  Depending on the source of the
   token, the claim can be in the protected or unprotected header
   portion.

   <CODE BEGINS>
    CDDL TBD
   <CODE ENDS>

Appendix F.  Group Definitions

   These groups are intermediate CDDL data definitions that are reused
   in several items in the CoSWID CDDL data definition.

   o  resource-collection group: A list of items both used in evidence
      (discovered by an inventory process) and payload (installed in a
      system entity) content of a CoSWID tag document to structure and
      differentiate the content of specific CoSWID tag types.  Potential
      content includes directories, files, processes, resources or
      firmwares.

   o  filesystem group: A list of items both used in representing the
      nodes of a file-system hierarchy, i.e. directory items that allow
      one or more directories to be defined in the file structure, and
      file items that allow one or more files to be specified for a
      given location.

   o  global-attributes: A list of items including an optional language
      definition to support the processing of text-string values and an
      unbounded set of any-attribute items.

   o  any-attribute: A specific rule providing a restricted frame to
      include arbitrary information via members that constitute key
      value(s) pairs where both keys and values can be integers or text-
      strings.







Birkholz, et al.          Expires July 8, 2018                 [Page 18]

Internet-Draft                   COSWID                     January 2018


Appendix G.  Item Definitions

   This Appendix includes the description of every primitive and non-
   primitive type the concise-software-identifier is composed of.  Every
   integer label included at the end of the CDDL data definition is
   addressed in this section.

   1.   tag-id: An identifier uniquely referencing a (composite)
        software component.  The tag identifier is intended to be
        globally unique.  There are no strict guidelines on how this
        identifier is structured, but examples include a 16 byte GUID
        (e.g.  class 4 UUID).

   2.   swid-name: This item provides the software component name as it
        would typically be referenced.  For example, what would be seen
        in the add/remove dialog on a Windows device, or what is
        specified as the name of a packaged software product or a patch
        identifier name on a Linux device.

   3.   entity: Specifies the organizations related to the software
        component referenced by this CoSWID tag.

   4.   evidence: This item is used to provide results from a scan of a
        system where software that does not have a CoSWID tag is
        discovered.  This information is not provided by the software-
        creator, and is instead created when a system is being scanned
        and the evidence for why software is believed to be installed on
        the device is provided in the evidence item.

   5.   link: A reference to any another item (can include details that
        are related to the CoSWID tag such as details on where specific
        resources can be found, e.g.  vulnerability database
        associations, ROLIE feeds, MUD files, etc).  This is modeled
        directly to match the HTML [LINK] element; it is critical for
        streamlining software discovery scenarios to ensure their
        consistency.

   6.   software-meta: An open-ended collection of key/value data
        related to this CoSWID.  The attributes included in this Element
        are predefined attributes to ensure common usage across the
        industry.  The schema allows for any additional attribute to be
        included in a CoSWID tag, though it is recommended that industry
        norms for new attributes are defined and followed to the degree
        possible.

   7.   payload: The items that may be installed on a system entity when
        the software component is installed.  Note that payload may be a
        superset of the items installed and - depending on optimization



Birkholz, et al.          Expires July 8, 2018                 [Page 19]

Internet-Draft                   COSWID                     January 2018


        mechanisms in respect to that system entity - may or may not
        include every item that could be created or executed on the
        corresponding system entitiy when software components are
        installed.  In general, payload will be used to indicate the
        files that may be installed with a software component.
        Therefore payload will often be a superset of those files (i.e.
        if a particular optional sub-component is not installed, the
        files associated with that software component may be included in
        payload, but not installed in the system entity).

   8.   any-element: A default map that can contain arbitrary map
        members and even nested maps (which would be also any-elements).
        In essence, the any-element allows items not defined in this
        CDDL data definition to be included in a Concise Software
        Identifier.

   9.   corpus: Set to true, if this attribute specifies that this SWID
        tag is a collection of information that describes the pre-
        installation data of software component.

   10.  patch: A set of files that is intended to modify an existing set
        of files (including configuration files, scripts and
        corresponding environment variables that are create by the OS
        for the runtime environment) that composes a software component.
        A software component patch does neither alter the version number
        (see 13) nor the release details (descriptive english text, see
        44) of a software components. [revision 52?].  If a Concise SWID
        tag is a patch, it MUST contain the patch item and its value
        MUST be set to true.  It is recommended but not required to
        include a rel(ation) item in a patch CoSWID.  If a CoSWID
        includes a patch member, but not a rel member, it is implied
        that it SHOULD be installed independently of any other CoSWID
        tag document - even if an effective but not explicit
        relationship exists.

   11.  media: This text value is a hint to the tag consumer to
        understand what this SWID tag applies to.  This item can also be
        included in the link item to represent a attributes defined by
        the W3C Media Queries Recommendation (see http://www.w3.org/TR/
        css3-mediaqueries/).  A hint to the consumer of the link to what
        the target item is applicable for.

   12.  supplemental: Specifies that this tag provides supplemental tag
        data that can be merged with primary tag data to create a
        complete record of the software information.  Supplemental tags
        will often be provided at install time and may be provided by
        different entities (such as the tag consumer, or a Value Added
        Reseller).



Birkholz, et al.          Expires July 8, 2018                 [Page 20]

Internet-Draft                   COSWID                     January 2018


   13.  tag-version: This item indicates if a specific release of a
        software component has more than one tag that can represent that
        specific release.  This may be the case if a CoSWID tag producer
        creates and releases an incorrect tag that they subsequently
        want to fix, but with no underlying changes to the product the
        CoSWID tag represents.  This could happen if, for example, a
        patch is distributed that has a link reference that does not
        cover all the various software releases it can patch.  A newer
        CoSWID tag for that patch can be generated and the tag-version
        value incremented to indicate that the data is updated.

   14.  software-version: Underlying development version for the
        software component.

   15.  version-scheme: Scheme used for the version number.  Valid
        enumerations are : * alphanumeric: strictly a string, sorting
        alphanumerically * decimal: a floating point number (i.e., 1.25
        is less than 1.3 ) * multipartnumeric: numbers separated via
        dots, where the numbers are * interpreted as integers (ie, 1.2.3
        , 1.4.5.6 , 1.2.3.4.5.6.7).  This string * convention is similar
        to OIDs.  * multipartnumeric+suffix: numbers separated via dots,
        where the numbers are * interpreted as integers with an
        additional string suffix (e.g., 1.2.3a).  * semver: a string as
        defined by the semver.org spec [FiXME: reference] * unknown: the
        last resort choice, no attempt should be made to order these

   16.  lang: An RFC5646 conferment language tag or corresponding IANA
        index integer.

   17.  directory: A directory item allows one or more directories to be
        defined in the file structure.

   18.  file: A file element that allows one or more files to be
        specified for a given location.

   19.  process: Provides process (software component in execution)
        information for data that will show up in a devices process
        table.

   20.  resource: A set of items that can be used to provide arbitrary
        resource information about an application installed on a system
        entity, or evidence collected from a system entity.

   21.  size: The file size in bytes of the file.

   22.  file-version The file version.





Birkholz, et al.          Expires July 8, 2018                 [Page 21]

Internet-Draft                   COSWID                     January 2018


   23.  key: Files that are considered important or required for the use
        of a software component.  Typical key files would be those
        which, if not available on a system entity, would cause the
        software component not to execute or function properly.  Key
        files will typically be used to validate that a software
        component referenced by the CoSWID tag document is actually
        installed on a specific system entity.

   24.  location: The directory or location where a file was found or
        can expected to be located.  This text-string is intended to
        include the filename itself.  This SHOULD be the relative path
        represented by the root item.

   25.  fs-name: The file name or directory name without any path
        characters.

   26.  root: A system-specific root folder that the location item is an
        offset from.  If this is not specified the assumption is the
        root is the same folder as the location of the CoSWID tag.  The
        text-string value represents a path expression relative to the
        CoSWID tag document location in the (composite) file-system
        hierarchy.

   27.  path-elements: Provides the ability to apply a directory
        structure to the path expressions for files defined in a payload
        or evidence item.

   28.  process-name: The process name as it will be found in the system
        entity's process table.

   29.  pid: The process ID for the process in execution that can be
        included in the process item as part of an evidence tag.

   30.  type: The type of resource represented via a text-string
        (typically, registry-key, port or root-uri)

   31.  extended-data: An open-ended collection of elements that can be
        used to attach arbitrary metadata to an entity item.

   32.  entity-name: The text-string name of the organization claiming a
        particular role in the CoSWID tag.

   33.  reg-id: The registration id is intended to uniquely identify a
        naming authority in a given scope (e.g. global, organization,
        vendor, customer, administrative domain, etc.) that is implied
        by the referenced naming authority.  The value of an
        registration ID MUST be a RFC 3986 URI.  The scope SHOULD be the




Birkholz, et al.          Expires July 8, 2018                 [Page 22]

Internet-Draft                   COSWID                     January 2018


        scope of an organization.  In a given scope, the registration id
        MUST be used consistently.

   34.  role: The relationship between this organization and this tag.
        The role of tag creator is required for every CoSWID tag.  The
        role of an entity may include any role value, but the per-
        defined roles include: "aggregator", "distributor", "licensor",
        "software-creator", "tag-creator".  The enumerations of this
        will include a request to IANA in order to be reference-able via
        an integer index.

   35.  thumbprint: This value provides a hexadecimal string that
        contains a hash (i.e. the thumbprint) of the signing entities
        certificate [s] [FIXME: this requires the same structure as
        file-hash?].

   36.  date: The sate and time evidence represented by an evidence item
        was gathered.

   37.  device-id: A text-string identifier for a device evidence was
        gathered from.

   38.  artifact: For installation media (rel="installation-media") -
        dictates the canonical name for the file.  Items with the same
        artifact name should be considered mirrors of each other (so
        download from wherever works).

   39.  href: The link to the item being referenced.  The href can point
        to several different things, and can be any of the following: *
        a relative uri (no scheme), which is interpreted depending on
        context (for example, "./folder/supplemental.coswid") * a
        physical file location with any system-acceptable URI scheme
        (e.g., file:// http:// https:// ftp://) * an URI with "coswid:"
        as the scheme, which refers to another CoSWID by tag-id.  This
        URI would need to be resolved in the context of the system by
        software that can lookup other CoSWID tags (for example, *
        "coswid:2df9de35-0aff-4a86-ace6-f7dddd1ade4c").  an URI with
        "swidpath:" as the scheme, which refers to another CoSIWD via an
        XPATH query.  This URI would need to be resolved in the context
        of the system entity via dedicated software components that can
        lookup other CoSWID tags and select the appropriate tag based on
        an XPATH query.  Examples include: *
        swidpath://SoftwareIdentity[Entity/@regid='http://contoso.com']
        would * retrieve all CoSWID tags that include an entity where
        the regid was * "Contoso".  * swidpath://SoftwareIdentity[Meta/@
        persistentId='b0c55172-38e9-4e36-be86-92206ad8eddb'] * would
        retrieve CoSWID tags that matched the persistent-id.  See XPATH




Birkholz, et al.          Expires July 8, 2018                 [Page 23]

Internet-Draft                   COSWID                     January 2018


        query standard : http://www.w3.org/TR/xpath20/ [FIXME: Concise
        XPATH representation is covered in the YANG-CBOR I-D]

   40.  ownership: Determines the relative strength of ownership of the
        software components.  Valid enumerations are: abandon, private,
        shared

   41.  rel: The relationship between this CoSWID and the target file.
        Relationships can be identified by referencing the IANA
        registration library: https://www.iana.org/assignments/link-
        relations/link-relations.xhtml.

   42.  media-type: The IANA MediaType for the target file; this
        provides the consumer with intelligence of what to expect.  See
        http://www.iana.org/assignments/media-types/media-types.xhtml
        for more details on link type.

   43.  use: Determines if the target software is a hard requirement or
        not.  Valid enumerations are: required, recommended, optional,

   44.  activation-status: Identification of the activation status of
        this software title (e.g.  Trial, Serialized, Licensed,
        Unlicensed, etc).  Typically, this is used in supplemental tags.

   45.  channel-type: Provides information on which channel this
        particular software was targeted for (e.g.  Volume, Retail, OEM,
        Academic, etc).  Typically used in supplemental tags.

   46.  colloquial-version: The informal or colloquial version of the
        product (i.e. 2013).  Note that this version may be the same
        through multiple releases of a software product where the
        version specified in entity is much more specific and will
        change for each software release.  Note that this representation
        of version is typically used to identify a group of specific
        software releases that are part of the same release/support
        infrastructure (i.e.  Fabrikam Office 2013).  This version is
        used for string comparisons only and is not compared to be an
        earlier or later release (that is done via the entity version
        [FIXME: consistency).

   47.  description: A longer, detailed description of the software.
        This description can be multiple sentences (differentiated from
        summary, which is a very short, one-sentence description).

   48.  edition: The variation of the product (Extended, Enterprise,
        Professional, Standard etc).





Birkholz, et al.          Expires July 8, 2018                 [Page 24]

Internet-Draft                   COSWID                     January 2018


   49.  entitlement-data-required: An indicator to determine if there
        should be accompanying proof of entitlement when a software
        license reconciliation is completed.

   50.  entitlement-key: A vendor-specific textual key that can be used
        to reconcile the validity of an entitlement. (e.g. serial
        number, product or license key).

   51.  generator: The name of the software tool that created a CoSWID
        tag.  This item is typically used if tags are created on the fly
        or via a catalog-based analysis for data found on a computing
        device.

   52.  persistent-id: A GUID used to represent products installed where
        the product are related, but may be different versions.  For
        example, an "upgradeCode" (see http://msdn.microsoft.com/en-
        us/library/aa372375(v=vs.85).aspx as an reference for this
        example).

   53.  product: The base name of the product (e.g.  [FIXME: what are
        appropriate examples?].

   54.  product-family: The overall product family this software belongs
        to.  Product family is not used to identify that a product is
        part of a suite, but is instead used when a set of products that
        are all related may be installed on multiple different devices.
        For example, an enterprise backup system may consist of a backup
        services, multiple different backup services that support mail
        services, databases and ERP systems, as well as individual
        software components that backup client system entities.  In such
        an usage scenario, all software components that are part of the
        backup system would have the same product-family name so they
        can be grouped together in respect to reporting systems.

   55.  revision: The informal or colloquial representation of the sub-
        version of the given product (ie, SP1, R2, RC1, Beta 2, etc).
        Note that the version will provide very exact version details,
        the revision is intended for use in environments where reporting
        on the informal or colloquial representation of the software is
        important (for example, if for a certain business process, an
        organization recognizes that it must have, for example
        "ServicePack 1" or later of a specific product installed on all
        devices, they can use the revision data value to quickly
        identify any devices that do not meet this requirement).
        Depending on how a software organizations distributes revisions,
        this value could be specified in a primary (if distributed as an
        upgrade) or supplemental (if distributed as a patch) CoSWID tag.




Birkholz, et al.          Expires July 8, 2018                 [Page 25]

Internet-Draft                   COSWID                     January 2018


   56.  summary: A short (one-sentence) description of the software.

   57.  unspsc-code: An 8 digit code that provides UNSPSC classification
        of the software product this SWID tag identifies.  For more
        information see, http://www.unspsc.org/.

   58.  unspsc-version: The version of the UNSPSC code used to define
        the UNSPSC code value.  For more information see,
        http://www.unspsc.org/.

Authors' Addresses

   Henk Birkholz
   Fraunhofer SIT
   Rheinstrasse 75
   Darmstadt  64295
   Germany

   Email: henk.birkholz@sit.fraunhofer.de


   Jessica Fitzgerald-McKay
   Department of Defense
   9800 Savage Road
   Ft. Meade, Maryland
   USA

   Email: jmfitz2@nsa.gov


   Charles Schmidt
   The MITRE Corporation
   202 Burlington Road
   Bedford, Maryland  01730
   USA

   Email: cmschmidt@mitre.org


   David Waltermire
   National Institute of Standards and Technology
   100 Bureau Drive
   Gaithersburg, Maryland  20877
   USA

   Email: david.waltermire@nist.gov





Birkholz, et al.          Expires July 8, 2018                 [Page 26]
