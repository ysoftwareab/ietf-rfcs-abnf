
Internet Engineering Task Force                            John Veizades
INTERNET DRAFT                                             @Home Network
8 January 1997                                              Erik Guttman
                                                        Sun Microsystems
                                                         Charles Perkins
                                                            IBM Research
                                                            Scott Kaplan

                       Service Location Protocol
                   draft-ietf-svrloc-protocol-15.txt


Status of This Memo

   This draft document is a product of the Service Location Working
   Group of the Internet Engineering Task Force (IETF); it will be
   submitted to the RFC editor as a standards document.  Please respond
   with comments to the srvloc@tgv.com mailing list.

   Distribution of this memo is unlimited.

   This document is an Internet-Draft.  Internet-Drafts are working
   documents of the Internet Engineering Task Force (IETF), its areas,
   and its working groups.  Note that other groups may also distribute
   working documents as Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at
   any time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as ``work in progress.''

   To learn the current status of any Internet-Draft, please check
   the ``1id-abstracts.txt'' listing contained in the Internet-Drafts
   Shadow Directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),
   munnari.oz.au (Pacific Rim), ds.internic.net (US East Coast), or
   ftp.isi.edu (US West Coast).


Abstract

   The Service Location Protocol provides a scalable framework for
   the discovery and selection of network services.  Using this
   protocol, computers using the Internet no longer need so much static
   configuration of network services for network based applications.
   This is especially important as computers become more portable, and
   users less tolerant or able to fulfill the demands of network system
   administration.







Veizades,Guttman,Perkins,Kaplan       Expires 8 July 1997       [Page i]

Internet Draft        Service Location Protocol         8 January 1997  


                                Contents



Status of This Memo                                                    i

Abstract                                                               i

 1. Introduction                                                       2

 2. Terminology                                                        2
     2.1. Notation Conventions  . . . . . . . . . . . . . . . . . .    4
     2.2. Service Information and Predicate Representation  . . . .    4
     2.3. Specification Language  . . . . . . . . . . . . . . . . .    4

 3. Protocol Overview                                                  5
     3.1. Protocol Transactions . . . . . . . . . . . . . . . . . .    6
     3.2. Schemes . . . . . . . . . . . . . . . . . . . . . . . . .    7
           3.2.1. The ``service:''  URL scheme  . . . . . . . . . .    8
     3.3. Standard Attribute Definitions  . . . . . . . . . . . . .    8
     3.4. Naming Authority  . . . . . . . . . . . . . . . . . . . .    9
     3.5. Interpretation of Service Location Replies  . . . . . . .    9
     3.6. Use of TCP, UDP and Multicast in Service Location . . . .   10
           3.6.1. Multicast vs.  Broadcast  . . . . . . . . . . . .   10
           3.6.2. Service-Specific Multicast Address  . . . . . . .   11
     3.7. Service Location Scaling, and Multicast Operating Modes .   11

 4. Service Location General Message Format                           13
     4.1. Use of Transaction IDs (XIDs) . . . . . . . . . . . . . .   15
     4.2. URL Entry Lifetime  . . . . . . . . . . . . . . . . . . .   16

 5. Service Request Message Format                                    16
     5.1. Service Request Usage . . . . . . . . . . . . . . . . . .   18
     5.2. Directory Agent Discovery Request . . . . . . . . . . . .   19
     5.3. Explanation of Terms of Predicate Grammar . . . . . . . .   20
     5.4. Service Request Predicate Grammar . . . . . . . . . . . .   22
     5.5. String Matching for Requests  . . . . . . . . . . . . . .   24

 6. Service Reply Message Format                                      24

 7. Service Type Request Message Format                               25

 8. Service Type Reply Message Format                                 27

 9. Service Registration Message Format                               28

10. Service Acknowledgement Message Format                            31




Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page ii]

Internet Draft        Service Location Protocol         8 January 1997  


11. Service Deregister Message Format                                 32

12. Attribute Request Message Format                                  33

13. Attribute Reply Message Format                                    35

14. Directory Agent Advertisement Message Format                      37

15. Directory Agents                                                  38
    15.1. Introduction  . . . . . . . . . . . . . . . . . . . . . .   38
    15.2. Finding Directory Agents  . . . . . . . . . . . . . . . .   38

16. Scope Discovery and Use                                           40

17. Language and Character Encoding Issues                            41
    17.1. Character Encoding and String Issues  . . . . . . . . . .   42
          17.1.1. Substitution of Character Escape Sequences  . . .   43
    17.2. Language Dialect  . . . . . . . . . . . . . . . . . . . .   43
    17.3. Language-Independent Strings  . . . . . . . . . . . . . .   44

18. Service Location Transactions                                     44
    18.1. Service Location Connections  . . . . . . . . . . . . . .   44
    18.2. No Synchronous Assumption . . . . . . . . . . . . . . . .   45
    18.3. Idempotency . . . . . . . . . . . . . . . . . . . . . . .   45

19. Security Considerations                                           45

20. String Formats used with Service Location Messages                46
    20.1. Previous Responders' Address Specification  . . . . . . .   47
    20.2. Formal Definition of the ``service:''  Scheme . . . . . .   47
          20.2.1. Service Type String . . . . . . . . . . . . . . .   48
    20.3. Attribute Information . . . . . . . . . . . . . . . . . .   48
    20.4. Address Specification in Service Location . . . . . . . .   49
    20.5. Attribute Value encoding rules  . . . . . . . . . . . . .   49

21. Implementation Requirements                                       50

22. Configurable Parameters and Default Values                        54
    22.1. Service Agent:  Use Predefined Directory Agent(s) . . . .   55
    22.2. Time Out Intervals  . . . . . . . . . . . . . . . . . . .   56

23. Non-configurable Parameters                                       56

24. Acknowledgments                                                   57

 A. Appendix:  Technical contents of ISO 639:1988 (E/F): "Code for
   the representation of names of languages"                          58




Veizades,Guttman,Perkins,Kaplan       Expires 8 July 1997       [Page 1]

Internet Draft        Service Location Protocol         8 January 1997  


 B. Appendix:  For Further Reading                                    59


1. Introduction

   Traditionally, users find services by using the name of a network
   host (a human readable text string) which is an alias for a network
   address.  The Service Location Protocol eliminates the need for
   a user to know the name of a network host supporting a service.
   Rather, the user supplies a set of attributes which describe the
   service.  The Service Location Protocol allows the user to bind this
   description to the network address of the service.

   Service Location provides a dynamic configuration mechanism for
   applications in local area networks.  It is not a global resolution
   system for the entire Internet; rather it is intended to serve
   enterprise networks with shared services.  Applications are modeled
   as clients that need to find servers attached to the enterprise
   network at a possibly distant location.  For cases where there are
   many different clients and/or services available, the protocol
   is adapted to make use of nearby Directory Agents that offer a
   centralized repository for advertised services.


2. Terminology

      User Agent (UA)
               A process working on the user's behalf to acquire service
               attributes and configuration.  The User Agent retrieves
               service information from the Service Agents or Directory
               Agents.

      Service Agent (SA)
               A process working on the behalf of one or more services
               to advertise service attributes and configuration.

      Service Information
               A collection of attributes and configuration information
               associated with a single service.  The Service Agents
               advertise service information for a collection of service
               instances.

      Service
               The service is a process or system providing a facility
               to the network.  The service itself is accessed using
               a communication mechanism external to the the Service
               Location Protocol.




Veizades,Guttman,Perkins,Kaplan       Expires 8 July 1997       [Page 2]

Internet Draft        Service Location Protocol         8 January 1997  


      Directory Agent (DA)
               A process which collects information from Service Agents
               to provide a single repository of service information
               in order to centralize it for efficient access by User
               Agents.  There can only be one DA present per given host.

      Service Type
               Each type of service has a unique Service Type string.
               The Service Type defines a template including expected
               attributes, values and protocol behavior.

      Naming Authority
               The agency or group which catalogues given Service Types
               and Attributes.  The default Naming Authority is IANA.

      Keyword
               A string describing a characteristic of a service.

      Attribute
               A (class, value-list) pair of strings describing a
               characteristic of a service.  The value string may be
               interpreted as a boolean, integer or opaque value if it
               takes specific forms (see section 20.5).

      Predicate
               A boolean expression of attributes, relations and logical
               operators.  The predicate is used to find services which
               satisfy particular requirements.  See section 5.3.

      Scope
               A collection of services that make up a logical group.
               See sections 16 and 3.7.

      Site Network
               All the hosts accessible within the Agent's multicast
               radius, which defaults to a value appropriate for
               reaching all hosts within a site (see section 22).  If
               the site does not support multicast, the agent's site
               network is restricted to a single subnet.

      Address Specification
               This is the network layer protocol dependent mechanism
               for specifying an Agent.  For Internet systems this is
               part of a URL (Universal Resource Locator - see [7]).







Veizades,Guttman,Perkins,Kaplan       Expires 8 July 1997       [Page 3]

Internet Draft        Service Location Protocol         8 January 1997  


2.1. Notation Conventions

      CAPS   Strings which appear in all capital letters are protocol
             literal.  All string comparison is case insensitive,
             however, (see section 5.5).  Some strings are quoted in
             this document to indicate they should be used literally.
             Single characters inside apostrophes are included
             literally.

      <>     Values set off in this manner are fully described in
             section 20.  In general, all definitions of items in
             messages are described in section 20 or immediately
             following their first use.

      |  |
      \  \   Message layouts with this notation indicate a variable
      |  |   length field.


2.2. Service Information and Predicate Representation

   Service information is represented in a text format.  The goal is
   that the format be human readable and transmissible via email.  The
   location of network services is encoded as a Universal Resource
   Locator (URL) which is also human readable and well defined.  Only
   the datagram headers are encoded in a form which is not human
   readable.  Strings used in the Service Location Protocol are NOT
   null-terminated.

   Predicates are expressed in a simple boolean notation using keywords,
   attributes, and logical connectives, as described in Section 5.4.
   The logical connectives and subexpressions are presented in
   prefix-order, so that the connective comes first and the expressions
   it operates on follow afterwards.


2.3. Specification Language

   In this document, several words are used to signify the requirements
   of the specification.  These words are often capitalized.

      MUST       This word, or the adjective "required", means that
                 the definition is an absolute requirement of the
                 specification.

      MUST NOT   This phrase means that the definition is an absolute
                 prohibition of the specification.




Veizades,Guttman,Perkins,Kaplan       Expires 8 July 1997       [Page 4]

Internet Draft        Service Location Protocol         8 January 1997  


      SHOULD     This word, or the adjective "recommended", means
                 that, in some circumstances, valid reasons may exist
                 to ignore this item, but the full implications must
                 be understood and carefully weighed before choosing
                 a different course.  Unexpected results may result
                 otherwise.

      MAY        This word, or the adjective "optional", means that this
                 item is one of an allowed set of alternatives.  An
                 implementation which does not include this option MUST
                 be prepared to interoperate with another implementation
                 which does include the option.

      silently discard
                 The implementation discards the datagram without
                 further processing, and without indicating an error
                 to the sender.  The implementation SHOULD provide the
                 capability of logging the error, including the contents
                 of the discarded datagram, and SHOULD record the event
                 in a statistics counter.


3. Protocol Overview

   The basic operation in Service Location is that a client attempts
   to discover the location of a Service.  In smaller installations,
   each service will be configured to respond individually to each
   client.  In larger installations, services will register their
   services with one or more Directory Agents, and clients will
   contact the Directory Agent to fulfill requests for Service Location
   information.  Clients may discover the whereabouts of a Directory
   Agent by preconfiguration, DHCP [2, 10], or by issuing queries to the
   Directory Agent Discovery multicast address.


















Veizades,Guttman,Perkins,Kaplan       Expires 8 July 1997       [Page 5]

Internet Draft        Service Location Protocol         8 January 1997  


3.1. Protocol Transactions

   The diagram below illustrates the relationships described below:

      +---------------+   we want this info:     +-----------+
      |  Application  | - - - - - - - - - - - -> |  Service  |
      +---------------+                          +-----------+
           /|\                                      |     |
            |                         +-------------+     |
            |                         |                   |
           \|/                       \|/                 \|/
      +---------------+          +-----------+      +----------------+
      |   User Agent  |<-------->|  Service  |      |    Service     |
      +---------------+          |   Agent   |      | Agent which    |
            |                    +-----------+      | does not reply |
            |                         |             | to UA requests |
            |                        \|/            +----------------+
            |                   +-------------+           |
            +------------------>|  Directory  |<----------+
                                |    Agent    |
                                +-------------+      ___________
                                     /|\            / Many other\
                                      +------------>|   SA's    |
                                                    \___________/

   The following describes the operations a User Agent would employ
   to find services on the site's network.  The User Agent needs no
   configuration to begin network interaction.  The User Agent can
   acquire information to construct predicates which describe the
   services that match the user's needs.  The User Agent may build on
   the information received in earlier network requests to find the
   Service Agents advertising service information.

   A User Agent will operate two ways:  If the User Agent has already
   obtained the location of a Directory Agent, the User Agent will
   unicast a request to it in order to resolve a particular request.
   The Directory Agent will unicast a reply to the User Agent.  The
   User Agent will retry a request to a Directory Agent until it gets
   a reply, so if the Directory Agent cannot service the request (say
   it has no information) it must return an response with zero values,
   possibly with an error code set.

   If the User Agent does not have knowledge of a Directory Agent or if
   there are no Directory Agents available on the site network, a second
   mode of discovery is used.  The User Agent multicasts a request to
   the service-specific multicast address, to which the service it
   wishes to locate will respond.  All the Service Agents which are
   listening to this multicast address will respond, provided they can



Veizades,Guttman,Perkins,Kaplan       Expires 8 July 1997       [Page 6]

Internet Draft        Service Location Protocol         8 January 1997  


   satisfy the User Agent's request.  A similar mechanism is used for
   Directory Agent discovery; see section 5.2.  Service Agents which
   have no information for the User Agent MUST NOT respond.

   When a User Agent wishes to obtain an enumeration of ALL services
   which satisfy the query, a retransmission/convergence algorithm is
   used.  The User Agent resends the request, together with a list of
   previous responders.  Only those Service Agents which are not on
   the list respond.  Once there are no new responses to the request
   the accumulation of responses is deemed complete.  Depending on the
   length of the request, around 60 previous responders may be listed
   in a single datagram.  If there are more responders than this, the
   scaling mechanisms described in section 3.7 should be used.

   While the multicast/convergence model may be important for
   discovering services (such as Directory Agents) it is the exception
   rather than the rule.  Once a User Agent knows of the location of a
   Directory Agent, it will use a unicast request/response transaction.

   The Service Agent SHOULD listen for multicast requests on the
   service-specific multicast address, and MUST register with an
   available Directory Agent.  This Directory Agent will resolve
   requests from User Agents as described above.  This means that
   a Directory Agent must first be discovered, using the multicast
   mechanism described above.

   A Service Agent which does not respond to multicast requests will not
   be useful in the absence of Directory Agents.  Some Service Agents
   may not include this functionality, if an especially light-weight
   implementation is required.

   If the service is to become unavailable, it should be deregistered
   with the Directory Agent.  The Directory Agent responds with an
   acknowledgment to either a registration or deregistration.  Service
   Registrations include a Lifetime value and will eventually expire.
   Service Registrations need to be refreshed by the Service Agent
   before their Lifetime runs out.


3.2. Schemes

   The Service Location Protocol, designed as a way for clients to
   access resources on the network, is a natural application for
   Universal Resource Locators (URLs).  It is intended that by re-using
   URL specification and technology from the World Wide Web, clients and
   servers will be more flexible and able to be written using already
   existing code.  Moreover, it is hoped that browsers will be written
   to take advantage of the similarity in locator format, so that a



Veizades,Guttman,Perkins,Kaplan       Expires 8 July 1997       [Page 7]

Internet Draft        Service Location Protocol         8 January 1997  


   client can dynamically formulate requests for services that are
   resolved differently depending upon the circumstances.  There is
   the possibility for beneficial interaction between Directory Agents
   and Web Browsers which we wish to facilitate by means of compatible
   locator format.


3.2.1. The ``service:''  URL scheme

   The service URL scheme is used by Service Location.  It is used to
   specify a Service Location.  Many Service Types will be named by
   including a scheme name after the ``service:''  scheme name.  Service
   Types are used by SAs to register and deregister Services with DAs.
   It is also used by SAs and DAs to return Service Replies to UAs.  The
   formal definition of the ``service:''  URL scheme is in section 20.2.
   The format of the information which follows the ``service:''  scheme
   should as closely as possible follow the URL structure and semantics
   as formalized by the IETF standardization process.

   Well known Service Types are registered with the IANA and templates
   are available as RFCs.  Private Service Types may also be supported.


3.3. Standard Attribute Definitions

   Service Types used with the Service Location Protocol must describe
   the following:

         Service Type string of the service
         Service-specific multicast address, if used
         Attributes and Keywords
         Attribute Descriptions and interpretations

   Service Types note registered with IANA will use their own Naming
   Authority string and, possibly, a service-specific multicast
   address from the unassigned range.  This is only an option for
   a site-specific deployment, as there may be conflicts with this
   multicast address somewhere, in some other site.

   If a service-specific multicast address is not supplied by a
   standards document registered with IANA, nor is a site specific
   address being used, the Service Location General Multicast address
   is the default.  All Service Agents SHOULD listen to this address,
   especially if they have not registered their service information
   with any Directory Agent.  The service-specific multicast address is
   merely used for efficiency and is not strictly needed for correct
   operation.




Veizades,Guttman,Perkins,Kaplan       Expires 8 July 1997       [Page 8]

Internet Draft        Service Location Protocol         8 January 1997  


   Services which advertise a particular Service Type must support the
   complete set of standardized attributes.  They may support additional
   attributes, beyond the standardized set.  Unrecognized attributes
   MUST be ignored by User Agents.

   Service Type names which begin with "x-" are guaranteed not to
   conflict with any officially registered Service Type names.  It
   is suggested that this prefix be used for experimental or private
   Service Type names.  Similarly, attribute names which begin with "x-"
   are guaranteed not to be used for any officially registered attribute
   names.

   A service of a given Service Type should accept the networking
   protocol which is implied in its definition.  If a Service Type
   can accept multiple protocols, configuration information SHOULD
   be included in the Service Type attribute information.  This
   configuration information will enable an application to use the
   results of a Service Request and Attribute Request to directly
   connect to a service.

   See section 20.2.1 for the format of a Service Type String as used in
   the Service Location Protocol.


3.4. Naming Authority

   The Naming Authority of a service defines the meaning of the
   Service Types and attributes registered with and provided by Service
   Location.  The Naming Authority itself is a string which uniquely
   identifies an organization.  If no string is provided IANA is the
   default.

   Naming Authorities may define Service Types which are experimental,
   proprietary or for private use.  The procedure to use is to create
   a 'unique' Naming Authority string and then specify the Standard
   Attribute Definitions as described above.  This Naming Authority will
   accompany registration and queries, as described in sections 9 and 5.


3.5. Interpretation of Service Location Replies

   Replies should be considered to be valid at the time of delivery.
   The service may, however, fail or change between the time of the
   reply and the moment an application seeks to make use of the service.
   The application making use of Service Location MUST be prepared for
   the possibility that the service information provided is either stale
   or incomplete.  In the case where the service information provided




Veizades,Guttman,Perkins,Kaplan       Expires 8 July 1997       [Page 9]

Internet Draft        Service Location Protocol         8 January 1997  


   does not allow a User Agent to connect to a service as desired, the
   Service Request and/or Attribute Request may be resubmitted.

   Service specific configuration information (such as which protocol
   to use) should be included as attribute information in Service
   Registrations.  These configuration attributes will be used by
   applications which interpret the Service Location Reply.


3.6. Use of TCP, UDP and Multicast in Service Location

   The Service Location Protocol requires the implementation of
   connectionless and a connection oriented transport protocols.  The
   latter is used for bulk transfer, only when necessary.  Connections
   are always initiated by an agent request or registration, not
   by a replying Directory Agent.  The Service Location discovery
   mechanisms use possibly internetwork-wide multicast.  The protocol
   will operate in a broadcast environment with limitations detailed in
   section 3.6.1.


3.6.1. Multicast vs.  Broadcast

   The Service Location Protocol was designed for use in networks where
   multicast at the network layer is supported; in some instances
   multicast may not be supported.  To support this protocol in networks
   where multicast is not supported the following modifications are
   made to support the protocol in an environment where network layer
   broadcast is supported.


3.6.1.1. Single Subnet

   If a network is not connected to any other networks simple network
   layer broadcasts will work in place of multicast.

   Service Agents SHOULD and Directory Agents MUST listen for broadcast
   Service Location request messages to the Service Location port.  This
   allows UAs which lack multicast capabilities to still make use of
   Service Location on a single subnet.


3.6.1.2. Multiple Subnets

   The Directory Agent provides a central clearing house of information
   for User Agents.  If the network is designed so that a Directory
   Agent address is statically configured with each User Agent
   and Service Agent, the Directory Agent will act as a bridge for



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 10]

Internet Draft        Service Location Protocol         8 January 1997  


   information that resides on different subnets.  The Directory Agent
   address can be dynamically configured with Agents using DHCP or
   staticly configured, but Agents will not be able to discover DAs on
   non-bridged subnets.

   As dynamic discovery is not feasible in a broadcast environment with
   multiple subnets and manual configuration is difficult, deploying
   multiple DAs in multiple subnets will require use of multicast
   discovery with multiple hops (i.e., TTL > 1 in the IP header).


3.6.2. Service-Specific Multicast Address

   Each service type MAY have a unique multicast address which is
   expected to be used for discovering services of that type.  This
   multicast address may be obtained from the naming authority (e.g.,
   IANA). This mechanism is used so that the number of datagrams any one
   service agent receives is minimized.  The Service Location General
   Multicast Address may be used to query for any service, though one
   should use the service-specific multicast address if it exists.

   If the site network does not support multicast then the query
   should be broadcast to the Service Location port.  If the underlying
   hardware will not support the number of needed multicast addresses
   the Service Location General Multicast Address may be used.
   Service Agents listen on this multicast address as well as the
   service-specific multicast addresses for the service types they
   advertise.


3.7. Service Location Scaling, and Multicast Operating Modes

   In a very small network, with few nodes, no DA is required.  A User
   Agent can detect services by multicasting requests.  Service Agents
   will then reply to them.  Further, Service Agents which respond to
   user requests must be used to make service information available.
   This does not scale to environments with many hosts and services.

   When scaling Service Location systems to intermediate sized networks,
   a central repository (Directory Agent) may be added to reduce the
   number of Service Location messages transmitted in the network
   infrastructure.  Since the central repository can respond to
   all Service and Attribute Requests, fewer Service and Attribute
   Replies will be needed; for the same reason, there is no need to
   differentiate between Directory Agents.

   A site may also grow to such a size that it is not feasible to
   maintain only one central repository of service information.  In this



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 11]

Internet Draft        Service Location Protocol         8 January 1997  


   case more Directory Agents are needed.  The services (and service
   agents) advertised by the several Directory Agents are collected
   together into logical groupings called "Scopes".

   All Service Registrations that have a Scope must be registered with
   all DAs (within the appropriate multicast radius) of that Scope which
   have been or are subsequently discovered.  Service Registrations
   which have no Scope are only registered with unscoped DAs.  User
   Agents make requests of DAs whose Scope they are configured to use.

   Service Agents MUST register with unscoped DAs even if they are
   configured to specifically register with DAs which have a specific
   Scope or set of Scopes.  User Agents MAY query DAs without Scopes,
   even if they are configured to use DAs with a certain Scope.  This
   is because any DA with no Scope will have all the available service
   information.

   Scoped User Agents SHOULD always use a DA which supports their
   configured Scope when possible instead of an unscoped DA. This will
   prevent the unscoped DAs from becoming overused and thus a scaling
   problem.

   It is possible to specially configure Service Agents to register
   only with a specific set of DAs (see Section 22.1).  In that case,
   services may not be available to User Agents via all Directory
   Agents, but some network administrators may deem this appropriate.

   There are thus 3 distinct operating modes.  The first requires no
   administrative intervention.  The second requires only that a DA be
   run.  The last requires that all DAs be configured to have Scope and
   that a coherent strategy of assigning Scopes to services be followed.
   Users must be instructed which Scopes are appropriate for them to
   use.  This administrative effort will allow users and applications to
   subsequently dynamically discover services without assistance.

   The first mode (no DAs) is intended for a LAN. The second mode
   (using a DA or DAs, but not using Scopes) scales well to a group
   of interconnected LANs with a limited number of hosts.  The third
   mode (with DAs and Scopes) allows the SLP protocol to be used in an
   internetworked campus environment.

   If Scoped DAs are used, they will not accept unscoped registrations
   or requests.  UAs which issue unscoped requests will discover only
   unscoped services.  They SHOULD use a Scope in their requests if
   possible and SHOULD use a DA with their Scope in preference to an
   unscoped DA. In a large campus environment it would be a bad idea to
   have ANY unscoped DAs:  They attract ALL registrations and will thus
   present a scaling problem eventually.



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 12]

Internet Draft        Service Location Protocol         8 January 1997  


   A subsequent protocol document will describe mechanisms for
   supporting a service discovery protocol for the global Internet.


4. Service Location General Message Format

   The following header is used in all of the message descriptions below
   and is abbreviated by using "Service Location header =" followed by
   the function being used.

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |    Version    |    Function   |            Length             |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |O|M|   rsvd    |    Dialect    |        Language Code          |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |        Char Encoding          |              XID              |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

      Version  This protocol document defines version 1 of the Service
               Location protocol.





























Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 13]

Internet Draft        Service Location Protocol         8 January 1997  


      Function Service Location datagrams can be identified as to their
               operation by the function field.  The following are the
               defined operations:

               Message Type             Abbreviation     Function Value

               Service Request          SrvReq               1
               Service Reply            SrvRply              2
               Service Registration     SrvReg               3
               Service Deregister       SrvDereg             4
               Service Acknowledge      SrvAck               5
               Attribute Request        AttrRqst             6
               Attribute Reply          AttrRply             7
               DA Advertisement         DAAdvert             8
               Service Type Request     SrvTypeRqst          9
               Service Type Reply       SrvTypeRply          10


      Length   The number of bytes in the message, including the Service
               Location Header.

      O        The 'Overflow' bit.  See Section 18 for the use of this
               field.

      M        The 'Monolingual' bit.  Requests with this bit set
               indicate the User Agent will only accept responses in
               the language (see section 17) that is indicated by the
               Service or Attribute Request.

      rsvd     MUST be zero.

      Dialect  Dialect tags are used in Service Location messages to
               indicate a variant of vocabulary used.

      Language Code
               Strings within the remainder of the message which follows
               are to be interpreted in the language encoded (see
               appendix A) in this field.  This header field MUST be
               set.  See also section 17.

      Character Encoding
               The characters making up strings within the remainder of
               the message may be encoded in any standardized encoding
               (see section 17.1).  This header field MUST be set.

      Transaction Identifier (XID)
               The XID (transaction ID) field allows the requester to
               match replies to individual requests (see section 4.1).



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 14]

Internet Draft        Service Location Protocol         8 January 1997  


   When URLs are registered, they have lengths and lifetimes.  These
   two values are associated with the URL for the duration of the
   registration.  The triplet (length, lifetime, URL) is known as a
   "URL-entry", and has the following format when used in Service
   Replies and Service Registrations:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |           Lifetime            |        Length of URL          |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                              URL                              \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The URL conforms to RFC 1738 [7].  If the scheme used in the URL does
   not have a standardized representation, the minimal requirement is:

      service:<srvtype>://<addr-spec>

   The "SERVICE" string is the URL scheme of all Service Location
   Information included in Service Registrations and Service Replies.
   Each entry in the Reply will always have a <srvtype>.  It may also
   include an <addr-spec> except in the case of a reply to a Service
   Type request (see section 7).


4.1. Use of Transaction IDs (XIDs)

   Retransmission is used to ensure reliable transactions in the
   Service Location Protocol.  If a User Agent or Service Agent sends
   a message and fails to receive an expected response, the message
   will be sent again.  Retransmission of the same Service Location
   datagram should not contain an updated XID. It is quite possible the
   original request reached the DA or SA, but reply failed to reach the
   requester.  Using the same XID allows the DA or SA to cache its reply
   to the original request and then send it again, should a duplicate
   request arrive.  This cached information should only be held very
   briefly (CONFIG_INTERVAL_0.)  Any registration or deregistration at
   a Directory Agent, or change of service information at a SA should
   flush this cache so that the information returned to the client is
   always valid.

   The requester creates the XID from an initial random seed and
   increments it by one for each request it makes.  The XIDs will
   eventually wrap back to zero and continue incrementing from there.




Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 15]

Internet Draft        Service Location Protocol         8 January 1997  


   Directory Agents use XID values in their DA Advertisements to
   indicate their state (see section 15.2).


4.2. URL Entry Lifetime

   The Lifetime field is set to the number of seconds the reply can be
   cached by any agent.  A value of 0 means the information must not
   be cached.  User Agents MAY cache service information, but if they
   do, they must provide a way for applications to flush this cached
   information and issue the request directly onto the network.

   Services should be registered with DAs with a Lifetime, the suggested
   value being CONFIG_INTERVAL_1.  The service must be reregistered
   before this interval elapses, or the service advertisement will
   no longer be available.  Thus, services which vanish and fail to
   deregister eventually become automatically deregistered.


5. Service Request Message Format

   The Service Request is used to obtain URLs from a Directory Agent or
   Service Agents.

   The format of the Service Request is as follows:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |         Service Location header (function = SrvReq)           |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |length of prev resp list string|<Previous Responders Addr Spec>|
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                  <Previous Responders Addr Spec>              \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  length of predicate string   |  Service Request <predicate>  |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \               Service Request <predicate>, contd.             \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The <Previous Responders Addr Spec> is described in sections 7
   and 20.1.





Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 16]

Internet Draft        Service Location Protocol         8 January 1997  


   After a User Agent restarts (say, after rebooting of a system,
   loading of the network kernel), Service Requests should be delayed
   for some random time uniformly distributed within a one second
   interval centered about a configured delay value (by default,
   CONFIG_INTERVAL_4).

   The Service Request allows the User Agent to specify the Service Type
   of the service and a Predicate in a specific language.  The general
   form of a Service Request is shown below:

      <srvtype>[.<na>]/[<scope>]/[<where>]/

   The punctuation is necessary even where the fields are omitted.

    -  The <srvtype> refers to the Service Type.  For each type of
       service available, there is a unique Service type name string.
       See section 20.2.1.

    -  The <na> is the Naming Authority.  This string determines the
       semantic interpretation of the attribute information in the
       <where> part of the Service Request.

    -  The <scope> is a string used to restrict the range of the query.
       Scope is determined administratively, at a given site.  It is
       not necessarily related to network topology (see Section 16).
       Leaving this field out means that the request can be satisfied
       only by unscoped service advertisements.

    -  The <where> string is the Where Clause of the request.  It
       contains query which specify which service instances the User
       Agent is interested in.  The query includes attributes, boolean
       operators and relations.  (See section 5.3.)

   In the case of a multicast Service request, a list of previous
   responders is sent.  This list will prevent those in the list from
   responding, to be sure that responses from other sources are not
   drowned out.  The request is multicast repeatedly (with a recommended
   wait interval of CONFIG_INTERVAL_2) until there are no new responses,
   or a certain time (CONFIG_INTERVAL_3) has elapsed.  Different timing
   values are applied to a Service Request used for Directory Agent
   Discovery, see Section 5.2.

   In order for a request to succeed in matching registered information,
   the following conditions must be met:

    1. The result must have the same Service Type as the request.

    2. It must have the same Naming Authority.



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 17]

Internet Draft        Service Location Protocol         8 January 1997  


    3. It must have the same Scope.  (If the <scope> of the request
       was omitted, the request will only match services which were
       registered with no Scope.  Note that a Scoped request WILL match
       all unscoped Services).

    4. The conditions specified in the Where Clause must match the
       attributes and keywords registered for the service.


5.1. Service Request Usage

   The User Agent may form Service Requests using preconfigured
   knowledge of a Service Type's attributes.  It may also issue
   Attribute Requests to obtain the attribute values for a Service Type
   before issuing Service Requests (see Section  12).  Having obtained
   the attributes which describe a particular kind of service from an
   Attribute Request, (or using configured knowledge of a service's
   attributes,) the User Agent can build a predicate that describes the
   service needs of the user.

   Service Requests may be sent directly to a Directory Agent.  Suppose
   a printer supporting the lpr protocol is needed on the 12th floor
   which has UNRESTRICTED_ACCESS and prints 12 pages per minute.
   Suppose further that a Attribute Request indicates that there is a
   printer on the 12th floor, a printer that prints 12 pages per minute,
   and a printer that offers UNRESTRICTED_ACCESS. To check whether they
   are same printer, issue the following request:

      lpr//(& (PAGES PER MINUTE==12)
               (UNRESTRICTED_ACCESS)
               (LOCATION==12TH FLOOR))/

   Suppose there is no such printer.  The Directory Agent responds
   with a Service Reply with 0 in the number of responses and no reply
   values.

   The User Agent then tries a less restrictive query to find a printer,
   using the 12th floor as "where" criteria.

      lpr//(LOCATION==12TH FLOOR)/

   In this case, there is now only one reply:

      Returned URL:   service:lpr://igore.wco.ftp.com:515/draft

   The Address Specification for the printer is:  igore.wco.ftp.com:515.
   This is the location of the printer.  Files would be printed by




Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 18]

Internet Draft        Service Location Protocol         8 January 1997  


   spooling to that port on that host.  The word 'draft' refers to the
   name of the print queue the lpr server supports.

   In the absence of a Directory Agent, the request above could
   be multicast.  In this case it would be sent to the printer
   Multicast Address and not to the Directory Agent.  Service Agents
   that can satisfy the predicate will reply.  Service Agents which
   cannot support the character set of the request MUST return
   CHARSET_NOT_UNDERSTOOD in the SrvRply.  In all other circumstances,
   Service Agents which cannot satisfy the reply do not send any reply
   at all.

   The only way a User Agent can be sure there are no services which
   match the query is by retrying the request (CONFIG_INTERVAL_8).  If
   no response comes, the User Agent gives up and assumes there are no
   such printers.

   Another form of query is a simpler 'join' query.  Its syntax has no
   parentheses or logical operators.  Each term is conjoined (AND-ed
   together.)  Rewriting the initial query provides an example:

      lpr//PAGES PER MINUTE==12,
           UNRESTRICTED_ACCESS,
           LOCATION==12TH FLOOR/


5.2. Directory Agent Discovery Request

   Normally a Service Request returns a Service Reply.  The sole
   exception to this is a Service Request for the Service Type
   "directory-agent".  This Service Request is answered with a DA
   Advertisement.

   Without configured knowledge of a Directory Agent (DA), a User Agent
   or Service Agent uses a Service Request to discover a DA. (See
   section 15.1 for mechanisms by which a client may be configured to
   have knowledge of a DA.) Such a Service Request used for Directory
   Agent Discovery includes a predicate of the form:

         directory-agent///

   This query is always sent to the Directory Agent Discovery multicast
   address.  The Service Type of a Directory Agent is "directory-agent",
   hence it is the Service Type used in the request.  No Scope is
   included in the request, so all Directory Agents will reply.  This is
   the only request which omits a Scope which all Directory Agents MUST
   respond to.  Normally, a Directory Agent with a Scope ONLY responds
   to requests with that Scope.  No Naming Authority is included, so



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 19]

Internet Draft        Service Location Protocol         8 January 1997  


   "IANA" is assumed.  We want to reach all the available directory
   agents.  If the Scope were supplied, only DAs supporting that Scope
   would reply.

   DA Advertisement Replies may arrive from different sources, similar
   in form to:

      URL returned:   service:directory-agent://slp-resolver.catch22.com
      Scope returned: ACCOUNTING

      URL returned:   service:directory-agent://204.182.15.66
      Scope returned: JANITORIAL SERVICES

   The DA Advertisement format is defined in Section 14.

   If the goal is merely to discover any Directory Agent, the first
   reply will do.  If the goal, however, is to discover all reachable
   DAs, the request must be retransmitted after an interval (the
   recommended time is CONFIG_INTERVAL_5).  This retransmitted request
   will include a list of DAs which have already responded.  See
   sections 7 and 20.1.  Directory Agents which receive the request will
   only respond if they are not on this list.  After there are no new
   replies, all DAs are presumed to have been discovered.

   If a DA fails to respond after CONFIG_INTERVAL_6 seconds, the UA or
   Service Agent should use a different DA. DA addresses may be cached
   from previous discovery attempts, preconfigured, or by use of DHCP
   (see section 15.2).  If no such DA responds, DA discovery should be
   used to find a new DA. Only after CONFIG_INTERVAL_7 seconds should
   it be assumed that no DA exists and multicast based Service Requests
   should be used.


5.3. Explanation of Terms of Predicate Grammar

   A predicate has a simple structure, which depends on parentheses,
   commas and slashes to delimit the elements.  Examples of proper usage
   are given throughout this document.  The terms used in the grammar
   are as follows:

      predicate:

         Placed in a Service Request, this is interpreted by a Service
         Agent or Directory Agent to determine what information to
         return.






Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 20]

Internet Draft        Service Location Protocol         8 January 1997  


      scope:

         If this is absent in a Service Request, the request will match
         only services registered without a Scope.  If it is present,
         only services registered under that Scope or are unscoped will
         match the request.

      where-clause:

         This determines which services the request matches.  An empty
         where-clause will match all services.  The request will be
         limited to services which have the specified Service Type, so
         the where-clause is not the sole factor in picking out which
         services match the request.

      where-list:

         The where-list is a logical expression.  It can be a single
         expression, a disjunction or a conjunction.  A single
         expression must apply for the where-clause to match.  A
         disjunction matches if any expression in the OR list matches.
         A conjunction matches only if all elements in the AND list
         match.

         Note that there is no logical negation operator:  This is
         because there is no notion of returning "everything except"
         what matches a given criteria.

         A where-list can be nested and complex.  For example, the
         following requires that three subexpressions must all be true:

                (& (| <query-item> <query-item>)
                   <query-item>
                   (& <query-item> <query-item> <query-item>)
                )

         Notice that white space, tabs or carriage returns can be added
         anywhere outside query-items.  Each list has 2 or more items in
         it, and lists can be nested.  Services which fulfill the entire
         logical expression match the where-clause.

         '(' '|' <query-item> ')' and '(' '&' <query-item> ')' are
         degenerate expressions but they should be tolerated.  They are
         equivalent to <query-item>.

      query-item:

         A query item has the form:



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 21]

Internet Draft        Service Location Protocol         8 January 1997  


               '(' <attr-tag> <comp-op> <attr-val> ')'

         or

               '(' <keyword> ')'

         Examples of this would be:

               (SOME ATTRIBUTE == SOME VALUE)
               (RESERVED)
               (QUEUE LENGTH <= 234)

      query-join:

         The query-join is a comma delimited list of conditions which
         the service must satisfy in order to match the query.  The
         items are considered to be logically conjoined.  Thus the
         query-join:

               ATTR1=VALUE1, KEYWORD1, KEYWORD2, ATTR2>=34

         is equivalent to the where-list:

               (& (ATTR1=VALUE1) (KEYWORD1) (KEYWORD2) (ATTR2>=34))

         The query-join cannot be mixed with a where-list.  It is
         provided as a convenient mechanism to provide a statement of
         necessary conditions without building a logical expression.


5.4. Service Request Predicate Grammar

   Service Requests can precisely describe the services they need by
   including a Predicate the body of the Request.  This Predicate must
   be constructed according to the grammar below.

    <predicate>  ::= <srvtype>['.'<na>]'/'<scope>'/'<where>'/'

    <srvtype>    ::= string representing type of service.  Only
                     'a' to 'z', 'A' to 'Z', '+' and '-' are allowed.

    <na>         ::= string representing the Naming Authority.
                     Only characters from 'a' to 'z', 'A' to 'z',
                     '+' and '-' are allowed.  If this field is
                     omitted then "IANA" is assumed.

    <scope>      ::= string representing the directory agent scope.
                     '/', ',' (comma) and ':'  are not allowed in



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 22]

Internet Draft        Service Location Protocol         8 January 1997  


                     this string.  The scopes "LOCAL" and "REMOTE"
                     are reserved.

    <attr-tag>   ::= class name of an attribute of a given Service
                     Type.  This tag cannot include the following
                     characters:  '(', ')', ',', '=', '!', '>',
                     '<', '/', '*', except where escaped (see 17.1.)

    <keyword>    ::= a class name of an attribute which will have
                     no values.  This string has the same limits
                     as the <attr-tag>.  In addition white space
                     internal to the keyword is illegal.

    <where>      ::= <where-any> |
                     <where-list> |
                     <query-join>

    <where-any>  ::=
                     That is NOTHING or white space.

    <where-list> ::= '(' '&' <where-list> <query-list> ')' |
                     '(' '|' <where-list> <query-list> ')' |
                     '(' <keyword> ')'
                     '(' <attr-tag> <comp-op> <attr-val> ')'

    <query-list> ::= <where-list> |
                     <where-list> <query-list>
    <query-join> ::= <keyword> |
                     <join-item> |
                     <query-join> ',' <keyword> |
                     <query-join> ',' <join-item>

    <join-item>  ::= <attr-tag> <comp-op> <attr-val>

    <comp-op>    ::= "!=" | "==" | '<' | "<=" | '>' | ">="

    <attr-val>   ::= any string (see Section 20.5 for the ways
                     in which attr-vals are interpreted.)
                     Value strings may not contain '/', ','
                     '=', '<', '>', except where escaped (see 17.1.).

                     '(' and ')' may be used in attribute values
                     for the purpose of encoding a binary values.
                     Binary encodings (See 20.5) may
                     include the above reserved characters.






Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 23]

Internet Draft        Service Location Protocol         8 January 1997  


5.5. String Matching for Requests

   All strings are case insensitive, with respect to string matching on
   queries.  All preceding or trailing blanks should not be considered
   for a match, but blanks internal to a string are relevant.
   For example, "  Some String  " matches "SOME STRING",
   but not "some  string".

   String matching may only be performed over the same character sets.
   If a request cannot be satisfied due to a lack of support for the
   character set of the request a CHARSET_NOT_UNDERSTOOD error is
   returned.

   String comparisons (using comparison operators such as '<' or
   '>=') are done using lexical ordering in the character set of the
   registration, not using any language specific rules.  The ordering
   is strictly by the character value, i.e.  "0" < "A" is true when the
   character set is US-ASCII, since "0" has the value of 48 and "A" has
   the value 65.

   String matching is done after escape sequences have been substituted.
   See sections 17, 5.3, 17.1.


6. Service Reply Message Format

   The format of the Service Reply Message is:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |          Service Location header (function = SrvRply)         |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |          Error Code        |    number of replies returned    |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                         <URL Entry>-1                         |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                              .                                |
     \                              .                                \
     |                              .                                |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                         <URL Entry>-N                         |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Each Service Reply message is composed of a list of URL Entries.

   The Error Code may have one of the following values:




Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 24]

Internet Draft        Service Location Protocol         8 January 1997  


      0        Success

      LANGUAGE_NOT_SUPPORTED
               A SA or DA returns this when a request is received
               from a UA which is in a language for which there is no
               registered Service Information and the request arrived
               with the Monolingual bit set.  See Section 17.

      PROTOCOL_PARSE_ERROR
               A SA or DA returns this error when a SrvReq is received
               which cannot be parsed.

      SCOPE_NOT_SUPPORTED
               A DA which is configured to have a Scope will return this
               error if it receives a request which is set to have a
               Scope which it does not support.  An SA will not return
               this error, it will simply not reply to the multicast
               request.

      CHARSET_NOT_UNDERSTOOD
               If the DA or SA receives a request or registration in a
               character set which it does not support, it will return
               this error.

   Each <URL Entry> in the list has the form defined at the end of
   Section 4.

   The URLs in the reply have no delimiters between them, other than the
   length fields.  The length fields indicate where the strings end.


7. Service Type Request Message Format

   The Service Type Request is used to determine all the types of
   services supported on a network.

   The request should be sent directly to a DA (though it may also be
   sent to the Service Location General Multicast Address), in order
   to find out all services available on the site network (which are
   advertised by Directory Agents and Service Agents.)  If no DA is
   available, a User Agent MAY issue more than one request to insure
   that all replies have been received.  In each subsequent request, a
   User Agent included those Service Types that it is aware of.  When no
   new replies arrive within CONFIG_INTERVAL_3 from a request, the User
   Agent can presume that it has acquired a complete set of available
   Service Types.





Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 25]

Internet Draft        Service Location Protocol         8 January 1997  


   The format of a Service Type Request is:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |        Service Location header (function = SrvTypeRqst)       |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  length of prev resp string   |<Previous Responders Addr Spec>|
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                  <Previous Responders Addr Spec>              \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |   length of naming authority  |   <Naming Authority String>   |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \            <Naming Authority String>, continued               \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |     length of Scope String    |         <Scope String>        |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                   <Scope String>, continued                   \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   Note that the <Previous Responders Addr Spec> is a comma delimited
   list.  (See section 20.1.)  The 'length of prev responder list' field
   indicates the length of the comma delimited list string.  A previous
   responder list with 3 elements takes this form:

         <addr-spec>,<addr-spec>,<addr-spec>

   The Naming Authority, if included, will limit the replies to Service
   Type Requests to Service Types which have the specified Naming
   Authority.  If this field is omitted (i.e., the length field is
   zero), the default Naming Authority ("IANA") is assumed.  If the
   length field is -1, service types from all naming authorities are
   requested.

   The Scope String Field, if included, will limit replies to Service
   Types which have the specified Scope or are unscoped.  If this field
   is omitted, all Service Types (from the specified Naming Authority)
   are returned.







Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 26]

Internet Draft        Service Location Protocol         8 January 1997  


8. Service Type Reply Message Format

   The Service Type Reply has the following format:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |        Service Location header (function = SrvTypeRply)       |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |          Error Code           |    number of service types    |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                      <Service Type Item>-1                    \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                             . . .                             |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                     <Service Type Item>-N                     \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The format of a Service Type Item is as follows:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | length of Service Type String |    <Service Type String>      |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                 <Service Type String>, continued              \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |   length of addr spec string  |            <addr spec>        |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                     <addr spec>, continued                    \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The Error Code may have one of the following values:

      0        Success

      PROTOCOL_PARSE_ERROR
               A SA or DA returns this error when a SrvTypeRqst is
               received which cannot be parsed.




Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 27]

Internet Draft        Service Location Protocol         8 January 1997  


      SCOPE_NOT_SUPPORTED
               A DA which is configured to have a Scope will return this
               error if it receives a SrvTypeRqst which is set to have a
               Scope which it does not support.  An SA will not return
               this error, it will simply silently discard the multicast
               request.

      CHARSET_NOT_UNDERSTOOD
               If the DA receives a SrvTypeRqst in a character set which
               it does not support, it MUST this error.

   The service type's name is provided in the <Service Type String>.
   See section 20.2.1 for the formal definition of this field.  The
   <addr spec> format is described in 20.4.  This field provides
   the service specific multicast address.  If the service specific
   multicast address is omitted, the General Service Location Multicast
   Address is assumed.  User Agents may then use this multicast address
   for issuing Service and Attribute Requests directly to SAs.

   Example Service Type Replies might be:

        Multicast Address     Service Type String

        224.0.3.10            service:lpr://
        224.0.3.24            service:http://
        224.0.3.115           service:nfs://


   NOTE: These multicast addresses are examples only, the official
   numbers have not yet been assigned.


9. Service Registration Message Format

   After a Service Agent has found a Directory Agent, it begins to
   register its advertised services one at a time.  A Service Agent
   must wait for some random time uniformly distributed within the
   range specified by CONFIG_INTERVAL_11 before registering again.
   Registration is done using the Service Registration message
   specifying all attributes for a service.  A Directory Agent must
   acknowledge each service registration request.










Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 28]

Internet Draft        Service Location Protocol         8 January 1997  


   The format of a Service Registration is:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |           Service Location header (function = SrvReg)         |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                          <URL-Entry>                          \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  Length of Attr List String   |          <attr-list>          |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                    <attr-list>, Continued.                    \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The <URL-Entry> is defined at the end of Section 4.  The <attr-list>
   is defined in Section 20.3.

   Service registration may use a connectionless protocol (e.g.  UDP),
   or a connection oriented protocol (e.g.  TCP). If the registration
   operation may contain more information than can be sent in one
   datagram, the Service Agent MUST use a connection oriented protocol
   to register itself with the DA. When a Service Agent registers the
   same attribute class more than once for a service instance, the
   Directory Agent overwrites the all the values associated with that
   attribute class for that service instance.  Separate registrations
   must be made for each language that the service is to be advertised
   in.

   An example of Service Registration information is:

      Lifetime (seconds):   16-bit unsigned integer
      URL (at least):       service:<srvtype>://<addr-spec>
      Attributes (if any):  (ATTR1=VALUE),KEYWORD,(ATTR2 = VAL1, VAL2)

   In order to offer continuously advertised services, Service Agents
   should start the reregistration process before the Lifetime they used
   in the registration expires.










Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 29]

Internet Draft        Service Location Protocol         8 January 1997  


   An example of a service registration (valid for 3 hours) is as
   follows:

      Lifetime:   10800
      URL:        service:lpr://igore.wco.ftp.com:515/draft
      Attributes: (SCOPE=DEVELOPMENT),
                  (PAPER COLOR=WHITE),
                  (PAPER SIZE=LETTER),
                  UNRESTRICTED_ACCESS,
                  (LANGUAGE=POSTSCRIPT, HPGCL),
                  (LOCATION=12 FLOOR)

   The same registration could be done again, as shown below, in German;
   however, note that "lpr", "service", and "SCOPE" are reserved terms
   and will remain in the language they were originally registered
   (English).

      Lifetime:   10800
      URL:        service:lpr://igore.wco.ftp.com:515/draft
      Attributes: (SCOPE=ENTWICKLUNG),
                  (PAPIERFARBE=WEISS),
                  (PAPIERFORMAT=BRIEF),
                  UNBEGRENTZTER_ZUGANG,
                  (DRUECKERSPRACHE=POSTSCRIPT,HPGCL),
                  (STANDORT=11 ETAGE)

   Registrations must contain an Attribute of SCOPE unless they are
   unscoped and then they must be registered with all unscoped Directory
   Agents.

   Registrations of a previously registered service are considered an
   update.  The new registration's attributes replace the previous
   registration's, but do not effect attributes which were included
   previously and are not present in the update.  For example:
   service:x://a.org has been registered with attributes A=1, B=2, C=3.
   A new registration comes for service:x://a.org with attributes C=30,
   D=40.  The attributes for the service after the update are A=1, B=2,
   C=30, D=40.

   In the example above, the SCOPE is set to DEVELOPMENT (in English)
   and ENTWICKLUNG (in German).  Recall that all strings in a message
   must be in one language, which is specified in the header.  The
   string SCOPE is *not* translated, as it is one of the reserved
   strings in the Service Location Protocol (see section 17.3.)

   The Directory Agent may return a server error in the acknowledgment.
   This error is carried in the Error Codes field of the service
   location message header.  A Directory Agent MUST decline to register



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 30]

Internet Draft        Service Location Protocol         8 January 1997  


   a service if it is specified with an unsupported Scope.  In this case
   a SCOPE_NOT_SUPPORTED error is returned in the SrvAck.  A Directory
   Agent MUST NOT accept Service Registrations which have an unsupported
   Scope unless it is an unscoped Directory Agent, in which case it MUST
   accept all Service Registrations.

   An unscoped Service Registration will match all requests.  A request
   which specifies a certain scope will therefore return services which
   have that Scope and services which are unscoped.  It is strongly
   suggested that one should use Scopes in all registrations or none.
   See Sections 16 and 3.7 for details.


10. Service Acknowledgement Message Format

   A Service Acknowledgement is sent as the result of a DA receiving
   and processing a Service Registration or Service Deregistration.  An
   acknowledgment indicating success must have the error code set to
   zero.  Once a DA acknowledges a service registration it makes the
   information available to clients.

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |            Service Location header (function = SrvAck)        |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |          Error Code           |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The Error Code may have one of the following values:

      0        Success

      PROTOCOL_PARSE_ERROR
               A DA returns this error when the SrvReg or SrvDereg could
               not be parsed.

      INVALID_REGISTRATION
               A DA returns this error when a SrvReg is invalid (it
               parses badly or is poorly formed in some way.)

      SCOPE_NOT_SUPPORTED
               A DA which is configured to have a Scope will return this
               error if it receives a SrvReq which is set to have a
               Scope which it does not support.






Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 31]

Internet Draft        Service Location Protocol         8 January 1997  


      CHARSET_NOT_UNDERSTOOD
               If the DA receives a SrvReg or SrvDereg in a character
               set which it does not support, it will return this error.

      AUTHENTICATION_FAILED
               If the DA uses IP Security Authentication and the
               SA sending a SrvReg or SrvDereg message fails to be
               authenticated, the DA will return this error.


11. Service Deregister Message Format

   When a service is no longer available for use, the Service Agent must
   deregister itself from Directory Agents that it has been registered
   with.  A service uses the following PDU to deregister itself.

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |           Service Location header (function = SrvDereg)       |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |         length of URL         |              URL              |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \              URL of Service to Deregister, contd.             \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  length of <tag spec> string  |            <tag spec>         |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                     <tag spec>, continued                     \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The Service Agent should retry this operation if there is no response
   from the Directory Agent.  The Directory Agent acknowledges this
   operation with a service acknowledgment.  Once the Service Agent
   receives an acknowledgment indicating success, it can assume that the
   service is no longer advertised by the Directory Agent.  The Error
   Code in the Acknowledgment of the Service Deregistration may have the
   same values as described in section 10.

   The Service Deregister Information sent to the Directory Agent has
   the following form:

        service:<srvtype>://<addr-spec>
        Attribute tags (if any):  ATTR1,KEYWORD,ATTR2




Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 32]

Internet Draft        Service Location Protocol         8 January 1997  


   This will deregister the specified attributes from the service
   information from the Directory Agent.  If no attribute tags are
   included, the entire service information is deregistered in every
   language and every Scope it was registered in.  To deregister the
   printer from the preceding example, use:

         service:lpr://igore.wco.ftp.com:515/draft


12. Attribute Request Message Format

   The Attribute Request is used to obtain attribute information.  The
   UA supplies a request and the appropriate attribute information is
   returned.

   If the UA supplies only a Service Type, and the reply includes
   all attributes and all values for that Service Type.  The reply
   includes only those attributes for which services exist and are
   advertised by the DA or SA which received the Attribute Request.
   Since different instances of a given service can, and very likely
   will, have different values for the attributes defined by the Service
   Type, the User Agent must form a union of all attributes returned by
   all service Agents.  The Attribute information will be used to form
   Service Requests.

   If the UA supplies a URL, the reply will contain service information
   corresponding to that URL.

   Attribute Requests include a 'select clause'.  This may be used to
   limit the amount of information returned.  If the select clause is
   empty, all information is returned.  Otherwise, the UA supplies
   a comma delimited list of attribute tags and keywords.  If the
   attribute or keyword is defined for a service, it will be returned
   in the Attribute Reply, along with all registered values for that
   attribute.  If the attribute selected has not ben registered for that
   URL or Service Type, the attribute or keyword information is simply
   not returned.














Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 33]

Internet Draft        Service Location Protocol         8 January 1997  


   The Attribute Request message has the following form:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |         Service Location header (function = AttrRqst)         |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |length of prev resp list string|<Previous Responders Addr Spec>|
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \         <Previous Responders Addr Spec>, continued            \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |         length of URL         |              URL              |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                         URL, continued                        \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |        length of <Scope>      |           <Scope>             |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                      <Scope>, continued                       \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |   length of <select-list>     |        <select-list>          |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                   <select-list>, continued                    \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The <Previous Responder Address List> functions exactly as introduced
   in Section 7.  See also Section 20.1.

   The URL can take two forms:  Either it is simply a Service
   Type, such as "service:http:", or it can be a URL, such as
   "service:lpr://igore.wco.ftp.com:515/draft".  In the former case, all
   attributes and the full range of values for each attribute for the
   Service Type is returned.  In the latter case, only the attributes
   for the service whose URL is defined are returned.

   The Scope String is provided so that Attribute Requests for Service
   Types can be made so that only the Attribute information pertaining
   to a specific Scope will be returned.  This field is ignored in the
   case when a full URL is sent in the Attribute Request.  The rules for
   encoding of the Scope String are given in Section 5.4.




Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 34]

Internet Draft        Service Location Protocol         8 January 1997  


   The select list takes the form:

    <select-list>   ::= <select-item> |
                        <select-item> ',' <select-list>

    <select-item>   ::= <keyword> | <attr-tag> | <partial-tag> '*'

    <partial-tag>   ::= the partial class name of an attribute
                        followed by an '*' matches all class names
                        which begin with the characters preceding
                        the '*'



   For definitions of <attr-tag> and <keyword> see 5.4.

   An example of a select-list following the printer example is:

   PAGES PER MINUTE, UNRESTRICTED_ACCESS, LOCATION

   If sent to a Directory Agent, the number of previous responders is
   zero and there are no Previous Responder Address Specification.
   These fields are only used for repeated multicasting, exactly as for
   the Service Request.


13. Attribute Reply Message Format

   An Attribute Reply Message takes the form:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |         Service Location header (function = AttrRply)         |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |         Error Code            |  length of <attr-list> string |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                          <attr-list>                          \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The Error Code may have the following values:

      0        Success

      LANGUAGE_NOT_SUPPORTED
               A SA or DA returns this when a request is received



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 35]

Internet Draft        Service Location Protocol         8 January 1997  


               from a UA which is in a language for which there is no
               registered Service Information and the request arrived
               with the Monolingual bit set.  See Section 17.

      PROTOCOL_PARSE_ERROR
               A DA or SA returns this error when the AttrRqst could not
               be parsed.

      SCOPE_NOT_SUPPORTED
               A DA which is configured to have a Scope will return this
               error if it receives an AttrRqst which is set to have
               a Scope which it does not support.  SAs will silently
               discard multicast AttrRqst messages for Scopes they do
               not support.

      CHARSET_NOT_UNDERSTOOD
               If the DA receives an AttrRqst in a character set which
               it does not support, it will return this error.  SAs will
               silently discard multicast AttrRqst messages which arrive
               using character sets they do not support.

   The <attr-list> (attribute list) has the same form as the attribute
   list in a Service Registration, see Section 20.3 for a formal
   definition of this field.

   An Attribute Request for "lpr" might elicit the following reply
   (UNRESTRICTED_ACCESS is a keyword):

         (PAPER COLOR=WHITE,BLUE),
         (PAPER SIZE=LEGAL,LETTER,ENVELOPE,TRACTOR FEED),
         UNRESTRICTED_ACCESS,
         (PAGES PER MINUTE=1,3,12),
         (LOCATION=12TH, NEAR ARUNA'S OFFICE),


















Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 36]

Internet Draft        Service Location Protocol         8 January 1997  


14. Directory Agent Advertisement Message Format

   Directory Agent Advertisement Messages have the following format:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |          Service Location header (function = DAAdvert)        |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |           Error Code          |         Length of URL         |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                              URL                              \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |     Length of <Scope-list>    |          <Scope-list>         |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     \                    <Scope-list>, continued                    \
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The Error Code is set when a DA Advertisement is returned as the
   result of a Service Request.  It will always be set to 0 in the case
   of an unsolicited DA Advertisement.  The Error Code may take the
   values specified in Section 6.

   The URL corresponds to the Directory Agent's location.  The
   <Scope-list> is a comma delimited list of Scopes which the DA
   supports, in the following format:

       <Scope-list>    ::=    <Scope> | <Scope-list> ',' <Scope>
       <Scope>         ::=    String representing a scope


   See Section 5.4 for the lexical rules regarding <Scope>.

   DA Advertisements sent in reply to a Directory Agent Discovery
   Request has the same format as the unsolicited DA Advertisement, for
   example:

      URL:        service:directory-agent://SLP-RESOLVER.CATCH22.COM
      SCOPE List: ADMIN

   The Directory Agent can be reached at the Address Specification
   returned, and supports the SCOPE called "ADMIN".





Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 37]

Internet Draft        Service Location Protocol         8 January 1997  


15. Directory Agents

15.1. Introduction

   A Directory Agent acts on behalf of many Service Agents.  It acquires
   information from them and acts as a single point of contact to supply
   that information to User Agents.

   The queries that a User Agent multicasts to Service Agents (in an
   environment without a Directory Agent) are the same as queries that
   the User Agent might unicast to a Directory Agent.  A User Agent may
   cache information about the presence of alternate Directory Agents to
   use in case a selected Directory Agent fails.

   Aside from enhancing the scalability of the protocol (see
   section 3.7), running multiple DAs provides robustness of operation.
   The DAs have replicated service information which remain accessible
   even when one of the DAs fail.  Directory Agents, in the future, may
   use mechanisms outside of this protocol to coordinate the maintenance
   of a distributed database of Service Location information, and thus
   scale to enterprise networks or larger administrative domains.

   Each Service Agent must register with all DAs they are configured to
   use.  UAs may choose among DAs they are configured to use.

   Locally, Directory Agent consistency is guaranteed using mechanisms
   in the protocol.  There isn't any Directory to Directory Agent
   protocol yet.  Rather, passive detection of DAs by SAs ensures that
   eventually service information will be registered consistently
   between DAs.  Invalid data will age out of the Directory Agents
   leaving only transient stale registrations even in the case of a
   failure of a Service Agent.


15.2. Finding Directory Agents

   A User or Service Agent may be statically configured to use a
   particular DA. This is discouraged unless the application resides on
   a network where any form of multicast or broadcast is impossible.

   Alternatively, a host which uses DHCP [2, 10] may use it to obtain a
   Directory Agent's address.  A DHCP option will be assigned for this
   purpose.  It has not yet been, at the time this document was written.

   The third way to discover DAs is dynamically.  This occurs actively
   by sending out a Directory Agent Discovery request (see Section 5.2).

   Lastly, the agent may be informed passively as follows:



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 38]

Internet Draft        Service Location Protocol         8 January 1997  


   When a Directory Agent first comes on-line it sends an unsolicited DA
   Advertisement to the Service Location general multicast address.  If
   a DA supports a particular Scope or set of Scopes these are placed in
   the reply.  The class for this attribute is 'SCOPE'.

   Every CONFIG_INTERVAL_9 a Directory Agent will send an unsolicited
   DA Advertisement again.  This will ensure that eventually it will be
   discovered by all applications which are concerned.

   When a Directory Agent first comes up it begins with 0 as its XID,
   and increments this by one each time it sends an unsolicited DA
   Advertisement.  When the counter wraps, it should go from 0xFFFF to
   0x0100, not 0.

   If the Directory Agent has stored all of the service information in
   a nonvolatile store, it should initially set the XID to 0x100, as it
   is not coming up 'stateless.'  If it stores service registrations in
   memory only, it will restart without any state.  It should indicate
   this by resetting its XID to 0.

   All Service Agents which receive the unsolicited DA Advertisement
   should examine its XID. If the Directory Agent has never before
   been heard from or if the XID is less than it was previously and
   less than 256, the Service Agent should assume the DA does not have
   its service registration, even if it once did.  If this is the case
   and the DA has the proper Scope, the SA should register all service
   information with the Directory Agent, after waiting a random interval
   CONFIG_INTERVAL_10.

   When a Service Agent or User Agent first comes on-line it must issue
   a Directory Agent Discovery Request unless it is using static or DHCP
   configuration, as described in 5.2.

   A Service Agent registers information with ALL newly discovered
   Directory Agents when either of the above two events take place.
   When Scopes are being used, a Service Agent SHOULD choose a set of
   Scopes to be advertised in and need only register with Directory
   Agents that support the Scopes in which they wish to be registered.
   Services MUST be registered with DAs that support their Scope and
   those which have no Scope, unless specifically configured not to do
   so (see section 22.1.)

   Once a User Agent becomes aware of a Directory Agent it will unicast
   its queries there.  In the event that more than one Directory Agent
   is detected, it will select one to communicate with.  When Scopes
   are supported, the User Agent will direct its queries to different
   Directory Agents depending on which Scopes are appropriate domains
   for the query to be answered in.



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 39]

Internet Draft        Service Location Protocol         8 January 1997  


   The protocol will cause all DAs (of the same Scope) to eventually
   obtain consistent information.  Thus one DA should be as good as any
   other for obtaining service information.  There may be temporary
   inconsistencies between DAs.


16. Scope Discovery and Use

   The Scope mechanism in the Service Location Protocol enhances its
   scalability.  The primary use of Scopes is to provide the capability
   to organize a site network along administrative lines.  A set of
   services can be assigned to a given department of an organization,
   to a certain building or geographical area or for a certain purpose.
   The users of the system can be presented with these organizational
   elements as a top level selection, before services within this domain
   are sought.

   A site network that has grown beyond a size that can be reasonably
   serviced by a few DAs can use the Scope mechanism.  DAs have the
   attribute class "SCOPE".  The values for this attribute are a list
   of strings that represent the administrative areas for which this
   Directory Agent is an authority.  The semantics and language of the
   strings used to describe the Scope are almost entirely the choice of
   the administrative entity of the particular domain in which these
   Scopes exist.  The values of SCOPE should be configurable, so the
   system administrator can set its value.  The scopes "LOCAL" and
   "REMOTE" are reserved and SHOULD NOT be used.  Use of these reserved
   values is to be defined in a future protocol document.

   Services with the attribute SCOPE should only be registered with DAs
   which support the same Scope or DAs which have no Scope.

   Directory Agents advertise their available Scopes.  A Service Agent
   may then choose a scope in which to register, and SHOULD register
   with all Directory Agents in that Scope, as well as all DAs which
   have no Scope.  Failure to be comprehensive in registration according
   to this rule will mean that the service advertisement may not be
   discoverable by all User Agents.

   A Directory Agent which has a Scope will send replies to Directory
   Agent Discovery requests with the scope information included.  Note
   that the directory-agent Service Type is registered with the IANA
   naming authority (which is automatically selected by leaving the
   Naming Authority field empty.)

   The query:

         directory-agent/MATH DEPT//



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 40]

Internet Draft        Service Location Protocol         8 January 1997  


   Could receive the following DA Advertisement:

      Returned URL:        service:directory-agent://diragent.blah.edu
      Returned SCOPE:      MATH DEPT

   The same Directory Agent if it had no Scope value would reply:

      Returned URL:        service:directory-agent://diragent.void.com
      Returned SCOPE:

   If a Directory Agent supported more than one Scope it would reply as:

      Returned URL:        service:directory-agent://srv.domain.org
      Returned SCOPE:      MATH DEPT,ENGLISH DEPT,CS DEPT

   A DA which has no Scope will reply to any Directory Agent Discovery
   Request.

   Being a member of a Scope means that an agent SHOULD use those
   Directory Agents that support its Scope.  User Agents send all
   requests to DAs which support the indicated Scope.  Services are
   registered with the DA(s) in their Scope.  For a UA to find a service
   that is registered in a particular Scope it must send requests to a
   DA which supports the indicated Scope.  There is no limitation on
   Scope membership built into the protocol; that is to say, a User
   Agent or Service Agent may be a member of more than one Scope.
   Membership is open to all, unless some external authorization
   mechanism is added to limit access.


17. Language and Character Encoding Issues

   All Service Registrations declare the language in which the strings
   in the service attributes are written by specifying the appropriate
   code in the message header.  For each language the Service advertises
   a separate registration takes place.  Each of these registrations
   uses the same URL to indicate that they refer to the same service.

   If a Service is fully deregistered (the URL is given in the Service
   Deregister request, without any attribute information) then the
   Service needs to be deregistered only once.  This will effectively
   deregister the service in all languages it has been registered in.

   If, on the other hand, attribute information is included in the
   Service Deregistration request, a separate Service Deregistration
   of selected attributes must be undertaken in each language in which
   service information has been provided to the DA by a Service Agent.




Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 41]

Internet Draft        Service Location Protocol         8 January 1997  


   Service Registrations in different languages are mutually
   unintelligible.  They share no information except for their service
   type and URL with which they were registered.  No attempt is made
   to match queries with "language independence." Instead, queries are
   handled using string matching against registrations in the same
   language as the query.

   Service Types which are standardized will have definitions for
   all attributes and value strings.  Official translations to other
   languages of the attribute tags and values may be created and
   submitted as part of the standard; this is not feasible for all
   languages.  For those languages which are not defined as part of the
   Service Type, a best effort translation of the standard definitions
   of the Service type's attribute strings MAY be used.

   All Service Requests specify a requested language in the message
   header.  The Directory Agent or Service Agent will respond in the
   same language as the request, if it has a registration in the same
   language as the request.  If this language is not supported, and the
   Monolingual bit is not specified, a reply can be sent in the default
   language (which is English.)  If the 'monolingual bit' flag in the
   header is set and the requested language is not supported, a SrvRply
   is returned with the error field set to LANGUAGE_NOT_SUPPORTED.

   If a query is in a supported language on a SA or DA, but has a
   different dialect than the available service information, the query
   MUST be serviced on a best-effort basis.  If possible, the query
   should be matched against the same dialect.  If that is not possible,
   it MAY be matched against any dialect of the same language.


17.1. Character Encoding and String Issues

   Values for character encoding can be found in the Internet Assigned
   Numbers Authority's (IANA) database
   (http://www.isi.edu/in-notes/iana/assignments/character-sets), and
   have the values referred by the MIBEnum value.

   The encoding will determine the interpretation of all character data
   which follows the Service Location Protocol header.  There is no way
   to mix ASCII and UNICODE, for example.  All responses must be in the
   character set of the request or use US-ASCII. If a request is sent
   to a DA or SA or a registration is sent to a DA, which is unable to
   manipulate or store the character set of the incoming message, the
   request will fail.  The SA or DA returns a CHARSET_NOT_UNDERSTOOD
   error in a SrvAck message in this case.  Requests using US-ASCII will
   never fail for this reason, since all SAs and DAs must be able to
   accept this character set.



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 42]

Internet Draft        Service Location Protocol         8 January 1997  


   Certain characters are illegal in certain contexts of the protocol.
   Since the protocol is largely character string based, in some
   contexts characters are used as protocol delimiters.  In these cases
   the delimiter characters must not be used as 'data text.'


17.1.1. Substitution of Character Escape Sequences

   The Service Location Protocol has an 'escape mechanism' which
   is consistent with HTTP 2.0 [6] and SGML [13].  If the character
   sequence "&#" is followed by one or more digits, followed by
   a semicolon ';' the entire sequence is interpreted as a single
   character.  The digits are interpreted as a decimal value in the
   character set of the request, as specified by the header.  Thus, in
   US-ASCII &#44; would be interpreted as a comma.  Substitution of
   these escape strings must be done in all <attr-list> and strings
   present in SrvReq and AttrRqst messages.  Only numerical character
   references are accepted, not 'Entity References,' as defined in HTML.
   These escape values should only be used to provide a mechanism for
   including reserved characters in attribute tag and value strings.

   The interpretation of these escape values is different than in
   HTML in one respect:  In HTML the escape values are considered to
   be in the ISO Latin-1 character set.  In Service Location they
   are interpreted in the character set defined in the header of the
   message.

   This escape mechanism allows characters like commas to be included in
   attribute tags and values, which would otherwise be illegal as the
   comma is a protocol delimiter.

   Attribute tags and values of different languages are considered to be
   mutually unintelligible.  A query in one language SHOULD use service
   information registered in that language.


17.2. Language Dialect

   Dialect tags are used in Service Location messages to indicate a
   variant of vocabulary used.  If one service is registered in more
   than one dialect, a DA or SA SHOULD return the one with the same
   dialect tag as in the query, but MAY choose to return any registered
   service that matches the criteria.

   Dialects (unlike languages) are assumed to be mutually intelligible,
   but may have variations in spelling.  Since string matching is used,
   it is advantageous in some cases to register service information in
   multiple dialects.



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 43]

Internet Draft        Service Location Protocol         8 January 1997  


   Dialect tags will be assigned as enumerated values to correspond to
   the official dialects registered with the IANA. There are as of this
   writing no enumerated dialect values; they will be created as needed.


17.3. Language-Independent Strings

   Some strings, such as Service Type names, have standard definitions.
   These strings should be considered as tokens and not as words in a
   language to be translated.

    Reserved String         Section Definition
    ---------------         ------- --------------------------------------
    SCOPE                   3, 15   Used to limit the matching of requests.
    SERVICE                 9, 6    The URL scheme of all Service Location
                                    information registered with a DA or
                                    returned from a Service Request.
    <srvtype>               20.2.1  Used in all service registrations
                                    and replies.
    domain names            20.4    A fully qualified domain name, used
                                    in registrations and replies.
    IANA                    3.3     The default naming authority.
    LOCAL                   16      Reserved.
    REMOTE                  16      Reserved.
    TRUE                    20.5    Boolean true.
    FALSE                   20.5    Boolean false.



18. Service Location Transactions

18.1. Service Location Connections

   When a Service Location Request or Attribute Request results in a
   UDP reply from a Service or Directory Agent that will overflow a
   datagram, the User Agent can open a connection to the Agent and
   reissue the request over the connection.  The reply will be returned
   with the overflow bit set (see section 4).  The reply will contain as
   much data as will fit into a single datagram.  If no MTU information
   is available for the route, assume that the MTU is 1400; this value
   is configurable (see section 22).

   When a request results in overflowed data that cannot be correctly
   parsed (say, because of duplicate or dropped IP datagrams), a
   User Agent that wishes to reliably obtain the overflowed data must
   establish a TCP connection with the Directory Agent or Service Agent
   with the data.  The request is sent again with a new XID. The reply
   is returned over the connection stream.



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 44]

Internet Draft        Service Location Protocol         8 January 1997  


   When registration data exceeds one datagram in length, the Service
   Registration should be made by establishing a connection with a
   Directory Agent and sending the registration over the connection
   stream.

   Directory Agents and Service Agents must respond to connection
   requests; services whose registration data can overflow a datagram
   must be able to use TCP to send the registration.  User Agents
   should be able to make Service and Attribute Requests using TCP. If
   they fail to implement this, they must be able to interpret partial
   replies and/or reissue requests with more selective criteria to
   reduce the size of the replies.

   A connection initiated by an Agent may be used for a single
   transaction.  It may also be used for multiple transactions.  Since
   there are length fields in the message headers, the Agents may send
   multiple requests along a connection and read the return stream for
   acknowledgments and replies.

   The initiating agent is responsible for closing the TCP connection.
   The DA should wait at least CONFIG_INTERVAL_12 before closing an idle
   connection.  DAs and SAs SHOULD eventually close idle connections
   to ensure robust operation, even when the agent which opened a
   connection neglects to close it.


18.2. No Synchronous Assumption

   There is no requirement that one transaction complete before a
   given host begins another.  An agent may have multiple outstanding
   transactions, initiated either using UDP or TCP.


18.3. Idempotency

   All Service Location actions are idempotent.  Of course registration
   and deregistration will change the state of a DA, but repeating these
   actions will have exactly the same effect each time.


19. Security Considerations

   The Service Location Protocol does not provide authentication,
   integrity or confidentiality.  Because the objective of this
   protocol is to advertise services to a community of users,
   confidentiality might not generally be needed when this protocol is
   used in non-sensitive environments.  Authentication and integrity




Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 45]

Internet Draft        Service Location Protocol         8 January 1997  


   are functionally equivalent in the context of this protocol.
   Authentication is generally needed with this protocol.

   An adversary can easily use this protocol to advertise services on
   servers controlled by the adversary and thereby gain access to users'
   private information.  Further, an adversary using this protocol
   will find it much easier to engage in selective denial of service
   attacks.  Sites that are in potentially hostile environments (e.g.
   are directly connected to the Internet) should consider the security
   risks of deploying this protocol prior to deploying it.

   The security risks in this protocol can be significantly reduced or
   eliminated by using the IP Authentication Header [5, 3] with all
   Service Location messages.  It is recommended that sites use the
   IP Authentication header with all Service Location messages.  For
   the security considerations listed above, it is recommended that
   all nodes which implement Service Location also implement the IP
   Authentication Header.

   Sites requiring confidentiality should implement the IP Encapsulating
   Security Payload (ESP) [4] to provide confidentiality for Service
   Location messages.

   Service Location is useful as a bootstrap protocol.  It may be
   used in environments in which no preconfiguration is possible.  In
   such situations, a certain amount of "blind faith" is required:
   Without any prior configuration it is impossible to use any of the
   security mechanisms described above.  Service Location will make
   use of the mechanisms provided by the Security Area of the IETF for
   key distribution as they become available.  At this point it would
   only be possible to deploy the IP Authentication Header if some
   certificate information can be preconfigured with the end systems
   before they use Service Location.


20. String Formats used with Service Location Messages

   The following section supplies formal definitions for fields and
   protocol elements introduced in the sections indicated.

      Protocol Element                      Defined in         Used in
      -----------------------------------   ------------     ------------
      <Previous Responders' Addr Spec>      20.1             SrvReq
      Service Request <predicate>           5.4              SrvReq
      URL                                   20.2             SrvReg,
                                                               SrvDereg,
                                                               SrvRply
      <attr-list>                           20.3             SrvReg,



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 46]

Internet Draft        Service Location Protocol         8 January 1997  


                                                               SrvRply,
                                                               AttrRply
      <Service Registration Information>    9                SrvReg
      <Service Deregister Information>      11               SrvDereg
      <Service Type String>                 20.2.1           AttrRqst



20.1. Previous Responders' Address Specification

   The previous responders' Address Specification is specified as

      <Previous Responders' Address Specification> ::=
             <addr-spec>, |
             <addr-spec>, <Previous Responders' Address Specification>

   i.e., a list separated and terminated by commas with no intervening
   white space.  The Address Specification is the address of the
   Directory Agent or Service Agent which supplied the previous
   response.  The format for Address Specifications in Service Location
   is defined in section 20.4.  The comma delimiter is required between
   each <addr-spec>.  The use of dotted decimal IP address notation
   should only be used in environments which have no Domain Name
   Service.

   Example:

         RESOLVO.NEATO.ORG,128.127.203.63


20.2. Formal Definition of the ``service:''  Scheme

   A URL with a ``service:''  scheme is used in the SrvReg, SrvDereg,
   SrvRply and AttrRqst messages in Service Location.  URLs are defined
   in RFC 1738 [7].  A URL with the ``service:''  scheme must contain at
   least:

   <url> ::= service:<srvtype>://<addr-spec>

   where:

      service       the URL scheme for Service Location, to return
                    Replies.

      <srvtype>     a string; Service Types may be standardized
                    by developing a specification for the "service
                    type"-specific part and registering it with IANA.
                    See sections 20.2.1 and 3.3.



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 47]

Internet Draft        Service Location Protocol         8 January 1997  


      <addr-spec>   the service access point of the service.  It is the
                    network address or domain name where the service can
                    be accessed.  See section 20.4.

   The ``service:''  scheme may be followed by any legal URL. The
   'minimal' service URL provides a service type and an access point for
   a particular service.  The protocol used to access the service at
   the given service access <addr-spec> may be implicit in the Service
   Type name.  If this is not the case, the Service Type MUST be defined
   in such a way that attribute information will include all necessary
   configuration and protocol information.  A User Agent MUST therefore
   be able to use either a ``service:''  URL alone or a ``service:''
   URL in conjunction with service attributes to make use of a service.


20.2.1. Service Type String

   The Service Type is a string describing the type of service.  These
   strings may only be comprised of 'a' through 'z', '+' and '-'.  Upper
   case is considered equivalent to lower case in Service Type names.

   If the Service Type name is followed by a '.'  and a string (which
   has the same limitations) the 'suffix' is considered to be the Naming
   Authority of the service.  If the Naming Authority is omitted, IANA
   is assumed to be the Naming Authority.

   Service Types developed for in-house or experimental use may have any
   name and attribute semantics provided that they do not conflict with
   the standardized Service Types.  The Service Type's Service specific
   Multicast Address used should taken from the range of experimental
   multicast addresses reserved by the IANA.


20.3. Attribute Information

   The <attr-list> is returned in the Attribute Reply if the Attribute
   Request does not result in an empty result.

   <attr-list> ::= <attribute> | <attribute>, <attr-list>
   <attribute> ::= (<attr-tag>=<attr-val-list>) | <keyword>
   <attr-val-list> ::= <attr-val> | <attr-val>, <attr-val-list>

   An <attr-list> must be scanned prior to evaluation for all
   occurrences of the string "&#" followed by one or more digit followed
   by ';'.  See Section 17.1 and specifically Section 17.1.1.

   A keyword has only an <attr-tag>, and no values.




Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 48]

Internet Draft        Service Location Protocol         8 January 1997  


   A comma cannot appear in an <attr-val>, as the comma is used as the
   multiple value delimiter.  Examples of an <attr-list> are:

         (SCOPE=ADMINISTRATION)
         (COLOR=RED, WHITE, BLUE)
         (DELAY=10 MINS),BUSY,(LATEST BUILD=10-5-95),(PRIORITY=L,M,H)

   The third example has three attributes in the list.  Color can take
   on the values red, white and blue.  There are several other examples
   of replies throughout the document.


20.4. Address Specification in Service Location

   The address specification used in Service Location is:

     <addr-spec> ::= [<user>:<password>@]<host>[:<port>]

     <host>      ::= Fully qualified domain name |
                     dotted decimal IP address notation

   It is preferable to use a fully qualified domain name wherever
   possible as renumbering of host addresses will make IP addresses
   invalid over time.

   When no Domain Name Server is available SAs and DAs must use dotted
   decimal conventions for IP addresses.

   Generally, just the host domain name (or address) is sufficient to
   return.  When there is a non-standard port for the protocol, that
   should be returned as well.  Some applications may make use of the
   <user>:<password>@ syntax, but its use is not encouraged in this
   context until mechanisms are established to maintain confidentiality.

   Address specification in Service Location is consistent with standard
   URL format [7].


20.5. Attribute Value encoding rules

   Attribute values, and attribute tags are CASE INSENSITIVE for
   purposes of lexical comparison.

   Attribute values can have be any string with the exception of '(',
   ')', '=', '>', '<', '/' and ',' (the comma) except in the case
   described below where opaque values are encoded.  These characters
   may be included using the character value escape mechanism described
   in section 17.1.



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 49]

Internet Draft        Service Location Protocol         8 January 1997  


   While an attribute can take any value, there are three types
   of values which differentiate themselves from general strings:
   Booleans, Integers and Opaque values.

    -  Boolean values are either "TRUE" or "FALSE".  This is the case
       regardless of the language (i.e.  in French or Telugu, Boolean
       TRUE is "TRUE", as well as in English.)  Boolean attributes can
       take only one value.

    -  Integer values are expressed as a sequence of numbers.  The range
       of allowable values, for this 32 bit quantity, is "-2147483648"
       to "2147483647".  Note:  No other form of numeric representation
       is interpreted as such, save integers.  For example, hexadecimal
       numbers such as "0x342" are not interpreted as integers, but as
       strings.

    -  Opaque values (i.e.  binary values) are expressed in radix-64
       notation.  The syntax is:

            <opaque-val>    ::=  (<len>:<radix-64-data>)
            <len>           ::=  number of bytes of the original data
            <radix-64-data> ::=  radix-64 encoding of the original data

       Radix-64 encodes every 3 bytes of binary data into 4 bytes of
       ASCII data which is in the range of characters which are fully
       printable and transferable by mail.  For a formal definition of
       the Radix-64 format see RFC 1521 [8], MIME Part One, Section 5.2
       Base64 Content Transfer Encoding, page 21.


21. Implementation Requirements

   A User Agent MAY:

    -  Provide a way for the application to configure the default DA, so
       that it can be used without needing to find it each initially.

    -  Be able to request the address of a DA from DHCP, if configured
       to do so.

    -  Ignore any unauthenticated Service Reply or Attribute Reply.

    -  Be able to issue requests in any language or character set
       provided that it can switch to the default language and character
       set if the request can not be serviced by DAs and SAs at the
       site.

   A User Agent SHOULD:



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 50]

Internet Draft        Service Location Protocol         8 January 1997  


    -  Use a Scope in all requests, if possible.

    -  Issue requests to scoped DAs if the UA has been configured with a
       scope.

    -  Listen on the Service Location General Multicast address for
       unsolicited DA Advertisements.  This will increase the set
       of Directory Agents available to it for making replies.  See
       Section 15.2.

   If the UA does not listen fro DA Advertisements, new DAs will not
   be passively detected.  A UA which does not have a configured DA
   and has not yet discovered one and is not listening for unsolicited
   DA Advertisements will remain ignorant of DAs.  It may then do
   a DA discovery before each query performed or it may simply use
   multicasted queries to Service Agents.

   A User Agent MUST:

    -  Be able to unicast requests and receive replies from a DA.
       Transactions should be made reliable by using retransmission
       of the request if the reply does not arrive within a timeout
       interval.

    -  Be able to detect DAs using a Directory Agent Discovery request
       issued when the UA starts up.

    -  Be able to send requests to a multicast address.  If the
       multicast address is not known, the UA must be able to use a
       Service Type query to obtain the multicast address for the
       Service Type of the request.

    -  Be able to handle numerous replies after a multicast request.
       The implementation may be configurable so it will either return
       the first reply, all replies until a timeout or keep trying till
       the results converge.

    -  Ignore any unauthenticated Service Reply or Attribute Reply when
       an appropriate IPSec Security Association for that Reply exists.

    -  Use the IP Authentication Header or IP Encapsulating Payload in
       all Service Location messages, whenever an appropriate IPSec
       Security Association exists.

    -  Be able to issue requests using the US-ASCII character set.

   A Service Agent MAY be able to:




Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 51]

Internet Draft        Service Location Protocol         8 January 1997  


    -  Get the address of a local Directory Agent by way of DHCP.

    -  Accept requests in non-US-ASCII character encodings.  This is
       encouraged, especially for UNICODE [1] and UTF-8 [17] encodings.

    -  Register services with a DA in non-US-ASCII character encodings.
       This is encouraged, especially for UNICODE [1] and UTF-8 [17]
       encodings.

   A Service Agent SHOULD be able to:

    -  Listen to the service-specific multicast address of the service
       it is advertising.  The incoming requests should be filtered:
       If the Address Specification of the SA is in the Previous
       Responders Address Specification list, the SA SHOULD NOT respond.
       Otherwise, a response to the multicast query SHOULD be unicast to
       the UA which sent the request.

    -  Listen for and respond to broadcast requests and TCP connection
       requests, to the Service Location port.

    -  Listen to the Service Location General Multicast address for
       queries (e.g., Service Type Requests).  If the query can be
       replied to by the Service Agent, the Service Agent must do
       so.  It MUST check first to make sure it is not on the list of
       'previous responders.'

   A Service Agent MUST be able to:

    -  Listen to the Service Location General Multicast address for
       unsolicited DA Advertisements.  If one is detected, and the DA
       has the right Scope, (or has no Scope), all services which are
       currently being advertised MUST be registered with the DA (unless
       configured to only use a single DA (see section 22.1), or the
       DA has already been detected, subject to certain rules (see
       section 15.2)).

    -  Unicast registrations and deregistrations to a DA. Transactions
       should be made reliable by using retransmission of the request if
       the reply does not arrive within a timeout interval.

    -  Be able to detect DAs using a Directory Agent Discovery request
       issued when the SA starts up (unless configured to only use a
       single DA, see section 22.1.)

    -  Use the IP Authentication Header or IP Encapsulating Payload in
       all Service Location messages, whenever an appropriate IPSec
       Security Association exists.



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 52]

Internet Draft        Service Location Protocol         8 January 1997  


    -  Be able to register service information with a DA using US-ASCII
       character encoding.  It must also be able to reply to requests
       from UAs which use US-ASCII character encoding.

    -  Reregister with a DA before the Lifetime of registered service
       information elapses.

   A Directory Agent MAY:

    -  Ignore any unauthenticated Service Registration or Service
       Deregistration.

    -  Accept registrations and requests in non-US-ASCII character
       encodings.  This is encouraged, especially for UNICODE [1] and
       UTF-8 [17] encodings.

   A Directory Agent MUST be able to:

    -  Send an unsolicited DA Advertisements to the Service Location
       General Multicast address on startup and repeat it periodically.
       This reply has an XID which is incremented by one each time.  If
       the DA starts with state, it initializes the XID to 0x0100.  If
       it starts up stateless, it initializes the XID to 0x0000.

    -  Listen on the Directory Agent Discovery Multicast Address for
       Directory agent discovery requests.  Filter these requests if the
       Previous Responder Address Specification list includes the DA's
       Address Specification.

    -  Listen for broadcast requests to the Service Location port.

    -  Listen on the TCP and UDP Service Location Ports for unicast
       requests, registrations and deregistrations and service them.

    -  Provide a way in which Scope information can be used to configure
       the Directory Agent.

    -  Age out the services which have been registered so that when
       the service registration's Lifetime expires, the service
       advertisement is withdrawn.

    -  When a Directory Agent has been configured with a Scope, it MUST
       refuse all requests and registrations which do not have this
       Scope.  The DA replies with a SCOPE_NOT_SUPPORTED error.  There
       is one exception:  All DAs MUST respond to DA discovery requests
       which have no Scope.





Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 53]

Internet Draft        Service Location Protocol         8 January 1997  


    -  When a Directory Agent has been configured without a Scope, it
       MUST accept ALL registrations and requests.

    -  Ignore any unauthenticated Service Location messages when an
       appropriate IPSec Security Association exists for that request.

    -  Use the IP Authentication and IP Encapsulating Security Payload
       in Service Location messages whenever an appropriate IPSec
       Security Association exists.

    -  Accept requests and registrations in US-ASCII.

   NOTE: Service Agents and User Agents use ephemeral ports for
   transmitting information to the service location port.


22. Configurable Parameters and Default Values

   There are several configuration parameters for Service Location.
   The protocol will work fine if only default values are used.  Due
   to the nature of the protocol, it may be deployed in many different
   environments.  The configuration options parameters will allow an
   implementation of Service Location to be useful in a variety of
   different scenarios.

      Multicast vs.  Broadcast
               All Service Location entities must use multicast by
               default.  The ability to use broadcast messages must
               be configurable.  Broadcast messages are to be used in
               environments where not all Service Location entities have
               hardware or software which supports multicast.

      Multicast Radius
               Multicast requests should be sent to all subnets in a
               site.  The default multicast radius for a site is 32.
               This value must be configurable.  The value for the
               site's multicast TTL may be obtained from DHCP. The DHCP
               option has not yet been assigned.

      Directory Agent Address
               The Directory Agent address discovery mechanism must be
               configurable.  There are three possibilities for this
               configuration:  A default address, no default address
               and the use of DHCP to locate a DA as described in
               section 15.2.  The default value should be "no default
               address." In this case the UA or SA must do a Directory
               Agent Discovery query.




Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 54]

Internet Draft        Service Location Protocol         8 January 1997  


      Directory Agent Scope Assignment
               The Scope or Scopes of a DA must be configurable.  The
               default value for a DA is to have no Scope if not
               otherwise configured.

      Default Path MTU
               The default path MTU is assumed to be 1400.  This value
               may be too large for the infrastructure of some sites.
               For this reason this value MUST be configurable for all
               SAs and DAs.

               If a UA issues a request which will result in a
               reply which is too large, the SA or DA will return an
               abbreviated response (in a datagram the size of the
               site's MTU) which has the 'Overflow' bit flag set.
               The UA must then issue the request again using a tcp
               connection.

               Similarly, if a SA attempts to register a service with a
               DA and the registration is larger than the site path MTU
               the DA will reply with a SrvAck, with the error set to
               INVALID_REGISTRATION and the 'Overflow' byte set.


22.1. Service Agent:  Use Predefined Directory Agent(s)

   A Service Agent's default configuration is to do passive and active
   DA discovery and to register with all DAs which are properly scoped.

   A Service Agent SHOULD be configurable to allow a special mode of
   operation:  They will use only preconfigured DAs.  This means they
   will *NOT* actively or passively detect DAs.

   If a Service Agent is configured this way, knowledge of the DA must
   come through another channel, either static configuration or by the
   use of DHCP.

   The availability of the Service information will not be consistent
   between DAs.  The mechanisms which achieve eventual consistency
   between DAs are ignored by the SA, so their service information will
   not be distributed.  This leaves the SA open to failure if the DA
   they are configured to use fails.









Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 55]

Internet Draft        Service Location Protocol         8 January 1997  


22.2. Time Out Intervals

   These values should be configurable in case the site deploying
   Service Location has special requirements (such as very slow links.)

   Interval name       Section Default Value Meaning
   -----------------   ------- ------------- -----------------------
   CONFIG_INTERVAL_0   4.1     1 minute      Cache replies by XID.
   CONFIG_INTERVAL_1   4.2     10800 seconds registration Lifetime,
                               (ie.  3 hours)after which ad expires
   CONFIG_INTERVAL_2   5       each second,  Retry multicast query
                               backing off   until no new values
                               gradually     arrive.
   CONFIG_INTERVAL_3   5       15 seconds    Max time to wait for a
                                             complete multicast query
                                             response (all values.)
   CONFIG_INTERVAL_4   9       3 seconds     Wait to register on
                                             reboot.
   CONFIG_INTERVAL_5   5.2     3 seconds     Retransmit DA discovery,
                                             try it 3 times.
   CONFIG_INTERVAL_6   5.2     5 seconds     Give up on requests sent
                                             to a DA.
   CONFIG_INTERVAL_7   5.2     15 seconds    Give up on DA discovery
   CONFIG_INTERVAL_8   5.1     15 seconds    Give up on requests
                                             sent to SAs.
   CONFIG_INTERVAL_9   15.2    3 hours       DA Heartbeat, so that SAs
                                             will
                                             passively detect new DAs.
   CONFIG_INTERVAL_10  15.2    1-3 seconds   Wait to register services
                                             on passive DA discovery.
   CONFIG_INTERVAL_11  9       1-3 seconds   Wait to register services
                                             on active DA discovery.
   CONFIG_INTERVAL_12  18.1    5 minutes     DAs and SAs close idle
                                             connections.


   A note on CONFIG_INTERVAL_9:  While it might seem advantageous to
   have frequent heartbeats, this poses a significant risk of generating
   a lot of overhead traffic.  This value should be kept high to prevent
   routine protocol operations from using any significant bandwidth.


23. Non-configurable Parameters

   IP Port number for unicast requests to Directory Agents:

         UDP and TCP Port Number:                          427




Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 56]

Internet Draft        Service Location Protocol         8 January 1997  


   Multicast Addresses

         Service Location General Multicast Address:       224.0.1.22
         Directory Agent Discovery Multicast Address:      224.0.1.35

   Further service-specific multicast address will be assigned for
   specific types of service through the IANA.

   Error Codes:

         No Error                   0
         LANGUAGE_NOT_SUPPORTED     1
         PROTOCOL_PARSE_ERROR       2
         INVALID_REGISTRATION       3
         SCOPE_NOT_SUPPORTED        4
         CHARSET_NOT_UNDERSTOOD     5
         AUHENTICATION_FAILED       6



24. Acknowledgments

   This protocol owes some of the original ideas to other service
   location protocols found in many other networking protocols.  Leo
   McLaughlin and Mike Ritter (Metricom) provided much input into early
   version of this document.  Thanks also to Steve Deering (Xerox) for
   providing his insight into distributed multicast protocols.  Harry
   Harjono and Charlie Perkins supplied the basis for the URL based
   wire protocol in their Resource Discovery Protocol.  Thanks also to
   Peerlogic, Inc.  for supporting this work.





















Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 57]

Internet Draft        Service Location Protocol         8 January 1997  


A. Appendix:  Technical contents of ISO 639:1988 (E/F): "Code for the
   representation of names of languages"

   Two-letter lower-case symbols are used.  The Registration Authority
   for ISO 639 [12] is Infoterm, Osterreiches Normungsinstitut (ON),
   Postfach 130, A-1021 Vienna, Austria.  Contains additions from ISO
   639/RA Newsletter No.1/1989

    aa Afar               ga Irish               mg Malagasy
    ab Abkhazian          gd Scots Gaelic        mi Maori
    af Afrikaans          gl Galician            mk Macedonian
    am Amharic            gn Guarani             ml Malayalam
    ar Arabic             gu Gujarati            mn Mongolian
    as Assamese                                  mo Moldavian
    ay Aymara             ha Hausa               mr Marathi
    az Azerbaijani        he Hebrew              ms Malay
                          hi Hindi               mt Maltese
    ba Bashkir            hr Croatian            my Burmese
    be Byelorussian       hu Hungarian
    bg Bulgarian          hy Armenian            na Nauru
    bh Bihari                                    ne Nepali
    bi Bislama            ia Interlingua         nl Dutch
    bn Bengali; Bangla    in Indonesian          no Norwegian
    bo Tibetan            ie Interlingue
    br Breton             ik Inupiak             oc Occitan
                          is Icelandic           om (Afan) Oromo
    ca Catalan            it Italian             or Oriya
    co Corsican           ja Japanese
    cs Czech              jw Javanese            pa Punjabi
    cy Welsh                                     pl Polish
                          ka Georgian            ps Pashto, Pushto
    da Danish             kk Kazakh              pt Portuguese
    de German             kl Greenlandic
    dz Bhutani            km Cambodian           qu Quechua
                          rw Kinyarwanda
    el Greek              kn Kannada             rm Rhaeto-Romance
    en English            ko Korean              rn Kirundi
    eo Esperanto          ks Kashmiri            ro Romanian
    es Spanish            ku Kurdish             ru Russian
    et Estonian           ky Kirghiz
    eu Basque
                          la Latin
    fa Persian            ln Lingala
    fi Finnish            lo Laothian
    fj Fiji               lt Lithuanian
    fo Faeroese           lv Latvian, Lettish
    fr French
    fy Frisian



Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 58]

Internet Draft        Service Location Protocol         8 January 1997  




    sa Sanskrit           ta Tamil               ug Uigar
    sd Sindhi             te Telugu              uk Ukrainian
    sg Sangro             tg Tajik               ur Urdu
    sh Serbo-Croatian     th Thai                uz Uzbek
    si Singhalese         ti Tigrinya
    sk Slovak             tk Turkmen             vi Vietnamese
    sl Slovenian          tl Tagalog             vo Volapuk
    sm Samoan             tn Setswana
    sn Shona              to Tonga               wo Wolof
    so Somali             tr Turkish
    sq Albanian           ts Tsonga              xh Xhosa
    sr Serbian            tt Tatar
    ss Siswati            tw Twi                 yi Yiddish
    st Sesotho                                   yo Yoruba
    su Sundanese
    sv Swedish                                   za Zhuang
    sw Swahili                                   zh Chinese
                                                 zu Zulu



B. Appendix:  For Further Reading

   Three related resource discovery protocols are NBP and ZIP
   which are part of the AppleTalk protocol family [11], the Legato
   Resource Administration Platform [18], and the Xerox Clearinghouse
   system [16].  Domain names and representation of addresses are
   used extensively in the Service Location Protocol.  The references
   for these are RFCs 1034 and 1035 [14, 15].  An example of service
   discovery protocol for a specific service is Router Discovery [9].



















Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 59]

Internet Draft        Service Location Protocol         8 January 1997  


References

    [1] Unicode Technical Report #4.  The unicode standard, version 1.1
        (volumes 1 and 2).  Technical Report (ISBN 0-201-56788-1) and
        (ISBN 0-201-60845-6), Unicode Consortium, 1994.

    [2] S. Alexander and R. Droms.  DHCP Options and BOOTP Vendor
        Extensions.  RFC 1533, October 1993.

    [3] R. Atkinson.  IP Authentication Header.  RFC 1826, August 1995.

    [4] R. Atkinson.  IP Encapsulating Security Payload.  RFC 1827,
        August 1995.

    [5] R. Atkinson.  Security Architecture for the Internet Protocol.
        RFC 1825, August 1995.

    [6] T. Berners-Lee and D. Connolly.  Hypertext Markup Language -
        2.0.  RFC 1866, November 1995.

    [7] T. Berners-Lee, L. Masinter, and M. McCahill.  Uniform Resource
        Locators (URL).  RFC 1738, December 1994.

    [8] N. Borenstein and N. Freed.  MIME (Multipurpose Internet Mail
        Extensions) Part One:  Mechanisms for Specifying and Describing
        the Format of Internet Message Bodies.  RFC 1521, September
        1993.

    [9] Stephen E. Deering, editor.  ICMP Router Discovery Messages.
        RFC 1256, September 1991.

   [10] Ralph Droms.  Dynamic Host Configuration Protocol.  RFC 1541,
        October 1993.

   [11] S. Gursharan, R. Andrews, and A. Oppenheimer.  Inside AppleTalk.
        Addison-Wesley, 1990.

   [12] Geneva ISO.  Code for the representation of names of languages.
        ISO 639:1988 (E/F), 1988.

   [13] Geneva ISO 8879.  Information Processing -- Text and Office
        Systems - Standard Generalized Markup Language (SGML).
        <URL:http://www.iso.ch/cate/d16387.html>, 1986.

   [14] P. Mockapetris.  Domain Names - Concepts and Facilities.  RFC
        1034, November 1987.





Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 60]

Internet Draft        Service Location Protocol         8 January 1997  


   [15] P. Mockapetris.  DOMAIN NAMES - IMPLEMENTATION AND
        SPECIFICATION.  RFC 1035, November 1987.

   [16] D. Oppen and Y. Dalal.  The clearinghouse:  A decentralized
        agent for locating named objects in a distributed environment.
        Technical Report Tech. Rep. OPD-78103, Xerox Office Products
        Division, 1981.

   [17] X/Open Preliminary Specification.  File System Safe UCS
        Transformation Format (FSS_UTF).  Technical Report Document
        Number:  P316, X/Open Company Ltd., 1994.

   [18] Legato Systems.  The Legato Resource Administration Platform.
        Legato Systems, 1991.





Authors' Addresses

   Questions about this memo can be directed to:

   John Veizades                       Erik Guttman
   @Home Network                       Sun Microsystems
   385 Ravendale Dr.                   Gaisbergstr. 6
   Mountain View, CA 94043             69115 Heidelberg Germany

   Phone: +1 415 944 7332              Phone: +49 6221 601649
   Fax:   +1 415 944 8500              Fax:   +49 6221 161019

   Email: veizades@home.com            Email: Erik.Guttman@eng.sun.com




   Charles Perkins                     Scott Kaplan
   IBM Corporation
   P.O. Box 704                        346 Fair Oaks St.
   Yorktown Heights NY 10598           San Francisco, CA 94110

   Phone: +1 914 784 7350              Phone: +1 415 285 4526
   Fax:   +1 914 784 6205

   EMail: perk@watson.ibm.com          Email: scott@catch22.com






Veizades,Guttman,Perkins,Kaplan      Expires 8 July 1997       [Page 61]

