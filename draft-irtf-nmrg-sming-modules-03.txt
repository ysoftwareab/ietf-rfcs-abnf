

Network Working Group                                         F. Strauss
Internet-Draft                                           TU Braunschweig
Expires: March 19, 2004                                 J. Schoenwaelder
                                         International University Bremen
                                                      September 19, 2003


                           SMIng Core Modules
                    draft-irtf-nmrg-sming-modules-03

Status of this Memo

   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC2026.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as
   Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at http://
   www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on March 19, 2004.

Copyright Notice

   Copyright (C) The Internet Society (2003).  All Rights Reserved.

Abstract

   This memo presents an SMIng module that introduces core data types
   such as counters, date and time related types, and various string
   types.










Strauss & Schoenwaelder    Expires March 19, 2004               [Page 1]

Internet-Draft               SMIng Modules                September 2003


Table of Contents

   1. Introduction . . . . . . . . . . . . . . . . . . . . . . . . .   3
   2. NMRG-SMING . . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3. Security Considerations  . . . . . . . . . . . . . . . . . . .  12
   4. Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . .  12
      Normative References . . . . . . . . . . . . . . . . . . . . .  13
      Informative References . . . . . . . . . . . . . . . . . . . .  13
      Authors' Addresses . . . . . . . . . . . . . . . . . . . . . .  13
      Intellectual Property and Copyright Statements . . . . . . . .  15









































Strauss & Schoenwaelder    Expires March 19, 2004               [Page 2]

Internet-Draft               SMIng Modules                September 2003


1. Introduction

   Most SMIng [SMIng] modules are built on top of some core definitions
   of commonly used data types.  These core type definitions are
   contained in the NMRG-SMING module which is contained in this memo.
   Its data types are generally applicable for modelling all areas of
   management information.  Among these types are counter types, string
   types and date and time related types.

   This module is derived from RFC 2578 [RFC2578] and RFC 2579
   [RFC2579].

2. NMRG-SMING

   module NMRG-SMING {

       organization    "IRTF Network Management Research Group (NMRG)";

       contact         "IRTF Network Management Research Group (NMRG)
                        http://www.ibr.cs.tu-bs.de/projects/nmrg/

                        Frank Strauss
                        TU Braunschweig
                        Muehlenpfordtstrasse 23
                        38106 Braunschweig
                        Germany
                        Phone: +49 531 391 3266
                        EMail: strauss@ibr.cs.tu-bs.de

                        Juergen Schoenwaelder
                        International University Bremen
                        P.O. Box 750 561
                        28725 Bremen
                        Germany
                        Phone: +49 421 200 3587
                        EMail: j.schoenwaelder@iu-bremen.de";

       description     "Core type definitions for SMIng. Several
                        type definitions are SMIng versions of
                        similar SMIv2 or SPPI definitions.

                        Copyright (C) The Internet Society (2003).
                        All Rights Reserved.
                        This version of this module is part of
                        RFC XXXX, see the RFC itself for full
                        legal notices.";

       revision {



Strauss & Schoenwaelder    Expires March 19, 2004               [Page 3]

Internet-Draft               SMIng Modules                September 2003


           date        "2003-09-19";
           description "Initial revision, published as RFC XXXX.";
       };

       typedef Gauge32 {
           type        Unsigned32;
           description
              "The Gauge32 type represents a non-negative integer,
               which may increase or decrease, but shall never
               exceed a maximum value, nor fall below a minimum
               value.  The maximum value can not be greater than
               2^32-1 (4294967295 decimal), and the minimum value
               can not be smaller than 0.  The value of a Gauge32
               has its maximum value whenever the information
               being modeled is greater than or equal to its
               maximum value, and has its minimum value whenever
               the information being modeled is smaller than or
               equal to its minimum value.  If the information
               being modeled subsequently decreases below
               (increases above) the maximum (minimum) value, the
               Gauge32 also decreases (increases).";
           reference
              "RFC 2578, Sections 2. and 7.1.7.";
       };

       typedef Counter32 {
           type        Unsigned32;
           description
              "The Counter32 type represents a non-negative integer
               which monotonically increases until it reaches a
               maximum value of 2^32-1 (4294967295 decimal), when it
               wraps around and starts increasing again from zero.

               Counters have no defined `initial' value, and thus, a
               single value of a Counter has (in general) no information
               content.  Discontinuities in the monotonically increasing
               value normally occur at re-initialization of the
               management system, and at other times as specified in the
               description of an attribute using this type.  If such
               other times can occur, for example, the creation of a
               class instance that contains an attribute of type
               Counter32 at times other than re-initialization, then a
               corresponding attribute should be defined, with an
               appropriate type, to indicate the last discontinuity.
               Examples of appropriate types include: TimeStamp32,
               TimeStamp64, DateAndTime, TimeTicks32 or TimeTicks64
               (other types defined in this module).




Strauss & Schoenwaelder    Expires March 19, 2004               [Page 4]

Internet-Draft               SMIng Modules                September 2003


               The value of the access statement for attributes with
               a type value of Counter32 should be either `readonly'
               or `eventonly'.

               A default statement should not be used for attributes
               with a type value of Counter32.";
           reference
              "RFC 2578, Sections 2. and 7.1.6.";
       };

       typedef Gauge64 {
           type        Unsigned64;
           description
              "The Gauge64 type represents a non-negative integer,
               which may increase or decrease, but shall never
               exceed a maximum value, nor fall below a minimum
               value.  The maximum value can not be greater than
               2^64-1 (18446744073709551615), and the minimum value
               can not be smaller than 0.  The value of a Gauge64
               has its maximum value whenever the information
               being modeled is greater than or equal to its
               maximum value, and has its minimum value whenever
               the information being modeled is smaller than or
               equal to its minimum value.  If the information
               being modeled subsequently decreases below
               (increases above) the maximum (minimum) value, the
               Gauge64 also decreases (increases).";
       };

       typedef Counter64 {
           type        Unsigned64;
           description
              "The Counter64 type represents a non-negative integer
               which monotonically increases until it reaches a
               maximum value of 2^64-1 (18446744073709551615), when
               it wraps around and starts increasing again from zero.

               Counters have no defined `initial' value, and thus, a
               single value of a Counter has (in general) no
               information content.  Discontinuities in the
               monotonically increasing value normally occur at
               re-initialization of the management system, and at
               other times as specified in the description of an
               attribute using this type.  If such other times can
               occur, for example, the creation of a class
               instance that contains an attribute of type Counter32
               at times other than re-initialization, then
               a corresponding attribute should be defined, with an



Strauss & Schoenwaelder    Expires March 19, 2004               [Page 5]

Internet-Draft               SMIng Modules                September 2003


               appropriate type, to indicate the last discontinuity.
               Examples of appropriate types include: TimeStamp32,
               TimeStamp64, DateAndTime, TimeTicks32 or TimeTicks64
               (other types defined in this module).

               The value of the access statement for attributes with
               a type value of Counter64 should be either `readonly'
               or `eventonly'.

               A default statement should not be used for attributes
               with a type value of Counter64.";
           reference
              "RFC 2578, Sections 2. and 7.1.10.";
       };

       typedef Opaque {
           type        OctetString;
           status      obsolete;
           description
              "******* THIS TYPE DEFINITION IS OBSOLETE *******

               The Opaque type is provided solely for
               backward-compatibility, and shall not be used for
               newly-defined attributes and derived types.

               The Opaque type supports the capability to pass
               arbitrary ASN.1 syntax.  A value is encoded using
               the ASN.1 Basic Encoding Rules into a string of
               octets.  This, in turn, is encoded as an
               OctetString, in effect `double-wrapping' the
               original ASN.1 value.

               Note that a conforming implementation need only be
               able to accept and recognize opaquely-encoded data.
               It need not be able to unwrap the data and then
               interpret its contents.

               A requirement on `standard' modules is that no
               attribute may have a type value of Opaque and no
               type may be derived from the Opaque type.";
           reference
              "RFC 2578, Sections 2. and 7.1.9.";
       };

       typedef IpAddress {
           type        OctetString (4);
           status      deprecated;
           description



Strauss & Schoenwaelder    Expires March 19, 2004               [Page 6]

Internet-Draft               SMIng Modules                September 2003


              "******* THIS TYPE DEFINITION IS DEPRECATED *******

               The IpAddress type represents a 32-bit Internet
               IPv4 address.  It is represented as an OctetString
               of length 4, in network byte-order.

               Note that the IpAddress type is present for
               historical reasons.";
           reference
              "RFC 2578, Sections 2. and 7.1.5.";
       };

       typedef TimeTicks32 {
           type        Unsigned32;
           description
              "The TimeTicks32 type represents a non-negative integer
               which represents the time, modulo 2^32 (4294967296
               decimal), in hundredths of a second between two epochs.
               When attributes are defined which use this type, the
               description of the attribute identifies both of the
               reference epochs.

               For example, the TimeStamp32 type (defined in this
               module) is based on the TimeTicks32 type.";
           reference
              "RFC 2578, Sections 2. and 7.1.8.";
       };

       typedef TimeTicks64 {
           type        Unsigned64;
           description
              "The TimeTicks64 type represents a non-negative integer
               which represents the time, modulo 2^64
               (18446744073709551616 decimal), in hundredths of a second
               between two epochs.  When attributes are defined which use
               this type, the description of the attribute identifies
               both of the reference epochs.

               For example, the TimeStamp64 type (defined in this
               module) is based on the TimeTicks64 type.";
       };

       typedef TimeStamp32 {
           type        TimeTicks32;
           description
              "The value of an associated TimeTicks32 attribute at
               which a specific occurrence happened.  The specific
               occurrence must be defined in the description of any



Strauss & Schoenwaelder    Expires March 19, 2004               [Page 7]

Internet-Draft               SMIng Modules                September 2003


               attribute defined using this type.  When the specific
               occurrence occurred prior to the last time the
               associated TimeTicks32 attribute was zero, then the
               TimeStamp32 value is zero.  Note that this requires all
               TimeStamp32 values to be reset to zero when the value of
               the associated TimeTicks32 attribute reaches 497+ days
               and wraps around to zero.

               The associated TimeTicks32 attribute should be specified
               in the description of any attribute using this type.
               If no TimeTicks32 attribute has been specified, the
               default scalar attribute sysUpTime is used.";
           reference
              "RFC 2579, Section 2.";
       };

       typedef TimeStamp64 {
           type        TimeTicks64;
           description
              "The value of an associated TimeTicks64 attribute at which
               a specific occurrence happened.  The specific occurrence
               must be defined in the description of any attribute
               defined using this type.  When the specific occurrence
               occurred prior to the last time the associated TimeTicks64
               attribute was zero, then the TimeStamp64 value is zero.
               The associated TimeTicks64 attribute must be specified in
               the description of any attribute using this
               type. TimeTicks32 attributes must not be used as
               associated attributes.";
       };

       typedef TimeInterval32 {
           type        Integer32 (0..2147483647);
           description
              "A period of time, measured in units of 0.01 seconds.

               The TimeInterval32 type uses Integer32 rather than
               Unsigned32 for compatibility with RFC 2579.";
           reference
              "RFC 2579, Section 2.";
       };

       typedef TimeInterval64 {
           type        Integer64;
           description
              "A period of time, measured in units of 0.01 seconds.
               Note that negative values are allowed.";
       };



Strauss & Schoenwaelder    Expires March 19, 2004               [Page 8]

Internet-Draft               SMIng Modules                September 2003


       typedef DateAndTime {
           type        OctetString (8 | 11);
           default     0x0000000000000000000000;
           format      "2d-1d-1d,1d:1d:1d.1d,1a1d:1d";
           description
              "A date-time specification.

               field  octets  contents                  range
               -----  ------  --------                  -----
                1      1-2   year*                     0..65535
                2       3    month                     1..12 | 0
                3       4    day                       1..31 | 0
                4       5    hour                      0..23
                5       6    minutes                   0..59
                6       7    seconds                   0..60
                             (use 60 for leap-second)
                7       8    deci-seconds              0..9
                8       9    direction from UTC        '+' / '-'
                9      10    hours from UTC*           0..13
               10      11    minutes from UTC          0..59

               * Notes:
               - the value of year is in big-endian encoding
               - daylight saving time in New Zealand is +13

               For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would
               be displayed as:

                            1992-5-26,13:30:15.0,-4:0

               Note that if only local time is known, then timezone
               information (fields 8-10) is not present.

               The two special values of 8 or 11 zero bytes denote an
               unknown date-time specification.";
           reference
              "RFC 2579, Section 2.";
       };

       typedef TruthValue {
           type        Enumeration (true(1), false(2));
           description
              "Represents a boolean value.";
           reference
              "RFC 2579, Section 2.";
       };

       typedef PhysAddress {



Strauss & Schoenwaelder    Expires March 19, 2004               [Page 9]

Internet-Draft               SMIng Modules                September 2003


           type        OctetString;
           format      "1x:";
           description
              "Represents media- or physical-level addresses.";
           reference
              "RFC 2579, Section 2.";
       };

       typedef MacAddress {
           type        OctetString (6);
           format      "1x:";
           description
              "Represents an IEEE 802 MAC address represented in the
               `canonical' order defined by IEEE 802.1a, i.e., as if it
               were transmitted least significant bit first, even though
               802.5 (in contrast to other 802.x protocols) requires MAC
               addresses to be transmitted most significant bit first.";
           reference
              "RFC 2579, Section 2.";
       };

       // The DisplayString definition below does not impose a size
       // restriction and is thus not the same as the DisplayString
       // definition in RFC 2579. The DisplayString255 definition is
       // provided for mapping purposes.

       typedef DisplayString {
           type        OctetString;
           format      "1a";
           description
              "Represents textual information taken from the NVT ASCII
               character set, as defined in pages 4, 10-11 of RFC 854.

               To summarize RFC 854, the NVT ASCII repertoire specifies:

                - the use of character codes 0-127 (decimal)

                - the graphics characters (32-126) are interpreted as
                  US ASCII

                - NUL, LF, CR, BEL, BS, HT, VT and FF have the special
                  meanings specified in RFC 854

                - the other 25 codes have no standard interpretation

                - the sequence 'CR LF' means newline

                - the sequence 'CR NUL' means carriage-return



Strauss & Schoenwaelder    Expires March 19, 2004              [Page 10]

Internet-Draft               SMIng Modules                September 2003


                - an 'LF' not preceded by a 'CR' means moving to the
                  same column on the next line.

                - the sequence 'CR x' for any x other than LF or NUL is
                  illegal.  (Note that this also means that a string may
                  end with either 'CR LF' or 'CR NUL', but not with CR.)
           ";
       };

       typedef DisplayString255 {
           type        DisplayString (0..255);
           description
              "A DisplayString with a maximum length of 255 characters.
               Any attribute defined using this syntax may not exceed 255
               characters in length.

               The DisplayString255 type has the same semantics as the
               DisplayString textual convention defined in RFC 2579.";
           reference
              "RFC 2579, Section 2.";
       };

       // The Utf8String and Utf8String255 definitions below facilitate
       // internationalization. The definition is consistent with the
       // definition of SnmpAdminString in RFC 2571.

       typedef Utf8String {
           type        OctetString;
           format      "65535t";      // is there a better way ?
           description
              "A human readable string represented using the ISO/IEC IS
               10646-1 character set, encoded as an octet string using
               the UTF-8 transformation format described in RFC 2279.

               Since additional code points are added by amendments to
               the 10646 standard from time to time, implementations must
               be prepared to encounter any code point from 0x00000000 to
               0x7fffffff.  Byte sequences that do not correspond to the
               valid UTF-8 encoding of a code point or are outside this
               range are prohibited.

               The use of control codes should be avoided. When it is
               necessary to represent a newline, the control code
               sequence CR LF should be used.

               The use of leading or trailing white space should be
               avoided.




Strauss & Schoenwaelder    Expires March 19, 2004              [Page 11]

Internet-Draft               SMIng Modules                September 2003


               For code points not directly supported by user interface
               hardware or software, an alternative means of entry and
               display, such as hexadecimal, may be provided.

               For information encoded in 7-bit US-ASCII, the UTF-8
               encoding is identical to the US-ASCII encoding.

               UTF-8 may require multiple bytes to represent a single
               character / code point; thus the length of a Utf8String in
               octets may be different from the number of characters
               encoded.  Similarly, size constraints refer to the number
               of encoded octets, not the number of characters
               represented by an encoding.";
       };

       typedef Utf8String255 {
           type        Utf8String (0..255);
           format      "255t";
           description
              "A Utf8String with a maximum length of 255 octets.  Note
               that the size of an Utf8String is measured in octets, not
               characters.";
       };



       identity null {
           description
              "An identity used to represent null pointer values.";
       };

   };



3. Security Considerations

   This module does not define any management objects.  Instead, it
   defines a set of SMIng types which may be used by other SMIng modules
   to define management objects.  These data definitions have no
   security impact on the Internet.

4. Acknowledgments

   Some definitions in this document are derived from RFC 2578 [RFC2578]
   and RFC 2579 [RFC2579], which were written by K.  McCloghrie, D.
   Perkins, J.  Schoenwaelder, J.  Case, M.  Rose, and S.  Waldbusser.




Strauss & Schoenwaelder    Expires March 19, 2004              [Page 12]

Internet-Draft               SMIng Modules                September 2003


Normative References

   [SMIng]  Strauss, F. and J. Schoenwaelder, "SMIng - Next Generation
            Structure of Management Information",
            draft-irtf-nmrg-sming-05.txt, September 2003.

Informative References

   [RFC854]   Postel, J. and J. Reynolds, "TELNET Protocol
              Specification", RFC 854, STD 8, May 1983.

   [RFC2279]  Yergeau, F., "UTF-8, a transformation format of ISO
              10646", RFC 2279, January 1998.

   [RFC2571]  Harrington, D., Presuhn, R. and B. Wijnen, "An
              Architecture for Describing SNMP Management Frameworks",
              RFC 2571, April 1999.

   [RFC2578]  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J.,
              Rose, M. and S. Waldbusser, "Structure of Management
              Information Version 2 (SMIv2)", RFC 2578, STD 59, April
              1999.

   [RFC2579]  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J.,
              Rose, M. and S. Waldbusser, "Textual Conventions for
              SMIv2", RFC 2579, STD 59, April 1999.


Authors' Addresses

   Frank Strauss
   TU Braunschweig
   Muehlenpfordtstrasse 23
   38106 Braunschweig
   Germany

   Phone: +49 531 391 3266
   EMail: strauss@ibr.cs.tu-bs.de
   URI:   http://www.ibr.cs.tu-bs.de/












Strauss & Schoenwaelder    Expires March 19, 2004              [Page 13]

Internet-Draft               SMIng Modules                September 2003


   Juergen Schoenwaelder
   International University Bremen
   P.O. Box 750 561
   28725 Bremen
   Germany

   Phone: +49 421 200 3587
   EMail: j.schoenwaelder@iu-bremen.de
   URI:   http://www.eecs.iu-bremen.de/










































Strauss & Schoenwaelder    Expires March 19, 2004              [Page 14]

Internet-Draft               SMIng Modules                September 2003


Intellectual Property Statement

   The IETF takes no position regarding the validity or scope of any
   intellectual property or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; neither does it represent that it
   has made any effort to identify any such rights.  Information on the
   IETF's procedures with respect to rights in standards-track and
   standards-related documentation can be found in BCP-11.  Copies of
   claims of rights made available for publication and any assurances of
   licenses to be made available, or the result of an attempt made to
   obtain a general license or permission for the use of such
   proprietary rights by implementors or users of this specification can
   be obtained from the IETF Secretariat.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights which may cover technology that may be required to practice
   this standard.  Please address the information to the IETF Executive
   Director.


Full Copyright Statement

   Copyright (C) The Internet Society (2003).  All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assignees.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION



Strauss & Schoenwaelder    Expires March 19, 2004              [Page 15]

Internet-Draft               SMIng Modules                September 2003


   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Acknowledgement

   Funding for the RFC Editor function is currently provided by the
   Internet Society.











































Strauss & Schoenwaelder    Expires March 19, 2004              [Page 16]

