IPv6_Header_co       =       Version
                                Traffic_Class_co
                                ECT_Flag_co
                                CE_Flag
                                Flow_Label_co
                                Payload_Length
                                Next_Header
                                Hop_Limit_co
                                Source_Address_co
                                Destination_Address_co

Version              =       VALUE(4,6,100%)

Traffic_Class        =       STATIC(100%)

ECT_Flag             =       STATIC(100%)

CE_Flag              =       VALUE(1,0,99%) | VALUE(1,1,1%)

Flow_Label           =       STATIC(100%)

Payload_Length       =       INFERRED-SIZE(16,288)

Next_Header          =       STACK-TO-CONTROL(8)

Hop_Limit            =       STATIC(100%)

Source_Address       =       STATIC(100%)

Destination_Address  =       STATIC(100%)

L = 8 * v + p


s  = the scale value

csrc_entry = IRREGULAR(32)


compression_stack = compressed_data.
enc = first-field (method_name)

method = first-method (enc)

compress_function = lookup-compress-function
                                        (extract-name (method))

can_compress = call compress_function
                                        (extract-name (method))

method = next-method (enc)

enc = next-field (method_name)

old_item = next-item (main_list_item)
last_N_before_item = tail-of (old_item.cum_N_list)

w = head-of (main_list_item.cum_N_list)
length = head-of (main_list_item.length_list)
found_length = 0

n_diff = w - last_N_before_item
w = next-item (w)
length = next-item (length)
found_length = 1
found_length = 0
fl = head-of (flag_list)

found_length = 1
fl = next-item (fl)
found_length = 0
ml = tail-of (main_list)

ml = previous-item (ml)
found_length = 1
ml = next-item (ml)
length_item = head-of (ml.length_list)
num = head-of (cum_N_list)
next_length = next-item (length_item)
found_length = 0

length_item = next-item (length_item)
next_length = next-item (next_length)
num = next-item (num)
found_length = 1
last_N_of_smaller_length = num

flags = Mvalue + fl.flags + last_N_before_item -
                        last_N_of_smaller_length

length = get-indicator-flags (method_chosen, flags, 0)

bit = bit_alignment

n = (bit - (stack-size (compressed_data) mod bit)) mod bit

temp = value (MSN) - value (lsb (MSN, msn_bits))
temp = temp / (2^msn_bits)
extra_bits = lsb (temp, n)

found_length = 0
fl = head-of (flag_list)

found_length = 1
fl = next-item (fl)
fl = previous=item (fl)
fl = tail-of (flag_list)
length = fl.length
flags = top (received_data, length*bit_chunks)

found_length = 0
ml = tail-of (main_list)

ml = previous-item (ml)
found_length = 1
ml = next-item (ml)
length_item = head-of (ml.length_list)
num = head-of (ml.cum_N_list)
next_length = next-item (length_item)
found_length = 0

length_item = next-item (length_item)
next_length = next-item (next_length)
num = next-item (num)
found_length = 1
last_N_of_smaller_length = num

Mvalue = flags - fl.flags

num = tail-of (ml.cum_N_list)

ml = previous-item (ml)
num = tail-of (ml.cum_N_list)
main_list_elt = ml
ml = next-item (ml)
last_N_before_item = tail-of (ml.cum_N_list)

Mvalue = Mvalue + last_N_of_smaller_length - last_N_before_item

len = length (flags)
n = get-header-length (method_chosen)

bit = bit_alignment
k = (bit - (n + len) mod bit) mod bit
size = stack-size (received_data)
enc = last-field (method_name)

method = get-method (method_chosen, enc)

decompress_function = lookup-decompress-function
                                        (extract-name (method))

enc = prev-field (method_name)

count = 0
last_item = tail-of (list)

last_item = item

count = count + 1

enc = first-field (method_name)

method = first-method (enc)

build_function = lookup-build-function (method)

method = next-method (enc)

enc = next-field (method_name)

u = head-of (main_list)
v = head-of (work_list) # which will be null

num_formats = size-of (main_list)

u_next = next-item (u)
v_next = next-item (v)

u = next-item (u_next)

v = next-item (v_next)

u = u_next
v = next-item (v)

v = head-of (work_list)

cumulative_N = 0
w = tail-of (main_list)

z = w
length = 0

length = length + 1

length = length + 1

length = length + 1

length = length - 1

length = length + 1
length = length + 1
z = z.parent

cumulative_N = cumulative_N + 1
found_same_length = 0
fl_elt = head-of (flag_list)

found_same_length = 1
w = previous-item (w)

fl_3 = head-of (flag_list)
fl_2 = next-item (fl_3)

fl_1 = next-item(fl_2)

fl_1 = next-item (fl_1)
fl_2 = next-item (fl_2)
fl_3 = next-item (fl_3)

temp_u = u
temp_v = v

flag = 0


temp_u = next-item (temp_u)

temp_v = next-item (temp_v)

flag = 0
flag = 1
flag = 2
flag = 3
flag = 2
n = length (context_val)

        # check that the value to be compressed matches each of the r
        # values stored in context for this encoding - if not then
        # STATIC can't be used to compress this encoding

enc_index = enc_index + 1
enc_index = enc_index + 1
enc_index = enc_index + 1
enc_index = enc_index + 1
temp = lsb (item, k)
enc_index = enc_index + 1
full = 0
full = full + value (temp)
item = str (n, full)
enc_index = enc_index + 1
enc_index = enc_index + 1
item = str (n, v)
enc_index = enc_index + 1
n = length (context_val)
p_item = str (n, p)
new_item = top (uncompressed_data, n)
temp = (new_item - context_val + p_item)
lsb_val = lsb (item, k)
enc_index = enc_index + 1
n = length (context_val)
p_item = str (n, p)
twok_item = str (n, 2^k)

interval_start = context_val - p
interval_end = interval_start + twok_item
new_item = concat (msb (interval_start, (n-k)), recd)

start = value (interval_start)
end = value (interval_end)
new = value (new_item)

new_item = concat (msb (interval_end, (n-k)), recd)

enc_index = enc_index + 1
scale_len = floor( value((top(control_data)) / d) * m + p)
scale_len = floor( (value (len_item) / d) * m + p)
temp = str (n, value (MSN) mod 2^n)
temp = str (n, value (MSN) mod 2^n)

temp = str (n, value (MSN) mod 2^n)
found = 0
i = 0

trans_item = str (n, a(i))
found = 1
i = i + 1
found = 0
i = 0

found = 1
i = i + 1
size = (stack-size (uncompressed_data) + n - p) / bits_in_byte)
offset = item - base
item = offset + base
compress_function = lookup-compress-function
                              (extract-name (new_method))

can_compress = call compress_function
                              (extract-name (new_method))

init_len = stack-size (uncompressed_data)
decompress_function = lookup-decompress-function
                                (extract-name (new_method))

final_len = stack-size (uncompressed_data)

decomp_len = final_len - init_len
ip_sum = compute-16-checksum (uncompressed_data, decomp_len)

build_function = lookup-build-function
                                (extract-name (new_method))

swapped = byte-swap (original)
enc_index = enc_index + 1
original = decomped
original = byte-swap (decomped)
enc_index = enc_index + 1
scaled_val = value (original) / scale_f
remainder = value (original) mod scale_f

enc_index = enc_index + 1
original = ((scaled_val * scale_f) + remainder) mod 2^n
enc_index = enc_index + 1
compress_function = lookup-compress-function
                                (extract-name (new_method))

can_compress = call compress_function
                                (extract-name (new_method))
n = count-bits (new_method, enc)
can_compress = 1
decompress_function = lookup-decompress-function
                                (extract-name (new_method))

n = count-bits (new_method, enc)
build_function = lookup-build-function
                                (extract-name (new_method))

compress_function = lookup-compress-function
                                (extract-name (new_method))

can_compress = call compress_function
                                (extract-name (new_method))
decompress_function = lookup-decompress-function
                                (extract-name (new_method))

build_function = lookup-build-function
                                (extract-name (new_method))

n = ceiling (log2(k-1))
m = context-size (new_method)
enc_index = enc_index + j * m
compress_function = lookup-compress-function
                                (extract-name (new_method))

can_compress = call compress_function
                                (extract-name (new_method))
enc_index = enc_index + (k - j - 1) * m
n = ceiling (log2(k-1))
j = value (index)

m = context-size (new_method)
enc_index = enc_index + j * m
decompress_function = lookup-decompress-function
                                (extract-name (new_method))

enc_index = enc_index + (k - j - 1) * m
build_function = lookup-build-function (new_method)

scale_len = floor( value(unc_length) / d) * m + p)

order = 0
bits = ceiling (log2(k-1))
i = 0
list_start_enc_index = enc_index

stack_len = stack-size (uncompressed_data)
can_compress = false
i = 0

order = order * 2^bits + i
enc_index = enc_index + context-size (new_methods(x))
compress_function = lookup-compress-function
                                (extract-name (new_method(i)))

can_compress = call compress_function
                                (extract-name (new_method(i)))
comp_len = stack_len - stack-size (uncompressed_data)
scale_len = scale_len - comp_len
enc_index = list_start_enc_index
i = i + 1
enc_index = enc_index + context-size (new_methods(x))
order = order * 2^bits + i
compress_function = lookup-compress-function
                                (extract-name (new_method(i)))

can_compress = call compress_function
                                (extract-name (new_method(i)))
enc_index = list_start_enc_index

presence = 0
presence = presence * 2 + value (present[i])
bits = ceiling (log2(k-1))
list_start_enc_index = enc_index

presence = value (presence_item)
order = value (order_item)

presence = (presence - value (present [(k - 1) - i])) / 2
i = value (lsb (order, bits))
order = (order û i )/ 2^bits

old_len = stack-size (uncompressed_data)
enc_index = enc_index + context-size (new_methods(x))
decompress_function = lookup-decompress-function
                                (extract-name (new_method(i)))

enc_index = list_start_enc_index
uncomp_len = uncomp_len +
                           (stack-size (uncompressed_data) - old_len)
original_len = ((uncomp_len - p) * d) / m
build_function = lookup-build-function (
                                extract-name (new_method(i)))
order = 0
bits = ceiling (log2(k-1))
i = 0
null = str (0, 0)

can_compress = false
i = 0

order = order * 2^bits + i
p = stack-pointer (control_data)
compress_function = lookup-compress-function
                                 (extract-name (new_method(i)))

can_compress = call compress_function
                                 (extract-name (new_method(i)))
v = null
i = i + 1
order = order * 2^bits + i
compress_function = lookup-compress-function
                                (extract-name (new_method(i)))

can_compress = call compress_function
                                (extract-name (new_method(i)))
presence = 0
presence = presence * 2 + value (present[i])
temp = enc_index
compress_function = lookup-compress-function
                                (extract-name (new_method))

can_compress = call compress_function
                                (extract-name (new_method))


temp = enc_index
decompress_function = lookup-decompress-function
                                (extract-name (new_method))

build_function = lookup-build-function (method)

compression_stack = unc_fields
u_flag = u_flag + 1
compress_function = lookup-compress-function
                                (extract-name (new_method))

can_compress = call compress_function
                                (extract-name (new_method))

u_flag = u_flag - 1
compression_stack = compressed_data
compression_stack = unc_fields
u_flag = u_flag + 1
decompress_function = lookup-decompress-function
                                (extract-name (new_method))

u_flag = u_flag - 1
compression_stack = compressed_data
build_function = lookup-build-function (method)

n = ceiling(log2(k-1))

compress_function = lookup-compress-function (
                              extract-name(new_method(index_val)))

can_compress = call compress_function (
                              extract-name (new_method(index_val)))
current_set = current_set * k + index_val
n = ceiling(log2(k-1))
current_set = current_set * k + value (index)
decompress_function = lookup-decompress-function (
                        extract-name (new_method(value (index))))

j = current_set mod k


current_set = current_set / k
build_function = lookup-build-function (
                                extract-name (new_method(j)))
build_function = lookup-build-function (
                                extract-name (new_method(i)))
crc_function = lookup-crc-function (n)
n = length (context_val)
p_item = str (n, p)

temp = MSN - context_val + p_item
lsb_val = lsb (MSN, k)
enc_index = enc_index + 1
msn_bits = k
n = length (context_val)
p_item = str (n, p)
twok_item = str (n, 2^k)
twok_extra = str (n, 2^(k + length (msn_lsbs)))

recd = concat (msn_lsbs, temp)

interval_start = context_val - p_item
interval_end = interval_start + twok_extra
new_item = concat (msb (interval_start, (n-k-length (msn_lsbs))),
                          recd)

start = value (interval_start)
end = value (interval_end)
new = value (new_item)

new_item = concat (msb (interval_end, (n-k-length (msn_lsbs))),
                          recd)
MSN = new_item
enc_index = enc_index + 1
enc_index = enc_index + 1
msn_bits = n
enc_index = enc_index + 1
MSN = item
