structure ===
uncompressed_format = field_1,
                             field_2,
                                  :
                                  :
                             field_n;

compressed_format_0 = field_a,
                                  :
                                  :
                             field_b
compressed_format_1 = field_c,
                                  :
                                  :
                             field_d
compressed_format_n = field_y,
                                  :
                                  :
                             field_z
ipv4_header           ===
uncompressed_format   =   version        , % [  4 ]
                                 header_length  , % [  4 ]
                                 tos            , % [  6 ]
                                 ecn            , % [  2 ]
                                 length         , % [ 16 ]
                                 id             , % [ 16 ]
                                 reserved       , % [  1 ]
                                 dont_frag      , % [  1 ]
                                 more_fragments , % [  1 ]
                                 offset         , % [ 13 ]
                                 ttl            , % [  8 ]
                                 protocol       , % [  8 ]
                                 checksum       , % [ 16 ]
                                 src_addr       , % [ 32 ]
                                 dest_addr      ; % [ 32 ]

compressed_format =  src_addr       , % [ 32 ]
                            dest_addr      , % [ 32 ]
                            length         , % [ 16 ]
                            id             , % [ 16 ]
                            ttl            , % [  8 ]
                            protocol       , % [  8 ]
                            tos            , % [  6 ]
                            ecn            , % [  2 ]
                            dont_frag        % [  1 ]
SOME_CONSTANT = 3;

x == y
            Returns true if x is equal to y.  Returns false otherwise.

field == null

uncompressed_format   =   discriminator,    % [  8 ] bits
                               tcp.seq_number,   % [ 32 ] bits
                               tcp.flags.ecn,    % [  2 ] bits


uncompressed_format   =   discriminator,    /*   8 bits */
                               tcp.seq_number,   /*  32 bits */
                               tcp.flags.ecn,    /*   2 bits */

offset_param = 0 then the field value can only stay the same or
offset_param = -1 then it can only increase, whereas if offset_param
bit_pattern = 0xe0
bit_pattern = 0x79
bit_pattern = 0x06

compound_encoding_method ===
uncompressed_format   =   field_1, %  [  4 ]
                                 field_2; %  [ 12 ]

compressed_format  =   field_2,    %  [  0 ],
                              field_1     %  [  4 ]
compound_encoding_method ===
uncompressed_format   =   field_1  % [  4 ],
                                 field_2  % [ 12 ];

compressed_format  =   field_1     % [  4 ]
uncompressed_format   =   constant_bits,
                                 variable_bits;

compressed_format  =   variable_bits
default_methods =
test_multiple_formats  ===
uncompressed_format   =   field_1,    % [  4 ]
                                 field_2,    % [  4 ]
                                 field_3;    % [ 24 ]

default_methods =
compressed_format_0   =   discriminator,    % [ 1 ]
                                 field_3           % [ 4 ]
compressed_format_1   =   discriminator,    % [  1 ]
                                 field_1,          % [  4 ]
                                 field_3           % [ 24 ]
uncompressed_format_end = field_1;       %   [ 32 ] bits

uncompressed_format_mid = field_1,       %   [ 32 ] bits
                                 tail;          %   [ num_bytes - 32 ] bits


compressed_format_end_of_list = field_1  %   [ 32 ] bits
compressed_format_mid_list = field_1,    %   [ 32 ] bits
                                    tail        %   [ num_bytes - 32 ] bits
uncompressed_format = field;

compressed_format_irregular = discriminator,  %  [ 1 ] bits
                                     field           %  [ length ] bits
compressed_format_static = discriminator,     %  [ 1 ] bits
                                  field              %  [ 0 ] bits
uncompressed_format = type,
                             length,
                             timestamp_value,
                             timestamp_echo_reply;

default_methods =
compressed_format_first = timestamp_value,
                                 timestamp_echo_reply
compressed_format_subsequent = timestamp_value,
                                      timestamp_echo_reply
uncompressed_format = ;

compressed_format = encoding_type           [  2 ],   % ET
                         generation_id_present   [  1 ],   % GP
                         xi_field_size           [  1 ],   % PS
                         list_item_count         [  4 ]    % CC
uncompressed_format = ;

compressed_format_4_bit_field = xi_field_size
xi_field_size = '0';
compressed_format_8_bit_field = xi_field_size
xi_field_size = '1';
uncompressed_format = ;

default_methods =
compressed_format_mid = xi_1 [ xi_size_param ],
                             xi_2 [ xi_size_param ],
                             tail [ (xi_count_param - 2) * xi_size_param ];
compressed_format_even_end = xi_1 [ xi_size_param ],
                                  xi_2 [ xi_size_param ];
compressed_format_odd_end = xi_1 [ xi_size_param ],
                                 pad  [ 8 - xi_size_param ];
uncompressed_format = ;
compressed_format_new = new,
                             table_index
compressed_format_old = new,
                             table_index
default_methods =
compressed_format_list_end =
compressed_format_sentinel = item, tail
compressed_format_pad = item, tail
compressed_fomat_type_1  = item, tail
compressed_fomat_type_2 = item, tail
compressed_fomat_type_n = item_, tail
a = %x61

b = %x62

c = %x63

d = %x64

e = %x65

f = %x66

g = %x67

h = %x68

i = %x69

j = %x6a

k = %x6b

l = %x6c
m = %x6d

n = %x6e

o = %x6f

p = %x70

q = %x71

r = %x72

s = %x73

t = %x74

u = %x75

v = %x76

w = %x77

x = %x78

y = %x79

z = %x7a

lower-case-letter = %x61-7a ; a-z

upper-case-letter = %x41-5a ; A-Z

binary-digit = "0" / "1"

octal-digit = binary-digit / "2" / "3" / "4" / "5" / "6" / "7"

decimal-digit = octal-digit / "8" / "9"

hexadecimal-digit = decimal-digit / %x61-66

open-bracket = "("

close-bracket = ")"

open-brace = "{"

close-brace = "}"
equals-sign = "="

underscore = "_"

comma = ","

semi-colon = ";"

single-quote = "'"

decimal-literal = 1*decimal-digit

binary-literal = "0".b 1*binary-digit

octal-literal = "0".o 1*octal-digit

hexadecimal-literal = "0".x 1*hexadecimal-digit

numeric-literal = decimal-literal / binary-literal / octal-literal /
lower-case-identifier = (lower-case-letter *(lower-case-letter /
upper-case-identifier = upper-case-letter *(upper-case-letter /
exponential-operator = "^"

multiplicative-operator = "*" / "/"

additive-operator = "+" / "-"

unary-minus = "-"

parenthesised-expression = open-bracket arithmetic-expression
primitive-expression = numeric-literal / constant-name /
exponential-expression = primitive-expression *(exponential-operator
multiplicative-expression = exponential-expression
additive-expression = multiplicative-expression *(additive-operator
arithmetic-expression = additive-expression

constant-name = upper-case-identifier

constant-value = constant-name / expression

constant-definition = constant-name equals-sign constant-value

field-name = lower-case-identifier

annotated-field-name = field-name [ "[" constant "]" ]

attribute-category = (c.o.m.p) / (u.n.c.o.m.p)

attribute-name = (l.e.n.g.t.h) / (v.a.l.u.e) /
attribute-identifier = attribute-category underscore attribute-name

field-attribute = field-name ":" attribute-identifier

primitive-encoding-method-name =
uncompressed-value-shorthand = single-quote *binary-digit
external-encoding-method-name = underscore lower-case-identifier

non-primitive-encoding-method-name = structure-name /
encoding-method-parameter-list = open-bracket arithmetic-expression
encoding-method = uncompressed-value-shorthand /
field-encoding = field-name "::=" encoding-method

structure-name = lower-case-identifier

field-order-list = [ annotated-field-name *(comma
field-encodings-list = open-brace *(field-encoding semi-colon)
uncompressed-format-prefix =
uncompressed-format = uncompressed-format-prefix [underscore
compressed-format-prefix =
compressed-format = compressed-format-prefix [underscore
default-methods = default-methods-id equals-sign field-encodings-list
uncompressed-format-list = *uncompressed-format

compressed-format-list = 1*compressed-format

structure-body = open-brace uncompressed-format-list
structure-definition = structure-name "===" structure-body semi-colon

struct-reserved-words = uncompressed-format-prefix /
eg_header ===
uncompressed_format   =   version_no     [ 2 ],
                               type           [ 2 ],
                               flow_id        [ 4 ],
                               sequence_no    [ 4 ],
                               flag_bits      [ 4 ];

compressed_format     =   version_no     [ 2 ],
                               type           [ 2 ],
                               flow_id        [ 4 ],
                               sequence_no    [ 4 ],
                               flag_bits      [ 4 ]
eg_header ===
uncompressed_format   =   version_no     [ 2 ],
                               type           [ 2 ],
                               flow_id        [ 4 ],
                               sequence_no    [ 4 ],
                               abc_flag_bits  [ 3 ],
                               reserved_flag  [ 1 ];

compressed_format     =   version_no     [ 0 ],
                               type           [ 2 ],
                               flow_id        [ 4 ],
                               sequence_no    [ 4 ],
                               abc_flag_bits  [ 3 ],
                               reserved_flag  [ 0 ]
eg_header  ===
uncompressed_format   =   version_no     [ 2 ],
                               type           [ 2 ],
                               flow_id        [ 4 ],
                               sequence_no    [ 4 ],
                               abc_flag_bits  [ 3 ],
                               reserved_flag  [ 1 ];

compressed_format     =   type           [ 2 ],
                               abc_flag_bits  [ 3 ]
eg_header  ===
uncompressed_data     =   version_no     [ 2 ],
                               type           [ 2 ],
                               flow_id        [ 4 ],
                               sequence_no    [ 4 ],
                               abc_flag_bits  [ 3 ],
                               reserved_flag  [ 1 ];

compressed_format_0   =   discriminator      [ 1 ],
                               type               [ 2 ],
                               flow_id            [ 4 ],
                               sequence_no        [ 4 ],
                               abc_flag_bits      [ 3 ]
compressed_format_1   =   discriminator        [ 1 ],
                               type                 [ 2 ],
                               sequence_no          [ 1 ]
eg_header  ===
uncompressed_data     =   version_no     [ 2 ],
                               type           [ 2 ],
                               flow_id        [ 4 ],
                               sequence_no    [ 4 ],
                               abc_flag_bits  [ 3 ],
                               reserved_flag  [ 1 ];

compressed_format_0   =   discriminator      [ 2 ],
                               type               [ 2 ],
                               flow_id            [ 4 ],
                               sequence_no        [ 4 ],
                               abc_flag_bits      [ 3 ]
compressed_format_1   =   discriminator      [ 2 ],
                               type               [ 2 ],
                               sequence_no        [ 1 ]
compressed_format_2   =   discriminator      [ 1 ],
                               type               [ 2 ],
                               sequence_no        [ 1 ]
eg_header  ===
uncompressed_data     =   version_no     [ 2 ],
                               type           [ 2 ],
                               flow_id        [ 4 ],
                               sequence_no    [ 4 ],
                               abc_flag_bits  [ 3 ],
                               reserved_flag  [ 1 ];

default_methods       =
compressed_format_0   =   discriminator      [ 2 ],
                               type               [ 2 ],
                               flow_id            [ 4 ],
                               sequence_no        [ 4 ],
                               abc_flag_bits      [ 3 ]
compressed_format_1   =   discriminator      [ 2 ],
                               type               [ 2 ],
                               sequence_no        [ 1 ]
compressed_format_2   =   discriminator      [ 1 ],
                               type               [ 2 ],
                               sequence_no        [ 1 ]
