handshake_count = 0
tlp_count = 0
rto_count = 0
reordering_threshold = infinite
time_reordering_fraction = kTimeReorderingFraction
reordering_threshold = kReorderingThreshold
time_reordering_fraction = infinite
loss_time = 0
smoothed_rtt = 0
rttvar = 0
initial_rtt = kDefaultInitialRtt

rtt_sample = now - sent_packets[ack.largest_acked].time
smoothed_rtt = rtt_sample
rttvar = rtt_sample / 2
rttvar = 3/4 * rttvar + 1/4 * (smoothed_rtt - rtt_sample)
smoothed_rtt = 7/8 * smoothed_rtt + 1/8 * rtt_sample

handshake_count = 0
tlp_count = 0
rto_count = 0
alarm_duration = 2 * initial_rtt
alarm_duration = 2 * smoothed_rtt
alarm_duration = max(alarm_duration, kMinTLPTimeout)
alarm_duration = alarm_duration << handshake_count
alarm_duration = loss_time - now
alarm_duration = 1.5 * smoothed_rtt + kDelayedAckTimeout
alarm_duration = kMinTLPTimeout
alarm_duration = max(alarm_duration, 2 * smoothed_rtt)
alarm_duration = smoothed_rtt + 4 * rttvar
alarm_duration = max(alarm_duration, kMinRTOTimeout)
alarm_duration = loss_detection_alarm.get_delay() << 1

loss_time = 0
lost_packets = {}
delay_until_lost = infinite;
delay_until_lost =
         (1 + time_reordering_fraction) * max(latest_rtt, smoothed_rtt)
delay_until_lost = 9/8 * max(latest_rtt, smoothed_rtt)
time_since_sent = now() - unacked.time_sent
packet_delta = largest_acked.packet_number - unacked.packet_number
loss_time = delay_until_lost - time_since_sent

