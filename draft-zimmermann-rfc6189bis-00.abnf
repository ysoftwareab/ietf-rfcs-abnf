a=zrtp-hash defined in Section 8 SHOULD be used in all offers and
rs1IDr = MAC(rs1, "Responder")

rs2IDr = MAC(rs2, "Responder")

auxsecretIDr = MAC(auxsecret, Responder's H3)

pbxsecretIDr = MAC(pbxsecret, "Responder")

rs1IDi = MAC(rs1, "Initiator")

rs2IDi = MAC(rs2, "Initiator")

auxsecretIDi = MAC(auxsecret, Initiator's H3)

pbxsecretIDi = MAC(pbxsecret, "Initiator")

pvi = g^svi mod p

hvi = hash(initiator's DHPart2 message ||
                           responder's Hello message)

pvr = g^svr mod p

DHResult = pvi^svr mod p

DHResult = pvr^svi mod p

total_hash = hash(Hello of responder || Commit || DHPart1 ||
                           DHPart2)

s0 = hash(counter || DHResult || "ZRTP-HMAC-KDF" || ZIDi ||
                ZIDr || total_hash || len(s1) || s1 || len(s2) ||
                s2 || len(s3) || s3)

KDF_Context = (ZIDi || ZIDr || total_hash)

preshared_key = hash(len(rs1) || rs1 || len(auxsecret) ||
                              auxsecret || len(pbxsecret) || pbxsecret)

total_hash = hash(Hello of responder || Commit)
KDF_Context = (ZIDi || ZIDr || total_hash)

s0 = KDF(preshared_key, "ZRTP PSK", KDF_Context,
                   negotiated hash length)

total_hash = hash(Hello of responder || Commit)

KDF_Context = (ZIDi || ZIDr || total_hash)

s0 = KDF(ZRTPSess, "ZRTP MSK", KDF_Context,
                             negotiated hash length)

ZRTPSess = KDF(s0, "ZRTP Session Key", KDF_Context,
                       negotiated hash length)

sashash = KDF(s0, "SAS", KDF_Context, 256)

sasvalue = sashash [truncated to leftmost 32 bits]

ExportedKey = KDF(s0, "Exported key", KDF_Context,
                           negotiated hash length)

srtpkeyi = KDF(s0, "Initiator SRTP master key", KDF_Context,
                      negotiated AES key length)

srtpsalti = KDF(s0, "Initiator SRTP master salt", KDF_Context, 112)

srtpkeyr = KDF(s0, "Responder SRTP master key", KDF_Context,
                      negotiated AES key length)

srtpsaltr = KDF(s0, "Responder SRTP master salt", KDF_Context, 112)

mackeyi = KDF(s0, "Initiator HMAC key", KDF_Context,
                      negotiated hash length)

mackeyr = KDF(s0, "Responder HMAC key", KDF_Context,
                      negotiated hash length)

zrtpkeyi = KDF(s0, "Initiator ZRTP key", KDF_Context,
                      negotiated AES key length)

zrtpkeyr = KDF(s0, "Responder ZRTP key", KDF_Context,
                      negotiated AES key length)

flagoctet =  (E * 2^3) + (V * 2^2) + (A * 2^1) + (D * 2^0)

confirm_mac = MAC(mackeyr, encrypted part of Confirm1)

confirm_mac = MAC(mackeyi, encrypted part of Confirm2)

rs1 = KDF(s0, "retained secret", KDF_Context, 256)

clear_mac = MAC(mackeyi, "GoClear ")

clear_mac = MAC(mackeyr, "GoClear ")

ZRTPSess = KDF(ZRTPSess, "New ZRTP Session", (ZIDi || ZIDr),
                       negotiated hash length)

EndpointHash = hash(ZID || SIP URI of the endpoint)

EndpointHash = hash(ZID || PBX extension number of the endpoint)

EndpointHash = hash(ZID || local IP address of the endpoint)

pbxsecret = KDF(ZRTPSess, "Trusted MiTM key", (ZIDi || ZIDr), 256)

a=zrtp-hash attribute are both used in parallel, the media can
a=zrtp-hash attributes in their SDP.

zrtp-attribute   = "a=zrtp-hash:" zrtp-version zrtp-hash-value

zrtp-version     = token

zrtp-hash-value  = 1*(HEXDIG)

v=0
o=bob 2890844527 2890844527 IN IP4 client.biloxi.example.com
s=
c=IN IP4 client.biloxi.example.com
t=0 0
m=audio 3456 RTP/AVP 97 33
a=rtpmap:97 iLBC/8000
a=rtpmap:33 no-op/8000
a=zrtp-hash:1.10 fe30efd02423cb054e50efd0248742ac7a52c8f91bc2
a=zrtp-hash SDP attribute, when coupled with the hash chaining
a=zrtp-hash attribute without any tampering by a third party, and if
a=zrtp-hash attribute, the SRTP stack MUST, upon completion of the
auxsecret = KDF(hash(len(srtpmki) || srtpmki ||
                          len(srtpmkr) || srtpmkr),
                 "SRTP Secret",
                 (ZIDi || ZIDr ||
                 srtpmsi || srtpmsr),
                 negotiated hash length)

H0 = 256-bit random nonce (different for each party)

H1 = hash (H0)

H2 = hash (H1)

H3 = hash (H2)

