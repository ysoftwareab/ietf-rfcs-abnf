WSP  =  SP / HTAB
LWSP =  *(WSP / CRLF WSP)
FWS  =  [*WSP CRLF] 1*WSP
hyphenated-word =  ALPHA
                      [ *(ALPHA / DIGIT / "-")
                      (ALPHA / DIGIT) ]
ALPHADIGITPS    =  (ALPHA / DIGIT / "+" / "/")
base64string    =  ALPHADIGITPS *([FWS] ALPHADIGITPS)
                      [ [FWS] "=" [ [FWS] "=" ] ]
hdr-name        =  field-name
qp-hdr-value    =  D-quoted-printable
                           ; with "|" encoded

D-quoted-printable =  *(FWS / hex-octet / D-safe-char)
                            ; hex-octet is from RFC2045
D-safe-char        =  %x21-3A / %x3C / %x3E-7E
                            ; '!' - ':', '<', '>' - '~'
                            ; Characters not listed as "mail-safe"
                            ; in [RFC2049] are also not
                            ; recommended.

tag-list  =  tag-spec 0*( ";" tag-spec ) [ ";" ]
tag-spec  =  [FWS] tag-name [FWS] "=" [FWS] tag-value [FWS]
tag-name  =  ALPHA 0*ALNUMPUNC
tag-value =  [ tval 0*( 1*(WSP / FWS) tval ) ]
                   ; WSP and FWS prohibited at beginning and end
tval      =  1*VALCHAR
VALCHAR   =  %x21-3A / %x3C-7E
                   ; EXCLAMATION to TILDE except SEMICOLON
ALNUMPUNC =  ALPHA / DIGIT / "_"
Tag=value pairs that represent the default value MAY be included to
public-key = D-find-key(q-val, d-val, s-val)
      where:
      q-val:   The type of the lookup, as specified in the "q" parameter
         (Section 4.2)

      d-val:   The domain of the signature, as specified in the "d"
         parameter (Section 4.2)

      s-val:   The selector of the lookup as specified in the "s"
         parameter (Section 4.2)

      D-find-key:   A function that uses q-val to determine the specific
         details for accessing the desired stored Key record.

selector =  sub-domain *( "." sub-domain )

dns-record =  s "._domainkey." d
      where:

      s:    is the selector of the lookup as specified in the "s"
         parameter (Section 4.2); use of selectors is discussed in
         Section 3.5

      d:    is the domain of the signature, as specified in the "d"
         parameter (Section 4.2)

k=    Key type (MAY be include; default is "rsa").  Signers and
         verifiers MUST support the "rsa" key type.  The "rsa" key type
         indicates that an ASN.1 DER-encoded [ITU-X660-1997]
         RSAPublicKey [RFC3447] (see Sections Section 3.5 and A.1.1) is
         being used in the "p" parameter.  (Note: the "p" parameter
         further encodes the value using the base64 algorithm.)
         Unrecognized key types MUST be ignored.





            ABNF:
key-k-tag        = %x76 [FWS] "=" [FWS] key-k-tag-type
key-k-tag-type   = "rsa" / x-key-k-tag-type
x-key-k-tag-type = hyphenated-word   ; for future extension

n=    Notes that might be of interest to a human (MAY be included;
         default is empty).  No interpretation is made by any program.
         This tag should be used sparingly in any key server mechanism
         that has space limitations (notably DNS).  This is intended for
         use by administrators, not end users.





            ABNF:
key-n-tag    = %x6e [FWS] "=" [FWS] qp-section

p=    Public-key data (MUST be included).  An empty value means
         that this public key has been revoked.  The syntax and
         semantics of this tag value before being encoded in base64 are
         defined by the "k" parameter.



            ABNF:
key-p-tag    = %x70 [FWS] "=" [ [FWS] base64string]

         NOTE:   If a private key has been compromised or otherwise
            disabled (for example, an outsourcing contract has been
            terminated), a signer might want to explicitly state that it
            knows about the selector, but also have all queries using
            that selector result in a failed verification.  Verifiers
            SHOULD ignore any DOSETA-Signature header fields with a
            selector referencing a revoked key.

         NOTE:   A base64string is permitted to include white space
            (FWS) at arbitrary places; however, any CRLFs MUST be
            followed by at least one WSP character.  Implementors and
            administrators are cautioned to ensure that selector TXT
            records conform to this specification.
v=    Version (MUST be included).  This tag defines the version of
         this specification that applies to the signature record.  It
         MUST have the value "1".  Note that verifiers MUST do an exact
         string comparison on this value; for example, "1" is not the
         same as "1.0".



            ABNF:
sig-v-tag       = %x76 [FWS] "=" [FWS] "1"
         NOTE:   DOSETA-Signature version numbers are expected to
            increase arithmetically as new versions of this
            specification are released.

a=    The algorithm used to generate the signature (MUST be
         included).  Verifiers MUST support "rsa-sha1" and "rsa-sha256";
         signers SHOULD sign using "rsa-sha256".  See Section 4.1 for a
         description of algorithms.





            ABNF:

sig-a-tag       = %x61 [FWS] "=" [FWS] sig-a-tag-alg
sig-a-tag-alg   = sig-a-tag-k "-" sig-a-tag-h
sig-a-tag-k     = "rsa" / x-sig-a-tag-k
sig-a-tag-h     = "sha1" / "sha256" / x-sig-a-tag-h
x-sig-a-tag-k   = ALPHA *(ALPHA / DIGIT)
                        ; for later extension
x-sig-a-tag-h   = ALPHA *(ALPHA / DIGIT)
                        ; for later extension

b=    The signature data (MUST be included).  Whitespace is
         ignored in this value and MUST be ignored when reassembling the
         original signature.  In particular, the signing process can
         safely insert FWS in this value in arbitrary places to conform
         to line-length limits.  See Signer Actions (Section 4.5) for
         how the signature is computed.





            ABNF:
sig-b-tag       = %x62 [FWS] "=" [FWS] sig-b-tag-data
sig-b-tag-data  = base64string

bh=    The hash of the canonicalized Content (body), as limited by
         the "l" parameter (MUST be included).  Whitespace is ignored in
         this value and MUST be ignored when reassembling the original
         signature.  In particular, the signing process can safely
         insert FWS in this value in arbitrary places to conform to
         line-length limits.  See Section 4.4 for how the Content hash
         is computed.
            ABNF:
sig-bh-tag      = %x62 %x68 [FWS] "=" [FWS] sig-bh-tag-data
sig-bh-tag-data = base64string

c=    Data canonicalization (MAY be included; default is "simple/
         simple").  This tag informs the verifier of the type of
         canonicalization used to prepare the message for signing.  It
         consists of two names separated by a "slash" (%d47) character,
         corresponding to the header and Content canonicalization
         algorithms respectively:



            ABNF:
sig-bh-tag      = %x63 [FWS] "=" [FWS] sig-c-header "/" sig-c-content
            where:

            sig-c-header:   A value from Header Canonicalization IANA
               registry defined in [DKIMSign]

            sig-c-content:   A value from Message Canonicalization IANA
               registry defined in [DKIMSign]

         These algorithms are described in Section 3.2.  If only one
         algorithm is named, that algorithm is used for the header and
         "simple" is used for the Content.  For example, "c=relaxed" is
         treated the same as "c=relaxed/simple".





            ABNF:
sig-c-tag       = %x63 [FWS] "=" [FWS] sig-c-tag-alg
                     ["/" sig-c-tag-alg]
sig-c-tag-alg   = "simple" / "relaxed" / x-sig-c-tag-alg
x-sig-c-tag-alg = hyphenated-word    ; for later extension

cl=    A list of semantic claims, asserting the set of "meanings"
         intended by the signer, such as author validity or content
         validity (SHOULD be included; default is "handled"}.  The list
         of supported claims comprises values from the DOSETA Claims
         IANA registry, defined in Section 6 using values listed in
         Section 7.1.2.
            ABNF:
sig-cl-tag        = %x63 %x6C [FWS] "=" [FWS]
                                           sig-cl-tag-claim
                                           ["/" sig-c-tag-claim]
sig-c-tag-claim   = hyphenated-word
                          ; per DOSETA Claims Registry

d=    The DDI doing the signing (MUST be included).  Hence, the
         DDI value is used to form the query for the public key.  The
         DDI MUST correspond to a valid DNS name under which the DOSETA
         key record is published.  The conventions and semantics used by
         a signer to create and use a specific DDI are outside the scope
         of the DOSETA Signing specification, as is any use of those
         conventions and semantics.  When presented with a signature
         that does not meet these requirements, verifiers MUST consider
         the signature invalid.

         Internationalized domain names MUST be encoded as described in
         [RFC5890].





            [TEMPLATE]   (Semantics) The service incorporating DOSETA
               MUST define the semantics of a signature.





            ABNF:

sig-d-tag       = %x64 [FWS] "=" [FWS] domain-name
domain-name     = sub-domain 1*("." sub-domain)
                        ; from RFC 5321 Domain,
                        ; but excluding address-literal

h=    Signed Header fields (MUST be included).  A colon-separated
         list of header field names that identify the Header fields
         presented to the signing algorithm.  The field MUST contain the
         complete list of Header fields in the order presented to the
         signing algorithm.  The field MAY contain names of Header
         fields that do not exist when signed; nonexistent Header fields
         do not contribute to the signature computation (that is, they
         are treated as the null input, including the header field name,
         the separating colon, the header field value, and any CRLF
         terminator).  The field MUST NOT include the DOSETA Signature
         header field that is being created or verified, but might
         include others.  Folding whitespace (FWS) MAY be included on
         either side of the colon separator.  Header field names MUST be
         compared against actual header field names in a case-
         insensitive manner.  This list MUST NOT be empty.  See
         Section 4.5.3 for a discussion of choosing Header fields to
         sign.





            ABNF:
sig-h-tag       = %x68 [FWS] "=" [FWS] hdr-name
                      0*( [FWS] ":" [FWS] hdr-name )

         By "signing" Header fields that do not actually exist, a signer
         can prevent insertion of those Header fields before
         verification.  However, since a signer cannot possibly know all
         possible Header fields that might be created in the future, the
         security of this solution is not total.

         The exclusion of the header field name and colon as well as the
         header field value for non-existent Header fields prevents an
         attacker from inserting an actual header field with a null
         value.

q=    A colon-separated list of query methods used to retrieve the
         public key (MAY be included; default is "dns/txt").  Each query
         method is of the form "type[/options]", where the syntax and
         semantics of the options depend on the type and specified
         options.  If there are multiple query mechanisms listed, the
         choice of query mechanism MUST NOT change the interpretation of
         the signature.  Implementations MUST use the recognized query
         mechanisms in the order presented.  Unrecognized query
         mechanisms MUST be ignored.

         Currently, the only valid value is "dns/txt", which defines the
         DNS TXT record lookup algorithm described elsewhere in this
         document.  The only option defined for the "dns" query type is
         "txt", which MUST be included.  Verifiers and signers MUST
         support "dns/txt".
            ABNF:
sig-q-tag        = %x71 [FWS] "=" [FWS] sig-q-tag-method
                         *([FWS] ":" [FWS] sig-q-tag-method)
sig-q-tag-method = "dns/txt" / x-sig-q-tag-type
                      ["/" x-sig-q-tag-args]
x-sig-q-tag-type = hyphenated-word  ; for future extension
x-sig-q-tag-args = qp-hdr-value

s=    The selector subdividing the namespace for the "d=" (domain)
         tag (MUST be included).





            ABNF:
sig-s-tag    = %x73 [FWS] "=" [FWS] selector

t=    Signature Timestamp (SHOULD be included; default is an
         unknown creation time).  The time that this signature was
         created.  The format is the number of seconds since 00:00:00 on
         January 1, 1970 in the UTC time zone.  The value is expressed
         as an unsigned integer in decimal ASCII.  This value is not
         constrained to fit into a 31- or 32-bit integer.
         Implementations SHOULD be prepared to handle values up to at
         least 10^12 (until approximately AD 200,000; this fits into 40
         bits).  To avoid denial-of-service attacks, implementations MAY
         consider any value longer than 12 digits to be infinite.  Leap
         seconds are not counted.  Implementations MAY ignore signatures
         that have a timestamp in the future.





            ABNF:
sig-t-tag    = %x74 [FWS] "=" [FWS] 1*12DIGIT

x=    Signature Expiration (SHOULD be included; default is no
         expiration).  The format is the same as in the "t" parameter,
         represented as an absolute date, not as a time delta from the
         signing timestamp.  The value is expressed as an unsigned
         integer in decimal ASCII, with the same constraints on the
         value in the "t=" tag.  Signatures MAY be considered invalid if
         the verification time at the verifier is past the expiration
         date.  Ideally verification time is when a message is first
         received at the administrative domain of the verifier;
         otherwise the current time SHOULD be used.  The value of the
         "x" parameter MUST be greater than the value of the "t"
         parameter if both are present.



         NOTE:   The "x" parameter is not intended as an anti-replay
            defense.

         NOTE:   Due to clock drift, the receiver's notion of when to
            consider the signature expired might not match exactly when
            the sender is expecting.  Receivers MAY add a 'fudge factor'
            to allow for such possible drift.



            ABNF:
sig-x-tag    = %x78 [FWS] "=" [FWS]
                  1*12DIGIT

id=    The local identifier, restricting the scope of the DDI,
         such as to a specific user.  This value is combined with the
         DDI, to specify the identifier to be used for assessment.
         Administrative choices for selectors can provide different keys
         for different local identifiers.  See Section 3.5

            ABNF:
key-id-tag   = %x69 %64 [FWS] "=" [FWS] hyphenated-word

content-hash =  hash-alg (canon-content, l-param)
data-hash    =  hash-alg (h-headers, D-SIG, content-hash)
signature    =  sig-alg (d-domain, selector, data-hash)

i=   The Agent or User Identifier (AUID) on behalf of which the
         SDID is taking responsibility (DOSETA-quoted-printable;
         OPTIONAL, default is an empty <local-part> followed by an "@"
         followed by the domain from the "d=" tag).

         The syntax is a standard email address where the <local-part>
         MAY be omitted.  The domain part of the address MUST be the
         same as, or a subdomain of, the value of the "d=" tag.

         Internationalized domain names MUST be converted using the
         steps listed in Section 4 of [RFC5890] using the "ToASCII"
         function.





            ABNF:
sig-i-tag       = %x69 [FWS] "=" [FWS]
                     [ local-part ] "@" domain-name

         The AUID is specified as having the same syntax as an email
         address, but is not required to have the same semantics.
         Notably, the domain name is not required to be registered in
         the DNS -- so it might not resolve in a query -- and the
         <local-part> MAY be drawn from a namespace unrelated to any
         mailbox.  The details of the structure and semantics for the
         namespace are determined by the Signer.  Any knowledge or use
         of those details by verifiers or assessors is outside the scope
         of the DOSETA Signing specification.  The Signer MAY choose to
         use the same namespace for its AUIDs as its users' email
         addresses or MAY choose other means of representing its users.
         However, the signer SHOULD use the same AUID for each message
         intended to be evaluated as being within the same sphere of
         responsibility, if it wishes to offer receivers the option of
         using the AUID as a stable identifier that is finer grained
         than the SDID.

         NOTE:   The <local-part> of the "i=" tag is optional because in
            some cases a signer might not be able to establish a
            verified individual identity.  In such cases, the signer
            might wish to assert that although it is willing to go as
            far as signing for the domain, it is unable or unwilling to
            commit to an individual user name within their domain.  It
            can do so by including the domain part but not the <local-
            part> of the identity.

         NOTE:   Absent public standards for the semantics of an AUID,
            an assessment based on AUID requires a non-standardized
            basis.

         NOTE:   This specification does not require the value of the
            "i=" tag to match the identity in any Header field.  This is
            considered to be an assessment-time policy issue.
            Constraints between the value of the "i=" tag and other
            identities in other Header fields might seek to apply basic
            authentication into the semantics of trust associated with a
            role such as content author.  Trust is a broad and complex
            topic and trust mechanisms are subject to highly creative
            attacks.  The real-world efficacy of any but the most basic
            bindings between the "i=" value and other identities is not
            well established, nor is its vulnerability to subversion by
            an attacker.  Hence reliance on the use of these options
            needs to be strictly limited.  In particular, it is not at
            all clear to what extent a typical end-user recipient can
            rely on any assurances that might be made by successful use
            of the "i=" options.

l=    Content length count (plain-text unsigned decimal integer;
         OPTIONAL, default is entire Content).  This tag informs the
         verifier of the number of octets in the Content of the data
         after canonicalization included in the cryptographic hash,
         starting from 0 immediately following the CRLF preceding the
         Content.  This value MUST NOT be larger than the actual number
         of octets in the canonicalized Content.



            ABNF:
sig-l-tag    = %x6c [FWS] "=" [FWS]
                  1*76DIGIT

         NOTE:   Use of the "l=" tag might allow display of fraudulent
            content without appropriate warning to end users.  The "l="
            tag is intended for increasing signature robustness when
            sending to intermediaries that append data to Content, such
            as mailing lists that both modify their content and do not
            sign their messages.  However, using the "l=" tag enables
            attacks in which an intermediary with malicious intent
            modifies a message to include content that solely benefits
            the attacker.  It is possible for the appended content to
            completely replace the original content in the end
            recipient's eyes and to defeat duplicate message detection
            algorithms.  Examples are described in Security
            Considerations Section 7.2.  To avoid this attack, signers
            need be extremely wary of using this tag, and verifiers
            might wish to ignore the tag or remove text that appears
            after the specified content length.

         NOTE:   The value of the "l=" tag is constrained to 76 decimal
            digits.  This constraint is not intended to predict the size
            of future data or to require implementations to use an
            integer representation large enough to represent the maximum
            possible value, but is intended to remind the implementer to
            check the length of this and all other tags during
            verification and to test for integer overflow when decoding
            the value.  Implementers might need to limit the actual
            value expressed to a value smaller than 10^76, for example,
            to allow a message to fit within the available storage
            space.

z=    Copied Header fields (DOSETA-quoted-printable, but see
         description; OPTIONAL, default is null).  A vertical-bar-
         separated list of selected Header fields present when the
         message was signed, including both the field name and value.
         It is not required to include all Header fields present at the
         time of signing.  This field need not contain the same Header
         fields listed in the "h=" tag.  The Header field text itself
         MUST encode the vertical bar ("|", %x7C) character.  That is,
         vertical bars in the "z=" text are meta-characters, and any
         actual vertical bar characters in a copied header field MUST be
         encoded.  Note that all whitespace MUST be encoded, including
         whitespace between the colon and the header field value.  After
         encoding, FWS MAY be added at arbitrary locations in order to
         avoid excessively long lines; such whitespace is NOT part of
         the value of the header field, and MUST be removed before
         decoding.

         The Header fields referenced by the "h=" tag refer to the
         fields in the [RFC5322] Header, not to any copied fields in the
         "z=" tag.  Copied header field values are for diagnostic use.

         Header fields with characters requiring conversion (perhaps
         from legacy MTAs that are not [RFC5322] compliant) SHOULD be
         converted as described in MIME Part Three [RFC2047].
            ABNF:

sig-z-tag      = %x7A [FWS] "=" [FWS]
                    sig-z-tag-copy
                    *( "|" [FWS] sig-z-tag-copy )
sig-z-tag-copy = hdr-name [FWS] ":"
                    qp-hdr-value

s=brisbane;   c=simple; q=dns/txt; i=@eng.example.net;
t=1117574938; x=1118006938;
h=from:to:subject:date;
z=From:foo@eng.example.net|To:joe@example.com|
      Subject:demo=20run|
      Date:July=205,=202005=203:44:08=20PM=20-0700;
bh=MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=;
b=dzdVyOfAKCdLXdJOc9G2q8LoXSlEniSbav+yuU4zGeeruD00lszZVoG4ZHRNiYzR

g=    Granularity of the key (plain-text; OPTIONAL, default is
         "*").  This value MUST match the Local-part of the "i=" tag of
         the DKIM- Signature header field (or its default value of the
         empty string if "i=" is not specified), with a single, optional
         "*" character matching a sequence of zero or more arbitrary
         characters ("wildcarding").  An email with a signing address
         that does not match the value of this tag constitutes a failed
         verification.  The intent of this tag is to constrain which
         signing address can legitimately use this selector, for
         example, when delegating a key to a third party that should
         only be used for special purposes.  Wildcarding allows matching
         for addresses such as "user+*" or "*-offer".  An empty "g="
         value never matches any addresses.



            ABNF:
key-g-tag       = %x67 [FWS] "=" [FWS] key-g-tag-lpart
key-g-tag-lpart = [dot-atom-text]
                                          ["*" [dot-atom-text] ]

h=    Acceptable hash algorithms (plain-text; OPTIONAL, defaults
         to allowing all algorithms).  A colon-separated list of hash
         algorithms that might be used.  Signers and Verifiers MUST
         support the "sha256" hash algorithm.  Verifiers MUST also
         support the "sha1" hash algorithm.  Unrecognized hash
         algorithms MUST be ignored.
            ABNF:

key-h-tag       = %x68 [FWS] "=" [FWS]
                     key-h-tag-alg
                     0*( [FWS] ":" [FWS]
                     key-h-tag-alg )
key-h-tag-alg   = "sha1" / "sha256" /
                     x-key-h-tag-alg
x-key-h-tag-alg = hyphenated-word
                          ; for future extension

s=    Service Type (plain-text; OPTIONAL; default is "*").  A
         colon-separated list of service types to which this record
         applies.  Verifiers for a given service type MUST ignore this
         record if the appropriate type is not listed.  Unrecognized
         service types MUST be ignored.  Currently defined service types
         are as follows:



         *  matches all service types

         email   electronic mail (not necessarily limited to SMTP)

         This tag is intended to constrain the use of keys for other
         purposes, if use of DOSETA is defined by other services in the
         future.





            ABNF:

key-s-tag        = %x73 [FWS] "=" [FWS]
                      key-s-tag-type
                      0*( [FWS] ":" [FWS]
                      key-s-tag-type )
key-s-tag-type   = "email" / "*" /
                      x-key-s-tag-type
x-key-s-tag-type = hyphenated-word
                           ; for future extension

t=    Flags, represented as a colon-separated list of names
         (plain-text; OPTIONAL, default is no flags set).  Unrecognized
         flags MUST be ignored.  The defined flags are as follows:
         y    This domain is testing DOSETA.  Verifiers MUST NOT treat
            data from signers in testing mode differently from unsigned
            data, even if the signature fails to verify.  Verifiers MAY
            wish to track testing mode results to assist the signer.

         s    Any DOSETA-Signature Header fields using the "i=" tag MUST
            have the same domain value on the right-hand side of the "@"
            in the "i=" tag and the value of the "d=" tag.  That is, the
            "i=" domain MUST NOT be a subdomain of "d=".  Use of this
            flag is RECOMMENDED unless subdomaining is required.





            ABNF:
key-t-tag        = %x74 [FWS] "=" [FWS]
                      key-t-tag-flag
                      0*( [FWS] ":" [FWS]
                      key-t-tag-flag )
key-t-tag-flag   = "y" / "s" /
                      x-key-t-tag-flag
x-key-t-tag-flag = hyphenated-word
                           ; for future extension


