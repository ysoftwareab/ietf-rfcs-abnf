auth-scheme    = token
auth-param     = token "=" ( token | quoted-string )


challenge   = auth-scheme 1*SP 1#auth-param

realm       = "realm" "=" realm-value
realm-value = quoted-string


credentials = auth-scheme #auth-param

     Note that many browsers will only recognize Basic and will require
     that it be the first auth-scheme presented. Servers should only
     include Basic if it is minimally acceptable.

challenge   = "Basic" realm
credentials = "Basic" basic-credentials


basic-credentials = base64-user-pass
base64-user-pass  = <base64 [4] encoding of user-pass,
                        except not limited to 76 char/line>
user-pass   = userid ":" password
userid      = *<TEXT excluding ":">
password    = *TEXT

challenge        =  "Digest" digest-challenge

digest-challenge  = 1#( realm | [ domain ] | nonce |
                         [ opaque ] |[ stale ] | [ algorithm ] |
                         [ qop-options ] | [auth-param] )


domain            = "domain" "=" <"> URI ( 1*SP URI ) <">
URI               = absoluteURI | abs_path
nonce             = "nonce" "=" nonce-value
nonce-value       = quoted-string
opaque            = "opaque" "=" quoted-string
stale             = "stale" "=" ( "true" | "false" )
algorithm         = "algorithm" "=" ( "MD5" | "MD5-sess" |
                          token )
qop-options       = "qop" "=" <"> 1#qop-value <">
qop-value         = "auth" | "auth-int" | token


credentials      = "Digest" digest-response
digest-response  = 1#( username | realm | nonce | digest-uri
                    | response | [ algorithm ] | [cnonce] |
                    [opaque] | [message-qop] |
                        [nonce-count]  | [auth-param] )

username         = "username" "=" username-value
username-value   = quoted-string
digest-uri       = "uri" "=" digest-uri-value
digest-uri-value = request-uri   ; As specified by HTTP/1.1
message-qop      = "qop" "=" qop-value
cnonce           = "cnonce" "=" cnonce-value
cnonce-value     = nonce-value
nonce-count      = "nc" "=" nc-value
nc-value         = 8LHEX
response         = "response" "=" request-digest
request-digest = <"> 32LHEX <">
LHEX             =  "0" | "1" | "2" | "3" |
                        "4" | "5" | "6" | "7" |
                        "8" | "9" | "a" | "b" |
                        "c" | "d" | "e" | "f"


request-digest  = <"> < KD ( H(A1),     unq(nonce-value)
                                       ":" nc-value
                                       ":" unq(cnonce-value)
                                       ":" unq(qop-value)
                                       ":" H(A2)
                               ) <">


request-digest  =
              <"> < KD ( H(A1), unq(nonce-value) ":" H(A2) ) >
A1       = unq(username-value) ":" unq(realm-value) ":" passwd

passwd   = < user's password >

A1       = H( unq(username-value) ":" unq(realm-value)
                  ":" passwd )
                  ":" unq(nonce-value) ":" unq(cnonce-value)

A2       = Method ":" digest-uri-value

A2       = Method ":" digest-uri-value ":" H(entity-body)


username="Mufasa", realm=myhost@testrealm.com

AuthenticationInfo = "Authentication-Info" ":" auth-info
auth-info          = 1#(nextnonce | [ message-qop ]
                            | [ response-auth ] | [ cnonce ]
                            | [nonce-count] )
nextnonce          = "nextnonce" "=" nonce-value
response-auth      = "rspauth" "=" response-digest
response-digest    = <"> *LHEX <">

A2       = ":" digest-uri-value

A2       = ":" digest-uri-value ":" H(entity-body)

realm="testrealm@host.com",
qop="auth,auth-int",
nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
opaque="5ccc069c403ebaf9f0171e9517f40e41"


realm="testrealm@host.com",
nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
uri="/dir/index.html",
qop=auth,
nc=00000001,
cnonce="0a4f113b",
response="6629fae49393a05397450978507c4ef1",
opaque="5ccc069c403ebaf9f0171e9517f40e41"
j = (Bin[i] >> 4) & 0xf;
j = Bin[i] & 0xf;
