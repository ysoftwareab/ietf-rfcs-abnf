priority="1">ftp://ftp.example.com/example.ext</url>
priority="1">http://example.com/example.ext</url>
priority="2">http://example.com/example.ext.torrent</metaurl>
priority="1">ftp://ftp.example.com/example2.ext</url>
priority="1">http://example.com/example2.ext</url>
priority="2">http://example.com/example2.ext.torrent</metaurl>
start = metalinkMetalink

metalinkCommonAttributes =
      attribute xml:lang { metalinkLanguageTag }?,
      undefinedAttribute*

metalinkTextConstruct =
      metalinkCommonAttributes,
      text

metalinkDateConstruct =
      metalinkCommonAttributes,
      xsd:dateTime

metalinkMetalink =
      element metalink:metalink {
         metalinkCommonAttributes,
         (metalinkFile+
          & metalinkGenerator?
          & metalinkOrigin?
          & metalinkPublished?
          & metalinkUpdated?
          & extensionElement*)
      }

metalinkFile =
      element metalink:file {
         metalinkCommonAttributes,
         attribute name { text },
         (metalinkCopyright?
          & metalinkDescription?
          & metalinkHash*
          & metalinkIdentity?
          & metalinkLanguage*
          & metalinkLogo?
          & metalinkMetaURL*
          & metalinkOS*
          & metalinkPieces*
          & metalinkPublisher?
          & metalinkSignature?
          & metalinkSize?
          & metalinkURL*
          & metalinkVersion?
          & extensionElement*)
      }

metalinkPieces =
      element metalink:pieces {
         attribute length { xsd:positiveInteger },
         attribute type { text },
         metalinkHash+
      }

metalinkCopyright =
      element metalink:copyright {
        metalinkTextConstruct
      }
metalinkDescription =
      element metalink:description {
        metalinkTextConstruct
      }

metalinkGenerator =
      element metalink:generator {
        metalinkTextConstruct
      }

token          = 1*<any CHAR except CTLs or separators>
separators     = "(" / ")" / "<" / ">" / "@"
                  / "," / ";" / ":" / "\" / DQUOTE
                  / "/" / "[" / "]" / "?" / "="
                  / "{" / "}" / SP / HTAB
agent         = token ["/" agent-version]
agent-version = token

metalinkHash =
      element metalink:hash {
        attribute type { text }?,
        text
      }

metalinkIdentity =
      element metalink:identity {
        metalinkTextConstruct
      }

metalinkLanguage =
      element metalink:language {
        metalinkTextConstruct
      }
metalinkLogo =
      element metalink:logo {
        metalinkCommonAttributes,
        (metalinkUri)
      }

metalinkMetaURL =
      element metalink:metaurl {
         metalinkCommonAttributes,
         attribute priority { xsd:positiveInteger {
maxInclusive = "999999"}}?,
media-type = (type-name "/" subtype-name) / media-reserved
media-reserved = "torrent"
type-name = <Defined in Section 4.2 of RFC 4288>
subtype-name = <Defined in Section 4.2 of RFC 4288>

mediatype="torrent" name="debian-amd64/sarge/Contents-amd64.gz">

metalinkOrigin =
      element metalink:origin {
        metalinkCommonAttributes,
        attribute dynamic { xsd:boolean }?,
        (metalinkUri)
      }
metalinkOS =
      element metalink:os {
        metalinkTextConstruct
      }

metalinkPublished =
      element metalink:published {
        metalinkDateConstruct
      }

metalinkPublisher =
      element metalink:publisher {
        metalinkCommonAttributes,
        attribute name { text },
        attribute url { metalinkUri }?
      }
metalinkSignature =
      element metalink:signature {
        attribute mediatype { text },
        metalinkTextConstruct
      }

media-type = type-name "/" subtype-name
type-name = <Defined in Section 4.2 of RFC 4288>
subtype-name = <Defined in Section 4.2 of RFC 4288>

metalinkSize =
      element metalink:size {
        xsd:nonNegativeInteger
      }

metalinkUpdated =
      element metalink:updated {
        metalinkDateConstruct
      }

metalinkURL =
      element metalink:url {
         metalinkCommonAttributes,
         attribute location { xsd:string {
minLength = "2"  maxLength="2"}
maxInclusive = "999999"}}?,
metalinkVersion =
      element metalink:version {
        metalinkTextConstruct
      }

simpleExtensionElement =
      element * - metalink:* {
         text
      }

structuredExtensionElement =
      element * - metalink:* {
         (attribute * { text }+,
            (text|anyElement)*)
       | (attribute * { text }*,
          (text?, anyElement+, (text|anyElement)*))
      }

metalinkCommonAttributes =
      attribute xml:lang { metalinkLanguageTag }?,
      undefinedAttribute*

metalinkTextConstruct =
      metalinkCommonAttributes,
      text

metalinkDateConstruct =
      metalinkCommonAttributes,
      xsd:dateTime

start = metalinkMetalink

metalinkMetalink =
      element metalink:metalink {
         metalinkCommonAttributes,
         (metalinkFile+
          & metalinkGenerator?
          & metalinkOrigin?
          & metalinkPublished?
          & metalinkUpdated?
          & extensionElement*)
      }
metalinkFile =
      element metalink:file {
         metalinkCommonAttributes,
         attribute name { text },
         (metalinkCopyright?
          & metalinkDescription?
          & metalinkHash*
          & metalinkIdentity?
          & metalinkLanguage*
          & metalinkLogo?
          & metalinkMetaURL*
          & metalinkOS*
          & metalinkPieces*
          & metalinkPublisher?
          & metalinkSignature?
          & metalinkSize?
          & metalinkURL*
          & metalinkVersion?
          & extensionElement*)
      }

metalinkPieces =
      element metalink:pieces {
         attribute length { xsd:positiveInteger },
         attribute type { text },
         metalinkHash+
      }

metalinkCopyright =
      element metalink:copyright {
         metalinkTextConstruct
      }

metalinkDescription =
      element metalink:description {
         metalinkTextConstruct
      }

metalinkGenerator =
      element metalink:generator {
         metalinkTextConstruct
      }

metalinkHash =
        element metalink:hash {
          attribute type { text }?,
          text
        }
metalinkIdentity =
      element metalink:identity {
         metalinkTextConstruct
      }

metalinkLanguage =
      element metalink:language {
         metalinkTextConstruct
      }

metalinkLogo =
      element metalink:logo {
         metalinkCommonAttributes,
         (metalinkUri)
      }

metalinkMetaURL =
      element metalink:metaurl {
         metalinkCommonAttributes,
         attribute priority { xsd:positiveInteger {
maxInclusive = "999999"}}?,
metalinkOrigin =
      element metalink:origin {
         metalinkCommonAttributes,
         attribute dynamic { xsd:boolean }?,
         (metalinkUri)
      }

metalinkOS =
      element metalink:os {
         metalinkTextConstruct
      }

metalinkPublished =
      element metalink:published {
         metalinkDateConstruct
      }

metalinkPublisher =
      element metalink:publisher {
         metalinkCommonAttributes,
         attribute name { text },
         attribute url { metalinkUri }?
      }

metalinkSignature =
      element metalink:signature {
         attribute mediatype { text },
         metalinkTextConstruct
      }

metalinkSize =
      element metalink:size {
         xsd:nonNegativeInteger
      }

metalinkUpdated =
      element metalink:updated {
         metalinkDateConstruct
      }

metalinkURL =
      element metalink:url {
         metalinkCommonAttributes,
         attribute location { xsd:string {
minLength = "2"  maxLength="2"}
maxInclusive = "999999"}}?,
metalinkVersion =
      element metalink:version {
         metalinkTextConstruct
      }

metalinkLanguageTag = xsd:string {
pattern = "[A-Za-z]{1,8}(-[A-Za-z0-9]{1,8})*"
metalinkUri = text

simpleExtensionElement =
      element * - metalink:* {
         text
      }

structuredExtensionElement =
      element * - metalink:* {
         (attribute * { text }+,
            (text|anyElement)*)
       | (attribute * { text }*,
          (text?, anyElement+, (text|anyElement)*))
      }

extensionElement =
      simpleExtensionElement | structuredExtensionElement

undefinedAttribute =
     attribute * - (xml:lang | local:*) { text }

undefinedContent = (text|anyForeignElement)*

anyElement =
      element * {
         (attribute * { text }
          | text
          | anyElement)*
      }

anyForeignElement =
      element * - metalink:* {
         (attribute * { text }
          | text
          | anyElement)*
