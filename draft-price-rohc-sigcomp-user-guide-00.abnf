mnemonic_code    =         primitive *(ws primitive) 
    
primitive        =         comment | instruction | label | padding 
    
ws               =         1*(%x09 | %x0A | %x0D | %x20) 
    
comment          =         ";" *(%x00-09 | %x0B-0C | %x0E-FF) 
    
instruction      =         opcode [ws "(" operand_list ")"] 
    
operand_list     =         operand *("," ws operand) 
    
opcode           =         uppercase *(uppercase | digit | "-") 
    
uppercase        =         %x41-5A 
    
digit            =         %x30-39 
    
operand          =         ["$"] value 
    
value            =         integer | text_name 
    
integer          =         decimal | binary | hex 
    
decimal          =         1*(digit) 
    
binary           =         "0b" 1*("0" | "1") 
    
hex              =         "0h" 1*(hex_digit) 
    
hex_digit        =         digit | %x41-46 | %x61-66 
    
text_name        =         1*(lowercase | "_") 
    
lowercase        =         %x61-7A 
    
label            =         ":" text_name [ws "=" ws expression] 
    
expression       =         value | (value ws operator ws value) 
    
operator         =         "+" | "-" | "*" | "/" 
    
padding          =         padding_bytes | alignment | byte_string 

 
 
 
 
 
padding_bytes    =         ".pad" ws integer 
    
alignment        =         ".align" ws integer 
    
byte_string      =         ".byte" 1*((%x09 | %x20) integer) 
    
mnemonic_code    =         primitive *(ws primitive) 
    
primitive        =         comment | instruction | label | padding 
    
ws               =         1*(%x09 | %x0A | %x0D | %x20) 
    
comment          =         ";" *(%x00-09 | %x0B-0C | %x0E-FF) 
    
                              ; Comments are indicated by a semicolon  
                              ; and continue to the end of the line. 
    
instruction      =         opcode *(ws operand) 
    
opcode           =         uppercase *(uppercase | digit | "-") 
    
                              ; The list of instruction opcodes and  
                              ; their corresponding 1-byte values is  
                              ; given in Figure 11 of SigComp. 
    

 
 
 
 
 
operand          =         ["$"] value 
    
                              ; When a "$" symbol is appended to the  
                              ; front of an instruction operand then the  
                              ; corresponding integer must be encoded as  
                              ; a memory address rather than as the  
                              ; actual operand value. This symbol is  
                              ; mandatory for reference operands,  
                              ; optional for multitypes and addresses,  
                              ; and disallowed for literals. 
    
value            =         integer | text_name 
    
integer          =         decimal | binary | hex 
    
                              ; Instruction operands can be given in the  
                              ; form of integers. They are converted  
                              ; into the shortest bytecode capable of  
                              ; representing the integer by the rules of  
                              ; Section 8.5 of SigComp. 
    
decimal          =         1*(digit) 
    
binary           =         "0b" 1*("0" | "1") 
    
hex              =         "0h" 1*(hex_digit) 
    
hex_digit        =         digit | %x41-46 | %x61-66 
    
digit            =         %x30-39 
    
text_name        =         1*(lowercase | "_") 
    
                              ; Instruction parameters can also be given  
                              ; in the form of lowercase names. These  
                              ; names are assigned an integer value by 
                              ; means of a label. 
    
uppercase        =         %x41-5A 
    
lowercase        =         %x61-7A 
    
label            =         ":" text_name [ws "=" ws expression] 
    
                              ; Label names are given as a colon  
                              ; followed by lowercase text. They are  
                              ; deleted when converting the mnemonic  
                              ; code to bytecode. 
    
expression       =         value | (value ws operator ws value) 
    

 
 
 
 
 
operator         =         "+" | "-" | "*" | "/" 
    
padding          =         padding_bytes | alignment | byte_string 
    
padding_bytes    =         ".pad" ws integer 
    
alignment        =         ".align" ws integer 
    
byte_string      =         ".byte" 1*((%x09 | %x20) integer) 
    
    
