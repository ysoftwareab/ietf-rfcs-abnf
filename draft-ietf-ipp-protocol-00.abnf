ipp-message = ipp-request / ipp-response
ipp-request = version operation
       [parameter-tag parameter-sequence ]
       *(attribute-tag  attribute-sequence) data-tag data
ipp-response = version status-code
version = major-version minor-version
major-version = SIGNED-BYTE  ; initially %d1
minor-version = SIGNED-BYTE  ; initially %d0

operation = SIGNED-SHORT    ; mapping from model defined below
status-code = SIGNED-SHORT  ; mapping from model defined below

parameter-sequence = *compound-parameter
attribute-sequence = *compound-attribute
compound-parameter = parameter *additional-values
compound-attribute = attribute *additional-values

parameter = value-tag name-length name value-length value
attribute = value-tag name-length name value-length value
additional-values = value-tag zero-name-length value-length value

name-length = SIGNED-SHORT    ; number of octets of `name'
name = LALPHA *( LALPHA / DIGIT / "-" / "_" )
value-length = SIGNED-SHORT   ; number of octets of `value'
value = OCTET-STRING

data = OCTET-STRING

zero-name-length = %x00.00       ; name-length of 0
parameter-tag = %x01             ; tag of 1
attribute-tag =  %x02            ; tag of 2
data-tag = %x03                  ; tag of 3
value-tag = %x10..%xFF

SIGNED-BYTE = %x00..%xFF
SIGNED-SHORT = %x00..%xFF %x00..%xFF
DIGIT = "0".."9"
LALPHA = "a".."z"
BYTE = %x00..%xFF
OCTET-STRING = *BYTE

chunked-data = *data-chunk end-of-data
data-chunk = data-segment-length data-segment

data-segment-length = SIGNED-SHORT    ; number of octets
                                        ; of the data in binary
data-segment = OCTET-STRING

end-of-data = %x00.00
ipp-message = ipp-request / ipp-response
ipp-request = version operation
     [ header-tag  header-sequence ]
     [ parameter-tag parameter-sequence ]
     *(attribute-tag attribute-sequence) data
ipp-response = version status-code
     [ header-tag header-sequence ]
     [ parameter-tag parameter-sequence ]
     *(attribute-tag attribute-sequence) data
version = major-version minor-version
major-version = SIGNED-BYTE  ; initially %d1
minor-version = SIGNED-BYTE  ; initially %d0

operation = SIGNED-SHORT         ; mapping from model defined below
status-code = SIGNED-SHORT       ; mapping from model defined below

header-sequence = *compound-header
parameter-sequence = *compound-parameter
attribute-sequence = *compound-attribute

compound-header = header *(additional-values)
compound-parameter = parameter *(additional-values)
compound-attribute = attribute *(additional -values)

header = value-tag name-length name value-length value
parameter = value-tag name-length name value-length value
attribute = value-tag name-length name value-length value
additional-values = value-tag zero-name-length value-length value

name-length = SIGNED-SHORT    ; number of octets of `name'
name = LALPHA *( LALPHA / DIGIT / "-" / "_" )
value-length = SIGNED-SHORT  ; number of octets of `value'
value = OCTET-STRING

data = (data-tag  full-data ) / (chunked-data-tag chunked-data )
full-data = OCTET-STRING
chunked-data = *data-chunk END-OF-DATA
data-chunk = data-segment-length data-segment
data-segment-length = SIGNED-SHORT   ; number of octets of the data
data-segment = OCTET-STRING

zero-name-length = %x00.00       ; name-length of 0
parameter-tag =  %x01            ; tag of 1
attribute-tag =  %x02            ; tag of 2
data-tag = %x03                  ; tag of 3
chunked-data-tag = %x04          ; tag of 4
header-tag = %x05                ; tag of 5
value-tag = %x10..%xFF
end-of-data = %x00.00

SIGNED-BYTE = %x00..%xFF
SIGNED-SHORT = %x00..%xFF %x00..%xFF
DIGIT = "0".."9"
LALPHA = "a".."z"
BYTE = %x00..%xFF
OCTET-STRING = *BYTE

