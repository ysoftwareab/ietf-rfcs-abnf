href="http://creativecommons.org/licenses/by/4.0/">

body = [*(link / form / representation / directive)]

link = [link: 2, relation, target, ?body]

relation = text / int

target = iri / literal / null

literal = bool / int / float / bytes / text

form = [form: 3, relation, method, iri, ?form-data]

method = text / uint

form-data = [*(form-field-name, form-field-value)]

form-field-name = text / uint

form-field-value = iri / bool / int / float / bytes / text / null

representation = [representation: 0, text / uint, bytes]

directive = base-directive

base-directive = [base: 1, iri]

identifier = start *continue *(medial 1*continue)

start = <Any character with the XID_Start property>

continue = <Any character with the XID_Continue property>

medial = "-" / "." / "~" / %xB7 / %x58A / %xF0B

medial =/ %x2010 / %x2027 / %x30A0 / %x30FB

iri = "<" IRI-reference ">"

IRI-reference = <Defined in Section 2.2 of RFC 3987>

boolean = "true" / "false"
integer = ["+" / "-"] (decimal / binary / octal / hexadecimal)

decimal = 1*DIGIT

binary = %x30 (%x42 / %x62) 1*BINDIG

octal = %x30 (%x4F / %x6F) 1*OCTDIG

hexadecimal = %x30 (%x58 / %x78) 1*HEXDIG

DIGIT = %x30-39

BINDIG = %x30-31

OCTDIG = %x30-37

HEXDIG = %x30-39 / %x41-46 / %x61-66

floating-point = ["+" / "-"] 1*DIGIT [fraction] [exponent]

fraction = "." 1*DIGIT

exponent = (%x45 / %x65) ["+" / "-"] 1*DIGIT

floating-point =/ "NaN"

floating-point =/ ["+" / "-"] "Infinity"

bytes = base16 / base32 / base64

base16 = (%x68 / %x62.31.36) SQUOTE <Base16 encoded data> SQUOTE

base32 = %x62.33.32 SQUOTE <Base32 encoded data> SQUOTE

base64 = %x62.36.34 SQUOTE <Base64 encoded data> SQUOTE

SQUOTE = %x27

text = DQUOTE *(char / %x5C escape) DQUOTE

char = <Any character except %x22, %x5C, and line terminators>

escape = simple-escape / hexadecimal-escape / unicode-escape

simple-escape = %x30 / %x62 / %x74 / %x6E / %x76
simple-escape =/ %x66 / %x72 / %x22 / %x27 / %x5C

hexadecimal-escape = (%x78 / %x58) 2HEXDIG

unicode-escape = %x75 4HEXDIG / %x55 8HEXDIG

DQUOTE = %x22

null = "null" / "_"

punctuator = "#" | ":" | "*" | "[" | "]" | "{" | "}" | "=" | "->"
body = *(link / form / representation / directive)

link = relation target ["{" body "}"]

relation = iri / simple-name / qualified-name / integer

simple-name = identifier

qualified-name = identifier ":" identifier

target = iri / literal / null

literal = boolean / integer / floating-point / bytes / text

form = relation "->" method iri ["[" form-data "]"]

method = identifier

form-data = *(form-field-name form-field-value)

form-field-name = iri / simple-name / qualified-name / integer

form-field-value = iri / boolean / integer

form-field-value =/ floating-point / bytes / text / null

representation = "*" bytes ["[" representation-metadata "]"]

representation-metadata = *(metadata-name metadata-value)

metadata-name = "type"

metadata-value = text / integer

directive = base-directive / using-directive

base-directive = "#" "base" iri

using-directive = "#" "using" [identifier "="] iri

CoRAL-Body = body

CoRAL-Link = link

CoRAL-Form = form

CoRAL-IRI = iri

iri = [?(scheme:    1, text),
             ?(host.name: 2, text //
               host.ip:   3, bytes .size 4 / bytes .size 16),
             ?(port:      4, uint .size 2),
             ?(path.type: 5, path-type),
             *(path:      6, text),
             *(query:     7, text),
             ?(fragment:  8, text)]

path-type = &(absolute-path:   0,
                    append-path:     1,
                    relative-path:   2,
                    append-relation: 3)

result = []
type = PathType.RELATIVE_PATH
option = Option.HOST_NAME
href = href[1:]
type = value
option = Option.PATH
result = ""
no_path = True
first_query = True
no_path = False
no_path = False
first_query = False
no_path = False
no_path = False
c == ":" or c == "@"

c == "-" or c == "." or c == "_" or c == "~" or         \
c == "(" or c == ")" or c == "*" or c == "+" or         \
c == "," or c == ";" or c == "="

result = b""
previous = 0
opt = 3  # Uri-Host
val = value.encode("utf-8")
previous = opt
opt = 3  # Uri-Host
val = ".".join(str(c) for c in b).encode("utf-8")
val = b"[" + ... + b"]"  # see RFC 5952
previous = opt
opt = 7  # Uri-Port
val = value.to_bytes((value.bit_length() + 7) // 8, "big")
previous = opt
opt = 11  # Uri-Path
val = value.encode("utf-8")
previous = opt
opt = 15  # Uri-Query
val = value.encode("utf-8")
previous = opt
opt = 39  # Proxy-Scheme
val = value.encode("utf-8")
previous = opt
length = len(value)
delta_nibble = _encode_coap_option_nibble(delta)
length_nibble = _encode_coap_option_nibble(length)
result = bytes([delta_nibble << 4 | length_nibble])
