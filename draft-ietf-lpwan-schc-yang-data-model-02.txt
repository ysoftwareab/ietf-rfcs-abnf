



lpwan Working Group                                          A. Minaburo
Internet-Draft                                                    Acklio
Intended status: Standards Track                              L. Toutain
Expires: August 31, 2020          Institut MINES TELECOM; IMT Atlantique
                                                       February 28, 2020


        Data Model for Static Context Header Compression (SCHC)
                draft-ietf-lpwan-schc-yang-data-model-02

Abstract

   This document describes a YANG data model for the SCHC (Static
   Context Header Compression) compression and fragmentation rules.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on August 31, 2020.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.





Minaburo & Toutain       Expires August 31, 2020                [Page 1]

Internet-Draft           LPWAN SCHC YANG module            February 2020


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  SCHC rules  . . . . . . . . . . . . . . . . . . . . . . . . .   2
     2.1.  Compression Rules . . . . . . . . . . . . . . . . . . . .   3
     2.2.  Field Identifier  . . . . . . . . . . . . . . . . . . . .   4
     2.3.  Field length  . . . . . . . . . . . . . . . . . . . . . .   6
     2.4.  Field position  . . . . . . . . . . . . . . . . . . . . .   7
     2.5.  Direction Indicator . . . . . . . . . . . . . . . . . . .   7
     2.6.  Target Value  . . . . . . . . . . . . . . . . . . . . . .   8
     2.7.  Matching Operator . . . . . . . . . . . . . . . . . . . .   9
       2.7.1.  Matching Operator arguments . . . . . . . . . . . . .  10
     2.8.  Compression Decompresison Actions . . . . . . . . . . . .  10
       2.8.1.  Compression Decompression Action arguments  . . . . .  12
   3.  Rule definition . . . . . . . . . . . . . . . . . . . . . . .  12
     3.1.  Compression rule  . . . . . . . . . . . . . . . . . . . .  14
       3.1.1.  Compression context representation. . . . . . . . . .  14
       3.1.2.  Rule definition . . . . . . . . . . . . . . . . . . .  15
     3.2.  Fragmentation rule  . . . . . . . . . . . . . . . . . . .  16
     3.3.  YANG Tree . . . . . . . . . . . . . . . . . . . . . . . .  17
   4.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  19
   5.  Security considerations . . . . . . . . . . . . . . . . . . .  19
   6.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  19
   7.  YANG Module . . . . . . . . . . . . . . . . . . . . . . . . .  19
   8.  Normative References  . . . . . . . . . . . . . . . . . . . .  33
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  33

1.  Introduction

2.  SCHC rules

   SCHC is a compression and fragmentation mechanism for constrained
   networks defined in [I-D.ietf-lpwan-ipv6-static-context-hc] it is
   based on a static context shared by two entities at the boundary this
   contrained network.  Draft [I-D.ietf-lpwan-ipv6-static-context-hc]
   provides an abstract representation of the rules used either for
   compression/decompression (or C/D) or fragmentation/reassembly (or F/
   R).  The goal of this document is to formalize the description of the
   rules to offer:

   o  universal representation of the rule to allow the same rule
      represention on both ends.  For instance; a device can provide the
      rule it uses to store them in the core SCHC C/D and F/R.

   o  a device or the core SCHC instance may update the other end to set
      upsome specific values (e.g.  IPv6 prefix, Destination
      address,...)




Minaburo & Toutain       Expires August 31, 2020                [Page 2]

Internet-Draft           LPWAN SCHC YANG module            February 2020


   o  ...

   This document defines a YANG module to represent both compression and
   fragmentation rules, which leads to common representation and values
   for the elements of the rules.  SCHC compression is generic, the main
   mechanism do no refers to a specific fields.  A field is abstractedh
   through an ID, a position, a direction and a value that can be a
   numerical value or a string.

   [I-D.ietf-lpwan-ipv6-static-context-hc] and
   [I-D.ietf-lpwan-coap-static-context-hc] specifies fields for IPv6,
   UDP, CoAP and OSCORE.

   Fragmentation requires a set of common parameters that are included
   in a rule.

2.1.  Compression Rules

   [I-D.ietf-lpwan-ipv6-static-context-hc] proposes an abstract
   representation of the compression rule.  A compression context for a
   device is composed of a set of rules.  Each rule contains information
   to describe a specific field in the header to be compressed.

     +-----------------------------------------------------------------+
     |                      Rule N                                     |
    +-----------------------------------------------------------------+|
    |                    Rule i                                       ||
   +-----------------------------------------------------------------+||
   |  (FID)            Rule 1                                        |||
   |+-------+--+--+--+------------+-----------------+---------------+|||
   ||Field 1|FL|FP|DI|Target Value|Matching Operator|Comp/Decomp Act||||
   |+-------+--+--+--+------------+-----------------+---------------+|||
   ||Field 2|FL|FP|DI|Target Value|Matching Operator|Comp/Decomp Act||||
   |+-------+--+--+--+------------+-----------------+---------------+|||
   ||...    |..|..|..|   ...      | ...             | ...           ||||
   |+-------+--+--+--+------------+-----------------+---------------+||/
   ||Field N|FL|FP|DI|Target Value|Matching Operator|Comp/Decomp Act|||
   |+-------+--+--+--+------------+-----------------+---------------+|/
   |                                                                 |
   \-----------------------------------------------------------------/


                Figure 1: Compression Decompression Context








Minaburo & Toutain       Expires August 31, 2020                [Page 3]

Internet-Draft           LPWAN SCHC YANG module            February 2020


2.2.  Field Identifier

   In the process of compression, the headers of the original packet are
   first parsed to create a list of fields.  This list of fields is
   matched again the rules to find the appropriate one and apply
   compression.  The link between the list given by the parsed fields
   and the rules is doen through a field ID.
   [I-D.ietf-lpwan-ipv6-static-context-hc] do not state how the field ID
   value can be constructed.  In the given example, it was given through
   a string indexed by the protocol name (e.g.  IPv6.version,
   CoAP.version,...).

   Using the YANG model, each field can be identified through a global
   YANG identityref.  A YANG field ID derives from the field-id-base-
   type.  Figure 2 gives some field ID definitions.  Note that some
   field IDs can be splitted is smaller pieces.  This is the case for
   "fid-ipv6-trafficclass-ds" and "fid-ipv6-trafficclass-ecn" which are
   a subset of "fid-ipv6-trafficclass-ds".

































Minaburo & Toutain       Expires August 31, 2020                [Page 4]

Internet-Draft           LPWAN SCHC YANG module            February 2020


     identity field-id-base-type  {
              description "Field ID with SID";
     }

     identity fid-ipv6-version {
              base field-id-base-type;
              description "IPv6 version field from RFC8200";
     }

     identity fid-ipv6-trafficclass {
              base field-id-base-type;
              description "IPv6 Traffic Class field from RFC8200";
     }

     identity fid-ipv6-trafficclass-ds {
             base field-id-base-type;
               description "IPv6 Traffic Class field from RFC8200,
                             DiffServ field from RFC3168";
     }

     identity fid-ipv6-trafficclass-ecn {
             base field-id-base-type;
               description "IPv6 Traffic Class field from RFC8200,
                      ECN field from RFC3168";
     }

     ...

     identity fid-coap-option-if-match {
             base field-id-base-type;
               description "CoAP option If-Match from RFC 7252";
     }

     identity fid-coap-option-uri-host {
             base field-id-base-type;
               description "CoAP option URI-Host from RFC 7252";
     }

     ...


            Figure 2: Definition of indentityref for field IDs

   Figure 2 gives an example of field ID identityref definitions.  The
   base identity is field-id-base-type, and field id are derived for it.
   The naming convention is "fid" followed by the protocol name and the
   field name.




Minaburo & Toutain       Expires August 31, 2020                [Page 5]

Internet-Draft           LPWAN SCHC YANG module            February 2020


   The yang model in annex gives the full definition of the field ID for
   [I-D.ietf-lpwan-ipv6-static-context-hc] and
   [I-D.ietf-lpwan-coap-static-context-hc].

   The type associated to this identity is field-id-type (cf.  Figure 3)

       typedef field-id-type {
           description "Field ID generic type.";
           type identityref {
               base field-id-base-type;
           }
       }

            Figure 3: Definition of indentityref for field IDs

2.3.  Field length

   Field length is either an integer giving the size of a field in bits
   or a function.  [I-D.ietf-lpwan-ipv6-static-context-hc] defines the
   "var" function which allows variable length fields in byte and
   [I-D.ietf-lpwan-coap-static-context-hc] defines the "tkl" function
   for managing the CoAP Token length field.

     identity field-length-base-type {
           description "used to extend field length functions";
     }

     identity fl-variable {
              base field-length-base-type;
              description "residue length in Byte is sent";
     }

     identity fl-token-length {
              base field-length-base-type;
              description "residue length in Byte is sent";
     }


             Figure 4: Definition of indetntyref for field IDs

   As for field ID, field length function can be defined as a
   identityref as shown in Figure 4.

   Therefore the type for field length is a union between an integer
   giving in bits the size of the length and the identityref (cf.
   Figure 5).





Minaburo & Toutain       Expires August 31, 2020                [Page 6]

Internet-Draft           LPWAN SCHC YANG module            February 2020


       typedef field-length-type {
           type union {
               type int64; /* positive length */
               type identityref { /* function */
                   base field-length-base-type;
               }
           }
       }

             Figure 5: Definition of indetntyref for field IDs

   The naming convention is fl followed by the function name as defined
   in SCHC specifications.

2.4.  Field position

   Field position is a positive integer which gives the position of a
   field, the default value is 1, but if the field is repeated several
   times, the value is higher.  value 0 indicates that the position is
   not important and is not taken into account during the rule selection
   process.

   Field position is a positive integer.  The type is an uint8.

2.5.  Direction Indicator

   The Direction Indicator (DI) is used to tell if a field appears in
   both direction (Bi) or only uplink (Up) or Downlink (Dw).























Minaburo & Toutain       Expires August 31, 2020                [Page 7]

Internet-Draft           LPWAN SCHC YANG module            February 2020


     identity direction-indicator-base-type {
           description "used to extend field length functions";
     }

     identity di-bidirectional {
              base direction-indicator-base-type;
              description "Direction Indication of bi directionality";
     }

     identity di-up {
              base direction-indicator-base-type;
              description "Direction Indication of upstream";
     }

     identity di-down {
              base direction-indicator-base-type;
              description "Direction Indication of downstream";
     }


       Figure 6: Definition of identityref for direction indicators

   Figure 6 gives the identityref for Direction Indicators.

   The type is "direction-indicator-type" (cf.  Figure 7).

       typedef direction-indicator-type {
           type identityref {
               base direction-indicator-base-type;
           }
       }

       Figure 7: Definition of identityref for direction indicators

2.6.  Target Value

   Target Value may be either a string or binary sequence.  For match-
   mapping, several of these values can be contained in a Target Value
   field.  In the data model, this is generalized by adding a position,
   which orders the list of values.  By default the position is set to
   0.

   The leaf "value" is not mandatory to represent a non existing value
   in a TV.







Minaburo & Toutain       Expires August 31, 2020                [Page 8]

Internet-Draft           LPWAN SCHC YANG module            February 2020


     grouping target-values-struct {
       leaf value {
         type union {
           type binary;
           type string;
         }
       }
       leaf position {
             type uint16;
       }
     }


                   Figure 8: Definition of target value

   Figure 8 gives the definition of a single element of a Target Value.
   In the rule, this will be used as a list, with position as a key.

2.7.  Matching Operator

   Matching Operator (MO) is a function applied between a field value
   provided by the parsed header and the target value.
   [I-D.ietf-lpwan-ipv6-static-context-hc] defines 4 MO.




























Minaburo & Toutain       Expires August 31, 2020                [Page 9]

Internet-Draft           LPWAN SCHC YANG module            February 2020


     identity matching-operator-base-type {
        description "used to extend Matching Operators with SID values";
     }

     identity mo-equal {
        base matching-operator-base-type;
        description "SCHC draft";
     }

     identity mo-ignore {
        base matching-operator-base-type;
        description "SCHC draft";
     }

     identity mo-msb {
        base matching-operator-base-type;
        description "SCHC draft";
     }

     identity mo-matching {
        base matching-operator-base-type;
        description "SCHC draft";
     }

            Figure 9: Definition of Matching Operator identity

   the type is "matching-operator-type" (cf.  Figure 10)

      typedef matching-operator-type {
           type identityref {
               base matching-operator-base-type;
           }
       }

              Figure 10: Definition of Matching Operator type

2.7.1.  Matching Operator arguments

   Some Matching Operator such as MSB can take some values.  Even if
   currently LSB is the only MO takes only one argument, in the future
   some MO may require several arguments.  They are viewed as a list of
   target-values-type.

2.8.  Compression Decompresison Actions

   Compresion Decompression Action (CDA) idenfied the function to use
   either for compression or decompression.
   [I-D.ietf-lpwan-ipv6-static-context-hc] defines 6 CDA.



Minaburo & Toutain       Expires August 31, 2020               [Page 10]

Internet-Draft           LPWAN SCHC YANG module            February 2020


       identity compression-decompression-action-base-type;

       identity cda-not-sent {
           base compression-decompression-action-base-type;
              description "from SCHC draft";
       }

       identity cda-value-sent {
           base compression-decompression-action-base-type;
              description "from SCHC draft";
       }

       identity cda-lsb {
           base compression-decompression-action-base-type;
              description "from SCHC draft";
       }

       identity cda-mapping-sent {
           base compression-decompression-action-base-type;
              description "from SCHC draft";
       }

       identity cda-compute-length {
           base compression-decompression-action-base-type;
              description "from SCHC draft";
       }

       identity cda-compute-checksum {
           base compression-decompression-action-base-type;
              description "from SCHC draft";
       }

       identity cda-deviid {
           base compression-decompression-action-base-type;
              description "from SCHC draft";
       }

      identity cda-appiid {
           base compression-decompression-action-base-type;
              description "from SCHC draft";
       }


     Figure 11: Definition of Compresion Decompression Action identity

   The type is "comp-decomp-action-type" (cf.  Figure 12)





Minaburo & Toutain       Expires August 31, 2020               [Page 11]

Internet-Draft           LPWAN SCHC YANG module            February 2020


      typedef comp-decomp-action-type {
           type identityref {
               base compression-decompression-action-base-type;
           }
       }


       Figure 12: Definition of Compresion Decompression Action type

2.8.1.  Compression Decompression Action arguments

   Currently no CDA requires argumetns, but the future some CDA may
   require several arguments.  They are viewed as a list of target-
   values-type.

3.  Rule definition

   A rule is either a C/D or an F/R rule.  A rule is identified by the
   rule ID value and its associated length.  The YANG grouping rule-id-
   type defines the structure used to represent a rule ID.  Length of 0
   is allowed to represent an implicit rule.






























Minaburo & Toutain       Expires August 31, 2020               [Page 12]

Internet-Draft           LPWAN SCHC YANG module            February 2020


// Define rule ID. Rule ID is composed of a RuleID value and a Rule ID Length

  grouping rule-id-type {
      leaf rule-id {
        type uint32;
        description "rule ID value, this value must be unique combined with the length";
      }
      leaf rule-length {
        type uint8 {
          range 0..32;
        }
                  description "rule ID length in bits, value 0 is for implicit rules";
      }
  }

// SCHC table for a specific device.

  container schc {
    leaf version{
        type uint64;
        mandatory false;
        description "used as an indication for versioning";
    }
    list rule {
        key "rule-id rule-length";
                uses rule-id-type;
                  choice nature {
                          case fragmentation {
                uses fragmentation-content;
              }
                case compression {
                uses compression-content;
         }
       }
         }
   }


                  Figure 13: Definition of a SCHC Context

   To access to a specfic rule, rule-id and its specific length is used
   as a key.  The rule is either a compression or a fragmentation rule.

   Each context can be identify though a version id.







Minaburo & Toutain       Expires August 31, 2020               [Page 13]

Internet-Draft           LPWAN SCHC YANG module            February 2020


3.1.  Compression rule

   A compression rule is composed of entries describing its processing
   (cf.  Figure 14).  An entry contains all the information defined in
   Figure 1 with the types defined above.

3.1.1.  Compression context representation.

   The compression rule described Figure 1 is associated to a rule ID.
   The compression rule entry is defined in Figure 14.  Each column in
   the table is either represented by a leaf or a list.  Note that
   Matching Operators and Compression Decompression actions can have
   arguments.  They are viewed a ordered list of strings and numbers as
   in target values.





































Minaburo & Toutain       Expires August 31, 2020               [Page 14]

Internet-Draft           LPWAN SCHC YANG module            February 2020


       grouping compression-rule-entry {
           leaf field-id {
               mandatory true;
               type schc-id:field-id-type;
           }
           leaf field-length {
               mandatory true;
               type schc-id:field-length-type;
           }
           leaf field-position {
               mandatory true;
               type uint8;
           }
           leaf direction-indicator {
               mandatory true;
               type schc-id:direction-indicator-type;
           }
           list target-values {
               key position;
               uses target-values-struct;
           }
           leaf mo {
               mandatory true;
               type schc-id:matching-operator-type;
           }
           list mo-value {
               key position;
               uses target-values-struct;
           }
           leaf cda {
               mandatory true;
               type schc-id:comp-decomp-action-type;
           }
           list cda-value {
               key position;
               uses target-values-struct;
           }
       }

               Figure 14: Definition of a compression entry

3.1.2.  Rule definition

   A compression rule is a list of entries.







Minaburo & Toutain       Expires August 31, 2020               [Page 15]

Internet-Draft           LPWAN SCHC YANG module            February 2020


     grouping compression-content {
       list entry {
           key "field-id field-position direction-indicator";
                 uses compression-rule-entry;
       }
     }

                Figure 15: Definition of a compression rule

   To identify a specific entry Field ID, position and direction are
   needed.

3.2.  Fragmentation rule

   Parameters for fragmentation are defined in Annex D of
   [I-D.ietf-lpwan-ipv6-static-context-hc].  Two new types are defined
   for Ack on Error acknowlement behavior (ack-behavior-type) and the
   RCS algorithm (RCS-algorithm-type).

    grouping fragmentation-content {
        leaf direction {
            type schc-id:direction-indicator-type;
            description "should be up or down";
        }

        leaf dtagsize {
            type uint8;
            description "size in bit of the DTag field";
        }
        leaf wsize {
            type uint8;
            description "size in bit of the window field";
        }
        leaf fcnsize {
            type uint8;
            description "size in bit of the FCN field";
        }
        leaf RCS-algorithm {
            type RCS-algorithm-type;
            default schc-id:RFC8724-RCS;
            description "Algoritm used for RCS";
        }
        leaf maximum-window-size {
            type uint16;
            description "by default 2^wsize - 1";
        }

        leaf retransmission-timer {



Minaburo & Toutain       Expires August 31, 2020               [Page 16]

Internet-Draft           LPWAN SCHC YANG module            February 2020


            type uint64;
            description "duration in seconds of the retransmission timer"; // Check the units
        }

        leaf inactivity-timer {
            type uint64;
            description "duration is seconds of the inactivity timer"; // check units
        }

        leaf max-ack-requests {
            type uint8;
        }

        leaf maximum-packet-size {
            type uint16;
            mandatory true;
            default 1280;
            description "When decompression is done, packet size must not strictly exceed this limit in Bytes";
        }

        choice mode {
            case no-ack;
            case ack-always;
            case ack-on-error {
                leaf tile-size {
                    type uint8;
                    description "size in bit of tiles";
                }
                leaf tile-in-All1 {
                    type boolean;
                    description "When true, sender and receiver except a tile in All-1 frag";
                }
                leaf ack-behavior {
                    type schc-id:ack-behavior-type;
                    mandatory true;
                }

            }
       }
    }

               Figure 16: Definition of a fragmentation rule

3.3.  YANG Tree







Minaburo & Toutain       Expires August 31, 2020               [Page 17]

Internet-Draft           LPWAN SCHC YANG module            February 2020


module: schc
  +--rw schc
     +--rw version?   uint64
     +--rw rule* [rule-id rule-length]
        +--rw rule-id                       uint32
        +--rw rule-length                   uint8
        +--rw (nature)?
           +--:(fragmentation)
           |  +--rw direction?              schc-id:direction-indicator-type
           |  +--rw dtagsize?               uint8
           |  +--rw wsize?                  uint8
           |  +--rw fcnsize?                uint8
           |  +--rw RCS-algorithm?          RCS-algorithm-type
           |  +--rw maximum-window-size?    uint16
           |  +--rw retransmission-timer?   uint64
           |  +--rw inactivity-timer?       uint64
           |  +--rw max-ack-requests?       uint8
           |  +--rw maximum-packet-size     uint16
           |  +--rw (mode)
           |     +--:(no-ack)
           |     +--:(ack-always)
           |     +--:(ack-on-error)
           |        +--rw tile-size?        uint8
           |        +--rw tile-in-All1?     boolean
           |        +--rw ack-behavior      schc-id:ack-behavior-type
           +--:(compression)
              +--rw entry* [field-id field-position direction-indicator]
                 +--rw field-id               schc-id:field-id-type
                 +--rw field-length           schc-id:field-length-type
                 +--rw field-position         uint8
                 +--rw direction-indicator    schc-id:direction-indicator-type
                 +--rw target-values* [position]
                 |  +--rw value?      union
                 |  +--rw position    uint16
                 +--rw mo                     schc-id:matching-operator-type
                 +--rw mo-value* [position]
                 |  +--rw value?      union
                 |  +--rw position    uint16
                 +--rw cda                    schc-id:comp-decomp-action-type
                 +--rw cda-value* [position]
                    +--rw value?      union
                    +--rw position    uint16


                                 Figure 17






Minaburo & Toutain       Expires August 31, 2020               [Page 18]

Internet-Draft           LPWAN SCHC YANG module            February 2020


4.  IANA Considerations

   This document has no request to IANA.

5.  Security considerations

   This document does not have any more Security consideration than the
   ones already raised on [I-D.ietf-lpwan-ipv6-static-context-hc]

6.  Acknowledgements

   The authors would like to thank Dominique Barthel, Carsten Bormann,
   Alexander Pelov.

7.  YANG Module

   Currently the data model is split into two parts.  The first one is
   dedicated to SCHC identifiers and the second one contains the rules
   definition.  The goal is to allow some stabilities in the rule
   identifiers if new SCHC identfiers are added.  When the model will be
   stable, these two files will be merged.

<code begins> file schc-id@2020-02-28.yang
module schc-id{
       yang-version "1";
       namespace "urn:ietf:lpwan:schc:schc-id";
       prefix "schc-id";

    description
        "Identifiers used in SCHC data model.";

    revision 2020-02-28 {
        description "Add fragmentation identifiers";
        }
    revision 2020-02-11 {
        description "Clean up";
        }
        revision 2020-01-07 {
                description "First version of the SCHC identifiers";
        }

// -------------------------
//  Field ID type definition
//--------------------------

// generic value TV definition

  identity field-id-base-type  {



Minaburo & Toutain       Expires August 31, 2020               [Page 19]

Internet-Draft           LPWAN SCHC YANG module            February 2020


           description "Field ID with SID";
  }

  identity fid-ipv6-version {
           base field-id-base-type;
           description "IPv6 version field from RFC8200";
  }

  identity fid-ipv6-trafficclass {
           base field-id-base-type;
           description "IPv6 Traffic Class field from RFC8200";
  }

  identity fid-ipv6-trafficclass-ds {
           base field-id-base-type;
           description "IPv6 Traffic Class field from RFC8200,
       DiffServ field from RFC3168";
  }

  identity fid-ipv6-trafficclass-ecn {
           base field-id-base-type;
           description "IPv6 Traffic Class field from RFC8200,
       ECN field from RFC3168";
  }

  identity fid-ipv6-flowlabel {
           base field-id-base-type;
           description "IPv6 Flow Label field from RFC8200";
  }

  identity fid-ipv6-payloadlength {
           base field-id-base-type;
           description "IPv6 Payload Length field from RFC8200";
  }

  identity fid-ipv6-nextheader {
           base field-id-base-type;
           description "IPv6 Next Header field from RFC8200";
  }

  identity fid-ipv6-hoplimit {
           base field-id-base-type;
           description "IPv6 Next Header field from RFC8200";
  }

  identity fid-ipv6-devprefix {
           base field-id-base-type;
           description "correspond either to the source address or the desdination



Minaburo & Toutain       Expires August 31, 2020               [Page 20]

Internet-Draft           LPWAN SCHC YANG module            February 2020


                        address prefix of RFC 8200. Depending if it is respectively
                        a uplink or an downklink message.";
  }

  identity fid-ipv6-deviid {
           base field-id-base-type;
           description "correspond either to the source address or the desdination
                        address prefix of RFC 8200. Depending if it is respectively
                        a uplink or an downklink message.";
  }

  identity fid-ipv6-appprefix {
           base field-id-base-type;
           description "correspond either to the source address or the desdination
                        address prefix of RFC 768. Depending if it is respectively
                        a downlink or an uplink message.";
  }

  identity fid-ipv6-appiid {
           base field-id-base-type;
           description "correspond either to the source address or the desdination
                        address prefix of RFC 768. Depending if it is respectively
                        a downlink or an uplink message.";
  }

  identity fid-udp-dev-port {
           base field-id-base-type;
           description "UDP length from RFC 768";
  }

  identity fid-udp-app-port {
           base field-id-base-type;
           description "UDP length from RFC 768";
  }

  identity fid-udp-length {
           base field-id-base-type;
           description "UDP length from RFC 768";
  }

  identity fid-udp-checksum {
           base field-id-base-type;
           description "UDP length from RFC 768";
  }

  identity fid-coap-version {
           base field-id-base-type;
           description "CoAP version from RFC 7252";



Minaburo & Toutain       Expires August 31, 2020               [Page 21]

Internet-Draft           LPWAN SCHC YANG module            February 2020


  }

  identity fid-coap-type {
           base field-id-base-type;
           description "CoAP type from RFC 7252";
  }

  identity fid-coap-tkl {
           base field-id-base-type;
           description "CoAP token length from RFC 7252";
  }

  identity fid-coap-code {
           base field-id-base-type;
           description "CoAP code from RFC 7252";
  }

  identity fid-coap-code-class {
           base field-id-base-type;
           description "CoAP code from RFC 7252";
  }

  identity fid-coap-code-detail {
           base field-id-base-type;
           description "CoAP code from RFC 7252";
  }

  identity fid-coap-mid {
           base field-id-base-type;
           description "CoAP message ID from RFC 7252";
  }

  identity fid-coap-token {
           base field-id-base-type;
           description "CoAP token from RFC 7252";
  }

  identity fid-coap-option-if-match {
           base field-id-base-type;
           description "CoAP option If-Match from RFC 7252";
  }

  identity fid-coap-option-uri-host {
           base field-id-base-type;
           description "CoAP option URI-Host from RFC 7252";
  }

  identity fid-coap-option-etag {



Minaburo & Toutain       Expires August 31, 2020               [Page 22]

Internet-Draft           LPWAN SCHC YANG module            February 2020


           base field-id-base-type;
           description "CoAP option Etag from RFC 7252";
  }

  identity fid-coap-option-if-none-match {
           base field-id-base-type;
           description "CoAP option if-none-match from RFC 7252";
  }

  identity fid-coap-option-observe {
           base field-id-base-type;
           description "CoAP option Observe from RFC 7641";
  }

  identity fid-coap-option-uri-port {
           base field-id-base-type;
           description "CoAP option Uri-Port from RFC 7252";
  }

  identity fid-coap-option-location-path {
           base field-id-base-type;
           description "CoAP option Location-Path from RFC 7252";
  }

  identity fid-coap-option-uri-path {
           base field-id-base-type;
           description "CoAP option Uri-Path from RFC 7252";
  }

  identity fid-coap-option-content-format {
           base field-id-base-type;
           description "CoAP option Content Format from RFC 7252";
  }

  identity fid-coap-option-max-age {
           base field-id-base-type;
           description "CoAP option Max-Age from RFC 7252";
  }

  identity fid-coap-option-uri-query {
           base field-id-base-type;
           description "CoAP option Uri-Query from RFC 7252";
  }

  identity fid-coap-option-accept {
           base field-id-base-type;
           description "CoAP option Max-Age from RFC 7252";
  }



Minaburo & Toutain       Expires August 31, 2020               [Page 23]

Internet-Draft           LPWAN SCHC YANG module            February 2020


  identity fid-coap-option-location-query {
           base field-id-base-type;
           description "CoAP option Location-Query from RFC 7252";
  }

  identity fid-coap-option-block2 {
           base field-id-base-type;
           description "CoAP option Block2 from RFC 7959";
  }

  identity fid-coap-option-block1 {
           base field-id-base-type;
           description "CoAP option Block1 from RFC 7959";
  }

  identity fid-coap-option-size2 {
           base field-id-base-type;
           description "CoAP option size2 from RFC 7959";
  }

  identity fid-coap-option-proxy-uri {
           base field-id-base-type;
           description "CoAP option Proxy-Uri from RFC 7252";
  }

  identity fid-coap-option-proxy-scheme {
           base field-id-base-type;
           description "CoAP option Proxy-scheme from RFC 7252";
  }

  identity fid-coap-option-size1 {
           base field-id-base-type;
           description "CoAP option Size1 from RFC 7252";
  }

  identity fid-coap-option-no-response {
           base field-id-base-type;
           description "CoAP option No response from RFC 7967";
  }

  identity fid-coap-option-end-option {
           base field-id-base-type;
           description "CoAP End Option from RFC 7967";
  }


//----------------------------------
// Field Length type definition



Minaburo & Toutain       Expires August 31, 2020               [Page 24]

Internet-Draft           LPWAN SCHC YANG module            February 2020


//----------------------------------

  identity field-length-base-type {
        description "used to extend field length functions";
  }

  identity fl-variable {
           base field-length-base-type;
           description "residue length in Byte is sent";
  }

  identity fl-token-length {
           base field-length-base-type;
           description "residue length in Byte is sent";
  }

//---------------------------------
// Direction Indicator type
//---------------------------------

  identity direction-indicator-base-type {
        description "used to extend field length functions";
  }

  identity di-bidirectional {
           base direction-indicator-base-type;
           description "Direction Indication of bi directionality";
  }

  identity di-up {
           base direction-indicator-base-type;
           description "Direction Indication of upstream";
  }

  identity di-down {
           base direction-indicator-base-type;
           description "Direction Indication of downstream";
  }

//----------------------------------
// Matching Operator type definition
//----------------------------------

   identity matching-operator-base-type {
      description "used to extend Matching Operators with SID values";
   }

   identity mo-equal {



Minaburo & Toutain       Expires August 31, 2020               [Page 25]

Internet-Draft           LPWAN SCHC YANG module            February 2020


      base matching-operator-base-type;
      description "SCHC draft";
   }

   identity mo-ignore {
      base matching-operator-base-type;
      description "SCHC draft";
   }

   identity mo-msb {
      base matching-operator-base-type;
      description "SCHC draft";
   }

   identity mo-matching {
      base matching-operator-base-type;
      description "SCHC draft";
   }

//------------------------------
// CDA type definition
//------------------------------

    identity compression-decompression-action-base-type;

    identity cda-not-sent {
        base compression-decompression-action-base-type;
            description "from SCHC draft";
    }

    identity cda-value-sent {
        base compression-decompression-action-base-type;
            description "from SCHC draft";
    }

    identity cda-lsb {
        base compression-decompression-action-base-type;
            description "from SCHC draft";
    }

    identity cda-mapping-sent {
        base compression-decompression-action-base-type;
            description "from SCHC draft";
    }

    identity cda-compute-length {
        base compression-decompression-action-base-type;
            description "from SCHC draft";



Minaburo & Toutain       Expires August 31, 2020               [Page 26]

Internet-Draft           LPWAN SCHC YANG module            February 2020


    }

    identity cda-compute-checksum {
        base compression-decompression-action-base-type;
            description "from SCHC draft";
    }

    identity cda-deviid {
        base compression-decompression-action-base-type;
            description "from SCHC draft";
    }

   identity cda-appiid {
        base compression-decompression-action-base-type;
            description "from SCHC draft";
    }

// -- type definition

    typedef field-id-type {
        description "Field ID generic type.";
        type identityref {
            base field-id-base-type;
        }
    }

    typedef field-length-type {
        type union {
            type int64; /* positive length */
            type identityref { /* function */
                base field-length-base-type;
            }
        }
    }

    typedef direction-indicator-type {
        type identityref {
            base direction-indicator-base-type;
        }
    }

    typedef matching-operator-type {
        type identityref {
            base matching-operator-base-type;
        }
    }

    typedef comp-decomp-action-type {



Minaburo & Toutain       Expires August 31, 2020               [Page 27]

Internet-Draft           LPWAN SCHC YANG module            February 2020


        type identityref {
            base compression-decompression-action-base-type;
        }
    }

// -- fragmentation types

    identity ack-behavior-base-type {
        description "type to define when to send an Acknowledgment message";
    }

    identity ack-behavior-after-All0 {
        description "fragmentor expect Ack after sending All0 fragment.";
        base ack-behavior-base-type;
    }

    identity ack-behavior-after-All1 {
        description "fragmentor expect Ack after sending All1 fragment.";
        base ack-behavior-base-type;
    }

    identity ack-behavior-after-Always {
        description "fragmentor expect Ack after sending every fragment.";
        base ack-behavior-base-type;
    }

    typedef ack-behavior-type {
        type identityref {
            base ack-behavior-base-type;
        }
    }

// -- fragmentation types

    identity RCS-algorithm-base-type {
        description "identify which algorithm is used to compute RSC.
        The algorithm defines also the size if the RSC field.";
    }

    identity RFC8724-RCS {
        description "CRC 32 defined as default RCS in RFC8724.";
        base RCS-algorithm-base-type;
    }

    typedef RCS-algorithm-type {
        type identityref {
            base RCS-algorithm-base-type;
        }



Minaburo & Toutain       Expires August 31, 2020               [Page 28]

Internet-Draft           LPWAN SCHC YANG module            February 2020


    }


}
<code ends>

                                 Figure 18

<code begins> file schc@2020-02-28.yang
module schc{
    yang-version "1";
    namespace "urn:ietf:lpwan:schc:rules-description";
    prefix "schc";

    import schc-id {
        prefix "schc-id";
    }

    description
        "Generic Data model for Static Context Header Compression Rule for SCHC,
        based on draft-ietf-lpwan-ipv6-static-context-hc-18. Include compression
        rules and fragmentation rules.";

    revision 2020-02-28 {
        description "Add Fragmentation parameters";
    }

    revision 2020-01-23 {
        description "Modified TV with binary and union";
    }

    revision 2020-01-07 {
        description "First version of the YANG model";
    }


// --------  RULE DEFINITION ------------

    grouping target-values-struct {
        leaf value {
            type union {
                type binary;
                type string;
            }
        }
        leaf position {
            type uint16;
        }



Minaburo & Toutain       Expires August 31, 2020               [Page 29]

Internet-Draft           LPWAN SCHC YANG module            February 2020


    }

    grouping compression-rule-entry {
        leaf field-id {
            mandatory true;
            type schc-id:field-id-type;
        }
        leaf field-length {
            mandatory true;
            type schc-id:field-length-type;
        }
        leaf field-position {
            mandatory true;
            type uint8;
        }
        leaf direction-indicator {
            mandatory true;
            type schc-id:direction-indicator-type;
        }
        list target-values {
            key position;
            uses target-values-struct;
        }
        leaf mo {
            mandatory true;
            type schc-id:matching-operator-type;
        }
        list mo-value {
            key position;
            uses target-values-struct;
        }
        leaf cda {
            mandatory true;
            type schc-id:comp-decomp-action-type;
        }
        list cda-value {
            key position;
            uses target-values-struct;
        }
    }

    grouping fragmentation-content {
        leaf direction {
            type schc-id:direction-indicator-type;
            description "should be up or down";
        }

        leaf dtagsize {



Minaburo & Toutain       Expires August 31, 2020               [Page 30]

Internet-Draft           LPWAN SCHC YANG module            February 2020


            type uint8;
            description "size in bit of the DTag field";
        }
        leaf wsize {
            type uint8;
            description "size in bit of the window field";
        }
        leaf fcnsize {
            type uint8;
            description "size in bit of the FCN field";
        }
        leaf RCS-algorithm {
            type RCS-algorithm-type;
            default schc-id:RFC8724-RCS;
            description "Algoritm used for RCS";
        }
        leaf maximum-window-size {
            type uint16;
            description "by default 2^wsize - 1";
        }

        leaf retransmission-timer {
            type uint64;
            description "duration in seconds of the retransmission timer"; // Check the units
        }

        leaf inactivity-timer {
            type uint64;
            description "duration is seconds of the inactivity timer"; // check units
        }

        leaf max-ack-requests {
            type uint8;
        }

        leaf maximum-packet-size {
            type uint16;
            mandatory true;
            default 1280;
            description "When decompression is done, packet size must not strictly exceed this limit in Bytes";
        }

        choice mode {
            mandatory true;
            case no-ack;
            case ack-always;
            case ack-on-error {
                leaf tile-size {



Minaburo & Toutain       Expires August 31, 2020               [Page 31]

Internet-Draft           LPWAN SCHC YANG module            February 2020


                    type uint8;
                    description "size in bit of tiles";
                }
                leaf tile-in-All1 {
                    type boolean;
                    description "When true, sender and receiver except a tile in All-1 frag";
                }
                leaf ack-behavior {
                    type schc-id:ack-behavior-type;
                    mandatory true;
                }

            }
       }
    }

    grouping compression-content {
        list entry {
            key "field-id field-position direction-indicator";
            uses compression-rule-entry;
        }
    }

// Define rule ID. Rule ID is composed of a RuleID value and a Rule ID Length

    grouping rule-id-type {
        leaf rule-id {
            type uint32;
            description "rule ID value, this value must be unique combined with the length";
        }
        leaf rule-length {
            type uint8 {
                range 0..32;
            }
            description "rule ID length in bits, value 0 is for implicit rules";
        }
    }

// SCHC table for a specific device.

    container schc {
        leaf version{
            type uint64;
            mandatory false;
            description "used as an indication for versioning";
        }
        list rule {
            key "rule-id rule-length";



Minaburo & Toutain       Expires August 31, 2020               [Page 32]

Internet-Draft           LPWAN SCHC YANG module            February 2020


            uses rule-id-type;
            choice nature {
                case fragmentation {
                    uses fragmentation-content;
                }
                case compression {
                    uses compression-content;
                }
            }
        }
    }


}

<code ends>

                                 Figure 19

8.  Normative References

   [I-D.ietf-lpwan-coap-static-context-hc]
              Minaburo, A., Toutain, L., and R. Andreasen, "LPWAN Static
              Context Header Compression (SCHC) for CoAP", draft-ietf-
              lpwan-coap-static-context-hc-12 (work in progress),
              December 2019.

   [I-D.ietf-lpwan-ipv6-static-context-hc]
              Minaburo, A., Toutain, L., Gomez, C., Barthel, D., and J.
              Zuniga, "Static Context Header Compression (SCHC) and
              fragmentation for LPWAN, application to UDP/IPv6", draft-
              ietf-lpwan-ipv6-static-context-hc-24 (work in progress),
              December 2019.

   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, "The Constrained
              Application Protocol (CoAP)", RFC 7252,
              DOI 10.17487/RFC7252, June 2014,
              <https://www.rfc-editor.org/info/rfc7252>.

Authors' Addresses

   Ana Minaburo
   Acklio
   1137A avenue des Champs Blancs
   35510 Cesson-Sevigne Cedex
   France

   Email: ana@ackl.io



Minaburo & Toutain       Expires August 31, 2020               [Page 33]

Internet-Draft           LPWAN SCHC YANG module            February 2020


   Laurent Toutain
   Institut MINES TELECOM; IMT Atlantique
   2 rue de la Chataigneraie
   CS 17607
   35576 Cesson-Sevigne Cedex
   France

   Email: Laurent.Toutain@imt-atlantique.fr











































Minaburo & Toutain       Expires August 31, 2020               [Page 34]
