inferred_ipv4_length === "This encoding method does not generate any bits
   	in the compressed header. Upon decompression the uncomp_value
   	attribute of the IPv4 total length field is inferred from the
   	amount of uncompressed data.";

inferred_ipv6_length === "This encoding method does not generate any bits
   	in the compressed header. Upon decompression the uncomp_value
   	attribute of the IPv6 payload length field is inferred from
   	the amount of uncompressed data.";

inferred_udp_length  === "This encoding method does not generate any bits
   	in the compressed header. Upon decompression the uncomp_value
   	attribute of the UDP length field is inferred from the amount
   	of uncompressed data.";

inferred_ipv4_header_checksum === "This encoding method does not generate
   	any bits in the compressed header. Upon decompression the
   	checksum value is re-calculated from the uncompressed header
   	data as specified in section 3.1 of RFC 791.";

inferred_rtp_timestamp === "This encoding method does not generate any
   	bits in the compressed header. Upon decompression the
   	uncompressed timestamp value is calculated from the RTP
   	sequence number.";
uncompressed_format = ;

compressed_format = crc_value, %[ 3 ]
uncompressed_format = ;

compressed_format = crc_value, %[ 7 ]
uncompressed_format = version,	  %[  4 ]
   			      hdr_length, %[  4 ]
   			      tos,	  %[  6 ]
   			      ecn_flags,  %[  2 ]
   			      length,	  %[ 16 ]
   			      ip_id,	  %[ 16 ]
   			      df,	  %[  1 ]
   			      mf,	  %[  1 ]
   			      rf,	  %[  1 ]
   			      offset,	  %[ 13 ]
   			      ttl,	  %[  8 ]
   			      protocol,	  %[  8 ]
   			      checksum,	  %[ 16 ]
   			      src_addr,	  %[ 32 ]
   			      dst_addr;	  %[ 32 ]

default_methods =
format_ipv4 =
uncompressed_format = ;

format_inner_nbo = ip_id,
format_inner_non_nbo = ip_id,
format_outer_nbo = ip_id,
format_outer_non_nbo = ip_id,
ipv6 === {

uncompressed_format = version,	      %[   4 ]
   			      traffic_class,  %[   6 ]
   			      ecn_flags,      %[   2 ]
   			      flow_label,     %[  20 ]
   			      payload_length, %[  16 ]
   			      next_header,    %[   8 ]
   			      hop_limit,      %[   8 ]
   			      src_addr,	      %[ 128 ]
   			      dst_addr;	      %[ 128 ]

default_methods =
compressed_format = ;

uncompressed_format_ipv4 = ipv4_header;

uncompressed_format_ipv6 = ipv6_header;

uncompressed_format_ipv4v4 = outer_ipv4_header,
   				     inner_ipv4_header;

uncompressed_format_ipv4v6 = outer_ipv4_header,
   				     inner_ipv6_header;

uncompressed_format_ipv6v4 = outer_ipv6_header,
   				     inner_ipv4_header;

uncompressed_format_ipv6v6 = outer_ipv6_header,
   				     inner_ipv6_header;

format_ipv4 =
format_ipv6 =
format_ipv4v4 =
format_ipv4v6 =
format_ipv6v4 =
format_ipv6v6 =
uncompressed_format = udp_src_port, %[ 16 ]
   			      udp_dst_port, %[ 16 ]
   			      udp_length,   %[ 16 ]
   			      udp_checksum; %[ 16 ]

default_methods =
format_compressed =	% NOTE: udp_checksum not present here!
uncompressed_format = ;

format_without_extension =
format_extension0 = discriminator, %[ 2 ]
   			    sn,		   %[ 3 ]
   			    pt,		   %[ 3 ]
format_extension1 = discriminator, %[ 2 ]
   			    sn,		   %[ 3 ]
   			    pt,		   %[ 3 ]
   			    mt,		   %[ 8 ]
format_extension2 = discriminator, %[  2 ]
   			    sn,		   %[  3 ]
   			    pt,		   %[ 11 ]
   			    mt,		   %[  8 ]
format_extension3 = discriminator,        %[ 2 ]
   			    s,		          %[ 1 ]
   			    r_ts,	          %[ 1 ]
   			    tsc,	          %[ 1 ]
   			    i,		          %[ 1 ]
   			    ip,		          %[ 1 ]
   			    rtp,	          %[ 1 ]
   			    inner_ip_flags,       % 0 or 7 bits
   			    ip2,	          % 0 or 1 bit
   			    outer_ip_flags,       % 0 or 8 bits
   			    sn,		          % 0 or 8 bits
   			    ts,		          % 0 to 4 octets
   			    inner_ip_fields,      % optional, variable length
   			    ip_id,	          % 0 or 16 bits
   			    outer_ip_fields,      % optional, variable length
   			    rtp_flags_and_fields, % optional, variable length
uncompressed_format = ;

format_without_ip_id =
format_with_ip_id = ip_id,
uncompressed_format = ;

format_without_ah_data =
format_with_ah_data = ah_data,
uncompressed_format = ;

format_without_gre_checksum =
format_with_gre_checksum = gre_checksum,
uncompressed_format = ;

compressed_format = ip_id,
   			    ah_data,
   			    gre_checksum,
uncompressed_format = ;

format_without_udp_checksum =
format_with_udp_checksum = udp_checksum,
uncompressed_format = ;

compressed_format = outer_ip,
   			    inner_ip,
   			    udp_checksum,
R = 0;	% compression modes
U = 1;
O = 2;
rtp_udp_ip === {

uncompressed_format = ip_headers,
   			      udp_header, %[  8 ]
   			      version,	  %[  2 ]
   			      padding,	  %[  1 ]
   			      rtpext,	  %[  1 ]
   			      csrc_count, %[  4 ]
   			      marker,	  %[  1 ]
   			      payload,	  %[  7 ]
   			      seq_number, %[ 16 ]
   			      timestamp,  %[ 32 ]
   			      ssrc,	  %[ 32 ]
   			      csrc;

default_methods =
format_r_0 = discriminator, %[ 2 ]
   		     seq_number,    %[ 6 ]
   		     random_parts,
format_r_0_crc = discriminator, %[ 2 ]
   			 seq_number,    %[ 7 ]
   			 crc,	        %[ 7 ]
   			 random_parts,
format_uo_0 = discriminator, %[ 1 ]
   		      seq_number,    %[ 4 ]
   		      crc,	     %[ 3 ]
   		      random_parts,
format_r_1 = discriminator, %[ 2 ]
   		     seq_number,    %[ 6 ]
   		     marker,	    %[ 1 ]
   		     x,		    %[ 1 ]
   		     timestamp,	    %[ 6 ]
   		     extension,
   		     random_parts,
format_r_1_id = discriminator, %[ 2 ]
   			seq_number,    %[ 6 ]
   			marker,	       %[ 1 ]
   			x,	       %[ 1 ]
   			t,	       %[ 1 ]
   			ip_id,	       %[ 5 ]
   			extension,
   			random_parts,
format_r_1_ts = discriminator, %[ 2 ]
   			seq_number,    %[ 6 ]
   			marker,	       %[ 1 ]
   			x,	       %[ 1 ]
   			t,	       %[ 1 ]
   			timestamp,     %[ 5 ]
   			extension,
   			random_parts,
format_uo_1 = discriminator, %[ 2 ]
   		      timestamp,     %[ 6 ]
   		      marker,	     %[ 1 ]
   		      seq_number,    %[ 4 ]
   		      crc,	     %[ 3 ]
   		      random_parts,
format_uo_1_id = discriminator, %[ 2 ]
   			 t,	        %[ 1 ]
   			 ip_id,	        %[ 5 ]
   			 x,	        %[ 1 ]
   			 seq_number,    %[ 4 ]
   			 crc,	        %[ 3 ]
   			 extension,
   			 random_parts,
format_uo_1_ts = discriminator, %[ 2 ]
   			 t,	        %[ 1 ]
   			 timestamp,     %[ 5 ]
   			 marker,	%[ 1 ]
   			 seq_number,    %[ 4 ]
   			 crc,	        %[ 3 ]
   			 random_parts,
format_uor_2 = discriminator, %[ 3 ]
   		       timestamp,     %[ 6 ]
   		       marker,	      %[ 1 ]
   		       seq_number,    %[ 6 ]
   		       x,	      %[ 1 ]
   		       crc,	      %[ 7 ]
   		       extension,
   		       random_parts,
format_uor_2_id = discriminator, %[ 3 ]
   			  ip_id,	 %[ 5 ]
   			  t,		 %[ 1 ]
   			  marker,	 %[ 1 ]
   			  seq_number,	 %[ 6 ]
   			  x,		 %[ 1 ]
   			  crc,		 %[ 7 ]
   			  extension,
   			  random_parts,
format_uor_2_ts = discriminator, %[ 3 ]
   			  timestamp,	 %[ 5 ]
   			  t,		 %[ 1 ]
   			  marker,	 %[ 1 ]
   			  seq_number,	 %[ 6 ]
   			  x,		 %[ 1 ]
   			  crc,		 %[ 7 ]
   			  extension,
   			  random_parts,
