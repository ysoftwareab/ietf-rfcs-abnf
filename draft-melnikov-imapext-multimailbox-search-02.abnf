search =    "SEARCH" [search-source-opts]
               [search-return-opts] SP search-program


               [[anchor8: Defined in RFC 4466 (updated to reference
               search-criteria):]]

search-program =  ["CHARSET" SP charset SP]
               search-criteria
               ;; CHARSET argument to SEARCH MUST be
               ;; registered with IANA.


search-source-opts =  SP "IN" SP "(" mbox-or-pat [SP "(" scope-
               options ")"] ")"


scope-option =  "DEPTH" SP number /
               scope-option-ext


scope-options =  scope-option *(SP scope-option)
               ;; a given option may only appear once


scope-option-name =  tagged-ext-label


scope-option-ext =  scope-option-name [SP scope-option-value]


scope-option-value=  tagged-ext-val
               ;; This non-terminal shows recommended syntax
               ;; for future extensions.


               [[anchor9: Also defined in FILTERS:]]

search-criteria =  search-key *(SP search-key)

               [[anchor10: Redefining search-correlator from RFC 4466:]]
search-correlator =  SP "(" single-correlator *(SP single-correlator)
               ")"


               [[anchor11: This is a new non-terminal:]]

single-correlator =  "TAG" SP tag-string /
               "MAILBOX" SP astring


               [[anchor12: The following 2 are borrowed from LISTEXT:]]

mbox-or-pat =  list-mailbox / patterns


patterns =  "(" list-mailbox *(SP list-mailbox) ")"



