k=1                        k=-d


k=1                        k=-d


g_ana = 0.94 - 0.02*C, and
g_syn = 0.94 + 0.02*C,


b_ana = F_ana * [0.25, 0.5, 0.25], and
b_syn = F_syn * [0.25, 0.5, 0.25].


c_tilt = 0.4, and as
c_tilt = 0.04 + 0.06 * C


predGain = ( | | 1 - (r_k)^2 )^(-0.5),
k=1


LSF_q = argmin { (LSF - c)' * W * (LSF - c) + mu * rate },
                 c in C


M = \  Ms,
                                     /_
s=1





T = | | Ms
s=1


RD = u * (b - cb_i)' * W_ltp * (b - cb_i) + r_i,


i=-d


i=1


EXESUFFIX =
LIBPREFIX = lib
LIBSUFFIX = .a
OBJSUFFIX = .o

CC     = $(TOOLCHAIN_PREFIX)gcc$(TOOLCHAIN_SUFFIX)
AR     = $(TOOLCHAIN_PREFIX)ar
RANLIB = $(TOOLCHAIN_PREFIX)ranlib
CP     = $(TOOLCHAIN_PREFIX)cp

cflags-from-defines    = $(addprefix -D,$(1))
cflags-from-includes   = $(addprefix -I,$(1))
ldflags-from-ldlibdirs = $(addprefix -L,$(1))
ldlibs-from-libs       = $(addprefix -l,$(1))

VPATH = ./ \
        interface \
        src \
        test

LIB_NAME = SKP_SILK_SDK
TARGET = $(LIBPREFIX)$(LIB_NAME)$(LIBSUFFIX)

SRCS_C = $(wildcard src/*.c)

ENCODER_SRCS_C = test/Encoder.c
DECODER_SRCS_C = test/Decoder.c
SIGNALCMP_SRCS_C = test/signalCompare.c
LIBS = \
        $(LIB_NAME)

LDLIBDIRS = ./

y32 = p[ dd ];                                    /* QPoly */
x_Q16 = SKP_LSHIFT( x, 4 );
y32 = SKP_SMLAWW( p[ n ], y32, x_Q16 );       /* QPoly */
dd = SKP_RSHIFT( d, 1 );

p = P;    /* Pointer to polynomial */

xlo = SKP_Silk_LSFCosTab_FIX_Q12[ 0 ]; // Q12
ylo = SKP_Silk_A2NLSF_eval_poly( p, xlo, dd );

p = Q;                      /* Pointer to polynomial */
ylo = SKP_Silk_A2NLSF_eval_poly( p, xlo, dd );
root_ix = 1;                /* Index of current root */
root_ix = 0;                /* Index of current root */





k = 1;                          /* Loop counter */
i = 0;                          /* Counter for bandwidth expansions applied */
xhi = SKP_Silk_LSFCosTab_FIX_Q12[   k       >> 1 ] +
          ( ( SKP_Silk_LSFCosTab_FIX_Q12[ ( k + 1 ) >> 1 ] -
              SKP_Silk_LSFCosTab_FIX_Q12[   k       >> 1 ] ) >> 1 );    /* Q12 */
xhi = SKP_Silk_LSFCosTab_FIX_Q12[ k ]; /* Q12 */
yhi = SKP_Silk_A2NLSF_eval_poly( p, xhi, dd );

ffrac = -128;
ffrac = -256;
xmid = SKP_RSHIFT_ROUND( xlo + xhi, 1 );
ymid = SKP_Silk_A2NLSF_eval_poly( p, xmid, dd );

xhi = xmid;
yhi = ymid;
xlo = xmid;
ylo = ymid;
ffrac = SKP_ADD_RSHIFT( ffrac,  64, m );
ffrac = SKP_ADD_RSHIFT( ffrac, 128, m );
den = ylo - yhi;





nom = SKP_LSHIFT( ylo, 8 - BIN_DIV_STEPS_A2NLSF_FIX ) + SKP_RSHIFT( den, 1 );
p = PQ[ root_ix & 1 ];

xlo = SKP_Silk_LSFCosTab_FIX_Q12[ ( k - 1 ) >> 1 ] +
              ( ( SKP_Silk_LSFCosTab_FIX_Q12[   k       >> 1 ] -
                  SKP_Silk_LSFCosTab_FIX_Q12[ ( k - 1 ) >> 1 ] ) >> 1 ); // Q12
xlo = SKP_Silk_LSFCosTab_FIX_Q12[ k - 1 ]; // Q12
ylo = SKP_LSHIFT( 1 - ( root_ix & 2 ), 12 );
xlo    = xhi;
ylo    = yhi;

p = P;                            /* Pointer to polynomial */
xlo = SKP_Silk_LSFCosTab_FIX_Q12[ 0 ]; // Q12
ylo = SKP_Silk_A2NLSF_eval_poly( p, xlo, dd );
p = Q;                        /* Pointer to polynomial */
ylo = SKP_Silk_A2NLSF_eval_poly( p, xlo, dd );
root_ix = 1;                /* Index of current root */
root_ix = 0;                /* Index of current root */
k = 1;                            /* Reset loop counter */
S0 = S[ 0 ];
Y2         = *in - S0;





X2         = ( Y2 >> 15 ) * A + ( ( ( Y2 & 0x00007FFF ) * A ) >> 15 );
S0         = ( *in++ ) + X2;
out_tmp   = scratch[ k ] + scratch[ k + N2 ];
out_tmp   = scratch[ k ] - scratch[ k + N2 ];
f_Q16 = SKP_DIV32_16( 411775, length + 1 );        // 411775 = 2 * 65536 * pi
f_Q16 = SKP_DIV32_16( 205887, length + 1 );        // 205887 = 65536 * pi





c_Q20 = -SKP_RSHIFT( SKP_MUL( f_Q16, f_Q16 ), 12 );

S0_Q16 = 0;
S1_Q16 = f_Q16;
S0_Q16 = ( 1 << 16 );
S1_Q16 = ( 1 << 16 ) + SKP_RSHIFT( c_Q20, 5 );
px32 = *( (SKP_int32 *)&px[ k ] );                        /* load two values at once */
S0_Q16 = SKP_RSHIFT( SKP_MUL( c_Q20, S1_Q16 ), 20 ) + SKP_LSHIFT( S1_Q16, 1 ) - S0_Q16 + 1;
S0_Q16 = SKP_min( S0_Q16, ( 1 << 16 ) );

px32 = *( (SKP_int32 *)&px[k + 2] );                    /* load two values at once */
S1_Q16 = SKP_RSHIFT( SKP_MUL( c_Q20, S0_Q16 ), 20 ) + SKP_LSHIFT( S0_Q16, 1 ) - S1_Q16;
S1_Q16 = SKP_min( S1_Q16, ( 1 << 16 ) );
ind = len - 1;
max = SKP_SMULBB( vec[ ind ], vec[ ind ] );
lvl = SKP_SMULBB( vec[ i ], vec[ i ] );
max = lvl;
ind = i;
lvl = SKP_abs( vec[ ind ] );
corrCount = SKP_min_int( inputDataSize, correlationCount );

corr64 = SKP_Silk_inner_prod16_aligned_64( inputData, inputData, inputDataSize );

lz = SKP_Silk_CLZ64( corr64 );

nRightShifts = 35 - lz;
S0 = S[ 0 ];
S1 = S[ 1 ];
A0_neg = -A[ 0 ];
A1_neg = -A[ 1 ];
in16  = in[ k ];
out32 = SKP_SMLABB( S0, in16, B[ 0 ] );

S0 = SKP_SMLABB( S1, in16, B[ 1 ] );
S1 = SKP_LSHIFT( SKP_SMULWB( out32, A1_neg ), 3 );
S1 = SKP_SMLABB( S1, in16, B[ 2 ] );
tmp32    = SKP_RSHIFT_ROUND( out32, 13 ) + 1;
A0_L_Q28 = ( -A_Q28[ 0 ] ) & 0x00003FFF;        /* lower part */
A0_U_Q28 = SKP_RSHIFT( -A_Q28[ 0 ], 14 );       /* upper part */
A1_L_Q28 = ( -A_Q28[ 1 ] ) & 0x00003FFF;        /* lower part */
A1_U_Q28 = SKP_RSHIFT( -A_Q28[ 1 ], 14 );       /* upper part */

inval = in[ k ];
out32_Q14 = SKP_LSHIFT( SKP_SMLAWB( S[ 0 ], B_Q28[ 0 ], inval ), 2 );

chirp_minus_one_Q16 = chirp_Q16 - 65536;

tmp_chirp_Q16 = chirp_Q16;
tmp_chirp_Q16 = SKP_SMULWW( chirp_Q16, tmp_chirp_Q16 );
C0 = SKP_LSHIFT32( C0, rshifts - MAX_RSHIFTS );
rshifts = MAX_RSHIFTS;
lz = SKP_Silk_CLZ32( C0 ) - 1;
rshifts_extra = N_BITS_HEAD_ROOM - lz;
rshifts_extra = SKP_min( rshifts_extra, MAX_RSHIFTS - rshifts );
C0 = SKP_RSHIFT32( C0, rshifts_extra );
rshifts_extra = SKP_max( rshifts_extra, MIN_RSHIFTS - rshifts );
C0 = SKP_LSHIFT32( C0, -rshifts_extra );
x_ptr = x + s * subfr_length;
x_ptr = x + s * subfr_length;
x_ptr = x + s * subfr_length;
x1  = -SKP_LSHIFT32( (SKP_int32)x_ptr[ n ],                    16 - rshifts );      // Q(16-rshifts)
x2  = -SKP_LSHIFT32( (SKP_int32)x_ptr[ subfr_length - n - 1 ], 16 - rshifts );      // Q(16-rshifts)
tmp1 = SKP_LSHIFT32( (SKP_int32)x_ptr[ n ],                    QA - 16 );           // Q(QA-16)
tmp2 = SKP_LSHIFT32( (SKP_int32)x_ptr[ subfr_length - n - 1 ], QA - 16 );           // Q(QA-16)
Atmp_QA = Af_QA[ k ];
tmp1 = SKP_SMLAWB( tmp1, Atmp_QA, x_ptr[ n - k - 1 ]            );              // Q(QA-16)
tmp2 = SKP_SMLAWB( tmp2, Atmp_QA, x_ptr[ subfr_length - n + k ] );              // Q(QA-16)
tmp1 = SKP_LSHIFT32( -tmp1, 32 - QA - rshifts );                                    // Q(16-rshifts)
tmp2 = SKP_LSHIFT32( -tmp2, 32 - QA - rshifts );                                    // Q(16-rshifts)
x_ptr = x + s * subfr_length;
x1  = -SKP_LSHIFT32( (SKP_int32)x_ptr[ n ],                    -rshifts );          // Q( -rshifts )
x2  = -SKP_LSHIFT32( (SKP_int32)x_ptr[ subfr_length - n - 1 ], -rshifts );          // Q( -rshifts )
tmp1 = SKP_LSHIFT32( (SKP_int32)x_ptr[ n ],                    17 );                // Q17
tmp2 = SKP_LSHIFT32( (SKP_int32)x_ptr[ subfr_length - n - 1 ], 17 );                // Q17
Atmp1 = SKP_RSHIFT_ROUND( Af_QA[ k ], QA - 17 );                                // Q17
tmp1 = SKP_MLA( tmp1, x_ptr[ n - k - 1 ],            Atmp1 );                   // Q17
tmp2 = SKP_MLA( tmp2, x_ptr[ subfr_length - n + k ], Atmp1 );                   // Q17
tmp1 = -tmp1;                                                                       // Q17
tmp2 = -tmp2;                                                                       // Q17
tmp1 = C_first_row[ n ];                                                            // Q( -rshifts )
tmp2 = C_last_row[ n ];                                                             // Q( -rshifts )
num  = 0;                                                                           // Q( -rshifts )
nrg  = SKP_ADD32( CAb[ 0 ], CAf[ 0 ] );                                             // Q( 1-rshifts )
Atmp_QA = Af_QA[ k ];
lz = SKP_Silk_CLZ32( SKP_abs( Atmp_QA ) ) - 1;
lz = SKP_min( 32 - QA, lz );
Atmp1 = SKP_LSHIFT32( Atmp_QA, lz );                                            // Q( QA + lz )

tmp1 = SKP_ADD_LSHIFT32( tmp1, SKP_SMMUL( C_last_row[  n - k - 1 ], Atmp1 ), 32 - QA - lz );    // Q( -rshifts )
tmp2 = SKP_ADD_LSHIFT32( tmp2, SKP_SMMUL( C_first_row[ n - k - 1 ], Atmp1 ), 32 - QA - lz );    // Q( -rshifts )
num  = SKP_ADD_LSHIFT32( num,  SKP_SMMUL( CAb[ n - k ],             Atmp1 ), 32 - QA - lz );    // Q( -rshifts )
nrg  = SKP_ADD_LSHIFT32( nrg,  SKP_SMMUL( SKP_ADD32( CAb[ k + 1 ], CAf[ k + 1 ] ),
                                                                                Atmp1 ), 32 - QA - lz );    // Q( 1-rshifts )
num = SKP_ADD32( num, tmp2 );                                                       // Q( -rshifts )
num = SKP_LSHIFT32( -num, 1 );                                                      // Q( 1-rshifts )

rc_Q31 = SKP_DIV32_varQ( num, nrg, 31 );
tmp1 = Af_QA[ k ];                                                              // QA
tmp2 = Af_QA[ n - k - 1 ];                                                      // QA
tmp1 = CAf[ k ];                                                                // Q( -rshifts )
tmp2 = CAb[ n - k + 1 ];                                                        // Q( -rshifts )
nrg  = CAf[ 0 ];                                                                        // Q( -rshifts )
tmp1 = 1 << 16;                                                                         // Q16
Atmp1 = SKP_RSHIFT_ROUND( Af_QA[ k ], QA - 16 );                                    // Q16
nrg  = SKP_SMLAWW( nrg, CAf[ k + 1 ], Atmp1 );                                      // Q( -rshifts )
tmp1 = SKP_SMLAWW( tmp1, Atmp1, Atmp1 );                                            // Q16
exc_mask = CNG_BUF_MASK_MAX;
exc_mask = SKP_RSHIFT( exc_mask, 1 );
seed = *rand_seed;
seed = SKP_RAND( seed );
idx = ( SKP_int )( SKP_RSHIFT( seed, 24 ) & exc_mask );
NLSF_step_Q15 = SKP_DIV32_16( SKP_int16_MAX, psDec->LPC_order + 1 );
NLSF_acc_Q15 = 0;
psCNG = &psDec->sCNG;

max_Gain_Q16 = 0;
subfr        = 0;
max_Gain_Q16 = psDecCtrl->Gains_Q16[ i ];
subfr        = i;
Gain_Q26 = ( SKP_int32 )1 << 26; /* 1.0 */

tmp_32 = signal[ i ] + CNG_sig[ i ];
i = SKP_SMULBB( N_RATE_LEVELS - 1, SKP_LSHIFT( sigtype, 1 ) + QuantOffsetType ) + RateLevelIndex;
cdf = SKP_Silk_sign_CDF[ i ];

inData = SKP_enc_map( q[ i ] ); /* - = 0, + = 1 */
i = SKP_SMULBB( N_RATE_LEVELS - 1, SKP_LSHIFT( sigtype, 1 ) + QuantOffsetType ) + RateLevelIndex;
cdf = SKP_Silk_sign_CDF[ i ];

fs_kHz = psEnc->sCmn.fs_kHz;

fs_kHz = API_fs_kHz;
fs_kHz = 16;

fs_kHz = 24;

fs_kHz = 12;

fs_kHz = 16;

fs_kHz = 8;

fs_kHz = 12;

ret = SKP_SILK_ENC_WRONG_COMPLEXITY_SETTING;
TargetRate_bps = SKP_min( TargetRate_bps, 100000 );
TargetRate_bps = SKP_max( TargetRate_bps, MIN_TARGET_RATE_NB_BPS );
TargetRate_bps = SKP_max( TargetRate_bps, MIN_TARGET_RATE_MB_BPS );
TargetRate_bps = SKP_max( TargetRate_bps, MIN_TARGET_RATE_WB_BPS );
TargetRate_bps = SKP_max( TargetRate_bps, MIN_TARGET_RATE_SWB_BPS );
rateTable = TargetRate_table_NB;
rateTable = TargetRate_table_MB;
rateTable = TargetRate_table_WB;
rateTable = TargetRate_table_SWB;
frac_Q6 = SKP_DIV32( SKP_LSHIFT( TargetRate_bps - rateTable[ k - 1 ], 6 ), rateTable[ k ] - rateTable[ k - 1 ] );
ret = SKP_SILK_ENC_PACKET_SIZE_NOT_SUPPORTED;
ret = SKP_SILK_ENC_WRONG_LOSS_RATE;
ret = SKP_SILK_ENC_WRONG_INBAND_FEC_SETTING;
LBRRRate_thres_bps = INBAND_FEC_MIN_RATE_BPS - 9000;
LBRRRate_thres_bps = INBAND_FEC_MIN_RATE_BPS - 6000;;
LBRRRate_thres_bps = INBAND_FEC_MIN_RATE_BPS - 3000;
LBRRRate_thres_bps = INBAND_FEC_MIN_RATE_BPS;
ret = SKP_SILK_ENC_WRONG_DTX_SETTING;
LBRR_usage = SKP_SILK_NO_LBRR;
LBRR_usage = SKP_SILK_ADD_LBRR_TO_PLUS1;//SKP_SILK_NO_LBRR
ptr1 = &x[ order - 1 ]; /* Points to first sample of column 0 of X: X[:,0] */
ptr2 = t;
inner_prod = 0;
head_room_rshifts = SKP_max( LTP_CORRS_HEAD_ROOM - SKP_Silk_CLZ32( energy ), 0 );

energy = SKP_RSHIFT32( energy, head_room_rshifts );
energy = SKP_RSHIFT32( energy, *rshifts - rshifts_local );
rshifts_local = *rshifts;
ptr1 = &x[ order - 1 ]; /* First sample of column 0 of X */
energy = SKP_SUB32( energy, SKP_RSHIFT32( SKP_SMULBB( ptr1[ L - j ], ptr1[ L - j ] ), rshifts_local ) );
energy = SKP_ADD32( energy, SKP_RSHIFT32( SKP_SMULBB( ptr1[ -j ], ptr1[ -j ] ), rshifts_local ) );
ptr2 = &x[ order - 2 ]; /* First sample of column 1 of X */
energy = 0;
energy = SKP_SUB32( energy, SKP_RSHIFT32( SKP_SMULBB( ptr1[ L - j ], ptr2[ L - j ] ), rshifts_local ) );
energy = SKP_ADD32( energy, SKP_RSHIFT32( SKP_SMULBB( ptr1[ -j ], ptr2[ -j ] ), rshifts_local ) );
energy = SKP_Silk_inner_prod_aligned( ptr1, ptr2, L );
energy = SKP_SUB32( energy, SKP_SMULBB( ptr1[ L - j ], ptr2[ L - j ] ) );
energy = SKP_SMLABB( energy, ptr1[ -j ], ptr2[ -j ] );
struc = (SKP_Silk_decoder_state *)decState;

ret  = SKP_Silk_init_decoder( struc );

psDec = (SKP_Silk_decoder_state *)decState;

lostFlag == 0 &&                            /* Not packet loss          */
lostFlag = 1;
ret = SKP_SILK_DEC_PAYLOAD_TOO_LARGE;
prev_fs_kHz = psDec->fs_kHz;

ret = SKP_SILK_DEC_WRONG_SAMPLING_FREQUENCY;
psDec = ( SKP_Silk_decoder_state * )decState;

LBRRData = NULL;
LBRRData = NULL;
psDec = (SKP_Silk_decoder_state *)decState;

offset_Q10 = SKP_Silk_Quantization_Offsets_Q10[ psDecCtrl->sigtype ][ psDecCtrl->QuantOffsetType ];

NLSF_interpolation_flag = 1;
NLSF_interpolation_flag = 0;
rand_seed = psDecCtrl->Seed;
rand_seed = SKP_RAND( rand_seed );
dither = SKP_RSHIFT( rand_seed, 31 );

pexc_Q10 = psDec->exc_Q10;
pres_Q10 = psDec->res_Q10;
pxq      = &psDec->outBuf[ psDec->frame_length ];
A_Q12 = psDecCtrl->PredCoef_Q12[ k >> 1 ];

B_Q14         = &psDecCtrl->LTPCoef_Q14[ k * LTP_ORDER ];
Gain_Q16      = psDecCtrl->Gains_Q16[ k ];
LTP_scale_Q14 = psDecCtrl->LTP_scale_Q14;
sigtype       = psDecCtrl->sigtype;

inv_gain_Q16  = SKP_DIV32( SKP_int32_MAX, SKP_RSHIFT( Gain_Q16, 1 ) );
inv_gain_Q16  = SKP_min( inv_gain_Q16, SKP_int16_MAX );

gain_adj_Q16 = ( SKP_int32 )1 << 16;
gain_adj_Q16 =  SKP_DIV32_varQ( inv_gain_Q16, psDec->prev_inv_gain_Q16, 16 );
sigtype = SIG_TYPE_VOICED;
LTP_scale_Q14 = ( SKP_int )1 << 14;
lag = psDecCtrl->pitchL[ k ];
start_idx = psDec->frame_length - lag - psDec->LPC_order - LTP_ORDER / 2;
start_idx = SKP_LIMIT( start_idx, 0, psDec->frame_length - psDec->LPC_order );

inv_gain_Q32 = SKP_LSHIFT( inv_gain_Q16, 16 );
inv_gain_Q32 = SKP_LSHIFT( SKP_SMULWB( inv_gain_Q32, psDecCtrl->LTP_scale_Q14 ), 2 );
pred_lag_ptr = &psDec->sLTP_Q16[ psDec->sLTP_buf_idx - lag + LTP_ORDER / 2 ];
LTP_pred_Q14 = SKP_SMULWB(               pred_lag_ptr[  0 ], B_Q14[ 0 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -1 ], B_Q14[ 1 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -2 ], B_Q14[ 2 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -3 ], B_Q14[ 3 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -4 ], B_Q14[ 4 ] );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 0 ] );    /* read two coefficients at once */
LPC_pred_Q10 = SKP_SMULWB(               psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  1 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  2 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 2 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  3 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  4 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 4 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  5 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  6 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 6 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  7 ], Atmp );





LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  8 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 8 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  9 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i - 10 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 10 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i - 11 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i - 12 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 12 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i - 13 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i - 14 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 14 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i - 15 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i - 16 ], Atmp );

Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 0 ] );    /* read two coefficients at once */
LPC_pred_Q10 = SKP_SMULWB(               psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  1 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  2 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 2 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  3 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  4 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 4 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  5 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  6 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 6 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  7 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  8 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 8 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  9 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i - 10 ], Atmp );

L = psDec->frame_length;
fs_Khz_old    = psDec->fs_kHz;
LPC_order_old = psDec->LPC_order;
action              = 1; /* PLC operation */
ret = SKP_SILK_DEC_PAYLOAD_TOO_LARGE;
ret = SKP_SILK_DEC_PAYLOAD_ERROR;
L = psDec->frame_length;

fs_kHz_dec = SKP_Silk_SamplingRates_table[ Ix ];
FrameIndex       = 0;
FrameTermination = SKP_SILK_MORE_FRAMES;
sigtype               = SKP_RSHIFT( Ix, 1 );
QuantOffsetType       = Ix & 1;
psNLSF_CB = psDec->psNLSF_CB[ sigtype ];

decode_absolute_lagIndex = 1;
delta_lagIndex = delta_lagIndex - MAX_DELTA_LAG;
decode_absolute_lagIndex = 0;
prev_lagIndex = psDec->lagIndex[ FrameIndex ];

fs_kHz_dec = SKP_Silk_SamplingRates_table[ Ix ];
psNLSF_CB = psDec->psNLSF_CB[ psDecCtrl->sigtype ];

cbk_ptr_Q14 = SKP_Silk_LTP_vq_ptrs_Q14[ psDecCtrl->PERIndex ]; // set pointer to start of codebook





psNLSF_CB = psDec->psNLSF_CB[ psDecCtrl->sigtype ];

cbk_ptr_Q14 = SKP_Silk_LTP_vq_ptrs_Q14[ psDecCtrl->PERIndex ]; /* set pointer to start of codebook */

Ix = psDec->LTPIndex[ psDec->nFramesDecoded ][ k ];
Ix = psDec->LTP_scaleIndex[ psDec->nFramesDecoded ];
iter = frame_length / SHELL_CODEC_FRAME_LENGTH;

cdf_ptr = SKP_Silk_pulses_per_block_CDF[ psDecCtrl->RateLevelIndex ];
nLS = nLshifts[ i ];
pulses_ptr = &q[ SKP_SMULBB( i, SHELL_CODEC_FRAME_LENGTH ) ];
abs_q = pulses_ptr[ k ];
abs_q = SKP_LSHIFT( abs_q, 1 );
HP_8_kHz_len = SKP_min_int( nSamplesIn, MAX_FRAME_LENGTH );
HP_8_kHz_len = SKP_max_int( HP_8_kHz_len, 0 );

psEnc = ( SKP_Silk_encoder_state_FIX* )encState;

psEnc = ( SKP_Silk_encoder_state_FIX* )encState;

ret = SKP_SILK_ENC_FS_NOT_SUPPORTED;
API_fs_kHz      = SKP_DIV32_16( ( SKP_int )encControl->sampleRate, 1000 );          /* convert Hz -> kHz */
PacketSize_ms   = SKP_DIV32_16( ( SKP_int )encControl->packetSize, API_fs_kHz );    /* convert samples -> ms */
TargetRate_bps  =             ( SKP_int32 )encControl->bitRate;
PacketLoss_perc =               ( SKP_int )encControl->packetLossPercentage;
UseInBandFec    =               ( SKP_int )encControl->useInBandFEC;
Complexity      =               ( SKP_int )encControl->complexity;
UseDTX          =               ( SKP_int )encControl->useDTX;

input_ms = SKP_DIV32_16( nSamplesIn, API_fs_kHz );
ret = SKP_SILK_ENC_INPUT_INVALID_NO_OF_SAMPLES;
ret = SKP_SILK_ENC_INPUT_INVALID_NO_OF_SAMPLES;
MaxBytesOut = 0;                    /* return 0 output bytes if no encoder called */
nSamplesToBuffer = psEnc->sCmn.frame_length - psEnc->sCmn.inputBufIx;
nSamplesToBuffer  = SKP_min_int( nSamplesToBuffer, nSamplesIn );
nSamplesFromInput = nSamplesToBuffer;
nSamplesToBuffer  = SKP_min_int( nSamplesToBuffer, SKP_SMULWB( SKP_LSHIFT( nSamplesIn, 1 ), 21846 ) ); // 21846 = ceil(2/3)*2^15





nSamplesFromInput = SKP_RSHIFT( SKP_SMULBB( nSamplesToBuffer, 3 ), 1 );
nSamplesToBuffer  = SKP_min_int( nSamplesToBuffer, SKP_RSHIFT( nSamplesIn, 1 ) );
nSamplesFromInput = SKP_LSHIFT16( nSamplesToBuffer, 1 );
nSamplesToBuffer  = SKP_min_int( nSamplesToBuffer, SKP_DIV32_16( nSamplesIn, 3 ) );
nSamplesFromInput = SKP_SMULBB( nSamplesToBuffer, 3 );
nSamplesToBuffer  = SKP_min_int( nSamplesToBuffer, SKP_RSHIFT( SKP_SMULBB( nSamplesIn, 3 ), 2 ) );
nSamplesFromInput = SKP_SMULWB( SKP_LSHIFT16( nSamplesToBuffer, 2 ), 21846 ); // 21846 = ceil((1/3)*2^16)
nSamplesToBuffer  = SKP_min_int( nSamplesToBuffer, SKP_RSHIFT( nSamplesIn, 1 ) );
nSamplesFromInput = SKP_LSHIFT16( nSamplesToBuffer, 1 );
nSamplesToBuffer  = SKP_min_int( nSamplesToBuffer, SKP_SMULWB( SKP_LSHIFT( nSamplesIn, 1 ), 21846 ) );
nSamplesFromInput = SKP_RSHIFT( SKP_SMULBB( nSamplesToBuffer, 3 ), 1 );
MaxBytesOut = *nBytesOut;
x_frame         = psEnc->x_buf + psEnc->sCmn.frame_length; /* start of frame to encode */
res_pitch_frame = res_pitch    + psEnc->sCmn.frame_length; /* start of pitch LPC residual frame */

ret = SKP_Silk_VAD_GetSA_Q8( &psEnc->sCmn.sVAD, &psEnc->speech_activity_Q8, &SNR_dB_Q7,
                                 sEncCtrl.input_quality_bands_Q15, &sEncCtrl.input_tilt_Q15,
                                 pIn,psEnc->sCmn.frame_length );

nBytesLBRR = MAX_ARITHM_BYTES;
FrameTermination_CDF = SKP_Silk_FrameTermination_v4_CDF;
FrameTermination_CDF = SKP_Silk_FrameTermination_CDF;
LBRR_idx = ( psEnc->sCmn.oldest_LBRR_idx + 1 ) & LBRR_IDX_MASK;

frame_terminator = SKP_SILK_LAST_FRAME;
frame_terminator = SKP_SILK_LBRR_VER1;
frame_terminator = SKP_SILK_LBRR_VER2;
LBRR_idx = psEnc->sCmn.oldest_LBRR_idx;
nBytes      = 0;
ret = SKP_SILK_ENC_PAYLOAD_BUF_TOO_SHORT;
frame_terminator = SKP_SILK_MORE_FRAMES;
ret = SKP_SILK_ENC_INTERNAL_ERROR;
typeOffset     = psEnc->sCmn.typeOffsetPrev; // Temp save as cannot be overwritten
LTP_scaleIndex = psEncCtrl->sCmn.LTP_scaleIndex;

Rate_only_parameters = 13500;
Rate_only_parameters = 15500;
Rate_only_parameters = 17500;
Rate_only_parameters = 19500;
nFramesInPayloadBuf = 0;
nFramesInPayloadBuf = psEnc->sCmn.nFramesInPayloadBuf + 1;
frame_terminator = SKP_SILK_LAST_FRAME;

frame_terminator = SKP_SILK_MORE_FRAMES;
typeOffset = 2 * psEncCtrlC->sigtype + psEncCtrlC->QuantOffsetType;
psNLSF_CB = psEncC->psNLSF_CB[ psEncCtrlC->sigtype ];
typeOffset = 2 * psEncCtrlC->sigtype + psEncCtrlC->QuantOffsetType;
psNLSF_CB = psEncC->psNLSF_CB[ psEncCtrlC->sigtype ];
encode_absolute_lagIndex = 1;
delta_lagIndex = psEncCtrlC->lagIndex - psEncC->prev_lagIndex;
delta_lagIndex = ( MAX_DELTA_LAG << 1 ) + 1;
delta_lagIndex = ( MAX_DELTA_LAG << 1 ) + 1;
delta_lagIndex = delta_lagIndex + MAX_DELTA_LAG;
encode_absolute_lagIndex = 0; /* Only use delta */
sum = pulses_in[ 2 * k ] + pulses_in[ 2 * k + 1 ];
iter = frame_length / SHELL_CODEC_FRAME_LENGTH;

abs_pulses_ptr = abs_pulses;
scale_down = combine_and_check( pulses_comb, abs_pulses_ptr, SKP_Silk_max_pulses_table[ 0 ], 8 );

minSumBits_Q6 = SKP_int32_MAX;
nBits_ptr  = SKP_Silk_pulses_per_block_BITS_Q6[ k ];
sumBits_Q6 = SKP_Silk_rate_levels_BITS_Q6[sigtype][ k ];
minSumBits_Q6 = sumBits_Q6;
RateLevelIndex = k;
cdf_ptr = SKP_Silk_pulses_per_block_CDF[ RateLevelIndex ];
pulses_ptr = &q[ i * SHELL_CODEC_FRAME_LENGTH ];
nLS = nRshifts[ i ] - 1;
abs_q = SKP_abs( pulses_ptr[ k ] );
bit = SKP_RSHIFT( abs_q, j ) & 1;
bit = abs_q & 1;
shift = res_tmp_nrg_Q - res_nrg_Q;
res_nrg = res_nrg - SKP_RSHIFT( res_tmp_nrg, shift );
res_nrg   = SKP_RSHIFT( res_nrg, -shift ) - res_tmp_nrg;
res_nrg_Q = res_tmp_nrg_Q;
res_nrg_2nd = SKP_int32_MAX;
shift = rshift0 - rshift1;
res_nrg1         = SKP_RSHIFT( res_nrg1, shift );
res_nrg_interp_Q = -rshift0;
res_nrg0         = SKP_RSHIFT( res_nrg0, -shift );
res_nrg_interp_Q = -rshift1;
res_nrg_interp = SKP_ADD32( res_nrg0, res_nrg1 );

shift = res_nrg_interp_Q - res_nrg_Q;
isInterpLower = SKP_TRUE;
isInterpLower = SKP_FALSE;
isInterpLower = SKP_TRUE;
isInterpLower = SKP_FALSE;
isInterpLower = SKP_FALSE;
res_nrg   = res_nrg_interp;
res_nrg_Q = res_nrg_interp_Q;
res_nrg_2nd   = res_nrg_interp;
res_nrg_2nd_Q = res_nrg_interp_Q;
b_Q14_ptr = b_Q14;
WLTP_ptr  = WLTP;
r_ptr     = &r_first[ mem_offset ];
r_ptr = &r_last[ mem_offset ];
lag_ptr = r_ptr - ( lag[ k ] + LTP_ORDER / 2 );

LZs = SKP_Silk_CLZ32( rr[k] );
regu = SKP_SMULWB( rr[ k ] + 1, LTP_DAMPING_Q16 );
extra_shifts = SKP_min_int( corr_rshifts[ k ], LTP_CORRS_HEAD_ROOM );
denom32 = SKP_LSHIFT_SAT32( SKP_SMULWB( nrg[ k ], Wght_Q15[ k ] ), 1 + extra_shifts ) +  /* Q( -corr_rshifts[ k ] + extra_shifts ) */
            SKP_RSHIFT( SKP_SMULWB( subfr_length, 655 ), corr_rshifts[ k ] - extra_shifts );     /* Q( -corr_rshifts[ k ] + extra_shifts ) */
denom32 = SKP_max( denom32, 1 );
temp32 = SKP_DIV32( SKP_LSHIFT( ( SKP_int32 )Wght_Q15[ k ], 16 ), denom32 );  /* Q( 15 + 16 + corr_rshifts[k] - extra_shifts ) */
temp32 = SKP_RSHIFT( temp32, 31 + corr_rshifts[ k ] - extra_shifts - 26 );  /* Q26 */






WLTP_max = 0;
WLTP_max = SKP_max( WLTP_ptr[ i ], WLTP_max );
lshift = SKP_Silk_CLZ32( WLTP_max ) - 1 - 3; /* keep 3 bits free for vq_nearest_neighbor_fix */
temp32 = SKP_min_32( temp32, SKP_LSHIFT( ( SKP_int32 )1, 26 - 18 + lshift ) );
maxRshifts = 0;
maxRshifts = SKP_max_int( corr_rshifts[ k ], maxRshifts );
LPC_LTP_res_nrg = 0;
LPC_res_nrg     = 0;
LPC_res_nrg     = SKP_ADD32( LPC_res_nrg,     SKP_RSHIFT( SKP_ADD32( SKP_SMULWB(  rr[ k ], Wght_Q15[ k ] ), 1 ), 1 + ( maxRshifts - corr_rshifts[ k ] ) ) ); /*  Q( -maxRshifts ) */
LPC_LTP_res_nrg = SKP_ADD32( LPC_LTP_res_nrg, SKP_RSHIFT( SKP_ADD32( SKP_SMULWB( nrg[ k ], Wght_Q15[ k ] ), 1 ), 1 + ( maxRshifts - corr_rshifts[ k ] ) ) ); /*  Q( -maxRshifts ) */
LPC_LTP_res_nrg = SKP_max( LPC_LTP_res_nrg, 1 ); /* avoid division by zero */

div_Q16 = SKP_DIV32_varQ( LPC_res_nrg, LPC_LTP_res_nrg, 16 );
b_Q14_ptr = b_Q14;
max_abs_d_Q14 = 0;
max_w_bits    = 0;
max_abs_d_Q14 = SKP_max_32( max_abs_d_Q14, SKP_abs( d_Q14[ k ] ) );
max_w_bits = SKP_max_32( max_w_bits, 32 - SKP_Silk_CLZ32( w[ k ] ) + corr_rshifts[ k ] - maxRshifts );
extra_shifts = max_w_bits + 32 - SKP_Silk_CLZ32( max_abs_d_Q14 ) - 14;

extra_shifts = SKP_max_int( extra_shifts, 0 );

maxRshifts_wxtra = maxRshifts + extra_shifts;

temp32 = SKP_RSHIFT( 262, maxRshifts + extra_shifts ) + 1; /* 1e-3f in Q( 18 - (maxRshifts + extra_shifts) ) */
wd = 0;
temp32 = SKP_ADD32( temp32,                     SKP_RSHIFT( w[ k ], maxRshifts_wxtra - corr_rshifts[ k ] ) );                    /* Q( 18 - maxRshifts_wxtra ) */
wd     = SKP_ADD32( wd, SKP_LSHIFT( SKP_SMULWW( SKP_RSHIFT( w[ k ], maxRshifts_wxtra - corr_rshifts[ k ] ), d_Q14[ k ] ), 2 ) ); /* Q( 18 - maxRshifts_wxtra ) */
m_Q12 = SKP_DIV32_varQ( wd, temp32, 12 );

b_Q14_ptr = b_Q14;
temp32 = SKP_RSHIFT( w[ k ], 2 - corr_rshifts[ k ] );
temp32 = SKP_LSHIFT_SAT32( w[ k ], corr_rshifts[ k ] - 2 );
g_Q26 = SKP_MUL(
            SKP_DIV32(
                LTP_SMOOTHING_Q26,
                SKP_RSHIFT( LTP_SMOOTHING_Q26, 10 ) + temp32 ),                                       /* Q10 */
            SKP_LSHIFT_SAT32( SKP_SUB_SAT32( ( SKP_int32 )m_Q12, SKP_RSHIFT( d_Q14[ k ], 2 ) ), 4 ) );  /* Q16 */

temp32 = 0;
temp32 = SKP_DIV32( g_Q26, temp32 ); /* Q14->Q12 */
buf_len = SKP_ADD_LSHIFT( psEnc->sCmn.la_pitch, psEnc->sCmn.frame_length, 1 );

x_buf = x - psEnc->sCmn.frame_length;

x_buf_ptr = x_buf + buf_len - psPredSt->pitch_LPC_win_length;
Wsig_ptr  = Wsig;
thrhld_Q15 = ( 1 << 14 ); // 0.5f in Q15





thrhld_Q15 = SKP_SMLABB( thrhld_Q15, -131, psEnc->sCmn.pitchEstimationLPCOrder );
thrhld_Q15 = SKP_SMLABB( thrhld_Q15,  -13, ( SKP_int16 )SKP_Silk_SQRT_APPROX( SKP_LSHIFT( ( SKP_int32 )psEnc->speech_activity_Q8, 8 ) ) );
thrhld_Q15 = SKP_SMLABB( thrhld_Q15, 4587, psEnc->sCmn.prev_sigtype );
thrhld_Q15 = SKP_MLA(    thrhld_Q15,  -31, SKP_RSHIFT( psEncCtrl->input_tilt_Q15, 8 ) );
thrhld_Q15 = SKP_SAT16(  thrhld_Q15 );

min_gain_Q16 = SKP_int32_MAX >> 6;
min_gain_Q16 = SKP_min( min_gain_Q16, psEncCtrl->Gains_Q16[ i ] );
tmp = SKP_SMULWB( invGains_Q16[ i ], invGains_Q16[ i ] );
x_ptr     = psEnc->x_buf + psEnc->sCmn.frame_length - psEnc->sCmn.predictLPCOrder;
x_pre_ptr = LPC_in_pre;
pitch_freq_Hz_Q16 = SKP_DIV32_16( SKP_LSHIFT( SKP_MUL( psEnc->sCmn.fs_kHz, 1000 ), 16 ), psEnc->sCmn.prevLag );
pitch_freq_log_Q7 = SKP_Silk_lin2log( pitch_freq_Hz_Q16 ) - ( 16 << 7 ); //0x70

quality_Q15 = psEncCtrl->input_quality_bands_Q15[ 0 ];
pitch_freq_log_Q7 = SKP_SUB32( pitch_freq_log_Q7, SKP_SMULWB( SKP_SMULWB( SKP_LSHIFT( quality_Q15, 2 ), quality_Q15 ),
            pitch_freq_log_Q7 - SKP_LOG2_VARIABLE_HP_MIN_FREQ_Q7 ) );
pitch_freq_log_Q7 = SKP_ADD32( pitch_freq_log_Q7, SKP_RSHIFT( 19661 - quality_Q15, 9 ) ); // 19661_Q15 = 0.6_Q0

delta_freq_Q7 = pitch_freq_log_Q7 - SKP_RSHIFT( psEnc->variable_HP_smth1_Q15, 8 );
delta_freq_Q7 = SKP_MUL( delta_freq_Q7, 3 );
delta_freq_Q7 = SKP_LIMIT( delta_freq_Q7, -VARIABLE_HP_MAX_DELTA_FREQ_Q7, VARIABLE_HP_MAX_DELTA_FREQ_Q7 );

Fc_Q19 = SKP_DIV32_16( SKP_SMULBB( SKP_RADIANS_CONSTANT_Q19, psEncCtrl->pitch_freq_low_Hz ), psEnc->sCmn.fs_kHz ); // range: 3704 - 27787, 11-15 bits
r_Q28 = ( 1 << 28 ) - SKP_MUL( 471, Fc_Q19 ); // 471_Q9 = 0.92_Q0, range: 255347779 to 266690872, 27-28 bits
r_Q22  = SKP_RSHIFT( r_Q28, 6 );
ret = SKP_Silk_control_encoder_FIX( psEnc, 24, 20, 25, 0, 0, 0, 10, 1 );

in_upper = (SKP_int32)SKP_RSHIFT64(in, 32);
leadingZeros = SKP_Silk_CLZ32(in);
y = 32768;
y = 46214;        /* 46214 = sqrt(2) * 32768 */
y = SKP_SMLAWB(y, y, SKP_SMULBB(213, frac_Q7));

a32 = a;
a_headrm = SKP_Silk_CLZ32( SKP_abs(a32) ) - 1;
a32_nrm = SKP_LSHIFT(a32, a_headrm);                                    /* Q: a_headrm                    */
b_headrm = SKP_Silk_CLZ32( SKP_abs(b32) ) - 1;
b32_nrm = SKP_LSHIFT(b32, b_headrm);                                    /* Q: b_headrm                    */

b32_inv = SKP_DIV32_16( SKP_int32_MAX >> 2, SKP_RSHIFT(b32_nrm, 16) );  /* Q: 29 + 16 - b_headrm        */

result = SKP_SMULWB(a32_nrm, b32_inv);                                  /* Q: 29 + a_headrm - b_headrm    */

result = SKP_SMLAWB(result, a32_nrm, b32_inv);                          /* Q: 29 + a_headrm - b_headrm    */

lshift = 29 + a_headrm - b_headrm - Qres;
b_headrm = SKP_Silk_CLZ32( SKP_abs(b32) ) - 1;
b32_nrm = SKP_LSHIFT(b32, b_headrm);                                    /* Q: b_headrm                */

b32_inv = SKP_DIV32_16( SKP_int32_MAX >> 2, SKP_RSHIFT(b32_nrm, 16) );  /* Q: 29 + 16 - b_headrm    */

result = SKP_LSHIFT(b32_inv, 16);                                       /* Q: 61 - b_headrm            */

err_Q32 = SKP_LSHIFT_ovflw( -SKP_SMULWB(b32_nrm, b32_inv), 3 );         /* Q32                        */

result = SKP_SMLAWW(result, err_Q32, b32_inv);                          /* Q: 61 - b_headrm            */

lshift = 61 - b_headrm - Qres;
x = 16384 - x;
x = SKP_SMULWB( SKP_LSHIFT( x, 8 ), x );        /* contains x^2 in Q20 */
y_Q30 = SKP_SMLAWB( SKP_SIN_APPROX_CONST2, x, SKP_SIN_APPROX_CONST3 );
y_Q30 = SKP_SMLAWW( SKP_SIN_APPROX_CONST1, x, y_Q30 );
y_Q30 = SKP_SMLAWW( SKP_SIN_APPROX_CONST0 + 66, x, y_Q30 );
x = 49152 - x;
x = SKP_SMULWB( SKP_LSHIFT( x, 8 ), x );        /* contains x^2 in Q20 */
y_Q30 = SKP_SMLAWB( -SKP_SIN_APPROX_CONST2, x, -SKP_SIN_APPROX_CONST3 );
y_Q30 = SKP_SMLAWW( -SKP_SIN_APPROX_CONST1, x, y_Q30 );
y_Q30 = SKP_SMLAWW( -SKP_SIN_APPROX_CONST0, x, y_Q30 );
sum = SKP_SMLABB( sum, inVec1[ i ], inVec2[ i ] );
sum = SKP_SMLAL( sum, inVec1[ i ], inVec2[ i ] );
sum = SKP_SMLALBB( sum, inVec1[ i ], inVec2[ i ] );
sum = SKP_ADD_SAT32( sum, SKP_SMULBB( inVec1[ i ], inVec2[ i ] ) );
out = SKP_LSHIFT( 1, SKP_RSHIFT( inLog_Q7, 7 ) );
frac_Q7 = inLog_Q7 & 0x7F;
out = SKP_ADD_RSHIFT( out, SKP_MUL( out, SKP_SMLAWB( frac_Q7, SKP_MUL( frac_Q7, 128 - frac_Q7 ), -174 ) ), 7 );
out = SKP_MLA( out, SKP_RSHIFT( out, 7 ), SKP_SMLAWB( frac_Q7, SKP_MUL( frac_Q7, 128 - frac_Q7 ), -174 ) );
state = S[ 0 ];
in_tmp  = *in++;
out_tmp = state + in_tmp;                       /* zero at nyquist  */
state   = in_tmp - SKP_RSHIFT( out_tmp, 1 );    /* pole             */
state = S[ 0 ];
in_tmp   = SKP_MUL( 768, (SKP_int32)in[k] );    /* multiply by 0.75, going from Q15 to Q25 */
out_tmp  = state + in_tmp;                      /* zero at nyquist                         */
state    = in_tmp - SKP_RSHIFT( out_tmp, 1 );   /* pole                                    */
fac_Q16 = SKP_LSHIFT( psLP->transition_frame_no, 16 - 5 );
fac_Q16 = SKP_DIV32_16( SKP_LSHIFT( psLP->transition_frame_no, 16 ), TRANSITION_INT_STEPS_DOWN );
ind      = SKP_RSHIFT( fac_Q16, 16 );
fac_Q16 = SKP_LSHIFT( TRANSITION_FRAMES_UP - psLP->transition_frame_no, 16 - 6 );
fac_Q16 = SKP_DIV32_16( SKP_LSHIFT( TRANSITION_FRAMES_UP - psLP->transition_frame_no, 16 ), TRANSITION_INT_STEPS_UP );
ind      = SKP_RSHIFT( fac_Q16, 16 );
Anew_QA = Atmp_QA[ order & 1 ];
rc_Q31 = -SKP_LSHIFT( Anew_QA[ k ], 31 - QA );

rc_mult1_Q30 = ( SKP_int32_MAX >> 1 ) - SKP_SMMUL( rc_Q31, rc_Q31 );
rc_mult2_Q16 = SKP_INVERSE32_varQ( rc_mult1_Q30, 46 );      /* 16 = 46 - 30 */

Aold_QA = Anew_QA;
Anew_QA = Atmp_QA[ k & 1 ];

headrm = SKP_Silk_CLZ32( rc_mult2_Q16 ) - 1;
rc_mult2_Q16 = SKP_LSHIFT( rc_mult2_Q16, headrm );          /* Q: 16 + headrm */





tmp_QA = Aold_QA[ n ] - SKP_LSHIFT( SKP_SMMUL( Aold_QA[ k - n - 1 ], rc_Q31 ), 1 );
rc_Q31 = -SKP_LSHIFT( Anew_QA[ 0 ], 31 - QA );

rc_mult1_Q30 = ( SKP_int32_MAX >> 1 ) - SKP_SMMUL( rc_Q31, rc_Q31 );

Anew_QA = Atmp_QA[ order & 1 ];
rc_Q31 = -SKP_LSHIFT( Anew_QA[ k ], 31 - QA );

rc_mult1_Q30 = ( SKP_int32_MAX >> 1 ) - SKP_SMMUL( rc_Q31, rc_Q31 );
rc_mult2_Q16 = SKP_INVERSE32_varQ( rc_mult1_Q30, 46 );      /* 16 = 46 - 30 */

Aold_QA = Anew_QA;
Anew_QA = Atmp_QA[ k & 1 ];

headrm = SKP_Silk_CLZ32( rc_mult2_Q16 ) - 1;
rc_mult2_Q16 = SKP_LSHIFT( rc_mult2_Q16, headrm );          /* Q: 16 + headrm */
tmp_QA = Aold_QA[ n ] - SKP_LSHIFT( SKP_SMMUL( Aold_QA[ k - n - 1 ], rc_Q31 ), 1 );
rc_Q31 = -SKP_LSHIFT( Anew_QA[ 0 ], 31 - QA );

rc_mult1_Q30 = ( SKP_int32_MAX >> 1 ) - SKP_SMMUL( rc_Q31, rc_Q31 );

maxabs = SKP_int32_MIN;
absval = SKP_abs( a_Q16[ i ] );
maxabs = absval;
idx    = i;
sc_Q16 = SKP_DIV32( SKP_int32_MAX, SKP_RSHIFT( maxabs, 4 ) );
sc_Q16 = 65536 - sc_Q16;
sc_Q16 = SKP_DIV32( sc_Q16, idx + 1 );
sc_Q16 = 65536 - sc_Q16;
sc_Q16 = SKP_LSHIFT( SKP_SMULWB( sc_Q16, 32604 ), 1 ); // 0.995 in Q16
rshift = 24 - QQ;

maxabs = SKP_int32_MIN;
absval = SKP_abs( a_Q24[ i ] );
maxabs = absval;
idx    = i;
maxabs = SKP_RSHIFT( maxabs, rshift );
sc_Q16 = 65470 - SKP_DIV32( SKP_MUL( 65470 >> 2, maxabs - SKP_int16_MAX ),
                                        SKP_RSHIFT32( SKP_MUL( maxabs, idx + 1), 2 ) );
idx = SKP_SMULBB( 2, k );
SA = S[Order-1];
out32_Q10 = 0;
idx = SKP_SMULBB( 2, j ) + 1;
Atmp = A_align_Q12[j];
SB = S[Order - 1 - idx];
out32_Q10 = SKP_SMLAWB( out32_Q10, SA, Atmp );
out32_Q10 = SKP_SMLAWT( out32_Q10, SB, Atmp );
SA = S[Order - 2 - idx];
Atmp = A_align_Q12[Order_half-1];
SB = S[0];
out32_Q10 = SKP_SMLAWB( out32_Q10, SA, Atmp );
out32_Q10 = SKP_SMLAWT( out32_Q10, SB, Atmp );

out32_Q10 = SKP_ADD_SAT32( out32_Q10, SKP_SMULWB( Gain_Q26, in[k] ) );

out32 = SKP_RSHIFT_ROUND( out32_Q10, 10 );

SA = S[15];
Atmp = A_align_Q12[0];
SB = S[14];
out32_Q10 = SKP_SMULWB(                  SA, Atmp );
out32_Q10 = SKP_SMLAWT_ovflw( out32_Q10, SB, Atmp );
SA = S[13];
Atmp = A_align_Q12[1];
SB = S[12];
out32_Q10 = SKP_SMLAWB_ovflw( out32_Q10, SA, Atmp );
out32_Q10 = SKP_SMLAWT_ovflw( out32_Q10, SB, Atmp );
SA = S[11];
Atmp = A_align_Q12[2];
SB = S[10];
out32_Q10 = SKP_SMLAWB_ovflw( out32_Q10, SA, Atmp );
out32_Q10 = SKP_SMLAWT_ovflw( out32_Q10, SB, Atmp );
SA = S[9];
Atmp = A_align_Q12[3];
SB = S[8];
out32_Q10 = SKP_SMLAWB_ovflw( out32_Q10, SA, Atmp );





out32_Q10 = SKP_SMLAWT_ovflw( out32_Q10, SB, Atmp );
SA = S[7];
Atmp = A_align_Q12[4];
SB = S[6];
out32_Q10 = SKP_SMLAWB_ovflw( out32_Q10, SA, Atmp );
out32_Q10 = SKP_SMLAWT_ovflw( out32_Q10, SB, Atmp );
SA = S[5];
Atmp = A_align_Q12[5];
SB = S[4];
out32_Q10 = SKP_SMLAWB_ovflw( out32_Q10, SA, Atmp );
out32_Q10 = SKP_SMLAWT_ovflw( out32_Q10, SB, Atmp );
SA = S[3];
Atmp = A_align_Q12[6];
SB = S[2];
out32_Q10 = SKP_SMLAWB_ovflw( out32_Q10, SA, Atmp );
out32_Q10 = SKP_SMLAWT_ovflw( out32_Q10, SB, Atmp );
SA = S[1];
Atmp = A_align_Q12[7];
SB = S[0];
out32_Q10 = SKP_SMLAWB_ovflw( out32_Q10, SA, Atmp );
out32_Q10 = SKP_SMLAWT_ovflw( out32_Q10, SB, Atmp );

out32_Q10 = SKP_ADD_SAT32( out32_Q10, SKP_SMULWB( Gain_Q26, in[k] ) );

out32 = SKP_RSHIFT_ROUND( out32_Q10, 10 );

x_ptr = x;
LTP_res_ptr = LTP_res;
x_lag_ptr = x_ptr - pitchL[ k ];
LTP_est = SKP_SMULBB( x_lag_ptr[ LTP_ORDER / 2 ], Btmp_Q14[ 0 ] );
LTP_est = SKP_SMLABB_ovflw( LTP_est, x_lag_ptr[ LTP_ORDER / 2 - j ], Btmp_Q14[ j ] );
LTP_est = SKP_RSHIFT_ROUND( LTP_est, 14 ); // round and -> Q0






g_out_Q5    = SKP_RSHIFT_ROUND( SKP_RSHIFT( psEncCtrl->LTPredCodGain_Q7, 1 ) + SKP_RSHIFT( psEnc->HPLTPredCodGain_Q7, 1 ), 3 );
g_limit_Q15 = SKP_Silk_sigm_Q15( g_out_Q5 - ( 3 << 5 ) ); /* mulitplid with 0.5 */

round_loss = ( SKP_int )psEnc->sCmn.PacketLoss_perc;

frames_per_packet = SKP_DIV32_16( psEnc->sCmn.PacketSize_ms, FRAME_LENGTH_MS );

thrld1_Q15 = LTPScaleThresholds_Q15[ SKP_min_int( round_loss,     NB_THRESHOLDS - 1 ) ];
thrld2_Q15 = LTPScaleThresholds_Q15[ SKP_min_int( round_loss + 1, NB_THRESHOLDS - 1 ) ];

in16 = in[ k ];
out32 = SKP_SMLABB( S[ 0 ], in16, B[ 0 ] );
out32 = SKP_RSHIFT_ROUND( out32, 13 );

in16 = in[ k ];
out32 = SKP_LSHIFT( in16, 12 ) - S[ 0 ];
out32 = SKP_RSHIFT_ROUND( out32, 12 );

B32 = *( (SKP_int32*)&B[ d ] );                /* read two coefficients at once */
B32 = *( (SKP_int32*)&B[ d ] );                    /* read two coefficients at once */
in16 = in[ k ];
out32 = SKP_LSHIFT( in16, 12 ) - S[ 0 ];
out32 = SKP_RSHIFT_ROUND( out32, 12 );

in16 = in[ k ];
out32 = SKP_LSHIFT( in16, 13 ) - S[ 0 ];
out32 = SKP_RSHIFT_ROUND( out32, 13 );

B32 = *( (SKP_int32*)&B[ d ] );                /* read two coefficients at once */
B32 = *( (SKP_int32*)&B[ d ] );                    /* read two coefficients at once */
in16 = in[ k ];
out32 = SKP_LSHIFT( in16, 13 ) - S[ 0 ];
out32 = SKP_RSHIFT_ROUND( out32, 13 );

idx = SKP_SMULBB( 2, k );
SA = S[ 0 ];
out32_Q12 = 0;
idx = SKP_SMULBB( 2, j ) + 1;
Btmp = B_align_Q12[ j ];
SB = S[ idx ];
out32_Q12 = SKP_SMLABB( out32_Q12, SA, Btmp );
out32_Q12 = SKP_SMLABT( out32_Q12, SB, Btmp );
SA = S[ idx + 1 ];
Btmp = B_align_Q12[ Order_half - 1 ];
SB = S[ Order - 1 ];
out32_Q12 = SKP_SMLABB( out32_Q12, SA, Btmp );
out32_Q12 = SKP_SMLABT( out32_Q12, SB, Btmp );

out32_Q12 = SKP_SUB_SAT32( SKP_LSHIFT( (SKP_int32)in[ k ], 12 ), out32_Q12 );

out32 = SKP_RSHIFT_ROUND( out32_Q12, 12 );

ftmp = cLSF[2*k];            // Q20
f_int = SKP_RSHIFT( NLSF[k], 15 - 7 );

f_frac = NLSF[k] - SKP_LSHIFT( f_int, 15 - 7 );






cos_val = SKP_Silk_LSFCosTab_FIX_Q12[ f_int ];                /* Q12 */
delta   = SKP_Silk_LSFCosTab_FIX_Q12[ f_int + 1 ] - cos_val;  /* Q12, with a range of 0..200 */

dd = SKP_RSHIFT( d, 1 );

Ptmp = P[k+1] + P[k];
Qtmp = Q[k+1] - Q[k];

maxabs = 0;
absval = SKP_abs( a_int32[k] );
maxabs = absval;
idx       = k;
sc_Q16 = 65470 - SKP_DIV32( SKP_MUL( 65470 >> 2, maxabs - SKP_int16_MAX ),
                                        SKP_RSHIFT32( SKP_MUL( maxabs, idx + 1), 2 ) );
pCB_element = &psNLSF_CB->CBStages[ 0 ].CB_NLSF_Q15[ SKP_MUL( NLSFIndices[ 0 ], LPC_order ) ];

pCB_element = &psNLSF_CB->CBStages[ s ].CB_NLSF_Q15[ SKP_LSHIFT( NLSFIndices[ s ], 4 ) ];

pCB_element = &psNLSF_CB->CBStages[ s ].CB_NLSF_Q15[ SKP_SMULBB( NLSFIndices[ s ], LPC_order ) ];

prev_survivors = 1;

pCurrentCBStage = &psNLSF_CB->CBStages[ s ];

cur_survivors = SKP_min_32( NLSF_MSVQ_Survivors, SKP_SMULBB( prev_survivors, pCurrentCBStage->nVectors ) );

cur_survivors = 1;
rateDistThreshold_Q18 = SKP_MUL( NLSF_MSVQ_SURV_MAX_REL_RD, pRateDist_Q18[ 0 ] );
input_index = SKP_RSHIFT( pTempIndices[ k ], 3 );
cb_index    = pTempIndices[ k ] & 7;
input_index = SKP_DIV32_16( pTempIndices[ k ], pCurrentCBStage->nVectors );
cb_index    = pTempIndices[ k ] - SKP_SMULBB( input_index, pCurrentCBStage->nVectors );
input_index = 0;
cb_index    = pTempIndices[ k ];
pConstInt   = &pRes_Q15[ SKP_SMULBB( input_index, LPC_order ) ];
pCB_element = &pCurrentCBStage->CB_NLSF_Q15[ SKP_SMULBB( cb_index, LPC_order ) ];
pInt        = &pRes_new_Q15[ SKP_SMULBB( k, LPC_order ) ];
pConstInt = &pPath[ SKP_SMULBB( input_index, psNLSF_CB->nStages ) ];
pInt      = &pPath_new[ SKP_SMULBB( k, psNLSF_CB->nStages ) ];
prev_survivors = cur_survivors;
bestIndex = 0;

bestRateDist_Q20 = SKP_int32_MAX;
wsse_Q20 = 0;
se_Q15 = pNLSF_Q15[ i ] - pNLSF_q_Q15_prev[ i ]; // range: [ -32767 : 32767 ]
wsse_Q20 = SKP_SMLAWB( wsse_Q20, SKP_SMULBB( se_Q15, se_Q15 ), pW_Q6[ i ] );

se_Q15 = pNLSF_Q15[ i + 1 ] - pNLSF_q_Q15_prev[ i + 1 ]; // range: [ -32767 : 32767 ]





wsse_Q20 = SKP_SMLAWB( wsse_Q20, SKP_SMULBB( se_Q15, se_Q15 ), pW_Q6[ i + 1 ] );
wsse_Q20 = SKP_ADD_POS_SAT32( pRateDist_Q18[ s ], SKP_SMULWB( wsse_Q20, NLSF_mu_fluc_red_Q16 ) );

bestRateDist_Q20 = wsse_Q20;
bestIndex = s;
min_diff_Q15 = NLSF_Q15[0] - NDeltaMin_Q15[0];
I = 0;
diff_Q15 = NLSF_Q15[i] - ( NLSF_Q15[i-1] + NDeltaMin_Q15[i] );
min_diff_Q15 = diff_Q15;
I = i;





diff_Q15 = (1<<15) - ( NLSF_Q15[L-1] + NDeltaMin_Q15[L] );
min_diff_Q15 = diff_Q15;
I = L;
min_center_Q15 = 0;
max_center_Q15 = (1<<15);
center_freq_Q15 = SKP_LIMIT( SKP_RSHIFT_ROUND( (SKP_int32)NLSF_Q15[I-1] + (SKP_int32)NLSF_Q15[I], 1 ),
                min_center_Q15, max_center_Q15 );
pRD_vec_Q20 = pRD_Q20;
cb_vec_Q15 = pCB_Q15;
sum_error = 0;
Wtmp_Q6 = Wcpy_Q6[ SKP_RSHIFT( m, 1 ) ];

diff_Q15 = in_Q15[ m ] - *cb_vec_Q15++; // range: [ -32767 : 32767 ]
sum_error = SKP_SMLAWB( sum_error, SKP_SMULBB( diff_Q15, diff_Q15 ), Wtmp_Q6 );

diff_Q15 = in_Q15[m + 1] - *cb_vec_Q15++; // range: [ -32767 : 32767 ]
sum_error = SKP_SMLAWT( sum_error, SKP_SMULBB( diff_Q15, diff_Q15 ), Wtmp_Q6 );
tmp1_int = SKP_max_int( pNLSF_Q15[ 0 ], 1 );
tmp1_int = SKP_DIV32_16( 1 << ( 15 + Q_OUT ), tmp1_int );
tmp2_int = SKP_max_int( pNLSF_Q15[ 1 ] - pNLSF_Q15[ 0 ], 1 );
tmp2_int = SKP_DIV32_16( 1 << ( 15 + Q_OUT ), tmp2_int );
tmp1_int = SKP_max_int( pNLSF_Q15[ k + 1 ] - pNLSF_Q15[ k ], 1 );
tmp1_int = SKP_DIV32_16( 1 << ( 15 + Q_OUT ), tmp1_int );
tmp2_int = SKP_max_int( pNLSF_Q15[ k + 2 ] - pNLSF_Q15[ k + 1 ], 1 );
tmp2_int = SKP_DIV32_16( 1 << ( 15 + Q_OUT ), tmp2_int );
tmp1_int = SKP_max_int( ( 1 << 15 ) - pNLSF_Q15[ D - 1 ], 1 );
tmp1_int = SKP_DIV32_16( 1 << ( 15 + Q_OUT ), tmp1_int );
x_ptr = x + psEnc->sCmn.la_shape - SKP_SMULBB( SHAPE_LPC_WIN_MS, psEnc->sCmn.fs_kHz ) + psEnc->sCmn.frame_length / NB_SUBFR;

b_Q8 = ( 1 << 8 ) - psEnc->speech_activity_Q8;
b_Q8 = SKP_SMULWB( SKP_LSHIFT( b_Q8, 8 ), b_Q8 );
SNR_adj_dB_Q7 = SKP_SMLAWB( psEncCtrl->current_SNR_dB_Q7,
        SKP_SMULBB( -BG_SNR_DECR_dB_Q7 >> ( 4 + 1 ), b_Q8 ),                                            // Q11
        SKP_SMULWB( ( 1 << 14 ) + psEncCtrl->input_quality_Q14, psEncCtrl->coding_quality_Q14 ) );      // Q12

SNR_adj_dB_Q7 = SKP_SMLAWB( SNR_adj_dB_Q7, HARM_SNR_INCR_dB_Q7 << 1, psEnc->LTPCorr_Q15 );
SNR_adj_dB_Q7 = SKP_SMLAWB( SNR_adj_dB_Q7,
            SKP_SMLAWB( 6 << ( 7 + 2 ), -104856, psEncCtrl->current_SNR_dB_Q7 ),    //-104856_Q18 = -0.4_Q0, Q9
            ( 1 << 14 ) - psEncCtrl->input_quality_Q14 );                           // Q14
nSamples = SKP_LSHIFT( psEnc->sCmn.fs_kHz, 1 );
energy_variation_Q7 = 0;
log_energy_prev_Q7  = 0;
pitch_res_ptr = pitch_res;
log_energy_Q7 = SKP_Silk_lin2log( nrg );
log_energy_prev_Q7 = log_energy_Q7;
SNR_adj_dB_Q7 = SKP_SMLAWB( SNR_adj_dB_Q7, SPARSE_SNR_INCR_dB_Q7 << 8, psEncCtrl->sparseness_Q8 - ( 1 << 7 ) );
delta_Q16  = SKP_SMULWB( ( 1 << 16 ) - SKP_SMULBB( 3, psEncCtrl->coding_quality_Q14 ), LOW_RATE_BANDWIDTH_EXPANSION_DELTA_Q16 );
BWExp1_Q16 = BANDWIDTH_EXPANSION_Q16 - delta_Q16;
BWExp2_Q16 = BANDWIDTH_EXPANSION_Q16 + delta_Q16;
BWExp1_Q16 = ( 1 << 16 ) - SKP_SMULWB( SWB_BANDWIDTH_EXPANSION_REDUCTION_Q16, ( 1 << 16 ) - BWExp1_Q16 );
BWExp2_Q16 = ( 1 << 16 ) - SKP_SMULWB( SWB_BANDWIDTH_EXPANSION_REDUCTION_Q16, ( 1 << 16 ) - BWExp2_Q16 );
BWExp1_Q16 = SKP_DIV32_16( SKP_LSHIFT( BWExp1_Q16, 14 ), SKP_RSHIFT( BWExp2_Q16, 2 ) );

sz = ( SKP_int )SKP_SMULBB( SHAPE_LPC_WIN_MS, psEnc->sCmn.fs_kHz );
nrg = SKP_Silk_schur64( refl_coef_Q16, auto_corr, psEnc->sCmn.shapingLPCOrder );

nrg = SKP_SMLAWB( nrg, SKP_RSHIFT( auto_corr[ 0 ], 8 ), SHAPE_MIN_ENERGY_RATIO_Q24 );

Qnrg = -scale;          // range: -12...30
tmp32 = SKP_Silk_SQRT_APPROX( nrg );
lz = SKP_min_32( SKP_Silk_CLZ32( pre_nrg_Q30 ) - 1, 19 );
pre_nrg_Q30 = SKP_DIV32( SKP_LSHIFT( pre_nrg_Q30, lz ), SKP_RSHIFT( nrg, 20 - lz ) + 1 ); // Q20
pre_nrg_Q30 = SKP_RSHIFT( SKP_LSHIFT_SAT32( pre_nrg_Q30, 9 ), 1 );  /* Q28 */
gain_mult_Q16 = SKP_Silk_log2lin( -SKP_SMLAWB( -16 << 7, SNR_adj_dB_Q7,           10486 ) ); // 10486_Q16 = 0.16_Q0
gain_add_Q16  = SKP_Silk_log2lin(  SKP_SMLAWB(  16 << 7, NOISE_FLOOR_dB_Q7,       10486 ) ); // 10486_Q16 = 0.16_Q0
tmp32         = SKP_Silk_log2lin(  SKP_SMLAWB(  16 << 7, RELATIVE_MIN_GAIN_dB_Q7, 10486 ) ); // 10486_Q16 = 0.16_Q0
tmp32 = SKP_SMULWW( psEnc->avgGain_Q16, tmp32 );
gain_add_Q16 = SKP_ADD_SAT32( gain_add_Q16, tmp32 );
gain_mult_Q16 = ( 1 << 16 ) + SKP_RSHIFT_ROUND( SKP_MLA( INPUT_TILT_Q26, psEncCtrl->coding_quality_Q14, HIGH_RATE_INPUT_TILT_Q12 ), 10 );

tmp32 = SKP_Silk_log2lin( ( 16 << 7 ) - SKP_SMULWB( essStrength_Q15,
                SKP_SMULWB( DE_ESSER_COEF_SWB_dB_Q7, 20972 ) ) ); // 20972_Q17 = 0.16_Q0
gain_mult_Q16 = SKP_SMULWW( gain_mult_Q16, tmp32 );





tmp32 = SKP_Silk_log2lin( ( 16 << 7 ) - SKP_SMULWB( essStrength_Q15,
                SKP_SMULWB( DE_ESSER_COEF_WB_dB_Q7, 20972 ) ) ); // 20972_Q17 = 0.16_Q0
gain_mult_Q16 = SKP_SMULWW( gain_mult_Q16, tmp32 );
strength_Q16 = SKP_MUL( LOW_FREQ_SHAPING_Q0, ( 1 << 16 ) + SKP_SMULBB( LOW_QUALITY_LOW_FREQ_SHAPING_DECR_Q1, psEncCtrl->input_quality_bands_Q15[ 0 ] - ( 1 << 15 ) ) );
b_Q14 = fs_kHz_inv + SKP_DIV32_16( ( 3 << 14 ), psEncCtrl->sCmn.pitchL[ k ] );
Tilt_Q16 = - HP_NOISE_COEF_Q16 -
            SKP_SMULWB( ( 1 << 16 ) - HP_NOISE_COEF_Q16, SKP_SMULWB( HARM_HP_NOISE_COEF_Q24, psEnc->speech_activity_Q8 ) );
b_Q14 = SKP_DIV32_16( 21299, psEnc->sCmn.fs_kHz ); // 1.3_Q0 = 21299_Q14
Tilt_Q16 = -HP_NOISE_COEF_Q16;
HarmBoost_Q16 = SKP_SMULWB( SKP_SMULWB( ( 1 << 17 ) - SKP_LSHIFT( psEncCtrl->coding_quality_Q14, 3 ),
        psEnc->LTPCorr_Q15 ), LOW_RATE_HARMONIC_BOOST_Q16 );

HarmBoost_Q16 = SKP_SMLAWB( HarmBoost_Q16,
        ( 1 << 16 ) - SKP_LSHIFT( psEncCtrl->input_quality_Q14, 2 ), LOW_INPUT_QUALITY_HARMONIC_BOOST_Q16 );

HarmShapeGain_Q16 = SKP_SMLAWB( HARMONIC_SHAPING_Q16,
                ( 1 << 16 ) - SKP_SMULWB( ( 1 << 18 ) - SKP_LSHIFT( psEncCtrl->coding_quality_Q14, 4 ),
                psEncCtrl->input_quality_Q14 ), HIGH_RATE_OR_LOW_QUALITY_HARMONIC_SHAPING_Q16 );

HarmShapeGain_Q16 = SKP_SMULWB( SKP_LSHIFT( HarmShapeGain_Q16, 1 ),
            SKP_Silk_SQRT_APPROX( SKP_LSHIFT( psEnc->LTPCorr_Q15, 15 ) ) );
HarmShapeGain_Q16 = 0;
subfr_length = psEncC->frame_length / NB_SUBFR;

lag             = NSQ->lagPrev;

offset_Q10 = SKP_Silk_Quantization_Offsets_Q10[ psEncCtrlC->sigtype ][ psEncCtrlC->QuantOffsetType ];

LSF_interpolation_flag = 0;
LSF_interpolation_flag = 1;
pxq                   = &NSQ->xq[ psEncC->frame_length ];
A_Q12      = &PredCoef_Q12[ (( k >> 1 ) | ( 1 - LSF_interpolation_flag )) * MAX_LPC_ORDER ];
B_Q14      = &LTPCoef_Q14[ k * LTP_ORDER ];
AR_shp_Q13 = &AR2_Q13[     k * SHAPE_LPC_ORDER_MAX ];

HarmShapeFIRPacked_Q14  =                        SKP_RSHIFT( HarmShapeGain_Q14[ k ], 2 );
lag = psEncCtrlC->pitchL[ k ];

start_idx = psEncC->frame_length - lag - psEncC->predictLPCOrder - LTP_ORDER / 2;
start_idx = SKP_LIMIT( start_idx, 0, psEncC->frame_length - psEncC->predictLPCOrder ); /* Limit */

shp_lag_ptr  = &NSQ->sLTP_shp_Q10[ NSQ->sLTP_shp_buf_idx - lag + HARM_SHAPE_FIR_TAPS / 2 ];
pred_lag_ptr = &sLTP_Q16[ NSQ->sLTP_buf_idx - lag + LTP_ORDER / 2 ];

psLPC_Q14     = &NSQ->sLPC_Q14[ MAX_LPC_ORDER - 1 ];

thr1_Q10 = SKP_SUB_RSHIFT32( -1536, Lambda_Q10, 1);
thr2_Q10 = SKP_SUB_RSHIFT32( -512,  Lambda_Q10, 1);
thr2_Q10 = SKP_ADD_RSHIFT32( thr2_Q10, SKP_SMULBB( offset_Q10, Lambda_Q10 ), 10 );
thr3_Q10 = SKP_ADD_RSHIFT32(  512,  Lambda_Q10, 1);

dither = SKP_RSHIFT( NSQ->rand_seed, 31 );

Atmp = a_Q12_tmp[ 0 ];      /* read two coefficients at once */
LPC_pred_Q10 = SKP_SMULWB(               psLPC_Q14[ 0  ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psLPC_Q14[ -1 ], Atmp );
Atmp = a_Q12_tmp[ 1 ];
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psLPC_Q14[ -2 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psLPC_Q14[ -3 ], Atmp );
Atmp = a_Q12_tmp[ 2 ];
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psLPC_Q14[ -4 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psLPC_Q14[ -5 ], Atmp );
Atmp = a_Q12_tmp[ 3 ];
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psLPC_Q14[ -6 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psLPC_Q14[ -7 ], Atmp );





Atmp = a_Q12_tmp[ 4 ];
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psLPC_Q14[ -8 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psLPC_Q14[ -9 ], Atmp );
Atmp = a_Q12_tmp[ j >> 1 ];     /* read two coefficients at once */
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psLPC_Q14[ -j     ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psLPC_Q14[ -j - 1 ], Atmp );
LTP_pred_Q14 = SKP_SMULWB(               pred_lag_ptr[  0 ], b_Q14[ 0 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -1 ], b_Q14[ 1 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -2 ], b_Q14[ 2 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -3 ], b_Q14[ 3 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -4 ], b_Q14[ 4 ] );
LTP_pred_Q14 = 0;
Atmp = AR_shp_Q13_tmp[ 0 ];     /* read two coefficients at once */
n_AR_Q10 = SKP_SMULWB(           psLPC_Q14[ 0  ], Atmp );
n_AR_Q10 = SKP_SMLAWT( n_AR_Q10, psLPC_Q14[ -1 ], Atmp );
Atmp = AR_shp_Q13_tmp[ 1 ];
n_AR_Q10 = SKP_SMLAWB( n_AR_Q10, psLPC_Q14[ -2 ], Atmp );
n_AR_Q10 = SKP_SMLAWT( n_AR_Q10, psLPC_Q14[ -3 ], Atmp );
Atmp = AR_shp_Q13_tmp[ 2 ];
n_AR_Q10 = SKP_SMLAWB( n_AR_Q10, psLPC_Q14[ -4 ], Atmp );
n_AR_Q10 = SKP_SMLAWT( n_AR_Q10, psLPC_Q14[ -5 ], Atmp );
Atmp = AR_shp_Q13_tmp[ 3 ];
n_AR_Q10 = SKP_SMLAWB( n_AR_Q10, psLPC_Q14[ -6 ], Atmp );
n_AR_Q10 = SKP_SMLAWT( n_AR_Q10, psLPC_Q14[ -7 ], Atmp );
Atmp = AR_shp_Q13_tmp[ 4 ];
n_AR_Q10 = SKP_SMLAWB( n_AR_Q10, psLPC_Q14[ -8 ], Atmp );
n_AR_Q10 = SKP_SMLAWT( n_AR_Q10, psLPC_Q14[ -9 ], Atmp );
Atmp = AR_shp_Q13_tmp[ 5 ];
n_AR_Q10 = SKP_SMLAWB( n_AR_Q10, psLPC_Q14[ -10 ], Atmp );
n_AR_Q10 = SKP_SMLAWT( n_AR_Q10, psLPC_Q14[ -11 ], Atmp );
Atmp = AR_shp_Q13_tmp[ j >> 1 ];        /* read two coefficients at once */





n_AR_Q10 = SKP_SMLAWB( n_AR_Q10, psLPC_Q14[ -j     ], Atmp );
n_AR_Q10 = SKP_SMLAWT( n_AR_Q10, psLPC_Q14[ -j - 1 ], Atmp );
n_AR_Q10 = SKP_RSHIFT( n_AR_Q10, 1 );   /* Q11 -> Q10 */
n_AR_Q10  = SKP_SMLAWB( n_AR_Q10, NSQ->sLF_AR_shp_Q12, Tilt_Q14 );

n_LF_Q10   = SKP_LSHIFT( SKP_SMULWB( NSQ->sLTP_shp_Q10[ NSQ->sLTP_shp_buf_idx - 1 ], LF_shp_Q14 ), 2 );
n_LF_Q10   = SKP_SMLAWT( n_LF_Q10, NSQ->sLF_AR_shp_Q12, LF_shp_Q14 );

n_LTP_Q14 = SKP_SMULWB( SKP_ADD32( shp_lag_ptr[ 0 ], shp_lag_ptr[ -2 ] ), HarmShapeFIRPacked_Q14 );
n_LTP_Q14 = SKP_SMLAWT( n_LTP_Q14, shp_lag_ptr[ -1 ],                     HarmShapeFIRPacked_Q14 );
n_LTP_Q14 = SKP_LSHIFT( n_LTP_Q14, 6 );
n_LTP_Q14 = 0;
tmp   = SKP_SUB32( LTP_pred_Q14, n_LTP_Q14 );                       /* Add Q14 stuff */
tmp   = SKP_RSHIFT_ROUND( tmp, 4 );                                 /* round to Q10  */
tmp   = SKP_ADD32( tmp, LPC_pred_Q10 );                             /* add Q10 stuff */
tmp   = SKP_SUB32( tmp, n_AR_Q10 );                                 /* subtract Q10 stuff */
tmp   = SKP_SUB32( tmp, n_LF_Q10 );                                 /* subtract Q10 stuff */
r_Q10 = SKP_SUB32( x_sc_Q10[ i ], tmp );


r_Q10 = ( r_Q10 ^ dither ) - dither;
r_Q10 = SKP_SUB32( r_Q10, offset_Q10 );
r_Q10 = SKP_LIMIT( r_Q10, -64 << 10, 64 << 10 );

q_Q0 = SKP_RSHIFT_ROUND( SKP_ADD_RSHIFT32( r_Q10, Lambda_Q10, 1 ), 10 );
q_Q10 = SKP_LSHIFT( q_Q0, 10 );
q_Q0 = -1;
q_Q10 = -1024;
q_Q0 = SKP_RSHIFT_ROUND( SKP_SUB_RSHIFT32( r_Q10, Lambda_Q10, 1 ), 10 );
q_Q10 = SKP_LSHIFT( q_Q0, 10 );
q_Q0 = 0;
q_Q10 = 0;
exc_Q10 = SKP_ADD32( q_Q10, offset_Q10 );
exc_Q10 = ( exc_Q10 ^ dither ) - dither;

LPC_exc_Q10 = SKP_ADD32( exc_Q10, SKP_RSHIFT_ROUND( LTP_pred_Q14, 4 ) );
xq_Q10      = SKP_ADD32( LPC_exc_Q10, LPC_pred_Q10 );

sLF_AR_shp_Q10 = SKP_SUB32( xq_Q10, n_AR_Q10 );
inv_gain_Q16 = SKP_DIV32( SKP_int32_MAX, SKP_RSHIFT( Gains_Q16[ subfr ], 1) );
inv_gain_Q16 = SKP_min( inv_gain_Q16, SKP_int16_MAX );
lag          = pitchL[ subfr ];

inv_gain_Q32 = SKP_LSHIFT( inv_gain_Q16, 16 );
inv_gain_Q32 = SKP_LSHIFT( SKP_SMULWB( inv_gain_Q32, LTP_scale_Q14 ), 2 );
scale_length = length * NB_SUBFR;                                           /* approx max lag */
scale_length = scale_length - SKP_SMULBB( NB_SUBFR - (subfr + 1), length ); /* subtract samples that will be too old in next frame */
scale_length = SKP_max_int( scale_length, lag + LTP_ORDER );                /* make sure to scale whole pitch period if voiced */

gain_adj_Q16 =  SKP_DIV32_varQ( inv_gain_Q16, NSQ->prev_inv_gain_Q16, 16 );

subfr_length = psEncC->frame_length / NB_SUBFR;

lag = NSQ->lagPrev;

psDD                 = &psDelDec[ k ];
offset_Q10   = SKP_Silk_Quantization_Offsets_Q10[ psEncCtrlC->sigtype ][ psEncCtrlC->QuantOffsetType ];
smpl_buf_idx = 0; /* index of oldest samples */

decisionDelay = SKP_min_int( DECISION_DELAY, subfr_length );
decisionDelay = SKP_min_int( decisionDelay, psEncCtrlC->pitchL[ k ] - LTP_ORDER / 2 - 1 );
LSF_interpolation_flag = 0;
LSF_interpolation_flag = 1;
pxq                   = &NSQ->xq[ psEncC->frame_length ];
subfr = 0;
A_Q12      = &PredCoef_Q12[ ( ( k >> 1 ) | ( 1 - LSF_interpolation_flag ) ) * MAX_LPC_ORDER ];
B_Q14      = &LTPCoef_Q14[ k * LTP_ORDER           ];
AR_shp_Q13 = &AR2_Q13[     k * SHAPE_LPC_ORDER_MAX ];





lag = psEncCtrlC->pitchL[ k ];

RDmin_Q10 = psDelDec[ 0 ].RD_Q10;
Winner_ind = 0;
RDmin_Q10 = psDelDec[ i ].RD_Q10;
Winner_ind = i;
psDD = &psDelDec[ Winner_ind ];
last_smple_idx = smpl_buf_idx + decisionDelay;
last_smple_idx = ( last_smple_idx - 1 ) & DECISION_DELAY_MASK;
subfr = 0;
start_idx = psEncC->frame_length - lag - psEncC->predictLPCOrder - LTP_ORDER / 2;
start_idx = SKP_LIMIT( start_idx, 0, psEncC->frame_length - psEncC->predictLPCOrder );

HarmShapeFIRPacked_Q14  =                        SKP_RSHIFT( HarmShapeGain_Q14[ k ], 2 );
RDmin_Q10 = psDelDec[ 0 ].RD_Q10;
Winner_ind = 0;
RDmin_Q10 = psDelDec[ k ].RD_Q10;
Winner_ind = k;
psDD = &psDelDec[ Winner_ind ];
last_smple_idx = smpl_buf_idx + decisionDelay;
last_smple_idx = ( last_smple_idx - 1 ) & DECISION_DELAY_MASK;
shp_lag_ptr  = &NSQ->sLTP_shp_Q10[ NSQ->sLTP_shp_buf_idx - lag + HARM_SHAPE_FIR_TAPS / 2 ];
pred_lag_ptr = &sLTP_Q16[ NSQ->sLTP_buf_idx - lag + LTP_ORDER / 2 ];

LTP_pred_Q14 = SKP_SMULWB(               pred_lag_ptr[  0 ], b_Q14[ 0 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -1 ], b_Q14[ 1 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -2 ], b_Q14[ 2 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -3 ], b_Q14[ 3 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -4 ], b_Q14[ 4 ] );
LTP_pred_Q14 = 0;
n_LTP_Q14 = SKP_SMULWB( SKP_ADD32( shp_lag_ptr[ 0 ], shp_lag_ptr[ -2 ] ), HarmShapeFIRPacked_Q14 );
n_LTP_Q14 = SKP_SMLAWT( n_LTP_Q14, shp_lag_ptr[ -1 ],                     HarmShapeFIRPacked_Q14 );
n_LTP_Q14 = SKP_LSHIFT( n_LTP_Q14, 6 );
n_LTP_Q14 = 0;
psDD = &psDelDec[ k ];





psSS = psSampleState[ k ];

dither = SKP_RSHIFT( psDD->Seed, 31 );

psLPC_Q14 = &psDD->sLPC_Q14[ NSQ_LPC_BUF_LENGTH - 1 + i ];
Atmp = a_Q12_tmp[ 0 ];          /* read two coefficients at once */
LPC_pred_Q10 = SKP_SMULWB(               psLPC_Q14[ 0  ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psLPC_Q14[ -1 ], Atmp );
Atmp = a_Q12_tmp[ 1 ];
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psLPC_Q14[ -2 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psLPC_Q14[ -3 ], Atmp );
Atmp = a_Q12_tmp[ 2 ];
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psLPC_Q14[ -4 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psLPC_Q14[ -5 ], Atmp );
Atmp = a_Q12_tmp[ 3 ];
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psLPC_Q14[ -6 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psLPC_Q14[ -7 ], Atmp );
Atmp = a_Q12_tmp[ 4 ];
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psLPC_Q14[ -8 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psLPC_Q14[ -9 ], Atmp );
Atmp = a_Q12_tmp[ j >> 1 ]; /* read two coefficients at once */
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psLPC_Q14[ -j     ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psLPC_Q14[ -j - 1 ], Atmp );
Atmp = AR_shp_Q13_tmp[ 0 ];         /* read two coefficients at once */
n_AR_Q10 = SKP_SMULWB(           psLPC_Q14[ 0  ], Atmp );
n_AR_Q10 = SKP_SMLAWT( n_AR_Q10, psLPC_Q14[ -1 ], Atmp );
Atmp = AR_shp_Q13_tmp[ 1 ];
n_AR_Q10 = SKP_SMLAWB( n_AR_Q10, psLPC_Q14[ -2 ], Atmp );
n_AR_Q10 = SKP_SMLAWT( n_AR_Q10, psLPC_Q14[ -3 ], Atmp );
Atmp = AR_shp_Q13_tmp[ 2 ];
n_AR_Q10 = SKP_SMLAWB( n_AR_Q10, psLPC_Q14[ -4 ], Atmp );
n_AR_Q10 = SKP_SMLAWT( n_AR_Q10, psLPC_Q14[ -5 ], Atmp );
Atmp = AR_shp_Q13_tmp[ 3 ];
n_AR_Q10 = SKP_SMLAWB( n_AR_Q10, psLPC_Q14[ -6 ], Atmp );
n_AR_Q10 = SKP_SMLAWT( n_AR_Q10, psLPC_Q14[ -7 ], Atmp );
Atmp = AR_shp_Q13_tmp[ 4 ];
n_AR_Q10 = SKP_SMLAWB( n_AR_Q10, psLPC_Q14[ -8 ], Atmp );
n_AR_Q10 = SKP_SMLAWT( n_AR_Q10, psLPC_Q14[ -9 ], Atmp );
Atmp = AR_shp_Q13_tmp[ 5 ];
n_AR_Q10 = SKP_SMLAWB( n_AR_Q10, psLPC_Q14[ -10 ], Atmp );
n_AR_Q10 = SKP_SMLAWT( n_AR_Q10, psLPC_Q14[ -11 ], Atmp );
Atmp = AR_shp_Q13_tmp[ j >> 1 ];        /* read two coefficients at once */
n_AR_Q10 = SKP_SMLAWB( n_AR_Q10, psLPC_Q14[ -j     ], Atmp );
n_AR_Q10 = SKP_SMLAWT( n_AR_Q10, psLPC_Q14[ -j - 1 ], Atmp );
n_AR_Q10 = SKP_RSHIFT( n_AR_Q10, 1 );           /* Q11 -> Q10 */
n_AR_Q10 = SKP_SMLAWB( n_AR_Q10, psDD->LF_AR_Q12, Tilt_Q14 );

n_LF_Q10   = SKP_LSHIFT( SKP_SMULWB( psDD->Shape_Q10[ *smpl_buf_idx ], LF_shp_Q14 ), 2 );
n_LF_Q10   = SKP_SMLAWT( n_LF_Q10, psDD->LF_AR_Q12, LF_shp_Q14 );

tmp   = SKP_SUB32( LTP_pred_Q14, n_LTP_Q14 );                       /* Add Q14 stuff */
tmp   = SKP_RSHIFT_ROUND( tmp, 4 );                                 /* round to Q10  */
tmp   = SKP_ADD32( tmp, LPC_pred_Q10 );                             /* add Q10 stuff */
tmp   = SKP_SUB32( tmp, n_AR_Q10 );                                 /* subtract Q10 stuff */
tmp   = SKP_SUB32( tmp, n_LF_Q10 );                                 /* subtract Q10 stuff */
r_Q10 = SKP_SUB32( x_Q10[ i ], tmp );                               /* residual error Q10 */


r_Q10 = ( r_Q10 ^ dither ) - dither;
r_Q10 = SKP_SUB32( r_Q10, offset_Q10 );
r_Q10 = SKP_LIMIT( r_Q10, -64 << 10, 64 << 10 );

q1_Q10  = SKP_LSHIFT( SKP_RSHIFT_ROUND( r_Q10, 10 ), 10 );
r_Q10   = SKP_SUB32( r_Q10, q1_Q10 );





rd1_Q10 = SKP_RSHIFT( SKP_SMLABB( SKP_MUL( -SKP_ADD32( q1_Q10, offset_Q10 ), Lambda_Q10 ), r_Q10, r_Q10 ), 10 );
rd2_Q10 = SKP_ADD32( rd1_Q10, 1024 );
rd2_Q10 = SKP_SUB32( rd2_Q10, SKP_ADD_LSHIFT32( Lambda_Q10, r_Q10, 1 ) );
q2_Q10  = SKP_ADD32( q1_Q10, 1024 );
q1_Q10  = SKP_LSHIFT( SKP_RSHIFT_ROUND( r_Q10, 10 ), 10 );
r_Q10   = SKP_SUB32( r_Q10, q1_Q10 );
rd1_Q10 = SKP_RSHIFT( SKP_SMLABB( SKP_MUL( SKP_ADD32( q1_Q10, offset_Q10 ), Lambda_Q10 ), r_Q10, r_Q10 ), 10 );
rd2_Q10 = SKP_ADD32( rd1_Q10, 1024 );
rd2_Q10 = SKP_SUB32( rd2_Q10, SKP_SUB_LSHIFT32( Lambda_Q10, r_Q10, 1 ) );
q2_Q10  = SKP_SUB32( q1_Q10, 1024 );
rr_Q20  = SKP_SMULBB( offset_Q10, Lambda_Q10 );
rd2_Q10 = SKP_RSHIFT( SKP_SMLABB( rr_Q20, r_Q10, r_Q10 ), 10 );
rd1_Q10 = SKP_ADD32( rd2_Q10, 1024 );
rd1_Q10 = SKP_ADD32( rd1_Q10, SKP_SUB_RSHIFT32( SKP_ADD_LSHIFT32( Lambda_Q10, r_Q10, 1 ), rr_Q20, 9 ) );
q1_Q10  = -1024;
q2_Q10  = 0;
exc_Q10 = SKP_ADD32( offset_Q10, psSS[ 0 ].Q_Q10 );
exc_Q10 = ( exc_Q10 ^ dither ) - dither;

LPC_exc_Q10 = exc_Q10 + SKP_RSHIFT_ROUND( LTP_pred_Q14, 4 );
xq_Q10      = SKP_ADD32( LPC_exc_Q10, LPC_pred_Q10 );

sLF_AR_shp_Q10         = SKP_SUB32(  xq_Q10, n_AR_Q10 );
exc_Q10 = SKP_ADD32( offset_Q10, psSS[ 1 ].Q_Q10 );
exc_Q10 = ( exc_Q10 ^ dither ) - dither;

LPC_exc_Q10 = exc_Q10 + SKP_RSHIFT_ROUND( LTP_pred_Q14, 4 );
xq_Q10      = SKP_ADD32( LPC_exc_Q10, LPC_pred_Q10 );

sLF_AR_shp_Q10         = SKP_SUB32(  xq_Q10, n_AR_Q10 );
last_smple_idx = ( *smpl_buf_idx + decisionDelay ) & DECISION_DELAY_MASK;       /* Index to decisionDelay old samples   */

RDmin_Q10 = psSampleState[ 0 ][ 0 ].RD_Q10;
Winner_ind = 0;
RDmin_Q10   = psSampleState[ k ][ 0 ].RD_Q10;
Winner_ind = k;
Winner_rand_state = psDelDec[ Winner_ind ].RandState[ last_smple_idx ];
RDmax_Q10  = psSampleState[ 0 ][ 0 ].RD_Q10;
RDmin_Q10  = psSampleState[ 0 ][ 1 ].RD_Q10;
RDmax_ind = 0;
RDmin_ind = 0;
RDmax_Q10  = psSampleState[ k ][ 0 ].RD_Q10;
RDmax_ind = k;
RDmin_Q10  = psSampleState[ k ][ 1 ].RD_Q10;
RDmin_ind = k;
psDD = &psDelDec[ Winner_ind ];
psDD                                     = &psDelDec[ k ];
psSS                                     = &psSampleState[ k ][ 0 ];
psDD = &psDelDec[ k ];





inv_gain_Q16 = SKP_DIV32( SKP_int32_MAX, SKP_RSHIFT( Gains_Q16[ subfr ], 1 ) );
inv_gain_Q16 = SKP_min( inv_gain_Q16, SKP_int16_MAX );
lag          = pitchL[ subfr ];
inv_gain_Q32 = SKP_LSHIFT( inv_gain_Q16, 16 );
inv_gain_Q32 = SKP_LSHIFT( SKP_SMULWB( inv_gain_Q32, LTP_scale_Q14 ), 2 );
gain_adj_Q16 = SKP_DIV32_varQ( inv_gain_Q16, NSQ->prev_inv_gain_Q16, 16 );

psDD = &psDelDec[ k ];

scale_length = length * NB_SUBFR;                                               /* aprox max lag */
scale_length = scale_length - SKP_SMULBB( NB_SUBFR - ( subfr + 1 ), length );   /* subtract samples that will be too old in next frame */
scale_length = SKP_max_int( scale_length, lag + LTP_ORDER );                    /* make sure to scale whole pitch period if voiced */

min_lag = SKP_SMULBB( PITCH_EST_MIN_LAG_MS, Fs_kHz );

lag = min_lag + lagIndex;
frame_length      = PITCH_EST_FRAME_LENGTH_MS * Fs_kHz;
frame_length_4kHz = PITCH_EST_FRAME_LENGTH_MS * 4;
frame_length_8kHz = PITCH_EST_FRAME_LENGTH_MS * 8;
sf_length         = SKP_RSHIFT( frame_length,      3 );
sf_length_4kHz    = SKP_RSHIFT( frame_length_4kHz, 3 );
sf_length_8kHz    = SKP_RSHIFT( frame_length_8kHz, 3 );
min_lag           = PITCH_EST_MIN_LAG_MS * Fs_kHz;





min_lag_4kHz      = PITCH_EST_MIN_LAG_MS * 4;
min_lag_8kHz      = PITCH_EST_MIN_LAG_MS * 8;
max_lag           = PITCH_EST_MAX_LAG_MS * Fs_kHz;
max_lag_4kHz      = PITCH_EST_MAX_LAG_MS * 4;
max_lag_8kHz      = PITCH_EST_MAX_LAG_MS * 8;

max_sum_sq_length = SKP_max_32( sf_length_8kHz, SKP_RSHIFT( frame_length_4kHz, 1 ) );
shift = SKP_FIX_P_Ana_find_scaling( signal_4kHz, frame_length_4kHz, max_sum_sq_length );
target_ptr = &signal_4kHz[ SKP_RSHIFT( frame_length_4kHz, 1 ) ];
basis_ptr = target_ptr - min_lag_4kHz;

normalizer = 0;
cross_corr = 0;
cross_corr = SKP_Silk_inner_prod_aligned( target_ptr, basis_ptr, sf_length_8kHz );
normalizer = SKP_Silk_inner_prod_aligned( basis_ptr,  basis_ptr, sf_length_8kHz );
normalizer = SKP_ADD_SAT32( normalizer, 1000 );

temp32 = SKP_DIV32( cross_corr, SKP_Silk_SQRT_APPROX( normalizer ) + 1 );





cross_corr = SKP_Silk_inner_prod_aligned( target_ptr, basis_ptr, sf_length_8kHz );

temp32 = SKP_DIV32( cross_corr, SKP_Silk_SQRT_APPROX( normalizer ) + 1 );
sum = (SKP_int32)C[ 0 ][ i ] + (SKP_int32)C[ 1 ][ i ];                /* Q0 */
sum = SKP_RSHIFT( sum, 1 );                                           /* Q-1 */
sum = SKP_SMLAWB( sum, sum, SKP_LSHIFT( -i, 4 ) );                    /* Q-1 */
length_d_srch = 5 + complexity;
target_ptr = &signal_4kHz[ SKP_RSHIFT( frame_length_4kHz, 1 ) ];
energy = SKP_Silk_inner_prod_aligned( target_ptr, target_ptr, SKP_RSHIFT( frame_length_4kHz, 1 ) );
energy = SKP_ADD_SAT32( energy, 1000 );                                  /* Q0 */
Cmax = (SKP_int)C[ 0 ][ min_lag_4kHz ];                                  /* Q-1 */
threshold = SKP_SMULBB( Cmax, Cmax );                                    /* Q-2 */
threshold = SKP_SMULWB( search_thres1_Q16, Cmax );
length_d_srch = i;
length_d_srch = 0;
length_d_comp = 0;
shift = SKP_FIX_P_Ana_find_scaling( signal_8kHz, frame_length_8kHz, sf_length_8kHz );
target_ptr = &signal_8kHz[ frame_length_4kHz ]; /* point to middle of frame */
energy_target = SKP_Silk_inner_prod_aligned( target_ptr, target_ptr, sf_length_8kHz );
d = d_comp[ j ];
basis_ptr = target_ptr - d;

cross_corr   = SKP_Silk_inner_prod_aligned( target_ptr, basis_ptr, sf_length_8kHz );
energy_basis = SKP_Silk_inner_prod_aligned( basis_ptr,  basis_ptr, sf_length_8kHz );
energy = SKP_max( energy_target, energy_basis ); /* Find max to make sure first division < 1.0 */
lz = SKP_Silk_CLZ32( cross_corr );
lshift = SKP_LIMIT( lz - 1, 0, 15 );
temp32 = SKP_DIV32( SKP_LSHIFT( cross_corr, lshift ), SKP_RSHIFT( energy, 15 - lshift ) + 1 ); /* Q15 */





temp32 = SKP_SMULWB( cross_corr, temp32 ); /* Q(-1), cc * ( cc / max(b, t) ) */
temp32 = SKP_ADD_SAT32( temp32, temp32 );  /* Q(0) */
lz = SKP_Silk_CLZ32( temp32 );
lshift = SKP_LIMIT( lz - 1, 0, 15 );
energy = SKP_min( energy_target, energy_basis );
CCmax   = SKP_int32_MIN;
CCmax_b = SKP_int32_MIN;

CBimax = 0; /* To avoid returning undefined lag values */
lag = -1;   /* To check if lag with strong enough correlation has been found */

prevLag = SKP_DIV32_16( SKP_LSHIFT( prevLag, 1 ), 3 );
prevLag = SKP_RSHIFT( prevLag, 1 );
prevLag = SKP_DIV32_16( prevLag, 3 );
prevLag_log2_Q7 = SKP_Silk_lin2log( (SKP_int32)prevLag );
prevLag_log2_Q7 = 0;
corr_thres_Q15 = SKP_RSHIFT( SKP_SMULBB( search_thres2_Q15, search_thres2_Q15 ), 13 );

nb_cbks_stage2 = PITCH_EST_NB_CBKS_STAGE2_EXT;
nb_cbks_stage2 = PITCH_EST_NB_CBKS_STAGE2;
d = d_srch[ k ];
CCmax_new = SKP_int32_MIN;
CBimax_new = 0;
CCmax_new = CC[ i ];
CBimax_new = i;
lag_log2_Q7 = SKP_Silk_lin2log( (SKP_int32)d ); /* Q7 */
CCmax_new_b = CCmax_new - SKP_RSHIFT( SKP_SMULBB( PITCH_EST_NB_SUBFR * PITCH_EST_SHORTLAG_BIAS_Q15, lag_log2_Q7 ), 7 ); /* Q15 */

delta_lag_log2_sqr_Q7 = lag_log2_Q7 - prevLag_log2_Q7;
delta_lag_log2_sqr_Q7 = SKP_RSHIFT( SKP_SMULBB( delta_lag_log2_sqr_Q7, delta_lag_log2_sqr_Q7 ), 7 );
prev_lag_bias_Q15 = SKP_RSHIFT( SKP_SMULBB( PITCH_EST_NB_SUBFR * PITCH_EST_PREVLAG_BIAS_Q15, ( *LTPCorr_Q15 ) ), 15 ); /* Q15 */
prev_lag_bias_Q15 = SKP_DIV32( SKP_MUL( prev_lag_bias_Q15, delta_lag_log2_sqr_Q7 ), delta_lag_log2_sqr_Q7 + ( 1 << 6 ) );
CCmax_b = CCmax_new_b;
CCmax   = CCmax_new;
lag     = d;
CBimax  = CBimax_new;
shift = SKP_FIX_P_Ana_find_scaling( signal, frame_length, sf_length );
input_signal_ptr = (SKP_int16*)scratch_mem;
input_signal_ptr = (SKP_int16*)signal;
CBimax_old = CBimax;
lag = SKP_RSHIFT( SKP_SMULBB( lag, 3 ), 1 );
lag = SKP_LSHIFT( lag, 1 );
lag = SKP_SMULBB( lag, 3 );
lag = SKP_LIMIT( lag, min_lag, max_lag );
start_lag = SKP_max_int( lag - 2, min_lag );
end_lag   = SKP_min_int( lag + 2, max_lag );
lag_new   = lag;                                    /* to avoid undefined lag */
CBimax    = 0;                                        /* to avoid undefined lag */
CCmax = SKP_int32_MIN;
lag_counter = 0;
contour_bias = SKP_DIV32_16( PITCH_EST_FLATCONTOUR_BIAS_Q20, lag );

cbk_size   = (SKP_int)SKP_Silk_cbk_sizes_stage3[   complexity ];
cbk_offset = (SKP_int)SKP_Silk_cbk_offsets_stage3[ complexity ];

cross_corr = 0;
energy     = 0;
lz = SKP_Silk_CLZ32( cross_corr );
lshift = SKP_LIMIT( lz - 1, 0, 13 );
CCmax_new = SKP_DIV32( SKP_LSHIFT( cross_corr, lshift ), SKP_RSHIFT( energy, 13 - lshift ) + 1 );
CCmax_new = SKP_SAT16( CCmax_new );
CCmax_new = SKP_SMULWB( cross_corr, CCmax_new );
CCmax_new = SKP_int32_MAX;
CCmax_new = SKP_LSHIFT( CCmax_new, 3 );
diff = j - SKP_RSHIFT( PITCH_EST_NB_CBKS_STAGE3_MAX, 1 );
diff = SKP_MUL( diff, diff );
diff = SKP_int16_MAX - SKP_RSHIFT( SKP_MUL( contour_bias, diff ), 5 ); /* Q20 -> Q15 */
CCmax_new = SKP_LSHIFT( SKP_SMULWB( CCmax_new, diff ), 1 );
CCmax_new = 0;
CCmax   = CCmax_new;
lag_new = d;





CBimax  = j;
CCmax = SKP_max( CCmax, 0 );
cbk_offset = SKP_Silk_cbk_offsets_stage3[ complexity ];





cbk_size   = SKP_Silk_cbk_sizes_stage3[   complexity ];

target_ptr = &signal[ SKP_LSHIFT( sf_length, 2 ) ]; /* Pointer to middle of frame */
lag_counter = 0;

basis_ptr = target_ptr - ( start_lag + j );
cross_corr = SKP_Silk_inner_prod_aligned( (SKP_int16*)target_ptr, (SKP_int16*)basis_ptr, sf_length );
delta = SKP_Silk_Lag_range_stage3[ complexity ][ k ][ 0 ];
idx = SKP_Silk_CB_lags_stage3[ k ][ i ] - delta;
cbk_offset = SKP_Silk_cbk_offsets_stage3[ complexity ];
cbk_size   = SKP_Silk_cbk_sizes_stage3[   complexity ];

target_ptr = &signal[ SKP_LSHIFT( sf_length, 2 ) ];
lag_counter = 0;

basis_ptr = target_ptr - ( start_lag + SKP_Silk_Lag_range_stage3[ complexity ][ k ][ 0 ] );
energy = SKP_Silk_inner_prod_aligned( basis_ptr, basis_ptr, sf_length );
energy = SKP_ADD_SAT32( energy, SKP_SMULBB( basis_ptr[ -i ], basis_ptr[ -i ] ) );
delta = SKP_Silk_Lag_range_stage3[ complexity ][ k ][ 0 ];
idx = SKP_Silk_CB_lags_stage3[ k ][ i ] - delta;
x_max = SKP_Silk_int16_array_maxabs( signal, signal_length );

nbits = 32 - SKP_Silk_CLZ32( SKP_SMULBB( x_max, x_max ) );
nbits = 30;
psPLC = &psDec->sPLC;

LTP_Gain_Q14 = 0;
temp_LTP_Gain_Q14 = 0;
LTP_Gain_Q14 = temp_LTP_Gain_Q14;
tmp = SKP_LSHIFT( V_PITCH_GAIN_START_MIN_Q14, 10 );
scale_Q10 = SKP_DIV32( tmp, SKP_max( LTP_Gain_Q14, 1 ) );
tmp = SKP_LSHIFT( V_PITCH_GAIN_START_MAX_Q14, 14 );
scale_Q14 = SKP_DIV32( tmp, SKP_max( LTP_Gain_Q14, 1 ) );
psPLC = &psDec->sPLC;

exc_buf_ptr = exc_buf;
rand_ptr = &psDec->exc_Q10[ SKP_max_int( 0, 3 * psDec->subfr_length - RAND_BUF_SIZE ) ];
rand_ptr = &psDec->exc_Q10[ SKP_max_int( 0, psDec->frame_length - RAND_BUF_SIZE ) ];
B_Q14          = psPLC->LTPCoef_Q14;
rand_scale_Q14 = psPLC->randScale_Q14;





harm_Gain_Q15 = HARM_ATT_Q15[ SKP_min_int( NB_ATT - 1, psDec->lossCnt ) ];
rand_Gain_Q15 = PLC_RAND_ATTENUATE_V_Q15[  SKP_min_int( NB_ATT - 1, psDec->lossCnt ) ];
rand_Gain_Q15 = PLC_RAND_ATTENUATE_UV_Q15[ SKP_min_int( NB_ATT - 1, psDec->lossCnt ) ];
rand_scale_Q14 = (1 << 14 );

rand_scale_Q14 = SKP_max_16( 3277, rand_scale_Q14 ); /* 0.2 */
rand_scale_Q14 = ( SKP_int16 )SKP_RSHIFT( SKP_SMULBB( rand_scale_Q14, psPLC->prevLTP_scale_Q14 ), 14 );
down_scale_Q30 = SKP_min_32( SKP_RSHIFT( ( 1 << 30 ), LOG2_INV_LPC_GAIN_HIGH_THRES ), invGain_Q30 );
down_scale_Q30 = SKP_max_32( SKP_RSHIFT( ( 1 << 30 ), LOG2_INV_LPC_GAIN_LOW_THRES ), down_scale_Q30 );
down_scale_Q30 = SKP_LSHIFT( down_scale_Q30, LOG2_INV_LPC_GAIN_HIGH_THRES );

rand_Gain_Q15 = SKP_RSHIFT( SKP_SMULWB( down_scale_Q30, rand_Gain_Q15 ), 14 );
rand_seed           = psPLC->rand_seed;
lag                 = SKP_RSHIFT_ROUND( psPLC->pitchL_Q8, 8 );
sig_Q10_ptr = sig_Q10;
pred_lag_ptr = &psDec->sLTP_Q16[ psDec->sLTP_buf_idx - lag + LTP_ORDER / 2 ];
rand_seed = SKP_RAND( rand_seed );





idx = SKP_RSHIFT( rand_seed, 25 ) & RAND_BUF_MASK;

LTP_pred_Q14 = SKP_SMULWB(               pred_lag_ptr[  0 ], B_Q14[ 0 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -1 ], B_Q14[ 1 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -2 ], B_Q14[ 2 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -3 ], B_Q14[ 3 ] );
LTP_pred_Q14 = SKP_SMLAWB( LTP_pred_Q14, pred_lag_ptr[ -4 ], B_Q14[ 4 ] );
LPC_exc_Q10 = SKP_LSHIFT( SKP_SMULWB( rand_ptr[ idx ], rand_scale_Q14 ), 2 ); /* Random noise part */
LPC_exc_Q10 = SKP_ADD32( LPC_exc_Q10, SKP_RSHIFT_ROUND( LTP_pred_Q14, 4 ) );  /* Harmonic part */

rand_scale_Q14 = SKP_RSHIFT( SKP_SMULBB( rand_scale_Q14, rand_Gain_Q15 ), 15 );

lag = SKP_RSHIFT_ROUND( psPLC->pitchL_Q8, 8 );
sig_Q10_ptr = sig_Q10;
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 0 ] );    /* read two coefficients at once */
LPC_pred_Q10 = SKP_SMULWB(               psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  1 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  2 ], Atmp );





Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 2 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  3 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  4 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 4 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  5 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  6 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 6 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  7 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  8 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ 8 ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  9 ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i - 10 ], Atmp );
Atmp = *( ( SKP_int32* )&A_Q12_tmp[ j ] );
LPC_pred_Q10 = SKP_SMLAWB( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  1 - j ], Atmp );
LPC_pred_Q10 = SKP_SMLAWT( LPC_pred_Q10, psDec->sLPC_Q14[ MAX_LPC_ORDER + i -  2 - j ], Atmp );
psPLC = &psDec->sPLC;

energy = SKP_RSHIFT( energy, psPLC->conc_energy_shift - energy_shift );
LZ = SKP_Silk_CLZ32( psPLC->conc_energy );
LZ = LZ - 1;
energy = SKP_RSHIFT( energy, SKP_max_32( 24 - LZ, 0 ) );

frac_Q24 = SKP_DIV32( psPLC->conc_energy, SKP_max( energy, 1 ) );

gain_Q12 = SKP_Silk_SQRT_APPROX( frac_Q24 );
slope_Q12 = SKP_DIV32_16( ( 1 << 12 ) - gain_Q12, length );

gain_Q12 = SKP_min( gain_Q12, ( 1 << 12 ) );
px  = x;
pxw = xw;
lag = P->lagPrev;
lag = psEncCtrl->sCmn.pitchL[ k ];
HarmShapeGain_Q12 = SKP_SMULWB( psEncCtrl->HarmShapeGain_Q14[ k ], 16384 - psEncCtrl->HarmBoost_Q14[ k ] );
HarmShapeFIRPacked_Q12  =                        SKP_RSHIFT( HarmShapeGain_Q12, 2 );
Tilt_Q14    = psEncCtrl->Tilt_Q14[   k ];
LF_shp_Q14  = psEncCtrl->LF_shp_Q14[ k ];
AR1_shp_Q13 = &psEncCtrl->AR1_Q13[   k * SHAPE_LPC_ORDER_MAX ];

pst_res = st_res + psEnc->sCmn.shapingLPCOrder; /* Point to first sample */

B_Q12 = SKP_RSHIFT_ROUND( psEncCtrl->GainsPre_Q14[ k ], 2 );
tmp_32 = SKP_SMLABB( INPUT_TILT_Q26, psEncCtrl->HarmBoost_Q14[ k ], HarmShapeGain_Q12 ); /* Q26 */
tmp_32 = SKP_SMLABB( tmp_32, psEncCtrl->coding_quality_Q14, HIGH_RATE_INPUT_TILT_Q12 );  /* Q26 */
tmp_32 = SKP_SMULWB( tmp_32, -psEncCtrl->GainsPre_Q14[ k ] );                            /* Q24 */
tmp_32 = SKP_RSHIFT_ROUND( tmp_32, 12 );                                                 /* Q12 */
LTP_shp_buf     = P->sLTP_shp1;
LTP_shp_buf_idx = P->sLTP_shp_buf_idx1;
sLF_AR_shp_Q12  = P->sLF_AR_shp1_Q12;
sLF_MA_shp_Q12  = P->sLF_MA_shp1_Q12;

idx = lag + LTP_shp_buf_idx;
n_LTP_Q12 = SKP_SMULBB(            LTP_shp_buf[ ( idx - HARM_SHAPE_FIR_TAPS / 2 - 1) & LTP_MASK ], HarmShapeFIRPacked_Q12 );
n_LTP_Q12 = SKP_SMLABT( n_LTP_Q12, LTP_shp_buf[ ( idx - HARM_SHAPE_FIR_TAPS / 2    ) & LTP_MASK ], HarmShapeFIRPacked_Q12 );
n_LTP_Q12 = SKP_SMLABB( n_LTP_Q12, LTP_shp_buf[ ( idx - HARM_SHAPE_FIR_TAPS / 2 + 1) & LTP_MASK ], HarmShapeFIRPacked_Q12 );
n_LTP_Q12 = 0;





n_LF_Q10   = SKP_SMLAWB( SKP_SMULWT( sLF_AR_shp_Q12, LF_shp_Q14 ), sLF_MA_shp_Q12, LF_shp_Q14 );
n_Tilt_Q10 = SKP_SMULWB( sLF_AR_shp_Q12, Tilt_Q14 );

sLF_AR_shp_Q12 = SKP_SUB32( st_res_Q12[ i ], SKP_LSHIFT( n_Tilt_Q10, 2 ) );
sLF_MA_shp_Q12 = SKP_SUB32( sLF_AR_shp_Q12,  SKP_LSHIFT( n_LF_Q10,   2 ) );

LTP_shp_buf_idx                = ( LTP_shp_buf_idx - 1 ) & LTP_MASK;
s_Q16 = -SKP_Silk_sigm_Q15( SKP_RSHIFT_ROUND( psEncCtrl->LTPredCodGain_Q7 - (12 << 7), 4 ) );
InvMaxSqrVal_Q16 = SKP_DIV32_16( SKP_Silk_log2lin(
        SKP_SMULWB( (69 << 7) - psEncCtrl->current_SNR_dB_Q7, SKP_FIX_CONST( 0.33, 16 )) ), psEnc->sCmn.subfr_length );

ResNrg     = psEncCtrl->ResNrg[ k ];
ResNrgPart = SKP_SMULWW( ResNrg, InvMaxSqrVal_Q16 );
ResNrgPart = SKP_RSHIFT_ROUND( ResNrgPart, psEncCtrl->ResNrgQ[ k ] );
ResNrgPart = 0;
ResNrgPart = SKP_int32_MAX;
ResNrgPart = SKP_LSHIFT( ResNrgPart, -psEncCtrl->ResNrgQ[ k ] );
gain = psEncCtrl->Gains_Q16[ k ];
gain_squared = SKP_ADD_SAT32( ResNrgPart, SKP_SMMUL( gain, gain ) );





gain_squared = SKP_SMLAWW( SKP_LSHIFT( ResNrgPart, 16 ), gain, gain );
gain = SKP_Silk_SQRT_APPROX( gain_squared );                  /* Q8   */
gain = SKP_Silk_SQRT_APPROX( gain_squared );                  /* Q0   */
NLSF_mu_Q15          = SKP_SMLAWB(   66,   -8388, psEnc->speech_activity_Q8 );
NLSF_mu_fluc_red_Q16 = SKP_SMLAWB( 6554, -838848, psEnc->speech_activity_Q8 );
NLSF_mu_Q15          = SKP_SMLAWB(   164,   -33554, psEnc->speech_activity_Q8 );
NLSF_mu_fluc_red_Q16 = SKP_SMLAWB( 13107, -1677696, psEnc->speech_activity_Q8 + psEncCtrl->sparseness_Q8 );
NLSF_mu_Q15 = SKP_max( NLSF_mu_Q15, 1 );

doInterpolate = ( psEnc->sCmn.useInterpolatedNLSFs == 1 ) && ( psEncCtrl->sCmn.NLSFInterpCoef_Q2 < ( 1 << 2 ) );
i_sqr_Q15 = SKP_LSHIFT( SKP_SMULBB( psEncCtrl->sCmn.NLSFInterpCoef_Q2, psEncCtrl->sCmn.NLSFInterpCoef_Q2 ), 11 );
psNLSF_CB = psEnc->sCmn.psNLSF_CB[ psEncCtrl->sCmn.sigtype ];

iter = psEncC->frame_length / SHELL_CODEC_FRAME_LENGTH;

q_ptr      = q;
acc_nBytes = 0;
sum_abs_val = 0;
nBytes = SKP_SMULWB( SKP_SMULBB( sum_abs_val, sum_abs_val ), POLY_FIT_2_Q20 );  // Q4
nBytes = SKP_LSHIFT_SAT32( nBytes, 11 );                                        // Q15
acc_nBytes = SKP_RSHIFT_ROUND( acc_nBytes, 15 );                                    // Q0
acc_nBytes = SKP_SAT16( acc_nBytes ); // just to be sure                            // Q0

min_rate_dist = SKP_int32_MAX;
cdf_ptr     = SKP_Silk_LTP_gain_CDF_ptrs[     k ];
cl_ptr      = SKP_Silk_LTP_gain_BITS_Q6_ptrs[ k ];
cbk_ptr_Q14 = SKP_Silk_LTP_vq_ptrs_Q14[       k ];
cbk_size    = SKP_Silk_LTP_vq_sizes[          k ];

W_Q18_ptr = W_Q18;
b_Q14_ptr = B_Q14;

rate_dist = 0;
rate_dist = SKP_ADD_POS_SAT32( rate_dist, rate_dist_subfr );

rate_dist = SKP_min( SKP_int32_MAX - 1, rate_dist );

min_rate_dist = rate_dist;
cbk_ptr_Q14 = SKP_Silk_LTP_vq_ptrs_Q14[ *periodicity_index ];
low_Q16  = prob[ data ];
high_Q16 = prob[ data + 1 ];
base_tmp = base_Q32; /* save current base, to test for carry */
range_Q32 = SKP_MUL_uint( range_Q16, high_Q16 - low_Q16 );

range_Q16 = SKP_RSHIFT_uint( range_Q32, 16 );
range_Q16 = SKP_RSHIFT_uint( range_Q32, 8 );
range_Q16 = range_Q32;
base_Q32 = SKP_LSHIFT_ovflw( base_Q32, 8 );
base_Q32 = SKP_LSHIFT_ovflw( base_Q32, 8 );
high_Q16 = prob[ probIx ];
base_tmp = SKP_MUL_uint( range_Q16, high_Q16 );
low_Q16 = prob[ --probIx ];
base_tmp = SKP_MUL_uint( range_Q16, low_Q16 );
high_Q16 = low_Q16;
low_Q16  = high_Q16;
high_Q16 = prob[ ++probIx ];
base_tmp = SKP_MUL_uint( range_Q16, high_Q16 );
range_Q32 = SKP_MUL_uint( range_Q16, high_Q16 - low_Q16 );

range_Q16 = SKP_RSHIFT_uint( range_Q32, 16 );
range_Q16 = SKP_RSHIFT_uint( range_Q32, 8 );
range_Q16 = range_Q32;
base_Q32 = SKP_LSHIFT_uint( base_Q32, 8 );
base_Q32 = SKP_LSHIFT_uint( base_Q32, 8 );
nBits = SKP_LSHIFT( psRC->bufferIx, 3 ) + SKP_Silk_CLZ32( psRC->range_Q16 - 1 ) - 14;

base_Q24 = SKP_RSHIFT_uint( psRC->base_Q32, 8 );

bits_in_stream = SKP_Silk_range_coder_get_length( psRC, &nBytes );

bits_to_store = bits_in_stream - SKP_LSHIFT( psRC->bufferIx, 3 );
bufferIx_tmp = psRC->bufferIx;
mask = SKP_RSHIFT( 0xFF, bits_in_stream & 7 );
bits_in_stream = SKP_Silk_range_coder_get_length( psRC, &nBytes );

mask = SKP_RSHIFT( 0xFF, bits_in_stream & 7 );
idx = SKP_LSHIFT( k, 1 );
idx = SKP_LSHIFT( len, 1 );

idx = SKP_LSHIFT( k, 1 );
idx = SKP_LSHIFT( len, 1 );
idx = SKP_LSHIFT( k, 1 );
idx = SKP_LSHIFT( len, 1 );
outLen = SKP_DIV32_16( inLen, 3 );
LSubFrameOut = SKP_min_int( OUT_SUBFR_LEN, outLen );
LSubFrameIn  = SKP_SMULBB( 3, LSubFrameOut );

out_tmp = scratch10[ k ] + scratch11[ k ] + scratch12[ k ];
idx = SKP_LSHIFT( len, 1 );

idx = SKP_LSHIFT( k, 1 );
outLen = SKP_DIV32_16( SKP_LSHIFT( inLen, 1 ), 3 );
LSubFrameOut = SKP_min_int( OUT_SUBFR_LEN, outLen );
LSubFrameIn  = SKP_SMULWB( 98304, LSubFrameOut ); /* 98304_Q16 = 3/2_Q0 */

frameLenOut = SKP_DIV32_16( SKP_MUL( 2, frameLenIn ), 3 );
index_Q16 = 0;

ind = SKP_RSHIFT( index_Q16, 16 );

in_ptr = scratch + ind;






interpol_ind = ( SKP_SMULWB( index_Q16, SigProc_Resample_2_3_coarse_NUM_INTERPOLATORS ) &
                       ( SigProc_Resample_2_3_coarse_NUM_INTERPOLATORS - 1 ) );

interpol_ptr = SigProc_Resample_2_3_coarse_INTERPOL[ interpol_ind ];

tmp = (SKP_int32)interpol_ptr[  0 ] * in_ptr[  0 ] + (SKP_int32)interpol_ptr[  1 ] * in_ptr[  1 ] +
              (SKP_int32)interpol_ptr[  2 ] * in_ptr[  2 ] + (SKP_int32)interpol_ptr[  3 ] * in_ptr[  3 ] +
              (SKP_int32)interpol_ptr[  4 ] * in_ptr[  4 ] + (SKP_int32)interpol_ptr[  5 ] * in_ptr[  5 ] +
              (SKP_int32)interpol_ptr[  6 ] * in_ptr[  6 ] + (SKP_int32)interpol_ptr[  7 ] * in_ptr[  7 ] +
              (SKP_int32)interpol_ptr[  8 ] * in_ptr[  8 ] + (SKP_int32)interpol_ptr[  9 ] * in_ptr[  9 ] +
              (SKP_int32)interpol_ptr[ 10 ] * in_ptr[ 10 ] + (SKP_int32)interpol_ptr[ 11 ] * in_ptr[ 11 ] +
              (SKP_int32)interpol_ptr[ 12 ] * in_ptr[ 12 ] + (SKP_int32)interpol_ptr[ 13 ] * in_ptr[ 13 ] +
              (SKP_int32)interpol_ptr[ 14 ] * in_ptr[ 14 ] + (SKP_int32)interpol_ptr[ 15 ] * in_ptr[ 15 ] +
              (SKP_int32)interpol_ptr[ 16 ] * in_ptr[ 16 ] + (SKP_int32)interpol_ptr[ 17 ] * in_ptr[ 17 ] +
              (SKP_int32)interpol_ptr[ 18 ] * in_ptr[ 18 ] + (SKP_int32)interpol_ptr[ 19 ] * in_ptr[ 19 ] +
              (SKP_int32)interpol_ptr[ 20 ] * in_ptr[ 20 ] + (SKP_int32)interpol_ptr[ 21 ] * in_ptr[ 21 ] +
              (SKP_int32)interpol_ptr[ 22 ] * in_ptr[ 22 ] + (SKP_int32)interpol_ptr[ 23 ] * in_ptr[ 23 ] +
              (SKP_int32)interpol_ptr[ 24 ] * in_ptr[ 24 ] + (SKP_int32)interpol_ptr[ 25 ] * in_ptr[ 25 ] +
              (SKP_int32)interpol_ptr[ 26 ] * in_ptr[ 26 ] + (SKP_int32)interpol_ptr[ 27 ] * in_ptr[ 27 ] +
              (SKP_int32)interpol_ptr[ 28 ] * in_ptr[ 28 ] + (SKP_int32)interpol_ptr[ 29 ] * in_ptr[ 29 ];

frameLenOut = SKP_SMULWB( SKP_LSHIFT( (SKP_int32)frameLenIn, 1 ), 21846 ); // 21846_Q15 = (2/3)_Q0 rounded _up_
index_Q16 = 0;

ind = SKP_RSHIFT( index_Q16, 16 );

in_ptr = scratch + ind;

interpol_ind = ( SKP_SMULWB( index_Q16, SigProc_Resample_2_3_coarsest_NUM_INTERPOLATORS ) &
                       ( SigProc_Resample_2_3_coarsest_NUM_INTERPOLATORS - 1 ) );

interpol_ptr = SigProc_Resample_2_3_coarsest_INTERPOL[ interpol_ind ];

tmp = SKP_SMULBB(      interpol_ptr[ 0 ], in_ptr[ 0 ] );
tmp = SKP_SMLABB( tmp, interpol_ptr[ 1 ], in_ptr[ 1 ] );
tmp = SKP_SMLABB( tmp, interpol_ptr[ 2 ], in_ptr[ 2 ] );
tmp = SKP_SMLABB( tmp, interpol_ptr[ 3 ], in_ptr[ 3 ] );
tmp = SKP_SMLABB( tmp, interpol_ptr[ 4 ], in_ptr[ 4 ] );
tmp = SKP_SMLABB( tmp, interpol_ptr[ 5 ], in_ptr[ 5 ] );
tmp = SKP_SMLABB( tmp, interpol_ptr[ 6 ], in_ptr[ 6 ] );
tmp = SKP_SMLABB( tmp, interpol_ptr[ 7 ], in_ptr[ 7 ] );
tmp = SKP_SMLABB( tmp, interpol_ptr[ 8 ], in_ptr[ 8 ] );
tmp = SKP_SMLABB( tmp, interpol_ptr[ 9 ], in_ptr[ 9 ] );
LSubFrameIn  = SKP_min_int( IN_SUBFR_LEN_RESAMPLE_3_1, inLenTmp );
LSubFrameOut = SKP_SMULBB( 3, LSubFrameIn );

idx = SKP_SMULBB( 3, k );
out_tmp  = scratch0[ k ];
LSubFrameIn  = SKP_min_int( IN_SUBFR_LEN_RESAMPLE_3_2, inLen );
LSubFrameOut = SKP_SMULWB( 98304, LSubFrameIn );

LSubFrameIn  = SKP_min_int( IN_SUBFR_LEN_RESAMPLE_3_4, inLen );
LSubFrameOut = SKP_SMULWB( 49152, LSubFrameIn );

outLen = SKP_DIV32_16( SKP_LSHIFT( inLen, 2 ), 3 );
LSubFrameOut = SKP_min_int( OUT_SUBFR_LEN, outLen );
LSubFrameIn  = SKP_SMULWB( 49152, LSubFrameOut );

lshifts = 16 - cQ;
Qxtra = lshifts;

c_max = 0;
c_max = SKP_max_32( c_max, SKP_abs( ( SKP_int32 )c[ i ] ) );





Qxtra = SKP_min_int( Qxtra, SKP_Silk_CLZ32( c_max ) - 17 );

w_max = SKP_max_32( wXX[ 0 ], wXX[ D * D - 1 ] );
Qxtra = SKP_min_int( Qxtra, SKP_Silk_CLZ32( SKP_MUL( D, SKP_RSHIFT( SKP_SMULWB( w_max, c_max ), 4 ) ) ) - 5 );
Qxtra = SKP_max_int( Qxtra, 0 );
tmp = 0;
tmp = SKP_SMLAWB( tmp, wXx[ i ], cn[ i ] );
nrg = SKP_RSHIFT( wxx, 1 + lshifts ) - tmp;                         /* Q: -lshifts - 1 */

tmp2 = 0;
tmp = 0;
pRow = &wXX[ i * D ];
tmp = SKP_SMLAWB( tmp, pRow[ j ], cn[ j ] );
tmp  = SKP_SMLAWB( tmp,  SKP_RSHIFT( pRow[ i ], 1 ), cn[ i ] );
tmp2 = SKP_SMLAWB( tmp2, tmp,                        cn[ i ] );
nrg = SKP_ADD_LSHIFT32( nrg, tmp2, lshifts );                       /* Q: -lshifts - 1 */

nrg = 1;
nrg = SKP_int32_MAX >> 1;
nrg = SKP_LSHIFT( nrg, lshifts + 1 );                           /* Q0 */
x_ptr  = x;





offset = LPC_order + subfr_length;

LPC_res_ptr = LPC_res + LPC_order;
lz1 = SKP_Silk_CLZ32( nrgs[  i ] ) - 1;
lz2 = SKP_Silk_CLZ32( gains[ i ] ) - 1;

tmp32 = SKP_LSHIFT32( gains[ i ], lz2 );

tmp32 = SKP_SMMUL( tmp32, tmp32 ); // Q( 2 * lz2 - 32 )

tmp32 = SKP_SMULWB( gain_Q16, data_in[ i ] );
gain_Q16 = SKP_LSHIFT( gain_Q14, 2 );

i = 1;
i = 0;
data32 = *( (SKP_int32 *)&data1[ i ] );                     /* load two values at once */
gain_Q16 = SKP_LSHIFT( gain_Q14, 2 );
lz = SKP_Silk_CLZ32( c[ 0 ] );

rc_tmp_Q15 = -SKP_DIV32_16( C[ k + 1 ][ 0 ], SKP_max_32( SKP_RSHIFT( C[ 0 ][ 1 ], 15 ), 1 ) );

rc_tmp_Q15 = SKP_SAT16( rc_tmp_Q15 );

Ctmp1 = C[ n + k + 1 ][ 0 ];
Ctmp2 = C[ n ][ 1 ];
rc_tmp_Q31 = SKP_DIV32_varQ( -C[ k + 1 ][ 0 ], C[ 0 ][ 1 ], 31 );

Ctmp1_Q30 = C[ n + k + 1 ][ 0 ];
Ctmp2_Q30 = C[ n ][ 1 ];

cdf = &shell_table[ SKP_Silk_shell_code_table_offsets[ p ] ];
cdf_middle = SKP_RSHIFT( p, 1 );
cdf = &shell_table[ SKP_Silk_shell_code_table_offsets[ p ] ];
in_Q5 = -in_Q5;
ind = SKP_RSHIFT( in_Q5, 5 );
ind = SKP_RSHIFT( in_Q5, 5 );
x = inv(L') * inv(D) * Y
status = 1;
diag_min_value = SKP_max_32( SKP_SMMUL( SKP_ADD_SAT32( A[ 0 ], A[ SKP_SMULBB( M, M ) - 1 ] ), FIND_LTP_COND_FAC_Q31 ), 1 << 9 );
status = 0;
ptr1 = matrix_adr( L_Q16, j, 0, M );
tmp_32 = 0;
tmp_32    = SKP_SMLAWW( tmp_32, v_Q0[ i ], ptr1[ i ] ); /* Q0 */
tmp_32 = SKP_SUB32( matrix_ptr( A, j, j, M ), tmp_32 );






tmp_32 = SKP_SUB32( SKP_SMULBB( loop_count + 1, diag_min_value ), tmp_32 );
status = 1;
one_div_diag_Q36 = SKP_INVERSE32_varQ( tmp_32, 36 );                    /* Q36 */
one_div_diag_Q40 = SKP_LSHIFT( one_div_diag_Q36, 4 );                   /* Q40 */
err = SKP_SUB32( 1 << 24, SKP_SMULWW( tmp_32, one_div_diag_Q40 ) );     /* Q24 */
one_div_diag_Q48 = SKP_SMULWW( err, one_div_diag_Q40 );                 /* Q48 */

ptr1 = matrix_adr( A, j, 0, M );
ptr2 = matrix_adr( L_Q16, j + 1, 0, M );
tmp_32 = 0;
tmp_32 = SKP_SMLAWW( tmp_32, v_Q0[ k ], ptr2[ k ] ); /* Q0 */
tmp_32 = SKP_SUB32( ptr1[ i ], tmp_32 ); /* always < max(Correlation) */

one_div_diag_Q36 = inv_D[ i ].Q36_part;
one_div_diag_Q48 = inv_D[ i ].Q48_part;

tmp_32 = T[ i ];
ptr32 = matrix_adr( L_Q16, i, 0, M );
tmp_32 = 0;
tmp_32 = SKP_SMLAWW( tmp_32, ptr32[ j ], x_Q16[ j ] );
ptr32 = matrix_adr( L_Q16, 0, i, M );
tmp_32 = 0;
tmp_32 = SKP_SMLAWW( tmp_32, ptr32[ SKP_SMULBB( j, M ) ], x_Q16[ j ] );
value = a[ i ];
value = a[ i ];
value = a[ i ];
value = a[ i ];
value = a[ i ];
value = a[ i ];
value = a[ i ];
nrg = SKP_SMULBB( x[ 0 ], x[ 0 ] );
i = 1;





nrg = 0;
i   = 0;
shft = 0;
in32 = *( (SKP_int32 *)&x[ i ] );
nrg = SKP_SMLABB_ovflw( nrg, in32, in32 );
nrg = SKP_SMLATT_ovflw( nrg, in32, in32 );
nrg = (SKP_int32)SKP_RSHIFT_uint( (SKP_uint32)nrg, 2 );
shft = 2;
in32 = *( (SKP_int32 *)&x[ i ] );
nrg_tmp = SKP_SMULBB( in32, in32 );
nrg_tmp = SKP_SMLATT_ovflw( nrg_tmp, in32, in32 );
nrg = (SKP_int32)SKP_ADD_RSHIFT_uint( nrg, (SKP_uint32)nrg_tmp, shft );
nrg = (SKP_int32)SKP_RSHIFT_uint( (SKP_uint32)nrg, 2 );
nrg_tmp = SKP_SMULBB( x[ i ], x[ i ] );
nrg = (SKP_int32)SKP_ADD_RSHIFT_uint( nrg, nrg_tmp, shft );
nrg = SKP_RSHIFT_uint( (SKP_uint32)nrg, 2 );
decimated_framelength = SKP_RSHIFT( framelength, 3 );
HPstateTmp = X[ 0 ][ decimated_framelength - 1 ];
decimated_framelength = SKP_RSHIFT( framelength, SKP_min_int( VAD_N_BANDS - b, VAD_N_BANDS - 1 ) );

dec_subframe_length = SKP_RSHIFT( decimated_framelength, VAD_INTERNAL_SUBFRAMES_LOG2 );
dec_subframe_offset = 0;

sumSquared = 0;
x_tmp = SKP_RSHIFT( X[ b ][ i + dec_subframe_offset ], 3 );
sumSquared = SKP_SMLABB( sumSquared, x_tmp, x_tmp );

sumSquared = 0;
input_tilt = 0;
speech_nrg = Xnrg[ b ] - psSilk_VAD->NL[ b ];
SNR_Q7 = SKP_Silk_lin2log( NrgToNoiseRatio_Q8[ b ] ) - 8 * 128;

sumSquared = SKP_SMLABB( sumSquared, SNR_Q7, SNR_Q7 );          /* Q14 */

SNR_Q7 = SKP_SMULWB( SKP_LSHIFT( SKP_Silk_SQRT_APPROX( speech_nrg ), 6 ), SNR_Q7 );
input_tilt = SKP_SMLAWB( input_tilt, tiltWeights[ b ], SNR_Q7 );
sumSquared = SKP_DIV32_16( sumSquared, VAD_N_BANDS );           /* Q14 */

SA_Q15 = SKP_Silk_sigm_Q15( SKP_SMULWB( VAD_SNR_FACTOR_Q16, *pSNR_dB_Q7 ) - VAD_NEGATIVE_OFFSET_Q5 );






speech_nrg = 0;
SA_Q15 = SKP_RSHIFT( SA_Q15, 1 );
speech_nrg = SKP_Silk_SQRT_APPROX( SKP_LSHIFT( speech_nrg, 15 ) );
SA_Q15 = SKP_SMULWB( 32768 + speech_nrg, SA_Q15 );
smooth_coef_Q16 = SKP_SMULWB( VAD_SNR_SMOOTH_COEF_Q18, SKP_SMULWB( SA_Q15, SA_Q15 ) );
SNR_Q7 = 3 * ( SKP_Silk_lin2log( psSilk_VAD->NrgRatioSmth_Q8[b] ) - 8 * 128 );
min_coef = SKP_DIV32_16( SKP_int16_MAX, SKP_RSHIFT( psSilk_VAD->counter, 4 ) + 1 );
min_coef = 0;
nl = psSilk_VAD->NL[ k ];
nrg = SKP_ADD_POS_SAT32( pX[ k ], psSilk_VAD->NoiseLevelBias[ k ] );
inv_nrg = SKP_DIV32( SKP_int32_MAX, nrg );
coef = VAD_NOISE_LEVEL_SMOOTH_COEF_Q16 >> 3;
coef = VAD_NOISE_LEVEL_SMOOTH_COEF_Q16;
coef = SKP_SMULWB( SKP_SMULWW( inv_nrg, nl ), VAD_NOISE_LEVEL_SMOOTH_COEF_Q16 << 1 );
coef = SKP_max_int( coef, min_coef );

nl = SKP_DIV32( SKP_int32_MAX, psSilk_VAD->inv_NL[ k ] );
nl = SKP_min( nl, 0x00FFFFFF );

cb_row_Q14 = cb_Q14;
diff_Q14_01 = (SKP_uint16)( in_Q14[ 0 ] - cb_row_Q14[ 0 ] ) | SKP_LSHIFT( ( SKP_int32 )in_Q14[ 1 ] - cb_row_Q14[ 1 ], 16 );
diff_Q14_23 = (SKP_uint16)( in_Q14[ 2 ] - cb_row_Q14[ 2 ] ) | SKP_LSHIFT( ( SKP_int32 )in_Q14[ 3 ] - cb_row_Q14[ 3 ], 16 );
diff_Q14_4  = in_Q14[ 4 ] - cb_row_Q14[ 4 ];

sum1_Q14 = SKP_SMULBB( mu_Q8, cl_Q6[ k ] );

sum2_Q16 = SKP_SMULWT(           W_Q18[ 1 ], diff_Q14_01 );
sum2_Q16 = SKP_SMLAWB( sum2_Q16, W_Q18[ 2 ], diff_Q14_23 );
sum2_Q16 = SKP_SMLAWT( sum2_Q16, W_Q18[ 3 ], diff_Q14_23 );
sum2_Q16 = SKP_SMLAWB( sum2_Q16, W_Q18[ 4 ], diff_Q14_4  );
sum2_Q16 = SKP_LSHIFT( sum2_Q16, 1 );
sum2_Q16 = SKP_SMLAWB( sum2_Q16, W_Q18[ 0 ], diff_Q14_01 );
sum1_Q14 = SKP_SMLAWB( sum1_Q14, sum2_Q16,   diff_Q14_01 );

sum2_Q16 = SKP_SMULWB(           W_Q18[ 7 ], diff_Q14_23 );
sum2_Q16 = SKP_SMLAWT( sum2_Q16, W_Q18[ 8 ], diff_Q14_23 );
sum2_Q16 = SKP_SMLAWB( sum2_Q16, W_Q18[ 9 ], diff_Q14_4  );
sum2_Q16 = SKP_LSHIFT( sum2_Q16, 1 );
sum2_Q16 = SKP_SMLAWT( sum2_Q16, W_Q18[ 6 ], diff_Q14_01 );
sum1_Q14 = SKP_SMLAWT( sum1_Q14, sum2_Q16,   diff_Q14_01 );






sum2_Q16 = SKP_SMULWT(           W_Q18[ 13 ], diff_Q14_23 );
sum2_Q16 = SKP_SMLAWB( sum2_Q16, W_Q18[ 14 ], diff_Q14_4  );
sum2_Q16 = SKP_LSHIFT( sum2_Q16, 1 );
sum2_Q16 = SKP_SMLAWB( sum2_Q16, W_Q18[ 12 ], diff_Q14_23 );
sum1_Q14 = SKP_SMLAWB( sum1_Q14, sum2_Q16,    diff_Q14_23 );

sum2_Q16 = SKP_SMULWB(           W_Q18[ 19 ], diff_Q14_4  );
sum2_Q16 = SKP_LSHIFT( sum2_Q16, 1 );
sum2_Q16 = SKP_SMLAWT( sum2_Q16, W_Q18[ 18 ], diff_Q14_23 );
sum1_Q14 = SKP_SMLAWT( sum1_Q14, sum2_Q16,    diff_Q14_23 );

sum2_Q16 = SKP_SMULWB(           W_Q18[ 24 ], diff_Q14_4  );
sum1_Q14 = SKP_SMLAWB( sum1_Q14, sum2_Q16,    diff_Q14_4  );

quiet     = 0;
loss_prob = 0.0f;

args = 1;
quiet = 1;
bitInFile = fopen( bitInFileName, "rb" );
speechOutFile = fopen( speechOutFileName, "wb" );
ret = SKP_Silk_SDK_Get_Decoder_Size( &decSizeBytes );
psDec = malloc( decSizeBytes );

ret = SKP_Silk_SDK_InitDecoder( psDec );
totPackets = 0;
payloadEnd = payload;

counter = fread( &nBytes, sizeof( SKP_int16 ), 1, bitInFile );
counter = fread( payloadEnd, sizeof( SKP_uint8 ), nBytes, bitInFile );





counter = fread( &nBytes, sizeof( SKP_int16 ), 1, bitInFile );
counter = fread( payloadEnd, sizeof( SKP_uint8 ), nBytes, bitInFile );
lost = 1;

payloadPtr = payload;
payloadToDec = FECpayload;
nBytes = nBytesFEC;
lost = 0;
lost = 0;





nBytes = nBytesPerPacket[ 0 ];
payloadToDec = payload;
outPtr = out;
tot_len = 0;

frames = 0;
ret = SKP_Silk_SDK_Decode( psDec, &DecControl, 0, payloadToDec, nBytes, outPtr, &len );
outPtr  = out;
tot_len = 0;
frames  = 0;
ret = SKP_Silk_SDK_Decode( psDec, &DecControl, 1, payloadToDec, nBytes, outPtr, &len );
totBytes = 0;





lost = 1;

payloadPtr = payload;
payloadToDec = FECpayload;
nBytes = nBytesFEC;
lost = 0;
lost = 0;
nBytes = nBytesPerPacket[ 0 ];
payloadToDec = payload;
outPtr  = out;
tot_len = 0;

frames = 0;
ret = SKP_Silk_SDK_Decode( psDec, &DecControl, 0, payloadToDec, nBytes, outPtr, &len );





outPtr  = out;
tot_len = 0;
frames  = 0;
ret = SKP_Silk_SDK_Decode( psDec, &DecControl, 1, payloadToDec, nBytes, outPtr, &len );
totBytes = 0;
args = 1;
quiet = 1;
speechInFile = fopen( speechInFileName, "rb" );
bitOutFile = fopen( bitOutFileName, "wb" );
ret = SKP_Silk_SDK_Get_Encoder_Size( &encSizeBytes );
psEnc = malloc( encSizeBytes );

ret = SKP_Silk_SDK_InitEncoder( psEnc, &encControl );
totPackets           = 0;
totActPackets        = 0;
smplsSinceLastPacket = 0;
sumBytes             = 0.0;
sumActBytes          = 0.0;
sumWBytes            = 0.0;

counter = fread( in, sizeof( SKP_int16 ), frameSizeReadFromFile_ms * fs_kHz, speechInFile );
nBytes = MAX_BYTES_PER_FRAME * MAX_INPUT_FRAMES;

ret = SKP_Silk_SDK_Encode( psEnc, &encControl, in, (SKP_int16)counter, payload, &nBytes );
packetSize_ms = (SKP_int)( 1000 * encControl.packetSize ) / encControl.sampleRate;

nrg = 0.0;
smplsSinceLastPacket = 0;
nBytes = -1;

packetSize_ms = (SKP_int)( 1000 * encControl.packetSize ) / encControl.sampleRate;

avg_rate  = 8.0 / packetSize_ms * sumBytes       / totPackets;
act_rate  = 8.0 / packetSize_ms * sumActBytes    / totActPackets;
wght_rate = 8.0 / packetSize_ms * pow( sumWBytes / totPackets, 0.1 );
