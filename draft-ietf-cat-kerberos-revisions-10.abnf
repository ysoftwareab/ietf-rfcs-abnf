K1 = E(Key, n-fold(Constant))
K2 = E(Key, K1)
K3 = E(Key, K2)
K4 = ...

ciphertext =    E(Ke, confounder | plaintext | padding) |
                               HMAC(Ki, confounder | plaintext | padding)
R1 = DR(K1, n-fold(K2))    /* length k */
R2 = DR(K2, n-fold(K1))    /* length k */
rnd = k-fold(R1 | R2)
tkey = random-to-key(rnd)
key = DK(tkey, CombineConstant)

Kc = DK(base-key, usage|0x99));
Ke = DK(base-key, usage|0xAA);
Ki = DK(base-key, usage|0x55);

key = key XOR 0xF0;
odd = 1;
s = string + salt;
tempkey = NULL;
odd = 1;
tempkey = tempkey XOR 8byteblock;
tempkey = key_correction(tempkey);
key = key_correction(DES-CBC-check(s,tempkey));
s = passwordString + salt
tmpKey = random-to-key(168-fold(s))
key = DK (tmpKey, KerberosConstant)

key = get_decryption_key(resp.enc-part.kvno, resp.enc-part.etype,
                                 resp.padata);
set =
server = req.second_ticket.client;
ivec=0)

