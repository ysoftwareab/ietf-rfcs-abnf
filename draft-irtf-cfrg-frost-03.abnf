PK = G.ScalarBaseMult(SK)
k = G.RandomScalar()
R = G.ScalarBaseMult(k)

comm_enc = G.SerializeElement(R)
pk_enc = G.SerializeElement(PK)
challenge_input = comm_enc || pk_enc || msg
c = H2(challenge_input)

z = k + (c * SK)
comm_enc = G.SerializeElement(R)
pk_enc = G.SerializeElement(PK)
challenge_input = comm_enc || pk_enc || msg
c = H2(challenge_input)

l = G.ScalarBaseMult(z)
r = R + (c * PK)
value = 0
numerator = 1
denominator = 1
L_i = numerator / denominator
L = []
f_zero = F(0)
delta = point.y * derive_lagrange_coefficient(point.x, L)
f_zero = f_zero + delta

encoded_group_commitment = nil
encoded_commitment = encode_uint16(index) ||
                           G.SerializeElement(hiding_nonce_commitment) ||
                           G.SerializeElement(binding_nonce_commitment)
encoded_group_commitment = encoded_group_commitment || encoded_commitment
msg_hash = H3(msg)
rho_input = encoded_commitment_list || msg_hash
binding_factor = H1(rho_input)
group_commitment = G.Identity()
group_commitment = group_commitment + (hiding_nonce_commitment + (binding_nonce_commitment * binding_factor))
group_comm_enc = G.SerializeElement(group_commitment)
group_public_key_enc = G.SerializeElement(group_public_key)
challenge_input = group_comm_enc || group_public_key_enc || msg
challenge = H2(challenge_input)
hiding_nonce = G.RandomScalar()
binding_nonce = G.RandomScalar()
hiding_nonce_commitment = G.ScalarBaseMult(hiding_nonce)
binding_nonce_commitment = G.ScalarBaseMult(binding_nonce)
nonce = (hiding_nonce, binding_nonce)
comm = (hiding_nonce_commitment, binding_nonce_commitment)
encoded_commitments = encode_group_commitment_list(commitment_list)

binding_factor = compute_binding_factor(encoded_commitments, msg)

group_commitment = compute_group_commitment(commitment_list, binding_factor)

lambda_i = derive_lagrange_coefficient(index, participant_list)

challenge = compute_challenge(group_commitment, group_public_key, msg)

sig_share = hiding_nonce + (binding_nonce * binding_factor) + (lambda_i * sk_i * challenge)

encoded_commitments = encode_group_commitment_list(commitment_list)

binding_factor = compute_binding_factor(encoded_commitments, msg)

group_commitment = compute_group_commitment(commitment_list, binding_factor)

comm_share = hiding_nonce_commitment + (binding_nonce_commitment * binding_factor)

challenge = compute_challenge(group_commitment, group_public_key, msg)

lambda_i = derive_lagrange_coefficient(index, participant_list)

l = G.ScalarBaseMult(sig_share_i)
r = comm_share + (public_key_share_i * challenge * lambda_i)

z = 0
z = z + z_i
secret_key_shares = secret_share_shard(secret_key, n, t)
public_key = G.ScalarBaseMult(secret_key)
coefficients = [s]
points = []
y_i = polynomial_evaluate(x_i, coefficients)
point_i = (x_i, y_i)
s = polynomial_interpolation(shares)
C = []
A_i = ScalarBaseMult(coeff)
S_i = ScalarBaseMult(s[i])
