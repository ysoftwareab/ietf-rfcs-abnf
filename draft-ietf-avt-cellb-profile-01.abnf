size = height * width;
cb_data = (u_char *)malloc(sizeof(u_char) * size);
cellkount = (u_char *)malloc(size*sizeof(u_char));
cellhistory = (unsigned int *)malloc(size*sizeof(int));

dptr = table;
u0 = u0 >> 8;
u1 = u1 >> 8;
u1 = u1 - u0;
v1 = v1 - v0;
index = (i << 5) | (j >> 3);
tmp = (tmp > 255) ? 255 : tmp;
width = xilhdr.w>>2;
len = width*12;

data = cb_data;

bcnt = 0;
skipcount = 0;
index = 0;
tyy = cb_yy_data;
tuv = cb_uv_data;

res = encode_cell(tyy,tuv,width);
skipcount = 0;
data = cb_data;
len  = bcnt;

dataLim = data+len;
cellx = 0;
celly = 0;
width = ntohs(xilhdr.w) >> 2;

pack = data;
packLim = data+packlen-4;
pattern = *data;
t0 = ((int *)tuv)[0];
t1 = ((int *)tuv)[stride];
t2 = ((int *)tuv)[stride+stride];
t3 = ((int *)tuv)[stride+stride+stride];
umean  = (t0<<24)>>24; vmean  = (t0<<16)>>24;
tmp = (vmean<<6) | (umean);
uvindx = uvremap[tmp];
q0 = ((int *)tyy)[0];
q1 = ((int *)tyy)[stride];
q2 = ((int *)tyy)[stride+stride];
q3 = ((int *)tyy)[stride+stride+stride];
ymean  = q0 & 0xff; ymean += (q0<<16)>>24;
mask = 0;
ylo = 0;
yhi = 0;
tmp = 0;
yval = q3 & 255;
yval = q3 << 16;
yval = q3 << 8;
yval = q3 >> 24;
yval = q2 & 255;
yval = q2 << 16;
yval = q2 << 8;
yval = q2 >> 24;
yval = q1 & 255;
yval = q1 << 16;
yval = q1 << 8;
yval = q1 >> 24;
yval = q0 & 255;
yval = q0 << 16;
yval = q0 << 8;
yval = q0 >> 24;

ylo = divtable[tmp][ylo];
tmp = 16 - tmp;
yhi = divtable[tmp][yhi];
ylo = divtable[tmp][ylo];
tmp = 16 - tmp;
yhi = divtable[tmp][yhi];
yval = yyremap[yhi];

COUNT = PATTERN & mask5555;         \
PATTERN = COUNT & mask3333;         \
PATTERN = COUNT & 0x0f0f;           \
PATTERN = COUNT & 0xff;             \
rmask = cellhistory[index];
rtmp = (rmask << 16) >> 24;
ctmp = (ccell << 16) >> 24;
rtmp = (rtmp << 5) + (ctmp >> 3);
ctmp = ctmp & 7;

cy0 = ccell & 255;
ry0 = rmask & 255;
cmask = ccell >> 16;
rmask = rmask >> 16;
cy0 = yytable[cy0];
ry0 = yytable[ry0];
cy1 = cy0 & 255;
ry1 = 256 - (ry0 & 255);
cy0 = cy0 >> 8;
ry0 = 256 - (ry0 >> 8);

bits = 16;

pattern = cmask & rmask;
diff = error[count][cy1 + ry1];

pattern = cmask & ~rmask;
pattern = ~cmask & rmask;
i = STATES - 1;
width = image->width / 4;

orig_cellx = cellx = (data[0] << 8) + data[1];
orig_celly = celly = (data[2] << 8) + data[3];
yorigin  = (uint32 *) image->y_data;
uvorigin = (uint32 *) image->uv_data;

pattern = *data;
pattern = (pattern << 8) + data[1];
uvindx = data[2];
yyindx = data[3];

y1 = (uint8)(yytable[yyindx] >> 8);
y2 = (uint8)(yytable[yyindx] & 0xff);
uu = (uint8)((uvtable[uvindx] >> 8) ^ ADJUST);
vv = (uint8)((uvtable[uvindx] & 0xff) ^ ADJUST);

offset = celly*4*width + cellx;
yptr = &yorigin[offset];
uvptr = &uvorigin[offset];

yout = (pattern & 0x8000) ? y2 : y1;
yout = (yout << 8) + ((pattern & 0x4000) ? y2 : y1);
yout = (yout << 8) + ((pattern & 0x2000) ? y2 : y1);
yout = (yout << 8) + ((pattern & 0x1000) ? y2 : y1);
yout = (pattern & 0x0800) ? y2 : y1;
yout = (yout << 8) + ((pattern & 0x0400) ? y2 : y1);
yout = (yout << 8) + ((pattern & 0x0200) ? y2 : y1);
yout = (yout << 8) + ((pattern & 0x0100) ? y2 : y1);
yout = (pattern & 0x0080) ? y2 : y1;
yout = (yout << 8) + ((pattern & 0x0040) ? y2 : y1);
yout = (yout << 8) + ((pattern & 0x0020) ? y2 : y1);
yout = (yout << 8) + ((pattern & 0x0010) ? y2 : y1);
yout = (pattern & 0x0008) ? y2 : y1;
yout = (yout << 8) + ((pattern & 0x0004) ? y2 : y1);
yout = (yout << 8) + ((pattern & 0x0002) ? y2 : y1);
yout = (yout << 8) + ((pattern & 0x0001) ? y2 : y1);
uvout = (uu << 24) + (vv << 16) + (uu << 8) + vv;
