sieve-address = addr-spec                ; simple address
                 / phrase "<" addr-spec ">" ; name & addr-spec

bracket-comment    = "/*" *not-star 1*STAR
                        *(not-star-slash *not-star 1*STAR) "/"
                          ; No */ allowed inside a comment.
                          ; (No * is allowed unless it is the last
                          ; character, or unless it is followed by a
                          ; character that isn't a slash.)

STAR               = "*"

not-star           = CRLF / %x01-09 / %x0b-0c / %x0e-29 / %x2b-7f /
                        UTF8-2 / UTF8-3 / UTF8-4
                          ; either a CRLF pair, OR a single UTF-8
                          ; character other than NUL, CR, LF, or star

not-star-or-slash  = CRLF / %x01-09 / %x0b-0c / %x0e-29 / %x2b-2e /
                        %x30-7f / UTF8-2 / UTF8-3 / UTF8-4
                          ; either a CRLF pair, OR a single UTF-8
                          ; character other than NUL, CR, LF, star,
                          ; or slash

UTF8-NOT-CRLF      = %x01-09 / %x0b-0c / %x0e-7f /
                        UTF8-2 / UTF8-3 / UTF8-4
                          ; a single UTF-8 character other than NUL,
                          ; CR, or LF

UTF8-NOT-PERIOD    = %x01-09 / %x0b-0c / %x0e-2d / %x2f-7f /
                        UTF8-2 / UTF8-3 / UTF8-4
                          ; a single UTF-8 character other than NUL,
                          ; CR, LF, or period

UTF8-NOT-NUL       = %x01-7f / UTF8-2 / UTF8-3 / UTF8-4
                          ; a single UTF-8 character other than NUL

UTF8-NOT-QSPECIAL  = %x01-09 / %x0b-0c / %x0e-21 / %x23-5b /
                        %x5d-7f / UTF8-2 / UTF8-3 / UTF8-4
                          ; a single UTF-8 character other than NUL,
                          ; CR, LF, double-quote, or backslash

comment            = bracket-comment / hash-comment

hash-comment       = "#" *UTF8-NOT-CRLF CRLF

identifier         = (ALPHA / "_") *(ALPHA / DIGIT / "_")

tag                = ":" identifier

number             = 1*DIGIT [QUANTIFIER]

QUANTIFIER         = "K" / "M" / "G"

quoted-safe        = CRLF / UTF8-NOT-QSPECIAL
                          ; either a CRLF pair, OR a single UTF-8
                          ; character other than NUL, CR, LF,
                          ; double-quote, or backslash

quoted-special     = "\" ( DQUOTE / "\" )
                          ; represents just a double-quote or backslash

quoted-other       = "\" UTF8-NOT-QSPECIAL
                          ; represents just the UTF8-NOT-QSPECIAL
                          ; character.  SHOULD NOT be used

quoted-text        = *(quoted-safe / quoted-special / quoted-other)

quoted-string      = DQUOTE quoted-text DQUOTE

multi-line         = "text:" *(SP / HTAB) (hash-comment / CRLF)
                        *(multiline-literal / multiline-dotstuff)
                        "." CRLF

multiline-literal  = [UTF8-NOT-PERIOD *UTF8-NOT-CRLF] CRLF

multiline-dotstuff = "." 1*UTF8-NOT-CRLF CRLF
                          ; A line containing only "." ends the
                          ; multi-line.  Remove a leading '.' if
                          ; followed by another '.'.

white-space        = 1*(SP / CRLF / HTAB) / comment

argument    = string-list / number / tag

arguments   = *argument [test / test-list]

block       = "{" commands "}"

command     = identifier arguments ( ";" / block )

commands    = *command

start       = commands

string      = quoted-string / multi-line

string-list = "[" string *("," string) "]" / string
                   ; if there is only a single string, the brackets
                   ; are optional

test        = identifier arguments

test-list   = "(" test *("," test) ")"

