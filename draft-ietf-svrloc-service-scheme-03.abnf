service-type   =   abstract-type :  protocol / concrete-type
abstract-type  =   type-name [ "." naming-auth ]
concrete-type  =   protocol [ "." naming-auth ]
type-name      =   resname
naming-auth    =   resname
protocol       =   resname
                           ; An Assigned Numbers name [1] or
                           ; well known port name [3] for
                           ; the protocol.  Other names may be assigned
                           ; if no prior assigned name exists.
resname        =   1*[ alpha / digit / "+" / "-" ]
sap            =   "/" [ addr-family ] "/" site [ url-part ]
addr-family    =   *xchar ; depends on the address family
site           =   [ [ user "@" ] hostport ] / [ other-addr ]
hostport       =   host [ ":" port ]
other-addr     =   *xchar ; depends on the address family
host           =   hostname / hostnumber
hostname       =   *( domainlabel "." ) toplabel
alphanum       =   alpha / digit
domainlabel    =   alphanum / alphanum *[alphanum / "-"] alphanum
toplabel       =   alpha / alpha *[ alphanum / "-" ] alphanum
ipv4-number    =   1*3digit 3*3("." 1*3digit)
ipv6-number    =   32hex
port           =   1*digit
                           ; A port number must be included if the
                           ; protocol field does not have an IANA
                           ; assigned port number.
user           =   *[ uchar / ";" / "+" / "&" / "=" ]
url-part       =   [ url-path ] [ attr-list ]
url-path       =   1 * ( "/" *xchar )
                           ; Each service type must define its
                           ; own syntax consistent
                           ; with [6].
attr-list      =   1 * ( ";" attr-asgn )
attr-asgn      =   attr-id / attr-id "=" attr-value
safe           =   "$" / "-" / "_" / "." / "~"
extra          =   "!" / "*" / "'" / "(" / ")" / "," / "+"
uchar          =   unreserved / escaped
xchar          =   unreserved / reserved / escaped
escaped        =   "%" hex hex
reserved       =   ";" / "/" / "?" / ":" / "@" / "&" / "=" / "+"
unreserved     =   alpha / digit / safe / extra
alpha          =   "a" / "b" / "c" / "d" / "e" / "f" / "g" /
                           "h" / "i" / "j" / "k" / "l" / "m" / "n" /
                           "o" / "p" / "q" / "r" / "s" / "t" / "u" /
                           "v" / "w" / "x" / "y" / "z" /
                           "A" / "B" / "C" / "D" / "E" / "F" / "G" /
                           "H" / "I" / "J" / "K" / "L" / "M" / "N" /
                           "O" / "P" / "Q" / "R" / "S" / "T" / "U" /
                           "V" / "W" / "X" / "Y" / "Z"
digit          =   "0" / "1" / "2" / "3" / "4" / "5" / "6" /
                           "7" / "8" / "9"



driver=scsi;platform=sys3.2-rs3000

driver=scsi;platform=sys3.2-rs3000

driver=scsi;platform=sys3.2-rs3000

template      =  tem-attrs attr-defs
tem-attrs     =  schemetype schemevers schemelang
                       schemetext schemeurl
schemetype    =  "type" "=" scheme termdef
schemevers    =  "version" "=" version-no termdef
schemelang    =  "language" "=" isolang termdef
schemetext    =  "description" "=" newline desc-text termdef
schemeurl     =  "url-syntax" "=" newline url-bnf termdef
url-bnf       =  *[ com-chars ]
                       ; An ABNF describing the <url-path> production
                       ; in the service: URL grammar of Section 3.
scheme        =  service-type [ "." naming-auth ]
service-type  =  scheme-name
naming-auth   =  scheme-name
scheme-name   =  1*schemechar [ "." 1*schemechar ]
schemechar    =  alpha / digit / "-" / "+" /
version-no    =  1*digit "." 1*digit
isolang       =  2*2lower-alpha ;see [12]
desc-text     =  *[ com-chars ]
                       ; A block of free-form text for reading by
                       ; people describing the service in a short,
                       ; informative manner.
termdef       =  newline newline
attr-defs     =  *( attr-def / keydef )
attr-def      =  id "=" attrtail
keydef        =  id "=" "keyword" newline [help-text] newline
attrtail      =  type flags newline [value-list] [help-text]
                       [value-list] newline
id            =  1*attrchar
type          =  "string" / "integer" / "boolean" / "opaque"
flags         =  ["m"/"M"] ["l"/"L"] ["x/"X"] ["o"/"O"]
value-list    =  value newline / value "," value-list /
                       value "," newline value-list
help-text     =  1*( "#" help-line )
                       ; A block of free-form text for reading by
                       ; people describing the attribute and
                       ; its values.
help-line     =  *[ com-chars ] newline
attrchar      =  schemechar / ":" / "_" / "$" / "~" / "@" / "." /
                       "|" / "<" / ">" / "*" / "&"
value         =  string / integer / boolean / opaque
string        =  safe-char *[safe-char / space] safe-char
integer       =  [ "+" | "-" ] 1*digit
boolean       =  "true" / "false"
opaque        =  1*digit ":" 4*radix64-char
                       ; The digits define the original length of
                       ; the opaque value.  The restricted character
                       ; string is the radix-64 encoding of the
                       ; opaque value( [8], Sect.  5.2.)
                       ; Newlines are ignored in decoding radix-64
                       ; values.
com-chars     =  safe-char / white-sp / "," / ";"/ "%"
safe-char     =  attrchar / escaped / " " / "!" / '"' / "'" /
                       "|" / "(" / ")" / "+" / "-" / "." / ":" /
                       "=" / "?" / "[" / "]" / "{" / "/" / "{" /
                       "$"
                       ; All UTF8 printable characters are
                       ; included except ",", "%", ";", and "#".
escaped       =  "%" hex hex
hex           =  digit / "A" / "B" / "C" / "D" / "E" /
                       "a" / "b" / "c" / "d" / "e"
white-sp      =  space / tab
newline       =  CR / ( CR LF )



