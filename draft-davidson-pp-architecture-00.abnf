data = <server_id> .. <config> .. <expiry> .. <supports>
issue_resp = PP_Issue(srv_cfg, msg.issue_data)

resp = PP_Verify(configs[0],message)
resp = PP_Verify(configs[1],message)
data = <server_id> .. <ciphersuite> .. <comm_id>
                    .. <config> .. <expiry> .. <supports>
ret = sig_alg.verify(k_vrfy, data, <signature>)

ciphersuite = resp[0].ciphersuite
comm_id = resp[0].comm_id

ciphersuite = resp[1].ciphersuite
comm_id = resp[1].comm_id

token == null
              && (
                resp[0].supports == 1
                || resp[0].supports == 3
              )

cli_cfg = PP_Client_Setup(msg.ciphersuite, msg.config)

issue_input = PP_Generate(cli_cfg, m)

tokens = PP_Process(cli_cfg,(msg.evals, msg.proof),tmp.g_data)

cli_cfg = PP_Client_Setup(msg.ciphersuite, msg.config)

tag = PP_Redeem(cli_cfg, msg.token, aux)

cfg_0 = config_entry {
              ciphersuite: current.ciphersuite,
              comm_id: current.comm_id,
              config: current.config,
              expiry: current.expiry,
              signature: current.signature,
              supports: current.supports,
cfg_1 = config_entry {
              ciphersuite: current.ciphersuite,
              comm_id: current.comm_id,
              config: current.config,
              expiry: current.expiry,
              signature: current.signature,
              supports: current.supports,
resp = config_retrieval_resp {
              configs: [cfg_0, cfg_1],
