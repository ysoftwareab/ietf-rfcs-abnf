

Internet Draft		     Expression	MIB		     3 June 1997


			     Expression	MIB

			      3	June 1997

		  draft-ietf-disman-express-mib-02.txt

			      Bob Stewart
			  Cisco	Systems, Inc.
			   bstewart@cisco.com





			  Status of this Memo

This document is an Internet-Draft.  Internet-Drafts are working
documents of the Internet Engineering Task Force (IETF), its areas, and
its working groups.  Note that other groups may	also distribute	working
documents as Internet-Drafts.

Internet-Drafts	are draft documents valid for a	maximum	of six months
and may	be updated, replaced, or obsoleted by other documents at any
time.  It is inappropriate to use Internet- Drafts as reference	material
or to cite them	other than as ``work in	progress.''

To learn the current status of any Internet-Draft, please check	the
``1id-abstracts.txt'' listing contained	in the Internet- Drafts	Shadow
Directories on ds.internic.net (US East	Coast),	nic.nordu.net (Europe),
ftp.isi.edu (US	West Coast), or	munnari.oz.au (Pacific Rim).














9




9Expires	3 June 1997+6 months
	[Page 1]





Internet Draft		     Expression	MIB		     3 June 1997


1.  Abstract

This memo defines an experimental portion of the Management Information
Base (MIB) for use with	network	management protocols in	the Internet
community.  In particular, it describes	managed	objects	used for
managing expressions of	MIB objects.






































9




9Expires	3 June 1997+6 months
	[Page 2]





Internet Draft		     Expression	MIB		     3 June 1997


2.  The	SNMP Network Management	Framework

They are: The SNMP Network Management Framework	presently consists of
three major components.	 They are:

  the SMI, described in	RFC 1902 [1] - the mechanisms used for
  describing and naming	objects	for the	purpose	of management.

  the MIB-II, STD 17, RFC 1213 [2] - the core set of managed objects for
  the Internet suite of	protocols.

  the protocol,	RFC 1157 [3] and/or RFC	1905 [4], - the	protocol for
  accessing managed objects.

The Framework permits new objects to be	defined	for the	purpose	of
experimentation	and evaluation.


2.1.  Object Definitions

Managed	objects	are accessed via a virtual information store, termed the
Management Information Base or MIB.  Objects in	the MIB	are defined
using the subset of Abstract Syntax Notation One (ASN.1) defined in the
SMI.  In particular, each object type is named by an OBJECT IDENTIFIER,
an administratively assigned name.  The	object type together with an
object instance	serves to uniquely identify a specific instantiation of
the object.  For human convenience, we often use a textual string,
termed the descriptor, to refer	to the object type.
















9




9Expires	3 June 1997+6 months
	[Page 3]





Internet Draft		     Expression	MIB		     3 June 1997


3.  Overview

The MIB	was designed around the	basic premise that an evaluated
expression should result in a MIB object that appears no different from
any other and is thus usable anywhere any other	MIB object can be used,
whether	by a management	application directly or	via another MIB.

Note that the operation	of this	MIB depends on the ability to use OID
fragments, that	is, a part of an OID that may be missing the usual
prefix starting	with iso. It is	the opinion of the author that such a
use is legitimate even if it violates some pure	definition of ASN.1,
since SNMP's use of ASN.1 is colloquial, not standard. The more
important test is whether implementations can readily handle such OID
fragments, and I believe they should be	able to.






























9




9Expires	3 June 1997+6 months
	[Page 4]





Internet Draft		     Expression	MIB		     3 June 1997


4.  Definitions

EXPRESSION-MIB DEFINITIONS ::= BEGIN

IMPORTS
    MODULE-IDENTITY, OBJECT-TYPE,
    experimental, Integer32,
    Unsigned32,	Gauge32			FROM SNMPv2-SMI
    TEXTUAL-CONVENTION,	RowStatus,
    AutonomousType, DisplayString	FROM SNMPv2-TC
    MODULE-COMPLIANCE, OBJECT-GROUP	FROM SNMPv2-CONF;

expressionMIB MODULE-IDENTITY
    LAST-UPDATED "9705301700Z"
    ORGANIZATION "IETF Distributed Management Working Group"
    CONTACT-INFO "Bob Stewart
		  Cisco	Systems, Inc.
		  170 West Tasman Drive,
		  San Jose CA 95134-1706.
		  Phone: +1 408	526 4527
		  Email: bstewart@cisco.com"
    DESCRIPTION
	"The MIB module	for defining expressions of MIB	objects
	for network management purposes."
    ::=	{ experimental xx }

ExpressionName ::= TEXTUAL-CONVENTION
    STATUS	current
    DESCRIPTION
	"An identification for an expression.  An ExpressionName
	corresponds one-to-one to an ExpressionIndex.

	This identification of an expression is	subject	to change
	only by	administrative request."
    SYNTAX	DisplayString (SIZE (1..64))

ExpressionIndex	::= TEXTUAL-CONVENTION
    STATUS	current
    DESCRIPTION
	"An integer shorthand identification for an expression.
	An ExpressionIndex corresponds one-to-one to an
	ExpressionName.

	Once assigned an ExpressionIndex may not be changed."
    SYNTAX	Unsigned32 (1..4294967295)





Expires	3 June 1997+6 months					[Page 5]





Internet Draft		     Expression	MIB		     3 June 1997


ExpressionIndexOrZero ::= TEXTUAL-CONVENTION
    STATUS	current
    DESCRIPTION
	"Either	an ExpressionIndex or zero.  The meaning of zero
	depends	on the DESCRIPTION of the object."
    SYNTAX	Unsigned32 (0..4294967295)



expressionMIBObjects OBJECT IDENTIFIER ::= { expressionMIB 1 }

expResource	OBJECT IDENTIFIER ::= {	expressionMIBObjects 1 }
expName		OBJECT IDENTIFIER ::= {	expressionMIBObjects 2 }
expDefine	OBJECT IDENTIFIER ::= {	expressionMIBObjects 3 }
expValue	OBJECT IDENTIFIER ::= {	expressionMIBObjects 4 }


--
-- Wildcarding Example
--
-- This	example	refers to tables and objects defined below.  It	may well
-- make	more sense after reading those definitions.
--
-- An expression may use wildcarded MIB	objects	that result in multiple
-- values for the expression.  To specify a wildcarded MIB object a
-- management application leaves off part or all of the	instance portion
-- of the object identifier.  For our example we'll use	a counter of
-- total blessings from	a table	of people.  Another table, indexed by town
-- and person has blessings just from that town.
--
-- So the index	clauses	are:
--
--     personEntry OBJECT-TYPE
--     ...
--     INDEX { personIndex }
--
-- And:
--
--     townPersonEntry OBJECT-TYPE
--     ...
--     INDEX { townIndex, personIndex }
--
-- In our friendly application we may have entered our expression as:
--
--     100 * townPersonBlessings.976.* / personBlessings.*





Expires	3 June 1997+6 months					[Page 6]





Internet Draft		     Expression	MIB		     3 June 1997


--
-- What	goes in	expExpression is:
--
--     100*$1/$2
--
-- For example purposes	we'll use some slightly	far-fetched OIDs, but the
-- weirdity won't matter.  The People MIB is 1.3.6.1.99.7 and the Town MIB
-- is 1.3.6.1.99.11, so	for our	two counters the OIDs are:
--
--     personBlessings	1.3.6.1.99.7.1.3.1.4
--     townPersonBlessings	1.3.6.1.99.11.1.2.1.9
--
-- The rule for	wildcards is that all the wildcarded parts have	to match
-- exactly.  In	this case that means we	have to	hardwire the town and only
-- the personIndex can be wildcarded.  So our values for expObjectID are:
--
--     1.3.6.1.99.7.1.3.1.4
--     1.3.6.1.99.11.1.2.1.9.976
--
-- We're hardwired to townIndex	976 and	personIndex is allowed to vary.
--
-- The value of	expExpressionPrefix can	be either of those two counter OIDs,
-- since either	of them	takes you to a MIB definition where you	can look
-- at the INDEX	clause and figure out what's been left off.  What's been
-- left	off doesn't have to work out to	be the same object, but	it does
-- have	to work	out to be the same values (semantics).
--
-- If we have people numbered 6, 19, and 42 in town number 976,	the
-- successive values of	expValueInstance will be:
--
--     0.0.6
--     0.0.19
--     0.0.42
--
-- So there will be three values in expValueTable, with	those OIDs as the
-- expValueInstance part of their indexing.
--


--
-- Resource Control
--

expResourceDeltaMinimum	OBJECT-TYPE
    SYNTAX	Integer32 (-1 |	1..600)





Expires	3 June 1997+6 months					[Page 7]





Internet Draft		     Expression	MIB		     3 June 1997


    UNITS	"seconds"
    MAX-ACCESS	read-write
    STATUS	current
    DESCRIPTION
	"The minimum expExpressionDeltaInterval	this system will
	accept.	 A system may use the larger values of this minimum
	to lessen the impact of	constantly computing deltas.

	The value -1 indicates this system will	not accept
	deltaValue as a	value for expObjectSampleType.

	Unless explicitly resource limited, a system's value for
	this object should be 1.

	Changing this value will not invalidate	an existing setting
	of expObjectSampleType."
    ::=	{ expResource 1	}

expResourceDeltaWildcardInstanceMaximum	OBJECT-TYPE
    SYNTAX	Unsigned32
    UNITS	"instances"
    MAX-ACCESS	read-write
    STATUS	current
    DESCRIPTION
	"The maximum number of dynamic instance	entries	this system
	will support for wildcarded delta objects in expressions.
	These are the entries that maintain state, one for each
	instance of each deltaValue object for each value of an
	expression.

	A value	of 0 indicates no preset limit,	that is, the limit
	is dynamic based on system operation and resources.

	Unless explicitly resource limited, a system's value for
	this object should be 0.

	Changing this value will not disturb existing delta
	wildcard instance state	but will inhibit the creation of
	more."
    ::=	{ expResource 2	}

expResourceDeltaWildcardInstances OBJECT-TYPE
    SYNTAX	Gauge32
    UNITS	"instances"
    MAX-ACCESS	read-only





Expires	3 June 1997+6 months					[Page 8]





Internet Draft		     Expression	MIB		     3 June 1997


    STATUS	current
    DESCRIPTION
	"The number of currently active	instance entries as
	defined	for expResourceDeltaWildcardInstanceMaximum."
    ::=	{ expResource 3	}

expResourceDeltaWildcardInstancesHigh OBJECT-TYPE
    SYNTAX	Gauge32
    UNITS	"instances"
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The highest value of expResourceDeltaWildcardInstances
	that has occurred since	initialization of the management
	system."
    ::=	{ expResource 4	}

expResourceDeltaWildcardInstanceResourceLacks OBJECT-TYPE
    SYNTAX	Counter32
    UNITS	"instances"
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The number of times this system could not create
	an entry that would have exceeded
	expResourceDeltaWildcardInstanceMaximum."
    ::=	{ expResource 5	}


--
-- Naming & Creation
--

expNameLastChange OBJECT-TYPE
    SYNTAX	TimeStamp
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The value of sysUpTime	the last time an expression was
	created	or deleted or had its name changed using
	expExpressionName."
    ::=	{ expName 1 }

expNameHighestIndex OBJECT-TYPE
    SYNTAX	ExpressionIndex





Expires	3 June 1997+6 months					[Page 9]





Internet Draft		     Expression	MIB		     3 June 1997


    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The highest value of ExpressionIndex ever assigned on
	this system.

	If all expression-creating applications	cooperate, they
	may use	this to	avoid reusing an ExpressionIndex.  To
	do so, attempt creation	of a new entry with this
	value +	1 as the value of expExpressionIndex.

	Although reusing ExpressionIndexes could lead to an
	application receiving a	misunderstood value, it	is a
	matter of local	management policy whether to reuse them."
    ::=	{ expName 2 }

--
-- Name	Creation Table
--

expNameTable OBJECT-TYPE
    SYNTAX	SEQUENCE OF ExpNameEntry
    MAX-ACCESS	not-accessible
    STATUS	current
    DESCRIPTION
	"A table of expression names, for creating and deleting
	expressions."
    ::=	{ expName 3 }

expNameEntry OBJECT-TYPE
    SYNTAX	ExpNameEntry
    MAX-ACCESS	not-accessible
    STATUS	current
    DESCRIPTION
	"Information about a single expression.	 New expressions
	can be created using expNameStatus.

	To create an expression	create the named entry in this
	table and activate it with RowStatus.  Before or after
	activation, use	expExpressionIndex to populate
	expExpressionTable and expObjectTable.

	Deleting an entry deletes all related entries in
	expExpressionTable and expObjectTable.
9




9Expires	3 June 1997+6 months
[Page 10]




Internet Draft		     Expression	MIB		     3 June 1997



    Because of the relationships among the multiple tables
	for an expression (expNameTable, expExpressionTable,
	expObjectTable,	and expValueTable) and the SNMP	rules
	for independence in setting object values, it is
	necessary to do	final error checking when an expression
	is evaluated, that is, when one	of its instances in
	expValueTable is read.	Earlier	checking need not be
	done and an implementation may not impose any ordering
	on the creation	of objects related to an expression other
	to require values for expName and expExpressionIndex
	before any other related obects	can be created.

	If an attempt is made to evaluate a partially defined
	expression, active rows	will exist, rows that are not
	active will not, and the results will fail accordingly."
    INDEX	{ IMPLIED expName }
    ::=	{ expNameTable 1 }

ExpNameEntry ::= SEQUENCE {
    expName			ExpressionName,
    expExpressionIndex		ExpressionIndex,
    expNameStatus		RowStatus
}

expName	OBJECT-TYPE
    SYNTAX	ExpressionName
    MAX-ACCESS	not-accessible
    STATUS	current
    DESCRIPTION
	"The name of the expression.  Choosing names with useful
	lexical	ordering supports using	GetNext	or GetBulk to
	retrieve a useful subset of the	table."
    ::=	{ expNameEntry 1 }

expExpressionIndex OBJECT-TYPE
    SYNTAX	ExpressionIndex
    MAX-ACCESS	read-create
    STATUS	current
    DESCRIPTION
	"The numeric identification of the expression.

	Applications may select	this number in ascending numerical
	order by using expNameHighestIndex as a	hint or	may use	any
	other acceptible, unused number.
9




9Expires	3 June 1997+6 months
[Page 11]




Internet Draft		     Expression	MIB		     3 June 1997



    Once set this value	may not	be changed."
    ::=	{ expNameEntry 2 }

expNameStatus OBJECT-TYPE
    SYNTAX	RowStatus
    MAX-ACCESS	read-create
    STATUS	current
    DESCRIPTION
	"The control that allows creation/deletion of entries."
    ::=	{ expNameEntry 3 }

--
-- Definition
--
-- Expression Definition Table
--

expExpressionTable OBJECT-TYPE
    SYNTAX	SEQUENCE OF ExpExpressionEntry
    MAX-ACCESS	not-accessible
    STATUS	current
    DESCRIPTION
	"A table of expression definitions."
    ::=	{ expDefine 1 }

expExpressionEntry OBJECT-TYPE
    SYNTAX	ExpExpressionEntry
    MAX-ACCESS	not-accessible
    STATUS	current
    DESCRIPTION
	"Information about a single expression.	 An entry appears in
	this table when	an expNameEntry	is created.  Deleting the
	matching expNameEntry deletes this entry and its
	associated expObjectTable entries.

	Values of read-write objects in	this table may be changed
	at any time."
    INDEX	{ expExpressionIndex }
    ::=	{ expExpressionTable 1 }

ExpExpressionEntry ::= SEQUENCE	{
    expExpressionName		ExpressionName,
    expExpression		OCTET STRING,
    expExpressionComment	DisplayString,
    expExpressionDeltaInterval	Integer32,





Expires	3 June 1997+6 months				       [Page 12]




Internet Draft		     Expression	MIB		     3 June 1997



    expExpressionPrefix		OBJECT IDENIFIER,
    expExpressionErrors		Counter32,
    expExpressionErrorTime	TimeStamp,
    expExpressionErrorIndex	Integer32,
    expExpressionError		INTEGER,
    expExpressionInstance	OBJECT IDENTIFIER
}

expExpressionName OBJECT-TYPE
    SYNTAX	ExpressionName
    MAX-ACCESS	read-write
    STATUS	current
    DESCRIPTION
	"The unique name of the	expression, the	same as	expName.

	Use this object	to change the expression's name	without
	changing its expExpressionIndex."
    ::=	{ expExpressionEntry 1 }

expExpression OBJECT-TYPE
    SYNTAX	OCTET STRING (SIZE (1..1024))
    MAX-ACCESS	read-write
    STATUS	current
    DESCRIPTION
	"The expression	to be evaluated.  Except for the maximum
	length this object is NVT ASCII, under the same	rules as
	a DisplayString.

	Except for the variable	names the expression is	in ANSI	C
	syntax.	 ANSI C	operators and functions	are allowed only if
	explicitly listed here.

	Variables are expressed	as a dollar sign ('$') and an
	integer	that corresponds to an expObjectIndex.	An
	example	of a valid expression is:

		($1-$5)*100

	Expressions may	not be used recursively, that is although
	an expression may use the results of another expression, it
	may not	contain	any variable that is directly or indirectly
	a result of its	own evaluation.

	The only operators and functions allowed are:
9




9Expires	3 June 1997+6 months
[Page 13]




Internet Draft		     Expression	MIB		     3 June 1997



	( ) [ ]
		+ - * /	%
		& | ^ << >> ~
		! && ||	== != >	>= < <=

	Note the parentheses are included for parenthesizing the
	expression, not	for casting data types.

	The only constant types	defined	are:

		int (32-bit signed)
		long (64-bit signed)
		unsigned int
		unsigned long
		hexadecimal
		character
		string
		oid

	All but	oid are	as defined for ANSI C.	Note that a
	hexidecimal constant may end up	as a scalar or an array	of
	8-bit integers.	 A string constant is enclosed in double
	quotes and may contain back-slashed individual characters
	as in ANSI C.

	An oid constant	comprises 32-bit, unsigned integers and	at
	least one period, for example:

		0.
		.0
		1.3.6.1

	Integer-typed objects are treated as 32- or 64-bit, signed
	or unsigned integers, as appropriate.  The results of
	mixing them are	as for ANSI C, including the type of the
	result.	 Note that a 32-bit value is thus promoted to 64 bits
	only in	an operation with a 64-bit value.  There is no
	provision for larger values to handle overflow.

	Relative to SNMP data types, a resulting value becomes
	unsigned when calculating it uses any unsigned value,
	including a counter.  To force the final value to be of
	data type counter the expression must explicitly use the
	counter32() or counter64() function (defined below).
9




9Expires	3 June 1997+6 months
[Page 14]




Internet Draft		     Expression	MIB		     3 June 1997


    OCTET STRINGS and OBJECT IDENTIFIERs are treated as	1-based

	arrays of unsigned 8-bit integers and unsigned 32-bit
	integers, respectively.

	IpAddresses are	treated	as 32-bit, unsigned integers in
	network	byte order, that is, the hex version of	255.0.0.0 is
	0xff000000.

	Conditional expressions	result in a 32-bit, unsigned integer
	of value 0 for false or	1 for true. When an arbitrary value
	is used	as a boolean 0 is false	and non-zero is	true.

	The only functions defined are:

		counter32
		counter64
		arraySection
		stringBegins
		stringEnds
		stringContains
		oidBegins
		oidEnds
		oidContains
		sum

	counter32(integer) - wrapped around an integer value (such
	as the rest of the expression),	counter32 forces the result's
	expValueType to	be 'counter32'.

	counter64(integer) - similar to	counter32 except that the
	resulting expValueType is 'counter64'.

	arraySection(array, integer, integer) -	selects	a piece	of an
	array (i.e. part of an OCTET STRING or OBJECT IDENTIFIER).
	The integer arguements are in the range	0 to 4,294,967,295.
	The first is an	initial	array index (1-based) and the second
	is an ending array index.  A value of 0	indicates first
	or last	element, respectively.	If the second integer is less
	than or	equal to the first, the	result is 0 length.  If	the
	second is larger than the array	length it indicates last
	element.

	stringBegins/Ends/Contains(octetString,	octetString) - looks
	for the	second string (which can be a string constant) in the
	first and returns the 1-based index where the match began.  A





Expires	3 June 1997+6 months				       [Page 15]




Internet Draft		     Expression	MIB		     3 June 1997


    return value of 0 indicates	no match (i.e. boolean false).


	oidBegins/Ends/Contains(oid, oid) - looks for the second OID
	(which can be an OID constant) in the first and	returns	the
	the 1-based index where	the match began.  A return value of 0
	indicates no match (i.e. boolean false).

	sum(integer*) -	sums all avaliable values of the wildcarded
	integer	object,	resulting in an	integer	scalar.	 Must be used
	with caution as	it wraps on overflow with no notification."
    DEFVAL	{ ''H }
    ::=	{ expExpressionEntry 2 }

expExpressionComment OBJECT-TYPE
    SYNTAX	DisplayString
    MAX-ACCESS	read-write
    STATUS	current
    DESCRIPTION
	"A comment to explain the use or meaning of the	expression."
    DEFVAL	{ ''H }
    ::=	{ expExpressionEntry 3 }

expExpressionDeltaInterval OBJECT-TYPE
    SYNTAX	Integer32 (0..86400)
    UNITS	"seconds"
    MAX-ACCESS	read-write
    STATUS	current
    DESCRIPTION
	"Sampling interval for objects in this expression with
	expObjectSampleType 'deltaValue'.

	This object is not instantiated	if not applicable.

	A value	of 0 indicates no automated sampling.  In this case
	the delta is the difference from the last time the expression
	was evaluated.	Note that this is subject to unpredictable
	delta times in the face	of retries or multiple managers.

	A value	greater	than zero is the number	of seconds between
	automated samples.

	Until the delta	interval has expired once the delta for	the
	object is effectively not instantiated and evaluating
	the expression has results as if the object itself were	not
	instantiated.





Expires	3 June 1997+6 months				       [Page 16]




Internet Draft		     Expression	MIB		     3 June 1997


	Note that delta	values potentially consume large amounts of

	system CPU and memory.	Delta state and	processing must
	continue constantly even if the	expression is not being	used.
	For wildcarded objects this can	be substantial overhead."
    DEFVAL	{ 0 }
    ::=	{ expExpressionEntry 4 }

expExpressionPrefix OBJECT-TYPE
    SYNTAX	OBJECT IDENTIFIER
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"An object prefix to assist an application in determining
	the instance indexing to use in	expValueTable, relieving the
	application of the need	to scan	the expObjectTable to
	determine such a prefix.

	See expObjectTable for information on wildcarded objects.

	If the expValueInstance	portion	of the value OID may
	be treated as a	scalar (that is, normally, 0) the value	of
	expExpressionPrefix is zero length, that is, no	OID at all.

	Otherwise expExpressionPrefix is the value of any wildcarded
	instance of expObjectID	for the	expression.  This is
	sufficient as the remainder, that is, the instance fragment
	relevant to instancing the values must be the same for all
	wildcarded objects in the expression."
    ::=	{ expExpressionEntry 5 }

expExpressionErrors OBJECT-TYPE
    SYNTAX	Counter32
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The number of errors encountered while	evaluating this
	expression.

	Note that an object in the expression not being	accessible
	is not considered an error.  It	is a legitimate	condition
	that causes the	corresponding expression value not to be
	instantiated."
    ::=	{ expExpressionEntry 6 }

expExpressionErrorTime OBJECT-TYPE





Expires	3 June 1997+6 months				       [Page 17]




Internet Draft		     Expression	MIB		     3 June 1997


    SYNTAX	TimeStamp

    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The value of sysUpTime	the last time an error caused a
	failure	to evaluate this expression.

	This object is not instantiated	if there have been no
	errors."
    ::=	{ expExpressionEntry 7 }

    expExpressionErrorIndex OBJECT-TYPE
    SYNTAX	Integer32
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The 1-based character index into expExpression	for where
	the error occured.  The	value zero indicates irrelevance.

	This object is not instantiated	if there have been no
	errors."
    ::=	{ expExpressionEntry 8 }

    expExpressionError OBJECT-TYPE
    SYNTAX	INTEGER	{
		invalidSyntax(1),
		undefinedObjectIndex(2),
		unrecognizedOperator(3),
		unrecognizedFunction(4),
		invalidFunctionParameter(5),
		unmatchedParenthesis(6),
		tooManyWildcardValues(7),
		recursion(8)
		    )
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The error that	occurred.

	Many of	these errors should occur when the attempt is
	made to	set expExpression.  In those cases the set
	request	will fail with the error code 'wrongValue'.

	The error 'tooManyWildcardValues' can occur on a set or
	a get operation.  It fails with	the error code





Expires	3 June 1997+6 months				       [Page 18]




Internet Draft		     Expression	MIB		     3 June 1997


    'resourceUnavailable'.


	This object is not instantiated	if there have been no
	errors."
    ::=	{ expExpressionEntry 9 }

    expExpressionInstance OBJECT-TYPE
    SYNTAX	OBJECT IDENTIFIER
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The expValueInstance being evaluated when the error
	occurred.  A zero-length indicates irrelevance.

	This object is not instantiated	if there have been no
	errors."
    ::=	{ expExpressionEntry 10	}

--
-- Object Table
--

expObjectTable OBJECT-TYPE
    SYNTAX	SEQUENCE OF ExpObjectEntry
    MAX-ACCESS	not-accessible
    STATUS	current
    DESCRIPTION
	"A table of object definitions for each	expExpression.

	Wildcarding instance IDs:

	It is legal to omit all	or part	of the instance	portion	for
	some or	all of the objects in an expression. (See the
	DESCRIPTION of expObjectID for details.	 However, note that
	if more	than one object	in the same expression is wildcarded
	in this	way, they all must be objects where that portion of
	the instance is	the same.  In other words, all objects may be
	in the same SEQUENCE or	in different SEQUENCEs but with	the
	same semantic index value (e.g., a value of ifIndex)
	for the	wildcarded portion."
    ::=	{ expDefine 2 }

expObjectEntry OBJECT-TYPE
    SYNTAX	ExpObjectEntry
    MAX-ACCESS	not-accessible





Expires	3 June 1997+6 months				       [Page 19]




Internet Draft		     Expression	MIB		     3 June 1997


    STATUS	current

    DESCRIPTION
	"Information about an object.  An application uses
	expObjectStatus	to create entries in this table	while
	in the process of defining an expression.

	Values of read-create objects in this table may	be
	changed	at any time."
    INDEX	{ expExpressionIndex, expObjectIndex }
    ::=	{ expObjectTable 1 }

ExpObjectEntry ::= SEQUENCE {
    expObjectIndex		    Unsigned32,
    expObjectID			    OBJECT IDENTIFIER,
    expObjectSampleType		    INTEGER,
    expObjectDeltaDiscontinuityID   OBJECT IDENTIFIER,
    expObjectConditional	    OBJECT IDENTIFIER,
    expObjectStatus		    RowStatus
}

expObjectIndex OBJECT-TYPE
    SYNTAX	Unsigned32 (1..4294967295)
    MAX-ACCESS	not-accessible
    STATUS	current
    DESCRIPTION
	"A unique, numeric identification for an object.  Prefixed
	with a dollar sign ('$') this is used to reference the
	object in the corresponding expExpression."
    ::=	{ expObjectEntry 1 }

expObjectID OBJECT-TYPE
    SYNTAX	OBJECT IDENTIFIER
    MAX-ACCESS	read-create
    STATUS	current
    DESCRIPTION
	"The OBJECT IDENTIFIER (OID) of	this object.  The OID may be
	fully qualified, meaning it includes a complete	instance
	identifier part	(e.g., ifInOctets.1 or sysUpTime.0), or	it
	may not	be fully qualified, meaning it may lack	all or part
	of the instance	identifier.  If	the expObjectID	is not fully
	qualified, then	the value of the expression will be multiple
	values,	as if done for a GetNext sweep of the object.

	An object here may itself be the result	of an expression but
	recursion is not allowed.





Expires	3 June 1997+6 months				       [Page 20]




Internet Draft		     Expression	MIB		     3 June 1997


	NOTE:  The simplest implementations of this MIB	may not	allow

	wildcards."
    ::=	{ expObjectEntry 2 }

expObjectSampleType OBJECT-TYPE
    SYNTAX	INTEGER	{ absoluteValue(1), deltaValue(2) }
    MAX-ACCESS	read-create
    STATUS	current
    DESCRIPTION
	"The method of sampling	the selected variable."
    DEFVAL	{ absoluteValue	}
    ::=	{ expObjectEntry 3 }

expObjectDeltaDiscontinuityID OBJECT-TYPE
    SYNTAX	OBJECT IDENTIFIER
    MAX-ACCESS	read-create
    STATUS	current
    DESCRIPTION
	"The OBJECT IDENTIFIER (OID) of	a TimeTicks object that
	indicates a discontinuity in the value at expObjectID.

	This object is not instantiated	if not applicable.

	The OID	may be for a leaf object (e.g. sysUpTime.0) or may
	be wildcarded to match expObjectID.

	If the object identified is not	accessible no discontinuity
	check will be made."
    DEFVAL	{ 0 0 }
    ::=	{ expObjectEntry 4 }

expObjectConditional OBJECT-TYPE
    SYNTAX	OBJECT IDENTIFIER
    MAX-ACCESS	read-create
    STATUS	current
    DESCRIPTION
	"The OBJECT IDENTIFIER (OID) of	an object that overrides
	whether	the instance of	expObjectID is to be considered
	usable.	 If the	value of the object at expObjectConditional
	is 0 or	not instantiated, the object at	expObjectID is
	treated	as if it is not	instantiated, otherwise	it is
	treated	as usual.

	The OID	may be for a leaf object (e.g. sysObjectID.0) or
	may be wildcarded to match expObjectID.





Expires	3 June 1997+6 months				       [Page 21]




Internet Draft		     Expression	MIB		     3 June 1997


	A value	of 0.0 is the same as an object	with a non-zero

	(true) value."
    DEFVAL	{ 0 0 }
    ::=	{ expObjectEntry 5 }

expObjectStatus	OBJECT-TYPE
    SYNTAX	RowStatus
    MAX-ACCESS	read-create
    STATUS	current
    DESCRIPTION
	"The control that allows creation/deletion of entries.

	Objects	in this	table may be changed while expObjectStatus
	is in any state."
    ::=	{ expObjectEntry 6 }

--
-- Expression Value Table
--

expValueTable OBJECT-TYPE
    SYNTAX	SEQUENCE OF ExpValueEntry
    MAX-ACCESS	not-accessible
    STATUS	current
    DESCRIPTION
	"A table of values from	evaluated expressions."
    ::=	{ expValue 1 }

expValueEntry OBJECT-TYPE
    SYNTAX	ExpValueEntry
    MAX-ACCESS	not-accessible
    STATUS	current
    DESCRIPTION
	"A single value	from an	evaluated expression.  For a given
	instance, only one "Val" object	in the conceptual row will
	be instantiated, that is, the one with the appropriate type
	for the	value.	Reading	a value	from the table causes the
	evaluation of the expression for that value.

	If in the attempt to evaluate the expression one or more
	of the necessary objects is not	available, the corresponding
	entry in this table is effectively not instantiated."
    INDEX	{ expExpressionIndex, expValueInstance }
    ::=	{ expValueTable	1 }
9




9Expires	3 June 1997+6 months
[Page 22]




Internet Draft		     Expression	MIB		     3 June 1997


ExpValueEntry ::= SEQUENCE {
    expValueInstance	      OBJECT IDENTIFIER,

    expValueType	      INTEGER,
    expValueCounter32Val      Unsigned32,
    expValueUnsigned32Val     Unsigned32,
    expValueInteger32Val      Integer32,
    expValueIpAddressVal      IpAddress,
    expValueOctetStringVal    OCTET STRING,
    expValueOidVal	      OBJECT IDENTIFIER,
    expValueCounter64Val      Counter64
}

expValueInstance OBJECT-TYPE
    SYNTAX	OBJECT IDENTIFIER,
    MAX-ACCESS	not-accessible
    STATUS	current
    DESCRIPTION
	"The final instance portion of a value's OID according to
	the wildcarding	in instances of	expObjectID for	the
	expression.  The prefix	of this	OID fragment is	0.0,
	leading	to the following behavior.

	If there is no wildcarding, the	value is 0.0.0.	 In other
	words, there is	one value which	standing alone would have
	been a scalar with a 0 at the end of its OID.

	If there is wildcarding, the value is 0.0 followed by
	a value	that the wildcard can take, thus defining one value
	instance for each real,	possible value of the wildcard.
	So, for	example, if the	wildcard worked	out to be an ifIndex,
	there is an expValueInstance for each applicable ifIndex."
    ::=	{ expValueEntry	1 }

expValueType OBJECT-TYPE
    SYNTAX	INTEGER	{ counter32(1),	unsignedOrGauge32(2),
			  timeTicks(3),	integer32(4), ipAddress(5),
			  octetString(6), objectId(7), counter64(8) }
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The type of the value.	One and	only one of the	value
	objects	that follow will be instantiated based on this type."
    ::=	{ expValueEntry	2 }

expValueCounter32Val OBJECT-TYPE





Expires	3 June 1997+6 months				       [Page 23]




Internet Draft		     Expression	MIB		     3 June 1997


    SYNTAX	Counter32
    MAX-ACCESS	read-only

    STATUS	current
    DESCRIPTION
	"The value when	expValueType is	of 'counter32'."
    ::=	{ expValueEntry	3 }

expValueUnsigned32Val OBJECT-TYPE
    SYNTAX	Unsigned32
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The value when	expValueType is	one of 'unsignedOrGauge32'
	or 'timeTicks'."
    ::=	{ expValueEntry	4 }

expValueInteger32Val OBJECT-TYPE
    SYNTAX	Integer32
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The value when	expValueType is	'integer32'."
    ::=	{ expValueEntry	5 }

expValueOctetStringVal OBJECT-TYPE
    SYNTAX	IpAddress
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The value when	expValueType is	'ipAddress'."
    ::=	{ expValueEntry	6 }

expValueOctetStringVal OBJECT-TYPE
    SYNTAX	OCTET STRING (SIZE (0..65536))
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The value when	expValueType is	'octetString'."
    ::=	{ expValueEntry	7 }

expValueOidVal OBJECT-TYPE
    SYNTAX	OBJECT IDENTIFIER
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION





Expires	3 June 1997+6 months				       [Page 24]




Internet Draft		     Expression	MIB		     3 June 1997


    "The value when expValueType is 'objectId'."
    ::=	{ expValueEntry	8 }


expValueCounter64Val OBJECT-TYPE
    SYNTAX	Counter64
    MAX-ACCESS	read-only
    STATUS	current
    DESCRIPTION
	"The value when	expValueType is	'counter64'."
    ::=	{ expValueEntry	9 }

--
-- Conformance
--

expressionMIBConformance OBJECT	IDENTIFIER ::= { expressionMIB 3 }
expressionMIBCompliances OBJECT	IDENTIFIER ::= { expressionMIBConformance 1 }
expressionMIBGroups	 OBJECT	IDENTIFIER ::= { expressionMIBConformance 2 }

-- Compliance

expressionMIBCompliance	MODULE-COMPLIANCE
	STATUS current
	DESCRIPTION
		"The compliance	statement for entities which implement
		the Expression MIB."
	MODULE	-- this	module
		MANDATORY-GROUPS {
			expressionResourceGroup,
			expressionDefinitionGroup,
			expressionValueGroup
		}

	OBJECT	       expResourceDeltaMinimum
	SYNTAX	       Integer32 ( -1 )
	DESCRIPTION
		"Implementation	need not allow deltas."

	OBJECT	       expResourceDeltaMinimum
	SYNTAX	       Integer32 (60..600)
	DESCRIPTION
		"Implementation	may restrict deltas to higher values."

	OBJECT	       expObjectSampleType
	WRITE-SYNTAX   INTEGER { absoluteValue(1) }





Expires	3 June 1997+6 months				       [Page 25]




Internet Draft		     Expression	MIB		     3 June 1997


    DESCRIPTION
		"Implementation	may not	allow deltas."


	::= { expressionMIBCompliances 1 }

-- Units of Conformance

expressionResourceGroup	OBJECT-GROUP
	OBJECTS	{
		expResourceDeltaMinimum,
		expResourceDeltaWildcardInstanceMaximum,
		expResourceDeltaWildcardInstances,
		expResourceDeltaWildcardInstancesHigh,
		expResourceDeltaWildcardInstanceResourceLacks
	}
	STATUS current
	DESCRIPTION
		"Expression definition resource	management."
	::= { expressionMIBGroups 1 }

expressionDefinitionGroup OBJECT-GROUP
	OBJECTS	{
		expNameLastChange,
		expNameHighestIndex,
		expExpressionIndex,
		expNameStatus,

		expExpressionName,
		expExpression,
		expExpressionComment,
		expExpressionDeltaInterval,
		expExpressionPrefix,
		expExpressionErrors,
		expExpressionErrorTime,
		expExpressionErrorIndex,
		expExpressionError,
		expExpressionInstance,

		expObjectID,
		expObjectSampleType,
		expObjectDeltaDiscontinuityID,
		expObjectConditional,
		expObjectStatus
	}
	STATUS current





Expires	3 June 1997+6 months				       [Page 26]




Internet Draft		     Expression	MIB		     3 June 1997


    DESCRIPTION
		"Expression definition resource	management."

	::= { expressionMIBGroups 1 }

expressionValueGroup OBJECT-GROUP
	OBJECTS	{
		expValueType,
		expValueCounter32Val,
		expValueUnsigned32Val,
		expValueInteger32Val,
		expValueIpAddressVal,
		expValueOctetStringVal,
		expValueOidVal,
		expValueCounter64Val
	}
	STATUS current
	DESCRIPTION
		"Expression definition resource	management."
	::= { expressionMIBGroups 1 }

END























9




9Expires	3 June 1997+6 months
[Page 27]




Internet Draft		     Expression	MIB		     3 June 1997


5.  Acknowledgements

This MIB contains considerable contributions from the RMON MIB,	the

Distributed Management Design Team (Andy Bierman, Maria	Greene,	Bob
Stewart, and Steve Waldbusser),	and colleagues at Cisco.







































9




9Expires	3 June 1997+6 months
[Page 28]




Internet Draft		     Expression	MIB		     3 June 1997


6.  References

[1]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and
     S.	Waldbusser, "Structure of Management Information for version 2

     of	the Simple Network Management Protocol (SNMPv2)", RFC 1902,
     January 1996.

[2]  McCloghrie, K., and M. Rose, Editors, "Management Information Base
     for Network Management of TCP/IP-based internets: MIB-II",	STD 17,
     RFC 1213, March 1991.

[3]  Case, J., Fedor, M., Schoffstall, M., and J. Davin, "Simple Network
     Management	Protocol", RFC 1157, May 1990.

[4]  SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and
     S.	Waldbusser, "Protocol Operations for version 2 of the Simple
     Network Management	Protocol (SNMPv2)", RFC	1905, January 1996.



























9




9Expires	3 June 1997+6 months
[Page 29]




Internet Draft		     Expression	MIB		     3 June 1997


7.  Security Considerations

Security issues	are not	discussed in this memo.



8.  Author's Address

     Bob Stewart
     Cisco Systems, Inc.
     170 West Tasman Drive
     San Jose, CA 95134-1706

     Phone: 408-526-4527
     Email: bstewart@cisco.com






























9




9Expires	3 June 1997+6 months
[Page 30]




Internet Draft		     Expression	MIB		     3 June 1997


Table of Contents


1 Abstract ........................................................    2
2 The SNMP Network Management Framework	...........................    3
2.1 Object Definitions ............................................    3

3 Overview ........................................................    4
4 Definitions .....................................................    5
5 Acknowledgements ................................................   28
6 References ......................................................   29
7 Security Considerations .........................................   30
8 Author's Address ................................................   30
































9




9Expires	3 June 1997+6 months
[Page 31]



