
Network Working Group                                          M.T. Rose
Internet-Draft                                    Invisible Worlds, Inc.
Expires: December 10, 2000                                      G. Klyne
                                            Content Technologies Limited
                                                            D.H. Crocker
                                                  Brandenburg Consulting
                                                           June 11, 2000


                                The IMXP
                        draft-mrose-imxp-core-00.txt

Status of this Memo

   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC2026.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups. Note that
   other groups may also distribute working documents as
   Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six
   months and may be updated, replaced, or obsoleted by other documents
   at any time. It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on December 10, 2000.

Copyright Notice

   Copyright (C) The Internet Society (2000). All Rights Reserved.

Abstract

   This memo describes IMXP, an extensible, asynchronous message
   relaying service for application layer programs.









Rose, et. al.          Expires December 10, 2000                [Page 1]

Internet-Draft                  The IMXP                       June 2000


Table of Contents

   1.      Introduction . . . . . . . . . . . . . . . . . . . . . . .  3
   1.1     Overview . . . . . . . . . . . . . . . . . . . . . . . . .  4
   1.2     Architecture at a Glance . . . . . . . . . . . . . . . . .  5
   2.      Service Principles . . . . . . . . . . . . . . . . . . . .  7
   2.1     Modes of Operation . . . . . . . . . . . . . . . . . . . .  7
   2.2     Naming of Entities . . . . . . . . . . . . . . . . . . . .  8
   3.      Service Provisioning . . . . . . . . . . . . . . . . . . .  9
   3.1     Connection Establishment . . . . . . . . . . . . . . . . .  9
   3.2     Authentication . . . . . . . . . . . . . . . . . . . . . .  9
   3.3     Authorization  . . . . . . . . . . . . . . . . . . . . . .  9
   3.4     Confidentiality  . . . . . . . . . . . . . . . . . . . . .  9
   3.5     Routing Integrity  . . . . . . . . . . . . . . . . . . . . 10
   3.6     Traffic Analysis . . . . . . . . . . . . . . . . . . . . . 10
   4.      The IMXP . . . . . . . . . . . . . . . . . . . . . . . . . 11
   4.1     Use of XML and MIME  . . . . . . . . . . . . . . . . . . . 11
   4.2     Profile Identification and Initialization  . . . . . . . . 13
   4.3     Request and Response Messages  . . . . . . . . . . . . . . 13
   4.4     Message Semantics  . . . . . . . . . . . . . . . . . . . . 14
   4.4.1   The Attach Operation . . . . . . . . . . . . . . . . . . . 14
   4.4.2   The Terminate Operation  . . . . . . . . . . . . . . . . . 16
   4.4.3   The Data Operation . . . . . . . . . . . . . . . . . . . . 17
   4.4.3.1 Relay Processing of Data . . . . . . . . . . . . . . . . . 19
   4.4.3.2 Application Processing of Data . . . . . . . . . . . . . . 20
   4.5     IMXP Access Policies . . . . . . . . . . . . . . . . . . . 21
   5.      IMXP Options . . . . . . . . . . . . . . . . . . . . . . . 23
   5.1     The statusRequest Option . . . . . . . . . . . . . . . . . 25
   6.      IMXP Services  . . . . . . . . . . . . . . . . . . . . . . 30
   6.1     Use of the IMXP Core DTD . . . . . . . . . . . . . . . . . 31
   6.1.1   Transaction-Identifiers  . . . . . . . . . . . . . . . . . 31
   6.1.2   The Reply Operation  . . . . . . . . . . . . . . . . . . . 32
   6.2     The Report Service . . . . . . . . . . . . . . . . . . . . 33
   7.      IMXP Reply Codes . . . . . . . . . . . . . . . . . . . . . 34
   8.      IMXP Option Registration Template  . . . . . . . . . . . . 35
   9.      IMXP Service Registration Template . . . . . . . . . . . . 36
   10.     Registration: The IMXP Profile . . . . . . . . . . . . . . 37
   11.     Registration: The statusRequest Option . . . . . . . . . . 38
   12.     Registration: The Report Service . . . . . . . . . . . . . 39
   13.     The IMXP Core DTD  . . . . . . . . . . . . . . . . . . . . 40
   14.     The Report Service DTD . . . . . . . . . . . . . . . . . . 43
   15.     Security Considerations  . . . . . . . . . . . . . . . . . 44
   16.     IANA Considerations  . . . . . . . . . . . . . . . . . . . 45
           References . . . . . . . . . . . . . . . . . . . . . . . . 46
           Authors' Addresses . . . . . . . . . . . . . . . . . . . . 46
   A.      Acknowledgements . . . . . . . . . . . . . . . . . . . . . 48
           Full Copyright Statement . . . . . . . . . . . . . . . . . 49




Rose, et. al.          Expires December 10, 2000                [Page 2]

Internet-Draft                  The IMXP                       June 2000


1. Introduction

   Network applications can be broadly distinguished by five
   operational characteristics: 

   o  server push or client pull;

   o  synchronous (interactive) or asynchronous (batch);

   o  time-assured or time-insensitive;

   o  best-effort or reliable; and,

   o  stateful or stateless.

   For example: 

   o  the world-wide web is a pull, synchronous, time-insensitive,
      reliable, stateless service; whilst

   o  Internet mail is a push, asynchronous, time-insensitive,
      best-effort (without DSN), stateless service.

   Messaging applications vary considerably in their operational
   requirements. For example, some messaging applications require
   assurance of timeliness and reliability, whilst others do not.

   These features come at a cost, in terms of both infrastructural and
   configuration complexity. Accordingly, the underlying service must
   be extensible to support different requirements in a consistent
   manner.

   This memo defines a core messaging service that supports a range of
   operational characteristics. The core service supports a variety of
   tailored services for both user-based and programmatic exchanges.
















Rose, et. al.          Expires December 10, 2000                [Page 3]

Internet-Draft                  The IMXP                       June 2000


1.1 Overview

   IMXP provides an extensible, asynchronous message relaying service
   for application layer programs.

   IMXP, at its core, provides a best-effort datagram service. Each
   datagram, simply termed "data", is originated and received by IMXP
   "endpoints" -- applications that dynamically attach to the IMXP
   "relaying mesh".

   The data transmitted specifies: 

   o  an originating endpoint;

   o  an opaque content (via a URI-reference);

   o  one or more recipient endpoints; and,

   o  zero or more options.

   Options are used to alter the semantics of the the service, may
   occur on a per-recipient or per-data basis, and may be processed by
   either a single or multiple relays.

   Additional IMXP services are provided on top of the relaying mesh;
   e.g., access control and presence information. Typically these
   services are provided by servers that are co-resident with one or
   more relays within an administrative domain.

   IMXP is specified as a BXXP[1] "profile". Accordingly, many aspects
   of IMXP (e.g., authentication) are provided within the BXXP
   framework. Throughout this memo, the terms "peer", "initiator",
   "listener", "client" (or "requestor"), and "server" (or "responder")
   are used in the context of BXXP. In particular, Section 2.1 of the
   BXXP framework memo discusses the roles that a BXXP peer may perform.

   When reading this memo, note that the terms "endpoint" and "relay"
   are specific to IMXP, they do not exist in the context of BXXP.













Rose, et. al.          Expires December 10, 2000                [Page 4]

Internet-Draft                  The IMXP                       June 2000


1.2 Architecture at a Glance

   The IMXP stack:

      +-------------+
      | IMXP        |        an IMXP process is either:
      |     process |
      +-------------+            - an application attached as an IMXP
      |             |              endpoint; or,
      |    IMXP     |
      |             |            - an IMXP relay
      +-------------+
      |             |        IMXP services are realized as applications
      |    BXXP     |        having a special relationship with the IMXP
      |             |        relays in their administrative domain
      +-------------+
      |   TCP/IP    |
      +-------------+
      |     ...     |
      +-------------+































Rose, et. al.          Expires December 10, 2000                [Page 5]

Internet-Draft                  The IMXP                       June 2000


   The IMXP entities:

          administrative domain #1          administrative domain #2
       +----------------------------+    +----------------------------+
       |   +------+                 |    |                 +------+   |
       |   |      |                 |    |                 |      |   |
       |   | appl |                 |    |                 | appl |   |
       |   |      |                 |    |                 |      |   |
       |   +......+       +------+  |    |  +------+       +......+   |
       |   |      |       |      |  |    |  |      |       |      |   |
       |   |end-  |       |relay |  |    |  |relay |       |end-  |   |
       |   | point|       |      |  |    |  |      |       | point|   |
       |   +------+       +------+  |    |  +------+       +------+   |
       |   |      |       |      |  |    |  |      |       |      |   |
       |   | IMXP |       | IMXP |  |    |  | IMXP |       | IMXP |   |
       |   |      |       |      |  |    |  |      |       |      |   |
       |   +------+       +------+  |    |  +------+       +------+   |
       |   |      |       |      |  |    |  |      |       |      |   |
       |   | BXXP |       | BXXP |  |    |  | BXXP |       | BXXP |   |
       |   |      |       |      |  |    |  |      |       |      |   |
       |   +------+       +------+  |    |  +------+       +------+   |
       |        ||         ||  ||   |    |   ||  ||         ||        |
       |        =============  ================  =============        |
       +----------------------------+    +----------------------------+

                      | <---- IMXP relaying mesh ----> |



           Note: routing between administrative domains is configured
                 using SRV RRs.  Accordingly, the actual number of
                 relays between two endpoints is not fixed.



















Rose, et. al.          Expires December 10, 2000                [Page 6]

Internet-Draft                  The IMXP                       June 2000


2. Service Principles

2.1 Modes of Operation

   IMXP is used in two modes: 

   endpoint-relay: in which the endpoint is always the BXXP initiator
      of the service, whilst relays are always the BXXP listeners. In
      this context, applications attach as endpoints, and then the
      transmission of data occurs.

   relay-relay: in which relays typically, though not necessarily,
      reside in different administrative domains. In this context, only
      the transmission of data occurs.

   In the endpoint-relay mode, an endpoint (BXXP initiator) may: 

   o  attach as one or more endpoints;

   o  send data to other endpoints;

   o  receive data from other endpoints; and,

   o  terminate any of its attachments.

   A relay (BXXP listener), in addition to servicing requests from a
   BXXP initiator, may: 

   o  terminate any of the endpoint's attachments;

   o  deliver data from other endpoints; and,

   o  indicate the delivery status of data sent earlier by the endpoint.

   In the relay-relay mode, the BXXP initiators and listeners transmit
   data on behalf of endpoints.















Rose, et. al.          Expires December 10, 2000                [Page 7]

Internet-Draft                  The IMXP                       June 2000


2.2 Naming of Entities

   Endpoints are named using the "addr-spec" syntax of RFC 822[2],
   i.e., "local@domain".

   Using the conventions of RFC 2303[3], all endpoint identities having
   a local-part starting with "imxp=" are reserved for use by IMXP
   services registered with the IANA.

   The URL scheme "im" is used to identify endpoints when written as
   URIs, e.g., "im:fred@example.com".

   Relays, although not named, belong to an administrative domain, as
   identified by a FQDN, e.g., "example.com".

   In IMXP, the "endpoint" is the fundamental entity. IMXP is carried
   over BXXP, which has the "peer" as its fundamental entity. The
   relationship between BXXP peer entities and IMXP endpoint entities
   are defined by IMXP's Access Policies (Section 4.5).
































Rose, et. al.          Expires December 10, 2000                [Page 8]

Internet-Draft                  The IMXP                       June 2000


3. Service Provisioning

3.1 Connection Establishment

   The SRV algorithm[4] is used to determine the IP address and TCP
   port number assigned to a relay for an administrative domain: 

   service: "imxp-edge" (for the endpoint-relay mode), or "imxp-mesh"
      (for the relay-relay mode);

   protocol: "tcp"; and,

   domain: the administrative domain.

3.2 Authentication

   Authentication is a matter of provisioning for each BXXP peer (c.f.,
   Section 4.5).

   An IMXP relay might be provisioned to allow a BXXP peer identity to
   coincide with a given endpoint identity. For example, a relay in the
   "example.com" administrative domain may be configured to allow a
   BXXP peer identified as "fred@example.com" to be authorized to
   attach as the IMXP endpoint "fred@example.com".

3.3 Authorization

   Authorization is a matter of provisioning for each BXXP peer (c.f.,
   Section 4.5).

   Typically, a relay requires that its BXXP peer authenticate as a
   prelude to authorization, but an endpoint usually does not require
   the same of its BXXP peer.

3.4 Confidentiality

   Confidentiality is a matter of provisioning for each BXXP peer.

   Typically, any data considered sensitive by an originating endpoint
   will have its content encrypted for the intended recipient
   endpoint(s), rather than relying on hop-by-hop encryption.
   Similarly, an originating endpoint will sign the content if
   end-to-end authentication is desired.








Rose, et. al.          Expires December 10, 2000                [Page 9]

Internet-Draft                  The IMXP                       June 2000


3.5 Routing Integrity

   Data are routed according to SRV entries in the DNS. Accordingly,
   routing integrity is a function of the DNS and the applications
   making use of the DNS. Additional assurance is provided if the BXXP
   initiator requires that the BXXP listener authenticate itself.

3.6 Traffic Analysis

   Hop-by-hop protection of data transmitted through the relaying mesh
   (endpoint identities and content) is afforded at the BXXP level
   through the use of a transport security profile. Other traffic
   characteristics, e.g., volume and timing of transmissions, is not
   protected from third-party analysis.





































Rose, et. al.          Expires December 10, 2000               [Page 10]

Internet-Draft                  The IMXP                       June 2000


4. The IMXP

   Section 10 contains the BXXP profile registration for IMXP.

4.1 Use of XML and MIME

   Each BXXP payload exchanged via IMXP consists of an XML document and
   possibly an arbitrary MIME content.

   If only an XML document is sent, then the BXXP payload defaults
   ("Content-Type: text/xml" and "Content-Transfer-Encoding: binary")
   are used, e.g.,

       C: REQ . 1 0 27 1
       C:
       C: <terminate transID='1' />
       C: END

   Otherwise, if an arbitrary MIME content is present, it is indicated
   by a URI-reference[5] in the XML control document. The URI-reference
   may contain an absolute-URI (and possibly a fragment-identifier), or
   it may be a relative-URI consisting only of a fragment-identifier.
   Arbitrary MIME content is included in the BXXP payload by using a
   "multipart/related"[6], identified using a "cid" URL[7], and the XML
   control document occurs as the start of the "multipart/related",
   e.g.,

       C: REQ . 1 0 1234 1
       C: Content-Type: multipart/related; boundary="boundary";
       C:               start="<1@example.com>";
       C:               type="text/xml"
       C:
       C: --boundary
       C: Content-Type: text/xml
       C: Content-ID: <1@example.com>
       C:
       C: <data originator='fred@example.com'
       C:       content='cid:2@example.com'>
       C:     <recipient identity='barney@example.com' />
       C: </data>
       C: --boundary
       C: Content-Type: image/gif
       C: Content-Transfer-Encoding: binary
       C: Content-ID: <2@example.com>
       C:
       C: ...
       C: --boundary--
       C: END



Rose, et. al.          Expires December 10, 2000               [Page 11]

Internet-Draft                  The IMXP                       June 2000


   Because BXXP provides an 8bit-wide path, a "transformative"
   Content-Transfer-Encoding (e.g., "base64" or "quoted-printable")
   should not be used. Further, note that MIME[8] requires that the
   value of the "Content-ID" header be globally unique.

   If the arbitrary MIME content is itself an XML document, it may be
   contained with the control document directly, and identified using a
   URI-reference consisting of only a fragment-identifier, e.g.,

       C: REQ . 1 0 259 1
       C:
       C: <data originator='fred@example.com' content='#Content'>
       C:     <recipient identity='barney@example.com' />
       C:     <data-content Name='Content'>
       C:         <statusResponse transID='86'>
       C:             <destination identity='barney@example.com'>
       C:                 <reply code='250' />
       C:             </destination>
       C:         <statusResponse>
       C:     </data-content>
       C: </data>






























Rose, et. al.          Expires December 10, 2000               [Page 12]

Internet-Draft                  The IMXP                       June 2000


4.2 Profile Identification and Initialization

   The IMXP is identified as

       http://xml.resource.org/profiles/IMXP

   in the BXXP "profile" element during channel creation.

   No elements are required to be exchanged during channel creation;
   however, in the endpoint-relay mode, the BXXP initiator will
   typically include an "attach" element during channel creation, e.g.,

       <start number='1'>
           <profile uri='http://xml.resource.org/profiles/IMXP'>
               <attach transID='1'>
                   <recipient identity='fred@example.com' />
               </attach>
           </profile>
       </start>

4.3 Request and Response Messages

   Section 13 defines the BXXP payloads that are used in the IMXP: 

   o  "REQ" messages carry either the "attach", "terminate", or "data"
      element as BXXP payload;

   o  positive "RSP" messages carry the "ok" element as BXXP payload;
      and,

   o  negative "RSP" messages carry the "error" element as BXXP payload.




















Rose, et. al.          Expires December 10, 2000               [Page 13]

Internet-Draft                  The IMXP                       June 2000


4.4 Message Semantics

4.4.1 The Attach Operation

   When an application wants to attach to the relaying mesh as a given
   endpoint, it sends an "attach" element to a relay, e.g.,

       +-------+                  +-------+
       |       | -- attach -----> |       |
       | appl. |                  | relay |
       |       | <--------- ok -- |       |
       +-------+                  +-------+

     C: <attach transID='1'>
     C:     <recipient identity='fred@example.com' />
     C: </attach>
     S: <ok />

   or

       +-------+                  +-------+
       |       | -- attach -----> |       |
       |       |                  |       |
       |       | <--------- ok -- |       |
       | appl. |                  | relay |
       |       | -- attach -----> |       |
       |       |                  |       |
       |       | <--------- ok -- |       |
       +-------+                  +-------+

     C: <attach transID='1'>
     C:     <recipient identity='fred@example.com' />
     C: </attach>
     S: <ok />
     C: <attach transID='2'>
     C:     <recipient identity='wilma@example.com' />
     C: </attach>
     S: <ok />













Rose, et. al.          Expires December 10, 2000               [Page 14]

Internet-Draft                  The IMXP                       June 2000


   or

       +-------+                  +-------+
       |       | -- attach -----> |       |
       | appl. |                  | relay |
       |       | <------ error -- |       |
       +-------+                  +-------+

     C: <attach transID='1'>
     C:     <recipient identity='fred@example.com' />
     C: </attach>
     S: <error code='537'>access denied</error>

   The "attach" element has a "transID" attribute, and contains a
   "recipient" element, which, in turn, has an "identity" attribute and
   contains zero or more "option" elements: 

   o  the "transID" attribute specifies the transaction-identifier
      associated with this operation;

   o  the "identity" attribute specifies the desired endpoint; and,

   o  the "option" elements, if any, specify additional processing
      options (Section 5).

   When a relay receives an "attach" element, it performs these steps: 

   1.  If the transaction-identifier refers to a previous attach
       operation on this BXXP channel (that has not yet been
       terminated), an "error" element having code 555 is returned.

   2.  If the relay is in a different administrative domain than this
       endpoint, an "error" element having code 553 is returned.

   3.  If the application is not authorized to attach as this endpoint,
       an "error" element having code 537 is returned.

   4.  If any options are present, they are examined.

   5.  If another application has already attached as this endpoint, an
       "error" element having code 554 is returned.

   6.  Otherwise, the application is bound as this endpoint, and an
       "ok" element is returned.







Rose, et. al.          Expires December 10, 2000               [Page 15]

Internet-Draft                  The IMXP                       June 2000


4.4.2 The Terminate Operation

   When an application or relay wants to detach an endpoint, it sends a
   "terminate" element, e.g.,

       +-------+                  +-------+
       |       | -- terminate --> |       |
       | appl. |                  | relay |
       |       | <--------- ok -- |       |
       +-------+                  +-------+

     C: <terminate transID='1' />
     S: <ok />

   or

       +-------+                  +-------+
       |       | -- terminate --> |       |
       | appl. |                  | relay |
       |       | <------ error -- |       |
       +-------+                  +-------+

     C: <terminate transID='13' />
     S: <error code='550'>unknown transaction-identifier</error>

   or

       +-------+                  +-------+
       |       | <-- terminate -- |       |
       | appl. |                  | relay |
       |       | -- ok ---------> |       |
       +-------+                  +-------+

     C: <terminate transID='1' />
     S: <ok />

   The "terminate" element has a "transID" attribute that specifies the
   transaction-identifier associated a previous attach operation, and
   has no content.

   When an application or relay receives a "terminate" element, it
   performs these steps: 

   1.  If the transaction-identifier does not refer to a previous
       attach operation on this BXXP channel (that has not yet been
       terminated), an "error" element having code 550 is returned.

   2.  Otherwise, the application is no longer bound as the
       corresponding endpoint, and an "ok" element is returned.


Rose, et. al.          Expires December 10, 2000               [Page 16]

Internet-Draft                  The IMXP                       June 2000


4.4.3 The Data Operation

   When an application or relay wants to transmit data over the
   relaying mesh, it sends a "data" element, e.g.,

       +-------+                  +-------+
       |       | -- data -------> |       |
       | appl. |                  | relay |
       |   #1  | <--------- ok -- |       |
       +-------+                  +-------+

     C: <data originator='fred@example.com' content='cid:1@example.com'>
            <recipient identity='barney@example.com' />
        </data>
     S: <ok />

   or

       +-------+                  +-------+
       |       | -- data -------> |       |
       | appl. |                  | relay |
       |   #1  | <------ error -- |       |
       +-------+                  +-------+

     C: <data originator='fred@example.com' content='cid:1@example.com'>
            <recipient identity='barney@example.com' />
        </data>
     S: <error code='450'>barney@example.com not attached</error>

   or

                                  +-------+                  +-------+
                                  |       | -- data -------> |       |
                                  | relay |                  | appl. |
                                  |       | <--------- ok -- |   #2  |
                                  +-------+                  +-------+

     C: <data originator='fred@example.com' content='cid:1@example.com'>
            <recipient identity='barney@example.com' />
        </data>
     S: <ok />










Rose, et. al.          Expires December 10, 2000               [Page 17]

Internet-Draft                  The IMXP                       June 2000


   The "data" element has an "originator" and a "content" attribute,
   and contains one or more "recipient" elements, zero or more "option"
   elements, and, optionally, a "data-content" element: 

   o  the "originator" attribute specifies the endpoint sending the
      data;

   o  the "content" attribute is a URI-reference that specifies the
      contents of the data (c.f., Section 4.1);

   o  each "recipient" element refers to an endpoint destination for
      the data;

   o  the "option" elements, if any, specify additional processing
      options (Section 5), termed per-data options; and,

   o  the "data-content" element, if present, specifies a nested XML
      entity using a URI fragment-identifier as the value of the
      "content" attribute.

   Each "recipient" element has an "identity" attribute, and contains
   zero or more option elements: 

   o  the "identity" attribute specifies the destination endpoint; and

   o  the "option" elements, if any, specify additional processing
      options for this recipient, termed per-recipient options.
























Rose, et. al.          Expires December 10, 2000               [Page 18]

Internet-Draft                  The IMXP                       June 2000


4.4.3.1 Relay Processing of Data

   When a relay receives a "data" element, it performs these steps: 

   1.  If the BXXP client is not authorized to originate or relay data
       on behalf of the "originator" endpoint, an "error" element
       having code 537 is returned.

   2.  If any per-data options are present, they are examined.

   3.  For each recipient: 

       1.  If any per-recipient options are present, they are examined.

       2.  If the recipient endpoint is not in the administrative
           domain associated with the relay, then an IMXP session is
           established to a relay that accepts data for the recipient's
           administrative domain, and a new "data" element, containing
           only that "recipient" element (and all applicable options),
           is sent to that relay. 

           If no errors (e.g., an IMXP session can not be established)
           occur during processing, and if the recipient's relay
           returns an "ok" element, then the recipient is considered to
           be successfully processed.

       3.  Otherwise, the IMXP access service must allow the originator
           endpoint to communicate with the recipient endpoint (the
           recipient's access entry[9] must contain a "core:data" token
           for the originator), and the recipient endpoint must be
           currently attached. 

           If so, a new "data" element, containing only that
           "recipient" element (and no options), is sent to the
           corresponding application, and the recipient is considered
           to be successfully processed.

   4.  If no recipients could be successfully processed, an "error"
       element is returned; otherwise, an "ok" element is returned.

   Note that an implementation may choose to optimize its behavior by
   grouping multiple recipients in a single "data" element that is
   subsequently transmitted. It may do so providing that the
   optimization retains these semantics and any other semantics related
   to per-data and per-recipient options.

   Finally, note that a relay receiving a "data" element from an
   application may be configured to add domain-specific options.



Rose, et. al.          Expires December 10, 2000               [Page 19]

Internet-Draft                  The IMXP                       June 2000


4.4.3.2 Application Processing of Data

   When an application receives a "data" element, it performs these
   steps: 

   1.  For each recipient: 

       1.  If the application is not attached as the recipient
           endpoint, then an error in processing has occurred.

       2.  Otherwise, the "data" element is further processed in an
           application-specific manner, and the recipient is considered
           to be successfully processed.

   2.  If no recipients could be successfully processed, an "error"
       element is returned; otherwise, an "ok" element is returned.



































Rose, et. al.          Expires December 10, 2000               [Page 20]

Internet-Draft                  The IMXP                       June 2000


4.5 IMXP Access Policies

   Access to IMXP is provided by the juxtaposition of: 

   o  authenticating as a BXXP peer;

   o  attaching as an IMXP endpoint; and,

   o  being listed as an actor by the IMXP access service (c.f., [9]).

   Each of these activities occurs according to the policies of the
   relevant administrative domain: 

   o  each administrative domain is responsible for keeping its own
      house in order through "local provisioning"; and,

   o  each administrative domain decides the level of trust to
      associate with other administrative domains.

































Rose, et. al.          Expires December 10, 2000               [Page 21]

Internet-Draft                  The IMXP                       June 2000


   IMXP access policies are used in these contexts: 

   o  In the endpoint-relay mode, when an application wishes to attach
      to the relaying mesh, local provisioning maps BXXP peer
      identities to allowed IMXP endpoints (c.f., Step 3 of Section
      4.4.1). 

      Typically, the identity function is used, e.g., if an application
      authenticates itself as the BXXP peer named as
      "fred@example.com", it is allowed to attach as the IMXP endpoint
      named as "fred@example.com".

   o  In the endpoint-relay mode, when an application wishes to send
      data, local provisioning maps attached endpoints to allowed
      originators (c.f., Step 1 of Section 4.4.3.1). 

      Typically, the identity function is used, e.g., if an application
      attaches as the IMXP endpoint named as "fred@example.com", it is
      allowed to send data originating from the same IMXP endpoint.
      However, other policies are permissible, for example, the
      administrative domain may allow the application attached as the
      IMXP endpoint named as "wilma@example.com" to send data
      originating as either "wilma@example.com" or "fred@example.com".

   o  In the relay-relay mode, when a relay is sending data, no access
      policies, per se, are applied.

   o  In the relay-relay mode, when a relay is receiving data, local
      provisioning maps BXXP peer identities to allowed originators
      (c.f., Step 1 of Section 4.4.3.1). 

      Typically, if a BXXP peer authenticates itself as being from the
      same administrative domain as the originator of the data, or if
      the BXXP peer authenticates itself as being from a "trusted"
      intermediate relay, then the data is accepted.

   o  Finally, when a relay is delivering to an endpoint within its own
      administrative domain, it consults the recipient's access entry
      looking for an entry having the originator as an actor (c.f.,
      Step 3.3 of Section 4.4.3.1).











Rose, et. al.          Expires December 10, 2000               [Page 22]

Internet-Draft                  The IMXP                       June 2000


5. IMXP Options

   IMXP, at its core, provides a best-effort datagram service. Options
   are used to alter the semantics of the core service.

   The semantics of the IMXP "option" element are context-specific.
   Accordingly, the specification of an IMXP option must define: 

   o  the identity of the option;

   o  the context in which the option may appear;

   o  what content, if any, is contained within the option; and,

   o  the processing rules for the option.

   An option registration template (Section 8) organizes this
   information.

   An "option" element is contained within either a "data" element or a
   "recipient" element, either of which is termed the "containing
   element". The "option" element has several attributes and contains
   arbitrary content: 

   o  the "internal" and the "external" attributes, exactly one of
      which is present, uniquely identify the option;

   o  the "targetHop" attribute specifies which relays should process
      the option;

   o  the "seeNoEvil" attribute specifies whether the option, if
      unrecognized, may be safely ignored;

   o  the "transID" attribute specifies a transaction-identifier for
      the option; and,

   o  the "localize" attribute, if present, specifies one or more
      language tokens, each identifying a desirable language tag to be
      used if textual diagnostics are returned to the originator.

   The value of the "internal" attribute is the IANA-registered name
   for the option. If the "internal" attribute is not present, then the
   value of the "external" attribute is a URI or URI with a
   fragment-identifier. Note that a relative-URI value is not allowed.







Rose, et. al.          Expires December 10, 2000               [Page 23]

Internet-Draft                  The IMXP                       June 2000


   The "targetHop" attribute specifies which relay(s) should process
   the option: 

      this: the option applies to this relay, and must be removed prior
      to transmitting the containing element.

      final: the option applies to this relay, only if the relay will
      not transmit the containing element to another relay.

      all: the option applies to this relay and is retained for the
      next.

   Note that in all cases, prior to transmitting the containing element
   to an endpoint, all options are removed.

   The "seeNoEvil" attribute specifies whether the relay may ignore the
   option if it is unrecognized, and is consulted only if the
   "targetHop" attribute indicates that the option applies to that
   relay. If the option applies, and if the value of the "seeNoEvil"
   attribute is "false", and if the relay does not "understand" the
   option, then this is considered a processing error.






























Rose, et. al.          Expires December 10, 2000               [Page 24]

Internet-Draft                  The IMXP                       June 2000


5.1 The statusRequest Option

   Section 11 contains the IMXP option registration for the
   "statusRequest" option.

   If this option is present, then each applicable relay sends a
   "statusResponse" message to the originator. This is done by issuing
   a data operation whose originator is the report service associated
   with the issuing relay, whose recipient is the endpoint address of
   the "statusRequest" originator, and whose content is a
   "statusResponse" element.

   A "statusRequest" option MUST NOT be present in any data operation
   containing a "statusResponse" element.





































Rose, et. al.          Expires December 10, 2000               [Page 25]

Internet-Draft                  The IMXP                       June 2000


   Consider these examples:

       +-------+                  +-------+
       |       | -- data -------> |       |
       | appl. |                  | relay |
       |   #1  | <--------- ok -- |       |
       +-------+                  +-------+

     C: <data originator='fred@example.com' content='cid:1@example.com'>
            <recipient identity='barney@example.com' />
            <option internal='statusRequest' targetHop='final'
                    seeNoEvil='false' transID='86' />
        </data>
     S: <ok />

                                  +-------+                  +-------+
                                  |       | -- data -------> |       |
                                  | relay |                  | appl. |
                                  |       | <--------- ok -- |   #2  |
                                  +-------+                  +-------+

     C: <data originator='fred@example.com' content='cid:1@example.com'>
            <recipient identity='barney@example.com' />
        </data>
     S: <ok />

       +-------+                  +-------+
       |       | <------- data -- |       |
       | appl. |                  | relay |
       |   #1  | -- ok ---------> |       |
       +-------+                  +-------+

     C: <data originator='imxp=report@example.com' content='#Content'>
            <recipient identity='fred@example.com' />
            <data-content Name='Content'>
                <statusResponse transID='86'>
                    <destination identity='barney@example.com'>
                        <reply code='250' />
                    </destination>
                <statusResponse>
            </data-content>
        </data>
     S: <ok />








Rose, et. al.          Expires December 10, 2000               [Page 26]

Internet-Draft                  The IMXP                       June 2000


   or

       +-------+                  +-------+
       |       | -- data -------> |       |
       | appl. |                  | relay |
       |       | <--------- ok -- |   #1  |
       +-------+                  +-------+

     C: <data originator='fred@example.com' content='cid:1@example.com'>
            <recipient identity='barney@rubble.com' />
            <option internal='statusRequest' targetHop='final'
                    seeNoEvil='false' transID='86' />
        </data>
     S: <ok />
                                  +-------+                  +-------+
                                  |       | -- data -------> |       |
                                  | relay |                  | relay |
                                  |   #1  | <------ error -- |   #2  |
                                  +-------+                  +-------+

     C: <data originator='fred@example.com' content='cid:1@example.com'>
            <recipient identity='barney@rubble.com' />
            <option internal='statusRequest' targetHop='final'
                    seeNoEvil='false' transID='86' />
        </data>
     S: <error code='550'>unknown endpoint identity</error>

       +-------+                  +-------+
       |       | <------- data -- |       |
       | appl. |                  | relay |
       |       | -- ok ---------> |   #1  |
       +-------+                  +-------+

     C: <data originator='imxp=report@example.com' content='#Content'>
            <recipient identity='fred@example.com' />
            <data-content Name='Content'>
                <statusResponse transID='86'>
                    <destination identity='barney@example.com'>
                        <reply code='550'>unknown endpoint
                                          identity</reply>
                    </destination>
                <statusResponse>
            </data-content>
        </data>
     S: <ok />






Rose, et. al.          Expires December 10, 2000               [Page 27]

Internet-Draft                  The IMXP                       June 2000


   or

       +-------+                  +-------+
       |       | -- data -------> |       |
       | appl. |                  | relay |
       |       | <--------- ok -- |   #1  |
       +-------+                  +-------+

     C: <data originator='fred@example.com' content='cid:1@example.com'>
            <recipient identity='barney@rubble.com' />
            <option internal='statusRequest' targetHop='final'
                    seeNoEvil='false' transID='86' />
        </data>
     S: <ok />
                                  +-------+                  +-------+
                                  |       | -- data -------> |       |
                                  | relay |                  | relay |
                                  |   #1  | <--------- ok -- |   #2  |
                                  +-------+                  +-------+

     C: <data originator='fred@example.com' content='cid:1@example.com'>
            <recipient identity='barney@rubble.com' />
            <option internal='statusRequest' targetHop='final'
                    seeNoEvil='false' transID='86' />
        </data>
     S: <ok />

                                  +-------+                  +-------+
                                  |       | <------- data -- |       |
                                  | relay |                  | relay |
                                  |   #1  | -- ok ---------> |   #2  |
                                  +-------+                  +-------+

     C: <data originator='imxp=report@rubble.com' content='#Content'>
             <recipient identity='fred@example.com' />
             <data-content Name='Content'>
                 <statusResponse transID='86'>
                 <destination identity='barney@rubble.com'>
                     <reply code='250' />
                 </destination>
                 <statusResponse>
             </data-content>
         </data>
     S: <ok />







Rose, et. al.          Expires December 10, 2000               [Page 28]

Internet-Draft                  The IMXP                       June 2000


       +-------+                  +-------+
       |       | -- data -------> |       |
       | appl. |                  | relay |
       |       | <--------- ok -- |   #1  |
       +-------+                  +-------+

     C: <data originator='imxp=report@rubble.com' content='#Content'>
            <recipient identity='fred@example.com' />
            <data-content Name='Content'>
                <statusResponse transID='86'>
                    <destination identity='barney@rubble.com'>
                        <reply code='250' />
                    </destination>
                <statusResponse>
            </data-content>
        </data>
     S: <ok />

   Note that a trace of a data's passage through the relaying mesh can
   be achieved by setting the "targetHop" attribute to "all".































Rose, et. al.          Expires December 10, 2000               [Page 29]

Internet-Draft                  The IMXP                       June 2000


6. IMXP Services

   IMXP, at its core, provides a best-effort datagram service. Errors
   are reported through the use of a co-resident IMXP report service.
   All other IMXP services are provided on top of the relaying mesh,
   e.g.,

      +----------+     +----------+    +----------+
      |   IMXP   |     |   IMXP   |    |          |
      |  access  |     | presence |    |   ...    |
      | service  |     | service  |    |          |
      +----------+     +----------+    +----------+
           |                |               |
           |                |               |
   +------------------------------------------------+---------+
   |                                                |  IMXP   |
   |                    IMXP core                   |  report |
   |                                                | service |
   +------------------------------------------------+---------+

   Applications communicate with IMXP services by sending data to a
   "well-known endpoint" (WKE).

   The specification of an IMXP service must define: 

   o  the WKE of the service;

   o  the syntax of messages exchanged with the service;

   o  the sequence of messages exchanged with the service; and,

   o  what access control tokens are consulted by the service.

   A service registration template (Section 9) organizes this
   information.

   Note that both the IMXP access[9] and presence[10] services are
   logically layered above the IMXP core; however, implementers may
   choose to physically co-reside these services with IMXP relay
   software.

   Finally, note that within a single administrative domain, the
   relaying mesh makes use of the IMXP access service in order to
   determine if an originator is allowed to transmit data to a
   recipient (c.f., Step 3.3 of Section 4.4.3.1) 






Rose, et. al.          Expires December 10, 2000               [Page 30]

Internet-Draft                  The IMXP                       June 2000


6.1 Use of the IMXP Core DTD

   The specification of an IMXP service may use definitions found in
   the IMXP core DTD (Section 13). For example, the reply operation
   (Section 6.1.2) is defined to provide a common format for responses.

6.1.1 Transaction-Identifiers

   In using IMXP's transaction-identifiers, note the following: 

   o  In the endpoint-relay mode, transaction-identifiers are
      meaningful only during the lifetime of a BXXP channel. 

      For example, when an application issues the attach operation, the
      associated transaction-identifier has meaning only within the
      context of the BXXP channel used for the attach operation. When
      the BXXP connection is released, the channel no longer exists and
      the application is no longer attached to the relaying mesh.

   o  In contrast, when an application communicates with an IMXP
      service, transaction-identifiers are often embedded in the data
      that is sent. This means that transaction-identifiers are
      potentially long-lived. 

      For example, an application may attach as an endpoint, send data
      (containing an embedded transaction-identifier) to a service,
      and, some time later, detach from the relaying mesh. Later on, a
      second application may attach as the same endpoint, and send data
      of its own (also containing embedded transaction-identifiers).
      Subsequently, the second application may receive data from the
      service responding to the first application's request and
      containing the transaction-identifier used by the first
      application.

   To minimize the likelihood of ambiguities with long-lived
   transaction-identifiers, the values of transaction-identifiers
   generated by applications should appear to be unpredictable.














Rose, et. al.          Expires December 10, 2000               [Page 31]

Internet-Draft                  The IMXP                       June 2000


6.1.2 The Reply Operation

   Many IMXP services make use of a reply operation. Accordingly,
   Section 13 contains a definition of a "reply" element that can be
   used for this purpose.

   The "reply" element has a "code" attribute, a "transID" attribute,
   an optional "xml:lang" attribute, and may contain arbitrary textual
   content: 

   o  the "code" element specifies a three-digit reply code (c.f.,
      Section 7);

   o  the "transID" attribute specifies the transaction-identifier
      corresponding to this reply;

   o  the "xml:lang" attribute, if present, specifies the language that
      the element's content is written in; and,

   o  the textual content is a diagnostic (possibly multiline) which is
      meaningful to implementers, perhaps administrators, and possibly
      even users.





























Rose, et. al.          Expires December 10, 2000               [Page 32]

Internet-Draft                  The IMXP                       June 2000


6.2 The Report Service

   Section 12 contains the IMXP service registration for the report
   service: 

   o  Within an administrative domain, the service is addressed using
      the well-known endpoint of "imxp=report".

   o  Section 14 defines the syntax of the operations exchanged with
      the service.

   o  A consumer of the service does not initiate communications with
      the service.

   o  The service initiates communications by sending data containing
      the "statusResponse" operation.

   Unlike other IMXP services, the report service is co-resident with
   the IMXP core -- the report service is provided by each and every
   relay.

   If a relay processes a "statusRequest" option (Section 5.1), then it
   sends data to the originator containing a "statusResponse" element
   (Section 14).

   The "statusResponse" element has a "transID" attribute and contains
   one or more "destination" elements: 

   o  the "transID" attribute specifies the value contained in the
      "statusRequest" option; and,

   o  each "destination" element has an "identity" attribute and
      contains a "reply" element: 

      *  the "identity" attribute specifies the recipient endpoint that
         is being reported on; and,

      *  the "reply" element (Section 6.1.2) specifies the delivery
         status of that recipient.












Rose, et. al.          Expires December 10, 2000               [Page 33]

Internet-Draft                  The IMXP                       June 2000


7. IMXP Reply Codes

   code    meaning
   ====    =======
   250     transaction successful

   421     service not available

   450     requested action not taken

   451     requested action aborted

   454     temporary authentication failure

   500     general syntax error (e.g., poorly-formed XML)

   501     syntax error in parameters (e.g., non-valid XML)

   504     parameter not implemented

   530     authentication required

   534     authentication mechanism insufficient

   535     authentication failure

   537     action not authorized for user

   538     authentication mechanism requires encryption

   550     requested action not taken

   553     parameter invalid

   554     transaction failed (e.g., policy violation)

   555     transaction already in progress














Rose, et. al.          Expires December 10, 2000               [Page 34]

Internet-Draft                  The IMXP                       June 2000


8. IMXP Option Registration Template

   When an IMXP option is registered, the following information is
   supplied: 

   Option Identification: specify the NMTOKEN or the URI that
      authoritatively identifies this option.

   Present in: specify the IMXP elements in which the option may appear.

   Contains: specify the XML content that is contained within the
      "option" element.

   Processing Rules: specify the processing rules associated with the
      option.




































Rose, et. al.          Expires December 10, 2000               [Page 35]

Internet-Draft                  The IMXP                       June 2000


9. IMXP Service Registration Template

   When an IMXP service is registered, the following information is
   supplied: 

   Well-Known Endpoint: specify the local-part of an endpoint identity,
      starting with "imxp=".

   Syntax of Messages Exchanged: specify the elements exchanged with
      the service.

   Sequence of Messages Exchanged: specify the order in which data is
      exchanged with the service.

   Access Control Tokens: specify the token(s) used to control access
      to the service (c.f., [9]).



































Rose, et. al.          Expires December 10, 2000               [Page 36]

Internet-Draft                  The IMXP                       June 2000


10. Registration: The IMXP Profile

   Profile Identification: http://xml.resource.org/profiles/IMXP

   Elements Exchanged during Channel Creation: none required

   Messages in "REQ" frames: "attach", "terminate", "data"

   Messages in positive "RSP" frames: "ok"

   Messages in negative "RSP" frames: "error"

   Message Syntax: c.f., Section 13

   Message Semantics: c.f., Section 4.4




































Rose, et. al.          Expires December 10, 2000               [Page 37]

Internet-Draft                  The IMXP                       June 2000


11. Registration: The statusRequest Option

   Option Identification: statusRequest

   Present in: IMXP's "data" and "recipient" elements

   Contains: nothing

   Processing Rules: c.f., Section 5.1










































Rose, et. al.          Expires December 10, 2000               [Page 38]

Internet-Draft                  The IMXP                       June 2000


12. Registration: The Report Service

   Well-Known Endpoint: imxp=report

   Syntax of Messages Exchanged: c.f., Section 14

   Sequence of Messages Exchanged: c.f., Section 6.2

   Access Control Tokens: none










































Rose, et. al.          Expires December 10, 2000               [Page 39]

Internet-Draft                  The IMXP                       June 2000


13. The IMXP Core DTD

   <!--
     DTD for the IMXP core, as of 2000-06-11


     Refer to this DTD as:

       <!ENTITY % IMXPCORE PUBLIC "-//Blocks//DTD IMXP CORE//EN"
                  "http://xml.resource.org/profiles/IMXP/imxp-core.dtd">
       %IMXPCORE;
     -->


   <!ENTITY % BXXP PUBLIC "-//Blocks//DTD BXXP//EN"
              "http://xml.resource.org/profiles/BXXP/bxxp.dtd">
   %BXXP;


   <!--
     DTD data types:

          entity        syntax/reference     example
          ======        ================     =======
       IMXP endpoint
          ENDPOINT      addr-spec,            fred@example.com
                        c.f., [RFC-0822]

       seconds
           SECONDS      0..2147483647        600

       timestamp
           TIMESTAMP    date-time,           14 May 2000 13:02:00 -0800
                        c.f., [RFC-1123]

       transaction-identifier
           TRANSID      1..2147483647        42
     -->

   <!ENTITY  % ENDPOINT  "CDATA">
   <!ENTITY  % SECONDS   "CDATA">
   <!ENTITY  % TIMESTAMP "CDATA">
   <!ENTITY  % TRANSID   "CDATA">








Rose, et. al.          Expires December 10, 2000               [Page 40]

Internet-Draft                  The IMXP                       June 2000


   <!--
     BXXP profile http://xml.resource.org/profiles/IMXP

        role           REQ                 RSP
       =======         ===                 ===
         I             attach              +: ok
                                           -: error

       I or L          terminate           +: ok
                                           -: error

       I or L          data                +: ok
                                           -: error
     -->


   <!ELEMENT attach      (recipient)>
   <!ATTLIST attach
             transID     %TRANSID;         #REQUIRED>


   <!ELEMENT terminate   EMPTY>
   <!ATTLIST terminate
             transID     %TRANSID;         #REQUIRED>


   <!ELEMENT data        (recipient+,option*,data-content?)>
   <!ATTLIST data
             originator  %ENDPOINT;        #REQUIRED
             content     %URI;             #REQUIRED>

   <!ELEMENT recipient   (option*)>
   <!ATTLIST recipient
             identity    %ENDPOINT;        #REQUIRED>

   <!ELEMENT data-content
                         ANY>
   <!ATTLIST Name        ID                #REQUIRED>

   <!ELEMENT ok          EMPTY>

   <!ELEMENT reply       (#PCDATA)*>
   <!ATTLIST reply
             code        %XYZ;             #REQUIRED
             transID     %TRANSID;         #REQUIRED
             xml:lang    %LANG;            #IMPLIED>





Rose, et. al.          Expires December 10, 2000               [Page 41]

Internet-Draft                  The IMXP                       June 2000


   <!-- either the "internal" or the "external" attribute is present in
        an option -->

   <!ELEMENT option      ANY>
   <!ATTLIST option
             internal    NMTOKEN           ""
             external    %URI;             ""
             targetHop   (this|final|all)  "final"
             seeNoEvil   (true|false)      "true"
             transID     %TRANSID;         #REQUIRED
             localize    %LOCS;            "i-default">








































Rose, et. al.          Expires December 10, 2000               [Page 42]

Internet-Draft                  The IMXP                       June 2000


14. The Report Service DTD

   <!--
     DTD for the IMXP report service, as of 2000-06-11


     Refer to this DTD as:

       <!ENTITY % IMXPREPORT PUBLIC "-//Blocks//DTD IMXP REPORT//EN"
                "http://xml.resource.org/profiles/IMXP/imxp-report.dtd">
       %IMXPREPORT;
     -->


   <!ENTITY % IMXPCORE PUBLIC "-//Blocks//DTD IMXP CORE//EN"
              "http://xml.resource.org/profiles/IMXP/imxp-core.dtd">
   %IMXPCORE;


   <!--
     Synopsis of the IMXP report service

       service WKE: imxp=report

       message exchanges:

           service initiates    consumer replies
           =================    ================
           statusResponse       (nothing)

       access control tokens: none
     -->


   <!ELEMENT statusResponse
                         (destination+)>
   <!ATTLIST statusResponse
             transID     %TRANSID;         #REQUIRED>

   <!ELEMENT destination (reply)>
   <!ATTLIST destination
             identity    %ENDPOINT;        #REQUIRED>









Rose, et. al.          Expires December 10, 2000               [Page 43]

Internet-Draft                  The IMXP                       June 2000


15. Security Considerations

   Consult Section 3 and Section 4.5 for a discussion of security
   issues, e.g., routing integrity. In addition, since IMXP is a
   profile of the BXXP, consult [1]'s Section 8 for a discussion of
   BXXP-specific security issues.

   In addition, the statusRequest option (Section 5.1) may be used to
   expose private network topology. Accordingly, administrators may
   wish to choose to disable this option except at the ingress/egress
   points for their domain.








































Rose, et. al.          Expires December 10, 2000               [Page 44]

Internet-Draft                  The IMXP                       June 2000


16. IANA Considerations

   The IANA assigns the "im" URL scheme to identify IMXP endpoints.

   The IANA maintains a list of: 

   o  IMXP options, c.f., Section 5 and Section 8; and,

   o  IMXP services, c.f., Section 6 and Section 9.










































Rose, et. al.          Expires December 10, 2000               [Page 45]

Internet-Draft                  The IMXP                       June 2000


References

   [1]   Rose, M.T., "The Blocks eXtensible eXchange Protocol
         Framework", draft-mrose-blocks-protocol-03 (work in progress),
         May 2000.

   [2]   Crocker, D., "Standard for the format of ARPA Internet text
         messages", RFC 822, STD 11, Aug 1982.

   [3]   Allocchio, C., "Minimal PSTN address format in Internet Mail",
         RFC 2303, March 1998.

   [4]   Gulbrandsen, A., Vixie, P. and L. Esibov, "A DNS RR for
         specifying the location of services (DNS SRV)", RFC 2782,
         February 2000.

   [5]   Berners-Lee, T., Fielding, R.T. and L. Masinter, "Uniform
         Resource Identifiers (URI): Generic Syntax", RFC 2396, August
         1998.

   [6]   Levinson, E., "The MIME Multipart/Related Content-type", RFC
         2387, August 1998.

   [7]   Levinson, E., "Content-ID and Message-ID Uniform Resource
         Locators", RFC 2392, August 1998.

   [8]   Freed, N. and N. Borenstein, "Multipurpose Internet Mail
         Extensions (MIME) Part One: Format of Internet Message
         Bodies", RFC 2045, November 1996.

   [9]   Rose, M.T., Klyne, G. and D.H. Crocker, "The IMXP Access
         Service", draft-mrose-imxp-access-00 (work in progress), June
         2000.

   [10]  Rose, M.T., Klyne, G. and D.H. Crocker, "The IMXP Presence
         Service", draft-mrose-imxp-presence-00 (work in progress),
         June 2000.

   [11]  mailto:dnew@san.rr.com

   [12]  mailto:spead@novell.com










Rose, et. al.          Expires December 10, 2000               [Page 46]

Internet-Draft                  The IMXP                       June 2000


Authors' Addresses

   Marshall T. Rose
   Invisible Worlds, Inc.
   1179 North McDowell Boulevard
   Petaluma, CA  94954-6559
   US

   Phone: +1 707 789 3700
   EMail: mrose@invisible.net
   URI:   http://invisible.net/


   Graham Klyne
   Content Technologies Limited
   1220 Parkview
   Arlington Business Park
   Theale, Reading  RG7 4SA
   UK

   Phone: +44 118 930 1300
   EMail: gk@acm.org


   David H. Crocker
   Brandenburg Consulting
   675 Spruce Drive
   Sunnyvale, CA  94086
   US

   Phone: +1 408 246 8253
   EMail: dcrocker@brandenburg.com
   URI:   http://www.brandenburg.com/


















Rose, et. al.          Expires December 10, 2000               [Page 47]

Internet-Draft                  The IMXP                       June 2000


Appendix A. Acknowledgements

   The authors gratefully acknowledge the contributions of: Darren
   New[11] and Scott Pead[12].















































Rose, et. al.          Expires December 10, 2000               [Page 48]

Internet-Draft                  The IMXP                       June 2000


Full Copyright Statement

   Copyright (C) The Internet Society (2000). All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph
   are included on all such copies and derivative works. However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Acknowledgement

   Funding for the RFC editor function is currently provided by the
   Internet Society.



















Rose, et. al.          Expires December 10, 2000               [Page 49]

