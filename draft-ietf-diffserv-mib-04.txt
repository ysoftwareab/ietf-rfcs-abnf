






Internet Engineering Task Force                                 F. Baker
Diffserv Working Group                                     Cisco Systems
INTERNET-DRAFT                                                   K. Chan
Expires January 2001                                     Nortel Networks
draft-ietf-diffserv-mib-04.txt                                  A. Smith
                                                                <editor>
                                                               July 2000
                  Management Information Base for the
                  Differentiated Services Architecture


Status of this Memo

This document is an Internet-Draft and is in full conformance with all
provisions of Section 10 of RFC 2026. Internet-Drafts are working
documents of the Internet Engineering Task Force (IETF), its areas, and
its working groups. Note that other groups may also distribute working
documents as Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six months
and may be updated, replaced, or obsoleted by other documents at any
time. It is inappropriate to use Internet Drafts as reference material
or to cite them other than as "work in progress."

The list of current Internet-Drafts can be accessed at
http://www.ietf.org/ietf/1id-abstracts.txt.  The list of Internet-Draft
Shadow Directories can be accessed at http://www.ietf.org/shadow.html.

This document is a product of the IETF's Differentiated Services Working
Group. Comments should be addressed to WG's mailing list at
diffserv@ietf.org. The charter for Differentiated Services may be found
at http://www.ietf.org/html.charters/diffserv-charter.html

Copyright (C) The Internet Society (2000). All Rights Reserved.
Distribution of this memo is unlimited.


Abstract

This memo describes a SMIv2 MIB for a device implementing the
Differentiated Services Architecture [DSARCH], described in detail by
the Differentiated Services Router Informal Management Model [MODEL].










Baker, Chan, Smith        Expires January 2001          [Page 1]

Internet Draft         Differentiated Services MIB             July 2000


1.  The SNMP Management Framework

The SNMP Management Framework presently consists of five major
components:

    o   An overall architecture, described in RFC 2571 [1].

    o   Mechanisms for describing and naming objects and events for the
        purpose of management. The first version of this Structure of
        Management Information (SMI) is called SMIv1 and described in
        RFC 1155 [2], RFC 1212 [3] and RFC 1215 [4]. The second version,
        called SMIv2, is described in RFC 2578 [5], RFC 2579 [6] and RFC
        2580 [7].

    o   Message protocols for transferring management information. The
        first version of the SNMP message protocol is called SNMPv1 and
        described in RFC 1157 [8]. A second version of the SNMP message
        protocol, which is not an Internet standards track protocol, is
        called SNMPv2c and described in RFC 1901 [9] and RFC 1906 [10].
        The third version of the message protocol is called SNMPv3 and
        described in RFC 1906 [10], RFC 2572 [11] and RFC 2574 [12].

    o   Protocol operations for accessing management information. The
        first set of protocol operations and associated PDU formats is
        described in RFC 1157 [8]. A second set of protocol operations
        and associated PDU formats is described in RFC 1905 [13].

    o   A set of fundamental applications described in RFC 2573 [14] and
        the view-based access control mechanism described in RFC 2575
        [15].

A more detailed introduction to the current SNMP Management Framework
can be found in RFC 2570 [16].

Managed objects are accessed via a virtual information store, termed the
Management Information Base or MIB. Objects in the MIB are defined using
the mechanisms defined in the SMI.

This memo specifies a MIB module that is compliant to the SMIv2. A MIB
conforming to the SMIv1 can be produced through the appropriate
translations. The resulting translated MIB must be semantically
equivalent, except where objects or events are omitted because no
translation is possible (use of Counter64). Some machine-readable
information in SMIv2 will be converted into textual descriptions in
SMIv1 during the translation process. However, this loss of machine
readable information is not considered to change the semantics of the
MIB.





Baker, Chan, Smith        Expires January 2001          [Page 2]

Internet Draft         Differentiated Services MIB             July 2000


2.  Introduction

2.1.  Relationship to the Diffserv Informal Management Model

This MIB is designed according to the Differentiated Services Informal
Management Model documented in [MODEL]. The model describes the way that
ingress and egress interfaces of an 'n'-port router are modelled. It
describes the configuration and management of a Diffserv interface in
terms of a Transmission Control Block (TCB) which contains, by
definition, zero or more classifiers, meters, actions, algorithmic
droppers, queues and schedulers. These elements are arranged according
to the QoS policy being expressed, always in that order. Traffic may be
classified; classified traffic may be metered; each stream of traffic
identified by a combination of classifiers and meters may have some set
of actions performed on it; it may have dropping algorithms applied and
it may ultimately be stored into a queue before being scheduled out to
its next destination, either onto a link or to another TCB. When the
treatment for a given packet must have any of those elements repeated in
a way that breaks the permitted sequence {classifier, meter, action,
algorithmic dropper, queue, scheduler}, this must be modelled by
cascading multiple TCBs.

The MIB represents this cascade by following the "Next" attributes of
the various elements. They indicate what the next step in Diffserv
processing will be, whether it be a classifier, meter, action,
algorithmic dropper, queue, scheduler or a decision to now forward a
packet.

The MIB models the individual elements that make up the TCBs - it only
refers in passing to the higher-level concept of a TCB when it is
necessary to distinguish of which TCB, of several, a particular element
is a part.  Literal TCBs are enumerated for Classifier elements: this is
necessary to distinguish different, but overlapping, classification
policies in different TCBs. However, TCBs are not enumerated for other
elements. When a TCB performs no classification the literal TCB of the
succeeding elements is not used in their instance (index) as there is no
need to distinguish them - each element is unique already.

2.2.  Relationship to other MIBs and Policy Management

This MIB provides for direct reporting and manipulation of the most
detailed functional elements described by the Diffserv Informal
Management Model for management.  These elements are instantiated in a
very detailed manner, typically indexed by interface, direction and
other indices. The concept of "interface" is as for the
InterfaceIndex/ifIndex of the IETF Interfaces MIB [IFMIB].






Baker, Chan, Smith        Expires January 2001          [Page 3]

Internet Draft         Differentiated Services MIB             July 2000


Other MIBs and data structure definitions for policy management
mechanisms other than SNMP/SMIv2 are likely to exist in the future for
the purposes of abstracting the model in other ways.

In particular, abstractions in the direction of less detailed
definitions of Diffserv functionality are likely e.g. some form of "Per-
Hop Behaviour"-based definition involving a template of detailed object
values which is applied to specific instances of objects in this MIB
semi-automatically.

Another possible direction of abstraction is one using a concept of
"roles" (often, but not always, applied to interfaces). In this case, it
may be possible to re-use the object definitions in this MIB but with
different indexing variables e.g. by mechanically replacing ifIndex by
some sort of "roleIndex". Work is ongoing in this area.

2.3.  MIB Overview

In this MIB, we model the ingress and egress portions of a router
identically, making the distinction between them an index variable.
Each interface then performs some or all of the following high-level
functions:

o    Classify each packet according to some set of rules

o    Determine whether the data stream the packet is part of is within
     or outside its rate

o    Perform a set of resulting actions, possibly including counting the
     traffic, application of an appropriate drop policy and marking of
     the traffic with a Differentiated Services Code Point (DSCP) as
     defined in [DSFIELD].

o    Enqueue the traffic for output in the appropriate queue, whose
     scheduler may shape the traffic or simply forward it with some
     minimum rate or maximum latency.

The MIB therefore contains the following elements:

Classifier and Filter Tables
     A general extensible framework and one example (an IP Six-Tuple
     Multi-Field Classification Table).

Meter Tables
     A general extensible framework and one example (an exponential
     weighted moving average meter).






Baker, Chan, Smith        Expires January 2001          [Page 4]

Internet Draft         Differentiated Services MIB             July 2000


Action Tables
     Absolute Drop, Mark and Count actions. The "multiplexer",
     "replicator" and "null" actions described in [MODEL] are
     accomplished implicitly by means of the RowPointer structures of
     the other elements.

Queue, Scheduler and Algorithmic Dropper Tables
     Queue, Scheduler and Algorithmic Dropper Tables.

3.  Structure of this MIB

3.1.  Classifiers

The classifier and filter tables determine how traffic is sorted out.
They identify separable classes of traffic, by reference to an
appropriate filter, which may select anything from an individual micro-
flow to aggregates identified by DSCP.

The classification is used to send these separate streams to appropriate
Meter, Action, Queue, Scheduler and Algorithmic Dropper elements.  For
example, to indicate a multi-stage meter, sub-classes of traffic may be
sent to different meter stages: e.g. in an implementation of the Assured
Forwarding (AF) PHB [AF-PHB], AF11 traffic might be sent to the first
meter, AF12 traffic might be sent to the second and AF13 traffic sent to
the second meter stage's out-of-profile action.

3.1.1.  Classifier Table

The structure of the classifier table, as described in [MODEL], is a
sequence of unambiguous tests. Within each stage in the sequence, it
must not be important in which order the tests are made. This is to
facilitate optimized implementations such as index trees. Order is
present only to resolve ambiguity: for that reason the stage in the
sequence is referred to here and in [MODEL] as the "precedence" of the
classifier stage: stages with higher values of precedence are compared
first; the order of tests for entries of the same precedence is
unimportant.

An important form of classifier is "everything else": the final stage of
the classifier i.e. the one with the lowest precedence, must be
"complete" since the result of an incomplete classifier is not
necessarily deterministic - see [MODEL] section 4.1.2.

The definition of the actual filter to be used by the classifier is
referenced via a RowPointer: this enables the use of any sort of filter
table that one might wish to design, standard or proprietary. The filter
table may be, but does not need to be, defined in this MIB module.





Baker, Chan, Smith        Expires January 2001          [Page 5]

Internet Draft         Differentiated Services MIB             July 2000


The classifiers specified here are at the interface level i.e. they are
indexed by ifIndex: they may be derived from some more general policies
e.g. something based on interface roles, but such discussion is outside
the scope of this document. See e.g. [POLTERM] section 4 for a
discussion of Roles.

3.1.2.  IP Six-Tuple Classifier Table

This MIB includes a definition for an IP Six-Tuple Classifier, used for
IP traffic classification. Entries in this filter table are referenced
from the RowPointer diffServClassifierPattern attributes of classifier
table entries.

A Behavior Aggregate (BA) Classifier, acting only on DSCPs, is a simple
form of the IP Six-Tuple Classifier. It is represented by having the
diffServSixTupleClfrDscp attribute set to the desired DSCP and all other
classification attributes set to match-all, their default settings. The
alternative approach of providing a specific definition in this MIB for
a BA Classifier was discussed and rejected.

Each entry in the IP Six-Tuple Classifier Table defines a single filter.
The textual convention of InetAddress [INETADDR] is used for both IPv4
and IPv6 addressing.  The use of IP Six-Tuple Classifiers is discussed
in [DSARCH] and abstract examples of how they might be configured are
provided in [MODEL].

3.2.  Meters

A meter, according to [MODEL] section 5, measures the rate at which
packets making up a stream of traffic pass it, compares this rate to
some set of thresholds and produces some number (two or more) of
potential results. A given packet is said to "conform" to the meter if,
at the time that the packet is being looked at, the stream appears to be
within the meter's profile. MIB syntax makes it easiest to define this
as a sequence of one or more cascaded pass/fail tests, modeled here as
if-then-else constructs.  It is important to understand that this way of
modelling does not imply anything about the implementation being
"sequential": multi-rate/multi-profile meters e.g. those designed to
support [SRTCM] or [TRTCM], can still be modelled this way even if they,
of necessity, share information between the stages: the stages are
introduced merely as a notational convenience in order to simplify the
MIB structure.

3.2.1.  Meter Table

The generic meter table is used as a base for all more specific forms of
meter.  The definition of parameters specific to the type of meter used





Baker, Chan, Smith        Expires January 2001          [Page 6]

Internet Draft         Differentiated Services MIB             July 2000


is referenced via a pointer to a table containing those specifics with
the instance within that table identified by the same indices as for the
base meter table.  This enables the use of any sort of specific meter
table that one might wish to design, standard or proprietary. The
specific meter table may be, but does not need to be, defined in this
MIB module.

3.2.2.  Token-Bucket Meter Table

This is included as an example of a common type of meter.  Entries in
this table are referenced from the RowPointer diffServMeterSpecific
attributes of meter table entries.  The parameters are represented by a
rate diffServTBMeterRate and a burst size diffServTBMeterBurstSize.


3.3.  Actions

Actions include "no action", "mark the traffic with a DSCP", "drop the
traffic" or "count it". Other tasks such as "shape the traffic" or "drop
based on some algorithm" are handled elsewhere as queueing mechanisms,
rather than actions, consistent with [MODEL].  The "multiplexer",
"replicator" and "null" actions described in [MODEL] are accomplished
implicitly by means of the RowPointer structures of the other elements.

This MIB uses the Action Table diffServActionTable to organize one
Action's relationship with the element(s) before and after it. It allows
Actions to be cascaded to enable multiple Actions be applied to a single
traffic stream by using each entry's diffServActionNext attribute.  The
diffServActionNext attribute of the last action entry in the chain
points to the next element in the TCB, if any, e.g.  a Queueing element.
It may also point at a next TCB.

The parameters needed for each Action element will depend on the type of
Action to be taken. Hence there are specific Action Tables for all the
different Action types.  This flexibility allows additional Actions be
specified in future revisions of this MIB, or in other MIBs and also
allows for the use of proprietary Actions without impact on those
defined here.

3.3.1.  DSCP Mark Action Table

This Action is applied to traffic in order to mark it with a Diffserv
Codepoint (DSCP) value, specified in the diffServDscpMarkActTable.
Other marking actions might be specified elsewhere - these are outside
the scope of this MIB.







Baker, Chan, Smith        Expires January 2001          [Page 7]

Internet Draft         Differentiated Services MIB             July 2000


3.3.2.  Count Action Table

Count Actions are used to count the traffic passing along a particular
path through the model. If specified, they are likely to be placed
first, before other types of Action. For example, when both a Count and
an Absolute Dropper Action are specified, the Count Action needs to
count the traffic stream before any traffic gets dropped.  Note that
there are counters contained directly in Algorithmic Dropper elements to
indicate the amount of traffic dropped by those elements.

Counters are arranged in a single table but with separate conformance
statements for low-speed and high-speed interfaces, consistent with
[IFMIB].

3.3.3.  Absolute Drop Action

This action just silently discards all traffic presented to it, without
counting it. This action has no additional parameters and so is
represented only as a diffServActionSpecific pointing to
diffServAbsoluteDropAction without any specific parameters.

3.4.  Queueing Elements

These include Algorithmic Droppers, Queues and Schedulers which are all
inter-related in their use of queueing techniques.

3.4.1.  Algorithmic Dropper Table

Algorithmic Droppers have a close relationship with queueing: they are
represented in this MIB by entries in an Algorithmic Dropper Table.
Entries contain a diffServAlgDropNext attribute which indicates to which
queue they sink their traffic.

An Algorithmic Dropper is assumed to operate indiscriminately on all
packets that are presented at its input. If it is necessary to perform
additional classification on the stream then a separate TCB must be
introduced at this point: Classifier elements here can then distinguish
the different types of traffic on which dropping is to act and the
treatment for each type is described by a separate diffServAlgDropEntry.

Algorithmic Droppers may also contain a pointer to specific detail of
the drop algorithm. This MIB defines the detail for three drop
algorithms: Tail Drop, Head Drop and Random Drop; other algorithms are
outside the scope of this MIB modele but the general framework is
intended to allow for their inclusion via other MIB modules.







Baker, Chan, Smith        Expires January 2001          [Page 8]

Internet Draft         Differentiated Services MIB             July 2000


One generally-applicable parameter of a dropper is the specification of
a queue-depth threshold at which some drop action is to start. This is
represented in this MIB, as a base attribute of the Algorithmic Dropper
entry, by pointing to the queue for which depth is to be compared and
the depth threshold to compare against.

o    A Tail Dropper requires the specification of a maximum queue depth
     threshold: when the queue pointed at by diffServAlgDropQMeasure
     reaches that depth threshold, diffServAlgDropQThresh, any new
     traffic arriving at the dropper is discarded. This algorithm uses
     only parameters that are part of the diffServAlgDropEntry.

o    A Head Dropper requires the specification of a maximum queue depth
     threshold: when the queue pointed at by diffServAlgDropQMeasure
     reaches that depth threshold, diffServAlgDropQThresh, traffic
     currently at the head of the queue is discarded. This algorithm
     uses only parameters that are part of the diffServAlgDropEntry.

o    Random Droppers are recommended as a way to control congestion, in
     [QUEUEMGMT] and called for in the [AF-PHB]. Various implementations
     exist, which agree on marking or dropping just enough traffic to
     communicate with TCP-like protocols about congestion avoidance, but
     differ markedly on their specific parameters. This MIB attempts to
     offer a minimal set of controls for any random dropper, but expects
     that vendors will augment the table with additional controls and
     status in accordance with their implementation. This algorithm
     requires additional parameters on top of those in
     diffServAlgDropEntry: these are discussed below.

3.4.2.  Random Dropper Table

One example of a random dropper is a RED-like dropper.  An example of
the representation chosen in this MIB for this element is shown in
Figure 1.

Random droppers often have their drop probability function described as
a plot of drop probability (P) against averaged queue length (Q).
(Qmin,Pmin) then defines the start of the characteristic plot.  Normally
Pmin=0, meaning with average queue length below Qmin, there will be no
drops.  (Qmax,Pmax) defines a "knee" on the plot, after which point the
drop probability become more progressive (greater slope).  (Qclip,1)
defines the queue length at which all packets will be dropped. Notice
this is different from Tail Drop because this uses an averaged queue
length.  although it is possible for Qclip = Qmax. In the MIB module,
diffServRandomDropMinThreshBytes and diffServRandomDropMinThreshPkts
represent Qmin.  diffServRandomDropMaxThreshBytes and
diffServRandomDropMaxThreshPkts represent Qmax.





Baker, Chan, Smith        Expires January 2001          [Page 9]

Internet Draft         Differentiated Services MIB             July 2000




      +-------------+      +-----------+
  --->| Next   --------+-->| Next    ---------> to Scheduler
      | Thresh=100k |  |   | Min=none  |
      | Measure -------+   | Max=none  |
      | Type=random |      | Pri=10    |
      | Specif  -------+   | Type=fifo |
      +-------------+  |   +-----------+
        AlgDrop.3      |  Queue.ifIndex.4
                       |
                       |   +--------------+
                       +-->| Minthresh=10k|
                           | Maxthresh=80k|
                           | Weight=1/16  |
                           | ProbMax= 0.5 |
                           +--------------+
                            RandomDrop.3

  Figure 1: Example Use of the RandomDropTable for Random Droppers

diffServRandomDropProbMax represents Pmax. This MIB does not represent
Pmin (assumed to be zero unless otherwise represented) or Qclip (assumed
to be Qmax unless otherwise represented).

Each random dropper specification is associated with a queue. This
allows multiple drop processes (of same or different types) be
associated with the same queue, as different PHB implementations may
require.  This also allows for sequences of multiple droppers if
necessary.

The calculation of a smoothed queue length may also have an important
bearing on the behaviour of the dropper: parameters may include the
sampling interval and the weight of each sample. The performance may be
very sensitive to the values of these parameters and a wide range of
possible values may be required due to a wide range of link speeds. Most
algorithms include a sample weight, represented here by
diffServRandomDropInvWeight. Note however that there is ongoing research
on this topic, see e.g. [ACTQMGMT].

Additional parameters may be added in an enterprise MIB module, e.g. by
using AUGMENTS on this table, to handle aspects of random drop
algorithms that are not standardised here.

NOTE: Deterministic Droppers can be viewed as a special case of Random
Droppers with the drop probability restricted to 0 and 1. Hence
Deterministic Droppers might be described by a Random Dropper with Pmin





Baker, Chan, Smith        Expires January 2001         [Page 10]

Internet Draft         Differentiated Services MIB             July 2000


= 0, Pmax = 1, Qmin = Qmax = Qclip, the averaged queue length at which
dropping occurs.

3.4.3.  Queues and Schedulers

The Queue Table models simple FIFO queues, as described in [MODEL]
section 7.1.1.  The Scheduler Table allows flexibility in constructing
both simple and somewhat more complex queueing hierarchies from those
queues.  Of course, since TCBs can be cascaded multiple times on an
interface, even more complex hierarchies can be constructed that way
also.

The entries in the Queue Table have attributes which include a
specification of the scheduler which services the queue. They are
pointed at by the "next" attributes of the upstream elements e.g.
diffServMeterSucceedNext.  Note that multiple upstream elements may
direct their traffic to the same Queue Table entry. For example, the
Assured Forwarding PHB suggests that all traffic marked AF11, AF12 or
AF13 be placed in the same queue, after metering, without reordering.
This would be represented by having the diffServMeterSucceedNext of each
upstream meter point at the same entry in the Queue Table.

The Scheduler Table represented in this MIB module contains entries,
each of which represents the algorithm in use for servicing the one or
more queues that feed it. The [MODEL] section 7.1.2 describes a
scheduler with multiple inputs: this is represented in the MIB by
including the scheduling parameters associated with a scheduler input in
the Queue Table entry that feeds it and having that point at one
particular Scheduler Table entry. In this way, sets of Queues can be
grouped together as inputs to the same Scheduler.  This table serves to
represent the example scheduler described in the [MODEL]: other more
complex representations might be created outside of this MIB.

Each scheduler input, as represented by a Queue Table entry, is assigned
a priority with respect to all the other inputs feeding the same
scheduler.  A higher-priority input will be serviced first over a lower-
priority input, assuming that all guarantees have already been met.
This priority parameter, used on its own with default values for the
other parameters, serves to allow representation of a Strict Priority
scheduler.

For Weighted Queueing algorithms e.g. WFQ, WRR, the "weight" of a given
scheduler input is represented with a Minimum Service Rate leaky-bucket
profile which provides guaranteed bandwidth to that input, if required.
This is represented, as were token-bucket meters, by a rate
diffServQueueMinRateAbs and a burst size diffServQueueMinBurstSize. The
rate may, alternatively, be represented by a relative value, as a





Baker, Chan, Smith        Expires January 2001         [Page 11]

Internet Draft         Differentiated Services MIB             July 2000


fraction of the interface's current line rate, diffServQueueMinRateRel
to assist in cases where line rates are variable or where a higher-level
policy might be expressed in terms of fractions of network resources.
The two rate parameters are inter-related and changes in one may be
reflected in the other.

An input may also be capable of acting as a non-work-conserving [MODEL]
traffic shaper: this is done by defining a Maximum Service Rate leaky-
bucket profile in order to limit the scheduler bandwidth available to
that input.  This is represented, similarly to the minimum rate, by a
rate diffServQueueMaxRateAbs and a burst size diffServQueueMaxBurstSize.
The rate may, alternatively, be represented by a relative value, as a
fraction of the interface's current line rate, diffServQueueMaxRateRel.

3.4.4.  Example of Algorithmic Droppers, Queues and Schedulers

As an example, the hypothetical queue/scheduler configuration shown in
[MODEL] section 8.1 is shown in Table 1.



Queues 1 and 3 are serviced for long enough to give them their promised
bandwidths and burst sizes, if they need them.  Queue 2 is then serviced
up to its maximum limit profile.  Only then does Queue 4 get an
opportunity to send its traffic.  As an example of the use of the MIB
structures, Figure 2 shows how the example would be represented.






  QId MinRate           MaxRate           Priority   Scheduler
  --- ----------------  ----------------  --------   ---------
  1   100kbps/20kbyte   none/none           20       Scheduler.1
  2   none/none         100kbps/100kbyte    40       Scheduler.1
  3   200kbps/20kbyte   none/none           20       Scheduler.1
  4   none/none         none/none           10       Scheduler.1

  SchedId   Type
  -------   ------------------
  1         weightedRoundRobin

      Table 1: Example Queue and Scheduler Parameters








Baker, Chan, Smith        Expires January 2001         [Page 12]

Internet Draft         Differentiated Services MIB             July 2000



                          +-----------+
  ----------------------->| Next    -----+
                          | Min=Profl4|  |
                          | Max=none  |  |
                          | Pri=20    |  |
                          | Type=fifo |  |
                          +-----------+  |
                         Queue.ifIndex.1 |
                                         |
      +-----------+       +-----------+  |
  --->| Next    -----+--->| Next   ------+
      | Thresh=1k |  |    | Min=none  |  |
      | Measure -----+    | Max=Profl5|  |
      | Type=Tail |       | Pri=40    |  |
      | Spec=none |       | Type=fifo |  |    +----------+
      +-----------+       +-----------+  +--->| Next   -----> 0.0
        Dropper.1        Queue.ifIndex.2 |    | Algrm=wrr|  or next TCB
                                         |    +----------+
      +-----------+       +-----------+  |   Scheduler.ifIndex.1
  --->| Next    -----+--->| Next    -----+
      | Thresh=2k |  |    | Min=Profl3|  |
      | Measure -----+    | Max=none  |  |
      | Type=Tail |       | Pri=20    |  |
      | Spec=none |       | Type=fifo |  |
      +-----------+       +-----------+  |
        Dropper.2        Queue.ifIndex.3 |
                                         |
      +-----------+       +-----------+  |
  --->| Next   ------+--->| Next    -----+
      | Thresh=4k |  |    | Min=none  |
      | Measure -----+    | Max=none  |
      | Type=Tail |       | Pri=10    |
      | Spec=none |       | Type=fifo |
      +-----------+       +-----------+
        Dropper.3        Queue.ifIndex.4

      Figure 2: Example of the use of Queueing elements

4.  Conventions used in this MIB

4.1.  The use of RowPointer

RowPointer is a textual convention used to identify a conceptual row in
an SNMP Table by pointing to one of its objects. In this MIB, it is used
in two ways: to indicate indirection and to indicate succession.






Baker, Chan, Smith        Expires January 2001         [Page 13]

Internet Draft         Differentiated Services MIB             July 2000


When used for indirection as in the diffServClassifierTable, the idea is
to allow other MIBs, including proprietary ones, to define new and
arcane classifiers - MAC headers, IPv4 and IPv6 headers, BGP Communities
and all sorts of other things - whilst still utilising the structures of
this MIB. This is a form of class inheritance (in "object oriented"
language): it allows base object definitions ("classes") to be extended
in proprietary or standard ways, in the future, by other documents.

When used for succession, it answers the question "what happens next?".
Rather than presume that the next table must be as specified in the
conceptual model [MODEL] and providing its index, the RowPointer takes
you to the MIB row representing that thing. In the diffServMeterTable,
for example, the diffServMeterFailNext RowPointer might take you to
another meter, while the diffServMeterSucceedNext RowPointer would take
you to an action.

     NOTE -- the RowPointer construct is used to build the TCBs
     described in [MODEL]: this MIB does not model TCBs directly - it
     operates at a lower level of abstraction using only individual
     elements, connected in succession by RowPointers. Therefore, the
     concept of TCBs enclosing individual functional datapath elements
     is not applicable to this MIB, although such a concept may be
     employed by management tools that use this MIB.

It is possible that a path through a device following a set of
RowPointers is indeterminate i.e. it ends in a dangling RowPointer (or
potentially does in the case of a Meter element) should be treated by
the agent as if it were operationally deactivated. For example, if an
Action element has a dangling diffServActionNext RowPointer that does
not point to an existent table entry (and is not zeroDotZero), then none
of the subsequent elements in that particular chain should have any
effect on the traffic proceeding down this chain and the Classification
or Meter element which lead to this Action element is not considered to
be active.  Other parts of the device configuration remain in effect, of
course, but this rule simply removes all ambiguity from the operational
system.

4.2.  Conceptual row creation and deletion

A number of conceptual tables defined in this MIB use as an index an
arbitrary integer value, unique across the scope of the agent. In order
to help with multi-manager row-creation problems, a mechanism must be
provided to allow a manager to obtain unique values for such an index
and to ensure that, when used, the manager knows whether it got what it
wanted or not.







Baker, Chan, Smith        Expires January 2001         [Page 14]

Internet Draft         Differentiated Services MIB             July 2000


Typically, such a table has an associated NextFree variable e.g.
diffServClassifierNextFree which provides a suitable value for the index
of the next row to be created e.g. diffServClassifierId. A special
value, 0, is used to indicate that no more entries can be created by the
agent. The table also has a columnar Status attribute with RowStatus
syntax [6].

If a manager attempts to create a conceptual row in the table (by a SET
operation that contains a varbind setting the Status to a value of
either createAndGo or createAndWait) and if the agent has sufficient
resources and has no other conceptual row with the same indices, the
agent will create the row and return success. If the agent has
insufficient resources or such a row is already existent then it returns
an error. A manager must be prepared to try again in such circumstances,
probably by re-reading the NextFree to obtain a new index value in case
a second manager had got in between the first manager's read of the
NextFree value and the first manager's row-creation attempt. The use of
RowStatus is covered in more detail in [6].


5.  Editorial information

<this section will be removed before publication>

5.1.  Open Issues resolved in previous drafts

(0)  Terminology is more in line with [MODEL], [POLTERM] and [DSTERM].
     Discarder -> "Algorithmic Dropper", "Monitor" -> "Counter"
     "Classifier element" -> "Filter"

(1)  Cascaded token-buckets is not equivalent to multi-rate token-
     bucket: do we need to fix this by allowing a multi-rate TB in the
     MIB? Or, by defining cascaded buckets to mean "multi-rate". (assume
     the latter - see text in 2.3)

(2)  Markers: model only describes DSCP-markers: do we need to be able
     to extend this to other sorts (e.g. 802.1p), even if we do not
     represent them in this MIB today? (yes). No MIB changes, just
     words.

(3)  Counters: should specific blocks include their own or is a "counter
     action", as described in the Model, sufficient to count all paths
     through a device? (as appropriate). Per-queue counters are
     derivable from "action" ones.  Per-classifier counters: may feed
     through from clasifiers to distinct counter actions.







Baker, Chan, Smith        Expires January 2001         [Page 15]

Internet Draft         Differentiated Services MIB             July 2000


(4)  Queue Sets: are these generally applicable? (no). The example in
     section 2.5.1 is hard to follow: we should describe this example in
     [MODEL] and then show how it maps to MIB in the MIB draft. - DONE

(5)  Do we need scheduling units of "packets"? (NO) Should we use "kbps"
     or just "bps" for rates? DONE - all rates are in kbps.

(6)  Are "absolute" rates sufficient or should we include "relative to
     line speed" ones as well? (yes) - DONE - explained that these are
     interrelated.

(7)  Scheduler weights vs. rates vs. priorities: this is confusing -
     suggest we stick to rates and priorities (see Model draft 7.1.2) -
     DONE.

(8)  Queue Measure table:

o    This allows for RIO - multiple averaging functions for the same
     queue: is this needed? OUT OF SCOPE.

o    mixes config with status objects - split these? N/A.

o    do we need floating-point representation for "weight"? N/A.

o    do we need MIB visibility for average queue depth? N/A.

o    do we need MIB-configurable averaging functions (sample
     weight/interval)?  (maybe just "sample weight") - NO: averaging
     functions will be left out although framework allows for their
     inclusion separately.

(9)  Counter compliance: paste text from IF-MIB re line-speeds. Do you
     still have to do the low-speed counters for fast interfaces? YES.
     DONE.

(10) Meters: are these mandatory for compliance? NO

(11) Discussion material: move most of this to Model draft e.g. most of
     3.1, 3.3, "Dropper/discarder" part of 3.4, nearly all of 3.5. Just
     leave the "how does the MIB map from the Model" parts in the MIB
     draft, no general discussion. DONE.

(12) Counters: merged in 32-bit and 64-bit counters - conformance
     statements sort out which ones must be implemented. This is
     consistent with [IFMIB]. DONE.







Baker, Chan, Smith        Expires January 2001         [Page 16]

Internet Draft         Differentiated Services MIB             July 2000


(13) Droppers: we used to have a common "dropper" table that represented
     all of: dropAlways, randomDrop, tailDrop with just some parameters
     valid for the simpler ones. A simpler representation is to define
     specific dropper tables for each type (e.g. a single OID to point
     at for dropAlways since it is always the last action in a chain)
     but this would mean a larger number of (simpler) MIB objects.
     CHANGES: dropAlways is still an Action but the others are moved to
     a diffServAlgDropTable. This table can handle tail/head/random drop
     - others by extension.

(14) Should TBMeterTable just AUGMENT the MeterTable, should it use same
     indices or are separate structures linked by RowPointers
     preferable? (same indices without RowPointer).

(15) Do we need to model multiple queues feeding back into a single
     dropper algorithm? (yes).  If so, the current single-queue pointer
     and threshold will not be adequate - should we leave them in? They
     will be useful for many, but not all, dropper algorithms. (yes)

(17) We have concepts of "inbound" and "outbound" directions: but if we
     have a series of multiple TCBs on a given interface for the same
     direction (allowed by the model) then we do not have a way to
     indicate "this is the 1st one". Moreover, it is a somewhat
     convoluted process to then find the 2nd, 3rd etc. ones - you would
     have to follow the RowPointers to get there: should we explicitly
     have an index to enable/help these lookup operations? Note: this is
     not the same issue as needing a "precedence" for each filter entry
     of a classifier (yes - added another index to classifiers to
     represent what TCB they operate at for a given
     interface/direction).

5.2.  Open Issues resolved in this draft

(13) Droppers: slight change to previous resolution. MIB can now handle
     tail/head/random drop using diffServAlgDropTable and
     diffServRandomDropTable.

(18) Should manager be allowed to create Queue elements or should agent
     be in control of this? (the former)

(19) Should manager be allowed to create Scheduler elements or should
     agent be in control of this? (the former)

(20) Related to (17) above, do we also need a "TCB index" for elements
     other than classifiers? (no)







Baker, Chan, Smith        Expires January 2001         [Page 17]

Internet Draft         Differentiated Services MIB             July 2000


(21) Do we need diffServAlgDropType of both "headDrop" and "tailDrop" or
     should we just represent the tail dropper by placing a dropper
     after the queue instead of before the queue, as linked by the
     diffServQNext and diffServAlgDropNext RowPointers? (the former -
     dropper is always in front of the queue in this model).

(22) Do we need to support RED algorithms for algorithm parameter
     configuration and monitoring?  If so, what variables are needed?
     (Added diffServRandomDropTable).

(24) diffServAlgDropQThreshold needs UNITS (Bytes).

(25) Dangling RowPointers: should we mandate that these are never
     permitted? Or just define the behaviour if they do dangle? (We
     define it such that elements that have dangling pointers, as well
     as upstream elements that point to them, are considered "not
     activated")

(26) Discontinuity times for MIB counters - is
     ifCounterDiscontinuityTime adequate?  (no: added
     diffServCountActDiscontTime).

(27) How do we handle dropper algorithms that require additional
     classification information in order to do their job? If a
     Classifier is needed then create a new TCB for it at the point just
     before the dropper: use ordinary Classifier elements in this TCB.

(28) Indexing of table entries and uniqueness hints: is TestAndIncr the
     correct tool to use? (no: RowStatus is the right tool for ensuring
     uniqueness; use a NextFree variable as a hint).

(32) Miscellaneous clarifications - thanks Bob.

5.3.  Still Open Issues

(16) Should the creation of counter actions be under the control of
     manager or agent: should a diffServActionEntry and
     diffServCountActEntry appear by magic (does the agent know what
     counters it can and cannot maintain on a given interface)? (no) If
     no, should diffServCountActEntry appear magically when a
     diffServAction element is created which points at the
     diffServCountActTable (then would be no need for
     diffServCountActStatus)? (no)

(23) Do daughter entries of derived table entries need to exist
     independently of the parent?  Examples are
     diffServMeterEntry/diffServTBMeterEntry,





Baker, Chan, Smith        Expires January 2001         [Page 18]

Internet Draft         Differentiated Services MIB             July 2000


     diffServActionEntry/diffServCountActEntry and
     diffServAlgDropEntry/diffServRandomDropEntry (assume they must be
     independent of the equivalent entry in diffServMeterTable which
     points at the TB table - needs diffServTBMeterStatus: daughters
     must be created explicitly by manager).

(30) Related to (17) - multi-manager creation of TCBs:
     diffServClassifierId is unique across the agent, for all values of
     diffServClassifierTcb but there is no "next free" variable to
     report the next TCB to use. This can lead to a race condition when
     2 managers are duelling to create entries with the same value of
     diffServClassifierTcb. There are also legitimate reasons for
     different managers to be "creating" the *same* TCB so a
     conventional "next free" is not a good solution.  Is this a rare
     enough occurence given a suitable choice of diffServClassifierTcb
     e.g. pseudo-random? (yes).

(31) When inheritance is needed and parent/daughter share indexing, the
     parent often points to the daughter using a "Specific" attribute
     e.g. diffServMeterSpecific, diffServActionSpecific,
     diffServAlgDropSpecific. If this is a RowPointer and points to the
     associated row in the daughter's table, there is redundant
     information which gives scope for additional error cases. So,
     wherever possible, should we remove this redundant information by
     making the "Specific" attribute point only to the base of the
     daughter table and make it an OBJECT IDENTIFIER? The con is that
     this is an unusual use of MIB pointers (point at table base, not
     individual entries).


6.  MIB Definition


DIFF-SERV-MIB DEFINITIONS ::= BEGIN

    IMPORTS
    Unsigned32, Counter32, Counter64, OBJECT-TYPE,
    MODULE-IDENTITY, OBJECT-IDENTITY, zeroDotZero, mib-2
         FROM SNMPv2-SMI
    TEXTUAL-CONVENTION, RowStatus, RowPointer, TimeStamp
         FROM SNMPv2-TC
    MODULE-COMPLIANCE, OBJECT-GROUP
         FROM SNMPv2-CONF
    ifIndex
        FROM IF-MIB
    InetAddressType, InetAddress
        FROM INET-ADDRESS-MIB





Baker, Chan, Smith        Expires January 2001         [Page 19]

Internet Draft         Differentiated Services MIB             July 2000


    BurstSize
        FROM INTEGRATED-SERVICES-MIB;

diffServMib MODULE-IDENTITY
    LAST-UPDATED "200007130000Z"
    ORGANIZATION "IETF Diffserv WG"
    CONTACT-INFO
       "       Brian Carpenter (co-chair of Diffserv WG)
               c/o iCAIR
               1890 Maple Ave, #150
               Evanston, IL 60201, USA
       Phone:  +1 847 467 7811
       E-mail: brian@icair.org

               Kathleen Nichols (co-chair of Diffserv WG)
               Packet Design
       E-mail: nichols@packetdesign.com

               Fred Baker (author)
               Cisco Systems
               519 Lado Drive
               Santa Barbara, CA 93111, USA
       E-mail: fred@cisco.com

               Kwok Ho Chan (author)
               Nortel Networks
               600 Technology Park Drive
               Billerica, MA 01821, USA
       E-mail: khchan@nortelnetworks.com

               Andrew Smith (author)
       E-mail: ah_smith@pacbell.net"
    DESCRIPTION
       "This MIB defines the objects necessary to manage a device that
       uses the Differentiated Services Architecture described in RFC
       2475 and the Informal Management Model for DiffServ Routers in
       draft-ietf-diffserv-model-04.txt."
    REVISION "200007130000Z"
    DESCRIPTION
       "Initial version, published as RFC xxxx."
    ::= { mib-2 12345 }  -- anybody who uses this unassigned
                         -- number deserves the wrath of IANA

diffServObjects        OBJECT IDENTIFIER ::= { diffServMib 1 }
diffServTables         OBJECT IDENTIFIER ::= { diffServMib 2 }
diffServMIBConformance OBJECT IDENTIFIER ::= { diffServMib 3 }






Baker, Chan, Smith        Expires January 2001         [Page 20]

Internet Draft         Differentiated Services MIB             July 2000


-- These textual conventions have no effect on either the syntax
-- nor the semantics of any managed object.  Objects defined
-- using this convention are always encoded by means of the
-- rules that define their primitive type.

Dscp ::= TEXTUAL-CONVENTION
    DISPLAY-HINT "d"
    STATUS   current
    DESCRIPTION
       "The IP header Diffserv Code-Point that may be used for
       discriminating or marking a traffic stream.  The value -1 is used
       to indicate a wildcard i.e. any value."
    SYNTAX   INTEGER (-1 | 0..63)

SixTupleClfrL4Port ::= TEXTUAL-CONVENTION
    DISPLAY-HINT "d"
    STATUS   current
    DESCRIPTION
       "A value indicating a Layer-4 protocol port number."
    SYNTAX   INTEGER (0..65535)

IfDirection ::= TEXTUAL-CONVENTION
    STATUS current
    DESCRIPTION
       "Specifies a direction of data travel on an interface. 'inbound'
       traffic is operated on during reception from the interface, while
       'outbound' traffic is operated on prior to transmission on the
       interface."
    SYNTAX  INTEGER {
                inbound(1),     -- ingress interface
                outbound(2)     -- egress interface
            }




















Baker, Chan, Smith        Expires January 2001         [Page 21]

Internet Draft         Differentiated Services MIB             July 2000


--
-- Classifiers
--

--
-- Classifier Table
--

-- The Classifier Table allows us to enumerate the relationship
-- between arbitrary classifiers and the subsequent downstream
-- Diffserv elements.

diffServClassifierTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF DiffServClassifierEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "The classifier table defines the classifiers that are applied to
       traffic arriving at this interface in a particular direction.
       Specific classifiers are defined by RowPointers in the entries of
       this table which identify entries in filter tables of specific
       types, e.g.  Multi-Field Classifiers (MFCs) for IP are defined in
       the diffServSixTupleClfrTable. Other classifier types may be
       defined elsewhere."
    REFERENCE
        "[MODEL] section 4.1"
    ::= { diffServTables 1 }

diffServClassifierEntry OBJECT-TYPE
    SYNTAX       DiffServClassifierEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "An entry in the classifier table describes a single element of
       the classifier."
    INDEX { ifIndex, diffServClassifierIfDirection,
            diffServClassifierTcb, diffServClassifierId }
    ::= { diffServClassifierTable 1 }

DiffServClassifierEntry ::= SEQUENCE  {
    diffServClassifierIfDirection  IfDirection,
    diffServClassifierTcb          Unsigned32,
    diffServClassifierId           Unsigned32,
    diffServClassifierFilter       RowPointer,
    diffServClassifierNext         RowPointer,
    diffServClassifierPrecedence   Unsigned32,
    diffServClassifierStatus       RowStatus





Baker, Chan, Smith        Expires January 2001         [Page 22]

Internet Draft         Differentiated Services MIB             July 2000


}

diffServClassifierIfDirection OBJECT-TYPE
    SYNTAX  IfDirection
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "Specifies the direction for which this classifier entry applies
       on this interface."
    ::= { diffServClassifierEntry 1 }

diffServClassifierTcb OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "Specifies the TCB of which this classifier element is a part.
       Lower numbers indicate an element that belongs to a classifier
       that is part of a TCB that is, at least conceptually, applied to
       traffic before those with higher numbers - this is necessary to
       resolve ambiguity in cases where different TCBs contain filters
       that overlap with each other.

       A manager wanting to create a new TCB should either first search
       this table for existing entries and pick a value for this
       variable that is not currently represented - some form of pseudo-
       random choice is likely to minimise collisions. After successful
       creation of a conceptual row using the chosen value, the manager
       should check again that there are no other rows with this value
       that have been created by a different manager that could,
       potentially, interfere with the classifier elements that are
       desired."
    ::= { diffServClassifierEntry 2 }

diffServClassifierId OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "A classifier ID that enumerates the classifier elements. The set
       of such identifiers spans the whole agent. Managers should obtain
       new values for row creation in this table by reading
       diffServClassifierNextFree."
    ::= { diffServClassifierEntry 3 }

diffServClassifierFilter OBJECT-TYPE
    SYNTAX       RowPointer





Baker, Chan, Smith        Expires January 2001         [Page 23]

Internet Draft         Differentiated Services MIB             July 2000


    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "A pointer to a valid entry in another table that describes the
       applicable classification filter, e.g. an entry in
       diffServSixTupleClfrTable.  If the row pointed to does not exist,
       the classifier is ignored.

       The value zeroDotZero is interpreted to match anything not
       matched by another classifier - only one such entry may exist in
       this table."
    DEFVAL { zeroDotZero }
    ::= { diffServClassifierEntry 4 }

diffServClassifierNext OBJECT-TYPE
    SYNTAX       RowPointer
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "This selects the next datapath element to handle packets
       matching the filter pattern. For example, this can point to an
       entry in a meter, action, algorithmic dropper or queue table.

       If the row pointed to does not exist, the classifier element is
       ignored."
    ::= { diffServClassifierEntry 5 }

diffServClassifierPrecedence OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The relative precedence in which classifiers are applied: higher
       numbers represent classifiers with higher precedence.
       Classifiers with the same precedence must be unambiguous i.e.
       they must define non-overlapping patterns, and are considered to
       be applied simultaneously to the traffic stream. Classifiers with
       different precedence may overlap in their filters: the classifier
       with the highest precedence that matches is taken.

       On a given interface, there must be a complete classifier in
       place at all times for the first TCB (lowest value of
       diffServClassifierTcb) in the ingress direction. This means that
       there will always be one or more filters that match every
       possible pattern that could be presented in an incoming packet.
       There is no such requirement for subsequent TCBs in the ingress
       direction, nor for any TCB in the egress direction."





Baker, Chan, Smith        Expires January 2001         [Page 24]

Internet Draft         Differentiated Services MIB             July 2000


    DEFVAL { 0 }
    ::= { diffServClassifierEntry 6 }

diffServClassifierStatus OBJECT-TYPE
    SYNTAX       RowStatus
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The RowStatus variable controls the activation, deactivation, or
       deletion of a classifier. Any writable variable may be modified
       whether the row is active or notInService."
    ::= { diffServClassifierEntry 7 }

diffServClassifierNextFree OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "This object yields a value when read that is currently-unused
       for a diffServClassifierId instance.  If a configuring system
       attempts to create a new row in the diffServClassifierTable using
       this value, that operation will fail if the value has, in the
       meantime, been used to create another row that is currently
       valid."
    ::= { diffServObjects 1 }

--
-- IP Six-Tuple Classification Table
--
-- Classification based on 6 different fields in the IP
-- header. This is intended to be IP-version-independent.
--

diffServSixTupleClfrTable OBJECT-TYPE
    SYNTAX      SEQUENCE OF DiffServSixTupleClfrEntry
    MAX-ACCESS   not-accessible
    STATUS      current
    DESCRIPTION
       "A table of IP Six-Tuple Classifier filter entries that a system
       may use to identify IP traffic."
    REFERENCE
        "[MODEL] section 4.2.2"
    ::= { diffServTables 2 }

diffServSixTupleClfrEntry OBJECT-TYPE
    SYNTAX       DiffServSixTupleClfrEntry
    MAX-ACCESS   not-accessible





Baker, Chan, Smith        Expires January 2001         [Page 25]

Internet Draft         Differentiated Services MIB             July 2000


    STATUS      current
    DESCRIPTION
       "An IP Six-Tuple Classifier entry describes a single filter."
    INDEX { diffServSixTupleClfrId }
    ::= { diffServSixTupleClfrTable 1 }

DiffServSixTupleClfrEntry ::= SEQUENCE {
    diffServSixTupleClfrId           Unsigned32,
    diffServSixTupleClfrDstAddrType  InetAddressType,
    diffServSixTupleClfrDstAddr      InetAddress,
    diffServSixTupleClfrDstAddrMask  Unsigned32,
    diffServSixTupleClfrSrcAddrType  InetAddressType,
    diffServSixTupleClfrSrcAddr      InetAddress,
    diffServSixTupleClfrSrcAddrMask  Unsigned32,
    diffServSixTupleClfrDscp         Dscp,
    diffServSixTupleClfrProtocol     INTEGER,
    diffServSixTupleClfrDstL4PortMin SixTupleClfrL4Port,
    diffServSixTupleClfrDstL4PortMax SixTupleClfrL4Port,
    diffServSixTupleClfrSrcL4PortMin SixTupleClfrL4Port,
    diffServSixTupleClfrSrcL4PortMax SixTupleClfrL4Port,
    diffServSixTupleClfrStatus       RowStatus
}

diffServSixTupleClfrId OBJECT-TYPE
    SYNTAX         Unsigned32
    MAX-ACCESS     not-accessible
    STATUS        current
    DESCRIPTION
       "A unique identifier for the filter. Filters may be shared by
       multiple interfaces in the same system. Managers should obtain
       new values for row creation in this table by reading
       diffServSixTupleClfrNextFree."
    ::= { diffServSixTupleClfrEntry 1 }

diffServSixTupleClfrDstAddrType OBJECT-TYPE
    SYNTAX         InetAddressType
    MAX-ACCESS     read-create
    STATUS         current
    DESCRIPTION
       "The type of IP destination address used by this classifier
       entry."
    ::= { diffServSixTupleClfrEntry 2 }

diffServSixTupleClfrDstAddr OBJECT-TYPE
    SYNTAX         InetAddress
    MAX-ACCESS     read-create
    STATUS         current





Baker, Chan, Smith        Expires January 2001         [Page 26]

Internet Draft         Differentiated Services MIB             July 2000


    DESCRIPTION
       "The IP address to match against the packet's destination IP
       address."
    ::= { diffServSixTupleClfrEntry 3 }

diffServSixTupleClfrDstAddrMask OBJECT-TYPE
    SYNTAX         Unsigned32
    UNITS          "bits"
    MAX-ACCESS     read-create
    STATUS         current
    DESCRIPTION
       "The length of a mask for the matching of the destination IP
       address.  Masks are constructed by setting bits in sequence from
       the most-significant bit downwards for
       diffServSixTupleClfrDstAddrMask bits length. All other bits in
       the mask, up to the number needed to fill the length of the
       address diffServSixTupleClfrDstAddr are cleared to zero.  A zero
       bit in the mask then means that the corresponding bit in the
       address always matches."
    DEFVAL         {0}
    ::= { diffServSixTupleClfrEntry 4 }

diffServSixTupleClfrSrcAddrType OBJECT-TYPE
    SYNTAX         InetAddressType
    MAX-ACCESS     read-create
    STATUS         current
    DESCRIPTION
       "The type of IP source address used by this classifier entry."
    ::= { diffServSixTupleClfrEntry 5 }

diffServSixTupleClfrSrcAddr OBJECT-TYPE
    SYNTAX         InetAddress
    MAX-ACCESS     read-create
    STATUS         current
    DESCRIPTION
       "The IP address to match against the source IP address of each
       packet."
    ::= { diffServSixTupleClfrEntry 6 }

diffServSixTupleClfrSrcAddrMask OBJECT-TYPE
    SYNTAX         Unsigned32
    UNITS          "bits"
    MAX-ACCESS     read-create
    STATUS         current
    DESCRIPTION
       "The length of a mask for the matching of the source IP address.
       Masks are constructed by setting bits in sequence from the most-





Baker, Chan, Smith        Expires January 2001         [Page 27]

Internet Draft         Differentiated Services MIB             July 2000


       significant bit downwards for diffServSixTupleClfrSrcAddrMask
       bits length. All other bits in the mask, up to the number needed
       to fill the length of the address diffServSixTupleClfrSrcAddr are
       cleared to zero.  A zero bit in the mask then means that the
       corresponding bit in the address always matches."
    DEFVAL         {0}
    ::= { diffServSixTupleClfrEntry 7 }

diffServSixTupleClfrDscp OBJECT-TYPE
    SYNTAX         Dscp
    MAX-ACCESS     read-create
    STATUS         current
    DESCRIPTION
       "The value that the DSCP in the packet must have to match this
       entry. A value of -1 indicates that a specific DSCP value has not
       been defined and thus all DSCP values are considered a match."
    DEFVAL         {-1}
    ::= { diffServSixTupleClfrEntry 8 }

diffServSixTupleClfrProtocol OBJECT-TYPE
    SYNTAX         INTEGER (0..255)
    MAX-ACCESS     read-create
    STATUS         current
    DESCRIPTION
       "The IP protocol to match against the IPv4 protocol number in the
       packet. A value of zero means match all."
    DEFVAL         {0}
    ::= { diffServSixTupleClfrEntry 9 }

diffServSixTupleClfrDstL4PortMin OBJECT-TYPE
    SYNTAX         SixTupleClfrL4Port
    MAX-ACCESS     read-create
    STATUS         current
    DESCRIPTION
       "The minimum value that the layer-4 destination port number in
       the packet must have in order to match this classifier entry."
    DEFVAL         {0}
    ::= { diffServSixTupleClfrEntry 10 }

diffServSixTupleClfrDstL4PortMax OBJECT-TYPE
    SYNTAX         SixTupleClfrL4Port
    MAX-ACCESS     read-create
    STATUS         current
    DESCRIPTION
       "The maximum value that the layer-4 destination port number in
       the packet must have in order to match this classifier entry.
       This value must be equal to or greater that the value specified





Baker, Chan, Smith        Expires January 2001         [Page 28]

Internet Draft         Differentiated Services MIB             July 2000


       for this entry in diffServSixTupleClfrDstL4PortMin."
    DEFVAL         {65535}
    ::= { diffServSixTupleClfrEntry 11 }

diffServSixTupleClfrSrcL4PortMin OBJECT-TYPE
    SYNTAX         SixTupleClfrL4Port
    MAX-ACCESS     read-create
    STATUS         current
    DESCRIPTION
       "The minimum value that the layer-4 source port number in the
       packet must have in order to match this classifier entry."
    DEFVAL         {0}
    ::= { diffServSixTupleClfrEntry 12 }

diffServSixTupleClfrSrcL4PortMax OBJECT-TYPE
    SYNTAX         SixTupleClfrL4Port
    MAX-ACCESS     read-create
    STATUS         current
    DESCRIPTION
       "The maximum value that the layer-4 source port number in the
       packet must have in oder to match this classifier entry.  This
       value must be equal to or greater that the value specified for
       this entry in dsSixTupleIpSrcL4PortMin."
    DEFVAL         {65535}
    ::= { diffServSixTupleClfrEntry 13 }

diffServSixTupleClfrStatus OBJECT-TYPE
    SYNTAX      RowStatus
    MAX-ACCESS  read-create
    STATUS     current
    DESCRIPTION
       "The RowStatus variable controls the activation, deactivation, or
       deletion of a classifier. Any writable variable may be modified
       whether the row is active or notInService."
    ::= { diffServSixTupleClfrEntry 14 }

diffServSixTupleClfrNextFree OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "This object yields a value when read that is currently-unused
       for a diffServSixTupleClfrId instance.
       If a configuring system attempts to create a new row
       in the diffServSixTupleClfrTable using this value, that operation
       will fail if the value has, in the meantime, been used
       to create another row that is currently valid."





Baker, Chan, Smith        Expires January 2001         [Page 29]

Internet Draft         Differentiated Services MIB             July 2000


    ::= { diffServObjects 2 }



















































Baker, Chan, Smith        Expires January 2001         [Page 30]

Internet Draft         Differentiated Services MIB             July 2000


--
-- Meters
--
-- This MIB includes definitions for a generic Meter
-- Table as well as specific definitions for Token-
-- Bucket Meters, as one example of possible meters.
--

diffServMeterTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF DiffServMeterEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "This table enumerates generic meters that a system may use to
       police a stream of traffic.  The traffic stream to be metered is
       determined by the element(s) upstream of the meter i.e. by the
       object(s) that point to each entry in this table. This may
       include all traffic on an interface.

       Specific meter details are to be found in diffServMeterSpecific."
           REFERENCE
               "[MODEL] section 5.1"
    ::= { diffServTables 3 }

diffServMeterEntry OBJECT-TYPE
    SYNTAX       DiffServMeterEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "An entry in the meter table describing a single meter."
    INDEX { ifIndex, diffServMeterIfDirection,
            diffServMeterId  }
    ::= { diffServMeterTable 1 }

DiffServMeterEntry ::= SEQUENCE  {
    diffServMeterIfDirection       IfDirection,
    diffServMeterId                Unsigned32,
    diffServMeterSucceedNext       RowPointer,
    diffServMeterFailNext          RowPointer,
    diffServMeterSpecific          OBJECT IDENTIFIER,
    diffServMeterStatus            RowStatus
}

diffServMeterIfDirection OBJECT-TYPE
    SYNTAX       IfDirection
    MAX-ACCESS   not-accessible
    STATUS       current





Baker, Chan, Smith        Expires January 2001         [Page 31]

Internet Draft         Differentiated Services MIB             July 2000


    DESCRIPTION
       "Specifies the direction for which this meter entry applies on
       this interface."
    ::= { diffServMeterEntry 1 }

diffServMeterId OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "This identifies a meter entry. Managers should obtain new values
       for row creation in this table by reading diffServMeterNextFree."
    ::= { diffServMeterEntry 2 }

diffServMeterSucceedNext OBJECT-TYPE
    SYNTAX       RowPointer
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "If the traffic does conform to the meter, this indicates the
       next datapath element to handle the traffic e.g. an Action or
       another Meter datapath element.

       The value zeroDotZero in this variable indicates no further
       Diffserv treatment is performed on this traffic by the current
       interface for this interface direction. If the row pointed to
       does not exist, the meter element is considered inactive."
    DEFVAL      { zeroDotZero }
    ::= { diffServMeterEntry 3 }

diffServMeterFailNext OBJECT-TYPE
    SYNTAX       RowPointer
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "If the traffic does not conform to the meter, this indicates the
       next datapath element to handle the traffic e.g. an Action or
       Meter datapath element.

       The value zeroDotZero in this variable indicates no further
       Diffserv treatment is performed on this traffic by the current
       interface for this interface direction. If the row pointed to
       does not exist, the meter element is considered inactive."
    DEFVAL      { zeroDotZero }
    ::= { diffServMeterEntry 4 }

diffServMeterSpecific OBJECT-TYPE





Baker, Chan, Smith        Expires January 2001         [Page 32]

Internet Draft         Differentiated Services MIB             July 2000


    SYNTAX       OBJECT IDENTIFIER
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "This indicates the behaviour of the meter by pointing to a table
       containing detailed parameters. Note that entries in that
       specific table must be managed explicitly.

       One example of a valid object would be diffServTBMeterTable,
       whose entries are indexed by the same variables as this table,
       for describing an instance of a token-bucket meter."
    ::= { diffServMeterEntry 5 }

diffServMeterStatus OBJECT-TYPE
    SYNTAX       RowStatus
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The RowStatus variable controls the activation, deactivation, or
       deletion of a meter. Any writable variable may be modified
       whether the row is active or notInService."
    ::= { diffServMeterEntry 6 }

diffServMeterNextFree OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "This object yields a value when read that is currently-unused
       for a diffServMeterId instance.  If a configuring system attempts
       to create a new row in the diffServMeterTable using this value,
       that operation will fail if the value has, in the meantime, been
       used to create another row that is currently valid."
    ::= { diffServObjects 3 }

--
-- Token-Bucket Meter Table
--

diffServTBMeterTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF DiffServTBMeterEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "This table enumerates specific token-bucket meters that a system
       may use to police a stream of traffic.  Such meters are modelled
       here as having a single rate and a burst size.





Baker, Chan, Smith        Expires January 2001         [Page 33]

Internet Draft         Differentiated Services MIB             July 2000


       Multiple meter elements may be logically cascaded using their
       diffServMeterSucceedNext pointers if a multi-rate token bucket is
       needed.  One example of this might be for an AF PHB
       implementation that used two-rate meters.  Such cascading of
       meter elements of specific type of token-bucket indicates
       forwarding behaviour that is functionally equivalent to a multi-
       rate meter: the sequential nature of the representation is merely
       a notational convenience for this MIB.

       Entries in this table share indexing with a parent
       diffServMeterEntry although they must be managed (e.g.
       created/deleted) by explicit management action, independently of
       the associated value of diffServMeterSpecific."
    REFERENCE
        "[MODEL] section 5.1.3"
    ::= { diffServTables 4 }

diffServTBMeterEntry OBJECT-TYPE
    SYNTAX       DiffServTBMeterEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "An entry that describes a single token-bucket meter, indexed by
       the same variables as a diffServMeterEntry."
    INDEX { ifIndex, diffServMeterIfDirection,
            diffServMeterId  }
    ::= { diffServTBMeterTable 1 }

DiffServTBMeterEntry ::= SEQUENCE  {
    diffServTBMeterRate              Unsigned32,
    diffServTBMeterBurstSize         BurstSize
    diffServTBMeterStatus            RowStatus
}

diffServTBMeterRate OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "kilobits per second"
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The token-bucket rate, in kilobits per second (kbps)."
    ::= { diffServTBMeterEntry 1 }

diffServTBMeterBurstSize OBJECT-TYPE
    SYNTAX       BurstSize
    UNITS        "Bytes"
    MAX-ACCESS   read-create





Baker, Chan, Smith        Expires January 2001         [Page 34]

Internet Draft         Differentiated Services MIB             July 2000


    STATUS       current
    DESCRIPTION
       "The maximum number of bytes in a single transmission burst.  The
       interval over which the burst is to be measured can be derived as
       diffServTBMeterBurstSize*8*1000/diffServTBMeterRate."
    ::= { diffServTBMeterEntry 2 }

diffServTBMeterStatus OBJECT-TYPE
    SYNTAX       RowStatus
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The RowStatus variable controls the activation, deactivation, or
       deletion of a meter. Any writable variable may be modified
       whether the row is active or notInService."
    ::= { diffServTBMeterEntry 3 }




































Baker, Chan, Smith        Expires January 2001         [Page 35]

Internet Draft         Differentiated Services MIB             July 2000


--
-- Actions
--

--
-- The Action Table allows enumeration of the different
-- types of actions to be applied to a traffic flow.
--

diffServActionTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF DiffServActionEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "The Action Table enumerates actions that can be performed to a
       stream of traffic. Multiple actions can be concatenated.  For
       example, after marking a stream of traffic exiting from a meter,
       a device can then perform a count action of the conforming or
       non-conforming traffic.

       Specific actions are indicated by diffServActionSpecific which
       points to another object which describes the action in further
       detail."
    REFERENCE
        "[MODEL] section 6."
    ::= { diffServTables 5 }

diffServActionEntry OBJECT-TYPE
    SYNTAX       DiffServActionEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "An entry in the action table describing the actions applied to
       traffic arriving at its input."
    INDEX { ifIndex, diffServActionIfDirection,
            diffServActionId }
    ::= { diffServActionTable 1 }

DiffServActionEntry ::= SEQUENCE  {
    diffServActionIfDirection       IfDirection,
    diffServActionId                Unsigned32,
    diffServActionNext              RowPointer,
    diffServActionSpecific          OBJECT IDENTIFIER,
    diffServActionStatus            RowStatus
}

diffServActionIfDirection OBJECT-TYPE





Baker, Chan, Smith        Expires January 2001         [Page 36]

Internet Draft         Differentiated Services MIB             July 2000


    SYNTAX       IfDirection
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "Specifies the direction for which this action entry applies on
       this interface."
    ::= { diffServActionEntry 1 }

diffServActionId OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "This identifies the action entry. Managers should obtain new
       values for row creation in this table by reading
       diffServActionNextFree."
    ::= { diffServActionEntry 2 }

diffServActionNext OBJECT-TYPE
    SYNTAX       RowPointer
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The Next pointer indicates the next datapath element to handle
       the traffic.  For example, a queue datapath element.

       The value zeroDotZero in this variable indicates no further
       DiffServ treatment is performed on this flow by the current
       interface for this interface direction. If the row pointed to
       does not exist, the action element is considered inactive."
    DEFVAL      { zeroDotZero }
    ::= { diffServActionEntry 3 }

diffServActionSpecific OBJECT-TYPE
    SYNTAX       OBJECT IDENTIFIER
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "A pointer to an object instance providing additional information
       for the type of action indicated by this action table entry.

       For the standard actions defined by this MIB module, this should
       point to one of the following: a diffServDscpMarkActEntry, a
       diffServCountActEntry, the diffServAbsoluteDropAction OID.  For
       other actions, it may point to an object instance defined in some
       other MIB."
    ::= { diffServActionEntry 4 }





Baker, Chan, Smith        Expires January 2001         [Page 37]

Internet Draft         Differentiated Services MIB             July 2000


diffServActionStatus OBJECT-TYPE
    SYNTAX       RowStatus
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The RowStatus variable controls the activation, deactivation or
       deletion of an action element. Any writable variable may be
       modified whether the row is active or notInService."
    ::= { diffServActionEntry 5 }

diffServActionNextFree OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "This object yields a value when read that is currently-unused
       for a diffServActionId instance.  If a configuring system
       attempts to create a new row in the diffServActionTable using
       this value, that operation will fail if the value has, in the
       meantime, been used to create another row that is currently
       valid."
    ::= { diffServObjects 4 }


-- DSCP Mark Action Table
--
-- Rows of this table are pointed to by diffServAction to
-- provide detailed parameters specific to the DSCP
-- Mark action.

diffServDscpMarkActTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF DiffServDscpMarkActEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "This table enumerates specific DSCPs used for marking or
       remarking the DSCP field of IP packets.  The entries of this
       table may be referenced by a diffServActionSpecific attribute
       that points to diffServDscpMarkActTable."
    REFERENCE
        "[MODEL] section 6.1"
    ::= { diffServTables 6 }

diffServDscpMarkActEntry OBJECT-TYPE
    SYNTAX       DiffServDscpMarkActEntry
    MAX-ACCESS   not-accessible
    STATUS       current





Baker, Chan, Smith        Expires January 2001         [Page 38]

Internet Draft         Differentiated Services MIB             July 2000


    DESCRIPTION
       "An entry in the DSCP mark action table that describes a single
       DSCP used for marking."
    INDEX { diffServDscpMarkActDscp }
    ::= { diffServDscpMarkActTable 1 }

DiffServDscpMarkActEntry ::= SEQUENCE  {
    diffServDscpMarkActDscp          Dscp
}

diffServDscpMarkActDscp OBJECT-TYPE
    SYNTAX       Dscp
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "The DSCP that this Action uses for marking/remarking traffic.
       Note that a DSCP value of -1 is not permitted in this table.  It
       is quite possible that the only packets subject to this Action
       are already marked with this DSCP.  Note also that Diffserv may
       result in packet remarking both on ingress to a network and on
       egress from it and it is quite possible that ingress and egress
       would occur in the same router."
    ::= { diffServDscpMarkActEntry 1 }


--
-- Count Action Table
--

diffServCountActTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF DiffServCountActEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "This table contains counters for all the traffic passing through
       an action element."
    REFERENCE
        "[MODEL] section 6.5"
    ::= { diffServTables 7 }

diffServCountActEntry OBJECT-TYPE
    SYNTAX       DiffServCountActEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "An entry in the count action table that describes a single set
       of traffic counters. Entries in this table share indexing with





Baker, Chan, Smith        Expires January 2001         [Page 39]

Internet Draft         Differentiated Services MIB             July 2000


       those in the base diffServActionTable although they must be
       managed (e.g. created/deleted) by explicit management action,
       independently of the associated value of diffServActionSpecific."
    INDEX { ifIndex, diffServActionIfDirection,
            diffServActionId }
    ::= { diffServCountActTable 1 }

DiffServCountActEntry ::= SEQUENCE  {
    diffServCountActOctets       Counter32,
    diffServCountActHCOctets     Counter64,
    diffServCountActPkts         Counter32,
    diffServCountActHCPkts       Counter64,
    diffServCountActDiscontTime  TimeStamp,
    diffServCountActStatus       RowStatus
}

diffServCountActOctets OBJECT-TYPE
    SYNTAX       Counter32
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "The number of octets at the Action datapath element.  On high
       speed devices, this object implements the least significant 32
       bits of diffServcountActHCOctets.

       Discontinuities in the value of this counter can occur at re-
       initialization of the management system and at other times as
       indicated by the value of diffServCountActDiscontTime for this
       entry."
    ::= { diffServCountActEntry 1 }

diffServCountActHCOctets OBJECT-TYPE
    SYNTAX       Counter64
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "The number of octets at the Action datapath element.  This
       object should be used on high speed interfaces.

       Discontinuities in the value of this counter can occur at re-
       initialization of the management system and at other times as
       indicated by the value of diffServCountActDiscontTime for this
       entry."
    ::= { diffServCountActEntry 2 }

diffServCountActPkts OBJECT-TYPE
    SYNTAX       Counter32





Baker, Chan, Smith        Expires January 2001         [Page 40]

Internet Draft         Differentiated Services MIB             July 2000


    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "The number of packets at the Action datapath element.  On high
       speed devices, this object implements the least significant 32
       bits of diffServcountActHCPkts.

       Discontinuities in the value of this counter can occur at re-
       initialization of the management system and at other times as
       indicated by the value of diffServCountActDiscontTime for this
       entry."
    ::= { diffServCountActEntry 3 }

diffServCountActHCPkts OBJECT-TYPE
    SYNTAX       Counter64
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "The number of packets at the Action datapath element.  This
       object should be used on high speed interfaces.

       Discontinuities in the value of this counter can occur at re-
       initialization of the management system and at other times as
       indicated by the value of diffServCountActDiscontTime for this
       entry."
    ::= { diffServCountActEntry 4 }

diffServCountActDiscontTime OBJECT-TYPE
    SYNTAX       TimeStamp
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "The value of sysUpTime on the most recent occasion at which any
       one or more of this entry's counters suffered a discontinuity. If
       no such discontinuities have occurred since the last re-
       initialization of the local management subsystem, then this
       object contains a zero value."
    ::= { diffServCountActEntry 5 }

diffServCountActStatus OBJECT-TYPE
    SYNTAX       RowStatus
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The RowStatus variable controls the activation, deactivation, or
       deletion of this entry. Any writable variable may be modified
       whether the row is active or notInService."





Baker, Chan, Smith        Expires January 2001         [Page 41]

Internet Draft         Differentiated Services MIB             July 2000


    ::= { diffServCountActEntry 6 }

diffServAbsoluteDropAction OBJECT-IDENTITY
    STATUS       current
    DESCRIPTION
       "This object identifier may be used as the value of a
       diffServActionSpecific pointer in order to indicate that all
       packets following this path are to be dropped unconditionally at
       this point. It is likely, but not required, that this action will
       be preceded by a counter action."
    ::= { diffServObjects 6 }









































Baker, Chan, Smith        Expires January 2001         [Page 42]

Internet Draft         Differentiated Services MIB             July 2000


--
-- Algorithmic Drop Table
--

diffServAlgDropTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF DiffServAlgDropEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "The algorithmic drop table contains entries describing an
       element that drops packets according to some algorithm."
    REFERENCE
        "[MODEL] section 7.1.3"
    ::= { diffServTables 8 }

diffServAlgDropEntry OBJECT-TYPE
    SYNTAX       DiffServAlgDropEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "An entry describes a process that drops packets according to
       some algorithm.  Further details of the algorithm type are to be
       found in diffServAlgDropType and may be pointed to by
       diffServAlgDropSpecific."
    INDEX { ifIndex, diffServAlgDropIfDirection,
            diffServAlgDropId }
    ::= { diffServAlgDropTable 1 }

DiffServAlgDropEntry ::= SEQUENCE  {
    diffServAlgDropIfDirection      IfDirection,
    diffServAlgDropId               Unsigned32,
    diffServAlgDropType             INTEGER,
    diffServAlgDropNext             RowPointer,
    diffServAlgDropQMeasure         RowPointer,
    diffServAlgDropQThreshold       Unsigned32,
    diffServAlgDropSpecific         OBJECT IDENTIFIER,
    diffServAlgDropOctets           Counter32,
    diffServAlgDropHCOctets         Counter64,
    diffServAlgDropPkts             Counter32,
    diffServAlgDropHCPkts           Counter64,
    diffServAlgDropStatus           RowStatus
}

diffServAlgDropIfDirection OBJECT-TYPE
    SYNTAX       IfDirection
    MAX-ACCESS   not-accessible
    STATUS       current





Baker, Chan, Smith        Expires January 2001         [Page 43]

Internet Draft         Differentiated Services MIB             July 2000


    DESCRIPTION
       "Specifies the direction for which this algorithmic dropper entry
       applies on this interface."
    ::= { diffServAlgDropEntry 1 }

diffServAlgDropId OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "This identifies the drop action entry. Managers should obtain
       new values for row creation in this table by reading
       diffServAlgDropNextFree."
    ::= { diffServAlgDropEntry 2 }

diffServAlgDropType OBJECT-TYPE
    SYNTAX       INTEGER { other(1), tailDrop(2),
                           headDrop(3), randomDrop(4) }
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The type of algorithm used by this dropper. A value of
       tailDrop(2) or headDrop(3) represents an algorithm that is
       completely specified by this MIB.  A value of other(1) requires
       further specification in some other MIB module.

       The tailDrop(2) algorithm is described as follows:
       diffServAlgDropQThreshold represents the depth of the queue
       diffServAlgDropQMeasure at which all newly arriving packets will
       be dropped.

       The headDrop(3) algorithm is described as follows: if a packet
       arrives when the current depth of the queue
       diffServAlgDropQMeasure is at diffServAlgDropQThreshold, packets
       currently at the head of the queue are dropped to make room for
       the new packet to be enqueued at the tail of the queue.

       The randomDrop(4) algorithm is described as follows: on packet
       arrival, an algorithm is executed which may randomly drop the
       packet, or drop other packet(s) from the queue in its place. The
       specifics of the algorithm may be proprietary. For this
       algorithm, an associated diffServRandomDropEntry is indicated by
       pointing diffServAlgDropSpecific at the diffServRandomDropTable.
       The relevant entry in that table is selected by the common
       indexing of the two tables.  For this algorithm,
       diffServAlgQThreshold is understood to be the absolute maximum
       size of the queue and additional parameters are described in





Baker, Chan, Smith        Expires January 2001         [Page 44]

Internet Draft         Differentiated Services MIB             July 2000


       diffServRandomDropTable."
    ::= { diffServAlgDropEntry 3 }

diffServAlgDropNext OBJECT-TYPE
    SYNTAX       RowPointer
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The Next pointer indicates the next datapath element to handle
       the traffic e.g. a queue datapath element.

       The value zeroDotZero in this variable indicates no further
       DiffServ treatment is performed on this flow by the current
       interface for this interface direction. If the row pointed to
       does not exist, the algorithmic dropper element is considered
       inactive."
    ::= { diffServAlgDropEntry 4 }

diffServAlgDropQMeasure OBJECT-TYPE
    SYNTAX       RowPointer
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "Points to an entry in the diffServQueueTable to indicate the
       queue that a drop algorithm is to monitor when deciding whether
       to drop a packet.  If the row pointed to does not exist, the
       algorithmic dropper element is considered inactive."
    ::= { diffServAlgDropEntry 5 }

diffServAlgDropQThreshold OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "Bytes"
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "A threshold on the depth in bytes of the queue being measured at
       which a trigger is generated to the dropping algorithm.

       For the tailDrop(2) or headDrop(3) algorithms, this represents
       the depth of the queue diffServAlgDropQMeasure at which the drop
       action will take place. Other algorithms will need to define
       their own semantics for this threshold."
    ::= { diffServAlgDropEntry 6 }

diffServAlgDropSpecific OBJECT-TYPE
    SYNTAX       OBJECT IDENTIFIER
    MAX-ACCESS   read-create





Baker, Chan, Smith        Expires January 2001         [Page 45]

Internet Draft         Differentiated Services MIB             July 2000


    STATUS       current
    DESCRIPTION
       "Points to a table (not an entry in the table) defined elsewhere
       that provides further detail regarding a drop algorithm.  Entries
       in such a table are indexed by the same variables as this
       diffServAlgDropEntry but note that those entries must be managed
       independently of those in this table.

       Entries with diffServAlgDropType equal to other(1) may have this
       point to a table defined in another MIB module. Entries with
       diffServAlgDropType equal to randomDrop(4) must have this point
       to diffServRandomDropTable.

       For all other algorithms, this should take the value
       zeroDotzero."
    ::= { diffServAlgDropEntry 7 }

diffServAlgDropOctets OBJECT-TYPE
    SYNTAX       Counter32
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "The number of octets that have been dropped by this drop
       process.  On high speed devices, this object implements the least
       significant 32 bits of diffServAlgDropHCOctets.

       Discontinuities in the value of this counter can occur at re-
       initialization of the management system and at other times as
       indicated by the value of ifCounterDiscontinuityTime appropriate
       to this interface."
    ::= { diffServAlgDropEntry 8 }

diffServAlgDropHCOctets OBJECT-TYPE
    SYNTAX       Counter64
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "The number of octets that have been dropped by this drop
       process.  This object should be used on high speed interfaces.

       Discontinuities in the value of this counter can occur at re-
       initialization of the management system and at other times as
       indicated by the value of ifCounterDiscontinuityTime appropriate
       to this interface."
    ::= { diffServAlgDropEntry 9 }

diffServAlgDropPkts OBJECT-TYPE





Baker, Chan, Smith        Expires January 2001         [Page 46]

Internet Draft         Differentiated Services MIB             July 2000


    SYNTAX       Counter32
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "The number of packets that have been dropped by this drop
       process.  On high speed devices, this object implements the least
       significant 32 bits of diffServAlgDropHCPkts.

       Discontinuities in the value of this counter can occur at re-
       initialization of the management system and at other times as
       indicated by the value of ifCounterDiscontinuityTime appropriate
       to this interface."
    ::= { diffServAlgDropEntry 10 }

diffServAlgDropHCPkts OBJECT-TYPE
    SYNTAX       Counter64
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "The number of packets that have been dropped by this drop
       process.  This object should be used on high speed interfaces.

       Discontinuities in the value of this counter can occur at re-
       initialization of the management system and at other times as
       indicated by the value of ifCounterDiscontinuityTime appropriate
       to this interface."
    ::= { diffServAlgDropEntry 11 }

diffServAlgDropStatus OBJECT-TYPE
    SYNTAX       RowStatus
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The RowStatus variable controls the activation, deactivation, or
       deletion of this entry. Any writable variable may be modified
       whether the row is active or notInService."
    ::= { diffServAlgDropEntry 12 }

diffServAlgDropNextFree OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "This object yields a value when read that is currently-unused
       for a diffServAlgDropId instance.  If a configuring system
       attempts to create a new row in the diffServAlgDropTable using
       this value, that operation will fail if the value has, in the





Baker, Chan, Smith        Expires January 2001         [Page 47]

Internet Draft         Differentiated Services MIB             July 2000


       meantime, been used to create another row that is currently
       valid."
    ::= { diffServObjects 7 }


diffServRandomDropTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF DiffServRandomDropEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "The random drop table augments the algorithmic drop table.  It
       contains entries describing a process that drops packets
       randomly. This table is intended to be pointed to by the
       associated diffServAlgDropSpecific in such cases."
    REFERENCE
        "[MODEL] section 7.1.3"
    ::= { diffServTables 9 }

diffServRandomDropEntry OBJECT-TYPE
    SYNTAX       DiffServRandomDropEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "An entry describes a process that drops packets according to a
       random algorithm.  Entries in this table share indexing with a
       parent diffServAlgDropEntry although they must be managed (e.g.
       created/deleted) by explicit management action, independently of
       the associated value of diffServAlgDropSpecific."
    INDEX { ifIndex, diffServAlgDropIfDirection,
            diffServAlgDropId }
    ::= { diffServRandomDropTable 1 }

DiffServRandomDropEntry ::= SEQUENCE  {
    diffServRandomDropMinThreshBytes   Unsigned32,
    diffServRandomDropMinThreshPkts    Unsigned32,
    diffServRandomDropMaxThreshBytes   Unsigned32,
    diffServRandomDropMaxThreshPkts    Unsigned32,
    diffServRandomDropInvWeight        Unsigned32,
    diffServRandomDropProbMax          Unsigned32,
    diffServRandomDropStatus           RowStatus
}

diffServRandomDropMinThreshBytes OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "bytes"
    MAX-ACCESS   read-create
    STATUS       current





Baker, Chan, Smith        Expires January 2001         [Page 48]

Internet Draft         Differentiated Services MIB             July 2000


    DESCRIPTION
       "The average queue depth in bytes, beyond which traffic has a
       non-zero probability of being dropped.  Changes in this variable
       may or may not be reflected in the reported value of
       diffServRandomDropMinThreshPkts."
    ::= { diffServRandomDropEntry 1 }

diffServRandomDropMinThreshPkts OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "packets"
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The average queue depth in packets, beyond which traffic has a
       non-zero probability of being dropped.  Changes in this variable
       may or may not be reflected in the reported value of
       diffServRandomDropMinThreshBytes."
    ::= { diffServRandomDropEntry 2 }

diffServRandomDropMaxThreshBytes OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "bytes"
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The average queue depth beyond which traffic has a probability
       indicated by diffServRandomDropInvMaxProb of being dropped or
       marked. Note that this differs from the physical queue limit,
       which is stored in diffServAlgDropQThreshold.  Changes in this
       variable may or may not be reflected in the reported value of
       diffServRandomDropMaxThreshPkts."
    ::= { diffServRandomDropEntry 3 }

diffServRandomDropMaxThreshPkts OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "packets"
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The average queue depth beyond which traffic has a probability
       indicated by diffServRandomDropInvMaxProb of being dropped or
       marked. Note that this differs from the physical queue limit,
       which is stored in diffServAlgDropQThreshold.  Changes in this
       variable may or may not be reflected in the reported value of
       diffServRandomDropMaxThreshBytes."
    ::= { diffServRandomDropEntry 4 }






Baker, Chan, Smith        Expires January 2001         [Page 49]

Internet Draft         Differentiated Services MIB             July 2000


diffServRandomDropInvWeight OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The weighting of past history in affecting the calculation of
       the current queue average.  The moving average of the queue depth
       uses the inverse of this value as the factor for the new queue
       depth, and one minus that inverse as the factor for the
       historical average.

       Implementations may choose to limit the acceptable set of values
       to a specified set, such as powers of 2."
   ::= { diffServRandomDropEntry 5 }


diffServRandomDropProbMax OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The worst case random drop probability, expressed in drops per
       thousand packets.

       For example, if every packet may be dropped in the worst case
       (100%), this has the value 1000. Alternatively, if in the worst
       case one percent (1%) of traffic may be dropped, it has the value
       10."
   ::= { diffServRandomDropEntry 6 }

diffServRandomDropStatus OBJECT-TYPE
    SYNTAX       RowStatus
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The RowStatus variable controls the activation, deactivation, or
       deletion of this entry. Any writable variable may be modified
       whether the row is active or notInService."
    ::= { diffServRandomDropEntry 7 }













Baker, Chan, Smith        Expires January 2001         [Page 50]

Internet Draft         Differentiated Services MIB             July 2000


--
-- Queue Table
--

diffServQTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF DiffServQEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "The Queue Table enumerates the individual queues on an
       interface."
    ::= { diffServTables 10 }

diffServQEntry OBJECT-TYPE
    SYNTAX       DiffServQEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "An entry in the Queue Table describes a single queue in one
       direction on an interface."
    INDEX { ifIndex, diffServQIfDirection, diffServQId }
    ::= { diffServQTable 1 }

DiffServQEntry ::= SEQUENCE  {
    diffServQIfDirection             IfDirection,
    diffServQId                      Unsigned32,
    diffServQNext                    RowPointer,
    diffServQPriority                Unsigned32,
    diffServQMinRateAbs              Unsigned32,
    diffServQMinRateRel              Unsigned32,
    diffServQMaxRateAbs              Unsigned32,
    diffServQMaxRateRel              Unsigned32,
    diffServQStatus                  RowStatus
}

diffServQIfDirection OBJECT-TYPE
    SYNTAX  IfDirection
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "Specifies the direction for which this queue entry applies on
       this interface."
    ::= { diffServQEntry 1 }

diffServQId OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   not-accessible





Baker, Chan, Smith        Expires January 2001         [Page 51]

Internet Draft         Differentiated Services MIB             July 2000


    STATUS       current
    DESCRIPTION
       "The Queue Id enumerates the Queue entry. Managers should obtain
       new values for row creation in this table by reading
       diffServQNextFree."
    ::= { diffServQEntry 2 }

diffServQNext OBJECT-TYPE
    SYNTAX       RowPointer
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The Next pointer indicates the next datapath element to handle
       the traffic e.g. a scheduler datapath element.  If the row
       pointed to does not exist, the queue element is considered
       inactive."
    ::= { diffServQEntry 3 }

diffServQPriority OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The priority of this queue, to be used as a parameter to the
       next scheduler element downstream from this one."
    ::= { diffServQEntry 4 }

diffServQMinRateAbs OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "kilobits per second"
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The minimum absolute rate, in kilobits/sec, that a downstream
       scheduler element should allocate to this queue.  If the value is
       zero, then there is effectively no minimum rate guarantee.  If
       the value is non-zero, the scheduler will assure the servicing of
       this queue to at least this rate.

       Note that this attribute's value is coupled to that of
       diffServQMinRateRel: changes to one will affect the value of the
       other. They are linked by the following equation:

         diffServQMinRateRel = diffServQMinRateAbs * 10,000,000/ifSpeed

       or, if appropriate:






Baker, Chan, Smith        Expires January 2001         [Page 52]

Internet Draft         Differentiated Services MIB             July 2000


         diffServQMinRateRel = diffServQMinRateAbs * 10 / ifHighSpeed"
    REFERENCE
        "ifSpeed, ifHighSpeed from [IFMIB]"
    ::= { diffServQEntry 5 }

diffServQMinRateRel OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The minimum rate that a downstream scheduler element should
       allocate to this queue, relative to the maximum rate of the
       interface as reported by ifSpeed or ifHighSpeed, in units of
       1/10,000 of 1.  If the value is zero, then there is effectively
       no minimum rate guarantee.  If the value is non-zero, the
       scheduler will assure the servicing of this queue to at least
       this rate.

       Note that this attribute's value is coupled to that of
       diffServQMinRateAbs: changes to one will affect the value of the
       other. They are linked by the following equation:

         diffServQMinRateAbs = ifSpeed * diffServQMinRateRel/10,000,000

       or, if appropriate:

         diffServQMinRateAbs = ifHighSpeed * diffServQMinRateRel / 10"
    REFERENCE
        "ifSpeed, ifHighSpeed from [IFMIB]"
    ::= { diffServQEntry 6 }

diffServQMaxRateAbs OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "kilobits per second"
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The maximum rate in kilobits/sec that a downstream scheduler
       element should allocate to this queue. If the value is zero, then
       there is effectively no maximum rate limit and that the scheduler
       should attempt to be work-conserving for this queue.  If the
       value is non-zero, the scheduler will limit the servicing of this
       queue to, at most, this rate in a non-work-conserving manner.

       Note that this attribute's value is coupled to that of
       diffServQMaxRateRel: changes to one will affect the value of the
       other. They are linked by the following equation:





Baker, Chan, Smith        Expires January 2001         [Page 53]

Internet Draft         Differentiated Services MIB             July 2000


         diffServQMaxRateRel = diffServQMaxRateAbs * 10,000,000/ifSpeed

       or, if appropriate:

         diffServQMaxRateRel = diffServQMaxRateAbs * 10 / ifHighSpeed"
    REFERENCE
        "ifSpeed, ifHighSpeed from [IFMIB]"
    ::= { diffServQEntry 7 }

diffServQMaxRateRel OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The maximum rate that a downstream scheduler element should
       allocate to this queue, relative to the maximum rate of the
       interface as reported by ifSpeed or ifHighSpeed, in units of
       1/10,000 of 1.  If the value is zero, then there is effectively
       no maximum rate limit and the scheduler should attempt to be
       work-conserving for this queue.  If the value is non-zero, the
       scheduler will limit the servicing of this queue to, at most,
       this rate in a non-work-conserving manner.

       Note that this attribute's value is coupled to that of
       diffServQMaxRateAbs: changes to one will affect the value of the
       other. They are linked by the following equation:

         diffServQMaxRateAbs = ifSpeed * diffServQMaxRateRel/10,000,000

       or, if appropriate:

         diffServQMaxRateAbs = ifHighSpeed * diffServQMaxRateRel / 10"
    REFERENCE
        "ifSpeed, ifHighSpeed from [IFMIB]"
    ::= { diffServQEntry 8 }

diffServQStatus OBJECT-TYPE
    SYNTAX       RowStatus
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The RowStatus variable controls the activation, deactivation, or
       deletion of a queue.  Any writable variable may be modified
       whether the row is active or notInService."
    ::= { diffServQEntry 9 }

diffServQNextFree OBJECT-TYPE





Baker, Chan, Smith        Expires January 2001         [Page 54]

Internet Draft         Differentiated Services MIB             July 2000


    SYNTAX       Unsigned32
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "This object yields a value when read that is currently-unused
       for a diffServQId instance.  If a configuring system attempts to
       create a new row in the diffServQTable using this value, that
       operation will fail if the value has, in the meantime, been used
       to create another row that is currently valid."
    ::= { diffServObjects 8 }


--
-- Scheduler Table
--
-- The Scheduler Table is used for representing packet schedulers:
-- it provides flexibility for multiple scheduling algorithms, each
-- servicing multiple queues, to be used on the same logical/physical
-- interface.

diffServSchedulerTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF DiffServSchedulerEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "The Scheduler Table enumerates packet schedulers.  Multiple
       scheduling algorithms can be used on a given interface, with each
       algorithm described by one diffServSchedulerEntry."
    REFERENCE
        "[MODEL] section 7.1.2"
    ::= { diffServTables 11 }

diffServSchedulerEntry OBJECT-TYPE
    SYNTAX       DiffServSchedulerEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "An entry in the Scheduler Table describing a single instance of
       a scheduling algorithm."
    INDEX { ifIndex, diffServSchedulerIfDirection,
            diffServSchedulerId }
    ::= { diffServSchedulerTable 1 }

DiffServSchedulerEntry ::= SEQUENCE  {
    diffServSchedulerIfDirection          IfDirection,
    diffServSchedulerId                   Unsigned32,
    diffServSchedulerMethod               INTEGER,





Baker, Chan, Smith        Expires January 2001         [Page 55]

Internet Draft         Differentiated Services MIB             July 2000


    diffServSchedulerNext                 RowPointer,
    diffServSchedulerStatus               RowStatus
}

diffServSchedulerIfDirection OBJECT-TYPE
    SYNTAX  IfDirection
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "Specifies the direction for which this scheduler entry applies
       on this interface."
    ::= { diffServSchedulerEntry 1 }

diffServSchedulerId OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
       "This identifies the scheduler entry. Managers should obtain new
       values for row creation in this table by reading
       diffServSchedulerNextFree."
    ::= { diffServSchedulerEntry 2 }

diffServSchedulerMethod OBJECT-TYPE
    SYNTAX       INTEGER {
                     other(1),        -- not listed here
                     priorityq(2),    -- Priority Queueing
                     wrr(3)           -- Weighed Round Robin
                 }
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The scheduling algorithm used by this Scheduler.

        A value of priorityq(2) is used to indicate strict priority
       queueing: only the diffServQPriority attributes of the queues
       feeding this scheduler are used when determining the next packet
       to schedule.

       A value of wrr(3) indicates weighted round-robin scheduling.
       Packets are scheduled from each of the queues feeding this
       scheduler according to all of the parameters of the diffServQueue
       entry."
    REFERENCE
        "[MODEL] section 7.1.2"
    ::= { diffServSchedulerEntry 3 }






Baker, Chan, Smith        Expires January 2001         [Page 56]

Internet Draft         Differentiated Services MIB             July 2000


diffServSchedulerNext OBJECT-TYPE
    SYNTAX       RowPointer
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "Selects the next data path component, which can be another
       scheduler or other TC elements. One usage of multiple scheduler
       elements in series is for Class Base Queueing (CBQ).

       The value zeroDotZero in this variable indicates no further
       DiffServ treatment is performed on this flow by the current
       interface for this interface direction.  For example, for an
       inbound interface the value zeroDotZero indicates that the packet
       flow has now completed inbound DiffServ treatment and should be
       forwarded on to the appropriate outbound interface.  If the row
       pointed to does not exist, the scheduler element is considered
       inactive."
    DEFVAL       { zeroDotZero }
    ::= { diffServSchedulerEntry 4 }

diffServSchedulerStatus OBJECT-TYPE
    SYNTAX       RowStatus
    MAX-ACCESS   read-create
    STATUS       current
    DESCRIPTION
       "The RowStatus variable controls the activation, deactivation, or
       deletion of a queue.  Any writable variable may be modified
       whether the row is active or notInService."
    ::= { diffServSchedulerEntry 5 }

diffServSchedulerNextFree OBJECT-TYPE
    SYNTAX       Unsigned32
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
       "This object yields a value when read that is currently-unused
       for a diffServSchedulerId instance.  If a configuring system
       attempts to create a new row in the diffServSchedulerTable using
       this value, that operation will fail if the value has, in the
       meantime, been used to create another row that is currently
       valid."
    ::= { diffServObjects 9 }










Baker, Chan, Smith        Expires January 2001         [Page 57]

Internet Draft         Differentiated Services MIB             July 2000


--
-- MIB Compliance statements.
--

diffServMIBCompliances OBJECT IDENTIFIER ::= { diffServMIBConformance 1 }
diffServMIBGroups      OBJECT IDENTIFIER ::= { diffServMIBConformance 2 }

diffServMIBCompliance MODULE-COMPLIANCE
    STATUS current
    DESCRIPTION
       "This MIB may be implemented as a read-only or as a read-create
       MIB. As a result, it may be used for monitoring or for
       configuration."
    MODULE -- This Module
    MANDATORY-GROUPS {
        diffServMIBClassifierGroup, diffServMIBSixTupleClfrGroup,
        diffServMIBActionGroup, diffServMIBAlgDropGroup,
        diffServMIBQueueGroup, diffServMIBSchedulerGroup }

-- The groups:
--        diffServMIBCounterGroup
--        diffServMIBHCCounterGroup
--        diffServMIBVHCCounterGroup
--
-- are mutually exclusive; at most one of these groups is implemented
-- for a particular interface.  When any of these groups is implemented
-- for a particular interface, then ifCounterDiscontinuityGroup from
-- [IFMIB]  must also be implemented for that interface.

-- note that the diffServMIBStaticGroup is
-- mandatory for implementations that implement a
-- read-write or read-create mode.

    GROUP diffServMIBCounterGroup
    DESCRIPTION
       "This group is mandatory for table objects indexed by ifIndex for
       which the value of the corresponding instance of ifSpeed is less
       than or equal to 20,000,000 bits/second."

    GROUP diffServMIBHCCounterGroup
    DESCRIPTION
       "This group is mandatory for table objects indexed by ifIndex for
       which the value of the corresponding instance of ifSpeed is
       greater than 20,000,000 bits/second."

    GROUP diffServMIBVHCCounterGroup
    DESCRIPTION





Baker, Chan, Smith        Expires January 2001         [Page 58]

Internet Draft         Differentiated Services MIB             July 2000


       "This group is mandatory for table objects indexed by ifIndex for
       which the value of the corresponding instance of ifSpeed is
       greater than 650,000,000 bits/second."

    GROUP diffServMIBMeterGroup
    DESCRIPTION
       "This group is mandatory for devices that implement metering
       functions."

    GROUP diffServMIBTokenBucketMeterGroup
    DESCRIPTION
       "This group is mandatory for devices that implement token-bucket
       metering functions."

    GROUP diffServMIBDscpMarkActionGroup
    DESCRIPTION
       "This group is mandatory for devices that implement DSCP-Marking
       functions."

    GROUP diffServMIBRandomDropGroup
    DESCRIPTION
       "This group is mandatory for devices that implement Random Drop
       functions."

    GROUP diffServMIBStaticGroup
    DESCRIPTION
       "This group is mandatory for devices that allow creation of rows
       in any of the writable tables of this MIB."

    OBJECT diffServClassifierFilter
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServClassifierNext
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServClassifierPrecedence
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServClassifierStatus
    MIN-ACCESS read-only
    DESCRIPTION





Baker, Chan, Smith        Expires January 2001         [Page 59]

Internet Draft         Differentiated Services MIB             July 2000


       "Write access is not required."

    OBJECT diffServSixTupleClfrDstAddrType
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServSixTupleClfrDstAddr
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServSixTupleClfrDstAddrMask
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServSixTupleClfrSrcAddrType
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServSixTupleClfrSrcAddr
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServSixTupleClfrSrcAddrMask
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServSixTupleClfrDscp
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServSixTupleClfrProtocol
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServSixTupleClfrSrcL4PortMin
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."






Baker, Chan, Smith        Expires January 2001         [Page 60]

Internet Draft         Differentiated Services MIB             July 2000


    OBJECT diffServSixTupleClfrSrcL4PortMax
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServSixTupleClfrDstL4PortMin
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServSixTupleClfrDstL4PortMax
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServSixTupleClfrStatus
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServMeterSucceedNext
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServMeterFailNext
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServMeterSpecific
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServMeterStatus
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServTBMeterRate
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServTBMeterBurstSize
    MIN-ACCESS read-only





Baker, Chan, Smith        Expires January 2001         [Page 61]

Internet Draft         Differentiated Services MIB             July 2000


    DESCRIPTION
       "Write access is not required."

    OBJECT diffServTBMeterStatus
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServActionNext
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServActionSpecific
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServActionStatus
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServCountActStatus
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServAlgDropType
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServAlgDropNext
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServAlgDropQMeasure
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServAlgDropQThreshold
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."





Baker, Chan, Smith        Expires January 2001         [Page 62]

Internet Draft         Differentiated Services MIB             July 2000


    OBJECT diffServAlgDropSpecific
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServAlgDropStatus
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServRandomDropMinThreshBytes
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServRandomDropMaxThreshPkts
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServRandomDropMinThreshBytes
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServRandomDropMaxThreshPkts
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServRandomDropInvWeight
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServRandomDropProbMax
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServRandomDropStatus
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServQNext
    MIN-ACCESS read-only





Baker, Chan, Smith        Expires January 2001         [Page 63]

Internet Draft         Differentiated Services MIB             July 2000


    DESCRIPTION
       "Write access is not required."

    OBJECT diffServQPriority
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServQMinRateAbs
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServQMinRateRel
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServQMaxRateAbs
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServQMaxRateRel
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServQueueStatus
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServSchedulerMethod
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServSchedulerNext
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."

    OBJECT diffServSchedulerStatus
    MIN-ACCESS read-only
    DESCRIPTION
       "Write access is not required."





Baker, Chan, Smith        Expires January 2001         [Page 64]

Internet Draft         Differentiated Services MIB             July 2000


    ::= { diffServMIBCompliances 1 }



















































Baker, Chan, Smith        Expires January 2001         [Page 65]

Internet Draft         Differentiated Services MIB             July 2000


diffServMIBClassifierGroup OBJECT-GROUP
    OBJECTS {
        diffServClassifierFilter, diffServClassifierNext,
        diffServClassifierPrecedence, diffServClassifierStatus
    }
    STATUS current
    DESCRIPTION
       "The Classifier Group defines the MIB Objects that describe a
       generic classifier element."
    ::= { diffServMIBGroups 1 }

diffServMIBSixTupleClfrGroup OBJECT-GROUP
    OBJECTS {
        diffServSixTupleClfrDstAddrType, diffServSixTupleClfrDstAddr,
        diffServSixTupleClfrDstAddrMask, diffServSixTupleClfrDstAddrType,
        diffServSixTupleClfrSrcAddrType, diffServSixTupleClfrSrcAddrMask,
        diffServSixTupleClfrDscp, diffServSixTupleClfrProtocol,
        diffServSixTupleClfrDstL4PortMin,
        diffServSixTupleClfrDstL4PortMax,
        diffServSixTupleClfrSrcL4PortMin,
        diffServSixTupleClfrSrcL4PortMax, diffServSixTupleClfrStatus
    }
    STATUS current
    DESCRIPTION
       "The Six-tuple Classifier Group defines the MIB Objects that
       describe a classifier element for matching on 6 fields of an IP
       and upper-layer protocol header."
    ::= { diffServMIBGroups 2 }

diffServMIBMeterGroup OBJECT-GROUP
    OBJECTS {
        diffServMeterSucceedNext, diffServMeterFailNext,
        diffServMeterSpecific, diffServMeterStatus
    }
    STATUS current
    DESCRIPTION
       "The Meter Group defines the objects used in describing a generic
       meter element."
    ::= { diffServMIBGroups 3 }

diffServMIBTokenBucketMeterGroup OBJECT-GROUP
    OBJECTS {
        diffServTBMeterRate, diffServTBMeterBurstSize
        diffServTBMeterStatus
    }
    STATUS current
    DESCRIPTION





Baker, Chan, Smith        Expires January 2001         [Page 66]

Internet Draft         Differentiated Services MIB             July 2000


       "The Token-Bucket Meter Group defines the objects used in
       describing a single-rate token bucket meter element."
    ::= { diffServMIBGroups 4 }

diffServMIBActionGroup OBJECT-GROUP
    OBJECTS {
        diffServActionNext, diffServActionSpecific,
        diffServActionStatus
    }
    STATUS current
    DESCRIPTION
       "The Action Group defines the objects used in describing a
       generic action element."
    ::= { diffServMIBGroups 5 }

diffServMIBDscpMarkActionGroup OBJECT-GROUP
    OBJECTS {
        diffServDscpMarkActDscp
    }
    STATUS current
    DESCRIPTION
       "The DSCP Mark Action Group defines the objects used in
       describing a DSCP Marking Action element."
    ::= { diffServMIBGroups 6 }

diffServMIBCounterGroup OBJECT-GROUP
    OBJECTS {
        diffServCountActOctets, diffServCountActPkts,
        diffServCountActStatus,
        diffServAlgDropOctets, diffServAlgDropPkts
    }
    STATUS current
    DESCRIPTION
       "A collection of objects providing information specific to non-
       high speed (non-high speed interfaces transmit and receive at
       speeds less than or equal to 20,000,000 bits/second) packet-
       oriented network interfaces."
    ::= { diffServMIBGroups 7 }

diffServMIBHCCounterGroup OBJECT-GROUP
    OBJECTS {
        diffServCountActOctets, diffServCountActHCOctets,
        diffServCountActPkts, diffServCountActStatus,
        diffServAlgDropOctets, diffServAlgDropHCOctets,
        diffServAlgDropPkts
    }
    STATUS current





Baker, Chan, Smith        Expires January 2001         [Page 67]

Internet Draft         Differentiated Services MIB             July 2000


    DESCRIPTION
       "A collection of objects providing information specific to non-
       high speed (non-high speed interfaces transmit and receive at
       speeds less than or equal to 20,000,000 bits/second) packet-
       oriented network interfaces."
    ::= { diffServMIBGroups 8 }

diffServMIBVHCCounterGroup OBJECT-GROUP
    OBJECTS {
        diffServCountActOctets, diffServCountActHCOctets,
        diffServCountActPkts, diffServCountActHCPkts,
        diffServCountActStatus, diffServAlgDropOctets,
        diffServAlgDropHCOctets, diffServAlgDropPkts,
        diffServAlgDropHCPkts
    }
    STATUS current
    DESCRIPTION
       "A collection of objects providing information specific to non-
       high speed (non-high speed interfaces transmit and receive at
       speeds less than or equal to 20,000,000 bits/second) packet-
       oriented network interfaces."
    ::= { diffServMIBGroups 9 }

diffServMIBAlgDropGroup OBJECT-GROUP
    OBJECTS {
        diffServAlgDropType, diffServAlgDropNext,
        diffServAlgDropQMeasure, diffServAlgDropQThreshold,
        diffServAlgDropSpecific, diffServAlgDropStatus
    }
    STATUS current
    DESCRIPTION
       "The Algorithmic Drop Group contains the objects that describe
       algorithmic dropper operation and configuration."
    ::= { diffServMIBGroups 10 }

diffServMIBRandomDropGroup OBJECT-GROUP
    OBJECTS {
            diffServRandomDropMinThreshBytes,
            diffServRandomDropMinThreshPkts,
            diffServRandomDropMaxThreshBytes,
            diffServRandomDropMaxThreshPkts,
         diffServRandomDropInvWeight, diffServRandomDropProbMax
         diffServRandomDropStatus
    }
    STATUS current
    DESCRIPTION
       "The Random Drop Group augments the Algorithmic Drop Group for





Baker, Chan, Smith        Expires January 2001         [Page 68]

Internet Draft         Differentiated Services MIB             July 2000


       random dropper operation and configuration."
    ::= { diffServMIBGroups 11 }

diffServMIBQueueGroup OBJECT-GROUP
    OBJECTS {
        diffServQPriority, diffServQNext, diffServQMinRateAbs,
        diffServQMinRateRel, diffServQMaxRateAbs,
        diffServQMaxRateRel, diffServQStatus
    }
    STATUS current
    DESCRIPTION
       "The Queue Group contains the objects that describe an
       interface's queues."
    ::= { diffServMIBGroups 12 }

diffServMIBSchedulerGroup OBJECT-GROUP
    OBJECTS {
        diffServSchedulerMethod, diffServSchedulerNext,
        diffServSchedulerStatus
    }
    STATUS current
    DESCRIPTION
       "The Scheduler Group contains the objects that describe packet
       schedulers on interfaces."
    ::= { diffServMIBGroups 13 }

diffServMIBStaticGroup OBJECT-GROUP
    OBJECTS {
        diffServClassifierNextFree, diffServSixTupleClfrNextFree,
        diffServMeterNextFree, diffServActionNextFree,
        diffServAlgDropNextFree, diffServQNextFree, diffServSchedulerNextFree
    }
    STATUS current
    DESCRIPTION
       "The Static Group contains readable scalar objects used in
       creating unique identifiers for classifiers, meters, actions and
       queues. These are required whenever row creation operations on
       such tables are supported."
    ::= { diffServMIBGroups 14 }
END












Baker, Chan, Smith        Expires January 2001         [Page 69]

Internet Draft         Differentiated Services MIB             July 2000


7.  Acknowledgments

This MIB builds on all the work that has gone into the Informal
Management Model for Diffserv routers. It has been developed with the
active involvement of many people, but most notably Yoram Bernet, Steve
Blake, Brian Carpenter, Dave Durham, Jeremy Greene, Dan Grossman, Roch
Guerin, Scott Hahn, Keith McCloghrie, Bob Moore, Kathleen Nichols, Ping
Pan, Nabil Seddigh and Bert Wijnen.


8.  Security Considerations

It is clear that this MIB is potentially useful for configuration, and
anything that can be configured can be misconfigured, with potentially
disastrous effect.

At this writing, no security holes have been identified beyond those
that SNMP Security is itself intended to address. These relate primarily
to controlled access to sensitive information and the ability to
configure a device - or which might result from operator error, which is
beyond the scope of any security architecture.

There are a number of management objects defined in this MIB that have a
MAX-ACCESS clause of read-write and/or read-create. Such objects may be
considered sensitive or vulnerable in some network environments.  The
support for SET operations in a non-secure environment without proper
protection can have a negative effect on network operations. The use of
SNMP Version 3 is recommended over prior versions for configuration
control as its security model is improved.

There are a number of managed objects in this MIB that may contain
information that may be sensitive from a business perspective, in that
they may represent a customer's service contract or the filters that the
service provider chooses to apply to a customer's ingress or egress
traffic. There are no objects which are sensitive in their own right,
such as passwords or monetary amounts.

It may be important to control even GET access to these objects and
possibly to even encrypt the values of these object when sending them
over the network via SNMP. Not all versions of SNMP provide features for
such a secure environment.

SNMPv1 by itself is not a secure environment. Even if the network itself
is secure (for example by using IPSec), even then, there is no control
as to who on the secure network is allowed to access and GET/SET
(read/change/create/delete) the objects in this MIB.






Baker, Chan, Smith        Expires January 2001         [Page 70]

Internet Draft         Differentiated Services MIB             July 2000


It is recommended that the implementers consider the security features
as provided by the SNMPv3 framework. Specifically, the use of the User-
based Security Model [12] and the View-based Access Control Model [15]
is recommended.

It is then a customer/user responsibility to ensure that the SNMP entity
giving access to an instance of this MIB, is properly configured to give
access to the objects only to those principals (users) that have
legitimate rights to indeed GET or SET (change/create/delete) them.


9.  References

[1]  Harrington, D., Presuhn, R., and B. Wijnen, "An Architecture for
     Describing SNMP Management Frameworks", RFC 2571, Cabletron
     Systems, Inc., BMC Software, Inc., IBM T. J. Watson Research, April
     1999

[2]  Rose, M., and K. McCloghrie, "Structure and Identification of
     Management Information for TCP/IP-based Internets", RFC 1155, STD
     16, Performance Systems International, Hughes LAN Systems, May 1990

[3]  Rose, M., and K. McCloghrie, "Concise MIB Definitions", RFC 1212,
     STD 16, Performance Systems International, Hughes LAN Systems,
     March 1991

[4]  M. Rose, "A Convention for Defining Traps for use with the SNMP",
     RFC 1215, Performance Systems International, March 1991

[5]  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose, M.,
     and S. Waldbusser, "Structure of Management Information Version 2
     (SMIv2)", RFC 2578, STD 58, Cisco Systems, SNMPinfo, TU
     Braunschweig, SNMP Research, First Virtual Holdings, International
     Network Services, April 1999

[6]  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose, M.,
     and S. Waldbusser, "Textual Conventions for SMIv2", RFC 2579, STD
     58, Cisco Systems, SNMPinfo, TU Braunschweig, SNMP Research, First
     Virtual Holdings, International Network Services, April 1999

[7]  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose, M.,
     and S. Waldbusser, "Conformance Statements for SMIv2", RFC 2580,
     STD 58, Cisco Systems, SNMPinfo, TU Braunschweig, SNMP Research,
     First Virtual Holdings, International Network Services, April 1999

[8]  Case, J., Fedor, M., Schoffstall, M., and J. Davin, "Simple Network
     Management Protocol", RFC 1157, STD 15, SNMP Research, Performance





Baker, Chan, Smith        Expires January 2001         [Page 71]

Internet Draft         Differentiated Services MIB             July 2000


     Systems International, Performance Systems International, MIT
     Laboratory for Computer Science, May 1990.

[9]  Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,
     "Introduction to Community-based SNMPv2", RFC 1901, SNMP Research,
     Inc., Cisco Systems, Inc., Dover Beach Consulting, Inc.,
     International Network Services, January 1996.

[10] Case, J., McCloghrie, K., Rose, M., and S. Waldbusser, "Transport
     Mappings for Version 2 of the Simple Network Management Protocol
     (SNMPv2)", RFC 1906, SNMP Research, Inc., Cisco Systems, Inc.,
     Dover Beach Consulting, Inc., International Network Services,
     January 1996.

[11] Case, J., Harrington D., Presuhn R., and B. Wijnen, "Message
     Processing and Dispatching for the Simple Network Management
     Protocol (SNMP)", RFC 2572, SNMP Research, Inc., Cabletron Systems,
     Inc., BMC Software, Inc., IBM T. J. Watson Research, April 1999

[12] Blumenthal, U., and B. Wijnen, "User-based Security Model (USM) for
     version 3 of the Simple Network Management Protocol (SNMPv3)", RFC
     2574, IBM T. J. Watson Research, April 1999

[13] Case, J., McCloghrie, K., Rose, M., and S. Waldbusser, "Protocol
     Operations for Version 2 of the Simple Network Management Protocol
     (SNMPv2)", RFC 1905, SNMP Research, Inc., Cisco Systems, Inc.,
     Dover Beach Consulting, Inc., International Network Services,
     January 1996.

[14] Levi, D., Meyer, P., and B. Stewart, "SNMPv3 Applications", RFC
     2573, SNMP Research, Inc., Secure Computing Corporation, Cisco
     Systems, April 1999

[15] Wijnen, B., Presuhn, R., and K. McCloghrie, "View-based Access
     Control Model (VACM) for the Simple Network Management Protocol
     (SNMP)", RFC 2575, IBM T. J. Watson Research, BMC Software, Inc.,
     Cisco Systems, Inc., April 1999

[16] Case, J., Mundy, R., Partain, D., and B. Stewart, "Introduction to
     Version 3 of the Internet-standard Network Management Framework",
     RFC 2570, SNMP Research, Inc., TIS Labs at Network Associates,
     Inc., Ericsson, Cisco Systems, April 1999

[ACTQMGMT]
     V. Firoiu, M. Borden "A Study of Active Queue Management for
     Congestion Control", March 2000, In IEEE Infocom 2000,
     http://www.ieee-infocom.org/2000/papers/405.pdf





Baker, Chan, Smith        Expires January 2001         [Page 72]

Internet Draft         Differentiated Services MIB             July 2000


[AF-PHB]
     J. Heinanen, F. Baker, W. Weiss, J. Wroclawski, "Assured Forwarding
     PHB Group.", RFC 2597, June 1999.

[DSARCH]
     S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, W. Weiss, "An
     Architecture for Differentiated Service", RFC 2475, December 1998.

[DSFIELD]
     K. Nichols, S. Blake, F. Baker, D. Black, "Definition of the
     Differentiated Services Field (DS Field) in the IPv4 and IPv6
     Headers", RFC 2474, December 1998.

[DSPIB]
     M. Fine, K. McCloghrie, J. Seligson, K. Chan, S. Hahn, A. Smith,
     "Differentiated Services Policy Information Base", Internet Draft
     <draft-ietf-diffserv-pib-00.txt>, March 2000

[DSTERMS]
     D. Grossman, "New Terminology for Diffserv", Internet Draft <draft-
     ietf-diffserv-new-terms-02.txt>, November 1999.

[EF-PHB]
     V. Jacobson, K. Nichols, K. Poduri, "An Expedited Forwarding PHB."
     RFC 2598, June 1999.

[IFMIB]
     K. McCloghrie, F. Kastenholz, "The Interfaces Group MIB using
     SMIv2", RFC 2233, November 1997.

[INETADDRESS]
     Daniele, M., Haberman, B., Routhier, S., Schoenwaelder, J.,
     "Textual Conventions for Internet Network Addresses.", RFC 2851,
     June 2000.

[INTSERVMIB]
     F. Baker, J. Krawczyk, A. Sastry, "Integrated Services Management
     Information Base using SMIv2", RFC 2213, September 1997.

[MODEL]
     Y. Bernet, S. Blake, A. Smith, D. Grossman, "An Informal Management
     Model for Diffserv Routers", Internet Draft <draft-ietf-diffserv-
     model-04.txt>, July 2000.

[POLTERM]
     F. Reichmeyer,  D. Grossman, J. Strassner, M. Condell, "A Common
     Terminology for Policy Management", Internet Draft <draft-





Baker, Chan, Smith        Expires January 2001         [Page 73]

Internet Draft         Differentiated Services MIB             July 2000


     reichmeyer-polterm-terminology-00.txt>, March 2000

[QUEUEMGMT]
     B. Braden et al., "Recommendations on Queue Management and
     Congestion Avoidance in the Internet", RFC 2309, April 1998.

[RED93]
     "Random Early Detection", 1993.



10.  Authors' Addresses

     Fred Baker
     Cisco Systems
     519 Lado Drive
     Santa Barbara, California 93111
     fred@cisco.com

     Kwok Ho Chan
     Nortel Networks
     600 Technology Park Drive
     Billerica, MA 01821
     khchan@nortelnetworks.com

     Andrew Smith
     ah_smith@pacbell.net



Table of Contents

1 The SNMP Management Framework ...................................    2
2 Introduction ....................................................    3
2.1 Relationship to the Diffserv Informal Management Model ........    3
2.2 Relationship to other MIBs and Policy Management ..............    3
2.3 MIB Overview ..................................................    4
3 Structure of this MIB ...........................................    5
3.1 Classifiers ...................................................    5
3.1.1 Classifier Table ............................................    5
3.1.2 IP Six-Tuple Classifier Table ...............................    6
3.2 Meters ........................................................    6
3.2.1 Meter Table .................................................    6
3.2.2 Token-Bucket Meter Table ....................................    7
3.3 Actions .......................................................    7
3.3.1 DSCP Mark Action Table ......................................    7
3.3.2 Count Action Table ..........................................    8





Baker, Chan, Smith        Expires January 2001         [Page 74]

Internet Draft         Differentiated Services MIB             July 2000


3.3.3 Absolute Drop Action ........................................    8
3.4 Queueing Elements .............................................    8
3.4.1 Algorithmic Dropper Table ...................................    8
3.4.2 Random Dropper Table ........................................    9
3.4.3 Queues and Schedulers .......................................   11
3.4.4 Example of Algorithmic Droppers, Queues and Schedulers ......   12
4 Conventions used in this MIB ....................................   13
4.1 The use of RowPointer .........................................   13
4.2 Conceptual row creation and deletion ..........................   14
5 Editorial information ...........................................   15
5.1 Open Issues resolved in previous drafts .......................   15
5.2 Open Issues resolved in this draft ............................   17
5.3 Still Open Issues .............................................   18
6 MIB Definition ..................................................   19
7 Acknowledgments .................................................   70
8 Security Considerations .........................................   70
9 References ......................................................   71
10 Authors' Addresses .............................................   74


































Baker, Chan, Smith        Expires January 2001         [Page 75]

Internet Draft         Differentiated Services MIB             July 2000


11.  Full Copyright

   Copyright (C) The Internet Society (2000). All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implmentation may be prepared, copied, published and
   distributed, in whole or in part, without restriction of any kind,
   provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works. However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

























Baker, Chan, Smith        Expires January 2001         [Page 76]
