LoST-URI = "lost:" host

xmlns="urn:ietf:params:xml:ns:lost1"
serviceBoundary="value"
recursive="true">

expires="2007-01-01T01:44:33Z"
lastUpdated="2006-11-01T01:00:00Z"
source="lost:authoritative.example"
sourceId="7e3f40b098c711dbb6060800200c9a66" version="1">
recursive="true" serviceBoundary="value">
profile="civic">
xmlns="urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr">
expires="2007-01-01T01:44:33Z"
lastUpdated="2006-11-01T01:00:00Z"
source="lost:esgw.ueber-110.de.example"
sourceId="e8b05a41d8d1415b80f2cdbb96ccf109" version="1" >
profile="urn:ietf:params:lost:location-profile:basic-civic">
xmlns="urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr">
xmlns="urn:ietf:params:xml:ns:lost1"
recursive="true"
validateLocation="true"
serviceBoundary="value">
xmlns="urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr">
expires="2007-01-01T01:44:33Z"
lastUpdated="2006-11-01T01:00:00Z"
source="lost:authoritative.example"
sourceId="4db898df52b84edfa9b6445ea8a0328e"
version="1" >
xmlns="urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr">
xmlns="urn:ietf:params:xml:ns:lost1"
recursive="true"
serviceBoundary="reference">
expires="2007-01-01T01:44:33Z"
lastUpdated="2006-11-01T01:00:00Z"
source="lost:authoritative.example"
sourceId="7e3f40b098c711dbb6060800200c9a66"
version="1">
source="lost:authoritative.example"
key="7214148E0433AFE2FA2D48003D31172E" />
key="7214148E0433AFE2FA2D48003D31172E"/>

xmlns="urn:ietf:params:xml:ns:lost1">
profile="civic">
           <civicAddress
xmlns="urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr">
xmlns="urn:ietf:params:xml:ns:lost1">
xmlns="urn:ietf:params:xml:ns:lost1">
xmlns="urn:ietf:params:xml:ns:lost1"
recursive="true">
xmlns="urn:ietf:params:xml:ns:lost1">
xmlns="urn:ietf:params:xml:ns:lost1"
recursive="true"
serviceBoundary="value">
xmlns="urn:ietf:params:xml:ns:lost1"
expires="2007-01-01T01:44:33Z"
lastUpdated="2006-11-01T01:00:00Z"
source="lost:authoritative.example"
sourceId="cf19bbb038fb4ade95852795f045387d"
version="1">
source="lost:resolver.example">
      <internalError message="Software bug." xml:lang="en"/>
target="lost:eastpsap.example"
source="lost:westpsap.example"
message="We have temporarily failed over." xml:lang="en"/>

                 Figure 19: Example of a redirect resonse
start =
  findService
  | listServices
  | listServicesByLocation
  | getServiceBoundary
  | findServiceResponse
  | listServicesResponse
  | listServicesByLocationResponse
  | getServiceBoundaryResponse
  | errors
  | redirect

findService =
    element ns1:findService {
      element ns1:location { locationInformation }+,
      commonRequestPattern,
      attribute validateLocation {
        xsd:boolean >> a:defaultValue [ "false" ]
      }?,
      attribute serviceBoundary {
        ("reference" | "value") >> a:defaultValue [ "reference" ]
      }?,
      attribute recursive { xsd:boolean >> a:defaultValue [ "true" ] }?
    }
listServices = element ns1:listServices { commonRequestPattern }
listServicesByLocation =
    element ns1:listServicesByLocation {
      element ns1:location { locationInformation }*,
      commonRequestPattern,
      attribute recursive { xsd:boolean >> a:defaultValue [ "true" ] }?
    }
getServiceBoundary =
    element ns1:getServiceBoundary {
      serviceBoundaryKey, extensionPoint
    }
findServiceResponse =
    element ns1:findServiceResponse {
      mapping+, locationValidation?, commonResponsePattern
    }
listServicesResponse =
    element ns1:listServicesResponse {
      serviceList, commonResponsePattern
    }
listServicesByLocationResponse =
    element ns1:listServicesByLocationResponse {
      serviceList, commonResponsePattern
    }
getServiceBoundaryResponse =
    element ns1:getServiceBoundaryResponse {
      serviceBoundary, commonResponsePattern
    }
commonRequestPattern = service, extensionPoint
commonResponsePattern = warnings*, path, extensionPoint
locationInformation =
    extensionPoint+,
    attribute profile { xsd:NMTOKEN }
serviceBoundary = element ns1:serviceBoundary { locationInformation }+
serviceBoundaryReference =
    element ns1:serviceBoundaryReference {
      source, serviceBoundaryKey, extensionPoint
    }
serviceBoundaryKey = attribute key { xsd:token }
path =
    element ns1:path {
      element ns1:via { source, extensionPoint }*
    }
expires = attribute expires { xsd:dateTime }
qnameList = list { xsd:QName* }
mapping =
    element ns1:mapping {
      element ns1:displayName {
        xsd:string,
        attribute xml:lang { xsd:language }
      }*,
      service,
      (serviceBoundary | serviceBoundaryReference)?,
      element ns1:uri { xsd:anyURI }*,
      element ns1:serviceNumber {
        xsd:string { pattern = "[0-9*#]+" }
      }?,
      extensionPoint,
      expires,
      attribute lastUpdated { xsd:dateTime },
      source,
      attribute sourceId { xsd:token },
      attribute version { xsd:positiveInteger },
      message
    }
locationValidation =
    element ns1:locationValidation {
      element ns1:valid { qnameList }?,
      element ns1:invalid { qnameList }?,
      element ns1:unchecked { qnameList }?,
      extensionPoint
    }
errorContainer =
    (badRequest?
     & internalError?
     & serviceSubstitution?
     & forbidden?
     & notFound?
     & loop?
     & serviceNotImplemented?
     & serverTimeout?
     & serverError?
     & locationProfileUnrecognized?),
    extensionPoint,
    source
errors = element ns1:errors { errorContainer }
warnings = element ns1:warnings { errorContainer }
basicError = message, extensionPoint
badRequest = element ns1:badRequest { basicError }
internalError = element ns1:internalError { basicError }
serviceSubstitution = element ns1:serviceSubstitution { basicError }
forbidden = element ns1:forbidden { basicError }
notFound = element ns1:notFound { basicError }
loop = element ns1:loop { basicError }
serviceNotImplemented =
    element ns1:serviceNotImplemented { basicError }
serverTimeout = element ns1:serverTimeout { basicError }
serverError = element ns1:serverError { basicError }
locationProfileUnrecognized =
    element ns1:locationProfileUnrecognized {
      attribute unsupportedProfiles { xsd:NMTOKENS },
      basicError
    }
redirect =
    element ns1:redirect {
      attribute target { xsd:anyURI },
      source,
      message,
      extensionPoint
    }
message =
    (attribute message { xsd:string },
     attribute xml:lang { xsd:language })?
service = element ns1:service { xsd:anyURI }?
source = attribute source { xsd:anyURI }
serviceList =
    element ns1:serviceList {
      list { xsd:anyURI* }
    }
notLost = element * - (ns1:* | ns1:*) { anyElement }

anyElement =
    (element * { anyElement }
     | attribute * { text }
     | text)*

extensionPoint = notLost*

point2d =
    element Point {
      attribute srsName { "urn:ogc:def:crs:EPSG::4326" },
      pos
    }

pos =
    element pos {
      list { xsd:double }
    }

linearRing = element LinearRing { pos, pos, pos, pos+ }

polygon =
    element Polygon {
      attribute srsName { "urn:ogc:def:crs:EPSG::4326" },
      element exterior { linearRing },
      element interior { linearRing }*
    }
content="text/html;charset=iso-8859-1"/>
xmlns="http://relaxng.org/ns/structure/1.0"
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

ns="http://www.opengis.net/gml">
ns="http://www.opengis.net/gml">
