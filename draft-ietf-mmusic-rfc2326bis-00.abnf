smpte=10:12:33:20-
smpte=10:07:33-
smpte=10:07:00-10:07:33:05.01
smpte-25=10:07:00-10:07:33:05.01



npt=123.45-125
npt=12:05:35.3-
npt=now-




        The syntax conforms to ISO 8601. The npt-sec notation is
        optimized for automatic generation, the ntp-hhmmss notation
        for consumption by human readers. The "now" constant allows
        clients to request to receive the live feed rather than the
        stored or time-delayed version. This is needed since
        neither absolute time nor zero time are appropriate for
        this case.

general-header      =       Cache-Control      ; Section 12.9
Request                  =         Request-Line     ; Section 6.1
Method         =          "DESCRIBE"         ; Section 10.2
request-header          =          Accept             ; Section 12.1
Response                 =         Status-Line       ;  Section 7.1
Status-Code        =         "100"                                   ;  Continue
extension-code  =  3DIGIT
Reason-Phrase   =  *<TEXT,  excluding CR, LF>


response-header          =           Location           ; Section 12.26
entity-header            =          Allow              ; Section 12.5
extension-header         =          message-header


v=0
o=mhandley 2890844526 2890842807 IN IP4 126.16.64.4
s=SDP Seminar
i=A Seminar on the session description protocol
u=http://www.cs.ucl.ac.uk/staff/M.Handley/sdp.03.ps
e=mjh@isi.edu (Mark Handley)
c=IN IP4 224.2.17.12/127
t=2873397496 2873404696
a=recvonly
m=audio 3456 RTP/AVP 0
m=video 2232 RTP/AVP 31
m=whiteboard 32416 UDP WB
a=orient:portrait



v=0
o=mhandley 2890844526 2890845468 IN IP4 126.16.64.4
s=SDP Seminar
i=A Seminar on the session description protocol
u=http://www.cs.ucl.ac.uk/staff/M.Handley/sdp.03.ps
e=mjh@isi.edu (Mark Handley)
c=IN IP4 224.2.17.12/127
t=2873397496 2873404696
a=recvonly
m=audio 3456 RTP/AVP 0
m=video 2232 RTP/AVP 31

client_port=4588-4589;server_port=6256-6257



seq=232433;rtptime=972948234

Cache-Control                          =               "Cache-Control" ":" 1#cache-directive
cache-directive                        =               cache-request-directive
cache-request-directive                =               "no-cache"
cache-response-directive               =               "public"
cache-extension                        =               token [ "=" ( token | quoted-string ) ]
        no-cache: Indicates that the media stream MUST NOT be cached
             anywhere. This allows an origin server to prevent caching
             even by caches that have been configured to return stale
             responses to client requests.

        public: Indicates that the media stream is cacheable by any
             cache.

        private: Indicates that the media stream is intended for a
             single user and MUST NOT be cached by a shared cache. A
             private (non-shared) cache may cache the media stream.

        no-transform: An intermediate cache (proxy) may find it useful
             to convert the media type of a certain stream. A proxy
             might, for example, convert between video formats to save
             cache space or to reduce the amount of traffic on a slow
             link. Serious operational problems may occur, however, when
             these transformations have been applied to streams intended
             for certain kinds of applications. For example,
             applications for medical imaging, scientific data analysis
             and those using end-to-end authentication all depend on
             receiving a stream that is bit-for-bit identical to the
             original entity-body. Therefore, if a response includes the
             no-transform directive, an intermediate cache or proxy MUST
             NOT change the encoding of the stream. Unlike HTTP, RTSP
             does not provide for partial transformation at this point,
             e.g., allowing translation into a different language.

        only-if-cached: In some cases, such as times of extremely poor
             network connectivity, a client may want a cache to return
             only those media streams that it currently has stored, and
             not to receive these from the origin server. To do this,
             the client may include the only-if-cached directive in a
             request. If it receives this directive, a cache SHOULD
             either respond using a cached media stream that is
             consistent with the other constraints of the request, or
             respond with a 504 (Gateway Timeout) status. However, if a
             group of caches is being operated as a unified system with
             good internal connectivity, such a request MAY be forwarded
             within that group of caches.

        max-stale: Indicates that the client is willing to accept a
             media stream that has exceeded its expiration time. If
             max-stale is assigned a value, then the client is willing
             to accept a response that has exceeded its expiration time
             by no more than the specified number of seconds. If no
             value is assigned to max-stale, then the client is willing
             to accept a stale response of any age.
        min-fresh: Indicates that the client is willing to accept a
             media stream whose freshness lifetime is no less than its
             current age plus the specified time in seconds. That is,
             the client wants a response that will still be fresh for at
             least the specified number of seconds.

        must-revalidate: When the  must-revalidate directive is present
             in a SETUP response received by a cache, that cache MUST
             NOT use the entry after it becomes stale to respond to a
             subsequent request without first revalidating it with the
             origin server.  That is, the cache must do an end-to-end
             revalidation every time, if, based solely on the origin
             server's  Expires, the cached response is stale.)

url=rtsp://foo.com/bar.avi/streamid=1;seq=30211



Speed = "Speed" ":" 1*DIGIT [ "." *DIGIT ]


port=3456-3457

port=3456-3457
port=3456-3457

transport-spec                                                 =                        transport-id *parameter
transport-id                                                   =                        transport-protocol "/" profile ["/" lower-transport]
transport-protocol                                             =                        "RTP" | token
profile                                                        =                        "AVP" | token
lower-transport                                                =                        "TCP" | "UDP" | token
parameter                                                      =                        ";" ( "unicast" | "multicast" )
ttl                                                            =                        1*3(DIGIT)
port                                                           =                        1*5(DIGIT)
ssrc                                                           =                        8*8(HEX)
channel                                                        =                        1*3(DIGIT)
address                                                        =                        host
mode-spec                                                      =                        <"> 1#mode <"> | mode
mode                                                           =                        "PLAY" | "RECORD" | token


server_port=6256-6257;mode="PLAY"



v=0
o=- 2890844526 2890842807 IN IP4 192.16.24.202
s=RTSP Session
m=audio 0 RTP/AVP 0
a=control:rtsp://audio.example.com/twister/audio.en
m=video 0 RTP/AVP 31
a=control:rtsp://video.example.com/twister/video

server_port=5000-5001

server_port=5002-5003

seq=12312232;rtptime=78712811

seq=876655;rtptime=1032181

v=0
o=- 2890844256 2890842807 IN IP4 172.16.2.93
s=RTSP Session
i=An Example of RTSP Session Usage
a=control:rtsp://foo/twister
t=0 0
m=audio 0 RTP/AVP 0
a=control:rtsp://foo/twister/audio
m=video 0 RTP/AVP 26
a=control:rtsp://foo/twister/video
server_port=9000-9001
server_port=9004-9005
seq=9810092;rtptime=3450012

v=0
o=- 872653257 872653257 IN IP4 172.16.2.187
s=mu-law wave file
i=audio test
t=0 0
m=audio 0 RTP/AVP 0
a=control:streamid=0

client_port=6970-6971;mode="PLAY"
server_port=6970-6971;mode="PLAY"
seq=981888;rtptime=3781123



v=0
o=- 2890844526 2890842807 IN IP4 192.16.24.202
s=RTSP Session
m=audio 3456 RTP/AVP 0
c=IN IP4 224.2.0.1/16
a=control:rtsp://live.example.com/concert/audio

port=3456-3457;ttl=16
v=0
o=- 2890844526 2890842807 IN IP4 192.16.24.202
s=RTSP Session
i=See above
t=0 0
m=audio 0 RTP/AVP 0

port=7000-7001;ttl=127
port=7000-7001;ttl=127
v=0
o=camera1 3080117314 3080118787 IN IP4 195.27.192.36
s=IETF Meeting, Munich - 1
i=The thirty-ninth IETF meeting will be held in Munich, Germany
u=http://www.ietf.org/meetings/Munich.html
e=IETF Channel 1 <ietf39-mbone@uni-koeln.de>
p=IETF Channel 1 +49-172-2312 451
c=IN IP4 224.0.1.11/127
t=3080271600 3080703600
a=tool:sdr v2.4a6
a=type:test
m=audio 21010 RTP/AVP 5
c=IN IP4 224.0.1.11/127
a=ptime:40
m=video 61010 RTP/AVP 31
c=IN IP4 224.0.1.12/127

port=21010-21011;mode=record;ttl=127

port=21010-21011;mode=record;ttl=127

port=61010-61011;mode=record;ttl=127

port=61010-61011;mode=record;ttl=127

a=control:rtsp://example.com/foo



m=audio 0 RTP/AVP 31



a=range:npt=0-34.4368
a=range:clock=19971113T2115-19971113T2203



a=etag:158bb3e7c7fd62ce67f12b533f06b83a




        One could argue that the "o=" field provides identical
        functionality. However, it does so in a manner that would
        put constraints on servers that need to support multiple
        session description types other than SDP for the same piece
        of media content.

v=0
o=- 2890844256 2890842807 IN IP4 204.34.34.32
s=I came from a web page
c=IN IP4 0.0.0.0
t=0 0
m=video 8002 RTP/AVP 31
a=control:rtsp://audio.com/movie.aud
m=audio 8004 RTP/AVP 3
a=control:rtsp://video.com/movie.vid



v=0
o=- 2890844256 2890842807 IN IP4 204.34.34.32
s=I contain
i=<more info>
c=IN IP4 0.0.0.0
t=0 0
a=control:rtsp://example.com/movie/
m=video 8002 RTP/AVP 31
a=control:trackID=1
m=audio 8004 RTP/AVP 3
a=control:trackID=2



