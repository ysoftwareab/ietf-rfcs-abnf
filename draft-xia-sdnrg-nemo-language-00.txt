



SDNRG                                                        Y. Xia, Ed.
Internet-Draft                                             S. Jiang, Ed.
Intended status: Standards Track                            T. Zhou, Ed.
Expires: January 5, 2015                                        S. Hares
                                            Huawei Technologies Co., Ltd
                                                            July 4, 2014


                    NEMO (NEtwork MOdeling) Language
                    draft-xia-sdnrg-nemo-language-00

Abstract

   The North-Bound Interface (NBI), located between the network control
   plane and the applications, is essential to enable the application
   innovations and nourish the eco-system of SDN.

   While most of the NBIs are provided in the form of API, this document
   proposes the NEtwork MOdeling (NEMO) language which is anther NBI
   fashion.  Concept, model and syntax are introduced in the document.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 5, 2015.

Copyright Notice

   Copyright (c) 2014 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



Xia, et al.              Expires January 5, 2015                [Page 1]

Internet-Draft          NEtwork MOdeling Language              July 2014


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   4
   3.  Related work  . . . . . . . . . . . . . . . . . . . . . . . .   4
   4.  The NEMO Language overview  . . . . . . . . . . . . . . . . .   5
     4.1.  Network Model of the NEMO Language  . . . . . . . . . . .   5
     4.2.  Primitives  . . . . . . . . . . . . . . . . . . . . . . .   7
   5.  The NEMO Language Examples  . . . . . . . . . . . . . . . . .   9
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .  10
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  10
   8.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  10
   9.  Informative References  . . . . . . . . . . . . . . . . . . .  10
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  11

1.  Introduction

   While SDN (Software Defined Network) is becoming one of the most
   important directions of network evolution, the essence of SDN is to
   make the network more flexible and easy to use.  The North-Bound
   Interface (NBI), located between the control plane and the
   applications, is essential to enable the application innovations and
   nourish the eco-system of SDN by abstracting the network
   capabilities/information and opening the abstract/logic network to
   applications.

   The NBI is usually provided in the form of API (Application
   Programming Interface).  Different vendors provide self-defined API
   sets.  Each API set, such as OnePK from Cisco and OPS from Huawei,
   often contains hundreds of specific APIs.  Diverse APIs without
   consistent style are hard to remember and use, and nearly impossible
   to be standardized.

   Most of those APIs are designed by network domain experts, who are
   used to thinking from the network system perspective.  The interface
   designer does not know how the users will use the device and exposes
   information details as much as possible.  It enables better control
   of devices, but leaves huge burden of selecting useful information to
   users without well training.  Since the NBI is used by network users,
   a more appropriate design is to think from the user perspective and
   abstract the network from the top down.
   [I-D.sdnrg-service-description-language] describe the requirements
   for a service description language and the design considerations.



Xia, et al.              Expires January 5, 2015                [Page 2]

Internet-Draft          NEtwork MOdeling Language              July 2014


   A top-down NBI design contains following features:

   o  Express user intent

      To simplify the operation, applications or users can use the NBI
      directly to describe their requirements for the network without
      taking care of the implementation.  All the parameters without
      user concern will be concealed by the NBI.

   o  Platform independent

      With the NBI, the application or user can describe network demand
      in a generic way, so that any platform or system can get the
      identical knowledge and consequently execute to the same result.
      Any low-level and device/vendor specific configurations and
      dependencies should be avoided.

   o  Intuitive domain specific language (DSL) for network

      The expression of the DSL should be human-friendly and be easily
      understood by network operators.  DSL should be directly used by
      the system.

   o  Privilege control

      Every application or user is authorized within a specific network
      domain, which can be physical or virtual.  While different network
      domains are isolated without impact, the application or user may
      have access to all the resource and capabilities within its
      domain.  The user perception of the network does not have to be
      the same as the network operators.  The proposed NEtwork MOdeling
      (NEMO) language works on the user's view so the users can create
      topologies based on the resources the network-operators allow them
      to have.

   o  Declarative style

      As described above, NEMO language is designed to help defining
      service requirement to network, detailed configurations and
      instructions performed by network devices are opaque to network
      operators.  So NEMO language should be declarative rather than
      imperative.

   To implement such an NBI design, we can learn from the successful
   case of SQL (Structured Query Language), which simplified the
   complicated data operation to a unified and intuitive way in the form
   of language.  Applications do not care about the way of data storage
   and data operation, but to describe the demand for the data storage



Xia, et al.              Expires January 5, 2015                [Page 3]

Internet-Draft          NEtwork MOdeling Language              July 2014


   and operation and then get the result.  As a data domain DSL, SQL is
   simple and intuitive, and can be embedded in applications.  So what
   we need for the network NBI is a set of "network domain SQL".

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119] when they appear in ALL CAPS.  When these words are not in
   ALL CAPS (such as "should" or "Should"), they have their usual
   English meanings, and are not to be interpreted as [RFC2119] key
   words.

   Network service  also "service" for short, is the service logic that
        contains network operation requirements;

   Network APP  also "APP" for short, is the application to implement
        the network service;

   Network user  also "user" for short, is the network administrator or
        operator.

3.  Related work

   YANG is a data modeling language used to model configuration and
   state data manipulated by the Network Configuration Protocol
   (NETCONF), NETCONF remote procedure calls, and NETCONF notifications
   [RFC6020].  Although it is extensible for more data modeling in
   addition to NETCONF, YANG is not capable of describing high level
   network requirements, such as SLA (Service Level Agreement).  YANG is
   designed for north-bound interfaces of the device, which is also the
   south-bound of the controller.  It is not proper to model the north-
   bound interface of the controller, aka the NBI.  Moreover, the YANG
   is not capable of describing the service processing logic, which
   typically includes transition of conditions and states.

   UML (Unified Modeling Language) is a powerful modeling language,
   which is domain agnostic.  It is hard to describe the network demand,
   and cannot be embedded in network applications.  UML is appropriate
   to describe the model behind the NBI language not the NBI itself.

   With the emergence of the SDN concept, it is a consensus to simplify
   the network operation, which leads to many cutting-edge explorations
   in the academic area.

   Nick McKeown from Stanford University proposed the SFNet [TSFNet],
   which translated the high level network demand to the underlying



Xia, et al.              Expires January 5, 2015                [Page 4]

Internet-Draft          NEtwork MOdeling Language              July 2014


   controller interfaces.  By concealing the low level network details,
   the controller simplified the operation of resource, flow, and
   information for applications.  The SFNet is used for the SDN
   architecture design, and does not go into the NBI design.

   Jennifer from Princeton University designed the Frenetic [Frenetic]
   based on the OpenFlow protocol.  It is an advanced language for flow
   programming, and systematically defines the operating model and mode
   for the flow.  However, the network requirement from the service is
   not only the flow operations, but also includes operations of
   resource, service conditions, and service logic.

   In the book [PBNM], John Strassner defined the policy concept and
   proposed the formal description for network operations by using the
   policy.  The method for querying network information is absent in the
   book.  Virtual tenant network and operations to the tenant network
   are not considered.

   All these investigations direct to the future SDN that use simple and
   intuitive interfaces to describe the network demands without complex
   programming.

4.  The NEMO Language overview

   NEMO language is a domain specific language (DSL) based on
   abstraction of network models and conclusion of operation patterns.
   It provides NBI fashion in the form of language.  With limited number
   of key words and expressions, NEMO language defines the entity and
   capability models for users with different view of network
   abstraction, and enables network users/applications to describe their
   demands for network resources, services and logical operations in an
   intuitive expression.  And finally the NEMO language description can
   be explained and executed by a language engine.

4.1.  Network Model of the NEMO Language

   Behind the NEMO language, there is a set of meta-models abstracting
   the network demands from the top down according to the service
   requirement.  Those demands can be divided into two types: the demand
   for network resources and the demands for network behaviors.

   The network resource is composed of three kinds of entities: node,
   link and flow.  Each entity contains property and statistic
   information.  With a globally unique identifier, the network entity
   is the basic object for operation.






Xia, et al.              Expires January 5, 2015                [Page 5]

Internet-Draft          NEtwork MOdeling Language              July 2014


   o  Node model: describes the entity with the capability of packet
      processing.  According to the functionality, there are three types
      of node

      *  The forwarding node (FN) only deals with L2/3 forwarding.  It
         forwards packets according to the forwarding table and modifies
         packet heads.

      *  The processing node (PN) provides L4-7 network services, and
         will modify the body of packets.

      *  The logical node (LN) describes a set of network elements and
         their links, such as subnet, autonomous system, and internet.
         It conceals the internal topology and exposes properties as one
         entity.  It also enables iteration, i.e., a network entity may
         include other network entities.

   o  Link model: describes the connectivity between node entities.
      According to the forwarding capability, links are usually divided
      into layer 2 and layer 3 types

   o  Flow model: describes a sequence of packets with certain common
      characters, such as source/destination IP address, port, and
      protocol.  From the northbound perspective, flow is the special
      traffic with user concern, which may be per device or across many
      devices.  So the flow characters also include ingress/egress node,
      and so on.

   Network behavior includes the information and control operations.

   The information operation provides two methods to get the network
   information for users.

   o  Query: a synchronous mode to get the information, i.e., one can
      get the response when a request is sent out.

   o  Notification: an asynchronous mode to get the information, i.e.,
      with one request, one or multiple responses will be sent to the
      subscriber automatically whenever trigger conditions meet.

   The NEMO language uses policy to describe the control operation.

   o  Policy: control the behavior of specific entities by APP, such as
      flow policy, node policy.  All the policies follow the same
      pattern "with <condition>, to execute <action>", and can be
      applied to any entity





Xia, et al.              Expires January 5, 2015                [Page 6]

Internet-Draft          NEtwork MOdeling Language              July 2014


4.2.  Primitives

   The primitives of NEMO language are derived from the network model,
   and fall into four categories.

   a.  Resource access primitives

  Node/UnNode  entity_id  Type {FN|PN|LN}
                          Owner node_id
                          Properties  key1 ,value1

  Node/UnNode:   create/delete a node
  Entity id:     system allocated URI for the node entity
  Type:          Node type of FN (forwarding node), PN (processing node)
                 or LN (logical node)
  Owner:         since the node can be nested, this primitive figures
                 out which node the new one belongs to
  Properties:    other properties to describe the node in the form of
                 (key, value).


  Link/UnLink  entity_id   Endnodes (node1_id,node2_id)
                           SLA key,value
                           Properties  key1 ,value1

  Link/UnLink:   create/delete a link.
  Entity id:     system allocated URI for the link entity
  Endnodes:      two end-node IDs of the link
  SLA:           SLA description for the link
  Properties:    other properties to describe the link in the form of
                 (key, value).


  Flow/UnFlow  entity_id  Match/UnMatch key1, value1|
                          Range(value, value) |
                          Mask(value, value)
                          Properties  key1 ,value1

  Flow/UnFlow:   create/delete a flow.
  Match/UnMatch: create/delete match items for the flow
  Range:         describe the range of the value
  Mask:          use mask to describe a range of the value
  Properties:    other properties to describe the flow in the form of
                 (key, value).

   b.  Behavior primitives





Xia, et al.              Expires January 5, 2015                [Page 7]

Internet-Draft          NEtwork MOdeling Language              July 2014


   Query   key  Value {value}
                From entity_id

   Query:         generate a synchronously query
   key:           the parameter name to be queried
   Value:         the return value for the query
   From:          the entity to be queried (define entity_id).


   Policy/UnPolicy  policy_id  Appliesto  entity_id
                               Condition {expression}
                               Action {"forwardto"|"drop"|"gothrough"|
                               "bypass"|"guaranteeSLA"|"Set"|
                               "Packetout"|Node|UnNode|Link|Unlink}

   Policy/UnPolicy: create/delete a policy
   Appliesto:     apply the policy to an entity
   Condition:     condition to execute the policy
   Action:        actions to be executed when conditions are met


   Notification/UnNotification    entity_id   On  key
                                              Every  period
                                              RegisterListener
                                                 callbackfunc

   Notification/UnNotification: create/delete a notification for an
                  entity
   On:            the notification will monitor the state change of a
                  parameter identified by the "key"
   Every:         time period at which to report the state
   RegisterListener: the callback function that is used to process the
                  notification.

   c.  Connection management primitives

   Connect   conn_id     Address  ip_address
                         Port port_num
   Disconnect  conn_id

   Connect:       set up a connection to the controller
   Address:       IP address of the controller to connect to
   Port:          port of the controller to connect to
   Disconnect:    disconnect to the controller.

   d.  Transaction primitives





Xia, et al.              Expires January 5, 2015                [Page 8]

Internet-Draft          NEtwork MOdeling Language              July 2014


   Transaction
   Commit

   Transaction:   indicate the beginning of a transaction
   Commit:        commit to execute the transaction

5.  The NEMO Language Examples

   A tenant needs two connections to carry different service flows
   between two datacenters.

   one connection of the tenant is 40G bandwidth with less than 400ms
   delay, another connection is 100M bandwidth with less than 50ms
   delay.

   {
      Link Link1_id
         Endnodes (DC1_node_id, DC2_node_id)
         Property "NAME","DC1_DC2_link_one","Bandwith",40G,"Delay",400ms
      Link Link2_id
         Endnodes (DC1_node_id, DC2_node_id)
         Property "NAME","DC1_DC2_link_two","Bandwith",100M,"Delay",50ms
   }

   The tenant has two types of traffic, CDN sync traffic uses high
   bandwidth connection and online game traffic uses low latency
   connection.

  {
     Flow flow1_id
        Match "srcip","10.0.1.1/24","dstip","20.0.1.1/24","Port","55555"
        Property "NAME","CDN sync flow","Bidirection","true"
     Flow flow2_id
        Match "srcip","10.0.1.1/24","dstip","20.0.1.1/24","Port","56663"
        Property "NAME","online Game","Bidirection","true"
     Policy  policy1_id
        Appliesto flow1_id
        Action "forwardto",link1_id
     Policy  policy2_id
        Appliesto flow2_id
        Action "gothrough",link2_id
  }

   The tenant wants the online game traffic to go through WOC in
   nighttime before it is carried by low latency connection.






Xia, et al.              Expires January 5, 2015                [Page 9]

Internet-Draft          NEtwork MOdeling Language              July 2014


   {
      Policy  policy3_id
         Appliesto flow2_id
         Condition {Time>18:00 or Time< 2:00}
         Action "gothrough",{woc_node_id ,link2_id}
   }

6.  Security Considerations

   Because the network customers are allowed to customize their own
   services, they may bring potentially big impacts to a running IP
   network.  A strong user authentication mechanism is needed for the
   northbound interface of the SDN controller.  User authorization
   should be carefully managed by the network administrator to avoid any
   dangerous operations and prevent any abuse of network resources.

7.  IANA Considerations

   This memo includes no request to IANA.

8.  Acknowledgements

   The authors would like to thanks the valuable comments made by Wei
   Cao, Xiaofei Xu, Fuyou Miao and Wenyang Lei.

   This document was produced using the xml2rfc tool [RFC2629].

9.  Informative References

   [Frenetic]
              Foster, N., Harrison, R., Freedman, M., Monsanto, C.,
              Rexford, J., Story, A., and D. Walker, "Frenetic: A
              Network Programming Languages, ICFP' 11", .

   [I-D.sdnrg-service-description-language]
              Xia, Y., Jiang, S., and S. Hares, "Requirements for a
              Service Description Language and Design Considerations,
              draft-xia-sdnrg-service-description-language-00, Work in
              progress", July 2014.

   [PBNM]     Strassner, J., "Policy-Based Network Management: Solutions
              for the Next Generation, Morgan Kaufmann Publishers Inc.
              San Francisco, CA, USA.", 2003.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.





Xia, et al.              Expires January 5, 2015               [Page 10]

Internet-Draft          NEtwork MOdeling Language              July 2014


   [RFC2629]  Rose, M., "Writing I-Ds and RFCs using XML", RFC 2629,
              June 1999.

   [RFC6020]  Bjorklund, M., "YANG - A Data Modeling Language for the
              Network Configuration Protocol (NETCONF)", RFC 6020,
              October 2010.

   [TSFNet]   Yap, K., Huang, T., Dodson, B., Lam, M., and N. McKeown,
              "Towards Software-Friendly Networks, APSys 2010, pp:49-54,
              2010, New Delhi, India.", .

Authors' Addresses

   Yinben Xia (editor)
   Huawei Technologies Co., Ltd
   Q14, Huawei Campus, No.156 Beiqing Road
   Hai-Dian District, Beijing, 100095
   P.R. China

   Email: xiayinben@huawei.com


   Sheng Jiang (editor)
   Huawei Technologies Co., Ltd
   Q14, Huawei Campus, No.156 Beiqing Road
   Hai-Dian District, Beijing, 100095
   P.R. China

   Email: jiangsheng@huawei.com


   Tianran Zhou (editor)
   Huawei Technologies Co., Ltd
   Q14, Huawei Campus, No.156 Beiqing Road
   Hai-Dian District, Beijing, 100095
   P.R. China

   Email: zhoutianran@huawei.com


   Susan Hares
   Huawei Technologies Co., Ltd
   7453 Hickory Hill
   Saline, CA  48176
   USA

   Email: shares@ndzh.com




Xia, et al.              Expires January 5, 2015               [Page 11]
