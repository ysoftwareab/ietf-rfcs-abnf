uint8 = uint .size 1
uint16 = uint .size 2
uint32 = uint .size 4
uint64 = uint .size 8

hexstring = text .regexp "([0-9a-f]{2})*"

                 Figure 1: Additional CDDL type definitions
QlogFile = {
       qlog_version: text
       ? qlog_format: text .default "JSON"
       ? title: text
       ? description: text
       ? summary: Summary
       ? traces: [+ Trace / TraceError]
Summary = {
       ; summary can contain any type of custom information
       ; text here doesn't mean the type text,
       ; but the fact that keys/names in the objects are strings
       * text => any
TraceError = {
       error_description: text
       ; the original URI at which we attempted to find the file
       ? uri: text
       ? vantage_point: VantagePoint
Trace = {
       ? title: text
       ? description: text
       ? configuration: Configuration
       ? common_fields: CommonFields
       ? vantage_point: VantagePoint
       events: [* Event]
Configuration = {
       ; time_offset is in milliseconds
       time_offset: float64
       original_uris:[* text]
       * text => any
VantagePoint = {
       ? name: text
       type: VantagePointType
       ? flow: VantagePointType
VantagePointType = "client" / "server" / "network" / "unknown"

                     Figure 13: VantagePoint definition

Event = {
       time: float64
       name: text
       data: $ProtocolEventBody

       ? time_format: TimeFormat

       ? protocol_type: ProtocolType
       ? group_id: GroupID

       ; events can contain any amount of custom fields
       * text => any
TimeFormat = "absolute" / "delta" / "relative"

                      Figure 17: TimeFormat definition

TransportPacketSent = {
       ? packet_size: uint16
       header: PacketHeader
       ? frames:[* QuicFrame]
       ? trigger: "pto_probe" / "retransmit_timeout" / "bandwidth_probe"
ProtocolType = [+ text]

                     Figure 22: ProtocolType definition

TransportPacketDropped = {
       ? packet_type: PacketType
       ? raw_length: uint16

       ? trigger: "key_unavailable" / "unknown_connection_id" /
                  "decrypt_error" / "unsupported_version"
GroupID = text

                       Figure 24: GroupID definition

ip2=2001:67c:2b0:1c1::198,port1=59105,port2=80",
CommonFields = {
       ? time_format: TimeFormat
       ? reference_time: float64

       ? protocol_type: ProtocolType
       ? group_id: GroupID

       * text => any
RawInfo = {
       ; the full byte length of the entity (e.g., packet or frame),
       ; including headers and trailers
       ? length: uint64

       ; the byte length of the entity's payload,
       ; without headers or trailers
       ? payload_length: uint64

       ; the contents of the full entity,
       ; including headers and trailers
       ? data: hexstring
GenericError = {
       ? code: uint64
       ? message: text
GenericWarning = {
       ? code: uint64
       ? message: text
GenericInfo = {
       message: text
GenericDebug = {
       message: text
GenericVerbose = {
       message: text
SimulationScenario = {
       ? name: text
       ? details: {* text => any }
SimulationMarker = {
       ? type: text
       ? message: text
uint64 = text / uint .size 8

               Figure 36: Custom uint64 definition for I-JSON

TraceSeq = {
       ? title: text
       ? description: text
       ? configuration: Configuration
       ? common_fields: CommonFields
       ? vantage_point: VantagePoint
QlogFileSeq = {
       qlog_format: "JSON-SEQ"

       qlog_version: text
       ? title: text
       ? description: text
       ? summary: Summary
       trace: TraceSeq
