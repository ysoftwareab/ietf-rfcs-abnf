



NETCONF Working Group                                          K. Watsen
Internet-Draft                                          Juniper Networks
Intended status: Standards Track                                   G. Wu
Expires: December 15, 2017                                 Cisco Systems
                                                           June 13, 2017


                      SSH Client and Server Models
                draft-ietf-netconf-ssh-client-server-03

Abstract

   This document defines three YANG modules: the first defines groupings
   for a generic SSH client, the second defines groupings for a generic
   SSH server, and the third defines common identities and groupings
   used by both the client and the server.  It is intended that these
   groupings will be used by applications using the SSH protocol.

Editorial Note (To be removed by RFC Editor)

   This draft contains many placeholder values that need to be replaced
   with finalized values at the time of publication.  This note
   summarizes all of the substitutions that are needed.  No other RFC
   Editor instructions are specified elsewhere in this document.

   This document contains references to other drafts in progress, both
   in the Normative References section, as well as in body text
   throughout.  Please update the following references to reflect their
   final RFC assignments:

   o  I-D.ietf-netconf-keystore

   Artwork in this document contains shorthand references to drafts in
   progress.  Please apply the following replacements:

   o  "XXXX" --> the assigned RFC value for this draft

   o  "YYYY" --> the assigned RFC value for I-D.ietf-netconf-keystore

   Artwork in this document contains placeholder values for the date of
   publication of this draft.  Please apply the following replacement:

   o  "2017-06-13" --> the publication date of this draft

   The following Appendix section is to be removed prior to publication:

   o  Appendix A.  Change Log




Watsen & Wu             Expires December 15, 2017               [Page 1]

Internet-Draft        SSH Client and Server Models             June 2017


Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 15, 2017.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
     1.2.  Tree Diagrams . . . . . . . . . . . . . . . . . . . . . .   4
   2.  The SSH Client Model  . . . . . . . . . . . . . . . . . . . .   4
     2.1.  Tree Diagram  . . . . . . . . . . . . . . . . . . . . . .   4
     2.2.  Example Usage . . . . . . . . . . . . . . . . . . . . . .   5
     2.3.  YANG Model  . . . . . . . . . . . . . . . . . . . . . . .   6
   3.  The SSH Server Model  . . . . . . . . . . . . . . . . . . . .  10
     3.1.  Tree Diagram  . . . . . . . . . . . . . . . . . . . . . .  10
     3.2.  Example Usage . . . . . . . . . . . . . . . . . . . . . .  11
     3.3.  YANG Model  . . . . . . . . . . . . . . . . . . . . . . .  11
   4.  The SSH Common Model  . . . . . . . . . . . . . . . . . . . .  15
     4.1.  Tree Diagram  . . . . . . . . . . . . . . . . . . . . . .  15
     4.2.  Example Usage . . . . . . . . . . . . . . . . . . . . . .  15



Watsen & Wu             Expires December 15, 2017               [Page 2]

Internet-Draft        SSH Client and Server Models             June 2017


     4.3.  YANG Model  . . . . . . . . . . . . . . . . . . . . . . .  16
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .  26
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  27
     6.1.  The IETF XML Registry . . . . . . . . . . . . . . . . . .  27
     6.2.  The YANG Module Names Registry  . . . . . . . . . . . . .  28
   7.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  28
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  28
     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  29
     8.2.  Informative References  . . . . . . . . . . . . . . . . .  30
   Appendix A.  Change Log . . . . . . . . . . . . . . . . . . . . .  31
     A.1.  server-model-09 to 00 . . . . . . . . . . . . . . . . . .  31
     A.2.  00 to 01  . . . . . . . . . . . . . . . . . . . . . . . .  31
     A.3.  01 to 02  . . . . . . . . . . . . . . . . . . . . . . . .  31
     A.4.  02 to 03  . . . . . . . . . . . . . . . . . . . . . . . .  31
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  31

1.  Introduction

   This document defines three YANG [RFC7950] modules: the first defines
   a grouping for a generic SSH client, the second defines a grouping
   for a generic SSH server, and the third defines identities and
   groupings common to both the client and the server (SSH is defined in
   [RFC4252], [RFC4253], and [RFC4254]).  It is intended that these
   groupings will be used by applications using the SSH protocol.  For
   instance, these groupings could be used to help define the data model
   for an OpenSSH [OPENSSH] server or a NETCONF over SSH [RFC6242] based
   server.

   The client and server YANG modules in this document each define one
   grouping, which is focused on just SSH-specific configuration, and
   specifically avoids any transport-level configuration, such as what
   ports to listen-on or connect-to.  This enables applications the
   opportunity to define their own strategy for how the underlying TCP
   connection is established.  For instance, applications supporting
   NETCONF Call Home [RFC8071] could use the grouping for the SSH parts
   it provides, while adding data nodes for the TCP-level call-home
   configuration.

1.1.  Terminology

   The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].








Watsen & Wu             Expires December 15, 2017               [Page 3]

Internet-Draft        SSH Client and Server Models             June 2017


1.2.  Tree Diagrams

   A simplified graphical representation of the data models is used in
   this document.  The meaning of the symbols in these diagrams is as
   follows:

   o  Brackets "[" and "]" enclose list keys.

   o  Braces "{" and "}" enclose feature names, and indicate that the
      named feature must be present for the subtree to be present.

   o  Abbreviations before data node names: "rw" means configuration
      (read-write) and "ro" state data (read-only).

   o  Symbols after data node names: "?" means an optional node, "!"
      means a presence container, and "*" denotes a list and leaf-list.

   o  Parentheses enclose choice and case nodes, and case nodes are also
      marked with a colon (":").

   o  Ellipsis ("...") stands for contents of subtrees that are not
      shown.

2.  The SSH Client Model

   The SSH client model presented in this section contains one YANG
   grouping, to just configure the SSH client omitting, for instance,
   any configuration for which IP address or port the client should
   connect to.

   This grouping references data nodes defined by the keystore model
   [I-D.ietf-netconf-keystore].  For instance, a reference to the
   keystore model is made to indicate which trusted CA certificate a
   client should use to authenticate X.509v3 certificate based host keys
   [RFC6187].

2.1.  Tree Diagram

   The following tree diagram presents the data model for the grouping
   defined in the ietf-ssh-client module.  Please see Section 1.2 for
   tree diagram notation.










Watsen & Wu             Expires December 15, 2017               [Page 4]

Internet-Draft        SSH Client and Server Models             June 2017


   module: ietf-ssh-client
     groupings:
     ssh-client-grouping
         +---- server-auth
         |  +---- trusted-ssh-host-keys?
         |  |       -> /ks:keystore/trusted-host-keys/name
         |  +---- trusted-ca-certs?
         |  |       -> /ks:keystore/trusted-certificates/name
         |  |       {sshcom:ssh-x509-certs}?
         |  +---- trusted-server-certs?
         |          -> /ks:keystore/trusted-certificates/name
         |          {sshcom:ssh-x509-certs}?
         +---- client-auth
         |  +---- username?      string
         |  +---- (auth-type)?
         |     +--:(certificate)
         |     |  +---- certificate?   leafref {sshcom:ssh-x509-certs}?
         |     +--:(public-key)
         |     |  +---- public-key?    -> /ks:keystore/keys/key/name
         |     +--:(password)
         |        +---- password?      string
         +---- transport-params {ssh-client-transport-params-config}?
            +---- host-key
            |  +---- host-key-alg*   identityref
            +---- key-exchange
            |  +---- key-exchange-alg*   identityref
            +---- encryption
            |  +---- encryption-alg*   identityref
            +---- mac
            |  +---- mac-alg*   identityref
            +---- compression
               +---- compression-alg*   identityref


2.2.  Example Usage

   This section shows how it would appear if the ssh-client-grouping
   were populated with some data.  This example is consistent with the
   examples presented in Section 2.2 of [I-D.ietf-netconf-keystore].












Watsen & Wu             Expires December 15, 2017               [Page 5]

Internet-Draft        SSH Client and Server Models             June 2017


<!-- hypothetical example, as groupings don't have instance data -->
<ssh-client xmlns="urn:ietf:params:xml:ns:yang:ietf-ssh-client">

  <!-- which host-keys will this client trust -->
  <server-auth>
    <trusted-ssh-host-keys>explicitly-trusted-ssh-host-keys</trusted-ssh-host-keys>
  </server-auth>

  <!-- how this client will authenticate itself to the server -->
  <client-auth>
    <username>foobar</username>
    <public-key>ex-rsa-key</public-key>
  </client-auth>

</ssh-client>

2.3.  YANG Model

   This YANG module has a normative references to [RFC6991] and
   [I-D.ietf-netconf-keystore].


<CODE BEGINS> file "ietf-ssh-client@2017-06-13.yang"

module ietf-ssh-client {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-ssh-client";
  prefix "sshc";

  import ietf-ssh-common {
    prefix sshcom;
    revision-date 2017-06-13; // stable grouping definitions
    reference
      "RFC XXXX: SSH Client and Server Models";
  }

  import ietf-netconf-acm {
    prefix nacm;
    reference
      "RFC 6536: Network Configuration Protocol (NETCONF) Access
       Control Model";
  }

  import ietf-keystore {
    prefix ks;
    reference
      "RFC YYYY: Keystore Model";



Watsen & Wu             Expires December 15, 2017               [Page 6]

Internet-Draft        SSH Client and Server Models             June 2017


  }

  organization
   "IETF NETCONF (Network Configuration) Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/netconf/>
    WG List:  <mailto:netconf@ietf.org>

    Author:   Kent Watsen
              <mailto:kwatsen@juniper.net>

    Author:   Gary Wu
              <mailto:garywu@cisco.com>";


  description
   "This module defines a reusable grouping for a SSH client that
    can be used as a basis for specific SSH client instances.

    Copyright (c) 2014 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD
    License set forth in Section 4.c of the IETF Trust's
    Legal Provisions Relating to IETF Documents
    (http://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC XXXX; see
    the RFC itself for full legal notices.";

  revision "2017-06-13" {
    description
     "Initial version";
    reference
     "RFC XXXX: SSH Client and Server Models";
  }

  feature ssh-client-transport-params-config {
    description
      "SSH transport layer parameters are configurable on an SSH
       client.";
  }

  grouping ssh-client-grouping {
    description



Watsen & Wu             Expires December 15, 2017               [Page 7]

Internet-Draft        SSH Client and Server Models             June 2017


      "A reusable grouping for configuring a SSH client without
       any consideration for how an underlying TCP session is
       established.";

    container server-auth {
      must 'trusted-ssh-host-keys or trusted-ca-certs or trusted-server-certs';
      description
        "Trusted server identities.";
      leaf trusted-ssh-host-keys {
        type leafref {
          path "/ks:keystore/ks:trusted-host-keys/ks:name";
        }
        description
          "A reference to a list of SSH host keys used by the
           SSH client to authenticate SSH server host keys.
           A server host key is authenticate if it is an exact
           match to a configured trusted SSH host key.";
      }

      leaf trusted-ca-certs {
        if-feature sshcom:ssh-x509-certs;
        type leafref {
          path "/ks:keystore/ks:trusted-certificates/ks:name";
        }
        description
          "A reference to a list of certificate authority (CA)
           certificates used by the SSH client to authenticate
           SSH server certificates.  A server certificate is
           authenticated if it has a valid chain of trust to
           a configured trusted CA certificate.";
      }

      leaf trusted-server-certs {
        if-feature sshcom:ssh-x509-certs;
        type leafref {
          path "/ks:keystore/ks:trusted-certificates/ks:name";
        }
        description
          "A reference to a list of server certificates used by
           the SSH client to authenticate SSH server certificates.
           A server certificate is authenticated if it is an
           exact match to a configured trusted server certificate.";
      }
    }

    container client-auth {
      description
        "The credentials used by the client to authenticate to



Watsen & Wu             Expires December 15, 2017               [Page 8]

Internet-Draft        SSH Client and Server Models             June 2017


         the SSH server.";

      leaf username {
        type string;
        description
          "The username of this user.  This will be the username
           used, for instance, to log into an SSH server.";
      }

      choice auth-type {
        description
          "The authentication type.";
        leaf certificate {
          if-feature sshcom:ssh-x509-certs;
          type leafref {
            path "/ks:keystore/ks:keys/ks:key/ks:certificates/"
                 + "ks:certificate/ks:name";
          }
          description
            "A certificates to be used for user authentication.";
        }
        leaf public-key {
          type leafref {
            path "/ks:keystore/ks:keys/ks:key/ks:name";
          }
          description
            "A public keys to be used for user authentication.";
        }
        leaf password {
          nacm:default-deny-all;
          type string;
          description
            "A password to be used for user authentication.";
        }
      }
    } // end client-auth

    container transport-params {
      if-feature ssh-client-transport-params-config;
      uses sshcom:transport-params-grouping;
      description
        "Configurable parameters for the SSH transport layer.";
    }

  } // ssh-client-grouping

}




Watsen & Wu             Expires December 15, 2017               [Page 9]

Internet-Draft        SSH Client and Server Models             June 2017


<CODE ENDS>

3.  The SSH Server Model

   The SSH server model presented in this section contains one YANG
   grouping, for just the SSH-level configuration omitting, for
   instance, configuration for which ports to open to listen for
   connections on.

   This grouping references data nodes defined by the keystore model
   [I-D.ietf-netconf-keystore].  For instance, a reference to the
   keystore model is made to indicate which host key a server should
   present.

3.1.  Tree Diagram

   The following tree diagram presents the data model for the grouping
   defined in the ietf-ssh-server module.  Please see Section 1.2 for
   tree diagram notation.

 module: ietf-ssh-server
   groupings:
   ssh-server-grouping
       +---- host-keys
       |  +---- host-key* [name]
       |     +---- name?          string
       |     +---- (host-key-type)
       |        +--:(public-key)
       |        |  +---- public-key?    -> /ks:keystore/keys/key/name
       |        +--:(certificate)
       |           +---- certificate?   leafref {sshcom:ssh-x509-certs}?
       +---- client-cert-auth {sshcom:ssh-x509-certs}?
       |  +---- trusted-ca-certs?
       |  |       -> /ks:keystore/trusted-certificates/name
       |  +---- trusted-client-certs?
       |          -> /ks:keystore/trusted-certificates/name
       +---- transport-params {ssh-server-transport-params-config}?
          +---- host-key
          |  +---- host-key-alg*   identityref
          +---- key-exchange
          |  +---- key-exchange-alg*   identityref
          +---- encryption
          |  +---- encryption-alg*   identityref
          +---- mac
          |  +---- mac-alg*   identityref
          +---- compression
             +---- compression-alg*   identityref




Watsen & Wu             Expires December 15, 2017              [Page 10]

Internet-Draft        SSH Client and Server Models             June 2017


3.2.  Example Usage

   This section shows how it would appear if the ssh-server-grouping
   were populated with some data.  This example is consistent with the
   examples presented in Section 2.2 of [I-D.ietf-netconf-keystore].

<!-- hypothetical example, as groupings don't have instance data -->
<ssh-server xmlns="urn:ietf:params:xml:ns:yang:ietf-ssh-server">

  <!-- which host-keys will this SSH server present -->
  <host-keys>
    <host-key>
      <name>deployment-specific-certificate</name>
      <certificate>ex-rsa-cert</certificate>
    </host-key>
  </host-keys>

  <!-- NOTE: password/public-key auth is NOT configured here, -->
  <!-- as it is configured in the ietf-system (RFC 7317)      -->
  <!-- module instead.                                        -->

  <!-- which client-certs will this SSH server trust -->
  <client-cert-auth>
    <trusted-ca-certs>deployment-specific-ca-certs</trusted-ca-certs>
    <trusted-client-certs>explicitly-trusted-client-certs</trusted-client-certs>
  </client-cert-auth>

</ssh-server>

3.3.  YANG Model

   This YANG module has a normative references to [RFC4253], [RFC6991],
   and [I-D.ietf-netconf-keystore].


  <CODE BEGINS> file "ietf-ssh-server@2017-06-13.yang"

  module ietf-ssh-server {
    yang-version 1.1;

    namespace "urn:ietf:params:xml:ns:yang:ietf-ssh-server";
    prefix "sshs";

    import ietf-ssh-common {
      prefix sshcom;
      revision-date 2017-06-13; // stable grouping definitions
      reference
        "RFC XXXX: SSH Client and Server Models";



Watsen & Wu             Expires December 15, 2017              [Page 11]

Internet-Draft        SSH Client and Server Models             June 2017


    }

    import ietf-keystore {
      prefix ks;
      reference
        "RFC YYYY: Keystore Model";
    }

    organization
     "IETF NETCONF (Network Configuration) Working Group";

    contact
     "WG Web:   <http://tools.ietf.org/wg/netconf/>
      WG List:  <mailto:netconf@ietf.org>

      Author:   Kent Watsen
                <mailto:kwatsen@juniper.net>";


    description
     "This module defines a reusable grouping for a SSH server that
      can be used as a basis for specific SSH server instances.

      Copyright (c) 2014 IETF Trust and the persons identified as
      authors of the code. All rights reserved.

      Redistribution and use in source and binary forms, with or
      without modification, is permitted pursuant to, and subject
      to the license terms contained in, the Simplified BSD
      License set forth in Section 4.c of the IETF Trust's
      Legal Provisions Relating to IETF Documents
      (http://trustee.ietf.org/license-info).

      This version of this YANG module is part of RFC XXXX; see
      the RFC itself for full legal notices.";

    revision "2017-06-13" {
      description
       "Initial version";
      reference
       "RFC XXXX: SSH Client and Server Models";
    }

    // features
    feature ssh-server-transport-params-config {
      description
        "SSH transport layer parameters are configurable on an SSH
         server.";



Watsen & Wu             Expires December 15, 2017              [Page 12]

Internet-Draft        SSH Client and Server Models             June 2017


    }

    // grouping
    grouping ssh-server-grouping {
      description
        "A reusable grouping for configuring a SSH server without
         any consideration for how underlying TCP sessions are
         established.";
      container host-keys {
        description
          "The list of host-keys the SSH server will present when
           establishing a SSH connection.";
        list host-key {
          key name;
          min-elements 1;
          ordered-by user;
          description
            "An ordered list of host keys the SSH server will use to
             construct its ordered list of algorithms, when sending
             its SSH_MSG_KEXINIT message, as defined in Section 7.1
             of RFC 4253.";
          reference
            "RFC 4253: The Secure Shell (SSH) Transport Layer Protocol";
          leaf name {
            type string;
            description
              "An arbitrary name for this host-key";
          }
          choice host-key-type {
            mandatory true;
            description
              "The type of host key being specified";
            leaf public-key {
              type leafref {
                path "/ks:keystore/ks:keys/ks:key/ks:name";
              }
              description
                "The public key is actually identified by the name of
                 its cooresponding private-key in the keystore.";
            }
            leaf certificate {
              if-feature sshcom:ssh-x509-certs;
              type leafref {
                path "/ks:keystore/ks:keys/ks:key/ks:certificates/"
                     + "ks:certificate/ks:name";
              }
              description
                "The name of a certificate in the keystore.";



Watsen & Wu             Expires December 15, 2017              [Page 13]

Internet-Draft        SSH Client and Server Models             June 2017


            }
          }
        }
      }

      container client-cert-auth {
        if-feature sshcom:ssh-x509-certs;
        description
          "A reference to a list of trusted certificate authority (CA)
           certificates and a reference to a list of trusted client
           certificates.";
        leaf trusted-ca-certs {
          type leafref {
            path "/ks:keystore/ks:trusted-certificates/ks:name";
          }
          description
            "A reference to a list of certificate authority (CA)
             certificates used by the SSH server to authenticate
             SSH client certificates.";
        }
        leaf trusted-client-certs {
          type leafref {
            path "/ks:keystore/ks:trusted-certificates/ks:name";
          }
          description
            "A reference to a list of client certificates used by
             the SSH server to authenticate SSH client certificates.
             A clients certificate is authenticated if it is an
             exact match to a configured trusted client certificate.";
        }
      }

      container transport-params {
        if-feature ssh-server-transport-params-config;
        uses sshcom:transport-params-grouping;
        description
          "Configurable parameters for the SSH transport layer.";
      }

    } // ssh-server-grouping

  }



  <CODE ENDS>





Watsen & Wu             Expires December 15, 2017              [Page 14]

Internet-Draft        SSH Client and Server Models             June 2017


4.  The SSH Common Model

   The SSH common model presented in this section contains identities
   and groupings common to both SSH clients and SSH servers.  The
   transport-params-grouping can be used to configure the list of SSH
   transport algorithms permitted by the SSH client or SSH server.  The
   lists of algorithms are ordered such that, if multiple algorithms are
   permitted by the client, the algorithm that appears first in its list
   that is also permitted by the server is used for the SSH transport
   layer connection.  The ability to restrict the the algorithms allowed
   is provided in this grouping for SSH clients and SSH servers that are
   capable of doing so and may serve to make SSH clients and SSH servers
   compliant with security policies.

   Features are defined for algorithms that are OPTIONAL or are not
   widely supported by popular implementations.  Note that the list of
   algorithms is not exhaustive.  As well, some algorithms that are
   REQUIRED by [RFC4253] are missing, notably "ssh-dss" and "diffie-
   hellman-group1-sha1" due to their weak security and there being
   alternatives that are widely supported.

4.1.  Tree Diagram

   The following tree diagram presents the data model for the grouping
   defined in the ietf-ssh-common module.  Please see Section 1.2 for
   tree diagram notation.

   module: ietf-ssh-common
     groupings:
     transport-params-grouping
         +---- host-key
         |  +---- host-key-alg*   identityref
         +---- key-exchange
         |  +---- key-exchange-alg*   identityref
         +---- encryption
         |  +---- encryption-alg*   identityref
         +---- mac
         |  +---- mac-alg*   identityref
         +---- compression
            +---- compression-alg*   identityref


4.2.  Example Usage

   This section shows how it would appear if the transport-params-
   grouping were populated with some data.





Watsen & Wu             Expires December 15, 2017              [Page 15]

Internet-Draft        SSH Client and Server Models             June 2017


  <!-- hypothetical example, as groupings don't have instance data -->
  <transport-params xmlns="urn:ietf:params:xml:ns:yang:ietf-ssh-common">

    <host-key>
      <host-key-alg>x509v3-rsa2048-sha256</host-key-alg>
      <host-key-alg>ssh-rsa</host-key-alg>
    </host-key>
    <key-exchange>
      <key-exchange-alg>
        diffie-hellman-group-exchange-sha256
      </key-exchange-alg>
    </key-exchange>
    <encryption>
      <encryption-alg>aes256-ctr</encryption-alg>
      <encryption-alg>aes192-ctr</encryption-alg>
      <encryption-alg>aes128-ctr</encryption-alg>
      <encryption-alg>aes256-cbc</encryption-alg>
      <encryption-alg>aes192-cbc</encryption-alg>
      <encryption-alg>aes128-cbc</encryption-alg>
    </encryption>
    <mac>
      <mac-alg>hmac-sha2-256</mac-alg>
      <mac-alg>hmac-sha2-512</mac-alg>
    </mac>
    <compression>
      <compression-alg>none</compression-alg>
    </compression>

  </transport-params>

4.3.  YANG Model

   This YANG module has a normative references to [RFC4344], [RFC4419],
   and [RFC5656].


  <CODE BEGINS> file "ietf-ssh-common@2017-06-13.yang"

  module ietf-ssh-common {
    yang-version 1.1;

    namespace "urn:ietf:params:xml:ns:yang:ietf-ssh-common";
    prefix "sshcom";

    organization
     "IETF NETCONF (Network Configuration) Working Group";

    contact



Watsen & Wu             Expires December 15, 2017              [Page 16]

Internet-Draft        SSH Client and Server Models             June 2017


     "WG Web:   <http://tools.ietf.org/wg/netconf/>
      WG List:  <mailto:netconf@ietf.org>

      Author:   Kent Watsen
                <mailto:kwatsen@juniper.net>

      Author:   Gary Wu
                <mailto:garywu@cisco.com>";


    description
     "This module defines a common features, identities, and groupings
      for Secure Shell (SSH).

      Copyright (c) 2017 IETF Trust and the persons identified as
      authors of the code. All rights reserved.

      Redistribution and use in source and binary forms, with or
      without modification, is permitted pursuant to, and subject
      to the license terms contained in, the Simplified BSD
      License set forth in Section 4.c of the IETF Trust's
      Legal Provisions Relating to IETF Documents
      (http://trustee.ietf.org/license-info).

      This version of this YANG module is part of RFC XXXX; see
      the RFC itself for full legal notices.";

    revision "2017-06-13" {
      description
       "Initial version";
      reference
       "RFC XXXX: SSH Client and Server Models";
    }

    // features
    feature ssh-ecc {
      description
        "Elliptic Curve Cryptography is supported for SSH.";
      reference
        "RFC 5656: Elliptic Curve Algorithm Integration in the
                   Secure Shell Transport Layer";
    }

    feature ssh-x509-certs {
      description
        "X.509v3 certificates are supported for SSH as per RFC 6187.";
      reference
        "RFC 6187: X.509v3 Certificates for Secure Shell



Watsen & Wu             Expires December 15, 2017              [Page 17]

Internet-Draft        SSH Client and Server Models             June 2017


                   Authentication";
    }

    feature ssh-dh-group-exchange {
      description
        "Diffie-Hellman Group Exchange is supported for SSH.";
      reference
        "RFC 4419: Diffie-Hellman Group Exchange for the
                   Secure Shell (SSH) Transport Layer Protocol";
    }

    feature ssh-ctr {
      description
        "SDCTR encryption mode is supported for SSH.";
      reference
        "RFC 4344: The Secure Shell (SSH) Transport Layer
                   Encryption Modes";
    }

    feature ssh-sha2 {
      description
        "The SHA2 family of cryptographic hash functions is supported
         for SSH.";
      reference
        "FIPS PUB 180-4: Secure Hash Standard (SHS)";
    }

    feature ssh-zlib {
      description
        "ZLIB (LZ77) compression is supported for SSH.";
      reference
        "RFC 4253: The Secure Shell (SSH) Transport Layer Protocol";
    }

    // identities
    identity public-key-alg-base {
      description
        "Base identity used to identify public key algorithms.";
    }

    identity ssh-dss {
      base public-key-alg-base;
      description
        "Digital Signature Algorithm using SHA-1 as the hashing
         algorithm.";
      reference
        "RFC 4253: The Secure Shell (SSH) Transport Layer Protocol";
    }



Watsen & Wu             Expires December 15, 2017              [Page 18]

Internet-Draft        SSH Client and Server Models             June 2017


    identity ssh-rsa {
      base public-key-alg-base;
      description
        "RSASSA-PKCS1-v1_5 signature scheme using SHA-1 as the hashing
         algorithm.";
      reference
        "RFC 4253: The Secure Shell (SSH) Transport Layer Protocol";
    }

    identity ecdsa-sha2-nistp256 {
      base public-key-alg-base;
      if-feature "ssh-ecc and ssh-sha2";
      description
        "Elliptic Curve Digital Signature Algorithm (ECDSA) using the
         nistp256 curve and the SHA2 family of hashing algorithms.";
      reference
        "RFC 5656: Elliptic Curve Algorithm Integration in the
                   Secure Shell Transport Layer";
    }

    identity ecdsa-sha2-nistp384 {
      base public-key-alg-base;
      if-feature "ssh-ecc and ssh-sha2";
      description
        "Elliptic Curve Digital Signature Algorithm (ECDSA) using the
         nistp384 curve and the SHA2 family of hashing algorithms.";
      reference
        "RFC 5656: Elliptic Curve Algorithm Integration in the
                   Secure Shell Transport Layer";
    }

    identity ecdsa-sha2-nistp521 {
      base public-key-alg-base;
      if-feature "ssh-ecc and ssh-sha2";
      description
        "Elliptic Curve Digital Signature Algorithm (ECDSA) using the
         nistp521 curve and the SHA2 family of hashing algorithms.";
      reference
        "RFC 5656: Elliptic Curve Algorithm Integration in the
                   Secure Shell Transport Layer";
    }

    identity x509v3-ssh-rsa {
      base public-key-alg-base;
      if-feature ssh-x509-certs;
      description
        "RSASSA-PKCS1-v1_5 signature scheme using a public key stored in
         an X.509v3 certificate and using SHA-1 as the hashing



Watsen & Wu             Expires December 15, 2017              [Page 19]

Internet-Draft        SSH Client and Server Models             June 2017


         algorithm.";
      reference
        "RFC 6187: X.509v3 Certificates for Secure Shell
                   Authentication";
    }

    identity x509v3-rsa2048-sha256 {
      base public-key-alg-base;
      if-feature "ssh-x509-certs and ssh-sha2";
      description
        "RSASSA-PKCS1-v1_5 signature scheme using a public key stored in
         an X.509v3 certificate and using SHA-256 as the hashing
         algorithm.  RSA keys conveyed using this format MUST have a
         modulus of at least 2048 bits.";
      reference
        "RFC 6187: X.509v3 Certificates for Secure Shell
         Authentication";
    }

    identity x509v3-ecdsa-sha2-nistp256 {
      base public-key-alg-base;
      if-feature "ssh-ecc and ssh-x509-certs and ssh-sha2";
      description
        "Elliptic Curve Digital Signature Algorithm (ECDSA) using the
         nistp256 curve with a public key stored in an X.509v3
         certificate and using the SHA2 family of hashing algorithms.";
      reference
        "RFC 6187: X.509v3 Certificates for Secure Shell
         Authentication";
    }

    identity x509v3-ecdsa-sha2-nistp384 {
      base public-key-alg-base;
      if-feature "ssh-ecc and ssh-x509-certs and ssh-sha2";
      description
        "Elliptic Curve Digital Signature Algorithm (ECDSA) using the
         nistp384 curve with a public key stored in an X.509v3
         certificate and using the SHA2 family of hashing algorithms.";
      reference
        "RFC 6187: X.509v3 Certificates for Secure Shell
         Authentication";
    }

    identity x509v3-ecdsa-sha2-nistp521 {
      base public-key-alg-base;
      if-feature "ssh-ecc and ssh-x509-certs and ssh-sha2";
      description
        "Elliptic Curve Digital Signature Algorithm (ECDSA) using the



Watsen & Wu             Expires December 15, 2017              [Page 20]

Internet-Draft        SSH Client and Server Models             June 2017


         nistp521 curve with a public key stored in an X.509v3
         certificate and using the SHA2 family of hashing algorithms.";
      reference
        "RFC 6187: X.509v3 Certificates for Secure Shell
         Authentication";
    }

    identity key-exchange-alg-base {
      description
        "Base identity used to identify key exchange algorithms.";
    }

    identity diffie-hellman-group14-sha1 {
      base key-exchange-alg-base;
      description
        "Diffie-Hellman key exchange with SHA-1 as HASH and
         Oakley Group 14 (2048-bit MODP Group).";
      reference
        "RFC 4253: The Secure Shell (SSH) Transport Layer Protocol";
    }

    identity diffie-hellman-group-exchange-sha1 {
      base key-exchange-alg-base;
      if-feature ssh-dh-group-exchange;
      description
        "Diffie-Hellman Group and Key Exchange with SHA-1 as HASH.";
      reference
        "RFC 4419: Diffie-Hellman Group Exchange for the
                   Secure Shell (SSH) Transport Layer Protocol";
    }

    identity diffie-hellman-group-exchange-sha256 {
      base key-exchange-alg-base;
      if-feature "ssh-dh-group-exchange and ssh-sha2";
      description
        "Diffie-Hellman Group and Key Exchange with SHA-256 as HASH.";
      reference
        "RFC 4419: Diffie-Hellman Group Exchange for the
                   Secure Shell (SSH) Transport Layer Protocol";
    }

    identity ecdh-sha2-nistp256 {
      base key-exchange-alg-base;
      if-feature "ssh-ecc and ssh-sha2";
      description
        "Elliptic Curve Diffie-Hellman (ECDH) key exchange using the
         nistp256 curve and the SHA2 family of hashing algorithms.";
      reference



Watsen & Wu             Expires December 15, 2017              [Page 21]

Internet-Draft        SSH Client and Server Models             June 2017


        "RFC 5656: Elliptic Curve Algorithm Integration in the
                   Secure Shell Transport Layer";
    }

    identity ecdh-sha2-nistp384 {
      base key-exchange-alg-base;
      if-feature "ssh-ecc and ssh-sha2";
      description
        "Elliptic Curve Diffie-Hellman (ECDH) key exchange using the
         nistp384 curve and the SHA2 family of hashing algorithms.";
      reference
        "RFC 5656: Elliptic Curve Algorithm Integration in the
                   Secure Shell Transport Layer";
    }

    identity ecdh-sha2-nistp521 {
      base key-exchange-alg-base;
      if-feature "ssh-ecc and ssh-sha2";
      description
        "Elliptic Curve Diffie-Hellman (ECDH) key exchange using the
         nistp521 curve and the SHA2 family of hashing algorithms.";
      reference
        "RFC 5656: Elliptic Curve Algorithm Integration in the
                   Secure Shell Transport Layer";
    }

    identity encryption-alg-base {
      description
        "Base identity used to identify encryption algorithms.";
    }

    identity triple-des-cbc {
      base encryption-alg-base;
      description
        "Three-key 3DES in CBC mode.";
      reference
        "RFC 4253: The Secure Shell (SSH) Transport Layer Protocol";
    }

    identity aes128-cbc {
      base encryption-alg-base;
      description
       "AES in CBC mode, with a 128-bit key.";
      reference
       "RFC 4253: The Secure Shell (SSH) Transport Layer Protocol";
    }

    identity aes192-cbc {



Watsen & Wu             Expires December 15, 2017              [Page 22]

Internet-Draft        SSH Client and Server Models             June 2017


      base encryption-alg-base;
      description
        "AES in CBC mode, with a 192-bit key.";
      reference
        "RFC 4253: The Secure Shell (SSH) Transport Layer Protocol";
    }

    identity aes256-cbc {
      base encryption-alg-base;
      description
        "AES in CBC mode, with a 256-bit key.";
      reference
        "RFC 4253: The Secure Shell (SSH) Transport Layer Protocol";
    }

    identity aes128-ctr {
      base encryption-alg-base;
      if-feature ssh-ctr;
      description
        "AES in SDCTR mode, with 128-bit key.";
      reference
        "RFC 4344: The Secure Shell (SSH) Transport Layer Encryption
           Modes";
    }

    identity aes192-ctr {
      base encryption-alg-base;
      if-feature ssh-ctr;
      description
        "AES in SDCTR mode, with 192-bit key.";
      reference
        "RFC 4344: The Secure Shell (SSH) Transport Layer Encryption
           Modes";
    }

    identity aes256-ctr {
      base encryption-alg-base;
      if-feature ssh-ctr;
      description
        "AES in SDCTR mode, with 256-bit key.";
      reference
        "RFC 4344: The Secure Shell (SSH) Transport Layer Encryption
           Modes";
    }

    identity mac-alg-base {
      description
        "Base identity used to identify message authentication



Watsen & Wu             Expires December 15, 2017              [Page 23]

Internet-Draft        SSH Client and Server Models             June 2017


         code (MAC) algorithms.";
    }

    identity hmac-sha1 {
      base mac-alg-base;
      description
        "HMAC-SHA1";
      reference
        "RFC 4253: The Secure Shell (SSH) Transport Layer Protocol";
    }

    identity hmac-sha2-256 {
      base mac-alg-base;
      if-feature "ssh-sha2";
      description
        "HMAC-SHA2-256";
      reference
        "RFC 6668: SHA-2 Data Integrity Verification for the
                   Secure Shell (SSH) Transport Layer Protocol";
    }

    identity hmac-sha2-512 {
      base mac-alg-base;
      if-feature "ssh-sha2";
      description
        "HMAC-SHA2-512";
      reference
        "RFC 6668: SHA-2 Data Integrity Verification for the
                   Secure Shell (SSH) Transport Layer Protocol";
    }

    identity compression-alg-base {
      description
        "Base identity used to identify compression algorithms.";
    }

    identity none {
      base compression-alg-base;
      description
        "No compression.";
      reference
        "RFC 4253: The Secure Shell (SSH) Transport Layer Protocol";
    }

    identity zlib {
      base compression-alg-base;
      if-feature ssh-zlib;
      description



Watsen & Wu             Expires December 15, 2017              [Page 24]

Internet-Draft        SSH Client and Server Models             June 2017


        "ZLIB (LZ77) compression.";
      reference
        "RFC 4253: The Secure Shell (SSH) Transport Layer Protocol";
    }

    // groupings
    grouping transport-params-grouping {
      description
        "A reusable grouping for SSH transport parameters.
         For configurable parameters, a zero-element leaf-list of
         algorithms indicates the system default configuration for that
         parameter.";
      reference
        "RFC 4253: The Secure Shell (SSH) Transport Layer Protocol";
      container host-key {
        description
          "Parameters regarding host key.";
        leaf-list host-key-alg {
          type identityref {
            base public-key-alg-base;
          }
          ordered-by user;
          description
            "Host key algorithms in order of descending preference.";
        }
      }
      container key-exchange {
        description
          "Parameters regarding key exchange.";
        leaf-list key-exchange-alg {
          type identityref {
            base key-exchange-alg-base;
          }
          ordered-by user;
          description
            "Key exchange algorithms in order of descending
             preference.";
        }
      }
      container encryption {
        description
          "Parameters regarding encryption.";
        leaf-list encryption-alg {
          type identityref {
            base encryption-alg-base;
          }
          ordered-by user;
          description



Watsen & Wu             Expires December 15, 2017              [Page 25]

Internet-Draft        SSH Client and Server Models             June 2017


            "Encryption algorithms in order of descending preference.";
        }
      }
      container mac {
        description
          "Parameters regarding message authentication code (MAC).";
        leaf-list mac-alg {
          type identityref {
            base mac-alg-base;
          }
          ordered-by user;
          description
            "MAC algorithms in order of descending preference.";
        }
      }
      container compression {
        description
          "Parameters regarding compression.";
        leaf-list compression-alg {
          type identityref {
            base compression-alg-base;
          }
          ordered-by user;
          description
            "Compression algorithms in order of descending preference.";
        }
      }
    }
  }

  <CODE ENDS>

5.  Security Considerations

   The YANG module defined in this document is designed to be accessed
   via YANG based management protocols, such as NETCONF [RFC6241] and
   RESTCONF [RFC8040].  Both of these protocols have mandatory-to-
   implement secure transport layers (e.g., SSH, TLS) with mutual
   authentication.

   The NETCONF access control model (NACM) [RFC6536] provides the means
   to restrict access for particular users to a pre-configured subset of
   all available protocol operations and content.

   There are a number of data nodes defined in this YANG module that are
   writable/creatable/deletable (i.e., config true, which is the
   default).  These data nodes may be considered sensitive or vulnerable
   in some network environments.  Write operations (e.g., edit-config)



Watsen & Wu             Expires December 15, 2017              [Page 26]

Internet-Draft        SSH Client and Server Models             June 2017


   to these data nodes without proper protection can have a negative
   effect on network operations.  These are the subtrees and data nodes
   and their sensitivity/vulnerability:

      /: The entire data tree defined by this module is sensitive to
         write operations.  For instance, the addition or removal of
         references to keys, certificates, trusted anchors, etc., can
         dramatically alter the implemented security policy.  However,
         no NACM annotations are applied as the data SHOULD be editable
         by users other than a designated 'recovery session'.

   Some of the readable data nodes in this YANG module may be considered
   sensitive or vulnerable in some network environments.  It is thus
   important to control read access (e.g., via get, get-config, or
   notification) to these data nodes.  These are the subtrees and data
   nodes and their sensitivity/vulnerability:

      /client-auth/password:  This node is additionally sensitive to
         read operations such that, in normal use cases, it should never
         be returned to a client.  The best reason for returning this
         node is to support backup/restore type workflows.  This being
         the case, this node is marked with the NACM value 'default-
         deny-all'.

   Some of the RPC operations in this YANG module may be considered
   sensitive or vulnerable in some network environments.  It is thus
   important to control access to these operations.  These are the
   operations and their sensitivity/vulnerability:

      NONE

6.  IANA Considerations

6.1.  The IETF XML Registry

   This document registers three URIs in the IETF XML registry
   [RFC3688].  Following the format in [RFC3688], the following
   registrations are requested:













Watsen & Wu             Expires December 15, 2017              [Page 27]

Internet-Draft        SSH Client and Server Models             June 2017


      URI: urn:ietf:params:xml:ns:yang:ietf-ssh-client
      Registrant Contact: The NETCONF WG of the IETF.
      XML: N/A, the requested URI is an XML namespace.

      URI: urn:ietf:params:xml:ns:yang:ietf-ssh-server
      Registrant Contact: The NETCONF WG of the IETF.
      XML: N/A, the requested URI is an XML namespace.

      URI: urn:ietf:params:xml:ns:yang:ietf-ssh-common
      Registrant Contact: The NETCONF WG of the IETF.
      XML: N/A, the requested URI is an XML namespace.

6.2.  The YANG Module Names Registry

   This document registers three YANG modules in the YANG Module Names
   registry [RFC7950].  Following the format in [RFC7950], the the
   following registrations are requested:

      name:         ietf-ssh-client
      namespace:    urn:ietf:params:xml:ns:yang:ietf-ssh-client
      prefix:       sshc
      reference:    RFC XXXX

      name:         ietf-ssh-server
      namespace:    urn:ietf:params:xml:ns:yang:ietf-ssh-server
      prefix:       sshs
      reference:    RFC XXXX

      name:         ietf-ssh-common
      namespace:    urn:ietf:params:xml:ns:yang:ietf-ssh-common
      prefix:       sshcom
      reference:    RFC XXXX

7.  Acknowledgements

   The authors would like to thank for following for lively discussions
   on list and in the halls (ordered by last name): Andy Bierman, Martin
   Bjorklund, Benoit Claise, Mehmet Ersue, Balazs Kovacs, David
   Lamparter, Alan Luchuk, Ladislav Lhotka, Radek Krejci, Tom Petch,
   Juergen Schoenwaelder, Phil Shafer, Sean Turner, Michal Vasko, and
   Bert Wijnen.

8.  References








Watsen & Wu             Expires December 15, 2017              [Page 28]

Internet-Draft        SSH Client and Server Models             June 2017


8.1.  Normative References

   [I-D.ietf-netconf-keystore]
              Watsen, K., "Keystore Model", draft-ietf-netconf-
              keystore-01 (work in progress), March 2017.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC4344]  Bellare, M., Kohno, T., and C. Namprempre, "The Secure
              Shell (SSH) Transport Layer Encryption Modes", RFC 4344,
              DOI 10.17487/RFC4344, January 2006,
              <http://www.rfc-editor.org/info/rfc4344>.

   [RFC4419]  Friedl, M., Provos, N., and W. Simpson, "Diffie-Hellman
              Group Exchange for the Secure Shell (SSH) Transport Layer
              Protocol", RFC 4419, DOI 10.17487/RFC4419, March 2006,
              <http://www.rfc-editor.org/info/rfc4419>.

   [RFC5656]  Stebila, D. and J. Green, "Elliptic Curve Algorithm
              Integration in the Secure Shell Transport Layer",
              RFC 5656, DOI 10.17487/RFC5656, December 2009,
              <http://www.rfc-editor.org/info/rfc5656>.

   [RFC6187]  Igoe, K. and D. Stebila, "X.509v3 Certificates for Secure
              Shell Authentication", RFC 6187, DOI 10.17487/RFC6187,
              March 2011, <http://www.rfc-editor.org/info/rfc6187>.

   [RFC6536]  Bierman, A. and M. Bjorklund, "Network Configuration
              Protocol (NETCONF) Access Control Model", RFC 6536,
              DOI 10.17487/RFC6536, March 2012,
              <http://www.rfc-editor.org/info/rfc6536>.

   [RFC6668]  Bider, D. and M. Baushke, "SHA-2 Data Integrity
              Verification for the Secure Shell (SSH) Transport Layer
              Protocol", RFC 6668, DOI 10.17487/RFC6668, July 2012,
              <http://www.rfc-editor.org/info/rfc6668>.

   [RFC6991]  Schoenwaelder, J., Ed., "Common YANG Data Types",
              RFC 6991, DOI 10.17487/RFC6991, July 2013,
              <http://www.rfc-editor.org/info/rfc6991>.

   [RFC7950]  Bjorklund, M., Ed., "The YANG 1.1 Data Modeling Language",
              RFC 7950, DOI 10.17487/RFC7950, August 2016,
              <http://www.rfc-editor.org/info/rfc7950>.




Watsen & Wu             Expires December 15, 2017              [Page 29]

Internet-Draft        SSH Client and Server Models             June 2017


8.2.  Informative References

   [OPENSSH]  "OpenSSH", 2016, <http://www.openssh.com>.

   [RFC3688]  Mealling, M., "The IETF XML Registry", BCP 81, RFC 3688,
              DOI 10.17487/RFC3688, January 2004,
              <http://www.rfc-editor.org/info/rfc3688>.

   [RFC4252]  Ylonen, T. and C. Lonvick, Ed., "The Secure Shell (SSH)
              Authentication Protocol", RFC 4252, DOI 10.17487/RFC4252,
              January 2006, <http://www.rfc-editor.org/info/rfc4252>.

   [RFC4253]  Ylonen, T. and C. Lonvick, Ed., "The Secure Shell (SSH)
              Transport Layer Protocol", RFC 4253, DOI 10.17487/RFC4253,
              January 2006, <http://www.rfc-editor.org/info/rfc4253>.

   [RFC4254]  Ylonen, T. and C. Lonvick, Ed., "The Secure Shell (SSH)
              Connection Protocol", RFC 4254, DOI 10.17487/RFC4254,
              January 2006, <http://www.rfc-editor.org/info/rfc4254>.

   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,
              and A. Bierman, Ed., "Network Configuration Protocol
              (NETCONF)", RFC 6241, DOI 10.17487/RFC6241, June 2011,
              <http://www.rfc-editor.org/info/rfc6241>.

   [RFC6242]  Wasserman, M., "Using the NETCONF Protocol over Secure
              Shell (SSH)", RFC 6242, DOI 10.17487/RFC6242, June 2011,
              <http://www.rfc-editor.org/info/rfc6242>.

   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, "RESTCONF
              Protocol", RFC 8040, DOI 10.17487/RFC8040, January 2017,
              <http://www.rfc-editor.org/info/rfc8040>.

   [RFC8071]  Watsen, K., "NETCONF Call Home and RESTCONF Call Home",
              RFC 8071, DOI 10.17487/RFC8071, February 2017,
              <http://www.rfc-editor.org/info/rfc8071>.















Watsen & Wu             Expires December 15, 2017              [Page 30]

Internet-Draft        SSH Client and Server Models             June 2017


Appendix A.  Change Log

A.1.  server-model-09 to 00

   o  This draft was split out from draft-ietf-netconf-server-model-09.

   o  Added in previously missing ietf-ssh-client module.

   o  Noted that '0.0.0.0' and '::' might have special meanings.

A.2.  00 to 01

   o  Renamed "keychain" to "keystore".

A.3.  01 to 02

   o  Removed the groupings 'listening-ssh-client-grouping' and
      'listening-ssh-server-grouping'.  Now modules only contain the
      transport-independent groupings.

   o  Simplified the "client-auth" part in the ietf-ssh-client module.
      It now inlines what it used to point to keystore for.

   o  Added cipher suites for various algorithms into new 'ietf-ssh-
      common' module.

A.4.  02 to 03

   o  Removed 'RESTRICTED' enum from 'password' leaf type.

   o  Added a 'must' statement to container 'server-auth' asserting that
      at least one of the various auth mechanisms must be specified.

   o  Fixed description statement for leaf 'trusted-ca-certs'.

Authors' Addresses

   Kent Watsen
   Juniper Networks

   EMail: kwatsen@juniper.net


   Gary Wu
   Cisco Systems

   EMail: garywu@cisco.com




Watsen & Wu             Expires December 15, 2017              [Page 31]
