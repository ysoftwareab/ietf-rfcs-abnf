argument = string / string-list / number / tag / test

block = "{" commands "}"
           ;; C-style block

CHAR-NOT-DOT = (%x01-2d / %x2f-%xff)
           ;; all the characters that aren't "."

command = identifier *(WSP argument) [WSP] ( ";" / block )

commands = *([WSP] command [WSP])

comment = "#" *VCHAR CRLF

identifier = (ALPHA / "_") *(ALPHA DIGIT "_")

multi-line = "text:" [WSP] CRLF
           *((1*CHAR-NOT-DOT *CHAR CRLF) / ("." 1*CHAR-NOT-DOT *CHAR CRLF) /
             (".." *CHAR CRLF) / CRLF)
           "." CRLF
           ;; Note when used,
           ;; a leading ".." on a line is mapped to ".".

number = 1*DIGIT [QUANTIFIER]
           ;; quantifier is a multiplier (or bit shift)

QUANTIFIER = "K" / "M" / "G"
           ;; K == 2^10; M == 2^20; G = 2^30

quoted-string = DQUOTE *CHAR DQUOTE
           ;; \" inside a string maps to "
           ;; \\ inside a string maps to \
           ;; All other characters map to themselves.
           ;; Note that newlines and other weird characters
           ;; are all allowed strings.

start = commands

string = quoted-string / multi-line

string-list = "[" [WSP] string *([WSP] "," [WSP] string) [WSP] "]" / string
           ;; if there is only a single string, the brackets are optional
tag = ":" identifier

test = identifier *(WSP argument) [WSP test-list]

test-list = [WSP] "(" [WSP] *(test [WSP] "," [WSP])
       test [WSP] ")" [WSP]

WSP = 1*(SP / CRLF / HTAB) / comment
           ;; just whitespace.  anyplace this is allowed, a comment is
           ;; as well

