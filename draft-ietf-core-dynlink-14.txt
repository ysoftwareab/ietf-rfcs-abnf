



CoRE Working Group                                             M. Koster
Internet-Draft                                               SmartThings
Intended status: Informational                        B. Silverajan, Ed.
Expires: January 13, 2022                             Tampere University
                                                           July 12, 2021


     Dynamic Resource Linking for Constrained RESTful Environments
                       draft-ietf-core-dynlink-14

Abstract

   This specification defines Link Bindings, which provide dynamic
   linking of state updates between resources, either on an endpoint or
   between endpoints, for systems using CoAP (RFC7252).

Editor note

   The git repository for the draft is found at https://github.com/core-
   wg/dynlink

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 13, 2022.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



Koster & Silverajan     Expires January 13, 2022                [Page 1]

Internet-Draft      Dynamic Resource Linking for CoRE          July 2021


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Link Bindings . . . . . . . . . . . . . . . . . . . . . . . .   3
     3.1.  The "bind" attribute and Binding Methods  . . . . . . . .   4
       3.1.1.  Polling . . . . . . . . . . . . . . . . . . . . . . .   5
       3.1.2.  Observe . . . . . . . . . . . . . . . . . . . . . . .   5
       3.1.3.  Push  . . . . . . . . . . . . . . . . . . . . . . . .   5
       3.1.4.  Execute . . . . . . . . . . . . . . . . . . . . . . .   6
     3.2.  Link Relation . . . . . . . . . . . . . . . . . . . . . .   6
   4.  Binding Table . . . . . . . . . . . . . . . . . . . . . . . .   6
   5.  Implementation Considerations . . . . . . . . . . . . . . . .   8
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .   8
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   8
     7.1.  Resource Type value 'core.bnd'  . . . . . . . . . . . . .   8
     7.2.  Link Relation Type  . . . . . . . . . . . . . . . . . . .   8
   8.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .   9
   9.  Contributors  . . . . . . . . . . . . . . . . . . . . . . . .   9
   10. Changelog . . . . . . . . . . . . . . . . . . . . . . . . . .  10
   11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  12
     11.1.  Normative References . . . . . . . . . . . . . . . . . .  12
     11.2.  Informative References . . . . . . . . . . . . . . . . .  13
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  13

1.  Introduction

   IETF Standards for machine to machine communication in constrained
   environments describe a REST protocol [RFC7252] and a set of related
   information standards that may be used to represent machine data and
   machine metadata in REST interfaces.  CoRE Link-format [RFC6690] is a
   standard for doing Web Linking [RFC8288] in constrained environments.

   This specification introduces the concept of a Link Binding, which
   defines a new link relation type to create a dynamic link between
   resources over which state updates are conveyed.  Specifically, a
   Link Binding is a unidirectional link for binding the states of
   source and destination resources together such that updates to one
   are sent over the link to the other.  CoRE Link Format
   representations are used to configure, inspect, and maintain Link
   Bindings.





Koster & Silverajan     Expires January 13, 2022                [Page 2]

Internet-Draft      Dynamic Resource Linking for CoRE          July 2021


2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   This specification requires readers to be familiar with all the terms
   and concepts that are discussed in [RFC8288], [RFC6690] and
   [RFC7641].  This specification makes use of the following additional
   terminology:

   Link Binding:  A unidirectional logical link between a source
      resource and a destination resource, over which state information
      is synchronized.

   State Synchronization:  Depending on the binding method (Polling,
      Observe, Push) different REST methods may be used to synchronize
      the resource values between a source and a destination.  The
      process of using a REST method to achieve this is defined as
      "State Synchronization".  The endpoint triggering the state
      synchronization is the synchronization initiator.

3.  Link Bindings

   In a M2M RESTful environment, endpoints may directly exchange the
   content of their resources to operate the distributed system.  For
   example, a light switch may supply on-off control information that
   may be sent directly to a light resource for on-off control.
   Beforehand, a configuration phase is necessary to determine how the
   resources of the different endpoints are related to each other.  This
   can be done either automatically using discovery mechanisms or by
   means of human intervention and a so-called commissioning tool.

   In this specification such an abstract relationship between two
   resources is defined, called a Link Binding.  The configuration phase
   necessitates the exchange of binding information, so a format
   recognized by all CoRE endpoints is essential.  This specification
   defines a format based on the CoRE Link-Format to represent binding
   information along with the rules to define a binding method which is
   a specialized relationship between two resources.

   The purpose of such a binding is to synchronize content updates
   between a source resource and a destination resource.  The
   destination resource MAY be a group resource if the authority
   component of the destination URI contains a group address (either a
   multicast address or a name that resolves to a multicast address).



Koster & Silverajan     Expires January 13, 2022                [Page 3]

Internet-Draft      Dynamic Resource Linking for CoRE          July 2021


   Since a binding is unidirectional, the binding entry defining a
   relationship is present only on one endpoint.  The binding entry may
   be located either on the source or the destination endpoint depending
   on the binding method.

   Conditional Notification Attributes defined in
   [I-D.ietf-core-conditional-attributes] can be used with Link Bindings
   in order to customize the notification behavior and timing.

3.1.  The "bind" attribute and Binding Methods

   A binding method defines the rules to generate the network-transfer
   exchanges that synchronize state between source and destination
   resources.  By using REST methods content is sent from the source
   resource to the destination resource.

   This specification defines a new CoRE link attribute "bind".  This is
   the identifier for a binding method which defines the rules to
   synchronize the destination resource.  This attribute is mandatory.

                +----------------+-----------+-----------+
                | Attribute      | Parameter | Value     |
                +----------------+-----------+-----------+
                | Binding method | bind      | xs:string |
                +----------------+-----------+-----------+

                        Table 1: The bind attribute

   The following table gives a summary of the binding methods defined in
   this specification.

          +---------+------------+-------------+---------------+
          | Name    | Identifier | Location    | Method        |
          +---------+------------+-------------+---------------+
          | Polling | poll       | Destination | GET           |
          |         |            |             |               |
          | Observe | obs        | Destination | GET + Observe |
          |         |            |             |               |
          | Push    | push       | Source      | PUT           |
          |         |            |             |               |
          | Execute | exec       | Source      | POST          |
          +---------+------------+-------------+---------------+

                      Table 2: Binding Method Summary

   The description of a binding method defines the following aspects:





Koster & Silverajan     Expires January 13, 2022                [Page 4]

Internet-Draft      Dynamic Resource Linking for CoRE          July 2021


   Identifier:  This is the value of the "bind" attribute used to
      identify the method.

   Location:  This information indicates whether the binding entry is
      stored on the source or on the destination endpoint.

   REST Method:  This is the REST method used in the Request/Response
      exchanges.

   Conditional Notification:  How Conditional Notification Attributes
      defined in [I-D.ietf-core-conditional-attributes] are used in the
      binding.

   The binding methods are described in more detail below.

3.1.1.  Polling

   The Polling method consists of sending periodic GET requests from the
   destination endpoint to the source resource and copying the content
   to the destination resource.  The binding entry for this method MUST
   be stored on the destination endpoint.  The destination endpoint MUST
   ensure that the polling frequency does not exceed the limits defined
   by the pmin and pmax attributes of the binding entry.  The copying
   process MAY filter out content from the GET requests using value-
   based conditions (e.g based on the Change Step, Less Than, Greater
   Than attributes defined in [I-D.ietf-core-conditional-attributes]).

3.1.2.  Observe

   The Observe method creates an observation relationship between the
   destination endpoint and the source resource.  On each notification
   the content from the source resource is copied to the destination
   resource.  The creation of the observation relationship requires the
   CoAP Observation mechanism [RFC7641] hence this method is only
   permitted when the resources are made available over CoAP.  The
   binding entry for this method MUST be stored on the destination
   endpoint.  The binding conditions are mapped as query parameters in
   the Observe request (see [I-D.ietf-core-conditional-attributes]).

3.1.3.  Push

   The Push method can be used to allow a source endpoint to replace an
   outdated resource state at the destination with a newer
   representation.  When the Push method is assigned to a binding, the
   source endpoint sends PUT requests to the destination resource when
   the Conditional Notification Attributes are satisfied for the source
   resource.  The source endpoint SHOULD only send a notification
   request if any included Conditional Notification Attributes are met.



Koster & Silverajan     Expires January 13, 2022                [Page 5]

Internet-Draft      Dynamic Resource Linking for CoRE          July 2021


   The binding entry for this method MUST be stored on the source
   endpoint.

3.1.4.  Execute

   An alternative means for a source endpoint to deliver change-of-state
   notifications to a destination resource is to use the Execute Method.
   While the Push method simply updates the state of the destination
   resource with the representation of the source resource, Execute can
   be used when the destination endpoint wishes to receive all state
   changes from a source.  This allows, for example, the existence of a
   resource collection consisting of all the state changes at the
   destination endpoint.  When the Execute method is assigned to a
   binding, the source endpoint sends POST requests to the destination
   resource when the Conditional Notification Attributes are satisfied
   for the source resource.  The source endpoint SHOULD only send a
   notification request if any included Conditional Notification
   Attributes are met.  The binding entry for this method MUST be stored
   on the source endpoint.

   Note: Both the Push and the Execute methods are examples of Server
   Push mechanisms that are being researched in the Thing-to-Thing
   Research Group (T2TRG) [I-D.irtf-t2trg-rest-iot].

3.2.  Link Relation

   Since Binding involves the creation of a link between two resources,
   Web Linking and the CoRE Link-Format used to represent binding
   information.  This involves the creation of a new relation type,
   "boundto".  In a Web link with this relation type, the target URI
   contains the location of the source resource and the context URI
   points to the destination resource.

4.  Binding Table

   The Binding Table is a special resource that describes the bindings
   on an endpoint.  An endpoint offering a representation of the Binding
   Table resource SHOULD indicate its presence and enable its discovery
   by advertising a link at "/.well-known/core" [RFC6690].  If so, the
   Binding Table resource MUST be discoverable by using the Resource
   Type (rt) 'core.bnd'.

   The Methods column defines the REST methods supported by the Binding
   Table, which are described in more detail below.







Koster & Silverajan     Expires January 13, 2022                [Page 6]

Internet-Draft      Dynamic Resource Linking for CoRE          July 2021


         +---------------+----------+----------+----------------+
         | Resource      | rt=      | Methods  | Content-Format |
         +---------------+----------+----------+----------------+
         | Binding Table | core.bnd | GET, PUT | link-format    |
         +---------------+----------+----------+----------------+

                    Table 3: Binding Table Description

   The REST methods GET and PUT are used to manipulate a Binding Table.
   A GET request simply returns the current state of a Binding Table.  A
   request with a PUT method and a content format of application/link-
   format is used to clear the bindings to the table or replaces its
   entire contents.  All links in the payload of a PUT rquest MUST have
   a relation type "boundto".

   The following example shows requests for discovering, retrieving and
   replacing bindings in a binding table.

   Req: GET /.well-known/core?rt=core.bnd (application/link-format)
   Res: 2.05 Content (application/link-format)
   </bnd/>;rt=core.bnd;ct=40

   Req: GET /bnd/
   Res: 2.05 Content (application/link-format)
   <coap://sensor.example.com/a/switch1/>;
           rel=boundto;anchor=/a/fan,;bind="obs",
   <coap://sensor.example.com/a/switch2/>;
           rel=boundto;anchor=/a/light;bind="obs"

   Req: PUT /bnd/ (Content-Format: application/link-format)
   <coap://sensor.example.com/s/light>;
     rel="boundto";anchor="/a/light";bind="obs";pmin=10;pmax=60
   Res: 2.04 Changed

   Req: GET /bnd/
   Res: 2.05 Content (application/link-format)
   <coap://sensor.example.com/s/light>;
     rel="boundto";anchor="/a/light";bind="obs";pmin=10;pmax=60

                      Figure 1: Binding Table Example

   Additional operations on the Binding Table can be specified in future
   documents.  Such operations can include, for example, the usage of
   the iPATCH or PATCH methods [RFC8132] for fine-grained addition and
   removal of individual bindings or binding subsets.






Koster & Silverajan     Expires January 13, 2022                [Page 7]

Internet-Draft      Dynamic Resource Linking for CoRE          July 2021


5.  Implementation Considerations

   The initiation of a Link Binding can be delegated from a client to a
   link state machine implementation, which can be an embedded client or
   a configuration tool.  Implementation considerations have to be given
   to how to monitor transactions made by the configuration tool with
   regards to Link Bindings, as well as any errors that may arise with
   establishing Link Bindings in addition to established Link Bindings.

6.  Security Considerations

   Consideration has to be given to what kinds of security credentials
   the state machine of a configuration tool or an embedded client needs
   to be configured with, and what kinds of access control lists client
   implementations should possess, so that transactions on creating Link
   Bindings and handling error conditions can be processed by the state
   machine.

7.  IANA Considerations

7.1.  Resource Type value 'core.bnd'

   This specification registers a new Resource Type Link Target
   Attribute 'core.bnd' in the Resource Type (rt=) registry established
   as per [RFC6690].

   Attribute Value:  core.bnd

   Description: See Section 4.  This attribute value is used to discover
   the resource representing a binding table, which describes the link
   bindings between source and destination resources for the purposes of
   synchronizing their content.

   Reference: This specification.  Note to RFC editor: please insert the
   RFC of this specification.

   Notes: None

7.2.  Link Relation Type

   This specification registers the new "boundto" link relation type as
   per [RFC8288].

   Relation Name:  boundto

   Description:  The purpose of a boundto relation type is to indicate
      that there is a binding between a source resource and a




Koster & Silverajan     Expires January 13, 2022                [Page 8]

Internet-Draft      Dynamic Resource Linking for CoRE          July 2021


      destination resource for the purposes of synchronizing their
      content.

   Reference:  This specification.  Note to RFC editor: please insert
      the RFC of this specification.

   Notes:  None

   Application Data:  None

8.  Acknowledgements

   Acknowledgement is given to colleagues from the SENSEI project who
   were critical in the initial development of the well-known REST
   interface concept, to members of the IPSO Alliance where further
   requirements for interface types have been discussed, and to Szymon
   Sasin, Cedric Chauvenet, Daniel Gavelle and Carsten Bormann who have
   provided useful discussion and input to the concepts in this
   specification.  Christian Amsuss supplied a comprehensive review of
   draft -06.  Discussions with Ari Keraenen led to the addition of an
   extra binding method supporting POST operations.

9.  Contributors

   Christian Groves
   Australia
   email: cngroves.std@gmail.com

   Zach Shelby
   ARM
   Vuokatti
   FINLAND
   phone: +358 40 7796297
   email: zach.shelby@arm.com

   Matthieu Vial
   Schneider-Electric
   Grenoble
   France
   phone: +33 (0)47657 6522
   eMail: matthieu.vial@schneider-electric.com

   Jintao Zhu
   Huawei
   Xi'an, Shaanxi Province
   China
   email: jintao.zhu@huawei.com




Koster & Silverajan     Expires January 13, 2022                [Page 9]

Internet-Draft      Dynamic Resource Linking for CoRE          July 2021


10.  Changelog

   draft-ietf-core-dynlink-14

   o  Conditional Atttributes section removed and submitted as draft-
      ietf-core-conditional-attributes-00

   draft-ietf-core-dynlink-13

   o  Conditional Atttributes section restructured

   o  "edge" and "con" attributes added

   o  Implementation considerations, clarifications added when pmax ==
      pmin

   o  rewritten to remove talk of server reporting values to clients

   draft-ietf-core-dynlink-12

   o  Attributes epmin and epmax included

   o  pmax now can be equal to pmin

   draft-ietf-core-dynlink-11

   o  Updates to author list

   draft-ietf-core-dynlink-10

   o  Binding methods now support both POST and PUT operations for
      server push.

   draft-ietf-core-dynlink-09

   o  Corrections in Table 1, Table 2, Figure 2.

   o  Clarifications for additional operations to binding table added in
      section 5

   o  Additional examples in Appendix A

   draft-ietf-core-dynlink-08

   o  Reorganize the draft to introduce Conditional Notification
      Attributes at the beginning





Koster & Silverajan     Expires January 13, 2022               [Page 10]

Internet-Draft      Dynamic Resource Linking for CoRE          July 2021


   o  Made pmin and pmax type xs:decimal to accommodate fractional
      second timing

   o  updated the attribute descriptions. lt and gt notify on all
      crossings, both directions

   o  updated Binding Table description, removed interface description
      but introduced core.bnd rt attribute value

   draft-ietf-core-dynlink-07

   o  Added reference code to illustrate attribute interactions for
      observations

   draft-ietf-core-dynlink-06

   o  Document restructure and refactoring into three main sections

   o  Clarifications on band usage

   o  Implementation considerations introduced

   o  Additional text on security considerations

   draft-ietf-core-dynlink-05

   o  Addition of a band modifier for gt and lt, adapted from draft-
      groves-core-obsattr

   o  Removed statement prescribing gt MUST be greater than lt

   draft-ietf-core-dynlink-03

   o  General: Reverted to using "gt" and "lt" from "gth" and "lth" for
      this draft owing to concerns raised that the attributes are
      already used in LwM2M with the original names "gt" and "lt".

   o  New author and editor added.

   draft-ietf-core-dynlink-02

   o  General: Changed the name of the greater than attribute "gt" to
      "gth" and the name of the less than attribute "lt" to "lth" due to
      conlict with the core resource directory draft lifetime "lt"
      attribute.

   o  Clause 6.1: Addressed the editor's note by changing the link
      target attribute to "core.binding".



Koster & Silverajan     Expires January 13, 2022               [Page 11]

Internet-Draft      Dynamic Resource Linking for CoRE          July 2021


   o  Added Appendix A for examples.

   draft-ietf-core-dynlink-01

   o  General: The term state synchronization has been introduced to
      describe the process of synchronization between destination and
      source resources.

   o  General: The document has been restructured the make the
      information flow better.

   o  Clause 3.1: The descriptions of the binding attributes have been
      updated to clarify their usage.

   o  Clause 3.1: A new clause has been added to discuss the
      interactions between the resources.

   o  Clause 3.4: Has been simplified to refer to the descriptions in
      3.1.  As the text was largely duplicated.

   o  Clause 4.1: Added a clarification that individual resources may be
      removed from the binding table.

   o  Clause 6: Formailised the IANA considerations.

   draft-ietf-core-dynlink Initial Version 00:

   o  This is a copy of draft-groves-core-dynlink-00

   draft-groves-core-dynlink Draft Initial Version 00:

   o  This initial version is based on the text regarding the dynamic
      linking functionality in I.D.ietf-core-interfaces-05.

   o  The WADL description has been dropped in favour of a thorough
      textual description of the REST API.

11.  References

11.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.






Koster & Silverajan     Expires January 13, 2022               [Page 12]

Internet-Draft      Dynamic Resource Linking for CoRE          July 2021


   [RFC6690]  Shelby, Z., "Constrained RESTful Environments (CoRE) Link
              Format", RFC 6690, DOI 10.17487/RFC6690, August 2012,
              <https://www.rfc-editor.org/info/rfc6690>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8288]  Nottingham, M., "Web Linking", RFC 8288,
              DOI 10.17487/RFC8288, October 2017,
              <https://www.rfc-editor.org/info/rfc8288>.

11.2.  Informative References

   [I-D.ietf-core-conditional-attributes]
              Koster, M. and B. Silverajan, "Conditional Attributes for
              Constrained RESTful Environments", draft-ietf-core-
              conditional-attributes-00 (work in progress), July 2021.

   [I-D.irtf-t2trg-rest-iot]
              Keranen, A., Kovatsch, M., and K. Hartke, "RESTful Design
              for Internet of Things Systems", draft-irtf-t2trg-rest-
              iot-07 (work in progress), February 2021.

   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, "The Constrained
              Application Protocol (CoAP)", RFC 7252,
              DOI 10.17487/RFC7252, June 2014,
              <https://www.rfc-editor.org/info/rfc7252>.

   [RFC7641]  Hartke, K., "Observing Resources in the Constrained
              Application Protocol (CoAP)", RFC 7641,
              DOI 10.17487/RFC7641, September 2015,
              <https://www.rfc-editor.org/info/rfc7641>.

   [RFC8132]  van der Stok, P., Bormann, C., and A. Sehgal, "PATCH and
              FETCH Methods for the Constrained Application Protocol
              (CoAP)", RFC 8132, DOI 10.17487/RFC8132, April 2017,
              <https://www.rfc-editor.org/info/rfc8132>.

Authors' Addresses

   Michael Koster
   SmartThings
   665 Clyde Avenue
   Mountain View  94043
   USA

   Email: michael.koster@smartthings.com



Koster & Silverajan     Expires January 13, 2022               [Page 13]

Internet-Draft      Dynamic Resource Linking for CoRE          July 2021


   Bilhanan Silverajan (editor)
   Tampere University
   Kalevantie 4
   Tampere  FI-33100
   Finland

   Email: bilhanan.silverajan@tuni.fi












































Koster & Silverajan     Expires January 13, 2022               [Page 14]
