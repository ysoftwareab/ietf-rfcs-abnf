



CoRE                                                        M.S. Lenders
Internet-Draft                                                 FU Berlin
Intended status: Standards Track                               C. Amsüss
Expires: 13 February 2022                                               
                                                             C. Gündoğan
                                                            T.C. Schmidt
                                                             HAW Hamburg
                                                             M. Wählisch
                                                               FU Berlin
                                                          12 August 2021


                      DNS Queries over CoAP (DoC)
                     draft-lenders-dns-over-coap-00

Abstract

   This document defines a protocol for sending DNS messages over the
   Constrained Application Protocol (CoAP).  These CoAP messages are
   protected by DTLS-Secured CoAP (CoAPS) or Object Security for
   Constrained RESTful Environments (OSCORE) to provide encrypted DNS
   message exchange for constrained devices in the Internet of Things
   (IoT).

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on TODO

   Source for this draft and an issue tracker can be found at
   https://github.com/anr-bmbf-pivot/draft-dns-over-coaps.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."




Lenders, et al.         Expires 13 February 2022                [Page 1]

Internet-Draft                     DoC                       August 2021


   This Internet-Draft will expire on 13 February 2022.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   4
   3.  Selection of a DoC Server . . . . . . . . . . . . . . . . . .   4
     3.1.  URI Template Alternatives . . . . . . . . . . . . . . . .   4
   4.  Basic Message Exchange  . . . . . . . . . . . . . . . . . . .   4
     4.1.  The "application/dns-message" Content-Format  . . . . . .   4
     4.2.  DNS Queries in CoAP Requests  . . . . . . . . . . . . . .   5
       4.2.1.  CoAP Methods  . . . . . . . . . . . . . . . . . . . .   5
       4.2.2.  Support of CoAP Caching . . . . . . . . . . . . . . .   6
       4.2.3.  Examples  . . . . . . . . . . . . . . . . . . . . . .   6
     4.3.  DNS Responses in CoAP Responses . . . . . . . . . . . . .   7
       4.3.1.  Response Codes and Handling DNS and CoAP errors . . .   7
       4.3.2.  Support of CoAP Caching . . . . . . . . . . . . . . .   8
       4.3.3.  Examples  . . . . . . . . . . . . . . . . . . . . . .   8
   5.  CoAP/CoRE Integration . . . . . . . . . . . . . . . . . . . .   9
     5.1.  Proxies and caching . . . . . . . . . . . . . . . . . . .   9
     5.2.  OBSERVE (modifications)?  . . . . . . . . . . . . . . . .   9
     5.3.  OSCORE  . . . . . . . . . . . . . . . . . . . . . . . . .  10
   6.  URI template configuration  . . . . . . . . . . . . . . . . .  10
   7.  Considerations for Unencrypted Use  . . . . . . . . . . . . .  10
   8.  Security Considerations . . . . . . . . . . . . . . . . . . .  11
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  11
   10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  11
     10.1.  Normative References . . . . . . . . . . . . . . . . . .  11
     10.2.  Informative References . . . . . . . . . . . . . . . . .  12
   Appendix A.  Change Log . . . . . . . . . . . . . . . . . . . . .  13
     A.1.  Since draft-lenders-dns-over-coaps-00 . . . . . . . . . .  13
   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .  14
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  14




Lenders, et al.         Expires 13 February 2022                [Page 2]

Internet-Draft                     DoC                       August 2021


1.  Introduction

   This document defines DNS over CoAP (DoC), a protocol to send DNS
   [RFC1035] queries and get DNS responses over the Constrained
   Application Protocol (CoAP) [RFC7252].  Each DNS query-response pair
   is mapped into a CoAP message exchange.  Each CoAP message is secured
   by DTLS [RFC6347] or Object Security for Constrained RESTful
   Environments (OSCORE) [RFC7252] to ensure message integrity and
   confidentiality.

   The application use case of DoC is inspired by DNS over HTTPS
   [RFC8484] (DoH).  DoC, however, aims for the deployment in the
   constrained Internet of Things (IoT), which usually conflicts with
   the requirements introduced by HTTPS.

   To prevent TCP and HTTPS resource requirements, constrained IoT
   devices could use DNS over DTLS [RFC8094].  In contrast to DNS over
   DTLS, DoC utilizes CoAP features to mitigate drawbacks of datagram-
   based communication.  These features include: block-wise transfer,
   which solves the Path MTU problem of DNS over DTLS (see [RFC8094],
   section 5); CoAP proxies, which provide an additional level of
   caching; re-use of data structures for application traffic and DNS
   information, which saves memory on constrained devices.

                   - GET coaps://[2001::db8::1]/?dns=example.org
                  /- POST/FETCH coaps://[2001::db8::1]/
                 /
                CoAP request
   +--------+   [DNS query]   +--------+  DNS query   +--------+
   |  DoC   |---------------->|  DoC   |.............>|  DNS   |
   | Client |<----------------| Server |<.............| Server |
   +--------+  CoAP response  +--------+ DNS response +--------+
               [DNS response]

                      Figure 1: Basic DoC architecture

   The most important components of DoC can be seen in Figure 1: A DoC
   client tries to resolve DNS information by sending DNS queries
   carried within CoAP requests to a DoC server.  That DoC server may or
   may not resolve that DNS information itself by using other DNS
   transports with an upstream DNS server.  The DoC server then replies
   to the DNS queries with DNS responses carried within CoAP responses.

   TBD: additional feature sets of CoAP/CoRE

   *  resource directory for DoC service discovery,

   *  ...



Lenders, et al.         Expires 13 February 2022                [Page 3]

Internet-Draft                     DoC                       August 2021


2.  Terminology

   A server that provides the service specified in this document is
   called a "DoC server" to differentiate it from a classic "DNS
   server".  Correspondingly, a client using this protocol to retrieve
   the DNS information is called a "DoC client".

   The term "constrained nodes" is used as defined in [RFC7228].

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Selection of a DoC Server

   A DoC client is configured with a URI Template [RFC6570].  This
   allows us to reuse configuration mechanisms provided for DoH.

   The URI Template SHOULD provide a variable "dns" so that GET requests
   can be used to retrieve the DNS information.  If the "dns" variable
   is not provided in the URI Template, GET requests can not be used for
   DoC exchanges.

   TBD:

   *  Support for more than one URI Template by DoC server.

   *  DoC server identity, key exchange, ...

3.1.  URI Template Alternatives

   TBD:

   *  CRI [I-D.ietf-core-href] or CoRAL [I-D.ietf-core-coral]

4.  Basic Message Exchange

4.1.  The "application/dns-message" Content-Format

   This document defines the Internet media type "application/dns-
   message" for the CoAP Content-Format.  This media type is defined as
   in [RFC8484] Section 6, i.e., a single DNS message encoded in the DNS
   on-the-wire format [RFC1035].






Lenders, et al.         Expires 13 February 2022                [Page 4]

Internet-Draft                     DoC                       August 2021


4.2.  DNS Queries in CoAP Requests

   A DoC client encodes a single DNS query in one or more CoAP request
   messages using either the CoAP GET [RFC7252], POST [RFC7252], or
   FETCH [RFC8132] methods.  Requests of either method type SHOULD
   include an Accept option to indicate the type of content that can be
   parsed in the response.  A client MUST be able to parse messages of
   Content-Format "application/dns-message" regardless of the provided
   Accept option.

   To enable reliable message exchange, the CoAP request SHOULD be
   carried in a Confirmable (CON) message.

4.2.1.  CoAP Methods

   When sending a CoAP request using the POST or FETCH method, a DoC
   client MUST use the Content-Format "application/dns-message" in the
   request.  The DNS query is included in the payload.

   If the FETCH or POST method are used and block-wise transfer
   [RFC7959] is supported by the client, more than one CoAP request
   message MAY be used.  If more than one CoAP request message is used
   to encode the DNS query, it must be chained together using the Block1
   option in those CoAP requests.

   For a POST or FETCH request the URI Template specified in Section 3
   is processed without any variables set.

   When sending a CoAP request using the GET method, the URI Template
   specified in Section 3 is extended by the variable "dns".  A DoC
   client MUST use the "dns" variable in the URI-Query followed by the
   DNS query encoded with "base64url" (details see [RFC8484] Section 6).
   If new Content-Formats are specified in the future, the specification
   MUST define the variable used in the URI Template with that new
   format.

   A DoC client must implement the GET, POST, or FETCH method.  Due to
   the lack of "base64url" encoding requirements, both FETCH and POST
   methods are generally smaller than GET requests.  Using the FETCH
   method is RECOMMENDED because this method provides caching and block-
   wise transfer without introducing the overhead of URI templates (see
   Table 1).









Lenders, et al.         Expires 13 February 2022                [Page 5]

Internet-Draft                     DoC                       August 2021


    +========+===========+=========================+=================+
    | Method | Cacheable | Block-wise transferable | No URI Template |
    |        |           |                         | variable needed |
    +========+===========+=========================+=================+
    |    GET |     Y     |            N            |        N        |
    +--------+-----------+-------------------------+-----------------+
    |   POST |     N     |            Y            |        Y        |
    +--------+-----------+-------------------------+-----------------+
    |  FETCH |     Y     |            Y            |        Y        |
    +--------+-----------+-------------------------+-----------------+

       Table 1: Comparison of CoAP method features (Y: Yes, N: No)

   A DoC server MUST implement the GET, POST, and FETCH method.
   Content-Format within the payload of a CoAP response.  A DoC server
   MUST be able to parse requests of Content-Format "application/dns-
   message".

4.2.2.  Support of CoAP Caching

   The DoC client SHOULD set the ID field of the DNS header always to 0
   to enable a CoAP cache (e.g., a CoAP proxy en-route) to respond to
   the same DNS queries with a cache entry.  This ensures that the CoAP
   Cache-Key (for GET see [RFC7252] Section 5.6, for FETCH see [RFC8132]
   Section 2) does not change when multiple DNS queries for the same DNS
   data, carried in CoAP requests, are issued.  Technically, using the
   POST method does not require the DNS ID set to 0 because the payload
   of a POST message is not part of the Cache-Key. For consistency
   reasons, however, it is RECOMMENDED to use the same constant DNS ID.

4.2.3.  Examples

   The following examples illustrate the usage of different CoAP
   messages to resolve "example.org.  IN AAAA" based on the URI template
   "coaps://[2001:db8::1]/{?dns}".  The CoAP body is encoded in
   "application/dns-message" Content-Format.

   GET request:

   GET coaps://[2001::db8::1]/
   URI-Query: dns=AAABIAABAAAAAAAAB2V4YW1wbGUDb3JnAAAcAAE
   Accept: application/dns-message

   POST request:







Lenders, et al.         Expires 13 February 2022                [Page 6]

Internet-Draft                     DoC                       August 2021


   POST coaps://[2001::db8::1]/
   Content-Format: application/dns-message
   Accept: application/dns-message
   Payload: 00 00 01 20 00 02 00 00 00 00 00 00 07 65 78 61 [binary]
            6d 70 6c 65 03 6f 72 67 00 00 1c 00 01 c0 0c 00 [binary]
            01 00 01                                        [binary]

   FETCH request:

   FETCH coaps://[2001::db8::1]/
   Content-Format: application/dns-message
   Accept: application/dns-message
   Payload: 00 00 01 20 00 02 00 00 00 00 00 00 07 65 78 61 [binary]
            6d 70 6c 65 03 6f 72 67 00 00 1c 00 01 c0 0c 00 [binary]
            01 00 01                                        [binary]

4.3.  DNS Responses in CoAP Responses

   Each DNS query-response pair is mapped to a train of one or more of
   CoAP request-response pairs.  DNS responses are provided in the
   payload of CoAP responses.  A DoC server MUST use the Content-Format
   "application/dns-message" (see Section 4.1).

   If supported, a DoC server MAY transfer the DNS response in more than
   one CoAP responses using the Block2 option [RFC7959].

4.3.1.  Response Codes and Handling DNS and CoAP errors

   A DNS response indicates either success or failure in the Response
   code of the DNS header (see [RFC1035] Section 4.1.1).  It is
   RECOMMENDED that CoAP responses that carry any valid DNS response use
   a "2.xx Success" response code.  A response to a GET or FETCH request
   SHOULD use the "2.05 Content" code.  A response to a POST request
   SHOULD use the "2.01 Created" code.

   CoAP responses use non-successful response codes MUST NOT contain any
   payload and may only be used on errors in the CoAP layer or when a
   request does not fulfill the requirements of the DoC protocol.

   Communication errors with a DNS server (e.g., timeouts) SHOULD be
   indicated by including a SERVFAIL DNS response in a successful CoAP
   response.

   A DoC client might try to repeat a non-successful exchange unless
   otherwise prohibited.  For instance, a FETCH request MUST NOT be
   repeated with a URI Template for which the DoC server already
   responded with "4.05 Method Not Allowed" since the server might only
   implement legacy CoAP and does not support the FETCH method.  The DoC



Lenders, et al.         Expires 13 February 2022                [Page 7]

Internet-Draft                     DoC                       August 2021


   client might also decide to repeat a non-successful exchange with a
   different URI Template, for instance, when the response indicates an
   unsupported Content-Format.

4.3.2.  Support of CoAP Caching

   It is RECOMMENDED to set the Max-Age option of a response to the
   minimum TTL in the Answer section of a DNS response.  This prevents
   expired records unintentionally being served from a CoAP cache.

   It is RECOMMENDED that DoC servers set an ETag option on large
   responses (TBD: more concrete guidance) that have a short Max-Age
   relative to the expected clients' caching time.  Thus, clients that
   need to revalidate a response can do so using the established ETag
   mechanism.  With responses large enough to be fragmented, it's best
   practice for servers to set an ETag anyway.

4.3.3.  Examples

   The following examples illustrate the replies to the query
   "example.org.  IN AAAA record", recursion turned on.  Successful
   responses carry one answer record including address
   2001:db8:1::1:2:3:4 and TTL 58719.

   A successful response to a GET or FETCH request:

   2.05 Content
   Content-Format: application/dns-message
   Max-Age: 58719
   Payload: 00 00 81 a0 00 01 00 01 00 00 00 00 07 65 78 61 [binary]
            6d 70 6c 65 03 6f 72 67 00 00 1c 00 01 c0 0c 00 [binary]
            1c 00 01 00 01 37 49 00 10 20 01 0d b8 00 01 00 [binary]
            00 00 01 00 02 00 03 00 04                      [binary]

   A successful response to a POST request uses a different response
   code:

   2.03 Created
   Content-Format: application/dns-message
   Max-Age: 58719
   Payload: 00 00 81 a0 00 01 00 01 00 00 00 00 07 65 78 61 [binary]
            6d 70 6c 65 03 6f 72 67 00 00 1c 00 01 c0 0c 00 [binary]
            1c 00 01 00 01 37 49 00 10 20 01 0d b8 00 01 00 [binary]
            00 00 01 00 02 00 03 00 04                      [binary]

   When a DNS error (SERVFAIL in this case) is noted in the DNS
   response, the CoAP request still indicates success:




Lenders, et al.         Expires 13 February 2022                [Page 8]

Internet-Draft                     DoC                       August 2021


   2.05 Content
   Content-Format: application/dns-message
   Payload: 00 00 81 a2 00 01 00 00 00 00 00 00 07 65 78 61 [binary]
            6d 70 6c 65 03 6f 72 67 00 00 1c 00 01          [binary]

   When an error occurs on the CoAP layer, the DoC server SHOULD respond
   with an appropriate CoAP error, for instance "4.15 Unsupported
   Content-Format" if the Content-Format option in the request was not
   set to "application/dns-message" and the Content-Format is not
   otherwise supported by the server.

5.  CoAP/CoRE Integration

5.1.  Proxies and caching

   TBD:

   *  TTL vs. Max-Age (https://github.com/anr-bmbf-pivot/draft-dns-over-
      coaps/issues/5)

   *  Responses that are not globally valid

   *  General CoAP proxy problem, but what to do when DoC server is a
      DNS proxy, response came not yet in but retransmission by DoC
      client was received (see Figure 2)

      -  send empty ACK (maybe move to best practices appendix
         (https://github.com/anr-bmbf-pivot/draft-dns-over-coaps/
         issues/6#issuecomment-895880206))

         DoC client           DoC proxy           DNS server
              |  CoAP req [rt 1]  |                    |
              |------------------>|  DNS query [rt 1]  |
              |                   |------------------->|
              |  CoAP req [rt 2]  |                    |
              |------------------>|      DNS resp      |
              |     CoAP resp     |<-------------------|
              |<------------------|                    |
              |                   |                    |

            Figure 2: CoAP retransmission (rt) is received before DNS
                         query could have been fulfilled.

5.2.  OBSERVE (modifications)?

   *  TBD





Lenders, et al.         Expires 13 February 2022                [Page 9]

Internet-Draft                     DoC                       August 2021


   *  DoH has considerations on Server Push to deliver additional,
      potentially outstanding requests + response to the DoC client for
      caching

   *  OBSERVE does not include the request it would have been generated
      from ==> cannot be cached without corresponding request having
      been send over the wire.

   *  If use case exists: extend OBSERVE with option that contains
      "promised" request (see [RFC7540], section 8.2)?

   *  Other caveat: clients can't cache, only proxys so value needs to
      be evaluated

   *  Potential use case: [RFC8490] Section 4.1.2

5.3.  OSCORE

   *  TBD

   *  With OSCORE DTLS might not be required

6.  URI template configuration

   *  TBD

   *  Maybe out-of-scope?

   *  DHCP and RA options to deliver?  [I-D.peterson-doh-dhcp]

   *  CoRE-RD [I-D.ietf-core-resource-directory] (...; can not express
      URI templates)

   *  When no actual templating is involved: regular resource discovery
      ("rt=core.dns"?) through .well-known/core

7.  Considerations for Unencrypted Use

   *  TBD

   *  DTLS-transport should be used

   *  Non-DTLS can have benefits: Blockwise-transfer for IEEE 802.15.4,
      additional layer of caching, ...







Lenders, et al.         Expires 13 February 2022               [Page 10]

Internet-Draft                     DoC                       August 2021


8.  Security Considerations

   TODO Security

9.  IANA Considerations

   IANA is requested to assign CoAP Content-Format ID for the DNS
   message media type in the "CoAP Content-Formats" sub-registry, within
   the "CoRE Parameters" registry [RFC7252], corresponding the
   "application/dns-message" media type from the "Media Types" registry:

   Media-Type: application/dns-message

   Encoding: -

   Id: TBD

   Reference: [TBD-this-spec]

10.  References

10.1.  Normative References

   [RFC1035]  Mockapetris, P., "Domain names - implementation and
              specification", STD 13, RFC 1035, DOI 10.17487/RFC1035,
              November 1987, <https://www.rfc-editor.org/rfc/rfc1035>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC6347]  Rescorla, E. and N. Modadugu, "Datagram Transport Layer
              Security Version 1.2", RFC 6347, DOI 10.17487/RFC6347,
              January 2012, <https://www.rfc-editor.org/rfc/rfc6347>.

   [RFC6570]  Gregorio, J., Fielding, R., Hadley, M., Nottingham, M.,
              and D. Orchard, "URI Template", RFC 6570,
              DOI 10.17487/RFC6570, March 2012,
              <https://www.rfc-editor.org/rfc/rfc6570>.

   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, "The Constrained
              Application Protocol (CoAP)", RFC 7252,
              DOI 10.17487/RFC7252, June 2014,
              <https://www.rfc-editor.org/rfc/rfc7252>.






Lenders, et al.         Expires 13 February 2022               [Page 11]

Internet-Draft                     DoC                       August 2021


   [RFC7959]  Bormann, C. and Z. Shelby, Ed., "Block-Wise Transfers in
              the Constrained Application Protocol (CoAP)", RFC 7959,
              DOI 10.17487/RFC7959, August 2016,
              <https://www.rfc-editor.org/rfc/rfc7959>.

   [RFC8132]  van der Stok, P., Bormann, C., and A. Sehgal, "PATCH and
              FETCH Methods for the Constrained Application Protocol
              (CoAP)", RFC 8132, DOI 10.17487/RFC8132, April 2017,
              <https://www.rfc-editor.org/rfc/rfc8132>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8484]  Hoffman, P. and P. McManus, "DNS Queries over HTTPS
              (DoH)", RFC 8484, DOI 10.17487/RFC8484, October 2018,
              <https://www.rfc-editor.org/rfc/rfc8484>.

10.2.  Informative References

   [I-D.ietf-core-coral]
              Hartke, K., "The Constrained RESTful Application Language
              (CoRAL)", Work in Progress, Internet-Draft, draft-ietf-
              core-coral-03, 9 March 2020,
              <https://datatracker.ietf.org/doc/html/draft-ietf-core-
              coral-03>.

   [I-D.ietf-core-href]
              Bormann, C. and H. Birkholz, "Constrained Resource
              Identifiers", Work in Progress, Internet-Draft, draft-
              ietf-core-href-06, 25 July 2021,
              <https://datatracker.ietf.org/doc/html/draft-ietf-core-
              href-06>.

   [I-D.ietf-core-resource-directory]
              Amsüss, C., Shelby, Z., Koster, M., Bormann, C., and P. V.
              D. Stok, "CoRE Resource Directory", Work in Progress,
              Internet-Draft, draft-ietf-core-resource-directory-28, 7
              March 2021, <https://datatracker.ietf.org/doc/html/draft-
              ietf-core-resource-directory-28>.

   [I-D.peterson-doh-dhcp]
              Peterson, T., "DNS over HTTP resolver announcement Using
              DHCP or Router Advertisements", Work in Progress,
              Internet-Draft, draft-peterson-doh-dhcp-01, 21 October
              2019, <https://datatracker.ietf.org/doc/html/draft-
              peterson-doh-dhcp-01>.




Lenders, et al.         Expires 13 February 2022               [Page 12]

Internet-Draft                     DoC                       August 2021


   [RFC7228]  Bormann, C., Ersue, M., and A. Keranen, "Terminology for
              Constrained-Node Networks", RFC 7228,
              DOI 10.17487/RFC7228, May 2014,
              <https://www.rfc-editor.org/rfc/rfc7228>.

   [RFC7540]  Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext
              Transfer Protocol Version 2 (HTTP/2)", RFC 7540,
              DOI 10.17487/RFC7540, May 2015,
              <https://www.rfc-editor.org/rfc/rfc7540>.

   [RFC8094]  Reddy, T., Wing, D., and P. Patil, "DNS over Datagram
              Transport Layer Security (DTLS)", RFC 8094,
              DOI 10.17487/RFC8094, February 2017,
              <https://www.rfc-editor.org/rfc/rfc8094>.

   [RFC8490]  Bellis, R., Cheshire, S., Dickinson, J., Dickinson, S.,
              Lemon, T., and T. Pusateri, "DNS Stateful Operations",
              RFC 8490, DOI 10.17487/RFC8490, March 2019,
              <https://www.rfc-editor.org/rfc/rfc8490>.

Appendix A.  Change Log

   TBD:

   *  Reconsider usage of GET/POST (https://github.com/anr-bmbf-pivot/
      draft-dns-over-coaps/issues/2)?

   *  Request text duplication (https://github.com/anr-bmbf-pivot/draft-
      dns-over-coaps/issues/4)

A.1.  Since draft-lenders-dns-over-coaps-00
      (https://datatracker.ietf.org/doc/html/draft-lenders-dns-over-
      coaps-00)

   *  Clarification in abstract that both DTLS and OSCORE can be used as
      secure transport

   *  Restructuring of Section 4:

      -  Add dedicated Section 4.1 on Content-Format

      -  Add overview table about usable and required features for
         request method types to Section 4.2

      -  Add dedicated Section 4.2.2 and Section 4.3.2 on caching
         requirements for CoAP requests and responses

   *  Fix nits and typos



Lenders, et al.         Expires 13 February 2022               [Page 13]

Internet-Draft                     DoC                       August 2021


Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Martine Sophie Lenders
   Freie Universität Berlin

   Email: m.lenders@fu-berlin.de


   Christian Amsüss

   Email: christian@amsuess.com


   Cenk Gündoğan
   HAW Hamburg

   Email: cenk.guendogan@haw-hamburg.de


   Thomas C. Schmidt
   HAW Hamburg

   Email: t.schmidt@haw-hamburg.de


   Matthias Wählisch
   Freie Universität Berlin

   Email: m.waehlisch@fu-berlin.de


















Lenders, et al.         Expires 13 February 2022               [Page 14]
