


Network Working Group                                      D. Harrington
Internet-Draft                                 Huawei Technologies (USA)
Intended status: Standards Track                        January 25, 2007
Expires: July 29, 2007


                   Transport Security Model for SNMP
              draft-ietf-isms-transport-security-model-02

Status of This Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on July 29, 2007.

Copyright Notice

   Copyright (C) The IETF Trust (2007).

Abstract

   This memo describes a Transport Security Model for the Simple Network
   Management Protocol.









Harrington                Expires July 29, 2007                 [Page 1]

Internet-Draft      Transport Security Model for SNMP       January 2007


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1.  The Internet-Standard Management Framework . . . . . . . .  3
     1.2.  Conventions  . . . . . . . . . . . . . . . . . . . . . . .  3
     1.3.  Modularity . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.4.  Motivation . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.5.  Constraints  . . . . . . . . . . . . . . . . . . . . . . .  5
   2.  How Transport Security Model Fits in the Architecture  . . . .  5
     2.1.  Security Capabilities of this Model  . . . . . . . . . . .  5
       2.1.1.  Threats  . . . . . . . . . . . . . . . . . . . . . . .  5
       2.1.2.  Security Levels  . . . . . . . . . . . . . . . . . . .  6
     2.2.  No Sessions  . . . . . . . . . . . . . . . . . . . . . . .  6
     2.3.  Coexistence  . . . . . . . . . . . . . . . . . . . . . . .  7
     2.4.  Security Parameter Passing . . . . . . . . . . . . . . . .  7
     2.5.  Notifications and Proxy  . . . . . . . . . . . . . . . . .  8
   3.  Message Formats  . . . . . . . . . . . . . . . . . . . . . . .  8
     3.1.  SNMPv3 Message Fields  . . . . . . . . . . . . . . . . . .  9
       3.1.1.  msgGlobalData  . . . . . . . . . . . . . . . . . . . . 10
       3.1.2.  securityLevel and msgFlags . . . . . . . . . . . . . . 10
       3.1.3.  msgSecurityParameters  . . . . . . . . . . . . . . . . 11
     3.2.  Cached Information and References  . . . . . . . . . . . . 11
       3.2.1.  securityStateReference . . . . . . . . . . . . . . . . 12
       3.2.2.  tmStateReference . . . . . . . . . . . . . . . . . . . 12
   4.  Processing an Outgoing Message . . . . . . . . . . . . . . . . 13
     4.1.  Security Processing for an Outgoing Message  . . . . . . . 13
     4.2.  Elements of Procedure for Outgoing Messages  . . . . . . . 14
   5.  Processing an Incoming SNMP Message  . . . . . . . . . . . . . 15
     5.1.  Security Processing for an Incoming Message  . . . . . . . 15
     5.2.  Elements of Procedure for Incoming Messages  . . . . . . . 16
   6.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
     6.1.  Structure of the MIB Module  . . . . . . . . . . . . . . . 17
     6.2.  Textual Conventions  . . . . . . . . . . . . . . . . . . . 17
     6.3.  The transportStats Subtree . . . . . . . . . . . . . . . . 17
     6.4.  Relationship to Other MIB Modules  . . . . . . . . . . . . 17
       6.4.1.  Relationship to the SNMPv2-MIB . . . . . . . . . . . . 17
       6.4.2.  MIB Modules Required for IMPORTS . . . . . . . . . . . 18
   7.  MIB module definition  . . . . . . . . . . . . . . . . . . . . 18
   8.  Security Considerations  . . . . . . . . . . . . . . . . . . . 21
     8.1.  MIB module security  . . . . . . . . . . . . . . . . . . . 21
   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 22
   10. References . . . . . . . . . . . . . . . . . . . . . . . . . . 22
     10.1. Normative References . . . . . . . . . . . . . . . . . . . 22
     10.2. Informative References . . . . . . . . . . . . . . . . . . 23
   Appendix A.  Notification Tables Configuration . . . . . . . . . . 24
     A.1.  Transport Security Model Processing  . . . . . . . . . . . 25
   Appendix B.  Change Log  . . . . . . . . . . . . . . . . . . . . . 26




Harrington                Expires July 29, 2007                 [Page 2]

Internet-Draft      Transport Security Model for SNMP       January 2007


1.  Introduction

   This memo describes a Transport Security Model for the Simple Network
   Management Protocol, for use with secure transport models in the
   Transport Subsystem [I-D.ietf-isms-tmsm].

   This memo also defines a portion of the Management Information Base
   (MIB) for use with network management protocols in TCP/IP based
   internets.  In particular it defines objects for monitoring and
   managing the Transport Security Model for SNMP.

   It is important to understand the SNMP architecture and the
   terminology of the architecture to understand where the Transport
   Security Model described in this memo fits into the architecture and
   interacts with other subsystems and models within the architecture.

1.1.  The Internet-Standard Management Framework

   For a detailed overview of the documents that describe the current
   Internet-Standard Management Framework, please refer to section 7 of
   RFC 3410 [RFC3410].

   Managed objects are accessed via a virtual information store, termed
   the Management Information Base or MIB.  MIB objects are generally
   accessed through the Simple Network Management Protocol (SNMP).
   Objects in the MIB are defined using the mechanisms defined in the
   Structure of Management Information (SMI).  This memo specifies a MIB
   module that is compliant to the SMIv2, which is described in STD 58,
   RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58, RFC 2580
   [RFC2580].

1.2.  Conventions

   The terms "manager" and "agent" are not used in this document,
   because in the RFC 3411 architecture, all SNMP entities have the
   capability of acting as either manager or agent or both depending on
   the SNMP applications included in the engine.  Where distinction is
   required, the application names of Command Generator, Command
   Responder, Notification Originator, Notification Receiver, and Proxy
   Forwarder are used.  See "SNMP Applications" [RFC3413] for further
   information.

   While security protocols frequently refer to a user, the terminology
   used in RFC3411 [RFC3411] and in this memo is "principal".  A
   principal is the "who" on whose behalf services are provided or
   processing takes place.  A principal can be, among other things, an
   individual acting in a particular role; a set of individuals, with
   each acting in a particular role; an application or a set of



Harrington                Expires July 29, 2007                 [Page 3]

Internet-Draft      Transport Security Model for SNMP       January 2007


   applications, or a combination of these within an administrative
   domain.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

1.3.  Modularity

   The reader is expected to have read and understood the description of
   the SNMP architecture, as defined in [RFC3411],and the architecture
   extension specified in "Transport Subsystem for the Simple Network
   Management Protocol" [I-D.ietf-isms-tmsm], which enables the use of
   external "lower layer transport" protocols to provide message
   security, tied into the SNMP architecture through the transport
   subsystem.  The Transport Security Model is designed to work with
   such lower-layer secure transport models.

   In keeping with the RFC 3411 design decisions to use self-contained
   documents, this memo includes the elements of procedure plus
   associated MIB objects which are needed for processing the Transport
   Security Model for SNMP.  These MIB objects SHOULD not be referenced
   in other documents.  This allows the Transport Security Model to be
   designed and documented as independent and self-contained, having no
   direct impact on other modules, and allowing this module to be
   upgraded and supplemented as the need arises, and to move along the
   standards track on different time-lines from other modules.

   This modularity of specification is not meant to be interpreted as
   imposing any specific requirements on implementation.

1.4.  Motivation

   Version 3 of the Simple Network Management Protocol (SNMPv3) added
   security to the previous versions of the protocol.  The User-based
   Security Model (USM) [RFC3414] was designed to be independent of
   other existing security infrastructures, to ensure it could function
   when third party authentication services were not available, such as
   in a broken network.  As a result, USM typically utilizes a separate
   user and key management infrastructure.  Operators have reported that
   deploying another user and key management infrastructure in order to
   use SNMPv3 is a reason for not deploying SNMPv3 at this point in
   time.

   This memo describes a security model that will make use of transport
   models that rely on lower layer secure transports and existing and
   commonly deployed security infrastructures.  This security model is
   designed to meet the security and operational needs of network



Harrington                Expires July 29, 2007                 [Page 4]

Internet-Draft      Transport Security Model for SNMP       January 2007


   administrators, maximize usability in operational environments to
   achieve high deployment success and at the same time minimize
   implementation and deployment costs to minimize the time until
   deployment is possible.

1.5.  Constraints

   The design of this SNMP Security Model is also influenced by the
   following constraints:
   1.  When the requirements of effective management in times of network
       stress are inconsistent with those of security, the design of
       this model gives preference to effective management.
   2.  In times of network stress, the security protocol and its
       underlying security mechanisms SHOULD NOT depend upon the ready
       availability of other network services (e.g., Network Time
       Protocol (NTP) or AAA protocols).
   3.  When the network is not under stress, the security model and its
       underlying security mechanisms MAY depend upon the ready
       availability of other network services.
   4.  It may not be possible for the security model to determine when
       the network is under stress.
   5.  A security model should require no changes to the SNMP
       architecture.
   6.  A security model should require no changes to the underlying
       security protocol.

2.  How Transport Security Model Fits in the Architecture

   The Transport Security Model is designed to fit into the RFC3411
   architecture as a security model in the security subsystem, and to
   utilize the services of a secure transport model.

   The transport model of an SNMP engine will perform the translation
   between transport-specific security parameters and the SNMP-specific,
   model-independent parameters securityName and securityLevel.  To
   maintain the RFC3411 modularity, the transport model does not know
   which securityModel will be used for an incoming message; the message
   processing model will determine the securityModel to be used, in a
   message processing model dependent manner.  In an SNMPv3 message, the
   Transport Security Model should be specified in the message header.

2.1.  Security Capabilities of this Model

2.1.1.  Threats

   The Transport Security Model, when used with suitable secure
   transport models, provides protection against the threats identified
   by the RFC 3411 architecture [RFC3411].



Harrington                Expires July 29, 2007                 [Page 5]

Internet-Draft      Transport Security Model for SNMP       January 2007


   Which threats are addressed depends on the transport model.  The
   Transport Security Model does not address any threats itself, but
   delegates that responsibility to a secure transport model.

   The Transport Security Model is called a security model to be
   compatible with the RFC3411 architecure.  However, this security
   model does not provide security mechanisms such as authenticatio and
   encryption itself, so it SHOULD always be used with a transport model
   that provides appropriate security.

2.1.2.  Security Levels

   The RFC 3411 architecture recognizes three levels of security:
      - without authentication and without privacy (noAuthNoPriv)
      - with authentication but without privacy (authNoPriv)
      - with authentication and with privacy (authPriv)

   The model-independent securityLevel parameter is used to request
   specific levels of security for outgoing messages, and to assert that
   specific levels of security were applied during the transport and
   processing of incoming messages.

   The transport layer algorithms used to provide security SHOULD NOT be
   exposed to the Transport Security Model, as the Transport Security
   Model has no mechanisms by which it can test whether an assertion
   made by a transport model is accurate.

   The Transport Security Model trusts that the underlying secure
   transport connection has been properly configured to support security
   characteristics at least as strong as requested in securityLevel.

2.2.  No Sessions

   The Transport Security Model will associate state regarding each
   message and each known remote engine with a single combination of
   transportType, transportAddress, securityName, securityModel, and
   securityLevel.

   Some transport models will utilize sessions to maintain long-lived
   state; others will use stateless transport.  For reasons of module
   independence, the Transport Security Model will make no assumptions
   about there being a session of any kind.  Each message may be totally
   independent of other messages.  Any binding of multiples messages
   into a session is specific to the transport model.  There may be
   circumstances where having an snmp-specific session provided by a
   security model is useful; such functionality is left to future
   security models.




Harrington                Expires July 29, 2007                 [Page 6]

Internet-Draft      Transport Security Model for SNMP       January 2007


2.3.  Coexistence

   There are two primary factors which determine whether security modles
   can coexist.  First, there must be a mechanism to select different
   security models at run-time.  Second, the processing of one security
   should not impact the processing of another security model.

   In the RFC3411 architecture, a message processing model determines
   which security model should be called.  As of this writing, there are
   three message processing models and three other security models:
   SNMPv1, SNMPv2c, and the User-based Security Model.

   The SNMPv1 and SNMPv2c message processing described in RFC3584 (BCP
   74) [RFC3584] always selects the SNMPv1(1) security model for an
   SNMPv1 message, or the SNMPv2c(2) security model for an SNMPv2c
   message.  Since there is no field in the message format that permits
   specifying a security model, RFC3584 message processing does not
   permit the selection of security models other than SNMPv1 or SNMPv2.
   Therefore, the Transport Security Model can coexist with SNMPv1 and
   SNMPv2c community-based security models, but the Transport Security
   Model cannot be used with SNMPv1 or SNMPv2c messages.

   The SNMPv3 message processing defined in RFC3412 [RFC3412], extracts
   the securityModel from the msgSecurityModel field of an incoming
   SNMPv3Message.  When the extracted value of msgSecurityModel is
   transportSecurityModel(YY), security processing is directed to the
   Transport Security Model.  So for an outgoing message secured using
   the Transport Security Model, msgSecurityModel should be set to
   transportSecurityModel(YY).

   The Transport Security Model uses its own MIB module for processing
   to maintain independence from other security models.  This allows the
   Transport Security Model to coexist with other security models, such
   as the User-based Security Model.

   Note that the Transport Security Model may work with multiple
   transport models, but the isAccessAllowed() primitive only accepts a
   value for the security model, not for transport models.  As a result,
   it is not possible to have different access control rules for
   different transport models that use the Transport Security Model.

2.4.  Security Parameter Passing

   For outgoing messages, Transport Security Model takes input provided
   by the SNMP application, converts that information into suitable
   transport and security parameters in a cache referenced by
   tmStateReference.  The wholeMsg and the tmStateReference are passed
   to the appropriate transport model through a series of APIs, as



Harrington                Expires July 29, 2007                 [Page 7]

Internet-Draft      Transport Security Model for SNMP       January 2007


   described in "Transport Subsystem for the Simple Network Management
   Protocol" [I-D.ietf-isms-tmsm].

   For incoming messages, the transport model accepts messages from the
   lower layer transport, and records the transport-related information
   and security-related information, including a securityName that
   represents the authenticated identity, and a securityLevel that
   represents the security features provided during transport, in a
   cache referenced by tmStateReference.  The wholeMsg and the
   tmStateReference are passed to the appropriate security model through
   a series of APIs, as described in "Transport Subsystem for the Simple
   Network Management Protocol" [I-D.ietf-isms-tmsm].

   For an incoming SNMPv3 message, the messaging model extracts the
   requested securityLevel from the msgFlags field, and passes this to
   the security model.  The Transport Security Model verifies that the
   securityLevel passed in the cache is at least as strong as the
   securityLevel passed in the ASI securityLevel parameter.

2.5.  Notifications and Proxy

   The SNMP-TARGET-MIB module [RFC3413] contains objects for defining
   management targets, including transportType, transportAddress,
   securityName, securityModel, and securityLevel parameters, for
   applications such as notifications and proxy.  For the Transport
   Security Model, transport type and address are configured in the
   snmpTargetAddrTable, and the securityModel, securityName, and
   securityLevel parameters are configured in the snmpTargetParamsTable.

   The default approach is for an administrator to statically
   preconfigure this information to identify the targets authorized to
   receive notifications or perform proxy.

3.  Message Formats

   The syntax of an SNMP message using this Security Model adheres to
   the message format defined in the version-specific Message Processing
   Model document (for example [RFC3412]).  At the time of this writing,
   there are three defined message formats - SNMPv1, SNMPv2c, and
   SNMPv3.  The Transport Security Model deos not work with SNMPv1 and
   SNMPv2c for reasons described above, so this memo only deals with
   SNMPv3 messages.

   The processing is compatible with the RFC 3412 primitives,
   generateRequestMsg() and processIncomingMsg(), that show the data
   flow between the Message Processor and the security model.





Harrington                Expires July 29, 2007                 [Page 8]

Internet-Draft      Transport Security Model for SNMP       January 2007


3.1.  SNMPv3 Message Fields

   The SNMPv3Message SEQUENCE is defined in [RFC3412] and [RFC3416].

   SNMPv3MessageSyntax DEFINITIONS IMPLICIT TAGS ::= BEGIN

          SNMPv3Message ::= SEQUENCE {
              -- identify the layout of the SNMPv3Message
              -- this element is in same position as in SNMPv1
              -- and SNMPv2c, allowing recognition
              -- the value 3 is used for snmpv3
              msgVersion INTEGER ( 0 .. 2147483647 ),
              -- administrative parameters
              msgGlobalData HeaderData,
              -- security model-specific parameters
              -- format defined by Security Model
              msgSecurityParameters OCTET STRING,
              msgData  ScopedPduData
          }

          HeaderData ::= SEQUENCE {
              msgID      INTEGER (0..2147483647),
              msgMaxSize INTEGER (484..2147483647),

              msgFlags   OCTET STRING (SIZE(1)),
                         --  .... ...1   authFlag
                         --  .... ..1.   privFlag
                         --  .... .1..   reportableFlag
                         --              Please observe:
                         --  .... ..00   is OK, means noAuthNoPriv
                         --  .... ..01   is OK, means authNoPriv
                         --  .... ..10   reserved, MUST NOT be used.
                         --  .... ..11   is OK, means authPriv

              msgSecurityModel INTEGER (1..2147483647)
          }

          ScopedPduData ::= CHOICE {
              plaintext    ScopedPDU,
              encryptedPDU OCTET STRING  -- encrypted scopedPDU value
          }

          ScopedPDU ::= SEQUENCE {
              contextEngineID  OCTET STRING,
              contextName      OCTET STRING,
              data             ANY -- e.g., PDUs as defined in RFC3416
          }
      END



Harrington                Expires July 29, 2007                 [Page 9]

Internet-Draft      Transport Security Model for SNMP       January 2007


   The following describes how the Transport Security Model treats
   certain fields in the message:

3.1.1.  msgGlobalData

   The msgGlobalData values are set by the Message Processing model
   (e.g., SNMPv3 Message Processing), and are not modified by the
   Transport Security Model.

   msgMaxSize is determined by the implementation.

   For outgoing messages, msgSecurityModel is set by the Message
   Processing model (e.g., SNMPv3) to the IANA-assigned value for the
   Transport Security Model.  See
   http://www.iana.org/assignments/snmp-number-spaces.

   For outgoing messages, the value of msgFlags is set by the Message
   Processing model (e.g., SNMPv3 Message Processing), which is not
   necessarily the actual securityLevel applied to the message by the
   transport model.

   For incoming messages, the value of msgFlags is determined by the
   Message Processing model (e.g., SNMPv3 Message Processing), and the
   value is passed in the securityLevel parameter in the ASI between the
   messaging model and the security model.

3.1.2.  securityLevel and msgFlags

   For an outgoing message, securityLevel is the requested security for
   the message, passed in the ASIs.  If a Transport Model cannot provide
   the requested securityLevel, the model MUST describe a standard
   behavior that is followed for that situation.  If the Transport Model
   is able to provide stronger than requested security, that may be
   acceptable.  If the Transport Model cannot provide at least the
   requested level of security, the Transport Model MUST discard the
   request and SHOULD notify the message processing model that the
   request failed.

   The msgFlags field in the SNMPv3 message is closely related to
   securityLevel. msgFlags is Messaging Model dependent, while
   securityLevel is Messaging Model independent.  To maintain the
   separation between subsystems, the Transport Model SHOULD NOT modify
   Message Model dependent fields.  As a result, msgFlags in the SNMPv3
   message MAY reflect the requested securityLevel, not the actual
   securityLevel applied to the message by the Transport Model.

   Part of the responsibility of a Security Model is to ensure that the
   actual security provided by the underlying transport layer security



Harrington                Expires July 29, 2007                [Page 10]

Internet-Draft      Transport Security Model for SNMP       January 2007


   mechanisms is configured to meet or exceed the securityLevel
   requested.  When the Security Model processes the incoming message,
   it should compare the securityLevel provided by the messaging model
   to the securityLevel provided by the transport model in
   tmStateReference.  If they differ, the Security Model should
   determine whether the securityLevel provided by the transport model
   is acceptable (e.g. the transport securityLevel is greater than or
   equal to the requested securityLevel.  If not, it should discard the
   message.  Depending on the model, the Security Model may issue a
   reportPDU with a model-specific counter.

3.1.3.  msgSecurityParameters

   Since message security is provided by a "lower layer", and the
   securityName parameter is always determined by the transport model
   from the lower layer authentication method, the SNMP message does not
   need to carry message security parameters within the
   msgSecurityParameters field.

   The field msgSecurityParameters in SNMPv3 messages has a data type of
   OCTET STRING.  To prevent its being used in a manner that could be
   damaging, such as for carrying a virus or worm, when used with
   Transport Security Model its value MUST be the BER serialization of a
   zero-length OCTET STRING.

      TransportSecurityParametersSyntax DEFINITIONS IMPLICIT TAGS
               ::= BEGIN

      TransportSecurityParameters ::=
                    OCTET STRING
      END

3.2.  Cached Information and References

   The RFC3411 architecture uses caches to store dynamic model-specific
   information, and uses references in the ASIs to indicate in a model-
   independent manner which cached information must flow between
   subsystems.

   There are two levels of state that may need to be maintained: the
   security state in a request-response pair, and potentially long-term
   state relating to transport and security.

   This state is maintained in caches and a Local Configuration
   Datastore (LCD).  To simplify the elements of procedure, the release
   of state information is not always explicitly specified.  As a
   general rule, if state information is available when a message being
   processed gets discarded, the state related to that message should



Harrington                Expires July 29, 2007                [Page 11]

Internet-Draft      Transport Security Model for SNMP       January 2007


   also be discarded, and if state information is available when a
   relationship between engines is severed, such as the closing of a
   transport session, the state information for that relationship might
   also be discarded.

   This document differentiates the tmStateReference from the
   securityStateReference.  This document does not specify an
   implementation strategy, only an abstract discussion of the data that
   must flow between subsystems.  An implementation MAY use one cache
   and one reference to serve both functions, but an implementer must be
   aware of the cache-release issues to prevent the cache from being
   released before a security or transport model has had an opportunity
   to extract the information it needs.

3.2.1.  securityStateReference

   From RFC3411: "For each message received, the Security Model caches
   the state information such that a Response message can be generated
   using the same security information, even if the Local Configuration
   Datastore is altered between the time of the incoming request and the
   outgoing response.

   A Message Processing Model has the responsibility for explicitly
   releasing the cached data if such data is no longer needed.  To
   enable this, an abstract securityStateReference data element is
   passed from the Security Model to the Message Processing Model.  The
   cached security data may be implicitly released via the generation of
   a response, or explicitly released by using the stateRelease
   primitive, as described in RFC3411 section 4.5.1."

   The information saved should include the model-independent parameters
   (transportType, transportAddress, securityName, securityModel, and
   securityLevel), related security parameters, and other information
   needed to match the response with the request.  The Message
   Processing Model has the responsibility for explicitly releasing the
   securityStateReference when such data is no longer needed.  The
   securityStateReference cached data may be implicitly released via the
   generation of a response, or explicitly released by using the
   stateRelease primitive, as described in RFC 3411 section 4.5.1."

   If the transport model connection is closed between the time a
   Request is received and a Response message is being prepared, then
   the Response message MAY be discarded.

3.2.2.  tmStateReference

   For each message or transport session, information about the message
   security is stored in the cache to pass model- and mechanism-specific



Harrington                Expires July 29, 2007                [Page 12]

Internet-Draft      Transport Security Model for SNMP       January 2007


   parameters.  The state referenced by tmStateReference may be saved
   across multiple messages, in a Local Configuration Datastore (LCD),
   as compared to securityStateReference which is only saved for the
   life of a request-response pair of messages.

   The format of the cache and the LCD are implementation-specific.

4.  Processing an Outgoing Message

   An error indication may return an OID and value for an incremented
   counter and a value for securityLevel, and values for contextEngineID
   and contextName for the counter, and the securityStateReference if
   the information is available at the point where the error is
   detected.

4.1.  Security Processing for an Outgoing Message

   This section describes the procedure followed by the Transport
   Security Model.

   The parameters needed for generating a message are supplied to the
   security model by the message processing model via the
   generateRequestMsg() or the generateResponseMsg() ASI.  The Transport
   Subsystem architectural extension has added the transportDomain,
   transportAddress, and tmStateReference parameters to the original
   RFC3411 ASIs.

     statusInformation =                -- success or errorIndication
           generateRequestMsg(
           IN   messageProcessingModel  -- typically, SNMP version
           IN   globalData              -- message header, admin data
           IN   maxMessageSize          -- of the sending SNMP entity
           IN   transportDomain         -- as specified by application
           IN   transportAddress        -- as specified by application
           IN   securityModel           -- for the outgoing message
           IN   securityEngineID        -- authoritative SNMP entity
           IN   securityName            -- on behalf of this principal
           IN   securityLevel           -- Level of Security requested
           IN   scopedPDU               -- message (plaintext) payload
           OUT  securityParameters      -- filled in by Security Module
           OUT  wholeMsg                -- complete generated message
           OUT  wholeMsgLength          -- length of generated message
           OUT  tmStateReference        -- reference to transport info
                )







Harrington                Expires July 29, 2007                [Page 13]

Internet-Draft      Transport Security Model for SNMP       January 2007


   statusInformation = -- success or errorIndication
           generateResponseMsg(
           IN   messageProcessingModel  -- typically, SNMP version
           IN   globalData              -- message header, admin data
           IN   maxMessageSize          -- of the sending SNMP entity
           IN   transportDomain         -- as specified by application
           IN   transportAddress        -- as specified by application
           IN   securityModel           -- for the outgoing message
           IN   securityEngineID        -- authoritative SNMP entity
           IN   securityName            -- on behalf of this principal
           IN   securityLevel           -- Level of Security requested
           IN   scopedPDU               -- message (plaintext) payload
           IN   securityStateReference  -- reference to security state
                                        -- information from original
                                        -- request
           OUT  securityParameters      -- filled in by Security Module
           OUT  wholeMsg                -- complete generated message
           OUT  wholeMsgLength          -- length of generated message
           OUT  tmStateReference        -- reference to transport info
                )

   Note that the Transport Subystem architectural extension adds
   transportDomain, transportAddress, and tmStateReference to these
   ASIs.

4.2.  Elements of Procedure for Outgoing Messages

   1) verify that securityModel is transportSecurityModel(YY).  If not,
   then an error indication is returned to the calling message model,
   and security model processing stops for this message.

   2) If there is a securityStateReference, then this is a response to a
   request, so extract the cached security data.  This should include
   transportDomain, transportAddress, securityName, securityLevel, and
   securityModel, and a tmStateReference.  The cachedSecurityData for
   this message can now be discarded.

   3) If there is no securityStateReference, then find or create an
   entry in a Local Configuration Datastore containing the provided
   transportDomain, transportAddress, securityName, securityLevel, and
   securityModel, and create a tmStateReference to reference the entry.

   4) fill in the msgSecurityModel with the value for
   transportSecurityModel(YY).

   5) fill in the msgFlags corresponding to the securityLevel specified
   in the generateRequest() or generateResponse() parameter.




Harrington                Expires July 29, 2007                [Page 14]

Internet-Draft      Transport Security Model for SNMP       January 2007


   6) fill in the securityParameters with the serialization of a zero-
   length OCTET STRING.

   7) The plaintext scopedPDU serves as the msgData of the message.

   8) Combine the message parts into a wholeMsg and calculate
   wholeMsgLength.

   9) The completed message (wholeMsg) with its length (wholeMsgLength)
   and securityParameters (a zero-length octet string) and
   tmStateReference is returned to the calling messaging model with the
   statusInformation set to success.

5.  Processing an Incoming SNMP Message

   An error indication may return an OID and value for an incremented
   counter and a value for securityLevel, and values for contextEngineID
   and contextName for the counter, and the securityStateReference if
   the information is available at the point where the error is
   detected.

5.1.  Security Processing for an Incoming Message

   This section describes the procedure followed by the Transport
   Security Model whenever it receives an incoming message from a
   Message Processing Model.  The abstract service primitive from a
   Message Processing Model to the Security Subsystem for a received
   message is:

   statusInformation =  -- errorIndication or success
                            -- error counter OID/value if error
   processIncomingMsg(
   IN   messageProcessingModel    -- typically, SNMP version
   IN   maxMessageSize            -- of the sending SNMP entity
   IN   securityParameters        -- for the received message
   IN   securityModel             -- for the received message
   IN   securityLevel             -- Level of Security
   IN   wholeMsg                  -- as received on the wire
   IN   wholeMsgLength            -- length as received on the wire
   IN   tmStateReference          -- from the transport model
   OUT  securityEngineID          -- authoritative SNMP entity
   OUT  securityName              -- identification of the principal
   OUT  scopedPDU,                -- message (plaintext) payload
   OUT  maxSizeResponseScopedPDU  -- maximum size sender can handle
   OUT  securityStateReference    -- reference to security state
    )                         -- information, needed for response





Harrington                Expires July 29, 2007                [Page 15]

Internet-Draft      Transport Security Model for SNMP       January 2007


5.2.  Elements of Procedure for Incoming Messages

   1) verify that securityModel is transportSecurityModel(YY).  If not,
   then an error indication is returned to the calling message model,
   and security model processing stops for this message.

   2) If the messageProcessingModel is SNMPv3, then the securityEngineID
   is set to the local snmpEngineID, to satisfy the SNMPv3 message
   processing defined in RFC 3412 section 7.2 13a).

   3) If the received securityParameters is not the serialization of an
   OCTET STRING formatted according to the transportSecurityParameters,
   or the contained OCTET STRING is not empty, then the
   snmpInASNParseErrs counter [RFC3418] is incremented, and an error
   indication (parseError) is returned to the calling module, and
   security model processing stops for this message.

   4) if tmStateReference does not refer to a cache containing values
   for securityName and securityLevel, then the tsmInvalidCache counter
   is incremented, an error indication is returned to the calling
   module, and security model processing stops for this message.

   5) Extract the value of securityName from the cache referenced by
   tmStateReference.

   6) The scopedPDU component is extracted from the wholeMsg.

   7) The maxSizeResponseScopedPDU is calculated.  This is the maximum
   size allowed for a scopedPDU for a possible Response message.

   8) Compare the value of securityLevel in the cache referenced by
   tmStateReference to the value of the securityLevel parameter passed
   in the processIncomingMessage service primitive.  If the parameter
   specifies privacy (Priv), and the cache specifies no privacy (noPriv)
   was provided by the transport model, or the parameter specifies
   authentication (auth) and the cache specifies no authentication
   (noAuth) was provided by the transport model, then the
   tsmInadequateSecurity counter is incremented, and an error indication
   (unsupportedSecurityLevel) together with the OID and value of the
   incremented counter is returned to the calling module.

   9) The information in the tmStateReference may be saved, in an
   implementation-dependent manner, in a Local Configuration Datastore
   (LCD) for subsequent usage.

   10)The security data is cached as cachedSecurityData, so that a
   possible response to this message can use the same security
   parameters.  Then securityStateReference is set for subsequent



Harrington                Expires July 29, 2007                [Page 16]

Internet-Draft      Transport Security Model for SNMP       January 2007


   reference to this cached data.  For Transport Security Model, the
   securityStateReference should include a reference to the
   tmStateReference cache.

   11) The statusInformation is set to success and a return is made to
   the calling module passing back the OUT parameters as specified in
   the processIncomingMsg primitive.

6.  Overview

   This MIB module provides management of the Transport Security Model.
   It defines some needed textual conventions, and some statistics.

6.1.  Structure of the MIB Module

   Objects in this MIB module are arranged into subtrees.  Each subtree
   is organized as a set of related objects.  The overall structure and
   assignment of objects to their subtrees, and the intended purpose of
   each subtree, is shown below.

6.2.  Textual Conventions

   Generic and Common Textual Conventions used in this document can be
   found summarized at http://www.ops.ietf.org/mib-common-tcs.html

6.3.  The transportStats Subtree

   This subtree contains counters specific to the Transport Security
   Model, that provide information for identifying fault conditions.

6.4.  Relationship to Other MIB Modules

   Some management objects defined in other MIB modules are applicable
   to an entity implementing Transport Security Model.  In particular,
   it is assumed that an entity implementing Transport Security Model
   will implement the SNMPv2-MIB [RFC3418], the SNMP-FRAMEWORK-MIB
   [RFC3411] and the SNMP-TRANSPORT-MIB [I-D.ietf-isms-tmsm].

6.4.1.  Relationship to the SNMPv2-MIB

   The 'system' group in the SNMPv2-MIB [RFC3418] is defined as being
   mandatory for all systems, and the objects apply to the entity as a
   whole.  The 'system' group provides identification of the management
   entity and certain other system-wide data.  The snmpInASNParseErrs
   counter is incremented during the elements of procedure.  The SNMP-
   TRANSPORT-SM-MIB does not duplicate those objects.





Harrington                Expires July 29, 2007                [Page 17]

Internet-Draft      Transport Security Model for SNMP       January 2007


6.4.2.  MIB Modules Required for IMPORTS

   The following MIB module imports items from [RFC2578] and [RFC2580]..

7.  MIB module definition


   SNMP-TRANSPORT-SM-MIB DEFINITIONS ::= BEGIN

   IMPORTS
       MODULE-IDENTITY, OBJECT-TYPE,
       snmpModules, Counter32
         FROM SNMPv2-SMI
       MODULE-COMPLIANCE, OBJECT-GROUP
         FROM SNMPv2-CONF
       ;

   tsmMIB MODULE-IDENTITY
       LAST-UPDATED "200701250000Z"
       ORGANIZATION "ISMS Working Group"
       CONTACT-INFO "WG-EMail:   isms@lists.ietf.org
                     Subscribe:  isms-request@lists.ietf.org

                  Chairs:
                    Juergen Quittek
                    NEC Europe Ltd.
                    Network Laboratories
                    Kurfuersten-Anlage 36
                    69115 Heidelberg
                    Germany
                    +49 6221 90511-15
                     quittek@netlab.nec.de

                     Juergen Schoenwaelder
                     International University Bremen
                     Campus Ring 1
                     28725 Bremen
                     Germany
                     +49 421 200-3587
                     j.schoenwaelder@iu-bremen.de

                  Editor:
                     David Harrington
                     Huawei Technologies USA
                     1700 Alma Dr.
                     Plano TX 75075
                     USA
                     +1 603-436-8634



Harrington                Expires July 29, 2007                [Page 18]

Internet-Draft      Transport Security Model for SNMP       January 2007


                     ietfdbh@comcast.net
                       "
          DESCRIPTION  "The Transport Security Model MIB

                        Copyright (C) The IETF Trust (2007). This
                        version of this MIB module is part of RFC XXXX;
                        see the RFC itself for full legal notices.
   -- NOTE to RFC editor: replace XXXX with actual RFC number
   --                     for this document and remove this note
                       "

          REVISION     "200701250000Z"
          DESCRIPTION  "The initial version, published in RFC XXXX.
   -- NOTE to RFC editor: replace XXXX with actual RFC number
   --                     for this document and remove this note
                       "

       ::= { snmpModules xxxx }
   -- RFC Ed.: replace xxxx with IANA-assigned number and
   --          remove this note

   -- ---------------------------------------------------------- --
   -- subtrees in the SNMP-TRANSPORT-SM-MIB
   -- ---------------------------------------------------------- --

   tsmNotifications OBJECT IDENTIFIER ::= { tsmMIB 0 }
   tsmMIBObjects       OBJECT IDENTIFIER ::= { tsmMIB 1 }
   tsmConformance   OBJECT IDENTIFIER ::= { tsmMIB 2 }

   -- -------------------------------------------------------------
   -- Objects
   -- -------------------------------------------------------------

   -- Statistics for the Transport Security Model


   tsmStats         OBJECT IDENTIFIER ::= { tsmMIBObjects 1 }

   tsmInvalidCache OBJECT-TYPE
       SYNTAX       Counter32
       MAX-ACCESS   read-only
       STATUS       current
       DESCRIPTION "The number of messages dropped because the
                    tmStateReference referred to an invalid cache.
                   "
       ::= { tsmStats 1 }

   tsmInadequateSecurity OBJECT-TYPE



Harrington                Expires July 29, 2007                [Page 19]

Internet-Draft      Transport Security Model for SNMP       January 2007


       SYNTAX       Counter32
       MAX-ACCESS   read-only
       STATUS       current
       DESCRIPTION "The number of incoming messages dropped because
                    the actual securtityLevel provided was less than
                    the requested securityLevel.
                   "
       ::= { tsmStats 2 }

   -- -------------------------------------------------------------
   -- tsmMIB - Conformance Information
   -- -------------------------------------------------------------

   tsmGroups OBJECT IDENTIFIER ::= { tsmConformance 1 }

   tsmCompliances OBJECT IDENTIFIER ::= { tsmConformance 2 }

   -- -------------------------------------------------------------
   -- Units of conformance
   -- -------------------------------------------------------------
   tsmGroup OBJECT-GROUP
       OBJECTS {
           tsmInvalidCache,
           tsmInadequateSecurity
       }
       STATUS      current
       DESCRIPTION "A collection of objects for maintaining
                    information of an SNMP engine which implements
                    the SNMP Transport Security Model.
                   "

       ::= { tsmGroups 2 }

   -- -------------------------------------------------------------
   -- Compliance statements
   -- -------------------------------------------------------------

   tsmCompliance MODULE-COMPLIANCE
       STATUS      current
       DESCRIPTION
           "The compliance statement for SNMP engines that support
            the SNMP-TRANSPORT-SM-MIB"
       MODULE
           MANDATORY-GROUPS { tsmGroup }
       ::= { tsmCompliances 1 }

   END




Harrington                Expires July 29, 2007                [Page 20]

Internet-Draft      Transport Security Model for SNMP       January 2007


8.  Security Considerations

   This document describes a security model that permits SNMP to utilize
   security services provided through an SNMP transport model.  The
   Transport Security Model relies on transport models for mutual
   authentication, binding of keys, confidentiality and integrity.  The
   security threats and how those threats are mitigated should be
   covered in detail in the specification of the transport model and the
   underlying secure transport.

   Transport Security Model relies on a transport model to provide an
   authenticated principal for mapping to securityName, and an assertion
   for mapping to securityLevel, for access control purposes.

   The Transport Security Model is called a security model to be
   compatible with the RFC3411 architecure.  However, this security
   model provides no security itself.  It SHOULD always be used with a
   transport model that provides security, but this is a run-time
   decision of the operator or management application, or a
   configuration decision of an operator.

8.1.  MIB module security

   There are no management objects defined in this MIB module that have
   a MAX-ACCESS clause of read-write and/or read-create.  So, if this
   MIB module is implemented correctly, then there is no risk that an
   intruder can alter or create any management objects of this MIB
   module via direct SNMP SET operations.

   Some of the readable objects in this MIB module (i.e., objects with a
   MAX-ACCESS other than not-accessible) may be considered sensitive or
   vulnerable in some network environments.  It is thus important to
   control even GET and/or NOTIFY access to these objects and possibly
   to even encrypt the values of these objects when sending them over
   the network via SNMP.  These are the tables and objects and their
   sensitivity/vulnerability:
   o  tmsInvalidCache and tmsInadeqauteSecuirty may make it easier for
      an attacker to detect vulnerabilities.

   SNMP versions prior to SNMPv3 did not include adequate security.
   Even if the network itself is secure (for example by using IPSec or
   SSH), even then, there is no control as to who on the secure network
   is allowed to access and GET/SET (read/change/create/delete) the
   objects in this MIB module.

   It is RECOMMENDED that implementers consider the security features as
   provided by the SNMPv3 framework (see [RFC3410] section 8), including
   full support for the USM and Transport Security Model cryptographic



Harrington                Expires July 29, 2007                [Page 21]

Internet-Draft      Transport Security Model for SNMP       January 2007


   mechanisms (for authentication and privacy).

   Further, deployment of SNMP versions prior to SNMPv3 is NOT
   RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3 and to
   enable cryptographic security.  It is then a customer/operator
   responsibility to ensure that the SNMP entity giving access to an
   instance of this MIB module is properly configured to give access to
   the objects only to those principals (users) that have legitimate
   rights to indeed GET or SET (change/create/delete) them.

9.  IANA Considerations

   IANA is requested to assign:
   1.  an SMI number under snmpModules, for the MIB module in this
       document,
   2.  a value, preferably 4, to identify the Transport Security Model,
       in the Security Models registry at
       http://www.iana.org/assignments/snmp-number-spaces.  This should
       result in the following table of values:
   Value   Description                         References
   -----   -----------                         ----------
     0     reserved for 'any'                  [RFC2571, RFC3411]
     1     reserved for SNMPv1                 [RFC2571, RFC3411]
     2     reserved for SNMPv2c                [RFC2571, RFC3411]
     3     User-Based Security Model (USM)     [RFC2571, RFC3411]
     YY    Transport Security Model (TSM)      [RFCXXXX]

   -- NOTE to RFC editor: replace XXXX with actual RFC number
   --                     for this document and remove this note
   -- NOTE to RFC editor: replace YY with actual IANA-assigned number,
                          throughout this document and remove this note.

10.  References

10.1.  Normative References

   [RFC2119]             Bradner, S., "Key words for use in RFCs to
                         Indicate Requirement Levels", BCP 14, RFC 2119,
                         March 1997.

   [RFC2578]             McCloghrie, K., Ed., Perkins, D., Ed., and J.
                         Schoenwaelder, Ed., "Structure of Management
                         Information Version 2 (SMIv2)", STD 58,
                         RFC 2578, April 1999.

   [RFC2579]             McCloghrie, K., Ed., Perkins, D., Ed., and J.
                         Schoenwaelder, Ed., "Textual Conventions for
                         SMIv2", STD 58, RFC 2579, April 1999.



Harrington                Expires July 29, 2007                [Page 22]

Internet-Draft      Transport Security Model for SNMP       January 2007


   [RFC2580]             McCloghrie, K., Perkins, D., and J.
                         Schoenwaelder, "Conformance Statements for
                         SMIv2", STD 58, RFC 2580, April 1999.

   [RFC3411]             Harrington, D., Presuhn, R., and B. Wijnen, "An
                         Architecture for Describing Simple Network
                         Management Protocol (SNMP) Management
                         Frameworks", STD 62, RFC 3411, December 2002.

   [RFC3412]             Case, J., Harrington, D., Presuhn, R., and B.
                         Wijnen, "Message Processing and Dispatching for
                         the Simple Network Management Protocol (SNMP)",
                         STD 62, RFC 3412, December 2002.

   [RFC3413]             Levi, D., Meyer, P., and B. Stewart, "Simple
                         Network Management Protocol (SNMP)
                         Applications", STD 62, RFC 3413, December 2002.

   [RFC3414]             Blumenthal, U. and B. Wijnen, "User-based
                         Security Model (USM) for version 3 of the
                         Simple Network Management Protocol (SNMPv3)",
                         STD 62, RFC 3414, December 2002.

   [RFC3416]             Presuhn, R., "Version 2 of the Protocol
                         Operations for the Simple Network Management
                         Protocol (SNMP)", STD 62, RFC 3416,
                         December 2002.

   [RFC3418]             Presuhn, R., "Management Information Base (MIB)
                         for the Simple Network Management Protocol
                         (SNMP)", STD 62, RFC 3418, December 2002.

   [RFC3584]             Frye, R., Levi, D., Routhier, S., and B.
                         Wijnen, "Coexistence between Version 1, Version
                         2, and Version 3 of the Internet-standard
                         Network Management Framework", BCP 74,
                         RFC 3584, August 2003.

   [I-D.ietf-isms-tmsm]  Harrington, D. and J. Schoenwaelder, "Transport
                         Subsystem for the Simple Network Management
                         Protocol (SNMP)", draft-ietf-isms-tmsm-05 (work
                         in progress), December 2006.

10.2.  Informative References

   [RFC3410]             Case, J., Mundy, R., Partain, D., and B.
                         Stewart, "Introduction and Applicability
                         Statements for Internet-Standard Management



Harrington                Expires July 29, 2007                [Page 23]

Internet-Draft      Transport Security Model for SNMP       January 2007


                         Framework", RFC 3410, December 2002.

Appendix A.  Notification Tables Configuration

   The SNMP-TARGET-MIB and SNMP-NOTIFICATION-MIB [RFC3413] are used to
   configure notification originators with the destinations to which
   notifications should be sent.

   Most of the configuration is security-model-independent and
   transport-model-independent.

   The values we will use in the examples for the five model-independent
   security and transport parameters are:
      transportType = snmpSSHDomain
      transportAddress = 192.0.2.1:162
      securityModel = Transport Security Model
      securityName = sampleUser
      securityLevel = authPriv

   The following example will configure the Notification Originator to
   send informs to a Notification Receiver at host 192.0.2.1 port 162
   using the securityName "sampleUser".  The columns marked with a "*"
   are the items that are Security Model or Transport Model specific.

   The configuration for the "sampleUser" settings in the SNMP-VIEW-
   BASED-ACM-MIB objects are not shown here for brevity.  First we
   configure which type of notification should be sent for this taglist
   (toCRTag).  In this example, we choose to send an Inform.
     snmpNotifyTable row:
          snmpNotifyName                 CRNotif
          snmpNotifyTag                  toCRTag
          snmpNotifyType                 inform
          snmpNotifyStorageType          nonVolatile
          snmpNotifyColumnStatus         createAndGo

   Then we configure a transport address to which notifications
   associated with this taglist should be sent, and we specify which
   snmpTargetParamsEntry should be used (toCR) when sending to this
   transport address.












Harrington                Expires July 29, 2007                [Page 24]

Internet-Draft      Transport Security Model for SNMP       January 2007


          snmpTargetAddrTable row:
             snmpTargetAddrName              toCRAddr
         *   snmpTargetAddrTDomain           snmpSSHDomain
             snmpTargetAddrTAddress          192.0.2.1:162
             snmpTargetAddrTimeout           1500
             snmpTargetAddrRetryCount        3
             snmpTargetAddrTagList           toCRTag
             snmpTargetAddrParams            toCR   (must match below)
             snmpTargetAddrStorageType       nonVolatile
             snmpTargetAddrColumnStatus      createAndGo


   Then we configure which prinicipal at the host should receive the
   notifications associated with this taglist.  Here we choose
   "sampleUser", who uses the Transport Security Model.
         snmpTargetParamsTable row:
             snmpTargetParamsName            toCR
             snmpTargetParamsMPModel         SNMPv3
         *   snmpTargetParamsSecurityModel   TransportSecurityModel
         *   snmpTargetParamsSecurityName    "sampleUser"
             snmpTargetParamsSecurityLevel   authPriv
             snmpTargetParamsStorageType     nonVolatile
             snmpTargetParamsRowStatus       createAndGo


A.1.  Transport Security Model Processing

   The Transport Security Model is called using the
   generateRequestMessage() ASI, with the following parameters (* are
   from the above tables):

    statusInformation =                -- success or errorIndication
          generateRequestMsg(
          IN   messageProcessingModel  -- *snmpTargetParamsMPModel
          IN   globalData              -- message header, admin data
          IN   maxMessageSize          -- of the sending SNMP entity
          IN   transportDomain         -- *snmpTargetAddrTDomain
          IN   transportAddress        -- *snmpTargetAddrTAddress
          IN   securityModel           -- *snmpTargetParamsSecurityModel
          IN   securityEngineID        -- immaterial; TSM will ignore.
          IN   securityName            -- *snmpTargetParamsSecurityName
          IN   securityLevel           -- *snmpTargetParamsSecurityLevel
          IN   scopedPDU               -- message (plaintext) payload
          OUT  securityParameters      -- filled in by Security Module
          OUT  wholeMsg                -- complete generated message
          OUT  wholeMsgLength          -- length of generated message
          OUT  tmStateReference        -- reference to transport info
               )



Harrington                Expires July 29, 2007                [Page 25]

Internet-Draft      Transport Security Model for SNMP       January 2007


   The Transport Security Model will determine the transport model based
   on the snmpTargetAddrTDomain.  The selected transport model will
   select the appropriate transport "session" using the
   snmpTargetAddrTAddress, snmpTargetParamsSecurityName, and
   snmpTargetParamsSecurityLevel.

Appendix B.  Change Log

   From -01- to -02-

      Changed transportSecurityModel(4) to transportSecurityModel(YY),
      waiting for assignment
      cleaned up elements of procedure [todo]s
      use the same errorIndication as USM for UnsupportedSecurityLevel
      fixed syntax of tsmInadequateSecurity counter
      changed the "can and will use" the same security parameters to
      "can use", to allow responses that have different security
      parameters than the request.
      removed "Relationship to the SNMP-FRAMEWORK-MIB"
      cleaned up "MIB Modules Required for IMPORTS"

   From -00- to -01-

      made the transport model not know anything about the security
      model.
      modified the elements of prcedure sections, given the implications
      of this change.
      simplified elelemnts of procedure, removing most info specified in
      architecture/subsystem definitons.
      rethought the coexistence section
      noted the implications of the Transport Security Model on
      isAccessAllowed()
      modified all text related to the LCD.
      removed most of the MIB (now the TSM has no configuration
      parameters).
      added counters needed to support elements of procedure
      renamed MIB module, and registered under snmpModules
      updated IANA and Security Considerations
      updated references.
      modified the notification configurations.

   From SSHSM-04- to Transport-security-model-00

      added tsmUserTable
      updated Appendix - Notification Tables Configuration
      remove open/closed issue appendices





Harrington                Expires July 29, 2007                [Page 26]

Internet-Draft      Transport Security Model for SNMP       January 2007


      changed tmSessionReference to tmStateReference


Author's Address

   David Harrington
   Huawei Technologies (USA)
   1700 Alma Dr. Suite 100
   Plano, TX 75075
   USA

   Phone: +1 603 436 8634
   EMail: dharrington@huawei.com






































Harrington                Expires July 29, 2007                [Page 27]

Internet-Draft      Transport Security Model for SNMP       January 2007


Full Copyright Statement

   Copyright (C) The IETF Trust (2007).

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND
   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.

Acknowledgement

   Funding for the RFC Editor function is provided by the IETF
   Administrative Support Activity (IASA).







Harrington                Expires July 29, 2007                [Page 28]


