i=0                                   i=0

fs = ft - min(------ + 1, ft) .
                                    rng/ft

val = val - --- * (ft - fh[k]) .
                                  ft

rng = --- * (fh[k] - fl[k]) .
                             ft

rng = rng - --- * (ft - fh[k]) .
                                  ft

val = ((val<<8) + (255-sym)) & 0x7FFFFFFF .

ft = (1<<logp), followed by ec_dec_update() with the 3-tuple
ft = (1<<ftb), using the returned value fs to search the table for
t = ec_decode(ft), and the range coder state is updated using the
t = ec_decode(((ft - 1) >> (ftb - 8)) + 1) ,

t = (t << (ftb - 8)) | ec_dec_bits(ftb - 8) .

r_Q15 = rng >> (l-16) ,
r_Q15 = (r_Q15*r_Q15) >> 15 .

lg = 2*lg + (r_Q15 >> 16) .

r_Q15 = r_Q15 >> 1 ,

wi0 = i0 + 3*(n/5)
wi1 = i2 + 3*(n%5)

w1_Q13 = w_Q13[wi1]
               + ((w_Q13[wi1+1] - w_Q13[wi1])*6554) >> 16)*(2*i3 + 1)

w0_Q13 = w_Q13[wi0]
               + ((w_Q13[wi0+1] - w_Q13[wi0])*6554) >> 16)*(2*i1 + 1)
               - w1_Q13

log_gain = max(gain_index, previous_log_gain - 16) .

log_gain = clamp(0, max(2*gain_index - 16,
                          previous_log_gain + gain_index - 4), 63) .

i = ilog(w2_Q18[k])
f = (w2_Q18[k]>>(i-8)) & 127
y = ((i&1) ? 32768 : 46214) >> ((32-i)>>1)
min_center_Q15 = (NDeltaMin[i]>>1) + \  NDeltaMin[k]
                                             /_
k=0
                                                    d_LPC
                                                     __
max_center_Q15 = 32768 - (NDeltaMin[i]>>1) - \  NDeltaMin[k]
                                                     /_
k=i+1
center_freq_Q15 = clamp(min_center_Q15[i],
                               (NLSF_Q15[i-1] + NLSF_Q15[i] + 1)>>1,
                               max_center_Q15[i])

        NLSF_Q15[i-1] = center_freq_Q15 - (NDeltaMin_Q15[i]>>1)

          NLSF_Q15[i] = NLSF_Q15[i-1] + NDeltaMin_Q15[i] .

k=1

k=0

k=0

maxabs_Q12 = min((maxabs_Q17 + 16) >> 5, 163838) .

DC_resp = \   a32_Q12[n]
                                    /_
n=0

lag = lag_high*lag_scale + lag_low + lag_min

lag = previous_lag + (delta_lag_index - 9)

j=0

seed = (196314165*seed + 907633515) & 0xFFFFFFFF;
seed = (seed + e_raw[i]) & 0xFFFFFFFF;

k=0

k=0

k=0

w0 =  ----------- + min(i - j, n1)*---------------------- ,
                    8192.0                           8192.0*n1

                  prev_w1_Q13                  (w1_Q13 - prev_w1_Q13)
w1 =  ----------- + min(i - j, n1)*---------------------- ,
                    8192.0                            8192.0*n1

                 mid[i-2] + 2*mid[i-1] + mid[i]
p0 = ------------------------------ ,
                              4.0

g_r = N / (N + f_r*K)

theta = ----------
                                         4

val = val + rng - --- * (ft - fl) ,
                                      ft

                          rng
rng = --- * (fh - fl) .
                          ft

rng = rng - --- * (fh - fl) .
                                   ft

val = (val<<8) & 0x7FFFFFFF ,

rng = rng<<8 .

rem = c & 255 .

ft = (1<<logp)) if k is 0 and with (fl[k] = (1<<logp) - 1,
ftb = ilog(ft - 1), i.e., the number of bits required to store
end = (end<<8) & 0x7FFFFFFF .

k=1                          k=-d


k=1                          k=-d


g_ana = 0.95 - 0.01*C, and

g_syn = 0.95 + 0.01*C,


b_ana = F_ana * [0.25, 0.5, 0.25], and

b_syn = F_syn * [0.25, 0.5, 0.25].


c_tilt = 0.25,


c_tilt = 0.25 + 0.2625 * V


predGain = ( | | 1 - (r_k)  )    ,
k=1


RD = u * (b - cb_i)' * W_ltp * (b - cb_i) + r_i,


D_j = 2*E_j - E_j-1 - E_j+1

y0 = truncate_towards_zero( (K-1) * X / sum(abs(X)))

J = -X * y / ||y||

j = (N - 1) down to 0, inclusive, do:

ft = V(N,K).
