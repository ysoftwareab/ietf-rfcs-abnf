MASK8   = 0xff;
MASK32  = 0xffffffff;
MASK64  = 0xffffffffffffffff;
MASK128 = 0xffffffffffffffffffffffffffffffff;

KL = K;    KR = 0;

KL = K >> 64;
KR = ((K & MASK64) << 64) | (~(K & MASK64));

KL = K >> 128;
KR = K & MASK128;

D1 = (KL ^ KR) >> 64;
D2 = (KL ^ KR) & MASK64;
D2 = D2 ^ F(D1, Sigma1);
D1 = D1 ^ F(D2, Sigma2);
D1 = D1 ^ (KL >> 64);
D2 = D2 ^ (KL & MASK64);
D2 = D2 ^ F(D1, Sigma3);
D1 = D1 ^ F(D2, Sigma4);
KA = (D1 << 64) | D2;
D1 = (KA ^ KR) >> 64;
D2 = (KA ^ KR) & MASK64;
D2 = D2 ^ F(D1, Sigma5);
D1 = D1 ^ F(D2, Sigma6);
KB = (D1 << 64) | D2;

Sigma1 = 0xA09E667F3BCC908B;
Sigma2 = 0xB67AE8584CAA73B2;
Sigma3 = 0xC6EF372FE94F82BE;
Sigma4 = 0x54FF53A5F1D36F1C;
Sigma5 = 0x10E527FADE682D1D;
Sigma6 = 0xB05688C2B3E6C1FD;
kw1 = (KL <<<   0) >> 64;
kw2 = (KL <<<   0) & MASK64;
k1  = (KA <<<   0) >> 64;
k2  = (KA <<<   0) & MASK64;
k3  = (KL <<<  15) >> 64;
k4  = (KL <<<  15) & MASK64;
k5  = (KA <<<  15) >> 64;
k6  = (KA <<<  15) & MASK64;
ke1 = (KA <<<  30) >> 64;
ke2 = (KA <<<  30) & MASK64;
k7  = (KL <<<  45) >> 64;
k8  = (KL <<<  45) & MASK64;
k9  = (KA <<<  45) >> 64;
k10 = (KL <<<  60) & MASK64;
k11 = (KA <<<  60) >> 64;
k12 = (KA <<<  60) & MASK64;
ke3 = (KL <<<  77) >> 64;
ke4 = (KL <<<  77) & MASK64;
k13 = (KL <<<  94) >> 64;
k14 = (KL <<<  94) & MASK64;
k15 = (KA <<<  94) >> 64;
k16 = (KA <<<  94) & MASK64;
k17 = (KL <<< 111) >> 64;
k18 = (KL <<< 111) & MASK64;
kw3 = (KA <<< 111) >> 64;
kw4 = (KA <<< 111) & MASK64;

kw1 = (KL <<<   0) >> 64;
kw2 = (KL <<<   0) & MASK64;
k1  = (KB <<<   0) >> 64;
k2  = (KB <<<   0) & MASK64;
k3  = (KR <<<  15) >> 64;
k4  = (KR <<<  15) & MASK64;
k5  = (KA <<<  15) >> 64;
k6  = (KA <<<  15) & MASK64;
ke1 = (KR <<<  30) >> 64;
ke2 = (KR <<<  30) & MASK64;
k7  = (KB <<<  30) >> 64;
k8  = (KB <<<  30) & MASK64;
k9  = (KL <<<  45) >> 64;
k10 = (KL <<<  45) & MASK64;
k11 = (KA <<<  45) >> 64;
k12 = (KA <<<  45) & MASK64;
ke3 = (KL <<<  60) >> 64;
ke4 = (KL <<<  60) & MASK64;
k13 = (KR <<<  60) >> 64;
k14 = (KR <<<  60) & MASK64;
k15 = (KB <<<  60) >> 64;
k16 = (KB <<<  60) & MASK64;
k17 = (KL <<<  77) >> 64;
k18 = (KL <<<  77) & MASK64;
ke5 = (KA <<<  77) >> 64;
ke6 = (KA <<<  77) & MASK64;
k19 = (KR <<<  94) >> 64;
k20 = (KR <<<  94) & MASK64;
k21 = (KA <<<  94) >> 64;
k22 = (KA <<<  94) & MASK64;
k23 = (KL <<< 111) >> 64;
k24 = (KL <<< 111) & MASK64;
kw3 = (KB <<< 111) >> 64;
kw4 = (KB <<< 111) & MASK64;

D1 = M >> 64;
D2 = M & MASK64;
D1 = D1 ^ kw1;           // Prewhitening
D2 = D2 ^ kw2;
D2 = D2 ^ F(D1, k1);     // Round 1
D1 = D1 ^ F(D2, k2);     // Round 2
D2 = D2 ^ F(D1, k3);     // Round 3
D1 = D1 ^ F(D2, k4);     // Round 4
D2 = D2 ^ F(D1, k5);     // Round 5
D1 = D1 ^ F(D2, k6);     // Round 6
D1 = FL   (D1, ke1);     // FL
D2 = FLINV(D2, ke2);     // FLINV
D2 = D2 ^ F(D1, k7 );    // Round 7
D1 = D1 ^ F(D2, k8 );    // Round 8
D2 = D2 ^ F(D1, k9 );    // Round 9
D1 = D1 ^ F(D2, k10);    // Round 10
D2 = D2 ^ F(D1, k11);    // Round 11
D1 = D1 ^ F(D2, k12);    // Round 12
D1 = FL   (D1, ke3);     // FL
D2 = FLINV(D2, ke4);     // FLINV
D2 = D2 ^ F(D1, k13);    // Round 13
D1 = D1 ^ F(D2, k14);    // Round 14
D2 = D2 ^ F(D1, k15);    // Round 15
D1 = D1 ^ F(D2, k16);    // Round 16
D2 = D2 ^ F(D1, k17);    // Round 17
D1 = D1 ^ F(D2, k18);    // Round 18
D2 = D2 ^ kw3;           // Postwhitening
D1 = D1 ^ kw4;

C = (D2 << 64) | D1;


D1 = M >> 64;
D2 = M & MASK64;
D1 = D1 ^ kw1;           // Prewhitening
D2 = D2 ^ kw2;
D2 = D2 ^ F(D1, k1);     // Round 1
D1 = D1 ^ F(D2, k2);     // Round 2
D2 = D2 ^ F(D1, k3);     // Round 3
D1 = D1 ^ F(D2, k4);     // Round 4
D2 = D2 ^ F(D1, k5);     // Round 5
D1 = D1 ^ F(D2, k6);     // Round 6
D1 = FL   (D1, ke1);     // FL
D2 = FLINV(D2, ke2);     // FLINV
D2 = D2 ^ F(D1, k7 );    // Round 7
D1 = D1 ^ F(D2, k8 );    // Round 8
D2 = D2 ^ F(D1, k9 );    // Round 9
D1 = D1 ^ F(D2, k10);    // Round 10
D2 = D2 ^ F(D1, k11);    // Round 11
D1 = D1 ^ F(D2, k12);    // Round 12
D1 = FL   (D1, ke3);     // FL
D2 = FLINV(D2, ke4);     // FLINV
D2 = D2 ^ F(D1, k13);    // Round 13
D1 = D1 ^ F(D2, k14);    // Round 14
D2 = D2 ^ F(D1, k15);    // Round 15
D1 = D1 ^ F(D2, k16);    // Round 16
D2 = D2 ^ F(D1, k17);    // Round 17
D1 = D1 ^ F(D2, k18);    // Round 18
D1 = FL   (D1, ke5);     // FL
D2 = FLINV(D2, ke6);     // FLINV
D2 = D2 ^ F(D1, k19);    // Round 19
D1 = D1 ^ F(D2, k20);    // Round 20
D2 = D2 ^ F(D1, k21);    // Round 21
D1 = D1 ^ F(D2, k22);    // Round 22
D2 = D2 ^ F(D1, k23);    // Round 23
D1 = D1 ^ F(D2, k24);    // Round 24
D2 = D2 ^ kw3;           // Postwhitening
D1 = D1 ^ kw4;

C = (D2 << 64) | D1;


x  = F_IN ^ KE;
t1 =  x >> 56;
t2 = (x >> 48) & MASK8;
t3 = (x >> 40) & MASK8;
t4 = (x >> 32) & MASK8;
t5 = (x >> 24) & MASK8;
t6 = (x >> 16) & MASK8;
t7 = (x >>  8) & MASK8;
t8 =  x        & MASK8;
t1 = SBOX1[t1];
t2 = SBOX2[t2];
t3 = SBOX3[t3];
t4 = SBOX4[t4];
t5 = SBOX2[t5];
t6 = SBOX3[t6];
t7 = SBOX4[t7];
t8 = SBOX1[t8];
y1 = t1 ^ t3 ^ t4 ^ t6 ^ t7 ^ t8;
y2 = t1 ^ t2 ^ t4 ^ t5 ^ t7 ^ t8;
y3 = t1 ^ t2 ^ t3 ^ t5 ^ t6 ^ t8;
y4 = t2 ^ t3 ^ t4 ^ t5 ^ t6 ^ t7;
y5 = t1 ^ t2 ^ t6 ^ t7 ^ t8;
y6 = t2 ^ t3 ^ t5 ^ t7 ^ t8;
y7 = t3 ^ t4 ^ t5 ^ t6 ^ t8;
y8 = t1 ^ t4 ^ t5 ^ t6 ^ t7;
F_OUT = (y1 << 56) | (y2 << 48) | (y3 << 40) | (y4 << 32)
x1 = FL_IN >> 32;
x2 = FL_IN & MASK32;
k1 = KE >> 32;
k2 = KE & MASK32;
x2 = x2 ^ ((x1 & k1) <<< 1);
x1 = x1 ^ (x2 | k2);
FL_OUT = (x1 << 32) | x2;
y1 = FLINV_IN >> 32;
y2 = FLINV_IN & MASK32;
k1 = KE >> 32;
k2 = KE & MASK32;
y1 = y1 ^ (y2 | k2);
y2 = y2 ^ ((y1 & k1) <<< 1);
FLINV_OUT = (y1 << 32) | y2;
