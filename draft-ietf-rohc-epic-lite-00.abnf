IPv6_Header          =       Version 
                                Traffic_Class 
                                ECT_Flag 
                                CE_Flag 
                                Flow_Label 
                                Payload_Length 
                                Next_Header 
                                Hop_Limit 
                                Source_Address 
                                Destination_Address 
    
Version              =       STATIC-KNOWN(4,6) 
    
Traffic_Class        =       C(STATIC(99.9%)) | IRREGULAR(6,0.1%) 
    
ECT_Flag             =       C(STATIC(99.9%)) | IRREGULAR(1,0.1%) 
    
CE_Flag              =       VALUE(1,0,99%) | VALUE(1,1,1%) 
    
Flow_Label           =       STATIC-UNKNOWN(20) 
    
Payload_Length       =       INFERRED-SIZE(16,288) 
    
Next_Header          =       STACK-TO-CONTROL(8) 
    
Hop_Limit            =       C(STATIC(99%)) | IRREGULAR(8,1%) 
    
Source_Address       =       STATIC-UNKNOWN(128) 
    
Destination_Address  =       STATIC-UNKNOWN(128) 
    
L = 8 * v + p 
    
enc = first-field (method_name)  
        
method = first-method (enc) 
             
compress_function = lookup-compress-function 
                                        (extract-name (method)) 
    
can_compress = call compress_function  
                                        (extract-name (method)) 
    
method = next-method (enc) 
            
enc = next-field (method_name) 
             
bit = bit_alignment 
    
n = (bit - (stack-size (compressed_data) mod bit)) mod bit 
    
temp = value (MSN) - value (lsb (value(MSN), msn_bits)) 
temp = temp / (2^msn_bits) 
extra_bits = lsb (temp, n) 
    
found = 0 
        
found = 1 
len = flags_list_elt.flaglength 
n = get-header-length (method_chosen) 
    
bit = bit_alignment 
k = (bit - (n + len) mod bit)) mod bit 
size = stack-size (received_data) 
enc = last-field (method_name)  
        
method = get-method (method_chosen, enc)  
    
decompress_function = lookup-decompress-function 
                                        (extract-name (method)) 
    
enc = prev-field (method_name)  
        

compressor_state = "IR" and once with compressor_state = "IR-DYN". 
count = 0 
last_item = tail-of (list) 
    
last_item = item 
    
count = count + 1 
    
enc = first-field (method_name) 
    
method = first-method (enc) 
    
build_function = lookup-build-function (method) 
    
method = next-method (enc) 
       
enc = next-field (method_name) 
    
u = head-of (main_list) 
v = head-of (work_list) # which will be null 
    
u_next = next-item (u) 
v_next = next-item (v) 
    
u = next-item (u_next) 
    
v = next-item (v_next) 
    
u = u_next 
v = next-item (v) 
    
v = head-of (work_list) 
    
w = head-of (main_list) 
    
z = w 
z = z.parent 
    
w = next-item (w) 
    
w = tail-of (main_list) 
i = max_formats - 1 
value = 0 
    
prev_length = w.flaglength 
w = previous-item (w) 
value = (value + 1) * 2^(w.flaglength - prev_length) 
    
temp_u = u  
temp_v = v  
    
flag = 0 
    
temp_u = next-item (temp_u) 
    
temp_v = next-item (temp_v) 
    
flag = 1 
n = length (context_val)  
                   
        # check that the value to be compressed matches each of the r      
        # values stored in context for this encoding - if not then    
        # STATIC can't be used to compress this encoding 
    
enc_index = enc_index + 1 
enc_index = enc_index - 1 
enc_index = enc_index + 1 
enc_index = enc_index - 1 
enc_index = enc_index + 1 
enc_index = enc_index - 1 
temp = lsb (value (item), k) 

enc_index = enc_index + 1 
full = 0 
full = full + value (temp) 
item = str (n, full) 
enc_index = enc_index - 1 
enc_index = enc_index + 1   
enc_index = enc_index - 1 
n = length (context_val)  
p_item = str (n, p) 
new_item = top (uncompressed_data, n)  
temp = (new_item - context_val + p_item)  
lsb_val = lsb (value (item), k) 
enc_index = enc_index + 1 
n = length (context_val)  
p_item = str (n, p) 
twok_item = str (n, 2^k) 
    
interval_start = context_val - p 
interval_end = interval_start + twok_item 
new_item = concat (msb (value (interval_start), (n-k)), recd) 
        
start = value (interval_start) 
end = value (interval_end) 
new = value (new_item)     
    
new_item = concat (msb (value (interval_end), (n-k)), recd) 
    
enc_index = enc_index - 1 
scale_len = floor( value((top(control_data)) / d) * m + p) 
scale_len = floor( (value (len_item) / d) * m + p) 
temp = str (n, value (MSN) mod 2^n) 
temp = str (n, value (MSN) mod 2^n) 
 
temp = str (n, value (MSN) mod 2^n) 
found = 0 
i = 0 
    
trans_item = str (n, a(i)) 
found = 1 
i = i + 1 
found = 0 
i = 0 
     
found = 1 
i = i + 1 
size = (stack_size (uncompressed_data) + n - p) / bits_in_byte)  
offset = item - base 
item = offset + base 
scale = str (n, scale_val) 
nbo = str (1, nbo_val) 
    
temp = item 
temp = byte-swap (item) 
offset = temp - scale * base 
    
temp = offset + scale * base 
    
item = temp 
item = byte-swap (temp) 
flag = top (control_data) 
compress_function = lookup-compress-function  
                                (extract-name (new_method)) 
    
can_compress = call compress_function  
                                (extract-name (new_method)) 
n = count-bits (new_method, enc) 
can_compress = 1 
flag = top (control_data) 
decompress_function = lookup-decompress-function  
                                (extract-name (new_method)) 
    
n = count-bits (new_method, enc)  
build_function = lookup-build-function  
                                (extract-name (new_method)) 
    
flag = top (control_data) 
compress_function = lookup-compress-function  
                                (extract-name (new_method)) 
    
can_compress = call compress_function  
                                (extract-name (new_method)) 
decompress_function = lookup-decompress-function  
                                (extract-name (new_method)) 
    
build_function = lookup-build-function  
                                (extract-name (new_method)) 
    
n = ceiling (log2(k-1)) 
m = context-size (new_method) 
enc_index = enc_index + j * m 
compress_function = lookup-compress-function  
                                (extract-name (new_method)) 

can_compress = call compress_function  
                                (extract-name (new_method)) 
enc_index = enc_index + (k - j - 1) * m 
n = ceiling (log2(k-1)) 
j = value (index) 
    
m = context-size (new_method) 
enc_index = enc_index - ((k - j) * m) 
decompress_function = lookup-decompress-function          
                                (extract-name (new_method)) 
    
enc_index = enc_index - ((k - j - 1) * m) 
build_function = lookup-build-function (new_method) 
    
scale_len = floor( value(top(control_data)) / d) * m + p) 
    
order = 0 
bits = ceiling (log2(k-1)) 
i = 0 
    
stack_len = stack-size (uncompressed_data) 
can_compress = false 
i = 0 
    
order = order * 2^bits + i 
compress_function = lookup-compress-function  
                                (extract-name (new_method(i))) 
    
can_compress = call compress_function  
                                (extract-name (new_method(i))) 
comp_len = stack_len - stack-size (uncompressed_data) 
scale_len = scale_len - comp_len 
i = i + 1 
order = order * 2^bits + i 
compress_function = lookup-compress-function  
                                (extract-name (new_method(i))) 
    
can_compress = call compress_function  
                                (extract-name (new_method(i))) 
presence = 0 
presence = presence * 2 + value (present[i]) 
bits = ceiling (log2(k-1)) 
    
presence = value (presence_item) 
order = value (order_item) 
    
presence = (presence - value (present [(k - 1) - i])) / 2 
i = value (lsb (order, bits)) 
order = (order “ i )/ 2^bits 
    
decompress_function = lookup-decompress-function  
                                (extract-name (new_method(i))) 
                                 
build_function = lookup-build-function ( 
                                extract-name (new_method(i))) 
order = 0 
bits = ceiling (log2(k-1)) 
i = 0 
    
null = str (0, 0) 
    
can_compress = false 
i = 0 

order = order * 2^bits + i 
p = stack-pointer (control_data)  
compress_function = lookup-compress-function  
                                 (extract-name (new_method(i))) 
    
can_compress = call compress_function  
                                 (extract-name (new_method(i))) 
v = null 
i = i + 1 
order = order * 2^bits + i 
compress_function = lookup-compress-function  
                                (extract-name (new_method(i))) 
    
can_compress = call compress_function  
                                (extract-name (new_method(i))) 
presence = 0 
presence = presence * 2 + value (present[i]) 
compress_function = lookup-compress-function  
                                (extract-name (new_method)) 
    
can_compress = call compress_function  
                                (extract-name (new_method)) 
decompress_function = lookup-decompress-function  
                                (extract-name (new_method)) 
    
build_function = lookup-build-function (new_method) 

compress_function = lookup-compress-function  
                                (extract-name (new_method)) 
    
can_compress = call compress_function  
                                (extract-name (new_method)) 
decompress_function = lookup-decompress-function  
                                (extract-name (new_method)) 
    
build_function = lookup-build-function (new_method) 
    
temp = enc_index 
compress_function = lookup-compress-function  
                                (extract-name (new_method)) 
    
can_compress = call compress_function  
                                (extract-name (new_method)) 

temp = enc_index 
decompress_function = lookup-decompress-function  
                                (extract-name (new_method)) 
    
build_function = lookup-build-function (method) 
    
n = ceiling(log2(k-1))  
    
compress_function = lookup-compress-function (          
                                extract-name(new_method(index_val))) 
    
can_compress = call compress_function ( 
                                extract-name (new_method(index_val))) 
                                 
current_set = current_set + max_sets * index_val 
max_sets = max_sets * k  
index = str (n, index_val) 
index_val = value (index) 
compress_function = lookup-compress-function (        
                                extract-name (new_method(index_val))) 
    
can_compress = call compress_function (               
                                extract-name (new_method (index_val))) 
enc_index = enc_index + 1 
n = ceiling(log2(k-1)) 
current_set = current_set * k + value (index) 
enc_index = enc_index - 1 
decompress_function = lookup-decompress-function (        
                        extract-name (new_method(value (index)))) 
    
j = current_set mod k  

current_set = floor(current_set / k)  
build_function = lookup-build-function ( 
                                extract-name (new_method(j))) 
build_function = lookup-build-function ( 
                                extract-name (new_method(i))) 
crc_function = lookup-crc-function (n) 
n = length (context_val)  
p_item = str (n, p) 
new_item = MSN 
    
temp = new_item - context_val + p_item 
lsb_val = lsb (value (item), k) 
enc_index = enc_index + 1 
msn_bits = k 
n = length (context_val)  
p_item = str (n, p) 
twok_item = str (n, 2^k) 
twok_extra = str (n, 2^(k + msn_bits)) 
    
recd = concat (msn_lsbs, temp) 
    
interval_start = context_val - p_item 
interval_end = interval_start + twok_extra 
new_item = concat (msb (value(interval_start), (n-k-msn_bits)),  
                          recd) 
    
start = value (interval_start) 
end = value (interval_end) 
new = value (new_item)     
    
new_item = concat (msb (value (interval_end), (n-k-msn_bits)),  
                          recd) 
    
MSN = new_item 
enc_index = enc_index - 1 
enc_index = enc_index + 1 
msn_bits = n 
enc_index = enc_index - 1 
