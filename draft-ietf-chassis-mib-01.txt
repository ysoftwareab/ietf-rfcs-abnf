







          Internet Draft           Chassis MIB              May 28, 1993


                   Definitions of Managed Objects for a Chassis
                   Containing Multiple Logical Network Devices

                                   May 28, 1993


                              David Arneson (Editor)
                             Cabletron Systems, Inc.
                                arneson@ctron.com





                               Status of this Memo

          This document is an Internet Draft.  Internet Drafts are
          working documents of the Internet Engineering Task Force
          (IETF), its Areas, and its Working Groups.  Note that other
          groups may also distribute working documents as Internet
          Drafts.

          Internet Drafts are valid for a maximum of six months and may
          be updated, replaced, or obsoleted by other documents at any
          time.  It is inappropriate to use Internet Drafts as reference
          material or to cite them other than as a "work in progress".
























          Expires November, 1993                                [Page 1]




          Internet Draft           Chassis MIB              May 28, 1993


          1.  Introduction

          This memo defines an experimental portion of the Management
          Information Base (MIB) for use with network management
          protocols in TCP/IP based internets.  In particular it defines
          objects for managing a chassis containing multiple (logical)
          networking devices, such as repeaters, bridges, routers,
          terminal servers, etc.  Please send all comments to the
          chassis MIB working group at chassismib@cs.utk.edu.



          2.  The Network Management Framework

          The Internet-standard Network Management Framework consists of
          three components.  They are:

          o    RFC 1155 which defines the SMI, the mechanisms used for
               describing and naming objects for the purpose of
               management.  RFC 1212 defines a more concise description
               mechanism, which is wholly consistent with the SMI.

          o    RFC 1213 defines MIB-II, the core set of managed objects
               for the Internet suite of protocols.

          o    RFC 1157 which defines the SNMP, the protocol used for
               network access to managed objects.

          The Framework permits new objects to be defined for the
          purpose of experimentation and evaluation.


          2.1.  Object Definitions

          Managed objects are accessed via a virtual information store,
          termed the Management Information Base or MIB.  Objects in the
          MIB are defined using the subset of Abstract Syntax Notation
          One (ASN.1) defined in the SMI.  In particular, each object
          object type is named by an OBJECT IDENTIFIER, an
          administratively assigned name.  The object type together with
          an object instance serves to uniquely identify a specific
          instantiation of the object.  For human convenience, we often
          use a textual string, termed the descriptor, to refer to the
          object type.






          Expires November, 1993                                [Page 2]




          Internet Draft           Chassis MIB              May 28, 1993


          3.  Overview

          This memo defines objects for the management of a chassis.  A
          chassis can be thought of as a hierarchical relationship of
          one or more "physical locations", each physical location
          containing one or more physical modules, and where a physical
          module, or combinations of physical modules, might perform one
          or more networking device functions.  The relationship between
          physical location and physical module can be many to many.
          Also the relationship between physical module and function can
          be many-to-many.  Thus, this memo uses the term 'entity' to
          refer to a logical networking device which may span parts of
          one or more modules.

          Often times entities utilize building blocks or connections.
          These connections (resources) are used to define and
          interconnect entities.

          This MIB contains the following information groups: chassis
          information group, chassis physical group, the Entity
          Definition group, the resource group, the Powersupply Group,
          and the environment group.


          3.1.  What is a Chassis

          This MIB applies to a chassis.  In its normal sense, a
          "chassis" is a collection of traditionally discrete network
          devices packaged in a single cabinet and power system.
          Indeed, the descriptions of the objects are phrased assuming
          such a "physical" chassis.  However, these descriptions are
          not intended to exclude the application of this MIB to a
          "logical chassis".  Examples of such logical chassis might be:

               - a building containing many network devices, where each
               room in the building might be considered as a physical
               location,

               - a geographical area containing many network devices,
               where each building in the area might be considered as a
               physical location.

          Note also that the MIB implementations for multiple (physical
          or logical) chassis might be arranged hierachically, i.e., a
          module/entity represented in one agent's chassis MIB might in





          Expires November, 1993                                [Page 3]




          Internet Draft           Chassis MIB              May 28, 1993


          fact represent a whole (lower-level) chassis.  For example, in
          a equipment cabinet having multiple shelves with each shelf
          having multiple plug-in cards, the whole cabinet could be
          represented by an overall chassis MIB in which each "physical
          location" represents a shelf, and there might also be
          individualchassis MIBs for each shelf in which each location
          represents where the plug-in cards live.











































          Expires November, 1993                                [Page 4]




          Internet Draft           Chassis MIB              May 28, 1993


          4.  Definitions

          CHASSIS-MIB DEFINITIONS ::= BEGIN

          IMPORTS
              OBJECT-TYPE
                  FROM RFC-1212
              experimental, TimeTicks, IpAddress, Counter
                  FROM RFC1155-SMI
              Party, Context
                  FROM RFC-1447;


          -- Textual Conventions

          DisplayString ::= OCTET STRING

          -- This data type is used to model textual information taken
          -- from the NVT ASCII character set.  By convention, objects
          -- with this syntax are declared as having
          --
          --      SIZE (0..255)


          AutonomousType    ::= OBJECT IDENTIFIER

          -- The object identifier is an independently extensible type
          -- identification value.  It may, for example indicate a
          -- particular sub-tree with further MIB definitions, or
          -- define something like a protocol type or type of
          -- hardware.

          chassis             OBJECT IDENTIFIER ::= { experimental 38 }

          -- Groups within the chassis MIB

          chasInfo            OBJECT IDENTIFIER ::= { chassis 1 }
          chasPhysical        OBJECT IDENTIFIER ::= { chassis 2 }
          chasEntity          OBJECT IDENTIFIER ::= { chassis 3 }
          chasResource        OBJECT IDENTIFIER ::= { chassis 4 }
          chasPowerSupply     OBJECT IDENTIFIER ::= { chassis 5 }
          chasEnviron         OBJECT IDENTIFIER ::= { chassis 6 }

          -- Chassis MIB Know Types






          Expires November, 1993                                [Page 5]




          Internet Draft           Chassis MIB              May 28, 1993


          chasKnownTypes      OBJECT IDENTIFIER ::= { chassis 7 }

          -- Values for known chasPhyLocationType. The types of
          --    location in the chassis.

          chasLocationTypes   OBJECT IDENTIFIER ::= { chasKnownTypes 1 }

          chasModularSlot     OBJECT IDENTIFIER ::= { chasLocationTypes 1 }
          chasPowerSupplyBay  OBJECT IDENTIFIER ::= { chasLocationTypes 2 }
          chasFanTray         OBJECT IDENTIFIER ::= { chasLocationTypes 3 }
          chasBackplane       OBJECT IDENTIFIER ::= { chasLocationTypes 4 }
          chasFrontSlot       OBJECT IDENTIFIER ::= { chasLocationTypes 5 }
          chasBackSlot        OBJECT IDENTIFIER ::= { chasLocationTypes 6 }

          -- Values for chasModuleType.

          chasModuleTypes  OBJECT IDENTIFIER ::= { chasKnownTypes 2 }
          chasLocationEmpty   OBJECT IDENTIFIER ::= { chasModuleTypes 1 }
          chasModuleUnknown   OBJECT IDENTIFIER ::= { chasModuleTypes 2 }

          -- Values for chasEntityObjectId.

          chasEntityTypes  OBJECT IDENTIFIER ::= { chasKnownTypes 3 }

          -- Chassis components non-networking

          chasChassisEntities OBJECT IDENTIFIER ::= { chasEntityTypes 1 }

          chasPowerSupply  OBJECT IDENTIFIER ::= { chasChassisTypes  1 }
          chasChassis      OBJECT IDENTIFIER ::= { chasChassisTypes  2 }
          chasMonitors     OBJECT IDENTIFIER ::= { chasChassisTypes  3 }

          -- Basic Network Entities

          chasNetEntities OBJECT IDENTIFIER ::= { chasEntityTypes 2 }

          chas8023Repeater OBJECT IDENTIFIER ::= { chasNetEntities 1 }
          chas8025Ring     OBJECT IDENTIFIER ::= { chasNetEntities 2 }
          chasFddiRing     OBJECT IDENTIFIER ::= { chasNetEntities 3 }
          chasAtmSwitch    OBJECT IDENTIFIER ::= { chasNetEntities 4 }
          chasFrameRelay   OBJECT IDENTIFIER ::= { chasNetEntities 5 }

          -- Internetworking/Bridging

          chasConnectEntities OBJECT IDENTIFIER ::= { chasEntityTypes 3 }





          Expires November, 1993                                [Page 6]




          Internet Draft           Chassis MIB              May 28, 1993


          chasBridge    OBJECT IDENTIFIER ::= { chasConnectEntities 1 }
          chasRouter    OBJECT IDENTIFIER ::= { chasConnectEntities 2 }
          chasBrouter   OBJECT IDENTIFIER ::= { chasConnectEntities 3 }
          chasGateway   OBJECT IDENTIFIER ::= { chasConnectEntities 4 }

          --  Values for chasResourceType.

          chasResTypes  OBJECT IDENTIFIER ::= { chasKnownTypes 4 }

          --  Chassis type resources.

          chasChassisRes OBJECT IDENTIFIER ::= { chasResTypes 1 }

          --  Basic Network Resource

          chasNetworkRes OBJECT IDENTIFIER ::= { chasResTypes 2 }

          chas8023RptrPort  OBJECT IDENTIFIER ::= { chasNetworkRes 1 }
          chas8025MauPort   OBJECT IDENTIFIER ::= { chasNetworkRes 2 }
          chasFddiPort      OBJECT IDENTIFIER ::= { chasNetworkRes 3 }
          chasAtmPort       OBJECT IDENTIFIER ::= { chasNetworkRes 4 }
          chas8023PortGroup OBJECT IDENTIFIER ::= { chasNetworkRes 5 }
          chas8025PortGroup OBJECT IDENTIFIER ::= { chasNetworkRes 6 }
          chasFddiPortGroup OBJECT IDENTIFIER ::= { chasNetworkRes 7 }
          chasAtmPortGroup  OBJECT IDENTIFIER ::= { chasNetworkRes 8 }

          -- Backplane Network Resources (if required)

          chasBplaneRes  OBJECT IDENTIFIER ::= { chasResTypes 3 }

          chas8023Bplane    OBJECT IDENTIFIER ::= { chasBplaneRes  1 }
          chas8025Bplane    OBJECT IDENTIFIER ::= { chasBplaneRes  2 }
          chasFddiBplane    OBJECT IDENTIFIER ::= { chasBplaneRes  3 }
          chasMgmtBplane    OBJECT IDENTIFIER ::= { chasBplaneRes  4 }
          chasAtmBplane     OBJECT IDENTIFIER ::= { chasBplaneRes  5 }

          -- Internetworking/bridging resources (if required)

          chasConnectRes OBJECT IDENTIFIER ::= { chasResTypes 4 }

          chasBridgeRelay   OBJECT IDENTIFIER ::= { chasConnectRes 1 }
          chasRouterRelay   OBJECT IDENTIFIER ::= { chasConnectRes 2 }
          chasBrouterRelay  OBJECT IDENTIFIER ::= { chasConnectRes 3 }
          chasSwitch        OBJECT IDENTIFIER ::= { chasConnectRes 4 }






          Expires November, 1993                                [Page 7]




          Internet Draft           Chassis MIB              May 28, 1993


          -- chasInfo group (chassis information group).
          -- Implementation of this group is mandatory.

          chasType  OBJECT-TYPE
              SYNTAX  OBJECT IDENTIFIER
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "An authoritative identification of the type of
                      hub-based or standalone chassis.  By convention
                      this value is allocated within the SMI enterprises
                      subtree(1.3.6.1.4.1), and provides an easy and
                      unambiguous means for determining `what kind of
                      box' is being managed.  If this information is not
                      present or unknown, its value should be set to the
                      value: chasTypeUnknown."
              ::= { chasInfo 1 }

          chasPhysicalChanges  OBJECT-TYPE
              SYNTAX   Counter
              ACCESS   read-only
              STATUS   mandatory
              DESCRIPTION
                      "The number of physical changes that have occurred
                      in the chassis since the agent was warm/cold
                      started.  This includes additions and removal of
                      modules and entities.  Other uses are
                      implementation specific."
              ::= { chasInfo 2 }


          chasChassisSerialNumber   OBJECT-TYPE
              SYNTAX    DisplayString (SIZE (0..32))
              ACCESS    read-only
              STATUS    mandatory
              DESCRIPTION
                      "The serial number of the chassis. If no serial
                      number is available then this object should be the
                      zero length string."
              ::= { chasInfo 3 }










          Expires November, 1993                                [Page 8]




          Internet Draft           Chassis MIB              May 28, 1993


          -- chasPhysical group (physical configuration group).
          -- Implementation of this group is mandatory.

          chasPhyLocationTable OBJECT-TYPE
              SYNTAX SEQUENCE OF ChasPhyLocationEntry
              ACCESS not-accessible
              STATUS mandatory
              DESCRIPTION
                      "This table summarises the different classes of
                      and types of modular physical locations in the
                      chassis.  This includes but is not limited to slot
                      within a chassis, power supply bay."
              ::= { chasPhysical 1 }

          chasPhyLocationEntry OBJECT-TYPE
              SYNTAX ChasPhyLocationEntry
              ACCESS not-accessible
              STATUS mandatory
              DESCRIPTION
                      "An entry in the phyLocationTable"
              INDEX { chasPhyLocationTypeIndex }
              ::= { chasPhyLocationTable 1 }

          ChasPhyLocationEntry ::= SEQUENCE {
                  chasPhyLocationTypeIndex
                          INTEGER,
                  chasPhyLocationCount
                          INTEGER,
                  chasPhyLocationType
                          OBJECT IDENTIFIER,
                  chasPhyLocationName
                          DisplayString
                  }

          chasPhyLocationTypeIndex OBJECT-TYPE
              SYNTAX INTEGER (1..65535)
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "This uniquely identifies the physical location
                      type within the chassis."
              ::= { chasPhyLocationEntry 1 }

          chasPhyLocationCount  OBJECT-TYPE
              SYNTAX INTEGER (1..65535)





          Expires November, 1993                                [Page 9]




          Internet Draft           Chassis MIB              May 28, 1993


              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "This defines the number of physical locations of
                      this type exist within the chassis."
              ::= { chasPhyLocationEntry 2 }

          chasPhyLocationType OBJECT-TYPE
              SYNTAX OBJECT IDENTIFIER
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      " Uniquely identifies the 'type' of the physical
                      location within the chassis."
              ::= { chasPhyLocationEntry 2 }

          chasPhyLocationDescr OBJECT-TYPE
              SYNTAX DisplayString
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "Each type of physical location within the chassis
                      is given a textual name."
              ::= { phyLocationEntry 3 }

          chasModuleTable OBJECT-TYPE
              SYNTAX SEQUENCE OF ChasModuleEntry
              ACCESS not-accessible
              STATUS mandatory
              DESCRIPTION
                      "This table defines the physical modules within a
                      chassis.  This is done by defining the type
                      physical modules and the physical location where
                      it resides.  This table also provides a mapping
                      from between physical modules and their location
                      within the chassis."
              :: { chasPhysical 2 }

          chasModuleEntry OBJECT-TYPE
              SYNTAX ChasPhyModuleEntry
              ACCESS not-accessible
              STATUS mandatory
              DESCRIPTION
                      "An entry in this table that describes a physical
                      module that resides at a given physcial location





          Expires November, 1993                               [Page 10]




          Internet Draft           Chassis MIB              May 28, 1993


                      within the chassis."
              INDEX { chasModuleLocationType, chasModuleLocation }
              ::= { chasModuleTable 1 }

          ChasPhyModuleEntry ::= SEQUENCE
              chasModuleLocationType
                  INTEGER,
              chasModuleLocation
                  INTEGER,
              chasModuleType
                  OBJECT IDENTIFIER,
              chasModuleFwVersion
                  DISPLAYSTRING,
              chasModuleHwVersion
                  DisplayString,
              chasModuleSerialNumber
                  DisplayString,
              chasModuleDescription
                  DisplayString,
              chasModuleLastChangeTime
                  TimeTicks,
              chasModuleAdminStatus
                  INTEGER,
              chasModuleOperStatus
                  INTEGER
              }

          chasModuleLocationType  OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "An instance of a module is identified by the
                      physical location which it resides.  The physical
                      location is identified by location type index and
                      location index (instance of that location type).
                      This object defines an instance of the
                      chasPhyLocationType."
                  ::= { chasModuleEntry 1 }

          chasModuleLocation  OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION





          Expires November, 1993                               [Page 11]




          Internet Draft           Chassis MIB              May 28, 1993


                      "An instance of a module is identified by the
                      physical location which it resides.  The physical
                      location is identified by location type index and
                      location index (instance of that location type).
                      This object defines the instance of a particular
                      location type.  It must be within the bounds
                      defined by chasPhyLocationCount."
                  ::= { chasModuleEntry 2 }
          chasModuleType OBJECT-TYPE
              SYNTAX OBJECT IDENTIFIER
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "An authoritative identification of the type of
                      physcial module in this physical location.  A
                      value of chasLocationUnknown indicates that the
                      type of physical module is unknown."
              :== { chasModuleEntry 3 }

          chasModuleSwVersion OBJECT-TYPE
              SYNTAX DisplayString (SIZE (0..32))
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "A textual description of the version/revision
                      level for this module's software.  If not realized
                      this value should be set to the zero-length
                      string."
              :== { chasModuleEntry 4 }

          chasModuleHwVersion OBJECT-TYPE
              SYNTAX DisplayString (SIZE (0..32))
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "A textual description of the version/revision
                      level for this module's firmware.  If not realized
                      this value should be set to the zero-length
                      string."
              ::= { chasModuleEntry 5 }

          chasModuleSerialNumber OBJECT-TYPE
              SYNTAX DisplayString (SIZE (0..32))
              ACCESS read-only
              STATUS mandatory





          Expires November, 1993                               [Page 12]




          Internet Draft           Chassis MIB              May 28, 1993


              DESCRIPTION
                      "The serial number of the physical module present
                      in this physical location.  If the physical
                      location table is implemented as dense and the
                      slot is empty this value will be the zero length
                      string.  If no serial number is available for a
                      physical module this value should set to a zero
                      length string."
              ::= { chasModuleEntry 6 }

          chasModuleDescription OBJECT-TYPE
              SYNTAX DisplayString (SIZE (0..32))
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "A textual description of the physical module
                      plugged that resides in this physical location.
                      If not available this value should be set to a
                      zero length string."
              ::= { chasModuleEntry 7 }

          chasModuleLastChange OBJECT-TYPE
              Syntax TimeTicks
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "The value of MIB-II's sysUpTime (in the agent
                      supporting this chassis MIB) at which a module was
                      last inserted or initialized.  If the module has
                      not changed since the last network managment
                      system reinitialized then this object has a zero
                      value."
              ::= { chasModuleEntry 8 }

          chasModuleAdminStatus OBJECT-TYPE
              Syntax INTEGER {
                  enable(2),
                  disable(3),
                  reset(4),
                  programLoad(5),
                  test(6)
              }
              ACCESS read-write
              STATUS mandatory
              DESCRIPTION





          Expires November, 1993                               [Page 13]




          Internet Draft           Chassis MIB              May 28, 1993


                      Provides desired state of the given physical
                      module.  Notice that not all values may be
                      supported by the specified physical module.  In
                      this case and SNMP error will be returned when the
                      set is attempted.

                      A physical module maybe activated by writting a
                      value of enable(2).

                      A physical module may be de-activated by writting
                      a value of disable(3).  In a disabled state a
                      physical module is present in the chassis but is
                      benign.

                      Writting a value of reset(4) initiates a reset
                      sequence.

                      A value of programLoad(5) initiates a software
                      load sequences.

                      Writting a vlaue of test(6) should start a self
                      test sequence within the physical module."
              ::= { chasModuleEntry 9 }

          chasModuleOperStatus OBJECT-TYPE
              Syntax INTEGER {
                  other(1),
                  invalid(2),
                  test(3),
                  operational(4),
                  resetInProgress(5),
                  warning(6),
                  nonFatalError(7),
                  fatalError(8)
              }
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      Provides operational status of the module.  The
                      following are possible definitions of the values.
                      The exact definition of the values is
                      implementation specific.  A value of other(1)
                      implies some undetermined state, possibly as a
                      result of setting phyAdminStatus to a value of
                      disable(3).  A value of invalid(2) could have the





          Expires November, 1993                               [Page 14]




          Internet Draft           Chassis MIB              May 28, 1993


                      possible meaning that the module exists but the
                      chassis manager has no direct control over the
                      module.  A value of testing(3) may be a diagnostic
                      state.  A value of operational(4) implies that the
                      entity is running with no errors or warnings.
                      State resetInProgress(5) implies equivalent of
                      setting phyAdminStatus to reset(4). The states of
                      warning(6), nonFatalError(7), fatalError(8)
                      reflect conditions detected during operation.  The
                      entity may or may not be still functional.

                      For example if a modules value of phyAdminStatus
                      is disable(3) and is set to enable(2) then
                      phyOperStatus may enter a state of testing(3) then
                      change to a value of operational(4)."
              ::= { chasModuleEntry 10 }


































          Expires November, 1993                               [Page 15]




          Internet Draft           Chassis MIB              May 28, 1993


          -- The chasEntity group.  Implementation of the chasEntity group
          -- is mandatory.

          -- Entity Table

          chasEntityTable OBJECT-TYPE
              SYNTAX  SEQUENCE OF ChasEntityEntry
              ACCESS  not-accessible
              STATUS  mandatory
              DESCRIPTION
                      "A table that contains information about the
                      'logical' networking devices (entities) in this
                      chassis."
              ::= { chasEntity 1 }

          chasEntityEntry OBJECT-TYPE
              SYNTAX  ChasEntityEntry
              ACCESS  not-accessible
              STATUS  mandatory
              DESCRIPTION
                      "Information concerning an entity in the chassis.
                      Conceptual rows may not be created or deleted with
                      SNMP operations."
              INDEX  { chasEntityIndex }
              ::= { chasEntityTable 1 }

          ChasEntityEntry ::=
              SEQUENCE {
                  chasEntityIndex
                      INTEGER,
                  chasEntityObjectID
                      OBJECT IDENTIFIER,
                  chasEntityDescr
                      DisplayString,
                  chasEntityAdminStatus
                      INTEGER,
                  chasEntityOperStatus
                      INTEGER,
                  chasEntityTimeStamp
                      TimeTicks,
                  chasEntityParty
                      Party,
                  chasEntityContext
                      Context,
                  chasEntityCommunity





          Expires November, 1993                               [Page 16]




          Internet Draft           Chassis MIB              May 28, 1993


                      OCTET STRING,
                  chasEntityIpAddress
                      IpAddress
              }

          chasEntityIndex OBJECT-TYPE
              SYNTAX  INTEGER (1..65535)
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "A unique index for the entity for which this
                      entry contains information."
              ::= { chasEntityEntry 1 }

          chasEntityObjectID  OBJECT-TYPE
              SYNTAX  OBJECT IDENTIFIER
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "The specific type of entity.  The value of this
                      object is analagous to MIB-II's sysObjectId.  In
                      particular, it has the same value as would be
                      returned if the SNMP Party (identified by
                      chasEntityParty) and/or the community (identified
                      by chasIpAddress and chasCommunity), were queried
                      for sysObjectId."
              ::= { chasEntityEntry 2 }


          chasEntityDescr  OBJECT-TYPE
              SYNTAX  DisplayString (SIZE (0..255))
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "A textual description of the entity.  The value
                      of this object is analagous to MIB-II's sysDescr.
                      In particular, it has the same value as would be
                      returned if the SNMP Party (identified by
                      chasEntityParty) and/or the community (identified
                      by chasIpAddress and chasCommunity), were queried
                      for sysDescr."
              ::= { chasEntityEntry 3 }

          chasEntityAdminStatus OBJECT-TYPE
              SYNTAX  INTEGER {





          Expires November, 1993                               [Page 17]




          Internet Draft           Chassis MIB              May 28, 1993


                  unknown(1),             --  none of the following
                  enable(2),
                  disable(3),
                  reset(4),
                  programload(5),
                  test(6)
              }
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "Provides the administratively desired state of
                      the given entity.

                      An entity is activated by writing a value of
                      enable(2).

                      An entity may be de-activated by writing a value
                      of disable(3).  In a disabled state, a entity does
                      exist within the given chassis, but is benign.  A
                      disabled entity is available for subsequent
                      activation.

                      Writing a value of reset(4) specifies an entity
                      should initiate a reset sequence.

                      Writing a value of programload(5) specifies an
                      entity should initiate a program load sequence.

                      Writing a value of test(6) specifies an entity
                      should initiate a testing sequence.

                      Agent support of the writing of any of the values
                      of this object is implementation-specific.  For
                      example, this object might be read only for
                      entities that disabling would compromise the
                      integrity of the chassis."
              ::= { chasEntityEntry 4 }

          chasEntityOperStatus OBJECT-TYPE
              SYNTAX  INTEGER {
                  other(1),               --  none of the following
                  invalid(2),
                  testing(3),
                  operational(4),
                  resetInProgress(5),





          Expires November, 1993                               [Page 18]




          Internet Draft           Chassis MIB              May 28, 1993


                  warning(6),
                  nonFatalError(7),
                  fatalError(8),
                  loading(10)
              }
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "Provides operational status of the entity.  The
                      following are possible definitions of the values.
                      The exact definition of the values is
                      implementation specific.  A value of other(1)
                      implies some undetermined state, possibly as a
                      result of setting chasEntityAdminStatus to a value
                      of disable(3).  A value of invalid(2) could have
                      the possible meaning that the entity exists but
                      the chassis manager has no direct control of the
                      entity.  A value of testing(3) may be a diagnostic
                      state.  A value of operational(4) implies that the
                      entity is running with no errors or warnings.
                      State resetInProgress(5) implies equivalent of
                      setting chasEntityAdminStatus to reset(4). The
                      states of warning(6), nonFatalError(7),
                      fatalError(8) reflect conditions detected during
                      operation.  The entity may or may not be still
                      functional.  State loading(10) is a result of
                      asserting programload(5) in chasEntityAdminStatus.

                      For example if an entities value of
                      chasEntityAdminStatus is disable(3) and is set to
                      enable(2) then chasEntityOperStatus may enter a
                      state of testing(3) then change to a value of
                      operational(4)."
              ::= { chasEntityEntry 5 }


          chasEntityTimeStamp  OBJECT-TYPE
              SYNTAX  TimeTicks
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "The value of MIB-II's sysUpTime (in the agent
                      supporting this MIB) at which this entity was last
                      (re-)initialized.  If the entity has not been
                      initialized then this object has a zero value."





          Expires November, 1993                               [Page 19]




          Internet Draft           Chassis MIB              May 28, 1993


              ::= { chasEntityEntry 6 }

          chasEntityParty  OBJECT-TYPE
              SYNTAX  Party
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "The SNMP Party which provides access to the
                      detailed management information for this entity.
                      Note that the definition of a SNMP Party includes
                      the location at which it executes, the
                      authentication and privacy algorithms and
                      parameters required to access the management
                      entity.  In order for a SNMP manager to be able to
                      access the Party, that manager must have prior
                      knowledge of the Party.

                      A party is named by an OBJECT IDENTIFIER.  For a
                      entity which is not managed through access to a
                      SNMP Party, the value of this object is
                      chasEntityNoParty."
              ::= { chasEntityEntry 7 }

          chasEntityContext    OBJECT-TYPE
              SYNTAX  Context
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "The SNMPv2 Context indentifier the
                      chasEntityContext in conjunction with
                      chasEntityParty defines access to the MIB view for
                      this entity."
              ::= { chasEntityEntry 8 }

          chasEntityCommunity  OBJECT-TYPE
              SYNTAX  OCTET STRING (SIZE (0..256))
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "The SNMP Community which executes at the address
                      chasEntityIpAddress, and provides access to the
                      detailed management information for this entity.

                      For a entity which is not managed through access
                      to a SNMP Community, the value of this object is





          Expires November, 1993                               [Page 20]




          Internet Draft           Chassis MIB              May 28, 1993


                      the zero-length string."
              ::= { chasEntityEntry 9 }

          chasEntityIpAddress  OBJECT-TYPE
              SYNTAX  IpAddress
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "The address of the SNMP agent which responds to
                      messages for the SNMP Community identified by
                      chasEntityCommunity.  When access is via proxy,
                      this variable contains the address of the proxy
                      agent.

                      For a entity which is not managed through access
                      to a SNMP Community, the value of this object is
                      0.0.0.0."
              ::= { chasEntityEntry 10 }
































          Expires November, 1993                               [Page 21]




          Internet Draft           Chassis MIB              May 28, 1993


          -- The chasResource group.
          -- This defines a mapping of physical relationship (modules/resources)
          -- and a logical mapping of resource to entities.

          -- Implementation of the resource group is mandatory.

          chasPhyResourceTable  OBJET-TYPE
              SYNTAX  SEQUENCE of ChasPhyResourceEntry
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION

                      "This table defines a physical relationship
                      between physical modules and resources.  A
                      resource is a building block.  A resource defines
                      the type of relationship between entities.  This
                      may be a back plane connection between physical
                      modules sharing the same entity.  It may be a
                      network segment that connects multiple entities.

                      This table then defines the physical mapping of
                      resources and physical modules onto entities."
              ::= { chasResource 1 }

          chasPhyResourceEntry  OBJECT-TYPE
              SYNTAX  ChasPhyResourceEntry
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "Defines a particular physical configuration
                      relationship."
              INDEX { chasPhyResLocationType,
                      chasPhyResLocation,
                      chasPhyResIndex }
              ::= { chasResourceTable 1 }

          ChasPhyResourceEntry ::= SEQUENCE {
              chasPhyResLocationType
                  INTEGER,
              chasPhyResLocation
                  INTEGER
              chasPhyResIndex
                  INTEGER,
              chasPhyResType
                  OBJECT IDENTIFIER,





          Expires November, 1993                               [Page 22]




          Internet Draft           Chassis MIB              May 28, 1993


              chasPhyResAssignment
                  INTEGER,
              chasPhyResEntitySubIndex
                  INTEGER
              }

          chasPhyResLocationType  OBJECT-TYPE
              SYNTAX  INTEGER
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "A resource exists on a particular module.  A
                      module is identified by it's physical location.
                      Physical location is defined location type and an
                      instance of that physical location type.  This
                      object defines the location type.  This object can
                      be used in conjunction with chasPhyResLocation to
                      index the module table."
              ::= { chasPhyResourceEntry 1 }

          chasPhyResLocation  OBJECT-TYPE
              SYNTAX  INTEGER
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "A resource exists on a particular module.  A
                      module is identified by it's physical location.
                      Physical location is defined location type and an
                      instance of that physical location type.  This
                      object defines a particular instance of the
                      physical location."
              ::= { chasPhyResourceEntry 2 }

          chasPhyResIndex  OBJECT-TYPE
              SYNTAX  INTEGER
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "A unique index for the chassis resource on this
                      particular physical module."
              ::= { chasPhyResourceEntry 3 }

          chasPhyResType OBJECT-TYPE
              SYNTAX OBJECT IDENTIFIER
              ACCESS read-only





          Expires November, 1993                               [Page 23]




          Internet Draft           Chassis MIB              May 28, 1993


              STATUS mandatory
              DESCRIPTION
                      "The type of resource.  For example, for an
                      Ethernet segment this object would have a value of
                      dot3 as defined in RFC 1284.  This may also
                      function as identification of what type of entity
                      this resource can be assigned."
              ::= { chasPhyResourceEntry 4 }

          chasPhyResAssignment  OBJECT-TYPE
              SYNTAX  INTEGER
              access  read-write
              STATUS  mandatory
              DESCRIPTION
                      "The physical module resource relationship is
                      assigned to a specific entity.  This object
                      defines the instance of an entity that this
                      relationship is assigned.

                      Notice, not all implementations may support this
                      object as read-write.  If read-write is supported
                      by assignment may still fail due to a number of
                      reasons such as insufficient resources, invalid
                      configuration."
              ::= { chasPhyResourceEntry 5 }

          chasPhyResEntitySubIndex  OBJECT-TYPE
              SYNTAX  INTEGER
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "Provides a unique index that can be used to
                      identify the relationship in terms of the entity."
              ::= { chasPhyResourceEntry 6 }


          -- Logical configuration/resource table


          chasLogResourceTable  OBJECT-TYPE
                  SYNTAX SEQUENCE OF ChasLogResourceEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "Defines a logical configuration relationship





          Expires November, 1993                               [Page 24]




          Internet Draft           Chassis MIB              May 28, 1993


                      which is a relationship between entities and
                      resources and the physical module that the
                      relationship exists on."
                  ::= { chasConfig 1 }

          chasLogResourceEntry OBJECT-TYPE
                  SYNTAX ChasLogResourceEntry
                  ACCESS not-accessible
                  STATUS mandatory
                  DESCRIPTION
                      "Defines a single logical relationship."
                  INDEX { chasLogResourceEntity,
                          chasLogResourceEntitySubIndex }
                  ::= { chasLogResourceTable 1 }

          ChasLogResourceEntry  SEQUENCE {
                  chasLogResourceEntity
                          INTEGER,
                  chasLogResourceEntitySubIndex
                          INTEGER,
                  chasLogResourceLocationType
                          INTEGER,
                  chasLogResourceLocation
                          INTEGER,
                  chasLogResourceID
                          INTEGER
                  }

          chasLogResourceEntity  OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The entity ID for which this logical
                      configuration relationship exists."
                  ::= { chasLogResourceEntry 1 }

          chasLogResourceEntitySubIndex  OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The entity sub index for which this logical
                      configuration relationship exists.  The logical
                      relationship is identified by a resource





          Expires November, 1993                               [Page 25]




          Internet Draft           Chassis MIB              May 28, 1993


                      assignment to an entity.  The sub index defines a
                      particular instance of the mapping of physical
                      configuration onto an entity."
                  ::= { chasLogResourceEntry 2 }

          chasLogResourceLocationType  OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "A module is defined by it's physical location
                      type and an instance of that physical location.
                      This object defines the physical location type
                      portion of the physical module identifier that
                      this logical configuration exists for."
                  ::= { chasLogResourceEntry 3 }

          chasLogResourceLocation  OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "A module is defined by it's physical location
                      type and an instance of that physical location.
                      This object defines the instance physical location
                      (location index) portion of the physical module
                      identifier that this logical configuration exists
                      for."
                  ::= { chasLogResourceEntry 4 }

          chasLogResourceID  OBJECT-TYPE
                  SYNTAX INTEGER
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                      "The value of this object refers to a particular
                      instance of a resource, as defined by
                      chasResourceIndex, for which this relationship is
                      defined.  This together with
                      chasLogResourceLocationType and
                      chasLogResourceLocation completes the mapping of
                      the logical configuration on to the physical
                      module and resource combination."
                  ::= { chasLogResourceEntry 2 }






          Expires November, 1993                               [Page 26]




          Internet Draft           Chassis MIB              May 28, 1993


          -- The chasPowerSupply (Power Supply) group, implementation of
          -- the power supply group is optional.

          -- the Power Supply table

          chasPowerSupplyTable OBJECT-TYPE
              SYNTAX SEQUENCE OF ChasPowerSupplyEntry
              ACCESS not-accessible
              STATUS mandatory
              DESCRIPTION
                      "A list of power supply entries, one for each
                      power supply in the chassis."
              ::= { chasPowerSupply 1 }

          chasPowerSupplyEntry OBJECT-TYPE
              SYNTAX ChasPowerSupplyEntry
              ACCESS not-accessible
              STATUS mandatory
              DESCRIPTION
                      Values for a power supply."
              INDEX { chasPowerSupplyIndex }
              ::= { chasPowerSupplyTable 1 }

          ChasPowerSupplyEntry ::=
              SEQUENCE {
                  chasPowerSupplyIndex
                      INTEGER,
                  chasPowerSupplyDescr
                      DisplayString,
                  chasPowerSupplyAdminStatus
                      INTEGER,
                  chasPowerSupplyOperStatus
                      INTEGER,
                  chasPowerSupplyHealthText
                      DisplayString,
                  chasPowerSupplyWarnings
                      Counter,
                  chasPowerSupplyFailures
                      Counter,
                  chasPowerSupplyLocationType
                      INTEGER,
                  chasPowerSupplyLocationIndex
                      INTEGER
              }






          Expires November, 1993                               [Page 27]




          Internet Draft           Chassis MIB              May 28, 1993


          chasPowerSupplyIndex OBJECT-TYPE
              SYNTAX INTEGER
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "An index value that uniquely identifies a power
                      supply.  This may correspond to a hardware power
                      supply slot, which may or may not be the same as a
                      network device slot (chasSlotIndex)."
              ::= { chasPowerSupplyEntry 1 }

          chasPowerSupplyDescr OBJECT-TYPE
              SYNTAX DisplayString (SIZE (0..255))
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "A textual description of the power supply,
                      including the vendor's name and version."
              ::= { chasPowerSupplyEntry 2 }

          chasPowerSupplyAdminStatus OBJECT-TYPE
              SYNTAX INTEGER {
                  unknown(1),
                  enable(2),
                  disable(3) }
              ACCESS read-write
              STATUS mandatory
              DESCRIPTION
                      "Desired status of the power supply."
              ::= { chasPowerSupplyEntry 3 }

          chasPowerSupplyOperStatus OBJECT-TYPE
              SYNTAX INTEGER {
                  unknown(1),
                  empty(2),
                  disabled(3),
                  bad(4),
                  warning(5),
                  standby(6),
                  engaged(7),
                  redundant(8) }
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "Actual status of the power supply:





          Expires November, 1993                               [Page 28]




          Internet Draft           Chassis MIB              May 28, 1993


                      - unknown(1) - status not known.
                      - empty(2) - no power supply installed in slot
                      - disabled(3) - unable to supply power due to
chasPowerSupplyAdminStatus
                      - bad(4) - unable to supply power due to failure
                      - warning(5) - supplying power but an output or
sensor is bad or warning
                      - standby(6) - believed usable but not supplying power
                      - engaged(7) - supplying power
                      - redundant(8) - supplying power but not needed

                      It is an implementation specific matter whether
                      the agent keeps entries with status unknown(1) or
                      empty(2) in the table."
              ::= { chasPowerSupplyEntry 4 }

          chasPowerSupplyHealthText OBJECT-TYPE
              SYNTAX DisplayString (SIZE (0..255))
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "A textual description of the power supply's
                      operational status. Agents may use this string to
                      provide detailed information on current failures,
                      including how they were detected, and/or
                      instructions for problem resolution. The contents
                      are agent-specific."
              ::= { chasPowerSupplyEntry 5 }

          chasPowerSupplyWarnings OBJECT-TYPE
              SYNTAX Counter
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "The number of times chasPowerSupplyOperStatus has
                      gone to warning(5)."
              ::= { chasPowerSupplyEntry 6 }

          chasPowerSupplyFailures OBJECT-TYPE
              SYNTAX Counter
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "The number of times chasPowerSupplyOperStatus has
                      gone to bad(4)."
              ::= { chasPowerSupplyEntry 7 }






          Expires November, 1993                               [Page 29]




          Internet Draft           Chassis MIB              May 28, 1993


          chasPowerSupplyLocationType OBJECT-TYPE
              SYNTAX INTEGER
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "This defines the instance of a physical location
                      type of the power supply.  Location Type together
                      with location index completely defines the
                      location of a power supply."
              ::= { chasPowerSupplyEntry 8 }

          chasPowerSupplyLocationIndex  OBJECT-TYPE
                  SYNTAX  INTEGER
                  ACCESS  read-only
                  STATUS  mandatory
                  DESCRIPTION
                      "Defines a particular instance of a physical
                      location type."
                  ::= { chasPowerSupplyEntry 9 }

          -- the Power Supply Output table

          chasPowerSupplyOutputTable OBJECT-TYPE
              SYNTAX SEQUENCE OF ChasPowerSupplyOutputEntry
              ACCESS not-accessible
              STATUS mandatory
              DESCRIPTION
                      "A list of power supply output entries, one for
                      each output of each power supply in the chassis."
              ::= { chasPowerSupply 2 }

          chasPowerSupplyOutputEntry OBJECT-TYPE
              SYNTAX ChasPowerSupplyEntry
              ACCESS not-accessible
              STATUS mandatory
              DESCRIPTION
                      "Values for a power supply output."
              INDEX { chasPowerSupplyIndex, chasPowerSupplyOutputIndex }
              ::= { chasPowerSupplyOutputTable 1 }

          ChasPowerSupplyOutputEntry ::=
              SEQUENCE {
                  chasPowerSupplyOutputIndex
                      INTEGER,
                  chasPowerSupplyOutputStatus





          Expires November, 1993                               [Page 30]




          Internet Draft           Chassis MIB              May 28, 1993


                      INTEGER,
                  chasPowerSupplyOutputNominalVoltage
                      Gauge,
                  chasPowerSupplyOutputOfferedVoltage
                      Gauge,
                  chasPowerSupplyOutputOfferedWattage
                      Gauge,
                  chasPowerSupplyOutputWarnings
                      Counter,
                  chasPowerSupplyOutputFailures
                      Counter
              }

          chasPowerSupplyOutputIndex OBJECT-TYPE
              SYNTAX INTEGER
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "An index value that uniquely identifies an output
                      for the power supply."
              ::= { chasPowerSupplyOutputEntry 1 }

          chasPowerSupplyOutputStatus OBJECT-TYPE
              SYNTAX INTEGER {
                  unknown(1),
                  bad(2),
                  warning(3),
                  good(4) }
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "Actual status of the power supply:

                      - unknown(1)     status not known
                      - bad(2)         unable to supply power due to
                      failure
                      - warning(3)     supplying power but marginally
                      - good(4)        supplying power

                      It is an implementation specific matter whether
                      the agent keeps entries with status unknown(1) in
                      the table.  If unknown(1), offered values and
                      counters are meaningless."
                          ::= { chasPowerSupplyOutputEntry 2 }






          Expires November, 1993                               [Page 31]




          Internet Draft           Chassis MIB              May 28, 1993


                      chasPowerSupplyOutputNominalVoltage OBJECT-TYPE
                          SYNTAX Gauge
                          ACCESS read-only
                          STATUS mandatory
                          DESCRIPTION
                                  "In hundredths of a volt, the voltage
                                  the output is supposed to supply, such
                                  as -5, +5, +12, -15, etc."
                         ::= { chasPowerSupplyOutputEntry 3 }

                     chasPowerSupplyOutputOfferedVoltage OBJECT-TYPE
                         SYNTAX Gauge
                         ACCESS read-only
                         STATUS mandatory
                         DESCRIPTION
                                 "In hundredths of a volt, the voltage
                                 actually offered by the output.  If
                                 chasPowerSupplyOutputStatus is good(4),
                                 the value 0 means offered voltage is
                                 not available."
                        ::= { chasPowerSupplyOutputEntry 4 }

                    chasPowerSupplyOutputOfferedWattage OBJECT-TYPE
                        SYNTAX Gauge
                        ACCESS read-only
                        STATUS mandatory
                        DESCRIPTION
                                "In hundredths of a watt, the wattage
                                actually offered by the output.  If
                                chasPowerSupplyOutputStatus is good(4),
                                the value 0 means offered wattage is not
                                available."
                       ::= { chasPowerSupplyOutputEntry 5 }

                   chasPowerSupplyOutputWarnings OBJECT-TYPE
                       SYNTAX Counter
                       ACCESS read-only
                       STATUS mandatory
                       DESCRIPTION
                               "The number of times
                               chasPowerSupplyOutputStatus has gone to
                               warning(3)."
                      ::= { chasPowerSupplyOutputEntry 6 }

                  chasPowerSupplyOutputFailures OBJECT-TYPE





          Expires November, 1993                               [Page 32]




          Internet Draft           Chassis MIB              May 28, 1993


                      SYNTAX Counter
                      ACCESS read-only
                      STATUS mandatory
                      DESCRIPTION
                              "The number of times
                              chasPowerSupplyOutputStatus has gone to
                              bad(2)."
                     ::= { chasPowerSupplyOutputEntry 7 }










































          Expires November, 1993                               [Page 33]




          Internet Draft           Chassis MIB              May 28, 1993


                 -- the chasEnviron (Environment) group
                 -- Implementation of this group is optional.

                 -- the Environment table.

                 chasEnvironTable OBJECT-TYPE
                     SYNTAX SEQUENCE OF ChasEnvironEntry
                     ACCESS not-accessible
                     STATUS mandatory
                     DESCRIPTION
                             "A list of environmental entries, one for
                             each environmental sensor in the chassis."
                    ::= { chasEnviron 1 }

                chasEnvironEntry OBJECT-TYPE
                    SYNTAX ChasEnvironEntry
                    ACCESS not-accessible
                    STATUS mandatory
                    DESCRIPTION
                            "Values for a environmental sensor."
                   INDEX { chasEnvironIndex }
                   ::= { chasEnvironTable 1 }

               ChasEnvironEntry ::= SEQUENCE {
                       chasEnvironSensor
                       AutonomousType,
                   chasEnvironStatus
                       INTEGER,
                   chasEnvironWarnings
                       Counter,
                   chasEnvironFailures
                       Counter,
                   chasEnvironLocationType
                       INTEGER,
                   chasEnvironLocationIndex
                       INTEGER
                   }

               chasEnvironSensor OBJECT-TYPE
                   SYNTAX AutonomousType
                   ACCESS read-only
                   STATUS mandatory
                   DESCRIPTION
                           "The identification of an environmental
                           sensor.  Other AutonomousType values may be





          Expires November, 1993                               [Page 34]




          Internet Draft           Chassis MIB              May 28, 1993


                           defined elsewhere, in association with
                           specific protocols.  However, this document
                           assigns those of known interest as of this
                           writing."
                  ::= { chasEnvironEntry 1 }

              chasEnvironStatus OBJECT-TYPE
                  SYNTAX INTEGER {
                      unknown(1),
                      bad(2),
                      warning(3),
                      good(4) }
                  ACCESS read-only
                  STATUS mandatory
                  DESCRIPTION
                          "Actual status indicated by the sensor.  It is
                          an implementation specific matter whether the
                          agent keeps entries with status unknown(1) in
                          the table.  If unknown(1), counters are
                          meaningless."
                 ::= { chasEnvironEntry 2 }

             chasEnvironWarnings OBJECT-TYPE
                 SYNTAX Counter
                 ACCESS read-only
                 STATUS mandatory
                 DESCRIPTION
                         "The number of times chasEnvironStatus has gone
                         to warning(3)."
                ::= { chasEnvironEntry 3 }

            chasEnvironFailures OBJECT-TYPE
                SYNTAX Counter
                ACCESS read-only
                STATUS mandatory
                DESCRIPTION
                        "The number of times chasEnvironStatus has gone
                        to bad(2)."
               ::= { chasEnvironEntry 4 }

           chasEnvironLocationType OBJECT-TYPE
               SYNTAX INTEGER
               ACCESS read-only
               STATUS mandatory
               DESCRIPTION





          Expires November, 1993                               [Page 35]




          Internet Draft           Chassis MIB              May 28, 1993


                       "Defines the actual type of physical location
                       that this environmental sensor occupies."
              ::= { chasEnvironEntry 5 }

          chasEnvironLocationIndex OBJECT-TYPE
              SYNTAX INTEGER
              ACCESS read-only
              STATUS mandatory
              DESCRIPTION
                      "This defines the particular instance of a
                      physical location type which this environmental
                      sensor occupies."
              ::= { chasEnvironEntry 6 }
          END




































          Expires November, 1993                               [Page 36]




          Internet Draft           Chassis MIB              May 28, 1993


          5.  Acknowledgements

          The Chassis MIB represents the combined work of the IETF
          Chassis MIB Working Group, with particular, substantial
          authorship contributions from:

                  Manu Kaycee
                  Ungermann-Bass, Inc
                  kaycee@andr.UB.com

                  Keith McCloghrie
                  Hughes LAN Systems, Inc.
                  kzm@hls.com

                  Bob Stewart
                  Xyplex, Inc
                  rlstewart@eng.xyplex.com

                  Pete Wilson
                  3Com Corporation
                  {3COM/PDD/PeteW}@pdd.3mail.3com.com

                  Donna McMaster
                  SynOptics Inc
                  mcmaster@synoptics.com

























          Expires November, 1993                               [Page 37]




          Internet Draft           Chassis MIB              May 28, 1993


          6.  Issues

          The following is a list of currently on resolved issues that
          need to be addressed:

                  - Usage of physical location type and location instance
                    to identify modules.

                  - How to best handle power supplies.  One view is to think of
                    them in terms of resources the other is to just consider
                    them as instances of physcial modules.

                  - Does this model answer all of our needs.  For example does the
                    relationship between resource and entities need to be many to
                    many?

                  - Do we need to provide for multiple MIB views per entity.  This
                    could be accomplished by another table indexed by MIB view
                    and entity ID.


          7.  References

          [1]  M.T. Rose and K. McCloghrie, Structure and Identification
               of Management Information for TCP/IP-based internets,
               Internet Working Group Request for Comments 1155.
               Network Information Center, SRI International, Menlo
               Park, California, (May, 1990).

          [2]  J.D. Case, M.S. Fedor, M.L. Schoffstall, and J.R. Davin,
               Simple Network Management Protocol, Internet Working
               Group Request for Comments 1157.  Network Information
               Center, SRI International, Menlo Park, California, (May,
               1990).

          [3]  K. McCloghrie and M.T. Rose (editors), Management
               Information Base for Network Management of TCP/IP-based
               internets: MIB-II, Internet Working Group Request for
               Comments 1213.  Network Information Center, SRI
               International, Menlo Park, California, (March, 1991).

          [4]  Information processing systems - Open Systems
               Interconnection - Specification of Abstract Syntax
               Notation One (ASN.1), International Organization for
               Standardization.  International Standard 8824, (December,





          Expires November, 1993                               [Page 38]




          Internet Draft           Chassis MIB              May 28, 1993


               1987).

          [5]  Information processing systems - Open Systems
               Interconnection - Specification of Basic Encoding Rules
               for Abstract Notation One (ASN.1), International
               Organization for Standardization.  International Standard
               8825, (December, 1987).

          [6]  M.T. Rose, K. McCloghrie (editors), Concise MIB
               Definitions, Internet Working Group Request for Comments
               1212.  Network Information Center, SRI International,
               Menlo Park, California, (March, 1991).

          [7]  K. McCloghrie, J. Davin, J. Galvin, Definitions of
               Managed Objects for Adminstration of SNMP Parties
               Internet Working Group Request for Comments 1353.
               Network Information Center, SRI International, Menlo
               Park, California, (July, 1992).
































          Expires November, 1993                               [Page 39]




          Internet Draft           Chassis MIB              May 28, 1993


          8.  Security Considerations

          Security issues are not discussed in this memo.


          9.  Author's Address

               David Arneson (Editor)
               Cabletron Systems, Inc.

               Phone: (603)332-9400
               Email: arneson@ctron.com






































          Expires November, 1993                               [Page 40]




          Internet Draft           Chassis MIB              May 28, 1993


          Table of Contents


          1 Introduction ..........................................    2
          2 The Network Management Framework ......................    2
          2.1 Object Definitions ..................................    2
          3 Overview ..............................................    3
          3.1 What is a Chassis ...................................    3
          4 Definitions ...........................................    5
          5 Acknowledgements ......................................   37
          6 Issues ................................................   38
          7 References ............................................   38
          8 Security Considerations ...............................   40
          9 Author's Address ......................................   40




































          Expires November, 1993                               [Page 41]
