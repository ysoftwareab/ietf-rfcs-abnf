tag = value

participant-id = 12

join = { name = "Alice" }

to = 2, 5, 8, 58

msg = "Where are we going for dinner"

join = { name = "Alice" }  
msg = { to = 2, 5, 8, 58  
msg = "Where are we going for dinner"
font = 'Arial' }  

as-kw          = %x61.73                   ; as in lowercase
ascii-kw       = %x61.73.63.69.69          ; ascii in lowercase
b              = %x62 
bool-kw        = %x62.6F.6F.6C             ; bool in lowercase
bytes-kw       = %x62.79.74.65.73          ; bytes in lowercase
combi-kw       = %x63.6F.6D.62.69          ; combi in lowercase
const-kw       = %x63.6F.6E.73.74          ; const in lowercase
d-upper        = %x44                      ; Uppercase D
d              = %x64 
date-kw        = %x64.61.74.65             ; date in lowercase
double-kw      = %x64.6F.75.62.6C.65       ; double in lowercase
embedded-kw    = %x65.6D.62.65.64.64.65.64 ; embedded in lowercase
endmodule-kw   = %x65.6E.64.6D.6F.64.75.6C.65 
                                         ; endmodule in lowercase
extends-kw     = %x65.78.74.65.6E.64.73    ; extends in lowercase
f              = %x66 
float-kw       = %x66.6C.6F.61.74          ; float in lowercase
import-kw      = %x69.6D.70.6F.72.74       ; import in lowercase
int-kw         = %x69.6E.74                ; int in lowercase
into-kw        = %x69.6E.74.6F             ; into in lowercase
ipv4-kw        = %x69.70.76.34             ; ipv4 in lowercase
ipv6-kw        = %x69.70.76.36             ; ipv6 in lowercase
lumas-kw       = %x6C.75.6D.61.73          ; lumas in lowercase
module-kw      = %x6D.6F.64.75.6C.65       ; module in lowercase
n              = %x6E 
oid-kw         = %x6F.69.64                ; oid in lowercase
plug-kw        = %x70.6C.75.67             ; plug in lowercase
pluggable-kw   = %x70.6C.75.67.67.61.62.6C.65 
                                         ; pluggable in lowercase
plugin-kw      = %x70.6C.75.67.69.6E       ; plugin in lowercase
r              = %x72 
s-upper        = %x53                      ; Uppercase S
s              = %x73 
single-kw      = %x73.69.6E.67.6C.65       ; single in lowercase
struct-kw      = %x73.74.72.75.63.74       ; struct in lowercase
t              = %x74 
time-kw        = %x74.69.6D.65             ; time in lowercase
unicode-kw     = %x75.6E.69.63.6F.64.65    ; unicode in lowercase
union-kw       = %x75.6E.69.6F.6E          ; union in lowercase
unquoted-ascii-kw = %x75.6E.71.75.6F.74.65.64.2D.61.73.63.69.69 
                                         ; unquoted-ascii in lowercase
void-kw        = %x76.6F.69.64             ; void in lowercase
w              = %x77 
w-upper        = %x57                      ; Uppercase W
x              = %x78 
z              = %x7A 

lumas-parameter  =  simple-param / compound-param /
                          reference-param

simple-param = simple-type WS name [ OWS cardinality ] 
                                         [ WS as-kw WS explicit-tag ]
                                         [ WS plugin-kw ] OWS ";" OWS

simple-type = void-kw / bool-kw / integer-type / float-type / 
                    ipv4-kw / ipv6-kw / date-kw / time-kw / oid-kw / 
                    string-type / const-type / bytes-type /
                    embedded-type

integer-type  =  int-kw OWS "<" OWS int-constraint OWS ">"

float-type  =  float-kw OWS [ "<" OWS float-constraint OWS ">" ]

string-type  =  ( ascii-kw / unquoted-ascii-kw / unicode-kw ) 
                      [ OWS "<" OWS string-constraint OWS ">" ]

const-type = const-kw OWS "<" first-safe-char *( safe-char ) ">"
                       ; See the section 'Notes on Comments' below

bytes-type = bytes-kw [ OWS "<" OWS length-constraint OWS ">" ]

embedded-type = embedded-kw [OWS "<" OWS embed-constraint OWS ">"]

int-constraint = min-int-constraint OWS ".." OWS max-int-constraint 
                             [ OWS use-leading-zero-marker ]
min-int-constraint  =  ["-"] pos-number
max-int-constraint  =  ["-"] pos-number
use-leading-zero-marker = z   ; lower case z

float-constraint = single-kw / double-kw 

string-constraint = [ length-constraint ] [ OWS pattern-constraint ]
embed-constraint = [ length-constraint ] 
                                        [ OWS embedded-module-constraint ]
embedded-module-constraint = "(" OWS module-name OWS ")"

length-constraint = 
                [ min-len-constraint OWS ".." OWS ] max-len-constraint
min-len-constraint      =  pos-number
max-len-constraint      =  pos-number  /  unlimited-length-token
unlimited-length-token  =  "*"

pos-number = 1*DIGIT         ; Decimal number
                   / "0"x 1*HEXDIG ; Hex number
                   / 1*DIGIT b     ; Specifies number of binary bits

pattern-constraint = "/" sub-pattern *( "|" sub-pattern ) "/"
sub-pattern = *pattern-element
pattern-element = pattern-char [ quantifier ]
pattern-char = %x20-29 / %x2C-2E / %x30-3E / %x40-5A
                         / %x5D-7A / %x7D-FF  ;not \/|[?*+{
                     / escaped-char / special-char / character-class
escaped-char = "\\"     ; Matches \
                   / "\/"     ; Matches /
                   / "\|"     ; Matches |
                   / "\["     ; Matches [
                   / "\?"     ; Matches ?
                   / "\*"     ; Matches *
                   / "\+"     ; Matches +
                   / "\{"     ; Matches {
                   / "\."     ; Matches .
special-char = "\" r    ; Matches the return character
                   / "\" n    ; Matches the new line character
                   / "\" t    ; Matches the tab character
                   / "\" f    ; Matches the form feed character
                   / "\" s    ; Matches white space [ \t\r\n\f]
                   / "\" d    ; Matches any digit [0-9]
                   / "\" w    ; Matches any word character [a-zA-Z_0-9]
                   / "\" s-upper ; \S Matches anything not matched by \s
                   / "\" d-upper ; \D Matches anything not matched by \d
                   / "\" w-upper ; \W Matches anything not matched by \w
                   / "."      ; Matches any character
character-class = matching-character-class / inverse-character-class
matching-character-class = "[" *(class-char / class-range) "]"
                   ; For a successful match, the character in the string 
                   ; being matched must be one of the characters 
                   ; specified in the matching-character-class.
inverse-character-class = "[^" *(class-char / class-range) "]"
                   ; For a successful match, the character in the string 
                   ; being matched must NOT be one of the characters 
                   ; specified in the inverse-character-class.

class-char = class-single-char / class-escaped-char 
                   / escaped-char / special-char 
class-single-char = %x20-2C / %x2E-5B / %x5E-FF ; not - ] \
class-escaped-char = 
                   "\-"       ; Matches -
                   / "\]"     ; Matches ]
                   ; /|[?*+{. need not be escaped within character-class
class-range = first-range-char "-" last-range-char
                   ; The class-range matches all character that have 
                   ; an ASCII value greater or equal to that of 
                   ; first-range-char and less than or equal to 
                   ; last-range-char.
first-range-char = class-single-char / class-escaped-char 
                   / escaped-char
last-range-char = class-single-char / class-escaped-char 
                   / escaped-char

quantifier = "?" / "*" / "+" 
                   / "{" quant-min-occurs [ "," [ quant-max-occurs ] ] "}"
                   ; The absence of a quantifier indicates once and only 
                   ; once
quant-min-occurs = 1*DIGIT
quant-max-occurs = 1*DIGIT

name  =  ALPHA  *(  ALPHA / DIGIT  /  "-"  /  "_"  )

cardinality = "[" ( cardinality-range / "?" / "*" / "+" ) "]"
                      ; [?] short hand for [0..1]
                      ; [*] short hand for [0..*]
                      ; [+] short hand for [1..*]
cardinality-range = [ min-occurrences ".." ] max-occurrences
min-occurrences  =  1*DIGIT
max-occurrences  =  1*DIGIT / unbounded-token
unbounded-token  =  "*"

explicit-tag = [ "?" ] tag  ; tag defined in common definitions

reference-param = reference-name WS name [ OWS cardinality ] 
                                         [ WS as-kw WS explicit-tag ]
                                         [ WS plugin-kw ] OWS ";" OWS
reference-name = [ module-name "::" ] name

compound-param = struct-param / union-param / combined-param

struct-param = struct-kw WS name [ OWS cardinality ] 
                                        [ WS as-kw WS explicit-tag ] 
                                        [ WS pluggable-kw ]
                                        [ WS plugin-kw ] 
                                WS "{" struct-body "}" OWS ";" OWS

struct-body = *( untagged-lumas-parameter )
                    *( lumas-parameter ) 
                    *( struct-extension )

untagged-lumas-parameter  =  untagged-simple-param  / 
                                      untagged-compound-param /
                                      untagged-reference-param

untagged-simple-param = simple-type WS name [ OWS cardinality ] 
                                             WS as-kw WS "?" OWS ";" OWS

untagged-compound-param = untagged-struct-param / 
                                     untagged-union-param /
                                     untagged-combined-param

untagged-struct-param = 
                           struct-kw WS name [ OWS cardinality ] 
                                     WS as-kw WS "?"  
                                     [ WS pluggable-kw ]
                                     WS "{" struct-body "}" OWS ";" OWS

untagged-union-param = union-kw WS name [ OWS cardinality ] 
                                     WS as-kw WS "?"
                                     [ WS pluggable-kw ]
                                     WS "{" union-body  "}" OWS ";" OWS

untagged-combined-param = 
                              combi-kw WS name [ OWS cardinality ] 
                                     WS as-kw WS "?"
                                     WS "{" combined-body  "}" OWS ";" OWS

untagged-reference-param = reference-name WS name [ OWS cardinality ] 
                                         OWS ";" OWS

struct-extension = "[" OWS 1*( lumas-parameter ) "]" OWS

union-param = union-kw name [ OWS cardinality ] 
                                        [ WS as-kw WS explicit-tag ]
                                        [ WS pluggable-kw ]
                                        [ WS plugin-kw ]
                                WS "{" union-body "}" OWS ";" OWS

select = 12

select = *

union-body = [ integer-type WS name WS as-kw WS "?" OWS ";" OWS ]
                   *( singular-lumas-parameter ) 
                   *( union-extension )
      

singular-lumas-parameter  =  singular-simple-param  / 
                                   singular-compound-param /
                                   singular-reference-param

singular-simple-param = simple-type WS name 
                                        [ WS as-kw WS explicit-tag ] 
                                        [ WS plugin-kw ] OWS ";" OWS

singular-compound-param = singular-struct-param / 
                                singular-union-param /
                                singular-combined-param

singular-struct-param = struct-kw WS name [ WS as-kw WS explicit-tag ]
                                                [ WS pluggable-kw ]
                                                [ WS plugin-kw ] 
                                OWS "{" struct-body "}" OWS  ";" OWS

singular-union-param = union-kw WS name [ WS as-kw WS explicit-tag ] 
                                              [ WS pluggable-kw ]
                                              [ WS plugin-kw ]
                                OWS "{" union-body "}" OWS ";" OWS

singular-combined-param = combi-kw WS name 
                                             [ WS as-kw WS explicit-tag ] 
                                             [ WS plugin-kw ]
                                OWS "{" combined-body "}" OWS ";" OWS

singular-reference-param = reference-name WS name 
                                         [ WS as-kw WS explicit-tag ]
                                         [ WS plugin-kw ] OWS ";" OWS

union-extension = "[" OWS 1*( singular-lumas-parameter ) "]" OWS

combined-param = combi-kw name [ OWS cardinality ] 
                                     [ WS as-kw WS explicit-tag ]
                                     [ WS plugin-kw ]
                                WS "{" combined-body "}" OWS ";" OWS

combined-body = *( combined-simple-type WS name ";" )

combined-simple-type = integer-type / const-type / 
                       unquoted-ascii-kw OWS "<" 1*DIGIT ">"

referenced-lumas-parameter  =  referenced-simple-param / 
                                   referenced-compound-param /
                                   referenced-reference-param

referenced-simple-param = simple-type WS name OWS ";" OWS

referenced-compound-param = referenced-struct-param / 
                                 referenced-union-param /
                                 referenced-combined-param

referenced-struct-param = struct-kw WS name [ WS pluggable-kw ]
                                OWS "{" struct-body "}" OWS ";" OWS

referenced-union-param = union-kw WS name [ WS pluggable-kw ]
                                OWS "{" union-body "}" OWS ";" OWS

referenced-combined-param = combi-kw WS name
                                OWS "{" combined-body "}" OWS ";" OWS

referenced-reference-param = reference-name WS name OWS ";" OWS

external-extension = 
                       plug-kw WS
                           ( external-struct-extension / 
                             external-union-extension )
                       WS into-kw WS into-name
                             *( OWS COMMA OWS into-name ) OWS ";" OWS
into-name = [ module-name "::" ] hierarchical-name
hierarchical-name = *( name "." ) name

external-struct-extension = 1*lumas-parameter
external-union-extension = 1*singular-lumas-parameter
      

lumas-directives =
            [ lumas-kw WS module-kw WS module-name OWS ";" OWS ]
            [ extends-kw WS module-name [ WS as-kw WS alias ] OWS ";" OWS ]
            *( import-kw WS module-name [ WS as-kw WS alias ] OWS ";" OWS )

module-name = [ "+" ] name *( "." name )
alias = name
      

lumas-definition  =  OWS lumas-directives
                              *external-extension
                              *referenced-lumas-parameter
                              [ OWS endmodule-kw OWS ";" ]
                              OWS

tag  =  value

tag  =  value, value, value

lumas-text-message  = (struct-body / union-body) OWS

struct-body = OWS (
                    struct-untagged-set
                    / struct-tagged-set
                    / (struct-untagged-set  WS  struct-tagged-set) )

struct-untagged-param = value *( COMMA value )
struct-untagged-set = struct-untagged-param *(WS struct-untagged-param)

struct-tagged-param = tag              ; For a void parameter
                      / (tag EQUAL value *( COMMA  value ))
struct-tagged-set = struct-tagged-param *(WS struct-tagged-param)

union-body =  OWS ( integer-value
                         / tag                   ; For a void parameter
                         / ( tag EQUAL value ) )

value = simple-value / compound-value

simple-value = bool-value / integer-value / float-value / 
                     ipv4-value / ipv6-value /   
                     date-value / time-value  / oid-value /
                     ascii-value / unquoted-ascii-value / unicode-value /
                     const-value / bytes-value / embedded-value

bool-value = True-kw / False-kw / T / F

integer-value = [ "-" ] 1*DIGIT
float-value = float-number  
                    / NaN-kw       ; IEEE 754 Not a Number
                    / INF-kw       ; Positive infinity
                    / "-" INF-kw   ; Negative infinity
                    ; Note that "-0" is included in float-number
float-number   = float-mantissa [ (e/E) float-exponent ]
float-mantissa = ["-"] 1*DIGIT ["." 1*DIGIT]
float-exponent = ["-"/"+"] 1*DIGIT

True-kw        = %x54.72.75.65      ; 'True'
False-kw       = %x46.61.6C.73.65   ; 'False'
T              = %x54               ; 'T'
F              = %x46               ; 'F'
NaN-kw         = %x4E.61.4E         ; 'NaN'
INF-kw         = %x49.4E.46         ; 'INF'
E              = %x45               ; 'E'
e              = %x65               ' 'e'

oid-value = 1*DIGIT *( "~" 1*DIGIT )    

ipv4-value = 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT

ipv6-value = hexseq / hexseq "::" [ hexseq ] / "::" [ hexseq ]
hexseq         =  hex4 *( ":" hex4)
hex4           =  1*4HEXDIG

date-value = date-year "-" date-month "-" date-day-of-month
date-year = 4DIGIT            ; e.g. 2002
date-month = 2DIGIT           ; With leading zeros, 01 to 12
date-day-of-month = 2DIGIT    ; With leading zeros, 01 to 31

time-value = time-hours ":" time-minutes [ ":" time-seconds ]
time-hours = 2DIGIT         ; With leading zeros, e.g. 00 to 23
time-minutes = 2DIGIT       ; With leading zeros, e.g. 00 to 59
time-seconds = 2DIGIT       ; With leading zeros, e.g. 00 to 59

unquoted-ascii-value =  first-safe-char *( safe-char )
                       ; See the section 'Notes on Comments' below

ascii-value = 
           "'" *( %x00-26 / %x28-5B / %x5D-7F / "\\" / "\'" ) "'"

unicode-value = DQUOTE
                 *( %x00-21 / %x23-5B / %x5D-FF / "\\" / "\" DQUOTE ) 
                  DQUOTE
                             ; DQUOTE defined in [ABNF]

bytes-value = "[" OWSNC base64-line *( WSNC base64-line ) OWSNC "]"
base64-line = 0*18( 4BASE64-CHAR ) 
                     ( 
                     ( 4BASE64-CHAR ) /
                     ( 3BASE64-CHAR "=" ) /
                     ( 2BASE64-CHAR "=" "=" )
                     )
BASE64-CHAR = ALPHA / DIGIT / "+" / "/"

const-value = first-safe-char *( safe-char )
                       ; See the section 'Notes on Comments' below

embedded-value = "(" *(%x00-FF) ")" 

compound-value = struct-value / union-value / combined-value

struct-value = "{" struct-body "}" 

union-value = union-body

combined-value = first-safe-char *( safe-char )

EQUAL = OWS "=" OWS

delimited-lumas-text-message = lumas-text-message ( "}" / ")" )

my-bool = True

my-int = 5643

my-float = 102.4519

my-ipv4 = 192.0.2.1

my-ipv6 = 2001:DB8::1
my-date = 2002-02-28

my-time = 12:00:00

my-oid = 1~2~840~113549~2~5

my-ascii = 'Lumas'

my-unquoted-ascii = Lumas

my-unicode = "Lumas"

my-const = Lumas

my-bytes = [ 01AF3C== ]

my-embedded = ( my-other-int=5 single-closing-bracket-text=')' )

my-struct = { 5434 All time=98787654654 }

my-union = 5434

my-union = Switch

my-union = Volume = 11

tag = first-tag-safe-char 0*62( safe-char )
                         ; Tag MUST NOT exceed 63 characters in length

first-tag-safe-char = %x21 / 
                  ; Not "
                  %x23-26 / 
                  ; Not ' ( )
                  %x28-2B /
                  ; Not , -
                  %x2E-2F /
                  ; Not 0 1 2 3 4 5 6 7 8 9
                  %x3A-3C / 
                  ; Not =
                  %x3E-5A /
                  ; Not [
                  %x5C-7A /
                  ; Not {
                  %x7C /
                  ; Not }
                  %x7E-7F
                  ; Visible characters except = , " ' { } ( ) [ -
                  ; and digits (tags must not get confused with integers)

first-safe-char = first-tag-safe-char / DIGIT / "-"

safe-char = first-safe-char / DQUOTE / "'" / "{" / "(" / "["
                        ; Not = } ) ,

WS = 1*( comment / SP / HTAB / CR / LF )  
                                  ; HTAB, CR, LF defined in [ABNF]
OWS = [ WS ]                ; Optional white space

WSNC = 1*( SP / HTAB / CR / LF )    ; Whitespace - no comment
OWSNC = [ WSNC ]            ; Optional white space - no comment

COMMA = OWS "," OWS

comment = c-comment / cpp-comment / narrative-comment
c-comment = "/*" <any except */> (nested-end / hard-end )
nested-end = "*/"
hard-end = "**/"
cpp-comment = "//" *( HTAB / %x20-7F ) ( CR / LF )
narrative-comment = "/**" <any except "lumas*/"> "lumas*/"
                ; A comment is treated as a single space during parsing
ascii-value = /*This-is-a-comment*/This-is-the-value

ascii-value = and-//this-is-part-of-the-value

