xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
xmlns="urn:ietf:params:netconf:capability:notification:1.0">
statement = keyword [argument] (";" / "{" *statement "}")

xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
string = *char
char = %x9 / %xA / %xD / %x20-DFFF / %xE000-FFFD /
            %x10000-10FFFF

date-fullyear   = 4DIGIT
date-month      = 2DIGIT  ; 01-12
date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31
time-hour       = 2DIGIT  ; 00-23
time-minute     = 2DIGIT  ; 00-59
time-second     = 2DIGIT  ; 00-58, 00-59, 00-60
time-secfrac    = "." 1*DIGIT
time-numoffset  = ("+" / "-") time-hour ":" time-minute
time-offset     = "Z" / time-numoffset

partial-time    = time-hour ":" time-minute ":" time-second
                              [time-secfrac]
full-date       = date-fullyear "-" date-month "-" date-mday
full-time       = partial-time time-offset

date-time       = full-date "T" full-time';
module                 = module-keyword sep identifier-str optsep
                         "{" stmtsep
                             module-header-stmts
                             linkage-stmts
                             meta-stmts
                             revision-stmts
                             body-stmts
                         "}" optsep

submodule              = submodule-keyword sep identifier-str optsep
                         "{" stmtsep
                             submodule-header-stmts
                             linkage-stmts
                             submodule-meta-stmts
                             revision-stmts
                             body-stmts
                         "}" optsep


module-header-stmts    = ;; these stmts can appear in any order
                         [yang-version-stmt stmtsep]
                          namespace-stmt stmtsep
                          prefix-stmt stmtsep

submodule-header-stmts = ;; these stmts can appear in any order
                         [yang-version-stmt stmtsep]
                          belongs-to-stmt stmtsep

meta-stmts             = ;; these stmts can appear in any order
                         [organization-stmt stmtsep]
                         [contact-stmt stmtsep]
                         [description-stmt stmtsep]
                         [reference-stmt stmtsep]

submodule-meta-stmts   = ;; these stmts can appear in any order
                         [organization-stmt stmtsep]
                         [contact-stmt stmtsep]
                         [description-stmt stmtsep]
                         [reference-stmt stmtsep]

linkage-stmts          = ;; these stmts can appear in any order
                         *(import-stmt stmtsep)
                         *(include-stmt stmtsep)

revision-stmts         = *(revision-stmt stmtsep)

body-stmts             = *((extension-stmt /
                            typedef-stmt /
                            grouping-stmt /
                            data-def-stmt /
                            rpc-stmt /
                            notification-stmt) stmtsep)

data-def-stmt          = container-stmt /
                         leaf-stmt /
                         leaf-list-stmt /
                         list-stmt /
                         choice-stmt /
                         anyxml-stmt /
                         uses-stmt /
                         augment-stmt

case-data-def-stmt     = container-stmt /
                         leaf-stmt /
                         leaf-list-stmt /
                         list-stmt /
                         anyxml-stmt /
                         uses-stmt /
                         augment-stmt

yang-version-stmt      = yang-version-keyword sep "1" optsep stmtend

import-stmt            = import-keyword sep identifier-str optsep
                         "{" stmtsep
                             prefix-stmt stmtsep
                         "}"

include-stmt           = include-keyword sep identifier-str optsep
                         stmtend

namespace-stmt         = namespace-keyword sep uri-str optsep stmtend

uri-str                = < a string which matches the rule
                           URI in RFC 3986 >
prefix-stmt            = prefix-keyword sep prefix-str optsep stmtend

belongs-to-stmt        = belongs-to-keyword sep identifier-str
                         optsep stmtend

organization-stmt      = organization-keyword sep string
                         optsep stmtend

contact-stmt           = contact-keyword sep string optsep stmtend

description-stmt       = description-keyword sep string optsep
                         stmtend

reference-stmt         = reference-keyword sep string optsep stmtend

units-stmt             = units-keyword sep string optsep stmtend

revision-stmt          = revision-keyword sep date-expr-str optsep
                         (";" /
                          "{" stmtsep
                              [description-stmt stmtsep]
                          "}")

extension-stmt         = extension-keyword sep identifier-str optsep
                         (";" /
                          "{" stmtsep
                             ;; these stmts can appear in any order
                             [argument-stmt stmtsep]
                             [status-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                          "}")

argument-stmt          = argument-keyword sep identifier-str optsep
                         (";" /
                          "{" stmtsep
                              [yin-element-stmt stmtsep]
                          "}")

yin-element-stmt       = yin-element-keyword sep yin-element-arg-str
                         stmtend

yin-element-arg-str    = < a string which matches the rule
                           yin-element-arg >

yin-element-arg        = true-keyword / false-keyword

typedef-stmt           = typedef-keyword sep identifier-str optsep
                         "{" stmtsep
                             ;; these stmts can appear in any order
                             type-stmt stmtsep
                             [units-stmt stmtsep]
                             [default-stmt stmtsep]
                             [status-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                          "}"

type-stmt              = type-keyword sep identifier-ref-str optsep
                         (";" /
                          "{" stmtsep
                              ( numerical-restrictions /
                                string-restrictions /
                                enum-specification /
                                keyref-specification /
                                bits-specification /
                                union-specification )
                              stmtsep
                          "}")

numerical-restrictions = range-stmt stmtsep

range-stmt             = range-keyword sep range-expr-str optsep
                         (";" /
                          "{" stmtsep
                              ;; these stmts can appear in any order
                              [error-message-stmt stmtsep]
                              [error-app-tag-stmt stmtsep]
                              [description-stmt stmtsep]
                              [reference-stmt stmtsep]
                           "}")

string-restrictions    = ;; these stmts can appear in any order
                         [length-stmt stmtsep]
                         [pattern-stmt stmtsep]

length-stmt            = length-keyword sep length-expr-str optsep
                         (";" /
                          "{" stmtsep
                              ;; these stmts can appear in any order
                              [error-message-stmt stmtsep]
                              [error-app-tag-stmt stmtsep]
                              [description-stmt stmtsep]
                              [reference-stmt stmtsep]
                           "}")
pattern-stmt           = pattern-keyword sep string optsep
                         (";" /
                          "{" stmtsep
                              ;; these stmts can appear in any order
                              [error-message-stmt stmtsep]
                              [error-app-tag-stmt stmtsep]
                              [description-stmt stmtsep]
                              [reference-stmt stmtsep]
                           "}")

default-stmt           = default-keyword sep string stmtend

enum-specification     = 1*(enum-stmt stmtsep)

enum-stmt              = enum-keyword sep identifier-str optsep
                         (";" /
                          "{" stmtsep
                              ;; these stmts can appear in any order
                              [value-stmt stmtsep]
                              [status-stmt stmtsep]
                              [description-stmt stmtsep]
                              [reference-stmt stmtsep]
                           "}")

keyref-specification   = path-stmt stmtsep

path-stmt              = path-keyword sep path-arg-str stmtend

union-specification    = 1*(type-stmt stmtsep)

bits-specification     = 1*(bit-stmt stmtsep)

bit-stmt               = bit-keyword sep identifier-str optsep
                         "{" stmtsep
                             ;; these stmts can appear in any order
                             [position-stmt stmtsep]
                             [status-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                           "}"
                         "}"

position-stmt          = position-keyword sep position-value-str stmtend

position-value-str     = < a string which matches the rule
                           position-value >

position-value         = non-negative-decimal-value
status-stmt            = status-keyword sep status-arg-str stmtend

status-arg-str         = < a string which matches the rule
                           status-arg >

status-arg             = current-keyword /
                         obsolete-keyword /
                         deprecated-keyword


config-stmt            = config-keyword sep
                         config-arg-str stmtend

config-arg-str         = < a string which matches the rule
                           config-arg >

config-arg             = true-keyword / false-keyword

mandatory-stmt         = mandatory-keyword sep
                         mandatory-arg-str stmtend

mandatory-arg-str      = < a string which matches the rule
                           mandatory-arg >

mandatory-arg          = true-keyword / false-keyword

presence-stmt          = presence-keyword sep string stmtend

ordered-by-stmt        = ordered-by-keyword sep
                         ordered-by-arg-str stmtend

ordered-by-arg-str     = < a string which matches the rule
                           ordered-by-arg >

ordered-by-arg         = user-keyword /
                         system-keyword

must-stmt              = must-keyword sep string optsep
                         (";" /
                          "{" stmtsep
                              ;; these stmts can appear in any order
                              [error-message-stmt stmtsep]
                              [error-app-tag-stmt stmtsep]
                              [description-stmt stmtsep]
                              [reference-stmt stmtsep]
                           "}")

error-message-stmt     = error-message-keyword sep string stmtend
error-app-tag-stmt     = error-app-tag-keyword sep string stmtend

min-elements-stmt      = min-elements-keyword sep
                         min-value-str stmtend;

min-value-str          = < a string which matches the rule
                           min-value >

min-value              = non-negative-decimal-value

max-elements-stmt      = max-elements-keyword sep
                         max-value-str stmtend;

max-value-str          = < a string which matches the rule
                           max-value >

max-value              = unbounded-keyword / positive-decimal-value

value-stmt             = value-keyword sep decimal-value stmtend

grouping-stmt          = grouping-keyword sep identifier-str optsep
                         (";" /
                          "{" stmtsep
                             ;; these stmts can appear in any order
                             [status-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                             *((typedef-stmt /
                                grouping-stmt) stmtsep)
                             *(data-def-stmt stmtsep)
                          "}")

container-stmt         = container-keyword sep identifier-str optsep
                         (";" /
                          "{" stmtsep
                             ;; these stmts can appear in any order
                             *(must-stmt stmtsep)
                             [presence-stmt stmtsep]
                             [config-stmt stmtsep]
                             [status-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                             *((typedef-stmt /
                                grouping-stmt) stmtsep)
                             *(data-def-stmt stmtsep)
                          "}")

leaf-stmt              = leaf-keyword sep identifier-str optsep
                         "{" stmtsep
                             ;; these stmts can appear in any order
                             type-stmt stmtsep
                             [units-stmt stmtsep]
                             *(must-stmt stmtsep)
                             [default-stmt stmtsep]
                             [config-stmt stmtsep]
                             [mandatory-stmt stmtsep]
                             [status-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                          "}"

leaf-list-stmt         = leaf-list-keyword sep identifier-str optsep
                         "{" stmtsep
                             ;; these stmts can appear in any order
                             type-stmt stmtsep
                             [units-stmt stmtsep]
                             *(must-stmt stmtsep)
                             [config-stmt stmtsep]
                             [min-elements-stmt stmtsep]
                             [max-elements-stmt stmtsep]
                             [ordered-by-stmt stmtsep]
                             [status-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                          "}"

list-stmt              = list-keyword sep identifier-str optsep
                         "{" stmtsep
                             ;; these stmts can appear in any order
                             *(must-stmt stmtsep)
                             [key-stmt stmtsep]
                             *(unique-stmt stmtsep)
                             [config-stmt stmtsep]
                             [min-elements-stmt stmtsep]
                             [max-elements-stmt stmtsep]
                             [ordered-by-stmt stmtsep]
                             [status-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                             *((typedef-stmt /
                                grouping-stmt) stmtsep)
                             1*(data-def-stmt stmtsep)
                          "}"

key-stmt               = key-keyword sep key-arg-str stmtend
key-arg-str            = < a string which matches the rule
                           key-arg >

key-arg                = 1*(identifier sep)

unique-stmt            = unique-keyword sep unique-arg-str stmtend

unique-arg-str         = < a string which matches the rule
                           unique-arg >

unique-arg             = 1*(descendant-schema-nodeid 1*sp)

choice-stmt            = choice-keyword sep identifier-str optsep
                         (";" /
                          "{" stmtsep
                             ;; these stmts can appear in any order
                             [default-stmt stmtsep]
                             [mandatory-stmt stmtsep]
                             [status-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                             *((short-case-stmt / case-stmt) stmtsep)
                          "}")

short-case-stmt        = container-stmt /
                         leaf-stmt /
                         leaf-list-stmt /
                         list-stmt /
                         anyxml-stmt


case-stmt              = case-keyword sep identifier-str optsep
                         (";" /
                          "{" stmtsep
                             ;; these stmts can appear in any order
                             [status-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                             *(case-data-def-stmt stmtsep)
                          "}")

anyxml-stmt            = anyxml-keyword sep identifier-str optsep
                         (";" /
                          "{" stmtsep
                              ;; these stmts can appear in any order
                              [config-stmt stmtsep]
                              [mandatory-stmt stmtsep]
                              [status-stmt stmtsep]
                              [description-stmt stmtsep]
                              [reference-stmt stmtsep]
                           "}")

uses-stmt              = uses-keyword sep identifier-ref-str optsep
                         (";" /
                          "{" stmtsep
                             ;; these stmts can appear in any order
                             [status-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                             *(refinement-stmt stmtsep)
                          "}")

refinement-stmt        = refine-container-stmt /
                         refine-leaf-stmt /
                         refine-leaf-list-stmt /
                         refine-list-stmt /
                         refine-choice-stmt /
                         refine-anyxml-stmt

refine-leaf-stmt       = leaf-keyword sep identifier-str optsep
                         (";" /
                          "{" stmtsep
                             ;; these stmts can appear in any order
                             *(must-stmt stmtsep)
                             [default-stmt stmtsep]
                             [config-stmt stmtsep]
                             [mandatory-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                          "}")

refine-leaf-list-stmt  = leaf-list-keyword sep identifier-str optsep
                         (";" /
                          "{" stmtsep
                             ;; these stmts can appear in any order
                             *(must-stmt stmtsep)
                             [config-stmt stmtsep]
                             [min-elements-stmt stmtsep]
                             [max-elements-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                          "}")

refine-list-stmt       = list-keyword sep identifier-str optsep
                         (";" /
                          "{" stmtsep
                             ;; these stmts can appear in any order
                             *(must-stmt stmtsep)
                             [config-stmt stmtsep]
                             [min-elements-stmt stmtsep]
                             [max-elements-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                             *(refinement-stmt stmtsep)
                          "}")

refine-choice-stmt     = choice-keyword sep identifier-str optsep
                         (";" /
                          "{" stmtsep
                             ;; these stmts can appear in any order
                             [default-stmt stmtsep]
                             [mandatory-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                             *(refine-case-stmt stmtsep)
                          "}")

refine-case-stmt       = case-keyword sep identifier-str optsep
                        (";" /
                         "{" stmtsep
                             ;; these stmts can appear in any order
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                              *(refinement-stmt stmtsep)
                          "}")


refine-container-stmt  = container-keyword sep identifier-str optsep
                        (";" /
                         "{" stmtsep
                             ;; these stmts can appear in any order
                             *(must-stmt stmtsep)
                             [presence-stmt stmtsep]
                             [config-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                             *(refinement-stmt stmtsep)
                          "}")

refine-anyxml-stmt     = anyxml-keyword sep identifier-str optsep
                        (";" /
                         "{" stmtsep
                             ;; these stmts can appear in any order
                             [config-stmt stmtsep]
                             [mandatory-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                          "}")

unknown-statement      = prefix ":" identifier [sep string] optsep
                         (";" / "{" *unknown-statement "}")

augment-stmt           = augment-keyword sep augment-arg-str optsep
                         "{" stmtsep
                             ;; these stmts can appear in any order
                             [when-stmt stmtsep]
                             [status-stmt stmtsep]
                             [description-stmt stmtsep]
                             [reference-stmt stmtsep]
                             (([input-stmt stmtsep]
                               [output-stmt stmtsep]) /
                               1*((data-def-stmt stmtsep) /
                                  (case-stmt stmtsep)))
                          "}"

augment-arg-str        = < a string which matches the rule
                           augment-arg >

augment-arg            = absolute-schema-nodeid /
                         descendant-schema-nodeid

when-stmt              = when-keyword sep string stmtend

rpc-stmt               = rpc-keyword sep identifier-str optsep
                         (";" /
                          "{" stmtsep
                              ;; these stmts can appear in any order
                              [status-stmt stmtsep]
                              [description-stmt stmtsep]
                              [reference-stmt stmtsep]
                              *((typedef-stmt /
                                 grouping-stmt) stmtsep)
                              [input-stmt stmtsep]
                              [output-stmt stmtsep]
                          "}")

input-stmt             = input-keyword optsep
                         "{" stmtsep
                              ;; these stmts can appear in any order
                             *((typedef-stmt /
                                grouping-stmt) stmtsep)
                             1*(data-def-stmt stmtsep)
                         "}"

output-stmt            = output-keyword optsep
                         "{" stmtsep
                              ;; these stmts can appear in any order
                             *((typedef-stmt /
                                grouping-stmt) stmtsep)
                             1*(data-def-stmt stmtsep)
                         "}"

notification-stmt      = notification-keyword sep identifier-str optsep
                         (";" /
                          "{" stmtsep
                              ;; these stmts can appear in any order
                              [status-stmt stmtsep]
                              [description-stmt stmtsep]
                              [reference-stmt stmtsep]
                              *((typedef-stmt /
                                 grouping-stmt) stmtsep)
                              *(data-def-stmt stmtsep)
                          "}")

range-expr-str         = < a string which matches the rule
                           range-expr >

range-expr             = optsep range-part
                         *(optsep "|" optsep range-part)
                         optsep

range-part             = range-boundary
                         [optsep ".." optsep range-boundary]

range-boundary         = neginf-keyword / posinf-keyword /
                         min-keyword / max-keyword /
                         decimal-value / float-value

length-expr-str        = < a string which matches the rule
                           length-expr >

length-expr            = optsep length-part *(optsep "|"
                         optsep length-part) optsep

length-part            = length-boundary
                         [optsep ".." optsep length-boundary]
length-boundary        = min-keyword / max-keyword /
                         non-negative-decimal-value

date-expr-str          = < a string which matches the rule
                           date-expr >

date-expr              = 4DIGIT "-" 2DIGIT "-" 2DIGIT

schema-nodeid          = absolute-schema-nodeid /
                         relative-schema-nodeid

node-identifier        = [prefix ":"] identifier


instance-identifier    = absolute-instid /
                         relative-instid

absolute-instid        = 1*("/" (node-identifier *predicate))

relative-instid        = descendant-instid /
                         (("." / "..") "/"
                          *relative-instid)

descendant-instid      = node-identifier *predicate
                         absolute-instid
predicate              = "[" *WSP predicate-expr *WSP "]"

predicate-expr         = (node-identifier / ".") *WSP "=" *WSP
                         ((DQUOTE string DQUOTE) /
                          (SQUOTE string SQUOTE))

path-arg-str           = < a string which matches the rule
                           path-arg >

path-arg               = absolute-path-arg /
                         relative-path-arg

absolute-path-arg      = 1*("/" (node-identifier *path-predicate))

relative-path-arg      = descendant-path-arg /
                         (".." "/"
                         *relative-path-arg)

descendant-path-arg    = node-identifier *path-predicate
                         absolute-path-arg

path-predicate         = "[" *WSP path-equality-expr *WSP "]"

path-equality-expr     = node-identifier *WSP "=" *WSP path-key-expr

path-key-expr          = this-variable-keyword "/" rel-path-keyexpr

rel-path-keyexpr       = 1*(".." "/") *(node-identifier "/")
                         node-identifier

anyxml-keyword         = 'anyxml'
argument-keyword       = 'argument'
augment-keyword        = 'augment'
belongs-to-keyword     = 'belongs-to'
bit-keyword            = 'bit'
case-keyword           = 'case'
choice-keyword         = 'choice'
config-keyword         = 'config'
contact-keyword        = 'contact'
container-keyword      = 'container'
default-keyword        = 'default'
description-keyword    = 'description'
enum-keyword           = 'enum'
error-app-tag-keyword  = 'error-app-tag'
error-message-keyword  = 'error-message'
extension-keyword      = 'extension'
grouping-keyword       = 'grouping'
import-keyword         = 'import'
include-keyword        = 'include'
input-keyword          = 'input'
key-keyword            = 'key'
leaf-keyword           = 'leaf'
leaf-list-keyword      = 'leaf-list'
length-keyword         = 'length'
list-keyword           = 'list'
mandatory-keyword      = 'mandatory'
max-elements-keyword   = 'max-elements'
min-elements-keyword   = 'min-elements'
module-keyword         = 'module'
must-keyword           = 'must'
namespace-keyword      = 'namespace'
notification-keyword   = 'notification'
ordered-by-keyword     = 'ordered-by'
organization-keyword   = 'organization'
output-keyword         = 'output'
path-keyword           = 'path'
pattern-keyword        = 'pattern'
position-keyword       = 'position'
prefix-keyword         = 'prefix'
presence-keyword       = 'presence'
range-keyword          = 'range'
reference-keyword      = 'reference'
revision-keyword       = 'revision'
rpc-keyword            = 'rpc'
status-keyword         = 'status'
submodule-keyword      = 'submodule'
type-keyword           = 'type'
typedef-keyword        = 'typedef'
unique-keyword         = 'unique'
units-keyword          = 'units'
uses-keyword           = 'uses'
value-keyword          = 'value'
when-keyword           = 'when'
yang-version-keyword   = 'yang-version'
yin-element-keyword    = 'yin-element'

current-keyword        = 'current'
deprecated-keyword     = 'deprecated'
false-keyword          = 'false'
max-keyword            = 'max'
min-keyword            = 'min'
nan-keyword            = 'NaN'
neginf-keyword         = '-INF'
obsolete-keyword       = 'obsolete'
posinf-keyword         = 'INF'
system-keyword         = 'system'
this-variable-keyword  = '$this'
true-keyword           = 'true'
unbounded-keyword      = 'unbounded'
user-keyword           = 'user'

keyword                = [prefix ":"] identifier

prefix-str             = < a string which matches the rule
                           prefix >

prefix                 = identifier

identifier-str         = < a string which matches the rule
                           identifier >

identifier             = (ALPHA / "_")
                              *(ALPHA / DIGIT / "_" / "-" / ".")

identifier-ref-str     = < a string which matches the rule
                           identifier-ref

identifier-ref         = [prefix ":"] identifier

string                 = < an unquoted string as returned by
                           the scanner >

decimal-value          = ("-" non-negative-decimal-value)  /
                          non-negative-decimal-value

non-negative-decimal-value = "0" / positive-decimal-value

positive-decimal-value = (non-zero-digit *DIGIT)

zero-decimal-value     = 1*DIGIT

stmtend                = ";" / "{" *unknown-statement "}"

sep                    = 1*(WSP / line-break)
                         ; unconditional separator
optsep                 = *(WSP / line-break)

stmtsep                = *(WSP / line-break / unknown-statement)

line-break             = CRLF / LF

non-zero-digit         = %x31-39

float-value            = neginf-keyword /
                         posinf-keyword /
                         nan-keyword /
                         decimal-value "." zero-decimal-value
                            *1("E" ("+"/"-") zero-decimal-value)

SQUOTE                 = %x27
                         ; ' (Single Quote)

ALPHA                  = %x41-5A / %x61-7A
                         ; A-Z / a-z

CR                     = %x0D
                         ; carriage return

CRLF                   = CR LF
                         ; Internet standard newline

DIGIT                  = %x30-39
                         ; 0-9

DQUOTE                 = %x22
                         ; " (Double Quote)

HEXDIG                 = DIGIT /
                         %x61 / %x62 / %x63 / %x64 / %x65 / %x66
                         ; only lower-case a..f

HTAB                   = %x09
                         ; horizontal tab

LF                     = %x0A
                         ; linefeed

SP                     = %x20
                         ; space
VCHAR                  = %x21-7E
                         ; visible (printing) characters

WSP                    = SP / HTAB
                         ; white space
