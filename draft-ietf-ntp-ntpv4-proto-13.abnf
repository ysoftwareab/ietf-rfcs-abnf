era = s / 2^(32) and timestamp = s - era * 2^(32),

s = era * 2^(32) + timestamp.

theta = T(B) - T(A) = 1/2 * [(T2-T1) + (T3-T4)]

delta = T(ABA) = (T4-T1) - (T3-T2).

i=n-1
epsilon =       \     ----------
                      /        (i+1)
                     ---     2
i=0

psi   =  -------- * |  /    (theta_0-theta_j)   |
                (n-1)     |  ---                      |
                          |  j=1                      |
                          +-----                 -----+

lambda = (delta / 2) + epsilon.

psi_s = | ---- * /  (theta_s - theta_j)   |
             |  n-1   ---                      |
             |        j=1                      |
             +-----                       -----+

PSI = [(PSI_s)^2 + (PSI_p)^2]^1/2

LAMBDA = EPSILON + DELTA / 2,

p = mobilize(IPADDR, IPADDR, VERSION, MODE, KEYID,
                    P_FLAGS);
r = recv_packet();
p = malloc(sizeof(struct p));
ntp_time = D2LFP(offset) + U2LFP(unix_time);
ntp_time = D2LFP(offset);
has_mac = /* length of MAC field */ 0;
auth = A_NONE;          /* not required */
auth = A_CRYPTO;       /* crypto-NAK */
auth = A_ERROR; /* auth error */
auth = A_OK;    /* auth OK */
p = find_assoc(r);
p = mobilize(r->srcaddr, r->dstaddr, r->version, M_CLNT,
                    r->keyid, P_EPHEM);
p = mobilize(r->srcaddr, r->dstaddr, r->version, M_PASV,
                    r->keyid, P_EPHEM);
p = mobilize(r->srcaddr, r->dstaddr, r->version, M_BCLN,
                    r->keyid, P_EPHEM);
synch = TRUE;
synch = FALSE;  /* unsynchronized */

synch = FALSE;  /* bogus packet */
offset = LFP2D(r->xmt - r->dst);
delay = BDELAY;
disp = LOG2D(r->precision) + LOG2D(s.precision) + PHI *
                    2 * BDELAY;
offset = (LFP2D(r->rec - r->org) + LFP2D(r->dst -
                    r->xmt)) / 2;
delay = max(LFP2D(r->dst - r->org) - LFP2D(r->rec -
                    r->xmt), LOG2D(s.precision));
disp = LOG2D(r->precision) + LOG2D(s.precision) + PHI *
                    LFP2D(r->dst - r->org);
dtemp = p->offset;
osys = s.p;
n = 0;
low = 2e9; high = -2e9;
found = 0;
chime = 0;
low = s.m[i].edge;
chime = 0;
high = s.m[i].edge;
p = s.m[i].p;
max = -2e9; min = 2e9;
p = s.v[i].p;
min = p->jitter;
dtemp = 0;
q = s.v[j].p;
dtemp = SQRT(dtemp);
max = dtemp;
qmax = q;
dtemp = SQRT(SQUARE(p->jitter) + SQUARE(s.jitter));
y = z = w = 0;
p = s.v[i].p;
x = root_dist(p);
rval = SLEW;
mu = p->t - s.t;
freq = 0;
state = SPIK;
freq = (offset - c.offset) / mu;
rval = STEP;
etemp = SQUARE(c.jitter);
dtemp = SQUARE(max(fabs(offset - c.last),
                    LOG2D(s.precision)));
freq = (offset - c.offset) / mu;
etemp = FLL - s.poll;
etemp = AVG;
etemp = min(mu, LOG2D(s.poll));
dtemp = 4 * PLL * LOG2D(s.poll);
etemp = SQUARE(c.wander);
dtemp = SQUARE(freq);
dtemp = c.offset / (PLL * min(LOG2D(s.poll), ALLAN));
hpoll = p->hpoll;
oreach = p->reach;
hpoll = s.poll;
