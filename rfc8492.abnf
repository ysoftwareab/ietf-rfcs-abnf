y = H(x)
       a binary string of arbitrary length, x, is given to a function H,
       which produces a fixed-length output, y.

base = HMAC-SHA256(salt, username | password)

base = SHA256(username | password)
C = scalar-op(c, G)

Z = scalar-op(c, S)

k = HKDF-expand(HKDF-extract(NULL, Z.x), "", l)

u = SIV-encrypt(k, username)

Z = scalar-op(s, C)

k = HKDF-expand(HKDF-extract(NULL, Z.x), "", l)

username = SIV-decrypt(k, u)

pwd-seed = H(base | counter | p)
context = ClientHello.random | ServerHello.random
context = ClientHello.random
n = len(p) + 64
pwd-tmp = PRF(pwd-seed, "TLS-PWD Hunting And Pecking",
                 context) [0..n];
pwd-value = (pwd-tmp mod (p - 1)) + 1

found = 0
counter = 0
n = len(p) + 64
context = ClientHello.random | ServerHello.random
context = ClientHello.random
counter = counter + 1
seed = H(base | counter | p)
tmp = PRF(seed, "TLS-PWD Hunting And Pecking", context) [0..n]
val = (tmp mod (p - 1)) + 1
x = val
save = seed
found = 1
base = random()
y = sqrt(x^3 + a*x + b) mod p
PE = (x, y)
PE = (x, p - y)
qr = random()
qnr = random()
r = (random() mod (p - 1)) + 1
num = (val * r * r) mod p
num = (num * qr) mod p
num = (num * qnr) mod p
found = 0
counter = 0
n = len(p) + 64
context = ClientHello.random | ServerHello.random
context = ClientHello.random
counter = counter + 1
pwd-seed = H(base | counter | p)
pwd-tmp = PRF(pwd-seed, "TLS-PWD Hunting And Pecking",
                     context) [0..n]
pwd-value = (pwd-tmp mod (p - 1)) + 1
PE = pwd-value^((p - 1)/q) mod p
found = 1
base = random()
scalar = (private + mask) mod q

Element = inverse(scalar-op(mask, PE))

z = F(scalar-op(private,
                           elem-op(Peer_Element,
                                   scalar-op(peer_scalar, PE))))

