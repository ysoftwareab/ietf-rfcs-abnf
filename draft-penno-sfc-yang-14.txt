



SFC Netmod                                                      R. Penno
Internet-Draft                                                  P. Quinn
Intended status: Standards Track                           Cisco Systems
Expires: July 6, 2016                                            D. Zhou
                                                                   J. Li
                                                       Intel Corporation
                                                        January 03, 2016


             Yang Data Model for Service Function Chaining
                        draft-penno-sfc-yang-14

Abstract

   This document defines a YANG data model that can be used to configure
   and manage Service Function Chains.

Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on July 6, 2016.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of



Penno, et al.             Expires July 6, 2016                  [Page 1]

Internet-Draft       Yang Model for Service Chaining        January 2016


   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Definitions and Acronyms  . . . . . . . . . . . . . . . . . .   3
   3.  Understanding SFC Yang Models . . . . . . . . . . . . . . . .   3
   4.  Service Function (SF) . . . . . . . . . . . . . . . . . . . .   4
     4.1.  Module Structure  . . . . . . . . . . . . . . . . . . . .   4
     4.2.  Service Function Configuration Module . . . . . . . . . .   7
   5.  Service Function Type (SFT) . . . . . . . . . . . . . . . . .  11
     5.1.  Module Structure  . . . . . . . . . . . . . . . . . . . .  11
     5.2.  Service Function Type Configuration Model . . . . . . . .  12
   6.  Service Function Chain (SFC)  . . . . . . . . . . . . . . . .  14
     6.1.  Module Structure  . . . . . . . . . . . . . . . . . . . .  14
     6.2.  Service Function Chain Configuration Model  . . . . . . .  15
   7.  Service Function Path (SFP) . . . . . . . . . . . . . . . . .  19
     7.1.  Module Structure  . . . . . . . . . . . . . . . . . . . .  19
     7.2.  Service Function Path Configuration Model . . . . . . . .  20
   8.  Service Function Forwarder (SFF)  . . . . . . . . . . . . . .  25
     8.1.  Module Struture . . . . . . . . . . . . . . . . . . . . .  25
     8.2.  Service Function Forwarder Model  . . . . . . . . . . . .  26
   9.  Service Function Forwarder Open vSwitch (SFF-OVS) . . . . . .  32
     9.1.  Module Structure  . . . . . . . . . . . . . . . . . . . .  32
     9.2.  Service Function Forwarder OVS Model  . . . . . . . . . .  33
   10. Service Locator (SL)  . . . . . . . . . . . . . . . . . . . .  39
     10.1.  Module Structure . . . . . . . . . . . . . . . . . . . .  39
     10.2.  Service Locator Module . . . . . . . . . . . . . . . . .  39
   11. Rendered Service Path (RSP) . . . . . . . . . . . . . . . . .  44
     11.1.  Module Structure . . . . . . . . . . . . . . . . . . . .  44
     11.2.  Rendered Service Path Module . . . . . . . . . . . . . .  45
   12. Service Function Classifier (SCF) . . . . . . . . . . . . . .  53
     12.1.  Module Structure . . . . . . . . . . . . . . . . . . . .  53
     12.2.  Service Function Classifier Module . . . . . . . . . . .  54
   13. Service Function Description Monitor Report (SF-DESC-MON-RPT)  56
     13.1.  Module Structure . . . . . . . . . . . . . . . . . . . .  56
     13.2.  Service Function Description Monitor Report Module . . .  58
   14. Service Function Description Monitor (SF-DESC-MON)  . . . . .  62
     14.1.  Module Structure . . . . . . . . . . . . . . . . . . . .  62
     14.2.  Service Function Description Monitor Report Module . . .  64
   15. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  64
   16. Security Considerations . . . . . . . . . . . . . . . . . . .  65
   17. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  65



Penno, et al.             Expires July 6, 2016                  [Page 2]

Internet-Draft       Yang Model for Service Chaining        January 2016


   18. Changes . . . . . . . . . . . . . . . . . . . . . . . . . . .  65
   19. References  . . . . . . . . . . . . . . . . . . . . . . . . .  68
     19.1.  Normative References . . . . . . . . . . . . . . . . . .  68
     19.2.  Informative References . . . . . . . . . . . . . . . . .  68
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  68

1.  Introduction

   YANG [RFC6020] is a data definition language that was introduced to
   define the contents of a conceptual data store that allows networked
   devices to be managed using NETCONF [RFC6241].  YANG is proving
   relevant beyond its initial confines, as bindings to other interfaces
   (e.g.  ReST) and encodings other than XML (e.g.  JSON) are being
   defined.  Furthermore, YANG data models can be used as the basis of
   implementation for other interfaces, such as CLI and programmatic
   APIs.

   This document defines a YANG data model that can be used to configure
   and manage Service Function Chains

2.  Definitions and Acronyms

   The reader should be familiar with the terms contained in
   [I-D.ietf-sfc-architecture], [I-D.ietf-sfc-problem-statement]
   ,[I-D.ietf-sfc-nsh] and [I-D.quinn-vxlan-gpe]

3.  Understanding SFC Yang Models

   There are two main models in SFC: service-function (SF) and service-
   function-forwarder (SFF).  Most other models are used or derived from
   those models.  SF describes a service function like firewall, napt44,
   dpi, http-proxy, etc.  SFF describes a forwarding element that moves
   packets along a service path.  A SFF to function only needs to be
   able to associate a Service Path ID and SI to a next hop data plane
   locator.

   The service-locator model provides a centralized place to register
   transport and endpoints used with SFFs and SFs.  This allows reuse
   across a large number of other models since in networking usually
   data plane locators are widely used.  Some examples of transport
   types are GRE, VXLAN-GPE and the data plane locator are IP:port,
   VLAN-ID and MPLS Label.  This model is imported by SFF, SF and
   Rendered Service Path (RSP) models.

   Service Function Type model serves as a registry for SF types.  The
   model can be easily extended by anyone looking to define their own
   service type.  This model is imported by SF and Service Function
   Chain (SFC).  Since a SFC is an abstract order of service function



Penno, et al.             Expires July 6, 2016                  [Page 3]

Internet-Draft       Yang Model for Service Chaining        January 2016


   types, having a registry of types is important.  Furthermore, when we
   instantiate a SFP and RSP from a SFC we need to choose the actual SFs
   that will be traversed by the packets and this requires us to know
   the type associated with a Service Function.

   A service function path (SFP) is an intermediate step between SFC and
   RSP.  It allows the user to provide input or constraints into the
   construction of a RSP.  This input ranges from nothing to specifying
   the entire path.  During RSP construction, the controller examines
   the SFP and 'fill in the blanks'.

   One of the most important configuration aspects of a SF is the data
   plane locators.  A SF's data plane locators indicates how the SF can
   be reached.  A SF can have multiple data plane locators of different
   transport and types as specified in the service locator model.

   A SFF has also can have multiple data plane locators that indicate
   how it can be reached.  It is very important when constructing a RSP
   to pick SFFs that have data plane locators of the same transport and
   type so that the path works.  A SFF has an additional very important
   configuration container, the service function dictionary.  The
   service function dictionary stores the SFF's view of the Service
   Functions.  It contains all SFs and their data plane locators.

   Therefore the Service Function data plane locators and the SFF
   service function dictionary constitute two pieces of a puzzle.  If
   they fit, it means they can be used in a path, otherwise they can
   not.

   The RSP model is the result of creating a Service Function Chain,
   applying policies through the Service Function Path and finally
   choosing a collection of (SFF, SF) tuples that meet these criteria.
   The RSP is an operational model, meaning it can read but not changed.

4.  Service Function (SF)

   This module describe a Service Function, which is an essential
   building block of other modules.

4.1.  Module Structure

module: service-function
   +--rw service-functions
   |  +--rw service-function* [name]
   |     +--rw name                        sfc-common:sf-name
   |     +--rw tenant-id?                  sfc-common:tenant-id
   |     +--rw type                        sfc-common:sft-type
   |     +--rw rest-uri?                   inet:uri



Penno, et al.             Expires July 6, 2016                  [Page 4]

Internet-Draft       Yang Model for Service Chaining        January 2016


   |     +--rw ip-mgmt-address?            inet:ip-address
   |     x--rw request_reclassification?   boolean
   |     x--rw nsh-aware?                  boolean
   |     +--rw sf-data-plane-locator* [name]
   |        +--rw name                          sfc-common:sf-data-plane-locator-name
   |        +--rw (locator-type)
   |        |  +--:(ip)
   |        |  |  +--rw ip?                           inet:ip-address
   |        |  |  +--rw port?                         inet:port-number
   |        |  +--:(lisp)
   |        |  |  +--rw eid?                          inet:ip-address
   |        |  +--:(mac)
   |        |  |  +--rw mac?                          yang:mac-address
   |        |  |  +--rw vlan-id?                      uint16
   |        |  +--:(function)
   |        |  |  +--rw function-name?                string
   |        |  +--:(mpls)
   |        |  |  +--rw mpls-label?                   uint32
   |        |  +--:(other)
   |        |     +--rw other-name?                   string
   |        +--rw transport?                    identityref
   |        +--rw service-function-forwarder?   sfc-common:sff-name
   +--ro service-functions-state
      +--ro service-function-state* [name]
         +--ro name                  sfc-common:sf-name
         +--ro service-statistics
         |  +--ro bytes-in?     yang:zero-based-counter64
         |  +--ro bytes-out?    yang:zero-based-counter64
         |  +--ro packets-in?   yang:zero-based-counter64
         |  +--ro packet-out?   yang:zero-based-counter64
         +--ro sf-service-path* [name]
            +--ro name                  sfc-common:sfp-name
            +--ro service-statistics
               +--ro bytes-in?     yang:zero-based-counter64
               +--ro bytes-out?    yang:zero-based-counter64
               +--ro packets-in?   yang:zero-based-counter64
               +--ro packet-out?   yang:zero-based-counter64
rpcs:
   +---x delete-all-service-function
   +---x put-service-function
   |  +--ro input
   |     +--ro name?                       sfc-common:sf-name
   |     +--ro tenant-id?                  sfc-common:tenant-id
   |     +--ro type                        sfc-common:sft-type
   |     +--ro rest-uri?                   inet:uri
   |     +--ro ip-mgmt-address?            inet:ip-address
   |     x--ro request_reclassification?   boolean
   |     x--ro nsh-aware?                  boolean



Penno, et al.             Expires July 6, 2016                  [Page 5]

Internet-Draft       Yang Model for Service Chaining        January 2016


   |     +--ro sf-data-plane-locator* [name]
   |        +--ro name                          sfc-common:sf-data-plane-locator-name
   |        +--ro (locator-type)
   |        |  +--:(ip)
   |        |  |  +--ro ip?                           inet:ip-address
   |        |  |  +--ro port?                         inet:port-number
   |        |  +--:(lisp)
   |        |  |  +--ro eid?                          inet:ip-address
   |        |  +--:(mac)
   |        |  |  +--ro mac?                          yang:mac-address
   |        |  |  +--ro vlan-id?                      uint16
   |        |  +--:(function)
   |        |  |  +--ro function-name?                string
   |        |  +--:(mpls)
   |        |  |  +--ro mpls-label?                   uint32
   |        |  +--:(other)
   |        |     +--ro other-name?                   string
   |        +--ro transport?                    identityref
   |        +--ro service-function-forwarder?   sfc-common:sff-name
   +---x read-service-function
   |  +--ro input
   |  |  +--ro name    string
   |  +--ro output
   |     +--ro name?                       sfc-common:sf-name
   |     +--ro tenant-id?                  sfc-common:tenant-id
   |     +--ro type                        sfc-common:sft-type
   |     +--ro rest-uri?                   inet:uri
   |     +--ro ip-mgmt-address?            inet:ip-address
   |     x--ro request_reclassification?   boolean
   |     x--ro nsh-aware?                  boolean
   |     +--ro sf-data-plane-locator* [name]
   |        +--ro name                          sfc-common:sf-data-plane-locator-name
   |        +--ro (locator-type)
   |        |  +--:(ip)
   |        |  |  +--ro ip?                           inet:ip-address
   |        |  |  +--ro port?                         inet:port-number
   |        |  +--:(lisp)
   |        |  |  +--ro eid?                          inet:ip-address
   |        |  +--:(mac)
   |        |  |  +--ro mac?                          yang:mac-address
   |        |  |  +--ro vlan-id?                      uint16
   |        |  +--:(function)
   |        |  |  +--ro function-name?                string
   |        |  +--:(mpls)
   |        |  |  +--ro mpls-label?                   uint32
   |        |  +--:(other)
   |        |     +--ro other-name?                   string
   |        +--ro transport?                    identityref



Penno, et al.             Expires July 6, 2016                  [Page 6]

Internet-Draft       Yang Model for Service Chaining        January 2016


   |        +--ro service-function-forwarder?   sfc-common:sff-name
   +---x delete-service-function
      +--ro input
         +--ro name    string

4.2.  Service Function Configuration Module

<CODE BEGINS> file "service-function@2014-07-01.yang"

module service-function {

  namespace "urn:cisco:params:xml:ns:yang:sfc-sf";

  prefix sfc-sf;

  import ietf-inet-types {
      prefix inet;
      revision-date 2010-09-24;
      }
  import service-locator {
      prefix sfc-sl;
      revision-date 2014-07-01;
      }
  import service-statistics {
      prefix sfc-ss;
      revision-date 2014-07-01;
      }
  import sfc-common {
      prefix sfc-common;
      }


  organization "Cisco Systems, Inc.";
  contact "Reinaldo Penno <repenno@cisco.com>";


  description
    "This module contains a collection of YANG definitions for
     managing service function.";

  revision 2014-07-01 {
    description
      "Changes based on Opendaylight Testing.";
  }

  grouping service-function-entry {
    description
      "This group bundles together all information related to a



Penno, et al.             Expires July 6, 2016                  [Page 7]

Internet-Draft       Yang Model for Service Chaining        January 2016


       single service function";
    leaf name {
      type sfc-common:sf-name;
      description
          "The name of the service function.";
    }
    leaf tenant-id {
      type sfc-common:tenant-id;
      description
        "This SF was created for a specific tenant-id";
    }
    leaf type {
      type sfc-common:sft-type;
      mandatory true;
      description
        "Service Function Type from service-function-type yang
         model";
    }
    leaf rest-uri {
      type inet:uri;
      description "URI of REST based management";
    }
    leaf ip-mgmt-address {
      type inet:ip-address;
      description
        "The IP and port used to configure this service-function";
    }
    //TODO should not use "_" in yang names. This will be deprecated before it becomes an issue.
    leaf request_reclassification {
        status deprecated;
        type boolean;
        description "This leaf determines whether SF can request
          reclassification by the SFF";
      }
    leaf nsh-aware {
      status deprecated;
      type boolean;
      description "Whether this SF can process NSH headers";
    }

    list sf-data-plane-locator {
      key "name";
      description
        "A network data-plane locator";
      leaf name {
          type sfc-common:sf-data-plane-locator-name;
        description
          "A unique string that represents this



Penno, et al.             Expires July 6, 2016                  [Page 8]

Internet-Draft       Yang Model for Service Chaining        January 2016


           data-plane-locator";
      }
      uses sfc-sl:data-plane-locator;
      leaf service-function-forwarder {
        type sfc-common:sff-name;
        description
          "The service function forwarder associated with this
           locator";
      }
    }
  }

  container service-functions {
    description
      "A function that is responsible for specific
      treatment of received packets.  A Service Function can act at
      various layers of a protocol stack (e.g., at the network layer
      or other OSI layers).  A Service Function can be a virtual
      element or be embedded in a physical network element.  One of
      multiple Service Functions can be embedded in the same network
      element.  Multiple occurrences of the Service Function can be
      enabled in the same administrative domain.

      One or more Service Functions can be involved in the delivery
      of added-value services.  A non-exhaustive list of Service
      Functions includes: firewalls, WAN and application
      acceleration, Deep Packet Inspection (DPI),a LI (Lawful
      Intercept) module, server load balancers, NAT44 [RFC3022],
      NAT64 [RFC6146], NPTv6 [RFC6296], HOST_ID injection, HTTP
      Header Enrichment functions, TCP optimizer, etc.

      An SF may be SFC encapsulation aware, that is it receives, and
      acts on information in the SFC encapsulation, or unaware in
      which case data forwarded to the service does not contain the
      SFC encapsulation.";

    list service-function {
      key "name";
      description
        "This list holds configuration data for all service functions
         in the domain";
      uses service-function-entry;
    }
  }

  container service-functions-state {
    config false;
    description



Penno, et al.             Expires July 6, 2016                  [Page 9]

Internet-Draft       Yang Model for Service Chaining        January 2016


      "This container hold operational state for all service
       functions";
    list service-function-state {
      key "name";
      description
        "This list holds operational data for all service functions
         in the domain";
      leaf name {
        type sfc-common:sf-name;
        description
          "the name of the service function";
      }
      uses sfc-ss:service-statistics-group {
        description "Global Service Function statistics";
      }
      list sf-service-path {
        key "name";
        leaf name {
          type sfc-common:sfp-name;
          description
            "The name of the Service Path";
        }
        uses sfc-ss:service-statistics-group;
        description
        "A list of all service function paths that contain this
         service function";
      }
    }
  }

  rpc delete-all-service-function {
  description
    "Deletes all service functions";
  }

  rpc put-service-function {
    description
      "Creates a service function";
    input {
      uses service-function-entry;
    }
  }
  rpc read-service-function {
    description
      "Reads a service function";
    input {
      leaf name {
        type string;



Penno, et al.             Expires July 6, 2016                 [Page 10]

Internet-Draft       Yang Model for Service Chaining        January 2016


        mandatory true;
        description "The name of the service function.";
      }
    }
    output {
      uses service-function-entry;
    }
  }
  rpc delete-service-function {
    description
      "Deletes a service function";
    input {
      leaf name {
        type string;
        mandatory true;
        description "The name of the service function.";
      }
    }
  }
}


</CODE ENDS>


5.  Service Function Type (SFT)

   This module holds one list for each service function type found in
   the system.  Each one of these lists has the name of all service
   functions configured on the system of that particular type.  This
   allows finding a service function of a given type simple.

5.1.  Module Structure

module: service-function-type
   +--rw service-function-types
      +--rw service-function-type* [type]
         +--rw type                                sfc-common:sft-type
         +--rw symmetry?                           boolean
         +--rw bidirectionality?                   boolean
         +--rw nsh-aware?                          boolean
         +--rw request-reclassification?           boolean
         +--rw supported-dataplanelocator-types* [dataplanelocator-type]
         |  +--rw dataplanelocator-type    sfc-sl:sl-transport-type-def
         +--rw sft-service-function-name* [name]
            +--rw name    string





Penno, et al.             Expires July 6, 2016                 [Page 11]

Internet-Draft       Yang Model for Service Chaining        January 2016


5.2.  Service Function Type Configuration Model

<CODE BEGINS> file "service-function-type@2014-07-01.yang"

module service-function-type {

  namespace "urn:cisco:params:xml:ns:yang:sfc-sft";

  prefix sfc-sft;

  import service-locator {
      prefix sfc-sl;
      }

  import sfc-common {
      prefix sfc-common;
  }

  organization "Cisco Systems, Inc.";
  contact "Reinaldo Penno <repenno@cisco.com>";

  description
    "This module contains a collection of YANG definitions for
     managing service function types.

     It follows closely the constructs of
     http://tools.ietf.org/html/draft-ietf-netmod-interfaces-cfg-12

     Copyright (c) 2013 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

     // RFC Ed.: replace XXXX with actual RFC number and remove this
     // note.

     // RFC Ed.: update the date below with the date of RFC
     // publication and remove this note.

  revision 2014-07-01 {



Penno, et al.             Expires July 6, 2016                 [Page 12]

Internet-Draft       Yang Model for Service Chaining        January 2016


    description
      "Changes based on Opendaylight Testing.";
    reference "https://tools.ietf.org/html/draft-penno-sfc-yang";
  }

  // Service Function Type definitions

  grouping service-function-type-definition {
    description
      "List of parameters to define an abstract type of Service Function";
    //TODO: Expand list to include metadata context template support. ie MD Type1 C3/C4 context, MD Type2 etc.
    leaf type {
      type sfc-common:sft-type;
      description "Service Function type names such as firewall, dpi, tcp-proxy, etc";
    }
    leaf symmetry {
      type boolean;
      description "SF is involved in a symmetric service path";
    }
    leaf bidirectionality {
      type boolean;
      description "SF handles uplink and downlink traffic";
    }
    leaf nsh-aware {
      type boolean;
      description "Service Function can handle Network Service Headers";
    }
    leaf request-reclassification {
        type boolean;
        description "This leaf determines whether SF can request
          reclassification by the SFF";
      }
    list supported-dataplanelocator-types {
      description "Data Plane Locator types from the Service Function";
      key "dataplanelocator-type";
      leaf dataplanelocator-type {
          type sfc-sl:sl-transport-type-def;
      }
    }
  }

  container service-function-types {
    description
      "A list of Service function Types. For each type we keep
       a list of Service Functions";

    list service-function-type {
      key "type";



Penno, et al.             Expires July 6, 2016                 [Page 13]

Internet-Draft       Yang Model for Service Chaining        January 2016


      uses service-function-type-definition;

      list sft-service-function-name {
        //TODO: should this be sf-name typedef? Also this should be kept in a separate map as an alternate index as it mirrors state.
        key "name";
        leaf name {
          type string;
          description
            "The name of the service function.";
        }
        description
          "The list of all service functions of a specific type";
      }
      description
        "A list of all service types. Each service-type entry holds
         a list of all service functions of the type";
    }
  }
}


</CODE ENDS>

6.  Service Function Chain (SFC)

   This model describes a service function chain which is basically an
   ordered list of services.  But a service function chain does not
   specify exactly which service (firewal1 vs. firewall2) will be used
   to actually process packets.

6.1.  Module Structure




















Penno, et al.             Expires July 6, 2016                 [Page 14]

Internet-Draft       Yang Model for Service Chaining        January 2016


   module: service-function-chain
      +--rw service-function-chains
      |  +--rw service-function-chain* [name]
      |     +--rw name                    sfc-common:sfc-name
      |     +--rw symmetric?              boolean
      |     +--rw sfc-service-function* [name]
      |        +--rw name     string
      |        +--rw type     sfc-common:sft-type
      |        +--rw order?   uint8
      +--ro service-function-chains-state
         +--ro service-function-chain-state* [name]
            +--ro name                sfc-common:sfc-name
            +--ro sfc-service-path* [name]
               +--ro name    sfc-common:sfp-name
   rpcs:
      +---x instantiate-service-function-chain
      |  +--ro input
      |  |  +--ro name    string
      |  +--ro output
      |     +--ro name?   string
      +---x put-service-function-chains
         +--ro input
            +--ro service-function-chain* [name]
               +--ro name                    sfc-common:sfc-name
               +--ro symmetric?              boolean
               +--ro sfc-service-function* [name]
                  +--ro name     string
                  +--ro type     sfc-common:sft-type
                  +--ro order?   uint8

6.2.  Service Function Chain Configuration Model

   <CODE BEGINS> file "service-function-chain@2014-07-01.yang"

   module service-function-chain {

     namespace "urn:cisco:params:xml:ns:yang:sfc-sfc";

     prefix sfc-sfc;

     import sfc-common {
         prefix sfc-common;
         }

     organization "Cisco Systems, Inc.";
     contact "Reinaldo Penno <repenno@cisco.com>";





Penno, et al.             Expires July 6, 2016                 [Page 15]

Internet-Draft       Yang Model for Service Chaining        January 2016


     description
       "This module contains a collection of YANG definitions for
        managing service function chains.

        Copyright (c) 2013 IETF Trust and the persons identified as
        authors of the code.  All rights reserved.

        Redistribution and use in source and binary forms, with or
        without modification, is permitted pursuant to, and subject
        to the license terms contained in, the Simplified BSD License
        set forth in Section 4.c of the IETF Trust's Legal Provisions
        Relating to IETF Documents
        (http://trustee.ietf.org/license-info).

        This version of this YANG module is part of RFC XXXX; see
        the RFC itself for full legal notices.";

        // RFC Ed.: replace XXXX with actual RFC number and remove this
        // note.

        // RFC Ed.: update the date below with the date of RFC
        // publication and remove this note.

     revision 2014-07-01 {
       description
         "Revised based on Opendaylight Project feedback";
       reference "https://tools.ietf.org/html/draft-penno-sfc-yang";
     }

      grouping service-function-chain-grouping {
       list service-function-chain {
         key "name";
         description
           "A list that holds all service function chains in the
            domain";
         leaf name {
           type sfc-common:sfc-name;
           description
             "the name of the service function chain";
         }
         leaf symmetric {
           type boolean;
           default false;
           description
             "If the chain is symmetric we will create two service
              paths, one ingress and another egress. Packets traverse
              the egress service path in the reverse order of the
              ingress path";



Penno, et al.             Expires July 6, 2016                 [Page 16]

Internet-Draft       Yang Model for Service Chaining        January 2016


         }
         list sfc-service-function {
           key "name";
           leaf name {
             type string;
             description
               "A unique handle that describes the service function
                that will be chosen for this type, such as
                ingress-dpi. This is not the service function name";
           }
           leaf type {
             type sfc-common:sft-type;
             mandatory true;
             description
               "Service Function Type from service-function-type.yang";
           }
           leaf order {
             type uint8;
             description
               "A number that denotes the order of a service function
                type in a chain";
           }
           ordered-by user;
           description
             "A list of service functions that compose the service
              chain";
         }
       }
       description
         "This group bundles together all service function chains in the
          domain";
     }

     // Service Function Chains

     container service-function-chains {
       uses service-function-chain-grouping;
       description
         "A service Function chain defines an
          abstract set of service functions and their ordering
          constraints that must be applied to packets and/or frames
          selected as a result of classification.  The implied order
          may not be a linear progression as the architecture allows
          for nodes that copy to more than one branch, and also allows
          for cases where there is flexibility in the order in which
          services need to be applied. The term service chain is often
          used as shorthand for service function chain.";
     }



Penno, et al.             Expires July 6, 2016                 [Page 17]

Internet-Draft       Yang Model for Service Chaining        January 2016


     container service-function-chains-state {
       config false;
       list service-function-chain-state {
         key "name";
         description
           "A list that contains operational service function
            chain state";
         leaf name {
           type sfc-common:sfc-name;
           description
             "the name of the service function chain";
         }
         list sfc-service-path {
           key "name";
           leaf name {
             type sfc-common:sfp-name;
             description
               "The name of the Service Path";
           }
           description
           "A list of all service function paths instantiated from
            this chain";
         }
       }
       description
         "This containers holds operational service function
           chain state and their associated service path";
     }

   // Remote procedure calls

   // (main feature: instantiation of a SFC)

     rpc instantiate-service-function-chain {
       description
         "Instantiates a single service function";
       input {
         leaf name {
           type string;
             mandatory true;
             description
             "The name of the service function chain to be
              instantiated.";
         }
       }
       output {
         leaf name {
           type string;



Penno, et al.             Expires July 6, 2016                 [Page 18]

Internet-Draft       Yang Model for Service Chaining        January 2016


           description
             "The name of the created service function path.";
         }
       }
     }

       // (RPC for testing)
     rpc put-service-function-chains {
       description
         "Creates Service-Functions";
       input {
         uses service-function-chain-grouping;
       }
     }
   }



   </CODE ENDS>




7.  Service Function Path (SFP)

   A Service Function Path is an instantiation of a service function
   chain.  It allows be user to provide constrains for the rendering of
   the service path such as specific service-hops that need to be
   visited, the transport encapsulation used in the overlay, whether
   paths should be symmetric, amongst others.

7.1.  Module Structure



















Penno, et al.             Expires July 6, 2016                 [Page 19]

Internet-Draft       Yang Model for Service Chaining        January 2016


   module: service-function-path
      +--rw service-function-paths
      |  +--rw service-function-path* [name]
      |     +--rw name                    sfc-common:sfp-name
      |     +--rw transport-type?         sfc-sl:sl-transport-type-def
      |     +--rw symmetric?              boolean
      |     +--rw classifier?             string
      |     +--rw symmetric-classifier?   string
      |     +--rw context-metadata?       sfc-md:context-metadata-ref
      |     +--rw variable-metadata?      sfc-md:variable-metadata-ref
      |     +--rw tenant-id?              string
      |     +--rw service-path-hop* [hop-number]
      |     |  +--rw hop-number                     uint8
      |     |  +--rw service-function-name?         sfc-common:sf-name
      |     |  +--rw service-function-group-name?   string
      |     |  +--rw service-function-forwarder?    sfc-common:sff-name
      |     |  +--rw service-index?                 uint8
      |     +--rw service-chain-name      sfc-common:sfc-name
      |     +--rw starting-index?         uint8
      |     +--rw path-id?                uint32
      +--ro service-function-paths-state
         +--ro service-function-path-state* [name]
            +--ro name                         sfc-common:sfp-name
            +--ro sfp-rendered-service-path* [name]
               +--ro name    sfc-common:rsp-name

7.2.  Service Function Path Configuration Model

   <CODE BEGINS> file "service-function-path@2014-07-01.yang"

   module service-function-path {

     namespace "urn:cisco:params:xml:ns:yang:sfc-sfp";

     prefix sfc-sfp;

     import service-function-path-metadata {
         prefix sfc-md;
         revision-date 2014-07-01;
         }
     import service-locator {
         prefix sfc-sl;
         revision-date 2014-07-01;
         }

     import sfc-common {
         prefix sfc-common;
         revision-date 2015-10-17;



Penno, et al.             Expires July 6, 2016                 [Page 20]

Internet-Draft       Yang Model for Service Chaining        January 2016


         }

     organization "Cisco Systems, Inc.";
     contact "Reinaldo Penno <repenno@cisco.com>";


     description
       "This module contains a collection of YANG definitions for
        managing service function chains.

        Copyright (c) 2013 IETF Trust and the persons identified as
        authors of the code.  All rights reserved.

        Redistribution and use in source and binary forms, with or
        without modification, is permitted pursuant to, and subject
        to the license terms contained in, the Simplified BSD License
        set forth in Section 4.c of the IETF Trust's Legal Provisions
        Relating to IETF Documents
        (http://trustee.ietf.org/license-info).

        This version of this YANG module is part of RFC XXXX; see
        the RFC itself for full legal notices.";

        // RFC Ed.: replace XXXX with actual RFC number and remove this
        // note.

        // RFC Ed.: update the date below with the date of RFC
        // publication and remove this note.

     revision 2014-07-01 {
       description
         "Changes based on Opendaylight Testing and IETF SFC ml.";
       reference "https://tools.ietf.org/html/draft-penno-sfc-yang";
     }

     // Service Function Path

     container service-function-paths {
       description
         "The SFP provides a level of indirection
          between the fully abstract notion of service chain as an
          abstract sequence of functions to be delivered, and the
          fully specified notion of exactly what SFF/SFs the packet
          will visit when it actually traverses the network.  By
          allowing the control components to specify the use of this
          level of indirection, the deployment may choose the degree
          of SFF/SF selection authority that is delegated to the
          network";



Penno, et al.             Expires July 6, 2016                 [Page 21]

Internet-Draft       Yang Model for Service Chaining        January 2016


       list service-function-path {
         key "name";
         description
           "A list that holds configuration data for all SFPs in the
            domain";
         leaf name {
           type sfc-common:sfp-name;
           description
             "The name of this service function path";
         }

         leaf transport-type {
           type sfc-sl:sl-transport-type-def;
           default "sfc-sl:vxlan-gpe";
           description
             "Transport type from service-locator.yang.";
         }

         leaf symmetric {
           type boolean;
           default false;
           description
             "If the chain is symmetric we will create two service
              paths, one ingress and another egress. Packets traverse
              the egress service path in the reverse order of the
              ingress path";
         }
         leaf classifier {
           type string;
           description "The classifier responsible for directing"
             + "packets to this service path";
         }
         leaf symmetric-classifier {
           type string;
           description "The classifier responsible for directing"
             + "packets to this service path";
         }
         leaf context-metadata {
           type sfc-md:context-metadata-ref;
           description
             "The name of the associated context metadata";
         }
         leaf variable-metadata {
           type sfc-md:variable-metadata-ref;
           description
             "The name of the associated variable metadata";
         }
         leaf tenant-id {



Penno, et al.             Expires July 6, 2016                 [Page 22]

Internet-Draft       Yang Model for Service Chaining        January 2016


           type string;
           description
             "This SFP was created for a specific tenant-id";
         }
         list service-path-hop {
           key "hop-number";
           leaf hop-number {
             type uint8;
             description
               "A Monotonically increasing number";
           }
           leaf service-function-name {
             type sfc-common:sf-name;
             description
               "Service Function name";
           }
           leaf service-function-group-name {
             type string;
             description
               "Service Function group name";
           }
           leaf service-function-forwarder {
             type sfc-common:sff-name;
             description
               "Service Function Forwarder name";
           }
           leaf service-index {
             type uint8;
             description
               "Provides location within the service path.
                Service index MUST be decremented by service functions
                or proxy nodes after performing required services.  MAY
                be used in conjunction with service path for path
                selection.  Service Index is also valuable when
                troubleshooting/reporting service paths.  In addition to
                location within a path, SI can be used for loop
                detection.";
           }
           ordered-by user;
           description
             "A list of service functions that compose the
              service path";
         }
         leaf service-chain-name {
           type sfc-common:sfc-name;
           mandatory true;
           description
             "The Service Function Chain used as blueprint for this



Penno, et al.             Expires July 6, 2016                 [Page 23]

Internet-Draft       Yang Model for Service Chaining        January 2016


              path";
         }
         leaf starting-index {
           type uint8;
           description
             "Starting service index";
         }
         leaf path-id {
           type uint32 {
             range "0..16777216";
           }
           description
             "Identifies a service path.
              Participating nodes MUST use this identifier for path
              selection.  An administrator can use the service path
              value for reporting and troubleshooting packets along
              a specific path.";
         }
       }
     }

     container service-function-paths-state {
       config false;
       description
         "This container hold operational state for all service
          function paths";
       list service-function-path-state {
         key "name";
         description
           "This list holds operational data for all service function
            paths in the domain";
         leaf name {
           type sfc-common:sfp-name;
           description
             "The name of the service function path";
         }
         list sfp-rendered-service-path {
           key "name";
           leaf name {
             type sfc-common:rsp-name;
             description
               "The name of the Rendered Service Path";
           }
           description
           "A list of all rendered service paths instantiated
            from this service path";
         }
       }



Penno, et al.             Expires July 6, 2016                 [Page 24]

Internet-Draft       Yang Model for Service Chaining        January 2016


     }

   }


   <CODE ENDS>



8.  Service Function Forwarder (SFF)

   This module describes the configuration a SFF needs to have in order
   to route packets to the service functions it serves. the SFF needs to
   have a table with service function name and associated locator.  The
   locator could be an IP address and port, an internal function call or
   some other unique identifier.

8.1.  Module Struture

module: service-function-forwarder
   +--rw service-function-forwarders
   |  +--rw service-function-forwarder* [name]
   |     +--rw name                           sfc-common:sff-name
   |     +--rw service-node?                  sfc-common:sn-name
   |     +--rw ip-mgmt-address?               inet:ip-address
   |     +--rw rest-uri?                      inet:uri
   |     +--rw sff-data-plane-locator* [name]
   |     |  +--rw name                  sfc-common:sff-data-plane-locator-name
   |     |  +--rw data-plane-locator
   |     |     +--rw (locator-type)
   |     |     |  +--:(ip)
   |     |     |  |  +--rw ip?              inet:ip-address
   |     |     |  |  +--rw port?            inet:port-number
   |     |     |  +--:(lisp)
   |     |     |  |  +--rw eid?             inet:ip-address
   |     |     |  +--:(mac)
   |     |     |  |  +--rw mac?             yang:mac-address
   |     |     |  |  +--rw vlan-id?         uint16
   |     |     |  +--:(function)
   |     |     |  |  +--rw function-name?   string
   |     |     |  +--:(mpls)
   |     |     |  |  +--rw mpls-label?      uint32
   |     |     |  +--:(other)
   |     |     |     +--rw other-name?      string
   |     |     +--rw transport?       identityref
   |     +--rw service-function-dictionary* [name]
   |     |  +--rw name                         sfc-common:sf-name
   |     |  +--rw sff-sf-data-plane-locator



Penno, et al.             Expires July 6, 2016                 [Page 25]

Internet-Draft       Yang Model for Service Chaining        January 2016


   |     |  |  +--rw sf-dpl-name?    sfc-common:sf-data-plane-locator-name
   |     |  |  +--rw sff-dpl-name?   sfc-common:sff-data-plane-locator-name
   |     |  +--rw sff-interfaces* [sff-interface]
   |     |  |  +--rw sff-interface    string
   |     |  +--rw failmode?                    failmode-type
   |     +--rw connected-sff-dictionary* [name]
   |        +--rw name                          sfc-common:sff-name
   |        +--rw sff-sff-data-plane-locator
   |        |  +--rw (locator-type)
   |        |  |  +--:(ip)
   |        |  |  |  +--rw ip?              inet:ip-address
   |        |  |  |  +--rw port?            inet:port-number
   |        |  |  +--:(lisp)
   |        |  |  |  +--rw eid?             inet:ip-address
   |        |  |  +--:(mac)
   |        |  |  |  +--rw mac?             yang:mac-address
   |        |  |  |  +--rw vlan-id?         uint16
   |        |  |  +--:(function)
   |        |  |  |  +--rw function-name?   string
   |        |  |  +--:(mpls)
   |        |  |  |  +--rw mpls-label?      uint32
   |        |  |  +--:(other)
   |        |  |     +--rw other-name?      string
   |        |  +--rw transport?       identityref
   |        +--rw sff-interfaces* [sff-interface]
   |        |  +--rw sff-interface    string
   |        +--rw failmode?                     failmode-type
   +--ro service-function-forwarders-state
      +--ro service-function-forwarder-state* [name]
         +--ro name                  sfc-common:sff-name
         +--ro service-statistics
         |  +--ro bytes-in?     yang:zero-based-counter64
         |  +--ro bytes-out?    yang:zero-based-counter64
         |  +--ro packets-in?   yang:zero-based-counter64
         |  +--ro packet-out?   yang:zero-based-counter64
         +--ro sff-service-path* [name]
            +--ro name                  sfc-common:sfp-name
            +--ro service-statistics
               +--ro bytes-in?     yang:zero-based-counter64
               +--ro bytes-out?    yang:zero-based-counter64
               +--ro packets-in?   yang:zero-based-counter64
               +--ro packet-out?   yang:zero-based-counter64

8.2.  Service Function Forwarder Model

   <CODE BEGINS> file "service-function-forwarder@2014-07-01.yang"





Penno, et al.             Expires July 6, 2016                 [Page 26]

Internet-Draft       Yang Model for Service Chaining        January 2016


   module service-function-forwarder {

     namespace "urn:cisco:params:xml:ns:yang:sfc-sff";

     prefix sfc-sff;

     import ietf-inet-types {
         prefix inet;
         revision-date 2010-09-24;
         }
     import service-locator {
         prefix sfc-sl;
         revision-date 2014-07-01;
         }
     import service-function-type {
         prefix sfc-sft;
         revision-date 2014-07-01;
         }
     import service-statistics {
         prefix sfc-ss;
         revision-date 2014-07-01;
         }
     import sfc-common {
         prefix sfc-common;
         revision-date 2015-10-17;
         }

     organization "Cisco Systems, Inc.";
     contact "Reinaldo Penno <repenno@cisco.com>";


     description
       "This module contains a collection of YANG definitions for
        managing service function forwarders.

        Copyright (c) 2013 IETF Trust and the persons identified as
        authors of the code.  All rights reserved.

        Redistribution and use in source and binary forms, with or
        without modification, is permitted pursuant to, and subject
        to the license terms contained in, the Simplified BSD License
        set forth in Section 4.c of the IETF Trust's Legal Provisions
        Relating to IETF Documents
        (http://trustee.ietf.org/license-info).

        This version of this YANG module is part of RFC XXXX; see
        the RFC itself for full legal notices.";




Penno, et al.             Expires July 6, 2016                 [Page 27]

Internet-Draft       Yang Model for Service Chaining        January 2016


        // RFC Ed.: replace XXXX with actual RFC number and remove this
        // note.

        // RFC Ed.: update the date below with the date of RFC
        // publication and remove this note.

     revision 2014-07-01 {
         description
         "Revision based on Opendaylight project feedback";
       reference "https://tools.ietf.org/html/draft-penno-sfc-yang";
     }

     // Failmode type definitions

     identity failmode-type-identity {
       description
         "Base identity from which specific failmode
          types are derived. Fail mode specifies the behavior
          when the interface does not have connectivity to the
          service node.";
     }

     typedef failmode-type {
       type identityref {
           base "failmode-type-identity";
       }
       description "This type is used to reference all
         registered failmode types";
     }

     identity close {
       base "failmode-type-identity";
       description "When service-function can not reach service
          function, packets will be dropped";
     }

     identity open {
       base "failmode-type-identity";
       description "When service-function can not reach service
          function, packets will be forwarded";
     }

     container service-function-forwarders {
       description
         "A service function forwarder is
          responsible for delivering traffic received from the SFC
          network forwarder to one or more connected service
          functions via information carried in the SFC encapsulation.



Penno, et al.             Expires July 6, 2016                 [Page 28]

Internet-Draft       Yang Model for Service Chaining        January 2016


         ";
       list service-function-forwarder {
         key "name";
         description
           "A list that holds configuration of all SFFs in the domain";
         leaf name {
           type sfc-common:sff-name;
           description
             "The unique name of this service function forwarder, such
              as SFF1";
         }

         leaf service-node {
           type sfc-common:sn-name;
           description "The service node that hosts this SFF";
         }

         leaf ip-mgmt-address {
           type inet:ip-address;
           description
             "The IP and port used to configure this
              service-function-forwarder";
         }

         leaf rest-uri {
           type inet:uri;
           description "URI of REST based management";
         }

         list sff-data-plane-locator {
           key "name";
           description
             "A list of all data-plane-locators of this SFF.";
           leaf name {
             type sfc-common:sff-data-plane-locator-name;
             description
               "A unique name that represents this
                data-plane-locator";
           }

           container data-plane-locator {
             description
               "This container holds configuration for the overlay data
                plane locator used by this SFF. This could be VXLAN,
                GRE, etc";
             uses sfc-sl:data-plane-locator;
           }
         }



Penno, et al.             Expires July 6, 2016                 [Page 29]

Internet-Draft       Yang Model for Service Chaining        January 2016


         list service-function-dictionary {
           key "name";
           leaf name {
             type sfc-common:sf-name;
             description
                 "The name of the service function.";
           }
           container sff-sf-data-plane-locator {
             description
               "SFF and SF data plane locators to use when sending
                packets from this SFF to the associated SF";
             leaf sf-dpl-name {
               type sfc-common:sf-data-plane-locator-name;
               description
                 "The SF data plane locator to use when sending
                  packets to the associated service function";
             }
             leaf sff-dpl-name {
               type sfc-common:sff-data-plane-locator-name;
               description
                 "The SFF data plane locator to use when sending
                  packets to the associated service function.
                  This is necessary when the SFF has multiple DPLs";
             }
           }
           list sff-interfaces {
             key "sff-interface";
             leaf sff-interface {
               type string;
               description
                 "An individual interface on the SFF connected to the
                  SF";
             }
             description
               "A list of interfaces on the SFF which are connected to
                this SF, usually one 1 or 2 elements";
           }
           leaf failmode {
             type failmode-type;
             description
               "This leaf defines what should the SFF do if it can not
                send packets to the SF";
           }
           description
             "A list of all Service Functions attached to this SFF.";
         }

         list connected-sff-dictionary {



Penno, et al.             Expires July 6, 2016                 [Page 30]

Internet-Draft       Yang Model for Service Chaining        January 2016


           key "name";
           leaf name {
             type sfc-common:sff-name;
             description
               "The name of the SFF connected to this SFF";
           }
           container sff-sff-data-plane-locator {
             description
               "The SFF uses this data plane locator when sending
                packets to the associated SFF";
             uses sfc-sl:data-plane-locator;
           }
           list sff-interfaces {
             key "sff-interface";
             leaf sff-interface {
               type string;
               description
                 "An individual SFF interface connected to this SFF";
             }
             description
               "A list of SFF interfaces connected to this SFF";
           }
           leaf failmode {
             type failmode-type;
             description
               "This leaf defines what the SFF should do if it can not
                send packets to a connected SFF";
           }
           description
             "A list of all Service Function Forwarders connected to
              this SFF";
         }
       }
     }

     container service-function-forwarders-state {
       config false;
       description
         "This container hold operational state for all service
          function forwarders";
       list service-function-forwarder-state {
         key "name";
         description
           "This list holds operational data for all service functions
            forwarders in the domain";
         leaf name {
           type sfc-common:sff-name;
           description



Penno, et al.             Expires July 6, 2016                 [Page 31]

Internet-Draft       Yang Model for Service Chaining        January 2016


             "the name of the service function forwarder";
         }
         uses sfc-ss:service-statistics-group {
           description "Global Service Function Forwarder statistics";
         }

         list sff-service-path {
           key "name";
           leaf name {
             type sfc-common:sfp-name;
             description
               "The name of the Service Path";
           }
           uses sfc-ss:service-statistics-group;
           description
           "A list of all service function paths that use this
            service function forwarder";
         }
       }
     }
   }



   <CODE ENDS>



9.  Service Function Forwarder Open vSwitch (SFF-OVS)

   This module augments the SFF model for Open vSwitch, meaning when
   Open vSwitche (OVS) bridges are used as SFF.

9.1.  Module Structure

















Penno, et al.             Expires July 6, 2016                 [Page 32]

Internet-Draft       Yang Model for Service Chaining        January 2016


module: service-function-forwarder-ovs
augment /sfc-sff:service-function-forwarders/sfc-sff:service-function-forwarder/sfc-sff:sff-data-plane-locator:
   +--rw ovs-bridge
      +--rw bridge-name?    string
      +--rw uuid?           yang:uuid
      +--rw external-ids* [name]
      |  +--rw name     string
      |  +--rw value?   string
      +--rw rest-uri?       inet:uri
augment /sfc-sff:service-function-forwarders/sfc-sff:service-function-forwarder/sfc-sff:service-function-dictionary/sfc-sff:sff-sf-data-plane-locator:
   +--rw ovs-bridge
      +--rw bridge-name?    string
      +--rw uuid?           yang:uuid
      +--rw external-ids* [name]
      |  +--rw name     string
      |  +--rw value?   string
      +--rw rest-uri?       inet:uri

9.2.  Service Function Forwarder OVS Model

   <CODE BEGINS> file "service-function-forwarder-ovs@2014-07-01.yang"


   module service-function-forwarder-ovs {
     yang-version 1;

     namespace "urn:cisco:params:xml:ns:yang:sfc-sff-ovs";

     prefix sfc-sff-ovs;

     import service-function-forwarder {
         prefix sfc-sff;
         revision-date 2014-07-01;
         }
     import sfc-common {
         prefix sfc-common;
         revision-date 2015-10-17;
         }
     import yang-ext {
         prefix ext;
         revision-date 2013-07-09;
         }
     import ietf-yang-types {
       prefix yang;
       revision-date 2013-07-15;
     }
     import ovsdb {
       prefix ovsdb;



Penno, et al.             Expires July 6, 2016                 [Page 33]

Internet-Draft       Yang Model for Service Chaining        January 2016


       revision-date 2015-01-05;
     }
     import overlay {
       prefix ovsdb-overlay;
       revision-date 2015-01-05;
     }

     organization "Cisco Systems, Inc.";
     contact "Reinaldo Penno <repenno@cisco.com>";

     description
       "This module contains a collection of YANG definitions used
        to augment Service Function Forwarder configuration with
        OpenvSwitch specific information.

        Copyright (c) 2013 IETF Trust and the persons identified as
        authors of the code.  All rights reserved.

        Redistribution and use in source and binary forms, with or
        without modification, is permitted pursuant to, and subject
        to the license terms contained in, the Simplified BSD License
        set forth in Section 4.c of the IETF Trust's Legal Provisions
        Relating to IETF Documents
        (http://trustee.ietf.org/license-info).

        This version of this YANG module is part of RFC XXXX; see
        the RFC itself for full legal notices.";

        // RFC Ed.: replace XXXX with actual RFC number and remove this
        // note.

        // RFC Ed.: update the date below with the date of RFC
        // publication and remove this note.

     revision 2014-07-01 {
       description "Augmentation of SFF for OVS";
       reference "https://tools.ietf.org/html/draft-penno-sfc-yang";
     }

     grouping node {
       description
         "Groups that holds OVS node information";
       container ovs-node {
         description
           "This container holds OVS node information";
         leaf node-id {
           type ovsdb:ovsdb-node-ref;
           description "Open vSwitch node id.";



Penno, et al.             Expires July 6, 2016                 [Page 34]

Internet-Draft       Yang Model for Service Chaining        January 2016


         }
       }
     }

     grouping bridge {
       description
         "Groups OVS bridge information that is reused throughout
          SFF augmentations";
       container ovs-bridge {
         description
           "This container holds OVS bridge information";
         leaf bridge-name {
           type string;
           description
             "Open vSwitch bridge name. In Openstack it is usually"
             + " br-tun or br-int depending if it is used in the"
             + " overlay or facing virtual machines respectively";
         }
         leaf uuid {
           type yang:uuid;
           description "Open vSwitch bridge UUID";
         }
         leaf openflow-node-id {
           type string;
           description "Openflow node ID";
         }
         list external-ids {
           key "name";
           description
             "The list of external ids associated with this
              bridge";
           leaf name {
             type string;
             description
               "A unique string that represents this external-id such
                as attached-mac";
           }
           leaf value {
             type string;
             description
               "A unique string that represents the value of the
                external-id such as fa:16:3e:56:47:10";
           }
         }
       }
     }

     container sff-ovs-mappings {



Penno, et al.             Expires July 6, 2016                 [Page 35]

Internet-Draft       Yang Model for Service Chaining        January 2016


       description "Container for keeping lists of mappings needed"
         + "by the SFC-OVS renderer";

       list ovs-node-to-sff-mapping {
         key "uuid bridge-name";
         config false;
         description "List to keep mappings of OVS UUIDs + Bridge Name"
           + "to Service Function Fowarders (SFFs). This is used to"
           + "correlate OVS bridge events to SFFs";
         leaf uuid {
           type yang:uuid;
           description "Open vSwitch bridge UUID";
         }
         leaf bridge-name {
           type string;
           description
             "Open vSwitch bridge name. In Openstack it is usually"
             + " br-tun or br-int depending if it is used in the"
             + " overlay or facing virtual machines respectively";
         }
         leaf name {
           type sfc-common:sff-name;
           description
             "The unique name of this service function forwarder, such
              as SFF1";
         }
       }
     }

     grouping options {
       description
         "Groups all OVS specific configuration options that are reused
          throughout many SFF augmentations";
       container ovs-options {
         description "Port/Interface related optional input values";
         leaf local-ip {
           type string;
           description "Local interface IP address";
         }
         leaf remote-ip {
           type string;
           description
             "Remote IP address, e.g. the remote Vxlan tunnel endpoint
              IP";
         }
         leaf dst-port {
           type string;
           description



Penno, et al.             Expires July 6, 2016                 [Page 36]

Internet-Draft       Yang Model for Service Chaining        January 2016


             "Remote port, e.g. the remote Vxlan tunnel endpoint port";
         }
         leaf nsp {
           type string;
           description "NSH Service Path ID";
         }
         leaf nsi {
           type string;
           description "NSH Starting Index";
         }
         leaf in-nsp {
           type string;
           description "Ingress NSH Service Path ID";
         }
         leaf in-nsi {
           type string;
           description "Ingress NSH Service Index";
         }
         leaf out-nsp {
           type string;
           description "Egress NSH Service Path ID";
         }
         leaf out-nsi {
           type string;
           description "Egress NSH Service Index";
         }
         leaf nshc1 {
           type string;
           description "NSH Context Header 1";
         }
         leaf nshc2 {
           type string;
           description "NSH Context Header 2";
         }
         leaf nshc3 {
           type string;
           description "NSH Context Header 3";
         }
         leaf nshc4 {
           type string;
           description "NSH Context Header 4";
         }
         leaf key {
           type string;
           description "Vxlan tunnel ID";
         }
       }
     }



Penno, et al.             Expires July 6, 2016                 [Page 37]

Internet-Draft       Yang Model for Service Chaining        January 2016


     augment "/sfc-sff:service-function-forwarders/"
           + "sfc-sff:service-function-forwarder/" {
       description
         "Augments the SFF definition with
          OVS node specific information";
       ext:augment-identifier "sff-ovs-node-augmentation";
       uses node;
     }

     augment "/sfc-sff:service-function-forwarders/"
             + "sfc-sff:service-function-forwarder/" {
       description
         "Augments the SFF definition with
          bridge specific information";
       ext:augment-identifier "sff-ovs-bridge-augmentation";
       uses bridge;
     }

     augment "/sfc-sff:service-function-forwarders/"
           + "sfc-sff:service-function-forwarder/"
           + "sfc-sff:sff-data-plane-locator" {
       description
         "Augments the SFF data plane locator with
          bridge specific information";
       ext:augment-identifier "sff-ovs-locator-bridge-augmentation";
       uses bridge;
     }

     augment "/sfc-sff:service-function-forwarders/"
           + "sfc-sff:service-function-forwarder/"
           + "sfc-sff:sff-data-plane-locator" {
       description
         "Augments the SFF data plane locator with
          options specific to OVS such as context headers";
       ext:augment-identifier "sff-ovs-locator-options-augmentation";
       uses options;
     }

     rpc create-ovs-bridge {
       description
         "Creates OVS Bridge on specified OVS Node";
       input {
         leaf name {
           type string;
           description
             "The name of OVS Bridge to be created";
         }




Penno, et al.             Expires July 6, 2016                 [Page 38]

Internet-Draft       Yang Model for Service Chaining        January 2016


         container ovs-node {
           description
           "Contains ip:port locator of the OVS Node,
           on which OVS Bridge is going to be created";

           uses ovsdb-overlay:ip-port-locator;
         }
       }
       output {
         leaf result {
           type boolean;
           description
             "True if the OVS bridge was created, otherwise
              false";
         }
       }
     }
   }



   <CODE ENDS>



10.  Service Locator (SL)

   This module provides a single point of registration for all network
   locators types used in Services Function Chaining. the model can be
   augmented at will with locators appropriate for each use-case.

10.1.  Module Structure

10.2.  Service Locator Module

   <CODE BEGINS> file "service-locator@2014-07-01.yang"

   module service-locator {

     namespace "urn:cisco:params:xml:ns:yang:sfc-sl";

     prefix sfc-sl;

     import ietf-inet-types {
         prefix inet;
         revision-date 2010-09-24;
         }
     import ietf-yang-types {



Penno, et al.             Expires July 6, 2016                 [Page 39]

Internet-Draft       Yang Model for Service Chaining        January 2016


         prefix yang;
         revision-date 2010-09-24;
         }

     organization "Cisco Systems, Inc.";
     contact "Reinaldo Penno <repenno@cisco.com>";


     description
       "This module contains a collection of YANG definitions for
        managing service locators. Service locators are used as
        data plane network destinations for Service Functions and
        Service Function Forwarders

        It follows closely the constructs of
        http://tools.ietf.org/html/draft-ietf-netmod-interfaces-cfg-12

        Copyright (c) 2013 IETF Trust and the persons identified as
        authors of the code.  All rights reserved.

        Redistribution and use in source and binary forms, with or
        without modification, is permitted pursuant to, and subject
        to the license terms contained in, the Simplified BSD License
        set forth in Section 4.c of the IETF Trust's Legal Provisions
        Relating to IETF Documents
        (http://trustee.ietf.org/license-info).

        This version of this YANG module is part of RFC XXXX; see
        the RFC itself for full legal notices.";

        // RFC Ed.: replace XXXX with actual RFC number and remove this
        // note.

        // RFC Ed.: update the date below with the date of RFC
        // publication and remove this note.

     revision 2014-07-01 {
       description
       "Changes based on Opendaylight Testing.";
       reference "https://tools.ietf.org/html/draft-penno-sfc-yang";
     }

     // Locator definitions

     // Transport type definitions
     identity transport-type {
       description
         "Base identity from which specific transport types are



Penno, et al.             Expires July 6, 2016                 [Page 40]

Internet-Draft       Yang Model for Service Chaining        January 2016


          derived.";
     }

     identity mac {
       base "sl-transport-type";
       description "Simple MAC with optional VLAN transport type";
     }

     identity vxlan-gpe {
       base "sl-transport-type";
       description "Programmable vxlan transport type";
     }

     identity gre {
       base "sl-transport-type";
       description "GRE transport type";
     }

     identity mpls {
       base "sl-transport-type";
       description "Multi Protocol Label Switching transport type";
     }

     identity other {
       base "sl-transport-type";
       description "unspecified transport type";
     }

     identity sl-transport-type {
       base "transport-type";
       description
         "This identity is used as a base for all transport
          types";

     }

     typedef sl-transport-type-def {
       type identityref {
         base "sl-transport-type";
       }
       description "This type is used to reference all
         registered transport types";
     }

     grouping lisp-locator {
       description
         "Data plane-locator: Lisp Eid(IP)";
       leaf eid {



Penno, et al.             Expires July 6, 2016                 [Page 41]

Internet-Draft       Yang Model for Service Chaining        January 2016


         type inet:ip-address;
         description "Data-plane IP address";
       }
     }

     grouping ip-port-locator {
       description
         "Data plane-locator: IP address and L4 port";
       leaf ip {
         type inet:ip-address;
         description "Data-plane IP address";
       }
       leaf port {
         type inet:port-number;
         description "Data-plane port number";
       }
     }

     grouping mac-address-locator {
       description
         "Data plane-locator: mac address and optional vlan-id";
       leaf mac {
         type yang:mac-address;
         description "Data-plane MAC address";
       }
       leaf vlan-id {
         type uint16 {
           range "1..4094";
         }
         description "Data-plane VLAN ID address";
       }
     }

     grouping mpls-locator {
       description
         "Data plane-locator: MPLS label";
       leaf mpls-label {
         type uint32 {
           range "1..1048575";
         }
         description "MPLS Label, 20 bits";
       }
     }

     grouping function-locator {
       description
         "When SF is co-located with SFF, this could be the name of a
          function or method.";



Penno, et al.             Expires July 6, 2016                 [Page 42]

Internet-Draft       Yang Model for Service Chaining        January 2016


       leaf function-name {
         type string;
         description "Function or method name";
       }
     }

     grouping other-locator {
       description
         "Other locator";
       leaf other-name {
         type string;
         description "A other or undefined locator";
       }
     }

     grouping data-plane-locator {
       description
         "This group presents data-plane locator
          information for service function elements in the domain";
       choice locator-type {
         mandatory true;
         case ip {
           uses ip-port-locator;
         }
         case lisp {
           uses lisp-locator;
         }
         case mac {
           uses mac-address-locator;
         }
         case function {
           uses function-locator;
         }
         case mpls {
           uses mpls-locator;
         }
         case other {
           uses other-locator;
         }
         description "The collection of all possible data-plane
           locators. Only one can be chosen";
       }
       leaf transport {
         type identityref {
           base sfc-sl:sl-transport-type;
         }
         description
           "The encapsulation used to carry NSH packets";



Penno, et al.             Expires July 6, 2016                 [Page 43]

Internet-Draft       Yang Model for Service Chaining        January 2016


       }
     }
   }


   <CODE ENDS>


11.  Rendered Service Path (RSP)

   This module holds the actual service-hops a packet will traverse when
   forwarded through a specific service path.

11.1.  Module Structure

module: rendered-service-path
   +--ro rendered-service-paths
      +--ro rendered-service-path* [name]
         +--ro name                            sfc-common:rsp-name
         +--ro parent-service-function-path?   sfc-common:sfp-name
         +--ro transport-type?                 sfc-sl:sl-transport-type-def
         +--ro context-metadata?               sfc-md:context-metadata-ref
         +--ro variable-metadata?              sfc-md:variable-metadata-ref
         +--ro tenant-id?                      string
         +--ro service-statistics
         |  +--ro bytes-in?     yang:zero-based-counter64
         |  +--ro bytes-out?    yang:zero-based-counter64
         |  +--ro packets-in?   yang:zero-based-counter64
         |  +--ro packet-out?   yang:zero-based-counter64
         +--ro rendered-service-path-hop* [hop-number]
         |  +--ro hop-number                            uint8
         |  +--ro service-function-name?                sfc-common:sf-name
         |  +--ro service-function-group-name?          string
         |  +--ro service-function-forwarder?           sfc-common:sff-name
         |  +--ro service-function-forwarder-locator?   sfc-common:sff-data-plane-locator-name
         |  +--ro service-index?                        uint8
         +--ro service-chain-name              sfc-common:sfc-name
         +--ro starting-index?                 uint8
         +--ro path-id                         uint32
         +--ro symmetric-path-id?              uint32
rpcs:
   +---x trace-rendered-service-path
   |  +--ro input
   |  |  +--ro name?   string
   |  +--ro output
   |     +--ro result?   boolean
   +---x delete-rendered-path
   |  +--ro input



Penno, et al.             Expires July 6, 2016                 [Page 44]

Internet-Draft       Yang Model for Service Chaining        January 2016


   |  |  +--ro name?   string
   |  +--ro output
   |     +--ro result?   boolean
   +---x create-rendered-path
   |  +--ro input
   |  |  +--ro name?                           string
   |  |  +--ro parent-service-function-path?   string
   |  |  +--ro symmetric?                      boolean
   |  |  +--ro (context-header-allocation-type-1)?
   |  |     +--:(vxlan-classifier)
   |  |     |  +--ro vxlan-classifier-enabled?       boolean
   |  |     +--:(mobility)
   |  |     |  +--ro mobility-allocation-enabled?    boolean
   |  |     +--:(dc)
   |  |        +--ro dc-allocation-enabled?          boolean
   |  +--ro output
   |     +--ro name?   string
   +---x read-rendered-service-path-first-hop
   |  +--ro input
   |  |  +--ro name?   string
   |  +--ro output
   |     +--ro rendered-service-path-first-hop
   |        +--ro starting-index?      uint8
   |        +--ro symmetric-path-id?   uint32
   |        +--ro path-id?             uint32
   |        +--ro transport-type?      sfc-sl:sl-transport-type-def
   |        +--ro ip?                  inet:ip-address
   |        +--ro port?                inet:port-number
   |        +--ro mpls-label?          uint32
   +---x read-rsp-first-hop-by-sft-list
      +--ro input
      |  +--ro sfst?       sfc-sfst:service-function-scheduler-type
      |  +--ro sft-list*   sfc-common:sft-type
      +--ro output
         +--ro rendered-service-path-first-hop
            +--ro starting-index?      uint8
            +--ro symmetric-path-id?   uint32
            +--ro path-id?             uint32
            +--ro transport-type?      sfc-sl:sl-transport-type-def
            +--ro ip?                  inet:ip-address
            +--ro port?                inet:port-number
            +--ro mpls-label?          uint32

11.2.  Rendered Service Path Module

   <CODE BEGINS> file "rendered-service-path.yang"

   module rendered-service-path {



Penno, et al.             Expires July 6, 2016                 [Page 45]

Internet-Draft       Yang Model for Service Chaining        January 2016


     namespace "urn:cisco:params:xml:ns:yang:sfc-rsp";

     prefix sfc-rsp;

     import service-function-scheduler-type {
         prefix sfc-sfst;
         revision-date 2015-03-12;
         }
     import service-function-path-metadata {
         prefix sfc-md;
         revision-date 2014-07-01;
         }
     import service-locator {
         prefix sfc-sl;
         revision-date 2014-07-01;
         }
     import service-statistics {
         prefix sfc-ss;
         revision-date 2014-07-01;
         }
     import sfc-common {
         prefix sfc-common;
         }

     organization "Cisco Systems, Inc.";
     contact "Reinaldo Penno <repenno@cisco.com>";


     description
       "This module contains a collection of YANG definitions to
        manage Rendered Service Paths.

        Copyright (c) 2013 IETF Trust and the persons identified as
        authors of the code.  All rights reserved.

        Redistribution and use in source and binary forms, with or
        without modification, is permitted pursuant to, and subject
        to the license terms contained in, the Simplified BSD License
        set forth in Section 4.c of the IETF Trust's Legal Provisions
        Relating to IETF Documents
        (http://trustee.ietf.org/license-info).

        This version of this YANG module is part of RFC XXXX; see
        the RFC itself for full legal notices.";

        // RFC Ed.: replace XXXX with actual RFC number and remove this
        // note.




Penno, et al.             Expires July 6, 2016                 [Page 46]

Internet-Draft       Yang Model for Service Chaining        January 2016


        // RFC Ed.: update the date below with the date of RFC
        // publication and remove this note.

     revision 2014-07-01 {
       description
         "Changes based on Opendaylight Testing and IETF SFC ml.";
       reference "https://tools.ietf.org/html/draft-penno-sfc-yang";
     }

     // Rendered Service Path

     container rendered-service-paths {
       config false;
       description
         "A container that holds the list of all Rendered Service Paths
          in a SFC domain";
       list rendered-service-path {
         key "name";
         description
           "A list that holds operational data for all RSPs in the
            domain";
         leaf name {
           type sfc-common:rsp-name;
           description
             "The name of this rendered function path. This is the same
              name as the associated SFP";
         }
         leaf parent-service-function-path {
           type sfc-common:sfp-name;
           description
             "Service Function Path from which this RSP was
              instantiated";

         }
         leaf transport-type {
           type sfc-sl:sl-transport-type-def;
           default "sfc-sl:vxlan-gpe";
           description
             "Transport type as set in the Parent Service Function
              Path";
         }
         leaf context-metadata {
           type sfc-md:context-metadata-ref;
           description
             "The name of the associated context metadata";
         }
         leaf variable-metadata {
           type sfc-md:variable-metadata-ref;



Penno, et al.             Expires July 6, 2016                 [Page 47]

Internet-Draft       Yang Model for Service Chaining        January 2016


           description
             "The name of the associated variable metadata";
         }
         leaf tenant-id {
           type string;
           description
             "This RSP was created for a specific tenant-id";
         }
         uses sfc-ss:service-statistics-group {
           description "Global Rendered Service Path statistics";
         }
         list rendered-service-path-hop {
           key "hop-number";
           leaf hop-number {
             type uint8;
             description
               "A Monotonically increasing number";
           }
           leaf service-function-name {
             type sfc-common:sf-name;
             description
               "Service Function name";
           }
           leaf service-function-group-name {
             type string;
             description
               "Service Function group name";
           }
           leaf service-function-forwarder {
             type sfc-common:sff-name;
             description
               "Service Function Forwarder name";
           }
           leaf service-function-forwarder-locator {
             type sfc-common:sff-data-plane-locator-name;
             description
               "The name of the SFF data plane locator";
           }
           leaf service-index {
             type uint8;
             description
               "Provides location within the service path.
                Service index MUST be decremented by service functions
                or proxy nodes after performing required services.  MAY
                be used in conjunction with service path for path
                selection.  Service Index is also valuable when
                troubleshooting/reporting service paths.  In addition to
                location within a path, SI can be used for loop



Penno, et al.             Expires July 6, 2016                 [Page 48]

Internet-Draft       Yang Model for Service Chaining        January 2016


                detection.";
           }
           ordered-by user;
           description
             "A list of service functions that compose the
              service path";
         }
         leaf service-chain-name {
           type sfc-common:sfc-name;
           mandatory true;
           description
             "The Service Function Chain used as blueprint for this
              path";
         }
         leaf starting-index {
           type uint8;
           description
             "Starting service index";
         }
         leaf path-id {
           type uint32 {
             range "0..16777216";
           }
           mandatory true;
           description
             "Identifies a service path.
              Participating nodes MUST use this identifier for path
              selection.  An administrator can use the service path
              value for reporting and troubleshooting packets along
              a specific path.";
         }
         leaf symmetric-path-id {
           type uint32 {
             range "0..16777216";
           }
           description
             "Identifies the associated symmetric path, if any.";
         }
       }
     }

     rpc trace-rendered-service-path {
       description
         "Requests a NSH Traceroute through the specified
          rendered service path";
       input {
         leaf name {
           type string;



Penno, et al.             Expires July 6, 2016                 [Page 49]

Internet-Draft       Yang Model for Service Chaining        January 2016


           description
             "The name of the rendered function path.";
         }
       }
       output {
         leaf result {
           type boolean;
           description
             "Whether NSH traceroute for the requested path was
              successful";
         }
       }
     }


     rpc delete-rendered-path {
       description
         "Delete a Rendered Service Path";
       input {
         leaf name {
           type string;
           description
             "The name of this rendered function path.";
         }
       }
       output {
         leaf result {
           type boolean;
           description
             "True if Rendered Service Path was deleted, otherwise
              false";
         }
       }
     }

     rpc create-rendered-path {
       description
         "Created a Rendered Service Path";
       input {
         leaf name {
           type string;
           description
             "The name of this rendered function path.";
         }
         leaf parent-service-function-path {
           type string;
           description
             "Service Function Path from which this RSP was



Penno, et al.             Expires July 6, 2016                 [Page 50]

Internet-Draft       Yang Model for Service Chaining        January 2016


              instantiated";
         }
         leaf symmetric {
           type boolean;
           default false;
           description
             "If the chain is symmetric we will create two service
              paths, one ingress and another egress. Packets traverse
              the egress service path in the reverse order of the
              ingress path";
         }
         choice context-header-allocation-type-1 {
           case vxlan-classifier {
             leaf vxlan-classifier-enabled {
               type boolean;
               default false;
               description "Client needs service path to implement
                 VXLAN overlay classifier metadata allocation";
             }
           }
           case mobility {
             leaf mobility-allocation-enabled {
               type boolean;
               default false;
               description "Client needs service path to implement
                 Mobility Metadata allocation";
             }
           }
           case dc {
             leaf dc-allocation-enabled {
               type boolean;
               default false;
               description "Client needs service path to implement
                 DC Allocation Metadata allocation";
             }
           }
         }
       }
       output {
         leaf name {
           type string;
           description "Name of the created Rendered Service Path";
         }
       }
     }

     grouping rendered-service-path-first-hop-info {
       description



Penno, et al.             Expires July 6, 2016                 [Page 51]

Internet-Draft       Yang Model for Service Chaining        January 2016


         "This groups holds the the container that provides
          information about the first hop in a rendered service
          path";
       container rendered-service-path-first-hop {
         description
           "Provides all necessary information for a system to construct
            a NSH header and associated overlay packet to target the
            first service hop of a Rendered Service Path";
         leaf starting-index {
           type uint8;
           description
               "Starting service index";
         }
         leaf symmetric-path-id {
           type uint32 {
             range "0..16777216";
           }
           description
             "Identifies the associated symmetric path, if any.";
         }
         leaf path-id {
           type uint32 {
             range "0..16777216";
           }
           description
             "Identifies a service path.
              Participating nodes MUST use this identifier for path
              selection.  An administrator can use the service path
              value for reporting and troubleshooting packets along
              a specific path.";
         }
         leaf transport-type {
           type sfc-sl:sl-transport-type-def;
           description
             "Defines the data-plane protocol used by the first
              Service Function Forwarder";
         }

         uses sfc-sl:ip-port-locator;
         uses sfc-sl:mpls-locator;
       }
     }

     rpc read-rendered-service-path-first-hop {
       description
         "Read all the necessary information for the first hop of a
         Rendered Service Path";
       input {



Penno, et al.             Expires July 6, 2016                 [Page 52]

Internet-Draft       Yang Model for Service Chaining        January 2016


         leaf name {
           type string;
           description
             "The name of this rendered service path";
         }
       }
       output {
         uses rendered-service-path-first-hop-info;
       }
     }

     rpc read-rsp-first-hop-by-sft-list {
       description
         "Read all the necessary information for the first hop of a
         Rendered Service Path by ServiceFunctionTypeIdentity list";
       input {
         leaf sfst {
           type sfc-sfst:service-function-scheduler-type;
           description "Service function scheduler type for RSP";
         }
         leaf-list sft-list {
           type sfc-common:sft-type;
           description "List of service function type";

         }
       }
       output {
         uses rendered-service-path-first-hop-info;
       }
     }

   }


   <CODE ENDS>


12.  Service Function Classifier (SCF)

   This module contains a collection of YANG definitions for managing
   service classification functions.

12.1.  Module Structure








Penno, et al.             Expires July 6, 2016                 [Page 53]

Internet-Draft       Yang Model for Service Chaining        January 2016


   module: service-function-classifier
      +--rw service-function-classifiers
         +--rw service-function-classifier* [name]
            +--rw name                              string
            +--rw access-list?                      string
            +--rw scl-service-function-forwarder* [name]
               +--rw name         string
               +--rw (attachment-point-type)?
                  +--:(bridge)
                  |  +--rw bridge?      string
                  +--:(interface)
                     +--rw interface?   string

12.2.  Service Function Classifier Module

   <CODE BEGINS> file "service-function-classifier@2014-07-01.yang"

   module service-function-classifier {
     yang-version 1;

     namespace "urn:cisco:params:xml:ns:yang:sfc-scf";

     prefix sfc-scf;

     // import ietf-acl {prefix "ietf-acl";}

     organization "Cisco Systems, Inc.";
     contact "Reinaldo Penno <repenno@cisco.com>";

     description
       "This module contains a collection of YANG definitions for
        managing service classification functions.";

     revision 2014-07-01 {
       description
         "Revised based on Opendaylight Project feedback";
       reference "https://tools.ietf.org/html/draft-penno-sfc-yang";
     }

     grouping attachment-point {
       description
         "Reusable group of all possible attachment point types";
       choice attachment-point-type {
         description
           "Provides a choice between access list
            attachment point types";
         case bridge {
           leaf bridge {



Penno, et al.             Expires July 6, 2016                 [Page 54]

Internet-Draft       Yang Model for Service Chaining        January 2016


             type string;
             description
               "OVS bridge as an attachment point";
           }
         }
         case interface {
           leaf interface {
             type string;
             description
               "interface name as attachment point";
           }
         }
       }
     }

     container service-function-classifiers {
       description
       "Classifier container which represents the ACL being applied,
        attachment point and the chain associated with that ACL.";
       list service-function-classifier {
         key "name";
         description
           "A list that holds all service function classifiers";
         leaf name {
           type string;
            description
            "Classification function name";
         }
         leaf access-list {
           type string;
           description
             "The ACL name associated with this classifier";
         }

         list scl-service-function-forwarder {
           key "name";
           description
             "The classifier will be attached to these SFFs";
           leaf name {
             type string;
             description
               "The classifier will be attached to this SFF";
           }
           uses attachment-point {
             description "Classifier attachment point";
           }
         }
       }



Penno, et al.             Expires July 6, 2016                 [Page 55]

Internet-Draft       Yang Model for Service Chaining        January 2016


     }
   }


   <CODE ENDS>


13.  Service Function Description Monitor Report (SF-DESC-MON-RPT)

   This module for entities implementing the network service functions
   for Service Function Chaining

13.1.  Module Structure

module: service-function-description-monitor-report
   +--rw service-function
      +--rw description-info
      |  +--rw data-plane-ip?         inet:ip-address
      |  +--rw data-plane-port?       inet:port-number
      |  +--rw type?                  string
      |  +--rw number-of-dataports?   uint32
      |  +--rw capabilities
      |     +--rw supported-packet-rate?   uint32
      |     +--rw supported-bandwidth?     uint32
      |     +--rw supported-ACL-number?    uint32
      |     +--rw RIB-size?                uint32
      |     +--rw FIB-size?                uint32
      |     +--rw ports-bandwidth
      |        +--rw port-bandwidth* [port-id]
      |           +--rw port-id                uint32
      |           +--rw ipaddress?             inet:ipv4-address
      |           +--rw macaddress?            yang:mac-address
      |           +--rw supported-bandwidth?   uint32
      +--rw monitoring-info
         +--rw liveness?               boolean
         +--rw resource-utilization
            +--rw packet-rate-utilization?          uint32
            +--rw bandwidth-utilization?            uint32
            +--rw CPU-utilization?                  uint32
            +--rw memory-utilization?               uint32
            +--rw available-memory?                 uint32
            +--rw RIB-utilization?                  uint32
            +--rw FIB-utilization?                  uint32
            +--rw power-utilization?                uint32
            +--rw SF-ports-bandwidth-utilization
               +--rw port-bandwidth-utilization* [port-id]
                  +--rw port-id                  uint32
                  +--rw bandwidth-utilization?   uint32



Penno, et al.             Expires July 6, 2016                 [Page 56]

Internet-Draft       Yang Model for Service Chaining        January 2016


                  +--rw rx-packet?               yang:zero-based-counter64
                  +--rw tx-packet?               yang:zero-based-counter64
                  +--rw rx-bytes?                yang:zero-based-counter64
                  +--rw tx-bytes?                yang:zero-based-counter64
                  +--rw rx-bytes-rate?           uint32
                  +--rw tx-bytes-rate?           uint32
                  +--rw rx-packet-rate?          uint32
                  +--rw tx-packet-rate?          uint32
rpcs:
   +---x get-SF-description
   |  +--ro output
   |     +--ro description-info
   |        +--ro data-plane-ip?         inet:ip-address
   |        +--ro data-plane-port?       inet:port-number
   |        +--ro type?                  string
   |        +--ro number-of-dataports?   uint32
   |        +--ro capabilities
   |           +--ro supported-packet-rate?   uint32
   |           +--ro supported-bandwidth?     uint32
   |           +--ro supported-ACL-number?    uint32
   |           +--ro RIB-size?                uint32
   |           +--ro FIB-size?                uint32
   |           +--ro ports-bandwidth
   |              +--ro port-bandwidth* [port-id]
   |                 +--ro port-id                uint32
   |                 +--ro ipaddress?             inet:ipv4-address
   |                 +--ro macaddress?            yang:mac-address
   |                 +--ro supported-bandwidth?   uint32
   +---x get-SF-monitoring-info
      +--ro output
         +--ro monitoring-info
            +--ro liveness?               boolean
            +--ro resource-utilization
               +--ro packet-rate-utilization?          uint32
               +--ro bandwidth-utilization?            uint32
               +--ro CPU-utilization?                  uint32
               +--ro memory-utilization?               uint32
               +--ro available-memory?                 uint32
               +--ro RIB-utilization?                  uint32
               +--ro FIB-utilization?                  uint32
               +--ro power-utilization?                uint32
               +--ro SF-ports-bandwidth-utilization
                  +--ro port-bandwidth-utilization* [port-id]
                     +--ro port-id                  uint32
                     +--ro bandwidth-utilization?   uint32
                     +--ro rx-packet?               yang:zero-based-counter64
                     +--ro tx-packet?               yang:zero-based-counter64
                     +--ro rx-bytes?                yang:zero-based-counter64



Penno, et al.             Expires July 6, 2016                 [Page 57]

Internet-Draft       Yang Model for Service Chaining        January 2016


                     +--ro tx-bytes?                yang:zero-based-counter64
                     +--ro rx-bytes-rate?           uint32
                     +--ro tx-bytes-rate?           uint32
                     +--ro rx-packet-rate?          uint32
                     +--ro tx-packet-rate?          uint32

13.2.  Service Function Description Monitor Report Module

<CODE BEGINS> file "service-function-description-monitor-report.yang"

module service-function-description-monitor-report {
    namespace "urn.intel.params:xml:ns:sf-desc-mon-rpt";
    prefix sf-desc-mon-rpt;

    import ietf-inet-types {
        prefix inet;
        revision-date 2010-09-24;
        }
    import ietf-yang-types {
        prefix yang;
        revision-date 2010-09-24;
        }

    organization "Intel Inc.";
    contact "honglix.chen@intel.com";
    description
        "The module for entities implementing the network service functions for Service Function Chaining";

    revision 2014-11-05 {
        description "Initial revision.";
    }

    grouping SF-description {
        leaf data-plane-ip {
            type inet:ip-address;
            description "Data-plane IP address";
        }
        leaf data-plane-port {
            type inet:port-number;
            description "Data-plane port number";
        }
        leaf type {
            type string;
            description "SF type";
        }
        leaf number-of-dataports {
            type uint32;
            description "Number of dataports";



Penno, et al.             Expires July 6, 2016                 [Page 58]

Internet-Draft       Yang Model for Service Chaining        January 2016


        }
        container capabilities {
            leaf supported-packet-rate {
                type uint32;
                description "Maximum Mpps supported";
            }
            leaf supported-bandwidth {
                type uint32;
                description "Maximum Mbps supported ";
            }
            leaf supported-ACL-number {
                type uint32;
                description "ACL number of the service function";
            }
            leaf RIB-size {
                type uint32;
                description "Number of Routing Information Table's entries.";
            }
            leaf FIB-size {
                type uint32;
                description "Number of Forwarding Information Table's entries.";
            }
            container ports-bandwidth {
                list port-bandwidth {
                    key port-id;
                    leaf port-id {
                        type uint32;
                        description "The id of the port ";
                    }
                    leaf ipaddress {
                        type inet:ipv4-address;
                        description "IP address of the port";
                    }
                    leaf macaddress {
                       type yang:mac-address;
                       description "MAC address of the the port";
                    }
                    leaf supported-bandwidth {
                        type uint32;
                        description "Maximum Mbps supported by the port";
                    }
                }
            }
        }
    }

    grouping SF-monitoring-info {
        leaf liveness {



Penno, et al.             Expires July 6, 2016                 [Page 59]

Internet-Draft       Yang Model for Service Chaining        January 2016


            type boolean;
            description "Liveness flag of the service function";
        }
        container resource-utilization {
            leaf packet-rate-utilization {
                type uint32;
                description "Percentage of current package rate utilization.";
            }
            leaf bandwidth-utilization {
                type uint32;
                description "Percentage of bandwidth utilization.";
            }
            leaf CPU-utilization {
                type uint32;
                description "Percentage of CPU utilization.";
            }
            leaf memory-utilization {
                type uint32;
                description "Percentage of memory utilization.";
            }
            leaf available-memory {
                type uint32;
                description "Available memory size of the service function in MB.";
            }
            leaf RIB-utilization {
                type uint32;
                description "Percentage of Routing Information Table utilization.";
            }
            leaf FIB-utilization {
                type uint32;
                description "Percentage of Forwarding Information Table utilization.";
            }
            leaf power-utilization {
                type uint32;
                description "power utilization in W.";
            }
            container SF-ports-bandwidth-utilization {
                list port-bandwidth-utilization {
                    key port-id;
                    leaf port-id {
                       type uint32;
                       description "The id of the port ";
                    }
                    leaf bandwidth-utilization {
                       type uint32;
                       description "Percentage of the port's supported bandwidth utilization.";
                    }
                    leaf rx-packet {



Penno, et al.             Expires July 6, 2016                 [Page 60]

Internet-Draft       Yang Model for Service Chaining        January 2016


                       type yang:zero-based-counter64;
                       description "The number of received packets.";
                    }
                    leaf tx-packet {
                       type yang:zero-based-counter64;
                       description "The number of transmitted packets.";
                    }
                    leaf rx-bytes {
                       type yang:zero-based-counter64;
                       description "The number of received bytes.";
                    }
                    leaf tx-bytes {
                       type yang:zero-based-counter64;
                       description "The number of transmitted bytes.";
                    }
                    leaf rx-bytes-rate {
                       type uint32;
                       description "Bytes received rate.";
                    }
                    leaf tx-bytes-rate {
                       type uint32;
                       description "Bytes transmitted rate.";
                    }
                    leaf rx-packet-rate {
                       type uint32;
                       description "Packets received rate.";
                    }
                    leaf tx-packet-rate {
                       type uint32;
                       description "Packets transmitted rate.";
                    }
                }
            }
        }
    }

    container service-function {
        container description-info {
            uses SF-description;
        }
        container monitoring-info {
            uses SF-monitoring-info;
        }
    }

    rpc get-SF-description {
        description
            "Get service function description information.";



Penno, et al.             Expires July 6, 2016                 [Page 61]

Internet-Draft       Yang Model for Service Chaining        January 2016


        output {
            container description-info {
                uses SF-description;
            }
        }
    }

    rpc get-SF-monitoring-info {
        description
            "Get current service function monitoring information.";
        output {
            container monitoring-info {
                uses SF-monitoring-info;
            }
        }
    }
}



<CODE ENDS>


14.  Service Function Description Monitor (SF-DESC-MON)

   This module is used to create description and monitoring information
   of Service Function extensions to service-function model

14.1.  Module Structure






















Penno, et al.             Expires July 6, 2016                 [Page 62]

Internet-Draft       Yang Model for Service Chaining        January 2016


module: service-function-description-monitor
augment /sfc-sf:service-functions-state/sfc-sf:service-function-state:
   +--ro sfc-sf-desc-mon
      +--ro description-info
      |  +--ro data-plane-ip?         inet:ip-address
      |  +--ro data-plane-port?       inet:port-number
      |  +--ro type?                  string
      |  +--ro number-of-dataports?   uint32
      |  +--ro capabilities
      |     +--ro supported-packet-rate?   uint32
      |     +--ro supported-bandwidth?     uint32
      |     +--ro supported-ACL-number?    uint32
      |     +--ro RIB-size?                uint32
      |     +--ro FIB-size?                uint32
      |     +--ro ports-bandwidth
      |        +--ro port-bandwidth* [port-id]
      |           +--ro port-id                uint32
      |           +--ro ipaddress?             inet:ipv4-address
      |           +--ro macaddress?            yang:mac-address
      |           +--ro supported-bandwidth?   uint32
      +--ro monitoring-info
         +--ro liveness?               boolean
         +--ro resource-utilization
            +--ro packet-rate-utilization?          uint32
            +--ro bandwidth-utilization?            uint32
            +--ro CPU-utilization?                  uint32
            +--ro memory-utilization?               uint32
            +--ro available-memory?                 uint32
            +--ro RIB-utilization?                  uint32
            +--ro FIB-utilization?                  uint32
            +--ro power-utilization?                uint32
            +--ro SF-ports-bandwidth-utilization
               +--ro port-bandwidth-utilization* [port-id]
                  +--ro port-id                  uint32
                  +--ro bandwidth-utilization?   uint32
                  +--ro rx-packet?               yang:zero-based-counter64
                  +--ro tx-packet?               yang:zero-based-counter64
                  +--ro rx-bytes?                yang:zero-based-counter64
                  +--ro tx-bytes?                yang:zero-based-counter64
                  +--ro rx-bytes-rate?           uint32
                  +--ro tx-bytes-rate?           uint32
                  +--ro rx-packet-rate?          uint32
                  +--ro tx-packet-rate?          uint32








Penno, et al.             Expires July 6, 2016                 [Page 63]

Internet-Draft       Yang Model for Service Chaining        January 2016


14.2.  Service Function Description Monitor Report Module

<CODE BEGINS> file "service-function-description-monitor.yang"

module service-function-description-monitor {
    namespace "urn.intel.params:xml:ns:sf-desc-mon";
    prefix sf-desc-mon;

    import service-function {
        prefix sfc-sf;
        revision-date 2014-07-01;
        }
    import service-function-description-monitor-report {
        prefix sf-desc-mon-rpt;
        revision-date 2014-11-05;
        }

    organization "Intel Inc.";
    contact "honglix.chen@intel.com";
    description
        "Create description and monitoring information of Service Function extensions to service-function model";

    revision 2014-12-01 {
        description "Initial revision.";
    }

    augment "/sfc-sf:service-functions-state/sfc-sf:service-function-state" {
        description "Service function description and monitoring information";
        container sfc-sf-desc-mon {
            container description-info {
                uses sf-desc-mon-rpt:SF-description;
            }
            container monitoring-info {
                uses sf-desc-mon-rpt:SF-monitoring-info;
            }
        }
    }
}


<CODE ENDS>


15.  IANA Considerations

   TBD





Penno, et al.             Expires July 6, 2016                 [Page 64]

Internet-Draft       Yang Model for Service Chaining        January 2016


16.  Security Considerations

17.  Acknowledgements

   Thanks to Jan Medved, Ron Parker, Jan Lindblad, David Goldberg, Vina
   Ermagan, Sam Hague and Vinayak Joshi and for reviews and suggestions.

18.  Changes

   -14

   o  Updated all modules according to implementation experience

   -11

   o  Added new co-authors

   o  changed RSP and SFP models to allow multiple encap paths.

   o  Added the "need reclassififcation" leaf to allow a Service
      Function to tell a SFF that packet reclassification is needed

   o  Added RSP first hop container to allow SFC applications to request
      the ingress hop to a RSP.  These applciations (such as dynamic
      classifier) treat RSP as a black box and only need ingress
      locator.

   -10

   This new revision comes after considerable control and dataplane
   interop testing.  The new changes reflect what we found necessary for
   building a well-rounded solution.

   o  Added Rendered Service Path Model

   o  Added Service Function Description Monitor and Report Models

   o  Updated Service Function Path (It allow users to control certain
      aspects of RSPs, new symmetric and metadata leaves)

   o  Updated Service Function Forwarder model

   o  Updated Service Function Model

   o  Updated Service Function Type Model (HTTP Header Enrichment
      service)

   o  Update Service Locator Model (MPLS encap)



Penno, et al.             Expires July 6, 2016                 [Page 65]

Internet-Draft       Yang Model for Service Chaining        January 2016


   o  Removed Service Node

   o  Others

   -09

   o  Modifed Service Function Forwarder OVS model based on OVS/
      Openstack deployment experience

   -08

   o  Removed VXLAN-GPE model

   o  Added Service Function Forwarder OVS model

   o  Added metadata reference to Service Function Path

   -07

   o  All models that need data plane locators reference service locator
      model

   o  Service Locator module has locators for IP:port, VLAN:MAC, LISP

   o  A SF can have multiple data place locators

   o  SF and SFF are decoupled and have their own views of the network

   o  Service Function Chains and derived path can be symmtric (bi-dir)
      or not

   o  Service Function Types separated into a model

   o  Service Function Path is a collection of service hops.  This
      allows hops such as SFF + classifier.

   -06

   o  Introduced operational tree in some models based on testing and
      user feedback.

   o  Introduced RPCs in some models

   o  Service Function Path needs SFC from which it will be instantiated

   o  Updated all module structures

   o  Introduced Service Locator module



Penno, et al.             Expires July 6, 2016                 [Page 66]

Internet-Draft       Yang Model for Service Chaining        January 2016


   -05

   Changes based on Opendaylight Implementation Testing and Sfc-dev
   mailing list feedback

   o  Service Node becomes a container for Service Functions.  Moved
      data plane items to SFF.

   o  Fixed Service Function Forwarders into a list so we cna have
      multiple in a system

   o  Fixed Service Function Chain so it becomes a list of lists.

   o  Created RPCs for Service Functions and Service Chain

   -04

   o  Fixed list inside Service Function Chain to read service-function-
      type

   o  Small comment fixes

   -03

   o  Revision dates consistent

   o  Service function chain to container + list in order to allow
      multiple

   o  Service Function Path to cotainer + list

   o  VXLAN-gpe vni to multiple 8-bit fields

   o  Consistent typeref use

   o  Other consistency fixes

   -02

   o  After Opendaylight Testing converted multiple leafs to lists
      throughout all models

   o  Removed transport dependency.  Transport could be layer-2, layer-
      3, etc

   o  Used pathrefs similar to ietf-interfaces to reference
      configuration names




Penno, et al.             Expires July 6, 2016                 [Page 67]

Internet-Draft       Yang Model for Service Chaining        January 2016


   o  Other consistency fixes

19.  References

19.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616,
              DOI 10.17487/RFC2616, June 1999,
              <http://www.rfc-editor.org/info/rfc2616>.

19.2.  Informative References

   [I-D.ietf-sfc-architecture]
              Halpern, J. and C. Pignataro, "Service Function Chaining
              (SFC) Architecture", draft-ietf-sfc-architecture-11 (work
              in progress), July 2015.

   [I-D.ietf-sfc-nsh]
              Quinn, P. and U. Elzur, "Network Service Header", draft-
              ietf-sfc-nsh-01 (work in progress), July 2015.

   [I-D.ietf-sfc-problem-statement]
              Quinn, P. and T. Nadeau, "Service Function Chaining
              Problem Statement", draft-ietf-sfc-problem-statement-13
              (work in progress), February 2015.

   [I-D.quinn-vxlan-gpe]
              Quinn, P., Manur, R., Kreeger, L., Lewis, D., Maino, F.,
              Smith, M., Agarwal, P., Yong, L., Xu, X., Elzur, U., Garg,
              P., and D. Melman, "Generic Protocol Extension for VXLAN",
              draft-quinn-vxlan-gpe-04 (work in progress), February
              2015.

Authors' Addresses










Penno, et al.             Expires July 6, 2016                 [Page 68]

Internet-Draft       Yang Model for Service Chaining        January 2016


   Reinaldo Penno
   Cisco Systems
   170 West Tasman Dr
   San Jose  CA
   USA

   Email: repenno@cisco.com


   Paul Quinn
   Cisco Systems
   170 West Tasman Dr
   San Jose  CA
   USA

   Email: paulq@cisco.com


   Danny Zhou
   Intel Corporation
   2200 Mission College Blvd.
   Santa Clara  CA
   USA

   Email: danny.zhou@intel.com


   Johnson Li
   Intel Corporation
   2200 Mission College Blvd.
   Santa Clara  CA
   USA

   Email: johnson.li@intel.com

















Penno, et al.             Expires July 6, 2016                 [Page 69]
