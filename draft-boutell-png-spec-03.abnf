max = green), then blue (zero = black, max = blue).  The bit
output = ROUND(input * MAXOUTSAMPLE / MAXINSAMPLE)

sample = ROUND((intensity ^ encoder_gamma) * MAXSAMPLEVAL)

screen_gc = viewing_gamma / display_gamma

file_gamma = viewing_gamma / display_gamma

output = ROUND(input * MAXOUTSAMPLE / MAXINSAMPLE)

MAXINSAMPLE = (2^bitdepth)-1
MAXOUTSAMPLE = (2^desired_bitdepth)-1

gbright = sampleval / MAXSAMPLEVAL
bright = gbright ^ (1.0 / file_gamma)
vbright = bright ^ viewing_gamma
gcvideo = vbright ^ (1.0 / display_gamma)
fbval = ROUND(gcvideo * MAXFBVAL)

gcvideo = gbright^(viewing_gamma / (file_gamma*display_gamma))

output = alpha * foreground + (1-alpha) * background
gamout = pow(comppix, outfile_gamma);
gcvideo = (float) fbpix[i] / fb_maxsample;
linbg = pow(gcvideo, display_gamma / viewing_gamma);

output = input ^ gamma

output = input ^ gamma

file_gamma = camera_gamma * encoding_gamma

display_gamma = LUT_gamma * CRT_gamma

display_gamma = 2.5 / SGI_system_gamma

Vout = 4.5 * Vin                    if Vin < 0.018
Vout = 1.099 * (Vin^0.45) - 0.099   if Vin >= 0.018

x = X / (X + Y + Z)
y = Y / (X + Y + Z)

R=G=B=maximum.

m =  Yr Yg Yb
                 Zr Zg Zb

Y = m G
G = im Y
c = (unsigned long) n;
c = 0xedb88320L ^ (c >> 1);
c = c >> 1;
crc_table_computed = 1;
c = crc_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
