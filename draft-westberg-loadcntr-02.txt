INTERNET-DRAFT                                               L. Westberg
draft-westberg-loadcntr-02.txt                             Z. R. Turanyi
Expires: Apr. 2000                                              Ericsson
                                                           Oct. 23, 1999

                   Load Control of Real-Time Traffic

                   A 2-bit resource allocation scheme

                          Status of this Memo

   This document is an Internet Draft and is in full conformance with
   all provisionings of Section 10 of RFC 2026. Internet Drafts are
   working documents of the Internet Engineering Task Force (IETF), its
   Areas, and its Working Groups. Note that other groups may also
   distribute working documents as Internet Drafts.

   Internet Drafts are draft documents valid for a maximum of six
   months. Internet Drafts may be updated, replaced, or made obsolete by
   other documents at any time. It is not appropriate to use Internet
   Drafts as reference material or to cite them other than as "work in
   progress".

   The list of current Internet Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt

   The list of Internet Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.txt

Abstract

   The purpose of this memo is to present a new resource allocation
   scheme for diffserv networks, called Load Control. Load Control uses
   two-bit markers in packet headers to carry load information from core
   routers to edge devices. The scheme provides the capability to
   control the traffic load in the network without requiring signalling
   or any per-flow processing in the core routers. The complexity of
   Load Control is kept to a minimum to enable simple implementation.

1. Background and Motivation

   The amount of traffic carried in the Internet is now above the
   traffic of the world's telephony network. Still, Internet based
   communication services generate less income than plain old telephony
   services. Enabling value-added services over the Internet is
   therefore cruical for service providers. One significant class of
   such value-added services require real-time packet transportation. It

Westberg, Turanyi              Oct. 1999                        [Page 1]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

   can be expected that these real-time services will be popular as they
   are replication or natural extension of existing communication
   services, like telephony. Exact and reliable resource management
   (e.g., admission control) is essential to achieve high utilisation in
   networks with real-time transportation capabilities. The problem is
   hard mainly due to scalability reasons.

   With the introduction of differentiated services [RFC2475] it becomes
   possible to provide large scale, real-time services. The basic idea
   of diffserv is not to classify packets at each router, but only at
   the edge devices. The result - the required packet treatment - is
   stored and carried in the packet headers and core routers can carry
   out appropriate scheduling.

   The current definition of diffserv, however, does not contain any
   simple and scalable solution to the problem of resource provisioning
   and control. A number of approaches already exist to the problem
   [Berson97, Guerin97, Stoica99, Bernet99]. The scheme presented in
   this document does not require any state aggregation and aims at
   extreme simplicity and low cost of implementation together with good
   scaling properties. Load control operates edge-to-edge in a DS
   domain, or between two RSVP capable router, where only the edge
   devices keep flow state and do per-flow processing.  The main purpose
   of it is to provide a simple and scalable solution to the resource
   provisioning problem.

2. Overview

   Load control is achieved by two actions: admission control of
   incoming requests and the dropping of admitted flows in case of
   exceptional events, such as link failures.  Load Control uses two bit
   markers in the packet headers to gather information about the load
   level along various paths through the network. The core routers are
   able to mark passing packets to signal the exhaustion of resources to
   the edge devices.

   For admission control, the resource state of core routers is gathered
   by sending a specially marked packet, denoted "probe", from the
   ingress to the egress edge device.
    The probe result is then used by the ingress to decide flow
   acceptance or rejection and to set up traffic conditioning/policy.
   If rigid admission control is required, soft-state based reservations
   are supported. In this case the probe packet does both the probing
   and allocation of resources along the path. The latter method is
   comparable to signalling based schemes, but does not require
   processing of signalling messages in the core routers.

   Under normal circumstances, admission control is enough to control

Westberg, Turanyi              Oct. 1999                        [Page 2]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

   the load in the network. Nevertheless, when exceptional events (such
   as link failures) cause too much traffic to be re-routed over a link,
   the resulting severe congestion may degrade the quality of all flows
   on the link. In that case, the best solution might be to keep
   existing flows and suffer the loss of quality. However, for some
   services it may be desirable to drop some of the already admitted
   flows to protect the quality of the remaining flows. Thus, when
   severe congestion occurs, the core routers mark the headers of all
   (not only probe) packets to notify the edge devices of the congestion
   condition.

   In the following, we assume a DS domain where connection requests
   arrive at the edges of the domain via RSVP, by the command of a
   Bandwidth Broker or by other means. The requests may be generated
   directly at the edge by a gateway, which provides connection to other
   types of networks; or in hosts that are connected directly to the
   domain.

3. Operation of Load Control

   The load control scheme has two modes of operation:

   a) 'Simple marking' refers to a measurement-based admission scheme
   where routers measure the traffic volume and base the marking on
   these results.

   b) 'Unit-based reservations'. A "unit" represents a share of
   bandwidth in the network that could be reserved by the edge devices.
   This mode makes it possible to perform resource reservations,
   independently of the amount of traffic that is actually transmitted.

   Both modes can perform admission control of incoming requests and
   indicate exceptional events.

   In the appendices, we present some analysis of Load Control-
   properties, but a more detailed investigation can be found in
   [Tur99].

3.1 Simple Marking

   The idea of simple marking is that core routers measure the traffic
   and if they encounter a near exhaustion of resources, they mark
   passing probe packets, and thereby notifying the edge devices of the
   lack of resources.

   The scheme has the following steps of operation:

   1) Resource Probing. Before establishing the flow, the initiating

Westberg, Turanyi              Oct. 1999                        [Page 3]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

   edge device sends a probe packet into the network. The probe packet
   passes through the same routers as the actual traffic will pass
   through and are exposed to the marking function in each router. The
   marking performs an OR-operation of its own status and the incoming
   probe packet status - a marked packet must not be changed.  When the
   packet reaches the egress edge device, its header will reflect the
   resource status along that path.

   2) Reply resource status to ingress. When the egress edge device
   receives the probe packet, it copies the marker from the header to
   the header/payload of a reverse packet, and sends it back to the
   initiating party. The probe packet may be discarded, converted to an
   ordinary data packet or encapsulated (as mentioned above) and sent to
   the ingress edge device. The packet containing the probing result can
   also serve as a probe packet for the reverse path. This allows the
   initiating party to check for bi-directional resources.

   3) Acception/Rejection. The report packet is returned to the
   initiating ingress edge device, which uses the result of the probe to
   admit or block the request by setting up appropriate packet
   filtering, measuring and marking rules.

   4) Reaction to exceptional events. If a core router detects severe
   congestion on an interface, it starts marking all packets on that
   interface. If the egress edge device receives a marked packet which
   is not a probe packet, it can be interpreted as a sign of severe
   congestion along the path.  The fact that the incoming marked packet
   was not sent as a probe packet can be determined from the packet
   content, by multifield classification or by checking the admittance
   state at the egress edge device. If severe congestion occurs, a
   signalling message can be sent to the ingress edge device, which then
   can take the appropriate action.

   To make the scheme more robust against packet losses, the initiating
   edge device could start a timer when it sends the first probe packet.
   If any of the probe packets are lost, it simply re-transmits on
   time-out.

3.2 Unit-based Reservations

   While measurement based admission control has important advantages
   over non-measurement based algorithms, it has its disadvantages as
   well.  Unit-based reservations allow the sources to keep their
   reservations independently of the volume of the transmitted traffic.
   Although the admission scheme is very similar to the simple marking
   case, the presence of actual reservations is a fundamental
   difference.

Westberg, Turanyi              Oct. 1999                        [Page 4]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

   Each flow can occupy any number of units of resources, and even
   fractionals by allowing a number of flows to share a common resource
   unit. The unit is not necessarily a simple bandwidth value: it can be
   defined in terms of any resource unit, e.g. effective bandwidth, to
   support statistical multiplexing at packet level (use of silence
   period). The definition of the unit may vary from network to network
   and is outside the scope of this document.  The basic idea of unit-
   based reservation is to allow the edge devices to periodically mark
   some of the data packets as refreshment of resource reservation.
   Each refreshment packet reserves one unit of resources for one
   refreshment period. Reservations are timed out after a refreshment
   period and have to be refreshed in a soft state manner. The length of
   the refreshment period must be the same in the DS domain.

   Core routers estimate the number of reservations by counting the
   number of refreshment packets during a refreshment interval. If the
   router runs out of units, it goes into blocking state, starts to mark
   probe packets and thereby rejects new flows. The probe packets that
   pass the router unmarked and refreshment packets, reserve one unit of
   resources for the following refreshment period. Thus, after the probe
   packet has passed along the path unmarked, the ingress edge device is
   required to send the first reservation refreshment packet in the next
   refreshment period.

   If a flow occupies more than one unit, more than one probe packet may
   be sent to allocate the required number of resources.  Similarly,
   more than one refreshment packet must be sent for such a flow. By the
   proper definition of the unit, a wide range of flows can be described
   and handled by this simple mechanism.

   If a probe packet was forwarded unmarked by a core router, but was
   marked later downstream, that core router will not be notified and
   maintain the reservation falsely. However, as the flow is rejected,
   no refreshment packets will arrive, and the reservation will
   eventually time out and be released.

   Severe congestion is handled in the same way as in 'Simple marking'
   (see 3.1).

   If a refreshment packet is lost, the downstream routers will
   underestimate the number of reserved units. Refreshment and probe
   packets should therefore be protected from losses.

   Core routers estimate the number of allocated units by counting the
   number of refreshment packets during a refreshment period. The
   accuracy of the estimate can be increased by generating refreshment
   packets evenly spread in time over the refreshment period. This
   minimises errors resulting from time alignment differences between

Westberg, Turanyi              Oct. 1999                        [Page 5]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

   routers and edge devices.

3.3 Codepoints for Flow Types

   In both variants of Load Control, routers making marking decisions
   have very little information about the resource or QoS requirement of
   the flow in question. The DS field of the probe packet can be used to
   indicate the diffserv class the flow will arrive on and thus the QoS
   requirements.  The marking function of core routers can take the
   required PHB into account when deciding on the marking.

   Information on the resource requirements for incoming flows can also
   be expressed using the DS field by dividing real-time traffic into
   classes based on resource requirements and using different codepoints
   for different classes. If the DSCPs denote not only the PHB that the
   flow is to receive, but implicitly also the bandwidth demand of the
   flow, core routers will be able to mark packets more intelligently,
   resulting in less resource waste and greater flexibility.

   In the unit-based case, the major benefit is that the size of the
   unit can be different in different classes, making it possible to
   allocate resources with finer granularity.

4 Objects for Standardization

   A forthcoming standard might only include the encoding of the Load
   Control information into the IP header and some design
   recommendations.

4.1 Packet Types

   We need four type of packets in the algorithm:
   - Ordinary Packet (OP) - Probe Packet (PP) - Marked Packet (MP) -
   Refreshment Packet (RP)

   During transition through the network, a probe packet can be changed
   to a marked packet. This indicates that at least one router does not
   accept the reservation associated by the probe packet.

   ------       Rejection       ------
   | OP |---------------------->| MP |
   ------                       ------

   An ordinary packet can also be changed to a marked packet, meaning
   that some exceptional event caused severe congestion on one link of
   the path the packet has taken.

Westberg, Turanyi              Oct. 1999                        [Page 6]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

   ------  Severe Congestion   ------
   | PP |---------------------->| MP |
   ------                       ------

   In the simple marking scheme, only three packet types are used.
   Refreshment packets are treated as ordinary packets, but with the
   exception of that these packets can not be changed to marked packets.

4.2 Coding of Packet Types

   We have two alternative solutions for storing Load Control related
   information in the packet headers: using new DS codepoints; or the
   two currently unused bits (intended for ECN) in the DS byte.

   In the first case, PHBs are intended to be used together for Load
   Control, two or three new codepoints have to be defined for probe,
   marked and optionally refreshment packets. For example, in the case
   of the EF PHB, in addition to the codepoint used for the EF packets,
   EF-probe, EF-marked and EF-refreshment packets can also be sent. The
   new codepoints can be drawn from the LU/EXP space.

   In the second case, for PHBs intended to be used together with Load
   Control, the values are encoded in the two unused bits as below,
   while the DS field contains the PHB:

                    DS byte    Load Control
                    01234567   codepoint
                    -----------------------
                    xxxxxx00   Ordinary
                    xxxxxx01   Probe
                    xxxxxx10   Marked
                    xxxxxx11   Refreshment

   The interpretation of the two unused bits remains unspecified for
   other PHBs that do not support Load Control. This is not to interfere
   with a possible ECN-deployment [RFC2481].

4.3 Behaviour Description

   The behaviour of the edge devices depends greatly on the application
   or signalling protocol that uses the load control scheme. Below we
   only describe the few aspects of the edge device behaviour that are
   necessary for interworking with the core routers.

4.3.1 Behaviour of the Core Routers

   All core routers continuously maintain a state of accepting or
   rejecting more flows. If the state is accepting, the router passes

Westberg, Turanyi              Oct. 1999                        [Page 7]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

   all packets unchanged. If the state is congestion, then the router
   changes the marking of incoming packets from probe to marked.

   If the router is capable of detecting severe congestion, and this
   occurs, then the router marks both ordinary and probe packets as
   marked.  The router must not change the marking of refreshment
   packets.

 Addition for Unit-based Reservations:

   The router uses the refreshment and probe markers in packets to
   maintain its estimation of reserved resources. A refreshment packet
   signals already admitted resource usage, while a probe packet signals
   a new request. When passed unmarked, both types of packet reserve one
   unit for one refreshment period.

4.3.2 Behaviour of the Edge Devices

   When a new reservation is needed, the ingress edge device should send
   the appropriate number of packets marked as probe.

   If the egress edge device receives a probe packet that is marked, it
   means that the network has insufficient capacity along the path
   between the two edge devices. The egress edge device should take care
   of blocking the call, by notifying the ingress device.  If the egress
   device receives a marked packet that is not initially sent as probe
   packet, it shall inform the ingress device to reject admitted flows.
   This can be determined from the packet content, multifield
   classification of the IP header or by checking the admittance state
   at the egress edge device.

 Addition for Unit-based Reservations:

   For the unit-based reservation scheme, the ingress edge device should
   generate the required number of refreshment packets per refreshment
   period and per flow. If there are not enough data packets to mark as
   refreshment packets, the ingress device must generate dummy packets
   and mark those as refreshment packets. The generated refreshment
   packets should be as uniformly distributed through the refreshment
   interval as possible to minimise the effect of refresh interval
   timing between routers.

5. Interworking with RSVP/Intserv

   Load control can also be used in diffserv regions (backbones) that
   connect RSVP/Intserv regions. Such an inter-operation is described in
   detail in [Bernet99]. For load control, border routers of the
   diffserv region must be RSVP-aware to detect the arrival of new

Westberg, Turanyi              Oct. 1999                        [Page 8]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

   connections.

   PATH messages can be used as probe packets to gather congestion
   information along the path between the two border routers. When a new
   RSVP path state is installed at the egress border router, the
   collective admission state of the path (collected in the packet of
   the PATH message) is also stored. If a RESV message for the installed
   state arrives within a time period during which the congestion state
   can be considered valid, then the egress border router can perform
   the admission control for the diffserv network as well. If the first
   RESV message arrives too late, then the egress border router must
   solicit a new (dummy) probe packet from the ingress router to
   determine the current congestion state.

   When the egress receives a marked packet that is not a PATH message
   nor a dummy probe packet, this signals a severe congestion state
   along the path. The identity of the ingress router can be easily
   determined form the path state, but in this case the egress router
   can itself decide on the dropping of certain reservations. The
   ingress router can be notified via ResvTear messages while the
   receiver end systems get ResvErr messages.

   RSVP routers can also be placed inside the domain. In this case the
   probing is performed between RSVP routers instead of edge devices.
   Thus adding a simple and cheap extension to non-RSVP capable routers,
   correct admission control is possible on non-RSVP capable parts of an
   end-to-end path.

   Unit-based reservations can also be used to provide resources in a DS
   domain that is used to provide VPN tunnels between customer sites.
   Using a load control scheme, it is fast and easy to modify the size
   of these tunnels; thus tunnel size selection can be a very dynamic
   process. Note that tunnels are not necessarily real-time tunnels.
   Packets of any DSCP can travel on them after receiving the
   appropriate PHB. Even best-effort tunnels can be reserved this way.
   Provisioning can be done on a per-DSCP basis or in aggregates as the
   service provider wishes.

6. Security Considerations

   We are proposing to use bit markers in packet headers (DS field) to
   reserve resources within a diffserv domain. This poses similar
   security problems to the use of the DS field to differentiate packets
   in general. [RFC2475]

   If the interior of the DS domain fully contains a tunnel, then by
   copying the outer marking into the inner header at de-capsulation,
   load control can be exercised over the links of the tunnel as well.

Westberg, Turanyi              Oct. 1999                        [Page 9]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

   The procedure is similar to the one described in [RFC2481]. As IPSec
   [RFC2402, 2406] does not allow the copying of the DS field from the
   outer to the inner header at de-capsulation, load control cannot be
   exercised over regions where IPSec tunnels are used.

7. Multicast

   TBW

Appendix A. Admission Precision of Simple Marking

   Simple marking is basically a measurement-based admission control
   scheme, where flows do not say anything about their traffic
   characteristics. In addition, flow departure is not signalled
   explicitly.

   When the network carries more types of flows with different bandwidth
   requirements, the core routers do not know the bandwidth requirements
   of the incoming flows. They simply declare if they accept more flows
   or not irrespective of the bandwidth demands of the new flow. Thus
   the marking algorithm in the routers should conservatively always
   expect the largest type of flow that the network carries and start
   rejecting when there is not enough bandwidth left for one such flow.
   On the positive side, this will result in fair rejection among
   different flow types, but on the negative side, some bandwidth will
   be wasted. However, if the links of our domain can carry at least
   several hundred requests even from the most bandwidth-demanding types
   of flow, then this is not a significant waste.

Appendix B. Effect of Delays on Admission

   When a probe packet is passed unmarked without correcting the
   estimate of the free resources, we in fact admit a flow without
   immediately reserving resources for it.  The reservation will be
   implicitly done later by the arriving traffic or refreshment packets
   of the flow. During the time between admission and the arrival of the
   traffic of the flow, new requests can be admitted without taking the
   previously admitted flow into account.  To illustrate the effects of
   this delay, we took an old and simple Markovian example. Flows are
   identical with an average flow-holding time of 180 seconds and flow
   arrivals and departures follow a Poisson process. Let the link be
   able to carry N calls and let the delay be T. The link starts
   refusing flows when the measured traffic exceeds N-H calls. We can
   say that a space of size H is put aside to cater for the errors
   caused by the delay.

   If the link is properly dimensioned, then the usual blocking ratio
   should not exceed 1%. However, in a mass call situation (such as

Westberg, Turanyi              Oct. 1999                       [Page 10]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

   occurs at New Year's Eve for example) it can be considerably higher.
   In this example, 50% blocking was chosen to demonstrate the extreme
   load case. Thus, the offered traffic is roughly twice the link
   capacity.

   QoS violation occurs if during time T the difference between the
   number of arriving and departing flows is larger than H. Under the
   above assumptions, the chance of QoS violation can be calculated.
   Naturally the larger H is, the less the chance is that QoS will be
   violated. The required value of H can be determined for a low value
   of QoS violation probability (e.g. 10e-5).

   The following table presents the value of H as a function of link
   size (N), delay length (T) and load (causing 1% or 50% blocking).

         |    1ms    |   10ms    |   100ms   |   500ms   |     1s    |
         | 1%  | 50% | 1%  | 50% | 1%  | 50% | 1%  | 50% | 1%  | 50% |
   ------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
      50 |  2  |  2  |  2  |  3  |   3 |   4 |   4 |   5 |   5 |   7 |
     100 |  2  |  2  |  3  |  3  |   4 |   4 |   4 |   7 |   6 |   9 |
     500 |  2  |  3  |  3  |  4  |   4 |   7 |   9 |  13 |  12 |  18 |
    1000 |  3  |  3  |  4  |  4  |   5 |   9 |  12 |  18 |  16 |  25 |
    5000 |  3  |  4  |  5  |  7  |  12 |  18 |  24 |  44 |  33 |  69 |
   10000 |  4  |  4  |  7  |  9  |  16 |  25 |  33 |  69 |  47 | 113 |

   The amount of required safety margin is highest for small links,
   since less statistical multiplexing is possible there.

Appendix C. A Simple Algorithm for Core Routers

   In this appendix, we present an algorithm for core routers that use
   unit-based reservations. The algorithm is simple, so it can be easily
   implemented in hardware by simple counters. Its inputs are the
   refreshment interval and the number of flows allowed on the link. The
   latter is denoted by <threshold>. (We assume flows with similar
   characteristics (e.g. voice) and that one flow sends one refreshment
   packet per refreshment interval.) If the network uses more DSCPs for
   real-time traffic, then a separate copy of the algorithm may be run
   for each DSCP, resulting in per-DSCP admission.

   The algorithm counts the number of refreshment and admitted probe
   packets in refreshment intervals (<count>). The result of the
   counting is an upper limit on the number of units reserved on the
   link, as some reservations may have gone by the end of the
   refreshment interval. The value of this counter is used in the next
   interval to decide on admission (<last>). When a new reservation is
   admitted, this value is increased to take the new reservation into
   account. If this value is high above the admission limit, then we

Westberg, Turanyi              Oct. 1999                       [Page 11]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

   start sending severe congestion notification by marking regular
   packets as well.

      On initialisation:
         last = 0
         count = 0

      On arrival of a refreshment packet
         count++

      On arrival of a probe packet
         if last < threshold then
            last ++
            count ++
         elseif
            Mark Packet
         endif

      On arrival of a regular packet
         if last < threshold*1.1 then
            Mark Packet
         endif

      At the end of the refreshment interval
         last = count
         count = 0

Appendix D. Simulation Results

   The purpose of the simulations described in this appendix is to give
   some insight into the performance of load control. The simulation
   cases are by no means representative and the scheme may work
   differently in other situations. In section C.1, the simple marking
   case is demonstrated with a purely measurement-based admission
   algorithm by using a single link with both constant bit-rate and
   on/off sources. In appendix C.2, the unit-based reservation method is
   shown, using the algorithm in appendix B.

   Severe congestion signalling is not used in any of the examples; only
   admission control is used.

   We simulated a very simple network of one link. This can be viewed as
   the single bottleneck in the domain. The link had a 2 Mbit/s
   throughput, 50% of which was designated to carry real-time traffic.
   The round trip propagation delay was set to 100ms. The real time
   flows arrived according to a Poisson process, holding time was
   exponential with a 90 second mean. The arrival rate of flows was set
   to produce approximately 50% blocking. Only real-time traffic was

Westberg, Turanyi              Oct. 1999                       [Page 12]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

   simulated, so scheduling was simple FIFO.

D.1 Simple Marking

D.1.1 Constant Bit-Rate Sources

   In the first case, flows emitted 40 byte long packets every 20 ms,
   producing a constant 16 kbit/s load. The 1 Mbit/s capacity assigned
   to this traffic can thus carry 62.5 flows. From the table in appendix
   A., we can see that 4 calls should be reserved in addition to the
   62.5. After an initial transient of 5 minutes, we simulated 2.5
   hours.

   During the 2.5 hour simulation time, utilisation was measured over
   5-minute intervals. Utilisation was also measured in 20ms slots and
   the percentage of slots in which it was above 1.064 Mbit/s (66.5
   calls) was counted.

      min/avg/max of the utilisation was: 881 / 899 / 914 kbit/s
      min/avg/max of the violation ratio was: 98.96% / 99.78% / 100%

D.1.2 On/Off Sources

   In the second simulation case, on/off sources were used. During an
   "off" period, no packets were generated, while in the "on" state the
   behaviour is the same as in the previous case: 40 byte long packets
   20 ms apart. The distributions of the on and off periods were both
   drawn from a pareto distribution with the shape parameter of 1.1 and
   mean of 5 seconds. The average bit-rate of the sources is thus 8
   kbit/s. The flow arrival rate has been doubled to produce ~50%
   blocking, since the link is capable of carrying nearly twice the
   number of flows. The same set of measurements was carried out as in
   the previous case.

      min/avg/max of the utilisation was: 808 / 819 / 837 kbit/s
      min/avg/max of the violation ratio was: 98.98% / 99.40% / 99.70%

   It can be seen that although the measurement-based approach was not
   able to prevent the over-use of the real-time resources in this high
   load case, it is a viable alternative. In no case did the 20 ms
   measurements exceed 1.15 Mbit/s, so the over-use just means a
   temporary steal from the resources provisioned to the lower priority
   traffic.

D.1.3 The Router Algorithm

   The mbac algorithm used by the router is presented here only for the
   completeness of the simulation description. The marking strategy was

Westberg, Turanyi              Oct. 1999                       [Page 13]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

   the same for both types of traffic. The router counts the number of
   bytes transmitted in every 20 ms interval and calculates the average
   bit rate in these 20 ms slots. Then it smoothes these values in time
   through an exponentially weighted moving average (ewma) filter. The
   window size of the ewma was set to 9 seconds, i.e., running a unit
   step function through it, the output will be 0.63 after 9 seconds.
   The algorithm also calculated the histogram of the difference between
   the original slot values and the filtered values. The histogram has
   been counted in 1000 bins between the range of -1 and +1 Mbit/s. The
   99% quantile of the histogram was calculated every 100 seconds. The
   router marks all passing packets if the sum of the output of the ewma
   filter and the calculated quantile is greater than 1 Mbit/s. The
   router makes no correction to its measurements when a new flow is
   accepted.

   Thus, the target violation probability was set to 1%, which was in
   fact fulfilled in the long run.

   On arrival of a new packet, only counters are incremented. Every 20
   ms a new value for the ewma must be calculated, a marking decision
   must be made for the next 20 ms and the value of one bin in the
   histogram must be increased. Every 100 seconds, the 99% quantile
   value must be looked up in the histogram and the histogram must be
   initialised.

   The interested reader can read more about the design rationale of the
   above algorithm in [Gross99].

D.2 Unit-Based Reservations

   In this section we demonstrate the unit-based reservation scheme. The
   routers use the simple algorithm in Appendix B, except that it never
   marks regular packets. The simulation setup is otherwise the same as
   in the previous section. The traffic inside the flows does not affect
   the admission algorithm, so during simulation sources send only probe
   and refreshment packets. The definition of the unit is a peak bit-
   rate of 16 kbit/s. The flow number threshold was set to 62 flows
   resulting in close to the same target utilisation of 1Mbits/s as in
   appendix C.1. The length of the refreshment period was changed
   between 100 ms and 10 seconds. The actual number of flows on the link
   never exceeded 62 (no violation), so only the utilisation values are
   shown in kbit/s.

                      | interval | min | avg | max |
                      +----------+-----+-----+-----+
                      |    --    | 968 | 972 | 976 |
                      | 100 ms   | 952 | 954 | 959 |
                      |  1 sec.  | 941 | 946 | 949 |

Westberg, Turanyi              Oct. 1999                       [Page 14]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

                      |  2 sec.  | 927 | 933 | 936 |
                      |  4 sec.  | 908 | 913 | 920 |
                      |  7 sec.  | 861 | 870 | 879 |
                      | 10 sec.  | 827 | 837 | 852 |

   The first line shows the utilisation value for the case when the
   source limits itself to 62 flows, i.e., blocking is not done by the
   network, but by the source. This emulates the case when the
   refreshment period is infinitely short or when a state approach is
   used, as in RSVP. The utilisation is not 100% due to the burstiness
   of the arrivals.

   It can be seen that as the refreshment packets get less frequent,
   more resources are wasted, as the resources allocated to departing
   flows remain allocated till the end of the next refreshment period.
   The result is not only lower average utilisation, but lower maximal
   utilisation as well. When the refreshment period is 10 seconds long,
   the highest utilisation experienced was 952 kbit/sec, which is 3
   units below the limit.

   This motivates the use of as short a refreshment period as possible.
   However, too short a refreshment period will increase the effects of
   clock differences between edge and core devices (which was not taken
   into account during simulation). It also decreases the chance of
   finding a packet to mark as refreshment if the flow is currently
   transmitting below its reserved rate.

References

   [RFC2481] Ramakrishan, K., Floyd, S., "A Proposal to add Explicit
             Congestion Notification (ECN) to IP". RFC 2481, January
             1999

   [RFC2474] Nichols, K., Blake, S., Baker, F. and D. Black, "Definition
             of the Differentiated Services Field (DS Field) in the IPv4
             and IPv6 Headers", RFC 2474, December 1998.

   [RFC2475] Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z. and
             W. Weiss, "An Architecture for Differentiated Services",
             RFC 2475, December 1998.

   [RFC2205] Braden, R., Zhang, L., Berson, S., Herzog, S., Jamin, S.,
             "Resource Reservation Protocol (RSVP) Version 1 Functional
             Specification", RFC 2205, Proposed Standard, September 1997

   [RFC2402] Kent, S. and R. Atkinson, "IP Authentication Header", RFC
             2402, November 1998.

Westberg, Turanyi              Oct. 1999                       [Page 15]

draft-westberg-loadcntr-02                            Expires: Apr. 2000

   [RFC2406] Kent, S. and R. Atkinson, "IP Encapsulating Security
             Payload (ESP)", RFC 2406, November 1998.

   [Bernet99] Bernett, Y., Yavatkar, R., Ford, P., Baker, F., Zhang, L.,
             Speer, M., Braden, R., "Interoperation of RSVP/Intserv and
             Diffserv Networks", Internet Draft, March 1999

   [Stoica99] Stoica, I., et al "Per Hop Behaviors Based on Dynamic
             Packet States", Internet Draft, February 1999

   [Berson97] Berson, S. and Vincent, R., "Aggregation of Internet
             Integrated Services State", Internet Draft, December 1997.

   [Guerin97] Guerin, R., Blake, S. and Herzog, S.,"Aggregating RSVP
             based QoS Requests", Internet Draft, November 1997.

   [Gross99] Grossglauser, M., Tse, D. N. C., "A Time-Scale
             Decomposition Approach to Measurement-Based Admission
             Control", Infocom '99

   [Tur99] Z. R. Turanyi, L. Westberg "Load Control: Lightweight
             Provisioning of Internet Resources" submitted to Networking
             2000, Paris, May 2000, http: //www.ericsson.co.hu/ethzrt/

Authors' Addresses

   Lars Westberg
   Ericsson Research
   Kistagangen 26
   SE-164 80 Stockholm
   Sweden
   EMail: Lars.Westberg@era-t.ericsson.se

   Zoltan R. Turanyi
   Ericcson Telecommunications
   Budapest, Laborc u. 1
   H-1037
   Hungary
   EMail: Zoltan.Turanyi@ericsson.com

Westberg, Turanyi              Oct. 1999                       [Page 16]
