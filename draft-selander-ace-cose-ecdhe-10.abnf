exchange_hash = H( bstr .cborseq [ aad_3, CIPHERTEXT_3 ] )

output = EDHOC-Key-Derivation(AlgorithmID, keyDataLength, other)
other = exchange_hash, AlgorithmID = label, and keyDataLength = 8 *
message_1 = (
     MSG_TYPE : int,
     C_U : bstr,
     ECDH-Curves_U : algs,
     ECDH-Curve_U : uint,
     X_U : bstr,
     HKDFs_U : algs,
     AEADs_U : algs,
     SIGs_V : algs,
     SIGs_U : algs,
     ? UAD_1 : bstr
algs = alg / [ 2* alg ]

message_2 = (
     data_2,
     CIPHERTEXT_2 : bstr
data_2 = (
     MSG_TYPE : int,
     C_U : bstr / nil,
     C_V : bstr,
     X_V : bstr,
     HKDF_V : uint,
     AEAD_V : uint,
     SIG_V : uint,
     SIG_U : uint
aad_2 = H( bstr .cborseq [ message_1, data_2 ] )

message_3 = (
     data_3,
     CIPHERTEXT_3 : bstr
data_3 = (
     MSG_TYPE : int,
     C_V : bstr
aad_3 = H( bstr .cborseq [ aad_2, CIPHERTEXT_2, data_3 ] )

message_1 = (
     MSG_TYPE : int,
     C_U : bstr,
     ECDH-Curves_U : algs,
     ECDH-Curve_U : uint,
     X_U : bstr,
     HKDFs_U : algs,
     AEADs_U : algs,
     KID : bstr,
     ? UAD_1 : bstr
algs = alg / [ 2* alg ]

message_2 = (
     data_2,
     CIPHERTEXT_2 : bstr
data_2 = (
     MSG_TYPE : int,
     C_U : bstr / nil,
     C_V : bstr,
     X_V : bstr,
     HKDF_V : uint,
     AEAD_V : uint
aad_2 = H( bstr .cborseq [ message_1, data_2 ] )

message_3 = (
     data_3,
     CIPHERTEXT_3 : bstr
data_3 = (
     MSG_TYPE : int,
     C_V : bstr
aad_3 = H( bstr .cborseq [ aad_2, CIPHERTEXT_2, data_3 ] )

error = (
     MSG_TYPE : int,
     ERR_MSG : tstr,
     ? ALGs_V: algs
algs = alg / [ 2* alg ]

plaintext = << ~protected, signature >> in the asymmetric case.
PRK = HMAC-SHA-256( salt, ECDH shared secret )

COSE_KDF_Context = [
     AlgorithmID,
     [ null, null, null ],
     [ null, null, null ],
     [ keyDataLength, h'', aad_i ]
K_2  = HMAC-SHA-256( PRK, 0x840a83f6f6f683f6f6f68318804042aaaa01 )
IV_2 = HMAC-SHA-256( PRK, 0x846d49562d47454e45524154494f4e
                                   83f6f6f683f6f6f68318804042aaaa01 )

PSK = EDHOC-Exporter("EDHOC Chaining PSK", length)
KID = EDHOC-Exporter("EDHOC Chaining KID", 4)

message_1 = (
     1,
     h'c3',
     4,
     0,
     h'000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d
       1e1f',
     -27,
     10,
     -8,
     -8
plaintext = <<
     { 4 : 'acdc' },
     h'000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d
       1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b
       3c3d3e3f'
message_2 = (
     2,
     null,
     h'c4',
     h'000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d
       1e1f',
     0,
     0,
     0,
     0,
     h'000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d
       1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b
       3c3d3e3f404142434445464748494a4b4c4d4e4f50'
message_3 = (
     3,
     h'c3',
     h'000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d
       1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b
       3c3d3e3f404142434445464748494a4b4c4d4e4f50'
protected = << { TDB1 : [ TDB6, h'0001020304050607' ] } >>

protected = << { TDB3 : h'0001020304050607...' } >>

message_1 = (
     4,
     h'c3',
     4,
     0,
     h'000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d
       1e1f',
     -27,
     10,
     'abba'
message_2 = (
     5,
     null,
     h'c4',
     h'000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d
       1e1f',
     0,
     0,
     h'0001020304050607'
message_3 = (
     6,
     h'c3',
     h'0001020304050607'
