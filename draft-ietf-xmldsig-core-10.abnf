xmlns="http://www.w3.org/2000/09/xmldsig#"

targetNamespace="&dsig;"
version="0.1"
elementFormDefault="qualified">

Type="http://www.w3.org/2000/09/xmldsig#Object"
Type="http://www.w3.org/2000/09/xmldsig#Manifest"
   
URI="http://example.com/bar.xml"
          Identifies the octets that represent the external resource
          'http//example.com/bar.xml', that is probably XML document
          given its file extension.
          
URI="http://example.com/bar.xml#chapter1"
          Identifies the element with ID attribute value 'chapter1' of
          the external XML resource 'http://example.com/bar.xml',
          provided as an octet stream. Again, for the sake of
          interoperability, the element identified as 'chapter1' should
          be obtained using an XPath Transform rather than a URI fragment
          (barename XPointer resolution in external resources is not
          REQUIRED in this specification).
          
URI=""
          Identifies the nodeset (minus any comment nodes) of the XML
          resource containing the signature
          
URI="#chapter1"
          Identifies a nodeset containing the element with ID attribute
          value 'chapter1' of the XML resource containing the signature.
          XML Signature (and its applications) modify this nodeset to
          include the element plus all descendents including namespaces
          and attributes -- but not comments.
          
    4.3.3.3 Same-Document URI-References
    
URI='#xpointer(id("ID"))'. To retain comments while selecting the
rs="unbounded"/>
           <element name="XSLT" type="string"/>
           <!-- should be an xsl:stylesheet element -->
           <element name="XPath" type="string"/>
         </choice>
         <attribute name="Algorithm" type="uriReference" use="required"/>
       </complexType>
     </element>
   DTD:

   <!ELEMENT Transforms (Transform+)>

   <!ELEMENT Transform %Transform.ANY; >
   <!ATTLIST Transform
             Algorithm    CDATA    #REQUIRED >

   <!ELEMENT XPath (#PCDATA) >
   <!ELEMENT XSLT (#PCDATA) >

    4.3.3.5 The DigestMethod Element
    
   DigestMethod is a required element that identifies the digest
   algorithm to be applied to the signed object. This element uses the
   general structure here for algorithms specified in Algorithm
   Identifiers and Implementation Requirements (section 6.1).
   
   If the result of the URI dereference and application of Transforms is
   an XPath node-set (or sufficiently functional replacement implemented
   by the application) then it must be converted as described in the
   Reference Processing Model (section  4.3.3.2). If the result of URI
   dereference and application of Transforms is an octet stream, then no
   conversion occurs (comments might be present if the Minimal
   Canonicalization or Canonical XML with Comments was specified in the
   Transforms). The digest algorithm is applied to the data octets of the
   resulting octet stream.
   Schema Definition:

   <element name="DigestMethod">
     <complexType>
       <sequence>
         <any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="
Type="http://www.w3.org/2000/09/xmldsig#X509Data"
L=Yamato-shi, ST=Kanagawa, C=JP</X509IssuerName>
Type="http://www.w3.org/2000/09/xmldsig#PGPData"
Type="http://www.w3.org/2000/09/xmldsig#SPKIData"
Type="http://www.w3.org/2000/09/xmldsig#MgmtData"
Type="http://www.w3.org/2000/09/xmldsig#Object"
Type="http://www.w3.org/2000/09/xmldsig#Manifest"
Type="http://www.w3.org/2000/09/xmldsig#SignatureProperties"
urs="unbounded"/>
          </choice>
          <attribute name="Target" type="uriReference" use="required"/>
          <attribute name="Id" type="ID" use="optional"/>
          </complexType>
      </element>
   DTD:

   <!ELEMENT SignatureProperties (SignatureProperty+)  >
   <!ATTLIST SignatureProperties
             Id ID   #IMPLIED  >

   <!ELEMENT SignatureProperty %SignatureProperty.ANY >
   <!ATTLIST SignatureProperty
             Target CDATA    #REQUIRED
             Id ID  #IMPLIED  >

  5.3 Processing Instructions in Signature Elements
  
   No XML processing instructions (PIs) are used by this specification.
   
   Note that PIs placed inside SignedInfo by an application will be
   signed unless the CanonicalizationMethod algorithm discards them.
   (This is true for any signed XML content.) All of the
   CanonicalizationMethods specified within this specification retain
   PIs. When a PI is part of content that is signed (e.g., within
   SignedInfo or referenced XML documents) any change to the PI will
   obviously result in a signature failure.
   
  5.4 Comments in Signature Elements
  
   XML comments are not used by this specification.
   
   Note that unless CanonicalizationMethod removes comments within
   SignedInfo or any other referenced XML (which [XML-C14N] does), they
   will be signed. Consequently, if they are retained, a change to the
   comment will cause a signature failure. Similarly, the XML signature
   over any XML data will be sensitive to comment changes unless a
   comment-ignoring canonicalization/transform method, such as the
   Canonical XML [XML-C14N], is specified.
   
r = 8BAC1AB6 6410435C B7181F95 B16AB97C 92B341C0
s = 41E2345F 1F56DF24 58F426D1 55B4BA2D B6DCD8C8

Algorithm="http://www.w3.org/TR/1999/REC-xpath-19991116">
Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
            <DigestValue></DigestValue>
          </Reference>
        </SignedInfo>
        <SignatureValue></SignatureValue>
       </Signature>
       ...
      </Document>
   
