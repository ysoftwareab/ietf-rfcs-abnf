total = X[in];
BM = G(SEED, ADRS);
KEY = G(SEED, ADRS);
tmp = F(KEY, tmp XOR BM);
csum = 0;

msg = base_w(M,w);

csum = csum + w - 1 - msg[i];
csum = csum << ( 8 - ( ( len_2 * lg(w) ) % 8 ));
len_2_bytes = ceil( ( len_2 * lg(w) ) / 8 );
msg = msg || base_w(toByte(csum, len_2_bytes), w);
csum = 0;

msg = base_w(M,w);

csum = csum + w - 1 - msg[i];
csum = csum << ( 8 - ( ( len_2 * lg(w) ) % 8 ));
len_2_bytes = ceil( ( len_2 * lg(w) ) / 8 );
msg = msg || base_w(toByte(csum, len_2_bytes), w);
BM_0 = G(SEED, ADRS);
BM_1 = G(SEED, ADRS);
KEY = G(SEED, ADRS);
pk = WOTS_genPK (getWOTS_SK(SK, s+i), SEED, ADRS);
node = ltree(pk, SEED, ADRS);
node = RAND_HASH(Stack.pop(), node, SEED, ADRS);
ADRS = toByte(0, 16);
root = treeHash(SK, 0, h, SEED, ADRS);
PK = root || SEED;
ADRS = toByte(0, 16);
k = floor(i / (2^j)) XOR 1;
idx_sig = getIdx(SK);
ADRS = toByte(0, 16);
auth = buildAuth(SK, idx_sig, SEED, ADRS);
sig_ots = WOTS_sign(getWOTS_SK(SK, idx_sig), M', SEED, ADRS);
Sig = (idx_sig || r || sig_ots || auth);
ADRS = toByte(0, 16);
pk_ots = WOTS_pkFromSig(sig_ots, M', SEED, ADRS);
ADRS = toByte(0, 16);
root = treeHash(getXMSS_SK(SK_MT, 0, d - 1), 0, h / d, SEED, ADRS);
PK_MT = root || SEED;
ADRS = toByte(0, 16);
SK_PRF = getSK_PRF(SK_MT);
idx_sig = getIdx(SK_MT);
Sig_MT = idx_sig;
SK = idx_leaf || SK_PRF || getXMSS_SK(SK_MT, idx_tree, 0);
Sig_tmp = XMSS_sign_wo_hash(M', SK, SEED, ADRS);
Sig_tmp = Sig_tmp with idx removed;
Sig_MT = Sig_MT || r || Sig_tmp;
root = treeHash(SK, 0, h / d, SEED, ADRS);
idx_leaf = (h / d) least significant bits of idx_tree;
idx_tree = (h - j * (h / d)) most significant bits of idx_tree;
SK = idx_leaf || SK_PRF || getXMSS_SK(SK_MT, idx_tree, j);
Sig_tmp = XMSS_sign_wo_hash(root, SK, SEED, ADRS)
             with idx removed;
Sig_MT = Sig_MT || Sig_tmp;
idx_sig = getIdx(Sig_MT);
SEED = getSEED(PK_MT);
ADRS = toByte(0, 16);
idx_leaf = (h / d) least significant bytes of idx_tree;
idx_tree = (h - j * h / d) most significant bytes of idx_tree;
node = XMSS_rootFromSig_wo_hash(Sig', node, SEED, ADRS);
wotsp_reserved         = 0x00000000,
wotsp_sha2-256_m32_w16 = 0x01000001,
wotsp_sha2-512_m64_w16 = 0x02000002,
xmss_reserved             = 0x00000000,

xmss_sha2-256_m32_w16_h10 = 0x01000001,
xmss_sha2-256_m32_w16_h16 = 0x02000002,
xmss_sha2-256_m32_w16_h20 = 0x03000003,

xmss_sha2-512_m64_w16_h10 = 0x04000004,
xmss_sha2-512_m64_w16_h16 = 0x05000005,
xmss_sha2-512_m64_w16_h20 = 0x06000006,
xmssmt_reserved                 = 0x00000000,

xmssmt_sha2-256_m32_w16_h20_d2  = 0x01000001,
xmssmt_sha2-256_m32_w16_h20_d4  = 0x02000002,
xmssmt_sha2-256_m32_w16_h40_d2  = 0x03000003,
xmssmt_sha2-256_m32_w16_h40_d4  = 0x04000004,
xmssmt_sha2-256_m32_w16_h40_d8  = 0x05000005,
xmssmt_sha2-256_m32_w16_h60_d3  = 0x06000006,
xmssmt_sha2-256_m32_w16_h60_d6  = 0x07000007,
xmssmt_sha2-256_m32_w16_h60_d12 = 0x08000008,

xmssmt_sha2-512_m64_w16_h20_d2  = 0x09000009,
xmssmt_sha2-512_m64_w16_h20_d4  = 0x0a00000a,
xmssmt_sha2-512_m64_w16_h40_d2  = 0x0b00000b,
xmssmt_sha2-512_m64_w16_h40_d4  = 0x0c00000c,
xmssmt_sha2-512_m64_w16_h40_d8  = 0x0d00000d,
xmssmt_sha2-512_m64_w16_h60_d3  = 0x0e00000e,
xmssmt_sha2-512_m64_w16_h60_d6  = 0x0f00000f,
xmssmt_sha2-512_m64_w16_h60_d12 = 0x01010101,
