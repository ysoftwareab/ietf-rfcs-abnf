UMF-parameter  =  simple-param  /  compound-param

simple-param = simple-type WS name [ cardinality ] 
                                         [ WS "as" WS explicit-tag ]
                                         [ WS plugin ]  ";"
      

simple-type = "null" / "bool" / "ipv4addr" / "ipv6addr" / "embedded" /  
                    integer-type / string-type / const-type / bytes-type / 
                    reference
      

integer-type  =  "int"  [  "<"  range-constraint  ">"  ]

string-type  =  ( "ascii" / "unquoted-ascii" / "unicode" ) 

                      [ "<" length-constraint ">" ]

const-type = "const" "<" 1*( safe-chars ) ">"

bytes-type = "byte-array" [ "<" length-constraint ">" ]

reference = name        ; Refers to a type defined elsewhere



range-constraint = constraint

length-constraint = constraint

constraint  =  [  min-constraint  ".."  ]  max-constraint

min-constraint  =  ["-"] 1*DIGIT

max-constraint  =  (  ["-"] 1*DIGIT  /  "*"  )

name  =  ALPHA  *(  ALPHA / DIGIT  /  "-"  /  "_"  )

cardinality = "[" [ min-occurrences ".." ] max-occurrences "]"

min-occurrences  =  ["-"] 1*DIGIT

max-occurrences  =  ( ["-"] 1*DIGIT / "*" )

explicit-tag  = 1*( safe-chars )

safe-chars =  1*( %x21 / 
                    ; Not "
                    %x23-26 / 
                    ; Not ' ( )
                    %28-2B
                    ; Not ,
                    %x2D-3C / 
                    ; Not =
                    %x3E
                    ; Not ?
                    %x40-7A /
                    ; Not {
                    %7C /
                    ; Not }
                    %7E-7F )
                       ; Visible characters except = , " ' { } ( ) ?
      

compound-param  =  struct-param  /  union-param
struct-param  =  "struct" WS name [ cardinality ] 
                                        [ WS "as" WS explicit-tag ] 
                                        [ WS plugin ] 
                                "{" struct-body "}"  ";"
union-param = "union" name [ cardinality ] [ WS "as" WS explicit-tag ]
                                                        [ WS plugin ]
                                "{" union-body "}" ";"
      

struct-body = *( untagged-UMF-parameter )
                    [ last-untagged-UMF-parameter ]
                    *( UMF-parameter ) 
                    *( struct-extension )
      
untagged-UMF-parameter  =  untagged-simple-param  / 
                                 untagged-compound-param

untagged-simple-type  =  simple-type  WS  name  WS  "as"  WS  "?"  ";"

untagged-compound-param = untagged-struct-param / 
                                untagged-union-param

untagged-struct-param = "struct" WS name WS "as" WS "?"  
                                "{" struct-body "}"  ";"

untagged-union-param = "union" WS name WS "as" WS "?"
                                "{" union-body "}" ";"
      

last-untagged-UMF-parameter  =  last-untagged-simple-param  / 
                                      last-untagged-compound-param

last-untagged-simple-type = simple-type WS name cardinality WS 
                                                     "as" WS "?" ";"

last-untagged-compound-param = last-untagged-struct-param / 
                                     last-untagged-union-param

last-untagged-struct-param = 
                           "struct" WS name cardinality WS "as" WS "?"  
                                "{" struct-body "}"  ";"

last-untagged-union-param = "union" WS name cardinality "as" WS "?"
                                "{" union-body  "}"  ";"
      

struct-extension = "[" 1*( UMF-parameter ) "]"

union-body = [  integer-type WS name WS "as" WS "?" ";" ]
                   *( singular-UMF-parameter ) 
                   *( union-extension )
      

select = 12

select = *

singular-UMF-parameter  =  singular-simple-param  / 
                                 singular-compound-param

singular-simple-param = simple-type WS name 
                                        [ WS "as" WS explicit-tag ] 
                                        [  WS  plugin  ]  ";"

singular-compound-param = singular-struct-param / singular-union-param

singular-struct-param = "struct" WS name [ WS "as" WS explicit-tag ]
                                               [ WS plugin ] 
                                "{" struct-body "}"  ";"

singular-union-param = "union" WS name [ WS "as" WS explicit-tag ] 
                                             [ WS plugin ]
                                "{" union-body "}" ";"
      

union-extension = "[" 1*( singular-UMF-parameter ) "]"

referenced-UMF-parameter  =  referenced-simple-param  / 
                                   referenced-compound-param

referenced-simple-param = simple-type  WS   name  ";"

referenced-compound-param = referenced-struct-param / 
                                 referenced-union-param

referenced-struct-param = "struct" WS name  
                                "{" struct-body "}"  ";"

referenced-union-param = "union" WS name 
                                "{" union-body "}" ";"

      

third-party-extension = "plug" WS
                               tp-struct-extension / 
                                    tp-union-extension
                              "into" WS name *( "::" name )
                                        *( "," name *( "::" name ) ) ";"

tp-struct-extension = UMF-parameter
tp-union-extension = singular-UMF-parameter
      

UMF-directive = [ "module" WS module-name WS ]
                      [ "extends" WS module-name ";" ]
                      *( "imports" WS module-name ";" )

module-name = name *( "." name )
      

UMF-definition  =  UMF-directives
                         1* ( referenced-UMF-parameter /
                              third-party-extension )
      

UMF-definition  =  UMF-directives
                         1* ( referenced-UMF-parameter /
                              third-party-extension )

UMF-directive = [ "module" WS module-name WS ]
                      [ "extends" WS module-name ";" ]
                      *( "imports" WS module-name ";" )

module-name = name *( "." name )
referenced-UMF-parameter  =  referenced-simple-param  / 
                                   referenced-compound-param

referenced-simple-param = simple-type  WS   name  ";"

simple-type = "null" / "bool" / "ipv4addr" / "ipv6addr" / 
                                                   "embedded" /  
                    integer-type / string-type / bytes-type / 
                    const-type / reference

integer-type = "int" [ "<" constraint ">" ]

string-type = ( "ascii" / "unquoted-ascii" / "unicode" ) 
                                             [ "<"  constraint ">" ]

bytes-type = "byte-array" [ "<" constraint ">" ]

reference = name        ; Refers to a type defined elsewhere

constraint  =  [  min-constraint  ".."  ]  max-constraint
min-constraint  =  ["-"] 1*DIGIT
max-constraint  =  (  ["-"] 1*DIGIT  /  "*"  )

name  =  ALPHA  *(  ALPHANUM  /  "-"  /  "_"  )

referenced-compound-param = referenced-struct-param / 
                                 referenced-union-param
referenced-struct-param = "struct" WS name  
                                "{" struct-body "}"  ";"

struct-body = *( untagged-UMF-parameter )
                    [ last-untagged-UMF-parameter ]
                    *( UMF-parameter ) 
                    *( struct-extension )

referenced-union-param = "union" WS name 
                                "{" union-body "}" ";"

union-body = [  integer-type WS name WS "as" WS "?" ";" ]
                   *( singular-UMF-parameter ) 
                   *( union-extension )

untagged-UMF-parameter  =  untagged-simple-param  / 
                                 untagged-compound-param

untagged-simple-type = simple-type WS name WS "as" WS "?"  ";"

untagged-compound-param = untagged-struct-param / 
                                untagged-union-param

untagged-struct-param = "struct" WS name WS "as" WS "?"  
                                "{" struct-body "}"  ";"

untagged-union-param = "union" WS name WS "as" WS "?"
                                "{" union-body "}" ";"

last-untagged-UMF-parameter  =  last-untagged-simple-param  / 
                                      last-untagged-compound-param

last-untagged-simple-type = simple-type WS name cardinality 
                                                WS "as" WS  "?"  ";"

last-untagged-compound-param = last-untagged-struct-param / 
                                     last-untagged-union-param

last-untagged-struct-param = 
                           "struct" WS name cardinality WS "as" WS "?"  
                                "{"  struct-body "}"  ";"

last-untagged-union-param = 
                           "union" WS name cardinality WS "as" WS "?"
                                "{" union-body "}" ";"

UMF-parameter  =  simple-param  /  compound-param

simple-param = simple-type  WS  name [ cardinality ]  
                                    [ WS "as" WS  explicit-tag  ]  
                                    [  WS  plugin  ]  ";"
cardinality = "[" [ min-occurrences ".." ] max-occurrences "]"
min-occurrences  =  ["-"] 1*DIGIT
max-occurrences  =  (  ["-"] 1*DIGIT  /  "*"  )

explicit-tag = 1* (safe-char)

safe-char  =  %x21 / 
                    ; Not "
                    %x23-26 / 
                    ; Not ' ( )
                    %28-2B
                    ; Not ,
                    %x2D-3C / 
                    ; Not =
                    %x3E
                    ; Not ?
                    %x40-7A /
                    ; Not {
                    %7C /
                    ; Not }
                    %7E-7F
                       ; Visible characters except = , " ' { } ( ) ?
      
compound-param  =  struct-param  /  union-param
struct-param = "struct" WS name [ cardinality ] 
                                            [ WS "as" WS explicit-tag ] 
                                            [ WS plugin ] 
                                "{" struct-body "}"  ";"
union-param = "union" WS name [ cardinality ] 
                                            [ WS "as" WS explicit-tag ]
                                            [ WS plugin ]
                                "{" union-body "}" ";"

struct-extension = "[" 1*( UMF-parameter ) "]"

singular-UMF-parameter  =  singular-simple-param  / 
                                 singular-compound-param

singular-simple-param = type WS name [ WS "as" WS explicit-tag ] 
                                           [ WS plugin ]  ";"

singular-compound-param = singular-struct-param /
singular-struct-param = "struct" WS name 
                                             [ WS "as" WS explicit-tag ]
                                             [ WS plugin ] 
                                "{" struct-body "}"  ";"
singular-union-param = "union" WS name [ WS "as" explicit-tag ] 
                                             [ WS plugin ]
                                "{" union-body "}" ";"

third-party-extension = "plug" WS
                               tp-struct-extension / 
                                    tp-union-extension
                              "into" WS name *( "::" name )
                                        *( "," name *( "::" name ) ) ";"

tp-struct-extension = UMF-parameter
tp-union-extension = singular-UMF-parameter

WS = comment / " " / HTAB / CR / LF 
                                  ; HTAB, CR, LF defined in RFC-2234
                                  ; White space may appear between any
                                  ; token and is not limited to where
                                  ; it is explicitly specified

comment = c-comment / cpp-comment
c-comment = "/*" <any except */> "*/"
cpp-comment = "//" *( HTAB / %x20-%7f ) ( CR / LF )
                       ; A comment is treated as a single space for the 
                       ; purposes of parsing
   

tag  =  value

tag  =  value, value, value

join = { 'Alice' }  
msg = { to = 2, 5, 8, 58  
msg = 'Where are we going for dinner' }  
   

UMF-text-message  = struct-body  /
                          union-body   /
                          simple-value
   
struct-body = *( value WS )
                    [ value *( "," value ) WS ]
                    *( ( tag WS ) /              ; For a null parameter
                       ( tag  "="  value *(  ","  value ) WS ) )

tag = 1*( safe-char )
   

union-body =  integer-value /
                    tag /                  ; For a null parameter
                    ( tag "=" value )
   

value = simple-value / compound-value

simple-value = bool-value / integer-value / 
                     ipv4addr-value / ipv6addr-value  /   
                     ascii-value / unquoted-ascii-value / unicode-value /
                     const-value / embedded-value / bytes-value
      

bool-value = "True" / "False"

int-value = [ "-" ] 1*DIGIT

ipv4addr-value = 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT

ipv6addr-value = ( 1*3DIGIT *( ":"  1*3DIGIT ) 
                                    [ ":" *( ":"  1*3DIGIT ] )
      

ascii-value = 
           "'" *( %x00-26 / %x28-5B / %x2D-x7F / "\\" / "\'" ) "'"
      
unquoted-ascii-value = 1*( safe-char )

safe-char = %x21 / 
                  ; Not "
                  %x23-26 / 
                  ; Not ' ( )
                  %28-2B
                  ; Not ,
                  %x2D-3C / 
                  ; Not =
                  %x3E
                  ; Not ?
                  %x40-7A /
                  ; Not {
                  %7C /
                  ; Not }
                  %7E-7F )
                        ; Visible characters except = , " ' { } ( ) ?
unicode-value = DQUOTE
                 *( %x00-21 / %x23-5B / %x5D-xFF / "\\" / "\" DQUOTE ) 
                  DQUOTE
                             ; DQUOTE defined in RFC 2234

byte-value = 1*( HEXDIG HEXDIG )    ; HEXDIG defined in RFC 2234

const-value = 1*( safe-char )

embedded-value = "(" *(%x00-28 / %x2A-5B / %x5D-FF / 
                          "\)" / "\\" ) ")"     ; \ & ) are escaped
      

compound-value = struct-value / union-value

struct-value = "{" struct-body "}"

union-value = union-body WS

WS = 1*( comment / SP / HTAB / CR / LF )  
                       ; SP HTAB CR LF defined in RFC 2234
                       ; WS may appear between any token and is not  
                       ; limited to those places where it is 
                       ; explicitly specified
comment = c-comment / cpp-comment
c-comment = "/*" <any except */> "*/"
cpp-comment = "//" *( HTAB / %x20-%7f ) ( CR / LF )
                       ; A comment is treated as a single space for the 
                       ; purposes of parsing
      

delimited-UMF-text-message = UMF-text-message "}"

my-bool = True

my-int = 5643

my-ipv4addr = 10.0.0.1

my-ipv6addr = 201:123::0

my-ascii = 'UMF'

my-unquoted-ascii = UMF

my-unicode = "UMF"

my-const = UMF

my-bytes = 01AF3C

my-embedded = ( my-other-int=5 single-closing-bracket-text= '\)' )

my-struct = { 5434 All time=98787654654 }

my-union = 5434

my-union1 = Switch

my-union2 = Volume = 11

