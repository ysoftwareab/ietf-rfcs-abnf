r_b = [1, b, b^2, ..., b^(R-1)]

u_b = r_b*C

Result=0 (OK)  The handshaking procedure completed successfully
            and the streaming toward the new lower peers has started.

Result=1 (NO_Resource)  The node has exhausted its share of
            upload bandwidth and it cannot satisfy the request.

Result=2 (NO_Reply)  The handshaking procedure did not complete
            successfully since the lower peer did not acknowledge the
            Set_Default request (see the handshaking procedure in
            Section 8).
Result=0 (OK)  No error, the streaming toward the lower peers
            has stopped.

Result=3 (NO_Target)  The target specified in the packet is not
            a lower peer of the node or it is not receiving data from
            the specified channel.

Result=0 (OK)  No error, the streaming to the old lower peers
            has stopped and the streaming to the new peer has started.

Result=2 (NO_Reply)  The handshaking procedure did not complete
            successfully since the lower peer did not acknowledge the
            Set_Default request (see the handshaking procedure
            (Section 8)).  The streaming to the old peer is nevertheless
            stopped.
Result=3 (NO_Target)  The old peer is not a lower peer of the
            node.  No action is taken.

K=H(S | NONCE)
ccdf              = profile-line
                       [rate-ctl-line]
                       [stream-line]
                       [session-opt-line]
                       [self-line]
                       *channel-line
                       [find-line]
                       [src-signature]
                       [snd-signature]
                       [hello-signature]
                       *policy-line
                       *peer-block

profile-line      = %x70 plugin-spec                      ; 'p'

rate-ctl-line     = %x72 plugin-spec                      ; 'r'

stream-line       = %x73 stream-id-list EOL               ; 's'
stream-id-list    = 1*byte

session-opt-line  = %x6F [session-name] [SP magic]  EOL   ; 'o'
session-name      = token
magic             = byte

self-line         = %x59 peer-id [SP self-stream-ids] EOL   ; 'Y'
peer-id           = int32 / "*"
self-stream-ids   = 1*byte

channel-line      = %x43 parameter-block                    ; 'C'

find-line         = %x66 plugin-spec                        ; 'f'
peer-block        = %x7e node-type node-id SP channel-list  EOL ; 'n'
                       *attribute-line
                       generalized-addr
                       [embedded-pkt]
                       *data-punct-line
                       [ctl-punct-line]
generalized-addr  = %63 plugin-spec                          ; 'c'
embedded-pkt      = %45 embedded-data EOL                    ; 'E'
node-type         = %x6C / %x6f / %x75             ; 'l', 'o', 'u'
ctl-punct-line    = %x58 num EOL                        ; 'X'
data-punct-line   = (rand-punct / mod-punct) EOL
rand-punct        = %x78 %x52 class channel-list SP num     ; 'xR'
mod-punct         = %x78 %x4D class channel-list SP mod 1*byte ; 'xM'
num               = byte
mod               = byte
class             = byte
node-id           = int32

policy-line       = %x50 capability SP allowed-list      ; 'P'
capability        = "self-send" / "self-stop" / "self-redir"
                     / "3rd-send"  / "3rd-stop"  / "3rd-redir"
                     / "routing" / "cert"
allowed-list      = "all" / "none" / group-list
group-list        = peer-group *(SP peer-group)
peer-group        = mask-id / node-id
mask-id           = mask ":" value
mask              = int32
value             = int32

src-signature     = %x53 plugin-spec                      ; 'S'
snd-signature     = %x4E plugin-spec                      ; 'N'
hello-signature   = %x48 plugin-spec                      ; 'H'

plugin-spec       = plugin-name parameter-block
plugin-name       = identifier

parameter-block   = *(SP parameter) EOL
                       *attribute-line
parameter         = token

attribute-line    = %x61 attr-name "=" attr-value  EOL    ; 'a'
attr-name         = identifier
attr-value        = *%x20-7E


channel-list      = *4HEXDIGIT

EOL               = LF
byte              = 2HEXDIGIT
int16             = 4HEXDIGIT
int32             = 8HEXDIGIT
integer           = 1*HEXDIGIT
identifier        = ALPHA *id-char
id-char           = ALPHA / DIGIT / "-" / "_"
token             = 1*VCHAR
embedded-data     = base64-enc
base64-enc        = *base64-word base64-end
base64-word       = 4BASE64
base64-end        = 4BASE64 / (3BASE64 "=") / (2BASE64 "==")
BASE64            = ALPHA / DIGIT / "+" / "-"

                   Figure 14: ABNF grammar for the CCDF

aredundancy=4/3
aredundancy=5/3
aredundancy=1/1

Mask=0 and Value=0) and "none" (none can do the action, equivalent
request-uri = prefix "?" parameter *(& parameter)
prefix      = abs_path
parameter   = source / dest / session / signature
source      = "from=" peer-id
dest        = "to="   peer-id
session     = "sess=" *sess-char
signature   = "sign=" base64url
sess-char   = unreserved | escaped | ":" | "@" | "$"
peer-id     = 1*DIGIT

name  = ALPHA *(ALPHA / DIGIT / "-" / "_")

                    Figure 15: Syntax for parameter names

r = [1, B, B^2, ..., B^(R-1)]

U=r*G

C=2^(d-1) c_{d-1} + 2^(d-2) c_{d-2} + ... 2 c_1  + c_0
C = b_0 + 256 b_1 + 256^2 b_2 + ...

L=(gf_size*R) - (length (P) mod (gf_size*R))

L = A*128 + B
v=0
c=IN IP4 ppetp.example.com
m=video 12345 RTP/AVP/PPETP 34
a=control: rtsps://live.example.com/concert/video

USERNAME=alice, USE-NONCE=88888,
LOCAL-NONCE=11111, SIGNATURE=23xgajdav)

NONCE=88888, LOCAL-NONCE=25252,
PROTOCOL=https|netmanager.example.com/12345?q=da..23,
SIGNATURE=daghj391)

agf-size=4
ared-fact=2
amac-size=10
adh-prime=ce98df..23
adh-generator=ccf382..13
agf-size=4
ared-fact=2
amac-size=10
adh-prime=ce98df..23
adh-generator=ccf382..13
v=0
c=IN IP4 alice.example.com
m=video 4242 RTP/AVP/PPETP 34

T_rtt = t_offset + K * RTT
RTT=255.

            +--------+--------+------------------+-----------+
            | Bit 44 | Bit 45 | t_offset (in ms) | K (in ms) |
            +--------+--------+------------------+-----------+
            | 0      | 0      | 0                | 1         |
            | 1      | 0      | 256              | 2         |
            | 0      | 1      | 256*3 = 768      | 8         |
            | 1      | 1      | 256*11 = 2816    | 32        |
            +--------+--------+------------------+-----------+

