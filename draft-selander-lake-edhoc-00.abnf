suite = int / [ 4*4 algs: int / tstr, ? para: any ]

PRK = HKDF-Extract( salt, IKM )

PRK = HMAC-SHA-256( salt, G_XY )

salt = PSK in the symmetric case.

OKM = HKDF-Expand( PRK, info, L )

info = [
     AlgorithmID,
     [ null, null, null ],
     [ null, null, null ],
     [ keyDataLength, h'', other ]
OKM = first L bytes of HMAC( PRK, info || 0x01 )

AlgorithmID = label, keyDataLength = 8 * length, and other = TH_4
TH_4 = H( TH_3, CIPHERTEXT_3 )

PSK    = EDHOC-Exporter( "EDHOC Chaining PSK", length )
ID_PSK = EDHOC-Exporter( "EDHOC Chaining ID_PSK", 4 )

message_1 = (
     TYPE : int,
     SUITES_U : suite / [ index : uint, 2* suite ],
     G_X : bstr,
     C_U : bstr,
     ? UAD_1 : bstr,
message_2 = (
     data_2,
     CIPHERTEXT_2 : bstr,
data_2 = (
     ? C_U : bstr,
     G_Y : bstr,
     C_V : bstr,
message_3 = (
     data_3,
     CIPHERTEXT_3 : bstr,
data_3 = (
     ? C_V : bstr,
message_1 = (
     TYPE : int,
     SUITES_U : suite / [ index : uint, 2* suite ],
     G_X : bstr,
     C_U : bstr,
     ID_PSK : header_map // kid_value : bstr,
     ? UAD_1 : bstr,
PRK_Export = HKDF-Extract( "", PRK || PRK_V || PRK_U )

error = (
     ? C_x : bstr,
     ERR_MSG : tstr,
     ? SUITES_V : suite / [ 2* suite ],
CRED_U =
ID_CRED_U =
CRED_V =
ID_CRED_V =
message_1 =
data_2 =
M_V =
PRK = HMAC-SHA-256(salt, G_XY)

A_2 =
message_2 =
data_3 =
M_U =
PRK = HMAC-SHA-256(salt, G_XY)

A_3 =
message_3 =
ID_PSK =
ID_PSK =
message_1 =
data_2 =
PRK = HMAC-SHA-256(salt, G_XY)

A_2 =
message_2 =
data_3 =
PRK = HMAC-SHA-256(salt, G_XY)
A_3 =
message_3 =
