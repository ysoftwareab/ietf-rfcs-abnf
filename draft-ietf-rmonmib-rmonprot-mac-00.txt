






RMONMIB Working Group                                      Andy Bierman
Internet Draft                                       Cisco Systems, Inc.
                                                            Chris Bucci
                                                     Cisco Systems, Inc.
                                                            Robin Iddon
                                                              3Com, Inc.
                                                       16 November 1998


        Remote Network Monitoring MIB Protocol Identifier Macros


                <draft-ietf-rmonmib-rmonprot-mac-00.txt>





Status of this Memo

This document is an Internet-Draft.  Internet-Drafts are working
documents of the Internet Engineering Task Force (IETF), its areas, and
its working groups.  Note that other groups may also distribute working
documents as Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum of six months
and may be updated, replaced, or obsoleted by other documents at any
time.  It is inappropriate to use Internet-Drafts as reference material
or to cite them other than as ``work in progress.''

To learn the current status of any Internet-Draft, please check the
1id-abstracts.txt listing contained in the Internet- Drafts Shadow
Directories on ftp.ietf.org, nic.nordu.net, venera.isi.edu, or
munnari.oz.au.

Distribution of this document is unlimited. Please send comments to the
RMONMIB Working Group, <rmonmib@cisco.com>.

1.  Copyright Notice

Copyright (C) The Internet Society (1998).  All Rights Reserved.















Internet-Draft               RMON PI Macros                November 1998


2.  Abstract

This memo contains various protocol identifier examples, which can be
used to produce valid protocolDirTable INDEX encodings, as defined by
the Remote Network Monitoring MIB Version 2 [RFC2021] and the RMON
Protocol Identifier Reference [RMONPROT_REF].

This document contains protocol identifier macros for well-known
protocols.  A conformant implementation of the RMON-2 MIB [RFC2021] can
be accomplished without the use of these protocol identifiers, and
accordingly, this document does not specify any IETF standard.  It is
published to encourage better interoperability between RMON-2 agent
implementations, by providing a great deal of RMON related protocol
information in one document.

The first version of the RMON Protocol Identifiers Document [RFC2074]
has been split into a standards-track Reference portion [RMONPROT_REF],
and an 'RMON Protocol Identifier Macros' document (this document) which
contains the non-normative portion of that specification.

3.  Table of Contents

1 Copyright Notice ................................................    1
2 Abstract ........................................................    2
3 Table of Contents ...............................................    2
4 The SNMP Network Management Framework ...........................    3
5 Overview ........................................................    3
5.1 Terms .........................................................    4
5.2 Relationship to the Remote Network Monitoring MIB .............    4
5.3 Relationship to the RMON Protocol Identifier Reference ........    4
5.4 Relationship to Other MIBs ....................................    5
6 Protocol Identifier Macros ......................................    5
6.1 Protocol Stacks And Single-Vendor Applications ................    5
6.1.1 The TCP/IP protocol stack ...................................    6
6.1.2 Novell IPX Stack ............................................   89
6.1.3 The XEROX Protocol Stack ....................................   95
6.1.4 AppleTalk Protocol Stack ....................................   97
6.1.5 Banyon Vines Protocol Stack .................................  102
6.1.6 The DECNet Protocol Stack ...................................  107
6.1.7 The IBM SNA Protocol Stack.  ................................  113
6.1.8 The NetBEUI/NetBIOS Family ..................................  113
6.2 Multi-stack protocols .........................................  117
7 Intellectual Property ...........................................  119
8 Acknowledgements ................................................  120
9 References ......................................................  120
10 Security Considerations ........................................  133
11 Authors' Addresses .............................................  133
12 Full Copyright Statement .......................................  134



Expires May 1999                                                [Page 2]





Internet-Draft               RMON PI Macros                November 1998


4.  The SNMP Network Management Framework

The SNMP Management Framework presently consists of five major
components:

  o  An overall architecture, described in RFC 2271 [RFC2271].

  o  Mechanisms for describing and naming objects and events for the
     purpose of management. The first version of this Structure of
     Management Information (SMI) is called SMIv1 and described in RFC
     1155 [RFC1155], RFC 1212 [RFC1212] and RFC 1215 [RFC1215]. The
     second version, called SMIv2, is described in RFC 1902 [RFC1902],
     RFC 1903 [RFC1903] and RFC 1904 [RFC1904].

  o  Message protocols for transferring management information. The
     first version of the SNMP message protocol is called SNMPv1 and
     described in RFC 1157 [RFC1157]. A second version of the SNMP
     message protocol, which is not an Internet standards track
     protocol, is called SNMPv2c and described in RFC 1901 [RFC1901] and
     RFC 1906 [RFC1906].  The third version of the message protocol is
     called SNMPv3 and described in RFC 1906 [RFC1906], RFC 2272
     [RFC2272] and RFC 2274 [RFC2274].

  o  Protocol operations for accessing management information. The first
     set of protocol operations and associated PDU formats is described
     in RFC 1157 [RFC1157]. A second set of protocol operations and
     associated PDU formats is described in RFC 1905 [RFC1905].

  o  A set of fundamental applications described in RFC 2273 [RFC2273]
     and the view-based access control mechanism described in RFC 2275
     [RFC2275].

Managed objects are accessed via a virtual information store, termed the
Management Information Base or MIB.  Objects in the MIB are defined
using the mechanisms defined in the SMI.

This memo does not specify a MIB module.

5.  Overview

The RMON-2 MIB [RFC2021] uses hierarchically formatted OCTET STRINGs to
globally identify individual protocol encapsulations in the
protocolDirTable.







Expires May 1999                                                [Page 3]





Internet-Draft               RMON PI Macros                November 1998


This guide contains examples of protocol identifier encapsulations,
which can be used to describe valid protocolDirTable entries.  The
syntax of the protocol identifier descriptor is defined in the RMON
Protocol Identifier Reference [RMONPROT_REF].

This document is not intended to be an authoritative reference on the
protocols described herein. Refer to the Official Internet Standards
document [RFC1800], the Assigned Numbers document [RFC1700], or other
appropriate RFCs, IEEE documents, etc. for complete and authoritative
protocol information.

This is the the second revision of this document, and is intended to
replace Section 5 of the first RMON-2 Protocol Identifiers document
[RFC2074].

5.1.  Terms

Refer to the RMON Protocol Identifier Reference [RMONPROT_REF] for
definitions of terms used to describe the Protocol Identifier Macro and
aspects of protocolDirTable INDEX encoding.

5.2.  Relationship to the Remote Network Monitoring MIB

This document is intended to describe some protocol identifier macros,
which can be converted to valid protocolDirTable INDEX values, using the
mapping rules defined in the RMON Protocol Identifier Reference
[RMONPROT_REF].

This document is not intended to limit the protocols that may be
identified for counting in the RMON-2 MIB. Many protocol encapsulations,
not explicitly identified in this document, may be present in an actual
implementation of the protocolDirTable. Also, implementations of the
protocolDirTable may not include all the protocols identified in the
example section below.

5.3.  Relationship to the RMON Protocol Identifier Reference

This document is intentionally separated from the normative reference
document defining protocolDirTable INDEX encoding rules and the protocol
identifier macro syntax [RMONPROT_REF]. This allows frequent updates to
this document without any republication of MIB objects or
protocolDirTable INDEX encoding rules. Note that the base layer and IANA
assigned protocol identifier macros are located in Reference document,
since these encoding values are defined by the RMONMIB WG.






Expires May 1999                                                [Page 4]





Internet-Draft               RMON PI Macros                November 1998


Protocol Identifier macros submitted from the RMON working group and
community at large (to the RMONMIB WG mailing list at
'rmonmib@cisco.com') will be collected and added to this document.

Macros submissions will be collected in the IANA's MIB files under the
directory "ftp://ftp.isi.edu/mib/rmonmib/rmon2_pi_macros/" and in the
RMONMIB working group mailing list message archive file
"ftp://ftpeng.cisco.com/ftp/rmonmib/rmonmib".

5.4.  Relationship to Other MIBs

The RMON Protocol Identifier Macros document is intended for use with
the RMON Protocol Identifier Reference [RMONPROT_REF] and the RMON-2 MIB
protocolDirTable [RFC2021]. It is not relevant to any other MIB, or
intended for use with any other MIB.


6.  Protocol Identifier Macros

This section contains protocol identifier macros for some well-known
protocols, although some of them may no longer be in use.  These macros
reference the base layer identifiers found in section 7 of the RMON
Protocol Identifier Reference [RMONPROT_REF].  These identifiers are
listed below:

      ether2
      llc
      snap
      vsnap
      ianaAssigned
      802-1Q

Refer to the RMON Protocol Identifier Reference [RMONPROT_REF] for the
protocol identifier macro definitions for these protocols.

6.1.  Protocol Stacks And Single-Vendor Applications

Network layer protocol identifier macros contain additional information
about the network layer, and is found immediately following a base
layer-identifier in a protocol identifier.

The ProtocolDirParameters supported at the network layer are
'countsFragments(0)', and 'tracksSessions(1). An agent may choose to
implement a subset of these parameters.






Expires May 1999                                                [Page 5]





Internet-Draft               RMON PI Macros                November 1998


The protocol-name should be used for the ProtocolDirDescr field.  The
ProtocolDirType ATTRIBUTES used at the network layer are
'hasChildren(0)' and 'addressRecognitionCapable(1)'. Agents may choose
to implement a subset of these attributes for each protocol, and
therefore limit which tables the indicated protocol can be present (e.g.
protocol distribution, host, and matrix tables)..

The following protocol-identifier macro declarations are given for
example purposes only. They are not intended to constitute an exhaustive
list or an authoritative source for any of the protocol information
given.  However, any protocol that can encapsulate other protocols must
be documented here in order to encode the children identifiers into
protocolDirID strings. Leaf protocols should be documented as well, but
an implementation can identify a leaf protocol even if it isn't listed
here (as long as the parent is documented).


6.1.1.  The TCP/IP protocol stack

chaosnet PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Chaosnet"
    REFERENCE
       "TBD"
    ::= {
        ether2 0x804,      -- [ 0.0.8.4 ]
        802-1Q 0x804       -- [ 0.0.8.4 ]
    }

arp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "An Address Resolution Protocol message (request or response).
       This protocol does not include Reverse ARP (RARP) packets, which
       are counted separately."
    REFERENCE
       "RFC 826 [RFC826] defines the Address Resolution Protocol."
    ::= {
        ether2 0x806,   -- [ 0.0.8.6 ]
        snap   0x806,
        802-1Q 0x806    -- [ 0.0.8.6 ]
    }





Expires May 1999                                                [Page 6]





Internet-Draft               RMON PI Macros                November 1998


ip PROTOCOL-IDENTIFIER
    PARAMETERS {
          countsFragments(0)  -- This parameter applies to all child
                              -- protocols.
    }
    ATTRIBUTES {
        hasChildren(0),
        addressRecognitionCapable(1)
    }
    DESCRIPTION
       "The protocol identifiers for the Internet Protocol (IP). Note
       that IP may be encapsulated within itself, so more than one of
       the following identifiers may be present in a particular
       protocolDirID string."
    CHILDREN
       "Children of 'ip' are selected by the value in the Protocol field
       (one octet), as defined in the PROTOCOL NUMBERS table within the
       Assigned Numbers Document.

       The value of the Protocol field is encoded in an octet string as
       [ 0.0.0.a ], where 'a' is the protocol field .

       Children of 'ip' are encoded as [ 0.0.0.a ], and named as 'ip a'
       where 'a' is the protocol field value. For example, a
       protocolDirID-fragment value of:
          0.0.0.1.0.0.8.0.0.0.0.1

       defines an encapsulation of ICMP (ether2.ip.icmp)"
    ADDRESS-FORMAT
       "4 octets of the IP address, in network byte order.  Each ip
       packet contains two addresses, the source address and the
       destination address."
    DECODING
       "Note: ether2.ip.ipip4.udp is a different protocolDirID than
       ether2.ip.udp, as identified in the protocolDirTable. As such,
       two different local protocol index values will be assigned by the
       agent. E.g. (full INDEX values shown):
        ether2.ip.ipip4.udp =
            16.0.0.0.1.0.0.8.0.0.0.0.4.0.0.0.17.4.0.0.0.0
        ether2.ip.udp =
            12.0.0.0.1.0.0.8.0.0.0.0.17.3.0.0.0 "
    REFERENCE
       "RFC 791 [RFC791] defines the Internet Protocol; The following
       URL defines the authoritative repository for the PROTOCOL NUMBERS
       Table:





Expires May 1999                                                [Page 7]





Internet-Draft               RMON PI Macros                November 1998


          ftp://ftp.isi.edu/in-notes/iana/assignments/protocol-numbers"
    ::= {
          ether2     0x0800,
          llc        0x06,
          snap       0x0800,
          -- ip         4,           ** represented by the ipip4 macro
          -- ip         94,          ** represented by the ipip macro
          802-1Q     0x0800,         -- [0.0.8.0]
          802-1Q     0x02000006      -- 1Q-LLC [2.0.0.6]
    }








































Expires May 1999                                                [Page 8]





Internet-Draft               RMON PI Macros                November 1998


 -- ****************************************************************
 --
 --                        Children of IP
 --
 -- ****************************************************************

icmp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Internet Message Control Protocol"
    REFERENCE
       "RFC 792 [RFC792] defines the Internet Control Message Protocol."
    ::= {
        ip 1,
        ipip4 1,
        ipip 1
    }

igmp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Internet Group Management Protocol; IGMP is used by IP hosts to
       report their host group memberships to any immediately-
       neighboring multicast routers."
    REFERENCE
       "Appendix A of Host Extensions for IP Multicasting [RFC1112]
       defines the Internet Group Management Protocol."
    ::= {
        ip 2,
        ipip4 2,
        ipip 2
    }

ggp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Gateway-to-Gateway Protocol; DARPA Internet Gateway
       (historical)"
    REFERENCE
       "RFC 823 [RFC823] defines the Gateway-to-Gateway Protocol."
    ::= {
        ip 3,





Expires May 1999                                                [Page 9]





Internet-Draft               RMON PI Macros                November 1998


        ipip4 3,
        ipip 3
    }

ipip4 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
        hasChildren(0),
        addressRecognitionCapable(1)
    }
    DESCRIPTION
       "IP in IP Tunneling"
    CHILDREN
       "Children of 'ipip4' are selected and encoded in the same manner
       as children of IP."
    ADDRESS-FORMAT
       "The 'ipip4' address format is the same as the IP address
       format."
    DECODING
       "Note: ether2.ip.ipip4.udp is a different protocolDirID than
       ether2.ip.udp, as identified in the protocolDirTable. As such,
       two different local protocol index values will be assigned by the
       agent. E.g. (full INDEX values shown):
        ether2.ip.ipip4.udp =
            16.0.0.0.1.0.0.8.0.0.0.0.4.0.0.0.17.4.0.0.0.0
        ether2.ip.udp =
            12.0.0.0.1.0.0.8.0.0.0.0.17.3.0.0.0 "
    REFERENCE
       "RFC 1853 [RFC1853] defines IP in IP over Protocol 4.;
        RFC 2003 [RFC2003] defines IP Encapsulation within IP"
    ::= {
        ip 4,
        ipip4 4,
        ipip 4
    }

st PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Internet Stream Protocol Version 2 (ST2); ST2 is an experimental
       resource reservation protocol intended to provide end-to-end
       real-time guarantees over an internet."
    REFERENCE
       "RFC 1819 [RFC1819] defines version 2 of the Internet Stream





Expires May 1999                                               [Page 10]





Internet-Draft               RMON PI Macros                November 1998


       Protocol."
    ::= {
        ip 5,
        ipip4 5,
        ipip 5
    }

tcp  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
         hasChildren(0)
    }
    DESCRIPTION
       "Transmission Control Protocol"
    CHILDREN
       "Children of TCP are identified by the 16 bit Source or
       Destination Port value as specified in RFC 793. They are encoded
       as [ 0.0.a.b], where 'a' is the MSB and 'b' is the LSB of the
       port value. Both bytes are encoded in network byte order.  For
       example, a protocolDirId-fragment of:
           0.0.0.1.0.0.8.0.0.0.0.6.0.0.0.23

       identifies an encapsulation of the telnet protocol
       (ether2.ip.tcp.telnet)"
    REFERENCE
       "RFC 793 [RFC793] defines the Transmission Control Protocol.

       The following URL defines the authoritative repository for
       reserved and registered TCP port values:

         ftp://ftp.isi.edu/in-notes/iana/assignments/port-numbers"
    ::=  {
        ip 6,
        ipip4 6,
        ipip 6
    }

ucl PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "UCL; University College London Protocol"
    REFERENCE
       "TBD"
    ::= {





Expires May 1999                                               [Page 11]





Internet-Draft               RMON PI Macros                November 1998


        ip  7,
        ipip4  7,
        ipip  7
    }

egp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Exterior Gateway Protocol (historical)"
    REFERENCE
       "RFC 904 [RFC904] defines the Exterior Gateway Protocol."
    ::= {
        ip  8,
        ipip4  8,
        ipip  8
    }

igp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Any private interior gateway."
    REFERENCE
       "N/A"
    ::= {
        ip  9,
        ipip4  9,
        ipip  9
    }

bbn-rcc-mon PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "BBN-RCC-MON; BBN RCC Monitoring Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip  10,
        ipip4  10,
        ipip  10
    }

nvp2 PROTOCOL-IDENTIFIER





Expires May 1999                                               [Page 12]





Internet-Draft               RMON PI Macros                November 1998


    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "NVP-II; Network Voice Protocol"
    REFERENCE
       "RFC 741 [RFC741] defines the Network Voice Protocol"
    ::= {
        ip 11,
        ipip4 11,
        ipip 11
    }

pup PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "PUP Protocol"
    REFERENCE
       "Xerox; TBD"
    ::= {
        ip 12,
        ipip4 12,
        ipip 12
    }

argus PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "ARGUS Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip  13,
        ipip4  13,
        ipip  13
    }

emcon PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Emission Control Protocol"
    REFERENCE
       "TBD"





Expires May 1999                                               [Page 13]





Internet-Draft               RMON PI Macros                November 1998


    ::= {
        ip  14,
        ipip4  14,
        ipip  14
    }

xnet PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Cross Net Debugger (historical)"
    REFERENCE
       "[IEN158]"
    ::= {
        ip  15,
        ipip4  15,
        ipip  15
    }

chaos PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "CHAOS Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 16,
        ipip4 16,
        ipip 16
    }

udp  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
         hasChildren(0)
    }
    DESCRIPTION
       "User Datagram Protocol"
    CHILDREN
       "Children of UDP are identified by the 16 bit Source or
       Destination Port value as specified in RFC 768. They are encoded
       as [ 0.0.a.b ], where 'a' is the MSB and 'b' is the LSB of the
       port value. Both bytes are encoded in network byte order.  For
       example, a protocolDirId-fragment of:





Expires May 1999                                               [Page 14]





Internet-Draft               RMON PI Macros                November 1998


           0.0.0.1.0.0.8.0.0.0.0.17.0.0.0.161

       identifies an encapsulation of SNMP (ether2.ip.udp.snmp)"
    REFERENCE
       "RFC 768 [RFC768] defines the User Datagram Protocol.

       The following URL defines the authoritative repository for
       reserved and registered UDP port values:

         ftp://ftp.isi.edu/in-notes/iana/assignments/port-numbers"
   ::= {
        ip 17,
        ipip4 17,
        ipip 17
    }

mux PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Multiplexing Protocol (historical)"
    REFERENCE
       "IEN-90 [IEN-90] defines the Multiplexing Protocol"
    ::= {
        ip 18,
        ipip4 18,
        ipip 18
    }

dcn-meas PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "DCN Measurement Subsystems"
    REFERENCE
       "TBD"
    ::= {
        ip  19,
        ipip4  19,
        ipip  19
    }

hmp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }





Expires May 1999                                               [Page 15]





Internet-Draft               RMON PI Macros                November 1998


    DESCRIPTION
       "Host Monitoring Protocol"
    REFERENCE
       "RFC 869 [RFC869] defines the Host Monitoring Protocol"
    ::= {
        ip  20,
        ipip4  20,
        ipip  20
    }

prm PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Packet Radio Measurement"
    REFERENCE
       "TBD"
    ::= {
        ip 21,
        ipip4 21,
        ipip 21
    }

xns-idp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "XEROX NS IDP"
    REFERENCE
       "TBD"
    ::= {
        ip  22,
        ipip4  22,
        ipip  22
    }

trunk-1 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Trunk-1 Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 23,





Expires May 1999                                               [Page 16]





Internet-Draft               RMON PI Macros                November 1998


        ipip4 23,
        ipip 23
    }

trunk-2 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Trunk-2 Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 24,
        ipip4 24,
        ipip 24
    }

leaf-1 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Leaf-1 Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 25,
        ipip4 25,
        ipip 25
    }

leaf-2 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Leaf-2 Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 26,
        ipip4 26,
        ipip 26
    }

rdp PROTOCOL-IDENTIFIER
    PARAMETERS { }





Expires May 1999                                               [Page 17]





Internet-Draft               RMON PI Macros                November 1998


    ATTRIBUTES { }
    DESCRIPTION
       "Reliable Data Protocol"
    REFERENCE
       "RFC 908 [RFC908] defines the original protocol; RFC 1151
       [RFC1151] defines version 2 of the Reliable Data Protocol."
    ::= {
        ip 27,
        ipip4 27,
        ipip 27
    }

irtp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Internet Reliable Transaction Protocol"
    REFERENCE
       "RFC 938 [RFC938] defines the Internet Reliable Transaction
       Protocol functional and  interface specification."
    ::= {
        ip 28,
        ipip4 28,
        ipip 28
    }

iso-tp4  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "ISO Transport Protocol Specification"
    REFERENCE
       "RFC 905 [RFC905] defines the ISO Transport Protocol
       Specification; ISO DP 8073"
    ::= {
        ip  29,
        ipip4  29,
        ipip  29
    }

netblt PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Bulk Data Transfer Protocol"





Expires May 1999                                               [Page 18]





Internet-Draft               RMON PI Macros                November 1998


    REFERENCE
       "RFC 998 [RFC998] defines NETBLT: A Bulk Data Transfer Protocol."
    ::= {
        ip 30,
        ipip4 30,
        ipip 30
    }

mfe-nsp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "MFE Network Services Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 31,
        ipip4 31,
        ipip 31
    }

merit-inp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "MERIT Internodal Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 32,
        ipip4 32,
        ipip 32
    }

sep PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Sequential Exchange Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 33,
        ipip4 33,
        ipip 33





Expires May 1999                                               [Page 19]





Internet-Draft               RMON PI Macros                November 1998


    }

third-pc PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "3PC; Third Party Connect Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 34,
        ipip4 34,
        ipip 34
    }

idpr PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Inter-Domain Policy Routing Protocol"
    REFERENCE
       "RFC 1479 [RFC1479] defines Version 1 of the Inter-Domain Policy
       Routing Protocol."
    ::= {
        ip 35,
        ipip4 35,
        ipip 35
    }

xtp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "XTP"
    REFERENCE
       "TBD"
    ::= {
        ip 36,
        ipip4 36,
        ipip 36
    }

ddp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }





Expires May 1999                                               [Page 20]





Internet-Draft               RMON PI Macros                November 1998


    DESCRIPTION
       "Datagram Delivery Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 37,
        ipip4 37,
        ipip 37
    }

idpr-cmtp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "IDPR Control Message Transport Protocol"
    REFERENCE
       "RFC 1479 [RFC1479] defines Version 1 of the Inter-Domain Policy
       Routing Protocol."
    ::= {
        ip 38,
        ipip4 38,
        ipip 38
    }

tp-plus-plus PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "TP++ Transport Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 39,
        ipip4 39,
        ipip 39
    }

il PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "IL Transport Protocol"
    REFERENCE
       "TBD"
    ::= {





Expires May 1999                                               [Page 21]





Internet-Draft               RMON PI Macros                November 1998


        ip 40,
        ipip4 40,
        ipip 40
    }

sip PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Simple Internet Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 41,
        ipip4 41,
        ipip 41
    }

sdrp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Source Demand Routing Protocol"
    REFERENCE
       "RFC 1940 [RFC1940] defines version 1 of the Source Demand
       Routing: Packet Format and Forwarding Specification"
    ::= {
        ip 42,
        ipip4 42,
        ipip 42
    }

sip-sr PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SIP Source Route"
    REFERENCE
       "TBD"
    ::= {
        ip 43,
        ipip4 43,
        ipip 43
    }






Expires May 1999                                               [Page 22]





Internet-Draft               RMON PI Macros                November 1998


sip-frag PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SIP Fragment"
    REFERENCE
       "TBD"
    ::= {
        ip 44,
        ipip4 44,
        ipip 44
    }

idrp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Inter-Domain Routing Protocol"
    REFERENCE
       "RFC 1745 [RFC1745] defines BGP4/IDRP for IP."
    ::= {
        ip 45,
        ipip4 45,
        ipip 45
    }

rsvp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Resource Reservation Setup Protocol"
    REFERENCE
       "Resource ReSerVation Protocol (RSVP); Version 1 Functional
        Specification [RFC2205]."
    ::= {
        ip 46,
        ipip4 46,
        ipip 46
    }

gre PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "General Routing Encapsulation"





Expires May 1999                                               [Page 23]





Internet-Draft               RMON PI Macros                November 1998


    REFERENCE
        "RFC 1701 [RFC1701] defines Generic Routing Encapsulation (GRE);
       RFC 1702 [RFC1702] defines Generic Routing Encapsulation over
       IPv4 networks"
    ::= {
        ip 47,
        ipip4 47,
        ipip 47
    }

mhrp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Mobile Host Routing Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 48,
        ipip4 48,
        ipip 48
    }

bna PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "BNA"
    REFERENCE
       "TBD"
    ::= {
        ip 49,
        ipip4 49,
        ipip 49
    }

sipp-esp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SIPP Encap Security Payload"
    REFERENCE
       "TBD"
    ::= {
        ip 50,





Expires May 1999                                               [Page 24]





Internet-Draft               RMON PI Macros                November 1998


        ipip4 50,
        ipip 50
    }

sipp-ah PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SIPP Authentication Header"
    REFERENCE
       "TBD"
    ::= {
        ip 51,
        ipip4 51,
        ipip 51
    }

i-nlsp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Integrated Net Layer Security  TUBA"
    REFERENCE
       "TBD"
    ::= {
        ip 52,
        ipip4 52,
        ipip 52
    }

swipe PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "IP with Encryption"
    REFERENCE
       "TBD"
    ::= {
        ip 53,
        ipip4 53,
        ipip 53
    }

nhrp PROTOCOL-IDENTIFIER
    PARAMETERS { }





Expires May 1999                                               [Page 25]





Internet-Draft               RMON PI Macros                November 1998


    ATTRIBUTES { }
    DESCRIPTION
       "NBMA Next Hop Resolution Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 54,
        ipip4 54,
        ipip 54
    }

 --  55-60                 Unassigned

priv-host PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Pseudo-protocol reserved for any internal host protocol."
    REFERENCE
       "N/A"
    ::= {
        ip 61,
        ipip4 61,
        ipip 61
    }

cftp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "CFTP"
    REFERENCE
       "TBD"
    ::= {
        ip 62,
        ipip4 62,
        ipip 62
    }

priv-net PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Pseudo-protocol reserved for any local network protocol."
    REFERENCE





Expires May 1999                                               [Page 26]





Internet-Draft               RMON PI Macros                November 1998


       "N/A"
    ::= {
        ip 63,
        ipip4 63,
        ipip 63
    }

sat-expak PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SATNET and Backroom EXPAK"
    REFERENCE
       "TBD"
    ::= {
        ip 64,
        ipip4 64,
        ipip 64
    }

kryptolan PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Kryptolan"
    REFERENCE
       "TBD"
    ::= {
        ip 65,
        ipip4 65,
        ipip 65
    }

rvd PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "MIT Remote Virtual Disk Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 66,
        ipip4 66,
        ipip 66
    }





Expires May 1999                                               [Page 27]





Internet-Draft               RMON PI Macros                November 1998


ippc PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Internet Pluribus Packet Core"
    REFERENCE
       "TBD"
    ::= {
        ip 67,
        ipip4 67,
        ipip 67
    }

priv-distfile PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Pseudo-protocol reserved for any distributed file system."
    REFERENCE
       "N/A"
    ::= {
        ip 68,
        ipip4 68,
        ipip 68
    }

sat-mon PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SATNET Monitoring"
    REFERENCE
       "TBD"
    ::= {
        ip 69,
        ipip4 69,
        ipip 69
    }

visa PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "VISA Protocol"
    REFERENCE





Expires May 1999                                               [Page 28]





Internet-Draft               RMON PI Macros                November 1998


       "TBD"
    ::= {
        ip 70,
        ipip4 70,
        ipip 70
    }

ipcv PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Internet Packet Core Utility"
    REFERENCE
       "TBD"
    ::= {
        ip 71,
        ipip4 71,
        ipip 71
    }

cpnx PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Computer Protocol Network Executive"
    REFERENCE
       "TBD"
    ::= {
        ip 72,
        ipip4 72,
        ipip 72
    }

cphb PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Computer Protocol Heart Beat"
    REFERENCE
       "TBD"
    ::= {
        ip 73,
        ipip4 73,
        ipip 73
    }





Expires May 1999                                               [Page 29]





Internet-Draft               RMON PI Macros                November 1998


wsn PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Wang Span Network"
    REFERENCE
       "TBD"
    ::= {
        ip 74,
        ipip4 74,
        ipip 74
    }

pvp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Packet Video Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 75,
        ipip4 75,
        ipip 75
    }

br-sat-mon PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Backroom SATNET Monitoring"
    REFERENCE
       "TBD"
    ::= {
        ip 76,
        ipip4 76,
        ipip 76
    }

sun-nd PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SUN ND PROTOCOL-Temporary"
    REFERENCE





Expires May 1999                                               [Page 30]





Internet-Draft               RMON PI Macros                November 1998


       "TBD"
    ::= {
        ip 77,
        ipip4 77,
        ipip 77
    }

wb-mon PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "WIDEBAND Monitoring"
    REFERENCE
       "TBD"
    ::= {
        ip 78,
        ipip4 78,
        ipip 78
    }

wb-expak PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "WIDEBAND EXPAK"
    REFERENCE
       "TBD"
    ::= {
        ip 79,
        ipip4 79,
        ipip 79
    }

ISO-IP PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "ISO Internet Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 80,
        ipip4 80,
        ipip 80
    }





Expires May 1999                                               [Page 31]





Internet-Draft               RMON PI Macros                November 1998


vmtp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Versatile Message Transaction Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 81,
        ipip4 81,
        ipip 81
    }

secure-mvtp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Secure Versatile Message Transaction Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 82,
        ipip4 82,
        ipip 82
    }

vines PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "VINES"
    REFERENCE
       "TBD"
    ::= {
        ip 83,
        ipip4 83,
        ipip 83
    }

ttp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "TTP"
    REFERENCE





Expires May 1999                                               [Page 32]





Internet-Draft               RMON PI Macros                November 1998


       "TBD"
    ::= {
        ip 84,
        ipip4 84,
        ipip 84
    }

nfsnet-igp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "NSFNET-IGP"
    REFERENCE
       "TBD"
    ::= {
        ip 85,
        ipip4 85,
        ipip 85
    }

dgp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Dissimilar Gateway Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 86,
        ipip4 86,
        ipip 86
    }

tcf PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "TCF"
    REFERENCE
       "TBD"
    ::= {
        ip 87,
        ipip4 87,
        ipip 87
    }





Expires May 1999                                               [Page 33]





Internet-Draft               RMON PI Macros                November 1998


igrp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "IGRP; Cisco routing protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 88,
        ipip4 88,
        ipip 88
    }

ospf PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Open Shortest Path First Interior GW Protocol (OSPFIGP)."
    REFERENCE
       "RFC 1583 [RFC1583] defines version 2 of the OSPF protocol."
    ::= {
        ip 89,
        ipip4 89,
        ipip 89
    }

sprite-rpc PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Sprite RPC Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 90,
        ipip4 90,
        ipip 90
    }

larp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Locus Address Resolution Protocol"
    REFERENCE





Expires May 1999                                               [Page 34]





Internet-Draft               RMON PI Macros                November 1998


       "TBD"
    ::= {
        ip 91,
        ipip4 91,
        ipip 91
    }

mtp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Multicast Transport Protocol"
    REFERENCE
       "RFC 1301 [RFC1301] defines the Multicast Transport Protocol."
    ::= {
        ip 92,
        ipip4 92,
        ipip 92
    }

ax-25 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "AX.25 Frame Encapsulation"
    REFERENCE
       "RFC 1226 [RFC1226] defines Internet Protocol Encapsulation of
       AX.25 Frames."
    ::= {
        ip 93,
        ipip4 93,
        ipip 93
    }

ipip PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
        hasChildren(0),
        addressRecognitionCapable(1)
    }
    DESCRIPTION
       "IP-within-IP Encapsulation Protocol"
    CHILDREN
       "Children of 'ipip' are selected and encoded in the same manner
       as children of IP."





Expires May 1999                                               [Page 35]





Internet-Draft               RMON PI Macros                November 1998


    ADDRESS-FORMAT
       "The 'ipip' address format is the same as the IP address format."
    DECODING
       "Note: ether2.ip.ipip.udp is a different protocolDirID than
       ether2.ip.udp, as identified in the protocolDirTable. As such,
       two different local protocol index values will be assigned by the
       agent. E.g. (full INDEX values shown):
        ether2.ip.ipip.udp =
            16.0.0.0.1.0.0.8.0.0.0.0.94.0.0.0.17.4.0.0.0.0
        ether2.ip.udp =
            12.0.0.0.1.0.0.8.0.0.0.0.17.3.0.0.0 "
    REFERENCE
       "TBD"
    ::= {
        ip 94,
        ipip4 94,
        ipip 94
    }

micp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Mobile Internetworking Control Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 95,
        ipip4 95,
        ipip 95
    }

scc-sp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Semaphore Communications Sec. Protocol"
    REFERENCE
       "TBD"
    ::= {
        ip 96,
        ipip4 96,
        ipip 96
    }






Expires May 1999                                               [Page 36]





Internet-Draft               RMON PI Macros                November 1998


etherip PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Ethernet-within-IP Encapsulation"
    REFERENCE
       "TBD"
    ::= {
        ip 97,
        ipip4 97,
        ipip 97
    }

encap PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Encapsulation Header; A Scheme for an Internet Encapsulation
       Protocol: Version 1"
    REFERENCE
       "RFC 1241 [RFC1241] defines version 1 of the ENCAP Protocol."
    ::= {
        ip 98,
        ipip4 98,
        ipip 98
    }

priv-encript PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Pseudo-protocol reserved for any private encryption scheme."
    REFERENCE
       "N/A"
    ::= {
        ip 99,
        ipip4 99,
        ipip 99
    }

gmtp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "GMTP"





Expires May 1999                                               [Page 37]





Internet-Draft               RMON PI Macros                November 1998


    REFERENCE
       "TBD"
    ::= {
        ip 100,
        ipip4 100,
        ipip 100
    }


 --     101-254                Unassigned
 --         255                Reserved







































Expires May 1999                                               [Page 38]





Internet-Draft               RMON PI Macros                November 1998


 -- ****************************************************************
 --
 --                    Children of UDP and TCP
 --
 -- ****************************************************************

tcpmux  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "TCP Port Service Multiplexer Port."
    REFERENCE
       "RFC 1078 [RFC1078] defines the TCP Port Service Multiplexer
       Protocol."
    ::= { tcp 1 }

compressnet-mgmt  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Compression Management Utility."
    REFERENCE
       "TBD"
    ::= { tcp 2 }

compressnet  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Compression Process."
    REFERENCE
       "TBD"
    ::= { tcp 3 }

 --                   4/tcp    Unassigned
 --                   4/udp    Unassigned

rje  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Remote Job Entry Protocol; RJE Logger Port; (historical)."
    REFERENCE
       "RFC 407 [RFC407] defines the Remote Job Entry Protocol."
    ::= { tcp 5 }





Expires May 1999                                               [Page 39]





Internet-Draft               RMON PI Macros                November 1998


 --                   6/tcp    Unassigned
 --                   6/udp    Unassigned

echo  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Echo Protocol for debugging  TCP and UDP transports."
    REFERENCE
       "RFC 862 [RFC862] defines the Echo Protocol."
    ::= {
          tcp 7,
          udp 7  }

 --                   8/tcp    Unassigned
 --                   8/udp    Unassigned

discard  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Discard Protocol for debugging TCP and UDP transports."
    REFERENCE
       "RFC 863 [RFC863] defines the Discard Protocol."
    ::= {
          tcp 9,
          udp 9  }

 --                   10/tcp    Unassigned
 --                   10/udp    Unassigned

systat  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Retrieve the Active Users list; a debugging tool for TCP and UDP
       transports."
    REFERENCE
       "RFC 866 [RFC866] defines the Active Users Protocol."
    ::= {
          tcp 11,
          udp 11  }

 --                   12/tcp    Unassigned
 --                   12/udp    Unassigned





Expires May 1999                                               [Page 40]





Internet-Draft               RMON PI Macros                November 1998


daytime  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Retrieve the current time of day; a debugging tool for TCP and
       UDP transports."
    REFERENCE
       "RFC 867 [RFC867] defines the Daytime Protocol."
    ::= {
          tcp 13,
          udp 13  }

 --                14/tcp    Unassigned
 --                14/udp    Unassigned
 --                15/tcp    Unassigned [was netstat]
 --                15/udp    Unassigned
 --                16/tcp    Unassigned
 --                16/udp    Unassigned

qotd  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Quote of the Day Protocol; retrieve a short message (up to 512
       bytes); a debugging tool for TCP and UDP transports."
    REFERENCE
       "RFC 865 [RFC865] defines the Quote of the Day Protocol."
    ::= {
          tcp 17,
          udp 17  }

msp  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Message Send Protocol"
    REFERENCE
       "RFC 1312 [RFC1312] defines the Message Send Protocol."
    ::= {
          tcp 18,
          udp 18  }

chargen  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }





Expires May 1999                                               [Page 41]





Internet-Draft               RMON PI Macros                November 1998


    DESCRIPTION
       "Character Generator Protocol; a debugging tool for TCP and UDP
       transports."
    REFERENCE
       "RFC 864 [RFC864] defines the Character Generator Protocol."
    ::= {
          tcp 19,
          udp 19  }

ftp-data PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "The File Transfer Protocol Data Port; the FTP Server process
       default data-connection port. "
    REFERENCE
       "RFC 959 [RFC959] defines the File Transfer Protocol.  Refer to
       section 3.2 of [RFC959] for details on FTP data connections."
    ::= { tcp 20 }

ftp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "The File Transfer Protocol Control Port; An FTP client initiates
       an FTP control connection by sending FTP commands from user port
       (U) to this port."
    REFERENCE
       "RFC 959 [RFC959] defines the File Transfer Protocol."
    ::= { tcp 21 }

 --                22/tcp    Unassigned
 --                22/udp    Unassigned

telnet PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "The Telnet Protocol; The purpose of the TELNET Protocol is to
       provide a fairly general, bi-directional, eight-bit byte oriented
       communications facility.  Its primary goal is to allow a standard
       method of interfacing terminal devices and terminal-oriented
       processes to each other. "
    REFERENCE
       "RFC 854 [RFC854] defines the basic Telnet Protocol."





Expires May 1999                                               [Page 42]





Internet-Draft               RMON PI Macros                November 1998


    ::= { tcp 23 }

priv-mail PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Pseudo-protocol reserved for any private mail system."
    REFERENCE
       "N/A"
    ::= { tcp 24,
          udp 24 }

smtp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "The Simple Mail Transfer Protocol; SMTP control and data
       messages are sent on this port."
    REFERENCE
       "RFC 821 [RFC821] defines the basic Simple Mail Transfer
       Protocol."
    ::= { tcp 25 }

 --                 26/tcp    Unassigned
 --                 26/udp    Unassigned

nsw-fe PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "NSW User System FE Port"
    REFERENCE
       "TBD"
    ::= { tcp 27,
          udp 27 }

 --                 28/tcp    Unassigned
 --                 28/udp    Unassigned

msg-icp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "MSG ICP"
    REFERENCE





Expires May 1999                                               [Page 43]





Internet-Draft               RMON PI Macros                November 1998


       "TBD"
    ::= { tcp 29,
          udp 29 }

 --                 30/tcp    Unassigned
 --                 30/udp    Unassigned

msg-auth PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "MSG Authentication"
    REFERENCE
       "TBD"
    ::= { tcp 31,
          udp 31 }

 --                 32/tcp    Unassigned
 --                 32/udp    Unassigned

dsp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Display Support Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 33,
          udp 33 }

 --                 34/tcp    Unassigned
 --                 34/udp    Unassigned

priv-print PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Pseudo-protocol reserved for any private printer server."
    REFERENCE
       "N/A"
    ::= { tcp 35,
          udp 35  }

 --                 36/tcp    Unassigned
 --                 36/udp    Unassigned





Expires May 1999                                               [Page 44]





Internet-Draft               RMON PI Macros                November 1998


time PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Time Protocol"
    REFERENCE
       "RFC 868 [RFC868] defines the Time Protocol."
    ::= { tcp 37,
          udp 37 }

rap PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Route Access Protocol"
    REFERENCE
       "RFC 1476 [RFC1476] defines the Internet Route Access Protocol."
    ::= { tcp 38 }

rlp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Resource Location Protocol"
    REFERENCE
       "RFC 887 [RFC887] defines the Resource Location Protocol."
    ::= { udp 39 }

 --                 40/tcp    Unassigned
 --                 40/udp    Unassigned

graphics PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Graphics Protocol"
    REFERENCE
       "RFC 493 [RFC493] defines the Graphics Protocol."
    ::= { tcp 41,
          udp 41  }

nameserver  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION





Expires May 1999                                               [Page 45]





Internet-Draft               RMON PI Macros                November 1998


       "Host Name Server Protocol"
    REFERENCE
       "IEN 116 [IEN116] defines the Internet Name Server."
    ::= { udp 42 }

nicname  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "NICNAME/WHOIS Protocol"
    REFERENCE
       "RFC 954 [RFC954] defines the NICNAME/Who Is Protocol."
    ::= { tcp 43 }

mpm-flags  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "MPM FLAGS Protocol; (historical)."
    REFERENCE
       "RFC 759 [RFC759] defines the Message Processing Module."
    ::= { tcp 44 }

mpm  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Message Processing Module -- Receiver; (historical)."
    REFERENCE
       "RFC 759 [RFC759] defines the Message Processing Module."
    ::= { tcp 45 }

mpm-snd  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Message Processing Module -- Default Send; (historical)."
    REFERENCE
       "RFC 759 [RFC759] defines the Message Processing Module."
    ::= { tcp 46 }

ni-ftp  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION





Expires May 1999                                               [Page 46]





Internet-Draft               RMON PI Macros                November 1998


       "NI FTP"
    REFERENCE
       "TBD"
    ::= { tcp 47 }

auditd  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Digital Audit Deamon"
    REFERENCE
       "TBD"
    ::= { tcp 48,
          udp 48 }

tacacs  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Login Host Protocol (TACACS)"
    REFERENCE
       "An Access Control Protocol, Sometimes Called TACACS [RFC1492]."
    ::= { tcp 49 }

re-mail-ck  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Remote Mail Checking Protocol"
    REFERENCE
       "RFC 1339 [RFC1339] defines the Remote Mail Checking Protocol."
    ::= { udp 50 }

la-maint  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "IMP Logical Address Maintenance Protocol"
    REFERENCE
       "TBD"
    ::= { udp 51 }

xns-time  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }





Expires May 1999                                               [Page 47]





Internet-Draft               RMON PI Macros                November 1998


    DESCRIPTION
       "XNS Time Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 52,
          udp 52 }

 -- [ed. - also called dns]
domain PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Domain Name Service Protocol; DNS may be transported by either
       UDP [RFC768] or TCP [RFC793].  If the transport is UDP, DNS
       requests restricted to 512 bytes in length may be sent to this
       port."
    REFERENCE
       "RFC 1035 [RFC1035] defines the Bootstrap Protocol."
    ::= { udp 53,
          tcp 53  }

xns-ch PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "XNS Clearinghouse"
    REFERENCE
       "TBD"
    ::= { tcp 54,
          udp 54 }

isi-gl PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "ISI Graphics Language"
    REFERENCE
       "TBD"
    ::= { tcp 55,
          udp 55 }

xns-auth PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION





Expires May 1999                                               [Page 48]





Internet-Draft               RMON PI Macros                November 1998


       "XNS Authentication Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 56,
          udp 56 }

priv-term PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Pseudo-protocol reserved for any private terminal access
       protocol."
    REFERENCE
       "N/A"
    ::= { tcp 57,
          udp 57 }

xns-mail PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "XNS Mil Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 58,
          udp 58 }

priv-file PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Pseudo-protocol reserved for any private file service."
    REFERENCE
       "N/A"
    ::= { tcp 59,
          udp 59 }

 --              60/tcp    Unassigned
 --              60/udp    Unassigned

ni-mail PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "NI MAIL"





Expires May 1999                                               [Page 49]





Internet-Draft               RMON PI Macros                November 1998


    REFERENCE
       "TBD"
    ::= { tcp 61,
          udp 61 }

acas PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "ACA Services; Digital's Corba Server"
    REFERENCE
       "TBD"
    ::= { tcp 62 }

 --              63/tcp    Unassigned
 --              63/udp    Unassigned

covia PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Communications Integrator (CI)."
    REFERENCE
       "TBD"
    ::= { tcp 64 }

tacacs-ds PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Default Server Port; TACACS Access Control Protocol Database
       Service."
    REFERENCE
       "RFC 1492 [RFC1492] defines the TACACS Protocol."
    ::= { tcp 65 }

sql*net PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Oracle SQL*NET"
    REFERENCE
       "TBD"
    ::= { tcp 66 }






Expires May 1999                                               [Page 50]





Internet-Draft               RMON PI Macros                November 1998


bootps PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Bootstrap Protocol Server Protocol; BOOTP Clients send requests
       (usually broadcast) to the bootps port."
    REFERENCE
       "RFC 951 [RFC951] defines the Bootstrap Protocol."
    ::= { udp 67 }

bootpc PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Bootstrap Protocol Client Protocol; BOOTP Server replies are
       sent to the BOOTP Client using this destination port."
    REFERENCE
       "RFC 951 [RFC951] defines the Bootstrap Protocol."
    ::= { udp 68 }

tftp PROTOCOL-IDENTIFIER
    PARAMETERS {
        tracksSessions(1)
    }
    ATTRIBUTES { }
    DESCRIPTION
       "Trivial File Transfer Protocol; Only the first packet of each
       TFTP transaction will be sent to port 69. If the tracksSessions
       attribute is set, then packets for each TFTP transaction will be
       attributed to tftp, instead of the unregistered port numbers that
       will be encoded in subsequent packets."
    REFERENCE
       "RFC 1350 [RFC1350] defines the TFTP Protocol (revision 2);
        RFC 1782 [RFC1782] defines TFTP Option Extensions;
        RFC 1783 [RFC1783] defines the TFTP Blocksize Option;
        RFC 1784 [RFC1784] defines TFTP Timeout Interval and Transfer Size
        Options."
    ::= { udp 69 }

gopher PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Internet Gopher Protocol"
    REFERENCE





Expires May 1999                                               [Page 51]





Internet-Draft               RMON PI Macros                November 1998


       "RFC 1436 [RFC1436] defines the Gopher Protocol."
    ::= { tcp 70 }

netrjs-1 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Remote Job Service Protocol; (historical)."
    REFERENCE
       "RFC 740 [RFC740] defines the NETRJS Protocol."
    ::= { tcp 71 }

netrjs-2 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Remote Job Service Protocol; (historical)."
    REFERENCE
       "RFC 740 [RFC740] defines the NETRJS Protocol."
    ::= { tcp 72 }

netrjs-3 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Remote Job Service Protocol; (historical)."
    REFERENCE
       "RFC 740 [RFC740] defines the NETRJS Protocol."
    ::= { tcp 73 }

netrjs-4 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Remote Job Service Protocol; (historical)."
    REFERENCE
       "RFC 740 [RFC740] defines the NETRJS Protocol."
    ::= { tcp 74 }

priv-dialout PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Pseudo-protocol reserved for any private dial out service."
    REFERENCE





Expires May 1999                                               [Page 52]





Internet-Draft               RMON PI Macros                November 1998


       "N/A"
    ::= { tcp 75,
          udp 75 }

deos PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Distributed External Object Store Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 76,
          udp 76 }

priv-rje PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Pseudo-protocol reserved for any private remote job entry
       service."
    REFERENCE
       "N/A"
    ::= { tcp 77,
          udp 77 }

vettcp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "VET TCP"
    REFERENCE
       "TBD"
    ::= { tcp 78,
          udp 78 }

finger PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Finger User Information Protocol"
    REFERENCE
       "RFC 1288 [RFC1288] defines the finger protocol."
    ::= { tcp 79 }

www-http PROTOCOL-IDENTIFIER





Expires May 1999                                               [Page 53]





Internet-Draft               RMON PI Macros                November 1998


    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Hypertext Transfer Protocol"
    REFERENCE
       "RFC 1945 [RFC1945] defines the Hypertext Transfer Protocol (HTTP/1.0).
        RFC 2068 [RFC2068] defines the Hypertext Transfer Protocol (HTTP/1.1).
        RFC 2069 [RFC2069] defines an Extension to HTTP: Digest Access
           Authentication.
        RFC 2109 [RFC2109] defines the HTTP State Management Mechanism.
        RFC 2145 [RFC2145] defines the use and interpretation of HTTP
           version numbers."
    ::= { tcp 80 }

hosts2-ns PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "HOSTS2 Name Server"
    REFERENCE
       "TBD"
    ::= { tcp 81,
          udp 81 }

xfer PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "XFER Utility"
    REFERENCE
       "TBD"
    ::= { tcp 82,
          udp 82 }

mit-ml-dev PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "MIT ML Device"
    REFERENCE
       "TBD"
    ::= { tcp 83,
          udp 83,
          tcp 85,
          udp 85 }





Expires May 1999                                               [Page 54]





Internet-Draft               RMON PI Macros                November 1998


ctf PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Common Trace Facility"
    REFERENCE
       "TBD"
    ::= { tcp 84,
          udp 84 }

mfcobol PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Micro Focus Cobol"
    REFERENCE
       "TBD"
    ::= { tcp 86 }

priv-termlink PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Pseudo-protocol reserved for any private terminal link
       protocol."
    REFERENCE
       "N/A"
    ::= { tcp 87,
          udp 87 }

kerberos PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "The Kerberos Network Authentication Service (V5)"
    REFERENCE
       "RFC 1510 [RFC1510] defines the Kerberos protocol."
    ::= { udp 88 }

su-mit-tg PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SU/MIT Telnet Gateway Protocol"
    REFERENCE





Expires May 1999                                               [Page 55]





Internet-Draft               RMON PI Macros                November 1998


       "TBD"
    ::= { tcp 89 }

dnsix  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "DNSIX Security Attribute Token Map"
    REFERENCE
       "TBD"
    ::= { tcp 90 }

mit-dov PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "MIT Dover Spooler"
    REFERENCE
       "TBD"
    ::= { tcp 91 }

npp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Network Printing Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 92,
          udp 92 }

dcp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Device Control Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 93,
          udp 93 }

objcall PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION





Expires May 1999                                               [Page 56]





Internet-Draft               RMON PI Macros                November 1998


       "Tivoli Object Dispatcher"
    REFERENCE
       "TBD"
    ::= { tcp 94 }

supdup PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SUPDUP Display; (historical)"
    REFERENCE
       "RFC 734 [RFC734] defines the SUPDUP Protocol."
    ::= { tcp 95 }

dixie PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "DIXIE Directory Service"
    REFERENCE
       "RFC 1249 [RFC1249] defines the DIXIE Protocol."
    ::= { tcp 96,
          udp 96 }

swift-rvf  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Swift Remote Vitural File Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 97,
          udp 97 }

tacnews PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "TAC News"
    REFERENCE
       "TBD"
    ::= { tcp 98,
          udp 98 }

metagram  PROTOCOL-IDENTIFIER





Expires May 1999                                               [Page 57]





Internet-Draft               RMON PI Macros                November 1998


    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Metagram Relay"
    REFERENCE
       "TBD"
    ::= { tcp 99,
          udp 99 }

newacct  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Unauthorized use of New Account Protocol."
    REFERENCE
       "TBD"
    ::= { tcp 100 }

hostname  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "NIC Internet Hostname Server Protocol; (historical)"
    REFERENCE
       "RFC 953 [RFC953] defines the Hostname Server Protocol."
    ::= { tcp 101 }

iso-tsap  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "ISO-TSAP Class 0"
    REFERENCE
       "TBD"
    ::= { tcp 102,
          udp 102 }

gppitnp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Genesis Point-to-Point Trans Net"
    REFERENCE
       "TBD"
    ::= { tcp 103,





Expires May 1999                                               [Page 58]





Internet-Draft               RMON PI Macros                November 1998


          udp 103 }

acr-nema PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "ACR-NEMA Digital Imag. & Comm. 300"
    REFERENCE
       "TBD"
    ::= { tcp 104 }

csnet-ns  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Mailbox Name Nameserver"
    REFERENCE
       "TBD"
    ::= { tcp 105,
          udp 105 }

3com-tsmux PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "3COM-TSMUX"
    REFERENCE
       "TBD"
    ::= { tcp 106,
          udp 106 }

rtelnet  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Remote User Telnet Protocol; (historical)."
    REFERENCE
       "RFC 818 [RFC818] defines the Remote User Telnet Service."
    ::= { tcp 107 }

snagas PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SNA Gateway Access Server"





Expires May 1999                                               [Page 59]





Internet-Draft               RMON PI Macros                November 1998


    REFERENCE
       "TBD"
    ::= { tcp 108 }

pop2 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Post Office Protocol -- Version 2. Clients establish connections
       with POP2 servers by using this destination port number."
    REFERENCE
       "RFC 937 [RFC937] defines Version 2 of the Post Office Protocol."
    ::= { tcp 109 }

pop3 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Post Office Protocol -- Version 3. Clients establish connections
       with POP3 servers by using this destination port number."
    REFERENCE
       "RFC 1725 [RFC1725] defines Version 3 of the Post Office
       Protocol."
    ::= { tcp 110,
          udp 110 }     -- RFC defines tcp use

sunrpc PROTOCOL-IDENTIFIER
    PARAMETERS {
        tracksSessions(1) -- learn port mapping of programs
    }
    ATTRIBUTES {
        hasChildren(0)   -- port mapper function numbers
    }
    DESCRIPTION
       "SUN Remote Procedure Call Protocol. Port mapper function
       requests are sent to this destination port."
    CHILDREN
       "Specific RPC functions are represented as children of the sunrpc
       protocol. Each 'RPC function protocol' is identified by its
       function number assignment. RPC function number assignments are
       defined by different naming authorities, depending on the
       function identifier value.
       From [RFC1831]:

       Program numbers are given out in groups of hexadecimal 20000000





Expires May 1999                                               [Page 60]





Internet-Draft               RMON PI Macros                November 1998


       (decimal 536870912) according to the following chart:

                     0 - 1fffffff   defined by rpc@sun.com
              20000000 - 3fffffff   defined by user
              40000000 - 5fffffff   transient
              60000000 - 7fffffff   reserved
              80000000 - 9fffffff   reserved
              a0000000 - bfffffff   reserved
              c0000000 - dfffffff   reserved
              e0000000 - ffffffff   reserved

       Children of 'sunrpc' are encoded as [ 0.0.0.111], the protocol
       identifier component for 'sunrpc', followed by [ a.b.c.d ], where
       a.b.c.d is the 32 bit binary RPC program number encoded in
       network byte order.  For example, a protocolDirID-fragment value
       of:
           0.0.0.111.0.1.134.163

       defines the NFS function (and protocol).

       Children are named as 'sunrpc' followed by the RPC function
       number in base 10 format. For example, NFS would be named:
           'sunrpc 100003'."
    DECODING
       "The first packet of many SUNRPC transactions is sent to the
       port- mapper program, and therefore decoded statically by
       monitoring RFC portmap requests [RFC1831]. Any subsequent packets
       must be decoded and correctly identified by 'remembering' the
       port assignments used in each RPC function call (as identified
       according to the procedures in the RPC Specification Version 2
       [RFC1831]).

       In some cases the port mapping for a particular protocol is well
       known and hard coded into the requesting client.  In these cases
       the client will not send portmap requests; instead it will send
       the SUNRPC request directly to the well known port.  These cases
       are rare and are being eliminated over time.  NFS is the most
       significant SUNRPC program of this class.  Such programs should
       still be declared as children of SUNRPC as described under
       CHILDREN above.  How an implementation detects this behaviour and
       handles it is beyond the scope of this document.

       The 'tracksSessions(1)' PARAMETER bit is used to indicate whether
       the probe can (and should) monitor portmapper activity to
       correctly track SUNRPC connections."





Expires May 1999                                               [Page 61]





Internet-Draft               RMON PI Macros                November 1998


    REFERENCE
       "RFC 1831 [RFC1831] defines the Remote Procedure Call Protocol
       Version 2.  The authoritative list of RPC Functions is identified
       by the URL:
           ftp://ftp.isi.edu/in-notes/iana/assignments/sun-rpc-numbers"
    ::= { tcp 111,
          udp 111 }

mcidas PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "McIDAS Data Transmission Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 112 }

auth PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Authentication Service; Identification Protocol."
    REFERENCE
       "RFC 1413 [RFC1413] defines the Identification Protocol."
    ::= { tcp 113 }

audionews PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Audio News Multicast"
    REFERENCE
       "TBD"
    ::= { tcp 114,
          udp 114 }


sftp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Simple File Transfer Protocol; (historical)."
    REFERENCE
       "RFC 913 [RFC913] defines the Simple File Transfer Protocol."
    ::= { tcp 115 }





Expires May 1999                                               [Page 62]





Internet-Draft               RMON PI Macros                November 1998


ansanotify PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "ANSA REX Notify"
    REFERENCE
       "TBD"
    ::= { tcp 116,
          udp 116 }

uucp-path  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "UUCP Path Service"
    REFERENCE
       "RFC 915 [RFC915] defines the Network Mail Path Service."
    ::= { tcp 117 }

sqlserv PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SQL Services"
    REFERENCE
       "TBD"
    ::= { tcp 118,
          udp 118 }

nntp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Network News Transfer Protocol"
    REFERENCE
       "RFC 977 [RFC977] defines the Network News Transfer Protocol."
    ::= { tcp 119 }

cfdptkt PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "CFDPTKT; Coherent File Distribution Protocol"
    REFERENCE
       "RFC 1235 [RFC1235] defines the Coherent File Distribution





Expires May 1999                                               [Page 63]





Internet-Draft               RMON PI Macros                November 1998


       Protocol."
    ::= { udp 120 }

erpc PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Encore Expedited Remote Pro.Call"
    REFERENCE
       "TBD"
    ::= { tcp 121,
          udp 121 }

smakynet PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SMAKYNET"
    REFERENCE
       "TBD"
    ::= { tcp 122,
          udp 122 }

ntp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Network Time Protocol"
    REFERENCE
       "RFC 1305 [RFC1305] defines version 3 of the Network Time
       Protocol."
    ::= { udp 123 }

ansatrader PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "ANSA REX Trader"
    REFERENCE
       "TBD"
    ::= { tcp 124,
          udp 124 }

locus-map  PROTOCOL-IDENTIFIER
    PARAMETERS { }





Expires May 1999                                               [Page 64]





Internet-Draft               RMON PI Macros                November 1998


    ATTRIBUTES { }
    DESCRIPTION
       "Locus PC-Interface Net Map Server"
    REFERENCE
       "TBD"
    ::= { tcp 125 }

unitary  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Unisys Unitary Login"
    REFERENCE
       "TBD"
    ::= { tcp 126,
          udp 126 }

locus-con  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Locus PC-Interface Conn Server"
    REFERENCE
       "TBD"
    ::= { tcp 127 }

gss-xlicen  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "X License Verification"
    REFERENCE
       "TBD"
    ::= { tcp 128,
          udp 128 }

pwdgen  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Password Generator Protocol"
    REFERENCE
       "RFC 972 [RFC972] defines the Password Generator Protocol."
    ::= { tcp 129,
          udp 129  }





Expires May 1999                                               [Page 65]





Internet-Draft               RMON PI Macros                November 1998


cisco-fna  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "cisco FNATIVE"
    REFERENCE
       "TBD"
    ::= { tcp 130,
          udp 130 }

cisco-tna  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "cisco TNATIVE"
    REFERENCE
       "TBD"
    ::= { tcp 131,
          udp 131 }

cisco-sys  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "cisco SYSMAINT"
    REFERENCE
       "TBD"
    ::= { tcp 132,
          udp 132 }

statsrv  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Statistics Server; (historical)."
    REFERENCE
       "RFC 996 [RFC996] defines the Statistics Server Protocol."
    ::= { tcp 133,
          udp 133 }

ingres-net  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "INGRES-NET Service"





Expires May 1999                                               [Page 66]





Internet-Draft               RMON PI Macros                November 1998


    REFERENCE
       "TBD"
    ::= { tcp 134 }

loc-srv  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Location Service"
    REFERENCE
       "TBD"
    ::= { tcp 135,
          udp 135 }

profile  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "PROFILE Naming System"
    REFERENCE
       "TBD"
    ::= { tcp 136 }

 -- defined as nbt-name in IPX section
 -- netbios-ns      137/tcp    NETBIOS Name Service
 -- netbios-ns      137/udp    NETBIOS Name Service

 -- defined as nbt-data in IPX section
 -- netbios-dgm     138/tcp    NETBIOS Datagram Service
 -- netbios-dgm     138/udp    NETBIOS Datagram Service

 -- defined as nbt-session in IPX section
 -- netbios-ssn     139/tcp    NETBIOS Session Service
 -- netbios-ssn     139/udp    NETBIOS Session Service

emfis-data  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "EMFIS Data Service"
    REFERENCE
       "TBD"
    ::= { tcp 140,
          udp 140 }






Expires May 1999                                               [Page 67]





Internet-Draft               RMON PI Macros                November 1998


emfis-cntl  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "EMFIS Control Service"
    REFERENCE
       "TBD"
    ::= { tcp 141,
          udp 141 }

bl-idm  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Britton-Lee IDM"
    REFERENCE
       "TBD"
    ::= { tcp 142,
          udp 142 }

imap2  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Interactive Mail Access Protocol v2;
        Internet Message Access Protocol v4 (IMAP4) also uses this
       server port."
    REFERENCE
       "RFC 1064 [RFC1064] defines Version 2 of the Interactive Mail
       Access
        Protocol.
        RFC 1730 [RFC1730] defines Version 4 of the Internet Message
       Access
        Protocol."
    ::= { tcp 143 }

news  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "NewS"
    REFERENCE
       "TBD"
    ::= { tcp 144,
          udp 144 }





Expires May 1999                                               [Page 68]





Internet-Draft               RMON PI Macros                November 1998


uaac  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "UAAC Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 145,
          udp 145 }

iso-tp0  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "ISO-IP0; ISO-TP0 bridge between TCP and X.25"
    REFERENCE
       "RFC 1086 [RFC1086] defines the ISO-TP0 protocol."
    ::= { tcp 146,
          udp 146 }

iso-ip  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "ISO-IP; Use of the Internet as a Subnetwork for Experimentation
       with the OSI Network Layer"
    REFERENCE
       "RFC 1070 [RFC1070] defines the ISO-IP Protocol."
    ::= { tcp 147,
          udp 147 }

cronus  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "CRONUS-SUPPORT"
    REFERENCE
       "TBD"
    ::= { tcp 148,
          udp 148 }

aed-512  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION





Expires May 1999                                               [Page 69]





Internet-Draft               RMON PI Macros                November 1998


       "AED 512 Emulation Service"
    REFERENCE
       "TBD"
    ::= { tcp 149,
          udp 149 }

sql-net  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SQL-NET"
    REFERENCE
       "TBD"
    ::= { tcp 150,
          udp 150 }

hems  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "HEMS; High Level Entity Management System; (historical)."
    REFERENCE
       "RFC 1021 [RFC1021] defines HEMS."
    ::= { tcp 151 }

bftp  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Background File Transfer Program"
    REFERENCE
       "RFC 1068 [RFC1068] defines the Background File Transfer
       Program."
    ::= { tcp 152 }

sgmp  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Simple Gateway Monitoring Protocol; (historical)."
    REFERENCE
       "RFC 1028 [RFC1028] defines the Simple Gateway Monitoring
       Protocol."
    ::= { udp 153 }






Expires May 1999                                               [Page 70]





Internet-Draft               RMON PI Macros                November 1998


netsc-prod  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "NETSC"
    REFERENCE
       "TBD"
    ::= { tcp 154,
          udp 154 }

netsc-dev  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "NETSC"
    REFERENCE
       "TBD"
    ::= { tcp 155,
          udp 155 }

sqlsrv  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SQL Services; protocol to talk to Oracle databases;
       (historical)."
    REFERENCE
       "TBD"
    ::= { tcp 156 }

knet-cmp  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "KNET/VM Command/Message Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 157 }

pcmail-srv  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "PCMail Server; Distributed Mail System Protocol (DMSP)"
    REFERENCE





Expires May 1999                                               [Page 71]





Internet-Draft               RMON PI Macros                November 1998


       "RFC 1056 [RFC1056] defines the PCMAIL Protocol."
    ::= { tcp 158 }

nss-routing  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "NSS-Routing"
    REFERENCE
       "TBD"
    ::= { tcp 159,
          udp 159 }

sgmp-traps  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Simple Gateway Monitoring Protocol Traps; (historical)."
    REFERENCE
       "RFC 1028 [RFC1028] defines the Simple Gateway Monitoring
       Protocol."
    ::= { udp 160 }

 -- snmp and snmptrap found in the Protocol-Independent section
 -- snmp            161/udp    SNMP
 -- snmptrap        162/udp    SNMPTRAP

cmip-man  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "CMIP/TCP (CMOT) Manager; (historical)."
    REFERENCE
       "RFC 1095 [RFC1095] defines the Common Management Information
       Services and Protocol over TCP/IP."
    ::= { tcp 163,
          udp 163 }

cmip-agent  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "CMIP/TCP (CMOT) Agent; (historical)."
    REFERENCE
       "RFC 1095 [RFC1095] defines the Common Management Information





Expires May 1999                                               [Page 72]





Internet-Draft               RMON PI Macros                November 1998


       Services and Protocol over TCP/IP."
    ::= { tcp 164,
          udp 164 }

xns-courier  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Xerox [TBD]"
    REFERENCE
       "TBD"
    ::= { tcp 165,
          udp 165  }

s-net  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Sirius Systems"
    REFERENCE
       "TBD"
    ::= { tcp 166,
          udp 166 }

namp  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "NAMP"
    REFERENCE
       "TBD"
    ::= { tcp 167,
          udp 167 }

rsvd  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "RSVD"
    REFERENCE
       "TBD"
    ::= { tcp 168,
          udp 168 }

send  PROTOCOL-IDENTIFIER





Expires May 1999                                               [Page 73]





Internet-Draft               RMON PI Macros                November 1998


    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SEND"
    REFERENCE
       "TBD"
    ::= { tcp 169,
          udp 169 }

print-srv  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Network PostScript"
    REFERENCE
       "TBD"
    ::= { tcp 170,
          udp 170 }

multiplex  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Network Innovations Multiplex"
    REFERENCE
       "TBD"
    ::= { tcp 171,
          udp 171 }

cl-1 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Network Innovations CL/1"
    REFERENCE
       "TBD"
    ::= { tcp 172,
          udp 172 }

xyplex-mux  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Xyplex"
    REFERENCE





Expires May 1999                                               [Page 74]





Internet-Draft               RMON PI Macros                November 1998


       "TBD"
    ::= { tcp 173,
          udp 173 }

mailq  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "MAILQ"
    REFERENCE
       "TBD"
    ::= { tcp 174,
          udp 174 }

vmnet  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "VMNET"
    REFERENCE
       "TBD"
    ::= { tcp 175,
          udp 175 }

genrad-mux PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "GENRAD-MUX"
    REFERENCE
       "TBD"
    ::= { tcp 176,
          udp 176 }

xdmcp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "X Display Manager Control Protocol"
    REFERENCE
       "TBD"
    ::= { udp 177 }

nextstep  PROTOCOL-IDENTIFIER
    PARAMETERS { }





Expires May 1999                                               [Page 75]





Internet-Draft               RMON PI Macros                November 1998


    ATTRIBUTES { }
    DESCRIPTION
       "NextStep Window Server"
    REFERENCE
       "TBD"
    ::= { tcp 178,
          udp 178 }

bgp  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Border Gateway Protocol"
    REFERENCE
       "RFC 1267 [RFC1267] defines version 3 of the Border Gateway
       Protocol."
    ::= { tcp 179 }

ris  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Intergraph"
    REFERENCE
       "TBD"
    ::= { tcp 180,
          udp 180 }

unify  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Unify [TBD]"
    REFERENCE
       "TBD"
    ::= { tcp 181,
          udp 181  }

audit  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Unisys Audit SITP"
    REFERENCE
       "TBD"





Expires May 1999                                               [Page 76]





Internet-Draft               RMON PI Macros                November 1998


    ::= { tcp 182,
          udp 182 }

ocbinder PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "OCBinder"
    REFERENCE
       "TBD"
    ::= { tcp 183,
          udp 183 }

ocserver  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "OCServer"
    REFERENCE
       "TBD"
    ::= { tcp 184,
          udp 184 }

remote-kis  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Remote-Knowbot Information Service (KIS)"
    REFERENCE
       "RFC 1739 [RFC1739] describes the KNOWBOT Protocol."
    ::= { tcp 185,
          udp 185 }

kis  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Knowbot Information Service (KIS)"
    REFERENCE
       "RFC 1739 [RFC1739] describes the KNOWBOT Protocol."
    ::= { tcp 186,
          udp 186 }

aci  PROTOCOL-IDENTIFIER
    PARAMETERS { }





Expires May 1999                                               [Page 77]





Internet-Draft               RMON PI Macros                November 1998


    ATTRIBUTES { }
    DESCRIPTION
       "Application Communication Interface"
    REFERENCE
       "TBD"
    ::= { tcp 187,
          udp 187 }

mumps  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Plus Five's MUMPS"
    REFERENCE
       "TBD"
    ::= { tcp 188,
          udp 188 }

qft PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Queued File Transport"
    REFERENCE
       "TBD"
    ::= { tcp 189 }

gacp  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Gateway Access Control Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 190,
          udp 190 }

prospero  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Prospero Directory Service"
    REFERENCE
       "TBD"
    ::= { tcp 191 }





Expires May 1999                                               [Page 78]





Internet-Draft               RMON PI Macros                November 1998


osu-nms  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "OSU Network Monitoring System"
    REFERENCE
       "TBD"
    ::= { tcp 192,
          udp 192 }

srmp  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Spider Remote Monitoring Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 193,
          udp 193 }

irc  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Internet Relay Chat Protocol"
    REFERENCE
       "RFC 1459 [RFC1459] defines the Internet Relay Chat Protocol."
    ::= { tcp 194,
          udp 194 }

dn6-nlm-aud  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "DNSIX Network Level Module Audit"
    REFERENCE
       "TBD"
    ::= { tcp 195 }

dn6-smm-red  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "DNSIX Session Mgt Module Audit Redir"
    REFERENCE





Expires May 1999                                               [Page 79]





Internet-Draft               RMON PI Macros                November 1998


       "TBD"
    ::= { tcp 196 }

dls  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Directory Location Service"
    REFERENCE
       "TBD"
    ::= { tcp 197,
          udp 197 }

dls-mon  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Directory Location Service Monitor"
    REFERENCE
       "TBD"
    ::= { tcp 198,
          udp 198 }

smux PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SMUX; SNMP MUX Protocol and MIB; (historical)."
    REFERENCE
       "RFC 1227 [RFC1227] defines the SMUX Protocol."
    ::= { tcp 199 }

src  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "IBM System Resource Controller"
    REFERENCE
       "TBD"
    ::= { tcp 200,
          udp 200 }

 --
 -- AppleTalk applications are defined in the AppleTalk Stack section
 --





Expires May 1999                                               [Page 80]





Internet-Draft               RMON PI Macros                November 1998


 -- at-rtmp         201/tcp    AppleTalk Routing Maintenance
 -- at-rtmp         201/udp    AppleTalk Routing Maintenance
 -- at-nbp          202/tcp    AppleTalk Name Binding
 -- at-nbp          202/udp    AppleTalk Name Binding
 -- at-3            203/tcp    AppleTalk Unused
 -- at-3            203/udp    AppleTalk Unused
 -- at-echo         204/tcp    AppleTalk Echo
 -- at-echo         204/udp    AppleTalk Echo
 -- at-5            205/tcp    AppleTalk Unused
 -- at-5            205/udp    AppleTalk Unused
 -- at-zis          206/tcp    AppleTalk Zone Information
 -- at-zis          206/udp    AppleTalk Zone Information
 -- at-7            207/tcp    AppleTalk Unused
 -- at-7            207/udp    AppleTalk Unused
 -- at-8            208/tcp    AppleTalk Unused
 -- at-8            208/udp    AppleTalk Unused

tam  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Trivial Authenticated Mail Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 209,
          udp 209 }

z39-50 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "ANSI Z39.50"
    REFERENCE
       "RFC 1729 [RFC1729] describes the Z39.50 Protocol."
    ::= { tcp 210 }

914c-g  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Texas Instruments 914C/G Terminal"
    REFERENCE
       "TBD"
    ::= { tcp 211,
          udp 211 }





Expires May 1999                                               [Page 81]





Internet-Draft               RMON PI Macros                November 1998


anet  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "ATEXSSTR"
    REFERENCE
       "TBD"
    ::= { tcp 212,
          udp 212 }

ipx-tunnel  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Tunneling IPX Traffic through IP Networks"
    REFERENCE
       "RFC 1234 [RFC1234] defines the IPX Tunnel Protocol."
    ::= { udp 213 }

vmpwscs  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "VM PWSCS"
    REFERENCE
       "TBD"
    ::= { tcp 214,
          udp 214 }

softpc  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Insignia Solutions [TBD]"
    REFERENCE
       "TBD"
    ::= { tcp 215,
          udp 215 }

atls  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Access Technology License Server"
    REFERENCE





Expires May 1999                                               [Page 82]





Internet-Draft               RMON PI Macros                November 1998


       "TBD"
    ::= { tcp 216,
          udp 216 }

dbase  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "dBASE Unix"
    REFERENCE
       "TBD"
    ::= { tcp 217,
          udp 217 }

mpp  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Netix Message Posting Protocol"
    REFERENCE
       "RFC 1204 [RFC1204] defines the Message Posting Protocol."
    ::= { tcp 218 }

uarps  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Unisys ARPs"
    REFERENCE
       "TBD"
    ::= { tcp 219,
          udp 219 }

imap3  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Interactive Mail Access Protocol v3; (historical)."
    REFERENCE
       "RFC 1203 [RFC1203] defines version 3 of the Interactive Mail
       Access Protocol."
    ::= { tcp 220 }

fln-spx  PROTOCOL-IDENTIFIER
    PARAMETERS { }





Expires May 1999                                               [Page 83]





Internet-Draft               RMON PI Macros                November 1998


    ATTRIBUTES { }
    DESCRIPTION
       "Berkeley rlogind with SPX auth"
    REFERENCE
       "TBD"
    ::= { tcp 221,
          udp 221 }

rsh-spx  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Berkeley rshd with SPX auth"
    REFERENCE
       "TBD"
    ::= { tcp 222,
          udp 222 }

cdc  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Certificate Distribution Center"
    REFERENCE
       "TBD"
    ::= { tcp 223,
          udp 223 }

 --             224-241    Reserved
 --             242/tcp    Unassigned
 --             242/udp    Unassigned

sur-meas  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Survey Measurement"
    REFERENCE
       "TBD"
    ::= { tcp 243,
          udp 243 }

 --              244/tcp    Unassigned
 --              244/udp    Unassigned






Expires May 1999                                               [Page 84]





Internet-Draft               RMON PI Macros                November 1998


link  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "LINK"
    REFERENCE
       "TBD"
    ::= { tcp 245,
          udp 245 }

dsp3270  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Display Systems Protocol"
    REFERENCE
       "TBD"
    ::= { tcp 246,
          udp 246 }

 --             247-255    Reserved

ldap  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Lightweight Directory Access Protocol"
    REFERENCE
       "RFC 1777 [RFC1777] defines Lightweight Directory Access
       Protocol; RFC 1798 [RFC1798] defines Connection-less Lightweight
       X.500 Directory Access Protocol"
    ::= { tcp 389,              -- RFC 1777
          udp 389  }            -- RFC 1798

https  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Secure HTTP; HTTP over SSL"
    REFERENCE
       "Netscape; TBD"
    ::= { tcp 443 }

exec  PROTOCOL-IDENTIFIER
    PARAMETERS { }





Expires May 1999                                               [Page 85]





Internet-Draft               RMON PI Macros                November 1998


    ATTRIBUTES { }
    DESCRIPTION
       "Remote Exec"
    REFERENCE
       "TBD"
    ::= { tcp 512 }

biff  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "BIFF Protocol; used by system to notify users of new mail."
    REFERENCE
       "TBD"
    ::= { udp 512 }

login  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "BSD Rlogin; remote login a la telnet"
    REFERENCE
       "RFC 1282 [RFC1282] defines the BSD Rlogin Protocol."
    ::= { tcp 513 }

who  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "rwho; show logged in users"
    REFERENCE
       "TBD"
    ::= { udp 513 }

cmd  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "rcmd; rsh; Remote execution; like exec, but automatic"
    REFERENCE
       "TBD"
    ::= { tcp 514 }

syslog  PROTOCOL-IDENTIFIER
    PARAMETERS { }





Expires May 1999                                               [Page 86]





Internet-Draft               RMON PI Macros                November 1998


    ATTRIBUTES { }
    DESCRIPTION
       "syslog"
    REFERENCE
       "TBD"
    ::= { udp 514 }

printer  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Printer Spooler"
    REFERENCE
       "TBD"
    ::= { tcp 515 }

ip-xns-rip  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "XNS-RIP"
    REFERENCE
       "TBD"
    ::= { udp 520 }

uucp  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Unix-to-Unix copy protocol"
    REFERENCE
       "TBD"
    ::= { tcp 540 }

doom  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "DOOM Game; Id Software"
    REFERENCE
       "TBD"
    ::= { tcp 666 }

 --
 -- Portmapper Functions; Children of sunrpc





Expires May 1999                                               [Page 87]





Internet-Draft               RMON PI Macros                November 1998


 --

portmapper PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "SUNRPC PORTMAPPER program.  This is the SUNRPC program which is
       used to locate the UDP/TCP ports on which other SUNRPC programs
       can be found."
    REFERENCE
       "Appendix A of RFC 1057 [RFC1057] describes the portmapper
       operation."
    ::= { sunrpc 100000 }

nfs  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Sun Network File System (NFS);"
    DECODING
       "NFS is a SUNRPC program which may or may not use the port mapper
       SUNRPC program to connect clients and servers.  In many cases the
       NFS server program runs over UDP/TCP port 2049, but an
       implementation is encouraged to perform further analysis before
       assuming that a packet to/from this port is a SUNRPC/NFS packet.
       Likewise an implementation is encouraged to track port mapper
       activity to spot cases where it is used to locate the SUNRPC/NFS
       program as this is more robust."
    REFERENCE
       "The NFS Version 3 Protocol Specification is defined in RFC 1813
       [RFC1813]."
    ::= {
        sunrpc 100003           --  [0.1.134.163]
    }

xwin PROTOCOL-IDENTIFIER
    PARAMETERS {
        tracksSessions(1)
    }
    ATTRIBUTES { }
    DESCRIPTION
       "X Windows Protocol"
    DECODING
       "The X Windows Protocol when run over UDP/TCP normally runs over
       the well known port 6000.  It can run over any port in the range





Expires May 1999                                               [Page 88]





Internet-Draft               RMON PI Macros                November 1998


       6000 to 6063, however.  If the tracksSessions(1) parameter bit is
       set the agent can and should detect such X Window sessions and
       report them as the X protocol."
    REFERENCE
         "The X Windows Protocol is defined by TBD"
    ::= {
         tcp 6000,
         udp 6000
         -- lat ?
    }


6.1.2.  Novell IPX Stack

ipx PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
         hasChildren(0),
         addressRecognitionCapable(1)
    }
    DESCRIPTION
       "Novell IPX"
    CHILDREN
       "Children of IPX are defined by the 8 bit packet type field.  The
       value is encoded into an octet string as [ 0.0.0.a ], where 'a'
       is the single octet of the packet type field.

       Notice that in many implementations of IPX usage of the packet
       type field is inconsistent with the specification and
       implementations are encouraged to use other techniques to map
       inconsistent values to the correct value (which in these cases is
       typically the Packet Exchange Protocol).  It is beyond the scope
       of this document to describe these techniques in more detail.

       Children of IPX are encoded as [ 0.0.0.a ], and named as 'ipx a'
       where a is the packet type value.  The novell echo protocol is
       referred to as 'ipx nov-echo' OR 'ipx 2'."
    ADDRESS-FORMAT
       "4 bytes of Network number followed by the 6 bytes Host address
       each in network byte order."
    REFERENCE
       "The IPX protocol is defined by the Novell Corporation

       A complete description of IPX may be secured at the following
       address:





Expires May 1999                                               [Page 89]





Internet-Draft               RMON PI Macros                November 1998


              Novell, Inc.
              122 East 1700 South
              P. O. Box 5900
              Provo, Utah 84601 USA
              800 526 5463
              Novell Part # 883-000780-001"
    ::= {
           ether2       0x8137,       -- [0.0.129.55]
           snap         0x8137,       -- [0.0.129.55]
           ianaAssigned 1,            -- [0.0.0.1]   (ipxOverRaw8023)
           llc          224,          -- [0.0.0.224]
           802-1Q       0x8137,       -- [0.0.129.55]
           802-1Q       0x020000e0,   -- 1Q-LLC [2.0.0.224]
           802-1Q       0x05000001    -- 1Q-IANA [5.0.0.1] (ipxOverRaw8023)
    }

nov-rip PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Novell Routing Information Protocol"
    REFERENCE
       "[TBD]"
    ::= {
           ipx 0x01,       -- when reached by IPX packet type
           nov-pep 0x0453  -- when reached by IPX socket number
    }

nov-echo PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Novell Echo Protocol"
    REFERENCE
       "[TBD]"
    ::= { ipx 0x02 }

nov-error PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Novell Error-handler Protocol"
    REFERENCE
       "[TBD]"
    ::= { ipx 0x03 }





Expires May 1999                                               [Page 90]





Internet-Draft               RMON PI Macros                November 1998


nov-pep PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
        hasChildren(0)
    }
    DESCRIPTION
       "Novell Packet Exchange Protocol.  This is really a null protocol
       layer as all IPX packets contain the relevant fields for this
       protocol.  This protocol is defined so that socket-based decoding
       has a point of attachment in the decode tree while still allowing
       packet type based decoding also."
    CHILDREN
       "Children of PEP are defined by the 16 bit socket values.  The
       value is encoded into an octet string as [ 0.0.a.b ], where 'a'
       and 'b' are the network byte order encodings of the MSB and LSB
       of the socket value.

       Each IPX/PEP packet contains two sockets, source and destination.
       How these are mapped onto the single well-known socket value used
       to identify its children is beyond the scope of this document."
    REFERENCE
       "[TBD]"
    ::= {
        -- ipx 0x00     ** Many third party IPX's use this value always
        ipx 0x04        -- Xerox assigned for PEP
        -- ipx 0x11     ** Novell use this for PEP packets, often
    }

nov-spx PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
    hasChildren(0)
 }
    DESCRIPTION
       "Novell Sequenced Packet Exchange Protocol.  This protocol is an
       extension of IPX/PEP as it shares a common header."
    CHILDREN
       "Children of SPX are defined by the 16 bit socket values.  The
       value is encoded into an octet string as [ 0.0.a.b ], where 'a'
       and 'b' are the network byte order encodings of the MSB and LSB
       of the socket value.

       Each IPX/SPX packet contains two sockets, source and destination.
       How these are mapped onto the single well-known socket value used
       to identify its children is beyond the scope of this document."





Expires May 1999                                               [Page 91]





Internet-Draft               RMON PI Macros                November 1998


    REFERENCE
          "[TBD]"
    ::= {
        ipx 0x05 -- Xerox assigned for SPX
    }

nlsp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "NLSP [TBD]"
    REFERENCE
       "[TBD]"
    ::= { nov-pep 0x9001 }              -- [ 0.0.144.1 ]

nov-sap PROTOCOL-IDENTIFIER
    PARAMETERS {
        tracksSessions(1)
    }
    ATTRIBUTES {
        hasChildren(0)
    }
    DESCRIPTION
       "Novell Service Advertising Protocol.  This protocol binds
       applications on a particular host to an IPX/PEP or IPX/SPX socket
       number.  Although it never truly acts as a transport protocol
       itself it is used to establish sessions between clients and
       servers and barring well-known sockets is the only reliable way
       to determine the protocol running over a given socket on a given
       machine."
    CHILDREN
       "Children of SAP are identified by a 16 bit service type.  They
       are encoded as [ 0.0.a.b ], where 'a' is the MSB and 'b' is the
       LSB of the service type.

       Children of SAP are named as 'nov-sap a' where 'a' is the service
       type in hexadecimal notation.  The novell NCP protocol is
       referred to as 'nov-sap ncp' OR 'nov-sap 0x0004'."
    DECODING
       "The first packet of any session for a SAP based application
       (almost all IPX/PEP and IPX/SPX based applications utilize SAP)
       is sent to the SAP server(s) to map the service type into a port
       number for the host(s) on which the SAP server(s) is(are)
       running.  These initial packets are SAP packets and not
       application packets and must be decoded accordingly.





Expires May 1999                                               [Page 92]





Internet-Draft               RMON PI Macros                November 1998


       Having established the mapping, clients will then send
       application packets to the newly discovered socket number.  These
       must be decoded by 'remembering' the socket assignments
       transmitted in the SAP packets.

       In some cases the port mapping for a particular protocol is well
       known and SAP will always return the same socket number for that
       application.

       Such programs should still be declared as children of nov-sap as
       described under CHILDREN above.  How an implementation detects a
       client which is bypassing the SAP server to contact a well-known
       application is beyond the scope of this document.

       The 'tracksSessions(1)' PARAMETER bit is used to indicate whether
       the probe can (and should) monitor nov-sap activity to correctly
       track SAP-based connections."
    REFERENCE
       "A list of SAP service types can be found at
          ftp://ftp.isi.edu/in-notes/iana/assignments/novell-sap-
       numbers"
    ::= { nov-pep 0x0452 }

ncp PROTOCOL-IDENTIFIER
    PARAMETERS {
        tracksSessions(1)
    }
    ATTRIBUTES {
        hasChildren(0)
    }
    DESCRIPTION
       "Netware Core Protocol"
    CHILDREN
       "Children of NCP are identified by the 8 bit command type field.
       They are encoded as [ 0.0.0.a ] where 'a' is the command type
       value.

       Children of NCP are named as 'ncp a' where 'a' is the command
       type in decimal notation.  The NDS sub-protocol is referred to as
       'ncp nds' OR 'ncp 104'."
    DECODING
       "Only the NCP request frames carry the command type field.  How
       the implementation infers the command type of a response frame is
       an implementation specific matter and beyond the scope of this
       document.





Expires May 1999                                               [Page 93]





Internet-Draft               RMON PI Macros                November 1998


       The tracksSessions(1) PARAMETERS bit indicates whether the probe
       can (and should) perform command type inference."
    REFERENCE
       "[TBD]"
    ::= { nov-sap 0x0004,
          nov-pep 0x0451 }

nds PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
         "The Netware Directory Services sub-protocol."
    REFERENCE
       "[TBD]"
    ::= { ncp 104 }

nov-diag PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Novell's diagnostic Protocol"
    REFERENCE
       "[TBD]"
    ::= {
        nov-sap 0x0017,   -- [ed., this is the right one]
        nov-pep 0x0456
    }

nov-sec PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Novell security - serialization - copy protection protocol."
    REFERENCE
       "[TBD]"
    ::= { nov-pep 0x0457 }

nov-watchdog PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Novell watchdog protocol."
    REFERENCE
       "[TBD]"
    ::= { nov-pep 0x4004 }





Expires May 1999                                               [Page 94]





Internet-Draft               RMON PI Macros                November 1998


nov-bcast PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Novell broadcast protocol."
    REFERENCE
       "[TBD]"
    ::= { nov-pep 0x4005 }


6.1.3.  The XEROX Protocol Stack

idp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
         hasChildren(0),
         addressRecognitionCapable(1)
    }
    DESCRIPTION
       "Xerox IDP"
    CHILDREN
       "Children of IDP are defined by the 8 bit value of the Packet
       type field.  The value is encoded into an octet string as [
       0.0.0.a ], where 'a' is the value of the packet type field in
       network byte order.

       Children of IDP are encoded as [ 0.0.0.a ], and named as 'idp a'
       where a is the packet type value.  The XNS SPP protocol is
       referred to as 'idp xns-spp' OR 'idp 2'."
    ADDRESS-FORMAT
       "4 bytes of Network number followed by the 6 bytes Host address
       each in network byte order."
    REFERENCE
       "Xerox Corporation, Document XNSS 028112, 1981"
    ::=  {
       ether2  0x600,     -- [ 0.0.6.0 ]
       snap    0x600,
       802-1Q  0x600      -- [ 0.0.6.0 ]
    }

xns-rip PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Routing Information Protocol."





Expires May 1999                                               [Page 95]





Internet-Draft               RMON PI Macros                November 1998


    REFERENCE
       "[TBD]"
    ::= { idp 1 }

xns-echo PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "XNS echo protocol."
    REFERENCE
       "[TBD]"
    ::= { idp 2 }

xns-error PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "XNS error-handler protocol."
    REFERENCE
       "[TBD]"
    ::= { idp 3 }

xns-pep PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
        hasChildren(0)
    }
    DESCRIPTION
       "XNS Packet Exchange Protocol."
    CHILDREN
       "Children of PEP are defined by the 16 bit socket values.  The
       value is encoded into an octet string as [ 0.0.a.b ], where 'a'
       and 'b' are the network byte order encodings of the MSB and LSB
       of the socket value.

       Each XNS/PEP packet contains two sockets, source and destination.
       How these are mapped onto the single well-known socket value used
       to identify its children is beyond the scope of this document."
    REFERENCE
       "[TBD]"
    ::= { idp 4 }

xns-spp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {





Expires May 1999                                               [Page 96]





Internet-Draft               RMON PI Macros                November 1998


        hasChildren(0)
    }
    DESCRIPTION
       "Sequenced Packet Protocol."
    CHILDREN
       "Children of SPP are defined by the 16 bit socket values.  The
       value is encoded into an octet string as [ 0.0.a.b ], where 'a'
       and 'b' are the network byte order encodings of the MSB and LSB
       of the socket value.

       Each XNS/SPP packet contains two sockets, source and destination.
       How these are mapped onto the single well-known socket value used
       to identify its children is beyond the scope of this document."
    REFERENCE
       "[TBD]"
    ::= { idp 5 }


6.1.4.  AppleTalk Protocol Stack

apple-oui PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Pseudo-protocol which binds Apple's protocols to vsnap."
    CHILDREN
       "Children of apple-oui are identified by the ether2 type field
       value that the child uses when encapsulated in ether2.  The value
       is encoded into an octet string as [ 0.0.a.b ], where 'a' and 'b'
       are the MSB and LSB of the 16-bit ether type value in network
       byte order."
    REFERENCE
       "AppleTalk Phase 2 Protocol Specification, document ADPA
        #C0144LL/A."
    ::=   {
     vsnap    0x080007,     --  [ 0.8.0.7 ]
     802-1Q   0x04080007    --  1Q-VSNAP [ 4.8.0.7 ]
    }

aarp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "AppleTalk Address Resolution Protocol."
    REFERENCE





Expires May 1999                                               [Page 97]





Internet-Draft               RMON PI Macros                November 1998


       "AppleTalk Phase 2 Protocol Specification, document ADPA
        #C0144LL/A."
    ::=   {
        ether2    0x80f3,            --  [ 0.0.128.243 ]
        snap      0x80f3,
        apple-oui 0x80f3,
        802-1Q    0x80f3             --  [ 0.0.128.243 ]
    }

-- Should we call this alap (as in ELAP and TLAP?)
-- Or perhaps DDP?

atalk PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
        hasChildren(0),
        addressRecognitionCapable(1)
    }
    DESCRIPTION
       "AppleTalk Protocol."
    CHILDREN
       "Children of ATALK are defined by the 8 bit value of the DDP type
       field.  The value is encoded into an octet string as [ 0.0.0.a ],
       where 'a' is the value of the DDP type field in network byte
       order."
    ADDRESS-FORMAT
       "2 bytes of Network number followed by 1 byte of node id each in
       network byte order."
    REFERENCE
       "AppleTalk Phase 2 Protocol Specification, document ADPA
        #C0144LL/A."
    ::=   {
        ether2     0x809b,   -- [ 0.0.128.155 ]
        apple-oui  0x809b,
        802-1Q     0x809b    -- [ 0.0.128.155 ]
    }

rtmp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "AppleTalk Routing Table Maintenance Protocol."
    REFERENCE
       "[TBD]"
    ::= {





Expires May 1999                                               [Page 98]





Internet-Draft               RMON PI Macros                November 1998


        atalk   0x01,       -- responses
        atalk   0x05        -- requests
    }

aep PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "AppleTalk Echo Protocol."
    REFERENCE
         "[TBD]"
    ::= { atalk 0x04 }

nbp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "AppleTalk Name Binding Protocol."
    DECODING
       "In order to correctly identify the application protocol running
       over atp NBP packets must be analyzed.  The mechanism by which
       this is achieved is beyond the scope of this document."
    REFERENCE
       "[TBD]"
    ::= { atalk 0x02 }

zip PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "AppleTalk Zone Information Protocol."
    REFERENCE
       "[TBD]"
    ::= {
        atalk   0x06,
        atp     3
    }

atp PROTOCOL-IDENTIFIER
    PARAMETERS {
        tracksSessions(1)
    }
    ATTRIBUTES {
        hasChildren(0)
    }





Expires May 1999                                               [Page 99]





Internet-Draft               RMON PI Macros                November 1998


    DESCRIPTION
       "AppleTalk Transaction Protocol."
    CHILDREN
       "Children of atp are identified by the following (32 bit)
       enumeration:
         1   asp (AppleTalk Session Protocol)
         2   pap (Printer Access Protocol)
         3   zip (Zone Information Protocol)
       Children of atp are encoded as [ a.b.c.d ] where 'a', 'b', 'c'
       and 'd' are the four octets of the enumerated value in network
       order (i.e. 'a' is the MSB and 'd' is the LSB).

       The ZIP protocol is referred to as 'atp zip' OR 'atp 3'."
    DECODING
       "An implementation is encouraged to examine both the socket
       fields in the associated DDP header as well as the contents of
       prior NBP packets in order to determine which (if any) child is
       present.  A full description of this algorithm is beyond the
       scope of this document.  The tracksSessions(1) PARAMETER
       indicates whether the probe can (and should) perform this
       analysis."
    REFERENCE
       "[TBD]"
    ::= { atalk 0x03 }

adsp PROTOCOL-IDENTIFIER
    PARAMETERS {
        tracksSessions(1)
    }
    ATTRIBUTES {
        hasChildren(0)
    }
    DESCRIPTION
       "AppleTalk Data Stream Protocol."
    CHILDREN
       "Children of adsp are identified by enumeration.  At this time
       none are known."
    DECODING
       "An implementation is encouraged to examine the socket numbers in
       the associated DDP header as well as the contents of prior NBP
       packets in order to determine which (if any) child of ADSP is
       present.

       The mechanism by which this is achieved is beyond the scope of
       this document.





Expires May 1999                                              [Page 100]





Internet-Draft               RMON PI Macros                November 1998


       The tracksSessions(1) PARAMETER indicates whether the probe can
       (and should) perform this analysis."
    REFERENCE
       "[TBD]"
    ::= { atalk 0x07 }

asp PROTOCOL-IDENTIFIER
 PARAMETERS { }
    ATTRIBUTES {
  hasChildren(0)
 }
    DESCRIPTION
       "AppleTalk Session Protocol."
    CHILDREN
       "Children of asp are identified by the following (32 bit)
       enumeration:
         1   afp (AppleTalk Filing Protocol)
       Children of asp are encoded as [ a.b.c.d ] where 'a', 'b', 'c'
       and 'd' are the four octets of the enumerated value in network
       order (i.e. 'a' is the MSB and 'd' is the LSB).

       The AFP protocol is referred to as 'asp afp' OR 'asp 1'."
    DECODING
       "ASP is a helper layer to assist in building client/server
       protocols.  It cooperates with ATP to achieve this; the
       mechanisms used when decoding ATP apply equally here (i.e.
       checking DDP socket numbers and tracking NBP packets).

       Hence the tracksSessions(1) PARAMETER of atp applies to this
       protocol also."
    REFERENCE
       "[TBD]"
    ::= { atp 1 }

afp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
         "AppleTalk Filing Protocol."
    REFERENCE
       "[TBD]"
    ::= { asp 1 }

pap PROTOCOL-IDENTIFIER
    PARAMETERS { }





Expires May 1999                                              [Page 101]





Internet-Draft               RMON PI Macros                November 1998


    ATTRIBUTES { }
    DESCRIPTION
       "AppleTalk Printer Access Protocol."
    REFERENCE
       "[TBD]"
    ::= { atp 2 }


6.1.5.  Banyon Vines Protocol Stack

vtr PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
        hasChildren(0)
    }
    DESCRIPTION
       "Banyan Vines Token Ring Protocol Header."
    CHILDREN
       "Children of vines-tr are identified by the 8 bit packet type
       field.  Children are encoded as [ 0.0.0.a ] where 'a' is the
       packet type value.

       The vines-ip protocol is referred to as 'vines-tr vip' OR
       'vines-tr 0xba'."
    REFERENCE
       "See vip."
    ::= {
        llc          0xBC,        -- declared as any LLC, but really TR only.
        802-1Q       0x020000BC   -- 1Q-LLC [2.0.0.188]
    }

vecho PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Banyan Vines data link level echo protocol."
    REFERENCE
       "See vip."
    ::= {
        ether2      0x0BAF,      -- [0.0.11.175]
        snap        0x0BAF,
        -- vfrp     0x0BAF,
        vtr         0xBB,        -- [ed. yuck!]
        802-1Q      0x0BAF       -- [0.0.11.175]
     }





Expires May 1999                                              [Page 102]





Internet-Draft               RMON PI Macros                November 1998


vip PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
        hasChildren(0),
        addressRecognitionCapable(1)
    }
    DESCRIPTION
       "Banyan Vines Internet Protocol."
    CHILDREN
       "Children of vip are selected by the one-byte 'protocol type'
       field located at offset 5 in the vip header.  The value is
       encoded as [ 0.0.0.a ], where a is the 'protocol type.'  For
       example, a protocolDirId fragment of:

          0.0.0.1.0.0.11.173.0.0.0.1

         identifies an encapsulation of vipc (ether2.vip.vipc)."
    ADDRESS-FORMAT
       "vip packets have 6-byte source and destination addresses.  The
       destination address is located at offset 6 in the vip header, and
       the source address at offset 12.  These are encoded in network
       byte order."
    REFERENCE
       "Vines Protocol Definition - part# 092093-001, order# 003673
         BANYAN,
         120 Flanders Road,
         Westboro, MA 01581 USA"
    ::= {
        ether2  0x0BAD,
        snap    0x0BAD,
        -- vfrp 0x0BAD,
        vtr     0xBA,        -- [ed. yuck!]
        802-1Q  0x0BAD       -- [0.0.11.173]
    }

varp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Banyan Vines Address Resolution Protocol."
    REFERENCE
       "See vip."
    ::= { vip 0x04 }

vipc PROTOCOL-IDENTIFIER





Expires May 1999                                              [Page 103]





Internet-Draft               RMON PI Macros                November 1998


    PARAMETERS { }
    ATTRIBUTES {
        hasChildren(0)
    }
    DESCRIPTION
       "Banyan Vines Interprocess Communications Protocol."
    CHILDREN
       "Children of Vines IPC are identified by the packet type field at
       offset 4 in the vipc header.

       These are encoded as [ 0.0.0.a ] where 'a' is the packet type
       value.  Children of vipc are defined as 'vipc a' where 'a' is the
       packet type value in hexadecimal notation.

       The Vines Reliable Data Transport protocol is referred to as
       'vipc vipc-rdp' OR 'vipc 0x01'."
    DECODING
       "Children of vipc are deemed to start at the first byte after the
       packet type field (i.e. at offset 5 in the vipc header)."
    REFERENCE
       "See vip."
    ::= { vip 0x01 }

 -- Banyan treats vipc, vipc-dgp and vipc-rdp as one protocol, IPC.
 -- Vines IPC really comes in two flavours.  The first is used to
 -- send unreliable datagrams (vipc packet type 0x00).  The second is used
 -- to send reliable datagrams (vipc packet type 0x01),
 -- consisting of up to four actual packets.
 -- In order to distinguish between these we need two 'virtual' protocols
 -- to identify which is which.

vipc-dgp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
        hasChildren(0)
     }
    DESCRIPTION
       "Vines Unreliable Datagram Protocol."
    CHILDREN
       "Children of vipc-dgp are identified by the 16 bit port numbers
       contained in the vipc (this protocol's parent protocol) header.

       These are encoded as [ 0.0.a.b ] where 'a' is the MSB and 'b' is
       the MSB of the port number in network byte order.






Expires May 1999                                              [Page 104]





Internet-Draft               RMON PI Macros                November 1998


       Children of vipc-dgp are defined as 'vipc-dgp a' where 'a' is the
       port number in hexadecimal notation.

       The StreetTalk protocol running over vipc-dgp would be referred
       to as 'vipc-dgp streettalk' OR 'vipc-dgp 0x000F'.

       The mechanism by which an implementation selects which of the
       source and destination ports to use in determining which child
       protocol is present is implementation specific and beyond the
       scope of this document."
    DECODING
       "Children of vipc-dgp are deemed to start after the single
       padding byte found in the vipc header.  In the case of vipc-dgp
       the vipc header is a so called 'short' header, total length 6
       bytes (including the final padding byte)."
    REFERENCE
         "See vip."
    ::= { vipc 0x00 }

vipc-rdp PROTOCOL-IDENTIFIER
    PARAMETERS {
        countsFragments(0)
    }
    ATTRIBUTES {
        hasChildren(0)
    }
    DESCRIPTION
       "Vines Reliable Datagram Protocol."
    CHILDREN
       "Children of vipc-rdp are identified by the 16 bit port numbers
       contained in the vipc (this protocol's parent protocol) header.

       These are encoded as [ 0.0.a.b ] where 'a' is the MSB and 'b' is
       the MSB of the port number in network byte order.

       Children of vipc-dgp are defined as 'vipc-rdp a' where 'a' is the
       port number in hexadecimal notation.

       The StreetTalk protocol running over vipc-rdp would be referred
       to as 'vipc-rdp streettalk' OR 'vipc-rdp 0x000F'.

       The mechanism by which an implementation selects which of the
       source and destination ports to use in determining which child
       protocol is present is implementation specific and beyond the
       scope of this document."





Expires May 1999                                              [Page 105]





Internet-Draft               RMON PI Macros                November 1998


    DECODING
       "Children of vipc-rdp are deemed to start after the error/length
       field at the end of the vipc header.  For vipc-rdp the vipc
       header is a so called 'long' header, total 16 bytes (including
       the final error/length field).

       vipc-rdp includes a high level fragmentation scheme which allows
       up to four vipc packets to be sent as a single atomic PDU.  The
       countsFragments(0) PARAMETERS bit indicates whether the probe can
       (and should) identify the child protocol in all fragments or only
       the leading one."
    REFERENCE
       "See vip."
    ::= { vipc 0x01 }

vspp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
        hasChildren(0)
    }
    DESCRIPTION
         "Banyan Vines Sequenced Packet Protocol."
    CHILDREN
       "Children of vspp are identified by the 16 bit port numbers
       contained in the vspp header.

       These are encoded as [ 0.0.a.b ] where 'a' is the MSB and 'b' is
       the MSB of the port number in network byte order.

       Children of vspp are defined as 'vspp a' where 'a' is the port
       number in hexadecimal notation.

       The StreetTalk protocol running over vspp would be referred to as
       'vspp streettalk' OR 'vspp 0x000F'.

       The mechanism by which an implementation selects which of the
       source and destination ports to use in determining which child
       protocol is present is implementation specific and beyond the
       scope of this document."
    DECODING
       "The implementation must ensure only those vspp packets which
       contain application data are decoded and passed on to children.
       Although it is suggested that the packet type and control fields
       should be used to determine this fact it is beyond the scope of
       this document to fully define the algorithm used."





Expires May 1999                                              [Page 106]





Internet-Draft               RMON PI Macros                November 1998


    REFERENCE
       "See vip."
    ::= { vip 0x02 }

vrtp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Banyan Vines Routing Update Protocol."
    REFERENCE
       "See vip."
    ::= { vip 0x05 }

vicp PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Banyan Vines Internet Control Protocol."
    REFERENCE
       "See vip."
    ::= { vip 0x06 }


 -- [ed. - We have two choices how we do vines apps.
 -- (1) The SUNRPC portmapper model.
 -- This has to be the preferred way to define all NetRPC based programs,
 -- i.e. by NetRPC program number.
 -- (2) Really ignore NetRPC as there is no
 -- good way to include it.  Instead define NetRPC protocols as children
 -- of vipc-rdp by port number.  Works for well-known ones but dynamic
 -- port numbers are used and NetRPC has a way of propagating these
 -- (StreetTalk??).

 -- So, if there is a portmapper-like program with a well known port number
 -- we should define it as a child of vipc-rdp (and vipc-dgp I suspect) and
 -- then declare all NetRPC based applications as children of this node by
 -- program number.  Use tracksSessions on the port mapper node to show
 -- that you need to do this in order to follow the RPC sessions.]


6.1.6.  The DECNet Protocol Stack

dec PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }





Expires May 1999                                              [Page 107]





Internet-Draft               RMON PI Macros                November 1998


    DESCRIPTION
       "DEC [TBD]"
    REFERENCE
       "[TBD]"
    ::= {
        ether2 0x6000,
        802-1Q 0x6000      -- [0.0.96.0]
    }

lat PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { } -- Should have children but I don't know how.
    DESCRIPTION
       "DEC Local Area Transport Protocol."
    REFERENCE
       "[TBD]"
    ::= {
        ether2 0x6004,
        802-1Q 0x6004      -- [0.0.96.4]
    }

mop PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "DEC Maintenance Operations Protocol."
    REFERENCE
       "[TBD]"
    ::= {
        ether2 0x6001,    -- mop dump/load
        ether2 0x6002,    -- mop remote console
        802-1Q 0x6001,    -- [0.0.96.1]  VLAN + mop dump/load
        802-1Q 0x6002     -- [0.0.96.2]  VLAN + mop remote console
    }

dec-diag PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "DEC Diagnostic Protocol."
    REFERENCE
       "[TBD]"
    ::= {
        ether2 0x6005,
        802-1Q 0x6005     -- [0.0.96.5]





Expires May 1999                                              [Page 108]





Internet-Draft               RMON PI Macros                November 1998


    }

lavc PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "DEC Local Area VAX Cluster Protocol."
    REFERENCE
       "[TBD]"
    ::= {
        ether2 0x6007,
        802-1Q 0x6007         -- [0.0.96.7]
    }

drp PROTOCOL-IDENTIFIER
    PARAMETERS {
        countsFragments(1)
    }
    ATTRIBUTES {
        hasChildren(0),
        addressRecognitionCapable(1)
    }
    DESCRIPTION
       "DEC Routing Protocol."
    CHILDREN
       "There is only one child of DRP, NSP.  This is encoded as [
       0.0.0.1 ]."
    ADDRESS-FORMAT
       "There are three address formats used in DRP packets, 2-byte
       (short data packet and all control except ethernet endnode &
       router hello messages), 6-byte (ethernet router & endnode hello
       messages) and 8-byte (long data packet).  All of these contain
       the 2-byte format address in the last 2 bytes with the remaining
       bytes being unimportant for the purposes of system
       identification.  It is beyond the scope of this document to
       define the algorithms used to identify packet types and hence
       address formats.

       The 2-byte address format is the concatenation of a 6-bit area
       and a 10-bit node number.  In all cases this is placed in little
       endian format (i.e. LSB, MSB).  The probe, however, will return
       them in network order (MSB, LSB).  Regardless of the address
       format in the packet, the probe will always use the 2-byte
       format.






Expires May 1999                                              [Page 109]





Internet-Draft               RMON PI Macros                November 1998


       For example area=13 (001101) and node=311 (0100110111) gives:
         0011 0101 0011 0111 = 0x3537 in network order (the order the
         probe should return the address in).

         In packets this same value would appear as (hex):

          2-byte  37 35
          6-byte  AA 00 04 00 37 35
          8-byte  00 00 AA 00 04 00 37 35

       Notice that the AA 00 04 00 prefix is defined in the
       specification but is unimportant and should not be parsed.

       Notice that control messages only have a source address in the
       header and so they can never be added into the conversation based
       tables."
    DECODING
       "NSP runs over DRP data packets; all other packet types are DRP
       control packets of one sort or another and do not carry any
       higher layer protocol.

       NSP packets are deemed to start at the beginning of the DRP data
       area.

       Data packets may be fragmented over multiple DRP data packets.
       The countsFragments(1) parameter indicates whether a probe can
       (and should) attribute non-leading fragments to the child
       protocol (above NSP in this case) or not.

       Recognition of DRP data packets and fragments is beyond the scope
       of this document."
    REFERENCE
       "DECnet Digital Network Architecture
         Phase IV
         Routing Layer Functional Specification
         Order# AA-X435A-TK
         Digital Equipment Corporation, Maynard, Massachusetts, USA"
    ::= {
        ether2  0x6003,
        snap    0x6003,
        802-1Q  0x6003     -- [0.0.96.3]
    }

nsp PROTOCOL-IDENTIFIER
    PARAMETERS {





Expires May 1999                                              [Page 110]





Internet-Draft               RMON PI Macros                November 1998


        tracksSessions(1)
    }
    ATTRIBUTES {
        hasChildren(0)
    }
    DESCRIPTION
       "DEC Network Services Protocol."
    CHILDREN
       "Children of NSP are identified by the SCP 8-bit object type.
       Notice that the object type is included only in the session
       establishment messages (connect initiate, retransmitted connect
       initiate).

       Children of NSP are encoded [ 0.0.0.a ] where 'a' is the SCP
       object type.  Children of NSP are named as 'nsp' followed by the
       SCP object type in decimal.  CTERM is referred to as 'nsp cterm'
       OR 'nsp 42'."
    DECODING
       "An implementation is encouraged to examine SCP headers included
       in NSP control messages in order to determine which child
       protocol is present over a given session.  It is beyond the scope
       of this document to define the algorithm used to do this.

       The tracksSessions(1) flag indicates whether the probe can (and
       should) perform this analysis."
    REFERENCE
       "DECnet Digital Network Architecture
         Phase IV
         NSP Functional Specification
         Order# AA-X439A-TK
         Digital Equipment Corporation, Maynard, Massachusetts, USA"
    ::= { drp 1 }

dap-v1 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "DEC Data Access Protocol version 1."
    REFERENCE
       "[TBD]"
    ::= { nsp 1 }

dap-v4 PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }





Expires May 1999                                              [Page 111]





Internet-Draft               RMON PI Macros                November 1998


    DESCRIPTION
       "DEC Data Access Protocol versions 4 and above."
    REFERENCE
       "[TBD]"
    ::= { nsp 17 }

nice PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "DEC Network Information and Control Exchange protocol."
    REFERENCE
       "[TBD]"
    ::= { nsp 19 }

dec-loop PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "DEC Loopback Protocol."
    REFERENCE
       "[TBD]"
    ::= { nsp 25 }

dec-event PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "DEC Event Protocol."
    REFERENCE
       "[TBD]"
    ::= { nsp 26 }

cterm PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "DEC CTERM Protocol."
    REFERENCE
       "[TBD]"
    ::= { nsp 42 }









Expires May 1999                                              [Page 112]





Internet-Draft               RMON PI Macros                November 1998


6.1.7.  The IBM SNA Protocol Stack.

sna-th PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
      -- [ed. - clearly this really does have children, but I have
      -- no idea what applications are at the top, so is it
      -- worth expanding the hierarchy?]
    DESCRIPTION
       "IBM's SNA TH protocol."
    REFERENCE
       "IBM Systems Network Architecture
         Format and Protocol
         Reference Manual: Architectural Logic

         SC30-3112-2

         IBM System Communications Division,
         Publications Development,
         Department E02,
         PO Box 12195,
         Research Triangle Park,
         North Carolina 27709."
    ::= {
        llc        0x04,              -- [0.0.0.4]
        llc        0x08,              -- [0.0.0.8]
        llc        0x0c,              -- [0.0.0.12]
        ether2     0x80d5,            -- [0.0.128.213]
        802-1Q     0x02000004,        -- 1Q-LLC [2.0.0.4]
        802-1Q     0x02000008,        -- 1Q-LLC [2.0.0.8]
        802-1Q     0x0200000c,        -- 1Q-LLC [2.0.0.12]
        802-1Q     0x80d5             -- [0.0.128.213]
    }


6.1.8.  The NetBEUI/NetBIOS Family

-- [ed. this comment needs fixing
-- CHILDREN OF NETBIOS
-- The NetBIOS/NetBEUI functions are implemented over a wide variety of
-- transports.  Despite varying implementations they all share two
-- features.  Firstly all sessions are established by connecting to
-- locally named services.  Secondly all sessions transport application
-- between the client and the named service.  In all cases the
-- identification of the application protocol carried within the data





Expires May 1999                                              [Page 113]





Internet-Draft               RMON PI Macros                November 1998


-- packets is beyond the scope of this document.]
--
-- Children of NetBIOS/NetBEUI are identified by the following (32 bit)
-- enumeration
--
--      1   smb (Microsoft's Server Message Block Protocol)
--      2   notes (Lotus' Notes Protocol)
--      3   cc-mail (Lotus' CC Mail Protocol)
--
-- Children of NetBIOS/NetBEUI are encoded as [ a.b.c.d ] where 'a', 'b',
-- 'c' and 'd' are the four octets of the enumerated value in network
-- order (i.e.  'a' is the MSB and 'd' is the LSB).
--
-- For example notes over NetBEUI is declared as
--      'notes ::= { netbeui 2 }'
-- but is referred to as
--      'netbeui notes' OR 'netbeui 2'.

netbeui PROTOCOL-IDENTIFIER
    PARAMETERS {
        tracksSessions(1)
    }
    ATTRIBUTES {
        hasChildren(0)
    }
    DESCRIPTION
       "Lan Manager NetBEUI protocol."
    CHILDREN
       "See `CHILDREN OF NETBIOS`"
    DECODING
       "NETBEUI provides a named service lookup function.  This function
       allows clients to locate a service by (locally assigned) name. An
       implementation is encouraged to follow lookups and session
       establishments and having determined the child protocol, track
       them.

       How the child protocol is determined and how the sessions are
       tracked is an implementation specific matter and is beyond the
       scope of this document."
    REFERENCE
       "[TBD]"
    ::= {
        llc        0xF0,          --  [0.0.0.240]
        802-1Q     0x020000F0     --  1Q-LLC [2.0.0.240]
    }





Expires May 1999                                              [Page 114]





Internet-Draft               RMON PI Macros                November 1998


nbt-name PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "NetBIOS-over-TCP name protocol."
    REFERENCE
       "[TBD]"
    ::= {
        udp     137,
        tcp     137
    }

nbt-session PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "NetBIOS-over-TCP session protocol."
    REFERENCE
       "[TBD]"
    ::= {
        udp     139,
        tcp     139
    }

nbt-data PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
        hasChildren(0)
    }
    DESCRIPTION
       "NetBIOS-over-TCP datagram protocol."
    CHILDREN
       "See `CHILDREN OF NETBIOS`"
    REFERENCE
       "[TBD]"
    ::= {
        udp     138,
        tcp     138
    }

netbios-3com PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
        hasChildren(0)
    }





Expires May 1999                                              [Page 115]





Internet-Draft               RMON PI Macros                November 1998


    DESCRIPTION
       "3COM NetBIOS protocol."
    CHILDREN
       "See `CHILDREN OF NETBIOS`"
    REFERENCE
       "[TBD]"
    ::= {
        ether2  0x3C00,
        ether2  0x3C01,
        ether2  0x3C02,
        ether2  0x3C03,
        ether2  0x3C04,
        ether2  0x3C05,
        ether2  0x3C06,
        ether2  0x3C07,
        ether2  0x3C08,
        ether2  0x3C09,
        ether2  0x3C0A,
        ether2  0x3C0B,
        ether2  0x3C0C,
        ether2  0x3C0D,
        802-1Q  0x3C00,
        802-1Q  0x3C01,
        802-1Q  0x3C02,
        802-1Q  0x3C03,
        802-1Q  0x3C04,
        802-1Q  0x3C05,
        802-1Q  0x3C06,
        802-1Q  0x3C07,
        802-1Q  0x3C08,
        802-1Q  0x3C09,
        802-1Q  0x3C0A,
        802-1Q  0x3C0B,
        802-1Q  0x3C0C,
        802-1Q  0x3C0D
    }

nov-netbios PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES {
        hasChildren(0)
    }
    DESCRIPTION
       "Novell's version of the NetBIOS protocol."
    CHILDREN





Expires May 1999                                              [Page 116]





Internet-Draft               RMON PI Macros                November 1998


       "See `CHILDREN OF NETBIOS`"
    REFERENCE
       "[TBD]"
    ::= {
        nov-sap 0x0020,       -- this is the right one to use
        -- these are typically also true, but derivable from the one
        -- above at run-time
        -- ipx  0x14; when reached by IPX packet type
        nov-pep 0x0455   --  when reached by socket number
    }

burst PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "BURST [TBD]"
    REFERENCE
       "[TBD]"
    ::= { nov-pep 0x0d05 }


6.2.  Multi-stack protocols

smb PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Microsoft Server Message Block Protocol."
    REFERENCE
       "[TBD]"
    ::= {
        netbeui         1,
        netbios-3com    1,
        nov-netbios     1,
        nbt-data        1,
        nbt-session     1,
        nov-pep         0x550,
        nov-pep         0x552
        -- vspp ???
        -- xns-spp ???
    }

notes PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }





Expires May 1999                                              [Page 117]





Internet-Draft               RMON PI Macros                November 1998


    DESCRIPTION
       "Lotus Notes Protocol."
    REFERENCE
       "[TBD]"
    ::= {
        netbeui         2,
        netbios-3com    2,
        nov-netbios     2,
        nbt-data        2,
        tcp             1352,
        udp             1352,
        nov-sap         0x039b
    }

ccmail PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
         "Lotus CC-mail Protocol."
    REFERENCE
       "[TBD]"
    ::= {
        netbeui         3,
        netbios-3com    3,
        nov-netbios     3,
        nbt-data        3,
        tcp             3264,
        udp             3264
    }

snmp  PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Simple Network Management Protocol. Includes SNMPv1 and SNMPv2
       protocol versions. Does not include SNMP trap packets."
    REFERENCE
       "The SNMP SMI is defined in RFC 1902 [RFC1902]. The SNMP
       protocol is defined in RFC 1905 [RFC1905].  Transport mappings
       are defined in RFC 1906 [RFC1906]; RFC 1420 (SNMP over IPX)
       [RFC1420]; RFC 1419 (SNMP over AppleTalk) [RFC1419]."
    ::= {
        udp 161,
        nov-pep 0x900f,   -- [ 0.0.144.15 ]
        atalk 8,





Expires May 1999                                              [Page 118]





Internet-Draft               RMON PI Macros                November 1998


        tcp 161
    }

snmptrap PROTOCOL-IDENTIFIER
    PARAMETERS { }
    ATTRIBUTES { }
    DESCRIPTION
       "Simple Network Management Protocol Trap Port."
    REFERENCE
       "The SNMP SMI is defined in RFC 1902 [RFC1902]. The SNMP
       protocol is defined in RFC 1905 [RFC1905].  Transport mappings
       are defined in RFC 1906 [RFC1906]; RFC 1420 (SNMP over IPX)
       [RFC1420]; RFC 1419 (SNMP over AppleTalk) [RFC1419]."
    ::= {
        udp 162,
        nov-pep 0x9010,
        atalk 9,
        tcp 162
    }

-- END


7.  Intellectual Property

The IETF takes no position regarding the validity or scope of any
intellectual property or other rights that might be claimed to  pertain
to the implementation or use of the technology described in this
document or the extent to which any license under such rights might or
might not be available; neither does it represent that it has made any
effort to identify any such rights.  Information on the IETF's
procedures with respect to rights in standards-track and standards-
related documentation can be found in BCP-11.  Copies of claims of
rights made available for publication and any assurances of licenses to
be made available, or the result of an attempt made to obtain a general
license or permission for the use of such proprietary rights by
implementors or users of this specification can be obtained from the
IETF Secretariat."

The IETF invites any interested party to bring to its attention any
copyrights, patents or patent applications, or other proprietary rights
which may cover technology that may be required to practice this
standard.  Please address the information to the IETF Executive
Director.






Expires May 1999                                              [Page 119]





Internet-Draft               RMON PI Macros                November 1998


8.  Acknowledgements

This document was produced by the IETF RMONMIB Working Group.

The authors wish to thank the following people for their contributions
to this document:

     Anil Singhal
     Frontier Software Development, Inc.

     Jeanne Haney
     Bay Networks

     Dan Hansen
     Network General Corp.

Special thanks are in order to the following people for writing RMON PI
macro compilers, and improving the specification of the PI macro
language:

     David Perkins
     DeskTalk Systems, Inc.

     Skip Koppenhaver
     Technically Elite, Inc.


9.  References

[IEN158]
     J. Haverty, "XNET Formats for Internet Protocol Version 4", IEN
     158, October 1980.

[RFC407]
     Bressler, R., Guida. R., and A. McKenzie, "Remote Job Entry
     Protocol", RFC 407, MIT-DMCG, BBN-NET, October 1972.

[RFC493]
     Michener, J., Cotton, I., Kelley, K., Liddle, D., and E. Meyer,
     "E.W., Jr  Graphics Protocol", RFC 493, April 1973.

[RFC734]
     M. Crispin, "SUPDUP Protocol", RFC 734, SU-AI, October 1977.







Expires May 1999                                              [Page 120]





Internet-Draft               RMON PI Macros                November 1998


[RFC740]
     R. Braden, "NETRJS Protocol", RFC 740, UCLA-CCN, November 1977.

[RFC741]
     D. Cohen, "Specifications for the Network Voice Protocol", RFC 741,
     ISI/RR 7539, USC/Information Sciences Institute, March 1976.

[RFC759]
     J. Postel, "Internet Message Protocol", RFC 759, USC/Information
     Sciences Institute, August 1980.

[RFC768]
     J. Postel, "User Datagram Protocol", STD 6, RFC 768,
     USC/Information Sciences Institute, August 1980.

[RFC791]
     J. Postel, "Internet Protocol - DARPA Internet Program Protocol
     Specification", STD 5, RFC 791, USC/Information Sciences Institute,
     September 1981.

[RFC792]
     J. Postel, "Internet Control Message Protocol - DARPA Internet
     Program Protocol Specification", STD 5, RFC 792, USC/Information
     Sciences Institute, September 1981.

[RFC793]
     J. Postel, "Transmission Control Protocol - DARPA Internet Program
     Protocol Specification", STD 5, RFC 793, USC/Information Sciences
     Institute, September 1981.

[RFC818]
     J. Postel, "Remote User Telnet service", RFC 818, ISI, November
     1982.

[RFC821]
     J. Postel, "Simple Mail Transfer Protocol", RFC 821,
     USC/Information Sciences Institute, August 1982.

[RFC823]
     Hinden, R., and A. Sheltzer, "The DARPA Internet Gateway", RFC 823,
     BBN, September 1982.

[RFC826]
     D. Plummer, "An Ethernet Address Resolution Protocol or Converting
     Network Protocol Addresses to 48-bit Ethernet Addresses for





Expires May 1999                                              [Page 121]





Internet-Draft               RMON PI Macros                November 1998


     Transmission on Ethernet Hardware", STD 37, RFC 826, MIT-LCS,
     November 1982.

[RFC854]
     Postel, J., and J. Reynolds, "Telnet Protocol Specification", STD
     8, RFC 854, ISI, May 1983.

[RFC862]
     J. Postel, "Echo Protocol", STD 20, RFC 862, ISI, May 1983.

[RFC863]
     J. Postel, "Discard Protocol", STD 21, RFC 863, ISI, May 1983.

[RFC864]
     J. Postel, "Character Generator Protocol", STD 22, RFC 864, ISI,
     May 1983.

[RFC865]
     J. Postel, "Quote of the Day Protocol", RFC 865, ISI, May 1983.

[RFC866]
     J. Postel, "Active Users", STD 26, RFC 866, ISI, May 1983.

[RFC867]
     J. Postel, "Daytime Protocol", STD 25, RFC 867, ISI, May 1983.

[RFC868]
     J. Postel, "Time Protocol", STD 26, RFC 868, ISI, May 1983.

[RFC869]
     R. Hinden, "A Host Monitoring Protocol", RFC 869, Bolt Beranek and
     Newman, December 1983.

[RFC887]
     M. Accetta, "Resource Location Protocol", RFC 887, CMU, December
     1983.

[RFC904]
     International Telegraph and Telephone Co., D. Mills, "Exterior
     Gateway Protocol Formal Specification", RFC 904, April 1984.

[RFC905]
     International Standards Organization, A. McKenzie, "ISO Transport
     Protocol Specification - ISO DP 8073", RFC 905, April 1984.






Expires May 1999                                              [Page 122]





Internet-Draft               RMON PI Macros                November 1998


[RFC908]
     Velten, D., Hinden, R., and J. Sax, "Reliable Data Protocol", RFC
     908, BBN Communications Corporation, July 1984.

[RFC913]
     M. Lottor, "Simple File Transfer Protocol", RFC 913, MIT, September
     1984.

[RFC915]
     Elvy, M., and R. Nedved, "Network mail path service", RFC 915,
     Harvard University, Carnegie-Mellon University, December 1984.

[RFC937]
     Butler, M., Chase, D., Goldberger, J., Postel, J., and J. Reynolds,
     "Post Office Protocol - version 2", RFC 937, ISI, February 1985.

[RFC938]
     T. Miller, "Internet Reliable Transaction Protocol", RFC 938, ACC,
     February 1985.

[RFC951]
     Croft, W., and J. Gilmore, "BOOTSTRAP Protocol (BOOTP)", RFC 951,
     Stanford and SUN Microsytems, September 1985.

[RFC953]
     Feinler, E., Harrenstien, K., and M. Stahl, "Hostname Server", RFC
     953, SRI, October 1985.

[RFC954]
     Feinler, E., Harrenstien, K., and M. Stahl, "NICNAME/WHOIS", RFC
     954, SRI, October 1985.

[RFC959]
     Postel, J., and J. Reynolds, "File Transfer Protocol", RFC 959,
     USC/Information Sciences Institute, October 1985.

[RFC972]
     F. Wancho, "Password Generator Protocol", RFC 972, WSMR, January
     1986.

[RFC977]
     Kantor, B., and P. Lapsley, "Network News Transfer Protocol: A
     Proposed Standard for the Stream-Based Transmission of News", RFC
     977, U.C. San Diego, U.C. Berkeley, February 1986.






Expires May 1999                                              [Page 123]





Internet-Draft               RMON PI Macros                November 1998


[RFC996]
     D. Mills, "Statistics server", RFC 996, University of Delaware,
     February 1987.

[RFC998]
     Clark, D., Lambert, M., and L. Zhang, "NETBLT: A Bulk Data Transfer
     Protocol", RFC 998, MIT, March 1987.

[RFC1021]
     Partridge, C., and G. Trewitt, "High-level Entity Management System
     HEMS", RFC 1021, BBN/NNSC, Stanford, October 1987.

[RFC1028]
     Case, J., Davin, J., Fedor, M., and M. Schoffstall, "Simple Gateway
     Monitoring Protocol", RFC 1028, University of Tennessee at
     Knoxville, Proteon, Inc., Cornell University, Rensselaer
     Polytechnic Institute, November 1987.

[RFC1035]
     P. Mockapetris, "Domain Names - Implementation and Specification",
     STD 13, RFC 1035, USC/Information Sciences Institute, November
     1987.

[RFC1056]
     M. Lambert, "PCMAIL: A distributed mail system for personal
     computers", RFC 1056, MIT, June 1988.

[RFC1057]
     Sun Microsystems, Inc, "RPC: Remote Procedure Call Protocol
     Specification version 2", RFC 1057, Sun Microsystems, Inc., June
     1988.

[RFC1064]
     M. Crispin, "Interactive Mail Access Protocol: Version 2", RFC
     1064, SUMEX-AIM, July 1988.

[RFC1068]
     A. DeSchon, and R. Braden, "Background File Transfer Program
     BFTP", RFC 1068, ISI, August 1988.

[RFC1070]
     Hagens, R., Hall, N., and M. Rose, "Use of the Internet as a
     subnetwork for experimentation with the OSI network layer", RFC
     1070, U of Wiscsonsin - Madison, The Wollongong Group, February
     1989.





Expires May 1999                                              [Page 124]





Internet-Draft               RMON PI Macros                November 1998


[RFC1078]
     M. Lottor, "TCP port service Multiplexer  TCPMUX", RFC 1078, SRI-
     NIC, November, 1988.

[RFC1086]
     Onions, J., and M. Rose, "ISO-TP0 bridge between TCP and X.25", RFC
     1086, Nottingham, TWG, December 1988.

[RFC1095]
     Warrier, U., and L. Besaw, "Common Management Information Services
     and Protocol over TCP/IP (CMOT)", RFC 1095, Unisys Corporation,
     Hewlett-Packard, April 1989.

[RFC1112]
     S. Deering, "Host Extensions for IP Multicasting", RFC 1112,
     Stanford University, August 1989.

[RFC1155]
     Rose, M., and K. McCloghrie, "Structure and Identification of
     Management Information for TCP/IP-based Internets", RFC 1155,
     Performance Systems International, Hughes LAN Systems, May 1990.

[RFC1157]
     Case, J., Fedor, M., Schoffstall, M., and J. Davin, "Simple Network
     Management Protocol", RFC 1157, SNMP Research, Performance Systems
     International, Performance Systems International, MIT Laboratory
     for Computer Science, May 1990.

[RFC1203]
     J. Rice, "Interactive Mail Access Protocol - Version 3", RFC 1203,
     Stanford, February 1991.

[RFC1204]
     Lee, D., and S. Yeh, "Message Posting Protocol (MPP)", RFC 1204,
     Netix Communications, Inc., February 1991.

[RFC1212]
     Rose, M., and K. McCloghrie, "Concise MIB Definitions", RFC 1212,
     Performance Systems International, Hughes LAN Systems, March 1991.

[RFC1213]
     McCloghrie, K., and M. Rose, "Management Information Base for
     Network Management of TCP/IP-based internets: MIB-II", STD 17, RFC
     1213, Hughes LAN Systems, Performance Systems International, March
     1991.





Expires May 1999                                              [Page 125]





Internet-Draft               RMON PI Macros                November 1998


[RFC1215]
     M. Rose, "A Convention for Defining Traps for use with the SNMP",
     RFC 1215, Performance Systems International, March 1991.

[RFC1226]
     B. Kantor, "Internet Protocol Encapsulation of AX.25 Frames", RFC
     1226, UCSD, May 1991.

[RFC1227]
     M. Rose, "SNMP MUX Protocol and MIB", RFC 1227, Performance Systems
     International, Inc., May 1991.

[RFC1234]
     D. Provan, "Tunneling IPX Traffic through IP Networks", RFC 1234,
     Novell, Inc., June 1991.

[RFC1235]
     Ioannidis, J., and G. Maguire, Jr., "The Coherent File Distribution
     Protocol", RFC 1235, Columbia University, June 1991.

[RFC1241]
     Mills, D., and R. Woodburn, "A Scheme for an Internet Encapsulation
     Protocol: Version 1", RFC 1241, SAIC, University of Delaware, July
     1991.

[RFC1249]
     Howes, T., Smith, M., and B. Beecher, "DIXIE Protocol
     Specification", RFC 1249, University of Michigan, August 1991.

[RFC1267]
     Lougheed, K., and Y. Rekhter, "A Border Gateway Protocol 3 (BGP-
     3)", RFC 1267, Cisco Systems, T.J. Watson Research Center, IBM
     Corp., October 1991.

[RFC1282]
     B. Kantor, "BSD Rlogin", RFC 1282, Univ. of Calif San Diego,
     December 1991.

[RFC1288]
     D. Zimmerman, "The Finger User Information Protocol", RFC 1288,
     Center for Discrete Mathematics and Theoretical Computer Science,
     December 1991.

[RFC1301]
     Armstrong, S., Freier, A., and K. Marzullo, "Multicast Transport





Expires May 1999                                              [Page 126]





Internet-Draft               RMON PI Macros                November 1998


     Protocol",

     RFC 1301, Xerox, Apple, Cornell, February 1992.

[RFC1305]
     D. Mills, "Network Time Protocol (v3)", RFC 1305, University of
     Delaware, April 1992.

[RFC1312]
     Nelson, R., and G. Arnold, "Message Send Protocol", RFC 1312,
     Crynwr Software, Sun Microsystems, Inc., April 1992.

[RFC1339]
     Dorner, S., and P. Resnick, "Remote Mail Checking Protocol", RFC
     1339, U. of Illinois at Urbana-Champaign, June 1992.

[RFC1350]
     K. Sollins, "TFTP Protocol (revision 2)", RFC 1350, MIT, July 1992.

[RFC1413]
     M. St. Johns, "Identification Protocol", RFC 1413, US Department of
     Defense, February 1993.

[RFC1419]
     Minshall, G., and M. Ritter, "SNMP over AppleTalk", RFC 1419,
     Novell, Inc., Apple Computer, Inc., March 1993.

[RFC1420]
     S. Bostock, "SNMP over IPX", RFC 1420, Novell, Inc., March 1993.

[RFC1436]
     Anklesaria, F., McCahill, M., Lindner, P., Johnson, D., John, D.,
     Torrey, D., and B. Alberti, "The Internet Gopher Protocol (a
     distributed  document search and retrieval protocol)", RFC 1436,
     University of Minnesota, March 1993.

[RFC1459]
     Oikarinen, J., and D. Reed, "Internet Relay Chat Protocol", RFC
     1459, May 1993.

[RFC1476]
     R. Ullmann, "RAP: Internet Route Access Protocol", RFC 1476,
     Process Software Corporation, June 1993.







Expires May 1999                                              [Page 127]





Internet-Draft               RMON PI Macros                November 1998


[RFC1479]
     M. Steenstrup, "Inter-Domain Policy Routing Protocol Specification:
     Version 1", RFC 1479, BBN Systems and Technologies, July 1993.

[RFC1483]
     J. Heinanen, "Multiprotocol Encapsulation over ATM Adaptation Layer
     5", RFC 1483, Telecom Finland, July 1993.

[RFC1492]
     C. Finseth, "An Access Control Protocol, Sometimes Called TACACS",
     RFC 1492, University of Minnesota, July 1993.

[RFC1510]
     Kohl, J., and B. Neuman, "The Kerberos Network Authentication
     Service (V5)", RFC 1510, Digital Equipment Corporation, ISI,
     September 1993.

[RFC1583]
     J. Moy, "OSPF Version 2", RFC 1583, Proteon, Inc., March 1994.

[RFC1700]
     Reynolds, J., and J. Postel, "Assigned Numbers", STD 2, RFC 1700,
     USC/Information Sciences Institute, October 1994.

[RFC1701]
     Hanks, S., Li, T., Farinacci, D., and P. Traina, "Generic Routing
     Encapsulation (GRE)", RFC 1701, Netsmiths, Ltd., Cisco Systems,
     October 1994.

[RFC1702]
     Hanks, S., Li, T., Farinacci, D., and P. Traina, "Generic Routing
     Encapsulation over IPv4 networks", RFC 1702, Netsmiths, Ltd., Cisco
     Systems, October 1994.

[RFC1725]
     Myers, J., and M. Rose, "Post Office Protocol - Version 3", RFC
     1725, Carnegie Mellon, Dover Beach Consulting, November 1994.

[RFC1729]
     C. Lynch, "Using the Z39.50 Information Retrieval Protocol in the
     Internet Environment", RFC 1729, University of California, December
     1994.

[RFC1730]
     M. Crispin, "Internet Message Access Protocol - Version 4", RFC





Expires May 1999                                              [Page 128]





Internet-Draft               RMON PI Macros                November 1998


     1730, University of Washington, December 1994.

[RFC1739]
     Kessler, G., and S. Shepard, "A Primer On Internet and TCP/IP
     Tools", RFC 1739, Hill Associates, Inc., December 1994.

[RFC1745]
     Varadhan, K., Hares, S., and Y. Rekhter, "BGP4/IDRP for IP---OSPF
     Interaction", RFC 1745, OARnet & ISI, NSFnet/Merit, IBM, December
     1994.

[RFC1757]
     S. Waldbusser, "Remote Network Monitoring MIB", RFC 1757, Carnegie
     Mellon University, February 1995.

[RFC1777]
     Yeong, W., Howes, T., and S. Kille, "Lightweight Directory Access
     Protocol", Performance Systems International, University of
     Michigan, ISODE Consortium, March 1995.

[RFC1782]
     Malkin, G., and A. Harkin, "TFTP Option Extension", RFC 1782,
     Xylogics, Inc., Hewlett Packard Co., March 1995.

[RFC1783]
     Malkin, G., and A. Harkin, "TFTP BlockOption Option", RFC 1783,
     Xylogics, Inc., Hewlett Packard Co., March 1995.

[RFC1784]
     Malkin, G., and A. Harkin, "TFTP Timeout Interval and Transfer Size
     Options", RFC 1784, Xylogics, Inc., Hewlett Packard Co., March
     1995.

[RFC1798]
     A. Young, "Connection-less Lightweight Directory Access Protocol",
     RFC 1798, ISODE Consortium, June 1995.

[RFC1800]
     J. Postel, "Internet Official Protocol Standards", STD 1, RFC 1800,
     IAB, July 1995.

[RFC1813]
     Callaghan, B., Pawlowski, B., and P. Staubach, "NFS Version 3
     Protocol Specification", RFC 1813, Sun Microsystems, Inc., June
     1995.





Expires May 1999                                              [Page 129]





Internet-Draft               RMON PI Macros                November 1998


[RFC1819]
     Delgrossi, L., and L. Berger, "Internet Stream Protocol Version 2
     (ST2)", RFC 1819, ST2 Working Group, August 1995.

[RFC1831]
     R. Srinivasan, "Remote Procedure Call Protocol Version 2", RFC
     1831, Sun Microsystems, Inc., August 1995.

[RFC1853]
     W. Simpson, "IP in IP Tunneling", RFC 1853, Daydreamer, October
     1995.

[RFC1901]
     SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and S.
     Waldbusser, "Introduction to Community-based SNMPv2", RFC 1901,
     SNMP Research, Inc., Cisco Systems, Inc., Dover Beach Consulting,
     Inc., International Network Services, January 1996.

[RFC1902]
     SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and S.
     Waldbusser, "Structure of Management Information for version 2 of
     the Simple Network Management Protocol (SNMPv2)", RFC 1902, SNMP
     Research, Inc., Cisco Systems, Inc., Dover Beach Consulting, Inc.,
     International Network Services, January 1996.

[RFC1903]
     SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and S.
     Waldbusser, "Textual Conventions for version 2 of the Simple
     Network Management Protocol (SNMPv2)", RFC 1903, SNMP Research,
     Inc., Cisco Systems, Inc., Dover Beach Consulting, Inc.,
     International Network Services, January 1996.

[RFC1904]
     SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and S.
     Waldbusser, "Conformance Statements for version 2 of the Simple
     Network Management Protocol (SNMPv2)", RFC 1904, SNMP Research,
     Inc., Cisco Systems, Inc., Dover Beach Consulting, Inc.,
     International Network Services, January 1996.

[RFC1905]
     SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and S.
     Waldbusser, "Protocol Operations for Version 2 of the Simple
     Network Management Protocol (SNMPv2)", RFC 1905, SNMP Research,
     Inc., Cisco Systems, Inc., Dover Beach Consulting, Inc.,
     International Network Services, January 1996.





Expires May 1999                                              [Page 130]





Internet-Draft               RMON PI Macros                November 1998


[RFC1906]
     SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M., and S.
     Waldbusser, "Transport Mappings for Version 2 of the Simple Network
     Management Protocol (SNMPv2)"", RFC 1906, SNMP Research, Inc.,
     Cisco Systems, Inc., Dover Beach Consulting, Inc., International
     Network Services, January 1996.

[RFC1940]
     Estrin, D., Li, T., Rekhter, Y., Varadhan, K., and D. Zappala,
     "Source Demand Routing: Packet Format and Forwarding Specification
     (Version 1).", RFC 1940, USC, Cisco Systems, May 1996.

[RFC1945]
     Berners-Lee, T., and R. Fielding, "Hypertext Transfer Protocol --
     HTTP/1.0", RFC 1945, MIT/LCS, UC-Irvine, November 1995.

[RFC2003]
     C. Perkins, "IP Encapsulation within IP", RFC 2003, IBM, October
     1996.

[RFC2021]
     S. Waldbusser, "Remote Network Monitoring MIB (RMON-2)", RFC 2021,
     International Network Services, January 1997.

[RFC2037]
     McCloghrie, K., and A. Bierman, "Entity MIB using SMIv2", RFC 2037,
     Cisco Systems, October 1996.

[RFC2068]
     Fielding, R., Gettys, J., Mogul, J., Frystyk, H., and T. Berners-
     Lee, "Hypertext Transfer Protocol -- HTTP/1.1", RFC 2068, DEC,
     MIT/LCS, January 1997.

[RFC2069]
     Franks, J., Hallam-Baker, P., Hostetler, J., Luotonen, P. A., and
     E. L. Stewart, "An Extension to HTTP: Digest Access
     Authentication", RFC 2069, CERN, Spyglass, Inc., Microsoft
     Corporation, Netscape Communications Corporation, Open Market,
     Inc., January 1997.

[RFC2074]
     Bierman, A., and R. Iddon, "Remote Network Monitoring MIB Protocol
     Identifiers", RFC 2074, Cisco Systems, AXON Networks Inc., January
     1997.






Expires May 1999                                              [Page 131]





Internet-Draft               RMON PI Macros                November 1998


[RFC2109]
     Kristol, D., and L. Montulli, "HTTP State Management Mechanism",
     RFC 2109, Bell Laboratories/Lucent Technologies, Netscape
     Communications, February 1997.

[RFC2145]
     Mogul, J., Fielding, R., Gettys, J., and H. Frystyk, "Use and
     interpretation of HTTP version numbers", RFC 2145, DEC, MIT/LCS,
     May 1997.

[RFC2205]
     Braden, R., Ed., Zhang, L., Berson, S., Herzog, S., and S. Jamin,
     "Resource ReSerVation Protocol (RSVP) -- Version 1 Functional
     Specification", RFC 2205, ISI, UCLA, IBM Research, University of
     Michigan, September, 1997.

[RFC2233]
     McCloghrie, K., and F. Kastenholz, "The Interfaces Group MIB Using
     SMIv2", RFC 2233, Cisco Systems, FTP Software, November, 1997.

[RFC2271]
     Harrington, D., Presuhn, R., and B. Wijnen, "An Architecture for
     Describing SNMP Management Frameworks", RFC 2271, Cabletron
     Systems, Inc., BMC Software, Inc., IBM T. J. Watson Research,
     January 1998.

[RFC2272]
     Case, J., Harrington D., Presuhn R., and B. Wijnen, "Message
     Processing and Dispatching for the Simple Network Management
     Protocol (SNMP)", RFC 2272, SNMP Research, Inc., Cabletron Systems,
     Inc., BMC Software, Inc., IBM T. J. Watson Research, January 1998.

[RFC2273]
     Levi, D., Meyer, P., and B. Stewart, "SNMPv3 Applications", RFC
     2273, SNMP Research, Inc., Secure Computing Corporation, Cisco
     Systems, January 1998.

[RFC2274]
     Blumenthal, U., and B. Wijnen, "User-based Security Model (USM) for
     version 3 of the Simple Network Management Protocol (SNMPv3)", RFC
     2274, IBM T. J. Watson Research, January 1998.

[RFC2275]
     Wijnen, B., Presuhn, R., and K. McCloghrie, "View-based Access
     Control Model (VACM) for the Simple Network Management Protocol





Expires May 1999                                              [Page 132]





Internet-Draft               RMON PI Macros                November 1998


     (SNMP)", RFC 2275, IBM T. J. Watson Research, BMC Software, Inc.,
     Cisco Systems, Inc., January 1998.

[RMONPROT_REF]
     Bierman, A., Bucci, C., and R. Iddon, "RMON Protocol Identifier
     Reference", draft-ietf-rmonmib-rmonprot-ref-00.txt, Cisco Systems,
     Inc., 3Com, Inc., November, 1998.


10.  Security Considerations

This document contains textual descriptions of well-known networking
protocols, not the definition of any networking behavior.  As such, no
security considerations are raised by its publication.

11.  Authors' Addresses

     Andy Bierman
     Cisco Systems, Inc.
     170 West Tasman Drive
     San Jose, CA USA 95134
     Phone: +1 408-527-3711
     Email: abierman@cisco.com

     Chris Bucci
     Cisco Systems, Inc.
     170 West Tasman Drive
     San Jose, CA USA 95134
     Phone: +1 408-527-5337
     Email: cbucci@cisco.com

     Robin Iddon
     3Com Inc.
     40/50 Blackfrias Street
     Edinburgh, UK
     Phone: +44 131.558.3888
     Email: Robin_Iddon@3mail.3com.com













Expires May 1999                                              [Page 133]





Internet-Draft               RMON PI Macros                November 1998


12.  Full Copyright Statement

Copyright (C) The Internet Society (1998).  All Rights Reserved.

This document and translations of it may be copied and furnished to
others, and derivative works that comment on or otherwise explain it or
assist in its implementation may be prepared, copied, published and
distributed, in whole or in part, without restriction of any kind,
provided that the above copyright notice and this paragraph are included
on all such copies and derivative works.  However, this document itself
may not be modified in any way, such as by removing the copyright notice
or references to the Internet Society or other Internet organizations,
except as needed for the purpose of developing Internet standards in
which case the procedures for copyrights defined in the Internet
Standards process must be followed, or as required to translate it into
languages other than English.

The limited permissions granted above are perpetual and will not be
revoked by the Internet Society or its successors or assigns.

This document and the information contained herein is provided on an "AS
IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING TASK
FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT
LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT
INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR
FITNESS FOR A PARTICULAR PURPOSE."
























Expires May 1999                                              [Page 134]
