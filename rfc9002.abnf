latest_rtt = ack_time - send_time_of_largest_acked

smoothed_rtt = kInitialRtt
rttvar = kInitialRtt / 2

smoothed_rtt = latest_rtt
rttvar = latest_rtt / 2

ack_delay = decoded acknowledgment delay from ACK frame
ack_delay = min(ack_delay, max_ack_delay)
adjusted_rtt = latest_rtt
adjusted_rtt = latest_rtt - ack_delay
smoothed_rtt = 7/8 * smoothed_rtt + 1/8 * adjusted_rtt
rttvar_sample = abs(smoothed_rtt - adjusted_rtt)
rttvar = 3/4 * rttvar + 1/4 * rttvar_sample

PTO = smoothed_rtt + max(4*rttvar, kGranularity) + max_ack_delay

kPersistentCongestionThreshold = 3

rate = N * congestion_window / smoothed_rtt

interval = ( smoothed_rtt * packet_size / congestion_window ) / N

pto_count = 0
latest_rtt = 0
smoothed_rtt = kInitialRtt
rttvar = kInitialRtt / 2
min_rtt = 0
first_rtt_sample = 0
newly_acked_packets =
         DetectAndRemoveAckedPackets(ack, pn_space)
latest_rtt =
         now() - newly_acked_packets.largest().time_sent
lost_packets = DetectAndRemoveLostPackets(pn_space)
pto_count = 0
min_rtt = latest_rtt
smoothed_rtt = latest_rtt
rttvar = latest_rtt / 2
first_rtt_sample = now()
min_rtt = min(min_rtt, latest_rtt)
ack_delay = min(ack_delay, max_ack_delay)

adjusted_rtt = latest_rtt
adjusted_rtt = latest_rtt - ack_delay

rttvar = 3/4 * rttvar + 1/4 * abs(smoothed_rtt - adjusted_rtt)
smoothed_rtt = 7/8 * smoothed_rtt + 1/8 * adjusted_rtt

time = loss_time[Initial]
space = Initial
time = loss_time[pn_space];
space = pn_space
duration = (smoothed_rtt + max(4 * rttvar, kGranularity))
         * (2 ^ pto_count)
pto_timeout = infinite
pto_space = Initial
t = time_of_last_ack_eliciting_packet[space] + duration
pto_timeout = t
pto_space = space
lost_packets = DetectAndRemoveLostPackets(pn_space)
lost_packets = []
loss_delay = kTimeThreshold * max(latest_rtt, smoothed_rtt)

loss_delay = max(loss_delay, kGranularity)

lost_send_time = now() - loss_delay

pto_count = 0
congestion_window = kInitialWindow
bytes_in_flight = 0
congestion_recovery_start_time = 0
ssthresh = infinite
congestion_recovery_start_time = now()
ssthresh = congestion_window * kLossReductionFactor
congestion_window = max(ssthresh, kMinimumWindow)
sent_time = sent_packets[ack.largest_acked].time_sent
sent_time_of_last_loss = 0
sent_time_of_last_loss =
           max(sent_time_of_last_loss, lost_packet.time_sent)
pc_lost = []
congestion_window = kMinimumWindow
congestion_recovery_start_time = 0

