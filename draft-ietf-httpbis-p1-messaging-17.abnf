example-list      = 1#example-list-elmt
example-list-elmt = token ; see Section 3.2.3

OWS            = *( SP / HTAB / obs-fold )
                    ; "optional" whitespace
RWS            = 1*( SP / HTAB / obs-fold )
                    ; "required" whitespace
BWS            = OWS
                    ; "bad" whitespace
obs-fold       = CRLF ( SP / HTAB )
                    ; obsolete line folding
                    ; see Section 3.2.1

UA ======================================= O
                                   <   response

UA =========== A =========== B =========== C =========== O
                  <             <             <             <

UA =========== A =========== B - - - - - - C - - - - - - O
                     <             <





HTTP-Version   = HTTP-Prot-Name "/" DIGIT "." DIGIT
HTTP-Prot-Name = %x48.54.54.50 ; "HTTP", case-sensitive

URI-reference = <URI-reference, defined in [RFC3986], Section 4.1>
absolute-URI  = <absolute-URI, defined in [RFC3986], Section 4.3>
relative-part = <relative-part, defined in [RFC3986], Section 4.2>
authority     = <authority, defined in [RFC3986], Section 3.2>
path-abempty  = <path-abempty, defined in [RFC3986], Section 3.3>
path-absolute = <path-absolute, defined in [RFC3986], Section 3.3>
port          = <port, defined in [RFC3986], Section 3.2.3>
query         = <query, defined in [RFC3986], Section 3.4>
uri-host      = <host, defined in [RFC3986], Section 3.2.2>






partial-URI   = relative-part [ "?" query ]

http-URI = "http:" "//" authority path-abempty [ "?" query ]

https-URI = "https:" "//" authority path-abempty [ "?" query ]






HTTP-message    = start-line
                       *( header-field CRLF )
                       CRLF
                       [ message-body ]

start-line      = Request-Line / Status-Line

Request-Line   = Method SP request-target SP HTTP-Version CRLF

Method         = token

request-target = "*"
                    / absolute-URI
                    / ( path-absolute [ "?" query ] )
                    / authority

Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF

Status-Code    = 3DIGIT

Reason-Phrase  = *( HTAB / SP / VCHAR / obs-text )

header-field   = field-name ":" OWS field-value BWS
field-name     = token
field-value    = *( field-content / obs-fold )
field-content  = *( HTAB / SP / VCHAR / obs-text )

word           = token / quoted-string

token          = 1*tchar

tchar          = "!" / "#" / "$" / "%" / "&" / "'" / "*"
                    / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
                    / DIGIT / ALPHA
                    ; any VCHAR, except special

special        = "(" / ")" / "<" / ">" / "@" / ","
                    / ";" / ":" / "\" / DQUOTE / "/" / "["
                    / "]" / "?" / "=" / "{" / "}"

quoted-string  = DQUOTE *( qdtext / quoted-pair ) DQUOTE
qdtext         = OWS / %x21 / %x23-5B / %x5D-7E / obs-text
obs-text       = %x80-FF

quoted-pair    = "\" ( HTAB / SP / VCHAR / obs-text )

comment        = "(" *( ctext / quoted-cpair / comment ) ")"
ctext          = OWS / %x21-27 / %x2A-5B / %x5D-7E / obs-text

quoted-cpair    = "\" ( HTAB / SP / VCHAR / obs-text )

message-body = *OCTET

transfer-coding         = "chunked" ; Section 5.1.1
                             / "compress" ; Section 5.1.2.1
                             / "deflate" ; Section 5.1.2.2
                             / "gzip" ; Section 5.1.2.3
                             / transfer-extension
transfer-extension      = token *( OWS ";" OWS transfer-parameter )

transfer-parameter      = attribute BWS "=" BWS value
attribute               = token
value                   = word

Chunked-Body   = *chunk
                      last-chunk
                      trailer-part
                      CRLF

chunk          = chunk-size [ chunk-ext ] CRLF
                      chunk-data CRLF
chunk-size     = 1*HEXDIG
last-chunk     = 1*("0") [ chunk-ext ] CRLF

chunk-ext      = *( ";" chunk-ext-name
                         [ "=" chunk-ext-val ] )
chunk-ext-name = token
chunk-ext-val  = token / quoted-str-nf
chunk-data     = 1*OCTET ; a sequence of chunk-size octets
trailer-part   = *( header-field CRLF )

quoted-str-nf  = DQUOTE *( qdtext-nf / quoted-pair ) DQUOTE
                    ; like quoted-string, but disallowing line folding
qdtext-nf      = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text

product         = token ["/" product-version]
product-version = token

qvalue         = ( "0" [ "." 0*3DIGIT ] )
                    / ( "1" [ "." 0*3("0") ] )

      Note: "Quality values" is a misnomer, since these values merely
      represent relative degradation in desired quality.

Connection       = 1#connection-token
connection-token = token

Content-Length = 1*DIGIT

Host = uri-host [ ":" port ] ; Section 2.7.1

TE        = #t-codings
t-codings = "trailers" / ( transfer-extension [ te-params ] )
te-params = OWS ";" OWS "q=" qvalue *( te-ext )
te-ext    = OWS ";" OWS token [ "=" word ]

Trailer = 1#field-name

Transfer-Encoding = 1#transfer-coding





Upgrade = 1#product

Via               = 1#( received-protocol RWS received-by
                             [ RWS comment ] )
received-protocol = [ protocol-name "/" ] protocol-version
protocol-name     = token
protocol-version  = token
received-by       = ( uri-host [ ":" port ] ) / pseudonym
pseudonym         = token

BWS = OWS

Chunked-Body = *chunk last-chunk trailer-part CRLF
Connection = *( "," OWS ) connection-token *( OWS "," [ OWS
    connection-token ] )
Content-Length = 1*DIGIT

HTTP-Prot-Name = %x48.54.54.50 ; HTTP
HTTP-Version = HTTP-Prot-Name "/" DIGIT "." DIGIT
HTTP-message = start-line *( header-field CRLF ) CRLF [ message-body
    ]
Host = uri-host [ ":" port ]

Method = token

OWS = *( SP / HTAB / obs-fold )

RWS = 1*( SP / HTAB / obs-fold )
Reason-Phrase = *( HTAB / SP / VCHAR / obs-text )
Request-Line = Method SP request-target SP HTTP-Version CRLF

Status-Code = 3DIGIT
Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF

TE = [ ( "," / t-codings ) *( OWS "," [ OWS t-codings ] ) ]
Trailer = *( "," OWS ) field-name *( OWS "," [ OWS field-name ] )
Transfer-Encoding = *( "," OWS ) transfer-coding *( OWS "," [ OWS
    transfer-coding ] )

URI-reference = <URI-reference, defined in [RFC3986], Section 4.1>
Upgrade = *( "," OWS ) product *( OWS "," [ OWS product ] )








Via = *( "," OWS ) received-protocol RWS received-by [ RWS comment ]
    *( OWS "," [ OWS received-protocol RWS received-by [ RWS comment ] ]
    )

absolute-URI = <absolute-URI, defined in [RFC3986], Section 4.3>
attribute = token
authority = <authority, defined in [RFC3986], Section 3.2>

chunk = chunk-size [ chunk-ext ] CRLF chunk-data CRLF
chunk-data = 1*OCTET
chunk-ext = *( ";" chunk-ext-name [ "=" chunk-ext-val ] )
chunk-ext-name = token
chunk-ext-val = token / quoted-str-nf
chunk-size = 1*HEXDIG
comment = "(" *( ctext / quoted-cpair / comment ) ")"
connection-token = token
ctext = OWS / %x21-27 ; '!'-'''
    / %x2A-5B ; '*'-'['
    / %x5D-7E ; ']'-'~'
    / obs-text

field-content = *( HTAB / SP / VCHAR / obs-text )
field-name = token
field-value = *( field-content / obs-fold )

header-field = field-name ":" OWS field-value BWS
http-URI = "http://" authority path-abempty [ "?" query ]
https-URI = "https://" authority path-abempty [ "?" query ]

last-chunk = 1*"0" [ chunk-ext ] CRLF

message-body = *OCTET

obs-fold = CRLF ( SP / HTAB )
obs-text = %x80-FF

partial-URI = relative-part [ "?" query ]
path-abempty = <path-abempty, defined in [RFC3986], Section 3.3>
path-absolute = <path-absolute, defined in [RFC3986], Section 3.3>
port = <port, defined in [RFC3986], Section 3.2.3>
product = token [ "/" product-version ]
product-version = token
protocol-name = token
protocol-version = token
pseudonym = token








qdtext = OWS / "!" / %x23-5B ; '#'-'['
    / %x5D-7E ; ']'-'~'
    / obs-text
qdtext-nf = HTAB / SP / "!" / %x23-5B ; '#'-'['
    / %x5D-7E ; ']'-'~'
    / obs-text
query = <query, defined in [RFC3986], Section 3.4>
quoted-cpair = "\" ( HTAB / SP / VCHAR / obs-text )
quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
quoted-str-nf = DQUOTE *( qdtext-nf / quoted-pair ) DQUOTE
quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
qvalue = ( "0" [ "." *3DIGIT ] ) / ( "1" [ "." *3"0" ] )

received-by = ( uri-host [ ":" port ] ) / pseudonym
received-protocol = [ protocol-name "/" ] protocol-version
relative-part = <relative-part, defined in [RFC3986], Section 4.2>
request-target = "*" / absolute-URI / ( path-absolute [ "?" query ] )
    / authority

special = "(" / ")" / "<" / ">" / "@" / "," / ";" / ":" / "\" /
    DQUOTE / "/" / "[" / "]" / "?" / "=" / "{" / "}"
start-line = Request-Line / Status-Line

t-codings = "trailers" / ( transfer-extension [ te-params ] )
tchar = "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "." /
    "^" / "_" / "`" / "|" / "~" / DIGIT / ALPHA
te-ext = OWS ";" OWS token [ "=" word ]
te-params = OWS ";" OWS "q=" qvalue *te-ext
token = 1*tchar
trailer-part = *( header-field CRLF )
transfer-coding = "chunked" / "compress" / "deflate" / "gzip" /
    transfer-extension
transfer-extension = token *( OWS ";" OWS transfer-parameter )
transfer-parameter = attribute BWS "=" BWS value

uri-host = <host, defined in [RFC3986], Section 3.2.2>

value = word

word = token / quoted-string













