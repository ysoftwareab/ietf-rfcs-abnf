



     PPP Extensions Working Group                             Bernard Aboba
     INTERNET-DRAFT                                               Microsoft
     Category: Standards Track                                    Dan Simon
     <draft-ietf-pppext-eaptls-00.txt>                            Microsoft
     13 October 1997


                      PPP EAP TLS Authentication Protocol


     1.  Status of this Memo

     This document is an Internet-Draft.  Internet-Drafts are working docu-
     ments of the Internet Engineering Task Force (IETF),  its  areas,  and
     its  working groups.  Note that other groups may also distribute work-
     ing documents as Internet-Drafts.

     Internet-Drafts are draft documents valid for a maximum of six  months
     and  may  be updated, replaced, or obsoleted by other documents at any
     time.  It is inappropriate to use Internet-Drafts as  reference  mate-
     rial or to cite them other than as ``work in progress.''

     To  learn  the  current status of any Internet-Draft, please check the
     ``1id-abstracts.txt'' listing contained in the Internet-Drafts  Shadow
     Directories   on   ds.internic.net   (US  East  Coast),  nic.nordu.net
     (Europe), ftp.isi.edu (US West Coast), or munnari.oz.au (Pacific Rim).

     The  distribution  of  this memo is unlimited.  It is filed as <draft-
     ietf-pppext-eaptls-00.txt>, and expires March  1,  1998.  Please  send
     comments to the authors.


     2.  Abstract

     The  Point-to-Point  Protocol  (PPP)  provides  a  standard method for
     transporting multi-protocol datagrams over point-to-point links.   PPP
     also  defines  an extensible Link Control Protocol (LCP), which can be
     used to negotiate authentication methods, as  well  as  an  Encryption
     Control  Protocol  (ECP),  used  to negotiate data encryption over PPP
     links, and a Compression Control Protocol  (CCP),  used  to  negotiate
     compression  methods.  The Extensible Authentication Protocol (EAP) is
     a PPP extension that provides support  for  additional  authentication
     methods within PPP.

     Transport  Level  Security  (TLS)  provides for mutual authentication,
     ciphersuite negotiation and key exchange between two endpoints.   This
     document describes how these TLS mechanisms may be used within EAP.


     3.  Introduction

     The  Extensible  Authentication Protocol (EAP), described in [5], pro-
     vides a standard mechanism for support  of  additional  authentication
     methods  within  PPP.  Through the use of EAP, support for a number of



     Aboba & Simon                                                 [Page 1]





     INTERNET-DRAFT                                         13 October 1997


     authentication schemes may be added, including smart cards,  Kerberos,
     Public Key, One Time Passwords, and others. To date however, EAP meth-
     ods such as [6] have focussed on authenticating a client to a  server.

     However,  in order to guard against rogue servers, it may be desirable
     to support mutual authentication. In addition,  since  PPP  encryption
     protocols  such as [10] and [11] assume existence of a session key, it
     is useful to have a mechanism for  session  key  establishment.  Since
     design of authentication and key management protocols is a non-trivial
     exercise, it is desirable to avoid creating new mechanisms  for  this.
     The  EAP protocol described in this document allows a PPP peer to take
     advantage of the mutual authentication and key management capabilities
     of the TLS protocol, described in [15].


     3.1.  Requirements language

     This  specification  uses the same words as [12] for defining the sig-
     nificance of each particular requirement.  These words are:


     MUST      This word, or the adjectives "REQUIRED"  or  "SHALL",  means
               that the definition is an absolute requirement of the speci-
               fication.

     MUST NOT  This phrase, or the phrase "SHALL NOT", means that the defi-
               nition is an absolute prohibition of the specification.

     SHOULD    This  word, or the adjective "RECOMMENDED", means that there
               may exist  valid  reasons  in  particular  circumstances  to
               ignore  a particular item, but the full implications must be
               understood and carefully weighed before choosing a different
               course.

     SHOULD NOT
               This phrase means that there may exist valid reasons in par-
               ticular  circumstances  when  the  particular  behavior   is
               acceptable  or even useful, but the full implications should
               be understood and the case carefully weighed  before  imple-
               menting any behavior described with this label.

     MAY       This  word, or the adjective "", means that an item is truly
               optional.  One vendor may choose to include the item because
               a  particular  marketplace requires it or because the vendor
               feels that it enhances the product while another vendor  may
               omit  the  same  item.   An  implementation  which  does not
               include a particular option MUST be prepared to interoperate
               with  another  implementation which does include the option,
               though perhaps with reduced functionality. In the same  vein
               an  implementation  which  does  include a particular option
               MUST be prepared to interoperate with another implementation
               which  does  not  include the option.(except, of course, for
               the feature the option provides)




     Aboba & Simon                                                 [Page 2]





     INTERNET-DRAFT                                         13 October 1997


     An implementation is not compliant if it fails to satisfy one or  more
     of  the must or must not requirements for the protocols it implements.
     An implementation that satisfies all the must, must  not,  should  and
     should  not requirements for its protocols is said to be "uncondition-
     ally compliant"; one that satisfies all the must and must not require-
     ments but not all the should or should not requirements for its proto-
     cols is said to be "conditionally compliant."


     4.  Protocol overview



     4.1.  Overview of the EAP-TLS conversation

     As described in [5] and [17], the EAP-TLS conversation will  typically
     begin  with  the  authenticator  and  the  peer  negotiating EAP.  The
     authenticator will then typically send an EAP-Request/Identity  packet
     to  the  peer, and the peer will respond with an EAP-Response/Identity
     packet to the authenticator, containing the peer's userId.

     From this point forward, while nominally the EAP  conversation  occurs
     between  the  authenticator  and  the  peer,  as described in [17] the
     authenticator MAY act as a passthrough device, with  the  EAP  packets
     received from the peer being encapsulated for transmission to a RADIUS
     server or backend security server. In the discussion that follows,  we
     will  use  the  term "EAP server" to denote the ultimate endpoint con-
     versing with the peer.

     Once having received the peer's userId, the EAP  server  will  respond
     with an EAP-TLS/Start packet, which is an EAP-Request packet with EAP-
     Type=EAP-TLS, and no data. The EAP-TLS conversation will  then  begin,
     with  the  peer  sending an EAP-Response packet with EAP-Type=EAP-TLS.
     The data field of that packet will encapsulate one or more TLS records
     in  TLS  record  layer format, containing a TLS client_hello handshake
     message.  The  current  cipher  spec  for  the  TLS  records  will  be
     TLS_NULL_WITH_NULL_NULL  and  null  compression.   This current cipher
     spec remains the same until  the  change_cipher_spec  message  signals
     that  subsequent  records  will have the negotiated attributes for the
     remainder of the handshake.

     The client_hello message contains the client's TLS version  number,  a
     sessionId, a random number, and a set of ciphersuites supported by the
     client. The version offered by the client MUST correspond to TLS  v1.0
     or later.

     The  EAP server will then respond with an EAP-Request packet with EAP-
     Type=EAP-TLS. The data field of this packet will  encapsulate  one  or
     more TLS records. These will contain a TLS server_hello handshake mes-
     sage, possibly followed by TLS certificate, server_key_exchange,  cer-
     tificate_request,  server_hello_done  and/or  finished  handshake mes-
     sages, and/or a  TLS  change_cipher_spec  message.   The  server_hello
     handshake  message  contains a TLS version number, another random num-
     ber, a sessionId, and a  ciphersuite.   The  version  offered  by  the



     Aboba & Simon                                                 [Page 3]





     INTERNET-DRAFT                                         13 October 1997


     server MUST correspond to TLS v1.0 or later.

     If  the  client's sessionId is null or unrecognized by the server, the
     server will choose the sessionId to establish a  new  session;  other-
     wise,  the  sessionId  will  match  that  offered by the client, indi-
     cating a resumption of the previously established  session  with  that
     sessionID.   The  server  will  also  choose  a ciphersuite from those
     offered by  the client; if the session matches the client's, then  the
     ciphersuite  MUST match the one negotiated during the handshake proto-
     col execution that established the session.

     The purpose of the sessionId within the TLS protocol is to  allow  for
     improved  efficiency in the case where a client repeatedly attempts to
     authenticate to an EAP server within a short  period  of  time.  While
     this model was developed for use with HTTP authentication, it may also
     have application to PPP authentication (e.g. multilink).

     As a result, it is left up to the peer whether to attempt to  continue
     a  previous  session,  thus shortening the TLS conversation. Typically
     the peer's decision will be made based on the time elapsed  since  the
     previous  authentication attempt to that EAP server. Based on the ses-
     sionId chosen by the peer, and the time  elapsed  since  the  previous
     authentication,  the  EAP server will decide whether to allow the con-
     tinuation, or whether to choose a new session.

     In the case where the EAP server and authenticator reside on the  same
     device,  then  client will only be able to continue sessions when con-
     necting to the same NAS or tunnel server. Should these devices be  set
     up in a rotary or round-robin then it may not be possible for the peer
     to know in advance the authenticator it will  be  connecting  to,  and
     therefore  which  sessionId  to  attempt  to reuse. As a result, it is
     likely that the continuation attempt will fail. In the case where  the
     EAP authentication is remoted then continuation is much more likely to
     be successful, since multiple NAS  devices  and  tunnel  servers  will
     remote their EAP authentications to the same RADIUS server.

     If  the  EAP server is resuming a previously established session, then
     it MUST include only a TLS change_cipher_spec message and a  TLS  fin-
     ished  handshake message after the server_hello message.  The finished
     message contains the EAP server's authentication response to the peer.
     If  the  EAP  server is not resuming a previously established session,
     then it MUST include a TLS server_certificate handshake message, and a
     server_hello_done handshake message MUST be the last handshake message
     encapsulated in this EAP-Request packet.

     The certificate message contains a public key  certificate  chain  for
     either a key exchange public key (such as an RSA or Diffie-Hellman key
     exchange public key) or a signature public key (such as an RSA or  DSS
     signature  public key).  In the latter case, a TLS server_key_exchange
     handshake message MUST also be included to allow the key  exchange  to
     take place.

     The  certificate_request  message  is included when the server desires
     the client to authenticate itself via public key. While the EAP server



     Aboba & Simon                                                 [Page 4]





     INTERNET-DRAFT                                         13 October 1997


     SHOULD require client authentication, this is not a requirement, since
     it may be possible that the server will require that the peer  authen-
     ticate via some other means.

     The  peer  will  then  respond  with  an EAP-Response packet with EAP-
     Type=EAP-TLS.  The data field of this packet will encapsulate  one  or
     more  TLS records containing a TLS change_cipher_spec message and fin-
     ished handshake message, and possibly certificate,  certificate_verify
     and/or  client_key_exchange  handshake  messages.   If  the  preceding
     server_hello message sent by the EAP  server  in  the  preceding  EAP-
     Request  packet  indicated  the resumption of a previous session, then
     the peer MUST send only the change_cipher_spec and finished  handshake
     messages.   The  finished  message  contains the peer's authentication
     response to the EAP server.

     If the preceding server_hello message sent by the EAP  server  in  the
     preceding EAP-Request packet did not indicate the resumption of a pre-
     vious  session,  then  the  peer  MUST  send,  in  addition   to   the
     change_cipher_spec  and  finished messages, a client_key_exchange mes-
     sage, which completes the exchange of a shared master  secret  between
     the  peer  and  the  EAP  server.   If  the EAP server sent a certifi-
     cate_request message in the preceding  EAP-Request  packet,  then  the
     peer  MUST send, in addition, certificate and certificate_verify hand-
     shake messages.  The former contains a certificate for the peer's sig-
     nature public key, while the latter contains the peer's signed authen-
     tication response to the EAP server.

     After receiving this packet, the EAP server  will  verify  the  peer's
     certificate and digital signature, if requested. If the authentication
     is unsuccessful, the EAP server will send an EAP-Request  packet  with
     EAP-Type=EAP-TLS,  encapsulating a TLS record containing the appropri-
     ate TLS alert message.  It is useful for the EAP server to send a  TLS
     alert  message rather than immediately terminating the conversation so
     as to allow the peer to inform the user of the cause  of  the  failure
     and allow them to correct the condition.

     To ensure that the peer receives the TLS alert message, the EAP server
     will wait for the peer to reply with an EAP-Response packet. The  EAP-
     Response  packet  sent  by the peer may encapsulate a TLS client_hello
     handshake message, in which case the EAP server may allow the  EAP-TLS
     conversation to be restarted, or it may contain an EAP-Response packet
     with EAP-Type=EAP-TLS and no data, in which case the  EAP-Server  will
     send  an  EAP-Failure packet, and terminate the conversation. It is up
     to the EAP server whether to allow restarts, and if so, how many times
     the  conversation can be restarted. An EAP Server implementing restart
     capability SHOULD impose a limit on the number of restarts, so  as  to
     protect against denial of service attacks.

     In the case that the authentication is successful, the EAP server will
     respond  with  an  EAP-Request  packet  with  EAP-Type=EAP-TLS,  which
     includes,  in  the  case of a new TLS session, one or more TLS records
     containing TLS change_cipher_spec  and  finished  handshake  messages.
     The  latter  contains  the EAP server's authentication response to the
     peer.  The peer will then verify the hash in order to authenticate the



     Aboba & Simon                                                 [Page 5]





     INTERNET-DRAFT                                         13 October 1997


     EAP server.

     If  EAP  server authentication is unsuccessful, the peer sends an EAP-
     Response packet of EAP-Type=EAP-TLS containing  a  TLS  Alert  message
     identifying the reason for the failed authentication. It is useful for
     the peer to send a TLS alert message rather than immediately terminat-
     ing the conversation so as to allow the EAP server to log the cause of
     the error for examination by the system administrator.

     To ensure that the EAP Server receives the TLS alert message, the peer
     will  wait for the EAP-Server to reply with an EAP-Request packet. The
     EAP-Request packet sent by the EAP server will be of  EAP-Type=EAP-TLS
     and will contain no data, and the peers will respond with an EAP-Fail-
     ure packet and terminate the conversation.


     4.2.  Retry behavior

     As with other EAP protocols, the EAP server is responsible  for  retry
     behavior.  This  means that if the EAP server does not receive a reply
     from the peer, it will resend the EAP-Request for which it has not yet
     received  an  EAP-Response.  However,  the  peer  will not resend EAP-
     Response packets without first being prompted by the EAP server.

     For example, if the initial EAP-TLS  start  packet  sent  by  the  EAP
     server  were  to be lost, then the peer would not receive this packet,
     and would not respond to it. As a result,  the  EAP-TLS  start  packet
     would  be resent by the EAP server. Once the peer received the EAP-TLS
     start packet, it would respond with an EAP-Response encapsulating  the
     client_hello  message.  If  the EAP-Response were to be lost, then the
     EAP server would resend the initial EAP-TLS start, and the peer  would
     resend the EAP-Response.

     As  a  result,  it is possible that a peer will receive duplicate EAP-
     Request messages, and may send duplicate EAP-Responses. Both the  peer
     and the EAP-Server should be engineered to handle this possibility.


     4.3.  Identity verification

     As  part  of the TLS negotiation, the server presents a certificate to
     the peer, and if mutual authentication is requested, the peer presents
     a certificate to the server.

     Note  that  since  the  peer  has made a claim of identity in the EAP-
     Response/Identity (MyID) packet, the EAP server SHOULD verify that the
     claimed identity corresponds to the certificate presented by the peer.
     Typically this will be  accomplished  either  by  placing  the  userId
     within  the  peer  certificate,  or by providing a mapping between the
     peer certificate and the userId using a directory service.

     Similarly, the peer MUST verify the validity of the  EAP  server  cer-
     tificate, and SHOULD also examine the EAP server name presented in the
     certificate, in order to determine  whether  the  EAP  server  can  be



     Aboba & Simon                                                 [Page 6]





     INTERNET-DRAFT                                         13 October 1997


     trusted.  Please note that in the case where the EAP authentication is
     remoted that the EAP server will not reside on the same machine as the
     authenticator,  and therefore the name in the EAP server's certificate
     cannot be expected to match that of the intended destination. In  this
     case,  a  more appropriate test might be whether the EAP server's cer-
     tificate is signed by a CA controlling the  intended  destination  and
     whether the EAP server exists within a target sub-domain.


     4.4.  Key derivation

     Since  the  normal  TLS  keys are used in the handshake, and therefore
     should not be used in a different context, new encryption keys must be
     derived  from  the TLS master secret for use with PPP encryption.  For
     both peer and EAP server, the derivation proceeds as  follows:   given
     the  master  secret  negotiated by the TLS handshake, the pseudorandom
     function (PRF) defined in the specification for the version of TLS  in
     use,  and  the  value random defined as the concatenation of the hand-
     shake message fields client_hello.random and  server_hello.random  (in
     that  order),  the  value  PRF(master secret, "client EAP encryption",
     random) is computed up to 128 bytes, and the value PRF("", "client EAP
     encryption",  random) is computed up to 64 bytes (where "" is an empty
     string).  The peer encryption key (the one used  for  encrypting  data
     from  peer  to  EAP  server)  is obtained by truncating to the correct
     length the first 32 bytes  of  the  first  PRF  of  these  two  output
     strings.   The  EAP server encryption key (the one used for encrypting
     data from EAP server to peer), if different from the client encryption
     key,  is  obtained  by  truncating to the correct length the second 32
     bytes of this same PRF output string.  The client  authentication  key
     (the  one  used  for  computing  MACs  for  messages  from peer to EAP
     server), if used, is obtained by truncating to the correct length  the
     third 32 bytes of this same PRF output string.  The EAP server authen-
     tication key (the one used for computing MACs for  messages  from  EAP
     server  to  peer), if used, and if different from the peer authentica-
     tion key, is obtained by truncating to the correct length  the  fourth
     32 bytes of this same PRF output string.  The peer initialization vec-
     tor (IV), used for messages from peer to EAP server if a block  cipher
     has  been  specified,  is obtained by truncating to the cipher's block
     size the first 32 bytes of the  second  PRF  output  string  mentioned
     above.   Finally, the server initialization vector (IV), used for mes-
     sages from peer to EAP server if a block cipher has been specified, is
     obtained  by truncating to the cipher's block size the second 32 bytes
     of this second PRF output.

     The use of these encryption and authentication keys is specific to the
     PPP encryption mechanism used, such as those defined in [10] and [11].
     Additional keys or other  non-secret  values  (such  as  IVs)  can  be
     obtained  as needed for future PPP encryption methods by extending the
     outputs of the PRF beyond 128 bytes and 64 bytes, respectively.








     Aboba & Simon                                                 [Page 7]





     INTERNET-DRAFT                                         13 October 1997


     4.5.  ECP negotiation

     Since TLS supports ciphersuite negotiation, peers completing  the  TLS
     negotiation  will also have selected a ciphersuite, which includes key
     strength, encryption and hashing methods. As a  result,  a  subsequent
     Encryption  Control  Protocol  (ECP) conversation, if it occurs, has a
     predetermined result.

     In order to ensure agreement between the EAP-TLS ciphersuite  negotia-
     tion and the subsequent ECP negotiation (described in [7]), during ECP
     negotiation the PPP peer MUST offer only the ciphersuite negotiated in
     EAP-TLS.  This ensures that the PPP authenticator MUST accept the EAP-
     TLS negotiated ciphersuite in order for the conversation  to  proceed.
     Should  the  authenticator  not  accept the EAP-TLS negotiated cipher-
     suite, then the peer MUST send an LCP terminate and disconnect.

     Please note that as described in [17], it cannot be assumed  that  the
     PPP  authenticator  and  EAP server are located on the same machine or
     that the authenticator understands the EAP-TLS conversation  that  has
     passed  through  it.  Thus if the peer offers a ciphersuite other than
     the one negotiated in EAP-TLS there is no way for the authenticator to
     know how to respond correctly.


     4.6.  CCP negotiation

     TLS  as  described in [15] supports compression as well as ciphersuite
     negotiation. However, TLS only provides support for a  limited  number
     of  compression  types which do not overlap with the compression types
     used in PPP. As a result, during the EAP-TLS conversation the EAP end-
     points  MUST  NOT  request  or negotiate compression. Instead, the PPP
     Compression Control Protocol (CCP), described in [16] should  be  used
     to negotiate the desired compression scheme.


     4.7.  Examples

     In the case where the EAP-TLS mutual authentication is successful, the
     conversation will appear as follows:

     Authenticating Peer     Authenticator
     -------------------     -------------

                             <- PPP LCP Request-EAP
                             auth
     PPP LCP ACK-EAP
     auth ->
                             <- PPP EAP-Request/
                             Identity
     PPP EAP-Response/
     Identity (MyID) ->
                             <- PPP EAP-Request/
                             EAP-Type=EAP-TLS
                             (TLS Start)



     Aboba & Simon                                                 [Page 8]





     INTERNET-DRAFT                                         13 October 1997


     PPP EAP-Response/
     EAP-Type=EAP-TLS
     (TLS client_hello)->
                             <- PPP EAP-Request/
                             EAP-Type=EAP-TLS
                             (TLS server_hello,
                              TLS certificate,
                         [TLS server_key_exchange,]
                         [TLS certificate_request,]
                          TLS server_hello_done)
     PPP EAP-Response/
     EAP-Type=EAP-TLS
     (TLS certificate,
      TLS client_key_exchange,
     [TLS certificate_verify,]
      TLS change_cipher_spec,
      TLS finished) ->
                             <- PPP EAP-Request/
                             EAP-Type=EAP-TLS
                             (TLS change_cipher_spec,
                          TLS finished)
     PPP EAP-Success->
                             <- PPP EAP-Success

     PPP Authentication
     Phase complete,
     NCP Phase starts

     ECP negotiation

     CCP negotiation

     In the case where the server authenticates to the client successfully,
     but  the  client fails to authenticate to the server, the conversation
     will appear as follows:

     Authenticating Peer     Authenticator
     -------------------     -------------
                             <- PPP LCP Request-EAP
                             auth
     PPP LCP ACK-EAP
     auth ->
                             <- PPP EAP-Request/
                             Identity
     PPP EAP-Response/
     Identity (MyID) ->
                             <- PPP EAP-Request/
                             EAP-Type=EAP-TLS
                             (TLS Start)
     PPP EAP-Response/
     EAP-Type=EAP-TLS
     (TLS client_hello)->
                             <- PPP EAP-Request/
                             EAP-Type=EAP-TLS



     Aboba & Simon                                                 [Page 9]





     INTERNET-DRAFT                                         13 October 1997


                             (TLS server_hello,
                              TLS certificate,
                         [TLS server_key_exchange,]
                          TLS certificate_request,
                          TLS server_hello_done)
     PPP EAP-Response/
     EAP-Type=EAP-TLS
     (TLS certificate,
      TLS client_key_exchange,
      TLS certificate_verify,
      TLS change_cipher_spec,
      TLS finished) ->
                             <- PPP EAP-Request
                             EAP-Type=EAP-TLS
                             (TLS Alert message)
     PPP EAP-Response/
     EAP-Type=EAP-TLS ->
                             <- PPP EAP-Failure
                             (User Disconnected)

     In the case where server authentication is unsuccessful, the conversa-
     tion will appear as follows:

     Authenticating Peer     Authenticator
     -------------------     -------------
                             <- PPP LCP Request-EAP
                             auth
     PPP LCP ACK-EAP
     auth ->
                             <- PPP EAP-Request/
                             Identity
     PPP EAP-Response/
     Identity (MyID) ->
                             <- PPP EAP-Request/
                             EAP-Type=EAP-TLS
                             (TLS Start)
     PPP EAP-Response/
     EAP-Type=EAP-TLS
      (TLS client_hello)->
                             <- PPP EAP-Request/
                             EAP-Type=EAP-TLS
                             (TLS server_hello,
                              TLS certificate,
                         [TLS server_key_exchange,]
                         [TLS certificate_request,]
                          TLS server_hello_done)
     PPP EAP-Response/
     EAP-Type=EAP-TLS
      (TLS certificate,
      TLS client_key_exchange,
     [TLS certificate_verify,]
      TLS change_cipher_spec,
      TLS finished) ->
                             <- PPP EAP-Request/



     Aboba & Simon                                                [Page 10]





     INTERNET-DRAFT                                         13 October 1997


                             EAP-Type=EAP-TLS
                             (TLS change_cipher_spec,
                              TLS finished)
     PPP EAP-Response/
     EAP-Type=EAP-TLS
     (TLS Alert message) ->

                             <- PPP EAP-Request
                             EAP-Type=EAP-TLS
     PPP EAP-Failure ->

     PPP LCP Terminate ->
     (User Disconnected)

     In  the  case where a previously established session is being resumed,
     and both sides authenticate successfully, the conversation will appear
     as follows:

     Authenticating Peer     Authenticator
     -------------------     -------------
                             <- PPP LCP Request-EAP
                             auth
     PPP LCP ACK-EAP
     auth ->
                             <- PPP EAP-Request/
                             Identity
     PPP EAP-Response/
     Identity (MyID) ->
                             <- PPP EAP-Request/
                             EAP-Request/
                             EAP-Type=EAP-TLS
                             (TLS Start)
     PPP EAP-Response/
     EAP-Type=EAP-TLS
     (TLS client_hello)->
                             <- PPP EAP-Request/
                             EAP-Type=EAP-TLS
                             (TLS server_hello,
                              TLS change_cipher_spec,
                          TLS finished)
     PPP EAP-Response/
     EAP-Type=EAP-TLS
     (TLS change_cipher_spec,
      TLS finished) ->
                             <- PPP EAP-Success

     PPP Authentication
     Phase complete,
     NCP Phase starts

     ECP negotiation

     CCP negotiation




     Aboba & Simon                                                [Page 11]





     INTERNET-DRAFT                                         13 October 1997


     In  the  case where a previously established session is being resumed,
     and the server authenticates to the client successfully but the client
     fails  to  authenticate to the server, the conversation will appear as
     follows:

     Authenticating Peer     Authenticator
     -------------------     -------------
                             <- PPP LCP Request-EAP
                             auth
     PPP LCP ACK-EAP
     auth ->
                             <- PPP EAP-Request/
                             Identity
     PPP EAP-Response/
     Identity (MyID) ->
                             <- PPP EAP-Request/
                             EAP-Request/
                             EAP-Type=EAP-TLS
                             (TLS Start)
     PPP EAP-Response/
     EAP-Type=EAP-TLS
     (TLS client_hello) ->
                             <- PPP EAP-Request/
                             EAP-Type=EAP-TLS
                             (TLS server_hello,
                              TLS change_cipher_spec,
                          TLS finished)
     PPP EAP-Response/
     EAP-Type=EAP-TLS
     (TLS change_cipher_spec,
      TLS finished) ->
                             <- PPP EAP-Request
                             EAP-Type=EAP-TLS
                             (TLS Alert message)
     PPP EAP-Response
     EAP-Type=EAP-TLS ->
                              <- PPP EAP-Failure
                              (User Disconnected)

     In the case where a previously established session is  being  resumed,
     and  the  server authentication is unsuccessful, the conversation will
     appear as follows:

     Authenticating Peer     Authenticator
     -------------------     -------------
                             <- PPP LCP Request-EAP
                             auth
     PPP LCP ACK-EAP
     auth ->
                             <- PPP EAP-Request/
                             Identity
     PPP EAP-Response/
     Identity (MyID) ->
                             <- PPP EAP-Request/



     Aboba & Simon                                                [Page 12]





     INTERNET-DRAFT                                         13 October 1997


                             EAP-Request/
                             EAP-Type=EAP-TLS
                             (TLS Start)
     PPP EAP-Response/
     EAP-Type=EAP-TLS
     (TLS client_hello)->
                             <- PPP EAP-Request/
                             EAP-Type=EAP-TLS
                             (TLS server_hello,
                              TLS change_cipher_spec,
                          TLS finished)
     PPP EAP-Response/
     EAP-Type=EAP-TLS
     (TLS Alert message) ->

                             <- PPP EAP-Request
                             EAP-Type=EAP-TLS
     PPP EAP-Failure ->

     PPP LCP Terminate ->
     (User Disconnected)


     5.  Detailed description of the EAP-TLS protocol


     5.1.  PPP EAP TLS Packet Format

     A summary of the PPP EAP TLS Request/Response packet format  is  shown
     below.  The fields are transmitted from left to right.

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |     Code      |   Identifier  |            Length             |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |     Type      |     Data ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

     Code

        1 - Request
        2 - Response

     Identifier

        The  identifier  field  is one octet and aids in matching responses
        with requests.

     Length

        The Length field is two octets and indicates the length of the  EAP
        packet  including  the  Code,  Identifier,  Length,  Type, and Data
        fields.  Octets outside the range of the  Length  field  should  be



     Aboba & Simon                                                [Page 13]





     INTERNET-DRAFT                                         13 October 1997


        treated  as Data Link Layer padding and should be ignored on recep-
        tion.

     Type

        ? - EAP TLS

     Data

        The format of the Data field is determined by the Code field.



     5.2.  PPP EAP TLS Request Packet

     A summary of the PPP EAP TLS Request packet  format  is  shown  below.
     The fields are transmitted from left to right.

     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |     Code      |   Identifier  |            Length             |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |     Type      |   TLS data...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

     Code

        1

     Identifier

        The  identifier  field  is one octet and aids in matching responses
        with requests.  The  identifier  field  MUST  be  changed  on  each
        Request packet.

     Length

        The  Length field is two octets and indicates the length of the EAP
        packet including  the  Code,  Identifier,  Length,  Type,  and  TLS
        Response fields.

     Type

        ? - EAP TLS

     TLS data

        The  TLS data consists of the encapsulated TLS packet in TLS record
        format.







     Aboba & Simon                                                [Page 14]





     INTERNET-DRAFT                                         13 October 1997


     5.3.  PPP EAP TLS Response Packet

     A summary of the PPP EAP TLS Response packet format  is  shown  below.
     The fields are transmitted from left to right.

     0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |     Code      |   Identifier  |            Length             |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |     Type      | TLS Data...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

     Code

        2

     Identifier

        The  identifier  field  is  one octet and MUST match the Identifier
        field from the corresponding request.

     Length

        The Length field is two octets and indicates the length of the  EAP
        packet  including  the Code, Identifier, Length, Type, and TLS data
        fields.

     Type

        ? - EAP TLS

     TLS data

        The TLS data consists of the encapsulated TLS packet in TLS  record
        format.


     6.  Security issues


     6.1.  Certificate revocation

     Since  the  EAP server is on the Internet during the EAP conversation,
     the EAP server is capable of following a certificate chain or  verify-
     ing  whether the peer's certificate has been revoked. In contrast, the
     peer may or may not have Internet connectivity, and thus while it  can
     validate the EAP server's certificate based on a pre-configured set of
     CAs, it may not be able  to  follow  a  certificate  chain  or  verify
     whether the EAP server's certificate has been revoked.

     In  the  case  where the peer is initiating a voluntary Layer 2 tunnel
     using PPTP or L2TP, the peer will typically already have a PPP  inter-
     face  and  Internet  connectivity  established  at  the time of tunnel



     Aboba & Simon                                                [Page 15]





     INTERNET-DRAFT                                         13 October 1997


     initiation. As a result, during the EAP conversation it is capable  of
     checking for certificate revocation.

     However,  in  the case where the peer is initiating an intial PPP con-
     versation, it will not have Internet connectivity and is therefore not
     capable of checking for certificate revocation until after NCP negoti-
     ation completes and the peer has access to the Internet. In this case,
     the  peer  SHOULD check for certificate revocation after connecting to
     the Internet.


     6.2.  Separation of the EAP server and PPP authenticator

     As a result of the EAP-TLS conversation, the EAP endpoints will  mutu-
     ally  authenticate,  negotiate a ciphersuite, and derive a session key
     for subsequent use in PPP encryption. Since the peer  and  EAP  client
     reside  on the same machine, it is necessary for the EAP client module
     to pass the session key to the PPP encryption module.

     The situation may be more complex on the PPP authenticator.  As  noted
     in  [17],  the  PPP  authenticator  may  or may not reside on the same
     machine as the EAP server. For example, when RADIUS/EAP is  used,  the
     EAP  server  may be a backend security server, or a module residing on
     the RADIUS server.

     In the case where the EAP server and PPP authenticator reside on  dif-
     ferent machines, there are several implications for security. Firstly,
     the mutual authentication defined in EAP-TLS will  occur  between  the
     peer  and  the EAP server, not between the peer and the authenticator.
     This means that as a result of the EAP-TLS  conversation,  it  is  not
     possible  for  the  peer to validate the identity of the NAS or tunnel
     server that it is speaking to.

     As described in [17], when EAP/RADIUS is used to encapsulate EAP pack-
     ets, the Signature attribute is required in EAP/RADIUS Access-Requests
     sent from the NAS or tunnel server to the  RADIUS  server.  Since  the
     Signature  attribute involves a keyed-MD5 hash, it is possible for the
     RADIUS server to verify the integrity of the Access-Request as well as
     the NAS or tunnel server's identity. Similarly, Access-Challenge pack-
     ets sent from the RADIUS server to the NAS are also authenticated  and
     integrity protected using a keyed-MD5 hash, enabling the NAS or tunnel
     server to determine the integrity of the packet and verify  the  iden-
     tity  of  the  RADIUS server. Moreover, EAP-TLS packets in transit are
     integrity protected and authenticated end-to-end via  TLS  mechanisms,
     so  that they cannot be successfully modified by a rogue NAS or tunnel
     server.

     The second issue that arises in the case of  an  EAP  server  and  PPP
     authenticator  residing  on different machines is that the session key
     negotiated between the peer and EAP server will need to be transmitted
     to  the  authenticator.  Therefore a mechanism needs to be provided to
     transmit the session key from the EAP server to the  authenticator  or
     tunnel  server  that  needs  to use the key. The specification of this
     transit mechanism is outside the scope of this document.



     Aboba & Simon                                                [Page 16]





     INTERNET-DRAFT                                         13 October 1997


     6.3.  Relationship of PPP encryption to other security mechanisms

     PPP encryption currently plays an important role in  the  securing  of
     Layer 2 tunneling protocols such as PPTP, described in [13], and L2TP,
     described in [14]. While it may be envisaged that security  mechanisms
     such  as  IPSEC  will  eventually become ubiquitous, it will take some
     time for vendors to add IPSEC capabilities to their  devices,  and  in
     any  case  legacy  authenticator devices or routers may not be able to
     support IPSEC without being upgraded.  As a result, it is likely  that
     non-IPSEC  capable  devices  will  persist in operational networks for
     quite some time.

     In an environment where IPSEC is not ubiquitous, in Layer 2  tunneling
     protocols a role remains for PPP encryption. Since with mandatory tun-
     neling a PPP peer cannot tell whether its packets are being  tunneled,
     let  alone  whether the authenticator is securing the tunnel, if secu-
     rity is required then the client must make its  own  arrangements.  In
     the case where all endpoints cannot be relied upon to implement IPSEC,
     TLS, or another suitable security protocol, then PPP  encryption  pro-
     vides  a  very convenient means to ensure the privacy of packets tran-
     siting between the client and the tunnel server.

     There also may be circumstances in which PPP encryption may be  desir-
     able  even if IPSEC is available. Routers implementing Network Address
     Translation (NAT) are now growing rapidly in popularity.  Where NAT is
     turned on, IPSEC cannot be used to secure the outer layer of a client-
     initiated layer 2 tunnel, since the  address  translated  packet  will
     then  fail the authentication check. By contrast, Layer 2 tunnels uti-
     lizing PPP encryption may pass unimpeded through a NAT.


     7.  Copyright notice

     Copyright (C) The Internet Society, 1997. All Rights Reserved.

     This document and translations of it may be copied  and  furnished  to
     others,  and  derivative works that comment on or otherwise explain it
     or assist in its implmentation may be prepared, copied, published  and
     distributed,  in  whole  or  in part, without restriction of any kind,
     provided that the  above  copyright  notice  and  this  paragraph  are
     included on all such copies and derivative works.  However, this docu-
     ment itself may not be modified in any way, such as  by  removing  the
     copyright notice or references to the Internet Society or other Inter-
     net organizations, except as needed for  the   purpose  of  developing
     Internet standards in which case the procedures for copyrights defined
     in the Internet Standards process must be followed, or as required  to
     translate it into languages other than English.

     The  limited  permissions  granted above are perpetual and will not be
     revoked by the Internet Society or its successors or assigns.

     This document and the information contained herein is provided  on  an
     "AS  IS"  basis  and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
     TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT



     Aboba & Simon                                                [Page 17]





     INTERNET-DRAFT                                         13 October 1997


     NOT  LIMITED  TO  ANY  WARRANTY THAT THE USE OF THE INFORMATION HEREIN
     WILL NOT INFRINGE  ANY  RIGHTS  OR  ANY  IMPLIED  WARRANTIES  OF  MER-
     CHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


     8.  Acknowledgments

     Thanks  to  Terence Spies, Glen Zorn and Narendra Gidwani of Microsoft
     for useful discussions of this problem space.


     9.  References

     [1] Simpson, W., Editor, "The Point-to-Point Protocol (PPP)." STD  51,
     RFC 1661, Daydreamer, July 1994.

     [2]  Sklower, K., Lloyd, B., McGregor, G., Carr, D., and T. Coradetti,
     "The PPP Multilink Protocol (MP)." RFC 1990, UC Berkeley, August 1996.

     [3]  Simpson,  W., Editor, "PPP LCP Extensions." RFC 1570, Daydreamer,
     January 1994.

     [4] R. Rivest, S. Dusse.  "The  MD5  Message-Digest  Algorithm."   RFC
     1321,  MIT  Laboratory  for  Computer Science, RSA Data Security Inc.,
     April 1992.

     [5] L. J. Blunk, J. R.  Vollbrecht.   "PPP  Extensible  Authentication
     Protocol  (EAP)." Work in progress, draft-ietf-pppext-eap-auth-02.txt,
     Merit Network, Inc., June 1996.

     [6] W. T. Whelan, "PPP EAP RSA Public  Key  Authentication  Protocol."
     Work  in progress, draft-ietf-pppext-eaprsa-04.txt, Cabletron Systems,
     February 1997.

     [7] Meyer, G., "The PPP Encryption Protocol (ECP)." RFC  1968,  Spider
     Systems. June 1996

     [8] National Bureau of Standards, "Data Encryption Standard." FIPS PUB
     46 (January 1977).

     [9] National Bureau of Standards, "DES Modes of Operation."  FIPS  PUB
     81 (December 1980).

     [10]  K. Sklower, G. Meyer.  "The PPP DES Encryption Protocol, Version
     2  (DESE-bis)"  Work   in   progress,   draft-ietf-pppext-des-encrypt-
     v2-00.txt, University of California, Berkeley, Shiva, July 1997.

     [11]  K.  Hummert.   "The  PPP Triple-DES Encryption Protocol (3DESE)"
     Work in progress, draft-ietf-pppext-3des-encrypt-00.txt, Nentec  GmbH,
     July 1997.

     [12]  S.  Bradner.  "Key words for use in RFCs to Indicate Requirement
     Levels."  RFC 2119, Harvard University, March 1997.




     Aboba & Simon                                                [Page 18]





     INTERNET-DRAFT                                         13 October 1997


     [13] K. Hamzeh, G. S. Pall, J. Taarud,  W.  Verthein,  W.  A.  Little.
     "Point-to-Point  Tunneling  Protocol -- PPTP." Internet draft (work in
     progress),   draft-ietf-pppext-pptp-02.txt,   Ascend   Communications,
     Microsoft, Copper Mountain Networks, U.S. Robotics, July 1997.

     [14]  K.  Hamzeh,  T.  Kolar, M. Littlewood, G. S. Pall, B. Palter, J.
     Taarud, W. M. Townsley, A. Valencia, W. Verthein.  "Layer Two  Tunnel-
     ing  Protocol  L2TP."  Internet  draft  (work in progress) draft-ietf-
     pppext-l2tp-06.txt, Ascend Communications, Cisco  Systems,  Microsoft,
     Copper Mountain Networks, IBM, U.S. Robotics, August 1997.

     [15]  T.  Dierks,  C. Allen.  "The TLS Protocol Version 1.0." Internet
     draft (work  in  progress)  draft-ietf-tls-protocol-03.txt,  Consensus
     Development, May 1997.

     [16]  D. Rand.  "The PPP Compression Control Protocol." RFC 1962, Nov-
     ell, June 1996.

     [17] P. Calhoun, A.C. Rubens, B.  Aboba.   "Extensible  Authentication
     Protocol Support in RADIUS." Internet draft (work in progress), draft-
     ietf-radius-eap-02.txt,  US  Robotics  Access  Corp.,  Merit  Network,
     Microsoft, May, 1997.


     10.  Authors' Addresses

     Bernard Aboba
     Microsoft Corporation
     One Microsoft Way
     Redmond, WA 98052

     Phone: 425-936-6605
     EMail: bernarda@microsoft.com

     Dan Simon
     Microsoft Corporation
     One Microsoft Way
     Redmond, WA 98052

     Phone: 425-936-6711
     EMail: dansimon@microsoft.com
















     Aboba & Simon                                                [Page 19]


