v=0
o=- 13103070023943130 1 IN IP6 2001:db8::177
c=IN IP6 2001:db8::177
t=0 0
m=audio 54242 RTP/AVP 0
a=sendrecv

   An intermediary could reply:
   SIP/2.0 608 Rejected
   Via: SIP/2.0/UDP [2001:db8::177:60012;branch=z9hG4bK-524287-1
   From: "Alice" <sip:+12155550112@tel.two.example.net>;tag=614bdb40
   To: <sip:+12155550113@tel.one.example.net>
   Call-ID: 79048YzkxNDA5NTI1MzA0OWFjOTFkMmFlODhiNTI2OWQ1ZTI
   CSeq: 2 INVITE
   Call-Info: <https://block.example.net/complaint.json>;purpose=jwscard

   The location https://block.example.net/complaint.json resolves to a
   JWS.  One would construct the JWS would as follows.

   The JWS header of this example jCard could be:

   { {"alg":"ES256"},
     {"typ":"vcard+json"},
     {"x5u":"https://certs.example.net/reject_key.cer"} }


   Now, let us construct a minimal jCard.  For this example, the jCard
   refers the caller to an email address, bitbucket@blocker.example.net:

   ["vcard",
     [
       ["version", {}, "text", "4.0"],
       ["fn", {}, "text", "Robocall Adjudication"],
       ["email", {"type":"work"},
                 "text", "bitbucket@blocker.example.net"]
     ]
   ]


   With this jCard, we can now construct the JWT:

   {
     "iat":1546008698,
     "jcard":["vcard",
       [
         ["version", {}, "text", "4.0"],
         ["fn", {}, "text", "Robocall Adjudication"],
         ["email", {"type":"work"},
                   "text", "bitbucket@blocker.example.net"]
       ]
     ]
   }


   To calculate the signature, we need to encode the JSON Object Signing
   and Encryption (JOSE) header and JWT into base64url.  As an
   implementation note, one can trim whitespace in the JSON objects to
   save a few bytes.  UACs MUST be prepared to receive pretty-printed,
   compact, or bizarrely formatted JSON.  For the purposes of this
   example, we leave the objects with pretty whitespace.  Speaking of
   pretty vs. machine formatting, these examples have line breaks in the
   base64url encodings for ease of publication in the RFC format.  The
   specification of base64url allows for these line breaks and the
   decoded text works just fine.  However, those extra line break octets
   would affect the calculation of the signature.  As such,
   implementations MUST NOT insert line breaks into the base64url
   encodings of the JOSE header or JWT.  This also means UACs MUST be
   prepared to receive arbitrarily long octet streams from the URI
   referenced by the Call-Info SIP header.

   base64url of JOSE header:
   eyB7ImFsZyI6IkVTMjU2In0sCiAgeyJ0eXAiOiJ2Y2FyZCtqc29uIn0sCiAgeyJ4
   NXUiOiJodHRwczovL2NlcnRzLmV4YW1wbGUubmV0L3JlamVjdF9rZXkuY2VyIn0g
fQo=

fQo=
fQo=.ewogICJpYXQiOjE1NDYwMDg2OTgsCiAgImpjYXJkIjpbInZjYXJkIiwKICA
