AuthenticationCode = passwordLength || ID || password || checksum

AuthenticationData = AuthenticationCode->ID || B64(Digest)

Digest = DSKPP-PRF-AES(K_AUTH, AuthCode->ID || serverURL || R_S,
Digest = DSKPP-PRF-AES(K_AUTH, AuthenticationCode->ID ||
K_AUTH = truncate( Hash( Hash(...n times...( AuthCode->password )
dsLen = (desired length of K_TOKEN)

K_TOKEN = DSKPP-PRF (R_C, "Key generation" || k || R_S, dsLen)

dsLen = len(R_C)

DS = DSKPP-PRF(K_SHARED, "Encryption" || R_S, dsLen)

Enc-R_C = DS ^ R_C

dsLen = len(R_S)

MAC = DSKPP-PRF (K_AUTH, "MAC 1 computation" || [R ||] R_S, dsLen)

dsLen = len(R_C)

MAC = DSKPP-PRF (K_AUTH, "MAC 2 computation" || R_C, dsLen)

dsLen = len(R)
MAC = DSKPP-PRF (K_MAC, "MAC 1 computation" || ID_S || R, dsLen)

MAC = DSKPP-PRF (K_MAC', "MAC 1 computation" || ID_S || R, dsLen)

MAC = DSKPP-PRF (K_MAC, "MAC 1 computation" || ID_S || I, dsLen)

MAC = DSKPP-PRF (K_MAC', "MAC 1 computation" || ID_S || I', dsLen)

minOccurs="0"/>
type="xs:anyURI"/>
type="dskpp:KeyContainerFormatType"/>
minOccurs="0"/>
type="dskpp:AuthenticationCodeType"/>
type="dskpp:AuthenticationCodeDigestType"/>
type="dskpp:AuthenticationCodeMacType"/>
type="ds:KeyInfoType"/>
use="required"/>
use="required"/>
type="pskc:KeyContainerType"/>
type="dskpp:DeviceIdentifierDataType" minOccurs="0"/>
type="dskpp:TokenPlatformInfoType" minOccurs="0"/>
minOccurs="0"/>
type="dskpp:InitializationTriggerType"/>
type="dskpp:DeviceIdentifierDataType" minOccurs="0"/>
minOccurs="0"/>
minOccurs="0"/>
minOccurs="0"/>
type="dskpp:AlgorithmsType"/>
type="dskpp:AlgorithmsType"/>
type="dskpp:AlgorithmsType"/>
type="dskpp:ProtocolVariantsType" minOccurs="0"/>
type="dskpp:KeyContainersFormatType" minOccurs="0"/>
type="dskpp:AuthenticationDataType" minOccurs="0"/>
minOccurs="0"/>
type="dskpp:AlgorithmType"/>
type="dskpp:AlgorithmType"/>
type="dskpp:AlgorithmType"/>
type="ds:KeyInfoType"/>
type="dskpp:KeyContainerFormatType"/>
type="dskpp:PayloadType"/>
type="dskpp:ExtensionsType" minOccurs="0"/>
minOccurs="0"/>
type="xs:base64Binary"/>
type="dskpp:AuthenticationDataType" minOccurs="0"/>
type="dskpp:ExtensionsType" minOccurs="0"/>
use="required"/>
type="dskpp:KeyContainerType"/>
type="dskpp:ExtensionsType" minOccurs="0"/>
type="dskpp:MacType"/>
type="xs:base64Binary"/>
type="xs:base64Binary"/>
name="Payload" type="xs:anyType"/>, any well-formed payloads can
targetNamespace="urn:ietf:params:xml:ns:keyprov:protocol"
schemaLocation="http://www.w3.org/TR/2002/
minOccurs="0"/>
type="xs:anyURI"/>
type="dskpp:KeyContainerFormatType"/>
minOccurs="0"/>
type="dskpp:AuthenticationCodeType"/>
type="dskpp:AuthenticationCodeDigestType"/>
type="dskpp:AuthenticationCodeMacType"/>
type="ds:KeyInfoType"/>
use="required"/>
use="required"/>
type="pskc:KeyContainerType"/>
type="dskpp:DeviceIdentifierDataType" minOccurs="0"/>
type="dskpp:TokenPlatformInfoType" minOccurs="0"/>
minOccurs="0"/>
type="xs:base64Binary"/>
type="xs:base64Binary"/>
type="dskpp:InitializationTriggerType"/>
type="dskpp:DeviceIdentifierDataType" minOccurs="0"/>
minOccurs="0"/>
minOccurs="0"/>
minOccurs="0"/>
type="dskpp:AlgorithmsType"/>
type="dskpp:AlgorithmsType"/>
type="dskpp:AlgorithmsType"/>
type="dskpp:ProtocolVariantsType" minOccurs="0"/>
type="dskpp:KeyContainersFormatType" minOccurs="0"/>
type="dskpp:AuthenticationDataType" minOccurs="0"/>
minOccurs="0"/>
type="dskpp:AlgorithmType"/>
type="dskpp:AlgorithmType"/>
type="dskpp:AlgorithmType"/>
type="ds:KeyInfoType"/>
type="dskpp:KeyContainerFormatType"/>
type="dskpp:PayloadType"/>
type="dskpp:ExtensionsType" minOccurs="0"/>
minOccurs="0"/>
type="xs:base64Binary"/>
type="dskpp:AuthenticationDataType" minOccurs="0"/>
type="dskpp:ExtensionsType" minOccurs="0"/>
use="required"/>
type="dskpp:KeyContainerType"/>
type="dskpp:ExtensionsType" minOccurs="0"/>
type="dskpp:MacType"/>
SecretId="XL0000000001234">
algorithm="http://www.w3.org/2001/05/xmlenc#rsa_1_5">
miidfasde312asder394jw==
algorithm="http://www.w3.org/2001/05/xmlenc#kw-aes128">
miidfasde312asder394jw==
miidfasde312asder394jw==
bLen = (AES output block length in octets)
n = ROUND( dsLen / bLen)
j = dsLen - (n - 1) * bLen
B1 = F (k, s, 1) ,
B2 = F (k, s, 2) ,
Bn = F (k, s, n)
DS = B1 || B2 || ... || Bn<0..j-1>

n = 16 / 16 = 1

j = 16 - (1 - 1) * 16 = 16

DS = B1 = F (k, s, 1) = OMAC1-AES (k, INT (1) || s)

bLen = 32
n = ROUND( dsLen / bLen)
j = dsLen - (n - 1) * bLen
B1 = F (k, s, 1) ,
B2 = F (k, s, 2) ,
Bn = F (k, s, n)
DS = B1 || B2 || ... || Bn<0..j-1>

n = ROUND ( 16 / 32 ) = 1

j = 16 - (1 - 1) * 32 = 16

B1 = F (k, s, 1) = HMAC-SHA256 (k, INT (1) || s)

DS = B1<0 ... 15>

