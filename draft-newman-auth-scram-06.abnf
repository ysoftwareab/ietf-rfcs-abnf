generic-message = attr-val *("," attr-val)

attr-val        = ALPHA "=" value

value           = *(value-char)

value-safe-char = %20-2B / %2D-3C / %3E-7E /
                        UTF8-2 / UTF-3 / UTF8-4
                        ;; UTF8-char except CTL, "=", and ",".

value-char      = value-safe-char / "="

base64-char     = ALPHA / DIGIT / "/" / "+"

base64-4        = 4*4(base64-char)

base64-3        = 3*3(base64-char) "="

base64-2        = 2*2(base64-char) "=="

base64          = *(base64-4) [base64-3 / base64-2]

saslname        = 1*(value-safe-char / "=2C" / "=3D")
                        ;; Conforms to <value>

authzid         = "a=" saslname
                        ;; Protocol specific.
username        = "n=" saslname
                        ;; Usernames are prepared using SASLPrep.

channel-binding = "c=" base64

proof           = "p=" base64

nonce           = "r=" value [value]
                        ;; Second part provided by server.

salt            = "s=" base64

verifier        = "v=" base64

hash-list       = "h=" hash-name *(":" hash-name)

hash-name       = value
                        ;; Hash Function Textual Name, from
                        ;; http://www.iana.org/assignments/hash-
                        function-text-names

iteration-count = "i=" 1*DIGIT

client-first-message =
                        [authzid ","] username "," hash-list "," nonce

server-first-message =
                        nonce "," hash-list "," salt "," iteration-count

client-final-message-without-proof =
                        nonce "," channel-binding

client-final-message =
                        client-final-message-without-proof "," proof

server-final-message =
                        verifier


