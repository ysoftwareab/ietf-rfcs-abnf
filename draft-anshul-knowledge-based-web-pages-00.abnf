Content-Length=148 Bytes (Static Part) 142 Bytes (fresh 
ontentLength=8

tempContentLength=14

requests=new ServerSocket(81);
connection=requests.accept();
r=new HTTPProtocol(connection);
t=new Thread(r);
in=con.getInputStream();
out=con.getOutputStream();
inStream=new BufferedInputStream(in);
request=new HTTPRequest(inStream);
pageStatus="Page";
			ClassLoader loader=t.getContextClassLoader();
				String fileName=request.getUrl();
response=new HTTPResponse(out,hdr,"Pages/Result.html");
response=new HTTPResponse(out,hdr,request.getUrl());
response=new HTTPResponse(out,hdr);
response=new HTTPResponse(out,hdr,request.getUrl());
response=new HTTPResponse(out,hdr,"Pages/Result.html");
msg=msg+(char)c;
msg=msg+(char)c;
queryString=null;
mBody="";
input=in;
headerList=new HashMap<String,String>();
method=readRequestLine();
url=readRequestLine();
HttpVer=readRequestLine();
value=getHeaderValue();	
mBody=readMessageBody(Integer.parseInt(temp.substring(1)));
			}
queryString=query.substring(query.indexOf('?')+1);	
ch=(char)input.read();
body=body+ch;
ch=(char)input.read();
token=token+ch;
ch=(char)input.read();
ch=(char)input.read();
token=token+ch;
token=CRLF;
ch=(char)input.read();
ch=(char)input.read();
token=token+ch;	
token=CRLF;
ch=(char)input.read();	
url=url.substring(i+1);
url=url.substring(1,url.indexOf('?'));
statusLine=request.getHTTPVersion()+" "+statusCode+CRLF;
hdr=new LinkedList<String>();
mimeType=new HashMap<String,String>();
ext=getMimeType(ext);
statusLine="HTTP/1.1 "+statusCode+CRLF;
hdr=new LinkedList<String>();
mimeType=new HashMap<String,String>();
f=new File(url);
f=new File("welcome.html");
hdrs=hdrs+itr.next();
str=body;
temp=str.substring(str.indexOf(pName)+pName.length()+1);
L=L+temp.length();
temp=result;
temp=temp.substring(0,temp.indexOf("&"));
temp=result;
fields=fields.substring(0,fields.length()-1);
query="SELECT * FROM EMPLOYEE";
query="SELECT * FROM EMPLOYEE WHERE EMP_ID='"+getParameter("txtKey")+"'";	
query="SELECT * FROM EMPLOYEE WHERE EMP_FIRST_NAME LIKE '%"+getParameter("txtKey")+"%' or  EMP_MIDDLE_NAME like '%"+getParameter("txtKey")+"%' or EMP_LAST_NAME like '%"+getParameter("txtKey")+"%'";
		}
		else if(getParameter("cmbList").equals("FName"))
		{
query="SELECT * FROM EMPLOYEE WHERE EMP_FIRST_NAME='"+getParameter("txtKey")+"'";
query="SELECT * FROM EMPLOYEE WHERE EMP_MIDDLE_NAME='"+getParameter("txtKey")+"'";
query="SELECT * FROM EMPLOYEE WHERE EMP_LAST_NAME='"+getParameter("txtKey")+"'";
query="SELECT * FROM EMPLOYEE WHERE EMP_POST='"+getParameter("txtKey")+"'";
query="SELECT * FROM EMPLOYEE WHERE EMP_STATUS='"+getParameter("txtKey")+"'";
database = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb)};DBQ=JodhpurDiscom.mdb;";
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
done=true;
done=false;
idx=1;
row="";
temp=result.getString(idx);
tag=t;
lexeme=str;
token=t;
nextStmt=null;
token=t;
nextStmt=stmt;
nextStmt=stmt;
length=html.lexeme.length();
offset=0;
total=0;
length=0;
offset=0;
total=0;
length=len;
total=length+offset;
lexeme=w.lexeme;
length=0;
offset=0;
total=0;
body=stmt;
length=len;
total=length+offset;
length=0;
offset=0;
total=0;
length=0;
offset=0;
total=0;
length=len;
total=length+offset;
token=(Token)w;
table=new HashMap<String, Word>();
in=file;
peek=(char)in.read();
peek=(char)in.read();
peek=(char)in.read();
peek=(char)in.read();
peek=' ';
text=buf.toString();
peek=(char)in.read();
w=new Word(str,Tag.ID);
t=new Token(Tag.OPENBRAKET);
t=new Token(Tag.CLOSEDBRAKET);
t=new Token(Tag.OPENCURLYBRAKET);
t=new Token(Tag.CLOSEDCURLYBRAKET);
t=new Token(Tag.SEMICOLON);
t=new Token(Tag.UNKNOWN);	
peek=' ';
lex=new Lexer(new FileInputStream(filename));
look=move();
stmt=new OutputStatement((Word)look,rest());
look=move();
look=move();
look=move();
look=move();
				
stmt=loop;
stmt=Statement.EmptyStmt;
look=move();
stmt=new Text((HtmlString)look);
look=move();
stmt=new DText((Word)look);
look=move();
stmt=null;
length=0;
full=bool;
output=new String();
query=qry;
db=new DBAccess();
rs=db.executeSearchQuery(query);
currow=0;
totalrow=Integer.parseInt(rs.get("Total"));
length=Evaluate(stmts,offset,full);
finalOffset=finalOffset.substring(0,finalOffset.lastIndexOf(','))+"\r\n\r\n";
		try{
			FileOutputStream fout=new FileOutputStream("Pages/Result.html");
			byte header[]=("Content-Length: "+output.length()+"\r\nOffset: "+finalOffset).getBytes();
			fout.write(header);

			fout.write(output.getBytes());
			fout.close();
		}
		catch(Exception e)
		{
			System.out.println("Erro During writing output of Evaluator "+e);
		}
	return length;
	}
tempResult= Evaluate(st.getNextStmt(),text.getTotal(),full);
				}
				else 
				{
					String str=getNextColum();
					DText text=(DText)st;
					text.setLength(str.length());
					text.setOffset(offset);
					text.setTotal();
					output+=str;
					finalOffset+=offset+"-"+str.length()+",";
tempResult=Evaluate(st.getNextStmt(),text.getTotal(),full);
offset=Evaluate(body,wl.getTotal(),true);
finalOffset=tempFinalOffset+OFFSET+"-"+(offset-tempOffset)+",";
tempResult=Evaluate(stmts.getNextStmt(),wl.getTotal(),full);
			break;
			case Tag.EMPTYSTMT:
tempResult=offset;
requests=new ServerSocket(80);
connection=requests.accept();
r=new HTTPProtocol(connection);
t=new Thread(r);
requests=new ServerSocket(80);
connection=requests.accept();
r=new HTTPProtocol(connection);
t=new Thread(r);
in=con.getInputStream();
out=con.getOutputStream();
clientOut=new PrintWriter(out,true);
inStream=new BufferedInputStream(in);
request=new HTTPRequest(inStream);
serCon=new Socket("127.0.0.1",81);
serIn=serCon.getInputStream();
serOut=serCon.getOutputStream();
serInStream=new BufferedInputStream(serIn);
serOutStream=new PrintWriter(serOut,true);
line=readCacheEntry.nextLine();
now=sdf.parse(curTime);
serCon=new Socket("127.0.0.1",81);
serIn=serCon.getInputStream();
serOut=serCon.getOutputStream();
serInStream=new BufferedInputStream(serIn);
serOutStream=new PrintWriter(serOut,true);
										while(!(line.startsWith("Last-Modified")) && readCacheEntry.hasNext())
line=readCacheEntry.nextLine();
skip=skip+curLine.length()+2;
serCon=new Socket("127.0.0.1",81);
serIn=serCon.getInputStream();
serOut=serCon.getOutputStream();
serInStream=new BufferedInputStream(serIn);
serOutStream=new PrintWriter(serOut,true);
serCon=new Socket("127.0.0.1",81);
serIn=serCon.getInputStream();
serOut=serCon.getOutputStream();
serInStream=new BufferedInputStream(serIn);
serOutStream=new PrintWriter(serOut,true);
serCon=new Socket("127.0.0.1",81);
serIn=serCon.getInputStream();
serOut=serCon.getOutputStream();
serInStream=new BufferedInputStream(serIn);
serOutStream=new PrintWriter(serOut,true);
queryString=null;
mBody="";
input=in;
headerList=new HashMap<String,String>();
		
method=readRequestLine();
url=readRequestLine();
HttpVer=readRequestLine();
value=getHeaderValue();
mBody=readMessageBody(Integer.parseInt(temp.substring(1)));
				
						
header=header+" "+HttpVer+"\r\n";
header=header+entry.getKey()+":"+entry.getValue()+"\r\n";
header=header+"\r\n";
header=header+" "+HttpVer+"\r\n";
header=header+entry.getKey()+":"+entry.getValue()+"\r\n";
header=header+"\r\n";
queryString=query.substring(query.indexOf('?')+1);	
ch=(char)input.read();
body=body+ch;
ch=(char)input.read();
token=token+ch;
ch=(char)input.read();
ch=(char)input.read();
token=token+ch;
token=CRLF;
ch=(char)input.read();
ch=(char)input.read();
token=token+ch;	
token=CRLF;
ch=(char)input.read();	
url=this.url;
url=url.substring(i+1);
url=url.substring(1,url.indexOf('?'));
serResponse=new BufferedInputStream(in);
length=0;
response=readResponseMsg()+"\r\n";
		
HttpVer=scan.next();
StatusCode=scan.next();
Phrase=scan.nextLine();
		
length=Integer.parseInt(temp);
response=response+header+"\r\n";
headerList=response;

token=token+ch;
token=CRLF;
ch=(char)serResponse.read();
mBody=mBody+ch;
temp=scan.nextLine();
output=response.substring(response.indexOf("Expires"));
output=output.substring(output.indexOf("\r\n")+2);
line=scan.nextLine()+"\r\n";
line="Cache-Control: no-cache\r\n";
output=response.substring(response.indexOf("Expires"));
output=output.substring(output.indexOf("\r\n")+2);
output=response.substring(response.indexOf("Expires"));
output=output.substring(output.indexOf("\r\n")+2);
temp=temp.substring(temp.indexOf(aName));
temp=temp.substring(0,temp.indexOf("\r\n"));
PreResponse=new HTTPResponse(new FileInputStream(cacheEntry));
		
response=res;
rpOffset=response.getHeaderByName("Offset");
cpOffset=PreResponse.getHeaderByName("Offset");
rpOffset=rpOffset.substring(8);
cpOffset=cpOffset.substring(8);
cachedPage=PreResponse.readMsgBody(PreResponse.toString());
responsePage=response.readMsgBody(response.toString());
			
fIdx=Integer.parseInt(stcpOffset.nextToken());
temp=strpOffset.nextToken();
freashCopy=cachedPage.substring(initIdx,fIdx);
cpCL=fIdx;
fIdx=Integer.parseInt(strpOffset.nextToken());
rpfIdx=fIdx;
initIdx=cpCL;
							
fIdx=Integer.parseInt(stcpOffset.nextToken());
				
freashCopy=freashCopy+cachedPage.substring(initIdx,fIdx);
				
				
cpCL=fIdx;
temp=strpOffset.nextToken();
fIdx=Integer.parseInt(strpOffset.nextToken());
rpfIdx=rpfIdx+fIdx;
initIdx=cpCL;
				
