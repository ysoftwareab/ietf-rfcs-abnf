Network Working Group                                        An-ni Huynh
Expires August 23, 2001        Condition MIB                Mark Stewart
Internet Draft                                       Lucent Technologies 
                                                       February 23, 2001
 
                                                       
                                                                	
                	


                             CONDITION MIB

                     
                     draft-huynh-disman-conditionmib-00.txt


Status of this Memo

    This document is an Internet-Draft and is in full conformance with
    all provisions of Section 10 of RFC2026.

    Internet-Drafts are working documents of the Internet Engineering
    Task Force (IETF), its areas, and its working groups. Note that
    other groups may also distribute working documents as
    Internet-Drafts.

    Internet-Drafts are draft documents valid for a maximum of six
    months and may be updated, replaced, or obsoleted by other documents
    at any time. It is inappropriate to use Internet-Drafts as reference
    material or to cite them other than as "work in progress."

    The list of current Internet-Drafts can be accessed at
    http://www.ietf.org/ietf/1id-abstracts.txt.

    The list of Internet-Draft Shadow Directories can be accessed at
    http://www.ietf.org/shadow.html.


Copyright Notice

   Copyright (C) The Internet Society (2000).  All Rights Reserved.

1.  Abstract
                                                                       
   This memo defines a portion of the Management Information Base (MIB)
   for use with network management protocols in TCP/IP-based internets.
   In particular, it defines objects for current and historical data of
   conditions of a network device.  A trap is defined for notifying
   status of a condition.

   Textual Conventions used in this MIB are defined in [RFC2579].


Table of Contents

   1 Abstract ..............................................   xx
   2 The SNMP Network Management Framework .................   xx
   3 Introduction  .........................................   xx
   3.1 Terminology  ........................................   xx
   4 Object Definitions ....................................   xx
   5 Open Issue ............................................   xx
   6 Security Considerations ...............................   xx 
   7 Acknowledgments........................................   xx
   8 References ............................................   xx  
  10 Author's Address ......................................   xx
  11 Intellectual Property .................................   xx
   Full Copyright Statement ................................   xx

2.  The SNMP Network Management Framework

   The SNMP Management Framework presently consists of five major
   components:

   0    An overall architecture, described in RFC 2571 [RFC2571].

   0    Mechanisms for describing and naming objects and events for the
        purpose of management.  The first version of this Structure of
        Management Information (SMI) is called SMIv1 and described in
        STD 16, RFC 1155 [RFC1155], STD 16, RFC 1212 [RFC1212] and RFC
        1215 [RFC1215].  The second version, called SMIv2, is described
        in STD 58, RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and
        STD 58, RFC 2580 [RFC2580].

   0    Message protocols for transferring management information.  The
        first version of the SNMP message protocol is called SNMPv1 and
        described in STD 15, RFC 1157 [RFC1157].  A second version of
        the SNMP message protocol, which is not an Internet standards
        track protocol, is called SNMPv2c and described in RFC 1901
        [RFC1901] and RFC 1906 [RFC1906].  The third version of the
        message protocol is called SNMPv3 and described in RFC 1906
        [RFC1906], RFC 2572 [RFC2572] and RFC 2574 [RFC2574].

   0    Protocol operations for accessing management information.  The
        first set of protocol operations and associated PDU formats is
        described in STD 15, RFC 1157 [RFC1157].  A second set of
        protocol operations and associated PDU formats is described in
        RFC 1905 [RFC1905].

   o   A set of fundamental applications described in RFC 2573
        [RFC2573] and the view-based access control mechanism described
        in RFC 2575 [RFC2575].

   A more detailed introduction to the current SNMP Management Framework
   can be found in RFC 2570 [RFC2570].

   Managed objects are accessed via a virtual information store, termed
   the Management Information Base or MIB.  Objects in the MIB are
   defined using the mechanisms defined in the SMI.

   This memo specifies a MIB module that is compliant to the SMIv2.  A
   MIB conforming to the SMIv1 can be produced through the appropriate
   translations.  The resulting translated MIB must be semantically
   equivalent, except where objects or events are omitted because no
   translation is possible (e.g., use of Counter64).  Some machine readable
   information in SMIv2 will be converted into textual descriptions in 
   SMIv1 during the translation process.  However, this loss of machine 
   readable information is not considered to change the semantics of the 
   MIB.

 3. Overview
   There is a need to provide a mechanism for a manager to retrieve 
   information of Active standing and transient conditions in a system as 
   defined in ITU-T Recommendation X.733 [X733] and X.736 [X.736].  

   This MIB module defines three tables.  All active standing conditions
   can be retrieved from the condActiveTable.  As standing conditions 
   are cleared, they are moved from the condActiveTable to condRetiredTable.
   The third table condTransientTable stores the information of all transient 
   conditions.

   Two notifications are defined for multiple notification types: condActiveEvent,
   and condRetiredEvent. Both notifications specify the condition information 
   from its variables (e.g. severity, perceived probable causes, level of
   severity, and the alarm location). 
   
   Notifications are generated based on the value of condNotificationSelection. 
   A SNMP agent sends notifications based on the level of severity of the conditions.
   It is the responsibility of the manager to periodically synchronize 
   with the agent using the condActiveTable and condRetiredTable to 
   determine if any condition notification have been missed. 

   There is an open issue in defining ConditionProbableCause.
   It is explained in detail in section 5:  Open Issue.


3.1 Terms
   - Condition:  A standing or transient condition that has occured in a 
     system.  A condition does not have to be an error or fault condition.  
     For instance, a manager may want to receive a notification when a 
     circuit pack is inserted to the system.


4.  Object Definitions

OTN-MIB DEFINITIONS ::= BEGIN

IMPORTS
    MODULE-IDENTITY, OBJECT-TYPE, Unsigned32,
          FROM SNMPv2-SMI
    TEXTUAL-CONVENTION, DateAndTime, TruthValue
          FROM SNMPv2-TC
    SnmpAdminString
          FROM SNMP-FRAMEWORK-MIB 	
    MODULE-COMPLIANCE, OBJECT-GROUP
          FROM SNMPv2-CONF


condMIB MODULE-IDENTITY
    LAST-UPDATED "200102230000Z"
    ORGANIZATION " "
    CONTACT-INFO
      "Anni Huynh 
       Lucent Technologies
       E-mail: ahuynh@lucent.com."
    DESCRIPTION
       "The MIB module is to describe standing, transient conditions for the system 
        based on the information defined in ITU-T Recommendation X.733 
        and X.736."
    REVISION  "200102230000Z"	
    DESCRIPTION
       "The initial version."
    ::={ mib-2 yy}

------------------
-- MIB Objects
------------------
condMIBObjects   OBJECT IDENTIFIER ::= { conMIB 1 }

condActive    OBJECT IDENTIFIER ::= { condMIBObjects 1 }
condRetired   OBJECT IDENTIFIER ::= { condMIBObjects 2 }
condStanding  OBJECT IDENTIFIER ::= { condMIBObjects 3 }
condNotice    OBJECT IDENTIFIER ::= { condMIBObjects 4 }
 
--------------
-- Event 
--------------
condEvents OBJECT IDENTIFIER ::= { condMIB 2 }
condEventsV2 OBJECT IDENTIFIER ::= { condEvents 0 }

----------------------
-- Textual Convention
----------------------
ConditionIndex ::= TEXTUAL-CONVENTION
  STATUS  current
  DESCRIPTION
    "The unique identifier of a condition and/or condition
     notice within a table."
  SYNTAX  Unsigned32

ConditionLocation ::= TEXTUAL-CONVENTION
  STATUS current
  DESCRIPTION
    "A text field describing the physical or logical location at
    which a condition occurred.

    The fields <node>,<Rack>,<shelf>,<slot>,<port> would be concatenated
    into the physical location identifier with some delimiter."
  SYNTAX SnmpAdminString

ConditionSeverity ::= TEXTUAL-CONVENTION
  STATUS  current
  DESCRIPTION
    "The perceived severity level of a condition."
  REFERENCE
    "Recommendation X.733 (02/92) - Information Technology -
     Open Systems Interconnection - Systems Management:
     Alarm Reporting Function"
  SYNTAX  INTEGER {
    cleared(1),
    indeterminate(2),
    warning(3),
    minor(4),
    major(5),
    critical(6)
    }

ConditionCategory ::= TEXTUAL-CONVENTION
  STATUS  current
  DESCRIPTION
    "The category of a condition."
  REFERENCE
    "Recommendation X.733 (02/92) - Information Technology -
     Open Systems Interconnection - Systems Management:
     Alarm Reporting Function"
  SYNTAX  INTEGER {
    communications(1),
    qualityOfService(2),
    processingError(3),
    equipment(4),
    environmental(5)
    }

ConditionProbableCause ::= TEXTUAL-CONVENTION
  STATUS  current
  DESCRIPTION
    "The probable cause of a condition."
  REFERENCE
    "Recommendation X.733 (02/92) - Information Technology -
     Open Systems Interconnection - Systems Management:
     Alarm Reporting Function"
  SYNTAX  INTEGER {
    acPowerA(1),
    acPowerB(2),
    adapterError(3),
    alarmIndicationSignal(4),
    applicationSubsystemFailure(5),
    bandwidthReduced(6),
    callEstablishmentError(7),
    communicationsProtocolError(8),
    communicationsSubsystemFailure(9),
    componentInsertion(10),
    componentMalfunction(11),
    componentMismatch(12),
    componentRemoval(13),
    configurationOrCustomizationError(14),
    congestion(15),
    coolingFanFailure(16),
    coolingFansFailure(17),
    coolingFanPowerA(18),
    coolingFanPowerB(19),
    coolingFanPowerFail(20),
    corruptData(21),
    cpuCyclesLimitExceeded(22),
    dataSetOrModemError(23),
    dcPowerA(24),
    dcPowerB(25),
    degradedSignal(26),
    dTEDCEInterfaceError(27),
    enclosureDoorOpen(28),
    excessiveBitErrorRate(29),
    excessiveVibration(30),
    fileError(31),
    fireDetected(32),
    floodDetected(33),
    framingError(34),
    humidityUnacceptable(35),
    inputOutputDeviceError(36),
    inputDeviceError(37),
    lANError(38),
    leakDetected(39),
    localNodeTransmissionError(40),
    lossOfLock(41),
    lossOfOpticalPower(42),
    lossOfSignal(43),
    materialSupplyExhausted(44),
    multiplexerProblem(45),
    outOfMemory(46),
    ouputDeviceError(47),
    performanceDegraded(48),
    power48VoltsA(49),
    power48VoltsB(50),
    pressureUnacceptable(51),
    processorProblem(52),
    protectionSwitch(53),
    provisioningMismatch(54),
    pumpFailure(55),
    queueSizeExceeded(56),
    receiveFailure(57),
    receiverFailure(58),
    remoteNodeTransmissionError(59),
    resourceAtOrNearingCapacity(60),
    responseTimeExcessive(61),
    retransmissionRateExcessive(62),
    softwareBootUpgradeFailed(63),
    softwareDownloadTerminated(64),
    softwareError(65),
    softwareProgramAbnormallyTerminated(66),
    softwareProgramError(67),
    stateTransition(68),
    storageCapacityProblem(69),
    temperatureUnacceptable(70),
    thresholdCrossed(71),
    timingProblem(72),
    toxicLeakDetected(73),
    transmitFailure(74),
    transmitterFailure(75),
    underlyingResourceUnavailable(76),
    versionMismatch(77)
    }


---------------------------
-- Active condition objects
---------------------------
condActiveMaxNumber OBJECT-TYPE
  SYNTAX  Unsigned32
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The maximum number of active conditions the system will
     store in condActiveTable.  This value is set high
     enough that it cannot be exceeded by the system (i.e., the
     system is not capable of generating more than this number
     of simultaneous standing conditions)."
  ::= { condActive 1 }

condActiveTable OBJECT-TYPE
  SYNTAX  SEQUENCE OF CondActiveEntry
  MAX-ACCESS  not-accessible
  STATUS  current
  DESCRIPTION
    "A table of active conditions on the system. 

     The table index is virtual and does not represent a physical location.  
     As each new condition is generated, it is assigned a new identifier; 
     old identifiers are not reused.

     An entry in the table is removed when the condition it represents
     is cleared.  Note that this means the identifiers of the standing 
     conditions in the table cannot be assumed to be consecutive."
  ::= { condActive 2 }

condActiveEntry OBJECT-TYPE
  SYNTAX  CondActiveEntry
  MAX-ACCESS  not-accessible
  STATUS  current
  DESCRIPTION
    "A conceptual row that contains information about an active condition."
  INDEX  { condActiveIndex }
  ::= { condActiveTable 1 }

CondActiveEntry ::=
  SEQUENCE {
    condActiveIndex               ConditionIndex,
    condActiveLocation            ConditionLocation,
    condActiveDateAndTime         DateAndTime,
    condActiveCategory            ConditionCategory,
    condActiveSeverity            ConditionSeverity,
    condActiveProbableCause       ConditionProbableCause,
    condActiveServiceAffecting    TruthValue,
    condActiveText                SnmpAdminString
    }

condActiveIndex OBJECT-TYPE
  SYNTAX  ConditionIndex
  MAX-ACCESS  not-accessible
  STATUS  current
  DESCRIPTION
    "The unique identifier of the condition within this table."
  ::= { condActiveEntry 1 }

condActiveLocation OBJECT-TYPE
  SYNTAX  ConditionLocation
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The device generated identifier indicating the location of the equipment 
     that generated the condition (e.g. node.shelf.slot.port)."
  ::= { condActiveEntry 2 }

condActiveDateAndTime OBJECT-TYPE
  SYNTAX  DateAndTime
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The date and time when the condition was generated."
  ::= { condActiveEntry 3 }

condActiveCategory OBJECT-TYPE
  SYNTAX  ConditionCategory
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The category of the condition, as assigned by the device
     that generated it."
  ::= { condActiveEntry 4 }

condActiveSeverity OBJECT-TYPE
  SYNTAX  ConditionSeverity
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The perceived severity level of the condition, as assigned
     by the device that generated the condition."
  ::= { condActiveEntry 5 }

condActiveProbableCause OBJECT-TYPE
  SYNTAX  ConditionProbableCause
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "A high level qualification of the cause of the condition."
  ::= { condActiveEntry 6 }

condActiveServiceAffecting OBJECT-TYPE
  SYNTAX  TruthValue
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "An indication of whether or not the condition is service
     affecting."
  ::= { condActiveEntry 7 }

condActiveText OBJECT-TYPE
  SYNTAX  SnmpAdminString
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "A text description of the condition."
  ::= { condActiveEntry 8 }

----------------------------
-- Retired condition objects
----------------------------
condRetiredMaxNumber OBJECT-TYPE
  SYNTAX  Unsigned32
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The maximum number of retired standing conditions the system will store in
     condRetiredTable. This table provides a history of conditions
     that have been cleared."
  ::= { condRetired 1 }

condRetiredTable OBJECT-TYPE
  SYNTAX  SEQUENCE OF CondRetiredEntry
  MAX-ACCESS  not-accessible
  STATUS  current
  DESCRIPTION
    "A table of retired standing conditions on the system. 
     The table index is virtual and does not represent a physical location.  
     As each new condition is generated, it is assigned a new identifier; 
     old identifiers are not reused.
     
     Once the condRetiredTable contains the maximum number of entries,
     the oldest entry would be deleted to make room for new entry."
  ::= { condRetired 2 }

condRetiredEntry OBJECT-TYPE
  SYNTAX  CondRetiredEntry
  MAX-ACCESS  not-accessible
  STATUS  current
  DESCRIPTION
    "A conceptual row that contains information about an retired condition."
  INDEX  { condRetiredIndex }
  ::= { condRetiredTable 1 }

CondRetiredEntry ::=
  SEQUENCE {
    condRetiredIndex                  ConditionIndex,
    condRetiredLocation               ConditionLocation,
    condRetiredDateAndTimeGenerated   DateAndTime,
    condRetiredDateAndTime            DateAndTime,
    condRetiredCategory               ConditionCategory,
    condRetiredSeverity               ConditionSeverity,
    condRetiredProbableCause          ConditionProbableCause,    
    condRetiredServiceAffecting       TruthValue,
    condRetiredText                   SnmpAdminString,
    condRetiredResolution             SnmpAdminString
    }

condRetiredIndex OBJECT-TYPE
  SYNTAX  ConditionIndex
  MAX-ACCESS  not-accessible
  STATUS  current
  DESCRIPTION
    "The unique identifier of the retired condition within this table."
  ::= { condRetiredEntry 1 }

condRetiredLocation OBJECT-TYPE
  SYNTAX  SnmpAdminString
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The device generated identifier indicating the location of the equipment
     that generated the condition.  It is the same as condActiveLocation."
  ::= { condRetiredEntry 2 }

condRetiredDateAndTimeGenerated OBJECT-TYPE
  SYNTAX DateAndTime
  MAX-ACCESS read-only
  STATUS current
  DESCRIPTION 
    "The date and time when the condition was generated.  It is the same as 
     condActiveDateAndTime."
	::= { condRetiredEntry 3 }

condRetiredDateAndTime OBJECT-TYPE
  SYNTAX  DateAndTime
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The date and time when the condition was retired."
  ::= { condRetiredEntry 4 }

condRetiredCategory OBJECT-TYPE
  SYNTAX  ConditionCategory
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The category of the condition, as assigned by the device
     that generated it.  It is the same as condActiveCategory."
  ::= { condRetiredEntry 5 }

condRetiredSeverity OBJECT-TYPE
  SYNTAX  ConditionSeverity
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The perceived severity level of the condition when it was active, as 
     assigned by the device that generated the condition.  
     It is the same as condActiveSeverity."
  ::= { condRetiredEntry 6 }

condRetiredProbableCause OBJECT-TYPE
  SYNTAX  ConditionProbableCause
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "A high level qualification of the cause of the condition when it 
     was active.  It is the same as condActiveProbableCause."
  ::= { condRetiredEntry 7 }

condRetiredServiceAffecting OBJECT-TYPE
  SYNTAX  TruthValue
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "An indication of whether or not the condition was service
     affecting when it was active.  It is the same as
     condActiveServiceAffecting."
  ::= { condRetiredEntry 8 }

condRetiredText OBJECT-TYPE
  SYNTAX  SnmpAdminString
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "A text description of the condition.  It is the same as condActiveText."
  ::= { condRetiredEntry 9 }

condRetiredResolution OBJECT-TYPE
  SYNTAX SnmpAdminString
  MAX-ACCESS read-only
  STATUS current
  DESCRIPTION 
    "Free-form text containing resolution information."
  ::= { condRetiredEntry 10 }


---------------------------
-- Transient condition objects
---------------------------
condtransientMaxNumber OBJECT-TYPE
  SYNTAX  Unsigned32
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The maximum number of transient conditions the system will
     store in condtransientTable.  This value is set high
     enough that it cannot be exceeded by the system (i.e., the
     system is not capable of generating more than this number
     of simultaneous standing conditions)."
  ::= { condtransient 1 }

condtransientTable OBJECT-TYPE
  SYNTAX  SEQUENCE OF CondtransientEntry
  MAX-ACCESS  not-accessible
  STATUS  current
  DESCRIPTION
    "A table of transient conditions on the system. 

     The table index is virtual and does not represent a physical location.  
     As each new condition is generated, it is assigned a new identifier; 
     old identifiers are not reused. Therefore, the identifiers of the transient
     conditions in the table cannot be assumed to be consecutive.
     When the table reaches the max number of entries, the oldest one is deleted
     to make room for the new transient condition"
  ::= { condtransient 2 }

condTransientEntry OBJECT-TYPE
  SYNTAX  CondTransientEntry
  MAX-ACCESS  not-accessible
  STATUS  current
  DESCRIPTION
    "A conceptual row that contains information about an transient condition."
  INDEX  { condTransientIndex }
  ::= { condTransientTable 1 }

CondTransientEntry ::=
  SEQUENCE {
    condTransientIndex               ConditionIndex,
    condTransientLocation            ConditionLocation,
    condTransientDateAndTime         DateAndTime,
    condTransientCategory            ConditionCategory,
    condTransientSeverity            ConditionSeverity,
    condTransientProbableCause       ConditionProbableCause,
    condTransientServiceAffecting    TruthValue,
    condTransientText                SnmpAdminString
    }

condTransientIndex OBJECT-TYPE
  SYNTAX  ConditionIndex
  MAX-ACCESS  not-accessible
  STATUS  current
  DESCRIPTION
    "The unique identifier of the condition within this table."
  ::= { condTransientEntry 1 }

condTransientLocation OBJECT-TYPE
  SYNTAX  ConditionLocation
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The device generated identifier indicating the location of the equipment 
     that generated the condition (e.g. node.shelf.slot.port)."
  ::= { condTransientEntry 2 }

condTransientDateAndTime OBJECT-TYPE
  SYNTAX  DateAndTime
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The date and time when the condition was generated."
  ::= { condTransientEntry 3 }

condTransientCategory OBJECT-TYPE
  SYNTAX  ConditionCategory
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The category of the condition, as assigned by the device
     that generated it."
  ::= { condTransientEntry 4 }

condTransientSeverity OBJECT-TYPE
  SYNTAX  ConditionSeverity
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "The perceived severity level of the condition, as assigned
     by the device that generated the condition."
  ::= { condTransientEntry 5 }

condTransientProbableCause OBJECT-TYPE
  SYNTAX  ConditionProbableCause
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "A high level qualification of the cause of the condition."
  ::= { condTransientEntry 6 }

condTransientServiceAffecting OBJECT-TYPE
  SYNTAX  TruthValue
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "An indication of whether or not the condition is service
     affecting."
  ::= { condTransientEntry 7 }

condTransientText OBJECT-TYPE
  SYNTAX  SnmpAdminString
  MAX-ACCESS  read-only
  STATUS  current
  DESCRIPTION
    "A text description of the condition."
  ::= { condTransientEntry 8 }

-----------------
-- Notifications
-----------------
condNotificationSelection OBJECT-TYPE
  SYNTAX  BITS {
    cleared(0),
    indeterminate(1),
    warning(2),
    minor(3),
    major(4),
    critical(5)
    }
  MAX-ACCESS  read-write
  STATUS  current
  DESCRIPTION
    "This object controls the perceived condition severities for which
     notifications are sent.  If a bit is set, a notification is sent for each
     new condition with the corresponding perceived severity.
     By default, all bits are set except indeterminate(1)."
  ::= { condNotice 1 }

condActiveEvent NOTIFICATION-TYPE
  OBJECTS  {
    condActiveIndex,
    condActiveLocation,
    condActiveDateAndTime,
    condActiveCategory,
    condActiveSeverity,
    condActiveProbableCause,
    condActiveServiceAffecting,
    condActiveText
    }
  STATUS  current
  DESCRIPTION
    " To notify an active condition, this notification is sent for every condition 
      severity level that is enabled in condNotificationSelection.
      The objects are the same as in the associated entry in the 
      condActiveTable."
  ::= { condEventsV2 1 }

condRetiredEvent NOTIFICATION-TYPE
  OBJECTS  {
    condRetiredIndex,
    condRetiredLocation,
    condRetiredDateAndTimeGenerated,
    condRetiredDateAndTime,
    condRetiredCategory,
    condRetiredSeverity,
    condRetiredProbableCause,
    condRetiredServiceAffecting,
    condRetiredText,
    condRetiredResolution          
    }
  STATUS  current
  DESCRIPTION
    " To notify that a condition is cleared, this notification is sent 
      for every condition severity level that is enabled in condNotificationSelection.
      The objects are the same as in the associated entry in the
      condRetiredTable."
  ::= { condEventsV2 2 }




-- conformance information
-- To be Added

END


6.  Security Considerations

   There are a number of management objects defined in this MIB that
   have a MAX-ACCESS clause of read-write and/or read-create.  Such
   objects may be considered sensitive or vulnerable in some network
   environments. The support for SET operations in a non-secure
   environment without proper protection can have a negative effect on
   network operations.

   So, it is important to control the GET access to these objects and possibly 
   even encrypt the object values when sending them over the network via SNMP. 
   Not all versions of SNMP provide features for such a secure environment.

   SNMPv1 by itself is not a secure environment. Even if the network
   itself is secure (for example by using IPSec), there is no
   control as to who on the secure network is allowed to access and
   GET/SET (read/change/create/delete) the objects in this MIB.

   It is recommended that the implementers consider the security
   features as provided by the SNMPv3 framework. Specifically, the use
   of the User-based Security Model RFC 2574 [RFC2574] and the View-based
   Access Control Model RFC 2575 [RFC2575] is recommended.

   It is then a customer/user responsibility to ensure that the SNMP
   entity giving access to an instance of this MIB, is properly
   configured to give access to the objects only to those principals
   (users) that have legitimate rights to indeed GET or SET
   (change/create/delete) them.

7.  Acknowledgements
   The authors wish to thank Brian Teer for reviewing and commenting
   on this draft.

8.  References

[RFC2571]   Harrington, D., Presuhn, R., and B. Wijnen, "An Architecture
            for Describing SNMP Management Frameworks", RFC 2571, April
            1999.

[RFC1155]   Rose, M., and K. McCloghrie, "Structure and Identification
            of Management Information for TCP/IP-based Internets", STD
            16, RFC 1155, May 1990.

[RFC1212]   Rose, M. and K. McCloghrie, "Concise MIB Definitions", STD 16,
            RFC 1212, March 1991.

[RFC1215]   M. Rose, "A Convention for Defining Traps for use with the
            SNMP", RFC 1215, March 1991.

[RFC2578]   McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J.,
            Rose, M., and S. Waldbusser, "Structure of Management
            Information Version 2 (SMIv2)", STD 58, RFC 2578, April
            1999.

[RFC2579]   McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J.,
            Rose, M., and S. Waldbusser, "Textual Conventions for
            SMIv2", STD 58, RFC 2579, April 1999.

[RFC2580]   McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J.,
            Rose, M., and S. Waldbusser, "Conformance Statements for
            SMIv2", STD 58, RFC 2580, April 1999.

[RFC1157]   Case, J., Fedor, M., Schoffstall, M., and J. Davin, "Simple
            Network Management Protocol", STD 15, RFC 1157, May 1990.

[RFC1901]   Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,
            "Introduction to Community-based SNMPv2", RFC 1901, January
            1996.

[RFC1906]   Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,
            "Transport Mappings for Version 2 of the Simple Network
            Management Protocol (SNMPv2)", RFC 1906, January 1996.

[RFC2572]   Case, J., Harrington D., Presuhn R., and B. Wijnen, "Message
            Processing and Dispatching for the Simple Network Management
            Protocol (SNMP)", RFC 2572, April 1999.

[RFC2574]   Blumenthal, U., and B. Wijnen, "User-based Security Model
            (USM) for version 3 of the Simple Network Management
            Protocol (SNMPv3)", RFC 2574, April 1999.

[RFC1905]   Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,
            "Protocol Operations for Version 2 of the Simple Network
            Management Protocol (SNMPv2)", RFC 1905, January 1996.

[RFC2573]   Levi, D., Meyer, P., and B. Stewart, "SNMPv3 Applications",
            RFC 2573, April 1999.

[RFC2575]   Wijnen, B., Presuhn, R., and K. McCloghrie, "View-based
            Access Control Model (VACM) for the Simple Network
            Management Protocol (SNMP)", RFC 2575, April 1999.

[RFC2570]   Case, J., Mundy, R., Partain, D., and B. Stewart,
            "Introduction to Version 3 of the Internet-standard Network
            Management Framework", RFC 2570, April 1999.

[RFC1213] McCloghrie, K. and M. Rose, "Management Information Base for
        Network Management of TCP/IP-based internets - MIB-II", STD 17,
        RFC 1213, March 1991.

[RFC2863] McCloghrie, K. and F. Kastenholz, "The Interfaces Group MIB",
        RFC 2863, June 2000.


[ITU G.709] ITU Recommendation G.709, "Network Node Interface for the
        Optical Transport Network (OTN)", Draft Issue 0.8.3 (10/00).

[X.733] ITU Recommendation X.733, "Information Technology - Open Systems
        Interconnection - System Management: Alarm Reporting Function", 1992.

[X.736] ITU Recommendation  

9.  Author's Address

   Name(s): An-ni Huynh
   Company: Lucent Technologies
   Address: 480 Red Hill Road, Room 1B-223
            Middletown, NJ 07748-3098
   Phone:   732-615-5402
   EMail:   ahuynh@lucent.com

   
   Name(s): Mark Stewart
   Company: Lucent Technologies
   Address: 1801 Varsity Drive
            Raleigh, NC 27606
   Phone:   
   EMail:   markStewart@lucent.com


 

10. Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   intellectual property or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; neither does it represent that it
   has made any effort to identify any such rights.  Information on the
   IETF's procedures with respect to rights in standards-track and
   standards-related documentation can be found in BCP-11.  Copies of
   claims of rights made available for publication and any assurances of
   licenses to be made available, or the result of an attempt made to
   obtain a general license or permission for the use of such
   proprietary rights by implementers or users of this specification can
   be obtained from the IETF Secretariat.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights which may cover technology that may be required to practice
   this standard.  Please address the information to the IETF Executive
   Director.

Expires May 15 2001                                           [Page xx]
