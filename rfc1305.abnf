n = peer id, offset = sample offset, delay = sample delay, disp =
m = 0;                                          /*
x = list[j]; k = index[j]; list[j] =
m = m+1;
i = index[0]; ep[n] = ep[n]+filep[n][i]; tp[n] =
m = 0; i = 0;
m = m+1;
x = list[j]; k = index[j]; list[j] =
i = i+1;

x = list[j]; k = index[j]; list[j] =
i = i+1;

x = list[j]; k = index[j]; list[j] =
i = i+1;
clk = 0; end = 0;                       /* lowpoint */
end = end<196>index[j]; bot = list[j];
end = 0;                                /* highpoint */
end = end+index[j]; top = list[j];
bot = lowpoint, top = highpoint; constructs index = candidate index
m = number of candidates, source = clock source,
theta = clock offset, delta = roundtrip delay, epsil = dispersion
m = 0;
x = list[j]; k = index[j];
m = m+1;
source = 0; return;
xi = 0.; eps = MAXDISP;
x = 0.;
x =
xi = x; i = j;          /* max(xi) */
x = ep[index[j]]+phi*(tstamp<196>utc[index[j]]);
m = m<196>1;
i = index[0];                                   /* declare
theta = combine(); delta = dp[i]; epsil =
index = candidate index list, m = number of candidates; returns
z = 0. ; y = 0.;
j = index[i]; x = dist(j)); z = z+tp[j]/x; y = y+1./x;
n = peer id; returns synchronization distance
