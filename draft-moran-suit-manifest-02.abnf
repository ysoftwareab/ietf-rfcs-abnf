AuthenticatedManifest = [
      authenticatedManifest: COSE_Mac / COSE_Sign,
      text: bstr .cbor textMap
COSE_Mac = any
COSE_Sign = any

textKeys = (
      uninitialised: 0 /
      manifestDescription: 1 /
      payloadDescription: 2 /
      vendorName: 3 /
      modelName: 4 /
      payloadVersion: 5
textMap = { * textKeys / nint => tstr }

Manifest = [
      manifestVersion :    1,
      digestInfo :         DigestInfo,

      ; textReference is the digest of the associated
      ; text map in AuthenticatedManifest
      textReference :      bstr,
      nonce :              bstr,
      sequence :           SequenceNumber,
      preConditions :      [ * PreCondition ],
      postConditions :     [ * PostCondition ],
      directives :         [ * Directive ],
      resources :          [ * ResourceInfo ],
      processors :         [ * ProcessingStep ],
      targets :            [ * TargetInfo ],
      extensions :         { * int => bstr}
ResourceInfo = [
      type:              payload:1 / dependency:2 / key:3 / alias:4
      indicator:         UriList,     ; where to find the resource
      size:              uint / nil,  ; size of the resource
                                      ; (nil when alias)
      digest:            bstr,        ; digest of the resource
      onode             bstr          ; Node of the processing
                                      ; graph that the resource feeds
Processor       = [
      decrypt: 1 / decompress: 2 / undiff: 3 /
      relocate: 4 / unrelocate: 5,
      parameters: bstr ; TBD: more detail needed
      inode: bstr,     ; Node of the processing graph
                       ; that this processor consumes
      onode: bstr      ; Node of the processing graph
                       ; that this processor feeds
Target = [
      componentIdentifier: [ * bstr],
      storageIdentifier:   tstr,        ; where to store the resource
      encoding:            bstr / nil,  ; the format of the resource
                                        ; (nil when alias)
      inode:               bstr         ; Node of the processing graph
                                        ; that this target consumes
PreCondition    = IdCondition / TimeCondition /
                    ImageCondition / CustomCondition
PostCondition   = ImageCondition / CustomCondition
IdCondition     = [vendor: 1 / class: 2 / device: 3,
                     id:         Uuid]
TimeCondition   = [installAfter: 4 / bestBefore: 5,
                    time:       Timestamp]
ImageCondition  = [currentContent: 6 / notCurrentContent: 7,
                    digest:     bstr / nil, location: StorageIdentifier]
CustomCondition = [nint, parameters: bstr]
Directive       = [ int => bstr ]

SequenceNumber      = uint
Timestamp           = uint .size 8
Uuid                = bstr .size 16
StorageIdentifier   = bstr
ComponentIdentifier = bstr
UriList             = { + int => tstr }
DigestInfo          = [
      digestAlgorithm  : uint,
      ? digestParameters : bstr
