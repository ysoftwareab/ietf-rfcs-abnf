v=  (protocol version)
o=  (originator and session identifier)
s=  (session name)
i=* (session information)
u=* (URI of description)
e=* (email address)
p=* (phone number)
c=* (connection information -- not required if included in
              all media descriptions)
b=* (zero or more bandwidth information lines)
z=* (time zone adjustments)
k=* (encryption key)
a=* (zero or more session attribute lines)
t=  (time the session is active)
r=* (zero or more repeat times)

m=  (media name and transport address)
i=* (media title)
c=* (connection information -- optional if included at
              session level)
b=* (zero or more bandwidth information lines)
k=* (encryption key)
a=* (zero or more media attribute lines)


v=0
o=jdoe 2890844526 2890842807 IN IP4 198.51.100.1
s=SDP Seminar
i=A Seminar on the session description protocol
u=http://www.example.com/seminars/sdp.pdf
e=j.doe@example.com (Jane Doe)
c=IN IP4 233.252.0.2
t=2873397496 2873404696
a=recvonly
m=audio 49170 RTP/AVP 0
m=audio 49180 RTP/AVP 0
m=video 51372 RTP/AVP 99
c=IN IP4 233.252.0.1/127
a=rtpmap:99 h263-1998/90000



v=0


o=<username> <sess-id> <sess-version> <nettype> <addrtype>
     <unicast-address>
s=<session name>


i=<session description>


u=<uri>


e=<email-address>
p=<phone-number>


p=+1 617 555-6011


e=j.doe@example.com (Jane Doe)


e=Jane Doe <j.doe@example.com>


c=<nettype> <addrtype> <connection-address>


c=IN IP4 233.252.0.1/127


c=IN IP4 233.252.0.1/127/3


c=IN IP4 233.252.0.1/127
c=IN IP4 233.252.0.2/127
c=IN IP4 233.252.0.3/127


c=IN IP6 FF15::101/3


c=IN IP6 FF15::101
c=IN IP6 FF15::102
c=IN IP6 FF15::103


b=<bwtype>:<bandwidth>


b=X-YZ:128


t=<start-time> <stop-time>


r=<repeat interval> <active duration> <offsets from start-time>


t=3034423619 3042462419
r=604800 3600 0 90000


r=7d 1h 0 25h
z=<adjustment time> <offset> <adjustment time> <offset> ....


z=2882844526 -1h 2898848070 0


k=<method>
k=<method>:<encryption key>
k=clear:<encryption key>

         The encryption key is included untransformed in this key field.
         This method MUST NOT be used unless it can be guaranteed that
         the SDP is conveyed over a secure channel.  The encryption key
         is interpreted as text according to the charset attribute; use
         the "k=base64:" method to convey characters that are otherwise
         prohibited in SDP.

k=base64:<encoded encryption key>

         The encryption key is included in this key field but has been
         base64 encoded [RFC4648] because it includes characters that
         are prohibited in SDP.  This method MUST NOT be used unless it
         can be guaranteed that the SDP is conveyed over a secure
         channel.

k=uri:<URI to obtain key>

         A Uniform Resource Identifier is included in the key field.
         The URI refers to the data containing the key, and may require
         additional authentication before the key can be returned.  When
         a request is made to the given URI, the reply should specify
         the encoding for the key.  The URI is often an Secure Socket
         Layer/Transport Layer Security (SSL/TLS)-protected HTTP URI
         ("https:"), although this is not required.

k=prompt

         No key is included in this SDP description, but the session or
         media stream referred to by this key field is encrypted.  The
         user should be prompted for the key when attempting to join the
         session, and this user-supplied key should then be used to
         decrypt the media streams.  The use of user-specified keys is
         NOT RECOMMENDED, since such keys tend to have weak security
         properties.

a=<attribute>
a=<attribute>:<value>


m=<media> <port> <proto> <fmt> ...


m=<media> <port>/<number of ports> <proto> <fmt> ...


m=video 49170/2 RTP/AVP 31


c=IN IP4 233.252.0.1/127/2
m=video 49170/2 RTP/AVP 31


cat-value = category
category = byte-string
        ; Note: syntax is vague because usage is not understood


a=cat:foo.bar


keywds-value = keywords
keywords = byte-string
        ; Note: syntax is vague because usage is not understood


a=keywds:SDP session description protocol


tool-value = tool-name-and-version
tool-name-and-version = byte-string
        ; Note: syntax is vague because usage is not understood
a=tool:foobar V3.2


ptime-value = packet-time
packet-time = integer
        ; do we want to define a limited range for this?


a=ptime:20


maxptime-value = packet-time


a=maxptime:20


rtpmap-value = payload-type SP encoding-name
        "/" clock-rate [ "/" encoding-params ]
payload-type = integer
        ; do we want to define a limited range for this
        ; based on how big a PT can be in RTP?
encoding-name = token
        ; To be matched in a case-insensitive way!
        ; RFC4855 seems to be the primary definition for this.
        ; It refers both to RFC2045 and RFC4288 for the definition.
        ; The definition in RFC2045 is messy,
        ; but equivalent to SDP <token>.
        ; The definition in RFC4288 (<subtype-name>) is more
        ; restrictive and governs what can be registered.
        ; Since ultimately only registered names can be referenced,
        ; using <token> here seems safe and easy.
clock-rate = integer
        ; do we want to define a limited range for this?
encoding-params = channels
        ; 4566 is vague about what this can be. RFC4855 seems to be
        ; the authoritative source, and only allows the
        ; value of the media subtype "channels" parameter - the
        ; number of audio channels.
        ; Does anyone think this can be used for something else???
        ; (The implication that multiple parameters might be included
        ; seems a misdirection - additional parameters are
        ; to go into a=fmtp.)
        ; Does anyone have an example of other parameters
        ; using this field?
channels = integer
        ; Is there any reason to make this less restrictive?


m=audio 49232 RTP/AVP 0
m=audio 49232 RTP/AVP 98
a=rtpmap:98 L16/16000/2


m=audio 49230 RTP/AVP 96 97 98
a=rtpmap:96 L8/8000
a=rtpmap:97 L16/8000
a=rtpmap:98 L16/11025/2


v=0
o=jdoe 2890844526 2890842807 IN IP4 198.51.100.1
s=SDP Seminar
i=A Seminar on the session description protocol
u=http://www.example.com/seminars/sdp.pdf
e=j.doe@example.com (Jane Doe)
c=IN IP4 233.252.0.1/127
t=2873397496 2873404696
a=inactive
m=audio 49170 RTP/AVP 0
m=video 51372 RTP/AVP 99
a=rtpmap:99 h263-1998/90000
a=recvonly


a=recvonly


a=sendrecv


a=sendonly


a=inactive


orient-value = portrait / landscape / seascape
portrait  = %x70.6f.72.74.72.61.69.74    ; "portrait"
landscape = %x6c.61.6e.64.73.63.61.70.65 ; "landscape"
seascape  = %x73.65.61.73.63.61.70.65    ; "seascape"
        ; Note: this assumes the intent was to be case-sensitive
        ; Does anything think this should be matched in a
        ; case-insensitive way???


a=orient:portrait


type-value = conference-type
conference-type = broadcast / meeting / moderated / test / H332
broadcast = %x62.72.6f.61.64.63.61.73.74 ; "broadcast"
meeting   = %x6d.65.65.74.69.6e.67       ; "meeting"
moderated = %x6d.6f.64.65.72.61.74.65.64 ; "moderated"
test      = %x74.65.73.74                ; "test"
H332      = %x48.33.33.32                ; "H332"
        ; NOTE: are these names intended to be case-sensitive?
        ; Should there be an extensibility hook? A registry?


a=type:moderated


charset-value = iana-charset-preferred-mime-name
iana-charset-preferred-mime-name = 1*40VCHAR
        ; Should we be using Preferred MIME Name or Name?
        ; Should SP be allowed in the name?


a=charset:ISO-8859-1


sdplang-value = Language-Tag
Language-Tag = token
        ; the actual definition of <Language-Tag> is in RFC5646.
        ; That is a proper subset of <token>. Since the use here is
        ; to reference definitions done elsewhere against the
        ; more restrictive definition, it seems reasonable to use
        ; the simpler syntax here.
        ; Should we actually reference the RFC5646 definition?


a=sdplang:fr


lang-value = Language-Tag
        ; <Language-Tag> defined with sdplang.


a=lang:de


framerate-value = positive-real-number
positive-real-number = (integer / "0") [ "." integer ]
        ; Notes:
        ; - this permits a zero value. OK?
        ; - do we want to restrict the range or precision?
a=framerate:60


quality-value = integer
        ; Do we want to restrict the range?
        ; The definition above limits the range to [0-10]
        ; *for video*, but seems to leave usage open for other media.


a=quality:10


fmtp-value = fmt SP format-specific-params
format-specific-params = byte-string
        ; Notes:
        ; - I've assumed a space separator is required.
        ; - the rest is vague because it is format-specific.


a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600


session-description = proto-version
                         origin-field
                         session-name-field
                         information-field
                         uri-field
                         email-fields
                         phone-fields
                         connection-field
                         bandwidth-fields
                         time-fields
                         key-field
                         attribute-fields
                         media-descriptions

proto-version =       %x76 "=" 1*DIGIT CRLF
                         ;this memo describes version 0

origin-field =        %x6f "=" username SP sess-id SP sess-version SP
                         nettype SP addrtype SP unicast-address CRLF

session-name-field =  %x73 "=" text CRLF

information-field =   [%x69 "=" text CRLF]

uri-field =           [%x75 "=" uri CRLF]

email-fields =        *(%x65 "=" email-address CRLF)

phone-fields =        *(%x70 "=" phone-number CRLF)

connection-field =    [%x63 "=" nettype SP addrtype SP
                         connection-address CRLF]
                         ;a connection field must be present
                         ;in every media description or at the
                         ;session-level

bandwidth-fields =    *(%x62 "=" bwtype ":" bandwidth CRLF)

time-fields =         1*( %x74 "=" start-time SP stop-time
                         *(CRLF repeat-fields) CRLF)
                         [zone-adjustments CRLF]

repeat-fields =       %x72 "=" repeat-interval SP typed-time
                         1*(SP typed-time)

zone-adjustments =    %x7a "=" time SP ["-"] typed-time
                         *(SP time SP ["-"] typed-time)

key-field =           [%x6b "=" key-type CRLF]
attribute-fields =    *(%x61 "=" attribute CRLF)

media-descriptions =  *( media-field
                         information-field
                         *connection-field
                         bandwidth-fields
                         key-field
                         attribute-fields )

media-field =         %x6d "=" media SP port ["/" integer]
                         SP proto 1*(SP fmt) CRLF

username =            non-ws-string
                         ;pretty wide definition, but doesn't
                         ;include space

sess-id =             1*DIGIT
                         ;should be unique for this username/host

sess-version =        1*DIGIT

nettype =             token
                         ;typically "IN"

addrtype =            token
                         ;typically "IP4" or "IP6"

uri =                 URI-reference
                         ; see RFC 3986

email-address        = address-and-comment / dispname-and-address
                          / addr-spec
address-and-comment  = addr-spec 1*SP "(" 1*email-safe ")"
dispname-and-address = 1*email-safe 1*SP "<" addr-spec ">"

phone-number =        phone *SP "(" 1*email-safe ")" /
                         1*email-safe "<" phone ">" /
                         phone

phone =               ["+"] DIGIT 1*(SP / "-" / DIGIT)

connection-address =  multicast-address / unicast-address
bwtype =              token

bandwidth =           1*DIGIT

start-time =          time / "0"

stop-time =           time / "0"

time =                POS-DIGIT 9*DIGIT
                         ; Decimal representation of NTP time in
                         ; seconds since 1900.  The representation
                         ; of NTP time is an unbounded length field
                         ; containing at least 10 digits.  Unlike the
                         ; 64-bit representation used elsewhere, time
                         ; in SDP does not wrap in the year 2036.

repeat-interval =     POS-DIGIT *DIGIT [fixed-len-time-unit]

typed-time =          1*DIGIT [fixed-len-time-unit]

fixed-len-time-unit = %x64 / %x68 / %x6d / %x73

key-type =            %x70 %x72 %x6f %x6d %x70 %x74 /     ; "prompt"
                         %x63 %x6c %x65 %x61 %x72 ":" text / ; "clear:"
                         %x62 %x61 %x73 %x65 "64:" base64 /  ; "base64:"
                         %x75 %x72 %x69 ":" uri              ; "uri:"

base64      =         *base64-unit [base64-pad]
base64-unit =         4base64-char
base64-pad  =         2base64-char "==" / 3base64-char "="
base64-char =         ALPHA / DIGIT / "+" / "/"

attribute =           (att-field ":" att-value) / att-field

att-field =           token

att-value =           byte-string

media =               token
                         ;typically "audio", "video", "text", or
                         ;"application"
fmt =                 token
                         ;typically an RTP payload type for audio
                         ;and video media

proto  =              token *("/" token)
                         ;typically "RTP/AVP" or "udp"

port =                1*DIGIT

unicast-address =     IP4-address / IP6-address / FQDN / extn-addr

multicast-address =   IP4-multicast / IP6-multicast / FQDN
                         / extn-addr

IP4-multicast =       m1 3( "." decimal-uchar )
                         "/" ttl [ "/" integer ]
                         ; IP4 multicast addresses may be in the
                         ; range 224.0.0.0 to 239.255.255.255

m1 =                  ("22" ("4"/"5"/"6"/"7"/"8"/"9")) /
                         ("23" DIGIT )

IP6-multicast =       IP6-address [ "/" integer ]
                         ; IP6 address starting with FF

ttl =                 (POS-DIGIT *2DIGIT) / "0"

FQDN =                4*(alpha-numeric / "-" / ".")
                         ; fully qualified domain name as specified
                         ; in RFC 1035 (and updates)

IP4-address =         b1 3("." decimal-uchar)

b1 =                  decimal-uchar
                         ; less than "224"

IP6-address =                                      6( h16 ":" ) ls32
                         /                       "::" 5( h16 ":" ) ls32
                         / [               h16 ] "::" 4( h16 ":" ) ls32
                         / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
                         / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
                         / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
                         / [ *4( h16 ":" ) h16 ] "::"              ls32
                         / [ *5( h16 ":" ) h16 ] "::"              h16
                         / [ *6( h16 ":" ) h16 ] "::"

h16 =                 1*4HEXDIG
ls32 =                ( h16 ":" h16 ) / IP4-address

extn-addr =      non-ws-string

text =                byte-string
                         ;default is to interpret this as UTF8 text.
                         ;ISO 8859-1 requires "a=charset:ISO-8859-1"
                         ;session-level attribute to be used

byte-string =         1*(%x01-09/%x0B-0C/%x0E-FF)
                         ;any byte except NUL, CR, or LF

non-ws-string =       1*(VCHAR/%x80-FF)
                         ;string of visible characters

token-char =          %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39
                         / %x41-5A / %x5E-7E

token =               1*(token-char)

email-safe =          %x01-09/%x0B-0C/%x0E-27/%x2A-3B/%x3D/%x3F-FF
                         ;any byte except NUL, CR, LF, or the quoting
                         ;characters ()<>

integer =             POS-DIGIT *DIGIT

alpha-numeric =       ALPHA / DIGIT

POS-DIGIT =           %x31-39 ; 1 - 9

decimal-uchar =       DIGIT
                         / POS-DIGIT DIGIT
                         / ("1" 2*(DIGIT))
                         / ("2" ("0"/"1"/"2"/"3"/"4") DIGIT)
                         / ("2" "5" ("0"/"1"/"2"/"3"/"4"/"5"))

