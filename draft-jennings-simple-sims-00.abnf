multimedia-message = email.  instant-message and page-message are
alphanum  =  ALPHA / DIGIT

reserved    =  ";" / "/" / "?" / ":" / "@" / "&" / "=" / "+"
                        / "$" / ","
unreserved  =  alphanum / mark
mark        =  "-" / "_" / "." / "!" / "~" / "*" / "'"
                        / "(" / ")"
escaped     =  "%" HEXDIG HEXDIG

token       =  1*(alphanum / "-" / "." / "!" / "%" / "*"
                        / "_" / "+" / "`" / "'" / "~" )

quoted-string  =  SWS DQUOTE *(qdtext / quoted-pair ) DQUOTE
qdtext         =  LWS / %x21 / %x23-5B / %x5D-7E
                           / UTF8-NONASCII
quoted-pair  =  "\" (%x00-09 / %x0B-0C / %x0E-7F)
LWS = 1*WSP
SWS = [LWS]

HCOLON = SWS ":" SWS

EQUAL   =  SWS "=" SWS ; equal
LPAREN  =  SWS "(" SWS ; left parenthesis
RPAREN  =  SWS ")" SWS ; right parenthesis
RAQUOT  =  ">" SWS ; right angle quote
LAQUOT  =  SWS "<"; left angle quote
COMMA   =  SWS "," SWS ; comma
SEMI    =  SWS ";" SWS ; semicolon
LDQUOT  =  SWS DQUOTE; open double quotation mark
RDQUOT  =  DQUOTE SWS ; close double quotation mark

TEXT-UTF8-TRIM  =  1*TEXT-UTF8char *(*LWS TEXT-UTF8char)
TEXT-UTF8char   =  %x21-7E / UTF8-NONASCII
UTF8-NONASCII   =  %xC0-DF 1UTF8-CONT
                         /  %xE0-EF 2UTF8-CONT
                         /  %xF0-F7 3UTF8-CONT
                         /  %xF8-Fb 4UTF8-CONT
                         /  %xFC-FD 5UTF8-CONT
UTF8-CONT       =  %x80-BF



SIMS-URI         =  "sims:" [ userinfo ] hostport
                       uri-parameters
userinfo         =  user  "@"
user             =  1*( unreserved / escaped / user-unreserved )
user-unreserved  =  "&" / "=" / "+" / "$" / "," / ";" / "?" / "/"
hostport         =  host [ ":" port ]
host             =  hostname / IPv4address / IPv6reference
hostname         =  *( domainlabel "." ) toplabel [ "." ]
domainlabel      =  alphanum
                       / alphanum *( alphanum / "-" ) alphanum
toplabel         =  ALPHA / ALPHA *( alphanum / "-" ) alphanum

IPv4address    =  1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT
IPv6reference  =  "[" IPv6address "]"
IPv6address    =  hexpart [ ":" IPv4address ]
hexpart        =  hexseq / hexseq "::" [ hexseq ] / "::" [ hexseq ]
hexseq         =  hex4 *( ":" hex4)
hex4           =  1*4HEXDIG
port           =  1*DIGIT

uri-parameters    =  *( ";" uri-parameter)
uri-parameter     =  transport-param /  method-param / other-param
transport-param   =  "transport="
                        ( "tcp" / "tls+tcp" / other-transport)
other-transport   =  token
method-param      =  "method=" Method
other-param       =  pname [ "=" pvalue ]
pname             =  1*paramchar
pvalue            =  1*paramchar
paramchar         =  param-unreserved / unreserved / escaped
param-unreserved  =  "[" / "]" / "/" / ":" / "&" / "+" / "$"


SIMS-parcel    =  Request / Response
Request        =  Request-Line
                     *( parcel-header )
                     CRLF
                     [ parcel-body ]
Request-Line   =  Method SP Request-URI SP SIMS-Version CRLF
Request-URI    =  SIMS-URI / anyURI
anyURI         =  scheme ":" *uric
scheme         =  ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
uric           =  reserved / unreserved / escaped
SIMS-Version   =  "SIMS" "/" 1*DIGIT "." 1*DIGIT

parcel-header  = ( Accept
                   /  Accept-Language
                   /  Allow
                   /  Authentication-Info
                   /  Authorization
                   /  Call-ID
                   /  Content-Disposition
                   /  Content-Language
                   /  Content-Length
                   /  Content-Type
                   /  Date
                   /  Delivery-Status
                   /  Error-Info
                   /  Expires
                   /  Max-Forwards
                   /  Message-Context
                   /  Message-Id
                   /  Min-Expires
                   /  Require
                   /  Retry-After
                   /  Route
                   /  Server
                   /  Supported
                   /  Thread-ID
                   /  Unsupported
                   /  User-Agent
                   /  Via
                   /  Warning
                   /  WWW-Authenticate
                   /  extension-header ) CRLF


CHUNKm          = %x43.48.55.4E.4B        ; CHUNK in caps
INFORMm         = %x49.4E.46.4F.52.4D     ; INFORM in caps
AUTHm           = %x41.55.54.48           ; AUTH in caps
Method          = CHUNKm / INFORMm / AUTHm
                        / extension-method

extension-method  =  token

Response          =  Status-Line
                        *( message-header )
                        CRLF
                        [ message-body ]

Status-Line     =  SIMS-Version SP Status-Code SP Reason-Phrase CRLF
Status-Code     =  Success
                  /   Client-Error
                  /   Server-Error
                  /   Global-Failure
                  /   extension-code
extension-code  =  3DIGIT
Reason-Phrase   =  *(reserved / unreserved / escaped
                      / UTF8-NONASCII / UTF8-CONT / SP / HTAB)

Success  =  "200"  ;  OK
            /  "202"  ;  Accepted

Client-Error  =  "400"  ;  Bad Request
                /   "401"  ;  Unauthorized
                /   "402"  ;  Payment Required
                /   "403"  ;  Forbidden
                /   "404"  ;  Not Found
                /   "405"  ;  Method Not Allowed
                /   "406"  ;  Not Acceptable
                /   "408"  ;  Request Timeout
                /   "409"  ;  Puzzle Required
                /   "410"  ;  Gone
                /   "413"  ;  Request Entity Too Large
                /   "414"  ;  Request-URI Too Large
                /   "415"  ;  Unsupported Media Type
                /   "416"  ;  Unsupported URI Scheme
                /   "420"  ;  Bad Extension
                /   "421"  ;  Extension Required
                /   "423"  ;  Interval Too Brief
                /   "480"  ;  Temporarily not available
                /   "481"  ;  Message/Transaction Does Not Exist
                /   "482"  ;  Loop Detected
                /   "483"  ;  Too Many Hops
                /   "488"  ;  Not Acceptable Here
                /   "491"  ;  Request Pending
                /   "493"  ;  Undecipherable

Server-Error  =  "500"  ;  Internal Server Error
                /   "501"  ;  Not Implemented
                /   "503"  ;  Service Unavailable
                /   "504"  ;  Server Time-out

Global-Failure = "603"  ;  Decline


Accept         =  "Accept" HCOLON
                      [ accept-range *(COMMA accept-range) ]
accept-range   =  media-range *(SEMI accept-param)
media-range    =  ( "*/*"
                     / ( m-type "/" "*" )
                     / ( m-type "/" m-subtype )
                     ) *( SEMI m-parameter )
accept-param   =  ("q" EQUAL qvalue) / generic-param
qvalue         =  ( "0" [ "." 0*3DIGIT ] )
                     / ( "1" [ "." 0*3("0") ] )
generic-param  =  token [ EQUAL gen-value ]
gen-value      =  token / host / quoted-string

Accept-Language  =  "Accept-Language" HCOLON
                        [ language *(COMMA language) ]
language         =  language-range *(SEMI accept-param)
language-range   =  ( ( 1*8ALPHA *( "-" 1*8ALPHA ) ) / "*" )

Allow            =  "Allow" HCOLON [Method *(COMMA Method)]

Authentication-Info  =  "Authentication-Info" HCOLON ainfo
                           *(COMMA ainfo)
ainfo                =  nextnonce / message-qop
                            / response-auth / cnonce
                            / nonce-count
nextnonce            =  "nextnonce" EQUAL nonce-value
response-auth        =  "rspauth" EQUAL response-digest
response-digest      =  LDQUOT *LHEX RDQUOT

Authorization     =  "Authorization" HCOLON credentials
credentials       =  ("Digest" LWS digest-response)
                        / other-response
digest-response   =  dig-resp *(COMMA dig-resp)
dig-resp          =  username / realm / nonce / digest-uri
                         / dresponse / algorithm / cnonce
                         / opaque / message-qop
                         / nonce-count / auth-param
username          =  "username" EQUAL username-value
username-value    =  quoted-string
digest-uri        =  "uri" EQUAL LDQUOT digest-uri-value RDQUOT
digest-uri-value  =  rquest-uri ; Equal to request-uri as specified
                        by HTTP/1.1
message-qop       =  "qop" EQUAL qop-value
cnonce            =  "cnonce" EQUAL cnonce-value
cnonce-value      =  nonce-value
nonce-count       =  "nc" EQUAL nc-value
nc-value          =  8LHEX
dresponse         =  "response" EQUAL request-digest
request-digest    =  LDQUOT 32LHEX RDQUOT
auth-param        =  auth-param-name EQUAL
                        ( token / quoted-string )
auth-param-name   =  token
other-response    =  auth-scheme LWS auth-param
                        *(COMMA auth-param)
auth-scheme       =  token
LHEX              =  DIGIT / %x61-66 ;lowercase a-f
Call-ID           =  "Message-ID" HCOLON msgid
msgid             =  token [ "@" token ]

Content-Disposition   =  "Content-Disposition" HCOLON
                            disp-type *( SEMI disp-param )
disp-type             =  "render" / "status" /
                            disp-extension-token
disp-param            =  handling-param / generic-param
handling-param        =  "handling" EQUAL
                            ( "optional" / "required"
                            / other-handling )
other-handling        =  token
disp-extension-token  =  token

Content-Language  =  "Content-Language" HCOLON
                        language-tag *(COMMA language-tag)
language-tag      =  primary-tag *( "-" subtag )
primary-tag       =  1*8ALPHA
subtag            =  1*8ALPHA

Content-Length   =  "Content-Length" HCOLON 1*DIGIT
Content-Type     =  "Content-Type" HCOLON media-type
media-type       =  m-type "/" m-subtype *(SEMI m-parameter)
m-type           =  discrete-type / composite-type
discrete-type    =  "text" / "image" / "audio" / "video"
                       / "application" / extension-token
composite-type   =  "message" / "multipart" / extension-token
extension-token  =  ietf-token / x-token
ietf-token       =  token
x-token          =  "x-" token
m-subtype        =  extension-token / iana-token
iana-token       =  token
m-parameter      =  m-attribute EQUAL m-value
m-attribute      =  token
m-value          =  token / quoted-string

Date          =  "Date" HCOLON rfc1123-date
rfc1123-date  =  wkday "," SP date1 SP time SP "GMT"
date1         =  2DIGIT SP month SP 4DIGIT
                    ; day month year (e.g., 02 Jun 1982)
time          =  2DIGIT ":" 2DIGIT ":" 2DIGIT
                    ; 00:00:00 - 23:59:59
wkday         =  "Mon" / "Tue" / "Wed"
                    / "Thu" / "Fri" / "Sat" / "Sun"
month         =  "Jan" / "Feb" / "Mar" / "Apr"
                    / "May" / "Jun" / "Jul" / "Aug"
                    / "Sep" / "Oct" / "Nov" / "Dec"
Delivery-Status =  "Delivery-Status" HCOLON msgstat
                      *(SEMI delivery-params)
msgstat         =  "ok" / "stored" / "failure" / "delay" / token
delivery-params =  delivery-range / deliver-err /
                      delivery-retry / generic-param
delivery-range  =  "range" EQUAL
                      ("*" / ( begin-range "-" end-range ))
begin-range     =  1*DIGIT
end-range       =  1*DIGIT
delivery-err    =  "error" EQUAL ( token / quoted-string )
delivery-retry  =  "retry-after" EQUAL delta-seconds
delta-seconds   =  1*DIGIT

Error-Info      =  "Error-Info" HCOLON info *(COMMA info)
info            =  LAQUOT anyURI RAQUOT *( SEMI generic-param)

Expires         =  "Expires" HCOLON delta-seconds

Max-Forwards    =  "Max-Forwards" HCOLON 1*DIGIT

Message-ID      =  "Message-ID" HCOLON msgid

MIME-Version  =  "MIME-Version" HCOLON 1*DIGIT "." 1*DIGIT

Min-Expires  =  "Min-Expires" HCOLON delta-seconds

Priority        =  "Priority" HCOLON priority-value
priority-value  =  "emergency" / "urgent" / "normal"
                      / "non-urgent" / other-priority
other-priority  =  token

Require      =  "Require" HCOLON option-tag *(COMMA option-tag)
option-tag   =  token

Retry-After  =  "Retry-After" HCOLON delta-seconds
                   *( SEMI retry-param )
retry-param  =  ("duration" EQUAL delta-seconds)
                   / generic-param

Route        =  "Route" HCOLON route-param *(COMMA route-param)
route-param  =  LAQUOT SIMS-URI RAQUOT

Server           =  "Server" HCOLON server-val *(LWS server-val)
server-val       =  product / comment
product          =  token ["/" product-version]
product-version  =  token
comment          =  LPAREN *(ctext / quoted-pair / comment) RPAREN
ctext            =  %x21-27 / %x2A-5B / %x5D-7E / UTF8-NONASCII
                       / LWS

Supported   =  "Supported" HCOLON option-tag *(COMMA option-tag)

Thread-ID   =  "Thread-ID" HCOLON msgid

Unsupported =  "Unsupported" HCOLON option-tag *(COMMA option-tag)

User-Agent  =  "User-Agent" HCOLON server-val *(LWS server-val)

Via               =  "Via" HCOLON via-parm *(COMMA via-parm)
via-parm          =  sent-protocol LWS sent-by *( SEMI via-params )
via-params        =    via-received / via-branch
                        / via-extension
via-received      =  "received" EQUAL connection-handle
connection-handle =  token / hostport / quoted-string
via-branch        =  "branch" EQUAL token
via-extension     =  generic-param
sent-protocol     =  protocol-name "/" protocol-version
                        "/" transport
protocol-name     =  "SIMS" / token
protocol-version  =  token
transport         =  "TCP" / "TLS+TCP" / other-transport
sent-by           =  host [ ":" port ]

Warning        =  "Warning" HCOLON warning-value
                      *(COMMA warning-value)
warning-value  =  warn-code SP warn-agent SP warn-text
warn-code      =  3DIGIT
warn-agent     =  hostport / pseudonym
                     ;  the name or pseudonym of the server adding
                     ;  the Warning header, for use in debugging
warn-text      =  quoted-string
pseudonym      =  token

WWW-Authenticate  =  "WWW-Authenticate" HCOLON challenge
challenge           =  ("Digest" LWS digest-cln *(COMMA digest-cln))
                          / other-challenge
other-challenge     =  auth-scheme LWS auth-param
                          *(COMMA auth-param)
digest-cln          =  realm / domain / nonce
                           / opaque / stale / algorithm
                           / qop-options / auth-param
realm               =  "realm" EQUAL realm-value
realm-value         =  quoted-string
domain              =  "domain" EQUAL LDQUOT URI
                          *( 1*SP URI ) RDQUOT
URI                 =  SIMS-URI / anyURI
nonce               =  "nonce" EQUAL nonce-value
nonce-value         =  quoted-string
opaque              =  "opaque" EQUAL quoted-string
stale               =  "stale" EQUAL ( "true" / "false" )
algorithm           =  "algorithm" EQUAL ( "MD5" / "MD5-sess"
                          / token )
qop-options         =  "qop" EQUAL LDQUOT qop-value
                          *("," qop-value) RDQUOT
qop-value           =  "auth" / token

extension-header  =  header-name HCOLON header-value
header-name       =  token
header-value      =  *(TEXT-UTF8char / UTF8-CONT / LWS)
parcel-body       =  *OCTET



m = <media> <port> <protocol> <format-list>


accept-types       = accept-types-label ":" format-list
accept-types-label = "accept-types"
format-list        = format-entry *( SP format-entry)
format-entry       = (type "/" subtype)
type               = token
subtype            = token

hop-attribute = hop-label ":" sims-url
hop-label = "hop"

c=IN IP4 invalid.none
m=message 1234 sims/tcp+tls alice@alice.example.com
a=accept: message/cpim text/plain text/html
a=hop:sims:magic456@a.example.com:1234;transport=tcp+tls


c=IN IP4 invalid.none
m=message 1234 sims/tcp+tls bob@bob.example.com
a=accept: message/cpim text/plain
a=hop:sims:magic789@b1.example.com:1234;transport=tcp+tls
a=hop:sims:magic012@b2.example.com:1234;transport=tcp+tls


c=IN IP4 invalid.none
m=message 1234 sims/tcp+tls alice@pc2.example.com
a=accept-types:text/plain message/cpim



c=IN IP4 invalid.none
m=message 1234 sims/tcp+tls bob@pc1.example.com
a=accept-types:text/plain
realm="testrealm@host.com",
qop="auth",
nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
opaque="5ccc069c403ebaf9f0171e9517f40e41"



realm="testrealm@host.com",
nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
uri="sims:r1.example.com",
qop=auth,
nc=00000001,
cnonce="0a4f113b",
response="6629fae49393a05397450978507c4ef1",
opaque="5ccc069c403ebaf9f0171e9517f40e41"




realm="testrealm@host.com",
qop="auth",
nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
opaque="5ccc069c403ebaf9f0171e9517f40e41"
realm="testrealm@host.com",
nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
uri="sims:r3.example.com",
qop=auth,
nc=00000001,
cnonce="0a4f113b",
response="6629fae49393a05397450978507c4ef1",
opaque="5ccc069c403ebaf9f0171e9517f40e41"



realm="testrealm@host.com",
qop="auth",
nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
opaque="5ccc069c403ebaf9f0171e9517f40e41"




realm="testrealm@host.com",
qop="auth",
nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
opaque="5ccc069c403ebaf9f0171e9517f40e41"



realm="testrealm@host.com",
nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
uri="sims:r2.example.com",
qop=auth,
nc=00000001,
cnonce="0a4f113b",
response="6629fae49393a05397450978507c4ef1",
opaque="5ccc069c403ebaf9f0171e9517f40e41"



realm="testrealm@host.com",
nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
uri="sims:r2.example.com",
qop=auth,
nc=00000001,
cnonce="0a4f113b",
response="6629fae49393a05397450978507c4ef1",
opaque="5ccc069c403ebaf9f0171e9517f40e41"



c=IN IP4 invalid.none
m=message 1234 sims/tcp+tls alice@pc2.example.com
a=accept-types:text/plain message/cpim
a=hop:sims:saiulfywifucbscb@r1.example.com
a=hop:sims:eioweoerhgerofef@r2.example.com



c=IN IP4 invalid.none
m=message 1234 sims/tcp+tls bob@pc1.example.com
a=accept-types:text/plain
a=hop:sims:skusblfygwuhrwuh@r3.example.com



