





Internet Engineering Task Force                            S. Hollenbeck
Internet-Draft                                            VeriSign, Inc.
April 9, 2001                                   Expires: October 9, 2001

                    Extensible Provisioning Protocol
                    <draft-ietf-provreg-epp-01.txt>

Status of this Memo

  This document is an Internet-Draft and is in full conformance with all
  provisions of Section 10 of RFC2026.

  Internet-Drafts are working documents of the Internet Engineering Task
  Force (IETF), its areas, and its working groups.  Note that other
  groups may also distribute working documents as Internet-Drafts.

  Internet-Drafts are draft documents valid for a maximum of six months
  and may be updated, replaced, or obsoleted by other documents at any
  time.  It is inappropriate to use Internet-Drafts as reference
  material or to cite them other than as "work in progress".

  The list of current Internet-Drafts can be accessed at
  http://www.ietf.org/ietf/1id-abstracts.txt

  The list of Internet-Draft Shadow Directories can be accessed at
  http://www.ietf.org/shadow.html.

Abstract

  This document describes a connection-oriented, application layer
  client-server protocol for the provisioning and management of objects
  stored in a shared central repository.  Specified in XML, the protocol
  defines generic object management operations and an extensible
  framework that maps protocol operations to objects.

Conventions Used In This Document

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in [RFC2119].

  In examples, "C:" represents lines sent by a protocol client and "S:"
  represents lines returned by a protocol server.  Indentation and white
  space in examples is provided only to illustrate element relationships
  and is not a REQUIRED feature of this protocol.

  XML protocol elements are case sensitive.  Data carried in XML is case
  insensitive unless stated otherwise.



Hollenbeck              Expires October 9, 2001                 [Page 1]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


Table of Contents

  1. Introduction .................................................    3
  2. Protocol Description .........................................    4
  2.1 Protocol Identification .....................................    5
  2.2 Hello Format ................................................    5
  2.3 Greeting Format .............................................    5
  2.4 Command Format ..............................................    6
  2.5 Response Format .............................................    8
  2.6 Protocol Extension Framework ................................   12
  2.7 Server-Defined Extensions ...................................   12
  2.8 Object Identification .......................................   13
  2.9 Protocol Commands ...........................................   14
  2.9.1 Session Management Commands ...............................   14
  2.9.1.1 EPP <login> Command .....................................   14
  2.9.1.2 EPP <logout> Command ....................................   17
  2.9.2 Object Query Commands .....................................   18
  2.9.2.1 EPP <check> Command .....................................   18
  2.9.2.2 EPP <info> Command ......................................   20
  2.9.2.3 EPP <poll> Command ......................................   22
  2.9.2.4 EPP <transfer> Query Command ............................   25
  2.9.3 Object Transform Commands .................................   27
  2.9.3.1 EPP <create> Command ....................................   28
  2.9.3.2 EPP <delete> Command ....................................   29
  2.9.3.3 EPP <renew> Command .....................................   31
  2.9.3.4 EPP <transfer> Command ..................................   32
  2.9.3.5 EPP <update> Command ....................................   35
  3. Result Codes .................................................   37
  4. Formal Syntax ................................................   43
  4.1 Base Schema .................................................   43
  4.2 Shared Structure Schema .....................................   51
  5. Internationalization Considerations ..........................   53
  6. IANA Considerations ..........................................   54
  7. Security Considerations ......................................   55
  8. References ...................................................   56
  9. Author's Address .............................................   58
  A. Revision History .............................................   59
  B. Full Copyright Statement .....................................   60
  C: Object Mapping Outline .......................................   61












Hollenbeck              Expires October 9, 2001                 [Page 2]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


1. Introduction

  This document describes specifications for the Extensible Provisioning
  Protocol (EPP) version 1.0, an XML text protocol that permits multiple
  service providers to perform object provisioning operations using a
  shared central object repository.  EPP is specified using the
  Extensible Markup Language (XML) 1.0 as described in [XML] and XML
  Schema notation as described in [XMLS-1] and [XMLS-2].  EPP meets and
  exceeds the requirements for a generic registry registrar protocol as
  described in [GRRP].

  XML Schema is not yet a full W3C recommended specification.  EPP
  schema changes MAY be required as XML Schema moves through the W3C
  standards process.

  XML is case sensitive.  XML specifications and examples provided in
  this document MUST be interpreted in the exact character case
  presented to develop a conforming implementation.

  This document is being discussed on the "ietf-provreg" mailing list.
  To join the list, send a message to <majordomo@cafax.se> with the
  words "subscribe ietf-provreg" in the body of the message.  There is a
  web site for the list archives at http://www.cafax.se/ietf-provreg.




























Hollenbeck              Expires October 9, 2001                 [Page 3]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


2. Protocol Description

  EPP is an XML protocol that can be layered over multiple transport
  protocols.  Protected using lower-layer security protocols, clients
  exchange identification, authentication, and option information, and
  then engage in a series of client-initiated command-response
  exchanges.  All EPP commands are atomic and idempotent.

  EPP provides four basic service elements: service discovery, commands,
  responses, and an extension framework that supports definition of
  managed objects and the relationship of protocol requests and
  responses to those objects.

  A connection-oriented EPP server MUST respond to connection creation
  by returning a greeting to the client.  The client SHOULD wait for the
  greeting before sending an EPP command to the server.  The server MUST
  respond to each EPP command with a coordinated response that describes
  the results of processing the command.

  EPP commands fall into three categories: session management commands,
  query commands, and data transform commands.  Session management
  commands are used to establish and end sessions with an EPP server.
  Query commands are used to perform read-only, object-based information
  retrieval operations.  Transform commands are used to perform read-
  write object management operations.

  EPP uses XML namespaces to provide an extensible object management
  framework and to identify schemas required for XML instance parsing
  and validation.  These namespaces and schema definitions are used to
  identify both the base protocol schema and the schemas for managed
  objects.

  All XML instances MUST begin with an <?xml?> processing instruction to
  identify the version of XML that is being used, to provide a hint to
  the XML parser that a schema file is needed to validate the XML
  instance, and optionally to explicitly identify use of the UTF-8
  character set defined in [RFC2279].  Character sets other than UTF-8
  MUST NOT be used with EPP.

  Example XML processing instructions:

  <?xml version="1.0" standalone="no" encoding="UTF-8"?>

  <?xml version="1.0" standalone="no"?>

  These processing instructions identify the XML version as "1.0",
  provide an XML parser hint that all of the information needed to
  validate the XML instance is not included in the XML instance, and



Hollenbeck              Expires October 9, 2001                 [Page 4]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  specify UTF-8 character encoding.  XML parsers are REQUIRED to
  understand UTF-8, thus the "encoding" attribute is OPTIONAL and MAY be
  absent.

2.1 Protocol Identification

  All XML instances of EPP MUST begin with an <epp> element.  This
  element identifies the start of an EPP protocol element, the namespace
  used within the protocol, and the location of the protocol schema.
  This start element and the associated ending element MUST be applied
  to all greetings, commands, and responses sent by both clients and
  servers.

  Example "start" and "end" EPP elements:

  <epp xmlns="urn:iana:xml:ns:epp"
       xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
       xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  </epp>

2.2 Hello Format

  EPP MAY be carried over both connection-oriented and connection-less
  transport protocols.  An EPP client MAY request a <greeting> from an
  EPP server at any time by sending a <hello> to a server.  Use of this
  element is essential in a connection-less environment where a server
  can not return a <greeting> in response to a client-initiated
  connection.  An EPP <hello> SHALL be an empty element with no child
  elements.

  Example <hello>:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <hello/>
  C:</epp>

2.3 Greeting Format

  An EPP server responds to a successful connection and <hello> element
  by returning a <greeting> element to the client.  An EPP greeting
  SHALL contain the following elements:

  - An <svID> element that contains the name of the server.

  - An <svDate> element that contains the server's current date and time



Hollenbeck              Expires October 9, 2001                 [Page 5]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  in UTC.

  - An <svcMenu> element that identifies the services supported by the
  server, including:

    - One or more <version> elements that contain the protocol versions
    supported by the server.

    - One or more <lang> elements that contain the identifiers of the text
    response languages known by the server.  Language identifiers MUST be
    structured as documented in [RFC3066].  Only language identifiers
    listed in [ISO639] MAY be used.

    - One or more object-specific <obj:svc> elements that identify
    the objects that the server is capable of managing.

  A server MAY limit object management privileges on a per-client basis.

  Example greeting:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <greeting>
  S:    <svID>Example EPP server epp.example.com</svID>
  S:    <svDate>2000-06-08T22:00:00.0Z</svDate>
  S:    <svcMenu>
  S:      <version>1.0</version>
  S:      <lang>en-US</lang>
  S:      <lang>fr</lang>
  S:      <obj1:svc xmlns:obj1="urn:iana:xml:ns:obj1"
  S:       xsi:schemaLocation="urn:iana:xml:ns:obj1 obj1.xsd"/>
  S:      <obj2:svc xmlns:obj2="urn:iana:xml:ns:obj2"
  S:       xsi:schemaLocation="urn:iana:xml:ns:obj2 obj2.xsd"/>
  S:      <obj3:svc xmlns:obj3="urn:iana:xml:ns:obj3"
  S:       xsi:schemaLocation="urn:iana:xml:ns:obj3 obj3.xsd"/>
  S:    </svcMenu>
  S:  </greeting>
  S:</epp>

2.4 Command Format

  An EPP client interacts with an EPP server by sending commands to the
  server and receiving responses from the server.  Commands and
  responses need not be exchanged serially.  In addition to the standard
  EPP elements, an EPP command SHALL contain the following elements:




Hollenbeck              Expires October 9, 2001                 [Page 6]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  - A <creds> (client identity credentials) element that provides client
  identity information.  Use of this element MAY be OPTIONAL or REQUIRED
  depending on how the client wishes to manage sessions with the server.
  A <creds> element SHALL contain the following elements:

    - A <clID> element that contains the client identifier assigned to
    the client by the server.

    - A <pw> element that contains the client's plain text password.
    The value of this element is case sensitive.

    - An OPTIONAL <newPW> element that contains a new plain text
    password to be assigned to the client for use with subsequent
    <creds> elements. The value of this element is case sensitive.

    - An <options> element that contains the following child elements:

      - A <version> element that contains the protocol version to be
      used for the command or ongoing server session.

      - A <lang> element that contains the text response language to
      be used for the command or ongoing server session commands.

      The values of the <version> and <lang> elements MUST exactly
      match one of the values presented in the EPP greeting.

  - A command element whose tag corresponds to one of the valid EPP
  commands described in this document.  The command element MAY contain
  either protocol-specified or object-specified child elements.

  - An OPTIONAL <unspec> (unspecified) element that MAY be used for
  server-defined command extensions.

  - A <clTRID> (client transaction identifier) element that uniquely
  identifies the command to the client.

  EPP supports both session-less and session-oriented operating modes,
  though the two operating modes MAY NOT be mixed.  An ongoing server
  session that preserves client identity and authorization information
  MAY be created and ended using the <login> and <logout> commands.
  Commands MAY also be executed outside of an established session
  through use of the <creds> element within the command.

  Session-less operation implies that object service availability and
  client identity MUST be checked on a per-command basis.  Significant
  improvements in server processing performance MAY be realized using
  the protocol's session-oriented operating mode.




Hollenbeck              Expires October 9, 2001                 [Page 7]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001



  Example command without credentials:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <command>
  C:    <info>
  C:      <obj:info xmlns:obj="urn:iana:xml:ns:obj"
  C:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  C:        <obj:name>example</obj:name>
  C:      </obj:info>
  C:    </info>
  C:    <unspec/>
  C:    <clTRID>ABC-12345</clTRID>
  C:  </command>
  C:</epp>


  Example command with credentials:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <command>
  C:    <creds>
  C:      <clID>ClientX</clID>
  C:      <pw>foo-BAR2</pw>
  C:      <newPW>bar-FOO2</newPW>
  C:      <options>
  C:        <version>1.0</version>
  C:        <lang>en-US</lang>
  C:      </options>
  C:    </creds>
  C:    <info>
  C:      <obj:info xmlns:obj="urn:iana:xml:ns:obj"
  C:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  C:        <obj:name>example</obj:name>
  C:      </obj:info>
  C:    </info>
  C:    <unspec/>
  C:    <clTRID>ABC-12345</clTRID>
  C:  </command>
  C:</epp>

2.5 Response Format



Hollenbeck              Expires October 9, 2001                 [Page 8]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  An EPP server responds to a client command by returning a response to
  the client.  EPP commands are atomic, so a command must either succeed
  completely or fail completely.  Success and failure results MUST NOT
  be mixed.  In addition to the standard EPP elements, an EPP response
  SHALL contain the following elements:

  - One or more <result> elements that document the success or failure
  of command execution.  If the command was processed successfully, only
  one <result> element SHALL be returned.  If the command was not
  processed successfully, multiple <result> elements MAY be returned to
  document failure conditions.  Each <result> element SHALL contain the
  following attribute and child elements:

  - An OPTIONAL <msgQ> element containing a "count" attribute that
  identifies the number of service messages queued for client retrieval.
  If there are no queued messages, this element MAY be missing or empty,
  and the value of the "count" attribute SHALL be zero.  The default
  value for the "count" attribute MUST be zero if unspecified.

    - A "code" attribute whose value is a four-digit, decimal number
    that describes the success or failure of the command.

    - A <msg> element containing a human-readable description of the
    response code.  The language of the response is identified via an
    OPTIONAL "lang" attribute.  If not specified, the default attribute
    value SHALL be "en-US".  An OPTIONAL "id" attribute MAY be present
    when responding to an EPP <poll> command.  See the description of
    the <poll> command for more information describing the server
    message queue.

    - Zero or more OPTIONAL <value> elements that echo client-provided
    values that caused server error conditions.

  - An OPTIONAL <resData> (response data) element that contains child
  elements specific to the command and associated object.

  - An OPTIONAL <unspec> (unspecified) element that MAY be used for
  server-defined response extensions.

  - A <trID> (transaction identifier) element containing the transaction
  identifier assigned by the server to the command for which the
  response is being returned.  The transaction identifier is formed
  using the <clTRID> associated with the command as supplied by the
  client and a <svTRID> (server transaction identifier) that is assigned
  by and unique to the server.

  Transaction identifiers provide command-response synchronization
  integrity.  They MUST be logged, retained, and protected to ensure



Hollenbeck              Expires October 9, 2001                 [Page 9]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  that both the client and the server have consistent temporal and state
  management records.  Their uniqueness and required longevity also
  makes them useful as authorization identifiers for EPP commands that
  require inter-client knowledge of object sponsorship.

  Example response without <value> or <resData>:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1000">
  S:      <msg lang="en-US">Command completed successfully</msg>
  S:    </result>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12345</clTRID>
  S:      <svTRID>54321-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>


  Example response with <resData>:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1000">
  S:      <msg>Command completed successfully</msg>
  S:    </result>
  S:    <resData>
  S:      <obj:creData xmlns:obj="urn:iana:xml:ns:obj"
  S:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  S:        <obj:name>example</obj:name>
  S:      </obj:creData>
  S:    </resData>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12345</clTRID>
  S:      <svTRID>54321-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>




Hollenbeck              Expires October 9, 2001                [Page 10]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001



  Example response with error <value>:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="2005">
  S:      <msg>Parameter value range error</msg>
  S:      <value>2525</value>
  S:    </result>
  S:    <result code="2006">
  S:      <msg>Parameter value syntax error</msg>
  S:      <value>ex(ample</value>
  S:      <value>abc.ex(ample</value>
  S:    </result>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12345</clTRID>
  S:      <svTRID>54321-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>


  Example response with notice of waiting server messages:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1000">
  S:      <msg>Command completed successfully</msg>
  S:    </result>
  S:    <msgQ count="4"/>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12345</clTRID>
  S:      <svTRID>54321-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>

  Command success or failure MUST NOT be assumed if no response is
  returned or if a returned response is malformed.  Protocol idempotency
  ensures the safety of retrying a command in cases of response failure.



Hollenbeck              Expires October 9, 2001                [Page 11]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


2.6 Protocol Extension Framework

  EPP provides an extensible object management framework that defines
  the syntax and semantics of protocol operations applied to a managed
  object.  This framework pushes the definition of each protocol
  operation into the context of a specific object, providing the ability
  to add mappings for new objects without having to modify the base
  protocol.

  Protocol elements that contain data specific to objects are identified
  using XML namespace notation with a reference to an XML schema that
  defines the namespace.  The schema for EPP supports use of dynamic
  object schemas on a per-command and per-response basis.  For example,
  the start of an object-specific command element would be described in
  generic terms as follows:

  C:<EPPCommandName>
  C:  <object:command xmlns:object="urn:iana:xml:ns:object"
  C:   xsi:schemaLocation="urn:iana:xml:ns:object object.xsd">
  C:    <!-- One or more object-specific command elements. -->
  C:  </object:command>
  C:</EPPCommandName>

  An object-specific response element would be described similarly:

  S:<resData>
  S:  <object:resData xmlns:object="urn:iana:xml:ns:object"
  S:   xsi:schemaLocation="urn:iana:xml:ns:object object.xsd">
  S:    <!-- One or more object-specific response elements. -->
  S:  </object:resData>
  S:</resData>

  This document does not define mappings for specific objects.  The
  mapping of EPP to an object MUST be described in separate documents
  that specifically address each command and response in the context of
  the object.  A suggested object mapping outline is included as an
  appendix to this document.

2.7 Server-Defined Extensions

  EPP provides a facility for unspecified protocol command and response
  extensions.  Protocol commands and responses MAY be extended by an
  <unspec> element that contains additional elements whose syntax and
  semantics are not explicitly defined by EPP or an EPP object mapping.
  This element is OPTIONAL and MAY be empty. These extensions are
  typically defined by agreement between client and server and MAY be
  used to extend EPP for unique operational needs.  For example, a
  server-extended command element would be described in generic terms as



Hollenbeck              Expires October 9, 2001                [Page 12]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  follows:

  C:<EPPCommandName>
  C:  <object:command xmlns:object="urn:iana:xml:ns:object"
  C:   xsi:schemaLocation="urn:iana:xml:ns:object object.xsd">
  C:    <!-- One or more object-specific command elements. -->
  C:  </object:command>
  C:  <unspec>
  C:    <!-- One or more server-defined elements. -->
  C:  </unspec>
  C:</EPPCommandName>

  An server-extended response element would be described similarly:

  S:<response>
  S:  <result code="1000">
  S:    <msg lang="en-US">Command completed successfully</msg>
  S:  </result>
  S:  <unspec>
  S:    <!-- One or more server-defined elements. -->
  S:  </unspec>
  S:  <trID>
  S:    <clTRID>ABC-12345</clTRID>
  S:    <svTRID>54321-XYZ</svTRID>
  S:  </trID>
  S:</response>

  This document does not define any specific server extensions.  The
  mapping of server extensions to EPP MUST be described in separate
  documents that specifically address extended commands and responses in
  the server's operational context.

2.8 Object Identification

  Some objects, such as name servers and contacts, MAY have utility in
  multiple repositories.  However, maintaining disjoint copies of object
  information in multiple repositories can lead to inconsistencies that
  have adverse consequences for the Internet.  For example, changing a
  name server name in one repository, but not in a second repository
  that refers to the server for domain name delegation, can produce
  unexpected DNS query results.

  Globally unique identifiers can help facilitate object information
  sharing between repositories.  A globally unique identifier MUST be
  assigned to every object when the object is created, and the
  identifier MUST be returned within the response for the command that
  created the object.  Specific identifier values are a matter of
  repository policy, but they SHOULD be constructed according to the



Hollenbeck              Expires October 9, 2001                [Page 13]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  following algorithm:

  a) Divide the provisioning repository world into a number of object
  repository classes.

  b) Each repository within a class is assigned an identifier that is
  maintained by IANA.

  (c) Each repository is responsible for assigning a unique local
  identifier for each object within the repository.

  (d) The globally unique identifier is a concatenation of the local
  identifier and the repository identifier.

2.9 Protocol Commands

  EPP provides commands to manage sessions, retrieve object information,
  and perform transformation operations on objects.  All EPP commands
  are atomic and idempotent, either succeeding completely or failing
  completely and producing predictable results in case of repeated
  execution.  This section describes each EPP command, including
  examples with representative server responses.

2.9.1 Session Management Commands

  EPP provides two commands for session management: <login> to establish
  a session with a server, and <logout> to end a session with a server.
  The <login> command establishes an ongoing server session that
  preserves client identity and authorization information during the
  duration of the session.  Alternatively, identity credentials MAY be
  provided with an EPP command to facilitate session-less operation.

  Session-oriented and session-less operating modes MUST NOT be mixed.
  Commands other than the <login> command MUST NOT include identity
  credentials when submitted after successfully processing a <login>
  command.

2.9.1.1 EPP <login> Command

  The EPP <login> command is used to establish a session with an EPP
  server in response to a greeting issued by the server.  A <login>
  command MUST be sent to a server before any other EPP command.

  A client identifier and initial password MUST be created on the server
  before a client can successfully complete a <login> command.  The
  client identifier and initial password MUST be delivered to the client
  using an out-of-band method that protects the identifier and password
  from inadvertent disclosure.



Hollenbeck              Expires October 9, 2001                [Page 14]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  A <creds> element MUST be provided with the <login> command.  Once a
  session has been established with the <login> command, subsequent
  commands MUST NOT include a <creds> element.

  In addition to the standard EPP command elements, the <login> command
  SHALL contain the following child elements:

  - A <svcs> element that contains one or more object <svc> elements
  that identify the objects to be managed during the session.

  The PLAIN SASL mechanism presented in [RFC2595] describes a format for
  providing a user identifier, an authorization identifier, and a
  password as part of a single plain text string.  The EPP
  authentication mechanism is similar, though EPP does not require a
  session-level authorization identifier and the user identifier and
  password are separated into distinct XML elements.  Additional
  identification and authorization schemes MUST be provided at other
  protocol layers to provide more robust security services.

































Hollenbeck              Expires October 9, 2001                [Page 15]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001



  Example <login> command:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <command>
  C:    <creds>
  C:      <clID>ClientX</clID>
  C:      <pw>foo-BAR2</pw>
  C:      <newPW>bar-FOO2</newPW>
  C:      <options>
  C:        <version>1.0</version>
  C:        <lang>en-US</lang>
  C:      </options>
  C:    </creds>
  C:    <login>
  C:      <svcs>
  C:        <contact:svc xmlns:contact="urn:iana:xml:ns:contact"
  C:         xsi:schemaLocation="urn:iana:xml:ns:contact contact.xsd"/>
  C:        <domain:svc xmlns:domain="urn:iana:xml:ns:domain"
  C:         xsi:schemaLocation="urn:iana:xml:ns:domain domain.xsd"/>
  C:        <host:svc xmlns:host="urn:iana:xml:ns:host"
  C:         xsi:schemaLocation="urn:iana:xml:ns:host host.xsd"/>
  C:      </svcs>
  C:    </login>
  C:    <unspec/>
  C:    <clTRID>ABC-12345</clTRID>
  C:  </command>
  C:</epp>

  When a <login> command has been processed successfully, a server MUST
  respond with an EPP response with no <resData> element.  If
  successful, the server will respond by creating and maintaining a new
  session that SHOULD be terminated by a future <logout> command.















Hollenbeck              Expires October 9, 2001                [Page 16]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001



  Example <login> response:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1000">
  S:      <msg>Command completed successfully</msg>
  S:    </result>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12345</clTRID>
  S:      <svTRID>54321-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>

  All clients MUST be authorized to use the <login> command.  A <login>
  command MUST be rejected if received within the bounds of an existing
  session.

2.9.1.2 EPP <logout> Command

  The EPP <logout> command is used to end a session with an EPP server.
  In addition to the standard EPP command elements, the <logout> command
  SHALL contain an empty <logout> command element.  A server MAY also
  end a session asynchronously due to client inactivity or excessive
  client session longevity.  The parameters for determining excessive
  client inactivity or session longevity are a matter of server policy
  and are not specified by this protocol.

  Example <logout> command:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <command>
  C:    <logout/>
  C:    <unspec/>
  C:    <clTRID>ABC-12345</clTRID>
  C:  </command>
  C:</epp>

  When a <logout> command has been processed successfully, a server MUST
  respond with an EPP response with no <resData> element.  If



Hollenbeck              Expires October 9, 2001                [Page 17]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  successful, the server MUST also end the current session.

  Example <logout> response:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1500">
  S:      <msg>Command completed successfully; ending session</msg>
  S:    </result>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12345</clTRID>
  S:      <svTRID>54321-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>

  All clients MUST be authorized to use the <logout> command.  A
  <logout> command MUST be rejected if the command has not been preceded
  by a <login> command.

2.9.2 Object Query Commands

  EPP provides four commands to retrieve object information: <check> to
  determine if an object is known to the server, <info> to retrieve
  detailed information associated with a known object, <poll> to receive
  service notifications from the server, and <transfer> to retrieve
  object transfer status information.

2.9.2.1 EPP <check> Command

  The EPP <check> command is used to determine if an object is known to
  the server.  The elements needed to identify an object are object-
  specific, so the child elements of the <check> command are specified
  using the EPP extension framework.  In addition to the standard EPP
  command elements, the <check> command SHALL contain the following
  child elements:

  - An object-specific <obj:check> element that identify the objects to
  be queried.  Multiple objects of the same type MAY be queried within a
  single <check> command.







Hollenbeck              Expires October 9, 2001                [Page 18]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001



  Example <check> command:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <command>
  C:    <check>
  C:      <obj:check xmlns:obj="urn:iana:xml:ns:obj"
  C:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  C:        <obj:name>example1</obj:name>
  C:        <obj:name>example2</obj:name>
  C:        <obj:name>example3</obj:name>
  C:      </obj:check>
  C:    </check>
  C:    <unspec/>
  C:    <clTRID>ABC-12346</clTRID>
  C:  </command>
  C:</epp>

  When a <check> command has been processed successfully, a server MUST
  respond with an EPP <resData> element that MUST contain a child
  element that identifies the object namespace and the location of the
  object schema.  The child elements of the <resData> element are
  object-specific, though the EPP <resData> element MUST contain a child
  <obj:chkData> element that SHALL contain the following child elements
  and attributes:

  - One or more <obj:cd> (check data) elements that echo the object
  identifiers provided in the command and contain an "x" attribute whose
  value identifies the object as either "+" for a known object or "-"
  for an unknown object.

  All clients MUST be authorized to use the <check> command.
















Hollenbeck              Expires October 9, 2001                [Page 19]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001



  Example <check> response:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1000">
  S:      <msg>Command completed successfully</msg>
  S:    </result>
  S:    <resData>
  S:      <obj:chkData xmlns:obj="urn:iana:xml:ns:obj"
  S:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  S:        <obj:cd x="+">example1</obj:cd>
  S:        <obj:cd x="-">example2</obj:cd>
  S:        <obj:cd x="+">example3</obj:cd>
  S:      </obj:chkData>
  S:    </resData>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12346</clTRID>
  S:      <svTRID>54322-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>

2.9.2.2 EPP <info> Command

  The EPP <info> command is used to retrieve information associated with
  a known object.  The elements needed to identify an object and the
  type of information associated with an object are both object-
  specific, so the child elements of the <info> command are specified
  using the EPP extension framework.  In addition to the standard EPP
  command elements, the <info> command SHALL contain the following child
  elements:

  - An object-specific <obj:info> element that identifies the object to
  be queried.












Hollenbeck              Expires October 9, 2001                [Page 20]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001



  Example <info> command:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <command>
  C:    <info>
  C:      <obj:info xmlns:obj="urn:iana:xml:ns:obj"
  C:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  C:        <!-- Object-specific elements. -->
  C:      </obj:info>
  C:    </info>
  C:  </command>
  C:</epp>

  When an <info> command has been processed successfully, a server MUST
  respond with an EPP <resData> element that MUST contain a child
  element that identifies the object namespace and the location of the
  object schema.  The child elements of the <resData> element are
  object-specific.

  All clients MUST be authorized to use the <info> command.  Access to
  detailed object information MAY be restricted to the client that
  manages the object.

























Hollenbeck              Expires October 9, 2001                [Page 21]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001



  Example <info> response:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1000">
  S:      <msg>Command completed successfully</msg>
  S:    </result>
  S:    <resData>
  S:      <obj:infData xmlns:obj="urn:iana:xml:ns:obj"
  S:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  S:        <!-- Object-specific elements. -->
  S:      </obj:infData>
  S:    </resData>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12346</clTRID>
  S:      <svTRID>54322-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>

2.9.2.3 EPP <poll> Command

  The EPP <poll> command is used to discover and retrieve client service
  messages from a server.  Information that MAY be made available to a
  client using service messages includes notification of object transfer
  requests and anticipated server outages; other messages types MAY be
  defined as a matter of server policy.

  Service messages are queued by the server for client retrieval.  A
  <poll> command MUST return the first message from the message queue.
  Each message returned from the server includes a server-unique message
  identifier that MUST be provided to acknowledge receipt of the
  message, and a counter that indicates the number of messages in the
  queue.  As a message is received by the client, the client MUST
  respond to the message with an explicit acknowledgement to confirm
  that the message has been received.  A server MUST dequeue a message
  and decrement the queue counter after receiving acknowledgement from
  the client, making the next message in the queue (if any) available
  for retrieval.

  Some of the information returned in response to a <poll> command MAY
  be object-specific, so some child elements of the <poll> response MAY
  be specified using the EPP extension framework.  In addition to the



Hollenbeck              Expires October 9, 2001                [Page 22]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  standard EPP command elements, the <poll> command SHALL contain no
  child elements and an "op" attribute with value "req" to retrieve the
  first message from the server message queue, or both an "op" attribute
  with value "ack" and a "msgID" attribute whose value corresponds to
  the value of "id" attribute copied from the <msg> element in the
  response that is being acknowledged.

  Example <poll> request command:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <command>
  C:    <poll op="req"/>
  C:    <unspec/>
  C:    <clTRID>ABC-12345</clTRID>
  C:  </command>
  C:</epp>

  The returned result code identifies responses with message information
  returned in response to a <poll> command.

  Example <poll> response with object-specific information:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1301">
  S:      <msg id="12345">Transfer request pending.</msg>
  S:    </result>
  S:    <msgQ count="5"/>
  S:    <resData>
  S:      <domain:transferQ xmlns:domain="urn:iana:xml:ns:domain"
  S:       xsi:schemaLocation="urn:iana:xml:ns:domain domain.xsd">
  S:        <domain:name>example1.com</domain:name>
  S:      </domain:transferQ>
  S:    </resData>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12345</clTRID>
  S:      <svTRID>54321-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>




Hollenbeck              Expires October 9, 2001                [Page 23]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  A client MUST acknowledge each response to dequeue the message and
  make subsequent messages available for retrieval.

  Example <poll> acknowledgement command:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <command>
  C:    <poll op="ack" msgID="12345"/>
  C:    <unspec/>
  C:    <clTRID>ABC-12346</clTRID>
  C:  </command>
  C:</epp>

  A <poll> acknowledgement response notes the ID of the message that has
  been acknowledged and the number of messages remaining in the queue.

  Example <poll> acknowledgement response:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1000">
  S:      <msg id="12345">Command completed successfully</msg>
  S:    </result>
  S:    <msgQ count="4"/>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12346</clTRID>
  S:      <svTRID>54322-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>

  Service messages MAY also be returned without object information.












Hollenbeck              Expires October 9, 2001                [Page 24]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001



  Example <poll> response without object-specific information:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1301">
  S:      <msg id="12346">Credit balance low.</msg>
  S:    </result>
  S:    <msgQ count="4"/>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12345</clTRID>
  S:      <svTRID>54321-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>

  The returned result code and message is used to note an empty server
  message queue.

  Example <poll> response to note an empty message queue:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1300">
  S:      <msg>Command completed successfully; no messages</msg>
  S:    </result>
  S:    <msgQ/>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12345</clTRID>
  S:      <svTRID>54321-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>

  All clients MUST be authorized to use the <poll> command.  Service
  messages MUST be queued on a per-client basis, and clients MUST NOT
  have access to the message queue of any other client.

2.9.2.4 EPP <transfer> Query Command




Hollenbeck              Expires October 9, 2001                [Page 25]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  The EPP <transfer> command provides a query operation that allows a
  client to determine real-time status of pending and completed transfer
  requests.  The elements needed to identify an object that is the
  subject of a transfer request are object-specific, so the child
  elements of the <transfer> query command are specified using the EPP
  extension framework.  In addition to the standard EPP command
  elements, the <transfer> command SHALL contain an "op" attribute with
  value "query", and the following child elements:

  - An object-specific <obj:transferQ> element that identifies the
  object whose transfer status is requested.

  - An <auID> authorization identifier element that contains the data
  from the returned <trID> element identifying the most recent
  sponsorship association.  Sponsorship associations are established
  when an object is created or successfully transferred.

  Example <transfer> query command:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <command>
  C:    <transfer op="query">
  C:      <obj:transferQ xmlns:obj="urn:iana:xml:ns:obj"
  C:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  C:        <!-- Object-specific elements. -->
  C:      </obj:transferQ>
  C:      <auID>
  C:        <clTRID>ABC-12345</clTRID>
  C:        <svTRID>54321-XYZ</svTRID>
  C:      </auID>
  C:    </transfer>
  C:    <unspec/>
  C:    <clTRID>ABC-12346</clTRID>
  C:  </command>
  C:</epp>

  When an <transfer> query command has been processed successfully, a
  server MUST respond with an EPP <resData> element that MUST contain a
  child element that identifies the object namespace and the location of
  the object schema.  The child elements of the <resData> element are
  object-specific.







Hollenbeck              Expires October 9, 2001                [Page 26]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001



  Example <transfer> query response:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1000">
  S:      <msg>Command completed successfully</msg>
  S:    </result>
  S:    <resData>
  S:      <obj:trnData xmlns:obj="urn:iana:xml:ns:obj"
  S:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  S:        <!-- Object-specific elements. -->
  S:      </obj:trnData>
  S:    </resData>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12346</clTRID>
  S:      <svTRID>54322-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>

  All clients MUST be authorized to use the <transfer> query command.  A
  client MUST be authorized to query an object for which they are either
  the requesting or the responding client.  A client SHOULD NOT be
  authorized to query an object for which they are neither the
  requesting or the responding client.

2.9.3 Object Transform Commands

  EPP provides five commands to transform objects: <create> to create an
  instance of an object with a server, <delete> to remove an instance of
  an object from a server, <renew> to extend the validity period of an
  object, <update> to change information associated with an object, and
  <transfer> to manage changes in client sponsorship of a known object.
  The <delete>, <renew>, <update>, and <transfer> commands MUST include
  a specific authorization identifier that confirms client authorization
  to change the state of an existing object.  Requests to transfer an
  object MAY be made by any client that possesses the authorization
  identifier.  Requests to delete, renew, or update an object MUST be
  limited to the sponsoring client even if a non-sponsoring client has
  made a request with the appropriate authorization identifier.

  An authorization identifier is a copy of the transaction identifier
  associated with the most recent command causing a change of



Hollenbeck              Expires October 9, 2001                [Page 27]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  sponsorship, such as the most recently successful <transfer> command
  or the original <create> command.  The identifier associated with the
  original <create> command MUST be used to authorize the first transfer
  of an object.  After an object has been successfully transferred at
  least once, the identifier associated with the most recent successful
  <transfer> command MUST be used to authorize further transforms.

2.9.3.1 EPP <create> Command

  The EPP <create> command is used to create an instance of an object.
  An object may be created for an indefinite period of time, or an
  object may be created for a specific validity period.  The EPP mapping
  for an object MUST describe the status of an object with respect to
  time, to include expected client and server behavior if a validity
  period is used.

  The elements needed to identify an object and associated attributes
  are object-specific, so the child elements of the <create> command are
  specified using the EPP extension framework.  In addition to the
  standard EPP command elements, the <create> command SHALL contain the
  following child elements:

  - An object-specific <obj:create> element that identifies the object
  to be created and the elements that are required to create the object.

  Example <create> command:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <command>
  C:    <create>
  C:      <obj:create xmlns:obj="urn:iana:xml:ns:obj"
  C:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  C:        <!-- Object-specific elements. -->
  C:      </obj:create>
  C:    </create>
  C:    <unspec/>
  C:    <clTRID>ABC-12345</clTRID>
  C:  </command>
  C:</epp>

  When a <create> command has been processed successfully, a server MUST
  respond with an EPP <resData> element that MUST contain a child
  element that identifies the object namespace and the location of the
  object schema and the Repository Object Identifier (ROID) that has
  been assigned to the object.  The child elements of the <resData>



Hollenbeck              Expires October 9, 2001                [Page 28]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  element are object-specific.  All clients MUST be authorized to use
  the <create> command.

  A ROID is an identifier that uniquely identifies an object across
  repositories.  ROIDs are formed by combining a server-assigned unique
  identifier with a registered value that identifies the repository.

  Example <create> response:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1000">
  S:      <msg>Command completed successfully</msg>
  S:    </result>
  S:    <resData>
  S:      <obj:creData xmlns:obj="urn:iana:xml:ns:obj"
  S:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  S:        <!-- Object-specific elements. -->
  S:        <obj:roid>EXAMPLE1-VRSN</obj:roid>
  S:      </obj:creData>
  S:    </resData>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12345</clTRID>
  S:      <svTRID>54321-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>

  The transaction identifier returned in response to a <create> command
  MUST be archived to authorize future transforms on the object.  If
  this identifier is lost or misplaced, it may be retrieved by the
  sponsoring client using the <info> command.

2.9.3.2 EPP <delete> Command

  The EPP <delete> command is used to remove an instance of a known
  object.  The elements needed to identify an object are object-
  specific, so the child elements of the <delete> command are specified
  using the EPP extension framework.  In addition to the standard EPP
  command elements, the <delete> command SHALL contain the following
  child elements:

  - An object-specific <obj:delete> element that identifies the object
  to be deleted.



Hollenbeck              Expires October 9, 2001                [Page 29]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  - An <auID> element that contains the authorization identifier
  associated with the object.

  Example <delete> command:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <command>
  C:    <delete>
  C:      <obj:delete xmlns:obj="urn:iana:xml:ns:obj"
  C:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  C:        <!-- Object-specific elements. -->
  C:      </obj:delete>
  C:      <auID>
  C:        <clTRID>ABC-12345</clTRID>
  C:        <svTRID>54321-XYZ</svTRID>
  C:      </auID>
  C:    </delete>
  C:    <unspec/>
  C:    <clTRID>ABC-12346</clTRID>
  C:  </command>
  C:</epp>

  When a <delete> command has been processed successfully, a server MUST
  respond with an EPP response with no <resData> element.

  Example <delete> response:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1000">
  S:      <msg>Command completed successfully</msg>
  S:    </result>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12346</clTRID>
  S:      <svTRID>54322-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>

  All clients MUST be authorized to use the <delete> command.  An object
  SHOULD be deleted only by the current sponsoring client.



Hollenbeck              Expires October 9, 2001                [Page 30]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


2.9.3.3 EPP <renew> Command

  The EPP <renew> command is used to extend the validity period of an
  object.  The elements needed to identify and extend the validity
  period of an object are object-specific, so the child elements of the
  <renew> command are specified using the EPP extension framework.  In
  addition to the standard EPP command elements, the <renew> command
  SHALL contain the following child elements:

  - An object-specific <obj:renew> element that identifies the object to
  be renewed and the elements that are required to extend the validity
  period of the object.

  - An <auID> element that contains the authorization identifier
  associated with the object.

  Example <renew> command:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <command>
  C:    <renew>
  C:      <obj:renew xmlns:obj="urn:iana:xml:ns:obj"
  C:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  C:        <!-- Object-specific elements. -->
  C:      </obj:renew>
  C:      <auID>
  C:        <clTRID>ABC-12345</clTRID>
  C:        <svTRID>54321-XYZ</svTRID>
  C:      </auID>
  C:    </renew>
  C:    <unspec/>
  C:    <clTRID>ABC-12346</clTRID>
  C:  </command>
  C:</epp>

  When a <renew> command has been processed successfully, a server MUST
  respond with an EPP <resData> element that MUST contain a child
  element that identifies the object namespace and the location of the
  object schema.  The child elements of the <resData> element are
  object-specific.








Hollenbeck              Expires October 9, 2001                [Page 31]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001



  Example <renew> response:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1000">
  S:      <msg>Command completed successfully</msg>
  S:    </result>
  S:    <resData>
  S:      <obj:creData xmlns:obj="urn:iana:xml:ns:obj"
  S:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  S:        <!-- Object-specific elements. -->
  S:      </obj:creData>
  S:    </resData>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12346</clTRID>
  S:      <svTRID>54322-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>

  All clients MUST be authorized to use the <renew> command.  Object
  renewal MAY be unavailable or limited by server-specific policies.

2.9.3.4 EPP <transfer> Command

  The EPP <transfer> command is used to manage changes in client
  sponsorship of a known object.  Clients may initiate a transfer
  request, cancel a transfer request, approve a transfer request, and
  reject a transfer request using the "op" command attribute.

  A client who wishes to assume sponsorship of a known object from
  another client uses the <transfer> command with the value of the "op"
  attribute set to "request".  Once a transfer has been requested, the
  same client may cancel the request using a <transfer> command with the
  value of the "op" attribute set to "cancel".  A request to cancel the
  transfer MUST be sent to the server before the current sponsoring
  client either approves or rejects the transfer request and before the
  server automatically processes the request due to responding client
  inactivity.

  Once a transfer request has been received by the server, the server
  MUST notify the current sponsoring client of the requested transfer by
  queuing a service message for retrieval via the <poll> command.  The



Hollenbeck              Expires October 9, 2001                [Page 32]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  current status of a pending <transfer> command for any object MAY be
  found using the <transfer> query command; the service message MUST
  include appropriate object information to perform a <transfer> query.

  The current sponsoring client MAY explicitly approve or reject the
  transfer request.  The client may approve the request using a
  <transfer> command with the value of the "op" attribute set to
  "approve".  The client may reject the request using a <transfer>
  command with the value of the "op" attribute set to "reject".

  A server MUST automatically approve or reject all transfer requests
  that are not explicitly approved or rejected by the current sponsoring
  client within a fixed amount of time.  The amount of time to wait for
  explicit action and the default server behavior are local matters not
  specified by EPP, but they SHOULD be documented in a server-specific
  profile document that describes default server behavior for client
  information.

  The elements needed to identify and complete the transfer of an object
  are object-specific, so the child elements of the <transfer> command
  are specified using the EPP extension framework.  In addition to the
  standard EPP command elements, the <transfer> command SHALL contain
  the following child elements:

  - An object-specific <obj:transfer> element that identifies the object
  to be transferred and the elements that are required to process the
  transfer command.

  - An <auID> element that contains the authorization identifier
  associated with the object.





















Hollenbeck              Expires October 9, 2001                [Page 33]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001



  Example <transfer> request command:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <command>
  C:    <transfer op="request">
  C:      <obj:transfer xmlns:obj="urn:iana:xml:ns:obj"
  C:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  C:        <!-- Object-specific elements. -->
  C:      </obj:transfer>
  C:      <auID>
  C:        <clTRID>ABC-12345</clTRID>
  C:        <svTRID>54321-XYZ</svTRID>
  C:      </auID>
  C:    </transfer>
  C:    <unspec/>
  C:    <clTRID>ABC-12346</clTRID>
  C:  </command>
  C:</epp>

  When a <transfer> command has been processed successfully, a server
  MUST respond with an EPP response with no <resData> element.

  Example <transfer> request response:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1000">
  S:      <msg>Command completed successfully</msg>
  S:    </result>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12346</clTRID>
  S:      <svTRID>54322-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>

  All clients MUST be authorized to use the <transfer> command.  All
  <transfer> commands MUST be accompanied by the authorization
  identifier associated with the object.  A <transfer> request MUST only
  be accepted from a client other than the current sponsoring client.  A



Hollenbeck              Expires October 9, 2001                [Page 34]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  <transfer> approval request MUST only be accepted from the current
  sponsoring client. A  <transfer> cancellation request MUST be accepted
  ONLY from the original requesting client.

  The transaction identifier returned in response to a <transfer>
  initiation command MUST be archived to authorize future transforms on
  the object. If this identifier is lost or misplaced, it may be
  retrieved by the sponsoring client using the <info> command.

2.9.3.5 EPP <update> Command

  The EPP <update> command is used to change information associated with
  a known object.  The elements needed to identify and modify an object
  are object-specific, so the child elements of the <update> command are
  specified using the EPP extension framework.  In addition to the
  standard EPP command elements, the <update> command SHALL contain the
  following child elements:

  - An object-specific <obj:update> element that identifies the object
  to be renewed and the elements that are required to modify the object.
  Object-specific elements MUST identify values to be added, values to
  be removed, or values to be changed.

  - An <auID> element that contains the authorization identifier
  associated with the object.

  Example <update> command:

  C:<?xml version="1.0" standalone="no"?>
  C:<epp xmlns="urn:iana:xml:ns:epp"
  C:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  C:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  C:  <command>
  C:    <update>
  C:      <obj:update xmlns:obj="urn:iana:xml:ns:obj"
  C:       xsi:schemaLocation="urn:iana:xml:ns:obj obj.xsd">
  C:        <!-- Object-specific elements. -->
  C:      </obj:update>
  C:      <auID>
  C:        <clTRID>ABC-12345</clTRID>
  C:        <svTRID>54321-XYZ</svTRID>
  C:      </auID>
  C:    </update>
  C:    <unspec/>
  C:    <clTRID>ABC-12346</clTRID>
  C:  </command>
  C:</epp>




Hollenbeck              Expires October 9, 2001                [Page 35]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  When a <transfer> command has been processed successfully, a server
  MUST respond with an EPP response with no <resData> element.

  Example <transfer> request response:

  S:<?xml version="1.0" standalone="no"?>
  S:<epp xmlns="urn:iana:xml:ns:epp"
  S:     xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
  S:     xsi:schemaLocation="urn:iana:xml:ns:epp epp.xsd">
  S:  <response>
  S:    <result code="1000">
  S:      <msg>Command completed successfully</msg>
  S:    </result>
  S:    <unspec/>
  S:    <trID>
  S:      <clTRID>ABC-12346</clTRID>
  S:      <svTRID>54322-XYZ</svTRID>
  S:    </trID>
  S:  </response>
  S:</epp>

  All clients MUST be authorized to use the <update> command.
  Authorization to update an object MUST be limited to the current
  sponsoring client.



























Hollenbeck              Expires October 9, 2001                [Page 36]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


3. Result Codes

  EPP result codes are based on the Theory of Reply Codes described in
  Appendix E of [RFC821].  EPP uses four decimal digits to describe the
  success or failure of each EPP command.  Each of the digits of the
  reply have special significance.

  The first digit denotes command success or failure.  The second digit
  denotes the response category, such as command syntax or security.
  The third and fourth digits provide explicit response detail within
  each response category.

  There are two values for the first digit of the reply code:

  1yzz   Positive completion reply.  The command has been accepted and
  processed by the system without error.

  2yzz   Negative completion reply.  The command was not accepted and
  the requested action did not occur.

  The second digit groups responses into one of six specific categories:

  x0zz   Protocol Syntax
  x1zz   Implementation-specific Rules
  x2zz   Security
  x3zz   Data Management
  x4zz   Server System
  x5zz   Connection Management

  The third and fourth digits provide response detail within the
  categories defined by the first and second digits.  Specific result
  codes are listed in the table below.

  Every EPP response MUST include a result code and a human-readable
  description of the result code.  The language used to represent the
  description MAY be identified using an instance of the "lang"
  attribute within the <response-text> element.  If not specified, the
  default language is US English, identified as "en-US".  A description
  of the structure of valid values for the "lang" attribute is described
  in [RFC3066].  A list of valid values for the "lang" attribute is
  available in [ISO639].

  Response text MAY be translated into other languages, though the
  translation MUST preserve the meaning of the code as described here.
  Response code values MUST NOT be changed when translating text.

  Response text in the table below is enclosed in quotes to clearly mark
  the beginning and ending of each response string.  Quotes MUST NOT be



Hollenbeck              Expires October 9, 2001                [Page 37]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  used to delimit these strings when returning response text via the
  protocol.

  Successful command completion responses:

  Code    Response text in US English
  ___________________________________

  1000    "Command completed successfully"
  This is the nominal response code for a successfully completed
  command.  This response code MUST be returned in responses for all
  commands other than for the situations relating to the <logout>,
  <poll>, and <update> commands as described here.

  1300    "Command completed successfully; no messages"
  This response code MUST be returned when responding to a <poll>
  request command and the server message queue is empty.

  1301    <None specified>
  This response code MUST be returned when returning a <poll> service
  message to a client.  Message text for this response code is a
  matter of server policy and is not specified by this protocol.

  1302    "Command completed successfully; nothing done"
  This response code MUST be returned when responding to an empty
  <update> command.  The <update> object-specific elements of an
  <update> command MAY all be OPTIONAL, and XML Schema does not
  provide a means to require at least one element from among a
  sequence of OPTIONAL elements.  This response notes that a valid
  well-formed command was received, but no action was specified.

  1500    "Command completed successfully; ending session"
  This response code MUST be returned when responding to a successful
  <logout> command.

  Command error responses:

  Code    Response text in US English
  ___________________________________

  2000    "Unknown command"
  This response code MUST be returned when a server receives a command
  element that is not defined by EPP.

  2001    "Command syntax error"
  This response code MUST be returned when a server receives a command
  that is improperly formed.




Hollenbeck              Expires October 9, 2001                [Page 38]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  2002    "Command use error"
  This response code MUST be returned when a server receives a command
  that is properly formed, but can not be executed due to a sequencing
  or context error.  For example, a <logout> command can not be executed
  without having first completed a <login> command.

  2003    "Required parameter missing"
  This response code MUST be returned when a server receives a command
  for which a required parameter value has not been provided.

  2004    "Parameter value range error"
  This response code MUST be returned when a server receives a command
  parameter whose value is outside the range of values specified
  by the protocol.  The error value SHOULD be returned via a <value>
  element in the EPP response.

  2005    "Parameter value syntax error"
  This response code MUST be returned when a server receives a command
  containing a parameter whose value is improperly formed.  The error
  value SHOULD be returned via a <value> element in the EPP response.

  2100    "Unimplemented protocol version"
  This response code MUST be returned when a server receives a command
  element specifying a protocol version that is not implemented by the
  server.

  2101    "Unimplemented command"
  This response code MUST be returned when a server receives a command
  element that is a valid EPP command that is not implemented by the
  server.  For example, a <transfer> command MAY be unimplemented for
  certain object types.

  2102    "Unimplemented option"
  This response code MUST be returned when a server receives a command
  element that is a valid EPP command that contains a protocol option
  that is not implemented by the server.  For example, a server MAY
  not implement the protocol's session-less operating mode.

  2103    "Unimplemented extension"
  This response code MUST be returned when a server receives a command
  element that is a valid EPP command that contains a protocol command
  extension that is not implemented by the server.

  2104    "Billing failure"
  This response code MUST be returned when a server attempts to execute
  a billable operation and the command can not be completed due to a
  client billing failure.




Hollenbeck              Expires October 9, 2001                [Page 39]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  2105    "Object is not eligible for renewal"
  This response code MUST be returned when a client attempts to <renew>
  an object that is not eligible for renewal in accordance with server
  policy.

  2106    "Object is not eligible for transfer"
  This response code MUST be returned when a client attempts to
  <transfer> an object that is not eligible for transfer in accordance
  with server policy.

  2200    "Authentication error"
  This response code MUST be returned when a server notes an error when
  validating client credentials.

  2201    "Authorization error"
  This response code MUST be returned when a server notes a client
  authorization error when executing a command.  This error is used to
  note that a client lacks privileges to execute the requested command.

  2202    "Invalid authorization identifier"
  This response code MUST be returned when a server receives an invalid
  command authorization identifier required to confirm authorization to
  execute a command.  This error is used to note that a client has the
  privileges required to execute the requested command, but the
  authorization identifier provided by the client does not match the
  authorization identifier archived by the server.

  2300    "Object pending transfer"
  This response code MUST be returned when a server receives a command
  to transfer an object that is pending transfer due to an earlier
  transfer request.

  2301    "Object not pending transfer"
  This response code MUST be returned when a server receives a command
  to confirm, reject, or cancel the transfer an object when no command
  has been made to transfer the object.

  2302    "Object exists"
  This response code MUST be returned when a server receives a command
  to create an object that already exists in the repository.

  2303    "Object does not exist"
  This response code MUST be returned when a server receives a command
  to transform an object that does not exist in the repository.

  2304    "Object status prohibits operation"
  This response code MUST be returned when a server receives a command
  to transform an object that can not be completed due to server policy



Hollenbeck              Expires October 9, 2001                [Page 40]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  or business practices.  For example, a server MAY disallow <transfer>
  commands under terms and conditions that are matters of local policy.

  2305    "Object association prohibits operation"
  This response code MUST be returned when a server receives a command
  to transform an object that can not be completed due to dependencies
  on other objects that are associated with the target object.  For
  example, a server MAY disallow <delete> commands while an object has
  active associations with other objects.

  2306    "Parameter value policy error"
  This response code MUST be returned when a server receives a command
  containing a parameter value that is syntactically valid, but
  semantically invalid due to local policy.  For example, the server
  MAY support a subset of a range of valid protocol parameter values.
  The error value SHOULD be returned via a <value> element in the EPP
  response.

  2307    "Unimplemented object service"
  This response code MUST be returned when a server receives a command
  to operate on an object service that is not supported by the server.

  2308    "Data management policy violation"
  This response code MUST be returned when a server receives a command
  whose execution results in a violation of server data management
  policies.  For example, removing all attribute values or object
  associations from an object MAY be a violation of a server's data
  management policies.

  2400    "Command failed"
  This response code MUST be returned when a server is unable to
  execute a command due to an internal server error that is not related
  to the protocol.  The failure MAY be transient.  The server MUST keep
  any ongoing session active.

  2500    "Command failed; server ending session"
  This response code MUST be returned when a server receives a command
  that can not be completed due to an internal server error that is not
  related to the protocol.  The failure is not transient, and will
  cause other commands to fail as well.  The server MUST end any
  ongoing active session.

  2501    "Timeout; server ending session"
  This response code MUST be returned when a server receives a command
  that can not be completed due to a session-oriented timeout.

  2502    "Session limit exceeded; server closing connection"
  This response code MUST be returned when a server receives a <login>



Hollenbeck              Expires October 9, 2001                [Page 41]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  command, and the command can not be completed because the client has
  exceeded a system-defined limit on the number of sessions that the
  client can establish. It may be possible to establish a session by
  ending existing unused sessions.















































Hollenbeck              Expires October 9, 2001                [Page 42]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


4. Formal Syntax

  EPP is specified in XML Schema notation.  The formal syntax presented
  here is a complete schema representation of EPP suitable for automated
  validation of EPP XML instances.

  Two schemas are presented here.  The first schema is the base EPP
  schema.  The second schema defines elements and structures that MAY be
  used by both the base EPP schema and object mapping schemas.

4.1 Base Schema

  <?xml version="1.0"?>

  <schema targetNamespace="urn:iana:xml:ns:epp"
          xmlns:epp="urn:iana:xml:ns:epp"
          xmlns:eppcom="urn:iana:xml:ns:eppcom"
          xmlns="http://www.w3.org/2000/10/XMLSchema"
          elementFormDefault="qualified">

  <!--
  Import common element types.
  -->
    <import namespace="urn:iana:xml:ns:eppcom"
            schemaLocation="eppcom.xsd"/>

    <annotation>
      <documentation>
        Extensible Provisioning Protocol v1.0 schema.
      </documentation>
    </annotation>

  <!--
  Every EPP XML instance must begin with this element.
  -->
    <element name="epp" type="epp:eppType"/>

  <!--
  An EPP XML instance must contain a greeting, hello, command,
  or response.
  -->
    <complexType name="eppType">
      <choice>
        <element name="greeting" type="epp:greetingType"/>
        <element name="hello" type="epp:helloType"/>
        <element name="command" type="epp:commandType"/>
        <element name="response" type="epp:responseType"/>
      </choice>



Hollenbeck              Expires October 9, 2001                [Page 43]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


    </complexType>

  <!--
  A greeting is sent by a server in response to a client connection
  or <hello>.
  -->
    <complexType name="greetingType">
      <sequence>
        <element name="svID" type="epp:sIDType"/>
        <element name="svDate" type="timeInstant"/>
        <element name="svcMenu" type="epp:svcMenuType"/>
      </sequence>
    </complexType>

  <!--
  A <hello> is sent to request a <greeting>.
  -->
    <complexType name="helloType"/>

  <!--
  Server IDs are strings with minimum and maximum length restrictions.
  -->
    <simpleType name="sIDType">
      <restriction base="string">
        <minLength value="3"/>
        <maxLength value="64"/>
      </restriction>
    </simpleType>

  <!--
  A server greeting identifies available object services.
  -->
    <complexType name="svcMenuType">
      <sequence>
        <element name="version" type="epp:versionType"
         maxOccurs="unbounded"/>
        <element name="lang" type="language" maxOccurs="unbounded"/>
        <any namespace="##other" maxOccurs="unbounded"/>
      </sequence>
    </complexType>

  <!--
  Extension framework types.
  -->

    <complexType name="optExtType">
      <sequence>
        <any namespace="##other" minOccurs="0"/>



Hollenbeck              Expires October 9, 2001                [Page 44]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


      </sequence>
    </complexType>

    <complexType name="unboundedExtType">
      <sequence>
        <any namespace="##other" maxOccurs="unbounded"/>
      </sequence>
    </complexType>

  <!--
  An EPP version number is a dotted pair of decimal numbers.
  -->
    <simpleType name="versionType">
      <restriction base="string">
        <pattern value="[1-9].[0-9]"/>
        <enumeration value="1.0"/>
      </restriction>
    </simpleType>

  <!--
  Command types.
  -->
    <complexType name="commandType">
      <sequence>
        <element name="creds" type="epp:credsType" minOccurs="0"/>
        <choice>
          <element name="check" type="epp:readType"/>
          <element name="create" type="epp:readType"/>
          <element name="delete" type="epp:writeType"/>
          <element name="info" type="epp:readType"/>
          <element name="login" type="epp:loginType"/>
          <element name="logout" type="epp:logoutType"/>
          <element name="poll" type="epp:pollType"/>
          <element name="renew" type="epp:writeType"/>
          <element name="transfer" type="epp:transferType"/>
          <element name="update" type="epp:writeType"/>
        </choice>
        <element name="unspec" type="epp:optExtType"
         minOccurs="0"/>
        <element name="clTRID" type="epp:trIDStringType"/>
      </sequence>
    </complexType>

  <!--
  Credentials and options may be specified as part of a <login>
  command to create a session, or they may be specified with other
  commands to operate in session-less mode.  The two modes can not
  be mixed.



Hollenbeck              Expires October 9, 2001                [Page 45]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  -->
    <complexType name="credsType">
      <sequence>
        <element name="clID" type="eppcom:clIDType"/>
        <element name="pw" type="epp:pwType"/>
        <element name="newPW" type="epp:pwType" minOccurs="0"/>
        <element name="options" type="epp:credsOptionsType"/>
      </sequence>
    </complexType>

    <complexType name="credsOptionsType">
      <sequence>
        <element name="version" type="epp:versionType"/>
        <element name="lang" type="language"/>
      </sequence>
    </complexType>

    <simpleType name="pwType">
      <restriction base="string">
        <minLength value="6"/>
        <maxLength value="16"/>
      </restriction>
    </simpleType>

  <!--
  The <login> command types.
  -->
    <complexType name="loginType">
      <sequence>
        <element name="svcs" type="epp:unboundedExtType"/>
      </sequence>
    </complexType>

  <!--
  The <logout> command types.
  -->
    <complexType name="logoutType"/>

  <!--
  The <poll> command.
  -->
    <complexType name="pollType">
      <sequence>
      </sequence>
      <attribute name="op" type="epp:pollOpType" use="required"/>
      <attribute name="msgID" type="string" use="optional"/>
    </complexType>




Hollenbeck              Expires October 9, 2001                [Page 46]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


    <simpleType name="pollOpType">
      <restriction base="string">
        <enumeration value="ack"/>
        <enumeration value="req"/>
      </restriction>
    </simpleType>

  <!--
  The <transfer> command.  This is object-specific, and uses attributes
  to identify the requested operation.
  -->
    <complexType name="transferType">
      <sequence>
        <any namespace="##other"/>
        <element name="auID" type="epp:trIDType"/>
      </sequence>
      <attribute name="op" type="epp:transferOpType" use="required"/>
    </complexType>

    <simpleType name="transferOpType">
      <restriction base="string">
        <enumeration value="approve"/>
        <enumeration value="cancel"/>
        <enumeration value="query"/>
        <enumeration value="reject"/>
        <enumeration value="request"/>
      </restriction>
    </simpleType>

  <!--
  All other object-centric commands. EPP doesn't specify the syntax or
  semantics of object-centric command elements.  The elements MUST be
  described in detail in another schema specific to the object.
  -->
    <complexType name="readType">
      <sequence>
        <any namespace="##other"/>
      </sequence>
    </complexType>

    <complexType name="writeType">
      <sequence>
        <any namespace="##other"/>
        <element name="auID" type="epp:trIDType"/>
      </sequence>
    </complexType>

    <complexType name="trIDType">



Hollenbeck              Expires October 9, 2001                [Page 47]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


      <sequence>
        <element name="clTRID" type="epp:trIDStringType"/>
        <element name="svTRID" type="epp:trIDStringType"/>
      </sequence>
    </complexType>

    <simpleType name="trIDStringType">
      <restriction base="string">
        <minLength value="3"/>
        <maxLength value="64"/>
      </restriction>
    </simpleType>

  <!--
  Response types.
  -->
    <complexType name="responseType">
      <sequence>
        <element name="result" type="epp:resultType"
         maxOccurs="unbounded"/>
        <element name="msgQ" type="epp:msgQType"
         minOccurs="0"/>
        <element name="resData" type="epp:optExtType"
         minOccurs="0"/>
        <element name="unspec" type="epp:optExtType"
         minOccurs="0"/>
        <element name="trID" type="epp:trIDType"/>
      </sequence>
    </complexType>

    <complexType name="resultType">
      <sequence>
        <element name="msg" type="epp:msgType"/>
        <element name="value" type="string"
         minOccurs="0" maxOccurs="unbounded"/>
      </sequence>
      <attribute name="code" type="epp:resultCodeType" use="required"/>
    </complexType>

    <complexType name="msgQType">
      <attribute name="count" type="unsignedLong"
       use="default" value="0"/>
    </complexType>

  <!--
  Human-readable text may be expressed in languages other than English.
  -->
    <complexType name="msgType">



Hollenbeck              Expires October 9, 2001                [Page 48]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


      <simpleContent>
        <extension base="string">
          <attribute name="lang" type="language"
           use="default" value="en-US"/>
          <attribute name="id" type="string"
           use="optional"/>
        </extension>
      </simpleContent>
    </complexType>

  <!--
  EPP result codes.
  -->
    <simpleType name="resultCodeType">
      <restriction base="unsignedShort">
        <enumeration value="1000"/>
        <enumeration value="1300"/>
        <enumeration value="1301"/>
        <enumeration value="1302"/>
        <enumeration value="1500"/>
        <enumeration value="2000"/>
        <enumeration value="2001"/>
        <enumeration value="2002"/>
        <enumeration value="2003"/>
        <enumeration value="2004"/>
        <enumeration value="2005"/>
        <enumeration value="2100"/>
        <enumeration value="2101"/>
        <enumeration value="2102"/>
        <enumeration value="2103"/>
        <enumeration value="2104"/>
        <enumeration value="2105"/>
        <enumeration value="2106"/>
        <enumeration value="2200"/>
        <enumeration value="2201"/>
        <enumeration value="2202"/>
        <enumeration value="2300"/>
        <enumeration value="2301"/>
        <enumeration value="2302"/>
        <enumeration value="2303"/>
        <enumeration value="2304"/>
        <enumeration value="2305"/>
        <enumeration value="2306"/>
        <enumeration value="2307"/>
        <enumeration value="2308"/>
        <enumeration value="2400"/>
        <enumeration value="2500"/>
        <enumeration value="2501"/>



Hollenbeck              Expires October 9, 2001                [Page 49]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


        <enumeration value="2502"/>
      </restriction>
    </simpleType>

  <!--
  End of schema.
  -->
  </schema>











































Hollenbeck              Expires October 9, 2001                [Page 50]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


4.2 Shared Structure Schema

  <?xml version="1.0"?>

  <schema targetNamespace="urn:iana:xml:ns:eppcom"
          xmlns:eppcom="urn:iana:xml:ns:eppcom"
          xmlns="http://www.w3.org/2000/10/XMLSchema"
          elementFormDefault="qualified">

    <annotation>
      <documentation>
        Extensible Provisioning Protocol v1.0
        shared structures schema.
      </documentation>
    </annotation>

  <!--
  Utility types.
  -->

    <simpleType name="checkStatusType">
      <restriction base="string">
        <enumeration value="+"/>
        <enumeration value="-"/>
      </restriction>
    </simpleType>

    <simpleType name="clIDType">
      <restriction base="string">
        <minLength value="3"/>
        <maxLength value="16"/>
      </restriction>
    </simpleType>

    <complexType name="emptyType"/>

    <simpleType name="labelType">
      <restriction base="string">
        <minLength value="1"/>
        <maxLength value="255"/>
      </restriction>
    </simpleType>

  <!--
  Repository Object IDentifiers are formed as follows:
  [1-80 characters] "-" [1-8 characters]
  The first 1-80 characters are assigned by and must be unique within
  the repository.



Hollenbeck              Expires October 9, 2001                [Page 51]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  The last 1-8 characters are assigned by and must be unique within
  a centralized management facility, such as an IANA registry.
  -->

    <simpleType name="roidType">
      <restriction base="string">
        <pattern value="
  144168    </restriction>
    </simpleType>

  <!--
  Types used in object transfers.
  -->
    <simpleType name="trStatusType">
      <restriction base="string">
        <enumeration value="PENDING"/>
        <enumeration value="APPROVED"/>
        <enumeration value="CANCELLED"/>
        <enumeration value="REJECTED"/>
        <enumeration value="AUTO-APPROVED"/>
        <enumeration value="AUTO-CANCELLED"/>
      </restriction>
    </simpleType>

  <!--
  End of schema.
  -->
  </schema>























Hollenbeck              Expires October 9, 2001                [Page 52]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


5. Internationalization Considerations

  EPP is represented in XML, which provides native support for encoding
  information using the double-byte Unicode character set and its more
  compact representations including UTF-8.  Compliant XML processors are
  REQUIRED to understand both UTF-8 and raw Unicode character sets; XML
  also includes a provision for identifying other character sets through
  use of an "encoding" attribute in an <?xml?> processing instruction.
  The complete list of character set encoding identifiers is maintained
  by IANA and is described in [CHARSET] and [RFC1700].

  EPP includes a provision for returning a human-readable message with
  every result code.  This document describes result codes in US
  English, but the actual text returned with a result MAY be provided in
  a language negotiated when a session is established.  Languages other
  than US English MUST be noted through specification of a "lang"
  attribute for each message.  Valid values for the "lang" attribute and
  "lang" negotiation elements are described in [RFC3066].

  All date-time values presented via EPP MUST be expressed in Universal
  Coordinated Time.  The XML Schema "date" format allows use of time
  zone identifiers to indicate offsets from the zero meridian, but this
  option MUST NOT be used within EPP.  Both extended and truncated date
  and time forms defined in [ISO8601] MAY be used.



























Hollenbeck              Expires October 9, 2001                [Page 53]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


6. IANA Considerations

  XML schemas require a URI for unique identification.  Schemas MUST be
  registered to ensure URI uniqueness, but the IETF does not currently
  have a recommended repository for the registration of XML schemas.
  This document uses URNs to describe XML namespaces and XML schemas
  conforming to a registry mechanism described in [IANA-XML].

  IANA SHOULD maintain a registry of XML namespace and schema URI
  assignments.  Per policies described in [IANA], URI assignment
  requests SHOULD be reviewed by a designated expert, and values SHOULD
  be assigned only as a result of standards action taken by the IESG.

  This document requests assignment of the following URIs:

  urn:iana:xml:ns:epp: The XML namespace URI for EPP.

  urn:iana:xml:xmlschema:epp: The XML Schema URI for EPP.

  urn:iana:xml:ns:eppcom: The XML namespace URI for EPP shared
  structures.

  urn:iana:xml:xmlschema:eppcom: The XML Schema URI for EPP shared
  structures.



























Hollenbeck              Expires October 9, 2001                [Page 54]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


7. Security Considerations

  EPP provides only simple client authentication services.  A passive
  attack is sufficient to recover client identifiers and passwords,
  allowing trivial command forgery.  Protection against most common
  attacks and more robust security services MUST be provided by other
  protocol layers.

  EPP uses a variant of the PLAIN SASL mechanism described in [RFC2595]
  to provide a simple application-layer authentication service.  Where
  the PLAIN SASL mechanism specifies provision of an authorization
  identifier, authentication identifier, and password as a single string
  separated by ASCII NUL characters, EPP specifies use of a combined
  authorization and authentication identifier and a password provided as
  distinct XML elements.

  Repeated password guessing attempts can be discouraged by limiting the
  number of <login> attempts that can be attempted on an open
  connection.  A server MUST close an open connection if three <login>
  attempts are made with either an invalid client identifier, an invalid
  password, or both an invalid client identifier and an invalid
  password.

  EPP uses transaction identifier information to authorize transform
  commands.  When an object is created or transferred on behalf of a
  third party, the identifier associated with the EPP <create> or most
  recent successful <transfer> command MUST be provided to the third
  party using a facility that provides privacy and integrity services to
  protect against unintended disclosure and modification while in
  transit.





















Hollenbeck              Expires October 9, 2001                [Page 55]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


8. References

  [CHARSET] ftp://ftp.isi.edu/in-notes/iana/assignments/character-sets

  [GRRP] S. Hollenbeck: "Generic Registry-Registrar Protocol
  Requirements", draft-ietf-provreg-grrp-reqs-00.txt, work in progress.

  [IANA] T. Narten, H. Alvestrand: "Guidelines for Writing an IANA
  Considerations Section in RFCs", BCP 26, RFC 2434, October 1998.

  [IANA-XML] M. Mealling: "The IANA XML Registry", draft-mealling-iana-
  xmlns-registry-00.txt, work in progress.

  [ISO639] ISO 639:1988 (E/F): "Code for the representation of names of
  languages - The International Organization for Standardization".

  [ISO8601] ISO 8601:1988 (E): "Data elements and interchange formats -
  Information interchange - Representation of dates and times - The
  International Organization for Standardization".

  [RFC821] J. Postel: "Simple Mail Transfer Protocol", RFC 821, August
  1982.

  [RFC1700] J. Reynolds, J. Postel: "Assigned Numbers", STD 2, RFC 1700,
  October 1994.

  [RFC2119] S. Bradner: "Key Words for Use in RFCs to Indicate
  Requirement Levels", BCP 14, RFC 2119, March 1997.

  [RFC2279] F. Yergeau: "UTF-8, a transformation format of ISO 10646",
  RFC 2279, January 1998.

  [RFC2595] C. Newman: "Using TLS with IMAP, POP3 and ACAP", RFC 2595,
  June 1999.

  [RFC3066] H. Alvestrand: "Tags for the Identification of Languages",
  BCP 47, RFC 3066, January 2001.

  [XML] Editor T. Bray et al.: "Extensible Markup Language (XML) 1.0
  (Second Edition)", http://www.w3.org/TR/REC-xml, W3C Recommendation 6
  October 2000.

  [XMLS-1] Editor H. Thompson et al.: "XML Schema Part 1: Structures",
  http://www.w3.org/TR/xmlschema-1, W3C Candidate Recommendation 24
  October 2000.

  [XMLS-2] Editors P. Biron and A. Malhotra: "XML Schema Part 2:
  Datatypes", http://www.w3.org/TR/xmlschema-2, W3C Candidate



Hollenbeck              Expires October 9, 2001                [Page 56]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  Recommendation 24 October 2000.


















































Hollenbeck              Expires October 9, 2001                [Page 57]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


9. Author's Address


  Scott Hollenbeck
  VeriSign Global Registry Services
  21345 Ridgetop Circle
  Dulles, VA 20166-6503
  USA
  shollenbeck@verisign.com










































Hollenbeck              Expires October 9, 2001                [Page 58]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


A. Revision History

  -00: First working group version produced from an earlier individual
  submission draft, draft-hollenbeck-epp-00.txt.

  -01: Extensive rework to address updated requirements.  Modified text
  and examples for all sections.  Added shared structure schema.












































Hollenbeck              Expires October 9, 2001                [Page 59]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


B. Full Copyright Statement

  Copyright (C) The Internet Society 2001.  All Rights Reserved.

  This document and translations of it may be copied and furnished to
  others, and derivative works that comment on or otherwise explain it
  or assist in its implementation may be prepared, copied, published and
  distributed, in whole or in part, without restriction of any kind,
  provided that the above copyright notice and this paragraph are
  included on all such copies and derivative works.  However, this
  document itself may not be modified in any way, such as by removing
  the copyright notice or references to the Internet Society or other
  Internet organizations, except as needed for the purpose of developing
  Internet standards in which case the procedures for copyrights defined
  in the Internet Standards process must be followed, or as required to
  translate it into languages other than English.

  The limited permissions granted above are perpetual and will not be
  revoked by the Internet Society or its successors or assigns.

  This document and the information contained herein is provided on an
  "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
  TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
  NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN
  WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
  MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Acknowledgement

  Funding for the RFC Editor function is currently provided by the
  Internet Society.




















Hollenbeck              Expires October 9, 2001                [Page 60]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


C: Object Mapping Outline

  This appendix describes a recommended outline for documenting the EPP
  mapping of an object.  Documents that describe EPP object mappings
  SHOULD describe the mapping in a format similar to the one used here.
  Note that additional sections will be required if the object mapping
  is written in Internet-Draft format.

1. Introduction

  Provide an introduction that describes the object and an overview of
  the mapping to EPP.

2. Object Attributes

  Describe the attributes associated with the object, including
  references to syntax specifications as appropriate.  Examples of
  object attributes include a name or identifier and dates associated
  with modification events.

3. EPP Command Mapping

3.1 EPP Query Commands

3.1.1 EPP <check> Command

  Describe the object-specific mappings required to implement the EPP
  <check> command.  Include both sample commands and sample responses.

3.1.2 EPP <info> Command

  Describe the object-specific mappings required to implement the EPP
  <info> command.  Include both sample commands and sample responses.

3.1.3 EPP <poll> Command

  Describe the object-specific mappings required to implement the EPP
  <poll> command.  Include both sample commands and sample responses.

3.1.4 EPP <transfer> Command

  Describe the object-specific mappings required to implement the EPP
  <transfer> query command.  Include both sample commands and sample
  responses.

3.2 EPP Transform Commands

3.2.1 EPP <create> Command



Hollenbeck              Expires October 9, 2001                [Page 61]

Internet-Draft      Extensible Provisioning Protocol       April 9, 2001


  Describe the object-specific mappings required to implement the EPP
  <create> command.  Include both sample commands and sample responses.
  Describe the status of the object with respect to time, including
  expected client and server behavior if a validity period is used.

3.2.2 EPP <delete> Command

  Describe the object-specific mappings required to implement the EPP
  <delete> command.  Include both sample commands and sample responses.

3.2.3 EPP <renew> Command

  Describe the object-specific mappings required to implement the EPP
  <renew> command.  Include both sample commands and sample responses.

3.2.4 EPP <transfer> Command

  Describe the object-specific mappings required to implement the EPP
  <transfer> command.  Include both sample commands and sample
  responses.

3.2.5 EPP <update> Command

  Describe the object-specific mappings required to implement the EPP
  <update> command.  Include both sample commands and sample responses.

4. Formal Syntax

  Provide the XML schema for the object mapping.  An XML DTD MUST NOT be
  used as DTDs do not provide sufficient support for XML namespaces and
  strong data typing.




















Hollenbeck              Expires October 9, 2001                [Page 62]