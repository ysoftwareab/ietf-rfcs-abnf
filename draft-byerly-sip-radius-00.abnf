User-Password = md5hash(NAS-secret, nonce) XOR user-password

A1 = unq(username-value) ":" unq(realm-value) ":" passwd

A1 = H( unq(username-value) ":" unq(realm-value)
                ":" passwd
                ":" unq(nonce-value) ":" unq(cnonce-value))

WWW-Authenticate = "WWW-Authenticate" ":" "CHAP-Password" chap-challenge
chap-challenge   = * (";" chap-params )
chap-params      = chap-username | chap-algorithm | chap-id | nonce
chap-algorithm   = "algorithm" "=" ( "MD5" | token )
chap-username    = quoted-string
chap-id          = "id" "=" + ( digit )
chap-nonce       = "nonce" "=" nonce-value
chap-nonce-value = <"> 32LHEX <">
LHEX             = "0" | "1" | "2" | "3" |
                   "4" | "5" | "6" | "7" |
                   "8" | "9" | "a" | "b" |
                   "c" | "d" | "e" | "f"

    chap-algorithm: A string indicating the authentication
                    method to be used.

    chap-username:  A string containing the user name.

    chap-id:        The CHAP Identifier is a one octet sequence number.

    nonce:          A string of 32 hex digits.  The contents of the
                    nonce are implementation dependent.  The quality
                    of the implementation depends on a good choice.
    Example: 

    WWW-Authenticate: CHAP-Password ;username="byerly" ;algorithm="MD5"
      ;id=0 ;nonce="10131973aaa511bb05261975aaa505fb"

    The chap-username is copied from the User-Name attribute
    of the Access-Challenge message received from the RADIUS server.

    The chap-id is copied from the (1-octet) Identifier field of the
    Access-Challenge message received from the RADIUS server.

    The chap-nonce-value is copied from the Access-Challenge message
    from the RADIUS server (from the CHAP-Challenge attribute if
    present, otherwise from the Request Authenticator).









Authorization = "Authorization" ":" "CHAP-Password" chap-response-line
chap-response-line   =  * (";" chap-response-params )
chap-response-params = chap-username | chap-id | nonce | chap-response
chap-response        = "response" "=" chap-response-value
chap-response-value  = <"> 32LHEX <">

    chap-response-value: A string of 32 hex digits computed as defined
    in Section 4.1 of RFC1994, which proves that the user knows a
    password.

    Example:

    Authorization: CHAP-Password ;username="byerly" ;id=0
      ;nonce="10131973aaa511bb05261975aaa505fb"
      ;response="f53a66e43c12a383aa65219ec873ce35"
    
    The client MUST increment the CSeq header before resubmitting
    the request.

    A server MAY be configured not to generate nonces only if replay
    attacks are not a concern.

    The Response Value (chap-response-value) of the CHAP-Password is
    computed per Section 4.1 of RFC 1994 [CHAP].  The 16-octet
    Response Value of the CHAP-Password should be formatted as
    32 hex digits and placed in the "chap-response-value" of
    the Authorization request.

    The chap-id should be placed in the (1-octet) Identifier field
    of the Access-Request message to the RADIUS server.  The chap-id
    should also be placed in the (1-octet) CHAP Identifier field
    of the CHAP-Password attribute of the Access-Request message
    to the RADIUS server.  (See sections 3, 5.3, [RAD])

    The nonce-value SHOULD be placed in the Request Authenticator
    of the Access-Request message to the RADIUS server.
    (See section 3, [RAD])
    Alternatively, the nonce-value MAY be placed in a CHAP-Challenge
    attribute in the Access-Request message to the RADIUS server.
    (See section 5.3, [RAD])

    The chap-response-value should be placed in the 16-octet
    String field of the CHAP-Password attribute in the Access-Request
    message to the RADIUS server.  (See section 5.3, [RAD])




Code = 1        (Access-Request)
ID = 0
Length = 71
User-Name = "byerly"
CHAP-Password = {1 octet CHAP ID (00) followed by 16 octet
                               CHAP response
                               (bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb)}
NAS-IP-Address = 192.168.1.16
NAS-Port = 5

Code = 11       (Access-Challenge}
ID = 0          (same as in Access-Request)
Length = 68
Reply-Message = "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
State = {Magic Cookie to be returned along with user's
                       response; in this example 8 octets of data}

Code = 1        (Access-Request)
ID = 1          (Note that this changes)
Length = 71
User-Name = "byerly"
CHAP-Password = {1 octet CHAP ID followed by 16 octet
                               CHAP response
                               (dddddddddddddddddddddddddddddddd)}
NAS-IP-Address = 192.168.1.16
NAS-Port = 5
State = {Magic Cookie from Access-Challenge packet,
                       unchanged}

Code = 2        (Access-Accept)
ID = 1          (same as in Access-Request)
Length = 30

Code = 1        (Access-Request)
ID = 0
Length = 71
User-Name = "byerly"
CHAP-Password = {1 octet CHAP ID (00) followed by 16 octet
                               CHAP response
                               (ffffffffffffffffffffffffffffffff)}
NAS-IP-Address = 192.168.1.16
NAS-Port = 5

Code = 2        (Access-Accept)
ID = 1          (same as in Access-Request)
Length = 56

