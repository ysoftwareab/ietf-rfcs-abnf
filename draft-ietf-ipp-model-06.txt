



         INTERNET-DRAFT
         draft-ietf-ipp-model-06.txt
                                                                       R. deBry
                                                                IBM Corporation
                                                                    T. Hastings
                                                              Xerox Corporation
                                                                     R. Herriot
                                                               Sun Microsystems
                                                                    S. Isaacson
                                                                   Novell, Inc.
                                                                      P. Powell
                                                     San Diego State University
                                                               October 14, 1997

                  Internet Printing Protocol/1.0: Model and Semantics

         Status of this Memo

         This document is an Internet-Draft.  Internet-Drafts are working
         documents of the Internet Engineering Task Force (IETF), its areas,
         and its working groups.  Note that other groups may also distribute
         working documents as Internet-Drafts.

         Internet-Drafts are draft documents valid for a maximum of six months
         and may be updated, replaced, or obsoleted by other documents at any
         time.  It is inappropriate to use Internet-Drafts as reference
         material or to cite them other than as "work in progress".

         To learn the current status of any Internet-Draft, please check the
         "1id-abstracts.txt" listing contained in the Internet-Drafts Shadow
         Directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),
         munnari.oz.au (Pacific Rim), ds.internic.net (US East Coast), or
         ftp.isi.edu (US West Coast).

         Abstract

         This document is one of a set of documents, which together describe
         all aspects of a new Internet Printing Protocol (IPP).  IPP is an
         application level protocol that can be used for distributed printing
         using Internet tools and technology.  The protocol is heavily
         influenced by the printing model introduced in the Document Printing
         Application (DPA) [ISO10175] standard.  Although DPA specifies both
         end user and administrative features, IPP version 1.0 is focused only
         on end user functionality.






         deBry, Hastings, Herriot, Isaacson, Powell                   [Page 1]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         The full set of IPP documents includes:

           Requirements for an Internet Printing Protocol [IPP-REQ]
           Internet Printing Protocol/1.0: Model and Semantics
           Internet Printing Protocol/1.0: Protocol Specification [IPP-PRO]
           Rationale for the Structure and Model and Protocol for the Internet
              Printing Protocol [IPP-RAT]

         The requirements document, "Requirements for an Internet Printing
         Protocol", takes a broad look at distributed printing functionality,
         and it enumerates real-life scenarios that help to clarify the
         features that need to be included in a printing protocol for the
         Internet.  It identifies requirements for three types of users: end
         users, operators, and administrators.  The requirements document calls
         out a subset of end user requirements that MUST be satisfied in the
         first version of IPP.  Operator and administrator requirements are out
         of scope for v1.0. This document, "Internet Printing Protocol/1.0:
         Model and Semantics",  describes a simplified model with abstract
         objects, their attributes, and their operations. The model introduces
         a Printer object and a Job object.  The Job object supports multiple
         documents per job.  The model document also addresses how security,
         internationalization, and directory issues are addressed. The protocol
         specification, " Internet Printing Protocol/1.0: Protocol
         Specification", is a formal mapping of the abstract operations and
         attributes defined in the model document onto HTTP/1.1.  The protocol
         specification defines the encoding rules for a new Internet media type
         called "application/ipp".























         deBry, Hastings, Herriot, Isaacson, Powell                   [Page 2]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


                                   Table of Contents

         1. Simplified Printing Model .......................................8
         2. IPP Objects ....................................................10
         2.1  Printer Object................................................10
         2.2  Job Object....................................................13
         2.3  Object Relationships..........................................14
         2.4  Object Identity...............................................14
         3. IPP Operations .................................................15
         3.1  General Semantics.............................................16
         3.1.1     Operation Characteristics................................16
         3.1.2     Operation Targets........................................18
         3.1.3     Character Set and Natural Language Operation Attributes..19
         3.1.3.1     Request Operation Attributes ..........................19
         3.1.3.2     Response Operation Attributes .........................20
         3.1.4     Operation Status Codes and Messages......................21
         3.1.5     Security Concerns for IPP Operations.....................22
         3.1.5.1     Authenticated Requester Identity ......................22
         3.1.5.2     Restricted Queries ....................................23
         3.1.6     Versions.................................................23
         3.1.7     Job Creation Operations..................................24
         3.2  Printer Operations............................................26
         3.2.1     Print-Job Operation......................................26
         3.2.1.1     Print-Job Request .....................................26
         3.2.1.2     Print-Job Response ....................................28
         3.2.2     Print-URI Operation......................................30
         3.2.3     Validate-Job Operation...................................31
         3.2.4     Create-Job Operation.....................................31
         3.2.5     Get-Attributes Operation.................................31
         3.2.5.1     Get-Attributes Request ................................32
         3.2.5.2     Get-Attributes Response ...............................33
         3.2.6     Get-Jobs Operation.......................................34
         3.2.6.1     Get-Jobs Request ......................................34
         3.2.6.2     Get-Jobs Response .....................................35
         3.3  Job Operations................................................36
         3.3.1     Send-Document Operation..................................37
         3.3.1.1     Send-Document Request .................................37
         3.3.1.2     Send-Document Response ................................39
         3.3.2     Send-URI Operation.......................................39
         3.3.3     Cancel Job Operation.....................................39
         3.3.3.1     Cancel-Job Request ....................................40
         3.3.3.2     Cancel-Job Response ...................................40
         3.3.4     Get-Attributes Operation.................................41
         3.3.4.1     Get-Attributes Request ................................41
         3.3.4.2     Get-Attributes Response ...............................41
         4. Object Attributes ..............................................42
         4.1  Attribute Syntaxes............................................42
         4.1.1     'text'...................................................43


         deBry, Hastings, Herriot, Isaacson, Powell                   [Page 3]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         4.1.2     'name'...................................................44
         4.1.3     'keyword'................................................44
         4.1.4     'enum'...................................................45
         4.1.5     'uri'....................................................45
         4.1.6     'uriScheme'..............................................45
         4.1.7     'charSet'................................................46
         4.1.8     'naturalLanguage'........................................46
         4.1.9     'mimeType'...............................................47
         4.1.10    'octetString'............................................48
         4.1.11    'boolean'................................................48
         4.1.12    'integer'................................................48
         4.1.13    'rangeOfInteger'.........................................48
         4.1.14    'dateTime'...............................................48
         4.1.15    'resolution'.............................................48
         4.1.16    '1setOf  X'..............................................49
         4.2  Job Template Attributes.......................................49
         4.2.1     job-sheets (type4 keyword, name).........................53
         4.2.2     job-priority (integer(1:100))............................54
         4.2.3     job-hold-until (type4 keyword, name).....................55
         4.2.4     multiple-document-handling (type2 keyword)...............56
         4.2.5     media (type4 keyword, name)..............................57
         4.2.6     number-up (integer)......................................57
         4.2.7     sides (type2 keyword)....................................58
         4.2.8     printer-resolution (resolution)..........................59
         4.2.9     print-quality (type2 enum)...............................59
         4.2.10    finishings (1setOf type2 enum)...........................59
         4.2.11    copies (integer(1:2**31 - 1))............................60
         4.2.12    page-ranges (1setOf rangeOfInteger)......................60
         4.2.13    orientation (type2 enum).................................61
         4.2.14    document-format (mimeType)...............................61
         4.2.15    compression (type3 keyword)..............................62
         4.2.16    job-k-octets (integer(0:2**31 - 1))......................62
         4.2.17    job-impressions (integer(0:2**31 - 1))...................62
         4.2.18    job-media-sheets (integer(0:2**31 - 1))..................63
         4.3  Job Description Attributes....................................63
         4.3.1     job-uri (uri)............................................64
         4.3.2     job-id (integer(1:MAX))..................................65
         4.3.3     job-more-info (uri)......................................65
         4.3.4     job-name (name)..........................................65
         4.3.5     job-originating-user (octetString).......................65
         4.3.6     job-state (type1 enum)...................................66
         4.3.7     job-state-reasons (1setOf  type2 keyword)................68
         4.3.8     job-state-message (text).................................70
         4.3.9     number-of-documents (integer(0:2**31 - 1))...............70
         4.3.10    output-device-assigned (name)............................71
         4.3.11    time-of-creation (integer)...............................71
         4.3.12    time-at-processing (integer).............................71
         4.3.13    time-at-completed (integer)..............................71


         deBry, Hastings, Herriot, Isaacson, Powell                   [Page 4]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         4.3.14    number-of-intervening-jobs (integer(0:2**31 - 1))........71
         4.3.15    job-message-from-operator (text).........................71
         4.3.16    job-k-octets-processed (integer(0:2**31 - 1))............72
         4.3.17    job-impressions-completed  (integer(0:2**31 - 1))........72
         4.3.18    job-media-sheets-completed (integer(0:2**31 - 1))........72
         4.3.19    attributes-charset (charSet).............................72
         4.3.20    attributes-natural-language (naturalLanguage)............73
         4.4  Printer Description Attributes................................73
         4.4.1     printer-uri (uri)........................................75
         4.4.2     printer-name (name)......................................75
         4.4.3     printer-location (text)..................................75
         4.4.4     printer-info (text)......................................75
         4.4.5     printer-more-info (uri)..................................75
         4.4.6     printer-driver-installer (uri)...........................76
         4.4.7     printer-make-and-model (text)............................76
         4.4.8     printer-more-info-manufacturer (uri).....................76
         4.4.9     printer-state (type1 enum)...............................76
         4.4.10    printer-state-reasons (1setOf type2 keyword).............77
         4.4.11    printer-state-message (text).............................80
         4.4.12    operations-supported (1setOf operation)..................80
         4.4.13    printer-charset (charSet)................................81
         4.4.14    charsets-supported (1setOf charSet)......................81
         4.4.15    printer-natural-language (naturalLanguage)...............81
         4.4.16    natural-languages-supported (1setOf naturalLanguage).....81
         4.4.17    printer-is-accepting-jobs (boolean)......................82
         4.4.18    queued-job-count (integer(0:2**31 - 1))..................82
         4.4.19    printer-message-from-operator (text).....................82
         4.4.20    color-supported (boolean)................................82
         4.4.21    reference-uri-schemes-supported (1setOf uriScheme).......83
         4.4.22    pdl-override (type2 keyword).............................83
         4.4.23    security-mechanisms-supported (1setOf keyword)...........83
         4.4.24    printer-up-time (integer(1:MAX)).........................84
         4.4.25    printer-current-time (dateTime)..........................84
         4.4.26    multiple-operation-time-out (integer)....................84
         5. Conformance ....................................................84
         5.1  Client Conformance Requirements...............................85
         5.2  Printer Object Conformance Requirements.......................85
         5.2.1     Objects..................................................86
         5.2.2     Operations...............................................86
         5.2.3     Attributes...............................................86
         5.2.4     Printer extensions.......................................87
         5.2.5     Attribute Syntaxes.......................................87
         5.3  Security Conformance Requirements.............................87
         6. IANA Considerations (registered and private extensions) ........87
         6.1  Typed Extensions..............................................88
         6.2  Registration of MIME types/sub-types for document-formats.....89
         6.3  Attribute Extensibility.......................................89
         6.4  Attribute Syntax Extensibility................................89


         deBry, Hastings, Herriot, Isaacson, Powell                   [Page 5]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         7. Internationalization Considerations ............................89
         8. Security Considerations ........................................91
         8.1  Client and Printer in the Same Security Domain................92
         8.2  Client and Printer in Different Security Domains..............92
         8.3  Print by Reference............................................93
         8.3.1     Unprotected Documents....................................93
         8.3.2     Protected Documents......................................93
         8.4  Common Security Scenarios.....................................93
         8.4.1     No Security..............................................93
         8.4.2     Message Protection During Transmission...................94
         8.4.3     Client Authentication and Authorization..................94
         8.4.4     Mutual Authentication, Authorization and Message Protection
                   94
         8.5  Recommended Security Mechanisms...............................94
         9. References .....................................................95
         10.Copyright Notice ...............................................99
         11.Author's Address ...............................................99
         12.APPENDIX A: Terminology .......................................102
         12.1 Conformance Terminology......................................102
         12.1.1    MUST....................................................102
         12.1.2    MUST NOT................................................102
         12.1.3    SHOULD..................................................102
         12.1.4    SHOULD NOT..............................................102
         12.1.5    MAY.....................................................102
         12.1.6    NEED NOT................................................103
         12.2 Model Terminology............................................103
         12.2.1    Keyword.................................................103
         12.2.2    Attributes..............................................103
         12.2.2.1    Attribute Name .......................................103
         12.2.2.2    Attribute Group Name .................................104
         12.2.2.3    Attribute Value ......................................104
         12.2.2.4    Attribute Syntax .....................................104
         12.2.3    Supports................................................104
         12.2.4    print-stream page.......................................106
         12.2.5    imposed page............................................106
         13.APPENDIX B:  Status Codes .....................................106
         13.1 Status Codes.................................................107
         13.1.1    Informational...........................................107
         13.1.2    Successful Status Codes.................................107
         13.1.2.1    successful-ok (0x0000) ...............................107
         13.1.2.2    successful-ok-ignored-or-substituted-attributes (0x0001)
                     108
         13.1.3    Redirection Status Codes................................108
         13.1.4    Client Error Status Codes...............................108
         13.1.4.1    client-error-bad-request (0x0400) ....................108
         13.1.4.2    client-error-forbidden (0x0401) ......................108
         13.1.4.3    client-error-not-authenticated (0x0402) ..............108
         13.1.4.4    client-error-not-authorized (0x0403) .................109


         deBry, Hastings, Herriot, Isaacson, Powell                   [Page 6]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         13.1.4.5    client-error-not-possible (0x0404) ...................109
         13.1.4.6    client-error-timeout (0x0405) ........................109
         13.1.4.7    client-error-not-found (0x0406) ......................109
         13.1.4.8    client-error-gone (0x0407) ...........................110
         13.1.4.9    client-error-request-entity-too-large (0x0408) .......110
         13.1.4.10   client-error-request-URI-too-long (0x0409) ...........110
         13.1.4.11   client-error-unsupported-document-format (0x040A) ....110
         13.1.4.12   client-error-attribute-not-supported (0x040B) ........111
         13.1.4.13   client-error-uri-scheme-not-supported (0x040C) .......111
         13.1.4.14   client-error-charset-not-supported (0x040D) ..........111
         13.1.4.15   client-error-natural-language-not-supported (0x040E) .111
         13.1.5    Server Error Status Codes...............................111
         13.1.5.1    server-error-internal- error (0x0500) ................112
         13.1.5.2    server-error-operation-not-supported (0x0501) ........112
         13.1.5.3    server-error-service-unavailable (0x0502) ............112
         13.1.5.4    server-error-version-not-supported (0x0503) ..........112
         13.1.5.5    server-error-device-error (0x0504) ...................112
         13.1.5.6    server-error-temporary-error (0x0505) ................113
         13.2 Status Codes for IPP Operations..............................114
         14.APPENDIX C:  "media" keyword values ...........................114
         15.APPENDIX D: Processing IPP Attributes .........................119
         15.1 Fidelity.....................................................119
         15.2 Page Description Language (PDL) Override.....................121
         15.3 Suggested Operation Processing Algorithm.....................122
         15.4 Using Job Template Attributes During Document Processing.....126
         16.APPENDIX E: Generic Directory Schema ..........................127
























         deBry, Hastings, Herriot, Isaacson, Powell                   [Page 7]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997



         1. Simplified Printing Model

         In order to achieve its goal of realizing a workable printing protocol
         for the Internet, the Internet Printing Protocol (IPP) is based on a
         simplified printing model that abstracts the many components of real
         world printing solutions.  The Internet is a distributed computing
         environment where requesters of print services  (clients,
         applications, printer drivers, etc.) cooperate and interact with print
         service providers.  This model and semantics document describes a
         simple, abstract model for IPP even though the underlying
         configurations may be complex "n-tier" client/server systems.  An
         important simplifying step in the IPP model is to expose only the key
         objects and interfaces required for printing.  The model does not
         include features, interfaces, and relationships that are beyond the
         scope of IPP/1.0.  IPP incorporates many of the relevant ideas and
         lessons learned from other specification and development efforts
         [HTPP] [LDPA] [P1387.4] [PSIS] [RFC1179] [SWP].

         The IPP model encapsulates the important components of distributed
         printing into two object types:

           - Printer (Section 2.1)
           - Job (Section 2.2)

         Each object type has an associated set of operations (see section 3)
         and attributes (see section 4).

         The terminology used in the remainder of this document is defined in
         (section 12).  In the remainder of this document, terms such as
         "attributes", "keywords", and "supports" have special meaning and are
         defined in the model terminology section. Capitalized terms such as
         MANDATORY, SHALL, and OPTIONAL have special meaning relating to
         conformance.  These terms are defined in the section on conformance
         terminology, most of which is taken from RFC 2119 [RFC2119].

         It is important, however, to understand that in real system
         implementations (which lie underneath the abstracted IPP model), there
         are other components of a print service which are not explicitly
         defined in the IPP model. The following figure illustrates where IPP
         fits with respect to these other components.









         deBry, Hastings, Herriot, Isaacson, Powell                   [Page 8]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997



                                      +--------------+
                                      |  Application |
                            o         +. . . . . . . |
                           \|/        |   Spooler    |
                           / \        +. . . . . . . |   +---------+
                         End-User     | Print Driver |---|  File   |
               +-----------+ +-----+  +------+-------+   +----+----+
               |  Browser  | | GUI |         |                |
               +-----+-----+ +--+--+         |                |
                     |          |            |                |
                     |      +---+------------+---+            |
         N   D   S   |      |      IPP Client    |------------+
         O   I   E   |      +---------+----------+
         T   R   C   |                |
         I   E   U   |
         F   C   R   -------------- Transport ------------------
         I   T   I
         C   O   T                    |         --+
         A   R   Y           +--------+--------+  |
         T   Y               |    IPP Server   |  |
         I                   +--------+--------+  |
         O                            |           |
         N                   +-----------------+  | IPP Printer
                             |  Print Service  |  |
                             +-----------------+  |
                                      |         --+
                             +-----------------+
                             | Output Device(s)|
                             +-----------------+

         An IPP Printer encapsulates the functions normally associated with
         physical output devices along with the spooling, scheduling and
         multiple device management functions often associated with a print
         server. IPP Printers are optionally registered as entries in a
         directory where end users find and select them based on some sort of
         filtered and context based searching mechanism.  The directory is used
         to store relatively static information about the Printer, allowing end
         users to search for and find Printers that match their search
         criteria, for example: name, context, printer capabilities, etc. (see
         section 16). The more dynamic information is directly associated with
         the IPP Printer itself.  This information includes state, currently
         loaded and ready media, number of jobs at the Printer, errors,
         warnings, and so forth.

         IPP Clients implement the IPP protocol on the client side, and give
         end users (or programs) the ability to query an IPP Printer and submit
         and manage print jobs.  An IPP server is just that part of the IPP


         deBry, Hastings, Herriot, Isaacson, Powell                   [Page 9]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         Printer that implements the server-side protocol.  The rest of the IPP
         Printer implements the application semantics of the print service
         itself.  The IPP Printer may be embedded in an output device or may be
         implemented on a host on the network that communicates with the output
         device.

         When a job is submitted to the Printer object and the Printer object
         validates the attributes in the submission request, the Printer object
         creates a new Job object.  The end user then interacts with this new
         Job object to query its status and monitor the progress of the job.
         End users may also cancel print job by using the Job object's Cancel-
         Job operation.  The end user is able to register to receive certain
         events that are then routed using the specified notification
         service(s).


         2. IPP Objects

         The IPP model introduces objects of type Printer and Job.  Each type
         of object models relevant aspects of a real-world entity such as a
         real printer or print job.  Each object type is defined as a set of
         possible attributes that may be supported by instances of that object
         type.  For each object, the actual set of supported attributes and
         values describe a specific implementation.  The object's attributes
         and values describe its state, capabilities, realizable features, job
         processing functions, and default behaviors and characteristics. For
         example, the object type Printer is defined as a set of attributes
         that each Printer object potentially supports.  In the same manner,
         the object type Job is defined as a set of attributes that are
         potentially supported by each Job object.

         Each attribute included in the set of attributes defining an object
         type is labeled as:

           - "MANDATORY": each object SHALL support the attribute.
           - "OPTIONAL": each object OPTIONALLY supports the attribute.

         There is no such similar labeling of attribute values.  However, if an
         implementation supports an attribute, it MUST support at least one of
         the possible values for that attribute.


         2.1 Printer Object

         A major component of the IPP model is the Printer object (also called
         the IPP Printer).  A Printer object implements the IPP protocol.
         Using the protocol, end users may query the attributes of the Printer
         and submit Jobs to the Printer.  The actual implementation components


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 10]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         behind the Printer abstraction may take on different forms and
         different configurations.  However, the model abstraction allows the
         details of the configuration of real components to remain opaque to
         the end user. Section 3 describes each of the Printer operations in
         detail.

         The capabilities and state of a Printer object are described by its
         attributes.  Printer attributes are grouped into two groups:

           - "job-template" attributes: These attributes the describe job
              processing capabilities and defaults for the Printer object. (See
              section 4.2)
           - "printer-description" attributes:  These attributes describe the
              Printer object's identification, state, location, references to
              other sources of information about the Printer object, etc. (see
              section 4.4)

         Since a Printer object is an abstraction of a generic document output
         device and print service provider, a Printer object could be used to
         represent any real or virtual device with semantics consistent with
         the Printer object, such as a fax device, an imager, or even a CD
         writer.

         Some examples of configurations supporting a Printer object include:

           1) An output device, with no spooling capabilities
           2) An output device, with a built-in spooler
           3) A print server supporting IPP with one or more associated output
              devices
              3a) The associated output devices might or might not be capable
                of spooling jobs
              3b) The associated output devices might or might not support IPP

         The following figures show some examples of how Printer objects can be
         realized on top of various distributed printing configurations.  The
         embedded case below represents configurations 1 and 2. The hosted and
         fan-out figures below represent configuration 3.













         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 11]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         Legend:

         ##### indicates a Printer object which is
               either embedded in an output device or is
               hosted in a server.  The implementation
               might or might not be capable of queuing/spooling.

         any   indicates any network protocol or direct
               connect, including IPP


         embedded printer:
                                                   output device
                                                 +---------------+
          O   +--------+                         |  ###########  |
         /|\  | client |------------IPP------------># Printer #  |
         / \  +--------+                         |  # Object  #  |
                                                 |  ###########  |
                                                 +---------------+


         hosted printer:
                                                 +---------------+
          O   +--------+        ###########      |               |
         /|\  | client |--IPP--># Printer #-any->| output device |
         / \  +--------+        # Object  #      |               |
                                ###########      +---------------+



                                                  +---------------+
         fan out:                                 |               |
                                              +-->| output device |
                                          any/    |               |
          O   +--------+      ###########   /     +---------------+
         /|\  | client |-IPP-># Printer #--*
         / \  +--------+      # Object  #   \     +---------------+
                              ########### any\    |               |
                                              +-->| output device |
                                                  |               |
                                                  +---------------+


         A Printer object is identified with a Uniform Resource Identifier
         (URI) [RFC1630].  Often, the URI is a Uniform Resource Locator (URL)
         [RFC1738] [RFC1808]..




         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 12]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         Note: The IPP protocol specification [IPP-PRO] defines a mapping of
         IPP onto HTTP/1.1.  Therefore, all conforming Printer objects SHALL
         support HTTP schemed URIs to identify themselves.  For example, a
         Printer object's URI could be "http://www.some-domain.org/printer-
         one".  A Printer object's URI could not be "ftp://ftp.some-
         domain.org/printer-one".

         IPP does not specify how the URI is obtained, but it is RECOMMENDED
         that a Printer object is registered in a directory service which end
         users and programs can interrogate. Section 16 defines a generic
         schema for Printer object entries in the directory service.


         2.2 Job Object

         A Job object is used to model a print job.  A Job can contain one or
         more documents.  The information required to create a Job object is
         sent in a create request from the end user via an IPP Client to the
         Printer object.  Section 3 describes each of the Job operations in
         detail.

         The characteristics and state of a Job object are described by its
         attributes.  Job attributes are grouped into two groups as follows:

           - "job-template" attributes:  These attributes are optionally
              supplied by the client or end user and include job processing
              instructions which are intended to override any Printer object
              defaults and/or instructions embedded within the document data.
              (See section 4.2)
           - "job-description" attributes: These attributes describe the Job
              object's identification, state, size, etc. The client does not
              supply values for these attributes, they are set by the Printer
              object.  (See section 4.3)

         A Job object contains at least one document, but may contain multiple
         documents.  A document consists of either:

           - a stream of data in a format supported by the Printer object, or
           - a URI reference to a stream of data in a format supported by the
              Printer

         A document is not modeled as an IPP object, therefore it has no object
         identifier or associated attributes.  All job processing instructions
         are modeled as Job object attributes.  These attributes are called Job
         Template attributes and they apply equally to all documents within a
         Job.




         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 13]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         2.3 Object Relationships

         IPP objects have relationships that MUST be maintained persistently
         along with the persistent storage of the object attributes.  A Printer
         object may represent one or more output devices.  A Printer object may
         represent a logical device which "processes" jobs but never actually
         uses a physical output device to put marks on paper (for example a Web
         page publisher or an interface into an online document archive or
         repository).  A Printer object contains zero or more Job objects.  A
         Job object is contained by exactly one Printer object, however the
         identical document data associated with a Job object could be sent to
         either the same or a different Printer object.  In this case, a new
         Job object would be created which would be almost identical to the
         existing Job object, however it would have a new (different) Job
         object identifier.  A Job object contains one or more documents.  If
         the contained document is a stream of printer-ready data, that stream
         can be contained in only one document.  However, there can be copies
         of the stream in other documents in the same or different Job objects.
         If the contained document is a reference to a stream of printer-ready
         data, other documents (in the same or different Job object(s)) may
         reference the same stream.


         2.4 Object Identity

         All Printer and Job objects have an identifier so that they can be
         persistently and unambiguously referenced.  The IPP model requires
         that these identifiers be URIs.  Often, the URI is a URL [RFC1738]
         [RFC1808].

         Allowing Job objects to have URIs allows for flexibility and
         scalability.  In some implementations, the Printer object might create
         Jobs that are processed in the same local environment as the Printer
         object itself.  In this case, the Job URI might just be a composition
         of the Printer's URI and some unique component for the Job object.  In
         other implementations, the Printer object might be a central clearing-
         house for validating all Job object creation requests, and the Job
         object itself might be created in some environment that is remote from
         the Printer object.  In this case, the Job object's URI may have no
         relationship at all to the Printer object's URI.

         However, many existing printing systems have local models or interface
         constraints that force Job objects to be identified using only a 32-
         bit positive integer rather than a URI.  This numeric Job ID is only
         unique within the context of the Printer object to which the create
         request was originally submitted.  In order to allow both types of
         client access to Jobs (either Job URI or numeric Job ID), when the
         Printer object successfully processes a create request and creates a


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 14]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         new Job, the Printer object SHALL generate both a Job URI and a Job ID
         for the new Job object.  This requirement allows all clients to access
         Printer objects and Job objects no matter the local constraints
         imposed on the client implementation.

         In addition to a unique identifier, Printer objects and Job objects
         may have names.  An object name need not be unique across all
         instances of all objects. A Printer object's name is chosen and set by
         an administrator through some mechanism outside the scope of IPP.  A
         Job object's name is optionally chosen and supplied by the IPP Client
         submitting the job.  If the client does not supply a Job object name,
         the Printer object generates a name for the new Job object.  In all
         cases, the name only has local meaning, and it is not constrained to
         be unique.

         To summarize:

           - Each Printer object is uniquely identified with a URI.  The
              Printer's "printer-uri" attribute contains the URI.
           - Each Job object is uniquely identified with a URI.  The Job's
              "job-uri" attribute contains the URI.
           - Each Job object is also uniquely identified with a combination of
              the URI of the Printer object to which the create request was
              originally submitted along with a Job ID (a 32-bit, positive
              number) that is unique within the context of that Printer object.
              The Printer object's "printer-uri" contains the Printer URI.  The
              Job object's "job-id" attribute contains the numeric Job ID.
           - Each Printer object has a name (which is not necessarily unique).
              The administrator chooses and sets this name through some
              mechanism outside the scope of IPP itself.  The Printer object's
              "printer-name" attribute contains the name.
           - Each Job object has a name (which is not necessarily unique).
              The client optionally supplies this name in the create request.
              If the client does not supply this name, the Printer object
              generates a name for the Job object. The Job object's "job-name"
              attribute contains the name.


         3. IPP Operations

         IPP objects have associated operations.  An operation consists of a
         request and a response.  When a client communicates with an IPP
         object, it issues an operation request to the URI for that object.
         Operations have attributes that supply information about the operation
         itself.  These attributes are called operation attributes (as compared
         to object attributes such as Printer attributes or Job attributes).
         Each request carries along with it any operation attributes and/or
         document data required by the object to perform the operation.  Each


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 15]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         request requires a response from the object.  Each response indicates
         success or failure of the operation with a status code.  The response
         contains any operation attributes, object attributes, and/or status
         messages generated by the execution of the operation request.

         This section describes the semantics of the IPP operations, both
         requests and responses, in terms of the attributes and other data
         associated with each operation.

         Note: The IPP protocol specification [IPP-PRO] describes a mapping and
         encoding of IPP operations onto HTTP/1.1 POST commands.  Other
         mappings for IPP operations to additional transport mechanisms are
         possible.

         The Printer operations are:

           Print-Job (section 3.2.1)
           Print-URI (section 3.2.2)
           Validate-Job (section 3.2.3)
           Create-Job (section 3.2.4)
           Get-Attributes (section 3.2.5)
           Get-Jobs (section 3.2.6)

         The Job operations are:

           Send-Document (section 3.3.1)
           Send-URI (section 3.3.2)
           Cancel-Job (section 3.3.3)
           Get-Attributes (section 3.3.4)

         The Send-Document and Send-URI Job operations are used to add a new
         document to an existing multi-document Job object created with the
         Create-Job operation.


         3.1 General Semantics

         3.1.1 Operation Characteristics

         Each IPP operation is defined as both a request and a response.  Both
         requests and responses are composed of groups of attributes and/or
         document data.  Attributes are grouped into the following groups:

           - Operation Attributes: These are attributes that are only passed
              in the operation itself, and usually do not persist beyond the
              life of the operation.  Operation attributes may also affect
              other attributes or groups of attributes since values in the
              operation attributes usually affect the behavior of the object


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 16]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              that processes the operation.  All IPP objects that accept IPP
              operation request MUST support all operation attributes.  Some
              operation attributes are OPTIONAL for the client to supply, but
              the IPP object MUST support the attribute by being prepare to
              handle the client supplied operation attribute by realizing the
              corresponding feature or function.
           - Job Template Attributes: These attributes affect the processing
              of a job.  They are OPTIONALLY supplied by a client in a create
              request, and the receiving object MUST be prepared to received
              all supported attributes.  The Job object can later be queried to
              find out what was originally requested in the create request.
              The Printer object can be queried to find out what type of job
              processing capabilities are supported and/or what the default job
              processing behaviors are.
           - Job Object Attributes: These attributes are returned in response
              to query operation directed at a Job object.
           - Printer Object Attributes: These attributes are returned in
              response to a query operation directed at a Printer object.
           - Unsupported Attributes: In a create request, the client supplies
              an optional set of Job Template attributes.  If any of these are
              unsupported by the Printer object, the Printer object returns
              them in the response.  Section 15 gives a full description of how
              Job Template attributes supplied by the client in a create
              request are processed by the Printer object and how unsupported
              attributes are returned to the client.

         Later in this section, each operation is formally defined by
         identifying the allowed and expected groups of attributes for request
         and response.  The model identifies a specific order for each group in
         each request or response, but the attributes within each group may be
         in any order.

         Note: Document data included in the operation is not strictly an
         attribute, but it is treated as a special attribute group for ordering
         purposes.  The only operations that support supplying the document
         data within an operation request are Print-Job and Send-Document.
         There are no operations responses that include document data.

         Since some operations are MANDATORY and some are OPTIONAL, a client
         SHOULD first use the MANDATORY Get-Attributes operation to query the
         Printer's "operations-supported" attribute before using any
         unsupported operation.  A client SHOULD NOT attempt to use an
         unsupported operation.  When a Printer object receives a request to
         perform an operation it does not support, it returns the error code
         'server-error-operation-not-supported' (see section 13.1.5.2).





         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 17]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         3.1.2 Operation Targets

         All IPP operations are directed at IPP objects.  For Printer
         operations, the operation is always directed at a Printer object using
         its URI (the "printer-uri" attribute).

         For Job operations, the operation is directed at either:

           - the Job object itself using the Job object's URI ("job-uri")
              assigned by the Printer object, or
           - the Printer object to which the job was originally submitted
              using the URI of the Printer ("printer-uri") in combination with
              and the 32-bit numeric Job ID ("job-id") assigned by the Printer
              object.

         If the operation is directed at the Job object directly using the Job
         object's URI, the client SHOULD NOT include the redundant "job-id"
         operation attribute.

         Note:  In the mapping of IPP over HTTP/1.1, the object's URI is
         actually encoded as the "request-URI" field of the HTTP POST
         operation. In the case of Printer operations directed at a Printer
         object, the Printer object's "printer-uri" attribute is mapped to the
         "request-URI" attribute in the HTTP header. In the case of Job
         operations directed at the Job object, the Job object's "job-uri"
         attribute is mapped to the "request-URI" attribute in the HTTP header.
         In the case of Job operations directed at the Printer object that
         created the Job, the Printer object's "printer-uri" attribute is sent
         in the HTTP header, and the "job-id" attribute is sent as an
         operational attribute in the request body. In other mappings of IPP
         operations onto some other transport mechanism, the target URI is
         encoded using some other transport specific addressing mechanism.

         The following rules apply to the use of port numbers in URIs that
         identify IPP objects:

           1. If the protocol scheme for the URI allows the port number to be
              explicitly included in the URI string, and an explicit port
              number is specified in the published URI, then that port number
              MUST be used by the client to contact the IPP server.

           2. If the protocol scheme for the URI does not allow an explicit
              port number specification, then the default port number for the
              protocol should be used.

           3. Consult the appropriate IPP protocol mapping document to
              determine alternate port numbers for the protocol specified in
              the server URI.


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 18]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997



         3.1.3 Character Set and Natural Language Operation Attributes

         Some Job and Printer attributes have values that are text strings and
         names intended for human understanding rather than machine
         understanding (see the 'text' and 'name' attribute syntax descriptions
         in section 4.1).  The following sections describe two MANDATORY
         attributes for every IPP operation request and response.  These
         attributes are "attributes-charset" and "attributes-natural-language".
         For the sake of brevity in this document, these operation attribute
         descriptions are not repeated with every operation request and
         response, but have a reference back to this section instead.

         3.1.3.1 Request Operation Attributes

         The client SHALL supply and the Printer object SHALL support the
         following MANDATORY operation attributes in every IPP operation
         request:

           "attributes-charset" (charSet):
              This operation attribute identifies the charset (coded character
              set and encoding method) used by any 'text' and 'name' attributes
              that the client is supplying in this request and that the Printer
              object SHALL return in this operation response.  See Sections
              4.1.1 and 4.1.2 for the specification of the 'text' and 'name'
              attribute syntaxes.

              The Printer object SHALL support the 'utf-8' charset [RFC2044]
              and MAY support additional charsets provided that they are
              registered with IANA [IANA-CS].  If the Printer object does not
              support the supplied charset value, the Printer object SHALL
              reject the request and return status code 'client-error-charset-
              not-supported'.  The Printer object SHALL indicate the charset(s)
              supported as the values of the "charsets-supported" Printer
              attribute (see Section 4.4.14), so that the client MAY query
              which charset(s) are supported.

              See the 'charSet' attribute syntax description in Section 4.1.7
              for the syntax and semantic interpretation of the values of this
              attribute and for example values.

           "attributes-natural-language" (naturalLanguage):
              This operation attribute identifies the natural language used by
              any 'text' and 'name' attributes that the client is supplying in
              this request.  A Printer SHOULD do its best to respond in the
              same natural language.




         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 19]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              There are no MANDATORY natural languages required for the Printer
              object to support.  However, the Printer's "natural-language-
              supported" attribute SHALL list the natural languages supported,
              so that the client MAY query which natural language(s) are
              supported.  For any of the attributes for which the Printer
              generates messages, i.e., for the "job-state-message", "printer-
              state-message" attributes ", and Status Messages (see Section
              3.1.4) in operation responses, the Printer object SHALL be able
              to generate messages in any of its supported natural languages.
              If the client requests a natural language that is not supported,
              the Printer object SHALL return these generated messages in the
              Printer's configured natural language as specified by the
              Printer's "printer-natural-language " attribute" (see Section
              4.4.15).

              For other Printer 'text' and 'name' attributes supplied by the
              operator, system administrator, or manufacturer, i.e., for
              "printer-name" (name), "printer-location" (text), "printer-info"
              (text), and "printer-make-and-model" (text), the Printer object
              is only required to support the configured natural language of
              the Printer identified by the Printer's "printer-natural-language
              " attribute, though support of additional natural languages for
              these attributes is permitted

              If the Printer object does not support the natural language value
              supplied by the client, the Printer object SHALL either (1)
              reject the request and return status code ' client-error-natural-
              language-not-supported' or (2) accept the natural language rather
              than returning an error, depending on implementation.  In the
              latter case, the Printer object SHALL use the method for
              representing exception natural languages in attribute values as
              described for the 'text' attribute syntax in Section 4.1.1 for
              any such 'text' or 'name' attributes that the Printer (1) accepts
              from or (2) returns to a client.

              See the 'naturalLanguage' attribute syntax description in Section
              4.1.8 for the syntax and semantic interpretation of the values of
              this attribute and for example values.

         3.1.3.2 Response Operation Attributes

         The Printer object SHALL supply and the client SHALL support the
         following MANDATORY operation attributes in every IPP operation
         response:

           "attributescharset" (charSet):
              This operation attribute identifies the charset used by any
              'text' and 'name' attributes that the Printer object is returning


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 20]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              in this response.  The value in this response SHALL be the same
              value as the "attributes-charset" operation attribute supplied by
              the client in the request.  See "attributes-charset" described in
              Section 3.1.3.1 above.

              If the Printer object supports more than just the 'utf-8'
              charset, the Printer object SHALL be able to code convert between
              each of the charsets supported on a highest fidelity possible
              basis in order to return the 'text' and 'name' attributes in the
              charset requested by the client.  However, some information loss
              MAY occur during the charset conversion depending on the charsets
              involved.  For example, the Printer object may convert from a
              UTF-8 'a' to a US-ASCII 'a' (with no loss of information),  from
              an ISO Latin 1 CAPITAL LETTER A WITH ACUTE ACCENT to US-ASCII 'A'
              (losing the accent), or from a UTF-8 Japanese Kanji character to
              some ISO Latin 1 error character indication such as '?', decimal
              code equivalent, or to the absence of a character, depending on
              implementation.

           "attributes-natural-language" (naturalLanguage):
              This is a MANDATORY Job Template attribute for the Printer object
              to return.  This attribute specifies the natural language used by
              'text' and 'name' attributes with empty tags in this response and
              SHALL be the same value as supplied by the client in the request,
              whether the Printer object supports that value or not.  Any
              'text' or 'name' values in this response that have a different
              natural language SHALL have a fully specified natural language
              tag pre-pended to each such attribute value.

              In a subsequent query request (Get-Attributes or Get-Jobs), the
              Printer object NEED NOT convert any 'text' or 'name' attribute
              values to the natural language of the requester when it is
              different from that specified (and subsequently stored) in the
              original create request..  In such cases, the Printer object
              SHALL return an explicit natural language indicator for each such
              attribute value.  See the 'text' attribute syntax description in
              Section 4.1.1.

         3.1.4 Operation Status Codes and Messages

         Every operation response returns a MANDATORY status code and an
         OPTIONAL status message. A status code provides information on the
         processing of a request.  A status message provides a short textual
         description of the status of the operation.  The status code is
         intended for use by automata and the status message is intended for
         the human user.  If a response does include a status message, an IPP
         client is not required to examine or display the status message,
         however it SHOULD do so in some implementation specific manner.


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 21]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         Section 13 describes the status codes and suggests a corresponding
         status message for each status code.  In some cases, if the status
         code indicates an error, there may be additional attributes in the
         response that are not returned in the successful case.  One such
         example is the set of unsupported attributes in the Print-Job response
         (see section 3.2.1.2).

         The status code is a numeric value that has semantic meaning.  The
         status code is similar to a "type2 enum" (see section 4.1 on
         "Attribute Syntaxes") except that values can range only from 0x0000 to
         0xFFFF.

         A client implementation of IPP could convert status code values into
         any localized string that has semantic meaning to the end user.  The
         Printer object SHALL be able to generate this message in any of the
         natural languages identified by the Printer's "natural-language-
         supported" attribute (see the "attributes-natural-language" operation
         attribute specified in Section 3.1.3.1).  If the charset requested by
         the client in the "attributes-charset" operation attribute is not
         supported by the Printer object, the Printer object SHALL represent
         the status message, if returned, in the charset specified by the
         Printer's "printer-charset" attribute (which the client MAY not be
         able to interpret).

         3.1.5 Security Concerns for IPP Operations

         3.1.5.1 Authenticated Requester Identity

         IPP is layered on top of security services that supply the requester's
         identity.  It is assumed that the identity supplied by the
         authentication service is the most authenticated identity required by
         a given site's configuration and current policy.  It is also assumed
         that the layering allows for a single IPP implementation to be run
         over a consistent interface that supplies the authenticated identity.
         The authentication interface should allow for various modular and
         extensible authentication service implementations without requiring
         changes to the IPP implementation.

         Once the authenticated identity of the requester has been supplied to
         the IPP implementation, the implementation uses that identity to
         enforce any authorization policy(ies) that might be in place.  When a
         Job is created, the identity of the requester from the create request
         is persistently stored in the Job's "job-originating-user" attribute.
         This attribute can be used to match the requester's identity of
         subsequent operations on that Job in order to enforce the local
         authorization policy(ies), if any. For example, a one site's policy
         might be that only the job owner is allowed to cancel a job.  There
         are operation status codes that allow an implementation to return


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 22]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         information back to the operation requester about what has been
         forbidden, not allowed, or not authorized.  The details of and
         mechanisms to set up authorization policy(ies) are not part of IPP,
         and must be established via some mechanism outside the scope of IPP.

         3.1.5.2 Restricted Queries

         In many of these IPP operations, a client supplies a list of
         attributes to be returned in the response.  A Printer may be
         configured, for security reasons, not to return all attributes that a
         client requests.  It may even return none of the requested attributes.
         In such cases, the status returned is the same as if the Printer had
         returned all requested attributes.  The client cannot tell by such a
         response whether the requested attribute was present or absent on the
         Printer or Job.

         3.1.6 Versions

         Each operation request carries with it a version number. Each version
         number is in the form "X.Y" where X is the major version number and Y
         is the minor version number. By including a version number in the
         client request, it allows the client (the requester) to identify which
         version of IPP it is interested in using. If the Printer does not
         support that version, the Printer responds with a status code of
         'server-error-version-not-supported'.

         There is no version negotiation per se. However, if after receiving a
         version not supported status code from the Printer, there is nothing
         that prevents a client from trying again with a different version
         number. For example, a client might be configured to support IPP
         version 3.0, 2.5, 2.0 and 1.0 (hypothetically speaking). A client
         might first try to speak version 3.0. If after receiving a version not
         supported, it might successively try version 2.5, then 2.0, and then
         1.0. All implementations MUST support version 1.0.

         There is only one version number that covers both IPP Model and the
         IPP Protocol changes. Thus the version number MUST change when
         introducing a new version of the Model document or a new version of
         the Protocol document.

         Changes to the major version number indicate structural or syntactic
         changes that make it impossible for older version IPP processors to
         correctly parse and interpret the new or changed attributes,
         operations and responses. If the major version number changes, the
         minor version numbers is set to zero. One example that would have
         required a change to the major version number would have been adding
         the "ipp-attribute-fidelity" attribute if it had not been part of
         version 1.0. Items that might affect the changing of the major version


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 23]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         number include any changes to the protocol specification itself such
         as:

           - reordering of ordered attributes or attribute sets
           - changes to the syntax of existing attributes
           - changing OPTIONAL to MANDATORY and vice versa

         Changes to the minor version number indicate the addition of new
         features, attributes and attribute values that may not be understood
         by all IPP processors, but which can be ignored if not understood.
         Items that might affect the changing of the minor version number
         include any changes to the model objects and attributes but not the
         protocol specification itself, such as:

           - grouping all extensions not included in a previous version into a
              new version
           - formally adding in new attribute values
           - changing any of the type1 attributes

         3.1.7 Job Creation Operations

         In order to "submit a print job" and create a new Job object, a client
         issues a create request.  A create request is any one of following
         three operation requests:

           - The Print-Job Request: A client that wants to submit a print job
              with only a single document uses the Print-Job operation. .  The
              operation allows for the client to "push" the document data to
              the Printer by including the document data in the request itself.

           - The Print-URI Request: A client that wants to submit a print job
              with only a single document where the Printer "pulls" the
              document data uses the Print-URI operation.   In this case, the
              client includes only a URI reference to the document data (not
              the document data itself).

           - The Create-Job Request: A client that wants to submit a print job
              with multiple documents uses the Create-Job operation. . This
              operation is followed by an arbitrary number of Send-Document or
              Send-URI operations (each creating another document for the newly
              create Job object).  The Send-Document operation includes the
              document data in the request (the client "pushes" the document
              data to the printer), and the Send-URI operation includes only a
              URI reference to the document data in the request (the Printer
              "pulls" the document data from the referenced location).  The
              last Send-Document or Send-URI request for a given Job object
              includes a "last-document" operation attribute set to 'true'
              indicating that this is the last document.


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 24]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997



         Throughout this model specification, the term "create request" is used
         to refer to any of these three operation requests.

         A Create-Job operation followed by only one Send-Document operation is
         semantically equivalent to a Print-Job operation, however, for
         performance reasons, the client SHOULD use the Print-Job operation for
         all single Document Jobs.  Also, Print-Job is a MANDATORY operation
         (all implementations MUST support it) whereas Create-Job is an
         OPTIONAL operation, hence some implementations might not support it.

         Section 15 describes the rules and issues surrounding the processing
         and either the acceptance or rejection of a create request.

         Job submission time is the point in time when a client issues a create
         request.  The initial state of every Job object is the 'pending' or
         'pending-held' state.  Later, the Printer object begins processing the
         job.  At this point in time, the Job object's state moves to
         'processing'.  This is known as job processing time.  There are
         validation checks that must be done at job submission time and others
         that must be performed at job processing time.

         At job submission time and at the time a Validate-Job operation is
         received, the Printer MUST do the following:

           1. Process the client supplied attributes using the rules supplied
              in section 15 and either accept or reject the request
           2. Validate the syntax of and support for the scheme of any client
              supplied URI

         At job submission time the Printer SHOULD NOT perform the validation
         checks reserved for job processing time such as:

           1. Validate the document data
           2. Validate the actual contents of any client supplied URI (resolve
              the reference and follow the link to the document data)

         At job submission time, these additional job processing time
         validation checks are essentially useless, since they require actually
         parsing and interpreting the document data, are not guaranteed to be
         100% accurate, and must yet be done again at job processing time.
         Also, in the case of a URI, checking for availability at job
         submission time does not guarantee availability at job processing
         time.   In addition, at job processing time, the Printer object might
         discover any of the following conditions that were not detectable at
         job submission time:

           - runtime errors in the document data,


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 25]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           - nested document data that is in an unsupported format,
           - the URI reference is no longer valid (i.e., the server hosting
              the document might be down), or
           - any other job processing error

         At job processing time, since the Printer has already responded with a
         successful status code in the response to the create request, if the
         Printer object detects an error, the Printer object in unable to
         inform the end user of the error with an operational status code.   In
         this case, the Printer, depending on the error, can set the "job-
         state", "job-state-reasons", or "job-state-message" attributes to the
         appropriate value(s) so that later queries can report the correct job
         status.


         3.2 Printer Operations

         All Printer operations are directed at Printer objects.  A client MUST
         always supply the "printer-uri" attribute in order to identify the
         correct target of the operation.  In HTTP/1.1 mapping of IPP, this
         attribute is not supplied in the body of the operation as other
         operation attributes are.  It is supplied in the "request-URI" field
         in the HTTP header.

         3.2.1 Print-Job Operation

         When an end user desires to submit a print job with only one document
         and the client supplies the document data (rather than just a
         reference to the data), the client uses a Print-Job operation.

         3.2.1.1 Print-Job Request

         The following groups of attributes are supplied as part of the Print-
         Job Request:

         Group1: Operation Attributes

           Target:
              The "printer-uri" target for this operation as described in
              section 3.1.2.

           Natural Language and Character Set:
              The "attributes-charset" and "attributes-natural-language"
              attributes as described in section 3.1.3.1.

           "job-name" (name):
              This attribute is OPTIONALLY supplied by the client, and it
              contains the client supplied Job name.  If this attribute is


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 26]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              supplied, its value it used for the "job-name" attribute of the
              newly created Job object. If this attribute is not supplied by
              the client, the Printer generates a name to use in the "job-name"
              attribute of the newly created Job object (see Section 4.3.4).

           "document-name" (name):
              This attribute is OPTIONALLY supplied by the client, and it
              contains the client supplied document name.  The document name
              MAY be different than the Job name.  Typically, the client
              software automatically supplies the document name on behalf of
              the end user by using a file name or an application generated
              name.  If this attribute is supplied, its value can be used in a
              manner defined by each implementation.  Examples include: printed
              along with the Job (banner page, page adornments, etc.), used by
              accounting or resource tracking management tools, or even stored
              along with the document as a document level attribute.  IPP/1.0
              does not support the concept of document level attributes,
              however, a vendor specific extension to IPP/1.0 might support the
              document level attributes.  In this case, the "document-name"
              attribute could be persistently stored along with the document
              and queried using a Get-Attributes operation on the Job object
              that includes a request for document level attributes or some
              other private extension mechanism.

           "ipp-attribute-fidelity" (boolean):
              This attribute is OPTIONALLY supplied by the client. If not
              supplied, the Printer object assumes the value is 'false'.  The
              value 'true' indicates that total fidelity to client supplied
              attributes and values is required. The value 'false' indicates
              that a reasonable attempt to print the Job is acceptable.  All
              Printer objects MUST support both types of job processing.  See
              section 15  for a full description of "ipp-attribute-fidelity"
              and its relationship to other attributes, especially the Printer
              object's "pdl-override" attribute.

           "document-charset" (charSet):
              This attribute is OPTIONALLY supplied by the client.  A Printer
              object SHALL support this attribute if it supports a document-
              format that requires a character set to be identified in order to
              unambiguously interpret the document, such as 'text/plain'.
              There are no particular values required for the Printer object to
              support.  This attribute specifies the charset of the document
              for those document-formats that require a specification of the
              charset in order to image the document unambiguously.  If the
              value of the "document-format" attribute contains a charset
              parameter (see 'mimeType' attribute syntax in Section 4.1.9), the
              client SHALL also supply the "document-charset" attribute and its
              value SHALL be the same.


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 27]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997



           "document-natural-language" (naturalLanguage):
              This attribute is OPTIONALLY supplied by the client.  There are
              no particular values are required for the Printer object to
              support.   This attribute specifies the natural language of the
              document for those document-formats that require a specification
              of the natural language in order to image the document
              unambiguously.


         Group2: Job Template Attributes

              The client OPTIONALLY supplies a set of Job Template attributes
              as defined in section 4.2. See section 15  for a full description
              of Job Template attributes.

         Group 3: Document Content

              The client MUST supply the document data to be processed.

         Note: The simplest Print-Job Request consists of just the Document
         Content and nothing else.  In this case, the Printer object:

           - creates a new Job object (the Job object contains a single
              document),
           - stores a generated Job name in the "job-name" attribute,
           - assumes that the document data is in a supported format, and
           - uses its corresponding default value attributes for missing Job
              Template attributes and embedded instructions in the document
              data.


         3.2.1.2 Print-Job Response

         The Printer SHALL return to the client the following sets of
         attributes as part of the Print-Job Response:

         Group 1: Operation Attributes

           Status Code and Message:
              The response includes the MANDATORY status code and an OPTIONAL
              "status-message" (text) operation attribute as described in
              section 3.1.4.

           Natural Language and Character Set:
              The "attributes-charset" and "attributes-natural-language"
              attributes as described in section 3.1.3.2.



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 28]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         Group 2: Job Object Attributes

           "job-uri" (uri):
              The Printer object MUST return the Job object's MANDATORY  "job-
              uri" attribute.

           "job-id":
              The Printer object MUST return the Job object's MANDATORY  "job-
              id" attribute.

           "job-state":
              The Printer object MUST return the Job object's MANDATORY "job-
              state" attribute. The value of this attribute (along with the
              value of the next attribute "job-state-reasons") is taken from a
              "snapshot" of the new Job object at some meaningful point in time
              (implementation defined) between when the Printer object receives
              the Print-Job Request and when the Printer object returns the
              response.

           "job-state-reasons":
              The Printer object OPTIONALLY returns the  Job object's OPTIONAL
              "job-state-reasons" attribute. If the Printer object supports
              this attribute  then it MUST be returned in the response.  If
              this attribute is not returned in the response, the client can
              assume that the "job-state-reasons" attribute is not supported
              and will not be returned in a subsequent Job object query.

           "job-state-message":
              The Printer object OPTIONALLY returns the Job object's OPTIONAL
              "job-state-message" attribute. If the Printer object supports
              this attribute then it MUST be returned in the response.  If this
              attribute is not returned in the response, the client can assume
              that the "job-state-message" attribute is not supported and will
              not be returned in a subsequent Job object query.

           "number-of-intervening-jobs":
              The Printer object OPTIONALLY returns the Job object's OPTIONAL
              "number-of-intervening-jobs" attribute.  If the Printer object
              supports this attribute then it MUST be returned in the response.
              If this attribute is not returned in the response, the client can
              assume that the "number-of-intervening-jobs" attribute is not
              supported and will not be returned in a subsequent Job object
              query.

              Note: Since any printer state information which affects a job's
              state is reflected in the "job-state" and "job-state-reasons"
              attributes, it is sufficient to return only these attributes and
              no specific printer status attributes.


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 29]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997



         Group 3: Unsupported Attributes

              This is an OPTIONAL set of attributes.  It is a set of Job
              Template attributes supplied by the client (in the request) that
              are not supported by the Printer object. When the Printer object
              rejects the request because of more than one unsupported
              attribute (see section 15), it SHOULD return all of the
              unsupported attributes.  Some implementations may choose to only
              return the first unsupported attribute that is encountered during
              the processing of the attributes, but that may lead to additional
              requests with only one "fixed" attribute from the set of problem
              attributes.  In the case where the Printer object accepts the
              request and creates a Job object, the Printer MUST return the set
              of unsupported attributes where substitutions were made or the
              attribute was completely ignored.

              Unsupported attributes fall into two categories:

              1. The Printer object does not support the named attribute (no
              matter what the value), or
              2. The Printer object does supports the attribute, but not the
              particular value supplied by the client (i.e., the Printer does
              not have that value in the corresponding supported values
              attribute).

              In the case of an unsupported attribute name, the Printer object
              returns the client supplied attribute with a substituted special
              value of 'unsupported' indicating no support for the attribute
              itself. In the case of a supported attribute with an unsupported
              value, the Printer object simply returns the client-supplied
              attribute.  This indicates support for the attribute, but no
              support for that particular value.

         Note: The simplest response consists of the just the MANDATORY Job
         Attributes and a status code of "successful-ok".

         3.2.2 Print-URI Operation

         This operation is identical to the Print-Job operation (section 3.2.1)
         except that a client supplies a URI reference to the document data
         using the "document-uri" (uri) operation attribute rather than
         including the document data itself.  It is up to the IPP server to
         interpret the URI and subsequently "pull" the document from the source
         referenced by the URI string.  At job submission time, the Printer
         MUST validate the fact that it supports the retrieval method (e.g.,
         http, ftp, etc.) implied by the URI.  If the Printer object supports



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 30]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         this operation, it MUST support the "reference-uri-schemes-supported"
         attribute (see section 4.4.21).

         3.2.3 Validate-Job Operation

         This operation is similar to the Print-Job operation (section 3.2.1)
         except that a client supplies no document data and the Printer
         allocates no resources (i.e., it does not create a new Job object).
         This operation is used only to verify capabilities of a printer object
         against whatever attributes are supplied by the client in the
         Validate-Job request.  There are no Job Object Attributes returned in
         the Validate-Job Response.  If the Printer supports either the Print-
         URI or Send-URI operations, the client MAY include a "document-uri"
         attribute in the request.  In this case, the Printer MUST validate
         that the Printer supports the retrieval method implied by the URI, and
         SHOULD check for validate URI syntax.  The Printer NEED NOT follow the
         reference and validate the contents of the reference. If all is well,
         the Printer returns the status code "successful-ok".  Otherwise, the
         Printer returns a set of unsupported attributes and/or the appropriate
         error status code.  If the client supplies the "ipp-attribute-
         fidelity" attribute set to false (or does not supply the attribute at
         all) and if the Printer object returns a "successful-ok-ignored-or-
         substituted-attributes", the Printer object SHOULD return all ignored
         or substituted in the Unsupported Attributes group.  In such a case,
         the Printer object MUST return at least one attribute indicating an
         unsupported attribute value or an ignored attribute.

         3.2.4 Create-Job Operation

         This operation is similar to the Print-Job operation (section 3.2.1)
         except that in the Create-Job request , a client does not supply
         document data (or any reference to document data).  Also, the client
         does not supply any of the "document-name", "content-charset", or
         "content-natural-language" attributes.  This operation is followed by
         one or more Send-Document or Send-URI operations.  In each of these
         operation requests, the client OPTIONALLY supplies the "document-
         name", "content-charset", or "content-natural-language" attributes for
         each document in the multi-document Job.  If a Printer object supports
         the Create-Job operation, it MUST also support the Send-Document
         operation and also MAY support the Send-URI operation.

         3.2.5 Get-Attributes Operation

         The Printer Get-Attributes operation allows a client to obtain
         information from a Printer object. In the operations attributes in a
         request, the client supplies the set of attribute names and/or
         attribute group names in which the requester is interested.  In the
         operation attribute in the response, the Printer returns a


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 31]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         corresponding attribute set with the appropriate attribute values
         filled in.

         For Printers, the possible names of attribute groups are:

           - 'job-template': all of the Job Template attributes that apply to
              a Printer object (the last two columns of the table in Section
              4.2).
           - 'printer-description': the attributes specified in Section 4.4.

         There is also the special group 'all' that includes all supported
         attributes.  Since a client MAY request specific attributes or named
         groups, there is a potential that there is some overlap.  For example,
         if a client requests, 'printer-name', 'printer-description', and
         'all', client is actually requesting the "printer-group, and once by
         inclusion in the 'all' group.   In all cases, the Printer SHALL only
         return the attribute once in the response.

         It is NOT REQUIRED that a Printer support all attributes belonging to
         a group, however it is MANDATORY that each Printer implementation
         understand all group names.

         3.2.5.1 Get-Attributes Request

         The following sets of attributes are part of the Get-Attributes
         Request when the request is directed to a Printer object:

         Group 1: Operation Attributes

           Target:
              The "printer-uri" target for this operation as described in
              section 3.1.2.

           Natural Language and Character Set:
              The "attributes-charset" and "attributes-natural-language"
              attributes as described in section 3.1.3.1.

           "requested-attributes" (1setOf keyword) :
              The client OPTIONALLY supplies a set of attribute names  and/or
              attribute group names in whose values the requester is
              interested.  If the client omits this attribute, the Printer
              SHALL respond as if this attribute had been supplied with a value
              of 'all'.

           "document-format" (mimeType) :
              The client OPTIONALLY supplies this attribute.  This attribute is
              useful for a Printer to determine the set of supported attribute
              values that relate to the requested document format.  The Printer


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 32]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              SHOULD return only (1) those attributes that are supported for
              that format and (2) the attribute values that are supported for
              the specified document format.  By specifying the document
              format, the client can get the Printer to eliminate the
              attributes and values that are not supported for a specific
              document format.  For example, a Printer might have multiple
              interpreters to support both 'application/postscript' (for
              PostScript) and 'text/plain' (for text) documents.  However, for
              only one of those interpreters might the Printer be able to
              support "number-up" with values of '1', '2', and '4'.  For the
              other interpreter it might be able to only support "number-up"
              with a value of '1'.

              If the client omits this attribute, the Printer SHALL respond as
              if the attribute had been supplied with a value set to the
              Printer object's "document-format-default" default value
              attribute.  It is recommended that the client always supply a
              value for "document-format", since the Printer object's
              "document-format-default" may be 'application/octet-stream', in
              which case the returned attributes and values are for the union
              of the document formats that the Printer can automatically sense.
              For more details, see the description of the 'mimeType' attribute
              syntax in section 4.1.9.

              NOTE:  The "document-format" operation attribute is a fairly
              sophisticated filtering notion that is not supported by many
              existing print systems or devices.

         3.2.5.2 Get-Attributes Response

         The Printer object returns the following sets of attributes as part of
         the Get-Attributes Response:

         Group 1: Operation Attributes

           Status Code and Message:
              The response includes the MANDATORY status code and an OPTIONAL
              "status-message" (text) operation attribute as described in
              section 3.1.4.

           Natural Language and Character Set:
              The "attributes-charset" and "attributes-natural-language"
              attributes as described in section 3.1.3.2.

         Group 2: Requested Printer Object Attributes





         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 33]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              This is the set of requested attributes and their current values.
              The Printer object ignores (does not respond with) any requested
              attribute which is not supported.

         3.2.6 Get-Jobs Operation

         The Get-Jobs operation allows a client to retrieve the list of Jobs
         belonging to the target Printer object.  The client may also supply a
         list of Job attribute names or attribute group names.  These Job
         attributes will be returned for each Job that is returned.

         This operation is similar Get-Attributes, except that this Get-Jobs
         operation returns attributes from possibly more than one object (see
         the description of attribute group names in section 3.3.4).

         3.2.6.1 Get-Jobs Request

         The client submits the Get-Jobs request to a Printer object.

         The following groupsof attributes are part of the Get-Jobs Request:

         Group 1: Operation Attributes

           Target:
              The "printer-uri" target for this operation as described in
              section 3.1.2.

           Natural Language and Character Set:
              The "attributes-charset" and "attributes-natural-language"
              attributes as described in section 3.1.3.1.

           "limit" (integer):
              The client OPTIONALLY supplies this attribute. It is an integer
              value that indicates a limit to the number of Job objects
              returned.  The limit is a "stateless limit" in that if the value
              supplied by the client is  'n', then only the first 'n' jobs are
              returned in the Get-Jobs Response.  There is no mechanism to
              allow for the next 'm' jobs after the first 'n' jobs.  If the
              client does not supply this attribute, the Printer object
              responds will all applicable jobs.

           "requested-attributes" (1setOf keyword):
              The client OPTIONALLY supplies this attribute. It is a set of Job
              attribute names or attribute groups names in whose values the
              requester is interested.  This set of attributes is returned for
              each Job that is returned. The allowed attribute group names are
              the same as those defined in the Get-Attributes operation for Job
              objects. If the client does not supply this attribute, the


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 34]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              Printer SHALL respond as if the client had supplied values of
              'job-uri' and 'job-id'.

           "which-jobs" (keyword):
              The client OPTIONALLY supplies this attribute. It indicates which
              Jobs should be returned by the Printer object.  The values for
              this attribute are:

              'completed': This includes any Job object whose state is
                'completed', 'cancelled', or 'aborted'.
              'not-completed': This includes any Job object whose state is
                   'pending', 'processing', 'processing-stopped', 'pending-
                   held', 'unknown'.

              If the client does not supply the attribute, the Printer object
              SHALL respond as if the client had supplied the value of 'not-
              completed'.

         3.2.6.2 Get-Jobs Response

         The Printer object returns all of the Job objects that match the
         criteria as defined by the attribute values supplied by the client in
         the request.  It is possible that no Job objects are returned since
         there may literally be no Job objects at the Printer, or there may be
         no Job objects that match the criteria supplied by the client.  If the
         client requests any Job attributes at all, there is a set of Job
         Object Attributes returned for each Job object.

         Group 1: Operation Attributes

           Status Code and Message:
              The response includes the MANDATORY status code and an OPTIONAL
              "status-message" (text) operation attribute as described in
              section 3.1.4.

           Natural Language and Character Set:
              The "attributes-charset" and "attributes-natural-language"
              attributes as described in section 3.1.3.2.

         Groups 2 to N: Job Object Attributes

              The Printer object responds with one set of Job Object Attributes
              for each returned Job object.

              For any job submitted in a different natural language than the
              natural language that the client is requesting in the Get-Jobs
              request, the Printer SHALL indicate the submitted natural
              language by returning the "job-natural-language" as the first Job


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 35]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              object attribute, which overrides the "attributes-natural-
              language" operation attribute value being returned by the
              Printer.  If any returned 'text' or 'name' attribute includes an
              exception natural language as described in the 'text' attribute
              syntax (see Section 4.1.1), the exception natural language
              overrides the "job-natural-language" value (for the immediately
              following attribute value only).

         Jobs are returned in the following order:

           - If the client requests all 'completed' Jobs (Jobs in the
              'completed', 'aborted', or 'cancelled' states), then the Jobs are
              returned newest to oldest (with respect to actual completion
              time)
           - If the client requests all 'non-completed' Jobs (Jobs in the
              'pending', 'processing', 'pending-held', 'processing-stopped',
              and 'unknown' states), then Jobs are returned in relative
              chronological order of expected time to complete (based on
              whatever scheduling algorithm is configured for the Printer
              object).


         3.3 Job Operations

         All Job operations are directed at Job objects.  A client MUST always
         supply some means of identifying the Job object in order to identify
         the correct target of the operation.  Since Job objects can be
         identified with either a single Job URI or a combination of a Printer
         URI with a local Job ID, the following rules apply to all Job
         operation requests mapped onto HTTP/1.1:

           -  If the client chooses to identify Job objects with just the Job
              URI, this "job-uri" attribute is not supplied in the body of the
              operation as other operation attributes are.  It is supplied in
              the "request-URI" field in the HTTP header. - If the client
              chooses to identify Job objects with both a Printer URI and a
              local Job ID, the "printer-uri" attribute is not supplied in the
              body of the operation, but it is supplied in the "request-URI"
              field in the HTTP header.  The "job-id" attribute is included as
              an operation attribute.

         Since the Get-Attributes operation can be both a Printer operation and
         a Job operation, if a Printer object receives a Get-Attributes
         request, the Printer object must check for the existence of the "job-
         id" operation attribute.  If present, the operation is intended to be
         a Job operation on the corresponding Job object.  If absent, the
         operation is intended to be a Printer operation.



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 36]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         3.3.1 Send-Document Operation

         A client uses a Create-Job operation to create a multi-document Job
         object that is initially "empty" (contains no documents).  In the
         Create-Job response, the Printer object returns the Job object's URI
         (the "job-uri" attribute) and the Job object's 32-bit identifier (the
         "job-id" attribute).  For each new document that the client desires to
         add, the client uses a Send-Document operation.  Each Send-Document
         Request contains the entire stream of document data for one document.

         Since the Create-Job and the Send-Documents that follow can occur over
         arbitrarily long periods of time, each Printer object must decide how
         long to "wait" for the next Send-Document operation.  The Printer
         object OPTIONALLY supports the "multiple-operation-timeout" attribute.
         This attribute indicates the maximum number of seconds the Printer
         object will wait for the next Send-Document operation.  If the Printer
         object times-out waiting for the next Send-Document operation, the
         Printer object MAY decide on any of the following semantic actions:

           1. Assume that the Job is an invalid job, start the process of
              changing the job state to 'aborted', and clean up all resources
              associated with the Job.  In this case, if another Send-Document
              operation is finally received, the Printer responds with an
              "client-error-not-possible" or "client-error-not-found" depending
              on whether or not the Job object is still around when it finally
              arrives.
           2. Assume that the last Send-Document received was in fact the last
              document (as if the "last-document" flag had been set to 'true'),
              close the Job, and proceed to process it (i.e., move the Job's
              state to 'pending').
           3. Assume that the last Send-Document received was in fact the last
              document, close the Job, but move it to the 'pending-held' to
              allow an operator to determine whether or not to continue
              processing  the Job by moving it back to the 'pending' state.

         Each implementation is free to decide the "best" action to take
         depending on local policy, the value of "ipp-attribute-fidelity",
         and/or any other piece of information available to it.  If the choice
         is to abort the Job, it is possible that the Job may already have been
         processed to the point that some pages have been printed.

         3.3.1.1 Send-Document Request

         The following attribute sets are part of the Send-Document Request:

         Group 1: Operation Attributes




         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 37]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           Target:
              Either the "printer-uri" plus "job-id" or "job-uri" target for
              this operation as described in section 3.1.2.

           Natural Language and Character Set:
              The "attributes-charset" and "attributes-natural-language"
              attributes as described in section 3.1.3.1.

           "document-name" (name):
              The client OPTIONALLY supplies this attribute, and it contains
              the client supplied document name.  The document name MAY be
              different than the Job name.  It might be helpful, but NEED NOT
              be unique across multiple documents in the same Job.  Typically,
              the client software automatically supplies the document name on
              behalf of the end user by using a file name or an application
              generated name.  See the description of the "document-name"
              operation attribute in the Print-Job Request (section 3.2.1.1)
              for more information about this attribute.

           "last-document" (boolean):
              The client MUST supply this attribute.  It is a boolean flag that
              is set to 'true' if this is the last document for the Job,
              'false' otherwise.

           "document-charset" (charSet):
              This attribute is OPTIONALLY supplied by the client.  A Printer
              object SHALL support this attribute if it supports a document-
              format that requires a character set to be identified in order to
              unambiguously interpret the document, such as 'text/plain'.
              There are no particular values required for the Printer object to
              support.  This attribute specifies the charset of the document
              for those document-formats that require a specification of the
              charset in order to image the document unambiguously.  If the
              value of the "document-format" attribute contains a charset
              parameter (see 'mimeType' attribute syntax in Section 4.1.9), the
              client SHALL also supply the "document-charset" attribute and its
              value SHALL be the same.

           "document-natural-language" (naturalLanguage):
              This attribute is OPTIONALLY supplied by the client.  There are
              no particular values required for the Printer object to support.
              This attribute specifies the natural language of the document for
              those document-formats that require a specification of the
              natural language in order to image the document unambiguously,
              such as proper glyph selection..

         Group 2: Document Content



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 38]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              The client MUST supply the document data if the "last-document"
              flag is set to 'false'.  However, since a client might not know
              that the previous document sent with a Send-Document operation
              was the last document (i.e., the "last-document" attribute was
              set to 'false'), it is legal to send a Send-Document request with
              no document data where the "last-document" flag is set to 'true'.


         3.3.1.2 Send-Document Response

         The following sets of attributes are part of the Send-Document
         Response:

         Group 1: Operation Attributes

           Status Code and Message:
              The response includes the MANDATORY status code and an OPTIONAL
              "status-message" (text) operation attribute as described in
              section 3.1.4.

           Natural Language and Character Set:
              The "attributes-charset" and "attributes-natural-language"
              attributes as described in section 3.1.3.2.

         Group 2: Job Object Attributes

              This is the same set of attributes as described in the Print-Job
              response (see section 3.2.1.2).


         3.3.2 Send-URI Operation

         This operation is identical to the Send-Document operation (see
         section 3.3.1) except that a client supplies a URI reference
         ("document-uri" operation attribute) rather than the document data
         itself.  If a Printer object supports this operation, clients can use
         both Send-URI or Send-Document operations to add new documents to an
         existing multi-document Job object.

         The Printer object MUST validate the syntax of the supplied URI before
         returning a response.  If the Printer object supports this operation,
         it MUST support the URI types defined under the Print-URI operation
         (see section 3.2.2)

         3.3.3 Cancel Job Operation

         This operation allows a client to cancel a Print Job any time after a
         create job operation..  Since a Job might already be printing by the


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 39]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         time a Cancel-Job is received, some pages may be printed before the
         job is actually terminated.

         3.3.3.1 Cancel-Job Request

         The following groups of attributes are part of the Cancel-Job Request:

         Group 1: Operation Attributes

           Target:
              Either the "printer-uri" plus "job-id" or "job-uri" target for
              this operation as described in section 3.1.2.

           Natural Language and Character Set:
              The "attributes-charset" and "attributes-natural-language"
              attributes as described in section 3.1.3.1.

           "message" (text):
              OPTIONAL message to the operator.  This is not the same as the
              "job-message-from-operator" attribute.  This attribute is used to
              send a message along with the operation request.  It is an
              implementation decision of how or where to display this message
              (if at all).

         3.3.3.2 Cancel-Job Response

         The following sets of attributes are part of the Cancel-Job Response:

         Group 1: Operation Attributes

           Status Code and Message:
              The response includes the MANDATORY status code and an OPTIONAL
              "status-message" (text) operation attribute as described in
              section 3.1.4.

           Natural Language and Character Set:
              The "attributes-charset" and "attributes-natural-language"
              attributes as described in section 3.1.3.2.

         Once a successful response has been sent, the implementation
         guarantees that the Job will eventually end up in the 'cancelled'
         state.  If the implementation is forced to leave the job in the some
         other state, the "job-state-reasons" SHOULD contain the ' processing-
         to-stop-point ' value which indicates to later queries that although
         the Job may still be 'processing', it will eventually end up in the
         'cancelled' state, not the 'completed' state.




         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 40]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         3.3.4 Get-Attributes Operation

         The Job Get-Attributes operation allows a client to obtain information
         from a Job object and it is almost identical to the Get-Attributes
         operation for a Printer object (see section 3.2.5).  The only
         differences are that the operation is directed at a Job rather than a
         Printer and there is no "document-format" operation attribute used
         when querying a Job object.

         For Jobs, the attribute groups include:

           - 'job-template': all of the Job Template attributes that apply to
              a Job object (the first column of the table in Section 4.2).
           - 'job-description': the attributes specified in Section 4.3.

         There is also the special group 'all' that includes all supported
         attributes.  If for some reason, the client includes an attribute two
         or more times in the request (e.g., the client supplies values of
         'all', 'job-template', and 'sides' in the "requested-attributes"
         attribute), the Printer SHALL only return one occurrence of the
         attribute in the response.

         3.3.4.1 Get-Attributes Request

         The following groups of attributes are part of the Get-Attributes
         Request when the request is directed at a Job object:

         Group 1: Operation Attributes

           Target:
              Either the "printer-uri" plus "job-id" or "job-uri" target for
              this operation as described in section 3.1.2.

           Natural Language and Character Set:
              The "attributes-charset" and "attributes-natural-language"
              attributes as described in section 3.1.3.1.

           "requested-attributes" (1setOf keyword) :
              An OPTIONAL set of attribute names and/or attribute group names
              in whose values the requester is interested.  If the client omits
              this attribute, the Printer SHALL respond as if this attribute
              had been supplied with a value of 'all'.

         3.3.4.2 Get-Attributes Response

         The Printer object returns the following sets of attributes as part of
         the Get-Attributes Response:



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 41]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         Group 1: Operation Attributes

           Status Code and Message:
              The response includes the MANDATORY status code and an OPTIONAL
              "status-message" (text) operation attribute as described in
              section 3.1.4.

           Natural Language and Character Set:
              The "attributes-charset" and "attributes-natural-language"
              attributes as described in section 3.1.3.2.

         Group 2: Requested Job Object Attributes

              This is the set of requested attributes and their current values.
              The Printer object ignores (does not respond with) any requested
              attribute which is not supported.

         4. Object Attributes

         This section describes the attributes with their corresponding
         syntaxes and values that are part of the IPP model. The sections below
         show the objects and their associated attributes which are included
         within the scope of this protocol.  Many of these attributes are
         derived from other relevant specifications:

           - Document Printing Application (DPA) [ISODPA]
           - RFC 1759 Printer MIB  [RFC1759]

         Each attribute is uniquely identified in this document using a
         "keyword" (see section 12.2.1).  The keyword is included in the
         section header describing that attribute.  All attributes are uniquely
         identified with a keyword as its name.   In addition, some attributes
         are defined having a syntax that is a set of keywords.


         4.1 Attribute Syntaxes

         This section defines the basic attribute syntax types that a client
         and server SHALL be able to handle.  Each attribute description in
         sections 3 and 4 includes the name of attribute syntax(es) in the
         heading (in parentheses).  A conforming implementation of an attribute
         SHALL include the semantics of the attribute syntax(es) so identified.
         Section 6 describes how the protocol can be extended with new
         attribute syntaxes.

         Most attributes are defined to have a single attribute syntax.
         However, a few attributes (e.g., "job-sheet", "media", "job-hold-
         until") are defined to have several attribute syntaxes, depending on


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 42]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         the value.  Since each value SHALL be tagged as to its attribute
         syntax in the protocol, a single-valued attribute instance may have
         any one of its attribute syntaxes and a multi-valued attribute
         instance may have a mixture of its defined attribute syntaxes.

         The attribute syntaxes are specified in the following sub-sections,
         where the sub-section heading is the name of the attribute syntax
         inside the single quotes:

         4.1.1 'text'

         The 'text' attribute syntax is a sequence of one or more characters
         with a limit of 1 to 4095 octets.  The Printer object SHALL support
         UTF-8 [RFC2044] and MAY support additional charsets provided that they
         are registered with IANA [IANA-CS].  See Section 4.1.7 for the
         specification of the 'charSet' attribute syntax, including restricted
         semantics and examples of charsets.

         If the client needs to pass or the Printer object needs to return a
         'text' attribute in a different natural language than the rest of the
         'text' attributes in the request or response as indicated by the
         "attributes-natural-language" operation attribute (see Section 3.1.3),
         the client or Printer object SHALL immediately precede that attribute
         value with a 'naturalLanguage' attribute value that indicates the
         differing natural language.  Thus the attribute becomes multi-valued
         with two values.  This additional values is called an "exception"
         natural language value.  In a create operation, the Printer object
         SHOULD accept and store an exception natural language value.  If the
         Printer object does not store an exception natural language value, the
         Printer SHALL ignore it and SHALL store the immediately following
         'text' value only.  The Printer SHALL not reject the request no matter
         what value the client supplies as an exception natural language.

         If the attribute is multi-valued (1setOf text), then the exception
         natural language value applies only to the next 'text' value.
         Subsequent values in a multi-valued 'text' attribute in a request or a
         response revert to the natural language of the operation attribute or
         the "job-natural-language" job attribute, if present, in the case of a
         Get-Jobs response.

         Example:  If the client supplies the "attributes-natural-language"
         operation attribute with the value:  'en' indicating English, but the
         values of the "job-name" attribute is in French, the values of the
         normally single-valued "job-name" attribute supplied by the client in
         any request or returned by the Printer object in any response would be
         the following two values, each tagged with the appropriate attribute
         syntax ('naturalLanguage' and 'text') in the protocol:



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 43]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           'fr': exception natural language indicating French with attribute
              syntax 'naturalLanguage'
           'Rapport Mensuel': the job name in French with attribute syntax
              'name'.

         4.1.2 'name'

         The 'name' attribute syntax is the same as 'text', including the
         MANDATORY support of UTF-8 and the exception natural language
         mechanism, except that the sequence of characters is limited so that
         its encoded form is of length 1 to 255 octets.  This syntax type is
         used for user-friendly strings, such as a Printer name, that, for
         humans, are more meaningful than identifiers.

         Note:  Only the 'text' and 'name attribute syntaxes permit the
         exception natural language mechanism.

         Example:  If the client supplies the "attributes-natural-language"
         operation attribute with the value:  'en' indicating English, but the
         "printer-name" attribute is in German, the values of the normally
         single-valued "printer-name" attribute returned by the Printer in any
         operation response would be the following two values, each tagged with
         the appropriate attribute syntax ('naturalLanguage' and 'name') in the
         protocol:

           'de':  exception natural language indicating German with the
              attribute syntax 'naturalLanguage'
           'Farbdrucker':  the Printer name in German with attribute syntax
              'name'

         4.1.3 'keyword'

         The 'keyword' attribute syntax is a sequence of characters, length: 1
         to 255, containing only the US-ASCII [ASCII] encoded values for
         lowercase letters ("a" - "z"), digits ("0" - "9"), hyphen ("-"), dot
         ("."), and underscore ("_").  The first character MUST be a lowercase
         letter.  Furthermore, keywords SHALL be in U.S. English.

         This syntax type is used for enumerating semantic identifiers of
         entities in the abstract protocol, i.e., entities identified in this
         document.  Keywords are used as attribute names or values of
         attributes.  Unlike 'text' and 'name' attribute values, 'keyword'
         values SHALL NOT use the exception natural language mechanism, since
         they SHALL always be US-ASCII and U.S. English.  When accepting
         keywords from users and displaying keywords to users, clients SHOULD
         localize the keywords to the charset and natural language of the user.




         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 44]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         In the definition for each attribute of this syntax type, the full set
         of defined keyword values for that attribute are listed.

         When a keyword is used to represent an attribute (its name), it MUST
         be unique within the full scope of all IPP objects and attributes.
         When a keyword is used to represent a value of an attribute, it MUST
         be unique just within the scope of that attribute.  That is, the same
         keyword SHALL not be used for two different values within the same
         attribute to mean two different semantic ideas.  However, the same
         keyword MAY be used across two or more attributes, representing
         different semantic ideas for each attribute. Section 6 describes how
         the protocol can be extended with new keyword values.  Examples of
         attribute name keywords:

           "job-name"
           "attributes-charset "

         4.1.4 'enum'

         The 'enum' attribute syntax is an enumerated integer value that is in
         the range from -2**31 to 2**31 - 1.   Each value has an associated
         'keyword' name.  In the definition for each attribute of this syntax
         type, the full set of possible values for that attribute are listed..
         This syntax type is used for attributes for which there are enum
         values assigned by other standards, such as SNMP MIBs.  A number of
         attribute enum values in this specification are also used for
         corresponding attributes in other standards [RFC1759]..  This syntax
         type is not used for attributes to which the system administrator may
         assign values. Section 6 describes how the protocol can be extended
         with new enum values.  Though this document includes a symbolic name
         for each enum value (in U.S. English), when accepting enum names from
         users and displaying enum names to users, clients SHOULD localize the
         names to the charset and natural language of the user.

         4.1.5 'uri'

         The 'uri' attribute syntax is any valid Uniform Resource Identifier or
         URI [RFC1630].  Most often, URIs are simply Uniform Resource Locators
         or URLs [RFC1738] [RFC1808].

         4.1.6 'uriScheme'

         The 'uriScheme' attribute syntax is a sequence of characters
         representing a URI scheme according to RFC 1738 [RFC1738].  Standard
         values for this syntax type are the following keywords:

           'http':  for HTTP schemed URIs (e.g., "http://...")
           'ftp': for FTP schemed URIs (e.g., "ftp://...")


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 45]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           'mailto': for SMTP schemed URIs (e.g., "mailto:...")
           'file': for file schemed URIs (e.g., "file:...")

         4.1.7 'charSet'

         The 'charSet' attribute syntax is a standard identifier of a coded
         character set and encoding scheme for labeling certain document
         contents and 'text' and 'name' attribute values.  The syntax and
         semantics of this attribute syntax are specified in RFC 2046 [RFC2046]
         and contained in the IANA character-set Registry [IANA-CS] according
         to the IANA procedures [IANA-CSa].  As specified in RFC 2046, the
         values SHALL be case-insensitive and SHALL be in US-ASCII.  When a
         character-set in the IANA registry has more than one name (alias), the
         name labeled as "(preferred MIME name)" SHALL be used.

         Some examples are:

           'utf-8':  ISO 10646 Universal Multiple-Octet Coded Character Set
              (UCS) represented as the UTF-8 [RFC2044] transfer encoding scheme
              in which US-ASCII is a subset charset.  The 'utf-8' charset value
              supplied in the "attributes-charset" operation attribute (see
              Section 3.1.3), which is used to identify the charset of 'text'
              and 'name' attributes, SHALL be restricted to conformance level 2
              of ISO 10646 [ISO10646-1], so that accented letters SHALL NOT be
              represented with non-spacing accents.  This same 'utf-8' value
              supplied in the "document-format" operation attribute (see
              Sections 3.2.1.1 and 3.3.1.1), MAY include level 3 of ISO 10646.
           'US-ASCII':  7-bit American Standard Code for Information
              Interchange (ASCII), ANSI X3.4-1986 [ASCII].  This standard
              defines US-ASCII, but RFC 2045 [46] eliminates most of the
              control characters from conformant usage in MIME and IPP.
           'iso-8859-1':  8-bit One-Byte Coded Character Set, Latin Alphabet
              Nr 1 [ISO8859-1].  This defines a coded character set that is
              used by Latin languages in the Western Hemisphere and Western
              Europe.  US-ASCII is a subset charset.

         Some attribute descriptions MAY place additional requirements on
         charset values that may be used, such as MANDATORY values the MUST be
         supported or additional restrictions, such as requiring that the
         charset have US-ASCII as a subset charset.

         4.1.8 'naturalLanguage'

         The 'naturalLanguage' attribute syntax is a standard identifier for a
         natural language and optionally a country.  The values for this syntax
         type are taken from RFC 1766 [RFC1766].  As specified in RFC 1766, the
         values SHALL be case-insensitive and SHALL be in US-ASCII.  Examples
         include:


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 46]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           'en':  for English
           'en-us': for US English
           'FR': for French
           'de':  for German

         4.1.9 'mimeType'

         The 'mimeType' attribute syntax is the standard defined Internet Media
         Type (sometimes called MIME type) as defined by RFC 2046 [RFC2046] and
         registered according to the procedures of RFC 2048 [RFC2048] for
         identifying a document format.  The value MAY include a charset
         parameter, depending on the specification of the Media Type in the
         IANA Registry [IANA-MT]. Examples:

           'text/html': An HTML document
           'text/plain': A plain text document in US-ASCII (RFC 2046 indicates
              that in the absence of the charset parameter SHALL mean US-ASCII
              rather than simply unspecified) [RFC2046].
           'text/plain; charset=US-ASCII':  A plain text document in US-ASCII
              [52, 56].
           'text/plain; charset=ISO-8859-1':  A plain text document in ISO
              8859-1 (Latin 1) [ISO8859-1].
           'text/plain; charset=utf-8':  A plain text document in ISO 10646
              represented as UTF-8 [RFC2044]
           'text/plain, charset=iso-10646-ucs-2':  A plain text document in
              ISO 10646 represented in two octets (UCS-2) [ISO10646-1]
           'application/postscript':  A PostScript document [RFC2046]
           'application/vnd.hp-PCL':  A PCL document [IANA-MT] (charset escape
              sequence embedded in the document data)
           'application/octet-stream':  Auto-sense - see below

         One special type is 'application/octet-stream'.   If the Printer
         object supports this value, the Printer object or the device SHALL be
         capable of auto-sensing the format of the document data. If the
         Printer object's default value attribute is set to 'application/octet-
         stream' the Printer object not only supports auto-sensing of the
         document format, but will depend on the result of applying its auto-
         sensing algorithm in the case of missing information not supplied by
         the client.  If the client supplies a document format value, the
         Printer SHOULD rely on the supplied attribute, rather than trust its
         auto-sensing algorithm.  To summarize:

           1. If the client does not supply a document format value, the
              Printer MUST rely on its default value setting (which may be
              'application/octet-stream' indicating an auto-sensing mechanism).
           2. If the client supplies a value other than 'application/octet-
              stream', the client is supplying valid information about the
              format of the document data and the Printer object SHOULD trust


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 47]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              the client supplied value more than the outcome of applying an
              automatic format detection mechanism.  For example, the client
              may be requesting the printing of a PostScript file as a
              'text/plain' document.  The Printer object SHOULD print a text
              representation of the PostScript commands rather than interpret
              the stream of PostScript commands and print the result.
           3. If the client supplies a value of 'application/octet-stream',
              the client is indicating that the Printer object SHOULD use its
              auto-sensing mechanism whether auto-sensing is the Printer
              object's default or not.

         4.1.10 'octetString'

         The 'octetString' attribute syntax is a sequence of octets.  This
         syntax type is used for opaque data

         4.1.11 'boolean'

         The 'boolean' attribute syntax is like a keyword with only two values
         'true' and 'false'.

         4.1.12 'integer'

         The 'integer' attribute syntax is an integer value that is in the
         range from -2**31 to 2**31 - 1. Each individual attribute may specify
         the range constraint explicitly if the range is different from the
         full range of possible integer values (e.g., 0 - 100 for the "job-
         priority" attribute), however, the enforcement of that additional
         constraint is up to the IPP objects, not the protocol.

         4.1.13 'rangeOfInteger'

         The 'rangeOfInteger' attribute syntax is an ordered set of two
         integers, the smallest first, followed by the largest.  The pair of
         integers identifies an inclusive range of integer values.

         4.1.14 'dateTime'

         The 'dateTime' attribute syntax is a standard, fixed length
         representation of the "DateAndTime" syntax as defined in RFC 1514
         [RFC1514] and RFC 1903 [RFC1903].  When accepting 'dateTime' values
         from users and displaying 'dateTime' values to users, clients SHOULD
         localize the values to the charset and natural language of the user.

         4.1.15 'resolution'

         The 'resolution' attribute syntax specifies a two-dimensional
         resolution in the indicated units.  It consists of 3 integers: a cross


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 48]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         feed direction resolution (positive integer value), a feed direction
         resolution (positive integer value), and a units value.  The semantics
         of these three components are taken from the Printer MIB [RFC1759]
         suggested values.  That is, the cross feed direction component
         resolution component is the same as the
         prtMarkerAddressabilityXFeedDir object in the Printer MIB, the feed
         direction component resolution component is the same as the
         prtMarkerAddressabilityFeedDir in the Printer MIB, and the units
         component is the same as the prtMarkerAddressabilityUnit object in the
         Printer MIB (namely dots per inch and dots per centimeter).  All three
         values MUST be present even if the first two values are the same.
         Example:  '300', '600', '3' indicates a 300 dpi cross-feed direction
         resolution, a 600 dpi feed direction resolution, since a '3' indicates
         dots per inch.

         4.1.16 '1setOf  X'

         The '1setOf  X' attribute syntax is 1 or more values of attribute
         syntax type X.  This syntax type is used for multi-valued attributes.
         The syntax type is called '1setOf' rather than just 'setOf' as a
         reminder that the set of values SHALL NOT be empty (i.e., a set of
         size 0).  Sets are normally unordered, however each attribute
         description of this type may specify that the values MUST be in a
         certain order for that attribute.


         4.2 Job Template Attributes

         Job Template attributes describe job processing behavior.  Support for
         Job Template attributes by a Printer object is OPTIONAL (see section
         12.2.3 for a description of support for OPTIONAL attributes).  Also,
         clients OPTIONALLY supply Job Template attributes in create requests.

         Job Template attributes conform to the following rules.  For each Job
         Template attribute called "foo":

           1. The Printer object OPTIOINALLY supports a "foo-supported"
              attribute that describes which job processing behaviors are
              supported by that Printer object.  A client can query the Printer
              object to find out what foo-related behaviors are supported by
              inspecting the returned values of the "foo-supported" attribute.

           2. The Printer also OPTIONALLY supports a default value attribute
              named "foo-default". This default value attribute describes what
              will be done when no other job processing information is supplied
              by the client (either explicitly as an IPP attribute in the
              create request or implicitly as an embedded instruction within
              the document data). If the Printer supports either the "foo-


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 49]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              default" default value attribute or the "foo-supported"
              attribute, the Printer MUST support both.

           3. "foo" is OPTIOINALLY supplied by the client in a create request.
              If "foo" is supplied, the client is specifying that the Printer
              SHALL apply the corresponding job processing behavior to this Job
              while processing the Job.  When "foo" is not supplied, the client
              is specifying that the Printer apply the default job processing
              behavior.

              NOTE: Since an administrator MAY change the default value
              attribute after a Job has been submitted but before it has been
              processed, the default value used by the Printer object at job
              processing time may be different that the default value in effect
              at job submission time.

         If an application wishes to present an end user with a list of
         supported values from which to choose, the application SHOULD query
         the Printer for the supported values.  The application SHOULD also
         query the default value attributes. If the application then limits
         selectable values to only those value that are supported, the
         application can guarantee that the values supplied by the client in
         the create request all fall within the set of supported values at the
         Printer.  When querying the Printer, the client MAY enumerate each
         attribute by name in the Get-Attributes Request, or the client MAY
         just name the "job-template" group in order to get the complete set of
         supported attributes (both supported and default attributes).

         The "finishings" attribute is an example of a Job Template attribute.
         It can take on a set of values such as 'staple', 'punch', and/or
         'cover'.  A client can query the Printer object for the "finishings-
         supported" attribute and the "finishings-default" attribute.  The
         supported attribute contains a set of supported values.  The default
         value attribute contains the finishing value(s) that will be used for
         a new Job if the client does not supply a "finishings" attribute in
         the create request.  If the client does supply the "finishings"
         attribute in the create request, the Printer validates the value or
         values to make sure that they are a subset of the supported values.
         If the client-supplied values are all supported, the Job object is
         created with a "finishings" attribute that is populated with the
         values supplied by the client.  Subsequently, when the Job object is
         queried, it returns the values supplied by the client.  If the client
         does not supply a "finishings" attribute in the create request, the
         Job object is created, but no "finishings" attribute is associated
         with the new Job object.  A subsequent query of the Job object will
         return no "finishings" attribute.  In this case, the querying client
         knows that there were was no client supplied "finishings" attribute.
         If the client is interested to know what the default value is that the


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 50]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         Printer will use for the missing attribute, the client can query the
         Printer object's default value "finishings-default" attribute to find
         out how the Job will be finished.

         The table below summarizes the names and relationships for all Job
         Template attributes. The first column of the table (labeled "Job")
         shows the name and syntax for each Job Template attribute in the Job
         object. These are the attributes that can optionally be supplied by
         the client in a create request.   The last two columns (labeled
         "Printer: Default Value" and "Printer: Supported Values") shows the
         name and syntax for each Job Template attribute in the Printer object
         (the default value attribute and the supported values attribute).  A
         "No" in the table means the Printer SHALL NOT support the attribute
         (that is the attribute is simply not applicable).




































         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 51]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           +===================+======================+======================+
           | Job Attribute     |Printer: Default Value|  Printer: Supported  |
           |                   |   Attribute          |   Values Attribute   |
           +===================+======================+======================+
           | job-sheets        | job-sheets-default   |job-sheets-supported  |
           | (type4 keyword,   | (type4 keyword,      |(1setOf type4 keyword,|
           |    name)          |    name)             |    name)             |
           |                   |                      |                      |
           +-------------------+----------------------+----------------------+
         | job-priority      | job-priority-default |job-priority-supported|
           | (integer 1:100)   | (integer 1:100)      |(integer 1:100)       |
           |                   |                      |                      |
           +-------------------+----------------------+----------------------+
           | job-hold-until    | job-hold-until-      |job-hold-until-       |
           | (type4 keyword,   |  default             | supported            |
           |    name)          |  (type4 keyword,     |(1setOf type4 keyword,|
           |    name)          |    name)             |    name)             |
           +-------------------+----------------------+----------------------+
           |multiple-document- |multiple-document-    |multiple-document-    |
           | handling          | handling-default     |handling-supported    |
           | (type2 keyword)   | (type2 keyword)      |(1setOf type2 keyword)|
           +-------------------+----------------------+----------------------+
           | media             | media-default        | media-supported      |
           | (type4 keyword,   | (type4 keyword,      |(1setOf type4 keyword,|
           |    name)          |    name)             |    name)             |
           |                   |                      |                      |
           |                   |                      | media-ready          |
           |                   |                      |(1setOf type4 keyword,|
           |                   |                      |    name)              |
           |                   |                      |                      |
           +-------------------+----------------------+----------------------+
           | number-up         | number-up-default    | number-up-supported  |
           | (integer)         | (integer)            |(1setOf integer)      |
           |                   |                      |                      |
           +-------------------+----------------------+----------------------+
           | sides             | sides-default        | sides-supported      |
           | (type2 keyword)   | (type2 keyword)      |(1setOf type2 keyword)|
           |                   |                      |                      |
           +-------------------+----------------------+----------------------+
           | printer-resolution| printer-resolution-  | printer-resolution-  |
           | (resolution)      |  default             | supported            |
           |                   | (resolution)         |(1setOf resolution)   |
           +-------------------+----------------------+----------------------+
           | print-quality     | print-quality-default| print-quality-       |
           | (type2 enum)      | (type2 enum)         | supported            |
           |                   |                      |(1setOf type2 enum)   |
           +-------------------+----------------------+----------------------+
           | finishings        | finishings-default   | finishings-supported |


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 52]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           |(1setOf type2 enum)|(1setOf type2 enum)   |(1setOf type2 enum)   |
           |                   |                      |                      |
           +-------------------+----------------------+----------------------+
           | copies            | copies-default       | copies-supported     |
           | (integer: 1:MAX)  | (integer: 1:MAX)     | (integer: 1:MAX)     |
           |                   |                      |                      |
           |                   |                      | collated-copies-     |
           |                   |                      | supported            |
           |                   |                      | (integer: 1:MAX)     |
           |                   |                      |                      |
           +-------------------+----------------------+----------------------+
           | page-ranges       | No                   | page-ranges-         |
           | (1setOf           |                      | supported (boolean)  |
           |   rangeOfInteger) |                      |                      |
           +-------------------+----------------------+----------------------+
           | orientation       | orientation-default  | orientation-         |
           | (type2 enum)      |  (type2 enum)        | supported            |
           |                   |                      |  (1setOf type2 enum) |
           +-------------------+----------------------+----------------------+
           | document-format   | document-format-     | document-format-     |
           | (mimeType)        |  default             | supported            |
           |                   |  (mimeType)          |(1setOf mimeType)     |
           +-------------------+----------------------+----------------------+
           | compression       | No                   | compression-supported|
           | (type3 keyword)   |                      |(1setOf type3 keyword)|
           |                   |                      |                      |
           +-------------------+----------------------+----------------------+
           | job-k-octets      | No                   |job-k-octets-supported|
           | (integer)         |                      | (rangeOf integer)    |
           |                   |                      |                      |
           +-------------------+----------------------+----------------------+
           | job-              | No                   | job-impressions-     |
           | impressions       |                      | supported            |
           | (integer)         |                      | (rangeOf integer)    |
           +-------------------+----------------------+----------------------+
           | job-media-        | No                   | job-media-sheets-    |
           | sheets            |                      | supported            |
           | (integer)         |                      | (rangeOf integer)    |
           +-------------------+----------------------+----------------------+



         4.2.1 job-sheets (type4 keyword, name)

         This attribute determines which if any banner page(s) SHALL be printed
         with a job.

         Standard values are:


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 53]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           'none': no job sheet is printed
           'standard': one or more site specific standard job sheets are
              printed, e.g. a single start sheet or both start and end sheet is
              printed

         An administrator MAY define additional values using the 'name' or
         'keyword' attribute syntax, depending on implementation.

         Note: The effect of this attribute on jobs with multiple documents is
         controlled by the "multiple-document-handling" job attribute (section
         4.2.4).

         4.2.2 job-priority (integer(1:100))

         This attribute specifies a priority for scheduling the Job. A higher
         value specifies a higher priority. The value 1 indicates the lowest
         possible priority. The value 100 indicates the highest possible
         priority.  Among those jobs that are ready to print, a Printer SHALL
         print all jobs with a priority value of n before printing those with a
         priority value of n-1 for all n.

         The syntax for the "job-priority-supported" is an integer(1:100).
         This single integer value indicates the number of priority levels
         supported.  For example, if the value of "job-priority-supported" is
         '3', then the Printer object supports 3 levels of job priorities
         (let's call them 'high', 'medium', and 'low'). In this case, a client
         MUST assume the following:

           A client supplied value in the range 1-33 is the same as any other
              value in the range 1-33 and any one of those values corresponds
              to the 'low' priority.
           A client supplied value in the range 34-66 is the same as any other
              value in the range 34-66 and any one of those values corresponds
              to the 'medium' priority.
           A client supplied value in the range 67-100 is the same as any
              other value in the range 67-100 and any one of those values
              corresponds to the 'high' priority.

         For another example, if the value of "job-priority-supported" is '10',
         then the Printer object supports 3 levels of job priorities, (let's
         call them 'one', 'two', ..., and 'ten' with 'one' being the lowest
         priority and 'ten' being the highest). In this case, a client MUST
         assume the following:

           A client supplied value in the range 1-10 is the same as any other
              value in the range 1-10 and any one of those values corresponds
              to the 'one' priority.



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 54]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           A client supplied value in the range 11-20 is the same as any other
              value in the range 11-20 and any one of those values corresponds
              to the 'two' priority.
           ...
           A client supplied value in the range 91-100 is the same as any
              other value in the range 91-100 and any one of those values
              corresponds to the 'ten' priority.

         4.2.3 job-hold-until (type4 keyword, name)

         This job attribute specifies the named time period during which the
         Job SHALL become a candidate for printing.

         Standard values for named time periods are:

           'no-hold': immediately, if there are not other reasons to hold the
              job.
           'day-time': during the day.
           'evening': evening
           'night': night
           'weekend': weekend
           'second-shift': second-shift
           'third-shift': third-shift (after midnight)


         An administrator SHALL associate allowable print times with a named
         time period (by means outside IPP 1.0).  An administrator is
         encouraged to pick names that suggest the type of time period. An
         administrator MAY define additional values using the 'name' or
         'keyword' attribute syntax, depending on implementation.

         If the value of this attribute specifies a time period that is in the
         future, the Printer SHALL add the 'job-hold-until-specified' value to
         the job's "job-state-reasons" attribute, move the job to the 'pending-
         held' state, and SHALL NOT schedule the job for printing until the
         specified time-period arrives.  When the specified time period
         arrives, the Printer SHALL remove the 'job-hold-until-specified' value
         from the job's "job-state-reason" attribute and, if no other job
         reasons that keep it in the 'pending-held' state remain, the Printer
         SHALL consider the job as a candidate for processing by moving the job
         to the 'pending' state.

         If this job attribute value is the named value 'no-hold', or specified
         time period is in effect has already started, the job SHALL be a
         candidate for processing immediately.





         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 55]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         4.2.4 multiple-document-handling (type2 keyword)

         This job attribute is relevant only if a job consists of two or more
         documents. The attribute controls finishing operations and the
         placement of print-stream pages into imposed pages and onto media
         sheets.  When   the value of the "copies" attribute exceeds 1, it also
         controls the order in which the copies that result from processing the
         documents are produced. For the purposes of this explanations, if "a"
         represents an instance of document data, then the result of processing
         the data in document "a" is a sequence of media sheets represented by
         "a(*)".

         Standard values are:

           'single-document': If a Job object has multiple documents, say the
              document data is called a and b, then the result of processing
              all the document data (a and then b) SHALL be treated as a single
              sequence of media sheets for finishing operations; that is,
              finishing would be performed on the concatenation of the
              seqeunces a(*),b(*).  The Printer SHALL NOT force the data in
              each document instance to be formatted onto a new print-stream
              page, nor to start a new imposed page or a new media sheet. If
              more than one copy is made, the ordering of the sets of media
              sheets resulting from processing the document data SHALL be a(*),
              b(*), a(*), b(*),...., and the Printer SHALL force each copy to
              start on a new media sheet.
           'separate-documents-uncollated-copies': If a Job object has
              multiple documents, say the document data is called a and b, then
              the result of processing the data in each document instance SHALL
              be treated as a single sequence of media sheets for finishing
              operations; that is, the sets a(*) and b(*) would each be
              finished separately. The Printer SHALL force each copy of the
              result of process the data in a single document to start on a new
              media sheet. If more than one copy is made, the ordering of the
              sets of media sheets resulting from processing the document data
              SHALL be a(*), a(*), b(*), b(*) ....
           'separate-documents-collated-copies': If a Job object has multiple
              documents, say the document data is called a and b, then the
              result of processing the data in each document instance SHALL be
              treated as a single sequence of media sheets for finishing
              operations; that is, the sets a(*) and b(*) would each be
              finished separately. If more than one copy is made, the ordering
              of the sets of media sheets resulting from processing the
              document data SHALL be a(*), b(*), a(*), b(*), ...., and the
              Printer SHALL force each document copy to start on a new sheet .

         'separate-documents-collated-copies' is the same as 'single-document'
         with respect to ordering of pages, but not media sheet generation,


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 56]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         since the latter will put the first page of the next document on the
         back side of a sheet if an odd number of pages have been produced so
         far for the job, while the former case always force the next document
         or document copy on to a new sheet.

         4.2.5 media (type4 keyword, name)

         This job attribute identifies the medium that the Printer uses for all
         pages of the Job.

         The values for "media" include medium-names, medium-sizes, input-trays
         and electronic forms so that one attribute specifies the media. If a
         printer allows a client to specify a medium name as the value of this
         attribute, such a medium name implicitly selects an input-tray that
         contains the specified medium.  If a printer allows a client to
         specify a medium size as the value of this attribute, such a medium
         size implicitly selects a medium name that in turn implicitly selects
         an input-tray that contains the medium with the specified size.  If a
         printer allows a client to specify an input-tray as the value of this
         attribute, such an input-tray implicitly selects the medium that is in
         that input-tray at the time the job prints. This case includes manual-
         feed input-trays.  If a printer allows a client to specify an
         electronic form as the value of this attribute, such an electronic
         form implicitly selects a medium-name that in turn implicitly selects
         an input-tray that contains the medium specified by the electronic
         form. The electronic form also implicitly selects an image that the
         Printer SHALL merge with the document data as its prints each page.

         Standard values are (taken from ISO DPA and the Printer MIB) and are
         listed in section 14. An administrator MAY define additional values
         using the 'name' or 'keyword' attribute syntax, depending on
         implementation.

         There is also an additional attribute named "media-ready" which
         differs from "media-supported" in that legal values only include the
         subset of "media-supported" values that are physically loaded and
         ready for printing with no operator intervention required.

         The relationship of this attribute and the other attributes that
         control document processing is described in section 15.4.

         4.2.6 number-up (integer)

         This job attribute specifies the number of source page-images to
         impose upon a single side of an instance of a selected medium.  For
         example, if the value is




         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 57]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           '1': The Printer SHALL place one logical page on a single side of
              an instance of the selected medium (MAY add some sort of
              translation, scaling, or rotation).
           '2': The Printer SHALL place two logical pages on a single side of
              an instance of the selected medium (MAY add some sort of
              translation, scaling, or rotation).
           '4': The Printer SHALL place four logical pages on a single side of
              an instance of the selected medium (MAY add some sort of
              translation, scaling, or rotation).

         This attribute primarily controls the translation, scaling and
         rotation of page images, but a site may choose to add embellishments,
         such as borders to each logical page.

         Note: The effect of this attribute on jobs with multiple documents is
         controlled by the "multiple-document-handling" job attribute (section
         4.2.4) and the relationship of this attribute and the other attributes
         that control document processing is described in section 15.4.

         ISSUE: Steve Z.: should this section be changed to include "print-
         stream page" and "layout page"?? rather than "source page" and
         "logical page"?

         4.2.7 sides (type2 keyword)

         This attribute specifies how source page-images are to be imposed upon
         the sides of an instance of a selected medium.

         The standard values are:

           'one-sided': imposes each consecutive source page-image upon the
              same side of consecutive media sheets.
           'two-sided-long-edge': imposes each consecutive pair of source
              page-image upon front and back sides of consecutive media sheets,
              such that the orientation of each pair of source-pages on the
              medium would be correct for the reader as if for binding on the
              long edge.  This imposition is sometimes called 'duplex' or
              'head-to-head'.
           'two-sided-short-edge': imposes each consecutive pair of source
              page-image upon front and back sides of consecutive media sheets,
              such that the orientation of each pair of source-pages on the
              medium would be correct for the reader as if for binding on the
              short edge.  This imposition is sometimes called 'tumble' or
              'head-to-toe'.

         'two-sided-long-edge', 'two-sided-short-edge', 'tumble', and 'duplex'
         all work the same for portrait or landscape.  However 'head-to-toe' is
         'tumble' in portrait but 'duplex' in landscape.  'head-to-head' also


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 58]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         switches between 'duplex' and 'tumble' when using portrait and
         landscape modes.

         Note: The effect of this attribute on jobs with multiple documents is
         controlled by the "multiple-document-handling" job attribute (section
         4.2.4) and the relationship of this attribute and the other attributes
         that control document processing is described in section 15.4.

         4.2.8  printer-resolution (resolution)

         This attribute identifies the resolution that Printer uses for a
         certain Job.

         4.2.9 print-quality (type2 enum)

         This attribute specifies the print quality that the Printer SHALL use
         for a certain Job.

         The standard values are:

           '3'     'draft': lowest quality available on the printer
           '4'     'normal': normal or intermediate quality on the printer
           '5'     'high': highest quality available on the printer


         4.2.10 finishings (1setOf type2 enum)

         This attribute identifies the finishing operations that the Printer
         uses for each copy of each printed document in a particular Job. For
         Jobs with multiple documents, the "multiple-document-handling"
         attribute determines what constitutes a _copy_ for purposes of
         finishing.

         Standard values are:

           '3'     'none':  Perform no finishing
           '4'     'staple':  Bind the document(s) with one or more staples.
                        The exact number and placement of the staples is site-
                        defined.
           '5'     'punch':  This value indicates that holes are required in
                        the finished document. The exact number and placement
                        of the holes is site-defined  The punch specification
                        MAY be satisfied (in a site- and implementation-
                        specific manner) either by drilling/punching, or by
                        substituting pre-drilled media.
           '6'     'cover':  This value is specified when it is desired to
                        select a non-printed (or pre-printed) cover for the
                        document. This does not supplant the specification of a


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 59]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


                        printed cover (on cover stock medium) by the document
                        itself.
           '7'     'bind':  This value indicates that a binding is to be
                        applied to the document; the type and placement of the
                        binding is site-defined."

         Note: The effect of this attribute on jobs with multiple documents is
         controlled by the "multiple-document-handling" job attribute (section
         4.2.4).

         If the client supplies a value of 'none' along with any other
         combination of values, it is the same as if only that other
         combination of values had been supplied (that is the 'none' value has
         no effect).


         4.2.11 copies (integer(1:2**31 - 1))

         This attribute specifies the number of copies to be printed.  On many
         devices the supported number of collated copies will be limited by the
         number of physical output bins on the device, and may be different
         from the number of uncollated copies which can be supported. The
         "copies-supported" attribute is the limit on the number of uncollated
         copies supported.  The "collated-copies-supported" attribute is the
         limit on the number of collated copies supported.  The value in the
         "copies-default" default value attribute applies to either collated or
         uncollated as determined by the value in the "multiple-document-
         handling-default" attribute.

         Note: The effect of this attribute on jobs with multiple documents is
         controlled by the "multiple-document-handling" job attribute (section
         4.2.4) and the relationship of this attribute and the other attributes
         that control document processing is described in section 15.4.

         4.2.12 page-ranges (1setOf rangeOfInteger)

         This attribute specifies the pages of a document which are to be
         printed. In most cases, the exact pages to be printed will be
         generated by a device driver and this attribute would not be required.
         However, when printing an archived document which has already been
         formatted, the end user may elect to print just a subset of the pages
         contained in the document. In this case, if page-range = n.m is
         specified, the first page to be printed will be page n. All subsequent
         pages of the document will be printed through and including page m.

         "page-ranges-supported" is a boolean value indicating whether or not
         the printer is capable of supporting the printing of page ranges.
         This capability may differ from one PDL to another. There is no "page-


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 60]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         ranges-default" attribute.  If the "page-ranges" attribute is not
         supplied by the client, all pages of the document will be printed.

         4.2.13 orientation (type2 enum)

         This attribute specifies the orientation of the content on the output
         pages to be printed.  In most cases, the orientation of the content is
         specified within the document format generated by the device driver at
         print time. However, some document formats (such as 'text/plain') do
         not support the notion of page orientation, and it is possible to bind
         the orientation after the document content has been generated.  This
         attribute provides an end user with the means to specify orientation
         for such documents.

         Standard values are:

           '1'     'portrait':  The content will be imaged across the short
                        edge of the medium.
           '2'     'landscape':  The content will be imaged across the long
                        edge of the medium.  Landscape is defined to be a
                        rotation of the logical page to be imaged by +90
                        degrees with respect to the medium (i.e. anti-
                        clockwise) from the portrait orientation.  Note:  The
                        +90 direction was chosen because simple finishing on
                        the long edge is the same edge whether portrait or
                        landscape
           '3'     'reverse-landscape':  The content will be imaged across the
                        long edge of the medium.  Reverse-landscape is defined
                        to be a rotation of the logical page to be imaged by -
                        90 degrees with respect to the medium (i.e. clockwise)
                        from the portrait orientation.  Note: The 'reverse-
                        landscape' value was added because some applications
                        rotate landscape -90 degrees from portrait, rather than
                        +90 degrees.

         Note: The effect of this attribute on jobs with multiple documents is
         controlled by the "multiple-document-handling" job attribute (section
         4.2.4) and the relationship of this attribute and the other attributes
         that control document processing is described in section 15.4.

         4.2.14 document-format (mimeType)

         This attribute identifies the document format of the data to be
         printed.  The standard values for this attribute are Internet Media
         types which are sometimes called MIME types.  See the description of
         the 'mimeType' attribute syntax in Section 4.1.9.




         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 61]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         4.2.15 compression (type3 keyword)

         This attribute identifies compression algorithms used on compressed
         document data.  The value of this attribute does not apply the
         encoding of the IPP operation itself.

         Standard values are :

           'none': no compression is used.
           'deflate':  ZIP public domain inflate/deflate) compression
              technology
           `gzip' GNU zip compression technology described in RFC 1952.
           'compress': UNIX compression technology

         4.2.16 job-k-octets (integer(0:2**31 - 1))

         This attribute specifies the total size of the document data in K
         octets, i.e., in units of 1024 octets requested to be  processed in
         the job.  The value SHALL be rounded up, so that a job between 1 and
         1024 octets SHALL be indicated as being 1, 1025 to 2048 SHALL be 2,
         etc.

         This value SHALL not include the multiplicative factors contributed by
         the number of copies specified by the "copies" attribute, independent
         of whether the device can process multiple copies without making
         multiple passes over the document data and independent of whether the
         output is collated or not.  Thus the value is independent of the
         implementation.

         Note:  This attribute and the following two attributes ("job-
         impressions" and "job-media-sheets") are not intended to be counters;
         they are intended to be useful routing and scheduling information if
         known. For these three attributes,  the Printer may try to compute the
         value if it is not supplied in the create request.  Even if the client
         does supply a value for this attribute in the create request, the
         Printer may choose to change the value if the Printer is able to
         compute a value which is more accurate than the client supplied value.
         The Printer may be able to determine the correct value for this
         attribute either right at job submission time or at any later point in
         time.  If the value of this attribute is unknown, the Printer may
         choose to respond with a value of '-2' (which signifies "unknown")
         rather than choose to not support the attribute at all.

         4.2.17 job-impressions (integer(0:2**31 - 1))

         This attribute specifies the total number of impressions of the
         document(s) being requested by this job to produce.



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 62]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         This value SHALL not include the multiplicative factors contributed by
         the number of copies specified by the "copies" attribute, independent
         of whether the device can process multiple copies without making
         multiple passes over the document data and independent of whether the
         output is collated or not.  Thus the value is independent of the
         implementation.

         4.2.18 job-media-sheets (integer(0:2**31 - 1))

         This attribute specifies the total number of media sheets to be
         processed for this job.

         Unlike the "job-k-octets" and the "job-impressions" attributes, this
         value SHALL include the multiplicative factors contributes by the
         number of copies specified by the "copies" attribute


         4.3 Job Description Attributes

         The attributes in this section form the attribute group called "job-
         description".  The following table summarizes these attributes.  The
         third column indicates whether the attribute is a MANDATORY attribute
         that MUST be supported by Printer objects.  If it is not MANDATORY,
         then it is OPTIONAL.


























         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 63]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         +----------------------------+----------------------+----------------+
         |      Attribute             |     Syntax           |   MANDATORY?   |
         +----------------------------+----------------------+----------------+
         | job-uri                    | uri                  |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | job-id                     | integer(1:MAX)       |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | job-more-info              | uri                  |                |
         +----------------------------+----------------------+----------------+
         | job-name                   | name                 |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | job-originating-user       | octetString          |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | job-state                  | type1 enum           |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | job-state-reasons          | 1setOf type2 keyword |                |
         +----------------------------+----------------------+----------------+
         | job-state-message          | text                 |                |
         +----------------------------+----------------------+----------------+
         | number-of-documents        | integer              |                |
         +----------------------------+----------------------+----------------+
         | output-device-assigned     | name                 |                |
         +----------------------------+----------------------+----------------+
         | time-of-creation           | integer              |                |
         +----------------------------+----------------------+----------------+
         | time-at-processing         | integer              |                |
         +----------------------------+----------------------+----------------+
         | time-at-completed          | integer              |                |
         +----------------------------+----------------------+----------------+
         | number-of-intervening-jobs | integer              |                |
         +----------------------------+----------------------+----------------+
         | job-message-from-operator  | text                 |                |
         +----------------------------+----------------------+----------------+
         | job-k-octets-processed     | integer              |                |
         +----------------------------+----------------------+----------------+
         | job-impressions-completed  | integer              |                |
         +----------------------------+----------------------+----------------+
         | job-media-sheets-completed | integer              |                |
         +----------------------------+----------------------+----------------+
         | attributes-charset         | charSet              |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | attributes-natural-language| naturalLanguage      |  MANDATORY     |
         +----------------------------+----------------------+----------------+


         4.3.1 job-uri (uri)




         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 64]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         This attribute contains the URI for the job.  The Printer, on receipt
         of a new job, generates a URI which identifies the new Job on that
         Printer. The Printer returns the value of the "job-uri" attribute as
         part of the response to a create request.   This MUST be an HTTP
         schemed URI, however the precise format of a Job URI is implementation
         dependent.

         For a description of this attribute and its relationship to the
         following "job-id" attribute, see the discussion in section 2.4 on
         "Object Identity".

         4.3.2 job-id (integer(1:MAX))

         This attribute contains the ID of the job.  The Printer, on receipt of
         a new job, generates an ID which identifies the new Job on that
         Printer. The Printer returns the value of the "job-id" attribute as
         part of the response to a create request.

         For a description of this attribute and its relationship to the
         previous "job-uri" attribute, see the discussion in section 2.4 on
         "Object Identity".

         4.3.3 job-more-info (uri)

         Similar to "printer-more-info", this attribute contains the URI
         referencing some resource with more information about this Job object,
         perhaps an HTML page containing information about the Job.

         4.3.4 job-name (name)

         This attribute is the name of the job.  It is a name that is more user
         friendly than the "job-uri" attribute value.  It does not need to be
         unique between Jobs.  The Job's "job-name" attribute is set to the
         value supplied by the client in the "job-name" operation attribute in
         the create request.   If, however, if the "job-name" operation
         attribute is not supplied by the client in the create request, the
         Printer, on creation of the Job, SHALL generate a name. The printer
         SHOULD generate the value of the Job's "job-name" attribute from the
         first of the following sources that produces a value: 1) the
         "document-URI" attribute of the first (or only) document, 2) the
         "document-name" operation attribute of the first (or only) document,
         or 3) any other piece of Job specific information.

         4.3.5 job-originating-user (octetString)

         This attribute contains the identity of the end user that submitted
         the print job.  The Printer object sets this attribute to the most



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 65]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         authenticated name that it can obtain from the authentication service
         over which the IPP operation was received.

         4.3.6 job-state (type1 enum)

         This attribute identifies the current state of the job.  Even though
         the IPP protocol defines eight values for job states, implementations
         only need to support those states which are appropriate for the
         particular implementation.  In other words, a Printer supports only
         those job states implemented by the output device and available to the
         Printer object implementation.

         Standard values are:

           'unknown'(2):  The job state is not known, or its state is
              indeterminate.
           'pending'(3):  The job is a candidate to start processing, but is
              not yet processing.
           'pending-held'(4):  The job is not a candidate for processing for
              any number of reasons but will return to the 'pending' state as
              soon as the reasons are no longer present.  The job's "job-state-
              reason" attribute SHALL indicate why the job is no longer a
              candidate for processing.
           'processing'(5):  One or more of:
              1.  the job is using, or is attempting to use, one or more purely
                software processes that are analyzing, creating, or
                interpreting a PDL, etc.,
              2.  the job is using, or is attempting to use, one or more
                hardware devices that are interpreting a PDL, making marks on
                a medium, and/or performing finishing, such as stapling, etc.,
              3. the server has made the job ready for printing, but the output
                device is not yet printing it, either because the job hasn't
                reached the output device or because the job is queued in the
                output device or some other spooler, awaiting the output
                device to print it.

              Implementations MAY, though they NEED NOT, include additional
              values in the job's "job-state-reasons" attribute to indicate the
              progress of the job, such as adding the 'job-printing' value to
              indicate when the device is actually making marks on a medium.
              When the job is in the 'processing' state, the entire job state
              includes the detailed status represented in the printer's
              "printer-state", "printer-state-reasons", and "printer-state-
              message" attributes.
              Implementations MAY include additional values in the job's "job-
              state-reasons" attribute to indicate the progress of the job,
              such as adding the 'job-printing' value to indicate when the
              output device is actually making marks on paper and/or the


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 66]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              'processing-to-stop-point' value to indicate that the server or
              device is in the process of canceling or aborting the job.  Most
              implementations won't bother with this nuance.
           'processing-stopped'(6):  The job has stopped while processing for
              any number of reasons and will return to the 'processing' state
              as soon as the reasons are no longer present.

              The job's "job-state-reason" attribute MAY indicate why the job
              has stopped processing.  For example, if the output device is
              stopped, the 'printer-stopped' value MAY be included in the job's
              "job-state-reasons" attribute.

              Note:  When an output device is stopped, the device usually
              indicates its condition in human readable form locally at the
              device.  A client can obtain more complete device status remotely
              by querying the printer's "printer-state", "printer-state-
              reasons" and "printer-state-message" attributes.

           'canceled'(7):  The job has been canceled by a Cancel-Job operation
              and the Printer has completed canceling the job  and all job
              status attributes have reached their final values for the job.
              While the Printer is canceling the job, the job's "job-state-
              reasons" attribute SHOULD contain the 'processing-to-stop-point'
              value and one of the 'canceled-by-user', 'canceled-by-operator',
              or 'canceled-at-device' value.
           'aborted'(8):  The job has been aborted by the system, usually
              while the job was in the 'processing' or 'processing-stopped'
              state and the Printer has completed aborting the job and all job
              status attributes have reached their final values for the job.
              While the server or device is aborting the job, the job's "job-
              state-reasons" attribute MAY contain the 'processing-to-stop-
              point' and 'aborted-by-system' values.  If supported, the
              'aborted-by-system' value SHALL remain while the job is in the
              'aborted' state.
           'completed'(9):  The job has completed successfully or with
              warnings or errors after processing and all of the job media
              sheets have been successfully stacked in the appropriate output
              bin(s).  The job's "job-state-reasons" attribute SHOULD contain
              one of: 'completed-successfully', 'completed-with-warnings', or
              'completed-with-errors' values.

         The final value for this attribute SHALL be one of: 'completed',
         'canceled', or 'aborted' before the Printer removes the job
         altogether.  The length of time that jobs remain in the 'canceled',
         'aborted', and 'completed' states depends on implementation.

         The following figure shows the normal job state transitions.



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 67]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


                                                            +----> canceled
                                                           /
             +----> pending --------> processing ---------+------> completed
             |         ^                   ^               \
         --->+         |                   |                +----> aborted
             |         v                   v               /
             +----> pending-held    processing-stopped ---+

         Normally a job progresses from left to right.  Other state transitions
         are unlikely, but are not forbidden.  Not shown are the transitions to
         the 'canceled' state from the 'pending', 'pending-held', and
         'processing-stopped' states.

         Jobs reach one of the three terminal states: 'completed', 'canceled',
         or 'aborted', after the jobs have completed all activity, including
         stacking output media, after the jobs have completed all activity, and
         all job status attributes have reached their final values for the job.

         4.3.7 job-state-reasons (1setOf  type2 keyword)

         This attribute provides additional information about the job's current
         state, i.e., information that augments the value of the job's "job-
         state" attribute.

         Implementation of these values is OPTIONAL, i.e., a Printer NEED NOT
         implement them, even if (1) the output device supports the
         functionality represented by the reason and (2) is available to the
         Printer object implementation.  These values MAY be used with any job
         state or states for which the reason makes sense.  Furthermore, when
         implemented, the Printer SHALL return these values when the reason
         applies and SHALL NOT return them when the reason no longer applies
         whether the value of the Job's "job-state" attribute changed or not.
         When the Job does not have any reasons for being in its current state,
         the Printer MAY set the value of the Job's "job-state-reasons"
         attribute to 'none'.

         NOTE - While values cannot be added to the 'job-state' attribute
         without impacting deployed clients that take actions upon receiving
         "job-state" values, it is the intent that additional "job-state-
         reasons" values can be defined and registered without impacting such
         deployed clients.  In other words, the "job-state-reasons" attribute
         is intended to be extensible.

         The following standard values are defined.  For ease of understanding,
         the values are presented in the order in which the reasons are likely
         to occur (if implemented), starting with the 'job-incoming' value:

           'none':  There are no reasons for the job's current state.


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 68]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           'job-incoming':  The CreateJob operation has been accepted by the
              Printer, but the Printer is expecting additional Send-Document
              and/or Send-URI operations and/or is accessing/accepting document
              data.
           'submission-interrupted':  The job was not completely submitted for
              some unforeseen reason, such as: (1) the Printer has crashed
              before the job was closed by the client, (2) the Printer or the
              document transfer method has crashed in some non-recoverable way
              before the document data was entirely transferred to the Printer,
              (3) the client crashed or failed to close the job before the
              time-out period.
           'job-outgoing':  The Printer is transmitting the job to the output
              device.
           'job-hold-until-specified':  The value of the job's "job-hold-
              until" attribute was specified with a time period that is still
              in the future.  The job SHALL NOT be a candidate for processing
              until this reason is removed and there are no other reasons to
              hold the job.
           'resources-are-not-ready':  At least one of the resources needed by
              the job, such as media, fonts, resource objects, etc., is not
              ready on any of the physical printer's for which the job is a
              candidate.  This condition MAY be detected when the job is
              accepted, or subsequently while the job is pending or processing,
              depending on implementation.
           'printer-stopped-partly':  The value of the Printer's "printer-
              state-reasons" attribute contains the value 'stopped-partly'.
           'printer-stopped':  The value of the Printer's "printer-state"
              attribute is 'stopped'.
           'job-interpreting': Job is in the 'processing' state, but more
              specifically, the Printer is interpreting the document data.
           'job-queued': Job is in the 'processing' state, but more
              specifically, the Printer has queued the document data.
           'job-transforming': Job is in the 'processing' state, but more
              specifically, the Printer is interpreting document data and
              producing another electronic representation.
           'job-printing':  The output device is marking media. This value is
              useful for Printers which spend a great deal of time processing
              (1) when no marking is happening and then want to show that
              marking is now happening or (2) when the job is in the process of
              being canceled or aborted while the job remains in the
              'processing' state, but the marking has not yet stopped so that
              impression or sheet counts are still increasing for the job.
           'job-canceled-by-user':  The job was canceled by the owner of the
              job using the Cancel-Job request, i.e., by a user whose name is
              the same as the value of the job's "job-originating-user"
              attribute, or by some other authorized end-user, such as a member
              of the job owner's security group.



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 69]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           'job-canceled-by-operator':  The job was canceled by the operator
              using the Cancel-Job request, i.e., by a user who has been
              authenticated as having operator privileges (whether local or
              remote).
           'job-canceled-at-device':  The job was canceled by an unidentified
              local user, i.e., a user at a console at the device.
           'aborted-by-system':  The job (1) is in the process of being
              aborted, (2) has been aborted by the system and placed in the
              'aborted' state, or (3) has been aborted by the system and placed
              in the 'pending-held' state, so that a user or operator can
              manually try the job again.
           'processing-to-stop-point':  The requester has issued a Cancel-job
              operation or the Printer object has aborted the job, but is still
              performing some actions on the job until a specified stop point
              occurs or job termination/cleanup is completed.

              This reason is recommended to be used in conjunction with the
              'processing' job state to indicate that the Printer object is
              still performing some actions on the job while the job remains in
              the 'processing' state.  After all the job's job description
              attributes have stopped incrementing, the Printer object moves
              the job from the 'processing' state to the 'canceled' or
              'aborted' job states.

           'service-off-line':  The Printer is off-line and accepting no jobs.
              All 'pending' jobs are put into the 'pending-held' state.  This
              situation could be true if the service's or document transform's
              input is impaired or broken.
           'job-completed-successfully':  The job completed successfully.
           'job-completed-with-warnings':  The job completed with warnings.
           'job-completed-with-errors':  The job completed with errors (and
              possibly warnings too).


         4.3.8 job-state-message (text)

         This attributes specifies supplemental information about the Job State
         in human readable text. The Printer object SHALL be able to generate
         this message in any of the natural languages identified by the
         Printer's "natural-language-supported" attribute (see the "attributes-
         natural-language" operation attribute specified in Section 3.1.3.1).

         4.3.9 number-of-documents (integer(0:2**31 - 1))

         This attribute indicates the number of documents in the job, i.e, the
         number of Send-Document, Send-URI, Print-Job, or Print-URI operations
         that the Printer has accepted for this job, regardless of whether the
         document data has reached the Printer or not.


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 70]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         Implementations supporting the OPTIONAL Create-Job/Send-Document/Send-
         URI operations SHOULD support this attribute.

         4.3.10 output-device-assigned (name)

         This attribute identifies the Output Device to which the Printer has
         assigned this job.  If an output device implements an embedded IPP
         Printer, the Printer NEED NOT set this attribute.  If a Print Server
         implements a Printer, the value MAY be empty until the Printer assigns
         an output device to the job.

         4.3.11 time-of-creation (integer)

         This attribute indicates the point in time at which the Job object was
         created.  In order to populate this attribute, the Printer object uses
         the value in its "printer-up-time" attribute at the time the Job
         object is created.

         4.3.12 time-at-processing (integer)

         This attribute indicates the point in time at which the Job object
         began processing.  In order to populate this attribute, the Printer
         object uses the value in its "printer-up-time" attribute at the time
         the Job object is moved into the 'processing' state for the first
         time.

         4.3.13 time-at-completed (integer)

         This attribute indicates the point in time at which the Job object
         completed (or was cancelled or aborted).  In order to populate this
         attribute, the Printer object uses the value in its "printer-up-time"
         attribute at the time the Job object is moved into the 'completed' or
         'canceled' or 'aborted' state.

         4.3.14 number-of-intervening-jobs (integer(0:2**31 - 1))

         This attribute indicates the number of jobs that are "ahead" of this
         job in the relative chronological order of expected time to complete
         (i.e., the current scheduled order). For efficiency, it is only
         necessary to calculate this value when an operation is performed that
         requests this attribute.

         4.3.15 job-message-from-operator (text)

         This attribute provides a message from an operator, system
         administrator or "intelligent" process to indicate to the end user the
         reasons for modification or other management action taken on a job.



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 71]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         4.3.16 job-k-octets-processed (integer(0:2**31 - 1))

         This attribute specifies the number of octets processed in K octets,
         i.e., in units of 1024 octets.  The value SHALL be rounded up, so that
         a job between 1 and 1024 octets SHALL be indicated as being 1, 1025 to
         2048 SHALL be 2, etc.

         For implementations where multiple copies are produced by the
         interpreter with only a single pass over the data, the final value
         SHALL be equal to the value of the "job-k-octets" attribute.  For
         implementations where multiple copies are produced by the interpreter
         by processing the data for each copy, the final value SHALL be a
         multiple of the value of the "job-k-octets" attribute.

         Note: This attribute and the following two attributes ("job-
         impressions-completed" and "job-sheets-completed") are intended to be
         counters. That is, if the "job-state" is 'processing' or 'processing-
         stopped', this value is intended to contain the amount of the job that
         has been processed to the time at which the attributes are requested.
         For any of these three attributes, the Printer may choose to return
         the value '-2' (which represents "unknown") rather than choose to not
         support the attribute at all.

         4.3.17 job-impressions-completed  (integer(0:2**31 - 1))

         This job attribute specifies the number of impressions completed for
         the job so far.  For printing devices, the impressions completed
         includes interpreting, marking, and stacking the output. This
         attribute is intended to be a counter as in the Job Monitoring MIB.

         For implementations where multiple copies are produced by the
         interpreter with only a single pass over the data, the final value
         SHALL be equal to the value of the "job-impressions" attribute.  For
         implementations where multiple copies are produced by the interpreter
         by processing the data for each copy, the final value SHALL be a
         multiple of the value of the "job-impressions" attribute.

         4.3.18 job-media-sheets-completed (integer(0:2**31 - 1))

         This job attribute specifies the media-sheets completed marking and
         stacking for the entire job so far whether those sheets have been
         processed on one side or on both. This attribute is intended to be a
         counter as in the Job Monitoring MIB.

         4.3.19 attributes-charset (charSet)

         This attribute is populated using the value in the client supplied
         "attributes-charset" attribute in the create request.  It identifies


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 72]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         the charset (coded character set and encoding method) used for any Job
         attributes with attribute syntax 'text' and 'name' whether supplied by
         the client and/or returned by the Printer object.  See Section 3.1.3
         for a complete description of the "attributes-charset" operation
         attribute.

         4.3.20 attributes-natural-language (naturalLanguage)


         4.4 This attribute is populated using the value in the client supplied
         "attributes-natural-language" attribute in the create request.  It
         identifies the natural language used for any Job attributes with
         attribute syntax 'text' and 'name' whether supplied by the client
         and/or returned by the Printer object.  See Section 3.1.3 for a
         complete description of the "attributes-natural-language" operation
         attribute.  See Section 4.1.1 for how an exception natural languages
         may be supplied explicitly for each 'text' and 'name' attribute value
         that differs from the value identified by the "job-natural-language"
         attribute.Printer Description Attributes

         These attributes form the attribute group called "printer-
         description".  A Printer object may be realized in either a print
         server or output device.  Note: How these attributes are set by an
         Administrator is outside the scope of this specification.  The
         following table summarizes these attributes, their syntax, and whether
         or not they are MANDATORY for a Printer object to support.  If they
         are not MANDATORY, they are OPTIONAL.























         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 73]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         +----------------------------+----------------------+----------------+
         |      Attribute             |     Syntax           |   MANDATORY?   |
         +----------------------------+----------------------+----------------+
         | printer-uri                | uri                  |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | printer-name               | name                 |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | printer-location           | text                 |                |
         +----------------------------+----------------------+----------------+
         | printer-info               | text                 |                |
         +----------------------------+----------------------+----------------+
         | printer-more-info          | uri                  |                |
         +----------------------------+----------------------+----------------+
         | printer-driver-installer   | uri                  |                |
         +----------------------------+----------------------+----------------+
         | printer-make-and-model     | text                 |                |
         +----------------------------+----------------------+----------------+
         | printer-more-info-         | uri                  |                |
         | manufacturer               |                      |                |
         +----------------------------+----------------------+----------------+
         | printer-state              | type1 enum           |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | printer-state-reasons      | 1setOf type2 keyword |                |
         +----------------------------+----------------------+----------------+
         | printer-state-message      | text                 |                |
         +----------------------------+----------------------+----------------+
         | operations-supported       | 1setOf operation     |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | printer-charset            | charSet              |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | charsets-supported         | 1setOf charSet       |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | printer-natural-language   | naturalLanguage      |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | natural-languages-supported| 1setOf               |  MANDATORY     |
         |                            |   naturalLanguage    |                |
         +----------------------------+----------------------+----------------+
         | printer-is-accepting-jobs  | boolean              |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | queued-job-count           | integer              |                |
         +----------------------------+----------------------+----------------+
         | printer-message-from-      | text                 |                |
         | operator                   |                      |                |
         +----------------------------+----------------------+----------------+
         | color-supported            | boolean              |                |
         +----------------------------+----------------------+----------------+
         | pdl-override               | type2 keyword        |  MANDATORY     |
         +----------------------------+----------------------+----------------+


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 74]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         | security-mechanisms-       | 1setOf keyword       |                |
         | supported                  |                      |                |
         +----------------------------+----------------------+----------------+
         | printer-up-time            | integer              |  MANDATORY     |
         +----------------------------+----------------------+----------------+
         | printer-current-time       | dateTime             |                |
         +----------------------------+----------------------+----------------+
         | multiple-operation-time-out| integer              |                |
         +----------------------------+----------------------+----------------+

         4.4.1 printer-uri (uri)

         This attribute contains the URI for the printer.  An administrator
         determines a printer's URI and sets this attribute to that URI.  This
         MUST be an HTTP schemed URI, however the precise format of a printer
         URI is implementation dependent.

         4.4.2 printer-name (name)

         This attribute contains the name of the printer. It is a name that is
         more user friendly than the printer-URI. An administrator determines a
         printer's name and sets this attribute to that name. This name may be
         the last part of the printer's URI or it may be unrelated. In non-US-
         English locales, a name may contain characters that are not allowed in
         a URI.

         4.4.3 printer-location (text)

         This attribute identifies the location of this printer. This could
         include things like: _in Room 123A, second floor of building XYZ_.

         4.4.4 printer-info (text)

         This attribute identifies the descriptive information about this
         Printer.  This could include things like: "This printer can be used
         for printing color transparencies for HR presentations", or "Out of
         courtesy for others, please print only small (1-5 page) jobs at this
         printer", or even "This printer is going away on July 1, 1997, please
         find a new printer".

         4.4.5 printer-more-info (uri)

         This attribute contains a URI used to obtain more information about
         this specific printer.  For example, this could be an HTTP type URI
         referencing an HTML page accessible to a Web Browser.  The information
         obtained from this URI is intended for end user consumption. Features
         outside the scope of IPP can be accessed from this URI.  The
         information is intended to be specific to this printer instance and


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 75]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         site specific services (e.g. job pricing, services offered, end user
         assistance). The device manufacturer may initially populate this
         attribute.

         4.4.6 printer-driver-installer (uri)

         This attribute contains a URI to use to locate the driver installer
         for this printer.   This attribute is intended for consumption by
         automata. The mechanics of print driver installation is outside the
         scope of IPP.  The device manufacturer may initially populate this
         attribute.

         4.4.7 printer-make-and-model (text)

         This attribute identifies the make and model of the printer.

         4.4.8 printer-more-info-manufacturer (uri)

         This attribute contains a URI used to obtain more information about
         this type of printer.  The information obtained from this URI is
         intended for end user consumption.  Features outside the scope of IPP
         can be accessed from this URI (e.g., latest firmware, upgrades, print
         drivers, optional features available).  The information is intended to
         be germane to this printer without regard to site specific
         modifications or services. The device manufacturer may initially
         populate this attribute.

         4.4.9 printer-state (type1 enum)

         This attribute identifies the current state of the printer.  The
         "printer-state reasons" attribute augments the "printer-state"
         attribute to give more detailed information about the Printer in the
         given printer state.

         A Printer object need only update this attribute before responding to
         an operation which requests the attribute; the Printer object NEED NOT
         update this attribute continually.  A Printer NEED NOT implement all
         values if they are not applicable to a given implementation.

         The following standard values are defined:

           'unknown'(2):  The Printer state is not known, or is indeterminate.
              A Printer SHALL use this state only if it cannot determine its
              actual state.

           'idle'(3):  If a Printer receives a job (whose required resources
              are ready) while in this state, such a job SHALL transit into the
              processing state immediately.  If the printer-state-reasons


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 76]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              attribute contains any reasons, they SHALL be reasons that would
              not prevent a job from transiting into the processing state
              immediately, e.g., toner-low. Note: if a Printer controls more
              than one output device, the above definition implies that a
              Printer is idle if at least one output device is idle.

           'processing'(4):  If a Printer receives a job (whose required
              resources are ready) while in this state, such a job SHALL
              transit into the pending state immediately. Such a job SHALL
              transit into the processing state only after jobs ahead of it
              complete.  If the printer-state-reasons attribute contains any
              reasons, they SHALL be reasons that do not prevent the current
              job from printing, e.g. toner-low.  Note: if a Printer controls
              more than one output device, the above definition implies that a
              Printer is processing if at least one output device is
              processing, and none is idle.

           'stopped'(5):  If a Printer receives a job (whose required
              resources are ready) while in this state, such a job SHALL
              transit into the pending state immediately. Such a job SHALL
              transit into the processing state only after some human fixes the
              problem that stopped the printer and after jobs ahead of it
              complete printing.  The "printer-state-reasons" attribute SHALL
              contain at least one reason, e.g. media-jam, which prevents it
              from either processing the current job or transiting a pending
              job to the processing state.

              Note: if a Printer controls more than one output device, the
              above definition implies that a Printer is stopped only if all
              output devices are stopped.  Also, it is tempting to define
              stopped as when a sufficient number of output devices are stopped
              and leave it to an implementation to define the sufficient
              number.  But such a rule complicates the definition of stopped
              and processing. For example, with this alternate definition of
              stopped, a job can move from idle to processing without human
              intervention, even though the Printer is stopped.

         4.4.10 printer-state-reasons (1setOf type2 keyword)

         This attribute supplies additional detail about the printer's state.

         Each MAY have a suffix to indicate its level of severity.  The three
         levels are: report (least severe), warning, and error (most severe).

           - '-report':  This suffix indicates that the reason is a "report".
              An implementation may choose to omit some or all reports. Some
              reports specify finer granularity about the printer state; others



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 77]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              serve as a precursor to a warning. A report SHALL contain nothing
              that could affect the printed output.
           - '-warning': This suffix indicates that the reason is a "warning".
              An implementation may choose to omit some or all warnings.
              Warnings serve as a precursor to an error. A warning SHALL
              contain nothing that prevents a job from completing, though in
              some cases the output may be of lower quality.
           - '-error': This suffix indicates that the reason is an "error".
              An implementation SHALL include all errors. If this attribute
              contains one or more errors, printer SHALL be in the stopped
              state.

         If the implementation does not add any one of the three suffixes, all
         parties SHALL assume that the reason is an "error".

         If a Printer object controls more than one output device, each value
         of this attribute MAY apply to one or more of the output devices.  An
         error on one output device that does not stop the Printer object as a
         whole MAY appear as a warning in the Printer's "printer-state-reasons
         attribute".  If the "printer-state" for such a Printer has a value of
         'stopped', then there MUST be an error reason among the values in the
         "printer-state-reasons" attribute.

         The following standard values are defined:

           'other': The printer has detected an error other than one listed in
              this document.
           'unknown': The printer is unable to give additional detail about
              the state of the printer.  This state reason is semantically
              equivalent to printer-state-reasons without any value.
           'media-needed': A tray has run out of media.
           'media-jam': The printer has a media jam.
           'paused': Someone has paused the Printer. In this state, a Printer
              SHALL not produce printed output, but it SHALL perform other
              operations requested by a client. If a Printer had been printing
              a job when the Printer was paused, the Printer SHALL resume
              printing that job when the Printer is no longer paused and leave
              no evidence in the printed output of such a pause.
           'shutdown': Someone has removed a Printer from service, and it may
              be powered down or physical removed. In this state, a Printer
              SHALL not produce printed output, and unless the Printer is
              realized by a print server that is still active, the Printer
              SHALL perform no other operations requested by a client,
              including returning this value. If a Printer had been printing a
              job when it was shutdown, the Printer need not resume printing
              that job when the Printer is no longer shutdown. If the Printer
              resumes printing such a job, it may leave evidence in the printed



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 78]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              output of such a shutdown, e.g. the part printed before the
              shutdown may be printed a second time after the shutdown.
           'connecting-to-device': The server has scheduled a job on the
              Printer and is in the process of connecting to a shared network
              output device (and might not be able to actually start printing
              the job for an arbitrarily long time depending on the usage of
              the output device by other servers on the network).
           'timed-out': The server was able to connect to the output device
              (or is always connected), but was unable to get a response from
              the output device.
           'stopping': The printer will be stopping in a while and will change
              its reason to printer-stopped. This reason is a non-critical,
              even for a Printer with a single output device. When an output-
              device ceases accepting jobs, the Printer will have this reason
              while the output device completes printing.
           'stopped-partly': When a Printer controls more than one output
              device, this reason indicates that one or more output devices are
              stopped. If the reason is a report, fewer than half of the output
              devices are stopped. If the reason is a warning, fewer than all
              of the output devices are stopped.
           'toner-low': The Printer is low on toner.
           'marker-supply-low': The Printer is low on marker supply (ink,
              paint, etc.).
           'spool-area-full': The limit of persistent storage allocated for
              spooling has been reached.
           'cover-open': One or more covers on the printer is open.
           'interlock-open': One or more interlock devices on the printer is
              unlocked.
           'door-open': One or more doors on the printer are open.
           'input-tray-missing': One or more input trays are not in the
              printer.
           'media-low': At least one input tray is low on media.
           'media-empty': At least one input tray is empty.
           'output-tray-missing': One or more output trays are not in the
              printer
           'output-area-almost-full': One or more output area is almost full
              (e.g. tray, stacker, collator).
           'output-area-full': One or more output area is full. (e.g. tray,
              stacker, collator)
           'marker-supply-low': The Printer is low on at least one marker
              supply. (e.g. toner, ink, ribbon)
           'marker-supply-empty: The Printer is out of at least one marker
              supply. (e.g. toner, ink, ribbon)
           'marker-waste-almost-full': The Printer marker supply waste
              receptacle is almost full.
           'marker-waste-full': The Printer marker supply waste receptacle is
              full.
           'fuser-over-temp': The fuser temperature is above normal.


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 79]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           'fuser-under-temp': The fuser temperature is below normal.
           'opc-near-eol': The optical photo conductor is near end of life.
           'opc-life-over': The optical photo conductor is no longer
              functioning.
           'developer-low': The Printer is low on developer.
           'developer-empty: The Printer is out of developer.
           'interpreter-resource-unavailable': An interpreter resource is
              unavailable (i.e. font, form)


         4.4.11 printer-state-message (text)

         This attribute specifies the additional information about the printer
         state and printer state reasons in human readable text.  The Printer
         object SHALL be able to generate this message in any of the natural
         languages identified by the Printer's "natural-language-supported"
         attribute (see the "attributes-natural-language" operation attribute
         specified in Section 3.1.3.1).

         4.4.12 operations-supported (1setOf operation)

         This attribute specifies the set of supported operations for this
         Printer.  The syntax of type of "operation" is the same as "type2
         enum" except that the range of values is 0x0000 to 0x8FFF.

         The following standard values are defined:

           0x0000  reserved, not used
           0x0001  reserved, not used
           0x0002  Print-Job
           0x0003  Print-URI
           0x0004  Validate-Job
           0x0005  Create-Job
           0x0006  Send-Document
           0x0007  Send-URI
           0x0008  Cancel-Job
           0x000A  Get-Jobs
           0x0009  Get-Attributes
           0x000A-0x3FFF          reserved for future operations
           0x4000-0x8FFF          reserved for private extensions

         This allows for certain vendors to implement private extensions that
         are guaranteed to not conflict with future registered extensions.
         However, there is no guarantee that two or more private extensions
         will not conflict.





         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 80]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         4.4.13 printer-charset (charSet)

         This MANDATORY attribute identifies the charset that the Printer
         object has been configured to represent 'text' and 'name' Printer
         attributes that are set by the operator, system administrator, or
         manufacturer, i.e., for "printer-name" (name), "printer-location"
         (text), "printer-info" (text), and "printer-make-and-model" (text).
         Therefore, the value of the "printer-charset" attribute SHALL also be
         among the values of the Printer's "charset-supported" attribute.

         4.4.14 charsets-supported (1setOf charSet)

         This MANDATORY attribute identifies the set of charsets that the
         Printer object supports in attributes with attribute syntax 'text' and
         'name', i.e., that the Printer object SHALL (1) accept in requests,
         (2) return in responses, and (3) send in notification messages.  At
         least the value 'utf-8' SHALL be present, since a Printer object SHALL
         support the UTF-8 [RFC2044] charset.

         If more charsets than UTF-8 are supported, the Printer object SHALL
         perform charset conversion between the charsets as described in
         Section 3.1.3.1.

         4.4.15 printer-natural-language (naturalLanguage)

         This MANDATORY attribute identifies the natural language that the
         Printer object has been configured to represent 'text' and 'name'
         Printer attributes that are set by the operator, system administrator,
         or manufacturer, i.e., for "printer-name" (name), "printer-location"
         (text), "printer-info" (text), and "printer-make-and-model" (text).
         When returning these Printer attributes, the Printer object MAY return
         them in the configured natural language specified by this attribute,
         instead of the natural language requested by the client in the
         "attributes-natural-language" operation attribute.  See Section
         3.1.3.1 for the specification of the OPTIONAL multiple natural
         language support.  Therefore, the value of the "printer-natural-
         language" attribute SHALL also be among the values of the Printer's
         "natural-language-supported" attribute.

         4.4.16 natural-languages-supported (1setOf naturalLanguage)

         This MANDATORY attribute identifies the natural language(s) that the
         Printer object supports in attributes with attribute syntax 'text' and
         'name', i.e., that the Printer object SHALL (1) accept in requests,
         (2) return in responses, and (3) send in notification messages.  The
         natural language(s) supported depends on implementation and/or
         configuration.



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 81]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         For any of the attributes for which the Printer generates messages,
         i.e., for the "job-state-message" and "printer-state-message"
         attributes and Operation Messages (see Section 3.1.4) in operation
         responses, the Printer object SHALL be able to generate messages in
         any of its supported natural languages.  See section 3.1.3.1 for the
         specification of 'text' and 'name' attributes in operation requests
         and responses.

         Note: A Printer object that supports multiple natural languages, often
         has separate catalogs of messages, one for each natural language
         supported.

         4.4.17 printer-is-accepting-jobs (boolean)

         This attribute indicates whether the printer is currently accepting
         job.  If the value is true, the printer is accepting jobs. If the
         value is false, the printer is currently rejecting any jobs submitted
         to it.

         Note: This value is independent of the printer state and printer-
         state-reasons because its value does not affect the current job;
         rather it affects future jobs. This attribute may cause the Printer to
         reject jobs when the printer-state is idle or it may cause the Printer
         to accepts jobs when the printer-state is stopped.

         4.4.18 queued-job-count (integer(0:2**31 - 1))

         This attribute contains a count of the number of jobs that are either
         'pending', 'processing', 'pending-held', or 'processing-stopped' and
         is set by the Printer.

         4.4.19 printer-message-from-operator (text)

         This attribute provides a message from an operator, system
         administrator or "intelligent" process to indicate to the end user
         information or status of the printer, such as why it is unavailable or
         when it is expected to be available.

         4.4.20 color-supported (boolean)

         This attribute identifies whether the Printer is capable of any type
         of color printing at all.  All document instructions having to do with
         color are embedded within the document PDL (none are external IPP
         attributes).






         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 82]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         4.4.21 reference-uri-schemes-supported (1setOf uriScheme)

         This attribute specifies which URI schemes are supported for use in
         the "document-uri" operation attribute of the Print-URI or Send-URI
         operation.  If a Printer object supports these optional operations, it
         MUST support URIs of the following type:

           'http':  The Printer object will perform an HTTP/1.1 GET operation
           'ftp':  The Printer object will use an FTP 'get' operation.  If the
              URI does not indicate a name or password in the URI itself, the
              Printer object will use anonymous FTP generating (if prompted)
              some password in the form of an Internet mail address.

         The Printer object OPTIONALLY supports other URI schemes (see section
         4.1.6).

         4.4.22 pdl-override (type2 keyword)

         This attribute expresses the ability for a particular Printer
         implementation to either attempt to override document data
         instructions with IPP attributes or not.

         This MANDATORY attribute takes on the following values:

           - 'attempted': This value indicates that the Printer attempts to
              make sure that IPP attribute values take precedence over embedded
              instructions in the document data, however there is no guarantee.
           - 'not-attempted': This value indicates that the Printer makes no
              attempt to ensure that IPP attribute values take precedence over
              embedded instructions in the print data.

         Section 15 contains a full description of how this attribute interacts
         with and affects other IPP attributes, especially the "ipp-attribute-
         fidelity" attribute.

         4.4.23 security-mechanisms-supported (1setOf keyword)

         This attribute indicates the security mechanisms supported.  Standard
         values are:

           'tls': Transport Layer Security (TLS)
           'ssl': Secure Sockets Layer (SSL)
           'http-digest': HTTP/1.1 Digest Authentication
           'http-basic': HTTP/1.1 Basic Authentication






         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 83]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         4.4.24 printer-up-time (integer(1:MAX))

         This attribute is a MANDATORY attribute.  It indicates the amount of
         time (in seconds) that this instance of this Printer implementation
         has been up and running.  This value is used to populate the Job
         attributes "time-of-creation", "time-at-processing", and "time-at-
         completed".  These time values are all measured in seconds and all
         have meaning only relative to this attribute, "printer-up-time".  The
         value is a monotonically increasing value starting from 1 when the
         Printer object is started-up (initialized, booted, etc.).

         If the Printer object goes down at some value 'n', and comes back up,
         the implementation MAY:

           1. Know how long it has been down, and resume at some value greater
              than 'n', or
           2. Restart from 1.

         In the first case, the Printer SHOULD not tweak any existing related
         Job attributes ("time-of-creation", "time-at-processing", and "time-
         at-completed").  In the second case, the Printer object SHOULD be
         reset to 0.  If a client queries a time-related Job attribute and
         finds the value to be 0, the client MUST assume that the Job was
         submitted in some life other than the Printer's current life.

         4.4.25 printer-current-time (dateTime)

         This attribute is an OPTIONAL attribute.  It indicates the current
         absolute wall-clock time.  If an implementation supports this
         attribute, then a client could calculate the absolute wall-clock time
         each Job's "time-of-creation", "time-at-processing", and "time-at-
         completed" attributes by using both "printer-up-time" and this
         attribute, "printer-current-time".  If an implementation does not
         support this attribute, a client can only calculate the relative time
         of certain events based on the MANDATORY "printer-up-time" attribute.

         4.4.26 multiple-operation-time-out (integer)

         This attributes identifies how long (in seconds) the Printer object
         waits for additional Send-Document or Send-URI operations to follow a
         still-open multi-document Job object.


         5. Conformance

         This section describes conformance issues and requirements. This
         document introduces model entities such as objects, operations,



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 84]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         attributes, and attribute values.  These conformance sections describe
         the conformance requirements which apply to these model entities.


         5.1 Client Conformance Requirements

         A conforming client SHALL send operations that conform to the protocol
         defined in _Internet Printing Protocol/1.0: Protocol Specification_
         [IPP-PRO]. For each attribute included in an operation request, a
         conforming client SHALL send a value whose type and value syntax
         conforms to the requirement of this document

         Otherwise, there are no conformance requirements placed on the user
         interfaces provided by IPP clients or their applications.  For
         example, one application might not allow an end user to submit
         multiple documents per job, while another does.  One application might
         first query a Printer object in order to supply a graphical user
         interface (GUI) dialogue box with supported and default values whereas
         a different implementation might not.  For presentation purposes,
         truncation of long attribute values is not recommended.  A recommended
         approach would be for the client implementation to allow the user to
         scroll through long attribute values.

         When sending a Get-Attributes or create request, an IPP client NEED
         NOT supply any OPTIONAL attributes.

         A client SHALL be able to accept any of the attribute syntaxes defined
         in Section 4.1, including their full range, that may be returned to it
         in a response from a Printer object.

         A query response may contain attributes and values that the client
         does not expect.  Therefore, a client implementation MUST gracefully
         handle such responses and not refuse to inter-operate with a
         conforming Printer that is returning extended registered or private
         attributes and/or attribute values that conform to Section 6.  Clients
         may choose to ignore any parameters, attributes, or values that it
         does not understand.


         5.2 Printer Object Conformance Requirements

         This section specifies the conformance requirements for conforming
         Printer object implementations with respect to objects, operations,
         and attributes.






         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 85]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         5.2.1 Objects

         Conforming Printer implementations SHALL implement all of the model
         objects as defined in this specification in the indicated sections:

           Section 2.1 Printer Object
           Section 2.2 Job Object

         5.2.2 Operations

         Conforming Printer implementations SHALL implement all of the
         MANDATORY model operations, including mandatory responses, as defined
         in this specification in the indicated sections:

           For a Printer object:
              Print-Job (section 3.2.1)                    MANDATORY
              Print-URI (section 3.2.2)                    OPTIONAL
              Validate-Job (section 3.2.3)            MANDATORY
              Create-Job (section 3.2.4)              OPTIONAL
              Get-Attributes (section 3.2.5)               MANDATORY
              Get-Jobs (section 3.2.6)                MANDATORY

           For a Job object:
              Send-Document (section 3.3.1)           OPTIONAL
              Send-URI (section 3.3.2)                OPTIONAL
              Cancel-Job (section 3.3.3)                   MANDATORY
              Get-Attributes (section 3.3.4)                    MANDATORY

         Conforming Printer implementations SHALL support all operation
         attributes and all values of such attributes, except for attributes
         that are collections of attributes. The following section on
         attributes specifies the support required for attributes.

         5.2.3 Attributes

         Conforming Printer implementations SHALL support all of the MANDATORY
         attributes, as defined in this specification in the indicated
         sections.

         If a Printer supports an attribute, it SHALL support only those values
         specified in this document or through the extension mechanism
         described in the next section. It MAY support any non-empty subset of
         these values. That is, it SHALL support at least one of the specified
         values and at most all of them.






         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 86]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         5.2.4 Printer extensions

         A conforming Printer may support registered extensions and private
         extensions, as long as they meet the requirements specified in Section
         6.

         A conforming Printer SHALL send responses that conform to the protocol
         defined in _Internet Printing Protocol/1.0: Protocol Specification_
         [IPP-PRO]. For each attribute included in an operation response, a
         conforming printer SHALL send a value whose type and value syntax
         conforms to the requirement of this document

         5.2.5 Attribute Syntaxes

         A Printer SHALL be able to accept any of the attribute syntaxes
         defined in Section 4.1, including their full range, in any operation
         in which a client may supply attributes.  Furthermore, a Printer SHALL
         return attributes to the client in operation responses that conform to
         the syntax specified in Section 4.1, including their full range if
         supplied previously by a client.


         5.3 Security Conformance Requirements

         All clients and IPP objects SHALL support the two authentication
         mechanisms for HTTP/1.1 as defined in RFC 2068 [RFC2068] and RFC 2069
         [RFC2069].

         Clients and IPP objects that need mutual authentication and/or
         encryption SHOULD also support a secure connection protocol. For this
         purpose it is the intention to define standardization of IPP in
         combination with Transport Layer Security (TLS), when the TLS
         specifications are agreed and on the IETF standards track.

         For a detailed discussion of security considerations, see section 8.


         6. IANA Considerations (registered and private extensions)

         During the development of this standard, the IPP working group
         (working with IANA) will register additional keywords and enums while
         the standard is in the proposed and draft states according to the
         procedures described in this section.  IANA will handle registration
         of additional enums after this standard is approved in cooperation
         with an IANA-appointed registration editor from the IPP working group
         according to the procedures described in this section.




         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 87]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         6.1 Typed Extensions

         This document uses prefixes to the "keyword" and "enum" basic syntax
         type in order to communicate extra information to the reader through
         its name. This extra information need not be represented in an
         implementation because it is unimportant to a client or Printer.  The
         list below describes the prefixes and their meaning.

           "type1":  The IPP standard must be revised to add a new keyword or
              a new enum.  No private keywords or enums are allowed.

           "type2":  Implementers can, at any time, add new keyword or enum
              values by proposing the specification to the IPP working group
              for registration (or an IANA-appointed registry advisor after the
              IPP working group is no longer certified) where they are reviewed
              for approval.  IANA keeps the registry and assigned the number
              for enum values

           "type3":  Implementers can, at any time, add new keyword and enum
              values by submitting the complete specification directly to IANA,
              no IPP working group or IANA-appointed registry advisor review is
              required. IANA keeps the registry and assigned the number for
              enum values

           "type4":  Anyone (system administrators, system integrators, site
              managers, etc.) can, at any time, add new installation-defined
              values (keywords or new enum values) to a local system. Care
              SHOULD be taken by the implementers to see that keywords do not
              conflict with other keywords defined by the standard or as
              defined by the implementing product. There is no registration or
              approval procedure for type 4 keywords.

         By definition, each of the four types above assert some sort of
         registry or review process in order for extensions to be considered
         valid.  Each higher level (1, 2, 3, 4) tends to be decreasingly less
         stringent than the previous level.   Therefore, any typeN value MAY be
         registered using a process for some typeM where M is less than N,
         however such registration is NOT REQUIRED.  For example, a type4 value
         MAY be registered in a type 1 manner (by being included in a future
         version of an IPP specification) however it is NOT REQUIRED.

         This specification defines keyword and enum values for all of the
         above types, including type4 keywords.

         For private (unregistered) keyword extensions, implementers SHOULD use
         keywords with a suitable distinguishing prefix, such as "xxx-" where
         xxx is the (lowercase) fully qualified company name registered with
         IANA for use in domain names [RFC1035].


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 88]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         Note: RFC 1035 [RFC1035] indicates that while upper and lower case
         letters are allowed in domain names, no significance is attached to
         the case.  That is, two names with the same spelling but different
         case are to be treated as if identical.  Also, the labels in a domain
         name must follow the rules for ARPANET host names:  They must start
         with a letter, end with a letter or digit, and have as interior
         characters only letters, digits, and hyphen.  Labels must be 63
         characters or less.  Labels are separated by the "." character.

         For private (unregistered) enum extension, implementers SHOULD use
         values in the reserved integer range which is 2**30 to 2**31-1.


         6.2 Registration of MIME types/sub-types for document-formats

         The "document-format" attribute's syntax is "mimeType".  This means
         that valid values are Internet media types.  RFC 2045 [RFC2045]
         defines the syntax for valid Internet media types.  Also, IANA is the
         registry for all Internet media types.


         6.3 Attribute Extensibility

         Attribute names are considered to be set of type2 keywords.
         Therefore, new attributes may be registered and have the same status
         as attributes in this document by following the type2 extension rules.


         6.4 Attribute Syntax Extensibility

         Attribute syntaxes are considered to be set of type2 enums.
         Therefore, new attribute syntaxes may be registered and have the same
         status as attribute syntaxes in this document by following the type2
         extension rules.


         7. Internationalization Considerations

         Some of the attributes have values that are text strings and names
         intended for human understanding rather than machine understanding.
         See the 'text' and 'name' attribute syntaxes in Sections 4.1.1 and
         4.1.2.

         In each operation request, the client SHALL identify the charset and
         natural language of the request which affects each supplied 'text' and
         'name' attribute value and requests the charset and natural language
         for attributes returned by the Printer object in operation responses
         and notifications as described in Section 3.1.3.1. In addition, the


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 89]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         client MAY separately and individually identify the "exception"
         natural language of a supplied 'text' or 'name' attribute using the
         technique described for the 'text' attribute syntax in Section 4.1.1.

         The Printer object SHALL support the UTF-8 [RFC2044] charset in all
         'text' and 'name' attributes supported.  If the Printer object
         supports more than the UTF-8 charset, the Printer object SHALL convert
         between them in order to return the requested charset to the client
         according to Section 3.1.3.2.  If the Printer object supports more
         than one natural language, the Printer object SHOULD return 'text' and
         'name' values in the natural language requested for those that are
         generated by the Printer (see Section 3.1.3.1).

         For Printers that support multiple charsets and/or multiple natural
         languages in 'text' and 'name' attributes, different jobs may have
         been submitted in differing charsets and/or natural languages.  All
         responses SHALL be returned in the charset requested by the client.
         However, the Get-Jobs operation provides for a mechanism to identify
         the differing natural languages with each job returned.

         The Printer object also has a configured charset and natural language
         attribute that it uses when the requested charset or natural language
         are not supported.  The client can query the Printer object to
         determine the list of charsets and natural languages supported by the
         Printer object and what the Printer object's configured values are.
         See the "printer-charset", "charset-supported", "printer-natural-
         language", and "natural-language-supported" Printer description
         attributes.

         The 'text' and 'name' attributes specified in this version of this
         document (additional ones will be registered according to the
         procedures in Section 6) are:



           Operation Attributes:
              job-name (name)
              document-name (name)

           Job Attributes:
              job-name (name)
              job-originating-user (name)
              job-state-message (text)
              job-message-from-operator (text)

           Printer Attributes:
              printer-name (name)
              printer-location (text)


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 90]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              printer-info (text)
              printer-make-and-model (text)
              printer-state-message (text)
              printer-message-from-operator (text)


         8. Security Considerations

         It is required that the IPP be able to operate within a secure
         environment.  IPP attempts to make use of existing security protocols
         and services, wherever possible. Examples of such services include the
         Digest Access Authentication in HTTP 1.1 [RFC2069] and the Transport
         Layer Security (TLS) services, currently under development in the
         IETF.

         It is difficult to anticipate the security risks that might exist in
         any given IPP environment. For example, if IPP is used within a given
         corporation over a private network, the risks of exposing document
         data may be low enough that the corporation will choose not to use
         encryption on that data.  However, if the connection between the
         client and the IPP object is over a public network, the client may
         wish to protect the content of the information during transmission
         through the network with encryption.

         Furthermore, the value of the information being printed may vary from
         one use of the protocol to the next. Printing payroll checks, for
         example, would have a different value than printing public information
         from a file.  In addition, there is always the threat of a virus
         attack.  However, there are no known viruses or potential for viruses
         that are self-propagated throughout distributed printing environments.
         Therefore, IPP implementations may choose to implement protection
         against printer-damaging print jobs.

         Since the security levels or the specific threats that any given IPP
         print administrator may be concerned with cannot be anticipated, IPP
         MUST be capable of operating with different security mechanisms and
         security policies as required by the individual installation. Security
         policies might vary from very strong, to very weak, to none at all,
         and corresponding security mechanisms will be required.

         The initial security needs of IPP are derived from two primary
         considerations:

           - First, the printing environments envisioned for IPP include
              configurations where the client, the Printer, and the document(s)
              to be printed may all exist in different security domains. When
              objects are in different security domains the requirements for



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 91]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              authentication and message protection are much stronger than when
              they are in the same domain.

           - Second, the sensitivity and value of the content being printed
              will vary. For example, a publicly available document does not
              require the same level of privacy that a payroll document
              requires. There are at least two parties that have an interest in
              the value of the information being printed, the person asking to
              have the information printed and the person who originated the
              information. This brings into the picture the need to worry about
              copyrights and protection of the content.

         The following sections describe specific security attacks for IPP
         environments.  Where examples are provided they should be considered
         illustrative of the environment and not an exhaustive set. Not all of
         these environments will necessarily be addressed in initial
         implementations of IPP.


         8.1 Client and Printer in the Same Security Domain

         This environment is typical of internal networks where traditional
         office workers print the output of personal productivity applications
         on shared work-group printers, or where batch applications print their
         output on large production printers. Although the identity of the user
         may be trusted in this environment, a user might want to protect the
         content of a document against such attacks as eavesdropping, replaying
         or tampering.


         8.2 Client and Printer in Different Security Domains

         Examples of this environment include printing a document created by
         the client on a publicly available printer, such as at a commercial
         print shop; or printing a document remotely on a business partner's
         printer. This latter operation is functionally equivalent to sending
         the document to the business partner as a facsimile. Printing
         sensitive information on a Printer in a different security domain
         requires strong security measures. In this environment authentication
         of the printer is required as well as protection against unauthorized
         use of print resources. Since the document crosses security domains,
         protection against eavesdropping and document tampering are also
         required. It will also be important in this environment to protect
         Printers against "spamming" and malicious document content code.






         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 92]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         8.3 Print by Reference

         When the document is not stored on the client, printing can be done by
         reference. That is, the print request can contain a reference, or
         pointer, to the document instead of the actual document itself. If the
         client physically gets the document before it prints it, then this
         defaults to one of the previous cases.

         8.3.1 Unprotected Documents

         In many cases, documents to be printed are literally available to
         anyone. Documents, such as this Internet Draft which are stored on
         anonymous FTP sites, are good examples of this. No security mechanisms
         are required to protect access to these documents.

         8.3.2 Protected Documents

         Clearly, there are cases where the nature of a document requires that
         access to it be protected by some authentication and/or authorization
         mechanism, or where the right to print the document must be paid for.
         This would be the case for sensitive or confidential information, or
         where documents are copyrighted or sold for profit. Unauthorized
         access to content is a major concern in this environment. Protection
         against eavesdropping, document tampering and unauthorized access to
         the document are also concerns if the content is sensitive.


         8.4 Common Security Scenarios

         As discussed earlier, we cannot anticipate the security levels or the
         specific threats that any given IPP print administrator may be
         concerned with.  Security policies might vary from very strong, to
         very weak, to none at all.  In this section we will describe what we
         believe to be four common usage scenarios.

           1) No security at all
           2) Message protection during transmission
           3) Client authentication and authorization
           4) Mutual authentication, authorization, and message protection


         8.4.1 No Security

         If the server requires no authorization and the client wants no
         message protection the client can send the print job, i.e., the job
         content and the job attributes without invoking any security
         mechanisms. The printer will print the job for the client. Print by



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 93]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         reference also works well in this environment as long as no security
         mechanisms are required to access the documents to be printed.

         8.4.2 Message Protection During Transmission

         There are two types of security that could be used to provide message
         protection. These are channel security and object security. In the
         first case, the channel can be made secure using the Transport Layer
         Security (TLS) protocol, currently under development in the IETF.  In
         the case of object security, each object is encrypted and sent over
         either a secure or insecure channel.  The recipient has the
         corresponding key to decrypt the object and get the content. Several
         object security mechanisms are currently under study in the IETF.  IPP
         neither mandates the use of these object security mechanisms nor does
         it prohibit the use of them.  IPP will define a recommended mechanism
         for channel security, which is deemed more suitable to meet the IPP
         requirements.

         8.4.3 Client Authentication and Authorization

         This scenario requires client authentication. The authenticated user
         ID may be used for authorization purposes, and may be encrypted by the
         lower security layer.  TLS supports both one sided and mutual
         authentication.  IPP does not mandate the use of any specific
         authorization mechanism (see section 3.1.5.1).

         8.4.4 Mutual Authentication, Authorization and Message Protection

         This scenario requires mutual authentication and message protection.
         TLS can be used for this security feature in these configurations.


         8.5 Recommended Security Mechanisms

         IPP requires all IPP clients and Printers to support the
         authentication features in HTP 1.1 and intends to mandate TLS for
         scenarios requiring channel security, once these specifications have
         become stabilized.

         IPP implementations should provide a range of security options to meet
         the needs of different installations and user populations.  Many of
         the security services that are enabled at a given site will be done so
         by a site administrator. The mechanisms used to establish these
         services and to define user IDs and passwords to the system are
         implementation defined and outside the scope of IPP.

         The security protocol used by a particular IPP operation will depend
         upon the security services implemented on the Printer, the security


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 94]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         policy established by a site administrator, and the selection made by
         the client. This requires that the right handshake messages be passed
         to invoke the selected security  service. These are described in the
         references for each security mechanism and are normally invoked by the
         client. The "security-mechanisms-supported" and "printer-more-info"
         attributes can be queried to help the end user know what to expect in
         terms of security. These attributes should also appear in the
         directory entry for each Printer.

         Note: When utilizing HTTP/1.1 as a transport for IPP [IPP-PRO], the
         security considerations outlined in HTTP/1.1 apply. When set by an
         administrator, IPP servers MUST generate a 401 (Unauthorized) response
         code to request client authentication and IPP clients should correctly
         respond with the proper Authorization header. Both basic
         authentication and digest authentication flavors of authentication
         should be supported. The administrator chooses which type(s) of
         authentication to accept. Digest authentication is a more secure
         method and is always preferred to basic authentication.

         For secure communication (privacy in particular), IPP should be run
         using a secure communications channel. TLS provides secure
         communications channels and provides for mutual authentication. The
         secure communications channel must be initiated prior to running the
         IPP protocol. There is no mechanism for bootstrapping a secure
         communication channel from within the IPP protocol itself.

         It is possible to combine a secure communication channel with either
         Basic or Digest Authentication.

         For a Printer object that supports only non-secure access, the Printer
         object supports only the "printer-uri" attribute.  For a Printer
         object that supports only secure access, the Printer object supports
         only the "printer-tls-uri".  For a Printer object that supports both
         secure and non-secure access, the Printer object supports both the
         "printer-uri" and the "printer-tls-uri" attributes.


         9. References

          [ASCII]
              Coded Character Set - 7-bit American Standard Code for
              Information Interchange (ASCII), ANSI X3.4-1986. This standard is
              the specification of the 'US-ASCII' charset.

         [CS-POL]
              H. Alvestrand, "IETF Policy on Character Sets and Languages, work
              in progress <draft-alvestrand-charset-policy-01.txt>, August 29,
              1997.


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 95]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         [HTPP]
              J. Barnett, K. Carter, R. DeBry,  "Initial Draft - Hypertext
              Printing Protocol - HTPP/1.0", October 1996,
              ftp://ftp.pwg.org/pub/pwg/ipp/historic/htpp/ overview.ps.gz

         [IANA-CS]
              IANA Registry of Coded Character Sets:  ftp://ftp.isi.edu/in-
              notes/iana/assignments/character-sets

         [IANA-CSa]
              N. Freed, J. Postel:  IANA CharSet Registration Procedures, Work
              in Progress (draft-freed-charset-reg-02.txt).

         [IANA-MT]
              IANA Registry of Media Types:  ftp://ftp.isi.edu/in-
              notes/iana/assignments/media-types/

         [IPP-PRO]
              Herriot, R. (et al), " Internet Printing Protocol/1.0: Protocol
              Specifications", draft-ipp-pro-03.txt, November, 1997.

         [IPP-RAT]
              Zilles, S., "Rationale for the Structure and Model and Protocol
              for the Internet Printing Protocol", draft-ipp-rat-01.txt,
              November, 1997.

         [IPP-REQ]
              Wright, D., "Requirements for an Internet Printing Protocol",
              draft-ipp-req-01.txt, November, 1997.

         [ISO10646-1]
              ISO/IEC 10646-1:1993, "Information technology -- Universal
              Multiple-Octet Coded Character Set (UCS) - Part 1: Architecture
              and Basic Multilingual Plane, JTC1/SC2."

         [ISO8859-1]
              ISO/IEC 8859-1:1987, "Information technology -- 8-bit One-Byte
              Coded Character Set - Part 1: Latin Alphabet Nr 1", 1987,
              JTC1/SC2.

         [ISODPA]
              ISO/IEC 10175 Document Printing Application (DPA), June 1996.

          [LDPA]
              T. Hastings,  S. Isaacson,  M. MacKay, C. Manros, D. Taylor, P.
              Zehler,  "LDPA - Lightweight Document Printing Application",
              October 1996,
              ftp://ftp.pwg.org/pub/pwg/ipp/historic/ldpa/ldpa8.pdf.gz


         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 96]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         [P1387.4]
              Kirk, M. (editor), POSIX System Administration - Part 4: Printing
              Interfaces, POSIX 1387.4 D8, 1994.

         [PSIS]    Herriot, R. (editor), X/Open A Printing System
              Interoperability Specification (PSIS), August 1995.

         [RFC1035]
              P. Mockapetris, "DOMAIN NAMES - IMPLEMENTATION AND
              SPECIFICATION", RFC 1035, November 1987.

         [RFC1179]
              McLaughlin, L. III, (editor), "Line Printer Daemon Protocol" RFC
              1179, August 1990.

         [RFC1514]
              ?, "  ", RFC 1514, ?.

          [RFC1521]
              Borenstein, N., and Freed, N., "MIME (Multi-purpose Internet Mail
              Extensions) Part One: Mechanism for Specifying and Describing the
              Format of Internet Message Bodies", RFC 1521, September, 1993.

         [RFC1630]
              T. Berners-Lee, "Universal Resource Identifiers in WWW: A
              Unifying Syntax for the Expression of Names and Addresses of
              Objects on the Network as used in the World-Wide Web", RFC 1630,
              June 1994.

         [RFC1738]
              Berners-Lee, T., Masinter, L., McCahill, M. , "Uniform Resource
              Locators (URL)", RFC 1738, December, 1994.

         [RFC1759]
              Smith, R., Wright, F., Hastings, T., Zilles, S., and Gyllenskog,
              J., "Printer MIB", RFC 1759, March 1995.

         [RFC1766]
              H. Alvestrand, " Tags for the Identification of Languages", RFC
              1766, March 1995.

         [RFC1808]
              ?, "  ", RFC 1808, ?.

         [RFC1825]
              R. Atkinson, "Security Architecture for the Internet Protocol",
              RFC 1825, August 1995



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 97]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         [RFC1903]
              ?, "  ", RFC 1903, ?.

          [RFC2044]
              F. Yergeau, "UTF-8, a transformation format of Unicode and ISO
              10646", RFC 2044, October 1996.

         [RFC2068]
              R. Fielding, J. Gettys, J. Mogul, H. Frystyk, T. Berners-Lee,
              "Hypertext Transfer Protocol - HTTP/1.1", RFC 2068, January 1997

         [RFC2069]
              J. Franks, P. Hallam-Baker, J. Hostetler, P. Leach, A. Luotonen,
              E. Sink, L. Stewart, "An Extension to HTTP: Digest Access
              Authentication", RFC-2069, Jan 1997.

         [RFC2119]
              S. Bradner, "Key words for use in RFCs to Indicate Requirement
              Levels", RFC 2119 , March 1997

         [RFC2130]
              ?, "  ", RFC 2130, ?.

          [RFC2045]
              N. Fried, N. Borenstein, ", Multipurpose Internet Mail Extensions
              (MIME) Part One: Format of Internet Message Bodies " RFC 2045,
              November 1996.

         [RFC2046]
              Multipurpose Internet Mail Extensions (MIME) Part Two: Media
              Types. N. Freed & N. Borenstein. November 1996. (Obsoletes
              RFC1521, RFC1522, RFC1590), RFC 2046.

         [RFC2048]
              Multipurpose Internet Mail Extension (MIME) Part Four:
              Registration Procedures. N. Freed, J. Klensin & J. Postel.
              November 1996. (Format: TXT=45033 bytes) (Obsoletes RFC1521,
              RFC1522, RFC1590) (Also BCP0013), RFC 2048.

         [RFC2184]
              N. Fried, K. Moore, "MIME Parameter Value and Encoded Word
              Extensions: Character Sets, Languages, and Continuations", RFC
              2184, August 1997

         [SWP]
              P. Moore, B. Jahromi, S. Butler, "Simple Web Printing SWP/1.0",
              May 7, 1997, ftp://ftp.pwg.org/pub/pwg/ipp/new_PRO/swp9705.pdf



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 98]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         10. Copyright Notice

         Copyright (C) The Internet Society (date). All Rights Reserved.

         This document and translations of it may be copied and furnished to
         others, and derivative works that comment on or otherwise explain it
         or assist in its implementation may be prepared, copied, published and
         distributed, in whole or in part, without restriction of any kind,
         provided that the above copyright notice and this paragraph are
         included on all such copies and derivative works.  However, this
         document itself may not be modified in any way, such as by removing
         the copyright notice or references to the Internet Society or other
         Internet organizations, except as needed for the  purpose of
         developing Internet standards in which case the procedures for
         copyrights defined in the Internet Standards process must be followed,
         or as required to translate it into languages other than English.

         The limited permissions granted above are perpetual and will not be
         revoked by the Internet Society or its successors or assigns.

         This document and the information contained herein is provided on an
         "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
         TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
         NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN
         WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
         MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.






         11. Author's Address

              Scott A. Isaacson (Editor)
              Novell, Inc.
              122 E 1700 S
              Provo, UT   84606

              Phone: 801-861-7366
              Fax:   801-861-4025
              EMail: scott_isaacson@novell.com

              Tom Hastings
              Xerox Corporation
              701 S. Aviation Blvd.
              El Segundo, CA   90245



         deBry, Hastings, Herriot, Isaacson, Powell                  [Page 99]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              Phone: 310-333-6413
              Fax:   310-333-5514
              EMail: hastings@cp10.es.xerox.com

              Robert Herriot
              Sun Microsystems Inc.
              901 San Antonio.Road, MPK-17
              Palo Alto, CA 94303

              Phone: 415-786-8995 (Area code change to 650 in August 1997)
              Fax:  415-786-7077 (Area code change to 650 in August 1997)
              Email: robert.herriot@eng.sun.com

              Roger deBry
              HUC/003G
              IBM Corporation
              P.O. Box 1900
              Boulder, CO 80301-9191

              Phone: (303) 924-4080
              Fax: (303) 924-9889
              Email: debry@vnet.ibm.com

              Patrick Powell
              San Diego State University
              9475 Chesapeake Dr., Suite D
              San Diego, CA  95123

              Phone: (619) 874-6543
              Fax: (619) 279-8424
              Email: papowell@sdsu.edu

              IPP Mailing List:  ipp@pwg.org
              IPP Mailing List Subscription:  ipp-request@pwg.org
              IPP Web Page:  http://www.pwg.org/ipp/

         Other Participants:

              Chuck Adams - Tektronix
              Jeff Barnett - IBM
              Ron Bergman - Dataproducts Corp.
              Sylvan Butler, HP
              Keith Carter, IBM Corporation
              Jeff Copeland - QMS
              Andy Davidson - Tektronix
              Mabry Dozier - QMS
              Lee Farrell - Canon Information Systems
              Steve Gebert - IBM


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 100]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              Babek Jahromi, Microsoft
              David Kellerman - Northlake Software
              Rick Landau - Digital
              Harry Lewis - IBM
              Pete Loya - HP
              Ray Lutz - Cognisys Mike MacKay, Novell, Inc.
              Carl-Uno Manros, Xerox, Corp.
              Jay Martin - Underscore
              Stan McConnell - Xerox
              Ira McDonald, High North Inc. Paul Moore, Microsoft
              Pat Nogay - IBM
              Bob Pentecost - HP
              Rob Rhoads - Intel
              David Roach - Unisys
              Stuart Rowley, Kyocera
              Hiroyuki Sato - Canon
              Bob Setterbo - Adobe
              Devon Taylor, Novell, Inc.
              Mike Timperman - Lexmark
              Randy Turner - Sharp
              Atsushi Yuki - Kyocera
              Lloyd Young - Lexmark
              Bill Wagner - DPI
              Jim Walker - DAZEL
              Chris Wellens - Interworking Labs
              Rob Whittle - Novell
              Don Wright - Lexmark
              Peter Zehler, Xerox, Corp.
              Steve Zilles, Adobe





















         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 101]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997



         12. APPENDIX A: Terminology

         This specification uses the terminology defined in this section.


         12.1 Conformance Terminology

         The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
         "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and  "OPTIONAL" in this
         document are to be interpreted as described in RFC 2119 [RFC2119]. The
         sections below reiterate these definitions and include some additional
         ones.

         12.1.1 MUST

         This word, or the terms "REQUIRED",  "SHALL" or "MANDATORY", means
         that the definition is an absolute requirement of the specification.

         12.1.2 MUST NOT

         This phrase, or the phrase "SHALL NOT", means that the definition is
         an absolute prohibition of the specification.

         12.1.3 SHOULD

         This word, or the adjective "RECOMMENDED", means that there may exist
         valid reasons in particular circumstances to ignore a particular item,
         but the full implications must be understood and carefully weighed
         before choosing a different course.

         12.1.4 SHOULD NOT

         This phrase, or the phrase "NOT RECOMMENDED" means that there may
         exist valid reasons in particular circumstances when the particular
         behavior is acceptable or even useful, but the full implications
         should be understood and the case carefully weighed before
         implementing any behavior described with this label.

         12.1.5 MAY

         This word, or the adjective "OPTIONAL", means that an item is truly
         optional.  One vendor may choose to include the item because a
         particular marketplace requires it or because the vendor feels that it
         enhances the product while another vendor may omit the same item.   An
         implementation which does not include a particular option MUST be
         prepared to interoperate with another implementation which does
         include the option, though perhaps with reduced functionality. In the


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 102]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         same vein an implementation which does include a particular option
         MUST be prepared to interoperate with another implementation which
         does not include the option (except, of course, for the feature the
         option provides.)

         12.1.6 NEED NOT

         The verb "NEED NOT" indicates an action that the subject of the
         sentence does not have to implement in order to claim conformance to
         the standard.  The verb "NEED NOT" is used instead of "MAY NOT" since
         "MAY NOT" sounds like a prohibition.


         12.2 Model Terminology

         12.2.1 Keyword

         Keywords are used within this document as identifiers of semantic
         entities within the abstract model.  Attribute names, some attribute
         values, attribute syntaxes, and attribute group names are represented
         as keywords.  In this document, a keyword is a sequence of characters
         (length of 1 to 255) which consists of the following ASCII characters:
         lower-case letters ("a" - "z"), digits ("0" - "9"), hyphen ("-"),
         period ("."), and underscore ("_").  A keyword starts with a lower-
         case letter.

         12.2.2 Attributes

         An attribute is an item of information that is associated with an
         instance of an IPP object.  An attribute consists of an attribute name
         and an attribute value(s).  Each attribute has a specific syntax.  All
         attributes are defined in section 4.

         Job Template Attributes described in section 4.2. The client
         optionally supplies Job Template attributes in a create request
         (operation requests that create Job objects).  The Printer object has
         associated attributes which define supported and default values for
         the Printer.

         12.2.2.1 Attribute Name

         Each attribute is uniquely identified in this document by its
         attribute name.  An attribute name is a keyword.  The keyword
         attribute name is given in the section header describing that
         attribute.  In running text in this document, attribute names are
         indicated inside double quotation marks (") where the quotation marks
         are not part of the keyword itself.



         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 103]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         12.2.2.2 Attribute Group Name

         Related attributes are grouped into named groups.  The name of the
         group is a keyword.  The group name may be used in place of naming all
         the attributes in the group explicitly.  Attribute groups are defined
         in section 3.

         12.2.2.3 Attribute Value

         Each attribute has one or more values.  Attribute values are
         represented in the syntax type specified for that attribute. In
         running text in this document, attribute values are indicated inside
         single quotation marks ('), whether their attribute syntax is keyword,
         integer, text, etc. where the quotation marks are not part of the
         value itself.

         12.2.2.4 Attribute Syntax

         Each attribute is defined using an explicit syntax type.  In this
         document, each syntax type is defined as a keyword with specific
         meaning.  The protocol specification document [IPP-PRO] indicates the
         actual "on-the-wire" encoding rules for each syntax type. Attribute
         syntax types are defined in section 4.1.

         12.2.3 Supports

         By definition, a Printer object supports an attribute only if that
         Printer object responds with the corresponding attribute populated
         with some value(s) in a response to a query for that attribute.  A
         Printer object supports an attribute value if the value is one of
         Printer object's "supported values" attributes.  The device behind a
         Printer object  may exhibit a behavior that corresponds to some IPP
         attribute, but if the Printer object, when queried for that attribute,
         doesn't respond with the attribute, then as far as IPP is concerned,
         that implementation does not support that feature.  If the Printer
         object supports Job Template attribute "foo" then it supports both a
         "foo-default" default value attribute and a "foo-supported" supported
         values attribute.  If the Printer object's "foo-supported" attribute
         is not populated with some value (even if that value is a legal value
         for that attribute), then that Printer object does not support that
         value.

         A conforming implementation SHALL support all MANDATORY attributes.
         However, even for MANDATORY attributes, conformance to IPP does not
         mandate that all implementations support all possible values
         representing all possible job processing behaviors and features.  For
         example, if a given instance of a Printer supports only certain
         document formats, then that Printer responds with the "document-


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 104]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         format-supported" attribute populated with a set of values, possibly
         only one, taken from the entire set of possible values defined for
         that attribute. This limited set of values represents the Printer's
         set of supported document formats.  Supporting an attribute and some
         set of values for that attribute enables IPP end users to be aware of
         and make use of those features associated with that attribute and
         those values.  If an implementation chooses to not support an
         attribute or some specific value, then IPP end users would have no
         ability to make use of that feature within the context of IPP itself.
         However, due to existing practice and legacy systems which are not IPP
         aware, there might be some other mechanism outside the scope of IPP to
         control or request the "unsupported" feature (such as embedded
         instructions within the document data itself).

         For example, consider the "finishings-supported" attribute.  If a
         Printer is not physically capable of stapling, the "finishings-
         supported" attribute MUST NOT be populated with the value of 'staple'.
         If a Printer is physically capable of stapling, an implementation MAY
         choose to support the "finishings-supported" attribute and the value
         of 'staple'.  Doing so, would enable end users to be aware of and make
         use of the stapling feature.  Without support for the value 'staple',
         an IPP end user would have no means within the protocol itself to
         request that a Job be stapled.  However an existing document data
         formatter might be able to request that the document be stapled
         directly within the document data itself.  In this case, the IPP
         implementation does not "support" stapling, however the end user is
         still able to have some control over the stapling of the completed
         job.

         Even though support for Job Template attributes by a Printer object is
         OPTIONAL, it is RECOMMENDED that if the device behind a Printer object
         is capable of realizing any feature or function that corresponds to an
         IPP attribute and some associated value, then that implementation
         support that IPP attribute and value.

         The set of values in any of the supported value attributes is set
         (populated) by some administrative process or automatic sensing
         mechanism that is outside the scope of IPP.  For administrative policy
         and control reasons, an administrator may choose to make only a subset
         of possible values visible to the end user.  In this case, the real
         output device behind the IPP Printer abstraction may be capable of a
         certain feature, however an administrator is specifying that access to
         that feature not flow back to the end user through the IPP protocol.
         Also, since a Printer object may represent a logical print device (not
         just a physical devices) the actual process for supporting a value is
         undefined and left up to the implementation.  However, if a Printer
         object supports a value, some manual human action may be needed to
         realize the semantic action associated with the value, but no end user


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 105]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         action is required.  For example, if one of the values in the
         "finishings-supported" attribute is 'staple', the actual process might
         be an automatic staple action by a physical device controlled by some
         command sent to the device.  Or, the actual process of stapling might
         be a manual action by an operator at an operator attended Printer
         object.  For another example of how supported attributes function,
         consider an system administrator that desire to control all print jobs
         so that no cover sheets are printed in order to conserve paper.  To
         force no job sheets, the system administrator sets the only supported
         value for the "job-sheets-supported" attribute to 'none'. In this
         case, if a client requests anything except 'none', the create request
         is rejected (depending on the value of "ipp-attribute-fidelity" of
         course).  To force the use of banner pages on all jobs, the
         administrator does not include the value 'none' in the "job-sheets-
         supported" attribute.  In this case, if a client requests 'none', the
         create request is rejected (again depending on the value of "ipp-
         attribute-fidelity").

         12.2.4 print-stream page

         A "print-stream page" is a page according to the definition of pages
         in the language used to express the document data.

         12.2.5 imposed page

         An "imposed page" is a page created by placing N print-stream pages
         onto a single media page.


         13. APPENDIX B:  Status Codes

         This section defines status code keywords that are used to provide
         semantic information on the results of an operation request.  Each
         operation response MUST include a status code.  For error type status
         codes, the response MAY also contain a status message that provides a
         short textual description of the status. The status code is intended
         for use by automata, and the status message is intended for the human
         end user.  Since the status message is an OPTIONAL component of the
         operation response, an IPP application (i.e. a browser, GUI, print
         driver or gateway) is NOT REQUIRED to examine or display the status
         message.

         The prefix of the status keyword defines the class of response as
         follows:

           "informational" - Request received, continuing process
           "successful" - The action was successfully received, understood,
              and accepted


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 106]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           "redirection" - Further action must be taken in order to complete
              the request
           "client-error" - The request contains bad syntax or cannot be
              fulfilled
           "server-error" - The server failed to fulfill an apparently valid
              request

         Since IPP status codes are type2 enums, they are extensible.  IPP
         applications are NOT REQUIRED to understand the meaning of all
         registered status codes, though such understanding is obviously
         desirable.  However, applications SHALL understand the class of any
         status code, as indicated by the prefix, and treat any unrecognized
         response as being equivalent to the first status code of that class,
         with the exception that an unrecognized response shall not be cached.
         For example, if an unrecognized status code of "client-error-foo-bar"
         is received by the client, it can safely assume that there was
         something wrong with its request and treat the response as if it had
         received a "client-error-bad-request" status code.  In such cases, IPP
         applications SHOULD present the OPTIONAL message (if present) to the
         end user since the message is likely to contain human readable
         information which will help to explain the unusual status.


         13.1 Status Codes

         Each status code is described below. Section 13.2 contains a table
         that indicates which status codes apply to which operations.

         13.1.1 Informational

         This class of status code indicates a provisional response and is to
         be used for informational purposes only.

         There are no status codes defined in IPP 1.0 for this class of status
         code.

         13.1.2 Successful Status Codes

         This class of status code indicates that the client's request was
         successfully received, understood, and accepted.

         13.1.2.1 successful-ok (0x0000)

         The request has succeeded.






         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 107]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         13.1.2.2 successful-ok-ignored-or-substituted-attributes (0x0001)

         The request has succeeded, but since ignoring or substituting of
         values was requested ("ipp-attribute-fidelity" set to 'false' in the
         create request), some attributes were ignored or unsupported values
         were substituted with supported values in order to process the job
         without rejecting it.

         13.1.3 Redirection Status Codes

         This class of status code indicates that further action needs to be
         taken to fulfill the request.

         There are no status codes defined in IPP 1.0 for this class of status
         code.

         13.1.4 Client Error Status Codes

         This class of status code is intended for cases in which the client
         seems to have erred.  The server SHOULD return a message containing an
         explanation of the error situation and whether it is a temporary or
         permanent condition.

         13.1.4.1 client-error-bad-request (0x0400)

         The request could not be understood by the server due to malformed
         syntax.  The IPP application SHOULD NOT repeat the request without
         modifications.

         13.1.4.2 client-error-forbidden (0x0401)

         The server understood the request, but is refusing to fulfill it.
         Additional authentication information or authorization credentials
         will not help and the request SHOULD NOT be repeated.  This status
         code is commonly used when the server does not wish to reveal exactly
         why the request has been refused or when no other response is
         applicable.

         13.1.4.3 client-error-not-authenticated (0x0402)

         The request requires user authentication.  The IPP client may repeat
         the request with suitable authentication information. If the request
         already included authentication information, then this status code
         indicates that authorization has been refused for those credentials.
         If this response contains the same challenge as the prior response,
         and the user agent has already attempted authentication at least once,
         then the response message may contain relevant diagnostic information.



         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 108]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         This status codes reveals more information than "client-error-
         forbidden" and "client-error-not-authenticated".

         13.1.4.4 client-error-not-authorized (0x0403)

         The requester is not authorized to perform the request.  Additional
         authentication information or authorization credentials will not help
         and the request SHOULD NOT be repeated.  This status code is used when
         the server wishes to reveal that the authentication information is
         understandable, however, the requester is explicitly not authorized to
         perform the request.  This status codes reveals more information than
         "client-error-forbidden" and "client-error-not-authenticated".

         13.1.4.5 client-error-not-possible (0x0404)

         This status code is used when the request is for something that can
         not happen.  For example, there might be a request to cancel a job
         that has already been canceled or aborted by the system.  The IPP
         client SHOULD NOT repeat the request.

         13.1.4.6 client-error-timeout (0x0405)

         The client did not produce a request within the time that the server
         was prepared to wait.  For example, a client issued a Create-Job
         operation and then, after a long period of time, issued a Send-
         Document operation and this error status code was returned in response
         to the Send-Document request.  The server might have been forced to
         clean up resources that had been held for the waiting additional
         Documents.  The server was forced to close the Job since the client
         took too long.  The client SHOULD NOT repeat the request without
         modifications.

         13.1.4.7 client-error-not-found (0x0406)

         The server has not found anything matching the request URI.  No
         indication is given of whether the condition is temporary or
         permanent.  For example, a client with an old reference to a Job (a
         URI) tries to cancel the Job, however in the mean time the Job might
         have been completed and all record of it at the Printer has been
         deleted.  This status code, 'client-error-not-found' is returned
         indicating that the referenced Job can not be found.  This error
         status code is also used when a client supplies a URI as a reference
         to the document data in either a Print-URI or Send-URI operation
         however the document can not be found.

         In practice, an IPP application should avoid a not found situation by
         first querying and presenting a list of valid Printer URIs and Job
         URIs to the end-user.


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 109]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         13.1.4.8 client-error-gone (0x0407)

         The requested object is no longer available at the server and no
         forwarding address is known.  This condition should be considered
         permanent.  Clients with link editing capabilities should delete
         references to the request URI after user approval.  If the server does
         not know or has no facility to determine, whether or not the condition
         is permanent, the status code "client-error-not-found" should be used
         instead.

         This response is primarily intended to assist the task of web
         maintenance by notifying the recipient that the resource is
         intentionally unavailable and that the server owners desire that
         remote links to that resource be removed. It is not necessary to mark
         all permanently unavailable resources as "gone" or to keep the mark
         for any length of time -- that is left to the discretion of the server
         owner.

         13.1.4.9 client-error-request-entity-too-large (0x0408)

         The server is refusing to process a request because the request entity
         is larger than the server is willing or able to process.  An IPP
         Printer returns this status code when it limits the size of print jobs
         and it receives a print job that exceeds that limit or when the
         attributes are so many that their encoding causes the request entity
         to exceed server capacity.

         13.1.4.10 client-error-request-URI-too-long (0x0409)

         The server is refusing to service the request because the request URI
         is longer than the server is willing to interpret.  This rare
         condition is only likely to occur when a client has improperly
         submitted a request with long query information (e.g. an IPP
         application allows an end-user to enter an invalid URI), when the
         client has descended into a URI "black hole" of redirection (e.g., a
         redirected URI prefix that points to a suffix of itself), or when the
         server is under attack by a client attempting to exploit security
         holes present in some servers using fixed-length buffers for reading
         or manipulating the Request-URI.

         13.1.4.11 client-error-unsupported-document-format (0x040A)

         The server is refusing to service the request because the document
         data is in a format, as specified in the "document-format" input
         attribute, that is not supported by the Printer object.





         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 110]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         13.1.4.12 client-error-attribute-not-supported (0x040B)

         For a Create-Job, Print-Job or Validate-Job operation, if the IPP
         Printer does not support one or more attributes or attribute values
         supplied in the request, the Printer shall return this status.  For
         example, if the request indicates 'iso-a4' media, but that media type
         is not supported by the Printer.  Or, if the client supplies an
         optional attribute and the attribute itself is not even supported by
         the Printer.  If "ipp-attribute-fidelity" is set to false, the Printer
         can ignore or substitute values for unsupported attributes and values
         rather than reject the request and return this status code.

         For a Get-Jobs operation, if the IPP Printer does not support one of
         the requested attributes, the Printer shall return this status.

         In practice, an IPP application should avoid this situation by
         querying an IPP Printer for its valid attributes and values before
         performing an operation on the Printer.

         13.1.4.13 client-error-uri-scheme-not-supported (0x040C)

         The type of the client supplied URI in a Print-URI or a Send-URI
         operation is not supported.

         13.1.4.14 client-error-charset-not-supported (0x040D)

         For any operation, if the IPP Printer does not support the charset
         supplied by the client in the "attributes-charset" operation
         attribute, the Printer SHALL reject the operation and return this
         status (see Section 3.1.3.1).

         13.1.4.15 client-error-natural-language-not-supported (0x040E)

         For any operation, if the IPP Printer does not support the natural
         language supplied by the client in the "attributes-natural-language"
         operation attribute and the implementation has chosen to reject the
         operation, the Printer SHALL return this status (see Section 3.1.3.1).

         13.1.5 Server Error Status Codes

         This class of status codes indicates cases in which the server is
         aware that it has erred or is incapable of performing the request.
         The server SHOULD include a message containing an explanation of the
         error situation, and whether it is a temporary or permanent condition.






         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 111]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         13.1.5.1 server-error-internal- error (0x0500)

         The server encountered an unexpected condition that prevented it from
         fulfilling the request.  This error status code differs from "server-
         error-temporary-error" in that it implies a more permanent type of
         internal error.  It also differs from "server-error-device-error" in
         that it implies an unexpected condition (unlike a paper-jam or out-of-
         toner problem which is undesirable but expected).  This error status
         code indicates that probably some knowledgeable human intervention is
         required.

         13.1.5.2 server-error-operation-not-supported (0x0501)

         The server does not support the functionality required to fulfill the
         request. This is the appropriate response when the server does not
         recognize an operation or is not capable of supporting it.

         13.1.5.3 server-error-service-unavailable (0x0502)

         The server is currently unable to handle the request due to a
         temporary overloading or maintenance of the server.  The implication
         is that this is a temporary condition which will be alleviated after
         some delay. If known, the length of the delay may be indicated in the
         message.  If no delay is given, the IPP application should handle the
         response as it would for a "server-error-temporary-internal-error"
         response.  If the condition is more permanent, the error status codes
         "client-error-gone" or "client-error-not-found" could be used.

         13.1.5.4 server-error-version-not-supported (0x0503)

         The server does not support, or refuses to support, the IPP protocol
         version that was used in the request message.  The server is
         indicating that it is unable or unwilling to complete the request
         using the same version as supplied in the request other than with this
         error message. The response should contain a Message describing why
         that version is not supported and what other versions are supported by
         that server.

         A conforming IPP client shall specify the valid version (IPP 1.0)on
         each request.  A conforming IPP server (IPP 1.0) SHALL NOT return this
         status code to a conforming IPP 1.0 client.  An IPP server shall
         return this status code to a non-conforming IPP client.

         13.1.5.5 server-error-device-error (0x0504)

         A printer error, such as a paper jam, occurs while the IPP Printer
         processes a Print or Send operation.  The response contains the true
         Job Status (the values of the "job-state" and "job-state-reasons"


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 112]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         attributes).  Additional information can be returned in the optional
         "job-state-message" attribute value or in the OPTIONAL status message
         that describes the error in more detail.  This error status code is
         only returned in situations where the Printer is unable to accept the
         create request because of such a device error.  For example, if the
         Printer is unable to spool, and can only accept one job at a time, the
         reason it might reject a create request is that the printer currently
         has a paper jam.  In many cases however, where the Printer object can
         accept the request even though the Printer has some error condition,
         the 'successful-ok' status code will be returned.  In such a case, the
         client would look at the returned Job Object Attributes or later query
         the Printer to determine its state and state reasons.

         13.1.5.6 server-error-temporary-error (0x0505)

         A temporary error such as a buffer full write error, a memory overflow
         (i.e. the document data exceeds the memory of the Printer), or a disk
         full condition, occurs while the IPP Printer processes an operation.
         The client MAY try the unmodified request again at some later point in
         time with an expectation that the temporary internal error condition
         may have been cleared.





























         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 113]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         13.2 Status Codes for IPP Operations

         PJ = Print-Job, PU = Print-URI, CJ = Create-Job, SD = Send-Document
         SU = Send-URI, V = Validate-Job, GA = Get-Attributes, GJ = Get-Jobs
         C = Cancel-Job

                                                        IPP Operations
         IPP Status Keyword                       PJ PU CJ SD SU V GA GJ C
         ------------------                       -- -- -- -- -- - -- -- -
         successful-OK                            x  x  x  x  x  x x  x x
         successful-ok-ignored-or-substituted-    x  x  x  x  x  x
              attributes
         client-error-bad-request                 x  x  x  x  x  x x  x x
         client-error-not-authenticated           x  x  x  x  x  x x  x x
         client-error-not-authorized              x  x  x  x  x  x x  x x
         client-error-forbidden                   x  x  x  x  x  x x  x x
         client-error-not-possible                x  x  x  x  x  x x  x x
         client-error-not-found                   x  x  x  x  x  x x  x x
         client-error-timeout                     x  x  x  x  x  x x  x x
         client-error-gone                        x  x  x  x  x  x x  x x
         client-error-request-entity-too-large    x  X  X  X  X  X X  X X
         client-error-request-URI-too-long        x  x  x  x  x  x x  x x
         client-error-unsupported-document-format x  x     x  x
         client-error-attribute-value-not-        x  x  x        x
              supported
         server-error-internal-error              x  x  x  x  x  x x  x x
         server-error-service-unavailable         x  x  x  x  x  x x  x x
         server-error-timeout                     x  x  x  x  x  x x  x x
         server-error-HTTP-version-not-supported  x  x  x  x  x  x x  x x
         server-error-IPP-version-not-supported   x  x  x  x  x  x x  x x
         server-error-device-error                x  x  x  x  x
         server-error-temporary-error             x  x  x  x  x


         14. APPENDIX C:  "media" keyword values

         Standard keyword values are taken from several sources.

         Standard values are defined (taken from DPA[ISODPA] and the Printer
         MIB[RFC1759]):

           'default': The default medium for the output device
           'iso-a4-white': Specifies the ISO A4 white medium
           'iso-a4-colored': Specifies the ISO A4 colored medium
           'iso-a4-transparent' Specifies the ISO A4 transparent medium
           'iso-a3-white': Specifies the ISO A3 white medium
           'iso-a3-colored': Specifies the ISO A3 colored medium
           'iso-a5-white': Specifies the ISO A5 white medium


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 114]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           'iso-a5-colored': Specifies the ISO A5 colored medium
           'iso-b4-white': Specifies the ISO B4 white medium
           'iso-b4-colored': Specifies the ISO B4 colored medium
           'iso-b5-white': Specifies the ISO B5 white medium
           'iso-b5-colored': Specifies the ISO B5 colored medium
           'jis-b4-white': Specifies the JIS B4 white medium
           'jis-b4-colored': Specifies the JIS B4 colored medium
           'jis-b5-white': Specifies the JIS B5 white medium
           'jis-b5-colored': Specifies the JIS B5 colored medium


         The following standard values are defined for North American media:

           'na-letter-white': Specifies the North American letter white medium
           'na-letter-colored': Specifies the North American letter colored
              medium
           'na-letter-transparent': Specifies the North American letter
              transparent medium
           'na-legal-white': Specifies the North American legal white medium
           'na-legal-colored': Specifies the North American legal colored
              medium


         The following standard values are defined for envelopes:

           'iso-b4-envelope': Specifies the ISO B4 envelope medium
           'iso-b5-envelope': Specifies the ISO B5 envelope medium
           'iso-c3-envelope': Specifies the ISO C3 envelope medium
           'iso-c4-envelope': Specifies the ISO C4 envelope medium
           'iso-c5-envelope': Specifies the ISO C5 envelope medium
           'iso-c6-envelope': Specifies the ISO C6 envelope medium
           'iso-designated-long-envelope': Specifies the ISO Designated Long
              envelope medium
           'na-10x13-envelope': Specifies the North American 10x13 envelope
              medium
           'na-9x12-envelope': Specifies the North American 9x12 envelope
              medium
           'monarch-envelope': Specifies the Monarch envelope
           'na-number-10-envelope': Specifies the North American number 10
              business envelope medium
           'na-7x9-envelope': Specifies the North American 7x9 inch envelope
           'na-9x11-envelope': Specifies the North American 9x11 inch envelope
           'na-10x14-envelope': Specifies the North American 10x14 inch
              envelope
           'na-number-9-envelope': Specifies the North American number 9
              business envelope
           'na-6x9-envelope': Specifies the North American 6x9 inch envelope



         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 115]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           'na-10x15-envelope': Specifies the North American 10x15 inch
              envelope


         The following standard values are defined for the less commonly used
         media (white-only):

           'executive-white': Specifies the white executive medium
           'folio-white': Specifies the folio white medium
           'invoice-white': Specifies the white invoice medium
           'ledger-white': Specifies the white ledger medium
           'quarto-white': Specified the white quarto medium
           'iso-a0-white': Specifies the ISO A0 white medium
           'iso-a1-white': Specifies the ISO A1 white medium
           'iso-a2-white': Specifies the ISO A2 white medium
           'iso-a6-white': Specifies the ISO A6 white medium
           'iso-a7-white': Specifies the ISO A7 white medium
           'iso-a8-white': Specifies the ISO A8 white medium
           'iso-a9-white': Specifies the ISO A9 white medium
           'iso-10-white': Specifies the ISO A10 white medium
           'iso-b0-white': Specifies the ISO B0 white medium
           'iso-b1-white': Specifies the ISO B1 white medium
           'iso-b2-white': Specifies the ISO B2 white medium
           'iso-b3-white': Specifies the ISO B3 white medium
           'iso-b6-white': Specifies the ISO B6 white medium
           'iso-b7-white': Specifies the ISO B7 white medium
           'iso-b8-white': Specifies the ISO B8 white medium
           'iso-b9-white': Specifies the ISO B9 white medium
           'iso-b10-white': Specifies the ISO B10 white medium
           'jis-b0-white': Specifies the JIS B0 white medium
           'jis-b1-white': Specifies the JIS B1 white medium
           'jis-b2-white': Specifies the JIS B2 white medium
           'jis-b3-white': Specifies the JIS B3 white medium
           'jis-b6-white': Specifies the JIS B6 white medium
           'jis-b7-white': Specifies the JIS B7 white medium
           'jis-b8-white': Specifies the JIS B8 white medium
           'jis-b9-white': Specifies the JIS B9 white medium
           'jis-b10-white': Specifies the JIS B10 white medium


         The following standard values are defined for engineering media:

           'a': Specifies the engineering A size medium
           'b': Specifies the engineering B size medium
           'c': Specifies the engineering C size medium
           'd': Specifies the engineering D size medium
           'e': Specifies the engineering E size medium



         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 116]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         The following standard values are defined for input-trays (from ISO
         DPA and the Printer MIB):

           'top': The top input tray in the printer.
           'middle': The middle input tray in the printer.
           'bottom': The bottom input tray in the printer.
           'envelope': The envelope input tray in the printer.
           'manual': The manual feed input tray in the printer.
           'large-capacity': The large capacity input tray in the printer.
           'main': The main input tray
           'side': The side input tray


         The following standard values are defined for media sizes (from ISO
         DPA):

           'iso-a0': Specifies the ISO A0 size: 841 mm by 1189 mm as defined
              in ISO 216
           'iso-a1': Specifies the ISO A1 size: 594 mm by 841 mm as defined in
              ISO 216
           'iso-a2': Specifies the ISO A2 size: 420 mm by 594 mm as defined in
              ISO 216
           'iso-a3': Specifies the ISO A3 size: 297 mm by 420 mm as defined in
              ISO 216
           'iso-a4': Specifies the ISO A4 size: 210 mm by 297 mm as defined in
              ISO 216
           'iso-a5': Specifies the ISO A5 size: 148 mm by 210 mm as defined in
              ISO 216
           'iso-a6': Specifies the ISO A6 size: 105 mm by 148 mm as defined in
              ISO 216
           'iso-a7': Specifies the ISO A7 size: 74 mm by 105 mm as defined in
              ISO 216
           'iso-a8': Specifies the ISO A8 size: 52 mm by 74 mm as defined in
              ISO 216
           'iso-a9': Specifies the ISO A9 size: 37 mm by 52 mm as defined in
              ISO 216
           'iso-a10': Specifies the ISO A10 size: 26 mm by 37 mm as defined in
              ISO 216
           'iso-b0': Specifies the ISO B0 size: 1000 mm by 1414 mm as defined
              in ISO 216
           'iso-b1': Specifies the ISO B1 size: 707 mm by 1000 mm as defined
              in ISO 216
           'iso-b2': Specifies the ISO B2 size: 500 mm by 707 mm as defined in
              ISO 216
           'iso-b3': Specifies the ISO B3 size: 353 mm by 500 mm as defined in
              ISO 216
           'iso-b4': Specifies the ISO B4 size: 250 mm by 353 mm as defined in
              ISO 216


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 117]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           'iso-b5': Specifies the ISO B5 size: 176 mm by 250 mm as defined in
              ISO 216
           'iso-b6': Specifies the ISO B6 size: 125 mm by 176 mm as defined in
              ISO 216
           'iso-b7': Specifies the ISO B7 size: 88 mm by 125 mm as defined in
              ISO 216
           'iso-b8': Specifies the ISO B8 size: 62 mm by 88 mm as defined in
              ISO 216
           'iso-b9': Specifies the ISO B9 size: 44 mm by 62 mm as defined in
              ISO 216
           'iso-b10': Specifies the ISO B10 size: 31 mm by 44 mm as defined in
              ISO 216
           'na-letter': Specifies the North American letter size: 8.5 inches
              by 11 inches
           'na-legal': Specifies the North American legal size: 8.5 inches by
              14 inches
           'executive': Specifies the executive size (7.25 X 10.5 in)
           'folio': Specifies the folio size (8.5 X 13 in)
           'invoice': Specifies the invoice size (5.5 X 8.5 in)
           'ledger': Specifies the ledger size (11 X 17 in)
           'quarto': Specifies the quarto size (8.5 X 10.83 in)
           'iso-c3': Specifies the ISO C3 size: 324 mm by 458 mm as defined in
              ISO 269
           'iso-c4': Specifies the ISO C4 size: 229 mm by 324 mm as defined in
              ISO 269
           'iso-c5': Specifies the ISO C5 size: 162 mm by 229 mm as defined in
              ISO 269
           'iso-c6': Specifies the ISO C6 size: 114 mm by 162 mm as defined in
              ISO 269
           'iso-designated-long': Specifies the ISO Designated Long size: 110
              mm by 220 mm as defined in ISO 269
           'na-10x13-envelope': Specifies the North American 10x13 size: 10
              inches by 13 inches
           'na-9x12-envelope': Specifies the North American 9x12 size: 9
              inches by 12 inches
           'na-number-10-envelope': Specifies the North American number 10
              business envelope size: 4.125 inches by 9.5 inches
           'na-7x9-envelope': Specifies the North American 7x9 inch envelope
              size
           'na-9x11-envelope': Specifies the North American 9x11 inch envelope
              size
           'na-10x14-envelope': Specifies the North American 10x14 inch
              envelope size
           'na-number-9-envelope': Specifies the North American number 9
              business envelope size
           'na-6x9-envelope': Specifies the North American 6x9 envelope size
           'na-10x15-envelope': Specifies the North American 10x15 envelope
              size


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 118]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           'monarch-envelope': Specifies the Monarch envelope size (3.87 x 7.5
              in)
           'jis-b0': Specifies the JIS B0 size: 1030mm x 1456mm
           'jis-b1': Specifies the JIS B1 size: 728mm x 1030mm
           'jis-b2': Specifies the JIS B2 size: 515mm x 728mm
           'jis-b3': Specifies the JIS B3 size: 364mm x 515mm
           'jis-b4': Specifies the JIS B4 size: 257mm x 364mm
           'jis-b5': Specifies the JIS B5 size: 182mm x 257mm
           'jis-b6': Specifies the JIS B6 size: 128mm x 182mm
           'jis-b7': Specifies the JIS B7 size: 91mm x 128mm
           'jis-b8': Specifies the JIS B8 size: 64mm x 91mm
           'jis-b9': Specifies the JIS B9 size: 45mm x 64mm
           'jis-b10': Specifies the JIS B10 size: 32mm x 45mm

         15. APPENDIX D: Processing IPP Attributes

         When submitting a print job to a Printer object, the IPP model allows
         a client to supply operation and Job Template attributes along with
         the document data.  These Job Template attributes in the create
         request affect the rendering, production and finishing of the
         documents in the job.  Similar types of instructions may also be
         contained in the document to be printed, that is, embedded within the
         print data itself.  In addition, the Printer has a set of attributes
         that describe what rendering and finishing options which are supported
         by that Printer.  This model, which allows for flexibility and power,
         also introduces the potential that at job submission time, these
         client-supplied attributes may conflict with either:

           - what the implementation is capable of realizing (i.e., what the
              Printer supports), as well as
           - the instructions embedded within the print data itself.

         The following sections describe how these two types of conflicts are
         handled in the IPP model.


         15.1 Fidelity

         If there is a conflict between what the client requests and what a
         Printer supports, the client may request one of two possible conflict
         handling mechanisms:

           1) either reject the job since the job can not be processed exactly
              as specified, or
           2) allow the Printer to make any changes necessary to proceed with
              processing the Job the best it can.




         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 119]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         In the first case the client is indicating to the Printer: "Print the
         job exactly as specified with no exceptions, and if that can't be
         done, don't even bother printing the job at all." In the second case,
         the client is indicating to the Printer: "It is more important to make
         sure the job is printed rather than be processed exactly as specified;
         just make sure the job is printed even if client supplied attributes
         need to be changed or ignored."

         The IPP model accounts for this situation by introducing an "ipp-
         attribute-fidelity" attribute.

         In a create request, "ipp-attribute-fidelity" is a boolean attribute
         that is OPTIONALLY supplied by the client.  The value 'true' indicates
         that total fidelity to client supplied attributes and values is
         required.  The client is requesting that the Job be printed exactly as
         specified, and if that is not possible then the job must be rejected
         rather than processed incorrectly.  The value 'false' indicates that a
         reasonable attempt to print the Job is acceptable.  If a Printer does
         not support some of the client supplied Job Template attributes or
         values, the Printer may ignore them or substitute any supported value
         for unsupported values.  The Printer may choose to substitute the
         default value associated with that attribute, or use some other
         supported value that is similar to the unsupported requested value.
         For example, if a client supplies a "media" value of 'na-letter', the
         Printer may choose to substitute 'iso-a4' rather than a default value
         of 'envelope'.  Since this is an OPTIONAL attribute, if the client
         does not supply a value, the Printer assumes a value of 'false'.

         Each Printer implementation MUST support both types of "fidelity"
         printing (that is whether the client supplies a value of 'true' or
         'false').  This is possible across all types of implementations, since
         there is a broad range of acceptable actions when substituting or
         ignoring unsupported attributes and values.  Also, even if the client
         supplies a value of 'false', a Printer might still reject the Job for
         any reason including an unsupported attributes and/or values.  In the
         other case, where the client requests a value of 'true', it is
         expected that the Printer support this type of printing since the
         Printer is already indicating functional support corresponding to all
         advertised supported attributes and values.

         Since a client can always query a Printer to find out exactly what is
         and is not supported, "ipp-attribute-fidelity" set to 'false' is
         useful when:

           1) The End-User uses a command line interface to request attributes
              that might not be supported.




         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 120]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           2) In a GUI context, if the End User expects the job might be moved
              to another printer and prefers a sub-optimal result to nothing at
              all.
           3) The End User just wants something reasonable in lieu of nothing
              at all.


         15.2 Page Description Language (PDL) Override

         If there is a conflict between the value of an IPP Job Template
         attribute and a corresponding instruction in the document data, the
         value of the IPP attribute SHOULD take precedence over the document
         instruction.  Consider the case where a previously formatted file of
         document data is sent to an IPP Printer.  In this case, if the client
         supplies any attributes at job submission time, the client desires
         that those attributes override the embedded instructions.  Consider
         the case were a previously formatted document has embedded in it
         commands to load 'iso-a4' media.  However, the document is passed to
         an end user that only has access to a printer with 'na-letter' media
         loaded.  That end user most likely wants to submit that document to an
         that IPP Printer with the "media" Job Template attribute set to 'na-
         letter'.  The job submission attribute should take precedence over the
         embedded PDL instruction.  However, until companies that supply
         document data interpreters allow a way for external IPP attributes to
         take precedence over embedded job production instructions, a Printer
         might not be able to support the semantics that IPP attributes
         override the embedded instructions.

         The IPP model accounts for this situation by introducing a "pdl-
         override-supported" attribute.

         This MANDATORY attribute takes on the following values:

           - 'attempted': This value indicates that the Printer attempts to
              make sure that IPP attribute values take precedence over embedded
              instructions in the document data, however there is no guarantee.
           - 'not-attempted': This value indicates that the Printer makes not
              attempt to ensure that IPP attribute values take precedence over
              embedded instructions in the document data.

         At job processing time, an implementation that supports the value of
         'attempted' might try to do one of several different actions:

           1) generate an output device specific command sequence to realize
              the feature represented by the IPP attribute value
           2) parse the document data itself and replace the conflicting
              embedded instruction with a new embedded instruction that matches
              the intent of the IPP attribute value


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 121]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


           3) indicate to the Printer that external supplied attributes take
              precedence over embedded instructions and then pass the external
              IPP attribute values to the document data interpreter
           4) anything else that allows for the semantics that IPP attributes
              override embedded document data instructions.

         Since 'attempted' does not offer any type of guarantee, even though a
         given implementation might not do a very "good" job of attempting to
         ensure that IPP attributes take a higher precedence over instructions
         embedded in the document data, it would still be a conforming
         implementation.

         Note:  The "ipp-attribute-fidelity" attribute applies to the Printer's
         ability to either accept or reject other unsupported attributes.  In
         other words, if "ipp-attribute-fidelity" is set to 'true', a Job is
         accepted if and only if the client supplied attributes and values are
         supported by the Printer.  Whether these attributes actually affect
         the processing of the Job depends on the ability of the Printer to
         override the instructions embedded in the document data with the
         semantics of the IPP attributes.  If the document data attributes can
         be overridden ("pdl-override-supported" set to 'attempted'), the
         Printer makes an attempt to use the IPP attributes when processing the
         Job. If the document data attributes can not be overridden ("pdl-
         override-supported" set to 'not-attempted'), the Printer makes no
         attempt to use the IPP attributes when processing the Job, and hence,
         the IPP attributes may fail to affect the Job processing and output in
         any manner whatsoever.


         15.3 Suggested Operation Processing Algorithm

         When a Printer receives a create request, the Printer either accepts
         or rejects the request. The Printer accepts the create request and
         creates a Job object if it is able to accept all Job Template and
         Document attributes in the request.  The Printer rejects the request
         and does not create a Job object if the Printer rejects any Job
         Template or Document attribute in the request.  In order to determine
         whether or not to accept or reject the request, the Printer SHOULD use
         the following algorithm:

           1. The implementation checks to see if the operation is supported.
              If not, the Printer rejects the request and sets the appropriate
              status code in the response.

           2. The implementation checks to see if the requested major version
              number is supported. If not, the Printer rejects the request and
              sets the appropriate status code in the response.  Differences in
              the minor version number requested versus what is supported is OK


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 122]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              if  a.) the requested version number has the same Major version
              number and the minor version number is higher than supported by
              the Printer object, and b.) any attributes that are not known to
              the recipient of the operation can be ignored (i.e., if the "ipp-
              attribute-fidelity" attribute has the value 'false'.)

           3. The implementation checks to see if the client supplied an "ipp-
              attribute-fidelity" attribute.  If the attribute is missing (not
              supplied by the client), the Printer assumes that the value is
              'false'.

           4.  The Printer loops through all other attributes, checking to see
              if the requested values are supported (e.g., the value of "foo"
              in the request is one of the values in the Printer's "foo-
              supported" attribute).  If the attribute or its value is
              unsupported, the Printer flags it as unsupported.

           5. Once all attributes have been checked individually, the Printer
              checks for any inconsistent values among all the supported
              values.  For example a Printer might be able to staple and to
              print on transparencies, however due to physical stapling
              limitations, the Printer might not be able to staple
              transparencies.  Any inconsistent values are flagged as
              unsupported.

           6.  Once all attributes have been checked and validated, if "ipp-
              attribute-fidelity" is set to true and there are any attributes
              flagged as unsupported, the Printer rejects the request and
              returns all unsupported attributes and values in the response and
              sets the appropriate status code.

           7. If "ipp-attribute-fidelity" is set to 'false' (or it was not
              supplied by the client) and there are any attributes that are
              flagged as unsupported, the Printer, chooses to either ignore the
              unsupported attributes or change the requested value to some
              supported value.  If, for some reason, it is not possible for the
              implementation to ignore or substitute values and is unable to
              "just print the job", the Printer is still able to reject the
              request and return all unsupported attributes and values in the
              response.  In doing so, the Printer sets the appropriate status
              code.

           8a. If the requested operation is the Validate-Job operation and a
              "document-uri" attribute is supplied in the request, then the
              "document-uri" is validated as specified in section 3.2.3,
              Validate-Job Operation. If the Printer is able to accept the
              request and the validation of any "document-uri" succeeded, then
              the Printer object returns the status code "successful-ok".


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 123]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              Otherwise, it returns a set of unsupported attributes and/or the
              appropriate error status code. In either case the processing of
              the operation is completed and no objects are created.

           8b. The operation is a create request. If the Printer is able to
              accept the create request (either as is or  the "ipp-attribute-
              fidelity" attribute is set to 'false' and some of the requested
              attributes can be ignored or have their values substituted), then
              the Printer creates a new Job object . The Job object is
              populated with those Job Template attributes from the create
              request that the Printer object can honor. If the "ipp-attribute-
              fidelity" attribute is set to 'true', the Job Template attributes
              associated with the new Job object are necessarily all the Job
              Template attributes in the accepted create request.  If the "ipp-
              attribute-fidelity" attribute is set to 'false', the Job Template
              attributes associated with the new Job object are all the client
              supplied Job Template attributes that are not ignored and/or have
              no value substitution. Thus, some of the requested Job Template
              attributes may not appear in the Job object because the IPP
              processor was not able to honor those attributes. The attributes
              that were honored are persistently stored with the Job object for
              that Job.  A Get-Attributes operation on that Job object will
              return only those attributes that a persistently stored with the
              Job object.

           Note: All Job Template attributes that are persistently stored with
              the Job object are intended to be "override values"; that is,
              they that take precedence over whatever other embedded
              instructions might be in the document data itself.  However, it
              is not possible for all implementations to realize the semantics
              of "override". End users may query the Printer's "pdl-override"
              attribute to determine if the Printer either attempts or does not
              attempt to override document data instructions with IPP
              attributes.

           9. There are some cases, where a Printer supports a Job Template
              attribute and has an associated default value set for that
              attribute. In the case where a client does not supply the
              corresponding attribute, the Printer does not use its default
              values to populate Job attributes when creating the new Job
              object; only Job Template attributes actually in the create
              request are used to populate the Job object. The Printer's
              default values are only used at Job processing time if no other
              IPP attribute or instruction embedded in the document data is
              present.

           Note: If the default values associated with un-requested Job
              Template attributes were used to populate the Job object, then


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 124]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              these values would become "override values" rather than defaults.
              If the Printer supports the 'attempted' value of the "pdl-
              override" attribute, then these override values could replace
              values specified within the document data. This is not the intent
              of the default value mechanism. A default value for an attrbute
              SHALL be used only if the create request did not specify that
              attribute (or it was ignored when allowed by "ipp-attribute-
              fidelity" being 'false') and no value was provided within the
              content of the document data.

           10. If the client does not supply a value for some Job Template
              attribute, and the Printer does not support that attribute, as
              far as IPP is concerned, the result of processing that Job (with
              respect to the missing attribute) is undefined.

           11. Once the Job object has been created, the Printer responds back
              to the client with a successful response including Job status
              attributes that indicate the initial state of the Job ('pending',
              'processing', etc.).  The Printer uses its own configuration and
              implementation specific algorithms for scheduling the Job in the
              correct processing order.  Once the Printer begins processing the
              Job, the Printer changes the Job's state to 'processing'. If the
              Printer supports PDL override (the "pdl-override" attribute set
              to 'attempted'), the implementation does its best to see that IPP
              attributes take precedence over embedded instructions in the
              document data.

           12. The implementation of the Printer object continues to process
              the Job until it can move the Job into the 'completed' state.  If
              an Cancel-Job operation is received, the implementation
              eventually moves the Job into the 'cancelled' state.  If the
              system encounters errors during processing that do not allow it
              to progress the Job into a completed state, the implementation
              halts all processing, cleans up any resources, and moves the Job
              into the 'aborted' state.

           13. Once the Job moves to the 'completed', 'aborted', or 'canceled'
              state, it is an implementation decision as to when to destroy the
              Job object and release all associated resources.  Once the Job
              has been destroyed, the Printer would return either the "not-
              found" or "gone" status codes for operations directed at that
              Job.

         Some Printer implementations may support "ipp-attribute-fidelity" set
         to 'true' and "pdl-override" set to 'attempted' and yet still not be
         able to realize exactly what the client specifies in the create
         request.  This is due to legacy decisions and assumptions that have
         been made about the role of job instructions embedded within the


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 125]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         document data and external job instructions that accompany the
         document data and how to handle conflicts between such instructions.
         The inability to be 100% precise about how a given implementation will
         behave is also compounded by the fact that the two special attributes,
         "ipp-attribute-fidelity" and "pdl-override", apply to the whole job
         rather than specific values for each attribute. For example, some
         implementations may be able to override almost all Job Template
         attributes except for "number-up".


         15.4 Using Job Template Attributes During Document Processing.

         The Printer object uses some of the Job object's Job Template
         attributes during the processing of the document data associated with
         that job.  These include, but are not limited to, "orientation",
         "number-up", "sides", "media", and "copies".  The processing of each
         document in a Job Object SHALL follow the algorithm below. This
         algorithm is intended only to identify when and how attributes are to
         be used in processing document data and any algorithm that
         accomplishes the same effect can be used to implement this
         specification.

           1. Using the "document-format" attribute or some form of format
              detection algorithm (if the value of "document-format" is not
              specific enough), determine whether or not the document data has
              already been formatted for printing. If the document data has
              been formatted, then goto step 2. Otherwise, the document data
              SHALL be formatted. The formatting algorithm is implementation
              defined and is not specified by this specification. The
              formatting of the document data uses the "orientation" attribute
              to determine how the formatted print data is place on a print-
              stream page, see section 4.2.15 for the details.

           2. The document data is in the form of a print-stream in a known
              media type. The "page-range" attribute is used to select, as
              specified in section 4.2.14, a sub-sequence of the pages in the
              print-stream that are to be processed and images.

           3. The input to this step is sequence of print-stream pages. This
              step is controlled by the "number-up" attribute. If value of
              "number-up" is N, then during the processing of the print-stream
              pages, each N print-stream pages are positioned, as specified in
              section 4.2.8, to create a single imposed page. If a given
              Document Object does not have N more print-stream pages, then the
              completion of the imposed page is controlled by the "multiple-
              document-handling" attribute as described in section 4.2.6; when
              the value of this attribute is 'separate-documents-collated-



         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 126]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


              copies', the document data from subsequent Document Objects is
              used to complete the imposed page.

           The size(scaling), position(translation) and rotation of the print-
              stream pages on the imposed page is implementation defined. Note
              that during this process the print-stream pages may be rendered
              to a form suitable for placing on the imposed page; this
              rendering is controlled by the values of the "printer-resolution"
              and "print-quality" attributes as described in sections 4.2.10
              and 4.2.11. In the case N=1, the imposed pages are nearly the
              same as the print-stream pages; the differences would only be in
              the size, position and rotation of the print-stream page and/or
              any decoration, such as a frame to the page, that is added by the
              implementation.

           4. The collection of imposed pages is placed, in sequence, onto
              sides of the print media. This placement is controlled by the
              "sides" attribute and the orientation of the page, as described
              in section 4.2.9. The orientation of the page is defined by the
              orientation of the imposed pages; for example, if "number-up"
              equals 2, then, typically, two portrait print-stream pages become
              one landscape imposed page. Note that the placement of imposed
              pages onto media instances is also controlled by the "multiple-
              document-handling" attribute as described in section 4.2.6.

           5. The "copies" and "multiple-document-handling" attributes are
              used to determine how many copies of each media instance are
              created and in what order. See sections 4.2.6 and 4.2.13 for the
              details.

           6. When the correct number of copies are created, the media
              instances are finished according to the values of the
              "finishings" attribute as described in 4.2.12. Note that
              sometimes finishing operations may require manual intervention to
              perform the finishing operations on the copies, especially
              uncollated copies. This specification allows any or all of the
              processing steps to be performed automatically or manually at the
              discretion of the Printer object.

         16. APPENDIX E: Generic Directory Schema

         This section defines a generic schema for an entry in a directory
         service.  A directory service is a means by which service users can
         locate service providers.  In IPP environments, this means that IPP
         Printers can be registered (either automatically or with the help of
         an administrator) as entries of type printer in the directory.  IPP
         clients can search or browse for entries of type printer.  Clients use
         the directory service to find entries based on naming, organizational


         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 127]
                                 Expires April 14, 1998



         INTERNET-DRAFT       IPP/1.0: Model and Semantics    October 14, 1997


         contexts, or filtered searches on attribute values of entries.  For
         example, a client can find all printers in the "Local Department"
         context. Authentication and authorization are also often part of a
         directory service so that an administrator can place limits on end
         users so that they are only allowed to find entries to which they have
         certain access rights.  IPP itself does not require any specific
         directory service protocol or provider.

         The generic schema is a subset of IPP Printer attributes (section
         4.4).  These attributes are identified as either MANDATORY or OPTIONAL
         for the entry itself.  This conformance labeling is NOT the same
         conformance labeling applied to the attributes of IPP Printers
         themselves.  MANDATORY attributes MUST be associated with each
         directory entry.  OPTIONAL attributes SHOULD be associated with the
         directory entry (if known or supported).  In addition, all directory
         entry attributes SHOULD reflect the current attribute values for the
         corresponding Printer object.

         In order to bridge between the directory service protocol and IPP, one
         of the MANDATORY attributes is the "printer-uri" attribute.  The IPP
         client addresses an IPP Printer using its URI and so the directory
         entry's "printer-uri" becomes the link between the directory entry and
         the corresponding IPP Printer.

         The following attributes define the generic schema for directory
         entries of type printer:

           printer-uri                      MANDATORY      Section 4.4.1
           printer-tls-uri                  OPTIONAL       Section
           printer-name                     OPTIONAL       Section 4.4.2
           printer-location                 OPTIONAL       Section 4.4.3
           printer-info                     OPTIONAL       Section 4.4.4
           printer-more-info                OPTIONAL       Section 4.4.5
           printer-make-and-model           OPTIONAL       Section 4.4.7
           security-mechanisms-supported    MANDATORY      Section 4.4.23
           media-supported                  OPTIONAL       Section 4.2.5
           number-up-supported              OPTIONAL       Section 4.2.6
           sides-supported                  OPTIONAL       Section 4.2.7
           printer-resolution-supported     OPTIONAL       Section 4.2.8
           print-quality-supported          OPTIONAL       Section 4.2.9
           color-supported                  OPTIONAL       Section 4.4.20
           finishings-supported             OPTIONAL       Section 4.2.10
           document-formats-supported       OPTAIONL       Section 4.2.14







         deBry, Hastings, Herriot, Isaacson, Powell                 [Page 128]
                                 Expires April 14, 1998

