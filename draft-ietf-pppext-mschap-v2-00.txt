

Network Working Group                                            G. Zorn
Internet-Draft                                     Microsoft Corporation
Category: Informational                                   September 1998
<draft-ietf-pppext-mschap-v2-00.txt>

                Microsoft PPP CHAP Extensions, Version 2


1.  Status of this Memo

This  document  is an Internet-Draft.  Internet-Drafts are working docu-
ments of the Internet Engineering Task Force (IETF), its areas, and  its
working groups.  Note that other groups may also distribute working doc-
uments as Internet-Drafts.

Internet-Drafts are draft documents valid for a maximum  of  six  months
and  may  be  updated,  replaced, or obsoleted by other documents at any
time.  It is inappropriate to use Internet-Drafts as reference  material
or to cite them other than as ``work in progress''.

To  learn  the  current  status  of any Internet-Draft, please check the
``1id-abstracts.txt'' listing contained in  the  Internet-Drafts  Shadow
Directories  on ftp.ietf.org (US East Coast), nic.nordu.net (Europe),
ftp.isi.edu (US West Coast), or munnari.oz.au (Pacific Rim).

This memo provides information for the Internet  community.   This  memo
does  not specify an Internet standard of any kind.  The distribution of
this memo is  unlimited.   It  is  filed  as  <draft-ietf-pppext-mschap-
v2-00.txt>  and expires March 23, 1999.  Please send comments to the PPP
Extensions Working Group mailing list  (ietf-ppp@merit.edu)  or  to  the
author (glennz@microsoft.com).


2.  Abstract

The  Point-to-Point  Protocol  (PPP)  [1] provides a standard method for
transporting multi-protocol datagrams over  point-to-point  links.   PPP
defines an extensible Link Control Protocol and a family of Network Con-
trol Protocols (NCPs) for establishing and  configuring  different  net-
work-layer protocols.

This document describes version two of Microsoft's PPP CHAP dialect (MS-
CHAP-V2).  MS-CHAP-V2 is similar to, but incompatible with, MS-CHAP ver-
sion  one (MS-CHAP-V1, described in [9]).  In particular, certain proto-
col fields have been deleted or reused but with different semantics.  In
addition, MS-CHAP-V2 features mutual authentication.

The  algorithms  used  in  the generation of various MS-CHAP-V2 protocol



Zorn                                                            [Page 1]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


fields are described in an appendix.


3.  Introduction

Where possible, MS-CHAP-V2 is consistent with both MS-CHAP-V1 and  stan-
dard  CHAP.   Briefly, the differences between MS-CHAP-V2 and MS-CHAP-V1
are:

   * MS-CHAP-V2 is enabled by negotiating CHAP Algorithm 0x81 in LCP
     option 3, Authentication Protocol.

   * MS-CHAP-V2 provides mutual authentication between peers by
     piggybacking a peer challenge on the Response packet and an
     authenticator reponse on the Success packet.

   * The calculation of the "Windows NT compatible challenge
     response" sub-field in the Response packet has been changed
     to include the peer challenge and the user name.

   * In MS-CHAP-V1, the "LAN Manager compatible challenge response"
     sub-field was always sent in the Response packet.  This field
     has been replaced in MS-CHAP-V2 by the Peer-Challenge field.

   * The format of the Message field in the Failure packet has
     been changed.

   * The Change Password (version 1) and Change Password (version 2)
     packets are no longer supported. They have been replaced with a
     single Change-Password packet.


4.  Specification of Requirements

In this document, the key words "MAY", "MUST,  "MUST  NOT",  "optional",
"recommended",  "SHOULD",  and  "SHOULD  NOT"  are  to be interpreted as
described in [2].


5.  LCP Configuration

The LCP configuration for MS-CHAP-V2 is identical to that  for  standard
CHAP,  except  that  the Algorithm field has value 0x81, rather than the
MD5 value 0x05.  PPP implementations which do  not  support  MS-CHAP-V2,
but  correctly  implement LCP Config-Rej, should have no problem dealing
with this non-standard option.





Zorn                                                            [Page 2]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


6.  Challenge Packet

The MS-CHAP-V2 Challenge packet is identical in format to  the  standard
CHAP Challenge packet.

MS-CHAP-V2 authenticators send an 16-octet challenge Value field.  Peers
need not duplicate Microsoft's  algorithm  for  selecting  the  16-octet
value,  but  the  standard  guidelines  on  randomness [1,2,7] SHOULD be
observed.

Microsoft authenticators do not currently  provide  information  in  the
Name field.  This may change in the future.


7.  Response Packet

The  MS-CHAP-V2  Response  packet is identical in format to the standard
CHAP Response packet.  However, the Value field is sub-formatted differ-
ently as follows:

   24 octets: Peer-Challenge
   24 octets: NT-Response
    1 octet : Flags

The  Peer-Challenge  field  is  a  16-octet  random number.  As the name
implies, it is generated by the peer and is used in the  calculation  of
the  NT-Response  field,  below.   Peers  need not duplicate Microsoft's
algorithm for selecting the 16-octet value, but the standard  guidelines
on randomness [1,2,7] SHOULD be observed.

The  NT-Response  field is an encoded function of the password, the user
name, the contents of the Peer-Challenge field and  the  received  chal-
lenge  as  output  by the routine GenerateNTResponse() (see section A.1,
below).  The Windows NT password is a string of 0 to (theoretically) 256
case-sensitive  Unicode  [8] characters.  Current versions of Windows NT
limit passwords to 14 characters, mainly for compatibility reasons; this
may  change  in  the  future.  When computing the NT-Response field con-
tents, only the user name is used, without  any  associated  Windows  NT
domain  name.   This  is  true regardless of whether a Windows NT domain
name is present in the Name field (see below).

The Flag field is reserved for future use and MUST be zero.

The Name field is a string of 0 to  (theoretically)  256  case-sensitive
ASCII  characters  which  identifies  the peer's user account name.  The
Windows NT  domain  name  may  prefix  the  user's  account  name  (e.g.
"BIGCO\johndoe" where "BIGCO" is a Windows NT domain containing the user
account "johndoe").  If a domain is not provided, the  backslash  should



Zorn                                                            [Page 3]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


also be omitted, (e.g. "johndoe").


8.  Success Packet

The  Success  packet is identical in format to the standard CHAP Success
packet.  However, the Message field contains  a  42-octet  authenticator
response string of the form

   "S=<auth_string>"

where <auth_string> is a 20 octet number encoded in ASCII as 40 hexadec-
imal digits.  The hexadecimal digits A-F (if present) MUST be uppercase.
This number is derived from the challenge from the Challenge packet, the
Peer-Challenge and NT-Response fields from the Response packet, and  the
peer  password  as output by the routine GenerateAuthenticatorResponse()
(see section A.6, below).   The  authenticating  peer  MUST  verify  the
authenticator  response  when  a Success packet is received.  The method
for verifying the authenticator is described in section A.7, below.   If
the authenticator response is either missing or incorrect, the peer MUST
end the session.


9.  Failure Packet

The Failure packet is identical in format to the standard  CHAP  Failure
packet.   There  is, however, formatted text stored in the Message field
which, contrary to the standard CHAP rules, does affect the operation of
the protocol.  The Message field format is:

      "E=eeeeeeeeee R=r C=cccccccccccccccccccccccccccccccc V=vvvvvvvvvv"

   where

      The  "eeeeeeeeee"  is  the ASCII representation of a decimal error
      code (need not be 10 digits) corresponding to one of those  listed
      below,  though  implementations should deal with codes not on this
      list gracefully.

         646 ERROR_RESTRICTED_LOGON_HOURS
         647 ERROR_ACCT_DISABLED
         648 ERROR_PASSWD_EXPIRED
         649 ERROR_NO_DIALIN_PERMISSION
         691 ERROR_AUTHENTICATION_FAILURE
         709 ERROR_CHANGING_PASSWORD

      The "r" is an ASCII flag set to '1' if a retry is allowed, and '0'
      if  not.  When the authenticator sets this flag to '1' it disables



Zorn                                                            [Page 4]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


      short timeouts, expecting the peer to prompt the user for new cre-
      dentials and resubmit the response.

      The "cccccccccccccccccccccccccccccccc" is the ASCII representation
      of a hexadecimal challenge value.  This field MUST be  exactly  32
      octets long and MUST be present.

      The  "vvvvvvvvvv" is the ASCII representation of a decimal version
      code (need not be 10 digits) indicating the password changing pro-
      tocol version supported on the server.  For MS-CHAP-V2, this value
      SHOULD always be 3.

Implementations should accept but ignore additional  text  they  do  not
recognize.


10.  Change-Password Packet

The  Change-Password  packet  does not appear in either standard CHAP or
MS-CHAP-V1.  It allows the peer to change the password  on  the  account
specified  in the preceding Response packet.  The Change-Password packet
should be sent only if the  authenticator  reports  ERROR_PASSWD_EXPIRED
(E=648) in the Message field of the Failure packet.

This packet type is supported by recent versions of Windows NT 4.0, Win-
dows 95 and Windows 98.  It is not supported by Windows NT 3.5,  Windows
NT 3.51, or early versions of Windows NT 4.0, Windows 95 and Windows 98.

   The format of this packet is as follows:

        1 octet  : Code
        1 octet  : Identifier
        2 octets : Length
      516 octets : Encrypted-Password
       16 octets : Encrypted-Hash
       24 octets : Peer-Challenge
       24 octets : NT-Response
        2-octet  : Flags

   Code
      7

   Identifier
      The Identifier field is one octet and aids  in  matching  requests
      and  replies.  The value is the Identifier of the received Failure
      packet to which this packet responds plus 1.

   Length



Zorn                                                            [Page 5]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


      586

   Encrypted-Password
      This field contains the PWBLOCK form of the new Windows  NT  pass-
      word encrypted with the old Windows NT password hash, as output by
      the NewPasswordEncryptedWithOldNtPasswordHash() routine (see  sec-
      tion A.8, below).

   Encrypted-Hash
      This  field  contains  the  old Windows NT password hash encrypted
      with the new Windows NT password hash, as output by the OldNtPass-
      wordHashEncryptedWithNewNtPasswordHash()   routine   (see  section
      A.11, below).

   Peer-Challenge
      A 16-octet random quantity, as described in  the  Response  packet
      description.

   NT-Response
      The  NT-Response  field  (as  described  in  the  Response  packet
      description), but calculated on the new password and the challenge
      received in the Failure packet.

   Flags
      This  field  is two octets in length.  It is a bit field of option
      flags where 0 is the least significant bit of the 16-bit quantity.
      The format of this field is illustrated in the following diagram:

                    1
          5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         |                               |
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

         Bits 0-15
            Reserved, always clear (0).


11.  Security Considerations

As  an  implementation detail, the authenticator SHOULD limit the number
of password  retries  allowed  to  make  brute-force  password  guessing
attacks more difficult.








Zorn                                                            [Page 6]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


12.  References

[1]  Simpson, W., "The Point-to-Point Protocol (PPP)", STD 51, RFC 1661,
     July 1994

[2]  Simpson,  W.,  "PPP  Challenge  Handshake  Authentication  Protocol
     (CHAP)", RFC 1994, August 1996

[3]  Bradner,  S.,  "Key  words  for use in RFCs to Indicate Requirement
     Levels", BCP 14, RFC 2119, March 1997

[4]  "Data Encryption Standard (DES)",  Federal  Information  Processing
     Standard  Publication  46-2,  National  Institute  of Standards and
     Technology, December 1993

[5]  Rivest, R., "MD4 Message Digest Algorithm", RFC 1320, April 1992.

[6]  RC4 is a proprietary encryption algorithm available  under  license
     from RSA Data Security Inc.  For licensing information, contact:
        RSA Data Security, Inc.
        100 Marine Parkway
        Redwood City, CA 94065-1031

[7]  Eastlake,  D.,  et. al., "Randomness Recomnendations for Security",
     RFC 1750, December 1994

[8]  "The Unicode Standard, Version 2.0", The Unicode Consortium,  Addi-
     son-Wesley, 1996. ISBN 0-201-48345-9.

[9]  Zorn, G. and Cobb, S., "Microsoft PPP CHAP Extensions", draft-ietf-
     pppext-mschap-00.txt (work in progress), March 1998

[10] "DES Modes of Operation", Federal Information Processing  Standards
     Publication  81,  National  Institute  of Standards and Technology,
     December 1980

[11] "Secure Hash Standard", Federal  Information  Processing  Standards
     Publication  180-1, National Institute of Standards and Technology,
     April 1995


13.  Acknowledgements

Thanks   (in   no   particular   order)   to   Bruce   Johnson   (bjohn-
son@microsoft.com),   Tony   Bell   (tonybe@microsoft.com),  Paul  Leach
(paulle@microsoft.com, Terence Spies (terences@microsoft.com), Dan Simon
(dansimon@microsoft.com),  Narendra Gidwani (nareng@microsoft.com), Gur-
deep    Singh     Pall     (gurdeep@microsoft.com),     Jody     Terrill



Zorn                                                            [Page 7]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


(jodyt@extendsys.com)  and Joe Davies (josephd@microsoft.com) for useful
suggestions and feedback.


14.  Chair's Address

The PPP Extensions Working Group can be contacted via the current chair:

   Karl Fox
   Ascend Communications
   3518 Riverside Drive
   Suite 101
   Columbus, OH 43221

   Phone: +1 614 326 6841
   Email: karl@ascend.com


15.  Author's Address

Questions about this memo can also be directed to:

   Glen Zorn
   Microsoft Corporation
   One Microsoft Way
   Redmond, Washington 98052

   Phone: +1 425 703 1559
   FAX:   +1 425 936 7329
   EMail: glennz@microsoft.com


16.  Expiration Date

This  memo  is filed as <draft-ietf-pppext-mschap-v2-00.txt> and expires
on March 23, 1999.


Appendix A - Pseudocode

The routines mentioned in the text are described in pseudocode below.


A.1 GenerateNTResponse()

   GenerateNTResponse(
   IN  16-octet              AuthenticatorChallenge,
   IN  16-octet              PeerChallenge,



Zorn                                                            [Page 8]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


   IN  0-to-256-char         UserName,
   IN  0-to-256-unicode-char Password,
   OUT 24-octet              Response )
   {
      8-octet  Challenge
      16-octet PasswordHash

      ChallengeHash( PeerChallenge, AuthenticatorChallenge, UserName,
                     giving Challenge)

      NtPasswordHash( Password, giving PasswordHash )
      ChallengeResponse( Challenge, PasswordHash, giving Response )
   }


A.2 ChallengeHash()

   ChallengeHash(
   IN 16-octet               PeerChallenge,
   IN 16-octet               AuthenticatorChallenge,
   IN  0-to-256-char         UserName,
   OUT 8-octet               Challenge
   {

      /*
       * SHAInit(), SHAUpdate() and SHAFinal() functions are an
       * implementation of Secure Hash Algorithm (SHA-1) [11]. These are
       * available in public domain or can be licensed from
       * RSA Data Security, Inc.
       */

      SHAInit(Context)
      SHAUpdate(Context, PeerChallenge, 16)
      SHAUpdate(Context, AuthenticatorChallenge, 16)

      /*
       * Only the user name (as presented by the peer and
       * excluding any prepended domain name)
       * is used as input to SHAUpdate().
       */

      SHAUpdate(Context, UserName, strlen(Username))
      SHAFinal(Context, Digest)
      memcpy(Challenge, Digest, 8)
   }

A.3 NtPasswordHash()




Zorn                                                            [Page 9]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


   NtPasswordHash(
   IN  0-to-256-unicode-char Password,
   OUT 16-octet              PasswordHash )
   {
      /*
       * Use the MD4 algorithm [5] to irreversibly hash Password
       * into PasswordHash.  Only the password is hashed without
       * including any terminating 0.
       */
   }


A.4 ChallengeResponse()

   ChallengeResponse(
   IN  8-octet  Challenge,
   IN  16-octet PasswordHash,
   OUT 24-octet Response )
   {
      Set ZPasswordHash to PasswordHash zero-padded to 21 octets

      DesEncrypt( Challenge,
                  1st 7-octets of ZPasswordHash,
                  giving 1st 8-octets of Response )

      DesEncrypt( Challenge,
                  2nd 7-octets of ZPasswordHash,
                  giving 2nd 8-octets of Response )

      DesEncrypt( Challenge,
                  3rd 7-octets of ZPasswordHash,
                  giving 3rd 8-octets of Response )
   }


A.5 DesEncrypt()

   DesEncrypt(
   IN  8-octet Clear,
   IN  7-octet Key,
   OUT 8-octet Cypher )
   {
      /*
       * Use the DES encryption algorithm [4] in ECB mode [10]
       * to encrypt Clear into Cypher such that Cypher can
       * only be decrypted back to Clear by providing Key.
       * Note that the DES algorithm takes as input a 64-bit
       * stream where the 8th, 16th, 24th, etc.  bits are



Zorn                                                           [Page 10]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


       * parity bits ignored by the encrypting algorithm.
       * Unless you write your own DES to accept 56-bit input
       * without parity, you will need to insert the parity bits
       * yourself.
       */
   }


A.6 GenerateAuthenticatorResponse()

   GenerateAuthenticatorResponse(
   IN  0-to-256-unicode-char Password,
   IN  24-octet              NT-Response,
   IN  16-octet              PeerChallenge,
   IN  16-octet              AuthenticatorChallenge,
   IN  0-to-256-unicode-char UserName,
   OUT 42-octet              AuthenticatorResponse )
   {
      16-octet              PasswordHash
      16-octet              PasswordHashHash
      8-octet               Challenge

      /*
       * "Magic" constants used in response generation
       */

      Magic1[39] =
         {0x4D, 0x61, 0x67, 0x69, 0x63, 0x20, 0x73, 0x65, 0x72, 0x76,
          0x65, 0x72, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x6C, 0x69, 0x65,
          0x6E, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6E, 0x69, 0x6E, 0x67,
          0x20, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x74};

      Magic2[41] =
         {0x50, 0x61, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x6D, 0x61, 0x6B,
          0x65, 0x20, 0x69, 0x74, 0x20, 0x64, 0x6F, 0x20, 0x6D, 0x6F,
          0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6E, 0x20, 0x6F, 0x6E,
          0x65, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F,
          0x6E};

      /*
       * Hash the password with MD4
       */

      NtPasswordHash( Password, giving PasswordHash )

      /*
       * Now hash the hash
       */



Zorn                                                           [Page 11]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


      HashNtPasswordHash( PasswordHash, giving PasswordHashHash)

      SHAInit(Context)
      SHAUpdate(Context, PasswordHashHash, 16)
      SHAUpdate(Context, NTResponse, 24)
      SHAUpdate(Context, Magic1, 45)
      SHAFinal(Context, Digest)

      ChallengeHash( PeerChallenge, AuthenticatorChallenge, UserName,
                     giving Challenge)

      SHAInit(Context)
      SHAUpdate(Context, Digest, 20)
      SHAUpdate(Context, Challenge, 8)
      SHAUpdate(Context, Magic2, 48)
      SHAFinal(Context, Digest)

      /*
       * Encode the value of 'Digest' as "S=" followed by
       * 40 ASCII hexadecimal digits and return it in
       * AuthenticatorResponse.
       * For example,
       *   "S=0123456789ABCDEF0123456789ABCDEF01234567"
       */

   }


A.7 CheckAuthenticatorResponse()

   CheckAuthenticatorResponse(
   IN  0-to-256-unicode-char Password,
   IN  24-octet              NtResponse,
   IN  16-octet              PeerChallenge,
   IN  16-octet              AuthenticatorChallenge,
   IN  0-to-256-unicode-char UserName,
   IN  42-octet              ReceivedResponse
   OUT Boolean               ResponseOK )
   {

      20-octet MyResponse

      set ResponseOK = FALSE
      GenerateAuthenticatorResponse( Password, NtResponse, PeerChallenge,
                                     AuthenticatorChallenge, UserName,
                                     giving MyResponse)

      if (MyResponse = ReceivedResponse) then set ResponseOK = TRUE



Zorn                                                           [Page 12]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


      return ResponseOK
   }


A.8 NewPasswordEncryptedWithOldNtPasswordHash()

   datatype-PWBLOCK
   {
      256-unicode-char Password
      4-octets         PasswordLength
   }

   NewPasswordEncryptedWithOldNtPasswordHash(
   IN  0-to-256-unicode-char NewPassword,
   IN  0-to-256-unicode-char OldPassword,
   OUT datatype-PWBLOCK      EncryptedPwBlock )
   {
      NtPasswordHash( OldPassword, giving PasswordHash )

      EncryptPwBlockWithPasswordHash( NewPassword,
                                      PasswordHash,
                                      giving EncryptedPwBlock )
   }


A.9 EncryptPwBlockWithPasswordHash()

   EncryptPwBlockWithPasswordHash(
   IN  0-to-256-unicode-char Password,
   IN  16-octet              PasswordHash,
   OUT datatype-PWBLOCK      PwBlock )
   {

      Fill ClearPwBlock with random octet values
      PwSize = lstrlenW( Password ) * sizeof( unicode-char )
      PwOffset = sizeof( ClearPwBlock.Password ) - PwSize
      Move PwSize octets to (ClearPwBlock.Password + PwOffset ) from Password
      ClearPwBlock.PasswordLength = PwSize
      Rc4Encrypt( ClearPwBlock,
                  sizeof( ClearPwBlock ),
                  PasswordHash,
                  sizeof( PasswordHash ),
                  giving PwBlock )
   }


A.10 Rc4Encrypt()




Zorn                                                           [Page 13]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


   Rc4Encrypt(
   IN  x-octet Clear,
   IN  integer ClearLength,
   IN  y-octet Key,
   IN  integer KeyLength,
   OUT x-octet Cypher )
   {
      /*
       * Use the RC4 encryption algorithm [6] to encrypt Clear of
       * length ClearLength octets into a Cypher of the same length
       * such that the Cypher can only be decrypted back to Clear
       * by providing a Key of length KeyLength octets.
       */
   }


A.11 OldNtPasswordHashEncryptedWithNewNtPasswordHash()

   OldNtPasswordHashEncryptedWithNewNtPasswordHash(
   IN  0-to-256-unicode-char NewPassword,
   IN  0-to-256-unicode-char OldPassword,
   OUT 16-octet              EncryptedPasswordHash )
   {
      NtPasswordHash( OldPassword, giving OldPasswordHash )
      NtPasswordHash( NewPassword, giving NewPasswordHash )
      NtPasswordHashEncryptedWithBlock( OldPasswordHash,
                                        NewPasswordHash,
                                        giving EncryptedPasswordHash )
   }


A.12 NtPasswordHashEncryptedWithBlock()

   NtPasswordHashEncryptedWithBlock(
   IN  16-octet PasswordHash,
   IN  16-octet Block,
   OUT 16-octet Cypher )
   {
      DesEncrypt( 1st 8-octets PasswordHash,
                  1st 7-octets Block,
                  giving 1st 8-octets Cypher )

      DesEncrypt( 2nd 8-octets PasswordHash,
                  2nd 7-octets Block,
                  giving 2nd 8-octets Cypher )
   }

Appendix B - Examples



Zorn                                                           [Page 14]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


B.1 Negotiation Examples

Here are some examples of typical negotiations.  The peer is on the left
and the authenticator is on the right.

The  packet  sequence  ID  is  incremented  on each authentication retry
Response and on the change  password  response.   All  cases  where  the
packet sequence ID is updated are noted below.

Response  retry is never allowed after Change Password.  Change Password
may occur after Response retry.

B.1.1 Successful authentication

            <- Challenge
        Response ->
            <- Success


B.1.2 Failed authentication with no retry allowed

            <- Challenge
        Response ->
            <- Failure (E=691 R=0)


B.1.3 Successful authentication after retry

            <- Challenge
        Response ->
            <- Failure (E=691 R=1), disable short timeout
        Response (++ID) to challenge in failure message ->
            <- Success


B.1.4 Failed hack attack with 3 attempts allowed

            <- Challenge
        Response ->
            <- Failure (E=691 R=1), disable short timeout
        Response (++ID) to challenge in Failure message ->
            <- Failure (E=691 R=1), disable short timeout
        Response (++ID) to challenge in Failure message ->
            <- Failure (E=691 R=0)


B.1.5 Successful authentication with password change




Zorn                                                           [Page 15]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


            <- Challenge
        Response ->
            <- Failure (E=648 R=0 V=3), disable short timeout
        ChangePassword (++ID) to challenge in Failure message ->
            <- Success


B.1.6 Successful authentication with retry and password change

            <- Challenge
        Response ->
            <- Failure (E=691 R=1), disable short timeout
        Response (++ID) to first challenge+23 ->
            <- Failure (E=648 R=0 V=2), disable short timeout
        ChangePassword (++ID) to first challenge+23 ->
            <- Success


B.2 Hash Example

Intermediate values for user name "User" and password "clientPass".  All
numeric values are hexadecimal.

   0-to-256-char UserName:
   55 73 65 72

   0-to-256-unicode-char Password:
   63 00 6C 00 69 00 65 00 6E 00 74 00 50 00 61 00 73 00 73 00

   16-octet AuthenticatorChallenge:
   5B 5D 7C 7D 7B 3F 2F 3E 3C 2C 60 21 32 26 26 28

   16-octet PeerChallenge:
   21 40 23 24 25 5E 26 2A 28 29 5F 2B 3A 33 7C 7E

   8-octet Challenge:
   D0 2E 43 86 BC E9 12 26

   16-octet PasswordHash:
   44 EB BA 8D 53 12 B8 D6 11 47 44 11 F5 69 89 AE

   24 octet NT-Response:
   82 30 9E CD 8D 70 8B 5E A0 8F AA 39 81 CD 83 54 42 33 11 4A 3D 85 D6 DF

   16-octet PasswordHashHash:
   41 C0 0C 58 4B D2 D9 1C 40 17 A2 A1 2F A5 9F 3F

   42-octet AuthenticatorResponse:



Zorn                                                           [Page 16]

INTERNET-DRAFT                 MS-CHAP-V2                      July 1998


   "S=407A5589115FD0D6209F510FE9C04566932CDA56"


B.3 Example of DES Key Generation

DES  uses  56-bit  keys,  expanded to 64 bits by the insertion of parity
bits.  After the parity of the key has been fixed, every eighth bit is a
parity bit and the number of bits that are set (1) in each octet is odd;
i.e., odd parity.  Note that many DES engines do not check parity,  how-
ever,  simply  stripping  the parity bits.  The following example illus-
trates the values resulting from the use of the password "MyPw" to  gen-
erate  a pair of DES keys (e.g., for use in the NtPasswordHashEncrypted-
WithBlock() described in Appendix A.12).

   0-to-256-unicode-char Password:
   4D 79 50 77

   16-octet PasswordHash:
   FC 15 6A F7 ED CD 6C 0E DD E3 33 7D 42 7F 4E AC

   First "raw" DES key (initial 7 octets of password hash):
   FC 15 6A F7 ED CD 6C

   First parity-corrected DES key (eight octets):
   FD 0B 5B 5E 7F 6E 34 D9

   Second "raw" DES key (second 7 octets of password hash)
   0E DD E3 33 7D 42 7F

   Second parity-corrected DES key (eight octets):
   0E 6E 79 67 37 EA 08 FE




















Zorn                                                           [Page 17]

