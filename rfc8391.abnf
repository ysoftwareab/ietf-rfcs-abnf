total = X[in];
KEY = PRF(SEED, ADRS);
BM = PRF(SEED, ADRS);

tmp = F(KEY, tmp XOR BM);
csum = 0;

msg = base_w(M, w, len_1);

csum = csum + w - 1 - msg[i];
csum = csum << ( 8 - ( ( len_2 * lg(w) ) % 8 ));
len_2_bytes = ceil( ( len_2 * lg(w) ) / 8 );
msg = msg || base_w(toByte(csum, len_2_bytes), w, len_2);
csum = 0;

msg = base_w(M, w, len_1);

csum = csum + w - 1 - msg[i];
csum = csum << ( 8 - ( ( len_2 * lg(w) ) % 8 ));
len_2_bytes = ceil( ( len_2 * lg(w) ) / 8 );
msg = msg || base_w(toByte(csum, len_2_bytes), w, len_2);
KEY = PRF(SEED, ADRS);
BM_0 = PRF(SEED, ADRS);
BM_1 = PRF(SEED, ADRS);

SEED = getSEED(SK);
pk = WOTS_genPK (getWOTS_SK(SK, s + i), SEED, ADRS);
node = ltree(pk, SEED, ADRS);
node = RAND_HASH(Stack.pop(), node, SEED, ADRS);
idx = 0;
ADRS = toByte(0, 32);
root = treeHash(SK, 0, h, ADRS);

SK = idx || wots_sk || SK_PRF || root || SEED;
PK = OID || root || SEED;
k = floor(i / (2^j)) XOR 1;
auth = buildAuth(SK, idx_sig, ADRS);
sig_ots = WOTS_sign(getWOTS_SK(SK, idx_sig),
                         M', getSEED(SK), ADRS);
Sig = sig_ots || auth;
idx_sig = getIdx(SK);
ADRS = toByte(0, 32);
Sig = idx_sig || r || treeSig(M', SK, idx_sig, ADRS);
pk_ots = WOTS_pkFromSig(sig_ots, M', SEED, ADRS);
ADRS = toByte(0, 32);
idx_MT = 0;
ADRS = toByte(0, 32);
SK = getXMSS_SK(SK_MT, 0, d - 1);
root = treeHash(SK, 0, h / d, ADRS);
PK_MT = OID || root || SEED;
ADRS = toByte(0, 32);
SEED = getSEED(SK_MT);
SK_PRF = getSK_PRF(SK_MT);
idx_sig = getIdx(SK_MT);

Sig_MT = idx_sig;
SK = idx_leaf || getXMSS_SK(SK_MT, idx_tree, 0) || SK_PRF
           || toByte(0, n) || SEED;
Sig_tmp = treeSig(M', SK, idx_leaf, ADRS);
Sig_MT = Sig_MT || r || Sig_tmp;
root = treeHash(SK, 0, h / d, ADRS);
idx_leaf = (h / d) least significant bits of idx_tree;
idx_tree = (h - j * (h / d)) most significant bits of idx_tree;
SK = idx_leaf || getXMSS_SK(SK_MT, idx_tree, j) || SK_PRF
               || toByte(0, n) || SEED;
Sig_tmp = treeSig(root, SK, idx_leaf, ADRS);
Sig_MT = Sig_MT || Sig_tmp;
idx_sig = getIdx(Sig_MT);
SEED = getSEED(PK_MT);
ADRS = toByte(0, 32);

idx_leaf = (h / d) least significant bits of idx_tree;
idx_tree = (h - j * h / d) most significant bits of idx_tree;
node = XMSS_rootFromSig(idx_leaf, getSig_ots(Sig'),
                              getAuth(Sig'), node, SEED, ADRS);
d=1.  Hence, the choice of h has the same effect as for XMSS.  The
w = 16 for efficiency reasons.
wotsp_reserved  = 0x00000000,
wotsp-sha2_256  = 0x00000001,
wotsp-sha2_512  = 0x00000002,
wotsp-shake_256 = 0x00000003,
wotsp-shake_512 = 0x00000004,
xmss_reserved     = 0x00000000,

xmss-sha2_10_256  = 0x00000001,
xmss-sha2_16_256  = 0x00000002,
xmss-sha2_20_256  = 0x00000003,

xmss-sha2_10_512  = 0x00000004,
xmss-sha2_16_512  = 0x00000005,
xmss-sha2_20_512  = 0x00000006,
xmss-shake_10_256 = 0x00000007,
xmss-shake_16_256 = 0x00000008,
xmss-shake_20_256 = 0x00000009,

xmss-shake_10_512 = 0x0000000A,
xmss-shake_16_512 = 0x0000000B,
xmss-shake_20_512 = 0x0000000C,
xmssmt_reserved        = 0x00000000,
