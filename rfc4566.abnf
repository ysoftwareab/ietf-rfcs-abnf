v=  (protocol version)
o=  (originator and session identifier)
s=  (session name)
i=* (session information)
u=* (URI of description)
e=* (email address)
p=* (phone number)
c=* (connection information -- not required if included in
              all media)
b=* (zero or more bandwidth information lines)
z=* (time zone adjustments)
k=* (encryption key)
a=* (zero or more session attribute lines)
t=  (time the session is active)
r=* (zero or more repeat times)

m=  (media name and transport address)
i=* (media title)
c=* (connection information -- optional if included at
              session level)
b=* (zero or more bandwidth information lines)
k=* (encryption key)
a=* (zero or more media attribute lines)

v=0
o=jdoe 2890844526 2890842807 IN IP4 10.47.16.5
s=SDP Seminar
i=A Seminar on the session description protocol
u=http://www.example.com/seminars/sdp.pdf
e=j.doe@example.com (Jane Doe)
c=IN IP4 224.2.17.12/127
t=2873397496 2873404696
a=recvonly
m=audio 49170 RTP/AVP 0
m=video 51372 RTP/AVP 99
a=rtpmap:99 h263-1998/90000

v=0

o=<username> <sess-id> <sess-version> <nettype> <addrtype>
        <unicast-address>

s=<session name>

i=<session description>

u=<uri>

e=<email-address>
p=<phone-number>

p=+1 617 555-6011

e=j.doe@example.com (Jane Doe)

e=Jane Doe <j.doe@example.com>
c=<nettype> <addrtype> <connection-address>

c=IN IP4 224.2.36.42/127

c=IN IP4 224.2.1.1/127/3

c=IN IP4 224.2.1.1/127
c=IN IP4 224.2.1.2/127
c=IN IP4 224.2.1.3/127

c=IN IP6 FF15::101/3

c=IN IP6 FF15::101
c=IN IP6 FF15::102
c=IN IP6 FF15::103
b=<bwtype>:<bandwidth>

b=X-YZ:128
t=<start-time> <stop-time>

r=<repeat interval> <active duration> <offsets from start-time>

t=3034423619 3042462419
r=604800 3600 0 90000

r=7d 1h 0 25h

z=<adjustment time> <offset> <adjustment time> <offset> ....

z=2882844526 -1h 2898848070 0

k=<method>
k=<method>:<encryption key>

k=clear:<encryption key>

         The encryption key is included untransformed in this key field.
         This method MUST NOT be used unless it can be guaranteed that
         the SDP is conveyed over a secure channel.  The encryption key
         is interpreted as text according to the charset attribute; use
         the "k=base64:" method to convey characters that are otherwise
         prohibited in SDP.

k=base64:<encoded encryption key>

         The encryption key is included in this key field but has been
         base64 encoded [12] because it includes characters that are
         prohibited in SDP.  This method MUST NOT be used unless it can
         be guaranteed that the SDP is conveyed over a secure channel.

k=uri:<URI to obtain key>

         A Uniform Resource Identifier is included in the key field.
         The URI refers to the data containing the key, and may require
         additional authentication before the key can be returned.  When
         a request is made to the given URI, the reply should specify
         the encoding for the key.  The URI is often an Secure Socket
         Layer/Transport Layer Security (SSL/TLS)-protected HTTP URI
         ("https:"), although this is not required.

k=prompt

         No key is included in this SDP description, but the session or
         media stream referred to by this key field is encrypted.  The
         user should be prompted for the key when attempting to join the
         session, and this user-supplied key should then be used to
         decrypt the media streams.  The use of user-specified keys is
         NOT RECOMMENDED, since such keys tend to have weak security
         properties.

a=<attribute>
a=<attribute>:<value>

m=<media> <port> <proto> <fmt> ...

m=<media> <port>/<number of ports> <proto> <fmt> ...

m=video 49170/2 RTP/AVP 31

c=IN IP4 224.2.1.1/127/2
m=video 49170/2 RTP/AVP 31

a=cat:<category>

         This attribute gives the dot-separated hierarchical category of
         the session.  This is to enable a receiver to filter unwanted
         sessions by category.  There is no central registry of
         categories.  It is a session-level attribute, and it is not
         dependent on charset.
a=keywds:<keywords>

         Like the cat attribute, this is to assist identifying wanted
         sessions at the receiver.  This allows a receiver to select
         interesting session based on keywords describing the purpose of
         the session; there is no central registry of keywords.  It is a
         session-level attribute.  It is a charset-dependent attribute,
         meaning that its value should be interpreted in the charset
         specified for the session description if one is specified, or
         by default in ISO 10646/UTF-8.

a=tool:<name and version of tool>

         This gives the name and version number of the tool used to
         create the session description.  It is a session-level
         attribute, and it is not dependent on charset.

a=ptime:<packet time>

         This gives the length of time in milliseconds represented by
         the media in a packet.  This is probably only meaningful for
         audio data, but may be used with other media types if it makes
         sense.  It should not be necessary to know ptime to decode RTP
         or vat audio, and it is intended as a recommendation for the
         encoding/packetisation of audio.  It is a media-level
         attribute, and it is not dependent on charset.

a=maxptime:<maximum packet time>

         This gives the maximum amount of media that can be encapsulated
         in each packet, expressed as time in milliseconds.  The time
         SHALL be calculated as the sum of the time the media present in
         the packet represents.  For frame-based codecs, the time SHOULD
         be an integer multiple of the frame size.  This attribute is
         probably only meaningful for audio data, but may be used with
         other media types if it makes sense.  It is a media-level
         attribute, and it is not dependent on charset.  Note that this
         attribute was introduced after RFC 2327, and non-updated
         implementations will ignore this attribute.

a=rtpmap:<payload type> <encoding name>/<clock rate> [/<encoding
         parameters>]

         This attribute maps from an RTP payload type number (as used in
         an "m=" line) to an encoding name denoting the payload format
         to be used.  It also provides information on the clock rate and
         encoding parameters.  It is a media-level attribute that is not
         dependent on charset.
         Although an RTP profile may make static assignments of payload
         type numbers to payload formats, it is more common for that
         assignment to be done dynamically using "a=rtpmap:" attributes.
         As an example of a static payload type, consider u-law PCM
         coded single-channel audio sampled at 8 kHz.  This is
         completely defined in the RTP Audio/Video profile as payload
         type 0, so there is no need for an "a=rtpmap:" attribute, and
         the media for such a stream sent to UDP port 49232 can be
         specified as:

m=audio 49232 RTP/AVP 0

m=audio 49232 RTP/AVP 98
a=rtpmap:98 L16/16000/2

m=audio 49230 RTP/AVP 96 97 98
a=rtpmap:96 L8/8000
a=rtpmap:97 L16/8000
a=rtpmap:98 L16/11025/2

a=recvonly

         This specifies that the tools should be started in receive-only
         mode where applicable.  It can be either a session- or media-
         level attribute, and it is not dependent on charset.  Note that
         recvonly applies to the media only, not to any associated
         control protocol (e.g., an RTP-based system in recvonly mode
         SHOULD still send RTCP packets).

a=sendrecv

         This specifies that the tools should be started in send and
         receive mode.  This is necessary for interactive conferences
         with tools that default to receive-only mode.  It can be either
         a session or media-level attribute, and it is not dependent on
         charset.

         If none of the attributes "sendonly", "recvonly", "inactive",
         and "sendrecv" is present, "sendrecv" SHOULD be assumed as the
         default for sessions that are not of the conference type
         "broadcast" or "H332" (see below).

a=sendonly

         This specifies that the tools should be started in send-only
         mode.  An example may be where a different unicast address is
         to be used for a traffic destination than for a traffic source.
         In such a case, two media descriptions may be used, one
         sendonly and one recvonly.  It can be either a session- or
         media-level attribute, but would normally only be used as a
         media attribute.  It is not dependent on charset.  Note that
         sendonly applies only to the media, and any associated control
         protocol (e.g., RTCP) SHOULD still be received and processed as
         normal.

a=inactive

         This specifies that the tools should be started in inactive
         mode.  This is necessary for interactive conferences where
         users can put other users on hold.  No media is sent over an
         inactive media stream.  Note that an RTP-based system SHOULD
         still send RTCP, even if started inactive.  It can be either a
         session or media-level attribute, and it is not dependent on
         charset.

a=orient:<orientation>

         Normally this is only used for a whiteboard or presentation
         tool.  It specifies the orientation of a the workspace on the
         screen.  It is a media-level attribute.  Permitted values are
         "portrait", "landscape", and "seascape" (upside-down
         landscape).  It is not dependent on charset.

a=type:<conference type>

         This specifies the type of the conference.  Suggested values
         are "broadcast", "meeting", "moderated", "test", and "H332".
         "recvonly" should be the default for "type:broadcast" sessions,
         "type:meeting" should imply "sendrecv", and "type:moderated"
         should indicate the use of a floor control tool and that the
         media tools are started so as to mute new sites joining the
         conference.

         Specifying the attribute "type:H332" indicates that this
         loosely coupled session is part of an H.332 session as defined
         in the ITU H.332 specification [26].  Media tools should be
         started "recvonly".

         Specifying the attribute "type:test" is suggested as a hint
         that, unless explicitly requested otherwise, receivers can
         safely avoid displaying this session description to users.

         The type attribute is a session-level attribute, and it is not
         dependent on charset.

a=charset:<character set>

         This specifies the character set to be used to display the
         session name and information data.  By default, the ISO-10646
         character set in UTF-8 encoding is used.  If a more compact
         representation is required, other character sets may be used.
         For example, the ISO 8859-1 is specified with the following SDP
         attribute:

a=charset:ISO-8859-1
a=sdplang:<language tag>

         This can be a session-level attribute or a media-level
         attribute.  As a session-level attribute, it specifies the
         language for the session description.  As a media-level
         attribute, it specifies the language for any media-level SDP
         information field associated with that media.  Multiple sdplang
         attributes can be provided either at session or media level if
         multiple languages in the session description or media use
         multiple languages, in which case the order of the attributes
         indicates the order of importance of the various languages in
         the session or media from most important to least important.

         In general, sending session descriptions consisting of multiple
         languages is discouraged.  Instead, multiple descriptions
         SHOULD be sent describing the session, one in each language.
         However, this is not possible with all transport mechanisms,
         and so multiple sdplang attributes are allowed although NOT
         RECOMMENDED.

         The "sdplang" attribute value must be a single RFC 3066
         language tag in US-ASCII [9].  It is not dependent on the
         charset attribute.  An "sdplang" attribute SHOULD be specified
         when a session is of sufficient scope to cross geographic
         boundaries where the language of recipients cannot be assumed,
         or where the session is in a different language from the
         locally assumed norm.

a=lang:<language tag>

         This can be a session-level attribute or a media-level
         attribute.  As a session-level attribute, it specifies the
         default language for the session being described.  As a media-
         level attribute, it specifies the language for that media,
         overriding any session-level language specified.  Multiple lang
         attributes can be provided either at session or media level if
         the session description or media use multiple languages, in
         which case the order of the attributes indicates the order of
         importance of the various languages in the session or media
         from most important to least important.

         The "lang" attribute value must be a single RFC 3066 language
         tag in US-ASCII [9].  It is not dependent on the charset
         attribute.  A "lang" attribute SHOULD be specified when a
         session is of sufficient scope to cross geographic boundaries
         where the language of recipients cannot be assumed, or where
         the session is in a different language from the locally assumed
         norm.

a=framerate:<frame rate>

         This gives the maximum video frame rate in frames/sec.  It is
         intended as a recommendation for the encoding of video data.
         Decimal representations of fractional values using the notation
         "<integer>.<fraction>" are allowed.  It is a media-level
         attribute, defined only for video media, and it is not
         dependent on charset.

a=quality:<quality>

         This gives a suggestion for the quality of the encoding as an
         integer value.  The intention of the quality attribute for
         video is to specify a non-default trade-off between frame-rate
         and still-image quality.  For video, the value is in the range
         0 to 10, with the following suggested meaning:

            10 - the best still-image quality the compression scheme can
                 give.
            5  - the default behaviour given no quality suggestion.
            0  - the worst still-image quality the codec designer thinks
                 is still usable.

         It is a media-level attribute, and it is not dependent on
         charset.

a=fmtp:<format> <format specific parameters>

         This attribute allows parameters that are specific to a
         particular format to be conveyed in a way that SDP does not
         have to understand them.  The format must be one of the formats
         specified for the media.  Format-specific parameters may be any
         set of parameters required to be conveyed by SDP and given
         unchanged to the media tool that will use this format.  At most
         one instance of this attribute is allowed for each format.

         It is a media-level attribute, and it is not dependent on
         charset.

session-description = proto-version
                         origin-field
                         session-name-field
                         information-field
                         uri-field
                         email-fields
                         phone-fields
                         connection-field
                         bandwidth-fields
                         time-fields
                         key-field
                         attribute-fields
                         media-descriptions

proto-version =       %x76 "=" 1*DIGIT CRLF
                         ;this memo describes version 0

origin-field =        %x6f "=" username SP sess-id SP sess-version SP
                         nettype SP addrtype SP unicast-address CRLF

session-name-field =  %x73 "=" text CRLF

information-field =   [%x69 "=" text CRLF]

uri-field =           [%x75 "=" uri CRLF]

email-fields =        *(%x65 "=" email-address CRLF)

phone-fields =        *(%x70 "=" phone-number CRLF)

connection-field =    [%x63 "=" nettype SP addrtype SP
                         connection-address CRLF]
                         ;a connection field must be present
                         ;in every media description or at the
                         ;session-level
bandwidth-fields =    *(%x62 "=" bwtype ":" bandwidth CRLF)

time-fields =         1*( %x74 "=" start-time SP stop-time
                         *(CRLF repeat-fields) CRLF)
                         [zone-adjustments CRLF]

repeat-fields =       %x72 "=" repeat-interval SP typed-time
                         1*(SP typed-time)

zone-adjustments =    %x7a "=" time SP ["-"] typed-time
                         *(SP time SP ["-"] typed-time)

key-field =           [%x6b "=" key-type CRLF]

attribute-fields =    *(%x61 "=" attribute CRLF)

media-descriptions =  *( media-field
                         information-field
                         *connection-field
                         bandwidth-fields
                         key-field
                         attribute-fields )

media-field =         %x6d "=" media SP port ["/" integer]
                         SP proto 1*(SP fmt) CRLF

username =            non-ws-string
                         ;pretty wide definition, but doesn't
                         ;include space

sess-id =             1*DIGIT
                         ;should be unique for this username/host

sess-version =        1*DIGIT

nettype =             token
                         ;typically "IN"

addrtype =            token
                         ;typically "IP4" or "IP6"

uri =                 URI-reference
                         ; see RFC 3986
email-address        = address-and-comment / dispname-and-address
                          / addr-spec
address-and-comment  = addr-spec 1*SP "(" 1*email-safe ")"
dispname-and-address = 1*email-safe 1*SP "<" addr-spec ">"

phone-number =        phone *SP "(" 1*email-safe ")" /
                         1*email-safe "<" phone ">" /
                         phone

phone =               ["+"] DIGIT 1*(SP / "-" / DIGIT)

connection-address =  multicast-address / unicast-address

bwtype =              token

bandwidth =           1*DIGIT

start-time =          time / "0"

stop-time =           time / "0"

time =                POS-DIGIT 9*DIGIT
                         ; Decimal representation of NTP time in
                         ; seconds since 1900.  The representation
                         ; of NTP time is an unbounded length field
                         ; containing at least 10 digits.  Unlike the
                         ; 64-bit representation used elsewhere, time
                         ; in SDP does not wrap in the year 2036.

repeat-interval =     POS-DIGIT *DIGIT [fixed-len-time-unit]

typed-time =          1*DIGIT [fixed-len-time-unit]

fixed-len-time-unit = %x64 / %x68 / %x6d / %x73

key-type =            %x70 %x72 %x6f %x6d %x70 %x74 /     ; "prompt"
                         %x63 %x6c %x65 %x61 %x72 ":" text / ; "clear:"
                         %x62 %x61 %x73 %x65 "64:" base64 /  ; "base64:"
                         %x75 %x72 %x69 ":" uri              ; "uri:"

base64      =         *base64-unit [base64-pad]
base64-unit =         4base64-char
base64-pad  =         2base64-char "==" / 3base64-char "="
base64-char =         ALPHA / DIGIT / "+" / "/"

attribute =           (att-field ":" att-value) / att-field

att-field =           token

att-value =           byte-string

media =               token
                         ;typically "audio", "video", "text", or
                         ;"application"

fmt =                 token
                         ;typically an RTP payload type for audio
                         ;and video media

proto  =              token *("/" token)
                         ;typically "RTP/AVP" or "udp"

port =                1*DIGIT

unicast-address =     IP4-address / IP6-address / FQDN / extn-addr

multicast-address =   IP4-multicast / IP6-multicast / FQDN
                         / extn-addr

IP4-multicast =       m1 3( "." decimal-uchar )
                         "/" ttl [ "/" integer ]
                         ; IPv4 multicast addresses may be in the
                         ; range 224.0.0.0 to 239.255.255.255

m1 =                  ("22" ("4"/"5"/"6"/"7"/"8"/"9")) /
                         ("23" DIGIT )

IP6-multicast =       hexpart [ "/" integer ]
                         ; IPv6 address starting with FF

ttl =                 (POS-DIGIT *2DIGIT) / "0"

FQDN =                4*(alpha-numeric / "-" / ".")
                         ; fully qualified domain name as specified
                         ; in RFC 1035 (and updates)
IP4-address =         b1 3("." decimal-uchar)

b1 =                  decimal-uchar
                         ; less than "224"

IP6-address =         hexpart [ ":" IP4-address ]

hexpart =             hexseq / hexseq "::" [ hexseq ] /
                         "::" [ hexseq ]

hexseq  =             hex4 *( ":" hex4)

hex4    =             1*4HEXDIG

extn-addr =           non-ws-string

text =                byte-string
                         ;default is to interpret this as UTF8 text.
                         ;ISO 8859-1 requires "a=charset:ISO-8859-1"
                         ;session-level attribute to be used

byte-string =         1*(%x01-09/%x0B-0C/%x0E-FF)
                         ;any byte except NUL, CR, or LF

non-ws-string =       1*(VCHAR/%x80-FF)
                         ;string of visible characters

token-char =          %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39
                         / %x41-5A / %x5E-7E

token =               1*(token-char)

email-safe =          %x01-09/%x0B-0C/%x0E-27/%x2A-3B/%x3D/%x3F-FF
                         ;any byte except NUL, CR, LF, or the quoting
                         ;characters ()<>

integer =             POS-DIGIT *DIGIT

alpha-numeric =       ALPHA / DIGIT

POS-DIGIT =           %x31-39 ; 1 - 9
decimal-uchar =       DIGIT
                         / POS-DIGIT DIGIT
                         / ("1" 2*(DIGIT))
                         / ("2" ("0"/"1"/"2"/"3"/"4") DIGIT)
                         / ("2" "5" ("0"/"1"/"2"/"3"/"4"/"5"))

