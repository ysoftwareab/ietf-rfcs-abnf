digest-challenge  = 
      1#( realm | nonce | qop-options | stale | maxbuf | charset 
            algorithm | cipher-opts | auth-param ) 
 
                         Digest SASL Mechanism          September, 1999 




 
realm             = "realm" "=" <"> realm-value <"> 
realm-value       = qdstr-val 
nonce             = "nonce" "=" <"> nonce-value <"> 
nonce-value       = qdstr-val 
qop-options       = "qop" "=" <"> qop-list <"> 
qop-list          = 1#qop-value 
qop-value         = "auth" | "auth-int" | "auth-conf" | 
                          token 
stale             = "stale" "=" "true" 
maxbuf            = "maxbuf" "=" maxbuf-value 
maxbuf-value      = 1*DIGIT 
charset           = "charset" "=" "utf-8" 
algorithm         = "algorithm" "=" "md5-sess" 
cipher-opts       = "cipher" "=" <"> 1#cipher-value <"> 
cipher-value      = "3des" | "des" | "rc4-40" | "rc4" | 
                         "rc4-56" | token 
auth-param        = token "=" ( token | quoted-string ) 
 
digest-response  = 1#( username | realm | nonce | cnonce | 
                       nonce-count | qop | digest-uri | response | 
                       maxbuf | charset | cipher | authzid | 
                       auth-param ) 
 
username         = "username" "=" <"> username-value <"> 
username-value   = qdstr-val 
cnonce           = "cnonce" "=" <"> cnonce-value <"> 
cnonce-value     = qdstr-val 
nonce-count      = "nc" "=" nc-value 
nc-value         = 8LHEX 
qop              = "qop" "=" qop-value 
digest-uri       = "digest-uri" "=" digest-uri-value 
digest-uri-value  = serv-type "/" host [ "/" serv-name ] 
serv-type        = 1*ALPHA 
host             = 1*( ALPHA | DIGIT | "-" | "." ) 
serv-name        = host 
response         = "response" "=" <"> response-value <"> 
response-value   = 32LHEX 
LHEX             = "0" | "1" | "2" | "3" | 
                         Digest SASL Mechanism          September, 1999 




                       "4" | "5" | "6" | "7" | 
                       "8" | "9" | "a" | "b" | 
                       "c" | "d" | "e" | "f" 
cipher           = "cipher" "=" cipher-value 
authzid          = "authzid" "=" authzid-value 
authzid-value    = qdstr-val 
 
 

response-value  =  
      HEX( KD ( HEX(H(A1)), 
               { nonce-value, ":" nc-value, ":",  
                 cnonce-value, ":", qop-value, ":", HEX(H(A2)) 
A1 = { H( { username-value, ":", realm-value, ":", passwd } ),  
        ":", nonce-value, ":", cnonce-value, ":", authzid-value } 
 
A1 = { H( { username-value, ":", realm-value, ":", passwd } ),  
        ":", nonce-value, ":", cnonce-value } 
 
passwd   = *OCTET 
 
A2       = { "AUTHENTICATE:", digest-uri-value } 
 
A2       = { "AUTHENTICATE:", digest-uri-value,  
            ":00000000000000000000000000000000" } 
 
                         Digest SASL Mechanism          September, 1999 




response-auth = "rspauth" "=" response-value 
     
A2 = { ":",  digest-uri-value } 
     
A2 = { ":",  digest-uri-value,  ":00000000000000000000000000000000" 
Kic = MD5({H(A1), 
Kis = MD5({H(A1), 
Kcc = MD5({H(A1)[0..n], 
Kcs = MD5({H(A1)[0..n], 
AUTH=DIGEST-MD5 AUTH=LOGIN AUTH=PLAIN 
realm="elwood.innosoft.com",nonce="D6Pi5uoOliG28XVbuTXCIw",qop="auth
username="chris",realm="elwood.innosoft.com",nonce="D6Pi5uoOliG28XVb
nc=00000001,cnonce="e/gXnpEox83sW3DEu7oQhg", 
response="4f60650aaaf4417929eb687f766ce932",qop=auth 
     
name = definition 
  The name of a rule is simply the name itself (without any enclosing 
  "<" and ">") and is separated from its definition by the equal "=" 
  character. White space is only significant in that indentation of 
  continuation lines is used to indicate a rule definition that spans 
  more than one line. Certain basic rules are in uppercase, such as SP, 
  LWS, HT, CRLF, DIGIT, ALPHA, etc. Angle brackets are used within 
  definitions whenever their presence will facilitate discerning the 
  use of rule names. 

OCTET          = <any 8-bit sequence of data> 
                         Digest SASL Mechanism          September, 1999 




CHAR           = <any US-ASCII character (octets 0 - 127)> 
UPALPHA        = <any US-ASCII uppercase letter "A".."Z"> 
LOALPHA        = <any US-ASCII lowercase letter "a".."z"> 
ALPHA          = UPALPHA | LOALPHA 
DIGIT          = <any US-ASCII digit "0".."9"> 
CTL            = <any US-ASCII control character 
                        (octets 0 - 31) and DEL (127)> 
CR             = <US-ASCII CR, carriage return (13)> 
LF             = <US-ASCII LF, linefeed (10)> 
SP             = <US-ASCII SP, space (32)> 
HT             = <US-ASCII HT, horizontal-tab (9)> 
LWS            = [CRLF] 1*( SP | HT ) 
 
TEXT           = <any OCTET except CTLs, 
                        but including LWS> 
 
HEX            = "A" | "B" | "C" | "D" | "E" | "F" 
                      | "a" | "b" | "c" | "d" | "e" | "f" | DIGIT 
 
token          = 1*<any CHAR except CTLs or separators> 
separators     = "(" | ")" | "<" | ">" | "@" 
                      | "," | ";" | ":" | "\" | <"> 
                      | "/" | "[" | "]" | "?" | "=" 
                      | "{" | "}" | SP | HT 
 
quoted-string  = ( <"> qdstr-val <"> ) 
qdstr-val      = *( qdtext | quoted-pair ) 
qdtext         = <any TEXT except <">> 
 
quoted-pair    = "\" CHAR 
 
end = base + len; 
cbuf = ((scan[0] & 0x3) << 6) | (scan[1] & 0x3f); 
base = scan + 2; 
