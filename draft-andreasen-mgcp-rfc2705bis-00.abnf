v=0
o=- 25678 753849 IN IP4 128.96.41.1
s=-
c=IN IP4 128.96.41.1
t=0 0
m=audio 1296 RTP/AVP 0

v=0
o=- 33343 346463 IN IP4 128.96.63.25
s=-
c=IN IP4 128.96.63.25
t=0 0
m=audio 1296 RTP/AVP 0 96
a=rtpmap:96 G726-32/8000

v=0
o=- 25678 753849 IN IP4 128.96.41.1
s=-
c=IN IP4 128.96.41.1
t=0 0
m=audio 3456 RTP/AVP 96
a=rtpmap:96 G726-32/8000

v=0
o=- 25678 753849 IN IP4 128.96.41.1
s=-
c=IN IP4 128.96.41.1
t=0 0
m=audio 3456 RTP/AVP 96
a=rtpmap:96 G726-32/8000

v=0
o=- 25678 753849 IN IP4 128.96.41.1
s=-
c=IN IP4 128.96.41.1
t=0 0
m=audio 3456 RTP/AVP 0

v=0
o=- 4723891 7428910 IN IP4 128.96.63.25
s=-
c=IN IP4 128.96.63.25
t=0 0
m=audio 1296 RTP/AVP 96
a=rtpmap:96 G726-32/8000

o = <username> <session id> <version> <network type> <address type>
       <address>

s = <session name>

t = <start time> <stop time>

v=0
o=- A7453949499 0 IN IP4 128.96.41.1
s=-
c=IN IP4 128.96.41.1
t=0 0
m=audio 3456 RTP/AVP 0 96
a=rtpmap:96 G726-32/8000

a=MGCPlocalcx:<ConnectionID>
      The MGCP Local Connection attribute is a session level only case-
      insensitive attribute that identifies the MGCP LOCAL connection,
      on the endpoint identified in the connection information, to
      which the SDP applies. The ConnectionID is a hexadecimal string
      containing at most 32 characters. The ConnectionID itself is
      case-insensitive. The MGCP Local Connection attribute is not
      subject to the charset attribute.

v=0
o=- A7453949499 0 LOCAL EPN X35V3+A4/13
s=-
c=LOCAL EPN X35V3+A4/13
t=0 0
a=MGCPlocalcx:FDE234C8
m=audio 0 LOCAL 0

MGCPMessage = MGCPCommand / MGCPResponse

MGCPCommand = MGCPCommandLine 0*(MGCPParameter) [EOL *SDPinformation]

MGCPCommandLine = MGCPVerb 1*(WSP) <transaction-id> 1*(WSP)
                        <endpointName> 1*(WSP) MGCPversion EOL

MGCPVerb = "EPCF" / "CRCX" / "MDCX" / "DLCX" / "RQNT"
         / "NTFY" / "AUEP" / "AUCX" / "RSIP" / extensionVerb

extensionVerb  = "X" 3(ALPHA / DIGIT)

transaction-id = 1*9(DIGIT)

endpointName      = localEndpointName "@" DomainName
LocalEndpointName = LocalNamePart 0*("/" LocalNamePart)
LocalNamePart     = AnyName / AllName / NameString
AnyName           = "$"
AllName           = "*"
NameString        = 1*(range-of-allowed-characters)
range-of-allowed-characters  = %x21-23 / %x25-29 / %2B-2E
                             / %30-3F / %x41-7E

DomainName = 1*256(ALPHA / DIGIT / "." / "-")    ; as defined
           / "#" <number> / "[" <dotnum> "]"     ; in RFC 821
           / "[" Ipv6address "]"                 ; see RFC 2372

MGCPversion = "MGCP" 1*(WSP) 1*(DIGIT) "." 1*(DIGIT)
                            [1*(WSP) ProfileName]
ProfileName = VCHAR *( WSP / VCHAR)   ; Was range-of-allowed-characters

MGCPParameter = ParameterValue EOL
ParameterValue = ("K" ":" 0*WSP  [ResponseAck])
               / ("B" ":" 0*WSP  [BearerInformation])
               / ("C" ":" 0*WSP  [CallId])
               / ("I" ":" 0*WSP  [ConnectionId])
               / ("N" ":" 0*WSP  [NotifiedEntity])
               / ("X" ":" 0*WSP  [RequestIdentifier])
               / ("L" ":" 0*WSP  [LocalConnectionOptions])
               / ("M" ":" 0*WSP  ConnectionMode)
               / ("R" ":" 0*WSP  [RequestedEvents])
               / ("S" ":" 0*WSP  [SignalRequests])
               / ("D" ":" 0*WSP  [DigitMap])
               / ("O" ":" 0*WSP  [ObservedEvents])
               / ("P" ":" 0*WSP  [ConnectionParameters])
               / ("E" ":" 0*WSP  ReasonCode)
               / ("Z" ":" 0*WSP  [SpecificEndpointID])
               / ("Z2" ":" 0*WSP SecondEndpointID)
               / ("I2" ":" 0*WSP SecondConnectionID)
               / ("F" ":" 0*WSP  [RequestedInfo])
               / ("Q" ":" 0*WSP  QuarantineHandling )
               / ("T" ":" 0*WSP  [DetectEvents])
               / ("RM" ":" 0*WSP RestartMethod)
               / ("RD" ":" 0*WSP RestartDelay)
               / ("A" ":" 0*WSP  [Capabilities])
               / ("ES" ":" 0*WSP [EventStates])
               / (extensionParameter ":" 0*WSP [parameterString])

ResponseAck =  confirmedTransactionIdRange
               *( ","  confirmedTransactionIdRange )

confirmedTransactionIdRange = 1*9DIGIT ["-" 1*9DIGIT]

BearerInformation = BearerAttribute 0*("," 0*WSP BearerAttribute)
BearerAttribute   = ("e" ":" <BearerEncoding>)
                  / (BearerExtensionName [":"BearerExtensionValue])
BearerExtensionName  = PackageLCOExtensionName
BearerExtensionValue = LocalOptionExtensionValue
BearerEncoding = "A" / "mu"

CallId = 1*32(HEXDIG)

ConnectionId = 1*32(HEXDIG) 0*("," 1*32(HEXDIG))
SecondConnectionID = ConnectionId

NotifiedEntity = [LocalName "@"] DomainName [":" portNumber]
LocalName  = LocalEndpointName            ; No internal structure
                                          ; was 1*32(suitableCharacter)
portNumber = 1*5(DIGIT)

RequestIdentifier = 1*32(HEXDIG)
LocalConnectionOptions = LocalOptionValue 0*(WSP)
                           0*("," 0*(WSP) LocalOptionValue 0*(WSP))
LocalOptionValue = ("p"   ":" <packetizationPeriod> )
                 / ("a"  ":" <compressionAlgorithm> )
                 / ("b"  ":" <bandwidth> )
                 / ("e"  ":" <echoCancellation> )
                 / ("gc" ":" <gainControl> )
                 / ("s"  ":" <silenceSuppression> )
                 / ("t"  ":" <typeOfService> )
                 / ("r"  ":" <resourceReservation> )
                 / ("k"  ":" <encryptiondata>)
                 / ("nt" ":" ( <typeOfNetwork> /
                                    <supportedTypeOfNetwork> )
                 / (localOptionExtensionName
                         [":" <localOptionExtensionValue>])  
 
Capabilities =  CapabilityValue 0*(WSP)
                     0*("," 0*(WSP) CapabilityValue 0*(WSP))  
CapabilityValue = LocalOptionValue
                / ("v" ":" <supportedPackages>)
                / ("m" ":" <supportedModes> )
 
packetizationPeriod  = 1*4(DIGIT)["-" 1*4(DIGIT)]
compressionAlgorithm = algorithmName 0*(";" algorithmName)
algorithmName        = 1*32(SuitableLCOCharacter)
bandwidth            = 1*4(DIGIT)["-" 1*4(DIGIT)]
echoCancellation     = "on" / "off"
gainControl          = "auto" / ["-"]1*4(DIGIT)
silenceSuppression   = "on" / "off"
typeOfService        = 2HEXDIG
resourceReservation  = "g" / "cl" / "be"

encryptiondata = ( "clear" ":" <encryptionKey> )
               / ( "base64" ":" <encodedEncryptionKey> )
               / ( "uri" ":" <URItoObtainKey> )
               / ( "prompt" ) ; defined in SDP, not usable in MGCP!
encryptionKey = 1*(SuitableLCOCharacter) / quotedString
encodedEncryptionKey = 1*(ALPHA / DIGIT / "+" / "/" / "=")
URItoObtainKey = 1*(SuitableLCOCharacter) / quotedString

typeOfNetwork = "IN" / "ATM" / "LOCAL" / OtherTypeOfNetwork
OtherTypeOfNetwork     = 1*(SuitableLCOCharacter)
supportedTypeOfNetwork = typeOfNetwork *(";" typeOfNetwork)

supportedModes    = ConnectionMode 0*(";" ConnectionMode)
supportedPackages = packageName 0*(";" packageName)

packageName = 1*(ALPHA / DIGIT / HYPHEN) ; Hyphen neither first or last

localOptionExtensionName = VendorLCOExtensionName
                         / PackageLCOExtensionName
                         / OtherLCOExtensionname
VendorLCOExtensionName   = "x" ("+"/"-") 1*32(SuitableExtLCOCharacter)
PackageLCOExtensionName  = packageName "/"
                            1*32(SuitablePkgExtLCOCharacter)
OtherLCOExtensionName    = 1*32(SuitableExtLCOCharacter)

localOptionExtensionValue = (1*32(SuitableLCOCharacter) / quotedString)
                              *(";" *WSP (1*32(SuitableLCOCharacter)
                                                      / quotedString)))

ConnectionMode = "sendonly" / "recvonly" / "sendrecv"
               / "confrnce" / "inactive" / "loopback"
               / "conttest" / "netwloop" / "netwtest"
               / ExtensionConnectionMode
ExtensionConnectionMode = PkgExtConnectionMode
PkgExtConnectionMode    = packageName "/" 1*(ALPHA / DIGIT)

RequestedEvents = requestedEvent 0*("," 0*(WSP) requestedEvent)
requestedEvent  = (eventName ["(" requestedActions ")"])
                / (eventName "(" requestedActions ")"
                                       "(" eventParameters ")" )
eventName = [(packageName / "*") "/"]
                (eventId / "all" / eventRange)
                              ["@" (ConnectionId / "$" / "*")]
eventId = 1*(ALPHA / DIGIT / HYPHEN)
                                ; Hyphen neither first or last
eventRange = "[" 1*(DigitMapLetter / (DIGIT "-" DIGIT) /
                        (DTMFLetter "-" DTMFLetter)) "]"
DTMFLetter = "A" / "B" / "C" / "D"        ; Was undefined

requestedActions = requestedAction 0*("," 0*(WSP) requestedAction)
requestedAction  = "N" / "A" / "D" / "S" / "I" / "K"
                 / "E" "(" EmbeddedRequest ")"
                 / ExtensionAction
ExtensionAction  = PackageExtAction
PackageExtAction = packageName "/" Action ["(" ActionParameters ")"]
Action = 1*ALPHA
ActionParameters = eventParameters        ; May contain actions

EmbeddedRequest = (      "R" "(" EmbeddedRequestList ")"
                   ["," "S" "(" EmbeddedSignalRequest ")"]
                   ["," "D" "(" EmbeddedDigitMap ")"] )
               / (      "S" "(" EmbeddedSignalRequest ")"
                   ["," "D" "(" EmbeddedDigitMap ")"] )
               / (      "D" "(" EmbeddedDigitMap ")" )

EmbeddedRequestList   = RequestedEvents
EmbeddedSignalRequest = SignalRequests
EmbeddedDigitMap = DigitMap

SignalRequests   = SignalRequest 0*("," 0*(WSP) SignalRequest )
SignalRequest    = eventName [ "(" eventParameters ")" ]

eventParameters  = eventParameter 0*("," 0*(WSP) eventParameter)
eventParameter   = eventParameterValue
                 / eventParameterName "=" eventParameter
                 / eventParameterName "(" eventParameters ")"
eventParameterString = 1*(SuitableEventParamCharacter)
eventParameterName   = eventParameterString
eventParameterValue  = eventParameterString / quotedString

DigitMap           = DigitString  / "(" DigitStringList ")"
DigitStringList    = DigitString 0*( "|" DigitString )
DigitString        = 1*(DigitStringElement)
DigitStringElement = DigitPosition ["."]
DigitPosition      = DigitMapLetter / DigitMapRange
DigitMapLetter     = DIGIT / "#" / "*" / "A" / "B" / "C" / "D" / "T"
                   / "X" / ExtensionDigitMapLetter
ExtensionDigitMapLetter = "E" / "F" / "G" / "H" / "I" / "J" / "K"
                        / "L" / "M" / "N" / "O" / "P" / "Q" / "R"
                        / "S" / "U" / "V" / "W" / "Y" / "Z"
DigitMapRange = "x" / "[" 1*DigitLetter "]"
DigitLetter   = *((DIGIT "-" DIGIT ) / DigitMapLetter)

ObservedEvents = SignalRequests

EventStates    = SignalRequests

ConnectionParameters = ConnectionParameter
                        0*( "," 0*(WSP) ConnectionParameter )
ConnectionParameter  = ( "PS" "=" packetsSent )
                    / ( "OS" "=" octetsSent )
                    / ( "PR" "=" packetsReceived )
                    / ( "OR" "=" octetsReceived )
                    / ( "PL" "=" packetsLost )
                    / ( "JI" "=" jitter )
                    / ( "LA" "=" averageLatency )
                    / ( ConnectionParameterExtensionName
                              "=" ConnectionParameterExtensionValue )
packetsSent     = 1*9(DIGIT)
octetsSent      = 1*9(DIGIT)
packetsReceived = 1*9(DIGIT)
octetsReceived  = 1*9(DIGIT)
packetsLost     = 1*9(DIGIT)
jitter          = 1*9(DIGIT)
averageLatency  = 1*9(DIGIT)

ConnectionParameterExtensionName = VendorCPExtensionName
                                 /    PackageCPExtensionName
VendorCPExtensionName  = "X" "-" 2*ALPHA
PackageCPExtensionName = packageName "/" CPName
CPName = 1*(ALPHA / DIGIT / HYPHEN)
ConnectionParameterExtensionValue = 1*9(DIGIT)

ReasonCode = 3DIGIT
             [1*(WSP) "/" packageName]     ; Only for 8xx
             [WSP 1*(%x20-7E)]

SpecificEndpointID = endpointName
SecondEndpointID   = endpointName

RequestedInfo = infoCode 0*("," infoCode)

infoCode = "B" / "C" / "I" / "N" / "X" / "L" / "M" / "R" / "S"
         / "D" / "O" / "P" / "E" / "Z" / "Q" / "T" / "RC" / "LC"
         / "A" / "ES" / "RM" / "RD" / extensionParameter

QuarantineHandling = loopControl / processControl
                   / (loopControl "," processControl )
loopControl    = "step" / "loop"
processControl = "process" / "discard"

DetectEvents = eventName 0*("," eventName)

RestartMethod = "graceful" / "forced" / "restart" / "disconnected"
              / "cancel-graceful" / extensionRestartMethod
extensionRestartMethod = PackageExtensionRM
PackageExtensionRM     = packageName "/" 1*32(ALPHA / DIGIT / HYPHEN)
RestartDelay = 1*6(DIGIT)

extensionParameter = VendorExtensionParameter
                   / PackageExtensionParameter
                   / OtherExtensionParameter
VendorExtensionParameter  = "X" ("-"/"+") 1*6(ALPHA / DIGIT)
PackageExtensionParameter = packagename "/"
                            1*32(ALPHA / DIGIT / HYPHEN)
OtherExtensionParameter   = 1*32(ALPHA / DIGIT / HYPHEN)

parameterString = 1*(%x20-7F) ; First and last must not be white space

MGCPResponse = MGCPResponseLine 0*(MGCPParameter) [EOL *SDPinformation]

MGCPResponseLine = <responseCode> 1*(WSP) <transaction-id>
                        [1*(WSP) "/" packageName]    ; Only for 8xx
                             [WSP <responseString>] EOL
responseCode = 3DIGIT
responseString = *(%x20-7E)

SuitableCharacter =   DIGIT / ALPHA / "+" / "-" / "_" / "&"
                  / "!" / "'" / "|" / "=" / "#" / "?" / "/"
                  / "." / "$" / "*" / ";" / "@" / "[" / "]"
                  / "^" / "`" / "{" / "}" / "~"

SuitablePkgExtLCOCharacter =  SuitableLCOCharacter

SuitableExtLCOCharacter =   DIGIT / ALPHA / "+" / "-" / "_" / "&"
                        / "!" / "'" / "|" / "=" / "#" / "?" /
                        / "." / "$" / "*" /       "@" / "[" / "]"
                        / "^" / "`" / "{" / "}" / "~"

SuitableLCOCharacter = SuitableExtLCOCharacter / "/"

SuitableEventCharacter =   DIGIT / ALPHA / "+" / "-" / "_" / "&"
                       / "!" / "'" / "|" /       "#" / "?" / "/"
                       / "." / "$" / "*" / ";" / "@" / "[" / "]"
                       / "^" / "`" / "{" / "}" / "~"

SuitableEventParamCharacter = %x21 / %x23-27 / %x2A-2B / %x2D-7E

quotedString  = DQUOTE visibleString
                 0*(quoteEscape visibleString) DQUOTE
quoteEscape   = DQUOTE DQUOTE
visibleString = (%x00-21 / %x23-FF)

EOL = CRLF / LF

HYPHEN = "-"

SDPinformation = ;See RFC 2327
v=0
o=- 25678 753849 IN IP4 128.96.41.1
s=-
c=IN IP4 128.96.41.1
t=0 0
m=audio 3456 RTP/AVP 0

v=0
o=- 25678 753849 IN IP4 128.96.41.1
s=-
c=IN IP4 128.96.41.1
t=0 0
m=audio 3456 RTP/AVP 0

v=0
o=- 25678 753849 IN IP4 128.96.41.1
s=-
c=IN IP4 128.96.41.1
t=0 0
m=audio 3456 RTP/AVP 0

v=0
o=- 4723891 7428910 IN IP4 128.96.63.25
s=-
c=IN IP4 128.96.63.25
t=0 0
m=audio 3456 RTP/AVP 0

v=0
o=- 4723891 7428910 IN IP4 128.96.63.25
s=-
c=IN IP4 128.96.63.25
t=0 0
m=audio 3456 RTP/AVP 0

v=0
o=- 4723891 7428910 IN IP4 128.96.63.25
s=-
c=IN IP4 128.96.63.25
t=0 0
m=audio 3456 RTP/AVP 0
v=0
o=- 4723891 7428910 IN IP4 128.96.63.25
s=-
c=IN IP4 128.96.63.25
t=0 0
m=audio 1296 RTP/AVP 0
v=0
o=- 4723891 7428910 IN IP4 128.96.63.25
s=-
c=IN IP4 128.96.63.25
t=0 0
m=audio 1296 RTP/AVP 0

v=0

v=0
o=- 23456789 98765432 IN IP4 192.168.5.7
s=-
c=IN IP4 192.168.5.7
t=0 0
m=audio 6058 RTP/AVP 0

v=0
o=- 23456789 98765432 IN IP4 192.168.5.7
s=-
c=IN IP4 192.168.5.7
t=0 0
m=audio 6058 RTP/AVP 0

v=0
o=- 23456889 98865432 IN IP4 192.168.5.8
s=-
c=IN IP4 192.168.5.8
t=0 0
m=audio 6166 RTP/AVP 0

v=0
o=- 23456889 98865432 IN IP4 192.168.5.8
s=-
c=IN IP4 192.168.5.8
t=0 0
m=audio 6166 RTP/AVP 0

