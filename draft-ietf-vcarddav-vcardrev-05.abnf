contentline  = [group "."] name *(";" param) ":" value CRLF
     ; When parsing a content line, folded lines MUST first
     ; be unfolded according to the unfolding procedure
     ; described above.
     ; When generating a content line, lines longer than 75
     ; characters SHOULD be folded according to the folding
     ; procedure described above.

group        = "WORK" / "HOME" / iana-token / x-name

name         = x-name / iana-token

iana-token   = 1*(ALPHA / DIGIT / "-")
     ; identifier registered with IANA

x-name       = "x-" 1*(ALPHA / DIGIT / "-")
     ; Names that begin with "x-" or "X-" are
     ; reserved for experimental use, not intended for released
     ; products, or for use in bilateral agreements.

param        = param-name "=" param-value *("," param-value)

param-name   = x-name / iana-token

param-value  = ptext / quoted-string

ptext  = *SAFE-CHAR

value = *VALUE-CHAR
        / valuespec      ; valuespec defined in section 5.8.4

quoted-string = DQUOTE *QSAFE-CHAR DQUOTE

NON-ASCII    = %x80-FF
     ; use restricted by charset parameter
     ; on outer MIME object (UTF-8 preferred)

QSAFE-CHAR   = WSP / %x21 / %x23-7E / NON-ASCII
     ; Any character except CTLs, DQUOTE

SAFE-CHAR    = WSP / %x21 / %x23-2B / %x2D-39 / %x3C-7E / NON-ASCII
     ; Any character except CTLs, DQUOTE, ";", ":", ","

VALUE-CHAR   = WSP / VCHAR / NON-ASCII
     ; any textual character

valuespec =  text-list
             / URI               ; from Appendix A of [RFC3986]
             / date-list
             / time-list
             / date-time-list
             / boolean
             / integer-list
             / float-list
             / binary
             / utc-offset
             / iana-valuespec

text-list = *TEXT-LIST-CHAR *("," *TEXT-LIST-CHAR)

TEXT-LIST-CHAR = "\\" / "\," / "\n"
                 / <any VALUE-CHAR except , or \ or newline>
      ; Backslashes, newlines, and commas must be encoded.
      ; \n or \N can be used to encode a newline.

date-list = date *("," date)

time-list = time *("," time)

date-time-list = date "T" time *("," date "T" time)

boolean = "TRUE" / "FALSE"

integer-list = integer *("," integer)

integer = [sign] 1*DIGIT

float-list = float *("," float)

float = [sign] 1*DIGIT ["." 1*DIGIT]

sign = "+" / "-"

binary = <A "B" binary encoded string as defined by [RFC2047].>

date = date-fullyear ["-" date-month ["-" date-mday]]

date-fullyear = 4DIGIT

date-month = 2DIGIT      ;01-12

date-mday = 2DIGIT       ;01-28, 01-29, 01-30, 01-31
                           ;based on month/year

time = time-hour [":" time-minute [":" time-second [time-secfrac]]]
          [time-zone]

time-hour = 2DIGIT       ;00-23

time-minute = 2DIGIT     ;00-59
time-second = 2DIGIT     ;00-60 (leap second)

time-secfrac = "," 1*DIGIT

time-zone = "Z" / time-numzone

time-numzome = sign time-hour [":"] time-minute

utc-offset = ("+" / "-") time-hour ":" time-minute

iana-valuespec = <a publicly-defined valuetype format, registered
                    with IANA, as defined in section 12 of this
                    document>

vcardparameter = encodingparam
                         / valuetypeparam
                         / languageparam
                         / pref-param
                         / pid-param

encodingparam = "encoding" "=" encodingtype

encodingtype = "b"       ; from [RFC2047]
                     / iana-token  ; registered as described in
                                   ; section 12 of this document

valuetypeparam = "value" "=" valuetype

valuetype = "uri"        ; URI from Appendix A of [RFC3986]
                     / "text"
                     / "date"
                     / "time"
                     / "date-time" ; date time
                     / "integer"
                     / "boolean"
                     / "float"
                     / x-name
                     / iana-token  ; registered as described in
                                   ; section 12 of this document

languageparam = "language" "=" Language-Tag
              ; Language-Tag is defined in section 2.1 of RFC 4646

pref-param = "pref"

pid-param = ("pid" "=" pid-value *("," pid-value))
pid-value = 1*DIGIT

decimal = degrees + minutes/60 + seconds/3600.

vcard-entity = 1*(vcard)

vcard        = "BEGIN" ":" "VCARD" 1*CRLF
                 1*(contentline)
       ;A vCard object MUST include the VERSION and FN properties.
                 "END" ":" "VCARD" 1*CRLF

contentline  = [group "."] name *(";" param ) ":" value CRLF
       ; When parsing a content line, folded lines must first
       ; be unfolded according to the unfolding procedure
       ; described above. When generating a content line, lines
       ; longer than 75 characters SHOULD be folded according to
       ; the folding procedure described in [MIME DIR].

group        = "WORK" / "HOME" / iana-token / x-name

name         = iana-token / x-name
       ; Parsing of the param and value is
       ; based on the "name" or type identifier
       ; as defined in ABNF sections below

iana-token   = 1*(ALPHA / DIGIT / "-")
       ; vCard type or parameter identifier registered with IANA

x-name       = "X-" 1*(ALPHA / DIGIT / "-")
       ; Reserved for non-standard use

param        = param-name "=" param-value *("," param-value)

param-name   = iana-token / x-name

param-value  = ptext / quoted-string

ptext        = *SAFE-CHAR

value        = *VALUE-CHAR

quoted-string = DQUOTE QSAFE-CHAR DQUOTE

NON-ASCII    = %x80-FF
       ; Use is restricted by outer MIME object (UTF-8 preferred)

QSAFE-CHAR   = WSP / %x21 / %x23-7E / NON-ASCII
       ; Any character except CTLs, DQUOTE

SAFE-CHAR    = WSP / %x21 / %x23-2B / %x2D-39 / %x3C-7E / NON-ASCII
       ; Any character except CTLs, DQUOTE, ";", ":", ","

VALUE-CHAR   = WSP / VCHAR / NON-ASCII
       ; Any textual character

param        = ""
       ; No parameters allowed
value        = text-value

param        = ""
       ; No parameters allowed

value        = kind-value

kind-value   = "individual" / "group" / "org" / x-name / iana-token

param        = ""
       ; No parameters allowed

value        = text-value
       ; Value MUST be the case insensitive value "VCARD

param        = source-param
       ; Only source parameters allowed

value        = uri

source-param = ("VALUE" "=" "uri")
               / (x-name "=" *SAFE-CHAR)

param        = text-param
       ; Text parameters allowed

value        = text-value

param        = text-param
       ; Text parameters allowed

value        = n-value

n-value      = 0*3(text-value *("," text-value) ";")
                 text-value *("," text-value)
       ; Surname; Given Names; Prefix; Suffix.

param        = text-param / pid-param
       ; Text parameters allowed
value        = text-value-list
param        = pid-param / img-inline-param / img-refer-param

value        = img-inline-value
       ; Value and parameter MUST match

value        =/ img-refer-value
       ; Value and parameter MUST match

param        = ("VALUE" "=" "date")
       ; Only value parameter allowed

param        =/ ("VALUE" "=" "date-time")
       ; Only value parameter allowed

value        = date-value
       ; Value MUST match value type

value        =/ date-time-value
       ; Value MUST match value type

param        = text-param / pref-param / pid-param

value        = adr-value

param        = text-param / pref-param / pid-param

value        = text-value

param        = pref-param / tel-param / pid-param
       ; Only tel parameters allowed

value        = uri-value

tel-param    = "TYPE" "=" tel-type *("," tel-type)
tel-type     = "VOICE" / "FAX" / "CELL" / "PAGER"
                / "VIDEO" / "TEXT" / iana-token / x-name
       ; Values are case insensitive

param        = pref-param / pid-param

value        = text-value
param        = ""
       ; No parameters allowed

value        = utc-offset-value

param        = ""
       ; No parameters allowed

value        = float-value ";" float-value

param        = text-param / pid-param
       ; Only text parameters allowed

value        = text-value

param        = text-param / pid-param
       ; Only text parameters allowed

value        = text-value

param        = pid-param / img-inline-param / img-refer-param

value        = img-inline-value / img-refer-value
       ; Value and parameter MUST match

param        = text-param / pid-param
       ; Only text parameters allowed

value        = org-value

org-value    = *(text-value ";") text-value
       ; First is Organization Name, remainder are Organization Units.

param        = pid-param

value        = uri
       ; Any valid URI scheme

param        = ("TYPE" "=" related-type) / pid-param
       ; Value is case insensitive
value         = uri
       ; Any valid URI scheme

related-type = "parent" / "child" / "sibling" / "manager"
               / "assistant" / iana-token / "X-" word
       ; Values are case insensitive

param        = text-param / pid-param
       ; Only text parameters allowed

value        = text-value-list

param        = text-param / pid-param
       ; Only text parameters allowed
value        = text-value

param        = ""
       ; No parameters allowed

value        = text-value

param        = ["VALUE" "=" "date-time"]
       ; Only value parameters allowed. Values are case insensitive.

param        =/ "VALUE" "=" "date"
       ; Only value parameters allowed. Values are case insensitive.

value        = date-time-value

value        =/ date-value

param        = text-param
       ; Only text parameters allowed

value        = text-value

param        = snd-inline-param / snd-refer-param / pid-param

value        = snd-line-value
       ; Value MUST match value type

value        =/ snd-refer-value
       ; Value MUST match value type

snd-inline-value     = binary-value CRLF
       ; Value MUST be "b" encoded audio content

snd-inline-param     = ("VALUE" "=" "binary")
                       / ("ENCODING" "=" "b")
                       / ("TYPE" "=" *SAFE-CHAR)
       ; Value MUST be an IANA registered audio type

snd-refer-value      = uri
       ; URI MUST refer to audio content of given type
snd-refer-param      = ("VALUE" "=" "uri")
                       / ("TYPE" "=" word)
       ; Value MUST be an IANA registered audio type

param        = ""
       ; No parameters allowed

value        = uri

param        = pid-param

value        = uri

param        = ""
       ; No parameters allowed

value        = text-value
       ; Value MUST be "4.0"

param        = ""
       ; No parameters allowed

value        = "PUBLIC" / "PRIVATE" / "CONFIDENTIAL"
                / iana-token / x-name
       ; Value are case insensitive

param        = key-txt-param / key-bin-param / pid-param

value        = text-value
value        =/ binary-value

key-txt-param = "TYPE" "=" keytype

key-bin-param = ("TYPE" "=" keytype)
                / ("ENCODING" "=" "b")
       ; Value MUST be a "b" encoded key or certificate
keytype      = param-value
       ; Type MUST be a media type as defined in RFC 4288

param        = text-param / (x-name "=" param-value)
       ; Only text or non-standard parameters allowed

value        = text-value

text-param   = ("VALUE" "=" "ptext")
               / ("LANGUAGE" "=" langval)
               / (x-name "=" param-value)

langval      = <a language string as defined in [RFC4646]>

pref-param   = "PREF"

pid-param    = ("PID" "=" pid-value *("," pid-value))
pid-value    = 1*DIGIT

img-inline-value     = binary-value
       ;Value MUST be "b" encoded image content

img-inline-param     = ("VALUE" "=" "binary")
                       / ("ENCODING" "=" "b")
                       / ("TYPE" "=" param-value)
       ;TYPE value MUST be an image media type as defined in RFC 4288

img-refer-value = uri
       ;URI MUST refer to image content of given type

img-refer-param      = ("VALUE" "=" "uri")
                       / ("TYPE" "=" param-value)
       ;TYPE value MUST be an image media type as defined in RFC 4288
adr-value    = 0*6(text-value ";") text-value
       ; PO Box, Extended Address, Street, Locality, Region, Postal
       ; Code, Country Name
text-value-list      = 1*text-value *("," 1*text-value)

text-value   = *(SAFE-CHAR / ":" / DQUOTE / ESCAPED-CHAR)

ESCAPED-CHAR = "\\" / "\;" / "\," / "\n" / "\N"
       ; \\ encodes \, \n or \N encodes newline
       ; \; encodes ;, \, encodes ,

binary-value = <A "b" encoded text value as defined in [RFC2047]>

date-value   = <A single date value as defined in [RFC2425]>

time-value   = <A single time value as defined in [RFC2425]>

date-time-value = <A single date-time value as defined in [RFC2425]>

float-value  = <A single float value as defined in [RFC2425]>

phone-number-value = phone-prefix 1*(SP 1*DIGIT) [phone-ext]

phone-prefix = "+" 1*DIGIT / "(" 1*DIGIT ")"

phone-ext = "ext." 1*DIGIT

uri-value    = <A uri value as defined in [RFC2425]>

utc-offset-value = ("+" / "-") time-hour ":" time-minute
time-hour    = 2DIGIT                ;00-23
time-minute  = 2DIGIT                ;00-59
