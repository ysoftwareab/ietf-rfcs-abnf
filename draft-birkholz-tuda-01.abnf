tuda = [TUDA-Synctoken, TUDA-Verifytoken, TUDA-RestrictionInfo,
           TUDA-Cert, TUDA-Measurement-Log]

Cert = bytes ; an X.509 certificate

PCR-Hash = Hash
Hash = bytes

TUDA-Cert = [AIK-Cert, TSA-Cert]; maybe split into two for SNMP
AIK-Cert = Cert
TSA-Cert = Cert

                    Figure 2: TUDA-Cert element in CDDL

TUDA-Synctoken = [
     left: TickStampBlob-Output,
     timestamp: TimeStampToken,
     right: TickStampBlob-Output,
TimeStampToken = bytes ; RFC 3161

TickStampBlob-Output = [
     currentTicks: TPM-CURRENT-TICKS,
     sig: bytes,
TPM-CURRENT-TICKS = [
     currentTicks: uint
     ? (
       tickRate: uint
       tickNonce: TPM-NONCE
     )
TPM-NONCE = bytes .size 20

                    Figure 4: TUDA-Sync element in CDDL

TUDA-RestrictionInfo = [Composite,
                         restrictedKey_Pub: Pubkey,
                         TPM-CERTIFY-INFO]
PCRSelection = bytes .size (2..4) ; used as bit string

Composite = [
   bitmask: PCRSelection,
   values: [*PCR-Hash],
Pubkey = bytes ; do we need to expose structure here?

TPM-CERTIFY-INFO = [
   ; we don't encode TPM-STRUCT-VER:
   ; these are 4 bytes always equal to h'01010000'
   keyUsage: uint, ; 4byte? 2byte?
   keyFlags: bytes .size 4, ; 4byte
   authDataUsage: uint, ; 1byte (enum)
   algorithmParms: TPM-KEY-PARMS,
   pubkeyDigest: Hash,
   ; we don't encode TPM-NONCE data, which is 20 bytes, all zero
   parentPCRStatus: bool,
   ; no need to encode pcrinfosize
   pcrinfo: TPM-PCR-INFO,        ; we have exactly one
TPM-PCR-INFO = [
     pcrSelection: PCRSelection; /* TPM_PCR_SELECTION */
     digestAtRelease: PCR-Hash;  /* TPM_COMPOSITE_HASH */
     digestAtCreation: PCR-Hash; /* TPM_COMPOSITE_HASH */
TPM-KEY-PARMS = [
   ; algorithmID: uint, ; <= 4 bytes -- not encoded, constant for TPM1.2
   encScheme: uint, ; <= 2 bytes
   sigScheme: uint, ; <= 2 bytes
   parms: TPM-RSA-KEY-PARMS,
TPM-RSA-KEY-PARMS = [
   ; "size of the RSA key in bits":
   keyLength: uint
   ; "number of prime factors used by this RSA key":
   numPrimes: uint
   ; "This SHALL be the size of the exponent":
   exponentSize: null / uint / biguint
   ; "If the key is using the default exponent then the exponentSize
   ; MUST be 0" -> we represent this case as null
TUDA-Measurement-Log = [*PCR-Event]
PCR-Event = [
     type: PCR-Event-Type,
     pcr: uint,
     template-hash: PCR-Hash,
     filedata-hash: tagged-hash,
     pathname: text; called filename-hint in ima (non-ng)
PCR-Event-Type = &(
     bios: 0
     ima: 1
     ima-ng: 2
TUDA-Verifytoken = TickStampBlob-Output

                   Figure 8: TUDA-Verify element in CDDL

