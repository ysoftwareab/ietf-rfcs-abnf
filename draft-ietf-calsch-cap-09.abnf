calprops   = 2*(

              ; 'prodid' and 'version' are both REQUIRED,
              ; but MUST NOT occur more than once.
              ;
                prodid /version /

              ; These are optional, but MUST NOT occur
              ; more than once.
              ;
                calscale        /
                method          /
                cmd             /

              ; These are optional, and may occur more
              ; than once.
              ;
                target          /
                iana-prop       /
                x-prop


icalbody = calprops component

             ; If the "VCALENDAR" component contains the "CMD"
             ; component then the 'component' is optional:
             ;
             / calprops     ; Which MUST include a "CMD" property


alarmc     = "BEGIN" ":" "VALARM" CRLF
   	       alarm-seq
   	       iana-prop
   	       (audioprop / dispprop / emailprop / procprop)
   	       "END" ":" "VALARM" CRLF

alarm-seq   = "SEQUENCE" alarmseqparam ":" integer CRLF

alarmseqparam = *( ";" xparam)
   	      / ";" local-param


trigger    = "TRIGGER" 1*(";" enable-param) (trigrel / trigabs)


enable-param  = "ENABLE" "=" ("TRUE" / "FALSE")


local-param  = "LOCAL" "=" ("TRUE" / "FALSE")



target="OWNER"/>) Related to the "CAL-OWNERS()" (Section 6.1.1.1)
capurl   = "cap://" csid [ "/" relcalid ]
csid     = hostport   ; As defined in Section 3.2.2 of RFC 2396
relcalid = *uric      ; As defined in Section 2 of RFC 2396


cal-query  = "SELECT"   SP   cap-val  SP
   	       "FROM"     SP   comp-name SP
   	       "WHERE"    SP   cap-expr

   	     / "SELECT" SP cap-cols SP
   	       "FROM"   SP comp-name

cap-val    = cap-cols / param
   	     / ( cap-val "," cap-val )

cap-cols   = cap-col / ( cap-cols "," cap-col)
   	       / "*"

                  ; A 'cap-col' is:
                  ;
                  ; Any property name ('cap-prop') found in the component
   	       ; named in the 'comp-name' used in the "FROM" clause.
   	       ;
   	       ;   SELECT ORGANIZER FROM VEVENT ...
   	       ;
   	       ; OR
   	       ;
   	       ; A component name ('comp-name') of an existing component
                  ; contained inside of the 'comp-name' used in the "FROM"
                  ; clause.
   	       ;
   	       ;   SELECT VALARM FROM VEVENT ...
   	       ;
   	       ; OR
   	       ;
   	       ; A component name ('comp-name') of an existing
                  ; component contained inside of the 'comp-name' used
                  ; in the "FROM" clause folowed by a property
                  ; name ('cap-prop') to be selected from that component.
                  ; (comp-name "." cap-prop)
   	       ;
   	       ;   SELECT VALARM.TRIGGER FROM VEVENT ...

cap-col    = comp-name
                / comp-name "." cap-prop

comp-name  = "VEVENT"  / "VTODO"     / "VJOURNAL" / "VFREEBUSY"
                / "VALARM"  / "DAYLIGHT"  / "STANDARD" / "VAGENDA"
                / "VCAR"    / "VCALSTORE" / "VQUERY"   / "VTIMEZONE"
                / x-comp    / iana-comp

cap-prop   = ; A property that may be in the 'cap-comp' named
                  ; in the "SELECT" clause.

cap-expr   = "(" cap-expr ")"
   	     / cap-term

cap-term   = cap-expr SP cap-logical SP cap-expr
   	     / cap-factor

cap-logical= "AND" / "OR"

cap-factor = cap-colval SP cap-oper SP col-value
   	     / cap-colval SP "NOT LIKE" SP col-value
   	     / cap-colval SP "LIKE" SP col-value
   	     / cap-colval SP "IS NULL"
   	     / cap-colval SP "IS NOT NULL"
   	     / col-value SP "NOT IN" cap-colval"
   	     / col-value SP "IN" cap-colval"
   	     / "STATE()" "=" ( "BOOKED"
   			      / "UNPROCESSED"
   			      / "DELETED" )

cap-colval = cap-col /  param

param      = "PARAM(" cap-col "," cap-param ")"

cap-param  = ; Any parameter that may be contained in the cap-col
col-value  = col-literal
   	     / "SELF()"
   	     / "CAL-OWNERS()"
   	     / "CAL-OWNERS(" cal-address ")"
   	     / "CURRENT-TARGET()"

cal-address = ; A CALID as define by CAP

col-literal = "'" literal-data "'"

literal-data = ; Any data that matches the value type of the
   		; column that is being compared. That is you can
   		; not compare PRIORITY to "some string" because
   		; PRIORITY has a value type of integer. If it is
   		; not preceded by the LIKE element, any '%' and '_'
   		; characters in the literal data are not treated as
   		; wildcard characters and do not have to be backslash
   		; escaped.
   		;
   		; OR
   		;
   		; If the literal-data is preceded by the LIKE
   		; element it may also contain the '%' and '_'
   		; wildcard characters. And if the literal data
   		; that is comparing contains any '%' or '_'
   		; characters, they MUST BE backslash escaped as
   		; described in the notes below in order for them not
   		; to be treated as wildcard characters.

cap-oper    = "="
   	      / "!="
   	      / "<"
   	      / ">"
   	      / "<="
   	      / ">="


SP          = ; A single white space ascii character
x-comp      = ; As defined in RFC 2445 section 4.6

iana-comp   = ; As defined in RFC 2445 section 4.6



upn        = "@"
   	/ [ dot-atom-text ] "@" dot-atom-text

   	  ; dot-atom-text is defined in RFC 2822



upn-filter    = "CAL-OWNERS()" /

   	     "NOT CAL-OWNERS()" /
   	     "*" /
   	     [ "*" / dot-atom-text ] "@" ( "*" / dot-atom-text )

   	    ; dot-atom-text is defined in RFC 2822


enable-param       = "ENABLE" "=" boolean


local-param        = "LOCAL" "=" boolean


allow-conflict     = "ALLOW-CONFLICT"
   		  *(";" xparam) ":" boolean CRLF


attcounter   = "ATT-COUNTER" *(";" xparam) ":" cal-address CRLF


CALID   = "CALID" *(";" xparam) ":" calid CRLF


calmaster = "CALMASTER" *(";" xparam) ":" uri CRLF

uri = IANA registered uri and defined by RFC 2445


carid      = "CARID" *(";" xparam) ":" text CRLF


csid = "CSID" *(";" xparam) ":" capurl CRLF


decreed      = "DECREED" *(";" xparam) ":" boolean CRLF


default-charset     = "DEFAULT-CHARSET" *(";" xparam)
   		     ":" text CRLF


default-locale     = "DEFAULT-LOCALE" *(";" xparam)
   		  ":" language CRLF

language = Text identifying a locale, as defined in [CHARPOL]


default-tzid       = "DEFAULT-TZID" *(";" xparam)
   		  ":" [tzidprefix] text CRLF


def-vcars      = "DEFAULT-VCARS" *(";" xparam) ":" text
   	     *( "," text ) CRLF


deny       = "DENY" *(";" xparam) ":" upn-filter CRLF


expand     = "EXPAND" *(";" xparam) ":" ("TRUE" / "FALSE") CRLF


grant     = "GRANT" *(";" xparam) ":" upn-filter CRLF


maxdate    = "MAXDATE" *(";" xparam) ":" date-time CRLF


mindate    = "MINDATE" *(";" xparam) ":" date-time CRLF


name = "MULTIPART" nameparam ":" text CRLF

nameparam = *(
   	    ; the following is optional,
   	    ; and MAY occur more than once

   	    ( ";" xparam )
   	  )


name = "NAME" nameparam ":" text CRLF

nameparam = *(
   	    ; the following is optional,
   	    ; but MUST NOT occur more than once

   	    ( ";" languageparam ) /

   	    ; the following is optional,
   	    ; and MAY occur more than once

   	    ( ";" xparam )
   	  )

languageparam = ; As defined in [iCAL].


owner = "OWNER" *(";" xparam) ":" upn CRLF


perm      = "PERMISSION" *(";" xparam) ":" permvalue CRLF

permvalue = ( "SEARCH" / "CREATE" / "DELETE" / "MODIFY" / all )

all         = "*"


query      = "QUERY" *(";" xparam) ":" cal-query CRLF


queryid      = "QUERYID" *(";" xparam) ":" text CRLF


rstatus  = "REQUEST-STATUS" rstatparam ":"
   	  statcode ";" *(statdesc ) ";" *(extdata)

rstatparam  = *(
   	  ; the following is optional,
   	  ; but MUST NOT occur more than once

   	      (";" languageparm) /

   	  ; the following is optional,
   	  ; and MAY occur more than once

   	      (";" xparam)

   	    )

statcode  = 1*DIGIT *("." 1*DIGIT)
   	    ;Hierarchical, numeric return status code

statdesc  = text
   	    ;An optional textual status description, content is
   	    ;decided by the implementor. May be empty.

extdata  = text
   	    ; Textual exception data. For example, the offending
   	    ; property name and value or complete property line.


restrict      = "RESTRICTION" *(";" xparam) ":" cal-query CRLF
scope      = "SCOPE" *(";" xparam) ":" cal-query CRLF


target   = "TARGET" *(";" xparam) ":" capurl CRLF


transp   = "TRANSP" *(";" xparam) ":" transvalue CRLF

agenda      = "BEGIN" ":" "VAGENDA" CRLF
   	    agendaprop
   	   "END" ":" "VAGENDA" CRLF

agendaprop  = *(
               ; The following MUST occur exactly once.
               ;
                 allow-conflict / calid / calscale / created
               / default-charset / default-locale
               / default-tzid / last-modified /

               ; The following MUST occur at least once.
               ; and the value MUST NOT be empty.

               / owner

               ; The following are optional,
               ; and MAY occur more than once.

               / name / related-to / iana-token / x-prop / x-comp
              )


agendac     = "BEGIN" ":" "VAGENDA" CRLF
   	    agendacprop
   	   "END" ":" "VAGENDA" CRLF

agendacprop  = *(
                ; The following MUST occur exactly once.
                ;
                  allow-conflict / calid / calscale
                / default-charset / default-locale
                / default-tzid /

                ; The following MUST occur at least once.
                ; and the value MUST NOT be empty.
                ;
                / owner

                ; The following are optional,
                ; and MAY occur more than once.
                ;
                / name / related-to / iana-token / x-prop / x-comp
               )


calstorec     = "BEGIN" ":" "VCALSTORE" CRLF
   	     calstoreprop
   	     "END" ":" "VCALSTORE" CRLF

calstoreprop  = *(

   	       ; the following MUST occur exactly once

   		 allow-conflict / calscale / calmaster
   	       / created / csid / default-charset
   	       / default-locale / default-vcars
   	       / default-tzid / last-modified

   	       ; the following are optional,
   	       ; and MAY occur more than once

   	       / children / name / related-to

   	      )


carc    =  "BEGIN" ":" "VCAR" CRLF
   	carprop 1*rightc
   	"END" ":" "VCAR" CRLF

carprop = 1*(

        ; 'carid' is REQUIRED,
        ; but MUST NOT occur more than once

        carid /

        ; the following are OPTIONAL,
        ; and MAY occur more than once

        name / x-prop / iana-prop
        )


rightc    =  "BEGIN" ":" "VRIGHT" CRLF
   	  rightprop
   	  "END" ":" "VRIGHT" CRLF

rightprop = 2*(

             ; either 'grant' or 'deny' MUST
             ; occur at least once
             ; and MAY occur more than once

              grant / deny /

             ; 'permission' MUST occur at least once
             ; and MAY occur more than once

              permission /

             ; the following are optional,
             ; and MAY occur more than once

              scope / restriction / x-prop / iana-prop

          )
replyc           =  "BEGIN" ":" "VREPLY" CRLF
                       any-prop-or-comp
                       "END" ":" "VREPLY" CRLF

any-prop-or-comp = ; Zero or more iana or experimental
                      ; properties and components, in any order.


queryc    =  "BEGIN" ":" "VQUERY" CRLF
                queryprop
                "END" ":" "VCAR" CRLF

queryprop = 1*(

             ; 'queryid' is OPTIONAL but MUST NOT occur
             ; more than once. If the "TARGET" property
             ; is supplied then the "QUERYID" property
             ; MUST BE supplied.
             ;
              queryid / target

             ; the following are OPTIONAL, and MAY occur
             ; more than once
             ;
             / name / x-prop / iana-prop

             ; the following MUST occur at least once.
             ;
             / query

           )


cmd              = "CMD" (
                    / abort-cmd
                    / continue-cmd
                    / create-cmd
                    / delete-cmd
                    / generate-uid-cmd
                    / get-capability-cmd
                    / identify-cmd
                    / modify-cmd
                    / move-cmd
                    / reply-cmd
                    / search-cmd
                    / set-locale-cmd
                     ) CRLF


id-param         = ";" "ID" "=" unique-id
                    ; The text value supplied is a unique value
                    ; shared between the CUA and CS to uniquely
                    ; identify the instance of command in the
                    ; the current CUA session. The value has
                    ; no meaning to other CUAs or other sessions.

unique-id        = ; text


localize-param   = ";" "LOCALIZE" "=" beep-localize
                    ; The value supplied MUST BE one value from the initial
                    ; BEEP greeting 'localize' attribute specifying
                    ; the locale to use for error messages during
                    ; this instance of the command sent.

beep-localize    = ; text

latency-param    = ";" "LATENCY" "=" latency-sec
                    ; The value supplied in the time in seconds.
                    ; If latency is supplied then action MUST BE
                    ; supplied.

latency-sec      = integer

action-parm      = ";" "ACTION" "=" ( "ASK" / "ABORT" )
                    ; If latency is supplied then action MUST BE
                    ; supplied.

option-param     = ";" "OPTIONS" "=" cmd-specific

cmd-specific     = ; The value supplied is dependent on the
                      ; CMD value. See the specific CMDs below
                      ; for the correct values to use for each
                      ; CMD.

option-value     = paramtext


abort-cmd   = abortparam ":" "ABORT"

abortparam   = *(

   	     ; the following are optional,
   	     ; but MUST NOT occur more than once

   	       id-param
   	     / localize-param

   	     ; the following is optional,
   	     ; and MAY occur more than once

   	     / (";" xparam)

   	     )


abort-reply  = "BEGIN" ":" "VCALENDAR" CRLF
   		calprops
   		abort-vreply
   	       "END" ":" "VCALENDAR" CRLF

abort-vreply  = "BEGIN" ":" "VREPLY" CRLF
   		 request-status
   		*(x-prop)
   		"END" ":" "VREPLY" CRLF



continue-cmd   = continueparam ":" "CONTINUE"

continueparam   = *(
                   ; the following are optional,
                   ; but MUST NOT occur more than once

                     id-param
                   / localize-param
                   / latency-param

                   ; the following MUST occur exactly once and only
                   ; when the latency-param has been supplied and
                   ; MUST NOT be supplied if the latency-param is
                   ; not supplied.

                   / action-param

                   ; the following is optional,
                   ; and MAY occur more than once

                   / (";" xparam)

                     )

continue-reply   = "BEGIN" ":" "VCALENDAR" CRLF
                      calprops
                      continue-vreply
                      "END" ":" "VCALENDAR" CRLF

continue-vreply  = "BEGIN" ":" "VREPLY" CRLF
                      request-status
                      *(x-prop)
                      "END" ":" "VREPLY" CRLF



create-cmd     = createparam ":" "CREATE"

createparam    = *(

                  ; the following are optional,
                  ; but MUST NOT occur more than once

                   id-param
                  / localize-param
                  / latency-param

                  ; the following MUST occur exactly once and only
                  ; when the latency-param has been supplied and
                  ; MUST NOT be supplied if the latency-param is
                  ; not supplied.

                  / action-param

                  ; the following is optional,
                  ; and MAY occur more than once

                  / (";" xparam)

                 )


create-reply   = "BEGIN" ":" "VCALENDAR" CRLF
                     calprops
                     1*(create-vreply)
                     "END" ":" "VCALENDAR" CRLF

create-vreply  = "BEGIN" ":" "VREPLY" CRLF
                    created-id
                    request-status
                    *(x-prop)
                    "END" ":" "VREPLY" CRLF

                  ; Where the id is appropriate for the
                  ; type of object created:
                  ;
                  ; VAGENDA = calid
                  ; VCAR = carid
                  ; VEVENT, VFREEBUSY, VJOURNAL, VTODO = uid
                  ; VQUERY = queryid
                  ; x-component = x-id
                  ;
created-id    = ( calid / carid / uid / queryid /
                     tzid / sequence / x-id)


create-minimum = "BEGIN" ":" "VCALENDAR" CRLF
                    calprops
                    *(iana-prop)
                    *(x-prop)
                    1*(create-comp)
                    "END" ":" "VCALENDAR" CRLF

                  ; If The following  contain the "METHOD"
                  ; property they MUST conform to [iTIP].
                  ;
create-comp = agendac / carc / queryc
                  / timezonec / freebusyc
                  / eventc / todoc / journalc
                  / iana-comp / x-component


delete-cmd   = deleteparam ":" "DELETE"

deleteparam  = *(

                ; the following are optional,
                ; but MUST NOT occur more than once

                 id-param
                / localize-param
                / latency-param
                / option-param "MARK"

                ; The following MUST occur exactly once and only
                ; when the latency-param has been supplied and
                ; MUST NOT be supplied if the latency-param is
                ; not supplied.

                / action-param

                ; the following is optional,
                ; and MAY occur more than once

                / (";" xparam)

               )


delete-reply   = "BEGIN" ":" "VCALENDAR" CRLF
                    calprops
                    1*(delete-vreply)
                    "END" ":" "VCALENDAR" CRLF


delete-vreply  = "BEGIN" ":" "VREPLY" CRLF
                    deleted-id
                    request-status
                    "END" ":" "VREPLY" CRLF

                   ; Where the id is appropriate for the
                   ; type of object deleted:
                   ;
                   ; VAGENDA = calid
                   ; VCAR = carid
                   ; VEVENT, VFREEBUSY, VJOURNAL, VTODO = uid
                   ; VQUERY = queryid
                   ; ALARM = sequence
                   ; x-component = x-id
                   ;
deleted-id    = ( calid / carid / uid / uid dtstamp
                  / queryid / tzid / sequence / x-id )


generate-uid-cmd   = genuidparam ":" "GENERATE-UID"

genuidparam     = *(
                   ; The following are optional,
                   ; but MUST NOT occur more than once.

                    id-param
                   / localize-param
                   / latency-param

                   ; The following MUST occur exactly once and only
                   ; when the latency-param has been supplied and
                   ; MUST NOT be supplied if the latency-param is
                   ; not supplied.

                   / action-param

                   ; The following is optional,
                   ; and MAY occur more than once.

                   / (";" xparam)

                   ; The following MUST BE supplied exactly once.
                   ; The value specifies the number of UIDs to
                   ; be returned.

                   / option-param integer

                 )

gen-reply   = "BEGIN" ":" "VCALENDAR" CRLF
                 calprops
                 1*(gen-vreply)
                 "END" ":" "VCALENDAR" CRLF


gen-vreply  = "BEGIN" ":" "VREPLY" CRLF
                 *(uid)
                 request-status
                 "END" ":" "VREPLY" CRLF

get-capability-cmd   = capibiltyparam ":" "GET-CAPABILITY"

capibiltyparam     = *(

                      ; the following are optional,
                      ; but MUST NOT occur more than once
                      ;
                       id-param / localize-param / latency-param

                      ; the following MUST occur exactly once and only
                      ; when the latency-param has been supplied and
                      ; MUST NOT be supplied if the latency-param is
                      ; not supplied.
                      ;
                      / action-param

                      ; the following is optional,
                      ; and MAY occur more than once
                      ;
                      / (";" xparam)

                      )


identify-cmd    = identifyparam ":" "IDENTIFY"

identifyparam   = *(

                        ; the following are optional,
                        ; but MUST NOT occur more than once

                          id-param
                        / localize-param
                        / latency-param

                        ; the following MUST occur exactly once and only
                        ; when the latency-param has been supplied and
                        ; MUST NOT be supplied if the latency-param is
                        ; not supplied.

                        / action-param

                        ; the following is optional,
                        ; and MAY occur more than once

                        / (";" xparam)

                        ; The value is the UPN of the requested
                        ; identity. If not supplied it is a request
                        ; to return to the original authenticated identity.

                        / option-param upn

                        )

         Response:

            "REQUEST-STATUS" with only one of the following
            request-status codes:

                  2.0 Successful.

                  6.4 Identity not permitted. VCAR restriction.
modify-cmd   = modifyparam ":" "MODIFY"

modifyparam   = *(

                        ; the following are optional,
                        ; but MUST NOT occur more than once

                          id-param
                        / localize-param
                        / latency-param

                        ; the following MUST occur exactly once and only
                        ; when the latency-param has been supplied and
                        ; MUST NOT be supplied if the latency-param is
                        ; not supplied.

                        / action-param

                        ; the following is optional,
                        ; and MAY occur more than once

                        / (";" xparam)

                        )


move-cmd   = moveparam ":" "MOVE"

moveparam   = *(

                        ; the following are optional,
                        ; but MUST NOT occur more than once

                          id-param
                        / localize-param
                        / latency-param

                        ; the following MUST occur exactly once and only
                        ; when the latency-param has been supplied and
                        ; MUST NOT be supplied if the latency-param is
                        ; not supplied.

                        / action-param

                        ; the following is optional,
                        ; and MAY occur more than once

                        / (";" xparam)

                        )


move-reply  = "BEGIN" ":" "VCALENDAR" CRLF
                          calprops
                          1*(move-vreply)
                         "END" ":" "VCALENDAR" CRLF


move-vreply  = "BEGIN" ":" "VREPLY" CRLF
                          move-id
                           request-status
                         "END" ":" "VREPLY" CRLF

                         ; Where the id is appropriate for the
                         ; type of object moved:
                         ;
                         ; VAGENDA = calid
                         ; VCAR = carid
                         ; VEVENT, VFREEBUSY, VJOURNAL, VTODO = uid
                         ; VQUERY = queryid
                         ; ALARM = sequence
                         ; x-component = x-id
                         ;
move-id    =  ( calid / carid / uid / uid dtstamp
                          / queryid / tzid / sequence / x-id)


reply-cmd    = replyparam ":" "REPLY"

replyparam   = *(

   	             ; The 'id' parameter value MUST BE exactly the
                        ; same as the value sent in the original
                        ; CMD property. If the original CMD did
                        ; not have an 'id' parameter, then the 'id'
                        ; MUST NOT be supplied in the REPLY.

                        id-param

                        ; the following is optional,
                        ; and MAY occur more than once

                        / (";" xparam)

                        )



search-cmd   = searchparam ":" "SEARCH"

searchparam   = *(

                        ; the following are optional,
                        ; but MUST NOT occur more than once

                          id-param
                        / localize-param
                        / latency-param

                        ; the following MUST occur exactly once and only
                        ; when the latency-param has been supplied and
                        ; MUST NOT be supplied if the latency-param is
                        ; not supplied.

                        / action-param

                        ; the following is optional,
                        ; and MAY occur more than once

                        / (";" xparam)

                        )


setlocale-cmd   = searchparam ":" "SET-LOCALE"

setlocaleparam   = *(

                           ; the following are optional,
                           ; but MUST NOT occur more than once

                             id-param
                           / localize-param
                           / latency-param
                           / setlocale-option

                           ; the following MUST occur exactly once and only
                           ; when the latency-param has been supplied and
                           ; MUST NOT be supplied if the latency-param is
                           ; not supplied.

                           / action-param

                           ; the following is optional,
                           ; and MAY occur more than once

                           / (";" xparam)

setlocal-option   = option-param newlocale

newlocale   = ; Any locale supplied in the initial BEEP
                             ; "greeting" "localize" parameter and
                             ; and any charset supported by the CS
                             ; and listed in the DEFAULT-CHARSET property
                             ; of the VCALSTORE.

                           )


setlocale-reply  = "BEGIN" ":" "VCALENDAR" CRLF
                              calprops
                              1*(setlocale-vreply)
                             "END" ":" "VCALENDAR" CRLF

setlocale-vreply  = "BEGIN" ":" "VREPLY" CRLF
                              request-status
                              "END" ":" "VREPLY" CRLF



continue-cmd   = continueparam ":" "CONTINUE"

continueparam   = *(

                        ; the following are optional,
                        ; but MUST NOT occur more than once

                          id-param
                        / localize-param

                        / (";" xparam)

                        )

timeout-reply  = "BEGIN" ":" "VCALENDAR" CRLF
                           calprops
                           timeout-vreply
                          "END" ":" "VCALENDAR" CRLF

timeout-vreply  = "BEGIN" ":" "VREPLY" CRLF
                            request-status
                           *(x-prop)
                           "END" ":" "VREPLY" CRLF



