



Registration Protocols Extensions                            M. Loffredo
Internet-Draft                                             M. Martinelli
Intended status: Standards Track                     IIT-CNR/Registro.it
Expires: November 26, 2017                                 S. Hollenbeck
                                                           Verisign Labs
                                                            May 25, 2017


  Registration Data Access Protocol (RDAP) Query Parameters for Result
                           Sorting and Paging
            draft-loffredo-regext-rdap-sorting-and-paging-00

Abstract

   The Registration Data Access Protocol (RDAP) does not include core
   functionality for clients to provide sorting and paging (subsetting)
   parameters for control of large result sets.  This omission can lead
   to unpredictable server processing of queries and client processing
   of responses.  This unpredictability can be greatly reduced if
   clients can provide servers with their preferences for managing
   response values.  This document describes RDAP query extensions that
   allow clients to specify their preferences for sorting and paging
   result sets.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 26, 2017.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents



Loffredo, et al.        Expires November 26, 2017               [Page 1]

Internet-Draft           RDAP Sorting and Paging                May 2017


   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Conventions Used in This Document . . . . . . . . . . . .   3
   2.  RDAP Query Parameter Specification  . . . . . . . . . . . . .   4
     2.1.  "count" parameter . . . . . . . . . . . . . . . . . . . .   4
     2.2.  "sortby" parameter  . . . . . . . . . . . . . . . . . . .   5
     2.3.  "limit" and "offset" parameters . . . . . . . . . . . . .   8
       2.3.1.  Use of "links" property . . . . . . . . . . . . . . .   9
   3.  Negative answers  . . . . . . . . . . . . . . . . . . . . . .  10
   4.  RDAP Conformance  . . . . . . . . . . . . . . . . . . . . . .  11
   5.  Implementation Considerations . . . . . . . . . . . . . . . .  11
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  12
     6.1.  Registry of References to RDAP Properties . . . . . . . .  13
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  13
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  14
     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  14
     8.2.  Informative References  . . . . . . . . . . . . . . . . .  15
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  16

1.  Introduction

   The availability of functionality for result sorting and paging
   provides benefits to both clients and servers in the implementation
   of RESTful services [REST].  These benefits include:

   o  Reducing the server response bandwidth requirements;
   o  Improving server response time;
   o  Improvement in query precision and, consequently, obtaining more
      reliable results;
   o  Decreasing server query processing load.

   Approaches to implementing features for result sorting and paging can
   be grouped into two main categories:

   1.  Sorting and paging are implemented through the introduction of
       additional parameters in the query string (i.e.  ODATA protocol
       [OData-Part1]);
   2.  Information related to the number of results and the specific
       portion of the result set to be returned, in addition to a set of



Loffredo, et al.        Expires November 26, 2017               [Page 2]

Internet-Draft           RDAP Sorting and Paging                May 2017


       ready-made links for the result set scrolling, are inserted in
       the HTTP header of the request/response.

   However, there are some drawbacks associated with use of the HTTP
   header.  First, the header properties cannot be set directly from a
   web browser.  Moreover, in an HTTP session, the information on the
   status (i.e. the session identifier) is usually inserted in the
   header or in the cookies, while the information on the resource
   identification or the search type is included in the query string.
   The second approach is therefore not compliant with the HTTP standard
   [RFC2616].  As a result, this document describes a specification
   based on use of query parameters.

   Currently the RDAP protocol [RFC7482] defines two query types:

   o  lookup: the server returns only one object;
   o  search: the server returns a collection of objects.

   While the lookup query does not produce issues in the management of
   large result sets, the search query can potentially generate a large
   result set that could be truncated according to the limits of the
   server.  In addition, it is not possible to obtain the total number
   of the objects found that might be returned in a search query
   response [RFC7483].  Lastly, there is no mechanism to specify sort
   criteria to return the most relevant objects at the beginning of the
   result set.

   The protocol described in this specification extends RDAP query
   capabilities to enable result sorting and paging, by adding four new
   query parameters that can be applied to RDAP search path segments.
   The service is implemented using the Hypertext Transfer Protocol
   (HTTP) [RFC7230] and the conventions described in RFC 7480 [RFC7480].

   The implementation of these parameters is technically feasible, as
   operators for counting, sorting and paging rows are currently
   supported by the major RDBMSs.  Impact on the current state of RDAP
   implementation is estimated to be quite low.

1.1.  Conventions Used in This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].








Loffredo, et al.        Expires November 26, 2017               [Page 3]

Internet-Draft           RDAP Sorting and Paging                May 2017


2.  RDAP Query Parameter Specification

   These new query parameters are OPTIONAL extensions of path segments
   defined in RFC 7482 [RFC7482].  The query parameters are as follows:

   o  "count": a boolean value that allows a client to request the total
      number of objects found (that due to truncation can be different
      from the number of returned objects);
   o  "sortby": a character value that allows a client to request a
      specific sort order for the result set;
   o  "limit" and "offset": numeric values that allow a client to
      request a specific portion of the entire result set and to use the
      "links" property to provide a ready-made reference to the next
      page of the result set.

   Augmented Backus-Naur Form (ABNF) [RFC5234] is used in the following
   sections to describe the formal syntax of these new parameters.

   FOR DISCUSSION: Do we need to describe value constraints, error
   conditions and returned error codes relative to the paging
   parameters?

2.1.  "count" parameter

   Currently the RDAP protocol does not allow a client to determine the
   total number of the results in a query response when the result set
   is truncated.  This is rather inefficient because the user cannot
   evaluate the query precision and, at the same time, cannot receive
   information that could be relevant.

   The new parameter "count" provides additional functionality
   (Figure 1) that allows a client to request information from the
   server that specifies the number of elements found to match a
   particular search pattern.


   https://example.com/rdap/domains?name=*nr.com&count=true

       Figure 1: Example of RDAP query reporting the count parameter

   The ABNF syntax is the following:

      count = "count" EQ ( trueValue / falseValue )
      trueValue = ("true" / "yes" / "1")
      falseValue = ("false" / "no" / "0")
      EQ = "="





Loffredo, et al.        Expires November 26, 2017               [Page 4]

Internet-Draft           RDAP Sorting and Paging                May 2017


   A trueValue means that the server MUST provide the total number of
   the objects in the paging_count property of the response (Figure 2).
   A falseValue means that the server MUST NOT provide this number.


   {
     "rdapConformance": [
           "rdap_level_0",
           "paging_level_0"
     ],
     ...
     "paging_count":"73",
     "domainSearchResults": [
       ...
     ]
   }

       Figure 2: Example of RDAP response with paging_count property

2.2.  "sortby" parameter

   The RDAP protocol does not provide any capability to specify response
   value sort criteria.  A server could implement a default sorting
   scheme according to the object class, but this feature is not
   mandatory and might not meet user requirements.  Sorting can be
   addressed by the client, but this solution is rather inefficient.
   Sorting and paging using features provided by the DBMS used by the
   RDAP server could help avoid truncation of relevant results and allow
   for scrolling the result set using subsequent queries.

   The "sortby" parameter allows the client to ask the server to sort
   the results according to the values of one or more properties and
   according to the sort direction of each property.  The ABNF syntax is
   the following:

      sortby = "sortby" EQ sortbyItem *( "," sortbyItem )
      sortbyItem = property-ref [":" ( "a" / "d" ) ]

   "a" means that the ascending sort MUST be applied, "d" means that the
   descending sort MUST be applied.  If the sort direction is absent, an
   ascending sort MUST be applied (Figure 3).

   In the sortby ABNF syntax, property-ref represents a reference to a
   property of an RDAP object.  Such a reference could be expressed by
   using a JSON Path.  The JSON Path in a JSON document [RFC7159] is
   equivalent to the XPath [W3C.CR-xpath-31-20161213] in a XML document.
   For example, the JSON Path to select the value of the ldhName
   property inside an RDAP domain object is "$.ldhName", where $



Loffredo, et al.        Expires November 26, 2017               [Page 5]

Internet-Draft           RDAP Sorting and Paging                May 2017


   identifies the root of the document (DOM).  Another way to select a
   value inside a JSON document is the JSON Pointer [RFC6901].  While
   JSON Path or JSON Pointer are both standard ways to select any value
   inside JSON data, neither is particularly easy to use (e.g.
   "$.events[?(@.eventAction='registration')].eventDate" is the JSON
   Path expression of the registration date in a RDAP domain object).

   Therefore, this specification provides a definition of property-ref
   in terms of RDAP properties.  However, not all the RDAP properties
   are suitable to be used in sort criteria, such as:

   o  properties providing service information (e.g. links, notices,
      remarks, etc.);
   o  multivalued properties (e.g. status, roles, variants, etc.);
   o  properties modeling relationships to other objects (e.g.
      entities).

   On the contrary, some properties expressed as values of other
   properties (e.g. registration date) could be used in such a context.

   In the following, a list of the proposed properties for sort criteria
   is presented.  The properties are divided in two groups, object
   common properties and object specific properties.

   o  Object common properties.  Object common properties are derived
      from the merge of the "eventAction" and the "eventDate"
      properties.  The following values of sortby are defined:

      *  registrationDate
      *  reregistrationDate
      *  lastChangedDate
      *  expirationDate
      *  deletionDate
      *  reinstantiationDate
      *  transferDate
      *  lockedDate
      *  unlockedDate

   o  Object specific properties.  With regard to the specific
      properties, some of them are already defined among the query
      paths.  In the following the list of the proposed sorting
      properties, grouped by objects, is shown:

      *  Domain: ldhName
      *  Nameserver: ldhName, ipV4, ipV6.
      *  Entity: fn, handle, org, email, tel, country, countryName,
         locality.




Loffredo, et al.        Expires November 26, 2017               [Page 6]

Internet-Draft           RDAP Sorting and Paging                May 2017


   In the following, the correspondence between the values of sortby
   parameter and the RDAP object properties is shown (Table 1):

   +-----------+------------+------------------+-----------+-----------+
   | Object    | sortby     | Object property  | Reference | Reference |
   | class     | value      |                  | in RFC    | in RFC    |
   |           |            |                  | 7483      | 6350      |
   +-----------+------------+------------------+-----------+-----------+
   | Searchabl | Common     | eventAction      | 4.5.      |           |
   | e objects | properties | values suffixed  |           |           |
   |           |            | by "Date"        |           |           |
   |           |            |                  |           |           |
   | Domain    | ldhName    | ldhName          | 5.3.      |           |
   |           |            |                  |           |           |
   | Nameserve | ldhName    | ldhName          | 5.2.      |           |
   | r         |            |                  |           |           |
   |           | ipV4       | v4 ipAddress     | 5.2.      |           |
   |           | ipV6       | v6 ipAddress     | 5.2.      |           |
   |           |            |                  |           |           |
   | Entity    | handle     | handle           | 5.1.      |           |
   |           | fn         | vcard fn         | 5.1.      | 6.2.1     |
   |           | org        | vcard org        | 5.1.      | 6.6.4     |
   |           | tel        | vcard tel with   | 5.1.      | 6.4.1     |
   |           |            | type="voice"     |           |           |
   |           | email      | vcard email      | 5.1.      | 6.4.2     |
   |           | country    | country code (as | 5.1.      | 6.3.1     |
   |           |            | given in         |           |           |
   |           |            | ISO.3166.1988    |           |           |
   |           |            | [ISO.3166.1988]) |           |           |
   |           |            | of the country   |           |           |
   |           |            | name in vcard    |           |           |
   |           |            | adr              |           |           |
   |           | countryNme | country name in  | 5.1.      | 6.3.1     |
   |           |            | vcard adr        |           |           |
   |           | locality   | locality in      | 5.1.      | 6.3.1     |
   |           |            | vcard adr        |           |           |
   +-----------+------------+------------------+-----------+-----------+

                  Table 1: Sorting properties definition

   With regard to the definitions in Table 1, some further
   considerations must be made to disambiguate cases where the RDAP
   object property is multivalued:

   o  Even if a nameserver can have multiple IPv4 and IPv6 addresses,
      the most common configuration includes one address for each IP
      version.  Therefore, the assumption of having a single IPv4 and/or
      IPv6 value for a nameserver cannot be considered too stringent.



Loffredo, et al.        Expires November 26, 2017               [Page 7]

Internet-Draft           RDAP Sorting and Paging                May 2017


   o  With the exception of handle values, all the sorting properties
      defined for entity objects can be multivalued according to the
      definition of vCard as given in RFC6350 [RFC6350].  When more than
      a value is reported, sorting can be applied to the preferred value
      identified by the parameter pref="1".

   Each RDAP provider MAY define other sorting properties than those
   shown in this document.  (FOR DISCUSSION: how should those properties
   be defined?  Is an IANA registry appropriate?)


https://example.com/rdap/domains?name=*nr.com&sortby=ldhName

https://example.com/rdap/domains?name=*nr.com&sortby=registrationDate:d

https://example.com/rdap/domains?name=*nr.com&sortby=expirationDate,ldhName

      Figure 3: Examples of RDAP query reporting the sortby parameter

2.3.  "limit" and "offset" parameters

   An RDAP query could return a response with hundreds of object return
   values, especially when partial matching is used.  For that reason,
   two parameters addressing result pagination are defined to make
   responses easier to handle:

   o  "limit": means that the server MUST return the first N objects of
      the result set in the response;
   o  "offset": means that the server MUST skip the first N objects and
      MUST return objects starting from position N+1.

   The ABNF syntax is the following:

      EQ = "="
      limit = "limit" EQ positive-number
      offset = "offset" EQ positive-number
      positive-number = non-zero-digit *digit
      non-zero-digit = "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" /
      "9"
      digit = "0" / non-zero-digit

   When limit and offset are used together, they allow implementation of
   result pagination.  These examples illustrate requests to return the
   first 5 objects, the set of objects starting from position 6, and 5
   objects starting from position 11 of the result set (Figure 4).






Loffredo, et al.        Expires November 26, 2017               [Page 8]

Internet-Draft           RDAP Sorting and Paging                May 2017


   https://example.com/rdap/domains?name=*nr.com&limit=5

   https://example.com/rdap/domains?name=*nr.com&offset=5

   https://example.com/rdap/domains?name=*nr.com&limit=5&offset=10

      Figure 4: Examples of RDAP query reporting the limit and offset
                                parameters

2.3.1.  Use of "links" property

   An RDAP server MAY use the "links" [RFC5988] property to provide a
   ready-made reference to the next page of the result set (Figure 5).

   Examples of "rel" values are "first", "last", "prev".




































Loffredo, et al.        Expires November 26, 2017               [Page 9]

Internet-Draft           RDAP Sorting and Paging                May 2017


{
  "rdapConformance": [
    "rdap_level_0",
    "paging_level_0"
  ],
  ...
  "notices": [
    {
      "title":"Search query limits",
      "type":"result set truncated due to excessive load",
      "description": [
      "search results for domains are limited to 10"
      ]
    }
  ],
  "links": [
    {
      "value":"https://example.com/rdap/domains?name=*nr.com&count=true",
      "rel":"next",
      "href":"https://example.com/rdap/domains?name=*nr.com&count=true&limit=10&offset=10",
      "title": [
        "Result Pagination Link"
      ]
      "type":"application/rdap+json"
    }
  ],
  "paging_count":"73",
  "domainSearchResults": [
    ...
  ]
}

   Figure 5: Example of "links" property to implement result pagination

3.  Negative answers

   The value constraints for the parameters are defined by their ABNF
   syntax.  Therefore, each request providing an invalid value for a
   parameter SHOULD obtain an HTTP 400 (Bad Request) response code.  The
   same response SHOULD be returned if the client provides an
   unsupported value for the sortby parameter.

   The server can provide a different response when it supports the
   limit and/or offset parameters and the client submits values that are
   out of the valid ranges.  The possible cases are:

   o  If the client submits a value for the limit parameter that is
      greater than the number of objects to be processed, it is



Loffredo, et al.        Expires November 26, 2017              [Page 10]

Internet-Draft           RDAP Sorting and Paging                May 2017


      RECOMMENDED that server returns a response including only the
      processed objects.
   o  If the client submits a value for the offset parameter that is
      greater than the number of objects to be processed, it is
      RECOMMENDED that server returns an HTTP 404 (Not Found) response
      code.

   Optionally, the response MAY include additional information regarding
   the negative answer in the HTTP entity body.

4.  RDAP Conformance

   Servers implementing any of the parameters described in this
   specification MUST include "paging_level_0" in the rdapConformance
   array of their responses.

5.  Implementation Considerations

   The implementation of the new parameters is technically feasible, as
   operators for counting, sorting and paging are currently supported by
   the major RDBMS.

   In the following, the match between the new defined parameters and
   the SQL operators is shown (Table 2):



























Loffredo, et al.        Expires November 26, 2017              [Page 11]

Internet-Draft           RDAP Sorting and Paging                May 2017


   +----------------+--------------------------------------------------+
   | New query      | SQL operator                                     |
   | parameter      |                                                  |
   +----------------+--------------------------------------------------+
   | count          | count(*) query without offset, limit and order   |
   |                | by                                               |
   |                | [MYSQL-COUNT],[POSTGRES-COUNT],[ORACLE-COUNT]    |
   |                |                                                  |
   | sortby         | order by                                         |
   |                | [MYSQL-SORT],[POSTGRES-SORT],[ORACLE-SORT]       |
   |                |                                                  |
   | limit          | limit n (in MySql [MYSQL-LIMIT] and Postgres     |
   |                | [POSTGRES-LIMIT])                                |
   |                | FETCH FIRST n ROWS ONLY (in Oracle               |
   |                | [ORACLE-LIMIT])                                  |
   |                |                                                  |
   | offset         | offset m (in Postgres)                           |
   |                | OFFSET m ROWS (in Oracle)                        |
   |                |                                                  |
   | limit + offset | limit n offset m (in MySql and Postgres)         |
   |                | OFFSET m ROWS FETCH NEXT n ROWS ONLY (in Oracle) |
   +----------------+--------------------------------------------------+

              Table 2: New query parameters vs. SQL operators

   With regard to Oracle, Table 2 reports only one of the three methods
   that can be used to implement limit and offset parameters.  The
   others are described in [ORACLE-ROWNUM] and [ORACLE-ROW-NUMBER].

   In addition, similar operators are completely or partially supported
   by the most known NoSQL databases (MongoDB, CouchDB, HBase,
   Cassandra, Hadoop) so the implementation of the new parameters seems
   to be practicable by servers working without the use of an RDBMS.

   FOR DISCUSSION: How might this all work without the use of an RDBMS?
   Would a server need to maintain state information across queries?  If
   so, what are the implications?

6.  IANA Considerations

   FOR DISCUSSION: An IANA-maintained registry could be used to document
   all of the properties that could be used as sort criteria.  Such a
   registry could also be used to identify the properties for RDAP query
   filtering capabilities.







Loffredo, et al.        Expires November 26, 2017              [Page 12]

Internet-Draft           RDAP Sorting and Paging                May 2017


6.1.  Registry of References to RDAP Properties

   Entries in this registry could contain the following:

   o  Object class name: the class name of the object the property
      belongs to (as defined in [RFC7483]);
   o  Property reference: the reference to the property;
   o  JSON Path: the JSON path of the property inside the object (as
      defined in [RFC7159]);
   o  Published specification: RFC number, bibliographical reference, or
      URL to a permanent and readily available specification;
   o  Contact: The names and email addresses of individuals to contact
      regarding this registry entry;
   o  Intended usage: brief reasons for this registry entry (as defined
      in [RFC5266]).

   In the following, an example of the entry about the reference
   "nsLdhName" is reported:

   o  Object class name: Nameserver
   o  Property reference: ipV4
   o  JSON Path: $.ipAddresses.v4[0]
   o  Published specification: https://www.ietf.org/id/draft-loffredo-
      regext-rdap-sorting-and-paging-00.txt
   o  Contact: mario.loffredo@iit.cnr.it
   o  Intended usage: The entry is about the reference to the v4 address
      within a nameserver object.

7.  Security Considerations

   Security services for the operations specified in this document are
   described in RFC 7481 [RFC7481].

   Search query typically requires more server resources (such as
   memory, CPU cycles, and network bandwidth) when compared to lookup
   query.  This increases the risk of server resource exhaustion and
   subsequent denial of service due to abuse.  This risk can be
   mitigated by either restricting search functionality and limiting the
   rate of search requests.  Servers can also reduce their load by
   truncating the results in the response.  However, this last security
   policy can result in a higher inefficiency if the RDAP server does
   not provide any functionality to return the truncated results.

   The new parameters presented in this document provide the RDAP
   operators with a way to implement a secure server without penalizing
   its efficiency.  The "count" parameter gives the user a measure to
   evaluate the query precision and, at the same time, return a
   significant information.  The "sortby" parameter allows the user to



Loffredo, et al.        Expires November 26, 2017              [Page 13]

Internet-Draft           RDAP Sorting and Paging                May 2017


   obtain the most relevant information at the beginning of the result
   set.  In both cases, the user doesn't need to submit further
   unnecessary search requests.  Finally, the "limit" and "offset"
   parameters enable the user to scroll the result set by submitting a
   sequence of sustainable queries according to the server limits.

8.  References

8.1.  Normative References

   [ISO.3166.1988]
              International Organization for Standardization, "Codes for
              the representation of names of countries, 3rd edition",
              ISO Standard 3166, August 1988.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616,
              DOI 10.17487/RFC2616, June 1999,
              <http://www.rfc-editor.org/info/rfc2616>.

   [RFC5234]  Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234,
              DOI 10.17487/RFC5234, January 2008,
              <http://www.rfc-editor.org/info/rfc5234>.

   [RFC5266]  Devarapalli, V. and P. Eronen, "Secure Connectivity and
              Mobility Using Mobile IPv4 and IKEv2 Mobility and
              Multihoming (MOBIKE)", BCP 136, RFC 5266,
              DOI 10.17487/RFC5266, June 2008,
              <http://www.rfc-editor.org/info/rfc5266>.

   [RFC5988]  Nottingham, M., "Web Linking", RFC 5988,
              DOI 10.17487/RFC5988, October 2010,
              <http://www.rfc-editor.org/info/rfc5988>.

   [RFC6350]  Perreault, S., "vCard Format Specification", RFC 6350,
              DOI 10.17487/RFC6350, August 2011,
              <http://www.rfc-editor.org/info/rfc6350>.

   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <http://www.rfc-editor.org/info/rfc7159>.



Loffredo, et al.        Expires November 26, 2017              [Page 14]

Internet-Draft           RDAP Sorting and Paging                May 2017


   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <http://www.rfc-editor.org/info/rfc7230>.

   [RFC7480]  Newton, A., Ellacott, B., and N. Kong, "HTTP Usage in the
              Registration Data Access Protocol (RDAP)", RFC 7480,
              DOI 10.17487/RFC7480, March 2015,
              <http://www.rfc-editor.org/info/rfc7480>.

   [RFC7481]  Hollenbeck, S. and N. Kong, "Security Services for the
              Registration Data Access Protocol (RDAP)", RFC 7481,
              DOI 10.17487/RFC7481, March 2015,
              <http://www.rfc-editor.org/info/rfc7481>.

   [RFC7482]  Newton, A. and S. Hollenbeck, "Registration Data Access
              Protocol (RDAP) Query Format", RFC 7482,
              DOI 10.17487/RFC7482, March 2015,
              <http://www.rfc-editor.org/info/rfc7482>.

   [RFC7483]  Newton, A. and S. Hollenbeck, "JSON Responses for the
              Registration Data Access Protocol (RDAP)", RFC 7483,
              DOI 10.17487/RFC7483, March 2015,
              <http://www.rfc-editor.org/info/rfc7483>.

8.2.  Informative References

   [MYSQL-COUNT]
              mysql.com, "MySQL 5.7 Reference Manual, Counting Rows",
              October 2015.

   [MYSQL-LIMIT]
              mysql.com, "MySQL 5.7 Reference Manual, SELECT Syntax",
              October 2015.

   [MYSQL-SORT]
              mysql.com, "MySQL 5.7 Reference Manual, Sorting Rows",
              October 2015.

   [OData-Part1]
              Pizzo, M., Handl, R., and M. Zurmuehl, "OData Version 4.0.
              Part 1: Protocol Plus Errata 03", June 2016.

   [ORACLE-COUNT]
              Oracle Corporation, "Database SQL Language Reference,
              COUNT", March 2016.





Loffredo, et al.        Expires November 26, 2017              [Page 15]

Internet-Draft           RDAP Sorting and Paging                May 2017


   [ORACLE-LIMIT]
              Oracle Corporation, "Database SQL Language Reference,
              SELECT, Row limiting clause", March 2016.

   [ORACLE-ROW-NUMBER]
              Oracle Corporation, "Database SQL Language Reference,
              SELECT, ROW_NUMBER", March 2016.

   [ORACLE-ROWNUM]
              Oracle Corporation, "Database SQL Language Reference,
              SELECT, ROWNUM Pseudocolumn", March 2016.

   [ORACLE-SORT]
              Oracle Corporation, "Database SQL Language Reference,
              SELECT, Order by clause", March 2016.

   [POSTGRES-COUNT]
              postgresql.org, "PostgresSQL, Aggregate Functions",
              September 2016.

   [POSTGRES-LIMIT]
              postgresql.org, "PostgresSQL, LIMIT and OFFSET", September
              2016.

   [POSTGRES-SORT]
              postgresql.org, "PostgresSQL, Sorting Rows", September
              2016.

   [REST]     Fredrich, T., "RESTful Service Best Practices,
              Recommendations for Creating Web Services", April 2012.

   [RFC6901]  Bryan, P., Ed., Zyp, K., and M. Nottingham, Ed.,
              "JavaScript Object Notation (JSON) Pointer", RFC 6901,
              DOI 10.17487/RFC6901, April 2013,
              <http://www.rfc-editor.org/info/rfc6901>.

   [W3C.CR-xpath-31-20161213]
              Robie, J., Dyck, M., and J. Spiegel, "XML Path Language
              (XPath) 3.1", World Wide Web Consortium CR CR-xpath-
              31-20161213, December 2016, <https://www.w3.org/TR/2016/
              CR-xpath-31-20161213>.

Authors' Addresses








Loffredo, et al.        Expires November 26, 2017              [Page 16]

Internet-Draft           RDAP Sorting and Paging                May 2017


   Mario Loffredo
   IIT-CNR/Registro.it
   Via Moruzzi,1
   Pisa  56124
   IT

   Email: mario.loffredo@iit.cnr.it
   URI:   http://www.iit.cnr.it


   Maurizio Martinelli
   IIT-CNR/Registro.it
   Via Moruzzi,1
   Pisa  56124
   IT

   Email: maurizio.martinelli@iit.cnr.it
   URI:   http://www.iit.cnr.it


   Scott Hollenbeck
   Verisign Labs
   12061 Bluemont Way
   Reston, VA  20190
   USA

   Email: shollenbeck@verisign.com
   URI:   https://www.verisignlabs.com/























Loffredo, et al.        Expires November 26, 2017              [Page 17]
