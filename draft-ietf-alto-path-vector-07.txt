



ALTO WG                                                           K. Gao
Internet-Draft                                        Sichuan University
Intended status: Standards Track                                  Y. Lee
Expires: January 9, 2020                                          Huawei
                                                          S. Randriamasy
                                                         Nokia Bell Labs
                                                                 Y. Yang
                                                         Yale University
                                                                J. Zhang
                                                       Tongji University
                                                            July 8, 2019


                 ALTO Extension: Path Vector Cost Type
                     draft-ietf-alto-path-vector-07

Abstract

   The Application-Layer Traffic Optimization (ALTO) protocol [RFC7285]
   has defined cost maps and endpoint cost maps to provide basic network
   information.  However, they provide only scalar (numerical or
   ordinal) cost mode values, which are insufficient to satisfy the
   demands of solving more complex network optimization problems.  This
   document introduces an extension to the base ALTO protocol, namely
   the path-vector extension, which allows ALTO clients to query
   information such as the capacity region for a given set of flows
   (called co-flows).  A non-normative example called co-flow scheduling
   is presented to illustrate the limitations of existing ALTO endpoint
   cost maps.  After that, details of the extension are defined.

Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any



Gao, et al.              Expires January 9, 2020                [Page 1]

Internet-Draft         ALTO Extension: Path Vector             July 2019


   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 9, 2020.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   5
   3.  Use Case  . . . . . . . . . . . . . . . . . . . . . . . . . .   5
     3.1.  Capacity Region for Co-Flow Scheduling  . . . . . . . . .   5
     3.2.  In-Network Caching  . . . . . . . . . . . . . . . . . . .   7
   4.  Overview  . . . . . . . . . . . . . . . . . . . . . . . . . .   8
     4.1.  New Cost Mode to Encode Path Vectors  . . . . . . . . . .   8
     4.2.  New ALTO Entity Domain for ANE Properties . . . . . . . .   8
     4.3.  Multipart/Related Resource for Consistency  . . . . . . .   9
   5.  Basic Data Types  . . . . . . . . . . . . . . . . . . . . . .  10
     5.1.  ANE Identifier  . . . . . . . . . . . . . . . . . . . . .  10
     5.2.  Path Vector Cost Type . . . . . . . . . . . . . . . . . .  10
       5.2.1.  Cost Metric: ane-path . . . . . . . . . . . . . . . .  11
       5.2.2.  Cost Mode: array  . . . . . . . . . . . . . . . . . .  11
     5.3.  ANE Domain  . . . . . . . . . . . . . . . . . . . . . . .  11
       5.3.1.  Domain Name . . . . . . . . . . . . . . . . . . . . .  11
       5.3.2.  Domain-Specific Entity Identifier . . . . . . . . . .  11
       5.3.3.  Hierarchy and Inheritance . . . . . . . . . . . . . .  11
     5.4.  ANE Properties  . . . . . . . . . . . . . . . . . . . . .  11
       5.4.1.  ANE Property: Maximum Reservable Bandwidth  . . . . .  11
       5.4.2.  ANE Property: Persistent Entity . . . . . . . . . . .  12
   6.  Service Extensions  . . . . . . . . . . . . . . . . . . . . .  12
     6.1.  Multipart Filtered Cost Map for Path Vector . . . . . . .  12
       6.1.1.  Media Type  . . . . . . . . . . . . . . . . . . . . .  12
       6.1.2.  HTTP Method . . . . . . . . . . . . . . . . . . . . .  12
       6.1.3.  Accept Input Parameters . . . . . . . . . . . . . . .  12



Gao, et al.              Expires January 9, 2020                [Page 2]

Internet-Draft         ALTO Extension: Path Vector             July 2019


       6.1.4.  Capabilities  . . . . . . . . . . . . . . . . . . . .  13
       6.1.5.  Uses  . . . . . . . . . . . . . . . . . . . . . . . .  13
       6.1.6.  Response  . . . . . . . . . . . . . . . . . . . . . .  13
     6.2.  Multipart Endpoint Cost Service for Path Vector . . . . .  15
       6.2.1.  Media Type  . . . . . . . . . . . . . . . . . . . . .  15
       6.2.2.  HTTP Method . . . . . . . . . . . . . . . . . . . . .  15
       6.2.3.  Accept Input Parameters . . . . . . . . . . . . . . .  15
       6.2.4.  Capabilities  . . . . . . . . . . . . . . . . . . . .  15
       6.2.5.  Uses  . . . . . . . . . . . . . . . . . . . . . . . .  15
       6.2.6.  Response  . . . . . . . . . . . . . . . . . . . . . .  16
   7.  Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .  17
     7.1.  Information Resource Directory Example  . . . . . . . . .  17
     7.2.  Example: Multipart Filtered Cost Map  . . . . . . . . . .  19
     7.3.  Example: Multipart Endpoint Cost Service  . . . . . . . .  20
     7.4.  Example: Incremental Updates  . . . . . . . . . . . . . .  22
   8.  Compatibility . . . . . . . . . . . . . . . . . . . . . . . .  24
     8.1.  Compatibility with Base ALTO Clients/Servers  . . . . . .  24
     8.2.  Compatibility with Multi-Cost Extension . . . . . . . . .  24
     8.3.  Compatibility with Incremental Update . . . . . . . . . .  24
   9.  General Discussions . . . . . . . . . . . . . . . . . . . . .  25
     9.1.  Provide Calendar for Property Map . . . . . . . . . . . .  25
     9.2.  Constraint Tests for General Cost Types . . . . . . . . .  25
     9.3.  General Multipart Resources Query . . . . . . . . . . . .  25
   10. Security Considerations . . . . . . . . . . . . . . . . . . .  26
   11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  27
     11.1.  ALTO Cost Mode Registry  . . . . . . . . . . . . . . . .  27
     11.2.  ALTO Entity Domain Registry  . . . . . . . . . . . . . .  27
     11.3.  ALTO Property Type Registry  . . . . . . . . . . . . . .  27
   12. Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  27
   13. References  . . . . . . . . . . . . . . . . . . . . . . . . .  28
     13.1.  Normative References . . . . . . . . . . . . . . . . . .  28
     13.2.  Informative References . . . . . . . . . . . . . . . . .  28
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  29

1.  Introduction

   The base ALTO protocol [RFC7285] is designed to expose network
   information through services such as cost maps and endpoint cost
   service.  These services use an extreme "single-node" network
   abstraction, which represents a whole network as a single node, and
   hosts as "endpoint groups" directly connected to the node.

   Although the "single-node" abstraction works well in many settings,
   it lacks the ability to support emerging use cases, such as co-flow
   scheduling for large-scale data analytics.  For such a use case,
   applications require a more powerful network view abstraction beyond
   the "single-node" abstraction.




Gao, et al.              Expires January 9, 2020                [Page 3]

Internet-Draft         ALTO Extension: Path Vector             July 2019


   To support capabilities like co-flow scheduling, this document uses a
   "path vector" abstraction to represent more detailed network graph
   information like capacity regions.  A path vector is a sequence of
   abstract network elements (ANEs), and each ANE represents a network
   device that end-to-end traffic goes through, such as links, switches,
   middleboxes, and their aggregations.  An ANE can have properties such
   as "bandwidth", and "delay".  Providing such information can help
   both applications to achieve better application performance and
   networks to avoid network congestion.

   Providing path vector abstraction using ALTO introduces the following
   additional requirements (ARs):

   AR-1:  The path vector abstraction requires the encoding of array-
      like cost values rather than scalar cost values in cost maps or
      endpoint cost maps.

      Specifically, the path vector abstraction requires the
      specification of the sequence of ANEs between sources and
      destinations.  Such a sequence, however, cannot be encoded by the
      scalar types (numerical or ordinal) which the base ALTO protocol
      supports.

   AR-2:  The path vector abstraction requires the encoding of the
      properties of aforementioned ANEs.

      Specifically, only the sequences of ANEs are not enough for
      existing use cases.  Properties of ANEs such as "bandwidth" and
      "delay" are needed by applications to properly construct network
      constraints or states.

   AR-3:  The path vector abstraction requires consistent encoding of
      path vectors (AR-1) and the properties of the ANEs in a path
      vector (AR-2).

      Specifically, path vectors and the properties of ANEs in the
      vectors are dependent.  A mechanism to query both of them
      consistently is necessary.

   This document proposes the path vector extension to the ALTO protocol
   to satisfy these additional requirements .

   Specifically, the extension encodes the array (AR-1) of ANEs over an
   end-to-end path using a new cost type, and conveys the properties of
   ANEs (AR-2) using unified property map
   [I-D.ietf-alto-unified-props-new].  The path vector and ANE
   properties are conveyed in a single message encoded as a multipart/
   related message to satisfy AR-3.



Gao, et al.              Expires January 9, 2020                [Page 4]

Internet-Draft         ALTO Extension: Path Vector             July 2019


   The rest of this document is organized as follows.  Section 3.1 gives
   an example of co-flow scheduling and illustrates the limitations of
   the base ALTO protocol in such a use case.  Section 4 gives an
   overview of the path vector extension.  Section 5.2 introduces a new
   cost type.  Section 5.3 registers a new domain in Domain Registry.
   Section 6.1 and Section 6.2 define new ALTO resources to support Path
   Vector query by using the request format of Filtered Cost Map and
   Endpoint Cost Service.  Section 7 presents several examples.
   Section 8 and Section 9 discusses compatibility issues with other
   existing ALTO extensions and design decisions.  Section 10 and
   Section 11 review the security and IANA considerations.

2.  Terminology

   Besides the terms defined in [RFC7285] and
   [I-D.ietf-alto-unified-props-new], this document also uses the
   following additional terms: Abstract Network Element and Path Vector.

   o  Abstract Network Element (ANE): An abstract network element is an
      abstraction of network components.  It can be an aggregation of
      links, middleboxes, virtualized network function (VNF), etc.  An
      abstract network element has two types of attributes: a name and a
      set of properties.

   o  Path Vector: A path vector is an array of ANEs.  It presents an
      abstract network path between source/destination points such as
      PIDs or endpoints.

3.  Use Case

3.1.  Capacity Region for Co-Flow Scheduling

   Assume that an application has control over a set of flows, which may
   go through shared links or switches and share a bottleneck.  The
   application hopes to schedule the traffic among multiple flows to get
   better performance.  The capacity region information for those flows
   will benefit the scheduling.  However, existing cost maps cannot
   reveal such information.

   Specifically, consider a network as shown in Figure 1.  The network
   has 7 switches (sw1 to sw7) forming a dumb-bell topology.  Switches
   sw1/sw3 provide access on one side, sw2/sw4 provide access on the
   other side, and sw5-sw7 form the backbone.  Endhosts eh1 to eh4 are
   connected to access switches sw1 to sw4 respectively.  Assume that
   the bandwidth all links are 100 Mbps.






Gao, et al.              Expires January 9, 2020                [Page 5]

Internet-Draft         ALTO Extension: Path Vector             July 2019


                                  +------+
                                  |      |
                                --+ sw6  +--
                              /   |      |  \
        PID1 +-----+         /    +------+   \          +-----+  PID2
        eh1__|     |_       /                 \     ____|     |__eh2
             | sw1 | \   +--|---+         +---|--+ /    | sw2 |
             +-----+  \  |      |         |      |/     +-----+
                       \_| sw5  +---------+ sw7  |
        PID3 +-----+   / |      |         |      |\     +-----+  PID4
        eh3__|     |__/  +------+         +------+ \____|     |__eh4
             | sw3 |                                    | sw4 |
             +-----+                                    +-----+

                      Figure 1: Raw Network Topology.

   The single-node ALTO topology abstraction of the network is shown in
   Figure 2.

                          +----------------------+
                 {eh1}    |                      |     {eh2}
                 PID1     |                      |     PID2
                   +------+                      +------+
                          |                      |
                          |                      |
                 {eh3}    |                      |     {eh4}
                 PID3     |                      |     PID4
                   +------+                      +------+
                          |                      |
                          +----------------------+

             Figure 2: Base Single-Node Topology Abstraction.

   Consider an application overlay (e.g., a large data analysis system)
   which wants to schedule the traffic among a set of end host source-
   destination pairs, say eh1 -> eh2 and eh3 -> eh4.  The application
   can request a cost map providing end-to-end available bandwidth,
   using 'availbw' as cost-metric and 'numerical' as cost-mode.

   The application will receive from ALTO server that the bandwidth of
   eh1 -> eh2 and eh3 -> eh4 are both 100 Mbps.  But this information is
   not enough.  Consider the following two cases:

   o  Case 1: If eh1 -> eh2 uses the path eh1 -> sw1 -> sw5 -> sw6 ->
      sw7 -> sw2 -> eh2 and eh3 -> eh4 uses path eh3 -> sw3 -> sw5 ->
      sw7 -> sw4 -> eh4, then the application will obtain 200 Mbps.





Gao, et al.              Expires January 9, 2020                [Page 6]

Internet-Draft         ALTO Extension: Path Vector             July 2019


   o  Case 2: If eh1 -> eh2 uses the path eh1 -> sw1 -> sw5 -> sw7 ->
      sw2 -> eh2 and eh3 -> eh4 uses the path eh3 -> sw3 -> sw5 -> sw7
      -> sw4 -> eh4, then the application will obtain only 100 Mbps due
      to the shared link from sw5 to sw7.

   To allow applications to distinguish the two aforementioned cases,
   the network needs to provide more details.  In particular:

   o  The network needs to expose more detailed routing information to
      show the shared bottlenecks;

   o  The network needs to provide the necessary abstraction to hide the
      real topology information while providing enough information to
      applications.

   The path vector extension defined in this document provides a
   solution to address the preceding issue.

   See [I-D.bernstein-alto-topo] for a more comprehensive survey of use
   cases where extended network topology information is needed.

3.2.  In-Network Caching

   Consider a network as shown in Figure 3.  Two clients (C1/eh2 and C2/
   eh3) are downloading data from a server (S/eh1) and the network
   provides an HTTP proxy which can cache results.  The clients and the
   server are controlled by an ALTO client.

                                     +---------+
                                     | Caching |
                                    -+ Proxy   |
                                   / |         |
         S      +-------+         /  +---------+
           eh1__| sub   |_       /
                | net 1 | \   +--|---+         +----------+
                +-------+  ---|      |         |          |     C2
                              | Gate +---------+ Internet |__eh3
         C1     +-------+   --| way  |         |          |
           eh2__| sub   |__/  +------+         +----------+
                | net 2 |
                +-------+

        Figure 3: Raw Topology for the In-Network Caching Use Case.

   Without the traffic correlation information, the ALTO client cannot
   know whether or how the traffic goes through the proxy.  For example,
   if subnet1 and subnet2 are directly connected and the traffic from




Gao, et al.              Expires January 9, 2020                [Page 7]

Internet-Draft         ALTO Extension: Path Vector             July 2019


   eh1 to eh2 bypasses the gateway, the in-network cache can only be
   used for traffic from C2 to S and is less effective.

4.  Overview

   This section presents an overview of approaches adopted by the path
   vector extension.  It assumes that the readers are familiar with cost
   map and endpoint cost service defined in [RFC7285].  The path vector
   extension also requires the support of Filtered Property Map defined
   in [I-D.ietf-alto-unified-props-new].

   The path vector extension is composed of three building blocks: (1) a
   new cost mode to encode path vectors in a cost map or an endpoint
   cost map; (2) a new ALTO entity domain to enable ANE property
   encoding using the unified property extension
   [I-D.ietf-alto-unified-props-new]; and (3) a generic mechanism to put
   multiple ALTO information objects in a single response to enforce
   consistency, to preserve modularity and to avoid complex linking of
   multiple responses.

4.1.  New Cost Mode to Encode Path Vectors

   Existing cost modes defined in [RFC7285] allow only scalar cost
   values.  However, the "path vector" abstraction requires to convey
   vector format information (AR-1).  To fulfill this requirement, this
   document defines a new "cost-mode" named path vector to indicate that
   the cost value is an array of ANEs.  A path vector abstraction should
   be computed for a specific performance metric, and this is achieved
   using the existing "cost-metric" component of cost type.  The details
   of the new "cost-mode" is given in Section 5.2.

4.2.  New ALTO Entity Domain for ANE Properties

   A path vector of ANEs contains only the abstracted routing elements
   between a source and a destination.  Hence, an application can find
   shared ANEs of different source-destination pairs but cannot know the
   shared ANEs' properties.  For the capacity region use case in
   Section 3.1, knowing that eh1->eh2 and eh3->eh4 share ANEs but not
   the available bandwidth of the shared ANEs, is not enough.

   To encode ANE properties like the available bandwidth in a path
   vector query response, this document uses the unified property
   extension defined in [I-D.ietf-alto-unified-props-new].
   Specifically, for each path vector query, the ALTO server generates a
   property map associated to the (endpoint) cost map as follows:

   o  a dynamic entity domain of an entity domain type "ane" is
      generated to contain the generated ANEs.  Each ANE has the same



Gao, et al.              Expires January 9, 2020                [Page 8]

Internet-Draft         ALTO Extension: Path Vector             July 2019


      unique identifier in the path vectors and in the dynamic entity
      domain;

   o  each entity in this dynamic entity domain has the properties
      specified by the client.

   Detailed information and specifications are given in Section 5.3.

4.3.  Multipart/Related Resource for Consistency

   Path vectors and the property map containing the ANEs are two
   different types of objects, but they require strong consistency.  One
   approach to achieving strong consistency is to define a new media
   type to contain both objects, but this violates modular design.

   Another approach is to provide the objects in two different
   information resources.  Thus, an ALTO client needs to make separate
   queries to get the information of related services.  This may cause a
   data synchronization problem between two queries.  Also, as the
   generation of ANE is dynamic, an ALTO server must cache the results
   of a query before a client fully retrieves all related resources,
   which hurts the scalability and security of an ALTO server.

   This document uses standard-conforming usage of "multipart/related"
   media type defined in [RFC2387] to elegantly solve the problem.

   Specifically, using "multipart/related" needs to address two issues:

   o  ALTO uses media type to indicate the type of an entry in the
      information resource directory (IRD) (e.g., "application/alto-
      costmap+json" for cost map and "application/alto-
      endpointcostmap+json" for endpoint cost map).  Simply putting
      "multipart/related" as the media type, however, makes it
      impossible for an ALTO client to identify the type of service
      provided by related entries.

   o  The ALTO SSE extension (see [I-D.ietf-alto-incr-update-sse])
      depends on resource-id to identify push updates, but resource-id
      is provided only in IRD and hence each entry in the IRD has only
      one resource-id.

   This design addresses the two issues as follows:

   o  To address the first issue, the multipart/related media type
      includes the type parameter to allow type indication of the root
      object.  For a cost map service, the "media-type" will be
      "multipart/related" with the parameter "type=application/alto-
      costmap+json"; for an endpoint cost map service, the parameter



Gao, et al.              Expires January 9, 2020                [Page 9]

Internet-Draft         ALTO Extension: Path Vector             July 2019


      will be "type=application/alto-endpointcostmap+json".  This design
      is highly extensible.  The entries can still use "application/
      alto-costmapfilter+json" or "application/alto-
      endpointcostparams+json" as the accept input parameters, and hence
      an ALTO client still sends the filtered cost map request or
      endpoint cost service request.  The ALTO server sends the response
      as a "multipart/related" message.  The body of the response
      includes two parts: the first one is of the media type specified
      by the "type" parameter; the second one is a property map
      associated to the first map.

   o  To address the second issue, each part of the "multipart/related"
      response message has the MIME part header information including
      "Content-Type" and "Resource-Id".  An ALTO server MAY generate
      incremental updates (see [I-D.ietf-alto-incr-update-sse]) for each
      part separately using the "Resource-Id" header.

   By applying the design above, for each path vector query, an ALTO
   server returns the path vectors and the associated property map
   modularly and consistently.  An ALTO server can reuse the data models
   of the existing information resources.  And an ALTO client can
   subscribe to the incremental updates for the dynamic generated
   information resources without any changes, if th ALTO server provides
   incremental updates for them.

5.  Basic Data Types

5.1.  ANE Identifier

   An ANE identifier is encoded as a JSON string.  The string MUST be no
   more than 64 characters, and it MUST NOT contain characters other
   than US-ASCII alphanumeric characters (U+0030-U+0039, U+0041-U+005A,
   and U+0061-U+007A), the hyphen ("-", U+002D), the colon (":",
   U+003A), the at sign ("@", code point U+0040), the low line ("_",
   U+005F), or the "." separator (U+002E).  The "." separator is
   reserved for future use and MUST NOT be used unless specifically
   indicated in this document, or an extension document.

   The type ANEIdentifier is used in this document to indicate a string
   of this format.

5.2.  Path Vector Cost Type

   This document defines a new cost type, which is referred to as the
   "path vector" cost type.  An ALTO server MUST offer this cost type if
   it supports the path vector extension.





Gao, et al.              Expires January 9, 2020               [Page 10]

Internet-Draft         ALTO Extension: Path Vector             July 2019


5.2.1.  Cost Metric: ane-path

   This cost metric conveys an array of ANE identifiers, where each
   identifier uniquely represents an ANE traversed by traffic from a
   source to a destination.

5.2.2.  Cost Mode: array

   This cost mode indicates that every cost value in a cost map or an
   endpoint cost map MUST be interpreted as a JSON array object.

   Note that this cost mode only requires the cost value to be a JSON
   array of JSONValue.  However, an ALTO server that enables this
   extension MUST return a JSON array of ANEIdentifier (Section 5.1)
   when the cost metric is "ane-path".

5.3.  ANE Domain

   This document specifies a new ALTO entity domain called "ane" in
   addition to the ones in [I-D.ietf-alto-unified-props-new].  The ANE
   domain associates property values with the ANEs in a network.  The
   entity in ANE domain is often used in the path vector by cost maps or
   endpoint cost resources.  Accordingly, the ANE domain always depends
   on a cost map or an endpoint cost map.

5.3.1.  Domain Name

   ane

5.3.2.  Domain-Specific Entity Identifier

   The entity identifier of ANE domain uses the same encoding as
   ANEIdentifier (Section 5.1).

5.3.3.  Hierarchy and Inheritance

   There is no hierarchy or inheritance for properties associated with
   ANEs.

5.4.  ANE Properties

5.4.1.  ANE Property: Maximum Reservable Bandwidth

   The maximum reservable bandwidth property conveys the maximum
   bandwidth that can be reserved for traffic from a source to a
   destination and is indicated by the property name "maxresbw".  The
   value MUST be encoded as a numerical cost value as defined in
   Section 6.1.2.1 of [RFC7285] and the unit is bit per second.



Gao, et al.              Expires January 9, 2020               [Page 11]

Internet-Draft         ALTO Extension: Path Vector             July 2019


   If this property is requested but is missing for a given ANE, it MUST
   be interpreted as that the ANE does not support bandwidth reservation
   but have sufficiently large bandwidth for all traffic that traverses
   it.

5.4.2.  ANE Property: Persistent Entity

   The persistent entity property conveys the physical or logical
   network entities (e.g., links, in-network caching service) that are
   contained by an abstract network element.  It is indicated by the
   property name "persistent-entity".  The value is encoded as a JSON
   array of entity identifiers ([I-D.ietf-alto-unified-props-new]).
   These entity identifiers are persistent so that a client CAN further
   query their properties for future use.

   If this property is requested but is missing for a given ANE, it MUST
   be interpreted as that no such entities exist in this ANE.

6.  Service Extensions

6.1.  Multipart Filtered Cost Map for Path Vector

   This document introduces a new ALTO resource called Multipart
   Filtered Cost Map resource, which allows an ALTO server to provide
   other ALTO resources associated to the Cost Map resource in the same
   response.

6.1.1.  Media Type

   The media type of the Multipart Filtered Cost Map Resource is
   "multipart/related;type=application/alto-costmap+json".

6.1.2.  HTTP Method

   The Multipart Filtered Cost Map is requested using the HTTP POST
   method.

6.1.3.  Accept Input Parameters

   The input parameters of the Multipart Filtered Cost Map are supplied
   in the body of an HTTP POST request.  This document extends the input
   parameters to a filtered Cost Map with a data format indicated by the
   media type "application/alto-costmapfilter+json", which is a JSON
   object of type PVReqFilteredCostMap, where:

   object {
     [PropertyName ane-properties<0..*>;]
   } PVReqFilteredCostMap : ReqFilteredCostMap;



Gao, et al.              Expires January 9, 2020               [Page 12]

Internet-Draft         ALTO Extension: Path Vector             July 2019


   with fields:

   ane-properties:  A list of properties that are associated with the
      ANEs.  Each property in this list MUST match one of the supported
      ANE properties indicated in the resource's "ane-properties"
      capability.  If the field is NOT present, it MUST be interpreted
      as an empty list, indicating that the ALTO server MUST NOT return
      any property in the unified property part.

6.1.4.  Capabilities

   The Multipart Filtered Cost Map resource extends the capabilities
   defined in Section 11.3.2.4 of [RFC7285].  The capabilities are
   defined by a JSON object of type PVFilteredCostMapCapabilities:

   object {
     [PropertyName ane-properties<0..*>;]
   } PVFilteredCostMapCapabilities : FilteredCostMapCapabilities;

   with fields:

   cost-type-names:  The "cost-type-names" field MUST only include the
      path vector cost type, unless explicitly documented by a future
      extension.  This also implies that the path vector cost type MUST
      be defined in the "cost-types" of the Information Resource
      Directory's "meta" field.

   ane-properties:  Defines a list of ANE properties that can be
      returned.  If the field is NOT present, it MUST be interpreted as
      an empty list, indicating the ALTO server CANNOT provide any ANE
      property.

6.1.5.  Uses

   The resource ID of the network map based on which the PIDs in the
   returned cost map will be defined.  If this resource supports
   "persistent-entities", it MUST also include ALL the resources that
   exposes the entities that MAY appear in the response.

6.1.6.  Response

   The response MUST indicate an error, using ALTO protocol error
   handling, as defined in Section 8.5 of [RFC7285], if the request is
   invalid.

   The "Content-Type" header of the response MUST be "multipart/related"
   as defined by [RFC2387] with the following parameters:




Gao, et al.              Expires January 9, 2020               [Page 13]

Internet-Draft         ALTO Extension: Path Vector             July 2019


   type:  The type parameter MUST be "application/alto-costmap+json".
      Note that [RFC2387] permits both parameters with and without the
      double quotes.

   start:  The start parameter MUST be a quoted string where the quoted
      part has the same value as the "Resource-ID" header in the first
      part.

   boundary:  The boundary parameter is as defined in [RFC2387].

   The body of the response consists of two parts.

   The first part MUST include "Resource-Id" and "Content-Type" in its
   header.  The value of "Resource-Id" MUST be prefixed by the resource
   id of the Multipart Filtered Cost Map appended by a "." character.
   The "Content-Type" MUST be "application/alto-costmap+json".

   The body of the first part MUST be a JSON object with the same format
   as defined in Section 11.2.3.6 of [RFC7285].  The JSON object MUST
   include the "vtag" field in the "meta" field, which provides the
   version tag of the returned cost map.  The resource id of the version
   tag MUST be the same as the value of the "Resource-Id" header.  The
   "meta" field MUST also include the "dependent-vtags" field, whose
   value is a single-element array to indicate the version tag of the
   network map used, where the network map is specified in the "uses"
   attribute of the Multipart Cost Map resource in IRD.

   The second part MUST also include "Resource-Id" and "Content-Type" in
   its header.  The value of "Resource-Id" MUST be prefixed by the
   resource id of the Multipart Filtered Cost Map appended by a "."
   character.  The "Content-Type" MUST be "application/alto-
   propmap+json".

   The body of the second part MUST be a JSON object with the same
   format as defined in Section 4.6 of
   [I-D.ietf-alto-unified-props-new].  The JSON object MUST include the
   "dependent-vtags" field in the "meta" field.  The value of the
   "dependent-vtags" field MUST be an array of VersionTag objects as
   defined by Section 10.3 of [RFC7285].  The "vtag" of the first part
   MUST be included in the "dependent-vtags".  If "persistent-entities"
   is requested, the version tags of the dependent resources that MAY
   expose the entities in the response MUST also be included.  The
   PropertyMapData has one member for each ANE identifier that appears
   in the first part, where the EntityProps has one member for each
   property requested by the client if applicable.






Gao, et al.              Expires January 9, 2020               [Page 14]

Internet-Draft         ALTO Extension: Path Vector             July 2019


6.2.  Multipart Endpoint Cost Service for Path Vector

   This document introduces a new ALTO resource called Multipart
   Endpoint Cost resource, which allows an ALTO server to provide other
   ALTO resources associated to the Endpoint Cost resource in the same
   response.

6.2.1.  Media Type

   The media type of the Multipart Endpoint Cost Resource is
   "multipart/related;type=application/alto-endpointcostmap+json".

6.2.2.  HTTP Method

   The Multipart Endpoint Cost resource is requested using the HTTP POST
   method.

6.2.3.  Accept Input Parameters

   The input parameters of the Multipart Endpoint Cost resource are
   supplied in the body of an HTTP POST request.  This document extends
   the input parameters to an Endpoint Cost Map with a data format
   indicated by the media type "application/alto-
   endpointcostparams+json", which is a JSON object of type
   PVEndpointCostParams, where

   object {
     [PropertyName ane-properties<0..*>;]
   } PVReqEndpointCostMap : ReqEndpointCostMap;

   with fields:

   ane-properties:  This document defines the "ane-properties" in
      PVReqEndpointCostMap as the same as in PVReqFilteredCostMap.  See
      Section 6.1.3.

6.2.4.  Capabilities

   The capabilities of the Multipart Endpoint Cost Service are defined
   by a JSON object of type PVEndpointCostMapCapabilities, which is
   defined as the same as PVFilteredCostMapCapabilities.  See
   Section 6.1.4.

6.2.5.  Uses

   If a Multipart Endpoint Cost resource supports "persistent-entities",
   the "uses" field in its IRD entry MUST include ALL the resources
   which exposes the entities that MAY appear in the response.



Gao, et al.              Expires January 9, 2020               [Page 15]

Internet-Draft         ALTO Extension: Path Vector             July 2019


6.2.6.  Response

   The response MUST indicate an error, using ALTO protocol error
   handling, as defined in Section 8.5 of [RFC7285], if the request is
   invalid.

   The "Content-Type" header of the response MUST be "multipart/related"
   as defined by [RFC2387] with the following parameters:

   type:  The type parameter MUST be "application/alto-
      endpointcostmap+json".

   start:  The start parameter MUST be a quoted string where the quoted
      part has the same value as the "Resource-ID" header in the first
      part.

   boundary:  The boundary parameter is as defined in [RFC2387].

   The body consists of two parts:

   The first part MUST include "Resource-Id" and "Content-Type" in its
   header.  The value of "Resource-Id" MUST be prefixed by the resource
   id of the Multipart Endpoint Cost Service appended by a "." character
   (U+002E).  The "Content-Type" MUST be "application/alto-
   endpointcostmap+json".

   The body of the first part MUST be a JSON object with the same format
   as defined in Section 11.5.1.6 of [RFC7285]; The JSON object MUST
   include the "vtag" field in the "meta" field, which provides the
   version tag of the returned endpoint cost map.  The resource id of
   the version tag MUST be the same as the value of the "Resource-Id"
   header.

   The second part MUST also include "Resource-Id" and "Content-Type" in
   its header.  The value of "Resource-Id" MUST be prefixed by the
   resource id of the Multipart Filtered Cost Map appended by a "."
   character (U+002E).  The "Content-Type" MUST be "application/alto-
   propmap+json".

   The body of the second part MUST be a JSON object with the same
   format as defined in Section 4.6 of
   [I-D.ietf-alto-unified-props-new].  The JSON object MUST include the
   "dependent-vtags" field in the "meta" field.  The value of the
   "dependent-vtags" field MUST be an array of VersionTag objects as
   defined by Section 10.3 of [RFC7285].  The "vtag" of the first part
   MUST be included in the "dependent-vtags".  If "persistent-entities"
   is requested, the version tags of the dependent resources that MAY
   expose the entities in the response MUST also be included.  The



Gao, et al.              Expires January 9, 2020               [Page 16]

Internet-Draft         ALTO Extension: Path Vector             July 2019


   PropertyMapData has one member for each ANE identifier that appears
   in the first part, where the EntityProps has one member for each
   property requested by the client if applicable.

7.  Examples

   This section lists some examples of path vector queries and the
   corresponding responses.  Some long lines are truncated for better
   readability.

7.1.  Information Resource Directory Example

   Below is an example of an Information Resource Directory which
   enables the path vector extension.  Some critical modifications
   include:

   o  The "path-vector" cost type (Section 5.2) is defined in the "cost-
      types" of the "meta" field.

   o  The "cost-map-pv" information resource provides a Multipart Cost
      Map resource, which exposes the Maximum Reservable Bandwidth
      ("maxresbw") property.

   o  The "http-proxy-props" information resource provides a filtered
      Unified Property Map resource, which exposes the HTTP proxy entity
      domain (encoded as "http-proxy") and the "price" property.  Note
      that HTTP proxy is NOT a valid entity domain yet and is used here
      only for demonstration.

   o  The "endpoint-cost-pv" information resource provides a Multipart
      Endpoint Cost Service.  It exposes the Maximum Reservable
      Bandwidth ("maxresbw") property and the Persistent Entity
      property.  The persistent entities MAY come from the "http-proxy-
      props" resource.

   o  The "update-pv" information resource provides the incremental
      update ([I-D.ietf-alto-incr-update-sse]) service for the
      "endpoint-cost-pv" resource.

   {
     "meta": {
       "cost-types": {
         "path-vector": {
           "cost-mode": "array",
           "cost-metric": "ane-path"
         }
       }
     },



Gao, et al.              Expires January 9, 2020               [Page 17]

Internet-Draft         ALTO Extension: Path Vector             July 2019


     "resources": {
       "my-default-networkmap": {
         "uri" : "http://alto.example.com/networkmap",
         "media-type" : "application/alto-networkmap+json"
       },
       "cost-map-pv": {
         "uri": "http://alto.example.com/costmap/pv",
         "media-type": "multipart/related;
                        type=application/alto-costmap+json",
         "accepts": "application/alto-costmapfilter+json",
         "capabilities": {
           "cost-type-names": [ "path-vector" ],
           "ane-properties": [ "maxresbw" ]
         },
         "uses": [ "my-default-networkmap" ]
       },
       "http-proxy-props": {
         "uri": "http://alto.example.com/proxy-props",
         "media-type": "application/alto-propmap+json",
         "accpets": "application/alto-propmapparams+json",
         "capabilities": {
           "mappings": {
             "http-proxy": [ "price" ]
           }
         }
       },
       "endpoint-cost-pv": {
         "uri": "http://alto.exmaple.com/endpointcost/pv",
         "media-type": "multipart/related;
                        type=application/alto-endpointcost+json",
         "accepts": "application/alto-endpointcostparams+json",
         "capabilities": {
           "cost-type-names": [ "path-vector" ],
           "ane-properties": [ "maxresbw", "persistent-entities" ]
         },
         "uses": [ "http-proxy-props" ]
       },
       "update-pv": {
         "uri": "http://alto.example.com/updates/pv",
         "media-type": "text/event-stream",
         "uses": [ "endpoint-cost-pv" ],
         "accepts": "application/alto-updatestreamparams+json",
         "capabilities": {
           "support-stream-control": true
         }
       }
     }
   }



Gao, et al.              Expires January 9, 2020               [Page 18]

Internet-Draft         ALTO Extension: Path Vector             July 2019


7.2.  Example: Multipart Filtered Cost Map

   The following examples demonstrate the request to the "cost-map-pv"
   resource and the corresponding response.

   The request uses the path vector cost type in the "cost-type" field.
   The "ane-properties" field is missing, indicating that the client
   only requests for the path vector but not the ANE properties.

   The response consists of two parts.  The first part returns the array
   of ANE identifiers for each source and destination pair.  There are
   three ANEs, where "ane:L001" is shared by traffic from "PID1" to both
   "PID2" and "PID3".

   The second part returns an empty property map.  Note that the ANE
   entries are omitted since they have no properties (See Section 3.1 of
   [I-D.ietf-alto-unified-props-new]).

   POST /costmap/pv HTTP/1.1
   Host: alto.example.com
   Accept: multipart/related;type=application/alto-costmap+json,
           application/alto-error+json
   Content-Length: [TBD]
   Content-Type: application/alto-costmapfilter+json

   {
     "cost-type": {
       "cost-mode": "array",
       "cost-metric": "ane-path"
     },
     "pids": {
       "srcs": [ "PID1" ],
       "dsts": [ "PID2", "PID3" ]
     }
   }

   HTTP/1.1 200 OK
   Content-Length: [TBD]
   Content-Type: multipart/related;
                 boundary=example-1;
                 start=cost-map-pv.costmap;
                 type=application/alto-costmap+json

   --example-1
   Resource-Id: cost-map-pv.costmap
   Content-Type: application/alto-costmap+json

   {



Gao, et al.              Expires January 9, 2020               [Page 19]

Internet-Draft         ALTO Extension: Path Vector             July 2019


     "meta": {
       "vtag": {
         "resource-id": "cost-map-pv.costmap",
         "tag": "d827f484cb66ce6df6b5077cb8562b0a"
       },
       "dependent-vtags": [
         {
           "resource-id": "my-default-networkmap",
           "tag": "75ed013b3cb58f896e839582504f6228"
         }
       ],
       "cost-type": {
         "cost-mode": "array",
         "cost-metric": "ane-path"
       }
     },
     "cost-map": {
       "PID1": {
         "PID2": [ "ane:L001", "ane:L003" ],
         "PID3": [ "ane:L001", "ane:L004" ]
       }
     }
   }
   --example-1
   Resource-Id: cost-map-pv.propmap
   Content-Type: application/alto-propmap+json

   {
     "meta": {
       "dependent-vtags": [
         {
           "resource-id": "cost-map-pv.costmap",
           "tag": "d827f484cb66ce6df6b5077cb8562b0a"
         }
       ]
     },
     "property-map": {
     }
   }

7.3.  Example: Multipart Endpoint Cost Service

   The following examples demonstrate the request to the "endpoint-cost-
   pv" resource and the corresponding response.

   The request uses the path vector cost type in the "cost-type" field,
   and queries the Maximum Reservable Bandwidth ANE property and the
   Persistent Entity property.



Gao, et al.              Expires January 9, 2020               [Page 20]

Internet-Draft         ALTO Extension: Path Vector             July 2019


   The response consists of two parts.  The first part returns the array
   of ANE identifiers for each valid source and destination pair.

   The second part returns the requested properties of ANEs in the first
   part.  The "ane:NET001" element contains an HTTP proxy entity, which
   can be further used by the client.  Since it does not contain a
   "maxresbw" property, the client SHOULD assume it does NOT support
   bandwidth reservation but will NOT become a traffic bottleneck, as
   specified in Section 5.4.1.

   POST /endpointcost/pv HTTP/1.1
   Host: alto.example.com
   Accept: multipart/related;
           type=application/alto-endpointcost+json,
           application/alto-error+json
   Content-Length: [TBD]
   Content-Type: application/alto-endpointcostparams+json

   {
     "cost-type": {
       "cost-mode": "array",
       "cost-metric": "ane-path"
     },
     "endpoints": {
       "srcs": [ "ipv4:192.0.2.2" ],
       "dsts": [ "ipv4:192.0.2.89",
                 "ipv4:203.0.113.45",
                 "ipv6:2001:db8::10" ]
     },
     "ane-properties": [ "maxresbw", "persistent-entities" ]
   }

   HTTP/1.1 200 OK
   Content-Length: [TBD]
   Content-Type: multipart/related; boundary=example-2;
                 start=endpoint-cost-pv.ecs;
                 type=application/alto-endpointcost+json

   --example-2
   Resource-Id: endpoint-cost-pv.ecs
   Content-Type: application/alto-endpointcost+json

   {
     "meta": {
       "vtags": {
         "resource-id": "endpoint-cost-pv.ecs",
         "tag": "bb6bb72eafe8f9bdc4f335c7ed3b10822a391cef"
       },



Gao, et al.              Expires January 9, 2020               [Page 21]

Internet-Draft         ALTO Extension: Path Vector             July 2019


       "cost-type": {
         "cost-mode": "array",
         "cost-metric": "ane-path"
       }
     },
     "endpoint-cost-map": {
       "ipv4:192.0.2.2": {
         "ipv4:192.0.2.89":   [ "ane:NET001", "ane:L002" ],
         "ipv4:203.0.113.45": [ "ane:NET001", "ane:L003" ]
       }
     }
   }
   --example-2
   Resource-Id: endpoint-cost-pv.propmap
   Content-Type: application/alto-propmap+json

   {
     "meta": {
       "dependent-vtags": [
         {
           "resource-id": "endpoint-cost-pv.ecs",
           "tag": "bb6bb72eafe8f9bdc4f335c7ed3b10822a391cef"
         },
         {
           "resource-id": "http-proxy-props",
           "tag": "bf3c8c1819d2421c9a95a9d02af557a3"
         }
       ]
     },
     "property-map": {
       "ane:NET001": {
         "persistent-entities": [ "http-proxy:192.0.2.1" ]
       },
       "ane:L002": { "maxresbw": 48000000 },
       "ane:L003": { "maxresbw": 35000000 }
     }
   }

7.4.  Example: Incremental Updates

   In this example, an ALTO client subscribes to the incremental update
   for the Multipart Endpoint Cost resource "endpoint-cost-pv".









Gao, et al.              Expires January 9, 2020               [Page 22]

Internet-Draft         ALTO Extension: Path Vector             July 2019


   POST /updates/pv HTTP/1.1
   Host: alto.example.com
   Accept: text/event-stream
   Content-Type: application/alto-updatestreamparams+json
   Content-Length: [TBD]

   {
     "add": {
       "ecspvsub1": {
         "resource-id": "endpoint-cost-pv",
         "input": <ecs-input>
       }
     }
   }

   Based on the server-side process defined in
   [I-D.ietf-alto-incr-update-sse], the ALTO server will send the
   "control-uri" first using Server-Sent Event (SSE), followed by the
   full response of the multipart message.

   HTTP/1.1 200 OK
   Connection: keep-alive
   Content-Type: text/event-stream

   event: application/alto-updatestreamcontrol+json
   data: {"control-uri": "http://alto.example.com/updates/streams/1414"}

   event: multipart/related;boundary=example-3;start=pvmap;
          type=application/alto-endpointcost+json,ecspvsub1
   data: --example-3
   data: Resource-ID: endpoint-cost-pv.ecsmap02695067
   data: Content-Type: application/alto-endpointcost+json
   data:
   data: <endpoint-cost-map-entry>
   data: --example-3
   data: Resource-ID: endpoint-cost-pv.propmapbbc868aa
   data: Content-Type: application/alto-propmap+json
   data:
   data: <property-map-entry>
   data: --example-3--

   When the contents change, the ALTO server will publish the updates
   for each node in this tree separately.








Gao, et al.              Expires January 9, 2020               [Page 23]

Internet-Draft         ALTO Extension: Path Vector             July 2019


   event: application/merge-patch+json,
          ecspvsub1.endpoint-cost-pv.ecsmap02695067
   data: <Merge patch for endpoint-cost-map-update>

   event: application/merge-patch+json,
          ecspvsub1.endpoint-cost-pv.propmapbbc868aa
   data: <Merge patch for property-map-update>

8.  Compatibility

8.1.  Compatibility with Base ALTO Clients/Servers

   The Multipart Filtered Cost Map resource and the Multipart Endpoint
   Cost resource has no backward compatibility issue with the base ALTO
   clients and servers.  Although these two types of resources reuse the
   media types defined in the base ALTO protocol for the accept input
   parameters, they have different media types for responses.  If the
   ALTO server provides these two types of resources, but the ALTO
   client does not support them, the ALTO client will ignore the
   resources without conducting any incompatibility.

8.2.  Compatibility with Multi-Cost Extension

   This document does not specify how to integrate the "path-vector"
   cost mode with the multi-cost extension [RFC8189].  Although there is
   no reason why somebody has to compound the path vectors with other
   cost types in a single query, there is no compatible issue doing it
   without constraint tests.

8.3.  Compatibility with Incremental Update

   As this document still follows the basic request/response protocol
   with JSON encoding, it is surely compatible with the incremental
   update service as defined by [I-D.ietf-alto-incr-update-sse].  But
   the following details are to be noticed:

   o  When using the compound response, updates on both cost map and
      property map SHOULD be notified.

   o  When not using the compound response, because the cost map is in
      the "uses" attribute of the property map, once the path vectors in
      the cost map change, the ALTO server MUST send the updates of the
      cost map before the updates of the property map.








Gao, et al.              Expires January 9, 2020               [Page 24]

Internet-Draft         ALTO Extension: Path Vector             July 2019


9.  General Discussions

9.1.  Provide Calendar for Property Map

   Fetching the historical network information is useful for many
   traffic optimization problem.  [I-D.ietf-alto-cost-calendar] already
   proposes an ALTO extension called Cost Calendar which provides the
   historical cost values using Filtered Cost Map and Endpoint Cost
   Service.  However, the calendar for only path costs is not enough.

   For example, as the properties of ANEs (e.g., available bandwidth and
   link delay) are usually the real-time network states, they change
   frequently in the real network.  It is very helpful to get the
   historical value of these properties.  Applications may predicate the
   network status using these information to better optimize their
   performance.

   So the coming requirement may be a general calendar service for the
   ALTO information resources.

9.2.  Constraint Tests for General Cost Types

   The constraint test is a simple approach to query the data.  It
   allows users to filter the query result by specifying some boolean
   tests.  This approach is already used in the ALTO protocol.
   [RFC7285] and [RFC8189] allow ALTO clients to specify the
   "constraints" and "or-constraints" tests to better filter the result.

   However, the current defined syntax is too simple and can only be
   used to test the scalar cost value.  For more complex cost types,
   like the "array" mode defined in this document, it does not work
   well.  It will be helpful to propose more general constraint tests to
   better perform the query.

   In practice, it is too complex to customize a language for the
   general-purpose boolean tests, and can be a duplicated work.  So it
   may be a good idea to integrate some already defined and widely used
   query languages (or their subset) to solve this problem.  The
   candidates can be XQuery and JSONiq.

9.3.  General Multipart Resources Query

   Querying multiple ALTO information resources continuously MAY be a
   general requirement.  And the coming issues like inefficiency and
   inconsistency are also general.  There is no standard solving these
   issues yet.  So we need some approach to make the ALTO client request
   the compound ALTO information resources in a single query.




Gao, et al.              Expires January 9, 2020               [Page 25]

Internet-Draft         ALTO Extension: Path Vector             July 2019


10.  Security Considerations

   This document is an extension of the base ALTO protocol, so the
   Security Considerations [RFC7285] of the base ALTO protocol fully
   apply when this extension is provided by an ALTO server.

   The path vector extension requires additional considerations on two
   security considerations discussed in the base protocol:
   confidentiality of ALTO information (Section 15.3 of [RFC7285]) and
   availability of ALTO service (Section 15.5 of [RFC7285]).

   For confidentiality of ALTO information, a network operator should be
   aware of that this extension may introduce a new risk: the path
   vector information may make network attacks easier.  For example, as
   the path vector information may reveal more network internal
   structures than the more abstract single-node abstraction, an ALTO
   client may detect the bottleneck link and start a distributed denial-
   of-service (DDoS) attack involving minimal flows to conduct the in-
   network congestion.

   To mitigate this risk, the ALTO server should consider protection
   mechanisms to reduce information exposure or obfuscate the real
   information, in particular, in settings where the network and the
   application do not belong to the same trust domain.  But the
   implementation of path vector extension involving reduction or
   obfuscation should guarantees the constraints on the requested
   properties are still accurate.

   For availability of ALTO service, an ALTO server should be cognizant
   that using path vector extension might have a new risk: frequent
   requesting for path vectors might conduct intolerable increment of
   the server-side storage and break the ALTO server.  It is known that
   the computation of path vectors is unlikely to be cacheable, in that
   the results will depend on the particular requests (e.g., where the
   flows are distributed).  Hence, the service providing path vectors
   may become an entry point for denial-of-service attacks on the
   availability of an ALTO server.  To avoid this risk, authenticity and
   authorization of this ALTO service may need to be better protected.

   Even if there is no intentional attack, the dependent property map of
   path vector might be still dynamically enriched, in that every new
   request for path vectors will make the ALTO server generate a new
   property map.  So the properties of the abstract network elements can
   consume a large amount of resources when cached.  To avoid this, the
   ALTO server providing the path vector extension should support a
   time-to-live configuration for the property map, so that the outdated
   entries can be removed from the property map resource.




Gao, et al.              Expires January 9, 2020               [Page 26]

Internet-Draft         ALTO Extension: Path Vector             July 2019


11.  IANA Considerations

11.1.  ALTO Cost Mode Registry

   This document specifies a new cost mode "path-vector".  However, the
   base ALTO protocol does not have a Cost Mode Registry where new cost
   mode can be registered.  This new cost mode will be registered once
   the registry is defined either in a revised version of [RFC7285] or
   in another future extension.

11.2.  ALTO Entity Domain Registry

   As proposed in Section 9.2 of [I-D.ietf-alto-unified-props-new],
   "ALTO Domain Entity Registry" is requested.  Besides, a new domain is
   to be registered, listed in Table 1.

   +-------------+--------------------------+--------------------------+
   | Identifier  | Entity Address Encoding  | Hierarchy & Inheritance  |
   +-------------+--------------------------+--------------------------+
   | ane         | See Section 5.3.2        | None                     |
   +-------------+--------------------------+--------------------------+

                        Table 1: ALTO Entity Domain

11.3.  ALTO Property Type Registry

   The "ALTO Property Type Registry" is required by the ALTO Domain
   "ane", listed in Table 2.

   +-------------+------------+----------------------------------------+
   | Identifier  | Intended   | Dependencies and Interpretation        |
   |             | Semantics  |                                        |
   +-------------+------------+----------------------------------------+
   | ane:maxresb | The        | application/alto-costmap+json, or      |
   | w           | maximum    | application/alto-endpointcostmap+json, |
   |             | reservable | where the ANE names are used.          |
   |             | bandwidth  |                                        |
   |             | for the    |                                        |
   |             | ANE        |                                        |
   +-------------+------------+----------------------------------------+

           Table 2: ALTO Abstract Network Element Property Types

12.  Acknowledgments

   The authors would like to thank discussions with Andreas Voellmy,
   Erran Li, Haibin Son, Haizhou Du, Jiayuan Hu, Qiao Xiang, Tianyuan
   Liu, Xiao Shi, Xin Wang, and Yan Luo. The authors thank Greg



Gao, et al.              Expires January 9, 2020               [Page 27]

Internet-Draft         ALTO Extension: Path Vector             July 2019


   Bernstein (Grotto Networks), Dawn Chen (Tongji University), Wendy
   Roome, and Michael Scharf for their contributions to earlier drafts.

13.  References

13.1.  Normative References

   [I-D.ietf-alto-incr-update-sse]
              Roome, W. and Y. Yang, "ALTO Incremental Updates Using
              Server-Sent Events (SSE)", draft-ietf-alto-incr-update-
              sse-16 (work in progress), March 2019.

   [I-D.ietf-alto-unified-props-new]
              Roome, W., Randriamasy, S., Yang, Y., and J. Zhang,
              "Unified Properties for the ALTO Protocol", draft-ietf-
              alto-unified-props-new-07 (work in progress), March 2019.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC2387]  Levinson, E., "The MIME Multipart/Related Content-type",
              RFC 2387, DOI 10.17487/RFC2387, August 1998,
              <https://www.rfc-editor.org/info/rfc2387>.

   [RFC7285]  Alimi, R., Ed., Penno, R., Ed., Yang, Y., Ed., Kiesel, S.,
              Previdi, S., Roome, W., Shalunov, S., and R. Woundy,
              "Application-Layer Traffic Optimization (ALTO) Protocol",
              RFC 7285, DOI 10.17487/RFC7285, September 2014,
              <https://www.rfc-editor.org/info/rfc7285>.

   [RFC8189]  Randriamasy, S., Roome, W., and N. Schwan, "Multi-Cost
              Application-Layer Traffic Optimization (ALTO)", RFC 8189,
              DOI 10.17487/RFC8189, October 2017,
              <https://www.rfc-editor.org/info/rfc8189>.

13.2.  Informative References

   [I-D.bernstein-alto-topo]
              Bernstein, G., Yang, Y., and Y. Lee, "ALTO Topology
              Service: Uses Cases, Requirements, and Framework", draft-
              bernstein-alto-topo-00 (work in progress), October 2013.

   [I-D.ietf-alto-cost-calendar]
              Randriamasy, S., Yang, Y., Wu, Q., Lingli, D., and N.
              Schwan, "ALTO Cost Calendar", draft-ietf-alto-cost-
              calendar-01 (work in progress), February 2017.



Gao, et al.              Expires January 9, 2020               [Page 28]

Internet-Draft         ALTO Extension: Path Vector             July 2019


   [I-D.ietf-alto-performance-metrics]
              Wu, Q., Yang, Y., Lee, Y., Dhody, D., and S. Randriamasy,
              "ALTO Performance Cost Metrics", draft-ietf-alto-
              performance-metrics-06 (work in progress), November 2018.

Authors' Addresses

   Kai Gao
   Sichuan University
   Chengdu  610000
   China

   Email: kai.gao@scu.edu.cn


   Young Lee
   Huawei
   TX
   USA

   Email: leeyoung@huawei.com


   Sabine Randriamasy
   Nokia Bell Labs
   Route de Villejust
   NOZAY  91460
   FRANCE

   Email: Sabine.Randriamasy@nokia-bell-labs.com


   Y. Richard Yang
   Yale University
   51 Prospect St
   New Haven  CT
   USA

   Email: yry@cs.yale.edu


   Jingxuan Jensen Zhang
   Tongji University
   4800 Caoan Road
   Shanghai  201804
   China

   Email: jingxuan.n.zhang@gmail.com



Gao, et al.              Expires January 9, 2020               [Page 29]
