v = data.next_byte()
prefix = v >> 6
length = 1 << prefix

v = v & 0x3f
v = (v << 8) + data.next_byte()
X = root
membership_tag = MAC(membership_key, MLSMessageContentTBM);
ciphertext_sample = ciphertext[0..KDF.Nh-1]

sender_data_key = ExpandWithLabel(sender_data_secret, "key",
                         ciphertext_sample, AEAD.Nk)
sender_data_nonce = ExpandWithLabel(sender_data_secret, "nonce",
                         ciphertext_sample, AEAD.Nn)

X    ===>    X     |               ===>    X       _ <-- new parent
ciphertext = context.Seal("", path_secret)

init_secret = context.export("MLS 1.0 external init secret", KDF.Nh)
context = SetupBaseR(kem_output, external_priv, "")
init_secret = context.export("MLS 1.0 external init secret", KDF.Nh)

psk_secret     = psk_secret_[n]

pathRequiredTypes = [
       update,
       remove,
       external_init,
       group_context_extensions
pathRequired = false

proposal = proposalCache[id]
pathRequired = pathRequired ||
                      (proposal.msg_type in pathRequiredTypes)

welcome_nonce = KDF.Expand(welcome_secret, "nonce", AEAD.Nn)
welcome_key = KDF.Expand(welcome_secret, "key", AEAD.Nk)

k = 0
R = 2**k - 1
root = Node(nodes[R])
parent=01x => left=00x, right=10x

k = 0
k = 0
w = node_width(n)
k = level(x)
k = level(x)
r = x ^ (0x03 << (k - 1))
r = left(r)
k = level(x)
b = (x >> (k + 1)) & 0x01
p = parent_step(x)
p = parent_step(p)
p = parent(x, n)
r = root(n)
d = []
x = parent(x, n)
d = direct_path(x, n)
dx = set([x]) | set(direct_path(x, n))
dy = set([y]) | set(direct_path(y, n))
dxy = dx & dy
k = 0
span = self.span()
X = self
X = X.right
X = self.root.rightmost_leaf()
X = X.parent

P = Node("_", right=N)
X = self.root.rightmost_leaf()
Q = X.parent.parent
