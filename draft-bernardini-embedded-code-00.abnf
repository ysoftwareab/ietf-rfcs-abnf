header-line = header-marker [group] filename
header-marker = %x21.45.45.40.40.66.71.78.41.41.45.45
trailer-line  = %x21.45.45.40.40.69.78.68.41.41.45.45
group         = %x48 1*VCHAR SP         ; G
filename      = %x4F delim1 path delim2 ; F
delim1        = NO-SLASH
delim2        = NO-SLASH
path          = [directory] simple-name
directory     = 1*(name "/")
simple-name   = name
name          = 1*(SP / NO-SLASH)
VCHAR         = %x21-7E
NO-SLASH      = %x21-46 / %x48-7E       ; Visible char without '/'

      where delim1 MUST be equal to delim2 and MUST not be contained in
      path (it is not possible to specify this constraint with ABNF).
      delim1 and delim2 can be any printable character, but "/" since it
      is used as path separator.

      Rationale:  In other words, the first char after the "F" acts as a
         delimiter for the filename.  This "adaptive quotation"
         mechanism allows to quote every filename without any escaping
         mechanism.  (OK, _almost_ all filenames: a filename that uses
         every printable character is not quotable)

empty-line      = full-marker
full-line       = full-marker padding [body]
partial-line    = partial-marker padding [body]
full-marker     = "!."
partial-marker  = "!,"
padding         = SP / NON-ZERO / ALPHA / "|" / "@" / ":"
body            = *63(%x20-7E) %x21-7E
ALPHA           = %x41-5A / %x61-7A
NON-ZERO        = %x31-39

normal-escape  = "%" 2HEXDIGIT
percent-escape = "%%"
empty-escape   = "%."

      When a string is unescaped the following substitution are made

      *  In the case of a normal-escape sequence "%xy" the sequence is
         replaced by the octect whose value is equal to the hexadecimal
         number xy (e.g, %09 is replaced by a tab).

         Question:  Should we allow this only for non-printable
            characters or also for the printable ones?

      *  In the case of the percent-escape "%%" the sequence is replaced
         by a single %

      *  In the case of the empty-escape "%." the sequence is just
         deleted.

         Rationale:  This escape sequence could seem strange.  It has
            been introduced so that it can be used to break sequences of
            characters that could be misinterpreted in some context.
            For example, if the embedded text is imported in an XML file
            enclosed in a CDATA block and the code to be embedded
            contains the string "]]>" (for example, if the code produces
            an XML output), the string "]]>" in the source code can be
            mistaken for the end of the CDATA block.  By adding an
            empty-escape "%."after the "]]" the problem can be avoided.
            (In case you are wondering: yes, this happenend while
            developing the format).
                          +-----------+--------+
                          | Character |  Value |
                          +-----------+--------+
                          |   space   |    0   |
                          |    1..9   |  1..9  |
                          |    A..Z   | 10..35 |
                          |    a..z   | 36..61 |
                          |     @     |   62   |
                          |     |     |   63   |
                          |     :     |   64   |
                          +-----------+--------+

                 Table 1: Meaning of the padding character


result = ""
s = s[pos+2..-1]
s = s[pos+2..-1]
s = s[pos+3..-1]
buffer = ""
buffer = ""

buffer = ""
