S_CRLF == S_CRLF = True

names = MkPdu `{{MkInternetHeader}} [
     MkField "Version",
     MkField "IHL",
     MKField "Type of Service",
     MkField "Total Length",
     MkField "Identification",
     MkField "Flags",
     MkField "Fragment Offset",
     MkField "Time to Live",
     MkField "Protocol"]
test = Init
          |> SendPacket ((1, "COL"), 1)
          |> TransmitPacket ((1, "COL"), True)
          |> ReceivePacket ((1, "COL"), "", 1)
          |> TransmitAck 1
          |> ReceiveAck (1, 1)
sdp = MkSyntax [
     "session-description" `Eq` (Concat (TermName "version-field")
       (TermName "origin-field") [
         TermName "session-name-field",
         Optional (TermName "information-field"),
         Optional (TermName "uri-field"),
         Repeat Nothing Nothing (TermName "email-field"),
         Repeat Nothing Nothing (TermName "phone-field"),
         Optional (TermName "connection-field"),
         Repeat Nothing Nothing (TermName "bandwidth-field"),
         Repeat (Just 1) Nothing (TermName "time-description"),
         Optional (TermName "key-field"),
         Repeat Nothing Nothing (TermName "attribute-field"),
         Repeat Nothing Nothing (TermName "media-description")
         ]),
     ...
     ]

same = MkIso to from toFrom fromTo
     where
       to : Sdp -> SessionDescription

       from : SessionDescription -> Abnf

       toFrom : (x : SessionDescription ) -> to (from x) = x

       fromTo : (x : Sdp) -> from (to x) = x
rulename = "rulename" `Eq` (Concat (TermDec 97 []) (TermDec 98 [])
     [TermDec 99 []])
rulename = %d97 %d98 %d99

                                  Figure 3

internetHeader = `[
n = pad 32 options => padding = bitVector =>
n = pad 32 options => padding = bitVector =>
dscp = `[
reserved = bitVector {m = 1} => (df : BitVector 1) ->
version = [O, I, O, O] => (ihl : (Unsigned 4, Data)) ->
padding = bitVector {m = n} => InternetHeader

isSocratesMortal = \h => \f => f h
