concise-software-identity = {
     global-attributes,
     ? entity-entry,
     ? payload-xor-evidence-entry,
     ? link-entry,
     ? software-meta-entry,
any-uri = text
label = text / int

any-attribute = (
label => text / int / [ 2* text ] / [ 2* int ]
any-element-map = {
     global-attributes,
     * label => any-element-map / [ 2* any-element-map ],
global-attributes = (
     ? lang,
     * any-attribute,
resource-collection = (
     ? directory-entry,
     ? file-entry,
     ? process-entry,
     ? resource-entry
     * $$resource-extension
file = {
     filesystem-item,
     ? size,
     ? file-version,
     ? file-hash,
filesystem-item = (
     global-attributes,
     ? key,
     ? location,
     fs-name,
     ? root,
directory = {
     filesystem-item,
     path-elements,
process = {
     global-attributes,
     process-name,
     ? pid,
resource = {
     global-attributes,
     type,
entity = {
     global-attributes,
     extended-data,
     entity-name,
     ? reg-id,
     role,
     ? thumbprint,
evidence = {
     global-attributes,
     resource-collection,
     ? date,
     ? device-id,
link = {
     global-attributes,
     ? artifact,
     href,
     ? media-type,
     ? ownership,
     rel,
     ? type,
     ? use,
software-meta = {
     global-attributes,
     ? activation-status,
     ? channel-type,
     ? colloquial-version,
     ? description,
     ? edition,
     ? entitlement-data-required,
     ? entitlement-key,
     ? generator,
     ? persistent-id,
     ? product,
     ? product-family,
     ? revision,
     ? summary,
     ? unspsc-code,
     ? unspsc-version,
payload = {
     global-attributes,
     resource-collection,
payload-xor-evidence-entry = ((3: evidence) // (6: payload))
tag-id = (0: text)
swid-name = (1: text)
entity-entry = (2: entity / [ 2* entity ])
evidence-entry = (3: evidence)
link-entry = (4: link / [ 2* link ])
software-meta-entry = (5: software-meta / [ 2* software-meta ])
payload-entry = (6: payload)
any-element-entry = (7: any-element-map / [ 2* any-element-map ])
corpus = (8: bool)
patch = (9: bool)
media = (10: text)
supplemental = (11: bool)
tag-version = (12: integer)
software-version = (13: text)
version-scheme = (14: text)
lang = (15: text)
directory-entry = (16: directory / [ 2* directory ])
file-entry = (17: file / [ 2* file ])
process-entry = (18: process / [ 2* process ])
resource-entry = (19: resource / [ 2* resource ])
size = (20: integer)
file-version = (21: text)
key = (22: bool)
location = (23: text)
fs-name = (24: text)
root = (25: text)
path-elements = (26: { * file-entry,
                          * directory-entry,
                        }
                   )
process-name = (27: text)
pid = (28: integer)
type = (29: text)
extended-data = (30: any-element-map / [ 2* any-element-map ])
entity-name = (31: text)
reg-id = (32: any-uri)
role = (33: text / [2* text])
thumbprint = (34: text)
date = (35: time)
device-id = (36: text)
artifact = (37: text)
href = (38: any-uri)
ownership = (39: "shared" / "private" / "abandon")
rel = (40: text)
media-type = (41: text)
use = (42: "optional" / "required" / "recommended")
activation-status = (43: text)
channel-type = (44: text)
colloquial-version = (45: text)
description = (46: text)
edition = (47: text)
entitlement-data-required = (48: bool)
entitlement-key = (49: text)
generator = (50: text)
persistent-id = (51: text)
product = (52: text)
product-family = (53: text)
revision = (54: text)
summary = (55: text)
unspsc-code = (56: text)
unspsc-version = (57: text)
file-hash = (58: [ hash-alg-id: int,
                      hash-value: bstr,
                    ]
               )
file-hash = (56: [ hash-alg-id: int, hash-value: bstr ] )

firmware = {
  firmware-name,                  ; inherited from RFC4108
  ? firmware-version,
  ? firmware-package-identifier,  ; inherited from RFC4108
  ? dependency,                   ; inherited from RFC4108
  ? component-index,              ; equivalent to RFC4108 fwPkgType
  ? block-device-identifier,
  ? target-hardware-identifier,   ; an RFC4108 alternative to model-label
  model-label,
  ? firmware-hash,                ; a hash for a single, incl. NI hash-algo index
  ? firmware-package,         ; RCF4108, experimental, this is an actual firmware blob!
firmware-entry = (57: firmware / [ 2* firmware ])
firmware-hash = (58: [ hash-alg-id: int,
                      hash-value: bstr,
                     ]
                )
firmware-name = (59 : text)
firmware-version = (60 : text / int)
component-index = (61 : int)
model-label = (62: text / int)
block-device-identifier = (63 : text / int)
firmware-package = (64: bstr)
firmware-package-identifier = (65: text)
target-hardware-identifier = (66: text)
dependency = (67: { ? firmware-name,
                    ? firmware-version,
                    ? firmware-package-identifier,
                  }
             )
signed-coswid = #6.997(COSE-Sign1-coswid) ; see TBS7 in current COSE I-D

label = int / tstr  ; see COSE I-D 1.4.
values = any        ; see COSE I-D 1.4.

unprotected-signed-coswid-header = {
    1 => int,                   ; algorithm identifier
    3 => "application/coswid",  ; request for CoAP IANA registry to become an int
    * label => values,
protected-signed-coswid-header = {
    4 => bstr,                  ; key identifier
    * label => values,
COSE-Sign1-coswid = [
    protected: bstr .cbor protected-signed-coswid-header,
    unprotected: unprotected-signed-coswid-header,
    payload: bstr .cbor concise-software-identity,
    signature: bstr,
RIMM = [ + concise-software-identity / signed-coswid ]

persistentId='b0c55172-38e9-4e36-be86-92206ad8eddb'] * would
