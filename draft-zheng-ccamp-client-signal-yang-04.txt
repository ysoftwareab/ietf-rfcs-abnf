



CCAMP Working Group                                             H. Zheng
Internet-Draft                                                    A. Guo
Intended status: Standards Track                                 I. Busi
Expires: September 9, 2019                           Huawei Technologies
                                                              A. Snitser
                                                                  Sedona
                                                              F. Lazzeri
                                                                Ericsson
                                                                   Y. Xu
                                                                   CAICT
                                                                 Y. Zhao
                                                            China Mobile
                                                                  X. Liu
                                                          Volta Networks
                                                             G. Fioccola
                                                     Huawei Technologies
                                                           March 8, 2019


         A YANG Data Model for Transport Network Client Signals
                draft-zheng-ccamp-client-signal-yang-04

Abstract

   A transport network is a server-layer network to provide connectivity
   services to its client.  The topology and tunnel information in the
   transport layer has already been defined by generic Traffic-
   engineered models and technology-specific models (e.g., OTN, WSON).
   However, how the client signals are accessing to the network has not
   been described.  These information is necessary to both client and
   provider.

   This draft describes how the client signals are carried over
   transport network and defines YANG data models which are required
   during configuration procedure.  More specifically, several client
   signal (of transport network) models including ETH, STM-n, FC and so
   on, are defined in this draft.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.




Zheng, et al.           Expires September 9, 2019               [Page 1]

Internet-Draft     Transport Client Signals YANG Model        March 2019


   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on September 9, 2019.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology and Notations . . . . . . . . . . . . . . . . . .   3
   3.  Transport Network Client Signal Overview  . . . . . . . . . .   4
     3.1.  Overview of Service Request and Network Configuration
           Scenarios . . . . . . . . . . . . . . . . . . . . . . . .   4
     3.2.  Applicability of Proposed Model . . . . . . . . . . . . .   6
   4.  YANG Model for Transport Network Client Signal  . . . . . . .   7
     4.1.  YANG Tree for Ethernet Service  . . . . . . . . . . . . .   7
     4.2.  YANG Tree for other Transport Network Client Signal Model  11
   5.  YANG Code for Transport Network Client Signal . . . . . . . .  11
     5.1.  The ETH Service YANG Code . . . . . . . . . . . . . . . .  11
     5.2.  YANG Code for ETH transport type  . . . . . . . . . . . .  29
     5.3.  Other Transport Network client signal YANG Code . . . . .  47
   6.  Considerations and Open Issue . . . . . . . . . . . . . . . .  51
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  51
   8.  Manageability Considerations  . . . . . . . . . . . . . . . .  52
   9.  Security Considerations . . . . . . . . . . . . . . . . . . .  52
   10. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  52
   11. Contributors  . . . . . . . . . . . . . . . . . . . . . . . .  52
   12. References  . . . . . . . . . . . . . . . . . . . . . . . . .  53
     12.1.  Normative References . . . . . . . . . . . . . . . . . .  53
     12.2.  Informative References . . . . . . . . . . . . . . . . .  54
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  54




Zheng, et al.           Expires September 9, 2019               [Page 2]

Internet-Draft     Transport Client Signals YANG Model        March 2019


1.  Introduction

   A transport network is a server-layer network designed to provide
   connectivity services for a client-layer network to carry the client
   traffic transparently across the server-layer network resources.
   Currently the topology and tunnel models which have been defined for
   transport networks, such as [I-D.ietf-ccamp-otn-topo-yang] and
   [I-D.ietf-ccamp-otn-tunnel-model], provide server-layer topology
   abstraction and tunnel configuration between PEs.  However, there is
   a missing piece for configuring how the PEs should map the client-
   layer traffic, received from the CE, over the server-layer-tunnels:
   this gap is expected to be solved in this document.

   This document defines a data model of all transport network client
   signals, using YANG language defined in [RFC7950].  The model can be
   used by applications exposing to a transport controller via a
   RESTconf interface.  Furthermore, it can be used by an application
   for the following purposes (but not limited to):

   o  To request/update an end-to-end service by driving a new tunnel to
      be set up to support this service;

   o  To request/update an end-to-end service by using an existing
      tunnel;

   o  To receive notification with regard to the information change of
      the given service;

2.  Terminology and Notations

   A simplified graphical representation of the data model is used in
   this document.  The meaning of the symbols in the YANG data tree
   presented later in this document is defined in [RFC8340].  They are
   provided below for reference.

   o  Brackets "[" and "]" enclose list keys.

   o  Abbreviations before data node names: "rw" means configuration
      (read-write) and "ro" state data (read-only).

   o  Symbols after data node names: "?" means an optional node, "!"
      means a presence container, and "*" denotes a list and leaf-list.

   o  Parentheses enclose choice and case nodes, and case nodes are also
      marked with a colon (":").

   o  Ellipsis ("...") stands for contents of subtrees that are not
      shown.



Zheng, et al.           Expires September 9, 2019               [Page 3]

Internet-Draft     Transport Client Signals YANG Model        March 2019


3.  Transport Network Client Signal Overview

3.1.  Overview of Service Request and Network Configuration Scenarios

   A global view of a multi-domain service can be described as the
   Figure 1 . The customer is usually responsible to configure the CE
   nodes and to request to the provider the service intent, from the CE
   nodes perspective, while the provider is responsible to configure the
   whole network (including the PE nodes) to support the customer
   service intent.  Generally speaking, the network configurations
   required to support a customer service can be split into two
   different groups: CE-PE and PE-PE.  The CE-PE configuration deals
   with the client layer one-hop access link, while PE-PE configuration
   deals with the server layer tunnel.  In Figure 1 we mark the
   intermediate nodes as 'P', which has same switching capability of PE
   but just not the 'end-point'.  In this example, the link P-P and PE-P
   are a server-layer intra-domain or inter-domain link.


         +----+                                            +----+
         | CE |                                            | CE |
         +--+-+                                            +--+-+
            |                                                 |
            | -------------                      -------------|
          //|/             \\\\             /////             |\\\\
        //  |                  \\         //                  |    \\
       | +--+-+    +---+  +---+  |       | +---+   +---+   +--+-+    |
      |  | PE +----+ P +--+ P +---+-----+--+ P +---+ P +---+ PE |     |
       | +----+    +---+  +---+  |       | +---+   +---+   +----+    |
        \\                     //         \\                       //
          \\\\             ////             \\\\\             /////
              -------------                      -------------
                 Domain 1                         Domain 2


     Figure 1: Global view of Client Service with the Network Provider

   According to the responsibilities of each controller in [RFC8453],
   the controllers have different views of the service request and
   network configuration.  The duty of CNC is to give the MDSC a
   description of the customer service intent: candidate YANG models
   include L1CSM [I-D.ietf-ccamp-l1csm-yang], L2SM [RFC8466] and L3SM
   [RFC8299], which are classified as customer service models, according
   to [RFC8309].  These models provide necessary attributes to describe
   the customer service intent from the customer/CE perspective, and do
   not provide any specific network configuration.  These models also
   implies that the customer service description can be considered in a
   separate manner rather than integratig with network configurations,



Zheng, et al.           Expires September 9, 2019               [Page 4]

Internet-Draft     Transport Client Signals YANG Model        March 2019


   which also enable the controllers to abstract/virtualize the network
   resource to make them visible to the customer and also easier to
   manage.  In other words, the network knowledge is not necessary at
   CNC and CMI, which is seen in an abstracted form as shown in
   Figure 2.


                              /---------\
                           ///           \\\
     +----+               |                 |                 +----+
     | CE |--------------+      NETWORK      +----------------| CE |
     +----+               |                 |                 +----+
                           \\\           ///
                              \---------/


               Figure 2: CNC Viewpoint on the Client Service

   The functionalities of MDSC have been described in [RFC8453], which
   include the customer mapping/translation and multi-domain
   coordination.  By receiving the request from CNC, MDSC need to
   understand what network configuration can support the customer
   service intent and turn to the corresponding PNCs for configuration.
   The service request is therefore decomposed by MDSC into a few
   network configurations and forwarded to one or multiple PNCs
   respectively in single-domain and multi-domain scenario.  In general,
   the MDSC has the view of both PE and CE nodes and of some abstract
   information regarding the P nodes, as shown in Figure 3.  It is worth
   noting that this MDSC view is different with Figure 1 at the intra-
   domain link.  Usually these details are hidden, for scalability
   purposes, and therefore the MDSC has only an abstract view of each
   domain internal topology.


                       ------                -----
                   ////      \\\\        ///-     -\\\
                 //              \\    //             \\
     +----+     | +----+     +---+ |  |+---+     +----+ |     +----+
     | CE |-----+-| PE |-----| P |-+--+| P |-----| PE |-+-----| CE |
     +----+     | +----+     +---+ |  |+---+     +----+ |     +----+
                 \\              //    \\             //
                   \\\\      ////        \\\-     -///
                       ------                -----
                      Domain 1             Domain 2


    Figure 3: MDSC view of both Client Service and Network Abstraction




Zheng, et al.           Expires September 9, 2019               [Page 5]

Internet-Draft     Transport Client Signals YANG Model        March 2019


   PNC is the controller that configure the physical devices, based on
   the network configuration received from the MDSC.  Each PNC has the
   detailed view of its own domain, the example of view from PNC in
   domain 1 is shown in Figure 4.  The PNC has all the detailed topology
   information on PE and P nodes and on the intra-domain links.  The PNC
   configures the tunnel/tunnel segment within its domain based on the
   network configuration provided by the MDSC.  The PNC also configures
   the network part of the CE-PE access links as well as the mapping of
   the client-layer traffic and the server-layer tunnels, based on the
   network configuration provided by the MDSC.  The interaction between
   PNC and MDSC for the client-layer network configuration is
   accomplished by the models defined in this draft.


            |                        |                        |
            | -------------          |           -------------|
          //|/             \\\\      |      /////             |\\\\
        //  |                  \\    |    //                  |    \\
       | +--+-+    +---+  +---+  |   |   | +---+   +---+   +--+-+    |
      |  | PE +----+ P +--+ P +---+--+--+--+ P +---+ P +---+ PE |     |
       | +----+    +---+  +---+  |   |   | +---+   +---+   +----+    |
        \\                     //    |    \\                       //
          \\\\             ////      |      \\\\\             /////
              -------------          |           -------------
          PNC View in Domain 1       |       PNC View in Domain 2
                                     |


                Figure 4: PNC view on Network Configuration

3.2.  Applicability of Proposed Model

   Existing TE and technology-specific models, such as topology models
   and tunnel models, support the network configuration among PEs and
   Ps.  The customer service models, such as L1CSM, L2SM and L3SM, focus
   on describing the attributes among CEs.  However, there is a missing
   piece on how to configure the CE-PE session.  The models defined in
   this document provide the configuration on CE-PE when the provider
   server-layer network is TE-based technology.

   In the example of OTN as the server-layer transport network, a full
   list of G-PID was summarized in [RFC7139], which can be divided into
   a few categories.  The G-PID signals can be categorized into
   transparent and non-transparent.  Examples of transparent signals may
   include Ethernetphysical interfaces, FC, STM-n and so on.  In this
   approach the OTN devices is not aware of the client signal type, and
   this information is only necessary among the controllers.  Once the
   OTN tunnel is set up, there is no switching requested on the client



Zheng, et al.           Expires September 9, 2019               [Page 6]

Internet-Draft     Transport Client Signals YANG Model        March 2019


   layer, and therefore only signal mapping is needed, without a client
   tunnel set up.  The models that supporting the configuration of
   transparent signals are defined in Section 4.2.  The other category
   would be non-transparent, such as Carrier Ethernet and MPLS-TP, with
   a switching request on the client layer.  Once the OTN tunnel is set
   up, a corresponding tunnel in the client layer has to be set up to
   carry services.  The models that supporting the configuration of
   transparent signals are defined in Section 4.1.

   It is also worth noting that some client signal can be carried over
   multiple types of networks.  For example, the Ethernet services can
   be carried over either OTN or Ethernet TE tunnels (over optical or
   microwave networks).  The model specified in this document allows the
   support from networks with different technologies.

4.  YANG Model for Transport Network Client Signal

4.1.  YANG Tree for Ethernet Service


module: ietf-eth-tran-service
   +--rw etht-svc
      +--rw globals
      |  +--rw named-bandwidth-profiles* [bandwidth-profile-name]
      |     +--rw bandwidth-profile-name    string
      |     +--rw bandwidth-profile-type?   etht-types:bandwidth-profile-type
      |     +--rw CIR?                      uint64
      |     +--rw CBS?                      uint64
      |     +--rw EIR?                      uint64
      |     +--rw EBS?                      uint64
      |     +--rw color-aware?              boolean
      |     +--rw coupling-flag?            boolean
      +--rw etht-svc-instances* [etht-svc-name]
         +--rw etht-svc-name             string
         +--rw etht-svc-id?              string
         +--rw etht-svc-descr?           string
         +--rw etht-svc-customer?        string
         +--rw etht-svc-type?            etht-types:service-type
         +--rw etht-svc-lifecycle?       etht-types:lifecycle-status
         +--rw te-topology-identifier
         |  +--rw provider-id?   te-global-id
         |  +--rw client-id?     te-global-id
         |  +--rw topology-id?   te-topology-id
         +--rw resilience
         +--rw etht-svc-end-points* [etht-svc-end-point-name]
         |  +--rw etht-svc-end-point-name             string
         |  +--rw etht-svc-end-point-id?              string
         |  +--rw etht-svc-end-point-descr?           string



Zheng, et al.           Expires September 9, 2019               [Page 7]

Internet-Draft     Transport Client Signals YANG Model        March 2019


         |  +--rw topology-role?                      identityref
         |  +--rw resilience
         |  +--rw etht-svc-access-points* [access-point-id]
         |  |  +--rw access-point-id    string
         |  |  +--rw access-node-id?    te-types:te-node-id
         |  |  +--rw access-ltp-id?     te-types:te-tp-id
         |  |  +--rw access-role?       identityref
         |  |  +--rw pm-config
         |  |  |  +--rw pm-enable?             boolean
         |  |  |  +--rw sending-rate-high?     uint64
         |  |  |  +--rw sending-rate-low?      uint64
         |  |  |  +--rw receiving-rate-high?   uint64
         |  |  |  +--rw receiving-rate-low?    uint64
         |  |  +--ro state
         |  |  |  +--ro operational-state?    identityref
         |  |  |  +--ro provisioning-state?   identityref
         |  |  +--ro performance?       identityref
         |  +--rw service-classification-type?        identityref
         |  +--rw (service-classification)?
         |  |  +--:(port-classification)
         |  |  +--:(vlan-classification)
         |  |     +--rw outer-tag!
         |  |     |  +--rw tag-type?     etht-types:eth-tag-classify
         |  |     |  +--rw (individual-bundling-vlan)?
         |  |     |     +--:(individual-vlan)
         |  |     |     |  +--rw vlan-value?   etht-types:vlanid
         |  |     |     +--:(vlan-bundling)
         |  |     |        +--rw vlan-range?   etht-types:vid-range-type
         |  |     +--rw second-tag!
         |  |        +--rw tag-type?     etht-types:eth-tag-classify
         |  |        +--rw (individual-bundling-vlan)?
         |  |           +--:(individual-vlan)
         |  |           |  +--rw vlan-value?   etht-types:vlanid
         |  |           +--:(vlan-bundling)
         |  |              +--rw vlan-range?   etht-types:vid-range-type
         |  +--rw split-horizon-group?                string
         |  +--rw (direction)?
         |  |  +--:(symmetrical)
         |  |  |  +--rw ingress-egress-bandwidth-profile
         |  |  |     +--rw (style)?
         |  |  |        +--:(named)
         |  |  |        |  +--rw bandwidth-profile-name?   string
         |  |  |        +--:(value)
         |  |  |           +--rw bandwidth-profile-type?   etht-types:bandwidth-profile-type
         |  |  |           +--rw CIR?                      uint64
         |  |  |           +--rw CBS?                      uint64
         |  |  |           +--rw EIR?                      uint64
         |  |  |           +--rw EBS?                      uint64



Zheng, et al.           Expires September 9, 2019               [Page 8]

Internet-Draft     Transport Client Signals YANG Model        March 2019


         |  |  |           +--rw color-aware?              boolean
         |  |  |           +--rw coupling-flag?            boolean
         |  |  +--:(asymmetrical)
         |  |     +--rw ingress-bandwidth-profile
         |  |     |  +--rw (style)?
         |  |     |     +--:(named)
         |  |     |     |  +--rw bandwidth-profile-name?   string
         |  |     |     +--:(value)
         |  |     |        +--rw bandwidth-profile-type?   etht-types:bandwidth-profile-type
         |  |     |        +--rw CIR?                      uint64
         |  |     |        +--rw CBS?                      uint64
         |  |     |        +--rw EIR?                      uint64
         |  |     |        +--rw EBS?                      uint64
         |  |     |        +--rw color-aware?              boolean
         |  |     |        +--rw coupling-flag?            boolean
         |  |     +--rw egress-bandwidth-profile
         |  |        +--rw (style)?
         |  |           +--:(named)
         |  |           |  +--rw bandwidth-profile-name?   string
         |  |           +--:(value)
         |  |              +--rw bandwidth-profile-type?   etht-types:bandwidth-profile-type
         |  |              +--rw CIR?                      uint64
         |  |              +--rw CBS?                      uint64
         |  |              +--rw EIR?                      uint64
         |  |              +--rw EBS?                      uint64
         |  |              +--rw color-aware?              boolean
         |  |              +--rw coupling-flag?            boolean
         |  +--rw vlan-operations
         |     +--rw (direction)?
         |        +--:(symmetrical)
         |        |  +--rw symmetrical-operation
         |        |     +--rw pop-tags?    uint8
         |        |     +--rw push-tags
         |        |        +--rw outer-tag!
         |        |        |  +--rw tag-type?      etht-types:eth-tag-type
         |        |        |  +--rw vlan-value?    etht-types:vlanid
         |        |        |  +--rw default-pcp?   uint8
         |        |        +--rw second-tag!
         |        |           +--rw tag-type?      etht-types:eth-tag-type
         |        |           +--rw vlan-value?    etht-types:vlanid
         |        |           +--rw default-pcp?   uint8
         |        +--:(asymmetrical)
         |           +--rw asymmetrical-operation
         |              +--rw ingress
         |              |  +--rw pop-tags?    uint8
         |              |  +--rw push-tags
         |              |     +--rw outer-tag!
         |              |     |  +--rw tag-type?      etht-types:eth-tag-type



Zheng, et al.           Expires September 9, 2019               [Page 9]

Internet-Draft     Transport Client Signals YANG Model        March 2019


         |              |     |  +--rw vlan-value?    etht-types:vlanid
         |              |     |  +--rw default-pcp?   uint8
         |              |     +--rw second-tag!
         |              |        +--rw tag-type?      etht-types:eth-tag-type
         |              |        +--rw vlan-value?    etht-types:vlanid
         |              |        +--rw default-pcp?   uint8
         |              +--rw egress
         |                 +--rw pop-tags?    uint8
         |                 +--rw push-tags
         |                    +--rw outer-tag!
         |                    |  +--rw tag-type?      etht-types:eth-tag-type
         |                    |  +--rw vlan-value?    etht-types:vlanid
         |                    |  +--rw default-pcp?   uint8
         |                    +--rw second-tag!
         |                       +--rw tag-type?      etht-types:eth-tag-type
         |                       +--rw vlan-value?    etht-types:vlanid
         |                       +--rw default-pcp?   uint8
         +--rw etht-svc-tunnels* [tunnel-name]
         |  +--rw tunnel-name                  string
         |  +--rw (svc-multiplexing-tag)?
         |  |  +--:(other)
         |  |  +--:(none)
         |  |  +--:(vlan-tag)
         |  |  +--:(pw-segment)
         |  |     +--rw pw-id?                       string
         |  |     +--rw pw-name?                     string
         |  |     +--rw transmit-label?              rt-types:mpls-label
         |  |     +--rw receive-label?               rt-types:mpls-label
         |  |     +--rw encaplate-type?              identityref
         |  |     +--ro oper-status?                 identityref
         |  |     +--rw ingress-bandwidth-profile
         |  |        +--rw (style)?
         |  |           +--:(named)
         |  |           |  +--rw bandwidth-profile-name?   leafref
         |  |           +--:(value)
         |  |              +--rw bandwidth-profile-type?   etht-types:bandwidth-profile-type
         |  |              +--rw CIR?                      uint64
         |  |              +--rw CBS?                      uint64
         |  |              +--rw EIR?                      uint64
         |  |              +--rw EBS?                      uint64
         |  +--rw src-split-horizon-group?     string
         |  +--rw dst-split-horizon-group?     string
         +--rw admin-status?             identityref
         +--ro state
            +--ro operational-state?    identityref
            +--ro provisioning-state?   identityref
            +--ro creation-time?        yang:date-and-time
            +--ro last-updated-time?    yang:date-and-time



Zheng, et al.           Expires September 9, 2019              [Page 10]

Internet-Draft     Transport Client Signals YANG Model        March 2019


4.2.  YANG Tree for other Transport Network Client Signal Model


   module: ietf-trans-client-service
      +--rw client-svc
         +--rw client-svc-instances* [client-svc-name]
            +--rw client-svc-name        string
            +--rw client-svc-id?         string
            +--rw client-svc-descr?      string
            +--rw client-svc-customer?   string
            +--rw resilience
            +--rw te-topology-identifier
            |  +--rw provider-id?    te-types:te-global-id
            |  +--rw client-id?      te-types:te-global-id
            |  +--rw topology-id?    te-types:te-topology-id
            +--rw admin-status?          identityref
            +--rw src-access-ports
            |  +--rw access-node-id?   te-types:te-node-id
            |  +--rw access-ltp-id?    te-types:te-tp-id
            |  +--rw client-signal?    identityref
            +--rw dst-access-ports
            |  +--rw access-node-id?   te-types:te-node-id
            |  +--rw access-ltp-id?    te-types:te-tp-id
            |  +--rw client-signal?    identityref
            +--rw svc-tunnels* [tunnel-name]
            |  +--rw tunnel-name    string
            +--ro operational-state?     identityref
            +--ro provisioning-state?    identityref
            +--ro creation-time?         yang:date-and-time
            +--ro last-updated-time?     yang:date-and-time




5.  YANG Code for Transport Network Client Signal

5.1.  The ETH Service YANG Code


<CODE BEGINS> file "ietf-eth-tran-service.yang"
module ietf-eth-tran-service {

  namespace "urn:ietf:params:xml:ns:yang:ietf-eth-tran-service";

  prefix "ethtsvc";

  import ietf-yang-types {
    prefix "yang";



Zheng, et al.           Expires September 9, 2019              [Page 11]

Internet-Draft     Transport Client Signals YANG Model        March 2019


  }

  import ietf-te-types {
    prefix "te-types";
  }

  import ietf-eth-tran-types {
    prefix "etht-types";
  }

  import ietf-routing-types {
    prefix "rt-types";
  }

  organization
    "Internet Engineering Task Force (IETF) CCAMP WG";
  contact
    "
      WG List: <mailto:ccamp@ietf.org>

      ID-draft editor:
        Haomian Zheng (zhenghaomian@huawei.com);
        Italo Busi (italo.busi@huawei.com);
        Aihua Guo (aihuaguo@huawei.com);
        Anton Snitser (antons@sedonasys.com);
        Francesco Lazzeri (francesco.lazzeri@ericsson.com);
        Yunbin Xu (xuyunbin@ritt.cn);
        Yang Zhao (zhaoyangyjy@chinamobile.com);
        Xufeng Liu (Xufeng_Liu@jabil.com);
        Giuseppe Fioccola (giuseppe.fioccola@huawei.com);
    ";

  description
    "This module defines a YANG data model for describing
     the Ethernet services.";

  revision 2019-03-08 {
    description
      "version -04 as an I-D";
    reference
      "draft-zheng-ccamp-client-signal-yang";
  }

  /*
   * Groupings
   */

  grouping vlan-classification {



Zheng, et al.           Expires September 9, 2019              [Page 12]

Internet-Draft     Transport Client Signals YANG Model        March 2019


    description
      "A grouping which represents classification on an 802.1Q VLAN tag.";

    leaf tag-type {
      type etht-types:eth-tag-classify;
      description
        "The tag type used for VLAN classification.";
    }
    choice individual-bundling-vlan {
      description
        "VLAN based classification can be individual
         or bundling.";

      case individual-vlan {
        leaf vlan-value {
          type etht-types:vlanid;
          description
            "VLAN ID value.";
        }
      }

      case vlan-bundling {
        leaf vlan-range {
          type etht-types:vid-range-type;
          description
            "List of VLAN ID values.";
        }
      }
    }
  }

  grouping vlan-write {
    description
      "A grouping which represents push/pop operations
       of an 802.1Q VLAN tag.";

    leaf tag-type {
      type etht-types:eth-tag-type;
      description
        "The VLAN tag type to push/swap.";
    }
    leaf vlan-value {
      type etht-types:vlanid;
      description
        "The VLAN ID value to push/swap.";
    }
/*
 * To be added: this attribute is used when:



Zheng, et al.           Expires September 9, 2019              [Page 13]

Internet-Draft     Transport Client Signals YANG Model        March 2019


 * a) the ETH service has only one CoS (as in current version)
 * b) as a default when a mapping between a given CoS value
 *    and the PCP value is not defined (in future versions)
 */
    leaf default-pcp {
      type uint8 {
        range "0..7";
      }
      description
        "The default Priority Code Point (PCP) value to push/swap";
    }
  }

  grouping vlan-operations {
    description
      "A grouping which represents VLAN operations.";

      leaf pop-tags {
      type uint8 {
        range "1..2";
      }
      description
        "The number of VLAN tags to pop (or swap if used in
         conjunction with push-tags)";
    }
    container push-tags {
      description
        "The VLAN tags to push (or swap if used in
         conjunction with pop-tags)";

      container outer-tag {
        presence
          "Indicates existence of the outermost VLAN tag to
           push/swap";

        description
          "The outermost VLAN tag to push/swap.";

        uses vlan-write;
      }
      container second-tag {
        must
          '../outer-tag/tag-type = "etht-types:s-vlan-tag-type" and ' +
          'tag-type = "etht-types:c-vlan-tag-type"'
        {

          error-message
            "



Zheng, et al.           Expires September 9, 2019              [Page 14]

Internet-Draft     Transport Client Signals YANG Model        March 2019


              When pushing/swapping two tags, the outermost tag must
              be specified and of S-VLAN type and the second
              outermost tag must be of C-VLAN tag type.
            ";
          description
            "
              For IEEE 802.1Q interoperability, when pushing/swapping
              two tags, it is required that the outermost tag exists
              and is an S-VLAN, and the second outermost tag is a
              C-VLAN.
            ";
        }

        presence
          "Indicates existence of a second outermost VLAN tag to
           push/swap";

        description
          "The second outermost VLAN tag to push/swap.";

        uses vlan-write;
      }
    }
  }

  grouping named-or-value-bandwidth-profile {
    description
      "A grouping to configure a bandwdith profile either by
       referencing a named bandwidth profile or by
       configuring the values of the bandwidth profile attributes.";
    choice style {
      description
        "Whether the bandwidth profile is named or defined by value";

      case named {
        description
          "Named bandwidth profile.";
        leaf bandwidth-profile-name {
          type "string";
          description
            "Name of the bandwidth profile.";
        }
      }
      case value {
        description
          "Bandwidth profile configured by value.";
        uses etht-types:etht-bandwidth-profiles;
      }



Zheng, et al.           Expires September 9, 2019              [Page 15]

Internet-Draft     Transport Client Signals YANG Model        March 2019


    }
  }

  grouping bandwidth-profiles {
    description
      "A grouping which represent bandwidth profile configuration.";

    choice direction {
      description
        "Whether the bandwidth profiles are symmetrical or
         asymmetrical";
      case symmetrical {
        description
          "The same bandwidth profile is used to describe both
           the ingress and the egress bandwidth profile.";
        container ingress-egress-bandwidth-profile {
          description
            "The bandwdith profile used in both directions.";
          uses named-or-value-bandwidth-profile;
        }
      }
      case asymmetrical {
        description
          "Ingress and egress bandwidth profiles can be specified.";
        container ingress-bandwidth-profile {
          description
            "The bandwdith profile used in the ingress direction.";
          uses named-or-value-bandwidth-profile;
        }
        container egress-bandwidth-profile {
          description
            "The bandwdith profile used in the egress direction.";
          uses named-or-value-bandwidth-profile;
        }
      }
    }
  }

  grouping etht-svc-access-parameters {
    description
      "ETH services access parameters";

    leaf access-node-id {
      type te-types:te-node-id;
      description
        "The identifier of the access node in
         the ETH topology.";
    }



Zheng, et al.           Expires September 9, 2019              [Page 16]

Internet-Draft     Transport Client Signals YANG Model        March 2019


    leaf access-ltp-id {
      type te-types:te-tp-id;
      description
        "The TE link termination point identifier, used
         together with access-node-id to identify the
         access LTP.";
    }
    leaf access-role {
      type identityref {
        base etht-types:access-role;
      }
      description
        "Indicate the role of access, e.g., working or protection. ";
    }

    container pm-config {
      uses pm-config-grouping;
      description
      "This grouping is used to set the threshold value for
      performance monitoring. ";
    }

    container state {
      config false;
      description
      "The state is used to monitor the status of service. ";
      leaf operational-state {
        type identityref {
          base te-types:tunnel-state-type;
        }
        description
        "Indicating the operational state of client signal. ";
      }
      leaf provisioning-state {
        type identityref {
          base te-types:lsp-state-type;
        }
        description
        "Indicating the provisional state of client signal,
        especially when there is a change, i.e., revise, create. ";
      }
    }

    leaf performance {
      type identityref {
        base etht-types:performance;
      }
      config false;



Zheng, et al.           Expires September 9, 2019              [Page 17]

Internet-Draft     Transport Client Signals YANG Model        March 2019


      description
        "Performance Monitoring for the service. ";
    }


  }

  grouping etht-svc-tunnel-parameters {
    description
      "ETH services tunnel parameters";

    leaf tunnel-name {
      type string;
      description
        "TE service tunnel instance name.";
    }
    choice svc-multiplexing-tag {
      description
        "Service multiplexing is optional and flexible.";

      case other {
        /*
         placeholder to support proprietary multiplexing
         (for further discussion)
        */
      }

      case none {
        /* no additional information is needed */
      }

      case vlan-tag {
        /*
          No additional information is needed
          The C-Tag or S-Tag used for service mulitplexing is defined
          by the VLAN classification and operations configured in the
          etht-svc-access-parameters grouping
        */
      }

      case pw-segment {
        uses pw-segment-grouping;
      }
    }

/*
 * Open issue: can we constraints it to be used only with mp services?
 */



Zheng, et al.           Expires September 9, 2019              [Page 18]

Internet-Draft     Transport Client Signals YANG Model        March 2019


    leaf src-split-horizon-group {
      type string;
      description
      "Identify a split horizon group at the Tunnel source TTP";
    }
    leaf dst-split-horizon-group {
      type string;
      description
      "Identify a split horizon group at the Tunnel destination TTP";
    }
  }

  grouping  etht-svc-pm-threshold_config {
    description
      "Configuraiton parameters for Ethernet service PM thresholds.";

    leaf sending-rate-high {
      type uint64;
      description
        "High threshold of packet sending rate in kbps.";
    }
    leaf sending-rate-low {
      type uint64;
      description
        "Low threshold of packet sending rate in kbps.";
    }
    leaf receiving-rate-high {
      type uint64;
      description
        "High threshold of packet receiving rate in kbps.";
    }
    leaf receiving-rate-low {
      type uint64;
      description
        "Low threshold of packet receiving rate in kbps.";
    }
  }

  grouping  etht-svc-pm-stats {
    description
      "Ethernet service PM statistics.";

    leaf sending-rate-too-high {
      type uint32;
      description
        "Counter that indicates the number of times the sending rate is above the high threshold";
    }
    leaf sending-rate-too-low {



Zheng, et al.           Expires September 9, 2019              [Page 19]

Internet-Draft     Transport Client Signals YANG Model        March 2019


      type uint32;
      description
        "Counter that indicates the number of times the sending rate is below the low threshold";
    }
    leaf receiving-rate-too-high {
      type uint32;
      description
        "Counter that indicates the number of times the receiving rate is above the high threshold";
    }
    leaf receiving-rate-too-low {
      type uint32;
      description
        "Counter that indicates the number of times the receiving rate is below the low threshold";
    }
  }

  grouping  etht-svc-instance_config {
    description
      "Configuraiton parameters for Ethernet services.";

    leaf etht-svc-name {
      type string;
      description
        "Name of the ETH service.";
    }

    leaf etht-svc-id {
      type string;
      description
        "The Identifier of the ETH service.";
    }

    leaf etht-svc-descr {
      type string;
      description
        "Description of the ETH service.";
    }

    leaf etht-svc-customer {
      type string;
      description
        "Customer of the ETH service.";
    }

     leaf etht-svc-type {
      type etht-types:service-type;
      description
        "Type of ETH service (p2p, mp2mp or rmp).";



Zheng, et al.           Expires September 9, 2019              [Page 20]

Internet-Draft     Transport Client Signals YANG Model        March 2019


      /* Add default as p2p */
    }

     leaf etht-svc-lifecycle {
      type etht-types:lifecycle-status;
      description
        "Lifecycle state of ETH service.";
      /* Add default as installed  */
    }
    uses te-types:te-topology-identifier;

    uses resilience-grouping;

    list etht-svc-end-points {
      key etht-svc-end-point-name;
      description
      "The logical end point for the ETH service. ";
      uses etht-svc-end-point-grouping;
    }


    list etht-svc-tunnels {
      key tunnel-name;
      description
        "List of the TE Tunnels supporting the ETH
        service.";

      uses etht-svc-tunnel-parameters;
    }

    leaf admin-status {
      type identityref {
        base te-types:tunnel-admin-state-type;
      }
      default te-types:tunnel-admin-state-up;
      description "ETH service administrative state.";
    }
  }

  grouping  etht-svc-instance_state {
    description
      "State parameters for Ethernet services.";

    leaf operational-state {
    type identityref {
        base te-types:tunnel-state-type;
      }
      default te-types:tunnel-state-up;



Zheng, et al.           Expires September 9, 2019              [Page 21]

Internet-Draft     Transport Client Signals YANG Model        March 2019


    description "ETH service operational state.";
    }
    leaf provisioning-state {
      type identityref {
        base te-types:lsp-state-type;
      }
      description "ETH service provisioning state.";
    }
    leaf creation-time {
      type yang:date-and-time;
      description
        "Time of ETH service creation.";
    }
    leaf last-updated-time {
      type yang:date-and-time;
      description
        "Time of ETH service last update.";
    }

  }

  /*
   * Data nodes
   */

  container etht-svc {
    description
      "ETH services.";

    container globals {
      description
        "Globals Ethernet configuration data container";
      list named-bandwidth-profiles {
        key bandwidth-profile-name;
        description
          "List of named bandwidth profiles used by
           Ethernet services.";

        leaf bandwidth-profile-name {
          type string;
          description
            "Name of the bandwidth profile.";
        }
        uses etht-types:etht-bandwidth-profiles;
      }
    }

    list etht-svc-instances {



Zheng, et al.           Expires September 9, 2019              [Page 22]

Internet-Draft     Transport Client Signals YANG Model        March 2019


      key etht-svc-name;
      description
        "The list of p2p ETH service instances";

      uses etht-svc-instance_config;

      container state {
        config false;
        description
          "Ethernet Service states.";

        uses etht-svc-instance_state;
      }
    }
  }

  grouping resilience-grouping {
    description
      "Grouping for resilience configuration. ";
    container resilience {
    description
      "To configure the data plane protection parameters,
      currently a placeholder only, future candidate attributes
      include, Revert, WTR, Hold-off Timer, ...";
    }
  }

  grouping etht-svc-end-point-grouping {
    description
      "Grouping for the end point configuration.";
    leaf etht-svc-end-point-name {
      type string;
      description
      "The name of the logical end point of ETH service. ";
    }

    leaf etht-svc-end-point-id {
      type string;
      description
      "The identifier of the logical end point of ETH service.";
    }

    leaf etht-svc-end-point-descr {
      type string;
      description
      "The description of the logical end point of ETH service. ";
    }




Zheng, et al.           Expires September 9, 2019              [Page 23]

Internet-Draft     Transport Client Signals YANG Model        March 2019


    leaf topology-role {
      type identityref {
        base etht-types:topology-role;
      }
      description
      "Indicating the underlay topology role, e.g., hub,spoke, any-to-any ";
    }

    container resilience {
      description
      "Placeholder for resilience configuration, for future study. ";
    }

    list etht-svc-access-points {
      key access-point-id;
      min-elements "1";
/*
  Open Issue:
    Is it possible to limit the max-elements only for p2p services?

      max-elements "2";
*/
      description
        "List of the ETH trasport services access point instances.";

      leaf access-point-id {
        type string;
        description
          "ID of the service access point instance";
      }
      uses etht-svc-access-parameters;
    }

    leaf service-classification-type {
      type identityref {
        base etht-types:service-classification-type;
      }
      description
        "Service classification type.";
    }

    choice service-classification {
      description
        "Access classification can be port-based or
         VLAN based.";

      case port-classification {
        /* no additional information */



Zheng, et al.           Expires September 9, 2019              [Page 24]

Internet-Draft     Transport Client Signals YANG Model        March 2019


      }

      case vlan-classification {
        container outer-tag {
          presence "The outermost VLAN tag exists";
          description
            "Classifies traffic using the outermost VLAN tag.";

          uses vlan-classification;
        }
        container second-tag {
          must
            '../outer-tag/tag-type = "etht-types:classify-s-vlan" and ' +
            'tag-type = "etht-types:classify-c-vlan"'
          {
            error-message
              "
                When matching two tags, the outermost tag must be
                specified and of S-VLAN type and the second
                outermost tag must be of C-VLAN tag type.
              ";
            description
              "
                For IEEE 802.1Q interoperability, when matching two
                tags, it is required that the outermost tag exists
                and is an S-VLAN, and the second outermost tag is a
                C-VLAN.
              ";
          }
          presence "The second outermost VLAN tag exists";

          description
            "Classifies traffic using the second outermost VLAN tag.";

          uses vlan-classification;
        }
      }
    }

/*
 * Open issue: can we constraints it to be used only with mp services?
 */
    leaf split-horizon-group {
      type string;
      description "Identify a split horizon group";
    }

    uses bandwidth-profiles;



Zheng, et al.           Expires September 9, 2019              [Page 25]

Internet-Draft     Transport Client Signals YANG Model        March 2019


    container vlan-operations {
      description
        "Configuration of VLAN operations.";
      choice direction {
        description
          "Whether the VLAN operations are symmetrical or
           asymmetrical";
        case symmetrical {
          container symmetrical-operation {
            uses vlan-operations;
            description
              "Symmetrical operations.
               Expressed in the ingress direction, but
               the reverse operation is applied to egress traffic";
          }
        }
        case asymmetrical {
          container asymmetrical-operation {
            description "Asymmetrical operations";
            container ingress {
              uses vlan-operations;
              description "Ingress operations";
            }
            container egress {
              uses vlan-operations;
              description "Egress operations";
            }
          }
        }
      }
    }

  }

  grouping pm-config-grouping {
    description
      "Grouping used for Performance Monitoring Configuration. ";
    leaf pm-enable {
      type boolean;
      description
      "Whether to enable the performance monitoring.";
    }

    leaf sending-rate-high {
      type uint64;
      description
      "The upperbound of sending rate.";
    }



Zheng, et al.           Expires September 9, 2019              [Page 26]

Internet-Draft     Transport Client Signals YANG Model        March 2019


    leaf sending-rate-low {
      type uint64;
      description
      "The lowerbound of sending rate.";
    }

    leaf receiving-rate-high {
      type uint64;
      description
      "The upperbound of receiving rate.";
    }

    leaf receiving-rate-low {
      type uint64;
      description
      "The lowerbound of receiving rate.";
    }
  }

  grouping pw-segment-grouping {
    description
      "Grouping used for PW configuration. ";
    leaf pw-id {
      type string;
      description
      "The Identifier information of pseudowire. ";
    }

    leaf pw-name {
      type string;
      description
      "The name information of pseudowire.";
    }

    leaf transmit-label {
      type rt-types:mpls-label;
      description
      "Transmit label information in PW. ";
    }

    leaf receive-label {
      type rt-types:mpls-label;
      description
      "Receive label information in PW. ";
    }

    leaf encaplate-type {
      type identityref {



Zheng, et al.           Expires September 9, 2019              [Page 27]

Internet-Draft     Transport Client Signals YANG Model        March 2019


        base etht-types:encaplate-type;
      }
      description
        "The encapsulation type, raw or tag. ";
    }

    leaf oper-status {
      type identityref {
        base te-types:tunnel-state-type;
      }
      config false;
      description
        "The operational state of the PW segment. ";
    }

    container ingress-bandwidth-profile {
      description
        "Bandwidth Profile for ingress. ";
      uses pw-segment-named-or-value-bandwidth-profile;
    }
  }

  grouping pw-segment-named-or-value-bandwidth-profile {
    description
      "A grouping to configure a bandwdith profile either by
       referencing a named bandwidth profile or by
       configuring the values of the bandwidth profile attributes.";
    choice style {
      description
        "Whether the bandwidth profile is named or defined by value";
      case named {
        description
          "Named bandwidth profile.";
        leaf bandwidth-profile-name {
          type leafref {
            path "/ethtsvc:etht-svc/ethtsvc:globals/ethtsvc:named-bandwidth-profiles/ethtsvc:bandwidth-profile-name";
          }
          description
            "Name of the bandwidth profile.";
        }
      }
      case value {
        description
          "Bandwidth profile configured by value.";
        uses etht-types:pw-segement-bandwidth-profile-grouping;
      }
    }
  }



Zheng, et al.           Expires September 9, 2019              [Page 28]

Internet-Draft     Transport Client Signals YANG Model        March 2019


}

<CODE ENDS>


5.2.  YANG Code for ETH transport type


<CODE BEGINS> file "ietf-eth-tran-types.yang"
module ietf-eth-tran-service {

  namespace "urn:ietf:params:xml:ns:yang:ietf-eth-tran-service";

  prefix "ethtsvc";

  import ietf-yang-types {
    prefix "yang";
  }

  import ietf-te-types {
    prefix "te-types";
  }

  import ietf-eth-tran-types {
    prefix "etht-types";
  }

  import ietf-routing-types {
    prefix "rt-types";
  }

  organization
    "Internet Engineering Task Force (IETF) CCAMP WG";
  contact
    "
      WG List: <mailto:ccamp@ietf.org>

      ID-draft editor:
        Haomian Zheng (zhenghaomian@huawei.com);
        Italo Busi (italo.busi@huawei.com);
        Aihua Guo (aihuaguo@huawei.com);
        Anton Snitser (antons@sedonasys.com);
        Francesco Lazzeri (francesco.lazzeri@ericsson.com);
        Yunbin Xu (xuyunbin@ritt.cn);
        Yang Zhao (zhaoyangyjy@chinamobile.com);
        Xufeng Liu (Xufeng_Liu@jabil.com);
        Giuseppe Fioccola (giuseppe.fioccola@huawei.com);
    ";



Zheng, et al.           Expires September 9, 2019              [Page 29]

Internet-Draft     Transport Client Signals YANG Model        March 2019


  description
    "This module defines a YANG data model for describing
     the Ethernet services.";

  revision 2019-03-08 {
    description
      "version -04 as an I-D";
    reference
      "draft-zheng-ccamp-client-signal-yang";
  }

  /*
   * Groupings
   */

  grouping vlan-classification {
    description
      "A grouping which represents classification on an 802.1Q VLAN tag.";

    leaf tag-type {
      type etht-types:eth-tag-classify;
      description
        "The tag type used for VLAN classification.";
    }
    choice individual-bundling-vlan {
      description
        "VLAN based classification can be individual
         or bundling.";

      case individual-vlan {
        leaf vlan-value {
          type etht-types:vlanid;
          description
            "VLAN ID value.";
        }
      }

      case vlan-bundling {
        leaf vlan-range {
          type etht-types:vid-range-type;
          description
            "List of VLAN ID values.";
        }
      }
    }
  }

  grouping vlan-write {



Zheng, et al.           Expires September 9, 2019              [Page 30]

Internet-Draft     Transport Client Signals YANG Model        March 2019


    description
      "A grouping which represents push/pop operations
       of an 802.1Q VLAN tag.";

    leaf tag-type {
      type etht-types:eth-tag-type;
      description
        "The VLAN tag type to push/swap.";
    }
    leaf vlan-value {
      type etht-types:vlanid;
      description
        "The VLAN ID value to push/swap.";
    }
/*
 * To be added: this attribute is used when:
 * a) the ETH service has only one CoS (as in current version)
 * b) as a default when a mapping between a given CoS value
 *    and the PCP value is not defined (in future versions)
 */
    leaf default-pcp {
      type uint8 {
        range "0..7";
      }
      description
        "The default Priority Code Point (PCP) value to push/swap";
    }
  }

  grouping vlan-operations {
    description
      "A grouping which represents VLAN operations.";

      leaf pop-tags {
      type uint8 {
        range "1..2";
      }
      description
        "The number of VLAN tags to pop (or swap if used in
         conjunction with push-tags)";
    }
    container push-tags {
      description
        "The VLAN tags to push (or swap if used in
         conjunction with pop-tags)";

      container outer-tag {
        presence



Zheng, et al.           Expires September 9, 2019              [Page 31]

Internet-Draft     Transport Client Signals YANG Model        March 2019


          "Indicates existence of the outermost VLAN tag to
           push/swap";

        description
          "The outermost VLAN tag to push/swap.";

        uses vlan-write;
      }
      container second-tag {
        must
          '../outer-tag/tag-type = "etht-types:s-vlan-tag-type" and ' +
          'tag-type = "etht-types:c-vlan-tag-type"'
        {

          error-message
            "
              When pushing/swapping two tags, the outermost tag must
              be specified and of S-VLAN type and the second
              outermost tag must be of C-VLAN tag type.
            ";
          description
            "
              For IEEE 802.1Q interoperability, when pushing/swapping
              two tags, it is required that the outermost tag exists
              and is an S-VLAN, and the second outermost tag is a
              C-VLAN.
            ";
        }

        presence
          "Indicates existence of a second outermost VLAN tag to
           push/swap";

        description
          "The second outermost VLAN tag to push/swap.";

        uses vlan-write;
      }
    }
  }

  grouping named-or-value-bandwidth-profile {
    description
      "A grouping to configure a bandwdith profile either by
       referencing a named bandwidth profile or by
       configuring the values of the bandwidth profile attributes.";
    choice style {
      description



Zheng, et al.           Expires September 9, 2019              [Page 32]

Internet-Draft     Transport Client Signals YANG Model        March 2019


        "Whether the bandwidth profile is named or defined by value";

      case named {
        description
          "Named bandwidth profile.";
        leaf bandwidth-profile-name {
          type "string";
          description
            "Name of the bandwidth profile.";
        }
      }
      case value {
        description
          "Bandwidth profile configured by value.";
        uses etht-types:etht-bandwidth-profiles;
      }
    }
  }

  grouping bandwidth-profiles {
    description
      "A grouping which represent bandwidth profile configuration.";

    choice direction {
      description
        "Whether the bandwidth profiles are symmetrical or
         asymmetrical";
      case symmetrical {
        description
          "The same bandwidth profile is used to describe both
           the ingress and the egress bandwidth profile.";
        container ingress-egress-bandwidth-profile {
          description
            "The bandwdith profile used in both directions.";
          uses named-or-value-bandwidth-profile;
        }
      }
      case asymmetrical {
        description
          "Ingress and egress bandwidth profiles can be specified.";
        container ingress-bandwidth-profile {
          description
            "The bandwdith profile used in the ingress direction.";
          uses named-or-value-bandwidth-profile;
        }
        container egress-bandwidth-profile {
          description
            "The bandwdith profile used in the egress direction.";



Zheng, et al.           Expires September 9, 2019              [Page 33]

Internet-Draft     Transport Client Signals YANG Model        March 2019


          uses named-or-value-bandwidth-profile;
        }
      }
    }
  }

  grouping etht-svc-access-parameters {
    description
      "ETH services access parameters";

    leaf access-node-id {
      type te-types:te-node-id;
      description
        "The identifier of the access node in
         the ETH topology.";
    }
    leaf access-ltp-id {
      type te-types:te-tp-id;
      description
        "The TE link termination point identifier, used
         together with access-node-id to identify the
         access LTP.";
    }
    leaf access-role {
      type identityref {
        base etht-types:access-role;
      }
      description
        "Indicate the role of access, e.g., working or protection. ";
    }

    container pm-config {
      uses pm-config-grouping;
      description
      "This grouping is used to set the threshold value for
      performance monitoring. ";
    }

    container state {
      config false;
      description
      "The state is used to monitor the status of service. ";
      leaf operational-state {
        type identityref {
          base te-types:tunnel-state-type;
        }
        description
        "Indicating the operational state of client signal. ";



Zheng, et al.           Expires September 9, 2019              [Page 34]

Internet-Draft     Transport Client Signals YANG Model        March 2019


      }
      leaf provisioning-state {
        type identityref {
          base te-types:lsp-state-type;
        }
        description
        "Indicating the provisional state of client signal,
        especially when there is a change, i.e., revise, create. ";
      }
    }

    leaf performance {
      type identityref {
        base etht-types:performance;
      }
      config false;
      description
        "Performance Monitoring for the service. ";
    }


  }

  grouping etht-svc-tunnel-parameters {
    description
      "ETH services tunnel parameters";

    leaf tunnel-name {
      type string;
      description
        "TE service tunnel instance name.";
    }
    choice svc-multiplexing-tag {
      description
        "Service multiplexing is optional and flexible.";

      case other {
        /*
         placeholder to support proprietary multiplexing
         (for further discussion)
        */
      }

      case none {
        /* no additional information is needed */
      }

      case vlan-tag {



Zheng, et al.           Expires September 9, 2019              [Page 35]

Internet-Draft     Transport Client Signals YANG Model        March 2019


        /*
          No additional information is needed
          The C-Tag or S-Tag used for service mulitplexing is defined
          by the VLAN classification and operations configured in the
          etht-svc-access-parameters grouping
        */
      }

      case pw-segment {
        uses pw-segment-grouping;
      }
    }

/*
 * Open issue: can we constraints it to be used only with mp services?
 */
    leaf src-split-horizon-group {
      type string;
      description
      "Identify a split horizon group at the Tunnel source TTP";
    }
    leaf dst-split-horizon-group {
      type string;
      description
      "Identify a split horizon group at the Tunnel destination TTP";
    }
  }

  grouping  etht-svc-pm-threshold_config {
    description
      "Configuraiton parameters for Ethernet service PM thresholds.";

    leaf sending-rate-high {
      type uint64;
      description
        "High threshold of packet sending rate in kbps.";
    }
    leaf sending-rate-low {
      type uint64;
      description
        "Low threshold of packet sending rate in kbps.";
    }
    leaf receiving-rate-high {
      type uint64;
      description
        "High threshold of packet receiving rate in kbps.";
    }
    leaf receiving-rate-low {



Zheng, et al.           Expires September 9, 2019              [Page 36]

Internet-Draft     Transport Client Signals YANG Model        March 2019


      type uint64;
      description
        "Low threshold of packet receiving rate in kbps.";
    }
  }

  grouping  etht-svc-pm-stats {
    description
      "Ethernet service PM statistics.";

    leaf sending-rate-too-high {
      type uint32;
      description
        "Counter that indicates the number of times the sending rate is above the high threshold";
    }
    leaf sending-rate-too-low {
      type uint32;
      description
        "Counter that indicates the number of times the sending rate is below the low threshold";
    }
    leaf receiving-rate-too-high {
      type uint32;
      description
        "Counter that indicates the number of times the receiving rate is above the high threshold";
    }
    leaf receiving-rate-too-low {
      type uint32;
      description
        "Counter that indicates the number of times the receiving rate is below the low threshold";
    }
  }

  grouping  etht-svc-instance_config {
    description
      "Configuraiton parameters for Ethernet services.";

    leaf etht-svc-name {
      type string;
      description
        "Name of the ETH service.";
    }

    leaf etht-svc-id {
      type string;
      description
        "The Identifier of the ETH service.";
    }




Zheng, et al.           Expires September 9, 2019              [Page 37]

Internet-Draft     Transport Client Signals YANG Model        March 2019


    leaf etht-svc-descr {
      type string;
      description
        "Description of the ETH service.";
    }

    leaf etht-svc-customer {
      type string;
      description
        "Customer of the ETH service.";
    }

     leaf etht-svc-type {
      type etht-types:service-type;
      description
        "Type of ETH service (p2p, mp2mp or rmp).";
      /* Add default as p2p */
    }

     leaf etht-svc-lifecycle {
      type etht-types:lifecycle-status;
      description
        "Lifecycle state of ETH service.";
      /* Add default as installed  */
    }
    uses te-types:te-topology-identifier;

    uses resilience-grouping;

    list etht-svc-end-points {
      key etht-svc-end-point-name;
      description
      "The logical end point for the ETH service. ";
      uses etht-svc-end-point-grouping;
    }


    list etht-svc-tunnels {
      key tunnel-name;
      description
        "List of the TE Tunnels supporting the ETH
        service.";

      uses etht-svc-tunnel-parameters;
    }

    leaf admin-status {
      type identityref {



Zheng, et al.           Expires September 9, 2019              [Page 38]

Internet-Draft     Transport Client Signals YANG Model        March 2019


        base te-types:tunnel-admin-state-type;
      }
      default te-types:tunnel-admin-state-up;
      description "ETH service administrative state.";
    }
  }

  grouping  etht-svc-instance_state {
    description
      "State parameters for Ethernet services.";

    leaf operational-state {
    type identityref {
        base te-types:tunnel-state-type;
      }
      default te-types:tunnel-state-up;
    description "ETH service operational state.";
    }
    leaf provisioning-state {
      type identityref {
        base te-types:lsp-state-type;
      }
      description "ETH service provisioning state.";
    }
    leaf creation-time {
      type yang:date-and-time;
      description
        "Time of ETH service creation.";
    }
    leaf last-updated-time {
      type yang:date-and-time;
      description
        "Time of ETH service last update.";
    }

  }

  /*
   * Data nodes
   */

  container etht-svc {
    description
      "ETH services.";

    container globals {
      description
        "Globals Ethernet configuration data container";



Zheng, et al.           Expires September 9, 2019              [Page 39]

Internet-Draft     Transport Client Signals YANG Model        March 2019


      list named-bandwidth-profiles {
        key bandwidth-profile-name;
        description
          "List of named bandwidth profiles used by
           Ethernet services.";

        leaf bandwidth-profile-name {
          type string;
          description
            "Name of the bandwidth profile.";
        }
        uses etht-types:etht-bandwidth-profiles;
      }
    }

    list etht-svc-instances {
      key etht-svc-name;
      description
        "The list of p2p ETH service instances";

      uses etht-svc-instance_config;

      container state {
        config false;
        description
          "Ethernet Service states.";

        uses etht-svc-instance_state;
      }
    }
  }

  grouping resilience-grouping {
    description
      "Grouping for resilience configuration. ";
    container resilience {
    description
      "To configure the data plane protection parameters,
      currently a placeholder only, future candidate attributes
      include, Revert, WTR, Hold-off Timer, ...";
    }
  }

  grouping etht-svc-end-point-grouping {
    description
      "Grouping for the end point configuration.";
    leaf etht-svc-end-point-name {
      type string;



Zheng, et al.           Expires September 9, 2019              [Page 40]

Internet-Draft     Transport Client Signals YANG Model        March 2019


      description
      "The name of the logical end point of ETH service. ";
    }

    leaf etht-svc-end-point-id {
      type string;
      description
      "The identifier of the logical end point of ETH service.";
    }

    leaf etht-svc-end-point-descr {
      type string;
      description
      "The description of the logical end point of ETH service. ";
    }

    leaf topology-role {
      type identityref {
        base etht-types:topology-role;
      }
      description
      "Indicating the underlay topology role, e.g., hub,spoke, any-to-any ";
    }

    container resilience {
      description
      "Placeholder for resilience configuration, for future study. ";
    }

    list etht-svc-access-points {
      key access-point-id;
      min-elements "1";
/*
  Open Issue:
    Is it possible to limit the max-elements only for p2p services?

      max-elements "2";
*/
      description
        "List of the ETH trasport services access point instances.";

      leaf access-point-id {
        type string;
        description
          "ID of the service access point instance";
      }
      uses etht-svc-access-parameters;
    }



Zheng, et al.           Expires September 9, 2019              [Page 41]

Internet-Draft     Transport Client Signals YANG Model        March 2019


    leaf service-classification-type {
      type identityref {
        base etht-types:service-classification-type;
      }
      description
        "Service classification type.";
    }

    choice service-classification {
      description
        "Access classification can be port-based or
         VLAN based.";

      case port-classification {
        /* no additional information */
      }

      case vlan-classification {
        container outer-tag {
          presence "The outermost VLAN tag exists";
          description
            "Classifies traffic using the outermost VLAN tag.";

          uses vlan-classification;
        }
        container second-tag {
          must
            '../outer-tag/tag-type = "etht-types:classify-s-vlan" and ' +
            'tag-type = "etht-types:classify-c-vlan"'
          {
            error-message
              "
                When matching two tags, the outermost tag must be
                specified and of S-VLAN type and the second
                outermost tag must be of C-VLAN tag type.
              ";
            description
              "
                For IEEE 802.1Q interoperability, when matching two
                tags, it is required that the outermost tag exists
                and is an S-VLAN, and the second outermost tag is a
                C-VLAN.
              ";
          }
          presence "The second outermost VLAN tag exists";

          description
            "Classifies traffic using the second outermost VLAN tag.";



Zheng, et al.           Expires September 9, 2019              [Page 42]

Internet-Draft     Transport Client Signals YANG Model        March 2019


          uses vlan-classification;
        }
      }
    }

/*
 * Open issue: can we constraints it to be used only with mp services?
 */
    leaf split-horizon-group {
      type string;
      description "Identify a split horizon group";
    }

    uses bandwidth-profiles;

    container vlan-operations {
      description
        "Configuration of VLAN operations.";
      choice direction {
        description
          "Whether the VLAN operations are symmetrical or
           asymmetrical";
        case symmetrical {
          container symmetrical-operation {
            uses vlan-operations;
            description
              "Symmetrical operations.
               Expressed in the ingress direction, but
               the reverse operation is applied to egress traffic";
          }
        }
        case asymmetrical {
          container asymmetrical-operation {
            description "Asymmetrical operations";
            container ingress {
              uses vlan-operations;
              description "Ingress operations";
            }
            container egress {
              uses vlan-operations;
              description "Egress operations";
            }
          }
        }
      }
    }

  }



Zheng, et al.           Expires September 9, 2019              [Page 43]

Internet-Draft     Transport Client Signals YANG Model        March 2019


  grouping pm-config-grouping {
    description
      "Grouping used for Performance Monitoring Configuration. ";
    leaf pm-enable {
      type boolean;
      description
      "Whether to enable the performance monitoring.";
    }

    leaf sending-rate-high {
      type uint64;
      description
      "The upperbound of sending rate.";
    }

    leaf sending-rate-low {
      type uint64;
      description
      "The lowerbound of sending rate.";
    }

    leaf receiving-rate-high {
      type uint64;
      description
      "The upperbound of receiving rate.";
    }

    leaf receiving-rate-low {
      type uint64;
      description
      "The lowerbound of receiving rate.";
    }
  }

  grouping pw-segment-grouping {
    description
      "Grouping used for PW configuration. ";
    leaf pw-id {
      type string;
      description
      "The Identifier information of pseudowire. ";
    }

    leaf pw-name {
      type string;
      description
      "The name information of pseudowire.";
    }



Zheng, et al.           Expires September 9, 2019              [Page 44]

Internet-Draft     Transport Client Signals YANG Model        March 2019


    leaf transmit-label {
      type rt-types:mpls-label;
      description
      "Transmit label information in PW. ";
    }

    leaf receive-label {
      type rt-types:mpls-label;
      description
      "Receive label information in PW. ";
    }

    leaf encaplate-type {
      type identityref {
        base etht-types:encaplate-type;
      }
      description
        "The encapsulation type, raw or tag. ";
    }

    leaf oper-status {
      type identityref {
        base te-types:tunnel-state-type;
      }
      config false;
      description
        "The operational state of the PW segment. ";
    }

    container ingress-bandwidth-profile {
      description
        "Bandwidth Profile for ingress. ";
      uses pw-segment-named-or-value-bandwidth-profile;
    }
  }

  grouping pw-segment-named-or-value-bandwidth-profile {
    description
      "A grouping to configure a bandwdith profile either by
       referencing a named bandwidth profile or by
       configuring the values of the bandwidth profile attributes.";
    choice style {
      description
        "Whether the bandwidth profile is named or defined by value";
      case named {
        description
          "Named bandwidth profile.";
        leaf bandwidth-profile-name {



Zheng, et al.           Expires September 9, 2019              [Page 45]

Internet-Draft     Transport Client Signals YANG Model        March 2019


          type leafref {
            path "/ethtsvc:etht-svc/ethtsvc:globals/ethtsvc:named-bandwidth-profiles/ethtsvc:bandwidth-profile-name";
          }
          description
            "Name of the bandwidth profile.";
        }
      }
      case value {
        description
          "Bandwidth profile configured by value.";
        uses etht-types:pw-segement-bandwidth-profile-grouping;
      }
    }
  }
      grouping eth-bandwidth {
      description
        "Available bandwith for ethernet.";
      leaf eth-bandwidth {
        type uint64{
          range "0..10000000000";
        }
        units "Kbps";
        description
          "Available bandwith value expressed in kilobits per second";
      }
    }

    grouping eth-label-restriction {
      description
        "Label Restriction for ethernet.";
      leaf tag-type {
        type etht-types:eth-tag-type;
        description "VLAN tag type.";
      }
      leaf priority {
        type uint8;
        description "priority.";
      }
    }

    grouping eth-label {
      description
        "Label for ethernet.";
      leaf vlanid {
        type etht-types:vlanid;
          description
            "VLAN tag id.";
      }



Zheng, et al.           Expires September 9, 2019              [Page 46]

Internet-Draft     Transport Client Signals YANG Model        March 2019


    }

    grouping eth-label-step {
      description "Label step for Ethernet VLAN";
      leaf eth-step {
        type uint16 {
          range "1..4095";
      }
      default 1;
      description
        "Label step which represent possible increments for
         an Ethernet VLAN tag.";
      reference
        "IEEE 802.1ad: Provider Bridges.";
    }
  }
}
<CODE ENDS>


5.3.  Other Transport Network client signal YANG Code


<CODE BEGINS> file "ietf-trans-client-service.yang"
module ietf-trans-client-service {
  /* TODO: FIXME */
  //yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-trans-client-service";
  prefix "clntsvc";

  import ietf-te-types {
    prefix "te-types";
  }

  import ietf-otn-types {
    prefix "otn-types";
  }

  import ietf-yang-types {
    prefix "yang";
  }

  organization
    "Internet Engineering Task Force (IETF) CCAMP WG";
  contact
    "




Zheng, et al.           Expires September 9, 2019              [Page 47]

Internet-Draft     Transport Client Signals YANG Model        March 2019


      ID-draft editor:
        Haomian Zheng (zhenghaomian@huawei.com);
        Aihua Guo (aihuaguo@huawei.com);
        Italo Busi (italo.busi@huawei.com);
        Anton Snitser (antons@sedonasys.com);
        Francesco Lazzeri (francesco.lazzeri@ericsson.com);
        Yunbin Xu (xuyunbin@ritt.cn);
        Yang Zhao (zhaoyangyjy@chinamobile.com);
        Xufeng Liu (Xufeng_Liu@jabil.com);
        Giuseppe Fioccola (giuseppe.fioccola@huawei.com);
    ";

  description
    "This module defines a YANG data model for describing
     transport client services.";

  revision 2019-03-08 {
    description
      "version -04 as an I-D";
    reference
      "draft-zheng-ccamp-client-signal-yang";
  }

  /*
   * Groupings
   */
  grouping client-svc-access-parameters {
    description
      "Transport client services access parameters";

    leaf access-node-id {
      type te-types:te-node-id;
      description
        "The identifier of the access node in the underlying
         transport topology.";
    }

    leaf access-ltp-id {
      type te-types:te-tp-id;
      description
        "The TE link termination point identifier, used together with
         access-node-id to identify the access LTP.";
    }

    leaf client-signal {
      type identityref {
        base otn-types:client-signal;
      }



Zheng, et al.           Expires September 9, 2019              [Page 48]

Internet-Draft     Transport Client Signals YANG Model        March 2019


      description
        "Identifiies the client signal type associated with this port";
                }
    }

  grouping client-svc-tunnel-parameters {
    description
      "Transport client services tunnel parameters";

    leaf tunnel-name {
      type string;
      description
        "TE service tunnel instance name.";
    }
  }

  grouping  client-svc-instance_config {
    description
      "Configuraiton parameters for client services.";
    leaf client-svc-name {
      type string;
      description
        "Identifier of the p2p transport client service.";
    }

    leaf client-svc-id {
      type string;
      description
        "Name of the p2p transport client service.";
    }

    leaf client-svc-descr {
      type string;
      description
        "Description of the transport client service.";
    }

    leaf client-svc-customer {
      type string;
      description
        "Customer of the transport client service.";
    }

    container resilience {
      description "";
    }

    uses te-types:te-topology-identifier;



Zheng, et al.           Expires September 9, 2019              [Page 49]

Internet-Draft     Transport Client Signals YANG Model        March 2019


    leaf admin-status {
      type identityref {
        base te-types:tunnel-admin-state-type;
      }
      default te-types:tunnel-admin-state-up;
      description "Client service administrative state.";
    }

    container src-access-ports {
      description
        "Source access port of a client service.";
      uses client-svc-access-parameters;
    }

        container dst-access-ports {
          description
                "Destination access port of a client service.";
          uses client-svc-access-parameters;
        }

        list svc-tunnels {
          key tunnel-name;
          description
                "List of the TE Tunnels supporting the client service.";
          uses client-svc-tunnel-parameters;
        }
  }

  grouping  client-svc-instance_state {
        description
          "State parameters for client services.";
        leaf operational-state {
          type identityref {
                base te-types:tunnel-state-type;
          }
          config false;
          description "Client service operational state.";
        }
        leaf provisioning-state {
          type identityref {
                base te-types:lsp-state-type;
          }
          config false;
          description "Client service provisioning state.";
        }
        leaf creation-time {
          type yang:date-and-time;
          config false;



Zheng, et al.           Expires September 9, 2019              [Page 50]

Internet-Draft     Transport Client Signals YANG Model        March 2019


          description "The time of the service be created.";
        }
        leaf last-updated-time {
          type yang:date-and-time;
          config false;
          description "The time of the service's latest update.";
        }
  }

  /*
   * Data nodes
   */

  container client-svc {
    description
      "Transport client services.";

    list client-svc-instances {
      key client-svc-name;
      description
        "The list of p2p transport client service instances";

          uses client-svc-instance_config;
          uses client-svc-instance_state;
    }
  }
}

<CODE ENDS>


6.  Considerations and Open Issue

   Editor Notes: This section is used to note temporary discussion/
   conclusion that to be fixed in the future version, and will be
   removed before publication.  We currently categorize all the client
   signal types into transparent and non-transparent, with separate
   models.  There was consensus that no common model is needed for these
   two categories.

7.  IANA Considerations

   TBD.








Zheng, et al.           Expires September 9, 2019              [Page 51]

Internet-Draft     Transport Client Signals YANG Model        March 2019


8.  Manageability Considerations

   TBD.

9.  Security Considerations

   The data following the model defined in this document is exchanged
   via, for example, the interface between an orchestrator and a
   transport network controller.  The security concerns mentioned in
   [I-D.ietf-teas-yang-te-topo] for using ietf-te-topology.yang model
   also applies to this document.

   The YANG module defined in this document can be accessed via the
   RESTCONF protocol defined in [RFC8040], or maybe via the NETCONF
   protocol [RFC6241].

   There are a number of data nodes defined in the YANG module which are
   writable/creatable/deletable (i.e., config true, which is the
   default).  These data nodes may be considered sensitive or vulnerable
   in some network environments.  Write operations (e.g., POST) to these
   data nodes without proper protection can have a negative effect on
   network operations.

10.  Acknowledgements

   We would like to thank Igor Bryskin and Daniel King for their
   comments and discussions.

11.  Contributors

   Yanlei Zheng
   China Unicom
   Email: zhengyl@dimpt.com

   Zhe Liu
   Huawei Technologies,
   Email: liuzhe123@huawei.com

   Sergio Belotti
   Nokia,
   Email: sergio.belotti@nokia.com

   Yingxi Yao
   Shanghai Bell,
   yingxi.yao@nokia-sbell.com






Zheng, et al.           Expires September 9, 2019              [Page 52]

Internet-Draft     Transport Client Signals YANG Model        March 2019


12.  References

12.1.  Normative References

   [I-D.ietf-ccamp-l1csm-yang]
              Fioccola, G., Lee, K., Lee, Y., Dhody, D., and D.
              Ceccarelli, "A YANG Data Model for L1 Connectivity Service
              Model (L1CSM)", draft-ietf-ccamp-l1csm-yang-09 (work in
              progress), March 2019.

   [I-D.ietf-ccamp-otn-topo-yang]
              Zheng, H., Guo, A., Busi, I., Sharma, A., Liu, X.,
              Belotti, S., Xu, Y., Wang, L., and O. Dios, "A YANG Data
              Model for Optical Transport Network Topology", draft-ietf-
              ccamp-otn-topo-yang-06 (work in progress), February 2019.

   [I-D.ietf-ccamp-otn-tunnel-model]
              Zheng, H., Guo, A., Busi, I., Sharma, A., Rao, R.,
              Belotti, S., Lopezalvarez, V., Li, Y., and Y. Xu, "OTN
              Tunnel YANG Model", draft-ietf-ccamp-otn-tunnel-model-06
              (work in progress), February 2019.

   [I-D.ietf-teas-yang-te-topo]
              Liu, X., Bryskin, I., Beeram, V., Saad, T., Shah, H., and
              O. Dios, "YANG Data Model for Traffic Engineering (TE)
              Topologies", draft-ietf-teas-yang-te-topo-19 (work in
              progress), February 2019.

   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,
              and A. Bierman, Ed., "Network Configuration Protocol
              (NETCONF)", RFC 6241, DOI 10.17487/RFC6241, June 2011,
              <https://www.rfc-editor.org/info/rfc6241>.

   [RFC7139]  Zhang, F., Ed., Zhang, G., Belotti, S., Ceccarelli, D.,
              and K. Pithewan, "GMPLS Signaling Extensions for Control
              of Evolving G.709 Optical Transport Networks", RFC 7139,
              DOI 10.17487/RFC7139, March 2014,
              <https://www.rfc-editor.org/info/rfc7139>.

   [RFC7950]  Bjorklund, M., Ed., "The YANG 1.1 Data Modeling Language",
              RFC 7950, DOI 10.17487/RFC7950, August 2016,
              <https://www.rfc-editor.org/info/rfc7950>.

   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, "RESTCONF
              Protocol", RFC 8040, DOI 10.17487/RFC8040, January 2017,
              <https://www.rfc-editor.org/info/rfc8040>.





Zheng, et al.           Expires September 9, 2019              [Page 53]

Internet-Draft     Transport Client Signals YANG Model        March 2019


12.2.  Informative References

   [RFC8299]  Wu, Q., Ed., Litkowski, S., Tomotaki, L., and K. Ogaki,
              "YANG Data Model for L3VPN Service Delivery", RFC 8299,
              DOI 10.17487/RFC8299, January 2018,
              <https://www.rfc-editor.org/info/rfc8299>.

   [RFC8309]  Wu, Q., Liu, W., and A. Farrel, "Service Models
              Explained", RFC 8309, DOI 10.17487/RFC8309, January 2018,
              <https://www.rfc-editor.org/info/rfc8309>.

   [RFC8340]  Bjorklund, M. and L. Berger, Ed., "YANG Tree Diagrams",
              BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,
              <https://www.rfc-editor.org/info/rfc8340>.

   [RFC8453]  Ceccarelli, D., Ed. and Y. Lee, Ed., "Framework for
              Abstraction and Control of TE Networks (ACTN)", RFC 8453,
              DOI 10.17487/RFC8453, August 2018,
              <https://www.rfc-editor.org/info/rfc8453>.

   [RFC8466]  Wen, B., Fioccola, G., Ed., Xie, C., and L. Jalil, "A YANG
              Data Model for Layer 2 Virtual Private Network (L2VPN)
              Service Delivery", RFC 8466, DOI 10.17487/RFC8466, October
              2018, <https://www.rfc-editor.org/info/rfc8466>.

Authors' Addresses

   Haomian Zheng
   Huawei Technologies
   H1-1-A043S Huawei Industrial Base, Songshanhu
   Dongguan, Guangdong
   P.R.China

   Email: zhenghaomian@huawei.com


   Aihua Guo
   Huawei Technologies

   Email: aihuaguo@huawei.com


   Italo Busi
   Huawei Technologies

   Email: Italo.Busi@huawei.com





Zheng, et al.           Expires September 9, 2019              [Page 54]

Internet-Draft     Transport Client Signals YANG Model        March 2019


   Anton Snitser
   Sedona

   Email: antons@sedonasys.com


   Francesco Lazzeri
   Ericsson

   Email: francesco.lazzeri@ericsson.com


   Yunbin Xu
   CAICT

   Email: xuyunbin@ritt.cn


   Yang Zhao
   China Mobile

   Email: zhaoyangyjy@chinamobile.com


   Xufeng Liu
   Volta Networks

   Email: xufeng.liu.ietf@gmail.com


   Giuseppe Fioccola
   Huawei Technologies

   Email: giuseppe.fioccola@huawei.com

















Zheng, et al.           Expires September 9, 2019              [Page 55]