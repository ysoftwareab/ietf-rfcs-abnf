SUIT_Digest = [
    suit-digest-algorithm-id : $suit-digest-algorithm-ids,
    suit-digest-bytes : bytes,
    ? suit-digest-parameters : any
SUIT_Outer_Wrapper = {
suit-authentication-wrapper => bstr .cbor
                                   SUIT_Authentication_Wrapper / nil,
suit-manifest               => bstr .cbor Manifest,
suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
suit-install                => bstr .cbor SUIT_Command_Sequence,
suit-text-external          => bstr .cbor SUIT_Text_Info,
suit-coswid-external        => bstr .cbor COSWID
suit-authentication-wrapper = 1
suit-manifest = 2
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-text = 13
suit-coswid = 14

SUIT_Authentication_Wrapper = [ * (COSE_Mac_Tagged / COSE_Sign_Tagged /
                                   COSE_Mac0_Tagged / COSE_Sign1_Tagged)]

   All elements of the outer wrapper must be wrapped in a bstr to
   minimize the complexity of the code that evaluates the cryptographic
   integrity of the element and to ensure correct serialisation for
   integrity and authenticity checks.

   The suit-authentication-wrapper contains a list of 1 or more
   cryptographic authentication wrappers for the core part of the
   manifest.  These are implemented as COSE_Mac_Tagged or
   COSE_Sign_Tagged blocks.  The Manifest is authenticated by these
   blocks in "detached payload" mode.  The COSE_Mac_Tagged and
   COSE_Sign_Tagged blocks are described in RFC 8152 [RFC8152] and are
   beyond the scope of this document.  The suit-authentication-wrapper
   MUST come first in the SUIT_Outer_Wrapper, regardless of canonical
   encoding of CBOR.  All validators MUST reject any SUIT_Outer_Wrapper
   that begins with any element other than a suit-authentication-
   wrapper.
   A manifest that has not had authentication information added MUST
   still contain the suit-authentication-wrapper element, but the
   content MUST be null.

   suit-manifest contains a Manifest structure, which describes the
   payload(s) to be installed and any dependencies on other manifests.

   Each of suit-dependency-resolution, suit-payload-fetch, and suit-
   payload-installation contain the severable contents of the
   identically named portions of the manifest, described in Section 8.2.

   suit-text contains all the human-readable information that describes
   any and all parts of the manifest, its payload(s) and its
   resource(s).

   suit-coswid contains a Concise Software Identifier.  This may be
   discarded by the recipient if not needed.

SUIT_Manifest = {
suit-manifest-version         => 1,
suit-manifest-sequence-number => uint,
suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-dependencies = 3
suit-components = 4
suit-dependency-components = 5
suit-common = 6
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text-info = 13
suit-coswid = 14

   Several fields in the Manifest can be either a CBOR structure or a
   SUIT_Digest.  In each of these cases, the SUIT_Digest provides for a
   severable field.  Severable fields are RECOMMENDED to implement.  In
   particular, text SHOULD be severable, since most useful text elements
   occupy more space than a SUIT_Digest, but are not needed by recipient
   devices.  Because SUIT_Digest is a CBOR Array and each severable
   element is a CBOR bstr, it is straight-forward for a recipient to
   determine whether an element has been severed.

   The suit-manifest-version indicates the version of serialisation used
   to encode the manifest.  Version 1 is the version described in this
   document. suit-manifest-version is MANDATORY.

   The suit-manifest-sequence-number is a monotonically increasing anti-
   rollback counter.  It also helps devices to determine which in a set
   of manifests is the "root" manifest in a given update.  Each manifest
   MUST have a sequence number higher than each of its dependencies.
   Each recipient MUST reject any manifest that has a sequence number
   lower than its current sequence number.  It MAY be convenient to use
   a UTC timestamp in seconds as the sequence number. suit-manifest-
   sequence-number is MANDATORY.

   suit-dependencies is a list of SUIT_Dependency blocks that specify
   manifests that must be present before the current manifest can be
   processed. suit-dependencies is OPTIONAL.

   In order to distinguish between components that are affected by the
   current manifest and components that are affected by a dependency,
   they are kept in separate lists.  Components affected by the current
   manifest include the digest and size of the result.  Components
   affected by a manifest only include the component identifier and the
   index of the manifest that fully defines the component.

   suit-components is a list of SUIT_Component blocks that specify the
   vital information about the content a component identifier should
   contain following the update.  These are the component identifiers
   that will be affected by the content of the current manifest. suit-
   components is OPTIONAL, but at least one manifest MUST contain a
   suit-components block.

   suit-dependency-components is a list of SUIT_Component_Reference
   blocks that specify component identifiers that will be affected by
   the content of a dependency of the current manifest. suit-dependency-
   components is OPTIONAL.

   suit-common is a SUIT_Command_Sequence to execute prior to executing
   any other command sequence.  Typical actions in suit-common include
   setting expected device identity and image digests when they are
   conditional (see Section 11 for more information on conditional
   sequences). suit-common is OPTIONAL.

   suit-dependency-resolution is a SUIT_Command_Sequence to execute in
   order to perform dependency resolution.  Typical actions include
   configuring URIs of dependency manifests, fetching dependency
   manifests, and validating dependency manifests' contents. suit-
   dependency-resolution is MANDATORY when suit-dependencies is present.

   suit-payload-fetch is a SUIT_Command_Sequence to execute in order to
   obtain a payload.  Some manifests may include these actions in the
   suit-install section instead if they operate in a streaming
   installation mode.  This is particularly relevant for constrained
   devices without any temporary storage for staging the update. suit-
   payload-fetch is OPTIONAL.
   suit-install is a SUIT_Command_Sequence to execute in order to
   install a payload.  Typical actions include verifying a payload
   stored in temporary storage, copying a staged payload from temporary
   storage, and unpacking a payload. suit-install is OPTIONAL.

   suit-validate is a SUIT_Command_Sequence to execute in order to
   validate that the result of applying the update is correct.  Typical
   actions involve image validation and manifest validation. suit-
   validate is MANDATORY.  If the manifest contains dependencies, one
   process-dependency invocation per dependency or one process-
   dependency invocation targeting all dependencies SHOULD be present in
   validate.

   suit-load is a SUIT_Command_Sequence to execute in order to prepare a
   payload for execution.  Typical actions include copying an image from
   permanent storage into RAM, optionally including actions such as
   decryption or decompression. suit-load is OPTIONAL.

   suit-run is a SUIT_Command_Sequence to execute in order to run an
   image. suit-run typically contains a single instruction: either the
   "run" directive for the bootable manifest or the "process
   dependencies" directive for any dependents of the bootable manifest.
   suit-run is OPTIONAL.  Only one manifest in an update may contain the
   "run" directive.

   suit-text-info is a digest that uniquely identifies the content of
   the Text that is packaged in the OuterWrapper. text is OPTIONAL.

   suit-coswid is a digest that uniquely identifies the content of the
   concise-software-identifier that is packaged in the OuterWrapper.
   coswid is OPTIONAL.

SUIT_Dependency = {
suit-dependency-digest => SUIT_Digest,
suit-dependency-prefix => SUIT_Component_Identifier,
SUIT_Component = {
suit-component-identifier => SUIT_Component_Identifier,
SUIT_Component_Reference = {
suit-component-identifier => SUIT_Component_Identifier,
suit-component-dependency-index => uint
SUIT_Compression_Info = {
suit-compression-algorithm => SUIT_Compression_Algorithms
suit-compression-algorithm = 1
suit-compression-parameters = 2

SUIT_Compression_Algorithm_gzip = 1
SUIT_Compression_Algorithm_bzip2 = 2
SUIT_Compression_Algorithm_deflate = 3
SUIT_Compression_Algorithm_lz4 = 4
SUIT_Compression_Algorithm_lzma = 7

SUIT_Unpack_Info = {
suit-unpack-algorithm => SUIT_Unpack_Algorithms
suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

SUIT_Unpack_Algorithm_Delta = 1
SUIT_Unpack_Algorithm_Hex = 2
SUIT_Unpack_Algorithm_Elf = 3

SUIT_Parameter_Strict_Order = (1 => bool)
SUIT_Parameter_Coerce_Condition_Failure = (2 => bool)
SUIT_Parameter_Vendor_ID = (3 => bstr)
SUIT_Parameter_Class_ID = (4 => bstr)
SUIT_Parameter_Device_ID = (5 => bstr)
SUIT_Parameter_URI_List = (6 => bstr .cbor SUIT_URI_List)
SUIT_Parameter_Encryption_Info = (7 => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameter_Compression_Info = (8 => bstr .cbor SUIT_Compression_Info)
SUIT_Parameter_Unpack_Info = (9 => bstr .cbor SUIT_Unpack_Info)
SUIT_Parameter_Source_Component = (10 => bstr .cbor SUIT_Component_Identifier)
SUIT_Parameter_Image_Digest = (11 => bstr .cbor SUIT_Digest)
SUIT_Parameter_Image_Size = (12 => uint)
SUIT_Parameter_Custom = (nint => int/bool/bstr)

SUIT_URI_List = [ + [priority: int, uri: tstr] ]

SUIT_Encryption_Info= COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
suit-compression-algorithm => SUIT_Compression_Algorithms
suit-compression-algorithm = 1
suit-compression-parameters = 2

SUIT_Compression_Algorithm_gzip = 1
SUIT_Compression_Algorithm_bzip2 = 2
SUIT_Compression_Algorithm_deflate = 3
SUIT_Compression_Algorithm_lz4 = 4
SUIT_Compression_Algorithm_lzma = 7
SUIT_Unpack_Info = {
suit-unpack-algorithm => SUIT_Unpack_Algorithms
suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

SUIT_Unpack_Algorithm_Delta = 1
SUIT_Unpack_Algorithm_Hex = 2
SUIT_Unpack_Algorithm_Elf = 3

Command_Sequence = {
conditions => [ * Condition],
directives => [ * Directive]
SUIT_Command_Sequence = [ + (SUIT_Condition/SUIT_Directive) ]

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
SUIT_Condition_Version_Comparison_Greater = 1
SUIT_Condition_Version_Comparison_Greater_Equal = 2
SUIT_Condition_Version_Comparison_Equal = 3
SUIT_Condition_Version_Comparison_Lesser_Equal = 4
SUIT_Condition_Version_Comparison_Lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

   While the exact encoding of versions is application-defined, semantic
   versions map directly:
   -  1.2.3 = [1,2,3]

   -  1.2-rc3 = [1,2,-1,3]

   -  1.2-beta = [1,2,-2]

   -  1.2-alpha = [1,2,-3]

   -  1.2-alpha4 = [1,2,-3,4]

   SUIT_Condition_Version is OPTIONAL to implement.

SUIT_Condition_Vendor_Identifier = (1 => bstr .size 16)
SUIT_Condition_Class_Identifier = (2 => bstr .size 16)
SUIT_Condition_Device_Identifier = (3 => bstr .size 16)
SUIT_Condition_Image_Match = (4 => SUIT_Digest)
SUIT_Condition_Image_Not_Match = (5 => SUIT_Digest)
SUIT_Condition_Use_Before = (6 => uint)
SUIT_Condition_Minimum_Battery = (7 => uint)
SUIT_Condition_Update_Authorised = (8 => int)
SUIT_Condition_Version = (9 => SUIT_Condition_Version_Argument)
SUIT_Condition_Component_Offset = (10 => uint)
SUIT_Condition_Custom = (nint => bstr)

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
SUIT_Condition_Version_Comparison_Greater = 1
SUIT_Condition_Version_Comparison_Greater_Equal = 2
SUIT_Condition_Version_Comparison_Equal = 3
SUIT_Condition_Version_Comparison_Lesser_Equal = 4
SUIT_Condition_Version_Comparison_Lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Directive_Set_Component_Index = False is implied.  When
SUIT_Directive_Set_Manifest_Index = False is implied.
SUIT_Directive_Set_Component_Index_Argument = uint/bool

SUIT_Directive_Set_Manifest_Index = False is implied.  When
SUIT_Directive_Set_Component_Index = False is implied.

SUIT_Directive_Set_Manifest_Index_Argument = uint/bool

SUIT_Directive_Run_Sequence_Argument = bstr .cbor SUIT_Command_Sequence

   When SUIT_Directive_Run_Sequence completes, it forwards the last
   status code that occurred in the sequence.  If the Coerce on
   Condition Failure parameter is true, then SUIT_Directive_Run_Sequence
   only fails when a directive in the argument sequence fails.
   SUIT_Parameter_Coerce_Condition_Failure defaults to False when
   SUIT_Directive_Run_Sequence begins.  Its value is discarded when
   SUIT_Directive_Run_Sequence terminates.

SUIT_Directive_Process_Dependency_Argument = nil

SUIT_Directive_Set_Parameters_Argument = {+ SUIT_Parameters}

SUIT_Directive_Override_Parameters_Argument = {+ SUIT_Parameters}

SUIT_Directive_Fetch_Argument = nil/bstr

SUIT_Directive_Copy_Argument = nil

SUIT_Directive_Run_Argument = nil/bstr

SUIT_Directive_Wait_Argument = {
    SUIT_Wait_Events
SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday



SUIT_Directive_Set_Component_Index = (11 => uint/bool)
SUIT_Directive_Set_Manifest_Index = (12 => uint/bool)
SUIT_Directive_Run_Sequence = (13 => bstr .cbor SUIT_Command_Sequence)
SUIT_Directive_Run_Sequence_Conditional = (14 => bstr .cbor SUIT_Command_Sequence)
SUIT_Directive_Process_Dependency = (15 => nil)
SUIT_Directive_Set_Parameters = (16 => {+ SUIT_Parameters})
SUIT_Directive_Override_Parameters = (19 => {+ SUIT_Parameters})
SUIT_Directive_Fetch = (20 => nil/bstr)
SUIT_Directive_Copy = (21 => nil/bstr)
SUIT_Directive_Run = (22 => nil/bstr)
SUIT_Directive_Wait = (23 => { + SUIT_Wait_Events })

SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday
SUIT_Outer_Wrapper = {
suit-authentication-wrapper => bstr .cbor SUIT_Authentication_Wrapper / nil,
suit-manifest               => bstr .cbor SUIT_Manifest,
suit-dependency-resolution  => bstr .cbor SUIT_Command_Sequence,
suit-payload-fetch          => bstr .cbor SUIT_Command_Sequence,
suit-install                => bstr .cbor SUIT_Command_Sequence,
suit-text                   => bstr .cbor SUIT_Text_Map,
suit-coswid                 => bstr .cbor concise-software-identity
suit-authentication-wrapper = 1
suit-manifest = 2
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-text = 13
suit-coswid = 14

SUIT_Authentication_Wrapper = [ * (
    COSE_Mac_Tagged /
    COSE_Sign_Tagged /
    COSE_Mac0_Tagged /
    COSE_Sign1_Tagged)]


COSE_Mac_Tagged = any
COSE_Sign_Tagged = any
COSE_Mac0_Tagged = any
COSE_Sign1_Tagged = any
COSE_Encrypt_Tagged = any
COSE_Encrypt0_Tagged = any

SUIT_Digest = [
  suit-digest-algorithm-id : $suit-digest-algorithm-ids,
  suit-digest-bytes : bytes,
  ? suit-digest-parameters : any
SUIT_Manifest = {
suit-manifest-version         => 1,
suit-manifest-sequence-number => uint,
suit-manifest-version = 1
suit-manifest-sequence-number = 2
suit-dependencies = 3
suit-components = 4
suit-dependency-components = 5
suit-common = 6
suit-dependency-resolution = 7
suit-payload-fetch = 8
suit-install = 9
suit-validate = 10
suit-load = 11
suit-run = 12
suit-text-info = 13
suit-coswid = 14

concise-software-identity = any

SUIT_Dependency = {
suit-dependency-digest => SUIT_Digest,
suit-dependency-prefix => SUIT_Component_Identifier,
suit-dependency-digest = 1
suit-dependency-prefix = 2

SUIT_Component_Identifier =  [* bstr]

SUIT_Component = {
suit-component-identifier => SUIT_Component_Identifier,
suit-component-identifier = 1
suit-component-size = 2
suit-component-digest = 3

SUIT_Component_Reference = {
suit-component-identifier => SUIT_Component_Identifier,
suit-component-dependency-index => uint
suit-component-dependency-index = 2

SUIT_Command_Sequence = [ + { SUIT_Condition // SUIT_Directive // SUIT_Command_Custom} ]

SUIT_Command_Custom = (nint => bstr)

SUIT_Condition_Version_Argument = [
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Types,
    suit-condition-version-comparison: SUIT_Condition_Version_Comparison_Value
SUIT_Condition_Version_Comparison_Greater = 1
SUIT_Condition_Version_Comparison_Greater_Equal = 2
SUIT_Condition_Version_Comparison_Equal = 3
SUIT_Condition_Version_Comparison_Lesser_Equal = 4
SUIT_Condition_Version_Comparison_Lesser = 5

SUIT_Condition_Version_Comparison_Value = [+int]

SUIT_Wait_Event_Argument_Authorisation = int ; priority
SUIT_Wait_Event_Argument_Power = int ; Power Level
SUIT_Wait_Event_Argument_Network = int ; Network State
SUIT_Wait_Event_Argument_Other_Device_Version = [
    other-device: bstr,
    other-device-version: [+int]
SUIT_Wait_Event_Argument_Time = uint ; Timestamp
SUIT_Wait_Event_Argument_Time_Of_Day = uint ; Time of Day (seconds since 00:00:00)
SUIT_Wait_Event_Argument_Day_Of_Week = uint ; Days since Sunday

SUIT_URI_List = [ + [priority: int, uri: tstr] ]

SUIT_Encryption_Info = COSE_Encrypt_Tagged/COSE_Encrypt0_Tagged
SUIT_Compression_Info = {
suit-compression-algorithm => SUIT_Compression_Algorithms
suit-compression-algorithm = 1
suit-compression-parameters = 2

SUIT_Compression_Algorithm_gzip = 1
SUIT_Compression_Algorithm_bzip2 = 2
SUIT_Compression_Algorithm_deflate = 3
SUIT_Compression_Algorithm_lz4 = 4
SUIT_Compression_Algorithm_lzma = 7

SUIT_Unpack_Info = {
suit-unpack-algorithm => SUIT_Unpack_Algorithms
suit-unpack-algorithm  = 1
suit-unpack-parameters = 2

SUIT_Unpack_Algorithm_Delta = 1
SUIT_Unpack_Algorithm_Hex = 2
SUIT_Unpack_Algorithm_Elf = 3

SUIT_Text_Map = {int => tstr}

