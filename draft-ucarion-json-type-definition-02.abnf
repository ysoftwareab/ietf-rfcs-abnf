root-schema = {
     schema,
     ? definitions: { * tstr => schema },
schema = empty /
     ref /
     type /
     enum /
     elements /
     properties /
     values /
     discriminator

shared = {
     ? nullable: bool,
     ? metadata: { * tstr => * },
empty = { shared }

ref = { shared, ref: tstr }

type = {
     shared,
     type: "boolean"
       / "float32"
       / "float64"
       / "int8"
       / "uint8"
       / "int16"
       / "uint16"
       / "int32"
       / "uint32"
       / "string"
       / "timestamp"
enum = { shared, enum: [+ tstr] }

elements = { shared, elements: schema }

properties = with-properties / with-optional-properties

with-properties = {
     shared,
     properties: { * tstr => schema },
     ? optionalProperties: { * tstr => schema },
     ? additionalProperties: bool,
with-optional-properties = {
     shared,
     ? properties: { * tstr => schema },
     optionalProperties: { * tstr => schema },
     ? additionalProperties: bool,
values = { shared, values: schema }

discriminator = {
     shared,
     discriminator: tstr,

     ; Note well: this rule is defined in terms of the "properties"
     ; CDDL rule, not the "schema" CDDL rule.
     mapping: { * tstr => properties }
root = any

root = [* a]

a = [* b]
b = number

root = "PENDING" / "DONE" / "CANCELED"

root = bool

root = number

root = tstr

root = tdate

root = [* number]

root = { a: bool, b: number, ? c: tstr, ? d: tdate }

root = { * tstr => number }

root = { a: "foo", b: number } / { a: "bar", b: tstr }

