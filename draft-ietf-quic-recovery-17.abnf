PTO = max(smoothed_rtt + 4*rttvar + max_ack_delay, kGranularity)

crypto_count = 0
pto_count = 0
loss_time = 0
smoothed_rtt = 0
rttvar = 0
min_rtt = infinite
time_of_last_sent_ack_eliciting_packet = 0
time_of_last_sent_crypto_packet = 0
largest_sent_packet = 0
largest_acked_packet = 0

largest_sent_packet = packet_number
time_of_last_sent_crypto_packet = now
time_of_last_sent_ack_eliciting_packet = now
largest_acked_packet = max(largest_acked_packet,
                                  ack.largest_acked)

latest_rtt =
           now - sent_packets[ack.largest_acked].time_sent
newly_acked_packets = DetermineNewlyAckedPackets(ack)
crypto_count = 0
pto_count = 0

min_rtt = min(min_rtt, latest_rtt)
ack_delay = min(ack_delay, max_ack_delay)
smoothed_rtt = latest_rtt
rttvar = latest_rtt / 2
rttvar_sample = abs(smoothed_rtt - latest_rtt)
rttvar = 3/4 * rttvar + 1/4 * rttvar_sample
smoothed_rtt = 7/8 * smoothed_rtt + 1/8 * latest_rtt
timeout = 2 * kInitialRtt
timeout = 2 * smoothed_rtt
timeout = max(timeout, kGranularity)
timeout = timeout * (2 ^ crypto_count)
timeout =
         smoothed_rtt + 4 * rttvar + max_ack_delay
timeout = max(timeout, kGranularity)
timeout = timeout * (2 ^ pto_count)

loss_time = 0
lost_packets = {}
loss_delay = kTimeThreshold * max(latest_rtt, smoothed_rtt)

lost_send_time = now() - loss_delay

lost_pn = largest_acked_packet - kPacketThreshold

loss_time = unacked.time_sent + loss_delay
loss_time = min(loss_time, unacked.time_sent + loss_delay)

congestion_window = kInitialWindow
bytes_in_flight = 0
recovery_start_time = 0
ssthresh = infinite
ecn_ce_counter = 0

recovery_start_time = Now()
congestion_window = max(congestion_window, kMinimumWindow)
ssthresh = congestion_window
congestion_window = kMinimumWindow

ecn_ce_counter = ack.ce_counter
largest_lost_packet = lost_packets.last()

