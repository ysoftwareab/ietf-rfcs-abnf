received=172.16.3.4
received=172.16.3.4
v=0
o=test 2890844526 2890842807 IN IP4 $L-PRIV-1.address
c=IN IP4 $NAT-PUB-1.address
t=0 0
m=audio $NAT-PUB-1.port RTP/AVP 0
a=rtcp:$NAT-PUB-2.port


v=0
o=test 2890844526 2890842807 IN IP4 $L-PRIV-1.address
c=IN IP4 $NAT-PUB-1.address
t=0 0
m=audio $NAT-PUB-1.port RTP/AVP 0
a=rtcp:$NAT-PUB-2.port


v=0
o=test 2890844526 2890842807 IN IP4 $L-PRIV-1
c=IN IP4 $L-PRIV-1.address
t=0 0
a=ice-pwd:$LPASS
a=ice-ufrag:$LUNAME
m=audio $L-PRIV-1.port RTP/AVP 0
a=rtpmap:0 PCMU/8000
a=rtcp:$L-PRIV-2.port
a=candidate:$L1 1 UDP 2130706431 $L-PRIV-1.address $L-PRIV-1.port
             typ host
a=candidate:$L1 2 UDP 2130706430 $L-PRIV-2.address $L-PRIV-2.port
             typ host
a=candidate:$L2 1 UDP 1694498815 $L-NAT-PUB-1.address $L-NAT-PUB-1.port
             typ srflx raddr $L-PRIV-1.address rport $L-PRIV-1.port
a=candidate:$L2 2 UDP 1694498814 $L-NAT-PUB-2.address $L-NAT-PUB-2.port
             typ srflx raddr $L-PRIV-1.address rport $L-PRIV-2.port
a=candidate:$L3 1 UDP 16777215 $STUN-PUB-2.address $STUN-PUB-2.port
             typ relay raddr $L-PRIV-1.address rport $L-PRIV-1.port
a=candidate:$L3 2 UDP 16777214 $STUN-PUB-3.address $STUN-PUB-3.port
             typ relay raddr $L-PRIV-1.address rport $L-PRIV-2.port


                         Figure 14: ICE SDP Offer

   o  The SDP has been constructed to include all the available
      candidates that have been assembled.  The first set of candidates
      (as identified by Foundation $L1) contain two local addresses that
      have the highest priority.  They are also encoded into the
      connection (c=) and media (m=) lines of the SDP.  The second set
      of candidates, as identified by Foundation $L2, contains the two
      server reflexive addresses obtained from the STUN server for both
      RTP and RTCP traffic (identified by candidate-id $L2).  This entry
      has been given a priority lower than the pair $L1 by the client.
      The third and final set of candidates represents the relayed
      addresses (as identified by $L3) obtained from the STUN server.
      This pair has the lowest priority and will be used as a last
      resort if both $L1 or $L2 fail.

   o  The SIP signaling then traverses the NAT and sets up the SIP
      session (9)-(10).  On advertising a candidate address, the client
      should have a local STUN server running on each advertised
      candidate address.  This is for the purpose of responding to
      incoming STUN connectivity checks.

   o  On receiving the SIP INVITE request (10) client 'R' also starts
      local STUN servers on appropriate address/port combinations and
      gathers potential candidate addresses to be encoded into the SDP
      (as the originating client did).  Steps (11-18) involve client 'R'
      carrying out the same steps as client 'L'.  This involves
      obtaining local, server reflexive and relayed addresses.  Client
      'R' is now ready to generate an appropriate answer in the SIP 200
      OK message (19).  The example answer follows in Figure 14:


v=0
o=test 3890844516 3890842803 IN IP4 $R-PRIV-1
c=IN IP4 $R-PRIV-1.address
t=0 0
a=ice-pwd:$RPASS
m=audio $R-PRIV-1.port RTP/AVP 0
a=rtpmap:0 PCMU/8000
a=rtcp:$R-PRIV-2.port
a=candidate:$L1 1 UDP 2130706431 $R-PRIV-1.address $R-PRIV-1.port
             typ host
a=candidate:$L1 2 UDP 2130706430 $R-PRIV-2.address $R-PRIV-2.port
             typ host
a=candidate:$L2 1 UDP 1694498815 $R-NAT-PUB-1.address $R-NAT-PUB-1.port
             typ srflx raddr $R-PRIV-1.address rport $R-PRIV-1.port
a=candidate:$L2 2 UDP 1694498814 $R-NAT-PUB-2.address $R-NAT-PUB-2.port
             typ srflx raddr $R-PRIV-1.address rport $R-PRIV-1.port
a=candidate:$L3 1 UDP 16777215 $STUN-PUB-2.address $STUN-PUB-4.port
             typ relay raddr $R-PRIV-1.address rport $R-PRIV-1.port
a=candidate:$L3 2 UDP 16777214 $STUN-PUB-3.address $STUN-PUB-5.port
             typ relay raddr $R-PRIV-1.address rport $R-PRIV-1.port


                         Figure 15: ICE SDP Answer

   o  The two clients have now exchanged SDP using offer/answer and can
      now continue with the ICE processing - User Agent 'L' assuming the
      role controlling agent, as specified by ICE.  The clients are now
      required to form their Candidate check lists to determine which
      will be used for the media streams.  In this example User Agent
      'L's 'Foundation 1' is paired with User Agent 'R's 'Foundation 1',
      User Agent 'L's 'Foundation 2' is paired with User Agent 'R's
      'Foundation 2', and finally User Agent 'L's 'Foundation 3' is
      paired with User Agent 'R's 'Foundation 3'.  User Agents 'L' and
      'R' now have a complete candidate check list.  Both clients now
      use the algorithm provided in ICE to determine candidate pair
      priorities and sort into a list of decreasing priorities.  In this
      example, both User Agent 'L' and 'R' will have lists that firstly
      specifies the host address (Foundation $L1), then the server
      reflexive address (Foundation $L2) and lastly the relayed address
      (Foundation $L3).  All candidate pairs have an associate state as
      specified in ICE.  At this stage, all of the candidate pairs for
      User Agents 'L' and 'R' are initialized to the 'Frozen' state.
      The User Agents then scan the list and move the candidates to the
      'Waiting' state.  At this point both clients will periodically,
      starting with the highest candidate pair priority, work their way
      down the list issuing STUN checks from the local candidate to the
      remote candidate (of the candidate pair).  As a STUN Check is
      attempted from each local candidate in the list, the candidate
      pair state transitions to 'In-Progress'.  As illustrated in (23),
      client 'L' constructs a STUN connectivity check in an attempt to
      validate the remote candidate address received in the SDP of the
      200 OK (20) for the highest priority in the check list.  As a
      private address was specified in the active address in the SDP,
      the STUN connectivity check fails to reach its destination causing
      a STUN failure.  Client 'L' transitions the state for this
      candidate pair to 'Failed'.  In the mean time, Client 'L' is
      attempting a STUN connectivity check for the second candidate pair
      in the returned SDP with the second highest priority (24).  As can
      be seen from messages (24) to (29), the STUN Bind request is
      successful and returns a positive outcome for the connectivity
      check.  Client 'L' is now free to send media to the peer using the
      candidate pair.  Immediately after sending its 200 Okay, Client
      'R' also carries out the same set of binding requests.  It firstly
      (in parallel) tries to contact the active address contained in the
      SDP (30) which results in failure.

   o  In the mean time, a successful response to a STUN connectivity
      check by User Agent 'R' (27) results in a tentative check in the
      reverse direction - this is illustrated by messages (31) to (36).
      Once this check has succeeded, User Agent 'R' can transition the
      state of the appropriate candidate to 'Succeeded', and media can
      be sent (RTP).  The previously (31-36) described check confirm on
      both sides (User Agent 'L' and 'R') that connectivity can be
      achieved using the appropriate candidate pair.  User Agent 'L', as
      the controlling client now sends another connectivity check for
      the candidate pair, this time including the 'USE-CANDIDATE'
      attribute as specified in ICE to signal the chosen candidate.
      This exchange is illustrated in messages (37) to (42).

   o  As part of the process in this example, both 'L' and 'R' will now
      complete the same connectivity checks for part 2 of the component
      named for the favored 'Foundation' selected for use with RTCP.
      The connectivity checks for part '2' of the candidate component
      are shown in 'L'(43-48) and 'R'(49-54).  Once this has succeeded,
      User Agent 'L' as the controlling client sends another
      connectivity check for the candidate pair.  This time the 'USE-
      CANDIDATE' attribute is again specified to signal the chosen
      candidate for component '2'.
   o  The candidates have now been fully verified (and selected) and as
      they are the highest priority, an updated offer (61-62) is now
      sent from the offerer (client 'L') to the answerer (client 'R')
      representing the new active candidates.  The new offer would look
      as follows:


v=0
o=test 2890844526 2890842808 IN IP4 $L-PRIV-1
c=IN IP4 $L-NAT-PUB-1.address
t=0 0
a=ice-pwd:$LPASS
a=ice-ufrag:$LUNAME
m=audio $L-NAT-PUB-1.port RTP/AVP 0
a=rtpmap:0 PCMU/8000
a=rtcp:$L-NAT-PUB-2.port
a=candidate:$L2 1 UDP 2203948363 $L-NAT-PUB-1.address $L-NAT-PUB-1.port
             typ srflx raddr $L-PRIV-1.address rport $L-PRIV-1.port
a=candidate:$L2 2 UDP 2172635342 $L-NAT-PUB-2.address $L-NAT-PUB-2.port
             typ srflx raddr $L-PRIV-1.address rport $L-PRIV-2.port


                     Figure 16: ICE SDP Updated Offer

   o  The resulting answer (63-64) for 'R' would look as follows:


v=0
o=test 3890844516 3890842804 IN IP4 $R-PRIV-1
c=IN IP4 $R-PRIV-1.address
t=0 0
a=ice-pwd:$RPASS
a=ice-ufrag:$RUNAME
m=audio $R-PRIV-1.port RTP/AVP 0
a=rtpmap:0 PCMU/8000
a=rtcp:$R-PRIV-2.port
a=candidate:$L2 1 UDP 2984756463 $R-NAT-PUB-1.address $R-NAT-PUB-1.port
             typ srflx raddr $R-PRIV-1.address rport $R-PRIV-1.port
a=candidate:$L2 2 UDP 2605968473 $R-NAT-PUB-2.address $R-NAT-PUB-2.port
             typ srflx raddr $R-PRIV-1.address rport $R-PRIV-2.port


                     Figure 17: ICE SDP Updated Answer
v=0
o=test 2890844342 2890842164 IN IP4 $L-PRIV-1
c=IN IP4 $STUN-PUB-2.address
t=0 0
m=audio $STUN-PUB-2.port RTP/AVP 0
a=rtcp:$STUN-PUB-3.port


