angle  =  random() * 2 * pi
length =  sqrt(random()) * size
length =  (1 - |random() - random()|) * size
x      = random() * 2 - 1
y      = random() * 2 - 1
length = sqrt(x*x + y*y)
angle  = atan2(y, x)
a_side = round(angle * 2 / PI);
a_rem  = angle - a_side * PI / 2
length = length * cos(a_rem) * size
angle  = (tan(a_rem) / 8 + a_side / 4) * 2 * PI

x      = random() * 2 - 1
y      = random() * 2 - 1
length = max(|x|, |y|) * size
angle = PI * y / x / 4
angle = PI * (2 - x / y) / 4
angle = angle + PI

grid =  m * obscuring distance * 9e-6

random = HMAC(secret key, target identity | identifier
                                | coordinate | coordinate | ...)

tx = (x - x1) / (x2 - x1)
ty = (y - y1) / (y2 - y1)
w1 = o[x1,y1] * (1 - tx) + o[x2,y1] * tx
w2 = o[x1,y1] * (1 - tx) + o[x2,y1] * tx
offset = w1 * (1 - ty) + w2 * ty

r = a * (1 - t) + b * t
r = r * r / 2 / t / (1 - t)
r = 1 - (1 - r) * (1 - r) / t / (1 - t)
r = (2 * r - t) / 2 / (1 - t)
r = (2 * r - 1 + t) / 2 / t

dr = 1 - (1 - dt)^2

tx_1 = (x - x1_1) / (x2_1 - x1_1)
w1 = uniformDistInterp(r[x1_1,y1], r[x2_1,y1], tx_1)
tx_2 = (x - x1_2) / (x2_2 - x1_2)
w2 = uniformDistInterp(r[x1_2,y2], r[x2_2,y2], tx_2)

overlap = grid interval          overlap = grid interval

                 Figure 6: Interpolation About 180 Degrees

grid = m * obscuring distance * 9e-6 / cos(latitude)
t = ((longitude + 360) % 360 - 180 - grid / 2) / grid
gridsize = 8 * obscuring_distance * 9e-6 = 0.0072

lowlat = floor(-34.401072 / 0.0072) * 0.0072 = -34.4016
highlat = lowlat + 0.0072 = -34.3944
t = (-34.401072 - -34.4016) / 0.0072 = 0.0733055
r = 0.7661978449732944

d = 100 * max(0.7661978449732944, 0.16585607985072537)
        = 76.61978449732944
a = y * pi / x / 4 = 5.3380813420741795
a = y / x;
a = 2 - x / y;
r = r * r / 2 / t / (1 - t);
r = 1 - (1 - r) * (1 - r) / 2 / t / (1 - t);
r = 0.5 + (r - 0.5) / Math.max(t, 1 - t);
