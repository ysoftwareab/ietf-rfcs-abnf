

                                                    R. Mahy   / Cisco  
Internet Draft                                      D. Petrie / Pingtel
Document: draft-mahy-sipping-join-and-fork-00.txt         November 2001
Expires: May 2002


                     The SIP Join and Fork Headers


Status of this Memo

   This document is an Internet-Draft and is in full conformance with
      all provisions of Section 10 of RFC2026 [RFC2026].

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups. Note that
   other groups may also distribute working documents as Internet-
   Drafts. Internet-Drafts are draft documents valid for a maximum of
   six months and may be updated, replaced, or obsoleted by other
   documents at any time. It is inappropriate to use Internet- Drafts
   as reference material or to cite them other than as "work in
   progress."
   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt
   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.


1. Abstract

   This document proposes a new headers for use in SIP within the SIP
   call control framework.  The Join and Fork headers are used for
   peer-to-peer call control.


2. Conventions used in this document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in
   this document are to be interpreted as described in RFC-2119
   [RFC2119].


3. Overview

   This document describes [SIP] extensions for distributed call
   control as part of the SIP call control [framework].  These
   extensions enable endpoints to request that they be added as a
   participant in a conversation.  The mechanics of any mixing,
   conferencing, or media combining required to enable this request are
   abstracted from the requester.  New headers are proposed in this
   document. These are intentionally similar to the syntax of the
   [Replaces] header which is also used for distributed call control.

 Mahy, Petrie             Expires: May 2002                         1

                      SIP Join and Fork Headers


   To better understand the purpose of these new headers let us first
   define some terminology:

3.1. Definitions

   Conference bridge: A SIP UA which terminates two or more dialogs and
        provides a mutually exclusive media mix across the dialogs.
        That is, the parties on the dialogs receive a media stream that
        is the mix of the contributed media of all parties excluding
        its own.  The media for all of the dialogs is joined by the
        conference bridge.  The bridge itself may also contribute an
        audio stream (for example, a phone that is acting as a bridge
        for a 3-way call).
        Example: The bridge B has dialogs with A and C.  A receives a
        mix of B & C.  B receives a mix of A & C.  C receives a mix of
        A & B.

                        /B+C =(dialog)=> A
        B <=(local)= A+C
                       \A+B =(dialog)=> C

   Anchor: A SIP UA which terminates two or more dialogs and provides a
        media topology in which only the anchor receives a mix of the
        media from all UAs and the other UAs receive only the anchorÆs
        media.  The anchorÆs media is forked to all the dialogs.
        Example: B receives notifications from portal P while
        communicating with A.

                        /B =(dialog)=> A
        B <=(local)= A+P
                        \B =(dialog)=> P

   [Issue:  This does not provide the functionality for barge in.  If
        Supervisor A barges in to CSR BÆs call with customer C, the
        supervisor cannot hear the customer C.]

   The anchor or bridge may be a phone, gateway, media server or a
   dedicated device for the purpose of connecting dialogs in the
   desired media topology.  It is also assumed that some UAs may be
   capable of dynamically configuring the media topology.



We propose here two new call control operations that are indicated as
part of an INVITE in setting up a new dialog.  A join operation by a
UAC indicates to the UAS that it is to assume a conference bridge role
(or find a server to fulfill the media handling role) between the new
dialog and a pre-existing dialog. A fork operation by a UAC indicates
to the UAS that it is to assume an anchor role (or find a server to
fulfill the media handling role) between the new dialog and a pre-
existing dialog.3.2. Philosophy


 Mahy, Petrie             Expires: May 2002                         2

                      SIP Join and Fork Headers


   INVITEs are requests.  A User Agent that accepts a request with one
   of the call-control headers agrees to take responsibility for
   creating the appropriate media relationships.  Of course, like other
   requests, a User Agent can also reject or decline such a request.

   For example, a UA that receives an INVITE with a Join header MAY
   provide media "mixing" locally, rearrange existing call-legs (using
   3pcc or REFER for example) so that all the participants are using
   some centralized mixing resource, or reject the request.

   Consider the following two scenarios.  In scenario 1 (local
   control), a SIP UAC is operating as either a conference bridge or an
   anchor, and is initiating a new dialog.  Since the SIP UAC knows and
   controls the desired media topology, it is easy for it to add the
   new dialog and control the media topology appropriately.

   In scenario 2 (remote control), a SIP UAC is initiating a dialog to
   a UAS that the UAC would like to use as an anchor or conference
   bridge.  How does the UAC communicate the desired topology to the
   UAS?

   In the parlance of the SIP Call Control Model document [cc-models],
   the "Join" header is used to perform an "Insert" into a conversation
   space. (The UAC asks the UAS to "Add" it to the conversation space).
   The "Fork" header is used to perform a "Far fork" into a
   conversation space.  (The UAC asks the UAS to become the anchor of
   the fork).  Note that if a UA already in a "call" wants to Add a new
   party, this does not requirethe use of the Join or Fork header.

   Note that such functionality is already available using 3rd party
   call control [3pcc] style call control.  The 3pcc model requires a
   central point of control which may not be desirable in many
   environments.  As such, a method of performing these same call
   control primitives in a distributed, peer-to-peer fashion is very
   desirable.

   The Join header enables services such as barge-in, call center
   monitoring, and call recording in a distributed peer-to-peer way.
   The Fork header enables services such as hotword detection  and
   "whispered" in-call notifications ("You have an appointment in 5
   minutes").  This list of services is not exhaustive.

4. Behavior of SIP User Agents

   The Replaces, Join, and Fork headers have contradictory call control
   semantics.  If more than one of these headers is present in a
   request, the request MUST be rejected with a 400 "Bad Request"
   response.

   Like the Replaces header, the Join and Fork headers contain
   information used to match an existing call-leg (call-id, to-tag, and
   from-tag).  Upon receiving a new INVITE with one of these headers,
   the UA MUST attempt to match this information with an established or
 Mahy, Petrie             Expires: May 2002                         3

                      SIP Join and Fork Headers


   early dialog.  When trying to find a matching dialog, the to-tag and
   from-tag parameters in the Join or Fork header are matched as if
   they were present in an incoming request.  In other words the to-tag
   parameter is compared to the local tag, and the from-tag parameter
   is compared to the remote tag.

   Join or Fork headers in a reINVITE SHOULD be ignored.  [OPEN ISSUE:
   are there legitimate uses for these headers in a reINVITE?]

   If the Join or Fork header matches more than one dialog, the UA MAY
   use other headers if present (ex: the Referred-By header) to attempt
   to match a single dialog.  If a single matching dialog is not found,
   the UA MUST act as if no match is found.

   If no match is found, the UAS MUST ignore the header and process the
   INVITE normally.

        OPEN ISSUE: If no match is found, should the UAS ignore the
        header and process normally, or return a 481?

   If the call control header matches a dialog which was not created
   with an INVITE, the UAS MUST reject the request with an appropriate
   resonse (488 Not Acceptable Here?).

   Once a matching call-leg is found, the UAS MAY authenticate the
   INVITE request.  If the request is successfully authenticated or
   already preauthorized, the UAS SHOULD proceed with processing.  The
   UAS MAY prompt the user to accept or reject unauthenticated
   requests.  The UAS MAY reject the request with any appropriate
   response (for example: 603 "Decline", 403 "Forbidden", or 486 "Busy
   Here").

4.1. Semantics of Join and Fork

   A User Agent that accepts a Join header MUST attempt to setup call-
   legs such that the requesting UAC is logically added to the
   conversation space associated with the matched call-leg.  Any call-
   legs which are already logically associated with the matched call-
   leg in the same conversation space are include as well.  All the
   participants in a conversation space should have access to all the
   media/content sent in the context of that conversation space.  That
   a participant does not negotiate a specific type of media does not
   mean that it is not otherwise a full participant.  For a detailed
   description of various conferencing mechanisms that could be used to
   handle a Join, please consult [Conf].  Note that if a UA already in
   a conference wants to Add a new party, this does not require the use
   of the Join or Fork header.

   A User Agent that accepts a Fork header MUST attempt to setup a new
   conversation space that the user participates in at the same time as
   the conversation space associated with the matched call-leg.

4.2. Handling the Request
 Mahy, Petrie             Expires: May 2002                         4

                      SIP Join and Fork Headers



   If the UAS has sufficient resources to locally handle the Join or
   Fork request, the UAS SHOULD accept the call and perform the
   appropriate media mixing or combining.  The UAS MAY rearrange
   appropriate call legs instead as described below, based on some
   local policy.

   If the UAS does not have sufficient resources locally to handle the
   request, but is aware of other resources which could be used to
   satisfy the request (ex: a centralized mixer), the UA SHOULD
   redirect the requestor to this resource and ask other participants
   in the same conversation space to use this resource.  The UA MAY use
   any appropriate mechanism to transition participants to the new
   resource (ex: 3xx repsonse, [3pcc] style reINVITE, [REFER], reINVITE
   to a multicast group).  The UA SHOULD only use mechanisms which are
   expected to be acceptable to the participants.  For example, the UA
   SHOULD NOT attempt to transition the participants to a multicast
   group unless the UA can reasonably expect all the particpants to
   support multicast.

   If the UAS is incapable of satisfying the Join or Fork request, it
   MUST return a 488 "Not Acceptable Here" response.

5. Formal Syntax

   This document defines two new SIP headers: "Join" and "Fork".

   The following syntax specification uses the augmented Backus-Naur
   Form (BNF) as described in RFC-2234 [BNF].

        cc-header is appended to the list of request headers

        cc-header = ( join | fork | token ) ":" SP call-info

        join      = "Join"
        fork      = "Fork"

        call-info = callid *( ";" header-params )

        header-params = ( to-tag | from-tag | extension )

        callid    =  token ["@" token]
        to-tag    = "to-tag="   UUID
        from-tag  = "from-tag=" UUID
        extension =  param [ "=" val ]
        param     =  token
        val       =  token | quoted-string


6. Examples of usage



 Mahy, Petrie             Expires: May 2002                         5

                      SIP Join and Fork Headers


   The examples which follow are not intended to enumerate all the
   possibilities for the usage of these extensions, but rather to
   provide examples and ideas for some of the possibilities.


6.1. Join accepted for local mixing

   A             B              C
   | callid: 4@A |  callid: 7@c |
   |             |              |
   |             |<============>|
   |             |              |
   |INVITE------>|              |
   |Join: 7@c    |              |
   |             |              |
   |<----200-----|              |
   |-----ACK---->|              |
   |             |              |
   |   .. begins mixing ..      |
   |             |              |
   |<===========>|<============>|
   |<::::::::::::::::::::::::::>|


   After accepting a Join from A, the conversation space which
   contained B and C, now has added A as well:

        [ B , C ]  -->  [ A , B , C ]


6.2. Join accepted and transitioned to central mixer


   A             B              C            mixer
   | callid: 4@A |  callid: 7@c |              |
   |             |              |              |
   |             |<============>|              |
   |             |              |              |
   |INVITE------>|              |              |
   |Join: 7@c    |--INVITE-------------------->|
   |             |<----200---------------------|
   |             |-----ACK-------------------->|
   |<----300-----|                             |
   |INVITE------------------------------------>|
   |<--200-------------------------------------|
   |---ACK------------------------------------>|
   |             |--REFER------>|              |
   |             |<---200-------|--INVITE----->|
   |             |              |<----200------|
   |             |<--NOTIFY-----|-----ACK----->|
   |             |------200---->|              |
   |             |---BYE------->|              |
   |             |<--200--------|              |
 Mahy, Petrie             Expires: May 2002                         6

                      SIP Join and Fork Headers


   |             |              |              |
   |<=========================================>| mixes the
   |             |<===========================>| three sessions
   |             |              |<============>| together


   The conversation space now looks identical to the previous example.
   Details of how the Join are implemented are transparent to A.  B
   could have also used 3rd party call control to move the necessary
   sessions.

        [ B , C ]  -->  [ A , B , C ]


6.3. Join rejected


   A             B              C
   | callid: 4@A |  callid: 7@c |
   |             |              |
   |             |<============>|
   |             |              |
   |INVITE------>|              |
   |Join: 7@c    |              |
   |             |              |
   |<----486-----|              |
   |-----ACK---->|              |
   |             |              |

   In this example B is Busy (does not want to be disturbed), and
   therefore does not wish to add A.


6.4. Fork accepted for local forking


   A             B              C
   | callid: 4@A |  callid: 7@c |
   |             |              |
   |             |<============>|
   |             |              |
   |INVITE------>|              |
   |Fork: 7@c    |              |
   |             |              |
   |<----200-----|              |
   |-----ACK---->|              |
   |             |              |
   |   .. begins forking ..     |
   |             |              |
   |<===========>|<============>|
   |             |              |


 Mahy, Petrie             Expires: May 2002                         7

                      SIP Join and Fork Headers


   After this fork request, B is the anchor of two related conversation
   spaces, and participates on both at the same time.


                                 +--------+
                                 |        |
    +----------------+           | +------|---------+
    |                |           | |      |         |
    |  B          C  |  ====>    | |  B   |      C  |
    +----------------+           | +------|---------+
                                 |        |
                                 |        |
                                 |        |
                                 |        |
                                 |    A   |
                                 |        |
                                 +--------+

6.5. Fork rejected


   A             B              C
   | callid: 4@A |  callid: 7@c |
   |             |              |
   |             |<============>|
   |             |              |
   |INVITE------>|              |
   |Fork: 7@c    |              |
   |             |              |
   |<----603-----|              |
   |-----ACK---->|              |
   |             |              |

   Here B declines the forking session.


7. Security Considerations

   This extension can be used to monitor or insert content during a
   multimedia conversation.  As such, invitations with these headers
   SHOULD only be accepted from authenticated or trusted parties.

   This extension was designed to take advantage of future signature
   parameters or authorization tokens defined by the SIP Working Group.
   In general, call control features would benefit considerably from
   such work.


8. References


   [SIP] M. Handley, E. Schooler, and H. Schulzrinne, "SIP: Session
   Initiation Protocol", RFC2543, Internet Engineering Task Force,
 Mahy, Petrie             Expires: May 2002                         8

                      SIP Join and Fork Headers


   Nov 1998.

   [cc-models] R. Mahy, "A Call Control Model for SIP", Internet Draft
   <draft-mahy-sip-cc-models-00.txt>, IETF; July 2001. Work in
   progress.

   [cc-framework] B. Campbell, "SIP Call Control - Framework ",
   Internet Draft <draft-campbell-sip-cc-framework-02.txt>, IETF,
   Mar 2001.  Work in progress.

   [Replaces] B. Biggs, R. Dean, "The SIP Replaces Header", Internet
   Draft <draft-biggs-sip-replaces-01.txt>, IETF; July 2001. Work in
   progress.

   [Conf] J. Rosenberg, H. Schulzrinne, "Models for Multi Party
   Conferencing in SIP", Internet Draft <draft-ietf-sipping-
   conferencing-models-00.txt>, IETF; Nov 2001. Work in progress.

   [REFER] R. Sparks, "The REFER Method", Internet Draft <draft-ietf-
   sip-refer-02.txt>, IETF; Oct 2001. Work in progress.

   [3pcc] J. Rosenberg, J. Peterson, H. Schulzrinne, "Third Party Call
   Control in SIP", Internet Draft <draft-rosenberg-sip-3pcc-01.txt>,
   IETF;  Nov. 2000.  Work in progress


   [RFC2026] S Bradner, "The Internet Standards Process -- Revision 3",
   RFC2026 (BCP), IETF, October 1996.

   [RFC2119] S. Bradner, "Key words for use in RFCs to indicate
   requirement levels," Request for Comments (Best Current Practice)
   2119, Internet     Engineering Task Force, Mar. 1997.

   [BNF] D Crocker, P Overell, "Augmented BNF for Syntax
   Specifications: ABNF", RFC2234, IETF, Nov 1997.


10.  Acknowledgments

   The authors would like extend thanks to Billy Biggs and Rick Dean
   for their work on the Replaces header upon which this document is
   based.  Thanks to Robert Sparks, Alan Johnston, and Ben Campbell and
   many other members of the SIP WG for their continued support of the
   cause of distributed call control in SIP.


11. Author's Addresses

   Rohan Mahy
   Cisco Systems
   170 West Tasman Dr, MS: SJC-21/3
   Phone: +1 408 526 8570
   Email: rohan@cisco.com
 Mahy, Petrie             Expires: May 2002                         9

                      SIP Join and Fork Headers



   Dan Petrie
   Pingtel Corp.
   400 West Cummings Park, Suite 2200
   Woburn, MA, 01801 USA
   Email: dpetrie@pingtel.com


Full Copyright Statement

   "Copyright (C) The Internet Society (date). All Rights Reserved.
   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implmentation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph
   are included on all such copies and derivative works. However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.
   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.





















 Mahy, Petrie             Expires: May 2002                        10
