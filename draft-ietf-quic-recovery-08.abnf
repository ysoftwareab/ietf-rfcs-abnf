handshake_count = 0
tlp_count = 0
rto_count = 0
reordering_threshold = infinite
time_reordering_fraction = kTimeReorderingFraction
reordering_threshold = kReorderingThreshold
time_reordering_fraction = infinite
loss_time = 0
smoothed_rtt = 0
rttvar = 0
min_rtt = 0
max_ack_delay = 0
largest_sent_before_rto = 0
time_of_last_sent_packet = 0
largest_sent_packet = 0

time_of_last_sent_packet = now
largest_sent_packet = packet_number
largest_acked_packet = ack.largest_acked
latest_rtt = now - sent_packets[ack.largest_acked].time
min_rtt = min(min_rtt, latest_rtt)
max_ack_delay = max(max_ack_delay, ack_delay)
smoothed_rtt = latest_rtt
rttvar = latest_rtt / 2
rttvar = 3/4 * rttvar + 1/4 * abs(smoothed_rtt - latest_rtt)
smoothed_rtt = 7/8 * smoothed_rtt + 1/8 * latest_rtt

handshake_count = 0
tlp_count = 0
rto_count = 0
alarm_duration = 2 * kDefaultInitialRtt
alarm_duration = 2 * smoothed_rtt
alarm_duration = max(alarm_duration, kMinTLPTimeout)
alarm_duration = alarm_duration * (2 ^ handshake_count)
alarm_duration = loss_time - time_of_last_sent_packet
alarm_duration = max(1.5 * smoothed_rtt + max_ack_delay,
                              kMinTLPTimeout)
alarm_duration = smoothed_rtt + 4 * rttvar
alarm_duration = max(alarm_duration, kMinRTOTimeout)
alarm_duration = alarm_duration * (2 ^ rto_count)

largest_sent_before_rto = largest_sent_packet
loss_time = 0
lost_packets = {}
delay_until_lost = infinite
delay_until_lost =
          (1 + time_reordering_fraction) * max(latest_rtt, smoothed_rtt)
delay_until_lost = 5/4 * max(latest_rtt, smoothed_rtt)
time_since_sent = now() - unacked.time_sent
delta = largest_acked.packet_number - unacked.packet_number
loss_time = now() + delay_until_lost - time_since_sent

congestion_window = kInitialWindow
bytes_in_flight = 0
end_of_recovery = 0
ssthresh = infinite

largest_lost_packet = lost_packets.last()
end_of_recovery = largest_sent_packet
congestion_window = max(congestion_window, kMinimumWindow)
ssthresh = congestion_window

congestion_window = kMinimumWindow

