text = %x22 *SCHAR %x22
SCHAR = %x20-21 / %x23-5B / %x5D-7E / %x80-10FFFD / SESC
SESC = "\" (%x20-7E / %x80-10FFFD)

SESC = "\" ( %x22 / "/" / "\" /                 ; \" \/ \\
                %x62 / %x66 / %x6E / %x72 / %x74 / ; \b \f \n \r \t
                (%x75 hexchar) )                   ; \u
hexchar = non-surrogate / (high-surrogate "\" %x75 low-surrogate)
non-surrogate = ((DIGIT / "A"/"B"/"C" / "E"/"F") 3HEXDIG) /
                  ("D" %x30-37 2HEXDIG )
high-surrogate = "D" ("8"/"9"/"A"/"B") 2HEXDIG
low-surrogate = "D" ("C"/"D"/"E"/"F") 2HEXDIG

bytes = [bsqual] %x27 *BCHAR %x27
BCHAR = %x20-26 / %x28-5B / %x5D-10FFFD / SESC / CRLF
bsqual = "h" / "b64"

BCHAR = %x20-26 / %x28-5B / %x5D-10FFFD / SESC / "\'" / CRLF
bytes = [bsqual] %x27 *BCHAR %x27
BCHAR = %x20-26 / %x28-5B / %x5D-10FFFD / SESC / CRLF

bytes = %x27 *BCHAR %x27
         / bsqual %x27 *QCHAR %x27
BCHAR = %x20-26 / %x28-5B / %x5D-10FFFD / SESC / CRLF
QCHAR = DIGIT / ALPHA / "+" / "/" / "-" / "_" / "=" / WS

WS = SP / NL
SP = %x20
NL = COMMENT / CRLF
COMMENT = ";" *PCHAR CRLF
PCHAR = %x20-7E / %x80-10FFFD
CRLF = %x0A / %x0D.0A

foo = h'
      43424F52 ; 'CBOR'
      0A       ; LF, but don't use CR!
foo = h'
      43424F52 ; \'CBOR\'
      0A       ; LF, but don\'t use CR!
Field = uint .bitfield Fieldbits

Fieldbits = [
     flag1: [1, bool],
     val: [4, Vals],
     flag2: [1, bool],
Vals = &(A: 0, B: 1, C: 2, D: 3)
postal = {
     ( street: text,
       housenumber: text) //
     ( pobox: text .regexp "[0-9]+" )
session = {
     timeout: uint,
other-session = {
     timeout: uint  .lt [somehow refer to session.timeout],
cddlj = ["cddl", +rule]
rule = ["=" / "/=" / "//=", namep, type]
namep = ["name", id] / ["gen", id, +id]
id = text .regexp "[A-Za-z@_$](([-.])*[A-Za-z0-9@_$])*"
op = ".." / "..." /
     text .regexp "\\.[A-Za-z@_$](([-.])*[A-Za-z0-9@_$])*"
namea = ["name", id] / ["gen", id, +type]
type = value / namea / ["op", op, type, type] /
     ["map", group] / ["ary", group] / ["tcho", 2*type] /
     ["unwrap", namea] / ["enum", group / namea] /
     ["prim", ?(0..7, ?uint)]
group = ["mem", null/type, type] /
     ["rep", uint, uint/false, group] /
     ["seq", 2*group] / ["gcho", 2*group]
value = ["number"/"text"/"bytes", text]

