st = next[st];
min_dictionary_size = 1 << 12,
max_dictionary_size = 1 << 29,
literal_context_bits = 3,
literal_pos_state_bits = 0,                           // not used
pos_state_bits = 2,
pos_states = 1 << pos_state_bits,
pos_state_mask = pos_states - 1,

len_states = 4,
dis_slot_bits = 6,
start_dis_model = 4,
end_dis_model = 14,
modeled_distances = 1 << ( end_dis_model / 2 ),       // 128
dis_align_bits = 4,
dis_align_size = 1 << dis_align_bits,
len_low_bits = 3,
len_mid_bits = 3,
len_high_bits = 8,
len_low_symbols = 1 << len_low_bits,
len_mid_symbols = 1 << len_mid_bits,
len_high_symbols = 1 << len_high_bits,
max_len_symbols = len_low_symbols+len_mid_symbols+len_high_symbols,

min_match_len = 2,                                    // must be 2

bit_model_move_bits = 5,
bit_model_total_bits = 11,
bit_model_total = 1 << bit_model_total_bits };

crc = data[(crc^buffer[i])&0xFF] ^ ( crc >> 8 );
range = bound;
symbol = 0;
symbol = 1;
symbol = ( symbol << 1 ) | decode_bit( bm[symbol] );
reversed_symbol = ( reversed_symbol << 1 ) | ( symbol & 1 );
symbol = ( symbol << 1 ) | bit;
symbol = ( symbol << 1 ) | decode_bit( bm[symbol] );
stream_pos = pos;
distance = rep1;
distance = rep2;
rep2 = rep1;
rep1 = rep0;
rep0 = distance;
len = min_match_len + rdec.decode_len( rep_len_model, pos_state );
rep3 = rep2; rep2 = rep1; rep1 = rep0;
len = min_match_len + rdec.decode_len(match_len_model, pos_state);
rep0 = rdec.decode_tree( bm_dis_slot[len_state], dis_slot_bits );
rep0 = ( 2 | ( dis_slot & 1 ) ) << direct_bits;
data_size = ( data_size << 8 ) + trailer[i];
member_size = ( member_size << 8 ) + trailer[i];
