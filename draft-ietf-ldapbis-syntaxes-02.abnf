OCTET          =  %x00-FF
                        ; 8 bits of data

hex-digit = DIGIT / "a" / "b" / "c" / "d" / "e" / "f" /
                 "A" / "B" / "C" / "D" / "E" / "F"

k = ALPHA / DIGIT / HYPHEN 

octetstring = *OCTET

p = ALPHA / DIGIT / "'" / "(" / ")" / "+" / "," / HYPHEN / "DOT" /
          "="/ "/" / ":" / "?" / " "

numericstring = 1*DIGIT

anhstring = 1*k

keystring = ALPHA [ anhstring ]

printablestring = 1*p

space = 1*" "

whsp = [ space ]

utf8 = <any sequence of octets formed from the UTF-8 [UTF-8]
             transformation of a character from ISO 10646 [UCS]
             except "'">

dstring = 1*( utf8 / "''" )  
                         ; escaped utf8 string, each "'"
                         ; appearing in the value to be encoded is
                         ; escaped by a preceding "'"

qdstring = "'" dstring "'"

qdstringlist = [ qdstring *( space qdstring ) ]

qdstrings = qdstring / ( "(" whsp qdstringlist whsp ")" )

oid = descr / numericoid

descr = keystring

numericoid = numericstring *( DOT numericstring ) 

noidlen = numericoid [ "{" len "}" ]

len = numericstring

oids = oid / ( "(" space oidlist space ")" )  
             ; set of oids of either form

oidlist = oid *( space "$" space oid )

qdescrs = qdescr / ( "(" whsp qdescrlist whsp ")" )  
                ;  object descriptors used as schema element names

qdescrlist = [ qdescr *( whsp qdescr ) ]

qdescr = "'" descr "'"

xstring = "X-" 1*( ALPHA / HYPHEN / "_" )

extensions = *( space xstring space qdstrings )

SyntaxDescription = "(" whsp 
          numericoid 
          [ space "DESC" space qdstring ] 
          extensions
          whsp ")"

MatchingRuleDescription = "(" whsp 
         numericoid 
         [ space "NAME" space qdescrs ]
         [ space "DESC" space qdstring ]
         [ space "OBSOLETE" ]
         space "SYNTAX" space numericoid
         extensions
         whsp ")"

AttributeTypeDescription = "(" whsp
         numericoid
         [ space "NAME" qdescrs ] 
         [ space "DESC" qdstring ] 
         [ space "OBSOLETE" ]
         [ space "SUP" space oid ]
         [ space "EQUALITY" space oid ] 
         [ space "ORDERING" space oid ] 
         [ space "SUBSTR" space oid ] 
         [ space "SYNTAX" space noidlen ] 
         [ space "SINGLE-VALUE" ] 
         [ space "COLLECTIVE" ] 
         [ space "NO-USER-MODIFICATION" ] 
         [ space "USAGE" space AttributeUsage ]  
         extensions
         whsp ")"

ObjectClassDescription = "(" whsp 
         numericoid 
         [ space "NAME" space qdescrs ]
         [ space "DESC" space qdstring ]
         [ space "OBSOLETE" ]
         [ space "SUP" space oids ] 
         [ space ( "ABSTRACT" / "STRUCTURAL" / "AUXILIARY" ) ]
         [ space "MUST" space oids ] 
         [ space "MAY" space oids ]       ; AttributeTypes
         extensions
         whsp ")" 

bitstring = "'" *binary-digit "'B"

binary-digit = "0" / "1"

boolean = "TRUE" / "FALSE"

CountryString  = p p

delivery-value = pdm / ( whsp pdm space "$" space delivery-value )

pdm = "any" / "mhs" / "physical" / "telex" / "teletex" /
                "g3fax" / "g4fax" / "ia5" / "videotex" / "telephone"
DITContentRuleDescription = "(" whsp
         numericoid 
         [ space "NAME" space qdescrs ]
         [ space "DESC" space qdstring ]
         [ space "OBSOLETE" ]
         [ space "AUX" space oids ] 
         [ space "MUST" space oids ] 
         [ space "MAY" space oids ] 
         [ space "NOT" space oids ] 
         extensions
         whsp ")"

DITStructureRuleDescription = "(" whsp
         ruleidentifier 
         [ space "NAME" space qdescrs ]
         [ space "DESC" space qdstring ]
         [ space "OBSOLETE" ]
         space "FORM" space oid 
         [ space "SUP" ruleidentifiers ] 
         extensions
         whsp ")"
ruleidentifier = numericstring

ruleidentifiers = ruleidentifier / "(" whsp ruleidentifierlist 
         whsp ")"

ruleidentifierlist = [ ruleidentifier *( space ruleidentifier ) ]

CN=Steve Kille,O=Isode Limited,C=GB

OU=Sales+CN=J. Smith,O=Widget Inc.,C=US
CN=L. Eagle,O=Sue\, Grabbit and Runn,C=GB

CN=Before\0DAfter,O=Test,C=GB

SN=Lu\C4\8Di\C4\87

EnhancedGuide = space oid whsp "#" whsp criteria whsp "#" 
                      whsp subset

subset = "baseobject" / "oneLevel" / "wholeSubtree"

criteria = or-term / "(" or-term ")"

or-term = and-term *( "|" and-term )

and-term = not-term *( "&" not-term )

not-term = "!" not-term / 
                 attributetype "$" match-type /
                 "(" or-term ")" /
                 "?true" / ; 
                 "?false" 

match-type = "EQ" / "SUBSTR" / "GE" / "LE" / "APPROX"

fax-number = printablestring [ "$" faxparameters ]  
                   ; telephone number, possibly followed by facsimile 
                     parameters

faxparameters = faxparm / ( faxparm "$" faxparameters )

faxparm = "twoDimensional" / "fineResolution" / "unlimitedLength" 
         / "b4Length" / "a3Width" / "b4Width" / "uncompressed"

guide-value = [ object-class "#" ] criteria

object-class = space oid

MatchingRuleUseDescription = "(" whsp
         numericoid 
         [ space "NAME" space qdescrs ]
         [ space "DESC" space qdstring ]
         [ space "OBSOLETE" ]
         space "APPLIES" space oids    ;  AttributeType identifiers
         extensions
         whsp ")" 

NameAndOptionalUID = DistinguishedName [ "#" bitstring ]
NameFormDescription = "(" whsp
         numericoid 
         [ space "NAME" space qdescrs ]
         [ space "DESC" space qdstring ]
         [ space "OBSOLETE" ]
         space "OC" space oid 
         space "MUST" space oids           ; AttributeTypes
         [ space "MAY" space oids ]        ; AttributeTypes
         extentions
         whsp ")"

otherMailbox = mailbox-type "$" mailbox

mailbox-type = printablestring

mailbox = <an encoded IA5 String>

postal-address = dstring *( "$" dstring )

presentation-address = [[[ psel "/" ] ssel "/" ] tsel "/" ] 
         network-address-list 

psel = selector
ssel = selector
tsel = selector

network-address-list = network-address "_" network-address-list / 
         network-address

network-address = "NS" "+" dothexstring
        / afi "+" idi [ "+" dsp ]
        / idp "+" hexstring

selector = """ otherstring """ 
                / "#" numericstring 
                / "'" hexstring "'H"
                / "" 

idp = numericstring

dsp = "d" numericstring 
         / "x" dothexstring 
         / "l" otherstring 
         / "RFC-1006" "+" prefix "+" ip [ "+" port [ "+" tset ]]
         / "X.25(80)" "+" prefix "+" dte [ "+" cudf-or-pid "+" 
           hexstring ]
         / "ECMA-117-Binary" "+" hexstring "+" hexstring "+" hexstring
         / "ECMA-117-Decimal" "+" numericstring "+"
            numericstring "+" numericstring

idi = numericstring

afi = "X121" / "DCC" / "TELEX" / "PSTN" / "ISDN" / "ICD" / "LOCAL"

prefix = DIGIT DIGIT

ip = numericstring
           ;  dotted decimal form (e.g., 10.0.0.6) or 
              domain (e.g., twg.com)

port = numericstring

tset = numericstring

dte = numericstring

cudf-or-pid = "CUDF" / "PID" 

other = k / "+" / DOT

domainchar = k / DOT
hexoctet = hex-digit hex-digit

decimal-octet = 1*3DIGIT

otherstring = other otherstring / other

domainstring = domainchar otherstring / domainchar

hexstring = hexoctet hexstring / hexoctet

dotstring = decimaloctet DOT dotstring / 
         decimaloctet DOT decimaloctet

dothexstring = dotstring / hexstring

substring = [initial] any [final]

initial = value
 
any = "*" *(value "*")

final = value

teletex-id = ttx-term  0*("$" ttx-param)

ttx-term   = printablestring

ttx-param  = ttx-key ":" ttx-value

ttx-key    = "graphic" / "control" / "misc" / "page" / "private"

ttx-value  = octetstring

telex-number  = actual-number "$" country "$" answerback

actual-number = printablestring

country       = printablestring

answerback    = printablestring

