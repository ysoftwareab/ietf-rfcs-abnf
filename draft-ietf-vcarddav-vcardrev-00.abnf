contentline  = name *(";" param) ":" value CRLF
      ; When parsing a content line, folded lines MUST first
      ; be unfolded according to the unfolding procedure
      ; described above.
      ; When generating a content line, lines longer than 75
      ; characters SHOULD be folded according to the folding
      ; procedure described above.

name         = x-name / iana-token

iana-token   = 1*(ALPHA / DIGIT / "-")
      ; identifier registered with IANA

x-name       = "x-" 1*(ALPHA / DIGIT / "-")
      ; Names that begin with "x-" or "X-" are
      ; reserved for experimental use, not intended for released
      ; products, or for use in bilateral agreements.

param        = param-name "=" param-value *("," param-value)

param-name   = x-name / iana-token

param-value  = ptext / quoted-string

ptext  = *SAFE-CHAR

value = *VALUE-CHAR
         / valuespec      ; valuespec defined in section 5.8.4

contentline  = name *(";" param) ":" value CRLF
      ; When parsing a content line, folded lines MUST first
      ; be unfolded according to the unfolding procedure
      ; described above.
      ; When generating a content line, lines longer than 75
      ; characters SHOULD be folded according to the folding
      ; procedure described above.

name         = x-name / iana-token

iana-token   = 1*(ALPHA / DIGIT / "-")
      ; identifier registered with IANA

x-name       = "x-" 1*(ALPHA / DIGIT / "-")
      ; Names that begin with "x-" or "X-" are
      ; reserved for experimental use, not intended for released
      ; products, or for use in bilateral agreements.

param        = param-name "=" param-value *("," param-value)
param-name   = x-name / iana-token

param-value  = ptext / quoted-string

ptext  = *SAFE-CHAR

value = *VALUE-CHAR
         / valuespec      ; valuespec defined in section 5.8.4

valuespec =  text-list
                / URI               ; from Appendix A of [RFC3986]
                / date-list
                / time-list
                / date-time-list
                / boolean
                / integer-list
                / float-list
                / binary
                / vcard
                / phone-number
                / utc-offset
                / iana-valuespec

text-list = *TEXT-LIST-CHAR *("," *TEXT-LIST-CHAR)

TEXT-LIST-CHAR = "\\" / "\," / "\n"
                    / <any VALUE-CHAR except , or \ or newline>
         ; Backslashes, newlines, and commas must be encoded.
         ; \n or \N can be used to encode a newline.

date-list = date *("," date)

time-list = time *("," time)

date-time-list = date "T" time *("," date "T" time)

boolean = "TRUE" / "FALSE"

integer-list = integer *("," integer)

integer = [sign] 1*DIGIT

float-list = float *("," float)

float = [sign] 1*DIGIT ["." 1*DIGIT]

sign = "+" / "-"

binary = <A "B" binary encoded string as defined by [RFC2047].>

vcard = <vCard data encoded as specified below.>

phone-number = <A telephone number as defined in
                     [CCITT.E163.1988] and [CCITT.X121.1988]>

date = date-fullyear ["-"] date-month ["-"] date-mday

date-fullyear = 4 DIGIT

date-month = 2 DIGIT     ;01-12
date-mday = 2 DIGIT      ;01-28, 01-29, 01-30, 01-31
                              ;based on month/year

time = time-hour [":"] time-minute [":"] time-second [time-secfrac]
             [time-zone]

time-hour = 2 DIGIT      ;00-23

time-minute = 2 DIGIT    ;00-59

time-second = 2 DIGIT    ;00-60 (leap second)

time-secfrac = "," 1*DIGIT

time-zone = "Z" / time-numzone

time-numzome = sign time-hour [":"] time-minute

utc-offset = ("+" / "-") time-hour ":" time-minute

iana-valuespec = <a publicly-defined valuetype format, registered
                       with IANA, as defined in section 15 of this
                       document>

predefined-param = encodingparm
                          / valuetypeparm
                          / languageparm

encodingparm = "encoding" "=" encodingtype

encodingtype = "b"       ; from [RFC2047]
                    / iana-token  ; registered as described in
                                  ; section 15 of this document

predefined-param = encodingparm
                          / valuetypeparm
                          / languageparm

encodingparm = "encoding" "=" encodingtype

encodingtype = "b"       ; from [RFC2047]
                    / iana-token  ; registered as described in
                                  ; section 15 of this document

predefined-param = encodingparm
                          / valuetypeparm
                          / languageparm

encodingparm = "encoding" "=" encodingtype

encodingtype = "b"       ; from [RFC2047]
                    / iana-token  ; registered as described in
                                  ; section 15 of this document

decimal = degrees + minutes/60 + seconds/3600.

ALPHA        = %x41-5A / %x61-7A
         ; Latin Capital Letter A-Latin Capital Letter Z /
         ; Latin Small Letter a-Latin Small Letter z
CHAR         = %x01-7F
         ; Any C0 Controls and Basic Latin, excluding NULL from
         ; Code Charts, pages 7-6 through 7-9 in [UNICODE]

CR           = %x0D
         ; Carriage Return

LF           = %0A
         ; Line Feed

CRLF         = CR LF
         ; Internet standard newline

DIGIT        = %x30-39
         ; Digit Zero-Digit Nine

DQUOTE       = %x22
         ; Quotation Mark

HTAB         = %x09
         ; Horizontal Tabulation

SP           = %x20
         ; space

VCHAR        = %x21-7E
         ; Visible (printing) characters

WSP          = SP / HTAB
         ; White Space

vcard_entity = 1*(vcard)

vcard        = "BEGIN" ":" "VCARD" 1*CRLF
                   1*(contentline)
         ;A vCard object MUST include the VERSION, FN and N types.
                   "END" ":" "VCARD" 1*CRLF

contentline  = name *(";" param ) ":" value CRLF
         ; When parsing a content line, folded lines must first
         ; be unfolded according to the unfolding procedure
         ; described above. When generating a content line, lines
         ; longer than 75 characters SHOULD be folded according to
         ; the folding procedure described in [MIME DIR].

name         = iana-token / x-name
         ; Parsing of the param and value is
         ; based on the "name" or type identifier
         ; as defined in ABNF sections below
iana-token   = 1*(ALPHA / DIGIT / "-")
         ; vCard type or parameter identifier registered with IANA

x-name       = "X-" 1*(ALPHA / DIGIT / "-")
         ; Reserved for non-standard use

param        = param-name "=" param-value *("," param-value)

param-name   = iana-token / x-name

param-value  = ptext / quoted-string

ptext        = *SAFE-CHAR

value        = *VALUE-CHAR

quoted-string = DQUOTE QSAFE-CHAR DQUOTE

NON-ASCII    = %x80-FF
         ; Use is restricted by outer MIME object (UTF-8 preferred)

QSAFE-CHAR   = WSP / %x21 / %x23-7E / NON-ASCII
         ; Any character except CTLs, DQUOTE

SAFE-CHAR    = WSP / %x21 / %x23-2B / %x2D-39 / %x3C-7E / NON-ASCII
         ; Any character except CTLs, DQUOTE, ";", ":", ","

VALUE-CHAR   = WSP / VCHAR / NON-ASCII
         ; Any textual character

param        = ""
         ; No parameters allowed

value        = text-value

param        = ""
         ; No parameters allowed

value        = kind-value
kind-value   = "individual" / "group" / "org" / x-name / iana-token

param        = ""
         ; No parameters allowed

value        = text-value
         ; Value MUST be the case insensitive value "VCARD

param        = source-param
         ; Only source parameters allowed

value        = uri

source-param = ("VALUE" "=" "uri")
                 / (x-name "=" *SAFE-CHAR)

param        = text-param
         ; Text parameters allowed

value        = text-value

param        = text-param
         ; Text parameters allowed

value        = n-value

n-value      = 0*4(text-value *("," text-value) ";")
                   text-value *("," text-value)
         ; Family; Given; Middle; Prefix; Suffix.
         ; Example: Public;John;Quincy,Adams;Reverend Dr. III

param        = text-param
         ; Text parameters allowed
value        = text-value-list

param        = img-inline-param
         ; Only image parameters allowed

param        =/ img-refer-param
         ; Only image parameters allowed

value        = img-inline-value
         ; Value and parameter MUST match

value        =/ img-refer-value
         ; Value and parameter MUST match

param        = ("VALUE" "=" "date")
         ; Only value parameter allowed

param        =/ ("VALUE" "=" "date-time")
         ; Only value parameter allowed

value        = date-value
         ; Value MUST match value type

value        =/ date-time-value
         ; Value MUST match value type

param        = adr-param / text-param
         ; Only adr and text parameters allowed

value        = adr-value

param        = adr-param / text-param
         ; Only adr and text parameters allowed

value        = text-value

param        = tel-param
         ; Only tel parameters allowed

value        = phone-number-value

tel-param    = "TYPE" "=" tel-type *("," tel-type)
tel-type     = "HOME" / "WORK" / "PREF" / "VOICE" / "FAX" / "MSG"
                 / "CELL" / "PAGER" / "BBS" / "MODEM" / "CAR" / "ISDN"
                 / "VIDEO" / "PCS" / iana-token / x-name
         ; Values are case insensitive

param        = email-param
         ; Only email parameters allowed
value        = text-value

email-param  = "TYPE" "=" email-type ["," "PREF"]
         ; Value is case insensitive

email-type   = "INTERNET" / "X400" / iana-token / "X-" word
         ; Values are case insensitive

param        = ""
         ; No parameters allowed

value        = utc-offset-value

param        = ""
         ; No parameters allowed

value        = float-value ";" float-value

param        = text-param
         ; Only text parameters allowed

value        = text-value

param        = text-param
         ; Only text parameters allowed

value        = text-value

param        = img-inline-param / img-refer-param
         ; Only image parameters allowed

value        = img-inline-value / img-refer-value
         ; Value and parameter MUST match

param        = agent-inline-param

param        =/ agent-refer-param

param        =/ text-param

value        = agent-inline-value
         ; Value and parameter MUST match
value        =/ agent-refer-value
         ; Value and parameter MUST match

value        =/ text-value
         ; Value and parameter MUST match

agent-inline-param = ""
         ; No parameters allowed

agent-refer-param = "VALUE" "=" "uri"
         ; Only value parameter allowed

agent-inline-value = text-value
         ; Value MUST be a valid vCard object

agent-refer-value = uri
         ; URI MUST refer to valid vCard object

param        = text-param
         ; Only text parameters allowed

value        = org-value

org-value    = *(text-value ";") text-value
         ; First is Organization Name, remainder are Organization Units.

param        = text-param
         ; Only text parameters allowed

value        = text-value-list

param        = text-param
         ; Only text parameters allowed
value        = text-value

param        = ""
         ; No parameters allowed

value        = text-value

param        = ["VALUE" =" "date-time"]
         ; Only value parameters allowed. Values are case insensitive.
param        =/ "VALUE" =" "date"
         ; Only value parameters allowed. Values are case insensitive.

value        = date-time-value

value        =/ date-value

param        = text-param
         ; Only text parameters allowed

value        = text-value

param        = snd-inline-param
         ; Only sound parameters allowed

param        =/ snd-refer-param
         ; Only sound parameters allowed

value        = snd-line-value
         ; Value MUST match value type

value        =/ snd-refer-value
         ; Value MUST match value type

snd-inline-value     = binary-value CRLF
         ; Value MUST be "b" encoded audio content

snd-inline-param     = ("VALUE" "=" "binary"])
                         / ("ENCODING" "=" "b")
                         / ("TYPE" "=" *SAFE-CHAR)
         ; Value MUST be an IANA registered audio type

snd-refer-value      = uri
         ; URI MUST refer to audio content of given type
snd-refer-param      = ("VALUE" "=" "uri")
                         / ("TYPE" "=" word)
         ; Value MUST be an IANA registered audio type

param        = "TYPE" "=" (iana-token / x-name)
         ;TYPE value should be an IANA registered identifier format

value        = text-value

param        = ""
         ; No parameters allowed

value        = uri

param        = ""
         ; No parameters allowed

value        = text-value
         ; Value MUST be "3.0"

param        = ""
         ; No parameters allowed

value        = "PUBLIC" / "PRIVATE" / "CONFIDENTIAL"
                 / iana-token / x-name
         ; Value are case insensitive

param        = key-txt-param
         ; Only value and type parameters allowed

param        =/ key-bin-param
         ; Only value and type parameters allowed

value        = text-value

value        =/ binary-value

key-txt-param = "TYPE" "=" keytype

key-bin-param = ("TYPE" "=" keytype)
                  / ("ENCODING" "=" "b")
         ; Value MUST be a "b" encoded key or certificate
keytype      = param-value
         ; Type MUST be a media type as defined in RFC 4288

param        = text-param / (x-name "=" param-value)
         ; Only text or non-standard parameters allowed

value        = text-value

text-param   = ("VALUE" "=" "ptext")
                 / ("LANGUAGE" "=" langval)
                 / (x-name "=" param-value)

langval      = <a language string as defined in [RFC4646]>

img-inline-value     = binary-value
         ;Value MUST be "b" encoded image content

img-inline-param     = ("VALUE" "=" "binary")
                         / ("ENCODING" "=" "b")
                         / ("TYPE" "=" param-value
         ;TYPE value MUST be an image media type as defined in RFC 4288

img-refer-value = uri
         ;URI MUST refer to image content of given type

img-refer-param      = ("VALUE" "=" "uri")
                         / ("TYPE" "=" param-value)
         ;TYPE value MUST be an image media type as defined in RFC 4288

adr-param    = ("TYPE" "=" adr-type *("," adr-type))
                 / (text-param)

adr-type     = "home" / "work" / "pref" / iana-token / x-name

adr-value    = 0*6(text-value ";") text-value
         ; PO Box, Extended Address, Street, Locality, Region, Postal
         ; Code, Country Name
text-value-list      = 1*text-value *("," 1*text-value)

text-value   = *(SAFE-CHAR / ":" / DQUOTE / ESCAPED-CHAR)

ESCAPED-CHAR = "\\" / "\;" / "\," / "\n" / "\N")
         ; \\ encodes \, \n or \N encodes newline
         ; \; encodes ;, \, encodes ,

binary-value = <A "b" encoded text value as defined in [RFC2047]>

date-value   = <A single date value as defined in [RFC2425]>

time-value   = <A single time value as defined in [RFC2425]>
date-time-value = <A single date-time value as defined in [RFC2425]>

float-value  = <A single float value as defined in [RFC2425]>

phone-number-value = <A single text value as defined in [CCITT
                          E.163] and [CCITT.X121.1988]>

uri-value    = <A uri value as defined in [RFC2425]>

utc-offset-value = ("+" / "-") time-hour ":" time-minute
time-hour    = 2DIGIT                ;00-23
time-minute  = 2DIGIT                ;00-59

