


Network Working Group                                     P. Saint-Andre
Internet-Draft                                Jabber Software Foundation
Expires: February 9, 2006                                  J. Hildebrand
                                                            Jabber, Inc.
                                                                B. Wyman
                                                              PubSub.com
                                                          August 8, 2005


   Transporting Atom Notifications over the Extensible Messaging and
                        Presence Protocol (XMPP)
                   draft-saintandre-atompub-notify-03

Status of this Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on February 9, 2006.

Copyright Notice

   Copyright (C) The Internet Society (2005).

Abstract

   This memo describes a method for notifying interested parties about
   changes in syndicated information encapsulated in the Atom feed
   format, where such notifications are delivered via an extension to
   the Extensible Messaging and Presence Protocol (XMPP) for publish-



Saint-Andre, et al.     Expires February 9, 2006                [Page 1]

Internet-Draft                 ATOM-PUBSUB                   August 2005


   subscribe functionality.

Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1   Overview . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.2   Terminology  . . . . . . . . . . . . . . . . . . . . . . .  4
   2.  Basic Process Flows  . . . . . . . . . . . . . . . . . . . . .  4
     2.1   Notification of Entry Creation . . . . . . . . . . . . . .  5
     2.2   Notification of Entry Modification . . . . . . . . . . . .  7
     2.3   Notification of Entry Deletion . . . . . . . . . . . . . .  9
   3.  Implementation Notes . . . . . . . . . . . . . . . . . . . . . 10
     3.1   Generation of ItemIDs  . . . . . . . . . . . . . . . . . . 10
     3.2   Handling of Duplicate Entries  . . . . . . . . . . . . . . 10
     3.3   Notifications Matching Multiple Subscriptions  . . . . . . 10
   4.  Security Considerations  . . . . . . . . . . . . . . . . . . . 11
   5.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 12
     5.1   Normative References . . . . . . . . . . . . . . . . . . . 12
     5.2   Informative References . . . . . . . . . . . . . . . . . . 12
       Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . 12
       Intellectual Property and Copyright Statements . . . . . . . . 14






























Saint-Andre, et al.     Expires February 9, 2006                [Page 2]

Internet-Draft                 ATOM-PUBSUB                   August 2005


1.  Introduction

1.1  Overview

   The Atom Publishing Format and Protocol Working Group has developed
   two technologies relevant to content syndication:

   1.  A data format for syndication of information about periodically-
       updated resources (such as weblog entries and news stories)
       available on the World Wide Web.
   2.  A protocol for publishing, editing, deleting, and otherwise
       managing such resources.

   Content syndication follows a classic "observer" or "publish-
   subscribe" software design pattern: a person or application publishes
   information to a "channel", and an event notification (or the data
   itself) is broadcasted to all those who are interested in knowing
   when information is published or modified for that channel.  On the
   Internet today, publication of periodically-updated resources is
   handled by means of standard technologies such as [HTTP], and it is
   not envisioned that this will change since [ATOM-PROTOCOL] specifies
   the use of HTTP for publication.  However, existing methods for
   learning that a resource has been updated are currently limited to
   "polling" for changes via HTTP, which is inherently inefficient.
   What is needed is a technology that can be relied on to "push"
   information only when a resource undergoes a state change, and only
   to those who are interested in learning about such state changes.

   One possible technology for doing so is email, since [SMTP] provides
   a way to initiate the sending of information from "publishers" to
   "subscribers" (think, for example, of email lists such as those used
   to announce newly-published RFCs).  While email is one possible
   solution, it is not necessarily the best solution for Atom; in
   particular, [ATOM-FORMAT] defines an XML data format for content
   syndication, which implies that it might be beneficial to use a
   native XML delivery mechanism rather than to attach a special XML
   media type to email messages.  Thankfully, a specialized XML delivery
   protocol has been developed through the IETF: the Extensible
   Messaging and Presence Protocol (XMPP) as specified in [XMPP-CORE].
   XMPP has the added benefit of being optimized for near-real-time data
   delivery, which may be important in applications of Atom that require
   subscribers to be notified about syndicated content in a highly
   timely manner.

   While the semantics of a normal XMPP <message/> element may be
   suitable for Atom content notifications, there also exists an XMPP
   extension that provides more structured communications in the context
   of information "channels" or "nodes" of the kind that are used in



Saint-Andre, et al.     Expires February 9, 2006                [Page 3]

Internet-Draft                 ATOM-PUBSUB                   August 2005


   content syndication.  This extension is specified in [XMPP-PUBSUB]
   and may be especially useful for delivering notifications related to
   changes in Atom resources.  Therefore, this memo describes a method
   for notifying interested parties about changes in syndicated
   information encapsulated in the Atom feed format, where such
   notifications are delivered via the XMPP publish-subscribe extension.

1.2  Terminology

   This document inherits terminology from [ATOM-FORMAT], [ATOM-
   PROTOCOL], [XMPP-CORE], and [XMPP-PUBSUB].

   The capitalized key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
   "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "NOT
   RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
   interpreted as described in RFC 2119 [TERMS].

2.  Basic Process Flows

   The following process flows demonstrate how Atom-formatted data
   (specifically, feed entries) can be delivered using the XMPP pubsub
   extension.  The actors in these process flows are an application and
   one or more XMPP users.  The application acts as a translator between
   HTTP and XMPP, since it generates XMPP pubsub requests when certain
   events occur at an Atom-aware HTTP service (e.g., an HTTP POST to
   create a new dynamic resource).  The XMPP pubsub service then
   translates those pubsub requests into notifications that are sent to
   a potentially large number of XMPP users who have subscribed to such
   events (e.g., who have asked to receive an XMPP notification whenever
   a new dynamic resource is created for a certain Atom "channel").  Of
   course, an XMPP user is not necessarily a human, and could represent
   another application on the XMPP network (e.g., a chatroom, a bot, or
   a content management system).

   Note well that an HTTP user (e.g., a weblog author) would still
   publish information using the methods defined in [ATOM-PROTOCOL]; the
   process flows described herein enable the HTTP service with which an
   HTTP user interacts to generate notifications that are delivered via
   an XMPP pubsub service to a potentially large number of XMPP users
   who want to receive such information.

   We can visualize the architecture as follows:









Saint-Andre, et al.     Expires February 9, 2006                [Page 4]

Internet-Draft                 ATOM-PUBSUB                   August 2005


          +-----------+
          | HTTP User |
          +-----------+
               |
               | [Atom API]
               |
         +--------------+
         | HTTP Service |
         +--------------+
               |
               | [XMPP Pubsub]
               |
      +---------------------+
      | XMPP Pubsub Service |
      +---------------------+
               |
               | [XMPP Pubsub]
               |
          +-----------+
          | XMPP User |
          +-----------+


2.1  Notification of Entry Creation

   An implementation MUST support notifications related to creation of
   an entry.

   When a content author publishes a new dynamic resource, many entities
   may be interested in learning that the resource is now available.
   The process flow is as follows:

   o  Author publishes a new entry to the HTTP service via the Atom API.
   o  The HTTP service sends data for the new Atom entry in an XMPP
      pubsub "publish" request to a specific node at the XMPP pubsub
      service.  (Note: If the entry may be copied from one feed to
      another, e.g., in the generation of "synthetic" feeds, the entry
      SHOULD contain an atom:source element to ensure consistent
      metadata.)
   o  The XMPP pubsub service sends an XMPP message notification to each
      XMPP entity that is subscribed to the pubsub node.

   The result is that the XMPP subscribers will receive something close
   to real-time notification whenever a new feed entry has been
   published.

   Obviously the first step is out of scope for this memo, since it is
   described in [ATOM-PROTOCOL].  The XMPP protocols for the last two



Saint-Andre, et al.     Expires February 9, 2006                [Page 5]

Internet-Draft                 ATOM-PUBSUB                   August 2005


   steps are shown below.

   First the HTTP service sends an XMPP pubsub "publish" request to the
   XMPP pubsub service:

   <iq type='set'
       from='http-service.example.org'
       to='pubsub.example.org'
       id='publish1'>
     <pubsub xmlns='http://jabber.org/protocol/pubsub'>
       <publish node='http://example.org/feeds/atom-example.xml'>
         <item id='70b2a83be71dfca04df91133d953fb22b41b4267'>
           <entry xmlns='http://www.w3.org/2005/Atom'>
             <source>
               <title>Example Feed</title>
               <link href="http://example.org/"/>
               <updated>2003-12-13T18:30:02Z</updated>
               <author>
                 <name>John Doe</name>
               </author>
             </source>
             <title>Atom-Powered Robots Run Amuck</title>
             <link rel='alternate'
                   type='text/html'
                   href='http://example.org/2003/12/13/atom03'/>
             <id>tag:example.org,2003:entry-32397</id>
             <issued>2003-12-13T18:30:02Z</issued>
             <modified>2003-12-13T18:30:02Z</modified>
           </entry>
         </item>
       </publish>
     </pubsub>
   </iq>

   The XMPP pubsub service then sends a pubsub notification to each XMPP
   subscriber; depending on pubsub node configuration, the notification
   may or may not contain the Atom payload (we assume here that the
   payload will be delivered).













Saint-Andre, et al.     Expires February 9, 2006                [Page 6]

Internet-Draft                 ATOM-PUBSUB                   August 2005


   <message from='pubsub.example.org'
            to='alice@example.net'>
     <event xmlns='http://jabber.org/protocol/pubsub#event'>
       <items node='http://example.org/feeds/atom-example.xml'>
         <item id='70b2a83be71dfca04df91133d953fb22b41b4267'>
           <entry xmlns='http://www.w3.org/2005/Atom'>
             <source>
               <title>Example Feed</title>
               <link href="http://example.org/"/>
               <updated>2003-12-13T18:30:02Z</updated>
               <author>
                 <name>John Doe</name>
               </author>
             </source>
             <title>Atom-Powered Robots Run Amuck</title>
             <link rel='alternate'
                   type='text/html'
                   href='http://example.org/2003/12/13/atom03'/>
             <id>tag:example.org,2003:entry-32397</id>
             <issued>2003-12-13T18:30:02Z</issued>
             <modified>2003-12-13T18:30:02Z</modified>
           </entry>
         </item>
        </items>
     </event>
   </message>


2.2  Notification of Entry Modification

   An implementation SHOULD support notifications related to
   modification of an entry.

   When a content author updates an existing dynamic resource, many
   entities may be interested in learning that the resource has been
   modified.  The process flow is as follows:

   o  Author updates an existing entry at the HTTP service via the Atom
      API.
   o  The HTTP service sends data for the updated Atom entry in an XMPP
      pubsub "publish" request to a specific node at the XMPP pubsub
      service, specifying the same Item ID as previously supplied.
      (Note: If the entry may be copied from one feed to another, e.g.,
      in the generation of "synthetic" feeds, the entry SHOULD contain
      an atom:source element to ensure consistent metadata.)
   o  The XMPP pubsub service sends an XMPP message notification to each
      XMPP entity that is subscribed to the pubsub node.




Saint-Andre, et al.     Expires February 9, 2006                [Page 7]

Internet-Draft                 ATOM-PUBSUB                   August 2005


   First the HTTP service sends an XMPP pubsub "publish" request to the
   XMPP pubsub service (note the modified title and time):

   <iq type='set'
       from='http-service.example.org'
       to='pubsub.example.org'
       id='publish2'>
     <pubsub xmlns='http://jabber.org/protocol/pubsub'>
       <publish node='http://example.org/feeds/atom-example.xml'>
         <item id='70b2a83be71dfca04df91133d953fb22b41b4267'>
           <entry xmlns='http://www.w3.org/2005/Atom'>
             <source>
               <title>Example Feed</title>
               <link href="http://example.org/"/>
               <updated>2003-12-13T18:30:02Z</updated>
               <author>
                 <name>John Doe</name>
               </author>
             </source>
             <title>Atom-Powered Robots Run Amok</title>
             <link rel='alternate'
                   type='text/html'
                   href='http://example.org/2003/12/13/atom03'/>
             <id>tag:example.org,2003:entry-32397</id>
             <issued>2003-12-13T18:30:02Z</issued>
             <modified>2003-12-13T18:31:03Z</modified>
           </entry>
         </item>
       </publish>
     </pubsub>
   </iq>

   Subject to node configuration and/or subscription options, each XMPP
   subscriber would then receive a pubsub notification, which may or may
   not contain the Atom payload.
















Saint-Andre, et al.     Expires February 9, 2006                [Page 8]

Internet-Draft                 ATOM-PUBSUB                   August 2005


   <message from='pubsub.example.org'
            to='alice@example.net'>
     <event xmlns='http://jabber.org/protocol/pubsub#event'>
       <items node='http://example.org/feeds/atom-example.xml'>
         <item id='70b2a83be71dfca04df91133d953fb22b41b4267'>
           <entry xmlns='http://www.w3.org/2005/Atom'>
             <source>
               <title>Example Feed</title>
               <link href="http://example.org/"/>
               <updated>2003-12-13T18:30:02Z</updated>
               <author>
                 <name>John Doe</name>
               </author>
             </source>
             <title>Atom-Powered Robots Run Amok</title>
             <link rel='alternate'
                   type='text/html'
                   href='http://example.org/2003/12/13/atom03'/>
             <id>tag:example.org,2003:entry-32397</a>
             <issued>2003-12-13T18:30:02Z</issued>
             <modified>2003-12-13T18:31:03Z</modified>
           </entry>
         </item>
        </items>
     </event>
   </message>


2.3  Notification of Entry Deletion

   An implementation MAY support notifications related to deletion of an
   entry.

   If a content author deletes an existing dynamic resource, many
   entities may be interested in learning that the resource is no longer
   available.  The process flow is as follows:

   o  Author deletes an existing entry at the HTTP service via the Atom
      API.
   o  The HTTP service sends an XMPP pubsub "retract" request to a
      specific node at the XMPP pubsub service, specifying the same Item
      ID as previously supplied.
   o  The XMPP pubsub service sends an XMPP message notification to each
      XMPP entity that is subscribed to the pubsub node.

   First the HTTP service sends an XMPP pubsub "retract" request to the
   XMPP pubsub service:




Saint-Andre, et al.     Expires February 9, 2006                [Page 9]

Internet-Draft                 ATOM-PUBSUB                   August 2005


   <iq type='set'
       from='http-service.example.org'
       to='pubsub.example.org'
       id='delete1'>
     <pubsub xmlns='http://jabber.org/protocol/pubsub'>
       <retract node='http://example.org/feeds/atom-example.xml'>
         <item id='70b2a83be71dfca04df91133d953fb22b41b4267'/>
       </retract>
     </pubsub>
   </iq>

   Subject to node configuration and/or subscription options, each XMPP
   subscriber would then receive a pubsub notification that the item was
   deleted.

   <message from='pubsub.example.org'
            to='alice@example.net'>
     <event xmlns='http://jabber.org/protocol/pubsub#event'>
       <items node='http://example.org/feeds/atom-example.xml'>
         <retract id='70b2a83be71dfca04df91133d953fb22b41b4267'/>
        </items>
     </event>
   </message>


3.  Implementation Notes

3.1  Generation of ItemIDs

   The pubsub ItemIDs MUST conform to the rules defined in [XMPP-
   PUBSUB].  One possible method for generating a unique ItemID is to
   concatenate the XMPP address of the pubsub service, the pubsub node
   to which the item is published, and the atom:id of the feed entry,
   then hash the resulting string using the [SHA1] algorithm.

3.2  Handling of Duplicate Entries

   It is the responsibility of the receiving application to remove or
   ignore duplicate entries that might be received from multiple feeds.

3.3  Notifications Matching Multiple Subscriptions

   An XMPP entity may subscribe to a publish-subscribe node multiple
   times (e.g., once for each of several keywords), in which case a
   single notification may match one or more subscriptions.  In order to
   specify which of one or more subscriptions are matched, the
   notification message SHOULD specify the subscription IDs using the
   header syntax defined in [XMPP-SHIM] and the "pubsub#subid" header



Saint-Andre, et al.     Expires February 9, 2006               [Page 10]

Internet-Draft                 ATOM-PUBSUB                   August 2005


   defined in [XMPP-PUBSUB], as shown at the end of the following
   example.

   <message from='pubsub.example.org'
            to='alice@example.net'>
     <event xmlns='http://jabber.org/protocol/pubsub#event'>
       <items node='http://example.org/feeds/atom-example.xml'>
         <item id='70b2a83be71dfca04df91133d953fb22b41b4267'>
           <entry xmlns='http://www.w3.org/2005/Atom'>
             <source>
               <title>Example Feed</title>
               <link href="http://example.org/"/>
               <updated>2003-12-13T18:30:02Z</updated>
               <author>
                 <name>John Doe</name>
               </author>
             </source>
             <title>Atom-Powered Robots Run Amuck</title>
             <link rel='alternate'
                   type='text/html'
                   href='http://example.org/2003/12/13/atom03'/>
             <id>tag:example.org,2003:entry-32397</id>
             <issued>2003-12-13T18:30:02Z</issued>
             <modified>2003-12-13T18:30:02Z</modified>
           </entry>
         </item>
        </items>
     </event>
     <headers xmlns='http://jabber.org/protocol/shim'>
       <header name="pubsub#subid">123-abc</header>
       <header name="pubsub#subid">004-yyy</header>
     </headers>
   </message>


4.  Security Considerations

   Detailed security considerations for the relevant protocols profiled
   in this memo are given in [ATOM-FORMAT], [ATOM-PROTOCOL], [XMPP-
   CORE], and [XMPP-PUBSUB]; this memo introduces no new security
   concerns above and beyond those described in the foregoing
   specifications.

5.  References







Saint-Andre, et al.     Expires February 9, 2006               [Page 11]

Internet-Draft                 ATOM-PUBSUB                   August 2005


5.1  Normative References

   [ATOM-FORMAT]
              Sayre, R. and M. Nottingham, "The Atom Syndication
              Format", draft-ietf-atompub-format-10 (work in progress),
              July 2005.

   [ATOM-PROTOCOL]
              Sayre, R. and J. Gregorio, "The Atom Publishing Protocol",
              draft-ietf-atompub-protocol-04 (work in progress),
              May 2005.

   [TERMS]    Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [XMPP-CORE]
              Saint-Andre, P., "Extensible Messaging and Presence
              Protocol (XMPP): Core", RFC 3920, October 2004.

   [XMPP-PUBSUB]
              Millard, P., Saint-Andre, P., and R. Meijer, "Publish-
              Subscribe", JSF JEP 0060, March 2005.

5.2  Informative References

   [HTTP]     Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.

   [SHA1]     Eastlake, D. and P. Jones, "US Secure Hash Algorithm 1
              (SHA1)", RFC 3174, September 2001.

   [SMTP]     Klensin, J., "Simple Mail Transfer Protocol", RFC 2821,
              April 2001.

   [XMPP-SHIM]
              Saint-Andre, P. and J. Hildebrand, "Stanza Headers and
              Internet Metadata (SHIM)", JSF JEP 0131, October 2004.


Authors' Addresses

   Peter Saint-Andre
   Jabber Software Foundation

   Email: stpeter@jabber.org





Saint-Andre, et al.     Expires February 9, 2006               [Page 12]

Internet-Draft                 ATOM-PUBSUB                   August 2005


   Joe Hildebrand
   Jabber, Inc.

   Email: jhildebrand@jabber.com


   Bob Wyman
   PubSub.com

   Email: bob@wyman.us









































Saint-Andre, et al.     Expires February 9, 2006               [Page 13]

Internet-Draft                 ATOM-PUBSUB                   August 2005


Intellectual Property Statement

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.


Disclaimer of Validity

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Copyright Statement

   Copyright (C) The Internet Society (2005).  This document is subject
   to the rights, licenses and restrictions contained in BCP 78, and
   except as set forth therein, the authors retain all their rights.


Acknowledgment

   Funding for the RFC Editor function is currently provided by the
   Internet Society.




Saint-Andre, et al.     Expires February 9, 2006               [Page 14]

