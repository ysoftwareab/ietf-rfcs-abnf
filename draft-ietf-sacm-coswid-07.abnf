concise-software-identity = {
     global-attributes,
     tag-id,
     tag-version,
     ? corpus,
     ? patch,
     ? supplemental,
     swid-name,
     ? software-version,
     ? version-scheme,
     ? media,
     ? software-meta-entry,
     ? entity-entry,
     ? link-entry,
     ? ( payload-entry / evidence-entry ),
     ? any-element-entry,
tag-id = (0: text)
swid-name = (1: text)
entity-entry = (2: entity / [ 2* entity ])
evidence-entry = (3: evidence)
link-entry = (4: link / [ 2* link ])
software-meta-entry = (5: software-meta / [ 2* software-meta ])
payload-entry = (6: payload)
any-element-entry = (7: any-element-map / [ 2* any-element-map ])
corpus = (8: bool)
patch = (9: bool)
media = (10: text)
supplemental = (11: bool)
tag-version = (12: integer)
software-version = (13: text)
version-scheme = (14: text)

global-attributes = (
     ? lang,
     * any-attribute,
label = text / int

any-attribute = (
label => text / int / [ 2* text ] / [ 2* int ]
lang = (15: text)

any-element-map = {
     global-attributes,
     * label => any-element-map / [ 2* any-element-map ],
any-element-entry = (7: any-element-map / [ 2* any-element-map ])

entity = {
     global-attributes,
     entity-name,
     ? reg-id,
     role,
     ? thumbprint,
     extended-data,
any-uri = text

extended-data = (30: any-element-map / [ 2* any-element-map ])
entity-name = (31: text)
reg-id = (32: any-uri)
role = (33: text / [2* text])
thumbprint = (34: hash-entry)

link = {
     global-attributes,
     ? artifact,
     href,
     ? media
     ? ownership,
     rel,
     ? media-type,
     ? use,
artifact = (37: text)
href = (38: any-uri)
media = (10: any-uri)
ownership = (39: "shared" / "private" / "abandon")
rel = (40: text)
media-type = (41: text)
use = (42: "optional" / "required" / "recommended")

entId='b0c55172-38e9-4e36-be86-92206ad8eddb'] would match
software-meta = {
     global-attributes,
     ? activation-status,
     ? channel-type,
     ? colloquial-version,
     ? description,
     ? edition,
     ? entitlement-data-required,
     ? entitlement-key,
     ? generator,
     ? persistent-id,
     ? product,
     ? product-family,
     ? revision,
     ? summary,
     ? unspsc-code,
     ? unspsc-version,
activation-status = (43: text)
channel-type = (44: text)
colloquial-version = (45: text)
description = (46: text)
edition = (47: text)
entitlement-data-required = (48: bool)
entitlement-key = (49: text)
generator = (50: text)
persistent-id = (51: text)
product = (52: text)
product-family = (53: text)
revision = (54: text)
summary = (55: text)
unspsc-code = (56: text)
unspsc-version = (57: text)

hash-entry = (58: [ hash-alg-id: int, hash-value: bstr ] )

resource-collection = (
     ? directory-entry,
     ? file-entry,
     ? process-entry,
     ? resource-entry
directory = {
     filesystem-item,
     path-elements,
file = {
     filesystem-item,
     ? size,
     ? file-version,
     ? hash-entry,
process = {
     global-attributes,
     process-name,
     ? pid,
resource = {
     global-attributes,
     type,
filesystem-item = (
     global-attributes,
     ? key,
     ? location,
     fs-name,
     ? root,
directory-entry = (16: directory / [ 2* directory ])
file-entry = (17: file / [ 2* file ])
process-entry = (18: process / [ 2* process ])
resource-entry = (19: resource / [ 2* resource ])
size = (20: integer)
file-version = (21: text)
key = (22: bool)
location = (23: text)
fs-name = (24: text)
root = (25: text)
path-elements = (26: { * file-entry,
                          * directory-entry,
                        }
                   )
process-name = (27: text)
pid = (28: integer)
type = (29: text)

payload = {
     global-attributes,
     resource-collection,
     * $$payload-extension
evidence = {
     global-attributes,
     resource-collection,
     ? date,
     ? device-id,
     * $$evidence-extension
date = (35: time)
device-id = (36: text)

concise-software-identity = {
  global-attributes,
  tag-id,
  tag-version,
  ? corpus,
  ? patch,
  ? supplemental,
  swid-name,
  ? software-version,
  ? version-scheme,
  ? media,
  ? software-meta-entry,
  entity-entry,
  ? link-entry,
  ? ( payload-entry // evidence-entry ),
  * $$coswid-extension
any-uri = text
label = text / int

any-attribute = (
label => text / int / [ 2* text ] / [ 2* int ]
global-attributes = (
  ? lang,
  * any-attribute,
resource-collection = (
  ? directory-entry,
  ? file-entry,
  ? process-entry,
  ? resource-entry
file = {
  filesystem-item,
  ? size,
  ? file-version,
  ? hash-entry,
filesystem-item = (
  global-attributes,
  ? key,
  ? location,
  fs-name,
  ? root,
directory = {
  filesystem-item,
  path-elements,
process = {
  global-attributes,
  process-name,
  ? pid,
resource = {
  global-attributes,
  type,
entity = {
  global-attributes,
  entity-name,
  ? reg-id,
  role,
  ? thumbprint,
  * $$entity-extension,
evidence = {
  global-attributes,
  resource-collection,
  ? date,
  ? device-id,
  * $$evidence-extension
link = {
  global-attributes,
  ? artifact,
  href,
  ? media
  ? ownership,
  rel,
  ? media-type,
  ? use,
software-meta = {
  global-attributes,
  ? activation-status,
  ? channel-type,
  ? colloquial-version,
  ? description,
  ? edition,
  ? entitlement-data-required,
  ? entitlement-key,
  ? generator,
  ? persistent-id,
  ? product,
  ? product-family,
  ? revision,
  ? summary,
  ? unspsc-code,
  ? unspsc-version,
payload = {
  global-attributes,
  resource-collection,
  * $$payload-extension
tag-id = (0: text)
swid-name = (1: text)
entity-entry = (2: entity / [ 2* entity ])
evidence-entry = (3: evidence)
link-entry = (4: link / [ 2* link ])
software-meta-entry = (5: software-meta / [ 2* software-meta ])
payload-entry = (6: payload)
corpus = (8: bool)
patch = (9: bool)
media = (10: [ + [ media-expression,
                     ? [ media-operation,
                         media-expression,
                       ]
                 ]
             ])
media-operation = text
media-expression = media-environment / [ media-prefix,
                                         media-environment,
                                         media-attribute,
                                         media-value,
                                       ]
media-prefix = text
media-environment = text
media-attribute = text
media-value = text
supplemental = (11: bool)
tag-version = (12: integer)
software-version = (13: text)
version-scheme = (14: version-schemes  / extended-value)
version-schemes = multipartnumeric / multipartnumeric-suffix / alphanumeric / decimal / semver
multipartnumeric = 1
multipartnumeric-suffix = 2
alphanumeric = 3
decimal = 4
semver = 16384
lang = (15: text)
directory-entry = (16: directory / [ 2* directory ])
file-entry = (17: file / [ 2* file ])
process-entry = (18: process / [ 2* process ])
resource-entry = (19: resource / [ 2* resource ])
size = (20: integer)
file-version = (21: text)
key = (22: bool)
location = (23: text)
fs-name = (24: text)
root = (25: text)
path-elements = (26: { * file-entry,
                       * directory-entry,
                     }
                )
process-name = (27: text)
pid = (28: integer)
type = (29: text)
entity-name = (31: text)
reg-id = (32: any-uri)
role = (33: roles / extended-value / [ 2* roles / extended-value ] )
extended-value = text / uint
roles= aggregator / distributor / licensor / software-creator / tag-creator
aggregator=0
distributor=1
licensor=2
software-creator=3
tag-creator=4
thumbprint = (34: [ hash-alg-id: int,
                    hash-value: bstr,
                  ]
             )
date = (35: time)
device-id = (36: text)
artifact = (37: text)
href = (38: any-uri)
ownership = (39: shared / private / abandon / extended-value )
shared=0
private=1
abandon=2
rel = (40: rels / extended-value )
rels = ancestor / component / feature / installationmedia / packageinstaller / parent / patches / requires / see-also / supersedes / rel-supplemental
ancestor=0
component=1
feature=2
installationmedia=3
packageinstaller=4
parent=5
patches=6
requires=7
see-also=8
supersedes=9
rel-supplemental=10
media-type = (41: text)
use = (42: optional / required / recommended / extended-value )
optional=0
required=1
recommended=2
activation-status = (43: text)
channel-type = (44: text)
colloquial-version = (45: text)
description = (46: text)
edition = (47: text)
entitlement-data-required = (48: bool)
entitlement-key = (49: text)
generator = (50: text)
persistent-id = (51: text)
product = (52: text)
product-family = (53: text)
revision = (54: text)
summary = (55: text)
unspsc-code = (56: text)
unspsc-version = (57: text)
hash-entry = (58: [ hash-alg-id: int,
                    hash-value: bstr,
                  ]
             )
suit-manifest = {
  suit.manifest-version,
  suit.digest-info,
  suit.text-reference,
  suit.nonce,
  suit.sequence-number,
  ? suit.pre-condition,
  ? suit.post-condition,
  ? suit.directives,
  ? suit.resources,
  ? suit.processors,
  ? suit.targets,
  ? suit.extensions,
signed-coswid = #6.997(COSE-Sign1-coswid) ; see TBS7 in current COSE I-D

label = int / tstr  ; see COSE I-D 1.4.
values = any        ; see COSE I-D 1.4.

unprotected-signed-coswid-header = {
    1 => int,                   ; algorithm identifier
    3 => "application/coswid",  ; request for CoAP IANA registry to become an int
    * label => values,
protected-signed-coswid-header = {
    4 => bstr,                  ; key identifier
    * label => values,
COSE-Sign1-coswid = [
    protected: bstr .cbor protected-signed-coswid-header,
    unprotected: unprotected-signed-coswid-header,
    payload: bstr .cbor concise-software-identity,
    signature: bstr,
