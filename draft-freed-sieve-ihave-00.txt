


Network Working Group                                           N. Freed
Internet-Draft                                          Sun Microsystems
Expires: September 20, 2007                               March 19, 2007


                Sieve Email Filtering:  Ihave Extension
                       draft-freed-sieve-ihave-00

Status of this Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on September 20, 2007.

Copyright Notice

   Copyright (C) The IETF Trust (2007).

Abstract

   This document describes the "ihave" extension to the Sieve email
   filtering language.  The "ihave" extension provides a means to write
   scripts that can take advantage of optional Sieve features but can
   still run when those optional features are not available.

Change History (to be removed prior to publication as an RFC

   Changed the comparator used in the ihave test from "i;ascii-casemap"
   to "i;octet".



Freed                  Expires September 20, 2007               [Page 1]

Internet-Draft            Sieve Ihave Extension               March 2007


   Updated the IANA registration template

   Simplified the semantics of ihave to be independent of block
   structure.

   Moved the environment extension to a separate document so the
   standards status of the two extensions can be different.


1.  Introduction

   Sieve [I-D.ietf-sieve-3028bis] is a language for filtering email
   messages at or around the time of final delivery.  It is designed to
   be implementable on either a mail client or mail server.  It is
   suitable for running on a mail server where users may not be allowed
   to execute arbitrary programs, such as on black box Internet Message
   Access Protocol [RFC3501] servers, as it has no user-controlled loops
   or the ability to run external programs.

   A large number of sieve extensions have already been defined and more
   are sure to be created over time.  Sieve's require clause is used to
   specify the extensions a particular sieve needs; an error results if
   the script's require clause calls for an extension that isn't
   available.  This mechanism is sufficient in most situations.
   However, there can be cases where a script may be able to take
   advantage of an extension if it is available but can still function
   if it is not, possibly with some degradation of capabilities.

   The "ihave" extension provides a means to write scripts that make use
   of other extensions only when they are actually available.  Ihave
   defines a new ihave test that takes a list of capability names as an
   argument and succeeds if all of the those capabilities are present.
   Additionally, specification of the "ihave" extension in the require
   clause disables parse-time checking of extension use in scripts; run-
   time checking must be used instead.


2.  Conventions used in this document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

   The terms used to describe the various components of the Sieve
   language are taken from [I-D.ietf-sieve-3028bis] section 1.1.






Freed                  Expires September 20, 2007               [Page 2]

Internet-Draft            Sieve Ihave Extension               March 2007


3.  Capability Identifiers

   The capability string associated with the extension defined in this
   document is "ihave".


4.  Ihave Test

   Usage:   ihave <capabilities: string-list>

   The ihave test provides a means for Sieve scripts to test for the
   existence of a given extension prior to actually using it.  The
   capabilities argument to ihave is the same as the similarly-named
   argument to the require control statement: It specifies the names of
   one or more Sieve extensions or comparators.

   Unlike most Sieve tests, ihave accepts no match or comparator
   arguments.  The type of match for ihave is always ":is" and the
   comparator is always "i;octet".

   The strings in the capabilities list are constant strings in context
   of Sieve variables [I-D.ietf-sieve-variables].  It is an error to
   pass a non-constant string as an argument to ihave.

   The Sieve base specification demands that that all Sieve extensions
   used in a given script be specified in the initial require control
   statement.  It is an error for a script to call for extensions the
   interpreter doesn't support or to attempt to use extensions that have
   not been listed in the script's require clause.  Use of ihave changes
   Sieve interpreter behavior and the underlying requirements in the
   following ways:

   1.  Use of a given extension is allowed subsequent to the successful
       evaluation of an ihave test on that extension.  The extension
       then operates just as if it had been specified in the script's
       require clause.  The extension cannot be used prior to the
       evaluation of such a test and a runtime error MUST be generated
       if such usage is attempted.

   2.  Sieve interpreters normally have the option of checking extension
       use at either parse time or execution time.  The specification of
       "ihave" in a script's require clause changes this behavior:
       Scripts MUST either defer extension checking to run time or else
       take the presence of ihave tests into account at parse time.
       Note that since ihave can be used inside of anyof, allof, and not
       tests full parse time checking of ihave may be very difficult to
       implement.




Freed                  Expires September 20, 2007               [Page 3]

Internet-Draft            Sieve Ihave Extension               March 2007


   3.  Although it makes little sense to do so, an extension can be
       specified in both the require control statement and in an ihave
       test.  If this is done and the extension has been implemetned the
       extension can be used anywhere in the script and ihave test of
       that extension will always return true.

   4.  Using ihave to set a variable to a particular value and then
       testing that variable in another block is not permitted as it
       unduly complicates parse time analysis of scripts.

   Ihave is designed to be used with extensions that add tests, actions,
   or comparators.  It MUST NOT be used with extensions that change how
   the content of Sieve scripts are interpreted such as the variables
   extension [I-D.ietf-sieve-variables]


5.  Security Considerations

   The ihave extension is essentially a more flexible variant of Sieve's
   existing require mechanism.  As such, it has no real effect on the
   security considerations associated with the use of Sieve.  Of course
   all of the security considerations given in the base Sieve
   specification are still relevant.


6.  IANA Considerations

   The following template specifies the IANA registration of the Sieve
   extension specified in this document:

      To: iana@iana.org
      Subject: Registration of new Sieve extension

      Capability name: ihave
      Description:     The "ihave" extension provides a means to write
                       scripts that make use of other extensions only
                       when they are actually available.
      RFC number:      RFC XXXX
      Contact address: Ned Freed <ned.freed@mrochek.com>

      This information should be added to the list of sieve extensions
      given on http://www.iana.org/assignments/sieve-extensions.


7.  References






Freed                  Expires September 20, 2007               [Page 4]

Internet-Draft            Sieve Ihave Extension               March 2007


7.1.  Normative references

   [I-D.ietf-sieve-3028bis]
              Guenther, P. and T. Showalter, "Sieve: An Email Filtering
              Language", draft-ietf-sieve-3028bis-12 (work in progress),
              February 2007, <http://www.ietf.org/internet-drafts/
              draft-ietf-sieve-3028bis-12.txt>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

7.2.  Informative references

   [I-D.ietf-sieve-variables]
              Homme, K., "Sieve Mail Filtering Language: Variables
              Extension", draft-ietf-sieve-variables-08 (work in
              progress), December 2005, <http://www.ietf.org/
              internet-drafts/draft-ietf-sieve-variables-08.txt>.

   [RFC3501]  Crispin, M., "INTERNET MESSAGE ACCESS PROTOCOL - VERSION
              4rev1", RFC 3501, March 2003.


Author's Address

   Ned Freed
   Sun Microsystems
   3401 Centrelake Drive, Suite 410
   Ontario, CA  92761-1205
   USA

   Phone: +1 909 457 4293
   Email: ned.freed@mrochek.com


















Freed                  Expires September 20, 2007               [Page 5]

Internet-Draft            Sieve Ihave Extension               March 2007


Full Copyright Statement

   Copyright (C) The IETF Trust (2007).

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND
   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.


Acknowledgment

   Funding for the RFC Editor function is provided by the IETF
   Administrative Support Activity (IASA).





Freed                  Expires September 20, 2007               [Page 6]

