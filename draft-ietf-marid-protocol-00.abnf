record = version *( 1*SP ( directive / modifier ) ) *SP

v=spf1 +mx +a:colo.example.com/28 -all

v=spf1 +mx +a:colo.example.com/28 -all

version = "v=spf1"

record      = version *( 1*SP ( directive / modifier ) ) *SP

version     = "v=spf1"

directive   = [ prefix ] mechanism
prefix      = "+" / "-" / "?" / "~"
mechanism   = name [ ":" macro-string ] *[ "/" *DIGIT ]
modifier    = name "=" macro-string
name        = alpha *( alpha / digit / "-" / "_" / "." )

v=spf1 +mx -all
v=spf1 +mx redirect=_spf.example.com

all = "all"

v=spf1 +mx +a -all

include = "include" ":" domain-spec
Pass      => match,           return based on prefix of "include"
Fail      => no match,        continue processing
SoftFail  => no match,        continue processing
Neutral   => no match,        continue processing
TempError => throw TempError, abort processing, return TempError
PermError => throw PermError, abort processing, return PermError
None      => throw PermError, abort processing, return PermError

A = "a" [ ":" domain-spec ] [ dual-cidr-length ]

MX = "mx" [ ":" domain-spec ] [ dual-cidr-length ]

PTR = "ptr" [ ":" domain-spec ]

IP4             = "ip4" ":" ip4-network [ ip4-cidr-length ]
IP6             = "ip6" ":" ip6-network [ ip6-cidr-length ]
ip4-cidr-length = "/" 1*DIGIT
ip6-cidr-length = "/" 1*DIGIT

ip4-network     = as per conventional dotted quad notation,
                        e.g. 192.0.2.0
ip6-network     = as per [RFC 3513], section 2.2,
                        e.g. 12AB:0:0::CD30

exists = "exists" ":" domain-spec

v=spf1 exists:%{ir}.%{l1r+-}._spf.%{d} -all

redirect = "redirect" "=" domain-spec

explanation = "exp" "=" domain-spec

v=spf1 mx -all exp=explain._spf.%{d}

v=spf1 a mx ptr foo:_foo.%{d} -all

macro-string = *( macro-char / VCHAR )
macro-char   = ( "%{" ALPHA transformer *delimiter "}" )
                    / "%%" / "%_" / "%-"
transformer  = [ *DIGIT ] [ "r" ]
delimiter    = "." / "-" / "+" / "," / "/" / "_" / "="

s = <sender>
l = local-part of <sender>
o = domain of <sender>
d = <domain>
i = <ip>
v = the string "in-addr" for if <ip> is ipv4,
          or "ip6" if <ip> is ipv6

c = SMTP client IP (in easily readable format)
r = domain name of host performing the check
t = current timestamp in UTC epoch seconds notation

record      = version *( 1*SP ( directive / modifier ) ) *SP

version     = "v=spf1"

directive   = [ prefix ] mechanism    
prefix      = "+" / "-" / "?" / "~"
mechanism   = ( all / include
                   / A / MX / PTR / IP4 / IP6 / exists
                   / unknown-mechanism )

all          = "all"
include      = "include"  ":" domain-spec
A            = "a"      [ ":" domain-spec ] [ dual-cidr-length ]
MX           = "mx"     [ ":" domain-spec ] [ dual-cidr-length ]
PTR          = "ptr"    [ ":" domain-spec ]
IP4          = "ip4"      ":" ip4-network   [ ip4-cidr-length ]
IP6          = "ip6"      ":" ip6-network   [ ip6-cidr-length ]
exists       = "exists"   ":" domain-spec

unknown-mechanism = name [ ":" macro-string ] *[ "/" *DIGIT ]

modifier    = redirect / explanation / unknown-modifier
redirect    = "redirect" "=" domain-spec
explanation = "exp" "=" domain-spec
unknown-modifier = name "=" macro-string

domain-spec  = domain-name / macro-string
domain-name  = domain-part *( "." domain-part ) [ "." ]
domain-part  = as defined in [RFC 1034]

ip4-network  = as per conventional dotted quad notation,
                   e.g. 192.0.2.0
ip6-network  = as per [RFC 3513], section 2.2,
                   e.g. 12AB:0:0::CD30

dual-cidr-length = [ ip4-cidr-length ] [ "/" ip6-cidr-length ]
ip4-cidr-length  = "/" 1*DIGIT
ip6-cidr-length  = "/" 1*DIGIT

macro-string = *( macro-char / VCHAR )
macro-char   = ( "%{" ALPHA transformer *delimiter "}" )
                   / "%%" / "%_" / "%-"
transformer  = [ *DIGIT ] [ "r" ]

name        = ALPHA *( ALPHA / DIGIT / "-" / "_" / "." )
delimiter   = "." / "-" / "+" / "," / "/" / "_" / "="

v=spf1 +all
        -- any <ip> passes

v=spf1 a -all
        -- hosts 192.0.2.10 and 192.0.2.11 pass

v=spf1 a:example.org -all
        -- no sending hosts pass since example.org has no A records

v=spf1 mx -all
        -- sending hosts 192.0.2.129 and 192.0.2.130 pass

v=spf1 mx:example.org -all
        -- sending host 192.0.2.140 passes

v=spf1 mx mx:example.org -all
        -- sending hosts 192.0.2.129, 192.0.2.130,
           and 192.0.2.140 pass

v=spf1 mx/8 mx:example.org/8 -all
        -- any sending host in 192.0.2.128/24 or 192.168.2.136/8 passes

v=spf1 ptr -all
        -- sending host 192.0.2.65 passes
                (reverse IP is valid and in example.com)
        -- sending host 192.0.2.140 fails
                (reverse IP is valid, but not in example.com)
        -- sending host 10.0.0.4 fails
                (reverse IP is not valid)

v=spf1 ip4:192.0.2.128/28 -all
        -- sending host 192.0.2.65 fails
        -- sending host 192.0.2.129 passes
