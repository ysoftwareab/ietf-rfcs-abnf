lik = the link connecting node i to neighbor k
SEQ=0, ACK=100                   Receive ACK
SEQ=201, ACK=101                 Process ACK
                                 Delete packet from A's retransmit
SEQ=0, ACK=100                   Receive ACK
SEQ=101, ACK=0
SEQ=101, ACK=0
SEQ=0, ACK=101                   Receive ACK
SEQ=100, ACK=0
SEQ=0, ACK=100                    Receive ACK
SEQ=0, ACK=100                    Receive ACK
SEQ=0, ACK=100                    Receive ACK
SEQ=101, ACK=0
SEQ=511, ACK=101                  A sends ACK (unicast to B)
SEQ=200, ACK=101                  A sends ACK (unicast to C)
SEQ=11, ACK=101                   A sends ACK (unicast to D)
SEQ=100, ACK=0
SEQ=0, ACK=100                  Add packet to D's retransmit list

SEQ=0, ACK=100                  Delete packet from C's retransmit list

SEQ=0, ACK=100                  Delete packet from D's retransmit list
                                <----------------
                                A sends HELLO (multicast)
SEQ=0, ACK=0, SEQ_TLV listing B

SEQ=101, ACK=0, CR-Flag=1
SEQ=0, ACK=100                  Add packet to D's retransmit list

SEQ=0, ACK=101
SEQ=0, ACK=101
                                <----------------
                                A resends UPDATE (unicast to B)
SEQ=100, ACK=0
SEQ=0, ACK=100
                                <----------------
                                A resends UPDATE (unicast to B)
SEQ=101, ACK=0

SEQ=0, ACK=101

         Figure 8: Reliable Transfer on Multi-Access Links
                      with Conditional Receive

   Initially, Router A sends a multicast addressed UPDATE packet on the
   LAN.  B and C receive it and send acknowledgments.  Router B receives
   the UPDATE, but the acknowledgment sent is lost on the network.
   Before the retransmission timer for Router B's packet expires, there
   is an event that causes a new multicast addressed UPDATE to be sent.

   Router A detects that there is at least one neighbor on the interface
   with a full queue.  Therefore, it MUST signal that neighbor not to
   receive the next packet or it would receive the retransmitted packet
   out of order.  If all neighbors on the interface have a full queue,
   then EIGRP should reschedule the transmission of the UPDATE once the
   queues are no longer full.

   Router A builds a HELLO packet with a SEQUENCE_TYPE TLV indicating
   all the neighbors that have full queues.  In this case, the only
   neighbor address in the list is Router B.  The HELLO packet is sent
   via multicast unreliably out the interface.

   Routers C and D process the SEQUENCE_TYPE TLV by looking for their
   own addresses in the list.  If not found, they put themselves in CR-
   Mode.

   Router B does not find its address in the SEQUENCE TLV peer list, so
   it enters CR-Mode.  Packets received by Router B with the CR-Flag
   MUST be discarded and not acknowledged.
   Later, Router A will unicast transmit both packets 100 and 101
   directly to Router B.  Router B already has 100, so it discards and
   acknowledges it.

   Router B then accepts and acknowledges packet 101.  Once an
   acknowledgment is received, Router A can remove both packets from
   Router B's transmission list.

SEQ=0, ACK=0                 HELLO (multicast)
SEQ=0, ACK=0

SEQ=10, ACK=0, INIT
SEQ=100, ACK=10, INIT       <----------------     (5)
                                         UPDATE (unicast)
SEQ=11, ACK=100
SEQ=0, ACK=11
                                         (5 seconds later)
                                         <----------------     (7)
SEQ=0, ACK=11

                    Figure 9: Initialization Sequence

K1 == K3 == 1
K2 == K4 == K5 == 0
K6 == 0

metric = 256 * ({(K1*BW) + [(K2*BW)/(256-LOAD)] + (K3*DELAY)} *
            (K5/(REL+K4)))

metric = 256 * { [(10^7)/ BWmin] + [sum of delays]}

Max-Throughput = K1 *     ------------------------------------
                                       Interface Bandwidth (kbps)
Net-Throughput = Max-Throughput + ---------------------
                                              256 - Load

Latency = K3 *   --------------------------
                             EIGRP_DELAY_PICO

metric =[(K1*Net-Throughput) + Latency)+(K6*ExtAttr)] * ------
                                                              K4+Rel

metric = (K1 * min(Throughput)) + (K3 * sum(Latency)) }

