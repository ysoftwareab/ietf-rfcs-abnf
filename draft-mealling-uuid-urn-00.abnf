UUID                   = <time_low> "-" <time_mid> "-"
                              <time_high_and_version> "-"
                              <clock_seq_and_reserved>
                              <clock_seq_low> "-" <node>
time_low               = 4*<hexOctet>
time_mid               = 2*<hexOctet>
time_high_and_version  = 2*<hexOctet>
clock_seq_and_reserved = <hexOctet>
clock_seq_low          = <hexOctet>
node                   = 6*<hexOctet
hexOctet               = <hexDigit> <hexDigit>
hexDigit =
           "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
           | "a" | "b" | "c" | "d" | "e" | "f"
           | "A" | "B" | "C" | "D" | "E" | "F"


      The following is an example of the string representation of a UUID
      as a URN:

          urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6
f = read_state(&clockseq, &last_time, &last_node);

clockseq = true_random();
fd = fopen("state", "rb");
inited = 1;
next_save = timestamp;
inited = 1;
fd = fopen("state", "wb");
next_save = timestamp + (10 * 10 * 1000 * 1000);
uuids_this_tick = UUIDS_PER_TICK;
inited = 1;
uuids_this_tick = 0;
time_now = time_now/UUIDS_PER_TICK;
inited = 1;
net_nsid = nsid;
fd = fopen("nodeid", "rb");
fd = fopen("nodeid", "wb");
inited = 1;
f = uuid_compare(&u, &u);
f = uuid_compare(&u, &NameSpace_DNS);
f = uuid_compare(&NameSpace_DNS, &u);
