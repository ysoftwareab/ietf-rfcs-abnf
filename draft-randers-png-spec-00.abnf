max = green), then blue (zero = black, max = blue).  The bit
sample = light_out ^ gamma

sample = integer_sample / (2^bitdepth - 1)

output = ROUND(input * MAXOUTSAMPLE / MAXINSAMPLE)

sample = intensity ^ encoding_exponent
integer_sample = ROUND(sample * (2^bitdepth - 1))

gamma = encoding_exponent / end_to_end_exponent

gamma = 1 / display_exponent

output = ROUND(input * MAXOUTSAMPLE / MAXINSAMPLE)

MAXINSAMPLE = (2^sampledepth)-1
MAXOUTSAMPLE = (2^desired_sampledepth)-1

sample = integer_sample / (2^bitdepth - 1.0)
display_output = sample ^ (1.0 / gamma)
display_input = inverse_display_transfer(display_output)
framebuf_sample = ROUND(display_input * MAX_FRAMEBUF_SAMPLE)

display_input = sample ^ (1.0 / (gamma * display_exponent))
gamma = gamma_from_file / user_exponent
decoding_exponent = 1.0 / (gamma * display_exponent)
               = user_exponent / (gamma_from_file * display_exponent)

output = alpha * foreground + (1-alpha) * background

gamout = pow(comppix, outfile_gamma);
gcvideo = (float) fbpix[i] / fb_maxsample;
linbg = pow(gcvideo, display_exponent);

output = input ^ gamma

output = input ^ exponent

display_exponent = LUT_exponent * CRT_exponent

gamma = 1.0 / (decoding_exponent * display_exponent)

decoding_exponent = 1.0 / (gamma * display_exponent)

display_exponent = (g/2.61) * 2.2

display_exponent = 2.2 / g

x = X / (X + Y + Z)
y = Y / (X + Y + Z)

R=G=B=maximum.

M =  Yr Yg Yb
              Zr Zg Zb

Y = M G
G = invM Y
c = (unsigned long) n;
c = 0xedb88320L ^ (c >> 1);
c = c >> 1;
crc_table_computed = 1;
c = crc_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);
