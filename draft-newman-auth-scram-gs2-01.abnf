d=qop=none
d=qop=none,cbqop=none,c=<<base64>>
attr-val        = ALPHA "=" value
value           = *(value-char)

value-safe-char = %02-2B / %2D-3C / %3E-7F /
                        UTF8-2 / UTF-3 / UTF8-4
                        ;; UTF8-char except NUL, %x01 (CTRL+A), "=",
                        ;; and ",".

value-char      = value-safe-char / "="

base64-char     = ALPHA / DIGIT / "/" / "+"

base64-4        = 4*4(base64-char)

base64-3        = 3*3(base64-char) "="

base64-2        = 2*2(base64-char) "=="

base64          = *(base64-4) [base64-3 / base64-2]

posit-number = (%x31-39) *DIGIT
                        ;; A positive number

saslname        = 1*(value-safe-char / "=01" / "=2C" / "=3D")
                        ;; Conforms to <value>

authzid         = "a=" saslname
                        ;; Protocol specific.

username        = "n=" saslname
                        ;; Usernames are prepared using SASLPrep.

reserved-mext  = "m=" 1*(value-char)
                        ;; Reserved for signalling mandatory extensions.
                        ;; The exact syntax will be defined in
                        ;; the future.

channel-binding = "c=" base64

proof           = "p=" base64

nonce           = "r=" c-nonce [s-nonce]
                        ;; Second part provided by server.

c-nonce         = value

s-nonce         = value

salt            = "s=" base64
verifier        = "v=" base64
                        ;; base-64 encoded ServerSignature.

iteration-count = "i=" posit-number

delim = %x01

client-first-message =
                        scram-client-first-message delim

server-first-message =
                        scram-server-first-message delim

client-final-message =
                        scram-client-final-message-without-proof ","
                        proof delim
                        gss-mic client-gss-wrap
                        ;; <<GS2 extensions omitted after "gss-mic">>

server-final-message =
                        scram-server-final-message delim
                        gss-mic server-gss-wrap
                        ;; <<GS2 extensions omitted after "gss-mic">>

gss-mic = "mic=" base64 ","
                        ;; base-64 encoding of ClientMic
                        ;; for the client and ServerMic
                        ;; for the server

client-gss-wrap = "d=" client-gs2-to-be-protected
                        ;; A particular case of <gss-wrap>

client-gs2-to-be-protected = "qop=none" [",cbqop=none," channel-
                        binding]
                        ["," authzid]
                        ;; A particular case of <gs2-to-be-protected>

server-gss-wrap = "d=" server-gs2-to-be-protected
                        ;; A particular case of <gss-wrap>

server-gs2-to-be-protected = "qop=none" [ "+cbgood" ]
                        ;; A particular case of <gs2-to-be-protected>
                        ;; Note that "+cbgood" is included if
                        ;; channel binding verification succeeded.



gss-wrap = "d=" gs2-to-be-protected
gs2-to-be-protected = qop ["," maxbuf]
                        ["," cbqop "," channel-binding] ["," authzid]
                        ;; <<GS2- specific extensions -
                        ;; "["," extensions]"
                        ;; omitted at the end>>

qop = "qop=" qopvalue *( "+" qopvalue)

qopvalue = "none" ; no security layer
                            / "integ" ; integrity protection
                            / "conf" ; confidentiality protection
                            / "cbgood" ; channel binding validated
                                       ; (server to client)

maxbuf = "maxbuf=" posit-number

cbqop = "cbqop=" qopvalue *( "+" qopvalue)
                        ;; QOPs that can be used if channel binding
                        ;; succeeds




scram-client-first-message =
                        [reserved-mext ","] username "," nonce
                        ["," extensions]

scram-server-first-message =
                        [reserved-mext ","] nonce "," salt ","
                        iteration-count ["," extensions]

scram-client-final-message-without-proof =
                        nonce ["," extensions]
                        ;; <<Note, we used to have GSS-API
                        ;; channel-binding here, but the GS2
                        ;; spec says it MUST be NULL>>

scram-server-final-message =
                        verifier ["," extensions]

extensions = attr-val *("," attr-val)
                        ;; All extensions are optional,
                        ;; i.e. unrecognized attributes
                        ;; not defined in this document
                        ;; MUST be ignored.
