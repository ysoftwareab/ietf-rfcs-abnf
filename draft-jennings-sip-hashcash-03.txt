


SIP                                                          C. Jennings
Internet-Draft                                             Cisco Systems
Expires: April 26, 2006                                 October 23, 2005


            Computational Puzzles for SPAM Reduction in SIP
                     draft-jennings-sip-hashcash-03

Status of this Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on April 26, 2006.

Copyright Notice

   Copyright (C) The Internet Society (2005).

Abstract

   One of the techniques used in SPAM prevention and various solutions
   for denial of service attacks is to force the SIP client requesting a
   service to perform a calculation that limits the rate and increases
   the cost of the request.  This draft defines a way to allow a UAS to
   ask the UAC to compute a computationally expensive hash based
   function and present the result to the UAS.  Although the computation
   is expensive for the UAC to compute, it is cheap for the UAS to
   verify.  The solution also allows for proxies to compute and check
   the puzzle on behalf of the UAC or UAS.



Jennings                 Expires April 26, 2006                 [Page 1]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . . .  5
   3.  Definitions  . . . . . . . . . . . . . . . . . . . . . . . . .  6
   4.  Puzzles  . . . . . . . . . . . . . . . . . . . . . . . . . . .  6
   5.  Semantics  . . . . . . . . . . . . . . . . . . . . . . . . . .  7
     5.1.  UAS Creating Puzzle  . . . . . . . . . . . . . . . . . . .  7
     5.2.  UAC Receiving Puzzle . . . . . . . . . . . . . . . . . . .  7
     5.3.  Proxy Behavior . . . . . . . . . . . . . . . . . . . . . .  8
   6.  Example  . . . . . . . . . . . . . . . . . . . . . . . . . . .  8
   7.  Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
   8.  Open Issues and To Do Items  . . . . . . . . . . . . . . . . . 13
   9.  Security Considerations  . . . . . . . . . . . . . . . . . . . 14
   10. IANA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
     10.1. Puzzle Header  . . . . . . . . . . . . . . . . . . . . . . 14
     10.2. 419 Response . . . . . . . . . . . . . . . . . . . . . . . 14
   11. Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 15
   12. Appendix A: Test Vectors . . . . . . . . . . . . . . . . . . . 15
   13. References . . . . . . . . . . . . . . . . . . . . . . . . . . 28
     13.1. Normative References . . . . . . . . . . . . . . . . . . . 28
     13.2. Informational References . . . . . . . . . . . . . . . . . 28
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 29
   Intellectual Property and Copyright Statements . . . . . . . . . . 30



























Jennings                 Expires April 26, 2006                 [Page 2]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


1.  Introduction

   The SPAM prevention problem is complex and will require many
   techniques working in combination to balance reducing SPAM to
   acceptable levels while still fostering efficient communication.  The
   overall problem and various approaches are in [7].  Clearly white
   lists are a critical part of dealing with SPAM.  Any system would
   first check whether an incoming request for communications was from
   someone on the white list.  The Identity [6] mechanisms are critical
   for understanding who the caller is and to check whether the caller
   is on the white list.  As well, there still needs to be a way for
   callers not on the white list to communicate with the user.  It is
   here that this specification becomes relevant.

   The problem is how to permit contacts from people with no previous
   relationship to us without receiving undesirable contacts.  This
   draft uses the idea that it may be possible to make undesirable
   contacts more expensive than desirable ones.

   Different undesirables are willing to spend different amounts of time
   and money on contacting their markets.  Founders of acquired startups
   are often contacted by random financial companies offering to help
   manage the new riches.  These companies will send people from New
   York to San Jose and spend hours talking to this very narrow target
   market.  Clothing retailers will mail glossy catalogues worth $1
   apiece to houses within the right demographic zip codes.  Emails
   advertising Viagra are sent to random email addresses.  As the costs
   go down, the volume of unsolicited contact goes up.

   Often people whose contact is desirable are willing to spend much
   less than some of the undesirables.  The student in Fiji who wants to
   ask about this draft will send an email but probably will not fly
   here to talk to me.  I would like to receive that email.

   Increasing the cost of contact will reduce both desirable and
   undesirable contact.  My assumption is that the cost should be set
   very low, so that even a person with a pathetic CPU could still make
   contact in, say, 10 seconds.  Key to this draft is that the receiver
   can set this cost.  This low cost will not stop the financial
   advisers or the telemarketers, but it might stop the Viagra ads.  It
   would also probably stop a single user from ringing every phone of
   some residential service provider in a five-second window, before any
   operator or system can react.  Deciding what cost to set constitutes
   a classic type I/type II error problem, and the receiver gets to
   choose how to balance these two errors.

   As is clearly stated in [7], whitelists are the best thing.  After
   that, this is one of the multiple other options that need



Jennings                 Expires April 26, 2006                 [Page 3]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   consideration.

   In general there are two arguments about why the computation puzzles
   in this specification will not work.  The first is that the bad guys
   have the most powerful CPUs.  This issues was addressed above.  The
   other argument is that bad guys have infinite CPU time through using
   armies of zombie PCs.  The problem with this argument is that the
   goal is not to block particular bad guys but to reduce the overall
   number of undesirable messages.  This second argument is, however,
   more worrisome than the first.

   Assume that some percentage of the world's machines each year get
   owned and used as zombies.  Let's say that a given machine has 1% of
   having this happen to it in a year, that it sends zombie traffic for
   24 hours before getting shut down, and that the mechanism described
   here limits it to ten messages per second: each machine on the
   internet would receive an average of about one undesirable message
   per hour.  If you assume there are more users than machines, this
   looks appealing.  If message sending technology detects users that
   are sending lots of messages and shuts them down in less than 24
   hours, it gets better.  It gets better still if you hope for
   improvements in operating systems or for users to choose them more
   carefully.  The next assumption is hard to model statistically but it
   is true: the people with the best financial incentives to send
   undesirable messages do not want to be subject to the legal and
   reputation problems of using zombies to get their message across.

   The zombie problem basically comes down to this.  If there are a
   small percentage of machines in the world that are zombies, they do
   not render this computation puzzle approach useless.  If 10% of the
   machines in the world are zombies, this approach will be useless.
   This specification does not attempt to deal with how to make the
   world such that a small percentage of computers are zombies - the is
   the problem for other work and that work needs to happen for SPAM to
   be reduced to reasonable level.  This specification does assume that
   the zombie problem is solved to the level where a small percentage of
   the worlds computers are zombies.

   Clearly there is a need to be able to initiate SIP communications
   from very low power, low cost, devices.  They will have relatively
   slow CPUs and their users will be very impatient and only willing to
   wait a short time to compute the puzzle.  On the other hand there
   will be attackers with very fast computers and possibly many of them.
   The relative ratio of these speeds and size of the attacker
   population will determine how effective this approach is.

   So in summary, white listing is the first and best defense.  But for
   dealing with messages from people with whom we have not previous



Jennings                 Expires April 26, 2006                 [Page 4]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   direct or indirect relationship, another approach is necessary.
   Puzzles cannot stop all bad messages - that is not the goal - but it
   can raise the cost of messages and thus decrease the number of times
   it makes economic sense to send undesirable ones.  This approach does
   assume that bad guys will have more CPU power than good guys and that
   zombies will still send lots of messages.  This approach will simply
   reduce the number of undesirable messages by some amount that cannot
   be measured.

   No one knows if this approach would reduce SPAM noticeably.  Right
   now the only thing that limits the rate at which I can call every SIP
   phone in the world is proxies getting overloaded.  And of course,
   most SIP phones are not connected to the public internet.  The SPAM
   problem is one reason why many SIP phones are not connected to the
   public internet.  There are some other approaches outlined in [7].
   They have different pros and cons, and it is probably necessary to
   use most of them to ensure SPAM stays at an acceptable level.


2.  Overview

   This specification extends RFC 3261 [3] and defines a mechanism for a
   proxy or UAS to request that a UAC compute the solution to a puzzle.
   The puzzle is based on finding a value called the pre-image that,
   when hashed with SHA1 [4], results in a specific value referred to as
   the image.  The goal is for the UAC to find a pre-image that will
   SHA1 hash to the correct image.  The UAS provides a partial pre-image
   with some of the low order bits set to zero, together with the number
   of bits in the pre-image that have been set to zero.

   The UAS provides the puzzle information using a 419 response, and the
   UAC resubmits the request along with the solution to the puzzle.  The
   high level flow of information is shown below.


     UAC                        UAS
      |  Request                 |
      |------------------------->|
      |                          |
      |          419 with Puzzle |
      |<-------------------------|
      |                          |
      |  Request with Solution   |
      |------------------------->|
      |                          |

   This specification defines the 419 response code along with a new
   header, called Puzzle, to carry the puzzle and solution.



Jennings                 Expires April 26, 2006                 [Page 5]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


3.  Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [2].


4.  Puzzles

   The normative definition of a puzzle is as follows.  A puzzle is four
   values: an integer number referred to as work, a pre-image string, an
   image string, and a integer number referred to as value.  There MUST
   exist a value X such that all but the "work" number of low order bits
   of X match the pre-image string, and the SHA1 hash of the string
   formed by the concatenation of "z9hG4bK" and X results in a value Y,
   where the "value" number of low order bits of Y are the same as those
   bits in the image string.  The SHA1 hash is computed as described in
   RFC 3174 [4].  The value X is the solution to the puzzle.  The 'work'
   number of low order bits of the pre-image MUST be zero.

   This can all be described more mathematically.  The notation low(v,x)
   returns the first v number of low order bits of the value x, and
   zero(v,x) returns x with the lowest v number of bits set to zero.
   The | operator signifies string concatenation.  The solution to the
   puzzle can be considered finding an X such that both the following
   are true:


      low( value, image ) = low( value, sha1( "z9hG4bK" | X ) )
          zero( work, X ) = zero( work, pre-image )

   The pre-image forms a constraint on X. The value of X is the same
   pre-image, other than the low 'work' bits that are set to zero in the
   pre-image.  The 'value' is the number of bits that match in the
   solution and is typically set to 160, which is the full size of the
   SHA1 hash result.

   The following is a non-normative way for a UAS or proxy to construct
   a puzzle.  The following strings are concatenated:

   1.  a secret that only this device knows.  This would typically be a
       crypto random string of bits;
   2.  the current time
   3.  the URI of the request, the Call-ID, the From tags, and the
       branch tag for a proxy or the To tag for a UAS.

   The string is hashed with SHA1 to form the pre-image.  The pre-image
   is appended to the string "z9hG4bK", and the SHA1 hash of this is



Jennings                 Expires April 26, 2006                 [Page 6]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   computed to get the value of the image.  A value 'work' indicates how
   many bits of the pre-image are to be removed.  The value 'work' could
   be a configurable parameter, or it could be dynamically discovered by
   the software based on how long a hash should take and the speed of
   the computer it was running on.  In the latter case, the resulting
   software would automatically choose larger values of 'work' as
   computers get faster.  The low order 'work' bits of the pre-image are
   set to zero.  The puzzle consists of the chosen value of 'work', the
   pre-image (with the low order bits set to zero), the image, and the
   'value'.  The 'value' would typically be set to 160 as this is the
   size of the SHA1 hash.  Since the time was rounded

   Note: Some implementors have pointed out that this approach requires
   the UAS to do a SHA1 to compute the puzzle and that this creates
   extra load on the UAS.  On a machine with a proxy that could process
   about thousand sip transactions per second, the approximate rate of
   puzzle creation was over one million puzzles per seconds.  The work
   to create a puzzle is trivial compared to the work to receive a sip
   messages and send the response.  The advantage of a puzzle in this
   form seemed apparent at some time in the past but I can not remember
   why.  Big TODO item to recall why this form was used.  This form does
   allow progressively better solutions to be found with a higher
   "value" without changing the image string.


5.  Semantics

5.1.  UAS Creating Puzzle

   When a UAS wishes to challenge a request, it MAY create a puzzle,
   encode this puzzle in a Puzzle header field value, and return the
   puzzle in a 419 response.

5.2.  UAC Receiving Puzzle

   When a UAC receives a 419 response, it needs to look at the 'work'
   and 'value' requested and decide whether or not to try to solve this
   puzzle.  This decision can be made based on the programmed policy and
   possibly human input.  The UAC should not tackle a puzzle that will
   take longer than the age of the universe to solve.  If the UAC
   chooses to try to solve the puzzle then it proceeds along the
   following steps:

   1.  Check that the 'work' bottom bits of the pre-image are all zero.
       If they are not, this is an invalid puzzle and the 419 response
       MUST be considered an error response.





Jennings                 Expires April 26, 2006                 [Page 7]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   2.  Set Y to low( value, image ).
   3.  Create a loop where X ranges from the value of the pre-image to
       the value of the pre-image plus 2 raised to power of the 'work'.
   4.  For each interaction through the loop, check if low( value, sha1(
       "z9hG4bK" | X )) equals Y. If it does, a solution X has been
       found and the loop can terminate.

   If the loop terminates without a solution being found, the puzzle was
   bad and the 419 response MUST be considered as an error response.

   Once the solution to the puzzle, X, is found, a new request is formed
   by copying the old request and adding an additional puzzle header
   field value.  The new puzzle header field value MUST have the 'work'
   set to 0, the pre-image set to the value X, the image set to the
   value of the image in the original puzzle, and the value parameter
   set to the same as the value parameter in the original puzzle.  Note
   that if a request was challenged by one proxy and a new request was
   generated with a solution, and then this request was challenged by a
   second proxy, a third request would be generated that had two Puzzle
   header field values.  If a UAC, through some out of band mechanism,
   knows that it will be challenged and what the puzzle will be, it MAY
   include the appropriate puzzle header field value in the initial
   request.

5.3.  Proxy Behavior

   SIP allows proxies to act as UASs when generating 4xx responses.
   This same mechanism can be used to allow a proxy to generate the
   challenge on behalf of a UAS in its domain.

   Proxies may also act on behalf of the UAC and compute the solution to
   a puzzle on behalf of the UAC in either a request or a response that
   passes through the proxy.  Typically a proxy would only do this for a
   UAC that had authenticated to the proxy and for which the proxy had a
   service relationship.


6.  Example

   In this example, we present a communication establishment between two
   users, Alice (sip:alice@example.com) and Bob (sip:bob@example.net).
   First, Alice sends an INVITE to Bob. Bob, who wants to make sure that
   Alice is not a spammer, replies to Alice with a message ``419 -
   Puzzle Required'', indicating that he wants Alice to pass a challenge
   before establishing a communication.  Bob's reply contains a Puzzle
   that Bob wants Alice to solve.  To get the ``preImage'' value, Bob
   generates a random string that he hashes with SHA1.  If we define
   ``SHA1'' as the method that hashes a string:



Jennings                 Expires April 26, 2006                 [Page 8]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   preImage = SHA1(random string)

   To get the ``image'', Bob appends the string "z9hG4bK" to his
   ``preImage'', and he hashes this new string with SHA1 again.  We can
   say:

   image = SHA1 ("z9hG4bK"|preImage)

   where the "|" operator signifies string concatenation.

   Bob chooses to fix the value of ``value'' to 160, as it is the size
   (in bits) of the ``preImage'' and the ``image'' that he's going to
   send to Alice.  As seen before, the value of ``work'' determines the
   difficulty of the problem, and has to be set up depending on the
   power of Alice's UA.  To simplify the problem, let's suppose that Bob
   chooses to fix ``work'' to 15.  Before putting these values into the
   ``Puzzle header'' field, Bob saves the value of his "preImage", and
   applies the method "zero(value, preImage)" to set the "value" bottom
   bits of ``preImage'' to 0.

   If we assume that Bob has picked the random string
   "itjjyfdubtpneggrdsaavouy", he has the following values:

   random string
   = "itjjyfdubtpneggrdsaavouy"

   original preImage
   = SHA1(random string)
   = "VgVGYixbRg0mdSwTY3YIfCBuYmg=" (base-64 encoded)
   = "01010110 00000101 01000110 01100010 00101100 01011011 01000110
      00001101 00100110 01110101 00101100 00010011 01100011 01110110
      00001000 01111100 00100000 01101110 01100010 01101000" (binary)

   sent preImage
   = zero(work, preImage) where work = 15
   = "VgVGYixbRg0mdSwTY3YIfCBuAAA=" (base-64 encoded)
   = "01010110 00000101 01000110 01100010 00101100 01011011 01000110
      00001101 00100110 01110101 00101100 00010011 01100011 01110110
      00001000 01111100 00100000 01101110 00000000 00000000" (binary)

   image
   = SHA1 ("z9hG4bK"|original preImage)
   = "NhhMQ2l7SE0VBmZFKksUC19ia04=" (base-64 encoded)

   Then Bob constructs the Puzzle header field, that has this form:

   Puzzle: work=15; pre="VgVGYixbRg0mdSwTY3YIfCBuAAA=";
           image="NhhMQ2l7SE0VBmZFKksUC19ia04="; value=160



Jennings                 Expires April 26, 2006                 [Page 9]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   At this point Bob answers to Alice's INVITE, with a message "419
   Puzzle required" containing the "Puzzle header" field that he has
   just built.  When Alice receives this message, she looks at the value
   of "work" and "value", and in our case she decides to try to solve
   this puzzle.  She decodes the ``preImage'' and the ``image'' with a
   base64-decoder.  Then she checks that the "work" bottom bits of
   preImage are set to 0.  If it is not the case, she would have to
   consider the 419 message as an error message.  Alice creates a
   variable Y, set to low(value, image).  She creates another variable,
   X, that will contain the solution, and that is initialized to the
   preImage that she has read in the "Puzzle header" field.

   The binary value of X, before starting to search for a solution, is:

   01010110 00000101 01000110 01100010 00101100 01011011 01000110
   00001101 00100110 01110101 00101100 00010011 01100011 01110110
   00001000 01111100 00100000 01101110 00000000 00000000

   In fact it's the same value as the ``preImage'' that Bob has put in
   the "Puzzle header" field, because Alice has initialized X to this
   value.  This "X" is the start-point of solving the puzzle.

   Then she starts looping...

   While low( value, SHA1("z9hG4bK" | X )) doesn't equal Y, she must
   "increment" X, ie binary add 1 to the bit-representation of X. In
   other words, if during a given iteration the binary value of X is:

   01010110 00000101 01000110 01100010 00101100 01011011 01000110
   00001101 00100110 01110101 00101100 00010011 01100011 01110110
   00001000 01111100 00100000 01101110 00010010 10010111

   then Alice has to add 1 to this value, and the new binary value of X
   must be:

   01010110 00000101 01000110 01100010 00101100 01011011 01000110
   00001101 00100110 01110101 00101100 00010011 01100011 01110110
   00001000 01111100 00100000 01101110 00010010 10011000

   The maximum number of iterations is "2^work", because Alice has
   received a ``preImage'' with the "work" bottom bits set to 0, and
   that the biggest solution would can be the ``preImage'' with the
   "work" bottom bits set to 1.  This configuration is accessible via
   "2^work" iterations.

   If Alice has finished looping without finding a solution, she must
   consider that the puzzle was invalid, and then consider the "419
   Puzzle Required" as an error message.



Jennings                 Expires April 26, 2006                [Page 10]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   If Alice finds an X such as low( value, SHA1("z9hG4bK" | X )) equals
   Y, she has the solution!  She can break out of the loop and build a
   response for Bob.

   As a response, Alice will send a copy of her initial request, but she
   will insert the same "puzzle header field" as the one she has
   received in the "419 Puzzle Required", except the "work" field that
   she sets to 0, and the "preImage" field where she puts the solution
   of the problem.  She won't forget to base64-encode her solution, X,
   before putting it in the "Puzzle header" field.

   The "Puzzle header" field of Alice's answer has the form:

   Puzzle: work=0; pre="VgVGYixbRg0mdSwTY3YIfCBuYmg=";
           image="NhhMQ2l7SE0VBmZFKksUC19ia04="; value=160

   When Bob receives this message, he can compare the ``preImage'' value
   that he has used to build the Puzzle with the ``preImage'' value that
   he can read in the "Puzzle header" field of Alice's answer.

   If these two values are the same, he can consider that Alice has
   spent time to solve the puzzle, and that she passed the challenge.
   So he can accept her initial INVITE request!

   In conclusion, we saw different messages going between Alice and Bob.
   Here is a summary of these messages, and the content of the "Puzzle
   header" field" for messages that use this header:
























Jennings                 Expires April 26, 2006                [Page 11]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


      UAC                        UAS
       |  INVITE                  |
       |------------------------->|
       |                          |
       |         419 with Puzzle  |Puzzle: work=15;
       |                          |pre="VgVGYixbRg0mdSwTY3YIfCBuAAA=";
       |<------------------------|image="NhhMQ2l7SE0VBmZFKksUC19ia04=";
       |                          |value=160
       |                          |
       |  INVITE with Solution    |Puzzle: work=0;
       |                          |pre="VgVGYixbRg0mdSwTY3YIfCBuYmg=";
       |------------------------->|image="NhhMQ2l7SE0VBmZFKksUC19ia04=";
       |                          |value=160
       |                          |
       |              100 TRYING  |
       |<-------------------------|
       |                          |
       |             180 RINGING  |
       |<-------------------------|
       |                          |
       |                  200 OK  |
       |<-------------------------|
       |                          |
       |  ACK                     |
       |------------------------->|


7.  Syntax

   The Puzzle header field carries the puzzle and solution information.
   It has a parameter called 'work' that has the number of bits of the
   pre-image that have been set to zero for this puzzle.  It has a
   parameter called 'pre' that carries the pre-image string base64
   encoded, and a parameter called 'image' that carries the image string
   base64 encoded.  In addition there is a parameter called 'value' that
   indicates how many bits of the resulting hash will match the 'image'
   string.  The base64 encoding is done as described in RFC 3548 [1].

   When the header field value is carrying a solution to a puzzle, the
   work parameter will be set to zero.

   Example:

       Puzzle: work=10; pre="XPokF1n0+NG6iwRcYzeXuETrtDo=";
               image="XPokF1n0+NG6iwRcYzeXuETrtDo="; value=160

   The ABNF for the header is:




Jennings                 Expires April 26, 2006                [Page 12]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


    Puzzle       = "Puzzle" HCOLON puzzle-parm *(COMMA puzzle-param)

    puzzle-param =  puzzle-bits SEMI puzzle-pre SEMI puzzle-image
                    SEMI puzzle-value *( SEMI generic-param )

    puzzle-work  = "work=" 1*DIGIT
    puzzle-value = "value=" 1*DIGIT
    puzzle-pre   = "pre=" quoted-string
    puzzle-image = "image=" quoted-string

   This document updates the dreaded Table 2 of RFC 3261 to be:

    Header field         where   proxy   ACK  BYE  CAN  INV  OPT  REG
    ------------         -----   -----   ---  ---  ---  ---  ---  ---
    Puzzle                        amr     o    o    -    o    o    o

                                         SUB  NOT  REF  INF  UPD  PRA
                                         ---  ---  ---  ---  ---  ---
                                          o    o    o    o    o    o


8.  Open Issues and To Do Items

   The current mechanism has poor interaction with the HERFP forking
   problem.  If several endpoints sent a 419, the proxy would need to
   aggregate the results and add something like the realm to the
   challenges to keep them sorted out.  Need to add this in next
   revision.  In many cases the solution would work out better if the
   proxy that was doing the forking applied the policy and did the 419
   before forking.  This approach has the usual HERFP problem that if
   some UAs do a 419, and some UAs don't, the request will only reach
   the UAs that don't do the 419.

   What is the transition model here.  Not everything is going implement
   this right away: how to differentiate non-implementers from
   purposeful non-implementors?  Is it realistic to just say no to non-
   implementors?  Especially when you consider that as a PSTN
   replacement there is a general expectation of call success rather
   than call failure (unlike, say, IM).

   Need to add a parameter to the puzzle that specifies which hash
   algorithm to use.

   Update what happens when a UAS receives a puzzle with an incorrect
   solution.






Jennings                 Expires April 26, 2006                [Page 13]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


9.  Security Considerations

   Still TBD.

   The concatenation with "z9hG4bK" is done so that this mechanism
   cannot be used as a distributed computation to reverse arbitrary hash
   values, as that would present a security risk for other hash based
   security schemes.

   TODO - Advice on selecting the size of 'work'.

   There may be ways of using this to effectively perform DOS attacks on
   system by asking them to solve many puzzles.  Need to consider these
   attacks and make sure that puzzles are only needed to be solved by
   the device the initiated the requested action.

   TODO - discuss rational for design of the puzzle

   Some applications like "reverse 911" (community emergency alert
   systems that notify all the UAs in a given group or geographic
   region) would be severely hampered by being challenged with puzzles.
   These systems will require some other authorization system and SHOULD
   NOT use this approach.


10.  IANA

   This specification registers a new header and a new response code.
   IANA is requested to make the following updates in the registry at:
   http:///www.iana.org/assignments/sip-parameters

10.1.  Puzzle Header

   Add the following entry to the header sub-registry.

     Header Name        compact    Reference
     -----------------  -------    ---------
     Puzzle                        [RFCXXXX]

10.2.  419 Response

   Add the following entry to the response code sub-registry under the
   "Request Failure 4xx" heading.

       419  Puzzle Required                      [RFCXXXX]






Jennings                 Expires April 26, 2006                [Page 14]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


11.  Acknowledgments

   The test vectors in Appendix A and the example text were provided by
   Geoffrey Dawirs.  This approach was motivated by [5].  Michael Thomas
   has pointed out some significant problems with this idea and perhaps
   the whole approach.  I have tried to paraphrase some of his concerns
   into the discussion in this document.  Henning Schulzrinne pointed
   out the important reverse 911 consideration.


12.  Appendix A: Test Vectors


   level 1 / 17 --- TEST 1 / 3
   Random string: ooephpxhcoycchszuzvs
   preImage (base64-encoded): chtz/f0m/f39/f0PQf0b/VT9Nv0=

   image (base64-encoded): /V8f/TID/f39/V8ePv39/WX9IDA=

   work: 1
   value: 160
   preImage after zero (base64-encoded): chtzPz8mPz8/Pz8PQT8bP1Q/Nj4=

   solution (base64-encoded): chtzPz8mPz8/Pz8PQT8bP1Q/Nj8=

   level 1 / 17 --- TEST 2 / 3
   Random string: wgiuufeluolvlmcfbbckgji
   preImage (base64-encoded): d/39/f1XDP39/WH9aGNhTf39KP0=

   image (base64-encoded): /Vn9/QZXdv07Cf1h/UxIb/39/f0=

   work: 1
   value: 160
   preImage after zero (base64-encoded): dz8/Pz9XDD8/P2E/aGNhTT8/KD4=

   solution (base64-encoded): dz8/Pz9XDD8/P2E/aGNhTT8/KD8=

   level 1 / 17 --- TEST 3 / 3
   Random string: rtrulksrizyeskzicnvouq
   preImage (base64-encoded): ZBU5eP0p/f0vAP1qbP39Nf1Sav0=

   image (base64-encoded): /f39X/1scP39Iv1N/f1oSf39/f0=

   work: 1
   value: 160
   preImage after zero (base64-encoded): ZBU5eD8pPz8vAD9qbD8/NT9Saj4=

   solution (base64-encoded): ZBU5eD8pPz8vAD9qbD8/NT9Saj8=



Jennings                 Expires April 26, 2006                [Page 15]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   level 2 / 17 --- TEST 1 / 3
   Random string: cnqnwjusruwjpmezwqjwzcdsy
   preImage (base64-encoded): R/0dawg2/SIDTQ39NP17/QZXK/0=

   image (base64-encoded): /f39/UcH/f0eYf03/f0M/VD9/f0=

   work: 2
   value: 160
   preImage after zero (base64-encoded): Rz8dawg2PyIDTQ0/ND97PwZXKzw=

   solution (base64-encoded): Rz8dawg2PyIDTQ0/ND97PwZXKz8=

   level 2 / 17 --- TEST 2 / 3
   Random string: lfknjsuwwghtkhanskfexcw
   preImage (base64-encoded): /VD9f/39dP39Fv39cv0QKlouVA4=

   image (base64-encoded): WTp8U/39EyH9/Xf9/WL9/f1lI1k=

   work: 2
   value: 160
   preImage after zero (base64-encoded): P1A/fz8/dD8/Fj8/cj8QKlouVAw=

   solution (base64-encoded): P1A/fz8/dD8/Fj8/cj8QKlouVA4=

   level 2 / 17 --- TEST 3 / 3
   Random string: tuumflmxkgrwmehseipmnlfr
   preImage (base64-encoded): df08/TZ7/ST9/QoP/f39/Xsh/f0=

   image (base64-encoded): PTT9OP39Lv0GV/39Wf09/SZ2Kf0=

   work: 2
   value: 160
   preImage after zero (base64-encoded): dT88PzZ7PyQ/PwoPPz8/P3shPzw=

   solution (base64-encoded): dT88PzZ7PyQ/PwoPPz8/P3shPz8=

   level 3 / 17 --- TEST 1 / 3
   Random string: njznowtmfoocstirsfrzpdyisns
   preImage (base64-encoded): /f15/Rom/f0D/RRtZv0P/f39Ov0=

   image (base64-encoded): T3ke/Sr9/f1j/RQWQVUkS2b9/f0=

   work: 3
   value: 160
   preImage after zero (base64-encoded): Pz95PxomPz8DPxRtZj8PPz8/Ojg=

   solution (base64-encoded): Pz95PxomPz8DPxRtZj8PPz8/Oj8=




Jennings                 Expires April 26, 2006                [Page 16]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   level 3 / 17 --- TEST 2 / 3
   Random string: fxprbwrdsrtbdxjorrwxctngli
   preImage (base64-encoded): /VNl/SN9KXJ2Dmk3c/0Q/TI+/f0=

   image (base64-encoded): /XwE/Rv9aQb9X0n9/f1mAU79bRw=

   work: 3
   value: 160
   preImage after zero (base64-encoded): P1NlPyN9KXJ2Dmk3cz8QPzI+Pzg=

   solution (base64-encoded): P1NlPyN9KXJ2Dmk3cz8QPzI+Pz8=

   level 3 / 17 --- TEST 3 / 3
   Random string: ytafhjsqsfliljpppmodwdnzyfgzdt
   preImage (base64-encoded): /f12/f1f/f1KW2D9Bv39/f0dKAg=

   image (base64-encoded): /VT9W/0ZZy/9/QZh/V39/f04IjY=

   work: 3
   value: 160
   preImage after zero (base64-encoded): Pz92Pz9fPz9KW2A/Bj8/Pz8dKAg=

   solution (base64-encoded): Pz92Pz9fPz9KW2A/Bj8/Pz8dKAg=

   level 4 / 17 --- TEST 1 / 3
   Random string: wjximzalifclzkezdragluyrk
   preImage (base64-encoded): /f39RSoM/Rj9bP1P/f39/Sr9/RY=

   image (base64-encoded): /X79/RlTIzv9/Q79Hf0ET0L9eTo=

   work: 4
   value: 160
   preImage after zero (base64-encoded): Pz8/RSoMPxg/bD9PPz8/Pyo/PxA=

   solution (base64-encoded): Pz8/RSoMPxg/bD9PPz8/Pyo/PxY=

   level 4 / 17 --- TEST 2 / 3
   Random string: qnzzpuqjtkvbltozkegcgqfmir
   preImage (base64-encoded): Nv0dQCwX/f18YP0w/W79/f39P0I=

   image (base64-encoded): /Rv9Jv39dDr9/f1J/f39/f0k/f0=

   work: 4
   value: 160
   preImage after zero (base64-encoded): Nj8dQCwXPz98YD8wP24/Pz8/P0A=

   solution (base64-encoded): Nj8dQCwXPz98YD8wP24/Pz8/P0I=




Jennings                 Expires April 26, 2006                [Page 17]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   level 4 / 17 --- TEST 3 / 3
   Random string: frepjirwuazgpygnspimmuqcjyup
   preImage (base64-encoded): IjD9B/39GipH/f39B/1yaEn9LWw=

   image (base64-encoded): /SAIRncnYzX9WBn9/f11/f39/f0=

   work: 4
   value: 160
   preImage after zero (base64-encoded): IjA/Bz8/GipHPz8/Bz9yaEk/LWA=

   solution (base64-encoded): IjA/Bz8/GipHPz8/Bz9yaEk/LWw=

   level 5 / 17 --- TEST 1 / 3
   Random string: abidtlkiekkqxnanpzhfbpkopgomad
   preImage (base64-encoded): /f39NUz9HCkT/f39/f0EcW39Z0g=

   image (base64-encoded): /UL9/f39FWsx/f0T/f39Wf16/f0=

   work: 5
   value: 160
   preImage after zero (base64-encoded): Pz8/NUw/HCkTPz8/Pz8EcW0/Z0A=

   solution (base64-encoded): Pz8/NUw/HCkTPz8/Pz8EcW0/Z0g=

   level 5 / 17 --- TEST 2 / 3
   Random string: nrbmewenpxixeznyjjux
   preImage (base64-encoded): /V0jL2o5EVf9/f1Z/f0H/WhA/Rc=

   image (base64-encoded): /TgSQ1JB/f39Pf39f0QT/WX9/f0=

   work: 5
   value: 160
   preImage after zero (base64-encoded): P10jL2o5EVc/Pz9ZPz8HP2hAPwA=

   solution (base64-encoded): P10jL2o5EVc/Pz9ZPz8HP2hAPxc=

   level 5 / 17 --- TEST 3 / 3
   Random string: nxwtoxkrzyslsmjxcmcazs
   preImage (base64-encoded): ef39A/1lYkY8/Vr9GP0bVv39/Wc=

   image (base64-encoded): BRr9J/1a/RpwKf0pQP1h/TX9/f0=

   work: 5
   value: 160
   preImage after zero (base64-encoded): eT8/Az9lYkY8P1o/GD8bVj8/P2A=

   solution (base64-encoded): eT8/Az9lYkY8P1o/GD8bVj8/P2c=




Jennings                 Expires April 26, 2006                [Page 18]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   level 6 / 17 --- TEST 1 / 3
   Random string: unijaxxrqyawiivoxakw
   preImage (base64-encoded): /UoqcCv9/f39Oihl/X96PhNk/S4=

   image (base64-encoded): /f09O/0a/SU7/f1D/W79Uyg+/QA=

   work: 6
   value: 160
   preImage after zero (base64-encoded): P0oqcCs/Pz8/OihlP396PhNkPwA=

   solution (base64-encoded): P0oqcCs/Pz8/OihlP396PhNkPy4=

   level 6 / 17 --- TEST 2 / 3
   Random string: jnjqjsxybpqzvkxesduivaezkf
   preImage (base64-encoded): /Qoh/f09Sxlz/f39/Qh5KHxb/f0=

   image (base64-encoded): Av0B/TD9Skv9Qf39PP39STT9Rf0=

   work: 6
   value: 160
   preImage after zero (base64-encoded): PwohPz89SxlzPz8/Pwh5KHxbPwA=

   solution (base64-encoded): PwohPz89SxlzPz8/Pwh5KHxbPz8=

   level 6 / 17 --- TEST 3 / 3
   Random string: wwbezgxbwvecyyvewumrwwqn
   preImage (base64-encoded): d/39/WT9/Q/9/TT9/VMmYw5k/Sg=

   image (base64-encoded): X/39/Rz9fBcq/Xs9/S/9Gm/9/f0=

   work: 6
   value: 160
   preImage after zero (base64-encoded): dz8/P2Q/Pw8/PzQ/P1MmYw5kPwA=

   solution (base64-encoded): dz8/P2Q/Pw8/PzQ/P1MmYw5kPyg=

   level 7 / 17 --- TEST 1 / 3
   Random string: dnashuaegcnjkgfdryhezniwsqwc
   preImage (base64-encoded): /f39/Udg/f0yQmr9KTQkdkNnSv0=

   image (base64-encoded): NP39IHYoAxVkPiE0/Xv9/Xj9Xf0=

   work: 7
   value: 160
   preImage after zero (base64-encoded): Pz8/P0dgPz8yQmo/KTQkdkNnSgA=

   solution (base64-encoded): Pz8/P0dgPz8yQmo/KTQkdkNnSj8=




Jennings                 Expires April 26, 2006                [Page 19]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   level 7 / 17 --- TEST 2 / 3
   Random string: xmnwgayqchwjunruwspqvi
   preImage (base64-encoded): /Xv9/SD9/VL9/VAT/Wn9c2j9K10=

   image (base64-encoded): /Wtya/1NYf0kOCn9Nv39QP1tGEU=

   work: 7
   value: 160
   preImage after zero (base64-encoded): P3s/PyA/P1I/P1ATP2k/c2g/KwA=

   solution (base64-encoded): P3s/PyA/P1I/P1ATP2k/c2g/K10=

   level 7 / 17 --- TEST 3 / 3
   Random string: vaaptxmcnnkxmpoqomdugk
   preImage (base64-encoded): /RT9CP39/f39/f1JHP39/f39/f0=

   image (base64-encoded): /R79/f1U/Qf9XSp9/f1ZOhr9/f0=

   work: 7
   value: 160
   preImage after zero (base64-encoded): PxQ/CD8/Pz8/Pz9JHD8/Pz8/PwA=

   solution (base64-encoded): PxQ/CD8/Pz8/Pz9JHD8/Pz8/Pz8=

   level 8 / 17 --- TEST 1 / 3
   Random string: poofjpoqfrubpskzlqrlrbk
   preImage (base64-encoded): /f39cWYp/VIoB09e/Wr9/f39Sf0=

   image (base64-encoded): D/0P/f39/S5H/f39fA79If39c2Y=

   work: 8
   value: 160
   preImage after zero (base64-encoded): Pz8/cWYpP1IoB09eP2o/Pz8/SQA=

   solution (base64-encoded): Pz8/cWYpP1IoB09eP2o/Pz8/ST8=

   level 8 / 17 --- TEST 2 / 3
   Random string: ypdkehgukqlanimthmokqgtqxidvl
   preImage (base64-encoded): /f1D/f39/f1FfP1l/TL9/f0adP0=

   image (base64-encoded): Af39DP39/Wl//Wf9/f1s/Uf9dzo=

   work: 8
   value: 160
   preImage after zero (base64-encoded): Pz9DPz8/Pz9FfD9lPzI/Pz8adAA=

   solution (base64-encoded): Pz9DPz8/Pz9FfD9lPzI/Pz8adD8=




Jennings                 Expires April 26, 2006                [Page 20]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   level 8 / 17 --- TEST 3 / 3
   Random string: jzokxajrgnplzqhiseqjnpjkjikgn
   preImage (base64-encoded): Pf39cv39/SX9/f39C0D9UP0eLS4=

   image (base64-encoded): K/39D/1j/VEY/f1xHf39HX5/dyc=

   work: 8
   value: 160
   preImage after zero (base64-encoded): PT8/cj8/PyU/Pz8/C0A/UD8eLQA=

   solution (base64-encoded): PT8/cj8/PyU/Pz8/C0A/UD8eLS4=

   level 9 / 17 --- TEST 1 / 3
   Random string: dbjmxqjzpcperfjigaimcplyvhdfzp
   preImage (base64-encoded): HRUr/f1sAydT/Tn9/f0SQf1i/SQ=

   image (base64-encoded): QD0J/XT9bv39/RhA/f39/XZk/Sc=

   work: 9
   value: 160
   preImage after zero (base64-encoded): HRUrPz9sAydTPzk/Pz8SQT9iPgA=

   solution (base64-encoded): HRUrPz9sAydTPzk/Pz8SQT9iPyQ=

   level 9 / 17 --- TEST 2 / 3
   Random string: oajycbcudarozajevydcwcaw
   preImage (base64-encoded): /f1gAf1T/f10M/39Rmxh/Tj9/f0=

   image (base64-encoded): Qf0i/SB/JA54/f0d/f1YX/07ef0=

   work: 9
   value: 160
   preImage after zero (base64-encoded): Pz9gAT9TPz90Mz8/RmxhPzg/PgA=

   solution (base64-encoded): Pz9gAT9TPz90Mz8/RmxhPzg/Pz8=

   level 9 / 17 --- TEST 3 / 3
   Random string: npzagvdtimijoxkizkqgsesuvmf
   preImage (base64-encoded): H2J0/RD9/f1ffVdF/f0XXEj9/Rg=

   image (base64-encoded): /f39/f1kIP39Kv0eaDX9/RoZQTM=

   work: 9
   value: 160
   preImage after zero (base64-encoded): H2J0PxA/Pz9ffVdFPz8XXEg/PgA=

   solution (base64-encoded): H2J0PxA/Pz9ffVdFPz8XXEg/Pxg=




Jennings                 Expires April 26, 2006                [Page 21]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   level 10 / 17 --- TEST 1 / 3
   Random string: tdferyizffpfjutbgznhuwxwu
   preImage (base64-encoded): Vv0F/f39/S39/V9d/f0Qd/1L/S4=

   image (base64-encoded): /f39E/39Rf09/f39/X79/QH9axo=

   work: 10
   value: 160
   preImage after zero (base64-encoded): Vj8FPz8/Py0/P19dPz8Qdz9LPAA=

   solution (base64-encoded): Vj8FPz8/Py0/P19dPz8Qdz9LPy4=

   level 10 / 17 --- TEST 2 / 3
   Random string: lrgrqnlxzsqdcmvhcpixummvau
   preImage (base64-encoded): JWRFAP39/f1C/RX9bWxWcBIk/f0=

   image (base64-encoded): MP39MP39/WT9Sf05Cf39AHz9/f0=

   work: 10
   value: 160
   preImage after zero (base64-encoded): JWRFAD8/Pz9CPxU/bWxWcBIkPAA=

   solution (base64-encoded): JWRFAD8/Pz9CPxU/bWxWcBIkPz8=

   level 10 / 17 --- TEST 3 / 3
   Random string: yjbydyzdnvfirtrasohsuzvm
   preImage (base64-encoded): /f39/f0X/f39/Tn9Bf39/TJZ/f0=

   image (base64-encoded): JFf9YP39/f0x/Qv9Wf39/f05dAc=

   work: 10
   value: 160
   preImage after zero (base64-encoded): Pz8/Pz8XPz8/Pzk/BT8/PzJZPAA=

   solution (base64-encoded): Pz8/Pz8XPz8/Pzk/BT8/PzJZPz8=

   level 11 / 17 --- TEST 1 / 3
   Random string: evlveyrmwdoqfcrclosojhtkly
   preImage (base64-encoded): V/1S/f0uaiX9Lv17/V39f/03/Xg=

   image (base64-encoded): Qf39I/1U/f1Z/W/9/SIN/f39/f0=

   work: 11
   value: 160
   preImage after zero (base64-encoded): Vz9SPz8uaiU/Lj97P10/fz83OAA=

   solution (base64-encoded): Vz9SPz8uaiU/Lj97P10/fz83P3g=




Jennings                 Expires April 26, 2006                [Page 22]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   level 11 / 17 --- TEST 2 / 3
   Random string: wharmcoamukfraalxockgbmkjcmky
   preImage (base64-encoded): If39T2ZE/f14YP0a/f0X/U39Gv0=

   image (base64-encoded): /f1l/f39av39Cyb9Kxf9/TM6Xv0=

   work: 11
   value: 160
   preImage after zero (base64-encoded): IT8/T2ZEPz94YD8aPz8XP00/GAA=

   solution (base64-encoded): IT8/T2ZEPz94YD8aPz8XP00/Gj8=

   level 11 / 17 --- TEST 3 / 3
   Random string: zgsmvljqjymuklzhnxsvveolenrhk
   preImage (base64-encoded): Cv0K/UAtWf39/f39/f39/f1j/f0=

   image (base64-encoded): Z/39/QkFNv0H/Wj9VFZmLf1K/UU=

   work: 11
   value: 160
   preImage after zero (base64-encoded): Cj8KP0AtWT8/Pz8/Pz8/Pz9jOAA=

   solution (base64-encoded): Cj8KP0AtWT8/Pz8/Pz8/Pz9jPz8=

   level 12 / 17 --- TEST 1 / 3
   Random string: atqnjsipnwasyqwtotelsvfujaw
   preImage (base64-encoded): /TdM/f39/f1u/f0K/f39/f39/f0=

   image (base64-encoded): HEh1/f14/f39/f1nWnT9YVH9/W4=

   work: 12
   value: 160
   preImage after zero (base64-encoded): PzdMPz8/Pz9uPz8KPz8/Pz8/MAA=

   solution (base64-encoded): PzdMPz8/Pz9uPz8KPz8/Pz8/Pz8=

   level 12 / 17 --- TEST 2 / 3
   Random string: ckbsebhrvinlfbzdbygwjcnfbmyau
   preImage (base64-encoded): Of0pMFP9/f1Lb3P9/f39af39/UY=

   image (base64-encoded): GP39d/39Jv39X2j9D0Vuef0bNv0=

   work: 12
   value: 160
   preImage after zero (base64-encoded): OT8pMFM/Pz9Lb3M/Pz8/aT8/MAA=

   solution (base64-encoded): OT8pMFM/Pz9Lb3M/Pz8/aT8/P0Y=




Jennings                 Expires April 26, 2006                [Page 23]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   level 12 / 17 --- TEST 3 / 3
   Random string: wuzsbjnipuhrdvbciomseoymnn
   preImage (base64-encoded): /QL9/VH9MVMrfv39/SR3WP12/X0=

   image (base64-encoded): /f39/f1i/Tb9/f1hQFr9/f0V/RA=

   work: 12
   value: 160
   preImage after zero (base64-encoded): PwI/P1E/MVMrfj8/PyR3WD92MAA=

   solution (base64-encoded): PwI/P1E/MVMrfj8/PyR3WD92P30=

   level 13 / 17 --- TEST 1 / 3
   Random string: pmvqikmfdwhrzkbnapnskv
   preImage (base64-encoded): Af1t/WL9SlkbcwD9/XL9M/39af0=

   image (base64-encoded): /f39IP1/X2X9RitCfv39/VH9/f0=

   work: 13
   value: 160
   preImage after zero (base64-encoded): AT9tP2I/SlkbcwA/P3I/Mz8/YAA=

   solution (base64-encoded): AT9tP2I/SlkbcwA/P3I/Mz8/aT8=

   level 13 / 17 --- TEST 2 / 3
   Random string: ughvtguwkljtvwllnqffbdi
   preImage (base64-encoded): Sf1+fTlqNv39a/0WM/39/U39/Sc=

   image (base64-encoded): /Sj9/RYNHlf9Bf39/Xt9a/1zDlQ=

   work: 13
   value: 160
   preImage after zero (base64-encoded): ST9+fTlqNj8/az8WMz8/P00/IAA=

   solution (base64-encoded): ST9+fTlqNj8/az8WMz8/P00/Pyc=

   level 13 / 17 --- TEST 3 / 3
   Random string: gjxmzdyjvgzwqpwipzyotnb
   preImage (base64-encoded): InwN/f39J0MH/f39cf1Y/Tr9/f0=

   image (base64-encoded): /TX9/Wtx/f0ZJf1OOP1vEGv9TDQ=

   work: 13
   value: 160
   preImage after zero (base64-encoded): InwNPz8/J0MHPz8/cT9YPzo/IAA=

   solution (base64-encoded): InwNPz8/J0MHPz8/cT9YPzo/Pz8=




Jennings                 Expires April 26, 2006                [Page 24]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   level 14 / 17 --- TEST 1 / 3
   Random string: giojmozfqaidhrsnimfj
   preImage (base64-encoded): Bf1iXyj9HlX9PRb9b/39cQ5m/TE=

   image (base64-encoded): Ff0g/f39/f39/f39/XD9/f39U3s=

   work: 14
   value: 160
   preImage after zero (base64-encoded): BT9iXyg/HlU/PRY/bz8/cQ5mAAA=

   solution (base64-encoded): BT9iXyg/HlU/PRY/bz8/cQ5mPzE=

   level 14 / 17 --- TEST 2 / 3
   Random string: mbxajvnzgjkxnorugdzynukjovzy
   preImage (base64-encoded): /XUqWzP9/f39/TT9/f39QkH9fv0=

   image (base64-encoded): f/1w/Rp7/f1+fF9I/f39dHn9QP0=

   work: 14
   value: 160
   preImage after zero (base64-encoded): P3UqWzM/Pz8/PzQ/Pz8/QkE/QAA=

   solution (base64-encoded): P3UqWzM/Pz8/PzQ/Pz8/QkE/fj8=

   level 14 / 17 --- TEST 3 / 3
   Random string: lsxtxetzeafgwxzhwuffsyxqj
   preImage (base64-encoded): VP0YOv39GDb9UP0p/f0qcv1SB/0=

   image (base64-encoded): /f39NDT9/Qhb/f1GT/1e/f39/RA=

   work: 14
   value: 160
   preImage after zero (base64-encoded): VD8YOj8/GDY/UD8pPz8qcj9SAAA=

   solution (base64-encoded): VD8YOj8/GDY/UD8pPz8qcj9SBz8=

   level 15 / 17 --- TEST 1 / 3
   Random string: wykvmbokaipwxhnbwjmvvfkizp
   preImage (base64-encoded): Mf0OXzL9Jf0u/XAdPD79JDf9HV4=

   image (base64-encoded): /W39aUT9/f39XGZ/If39/f10an4=

   work: 15
   value: 160
   preImage after zero (base64-encoded): MT8OXzI/JT8uP3AdPD4/JDc/AAA=

   solution (base64-encoded): MT8OXzI/JT8uP3AdPD4/JDc/HV4=




Jennings                 Expires April 26, 2006                [Page 25]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   level 15 / 17 --- TEST 2 / 3
   Random string: kihfenratdgqfdkeicjisvoh
   preImage (base64-encoded): /REzSAb9/f39dQL9dm0yPP0y/f0=

   image (base64-encoded): PFv9Hh39Jv1yAgsRFP1lJP07Qv0=

   work: 15
   value: 160
   preImage after zero (base64-encoded): PxEzSAY/Pz8/dQI/dm0yPD8yAAA=

   solution (base64-encoded): PxEzSAY/Pz8/dQI/dm0yPD8yPz8=

   level 15 / 17 --- TEST 3 / 3
   Random string: mtshoeaueekscwdcgkethy
   preImage (base64-encoded): /f39/Xb9Vv39KTl4XEVU/R39URo=

   image (base64-encoded): /WxF/f39A/0LV/06/f39/Wcj/f0=

   work: 15
   value: 160
   preImage after zero (base64-encoded): Pz8/P3Y/Vj8/KTl4XEVUPx0/AAA=

   solution (base64-encoded): Pz8/P3Y/Vj8/KTl4XEVUPx0/URo=

   level 16 / 17 --- TEST 1 / 3
   Random string: sbtjsvfrdinectvcgnneum
   preImage (base64-encoded): /f39/VoQcv39/TM7/T11Qjls/f0=

   image (base64-encoded): Q/39SjZKF1b9/f1ofyp+Qng0QFg=

   work: 16
   value: 160
   preImage after zero (base64-encoded): Pz8/P1oQcj8/PzM7Pz11QjlsAAA=

   solution (base64-encoded): Pz8/P1oQcj8/PzM7Pz11QjlsPz8=

   level 16 / 17 --- TEST 2 / 3
   Random string: bdcdmzzteijegstnulevwr
   preImage (base64-encoded): /UX9MP39/W1INSRRAiX9/f39/f0=

   image (base64-encoded): /TT9MHP9ff39/f39Of39/f39/f0=

   work: 16
   value: 160
   preImage after zero (base64-encoded): P0U/MD8/P21INSRRAiU/Pz8/AAA=

   solution (base64-encoded): P0U/MD8/P21INSRRAiU/Pz8/Pz8=




Jennings                 Expires April 26, 2006                [Page 26]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


   level 16 / 17 --- TEST 3 / 3
   Random string: paqsodugspsaabcqjwmlnkarfd
   preImage (base64-encoded): /f0mJf39CXs9/f39Yv39djj9/TE=

   image (base64-encoded): ff39Xlz9/WtKBzv9BP39/Tkv/f0=

   work: 16
   value: 160
   preImage after zero (base64-encoded): Pz8mJT8/CXs9Pz8/Yj8/djg/AAA=

   solution (base64-encoded): Pz8mJT8/CXs9Pz8/Yj8/djg/PzE=

   level 17 / 17 --- TEST 1 / 3
   Random string: vivmytejtwwcpcqavvvsfgqwmxr
   preImage (base64-encoded): /f39dkH9/f39Q/0t/f39/Q/9/f0=

   image (base64-encoded): GP39/QsfHP1PPCpPCf39Ff39X/0=

   work: 17
   value: 160
   preImage after zero (base64-encoded): Pz8/dkE/Pz8/Qz8tPz8/Pw8+AAA=

   solution (base64-encoded): Pz8/dkE/Pz8/Qz8tPz8/Pw8/Pz8=

   level 17 / 17 --- TEST 2 / 3
   Random string: kibmojzsrrqrowxeypgkdmnbfqubhm
   preImage (base64-encoded): G3xCDf39/f39Av0E/XT9HS89YWk=

   image (base64-encoded): /f39Ff39/XH9/WT9/f39Uf1KZv0=

   work: 17
   value: 160
   preImage after zero (base64-encoded): G3xCDT8/Pz8/Aj8EP3Q/HS88AAA=

   solution (base64-encoded): G3xCDT8/Pz8/Aj8EP3Q/HS89YWk=

   level 17 / 17 --- TEST 3 / 3
   Random string: hwkcycaybfyojurjzsnelxfr
   preImage (base64-encoded): /Tlc/f39/f39NhIV/f0p/TQU/f0=

   image (base64-encoded): /REu/f1Z/Qh2ZCsi/f39C/39aUQ=

   work: 17
   value: 160
   preImage after zero (base64-encoded): PzlcPz8/Pz8/NhIVPz8pPzQUAAA=

   solution (base64-encoded): PzlcPz8/Pz8/NhIVPz8pPzQUPz8=




Jennings                 Expires April 26, 2006                [Page 27]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


13.  References

13.1.  Normative References

   [1]  Josefsson, S., "The Base16, Base32, and Base64 Data Encodings",
        RFC 3548, July 2003.

   [2]  Bradner, S., "Key words for use in RFCs to Indicate Requirement
        Levels", BCP 14, RFC 2119, March 1997.

   [3]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,
        Peterson, J., Sparks, R., Handley, M., and E. Schooler, "SIP:
        Session Initiation Protocol", RFC 3261, June 2002.

   [4]  Eastlake, D. and P. Jones, "US Secure Hash Algorithm 1 (SHA1)",
        RFC 3174, September 2001.

13.2.  Informational References

   [5]  Black, A., "http://www.hashcash.org/", February 2005.

   [6]  Peterson, J. and C. Jennings, "Enhancements for Authenticated
        Identity Management in the Session Initiation  Protocol (SIP)",
        draft-ietf-sip-identity-05 (work in progress), May 2005.

   [7]  Rosenberg, J., "The Session Initiation Protocol (SIP) and Spam",
        draft-ietf-sipping-spam-00 (work in progress), February 2005.
























Jennings                 Expires April 26, 2006                [Page 28]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


Author's Address

   Cullen Jennings
   Cisco Systems
   170 West Tasman Drive
   MS: SJC-21/2
   San Jose, CA  95134
   USA

   Phone: +1 408 421 9990
   Email: fluffy@cisco.com








































Jennings                 Expires April 26, 2006                [Page 29]

Internet-Draft          SIP Puzzles Against SPAM            October 2005


Intellectual Property Statement

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.


Disclaimer of Validity

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Copyright Statement

   Copyright (C) The Internet Society (2005).  This document is subject
   to the rights, licenses and restrictions contained in BCP 78, and
   except as set forth therein, the authors retain all their rights.


Acknowledgment

   Funding for the RFC Editor function is currently provided by the
   Internet Society.




Jennings                 Expires April 26, 2006                [Page 30]

