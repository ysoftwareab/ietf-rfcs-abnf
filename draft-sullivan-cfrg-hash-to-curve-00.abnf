u = HashToBase(alpha)
x = (v^2 - b - (u^6 / 27))^(1/3) + (u^2 / 3)
y = ux + v

p = 394020061963944792122790401001436138050797392704654466679482934042 \
F = GF(p)
A = p - 3
B = 0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875a \
q = 394020061963944792122790401001436138050797392704654466679469052796 \
E = EllipticCurve([F(A), F(B)])
g = E(0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a \
u = F(u)
v = (3*A - u^4)//(6*u)
x = (v^2 - B - u^6/27)^((2*p-1)//3) + u^2/3
y = u*x + v
u = F(u)
u2 = u ^ 2
t2 = u2 ^ 2
v1 = 3 * A
v1 = v1 - t2
t1 = 6 * u
t3 = t1 ^ (-1)
v = v1 * t3
x = v ^ 2
x = x - B
t1 = F(27) ^ (-1)
t1 = t1 * u2
t1 = t1 * t2
x = x - t1
t1 = (2 * p) - 1
t1 = t1 / 3
x = x ^ t1

t2 = u2 / 3
x = x + t2
y = u * x
y = y + v
p = 115792089210356248762697446949407573530086143415290314195533631308 \
F = GF(p)
A = F(p - 3)
B = F(ZZ("5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2 \
E = EllipticCurve([A, B])

t = F(alpha)

alpha = -(t^2)
frac = (1 / (alpha^2 + alpha))
x2 = (-B / A) * (1 + frac)

x3 = alpha * x2
h2 = x2^3 + A * x2 + B
h3 = x3^3 + A * x3 + B

t = F(alpha)

alpha = t^2
alpha = alpha * -1

right = alpha^2 + alpha
right = right^(-1)
right = right + 1

left = B * -1
left = left / A

x2 = left * right
x3 = alpha * x2

h2 = x2 ^ 3
i2 = x2 * A
i2 = i2 + B
h2 = h2 + i2

h3 = x3 ^ 3
i3 = x3 * A
i3 = i3 + B
h3 = h3 + i3

y1 = h2^((p + 1) // 4)
y2 = h3^((p + 1) // 4)

e = y1^2 == h2

x = x2
x = x3

y = y1
y = y2

p = 2**255 - 19
F = GF(p)
A = 486662
B = 1
E = EllipticCurve(F, [0, A, 0, 1, 0])

r = F(alpha)

u = F(2) # F(2)
x = -A / (1 + (u * r^2))
y = curve25519(x)
y = y.square_root()
x = (-A * u * r^2) / (1 + (u * r^2))
y = curve25519(x).square_root()

r = F(alpha)

r = r^2
r = r * 2
r = r + 1
r = r^(-1)
v = A * r
v = v * -1 # d

v2 = v^2
v3 = v * v2
e = v3 + v
v2 = v2 * A
e = v2 + e

e = e^((p - 1) / 2)

nv = v * -1
v = nv

v2 = 0
v2 = A

u = v - v2

