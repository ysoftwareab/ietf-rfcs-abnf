mac = MAC(key, sequence_number || unencrypted_packet)

      where unencrypted_packet is the entire packet without MAC (the
      length fields, payload and padding), and sequence_number is an
      implicit packet sequence number represented as uint32.  The
      sequence number is initialized to zero for the first packet, and
      is incremented after every packet (regardless of whether
      encryption or MAC is in use).  It is never reset, even if
      keys/algorithms are renegotiated later.  It wraps around to zero
      after every 2^32 packets.  The packet sequence number itself is
      not included in the packet sent over the wire.

      The MAC algorithms for each direction MUST run independently, and
      implementations MUST allow choosing the algorithm independently
      for both directions.

      The MAC bytes resulting from the MAC algorithm MUST be transmitted
      without encryption as the last part of the packet.  The number of
      MAC bytes depends on the algorithm chosen.

length = 20)
length = 12, key length = 20)
length = 16)
length = 12, key length = 16)
K1 = HASH(K || H || X || session_id)   (X is e.g. "A")
K2 = HASH(K || H || K1)
K3 = HASH(K || H || K1 || K2)
key = K1 || K2 || K3 || ...

      This process will lose entropy if the amount of entropy in K is
      larger than the internal state size of HASH.

