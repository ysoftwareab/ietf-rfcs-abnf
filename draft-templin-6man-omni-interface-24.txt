



Network Working Group                                    F. Templin, Ed.
Internet-Draft                                        The Boeing Company
Updates: rfc4193, rfc4291, rfc4443,                            A. Whyman
         rfc8201 (if approved)           MWA Ltd c/o Inmarsat Global Ltd
Intended status: Standards Track                            June 2, 2020
Expires: December 4, 2020


   Transmission of IPv6 Packets over Overlay Multilink Network (OMNI)
                               Interfaces
                  draft-templin-6man-omni-interface-24

Abstract

   Mobile nodes (e.g., aircraft of various configurations, terrestrial
   vehicles, seagoing vessels, enterprise wireless devices, etc.)
   communicate with networked correspondents over multiple access
   network data links and configure mobile routers to connect end user
   networks.  A multilink interface specification is therefore needed
   for coordination with the network-based mobility service.  This
   document specifies the transmission of IPv6 packets over Overlay
   Multilink Network (OMNI) Interfaces.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 4, 2020.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of



Templin & Whyman        Expires December 4, 2020                [Page 1]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   4
   3.  Requirements  . . . . . . . . . . . . . . . . . . . . . . . .   7
   4.  Overlay Multilink Network (OMNI) Interface Model  . . . . . .   7
   5.  Maximum Transmission Unit (MTU) and Fragmentation . . . . . .  10
     5.1.  Fragmentation Security Implications . . . . . . . . . . .  12
   6.  Frame Format  . . . . . . . . . . . . . . . . . . . . . . . .  13
   7.  Link-Local Addresses (LLAs) . . . . . . . . . . . . . . . . .  13
   8.  Unique-Local Addresses (ULAs) . . . . . . . . . . . . . . . .  14
   9.  Address Mapping - Unicast . . . . . . . . . . . . . . . . . .  15
     9.1.  Sub-Options . . . . . . . . . . . . . . . . . . . . . . .  16
       9.1.1.  Pad1  . . . . . . . . . . . . . . . . . . . . . . . .  17
       9.1.2.  PadN  . . . . . . . . . . . . . . . . . . . . . . . .  17
       9.1.3.  ifIndex-tuple (Type 1)  . . . . . . . . . . . . . . .  17
       9.1.4.  ifIndex-tuple (Type 2)  . . . . . . . . . . . . . . .  20
       9.1.5.  MS-Register . . . . . . . . . . . . . . . . . . . . .  20
       9.1.6.  MS-Release  . . . . . . . . . . . . . . . . . . . . .  21
       9.1.7.  Network Access Identifier (NAI) . . . . . . . . . . .  21
       9.1.8.  Geo Coordiantes . . . . . . . . . . . . . . . . . . .  21
   10. Address Mapping - Multicast . . . . . . . . . . . . . . . . .  22
   11. Conceptual Sending Algorithm  . . . . . . . . . . . . . . . .  22
     11.1.  Multiple OMNI Interfaces . . . . . . . . . . . . . . . .  23
   12. Router Discovery and Prefix Registration  . . . . . . . . . .  23
     12.1.  Multihop Router Discovery  . . . . . . . . . . . . . . .  26
   13. Secure Redirection  . . . . . . . . . . . . . . . . . . . . .  27
   14. AR and MSE Resilience . . . . . . . . . . . . . . . . . . . .  28
   15. Detecting and Responding to MSE Failures  . . . . . . . . . .  28
   16. Transition Considerations . . . . . . . . . . . . . . . . . .  29
   17. OMNI Interfaces on the Open Internet  . . . . . . . . . . . .  29
   18. Time-Varying MNPs . . . . . . . . . . . . . . . . . . . . . .  30
   19. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  30
   20. Security Considerations . . . . . . . . . . . . . . . . . . .  31
   21. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  32
   22. References  . . . . . . . . . . . . . . . . . . . . . . . . .  32
     22.1.  Normative References . . . . . . . . . . . . . . . . . .  32
     22.2.  Informative References . . . . . . . . . . . . . . . . .  34
   Appendix A.  Type 1 ifIndex-tuple Traffic Classifier Preference
                Encoding . . . . . . . . . . . . . . . . . . . . . .  38
   Appendix B.  VDL Mode 2 Considerations  . . . . . . . . . . . . .  39



Templin & Whyman        Expires December 4, 2020                [Page 2]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   Appendix C.  MN / AR Isolation Through L2 Address Mapping . . . .  40
   Appendix D.  Change Log . . . . . . . . . . . . . . . . . . . . .  41
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  46

1.  Introduction

   Mobile Nodes (MNs) (e.g., aircraft of various configurations,
   terrestrial vehicles, seagoing vessels, enterprise wireless devices,
   etc.) often have multiple data links for communicating with networked
   correspondents.  These data links may have diverse performance, cost
   and availability properties that can change dynamically according to
   mobility patterns, flight phases, proximity to infrastructure, etc.
   MNs coordinate their data links in a discipline known as "multilink",
   in which a single virtual interface is configured over the underlying
   data links.

   The MN configures a virtual interface (termed the "Overlay Multilink
   Network (OMNI) interface") as a thin layer over the underlying Access
   Network (ANET) interfaces.  The OMNI interface is therefore the only
   interface abstraction exposed to the IPv6 layer and behaves according
   to the Non-Broadcast, Multiple Access (NBMA) interface principle,
   while underlying interfaces appear as link layer communication
   channels in the architecture.  The OMNI interface connects to a
   virtual overlay service known as the "OMNI link".  The OMNI link
   spans one or more Internetworks that may include private-use
   infrastructures and/or the global public Internet itself.

   Each MN receives a Mobile Network Prefix (MNP) for numbering
   downstream-attached End User Networks (EUNs) independently of the
   access network data links selected for data transport.  The MN
   performs router discovery over the OMNI interface (i.e., similar to
   IPv6 customer edge routers [RFC7084]) and acts as a mobile router on
   behalf of its EUNs.  The router discovery process is iterated over
   each of the OMNI interface's underlying interfaces in order to
   register per-link parameters (see Section 12).

   The OMNI interface provides a multilink nexus for exchanging inbound
   and outbound traffic via the correct underlying interface(s).  The
   IPv6 layer sees the OMNI interface as a point of connection to the
   OMNI link.  Each OMNI link has one or more associated Mobility
   Service Prefixes (MSPs) from which OMNI link MNPs are derived.  If
   there are multiple OMNI links, the IPv6 layer will see multiple OMNI
   interfaces.

   MNs may connect to multiple distinct OMNI links by configuring
   multiple OMNI interfaces, e.g., omni0, omni1, omni2, etc.  Each OMNI
   interface is configured over a set of underlying interfaces and
   provides a nexus for Safety-Based Multilink (SBM) operation.  The IP



Templin & Whyman        Expires December 4, 2020                [Page 3]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   layer selects an OMNI interface based on SBM routing considerations,
   then the selected interface applies Performance-Based Multilink (PBM)
   to select the correct underlying interface.  Applications can apply
   Segment Routing [RFC8402] to select independent SBM topologies for
   fault tolerance.

   The OMNI interface interacts with a network-based Mobility Service
   (MS) through IPv6 Neighbor Discovery (ND) control message exchanges
   [RFC4861].  The MS provides Mobility Service Endpoints (MSEs) that
   track MN movements and represent their MNPs in a global routing or
   mapping system.

   This document specifies the transmission of IPv6 packets [RFC8200]
   and MN/MS control messaging over OMNI interfaces.

2.  Terminology

   The terminology in the normative references applies; especially, the
   terms "link" and "interface" are the same as defined in the IPv6
   [RFC8200] and IPv6 Neighbor Discovery (ND) [RFC4861] specifications.
   Also, the Protocol Constants defined in Section 10 of [RFC4861] are
   used in their same format and meaning in this document.  The terms
   "All-Routers multicast", "All-Nodes multicast" and "Subnet-Router
   anycast" are the same as defined in [RFC4291] (with Link-Local scope
   assumed).

   The following terms are defined within the scope of this document:

   Mobile Node (MN)
      an end system with a mobile router having multiple distinct
      upstream data link connections that are grouped together in one or
      more logical units.  The MN's data link connection parameters can
      change over time due to, e.g., node mobility, link quality, etc.
      The MN further connects a downstream-attached End User Network
      (EUN).  The term MN used here is distinct from uses in other
      documents, and does not imply a particular mobility protocol.

   End User Network (EUN)
      a simple or complex downstream-attached mobile network that
      travels with the MN as a single logical unit.  The IPv6 addresses
      assigned to EUN devices remain stable even if the MN's upstream
      data link connections change.

   Mobility Service (MS)
      a mobile routing service that tracks MN movements and ensures that
      MNs remain continuously reachable even across mobility events.
      Specific MS details are out of scope for this document.




Templin & Whyman        Expires December 4, 2020                [Page 4]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   Mobility Service Endpoint (MSE)
      an entity in the MS (either singular or aggregate) that
      coordinates the mobility events of one or more MN.

   Mobility Service Prefix (MSP)
      an aggregated IPv6 prefix (e.g., 2001:db8::/32) advertised to the
      rest of the Internetwork by the MS, and from which more-specific
      Mobile Network Prefixes (MNPs) are derived.

   Mobile Network Prefix (MNP)
      a longer IPv6 prefix taken from an MSP (e.g.,
      2001:db8:1000:2000::/56) and assigned to a MN.  MNs sub-delegate
      the MNP to devices located in EUNs.

   Access Network (ANET)
      a data link service network (e.g., an aviation radio access
      network, satellite service provider network, cellular operator
      network, wifi network, etc.) that connects MNs.  Physical and/or
      data link level security between the MN and ANET are assumed.

   Access Router (AR)
      a first-hop router in the ANET for connecting MNs to
      correspondents in outside Internetworks.

   ANET interface
      a MN's attachment to a link in an ANET.

   Internetwork (INET)
      a connected network region with a coherent IP addressing plan that
      provides transit forwarding services for ANET MNs and INET
      correspondents.  Examples include private enterprise networks,
      ground domain aviation service networks and the global public
      Internet itself.

   INET interface
      a node's attachment to a link in an INET.

   OMNI link
      a virtual overlay configured over one or more INETs and their
      connected ANETs.  An OMNI link can comprise multiple INET segments
      joined by bridges the same as for any link; the addressing plans
      in each segment may be mutually exclusive and managed by different
      administrative entities.

   OMNI interface
      a node's attachment to an OMNI link, and configured over one or
      more underlying ANET/INET interfaces.




Templin & Whyman        Expires December 4, 2020                [Page 5]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   OMNI link local address (LLA)
      an IPv6 link-local address constructed as specified in Section 7,
      and assigned to an OMNI interface.

   OMNI Option
      an IPv6 Neighbor Discovery option providing multilink parameters
      for the OMNI interface as specified in Section 9.

   Multilink
      an OMNI interface's manner of managing diverse underlying data
      link interfaces as a single logical unit.  The OMNI interface
      provides a single unified interface to upper layers, while
      underlying data link selections are performed on a per-packet
      basis considering factors such as DSCP, flow label, application
      policy, signal quality, cost, etc.  Multilinking decisions are
      coordinated in both the outbound (i.e.  MN to correspondent) and
      inbound (i.e., correspondent to MN) directions.

   L2
      The second layer in the OSI network model.  Also known as "layer-
      2", "link-layer", "sub-IP layer", "data link layer", etc.

   L3
      The third layer in the OSI network model.  Also known as "layer-
      3", "network-layer", "IPv6 layer", etc.

   underlying interface
      an ANET/INET interface over which an OMNI interface is configured.
      The OMNI interface is seen as a L3 interface by the IP layer, and
      each underlying interface is seen as a L2 interface by the OMNI
      interface.

   Mobility Service Identification (MSID)
      Each MSE and AR is assigned a unique 32-bit Identification (MSID)
      as specified in Section 7.

   Safety-Based Multilink (SBM)
      A means for ensuring fault tolerance through redundancy by
      connecting multiple independent OMNI interfaces to independent
      routing topologies (i.e., multiple independent OMNI links).

   Performance Based Multilink (PBM)
      A means for selecting underlying interface(s) for packet
      trasnmission and reception within a single OMNI interface.







Templin & Whyman        Expires December 4, 2020                [Page 6]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


3.  Requirements

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119][RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   An implementation is not required to internally use the architectural
   constructs described here so long as its external behavior is
   consistent with that described in this document.

4.  Overlay Multilink Network (OMNI) Interface Model

   An OMNI interface is a MN virtual interface configured over one or
   more underlying interfaces, which may be physical (e.g., an
   aeronautical radio link) or virtual (e.g., an Internet or higher-
   layer "tunnel").  The MN receives a MNP from the MS, and coordinates
   with the MS through IPv6 ND message exchanges.  The MN uses the MNP
   to construct a unique OMNI LLA through the algorithmic derivation
   specified in Section 7 and assigns the LLA to the OMNI interface.

   The OMNI interface architectural layering model is the same as in
   [RFC5558][RFC7847], and augmented as shown in Figure 1.  The IP layer
   therefore sees the OMNI interface as a single L3 interface with
   multiple underlying interfaces that appear as L2 communication
   channels in the architecture.

                                     +----------------------------+
                                     |    Upper Layer Protocol    |
              Session-to-IP    +---->|                            |
              Address Binding  |     +----------------------------+
                               +---->|           IP (L3)          |
              IP Address       +---->|                            |
              Binding          |     +----------------------------+
                               +---->|       OMNI Interface       |
              Logical-to-      +---->|         (OMNI LLA)         |
              Physical         |     +----------------------------+
              Interface        +---->|  L2  |  L2  |       |  L2  |
              Binding                |(IF#1)|(IF#2)| ..... |(IF#n)|
                                     +------+------+       +------+
                                     |  L1  |  L1  |       |  L1  |
                                     |      |      |       |      |
                                     +------+------+       +------+

           Figure 1: OMNI Interface Architectural Layering Model





Templin & Whyman        Expires December 4, 2020                [Page 7]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   The OMNI virtual interface model gives rise to a number of
   opportunities:

   o  since OMNI LLAs are uniquely derived from an MNP, no Duplicate
      Address Detection (DAD) or Muticast Listener Discovery (MLD)
      messaging is necessary.

   o  ANET interfaces do not require any L3 addresses (i.e., not even
      link-local) in environments where communications are coordinated
      entirely over the OMNI interface.  (An alternative would be to
      also assign the same OMNI LLA to all ANET interfaces.)

   o  as ANET interface properties change (e.g., link quality, cost,
      availability, etc.), any active ANET interface can be used to
      update the profiles of multiple additional ANET interfaces in a
      single message.  This allows for timely adaptation and service
      continuity under dynamically changing conditions.

   o  coordinating ANET interfaces in this way allows them to be
      represented in a unified MS profile with provisions for mobility
      and multilink operations.

   o  exposing a single virtual interface abstraction to the IPv6 layer
      allows for multilink operation (including QoS based link
      selection, packet replication, load balancing, etc.) at L2 while
      still permitting L3 traffic shaping based on, e.g., DSCP, flow
      label, etc.

   o  L3 sees the OMNI interface as a point of connection to the OMNI
      link; if there are multiple OMNI links (i.e., multiple MS's), L3
      will see multiple OMNI interfaces.

   o  Multiple independent OMNI interfaces can be used for increased
      fault tolerance through Safety-Based Multilink (SBM), with
      Performance-Based Multilink (PBM) applied within each interface.

   Other opportunities are discussed in [RFC7847].

   Figure 2 depicts the architectural model for a MN connecting to the
   MS via multiple independent ANETs.  When an underlying interface
   becomes active, the MN's OMNI interface sends native (i.e.,
   unencapsulated) IPv6 ND messages via the underlying interface.  IPv6
   ND messages traverse the ground domain ANETs until they reach an
   Access Router (AR#1, AR#2, .., AR#n).  The AR then coordinates with a
   Mobility Service Endpoint (MSE#1, MSE#2, ..., MSE#m) in the INET and
   returns an IPv6 ND message response to the MN.  IPv6 ND messages
   traverse the ANET at layer 2; hence, the Hop Limit is not
   decremented.



Templin & Whyman        Expires December 4, 2020                [Page 8]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


                           +--------------+
                           |      MN      |
                           +--------------+
                           |OMNI interface|
                           +----+----+----+
                  +--------|IF#1|IF#2|IF#n|------ +
                 /         +----+----+----+        \
                /                 |                 \
               /    <---- Native  |  IP ---->        \
              v                   v                   v
           (:::)-.              (:::)-.              (:::)-.
      .-(::ANET:::)        .-(::ANET:::)        .-(::ANET:::)
        `-(::::)-'           `-(::::)-'           `-(::::)-'
          +----+               +----+               +----+
    ...   |AR#1|  ..........   |AR#2|   .........   |AR#n|  ...
   .      +-|--+               +-|--+               +-|--+     .
   .        |                    |                    |
   .        v                    v                    v        .
   .               <-----  Encapsulation ----->                .
   .                                                           .
   .      +-----+               (:::)-.                        .
   .      |MSE#2|           .-(::::::::)          +-----+      .
   .      +-----+       .-(:::   INET  :::)-.     |MSE#m|      .
   .                  (:::::    Routing  ::::)    +-----+      .
   .                     `-(::: System :::)-'                  .
   .  +-----+                `-(:::::::-'                      .
   .  |MSE#1|          +-----+               +-----+           .
   .  +-----+          |MSE#3|               |MSE#4|           .
   .                   +-----+               +-----+           .
   .                                                           .
   .                                                           .
   .       <----- Worldwide Connected Internetwork ---->       .
    ...........................................................

              Figure 2: MN/MS Coordination via Multiple ANETs

   After the initial IPv6 ND message exchange, the MN can send and
   receive unencapsulated IPv6 data packets over the OMNI interface.
   OMNI interface multilink services will forward the packets via ARs in
   the correct underlying ANETs.  The AR encapsulates the packets
   according to the capabilities provided by the MS and forwards them to
   the next hop within the worldwide connected Internetwork via optimal
   routes.

   OMNI links span one or more underlying Internetwork via a mid-layer
   overlay encapsulation based on [RFC2473] and using [RFC4193]
   addressing.  Each OMNI link corresponds to a different overlay
   (differentiated by an address codepoint) which may be carried over a



Templin & Whyman        Expires December 4, 2020                [Page 9]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   completely separate underlying topology.  Each MN can facilitate SBM
   by connecting to multiple OMNI links using a distinct OMNI interface
   for each link.

5.  Maximum Transmission Unit (MTU) and Fragmentation

   The OMNI interface observes the link nature of tunnels, including the
   Maximum Transmission Unit (MTU) and the role of fragmentation and
   reassembly[I-D.ietf-intarea-tunnels].  The OMNI interface is
   configured over one or more underlying interfaces that may have
   diverse MTUs.

   IPv6 underlying interfaces are REQUIRED to configure a minimum MTU of
   1280 bytes [RFC8200].  The network therefore MUST forward packets of
   at least 1280 bytes without generating an IPv6 Path MTU Discovery
   (PMTUD) Packet Too Big (PTB) message [RFC8201].  The minimum MTU for
   IPv4 underlying interfaces is only 68 bytes [RFC1122], meaning that a
   packet smaller than the IPv6 minimum MTU may require fragmentation
   when IPv4 encapsulation is used.  Therefore, the Don't Fragment (DF)
   bit in the IPv4 encapsulation header MUST be set to 0

   The OMNI interface configures an MTU of 9180 bytes [RFC2492]; the
   size is therefore not a reflection of the underlying interface MTUs,
   but rather determines the largest packet the OMNI interface can
   forward or reassemble.  The OMNI interface therefore accommodates
   packets as large as the OMNI interface MTU while generating IPv6 Path
   MTU Discovery (PMTUD) Packet Too Big (PTB) messages [RFC8201] as
   necessary (see below).  For IPv4 packets with DF=0, the IP layer
   performs IPv4 fragmentation if necessary to admit the fragments into
   the OMNI interface.  The interface may then internally apply further
   IPv4 fragmentation prior to encapsulation to ensure that the IPv4
   fragments are delivered to the final destination.

   OMNI interfaces internally employ OMNI link encapsulation and
   fragmentation/reassembly per [RFC2473].  The encapsulation inserts a
   mid-layer IPv6 header between the inner IP packet and any outer IP
   encapsulation headers.  The OMNI interface returns internally-
   generated PTB messages for packets admitted into the interface that
   it deems too large (e.g., according to link performance
   characteristics, reassembly cost, etc.) while either dropping or
   forwarding the packet as necessary.  The OMNI interface performs
   PMTUD even if the destination appears to be on the same link since an
   OMNI link node on the path may return a PTB.  This ensures that the
   path MTU is adaptive and reflects the current path used for a given
   data flow.

   OMNI interfaces perform encapsulation and fragmentation/reassembly as
   follows:



Templin & Whyman        Expires December 4, 2020               [Page 10]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   o  When an OMNI interface sends a packet toward a final destination
      via an ANET peer, it sends without OMNI link encapsulation if the
      packet is no larger than the underlying interface MTU.  Otherwise,
      it inserts an IPv6 header with source address set to the node's
      own OMNI Unique Local Address (ULA) (see: Section 8) and
      destination set to the OMNI ULA of the ANET peer.  The OMNI
      interface then uses IPv6 fragmentation to break the packet into a
      minimum number of non-overlapping fragments, where the largest
      fragment size is determined by the underlying interface MTU and
      the smallest fragment is no smaller than 640 bytes.  The OMNI
      interface then sends the fragments to the ANET peer, which
      reassembles before forwarding toward the final destination.

   o  When an OMNI interface sends a packet toward a final destination
      via an INET interface, it sends packets no larger than 1280 bytes
      (including any INET encapsulation headers) without inserting a
      mid-layer IPv6 header if the destination is reached via an INET
      address within the same OMNI link segment.  Otherwise, it inserts
      an IPv6 header with source address set to the node's OMNI ULA,
      destination set to the ULA of the next hop OMNI node toward the
      final destination and (if necessary) with a Segment Routing Header
      with the remaining Segment IDs on the path to the final
      destination.  The OMNI interface then uses IPv6 fragmentation to
      break the encapsulated packet into a minimum number of non-
      overlapping fragments, where the largest fragment size (including
      both the OMNI mid-layer IPv6 and outer-layer INET encapsulations)
      is 1280 bytes and the smallest fragment is no smaller than 640
      bytes.  The OMNI interface then encapsulates the fragments in any
      INET headers and sends them to the OMNI link neighbor, which
      reassembles before forwarding toward the final destination.

   OMNI interfaces unconditionally drop all OMNI link fragments smaller
   than 640 bytes.  In order to set the correct context for reassembly,
   the OMNI interface that inserts the IPv6 header MUST also be the one
   that inserts the IPv6 Fragment Header Identification value.  While
   not strictly required, sending all fragments of the same fragmented
   mid-layer packet consecutively over the same underlying interface
   with minimal inter-fragment delay can in some cases increase the
   likelihood of successful reassembly.

   Note that the OMNI interface can forward large packets via
   encapsulation and fragmentation while at the same time returning
   "advisory" PTB messages (subject to rate limiting).  The receiving
   node that performs reassembly can also send advisory PTB messages if
   reassembly conditions become unfavorable.  The OMNI interface can
   therefore continuously forward large packets without loss while
   returning advisory PTB messages recommending a smaller size.




Templin & Whyman        Expires December 4, 2020               [Page 11]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   OMNI interfaces that send advisory PTB messages set the ICMPv6
   message header Code field to the value 1.  Receiving nodes that
   recognize the code reduce their estimate of the path MTU the same as
   for ordinary "diagnistic" PTBs but do not regard the message as a
   loss indication.  Nodes that do not recognize the code treat the
   message the same as a diagnostic PTB, but should heed the advice in
   [RFC8201] regarding retransmissions.  This document therefore updates
   [RFC4443] and [RFC8201].

5.1.  Fragmentation Security Implications

   As discussed in Section 3.7 of [I-D.ietf-intarea-frag-fragile], there
   are four basic threats concerning IPv6 fragmentation; each of which
   is addressed by a suitable mitigation as follows:

   1.  Overlapping fragment attacks - reassembly of overlapping
       fragments is forbidden by [RFC8200]; therefore, this threat does
       not apply to OMNI interfaces.

   2.  Resource exhaustion attacks - this threat is mitigated by
       providing a sufficiently large OMNI interface reassembly cache
       and instituting "fast discard" of incomplete reassemblies that
       may be part of a buffer exhaustion attack.  The reassembly cache
       should be sufficiently large so that a sustained attack does not
       cause excessive loss of good reassemblies but not so large that
       (timer-based) data structure management becomes computationally
       expensive.

   3.  Attacks based on predictable fragment identification values -
       this threat is mitigated by selecting a suitably random ID value
       per [RFC7739].

   4.  Evasion of Network Intrusion Detection Systems (NIDS) - this
       threat is mitigated by disallowing "tiny fragments" per the OMNI
       interface fragmentation procedures specified above.

   Additionally, IPv4 fragmentation includes a 16-bit Identification (IP
   ID) field with only 65535 unique values, meaning that for even
   moderately high data rates the field could wrap and apply to new
   packets while the fragments of old packets using the same ID are
   still alive in the network [RFC4963].  Since IPv6 provides a 32-bit
   Identification value, however, this is not a concern for IPv6
   fragmentation.








Templin & Whyman        Expires December 4, 2020               [Page 12]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


6.  Frame Format

   The OMNI interface transmits IPv6 packets according to the native
   frame format of each underlying interface.  For example, for
   Ethernet-compatible interfaces the frame format is specified in
   [RFC2464], for aeronautical radio interfaces the frame format is
   specified in standards such as ICAO Doc 9776 (VDL Mode 2 Technical
   Manual), for tunnels over IPv6 the frame format is specified in
   [RFC2473], etc.

7.  Link-Local Addresses (LLAs)

   OMNI interfaces construct IPv6 Link-Local Addresses (i.e., "OMNI
   LLAs") as follows:

   o  IPv6 MN OMNI LLAs encode the most-significant 112 bits of a MNP
      within the least-significant 112 bits of the IPv6 link-local
      prefix fe80::/16.  For example, for the MNP
      2001:db8:1000:2000::/56 the corresponding LLA is
      fe80:2001:db8:1000:2000::. This updates the IPv6 link-local
      address format specified in Section 2.5.6 of [RFC4291] by defining
      a use for bits 11 - 63.

   o  IPv4-compatible MN OMNI LLAs are constructed as
      fe80::ffff:[v4addr], i.e., the most significant 16 bits of the
      prefix fe80::/16, followed by 64 '0' bits, followed by 16 '1'
      bits, followed by a 32bit IPv4 address.  For example, the
      IPv4-Compatible MN OMNI LLA for 192.0.2.1 is fe80::ffff:192.0.2.1
      (also written as fe80::ffff:c000:0201).

   o  MS OMNI LLAs are assigned to ARs and MSEs from the range
      fe80::/96, and MUST be managed for uniqueness.  The lower 32 bits
      of the LLA includes a unique integer "MSID" value between
      0x00000001 and 0xfeffffff, e.g., as in fe80::1, fe80::2, fe80::3,
      etc., fe80::feff:ffff.  The MSID 0x00000000 corresponds to the
      link-local Subnet-Router anycast address (fe80::) [RFC4291].  The
      MSID range 0xff000000 through 0xffffffff is reserved for future
      use.

   o  The OMNI LLA range fe80::/32 is used as the service prefix for the
      address format specified in Section 4 of [RFC4380] (see Section 17
      for further discussion).

   Since the prefix 0000::/8 is "Reserved by the IETF" [RFC4291], no
   MNPs can be allocated from that block ensuring that there is no
   possibility for overlap between the above OMNI LLA constructs.





Templin & Whyman        Expires December 4, 2020               [Page 13]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   Since MN OMNI LLAs are based on the distribution of administratively
   assured unique MNPs, and since MS OMNI LLAs are guaranteed unique
   through administrative assignment, OMNI interfaces set the
   autoconfiguration variable DupAddrDetectTransmits to 0 [RFC4862].

8.  Unique-Local Addresses (ULAs)

   OMNI links use IPv6 Unique Local Addresses (i.e., "OMNI ULAs")
   [RFC4193] as the source and destination addresses in OMNI link IPv6
   encapsulation headers.  This document updates [RFC4193] by reserving
   the ULA prefix fc80::/10 for mapping OMNI LLAs to routable OMNI ULAs.

   Each OMNI link instance is identified by bits 10-15 of the OMNI
   service prefix fc80::/10.  For example, OMNI ULAs associated with
   instance 0 are configured from the prefix fc80::/16, instance 1 from
   fc81::/16, etc., up to instance 63 from fcbf::/16.  OMNI ULAs are
   configured in one-to-one correspondence with OMNI LLAs through
   stateless prefix translation.  For example, for OMNI link instance
   fc80::/16:

   o  the OMNI ULA corresponding to fe80:2001:db8:1:2:: is simply
      fc80:2001:db8:1:2::

   o  the OMNI ULA corresponding to fe80::ffff:192.0.2.1 is simply
      fc80::ffff:192.0.2.1

   o  the OMNI ULA corresponding to fe80::1000 is simply fc80::1000

   o  the OMNI ULA corresponding to fe80:: is simply fc80::

   Each OMNI interface assigns the Anycast OMNI ULA specific to the OMNI
   link instance, e.g., the OMNI interface connected to instance 3
   assigns the Anycast OMNI ULA fc83:. Routers that configure OMNI
   interfaces advertise the OMNI service prefix (e.g., fc83::/16) into
   the local routing system so that applications can direct traffic
   according to SBM requirements.

   The OMNI ULA presents an IPv6 address format that is routable within
   the OMNI link routing system and can be used to convey link-scoped
   messages across multiple hops using IPv6 encapsulation [RFC2473].
   The OMNI link extends across one or more underling Internetworks to
   include all ARs and MSEs.  All MNs are also considered to be
   connected to the OMNI link, however OMNI link encapsulation is
   omitted over ANET links when possible to conserve bandwidth (see:
   Section 11).

   The OMNI link can be subdivided into "segments" that often correspond
   to different administrative domains or physical partitions.  OMNI



Templin & Whyman        Expires December 4, 2020               [Page 14]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   nodes can use IPv6 Segment Routing [RFC8402] when necessary to
   support efficient packet forwarding to destinations located in other
   OMNI link segments.  A full discussion of Segment Routing over the
   OMNI link appears in [I-D.templin-intarea-6706bis].

9.  Address Mapping - Unicast

   OMNI interfaces maintain a neighbor cache for tracking per-neighbor
   state and use the link-local address format specified in Section 7.
   IPv6 Neighbor Discovery (ND) [RFC4861] messages on MN OMNI interfaces
   observe the native Source/Target Link-Layer Address Option (S/TLLAO)
   formats of the underlying interfaces (e.g., for Ethernet the S/TLLAO
   is specified in [RFC2464]).

   MNs such as aircraft typically have many wireless data link types
   (e.g. satellite-based, cellular, terrestrial, air-to-air directional,
   etc.) with diverse performance, cost and availability properties.
   The OMNI interface would therefore appear to have multiple L2
   connections, and may include information for multiple underlying
   interfaces in a single IPv6 ND message exchange.

   OMNI interfaces use an IPv6 ND option called the "OMNI option"
   formatted as shown in Figure 3:

        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |      Type     |     Length    | Prefix Length |R|   Reserved  |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                                                               |
       ~                          Sub-Options                          ~
       |                                                               |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                       Figure 3: OMNI Option Format

   In this format:

   o  Type is set to TBD.

   o  Length is set to the number of 8 octet blocks in the option.

   o  Prefix Length is set according to the IPv6 source address type.
      For MN OMNI LLAs, the value is set to the length of the embedded
      MNP.  For IPv4-compatible MN OMNI LLAs, the value is set to 96
      plus the length of the embedded IPv4 prefix.  For MS OMNI LLAs,
      the value is set to 128.




Templin & Whyman        Expires December 4, 2020               [Page 15]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   o  R (the "Register/Release" bit) is set to 1/0 to request the
      message recipient to register/release a MN's MNP.  The OMNI option
      may additionally include MSIDs for the recipient to contact to
      also register/release the MNP.

   o  Reserved is set to the value '0' on transmission and ignored on
      reception.

   o  Sub-Options is a Variable-length field, of length such that the
      complete OMNI Option is an integer multiple of 8 octets long.
      Contains one or more options, as described in Section 9.1.

9.1.  Sub-Options

   The OMNI option includes zero or more Sub-Options, some of which may
   appear multiple times in the same message.  Each consecutive Sub-
   Option is concatenated immediately after its predecessor.  All Sub-
   Options except Pad1 (see below) are type-length-value (TLV) encoded
   in the following format:

         0                   1                   2
         0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
        |   Sub-Type    |  Sub-length   | Sub-Option Data ...
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

                        Figure 4: Sub-Option Format

   o  Sub-Type is a 1-byte field that encodes the Sub-Option type.  Sub-
      Options defined in this document are:

        Option Name            Sub-Type
        Pad1                        0
        PadN                        1
        ifIndex-tuple (Type 1)      2
        ifIndex-tuple (Type 2)      3
        MS-Register                 4
        MS-Release                  5
        Network Access Identifier   6
        Geo Coordinates             7

                                 Figure 5

      Sub-Types 253 and 254 are reserved for experimentation, as
      recommended in [RFC3692].

   o  Sub-Length is a 1-byte field that encodes the length of the Sub-
      Option Data, in bytes



Templin & Whyman        Expires December 4, 2020               [Page 16]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   o  Sub-Option Data is a byte string with format determined by Sub-
      Type

   During processing, unrecognized Sub-Options are ignored and the next
   Sub-Option processed until the end of the OMNI option.

   The following Sub-Option types and formats are defined in this
   document:

9.1.1.  Pad1

         0
         0 1 2 3 4 5 6 7
        +-+-+-+-+-+-+-+-+
        |   Sub-Type=0  |
        +-+-+-+-+-+-+-+-+

                              Figure 6: Pad1

   o  Sub-Type is set to 0.

   o  No Sub-Length or Sub-Option Data follows (i.e., the "Sub-Option"
      consists of a single zero octet).

9.1.2.  PadN

         0                   1                   2
         0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
        |   Sub-Type=1  |Sub-length=N-2 | N-2 padding bytes ...
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

                              Figure 7: PadN

   o  Sub-Type is set to 1.

   o  Sub-Length is set to N-2 being the number of padding bytes that
      follow.

   o  Sub-Option Data consists of N-2 zero-valued octets.

9.1.3.  ifIndex-tuple (Type 1)









Templin & Whyman        Expires December 4, 2020               [Page 17]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Sub-Type=2  | Sub-length=4+N|    ifIndex    |    ifType     |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |  Provider ID  | Link  |S|I|RSV| Bitmap(0)=0xff|P00|P01|P02|P03|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |P04|P05|P06|P07|P08|P09|P10|P11|P12|P13|P14|P15|P16|P17|P18|P19|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |P20|P21|P22|P23|P24|P25|P26|P27|P28|P29|P30|P31| Bitmap(1)=0xff|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |P32|P33|P34|P35|P36|P37|P38|P39| ...
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

                     Figure 8: ifIndex-tuple (Type 1)

   o  Sub-Type is set to 2.

   o  Sub-Length is set to 4+N (the number of Sub-Option Data bytes that
      follow).

   o  Sub-Option Data contains an "ifIndex-tuple" (Type 1) encoded as
      follows (note that the first four bytes must be present):

      *  ifIndex is set to an 8-bit integer value corresponding to a
         specific underlying interface.  OMNI options MAY include
         multiple ifIndex-tuples, and MUST number each with an ifIndex
         value between '1' and '255' that represents a MN-specific 8-bit
         mapping for the actual ifIndex value assigned to the underlying
         interface by network management [RFC2863] (the ifIndex value
         '0' is reserved for use by the MS).  Multiple ifIndex-tuples
         with the same ifIndex value MAY appear in the same OMNI option.

      *  ifType is set to an 8-bit integer value corresponding to the
         underlying interface identified by ifIndex.  The value
         represents an OMNI interface-specific 8-bit mapping for the
         actual IANA ifType value registered in the 'IANAifType-MIB'
         registry [http://www.iana.org].

      *  Provider ID is set to an OMNI interface-specific 8-bit ID value
         for the network service provider associated with this ifIndex.

      *  Link encodes a 4-bit link metric.  The value '0' means the link
         is DOWN, and the remaining values mean the link is UP with
         metric ranging from '1' ("lowest") to '15' ("highest").






Templin & Whyman        Expires December 4, 2020               [Page 18]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


      *  S is set to '1' if this ifIndex-tuple corresponds to the
         underlying interface that is the source of the ND message.  Set
         to '0' otherwise.

      *  I is set to '0' ("Simplex") if the index for each singleton
         Bitmap byte in the Sub-Option Data is inferred from its
         sequential position (i.e., 0, 1, 2, ...), or set to '1'
         ("Indexed") if each Bitmap is preceded by an Index byte.
         Figure 8 shows the simplex case for I set to '0'.  For I set to
         '1', each Bitmap is instead preceded by an Index byte that
         encodes a value "i" = (0 - 255) as the index for its companion
         Bitmap as follows:

        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
        |   Index=i     |   Bitmap(i)   |P[*] values ...
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

                                 Figure 9

      *  RSV is set to the value 0 on transmission and ignored on
         reception.

      *  The remainder of the Sub-Option Data contains N = (0 - 251)
         bytes of traffic classifier preferences consisting of a first
         (indexed) Bitmap (i.e., "Bitmap(i)") followed by 0-8 1-byte
         blocks of 2-bit P[*] values, followed by a second Bitmap (i),
         followed by 0-8 blocks of P[*] values, etc.  Reading from bit 0
         to bit 7, the bits of each Bitmap(i) that are set to '1''
         indicate the P[*] blocks from the range P[(i*32)] through
         P[(i*32) + 31] that follow; if any Bitmap(i) bits are '0', then
         the corresponding P[*] block is instead omitted.  For example,
         if Bitmap(0) contains 0xff then the block with P[00]-P[03],
         followed by the block with P[04]-P[07], etc., and ending with
         the block with P[28]-P[31] are included (as shown in Figure 8).
         The next Bitmap(i) is then consulted with its bits indicating
         which P[*] blocks follow, etc. out to the end of the Sub-
         Option.  The first 16 P[*] blocks correspond to the 64
         Differentiated Service Code Point (DSCP) values P[00] - P[63]
         [RFC2474].  Any additional P[*] blocks that follow correspond
         to "pseudo-DSCP" traffic classifier values P[64], P[65], P[66],
         etc.  See Appendix A for further discussion and examples.

      *  Each 2-bit P[*] field is set to the value '0' ("disabled"), '1'
         ("low"), '2' ("medium") or '3' ("high") to indicate a QoS
         preference level for underlying interface selection purposes.
         Not all P[*] values need to be included in all OMNI option
         instances of a given ifIndex-tuple.  Any P[*] values
         represented in an earlier OMNI option but omitted in the



Templin & Whyman        Expires December 4, 2020               [Page 19]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


         current OMNI option remain unchanged.  Any P[*] values not yet
         represented in any OMNI option default to "medium".

9.1.4.  ifIndex-tuple (Type 2)

        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Sub-Type=3  | Sub-length=4+N|    ifIndex    |    ifType     |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |  Provider ID  | Link  |S|Resvd|                               ~
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               ~
       ~                                                               ~
       ~                RFC 6088 Format Traffic Selector               ~
       ~                                                               ~
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                     Figure 10: ifIndex-tuple (Type 2)

   o  Sub-Type is set to 3.

   o  Sub-Length is set to 4+N (the number of Sub-Option Data bytes that
      follow).

   o  Sub-Option Data contains an "ifIndex-tuple" (Type 2) encoded as
      follows (note that the first four bytes must be present):

      *  ifIndex, ifType, Provider ID, Link and S are set exactly as for
         Type 1 ifIndex-tuples as specified in Section 9.1.3.

      *  the remainder of the Sub-Option body encodes a variable-length
         traffic selector formatted per [RFC6088], beginning with the
         "TS Format" field.

9.1.5.  MS-Register

        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Sub-Type=4  | Sub-length=4  |        MSID (bits 0 - 15)     |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |      MSID (bits 16 - 32)      |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                     Figure 11: MS-Register Sub-option

   o  Sub-Type is set to 4.




Templin & Whyman        Expires December 4, 2020               [Page 20]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   o  Sub-Length is set to 4.

   o  MSID contains the 32 bit ID of an MSE or AR, in network byte
      order.  OMNI options contain zero or more MS-Register sub-options.

9.1.6.  MS-Release

        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Sub-Type=5  | Sub-length=4  |        MSID (bits 0 - 15)     |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |      MSID (bits 16 - 32)      |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                     Figure 12: MS-Release Sub-option

   o  Sub-Type is set to 5.

   o  Sub-Length is set to 4.

   o  MSIID contains the 32 bit ID of an MS or AR, in network byte
      order.  OMNI options contain zero or more MS-Release sub-options.

9.1.7.  Network Access Identifier (NAI)

        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Sub-Type=6  | Sub-length=N  |Network Access Identifier (NAI)
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ...

           Figure 13: Network Access Identifier (NAI) Sub-option

   o  Sub-Type is set to 6.

   o  Sub-Length is set to N.

   o  Network Access Identifier (NAI) is coded per [RFC7542], and is up
      to 253 bytes in length.

9.1.8.  Geo Coordiantes









Templin & Whyman        Expires December 4, 2020               [Page 21]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Sub-Type=7  | Sub-length=N  |      Geo Coordinates
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ...

                   Figure 14: Geo Coordinates Sub-option

   o  Sub-Type is set to 7.

   o  Sub-Length is set to N.

   o  A set of Geo Coordinates up to 253 bytes in length (format TBD).
      Includes Latitude/Longitude at a minimum; may also include
      additional attributes such as altitude, heading, speed, etc.).

10.  Address Mapping - Multicast

   The multicast address mapping of the native underlying interface
   applies.  The mobile router on board the MN also serves as an IGMP/
   MLD Proxy for its EUNs and/or hosted applications per [RFC4605] while
   using the L2 address of the AR as the L2 address for all multicast
   packets.

   The MN uses Multicast Listener Discovery (MLDv2) [RFC3810] to
   coordinate with the AR, and ANET L2 elements use MLD snooping
   [RFC4541].

11.  Conceptual Sending Algorithm

   The MN's IPv6 layer selects the outbound OMNI interface according to
   SBM considerations when forwarding data packets from local or EUN
   applications to external correspondents.  Each OMNI interface
   maintains a neighbor cache the same as for any IPv6 interface, but
   with additional state for multilink coordination.

   After a packet enters the OMNI interface, an outbound underlying
   interface is selected based on PBM traffic selectors such as DSCP,
   application port number, cost, performance, message size, etc.  OMNI
   interface multilink selections could also be configured to perform
   replication across multiple underlying interfaces for increased
   reliability at the expense of packet duplication.

   When an OMNI interface sends a packet over a selected outbound
   underlying interface, it omits OMNI link encapsulation if the packet
   does not require fragmentation and the neighbor can determine the
   OMNI ULAs through other means (e.g., the packet's destination,
   neighbor cache information, etc.).  Otherwise, the OMNI interface



Templin & Whyman        Expires December 4, 2020               [Page 22]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   inserts an IPv6 header with the OMNI ULAs and performs fragmentation
   if necessary.  The OMNI interface also performs enacpsulation when
   the nearest AR is located multiple hops away as discussed in
   Section 12.1.

   OMNI interface multilink service designers MUST observe the BCP
   guidance in Section 15 [RFC3819] in terms of implications for
   reordering when packets from the same flow may be spread across
   multiple underlying interfaces having diverse properties.

11.1.  Multiple OMNI Interfaces

   MNs may connect to multiple independent OMNI links concurrently in
   support of SBM.  Each OMNI interface is distinguished by its Anycast
   OMNI ULA (e.g., fc80::, fc81::, fc82::).  The MN configures a
   separate OMNI interface for each link so that multiple interfaces
   (e.g., omni0, omni1, omni2, etc.) are exposed to the IPv6 layer.  A
   different Anycast OMNI ULA is assigned to each interface, and the MN
   injects the service prefixes for the OMNI link instances into the EUN
   routing system.

   Applications in EUNs can use Segment Routing to select the desired
   OMNI interface based on SBM considerations.  The Anycast OMNI ULA is
   written into the IPv6 destination address, and the actual destination
   (along with any additional intermediate hops) is written into the
   Segment Routing Header.  Standard IP routing directs the packets to
   the MN's mobile router entity, and the Anycast OMNI ULA identifies
   the OMNI interface to be used for transmission to the next hop.  When
   the MN receives the message, it replaces the IPv6 destination address
   with the next hop found in the routing header and transmits the
   message over the OMNI interface identified by the Anycast OMNI ULA.

   Multiple distinct OMNI links can therefore be used to support fault
   tolerance, load balancing, reliability, etc.  The architectural model
   is similar to Layer 2 Virtual Local Area Networks (VLANs).

12.  Router Discovery and Prefix Registration

   MNs interface with the MS by sending RS messages with OMNI options
   under the assumption that a single AR on the ANET will process the
   message and respond.  This places a requirement on each ANET, which
   may be enforced by physical/logical partitioning, L2 AR beaconing,
   etc.  The manner in which the ANET ensures single AR coordination is
   link-specific and outside the scope of this document.

   For each underlying interface, the MN sends an RS message with an
   OMNI option with prefix registration information, ifIndex-tuples, MS-
   Register/Release suboptions containing MSIDs, and with destination



Templin & Whyman        Expires December 4, 2020               [Page 23]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   address set to link-scoped All-Routers multicast (ff02::2) [RFC4291].
   Example MSID discovery methods are given in [RFC5214], including data
   link login parameters, name service lookups, static configuration,
   etc.  Alternatively, MNs can discover individual MSIDs by sending an
   initial RS with MS-Register MSID set to 0x00000000.

   MNs configure OMNI interfaces that observe the properties discussed
   in the previous section.  The OMNI interface and its underlying
   interfaces are said to be in either the "UP" or "DOWN" state
   according to administrative actions in conjunction with the interface
   connectivity status.  An OMNI interface transitions to UP or DOWN
   through administrative action and/or through state transitions of the
   underlying interfaces.  When a first underlying interface transitions
   to UP, the OMNI interface also transitions to UP.  When all
   underlying interfaces transition to DOWN, the OMNI interface also
   transitions to DOWN.

   When an OMNI interface transitions to UP, the MN sends RS messages to
   register its MNP and an initial set of underlying interfaces that are
   also UP.  The MN sends additional RS messages to refresh lifetimes
   and to register/deregister underlying interfaces as they transition
   to UP or DOWN.  The MN sends initial RS messages over an UP
   underlying interface with its OMNI LLA as the source and with
   destination set to All-Routers multicast.  The RS messages include an
   OMNI option per Section 9 with valid prefix registration information,
   ifIndex-tuples appropriate for underlying interfaces and MS-Register/
   Release sub-options.

   ARs process IPv6 ND messages with OMNI options and act as a proxy for
   MSEs.  ARs receive RS messages and create a neighbor cache entry for
   the MN, then coordinate with any named MSIDs in a manner outside the
   scope of this document.  The AR returns an RA message with
   destination address set to the MN OMNI LLA (i.e., unicast), with
   source address set to its MS OMNI LLA, with the P(roxy) bit set in
   the RA flags [RFC4389][RFC5175], with an OMNI option with valid
   prefix registration information, ifIndex-tuples, MS-Register/Release
   sub-options, and with any information for the link that would
   normally be delivered in a solicited RA message.  ARs return RA
   messages with configuration information in response to a MN's RS
   messages.  The AR sets the RA Cur Hop Limit, M and O flags, Router
   Lifetime, Reachable Time and Retrans Timer values, and includes any
   necessary options such as:

   o  PIOs with (A; L=0) that include MSPs for the link [RFC8028].

   o  RIOs [RFC4191] with more-specific routes.





Templin & Whyman        Expires December 4, 2020               [Page 24]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   o  an MTU option that specifies the maximum acceptable packet size
      for this ANET interface.

   The AR coordinates with each Register/Release MSID then sends an
   immediate unicast RA response without delay; therefore, the IPv6 ND
   MAX_RA_DELAY_TIME and MIN_DELAY_BETWEEN_RAS constants for multicast
   RAs do not apply.  The AR MAY send periodic and/or event-driven
   unsolicited RA messages according to the standard [RFC4861].

   When the MSE processes the OMNI information, it first validates the
   prefix registration information.  The MSE then injects/withdraws the
   MNP in the routing/mapping system and caches/discards the new Prefix
   Length, MNP and ifIndex-tuples.  The MSE then informs the AR of
   registration success/failure, and the AR adds the MSE to the list of
   Register/Release MSIDs to return in an RA message OMNI option per
   Section 9.

   When the MN receives the RA message, it creates an OMNI interface
   neighbor cache entry with the AR's address as an L2 address and
   records the MSIDs that have confirmed MNP registration via this AR.
   If the MN connects to multiple ANETs, it establishes additional AR L2
   addresses (i.e., as a Multilink neighbor).  The MN then manages its
   underlying interfaces according to their states as follows:

   o  When an underlying interface transitions to UP, the MN sends an RS
      over the underlying interface with an OMNI option with R set to 1.
      The OMNI option contains at least one ifIndex-tuple with values
      specific to this underlying interface, and may contain additional
      ifIndex-tuples specific to this and/or other underlying
      interfaces.  The option also includes any Register/Release MSIDs.

   o  When an underlying interface transitions to DOWN, the MN sends an
      RS or unsolicited NA message over any UP underlying interface with
      an OMNI option containing an ifIndex-tuple for the DOWN underlying
      interface with Link set to '0'.  The MN sends an RS when an
      acknowledgement is required, or an unsolicited NA when reliability
      is not thought to be a concern (e.g., if redundant transmissions
      are sent on multiple underlying interfaces).

   o  When the Router Lifetime for a specific AR nears expiration, the
      MN sends an RS over the underlying interface to receive a fresh
      RA.  If no RA is received, the MN marks the underlying interface
      as DOWN.

   o  When a MN wishes to release from one or more current MSIDs, it
      sends an RS or unsolicited NA message over any UP underlying
      interfaces with an OMNI option with a Release MSID.  Each MSID




Templin & Whyman        Expires December 4, 2020               [Page 25]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


      then withdraws the MNP from the routing/mapping system and informs
      the AR that the release was successful.

   o  When all of a MNs underlying interfaces have transitioned to DOWN
      (or if the prefix registration lifetime expires), any associated
      MSEs withdraw the MNP the same as if they had received a message
      with a release indication.

   The MN is responsible for retrying each RS exchange up to
   MAX_RTR_SOLICITATIONS times separated by RTR_SOLICITATION_INTERVAL
   seconds until an RA is received.  If no RA is received over a an UP
   underlying interface, the MN declares this underlying interface as
   DOWN.

   The IPv6 layer sees the OMNI interface as an ordinary IPv6 interface.
   Therefore, when the IPv6 layer sends an RS message the OMNI interface
   returns an internally-generated RA message as though the message
   originated from an IPv6 router.  The internally-generated RA message
   contains configuration information that is consistent with the
   information received from the RAs generated by the MS.  Whether the
   OMNI interface IPv6 ND messaging process is initiated from the
   receipt of an RS message from the IPv6 layer is an implementation
   matter.  Some implementations may elect to defer the IPv6 ND
   messaging process until an RS is received from the IPv6 layer, while
   others may elect to initiate the process proactively.

   Note: The Router Lifetime value in RA messages indicates the time
   before which the MN must send another RS message over this underlying
   interface (e.g., 600 seconds), however that timescale may be
   significantly longer than the lifetime the MS has committed to retain
   the prefix registration (e.g., REACHABLETIME seconds).  ARs are
   therefore responsible for keeping MS state alive on a shorter
   timescale than the MN is required to do on its own behalf.

   Note: On multicast-capable underlying interfaces, MNs should send
   periodic unsolicited multicast NA messages and ARs should send
   periodic unsolicited multicast RA messages as "beacons" that can be
   heard by other nodes on the link.  If a node fails to receive a
   beacon after a timeout value specific to the link, it can initiate a
   unicast exchange to test reachability.

12.1.  Multihop Router Discovery

   On some ANET types (e.g., omni-directional ad-hoc wireless) a MN may
   be located multiple hops away from a node which has connectivity to
   the nearest AR.  Forwarding through these multiple hops would be
   conducted through the application of a Mobile Ad-hoc Network (MANET)
   routing protocol operating across the ANET interfaces.



Templin & Whyman        Expires December 4, 2020               [Page 26]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   A MN located potentially multiple ANET hops away from the nearst AR
   prepares an RS message as normal then encapsulates the message in an
   IPv6 header with source address set to the ULA corresponding to the
   RS LLA source address, and with destination set to site-scoped All-
   Routers multicast (ff05::2)[RFC4291].  The MN then sends the
   encapsulated RS message via the ANET interface, where it will be
   received by zero or more nearby intermediate MNs.

   When an intermediate MN that particpates in the MANET routing
   protocol receives the encapsulated RS, it forwards the message
   according to its (ULA-based) MANET routing tables.  This process
   repeats iteratively until the RS message is received by an ultimate
   MN that is within communications range of an AR, which forwards the
   message to the AR.

   When the AR receives the RS message, it coordinates with the MS the
   same as if the message were received as an ordinary link-local RS,
   since the inner Hop Limit will not have been decremented by the MANET
   multihop forwarding process.  The AR then prepares an RA message with
   source address set to its own LLA and destination address set to the
   LLA of the original MN, then encapsulates the message in an IPv6
   header with source and destination set to the ULAs corresponding to
   the inner header.

   The AR then forwards the message to an MN within communications
   range, which forwards the message according to its MANET routing
   tables to an intermediate MN.  The MANET forwarding process continues
   repetitively until the message is delivered to the original MN, which
   decapsulates the message and performs autoconfiguration the same as
   if it had received the RA directly from an AR.

   Note: An alternate approach to encapsulation of IPv6 ND messages for
   multihop forwarding would be to statelessly translate the IPv6 LLAs
   into ULAs and forward the messages without encapsulation.  This would
   violate the [RFC4861] requirement that certain IPv6 ND messages must
   use link-local addresses and must not be accepted if received with
   Hop Limit less than 255.  This document therefore advocates
   encapsulation since the overhead is nominal considering the
   infrequent nature and small size of IPv6 ND messages.  Future
   documents may consider encapsulation avoidance through translation
   while updating [RFC4861].

13.  Secure Redirection

   If the ANET link model is multiple access, the AR is responsible for
   assuring that address duplication cannot corrupt the neighbor caches
   of other nodes on the link.  When the MN sends an RS message on a
   multiple access ANET link, the AR verifies that the MN is authorized



Templin & Whyman        Expires December 4, 2020               [Page 27]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   to use the address and returns an RA with a non-zero Router Lifetime
   only if the MN is authorized.

   After verifying MN authorization and returning an RA, the AR MAY
   return IPv6 ND Redirect messages to direct MNs located on the same
   ANET link to exchange packets directly without transiting the AR.  In
   that case, the MNs can exchange packets according to their unicast L2
   addresses discovered from the Redirect message instead of using the
   dogleg path through the AR.  In some ANET links, however, such direct
   communications may be undesirable and continued use of the dogleg
   path through the AR may provide better performance.  In that case,
   the AR can refrain from sending Redirects, and/or MNs can ignore
   them.

14.  AR and MSE Resilience

   ANETs SHOULD deploy ARs in Virtual Router Redundancy Protocol (VRRP)
   [RFC5798] configurations so that service continuity is maintained
   even if one or more ARs fail.  Using VRRP, the MN is unaware which of
   the (redundant) ARs is currently providing service, and any service
   discontinuity will be limited to the failover time supported by VRRP.
   Widely deployed public domain implementations of VRRP are available.

   MSEs SHOULD use high availability clustering services so that
   multiple redundant systems can provide coordinated response to
   failures.  As with VRRP, widely deployed public domain
   implementations of high availability clustering services are
   available.  Note that special-purpose and expensive dedicated
   hardware is not necessary, and public domain implementations can be
   used even between lightweight virtual machines in cloud deployments.

15.  Detecting and Responding to MSE Failures

   In environments where fast recovery from MSE failure is required, ARs
   SHOULD use proactive Neighbor Unreachability Detection (NUD) in a
   manner that parallels Bidirectional Forwarding Detection (BFD)
   [RFC5880] to track MSE reachability.  ARs can then quickly detect and
   react to failures so that cached information is re-established
   through alternate paths.  Proactive NUD control messaging is carried
   only over well-connected ground domain networks (i.e., and not low-
   end ANET links such as aeronautical radios) and can therefore be
   tuned for rapid response.

   ARs perform proactive NUD for MSEs for which there are currently
   active MNs on the ANET.  If an MSE fails, ARs can quickly inform MNs
   of the outage by sending multicast RA messages on the ANET interface.
   The AR sends RA messages to MNs via the ANET interface with an OMNI




Templin & Whyman        Expires December 4, 2020               [Page 28]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   option with a Release ID for the failed MSE, and with destination
   address set to All-Nodes multicast (ff02::1) [RFC4291].

   The AR SHOULD send MAX_FINAL_RTR_ADVERTISEMENTS RA messages separated
   by small delays [RFC4861].  Any MNs on the ANET interface that have
   been using the (now defunct) MSE will receive the RA messages and
   associate with a new MSE.

16.  Transition Considerations

   When a MN connects to an ANET link for the first time, it sends an RS
   message with an OMNI option.  If the first hop AR recognizes the
   option, it returns an RA with its MS OMNI LLA as the source, the MN
   OMNI LLA as the destination, the P(roxy) bit set in the RA flags and
   with an OMNI option included.  The MN then engages the AR according
   to the OMNI link model specified above.  If the first hop AR is a
   legacy IPv6 router, however, it instead returns an RA message with no
   OMNI option and with a non-OMNI unicast source LLA as specified in
   [RFC4861].  In that case, the MN engages the ANET according to the
   legacy IPv6 link model and without the OMNI extensions specified in
   this document.

   If the ANET link model is multiple access, there must be assurance
   that address duplication cannot corrupt the neighbor caches of other
   nodes on the link.  When the MN sends an RS message on a multiple
   access ANET link with an OMNI LLA source address and an OMNI option,
   ARs that recognize the option ensure that the MN is authorized to use
   the address and return an RA with a non-zero Router Lifetime only if
   the MN is authorized.  ARs that do not recognize the option instead
   return an RA that makes no statement about the MN's authorization to
   use the source address.  In that case, the MN should perform
   Duplicate Address Detection to ensure that it does not interfere with
   other nodes on the link.

   An alternative approach for multiple access ANET links to ensure
   isolation for MN / AR communications is through L2 address mappings
   as discussed in Appendix C.  This arrangement imparts a (virtual)
   point-to-point link model over the (physical) multiple access link.

17.  OMNI Interfaces on the Open Internet

   OMNI interfaces configured over INET interfaces that connect to the
   open Internet can apply symmetric security services such as VPNs or
   establish a direct link through some other means.  In environments
   where an explicit VPN or direct link may be impractical, OMNI
   interfaces can instead use Teredo UDP/IP encapsulation
   [RFC6081][RFC4380].  (SEcure Neighbor Discovery (SEND) and




Templin & Whyman        Expires December 4, 2020               [Page 29]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   Cryptographically Generated Addresses (CGA) [RFC3971][RFC3972] can
   also be used if additional authentication is necessary.)

   The IPv6 ND control plane messages used to establish neighbor cache
   state must be authenticated while data plane messages are delivered
   the same as for ordinary best-effort Internet traffic with basic
   source address-based data origin verification.  Data plane
   communications via OMNI interfaces that connect over the open
   Internet without an explicit VPN should therefore employ transport-
   or higher-layer security to ensure integrity and/or confidentiality.

   OMNI interfaces in the open Internet are often located behind Network
   Address Translators (NATs).  The OMNI interface accommodates NAT
   traversal using UDP/IP encapsulation and the mechanisms discussed in
   [RFC6081][RFC4380][I-D.templin-intarea-6706bis].

18.  Time-Varying MNPs

   In some use cases, it is desirable, beneficial and efficient for the
   MN to receive a constant MNP that travels with the MN wherever it
   moves.  For example, this would allow air traffic controllers to
   easily track aircraft, etc.  In other cases, however (e.g.,
   intelligent transportation systems), the MN may be willing to
   sacrifice a modicum of efficiency in order to have time-varying MNPs
   that can be changed every so often to defeat adversarial tracking.

   Prefix delegation services such as those discussed in
   [I-D.templin-6man-dhcpv6-ndopt] and [I-D.templin-intarea-6706bis]
   allow OMNI MNs that desire time-varying MNPs to obtain short-lived
   prefixes.  In that case, the identity of the MN can be used as a
   prefix delegation seed (e.g., a DHCPv6 Device Unique IDentifier
   (DUID) [RFC8415]).  The MN would then be obligated to renumber its
   internal networks whenever its MNP (and therefore also its OMNI
   address) changes.  This should not present a challenge for MNs with
   automated network renumbering services, however presents limits for
   the durations of ongoing sessions that would prefer to use a constant
   address.

19.  IANA Considerations

   The IANA is instructed to allocate an official Type number TBD from
   the registry "IPv6 Neighbor Discovery Option Formats" for the OMNI
   option.  Implementations set Type to 253 as an interim value
   [RFC4727].

   The IANA is instructed to assign a new Code value "1" in the "ICMPv6
   Code Fields: Type 2 - Packet Too Big" registry.  The registry should
   read as follows:



Templin & Whyman        Expires December 4, 2020               [Page 30]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


      Code      Name                         Reference
      ---       ----                         ---------
      0         Diagnostic Packet Too Big    [RFC4443]
      1         Advisory Packet Too Big      [RFCXXXX]

                  Figure 15: OMNI Option Sub-Type Values

   The IANA is instructed to allocate one Ethernet unicast address TBD2
   (suggest 00-00-5E-00-52-14 [RFC5214]) in the registry "IANA Ethernet
   Address Block - Unicast Use".

   The OMNI option also defines an 8-bit Sub-Type field, for which IANA
   is instructed to create and maintain a new registry entitled "OMNI
   option Sub-Type values".  Initial values for the OMNI option Sub-Type
   values registry are given below; future assignments are to be made
   through Expert Review [RFC8126].

      Value    Sub-Type name              Reference
      -----    -------------              ----------
      0        Pad1                       [RFCXXXX]
      1        PadN                       [RFCXXXX]
      2        ifIndex-tuple (Type 1)     [RFCXXXX]
      3        ifIndex-tuple (Type 2)     [RFCXXXX]
      4        MS-Register                [RFCXXXX]
      5        MS-Release                 [RFCXXXX]
      6        Network Acceess Identifier [RFCXXXX]
      7        Geo Coordinates            [RFCXXXX]
      8-252    Unassigned
      253-254  Experimental               [RFCXXXX]
      255      Reserved                   [RFCXXXX]

                  Figure 16: OMNI Option Sub-Type Values

20.  Security Considerations

   Security considerations for IPv6 [RFC8200] and IPv6 Neighbor
   Discovery [RFC4861] apply.  OMNI interface IPv6 ND messages SHOULD
   include Nonce and Timestamp options [RFC3971] when transaction
   confirmation and/or time synchronization is needed.

   OMNI interfaces configured over secured ANET interfaces inherit the
   physical and/or link-layer security properties of the connected
   ANETs.  OMNI interfaces configured over open INET interfaces can use
   symmetric securing services such as VPNs or can by some other means
   establish a direct link.  When a VPN or direct link may be
   impractical, however, an asymmetric security service such as SEcure
   Neighbor Discovery (SEND) [RFC3971] with Cryptographically Generated




Templin & Whyman        Expires December 4, 2020               [Page 31]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   Addresses (CGAs) [RFC3972] and/or the Teredo Authentication option
   [RFC4380] may be necessary.

   While the OMNI link protects control plane messaging as discussed
   above, applications should still employ transport- or higher-layer
   security services to protect the data plane.

   Security considerations for specific access network interface types
   are covered under the corresponding IP-over-(foo) specification
   (e.g., [RFC2464], [RFC2492], etc.).

   Security considerations for IPv6 fragmentation and reassembly are
   discussed in Section 5.1.

21.  Acknowledgements

   The first version of this document was prepared per the consensus
   decision at the 7th Conference of the International Civil Aviation
   Organization (ICAO) Working Group-I Mobility Subgroup on March 22,
   2019.  Consensus to take the document forward to the IETF was reached
   at the 9th Conference of the Mobility Subgroup on November 22, 2019.
   Attendees and contributors included: Guray Acar, Danny Bharj,
   Francois D'Humieres, Pavel Drasil, Nikos Fistas, Giovanni Garofolo,
   Bernhard Haindl, Vaughn Maiolla, Tom McParland, Victor Moreno, Madhu
   Niraula, Brent Phillips, Liviu Popescu, Jacky Pouzet, Aloke Roy, Greg
   Saccone, Robert Segers, Michal Skorepa, Michel Solery, Stephane
   Tamalet, Fred Templin, Jean-Marc Vacher, Bela Varkonyi, Tony Whyman,
   Fryderyk Wrobel and Dongsong Zeng.

   The following individuals are acknowledged for their useful comments:
   Michael Matyas, Madhu Niraula, Greg Saccone, Stephane Tamalet, Eric
   Vyncke.  Pavel Drasil, Zdenek Jaron and Michal Skorepa are recognized
   for their many helpful ideas and suggestions.

   This work is aligned with the NASA Safe Autonomous Systems Operation
   (SASO) program under NASA contract number NNA16BD84C.

   This work is aligned with the FAA as per the SE2025 contract number
   DTFAWA-15-D-00030.

22.  References

22.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.



Templin & Whyman        Expires December 4, 2020               [Page 32]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   [RFC2474]  Nichols, K., Blake, S., Baker, F., and D. Black,
              "Definition of the Differentiated Services Field (DS
              Field) in the IPv4 and IPv6 Headers", RFC 2474,
              DOI 10.17487/RFC2474, December 1998,
              <https://www.rfc-editor.org/info/rfc2474>.

   [RFC3971]  Arkko, J., Ed., Kempf, J., Zill, B., and P. Nikander,
              "SEcure Neighbor Discovery (SEND)", RFC 3971,
              DOI 10.17487/RFC3971, March 2005,
              <https://www.rfc-editor.org/info/rfc3971>.

   [RFC3972]  Aura, T., "Cryptographically Generated Addresses (CGA)",
              RFC 3972, DOI 10.17487/RFC3972, March 2005,
              <https://www.rfc-editor.org/info/rfc3972>.

   [RFC4191]  Draves, R. and D. Thaler, "Default Router Preferences and
              More-Specific Routes", RFC 4191, DOI 10.17487/RFC4191,
              November 2005, <https://www.rfc-editor.org/info/rfc4191>.

   [RFC4193]  Hinden, R. and B. Haberman, "Unique Local IPv6 Unicast
              Addresses", RFC 4193, DOI 10.17487/RFC4193, October 2005,
              <https://www.rfc-editor.org/info/rfc4193>.

   [RFC4291]  Hinden, R. and S. Deering, "IP Version 6 Addressing
              Architecture", RFC 4291, DOI 10.17487/RFC4291, February
              2006, <https://www.rfc-editor.org/info/rfc4291>.

   [RFC4443]  Conta, A., Deering, S., and M. Gupta, Ed., "Internet
              Control Message Protocol (ICMPv6) for the Internet
              Protocol Version 6 (IPv6) Specification", STD 89,
              RFC 4443, DOI 10.17487/RFC4443, March 2006,
              <https://www.rfc-editor.org/info/rfc4443>.

   [RFC4727]  Fenner, B., "Experimental Values In IPv4, IPv6, ICMPv4,
              ICMPv6, UDP, and TCP Headers", RFC 4727,
              DOI 10.17487/RFC4727, November 2006,
              <https://www.rfc-editor.org/info/rfc4727>.

   [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,
              "Neighbor Discovery for IP version 6 (IPv6)", RFC 4861,
              DOI 10.17487/RFC4861, September 2007,
              <https://www.rfc-editor.org/info/rfc4861>.

   [RFC4862]  Thomson, S., Narten, T., and T. Jinmei, "IPv6 Stateless
              Address Autoconfiguration", RFC 4862,
              DOI 10.17487/RFC4862, September 2007,
              <https://www.rfc-editor.org/info/rfc4862>.




Templin & Whyman        Expires December 4, 2020               [Page 33]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   [RFC6088]  Tsirtsis, G., Giarreta, G., Soliman, H., and N. Montavont,
              "Traffic Selectors for Flow Bindings", RFC 6088,
              DOI 10.17487/RFC6088, January 2011,
              <https://www.rfc-editor.org/info/rfc6088>.

   [RFC8028]  Baker, F. and B. Carpenter, "First-Hop Router Selection by
              Hosts in a Multi-Prefix Network", RFC 8028,
              DOI 10.17487/RFC8028, November 2016,
              <https://www.rfc-editor.org/info/rfc8028>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8200]  Deering, S. and R. Hinden, "Internet Protocol, Version 6
              (IPv6) Specification", STD 86, RFC 8200,
              DOI 10.17487/RFC8200, July 2017,
              <https://www.rfc-editor.org/info/rfc8200>.

   [RFC8201]  McCann, J., Deering, S., Mogul, J., and R. Hinden, Ed.,
              "Path MTU Discovery for IP version 6", STD 87, RFC 8201,
              DOI 10.17487/RFC8201, July 2017,
              <https://www.rfc-editor.org/info/rfc8201>.

22.2.  Informative References

   [I-D.ietf-intarea-frag-fragile]
              Bonica, R., Baker, F., Huston, G., Hinden, R., Troan, O.,
              and F. Gont, "IP Fragmentation Considered Fragile", draft-
              ietf-intarea-frag-fragile-17 (work in progress), September
              2019.

   [I-D.ietf-intarea-tunnels]
              Touch, J. and M. Townsley, "IP Tunnels in the Internet
              Architecture", draft-ietf-intarea-tunnels-10 (work in
              progress), September 2019.

   [I-D.templin-6man-dhcpv6-ndopt]
              Templin, F., "A Unified Stateful/Stateless Configuration
              Service for IPv6", draft-templin-6man-dhcpv6-ndopt-09
              (work in progress), January 2020.

   [I-D.templin-intarea-6706bis]
              Templin, F., "Asymmetric Extended Route Optimization
              (AERO)", draft-templin-intarea-6706bis-52 (work in
              progress), May 2020.





Templin & Whyman        Expires December 4, 2020               [Page 34]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   [RFC1122]  Braden, R., Ed., "Requirements for Internet Hosts -
              Communication Layers", STD 3, RFC 1122,
              DOI 10.17487/RFC1122, October 1989,
              <https://www.rfc-editor.org/info/rfc1122>.

   [RFC2225]  Laubach, M. and J. Halpern, "Classical IP and ARP over
              ATM", RFC 2225, DOI 10.17487/RFC2225, April 1998,
              <https://www.rfc-editor.org/info/rfc2225>.

   [RFC2464]  Crawford, M., "Transmission of IPv6 Packets over Ethernet
              Networks", RFC 2464, DOI 10.17487/RFC2464, December 1998,
              <https://www.rfc-editor.org/info/rfc2464>.

   [RFC2473]  Conta, A. and S. Deering, "Generic Packet Tunneling in
              IPv6 Specification", RFC 2473, DOI 10.17487/RFC2473,
              December 1998, <https://www.rfc-editor.org/info/rfc2473>.

   [RFC2492]  Armitage, G., Schulter, P., and M. Jork, "IPv6 over ATM
              Networks", RFC 2492, DOI 10.17487/RFC2492, January 1999,
              <https://www.rfc-editor.org/info/rfc2492>.

   [RFC2863]  McCloghrie, K. and F. Kastenholz, "The Interfaces Group
              MIB", RFC 2863, DOI 10.17487/RFC2863, June 2000,
              <https://www.rfc-editor.org/info/rfc2863>.

   [RFC3692]  Narten, T., "Assigning Experimental and Testing Numbers
              Considered Useful", BCP 82, RFC 3692,
              DOI 10.17487/RFC3692, January 2004,
              <https://www.rfc-editor.org/info/rfc3692>.

   [RFC3810]  Vida, R., Ed. and L. Costa, Ed., "Multicast Listener
              Discovery Version 2 (MLDv2) for IPv6", RFC 3810,
              DOI 10.17487/RFC3810, June 2004,
              <https://www.rfc-editor.org/info/rfc3810>.

   [RFC3819]  Karn, P., Ed., Bormann, C., Fairhurst, G., Grossman, D.,
              Ludwig, R., Mahdavi, J., Montenegro, G., Touch, J., and L.
              Wood, "Advice for Internet Subnetwork Designers", BCP 89,
              RFC 3819, DOI 10.17487/RFC3819, July 2004,
              <https://www.rfc-editor.org/info/rfc3819>.

   [RFC4380]  Huitema, C., "Teredo: Tunneling IPv6 over UDP through
              Network Address Translations (NATs)", RFC 4380,
              DOI 10.17487/RFC4380, February 2006,
              <https://www.rfc-editor.org/info/rfc4380>.






Templin & Whyman        Expires December 4, 2020               [Page 35]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   [RFC4389]  Thaler, D., Talwar, M., and C. Patel, "Neighbor Discovery
              Proxies (ND Proxy)", RFC 4389, DOI 10.17487/RFC4389, April
              2006, <https://www.rfc-editor.org/info/rfc4389>.

   [RFC4541]  Christensen, M., Kimball, K., and F. Solensky,
              "Considerations for Internet Group Management Protocol
              (IGMP) and Multicast Listener Discovery (MLD) Snooping
              Switches", RFC 4541, DOI 10.17487/RFC4541, May 2006,
              <https://www.rfc-editor.org/info/rfc4541>.

   [RFC4605]  Fenner, B., He, H., Haberman, B., and H. Sandick,
              "Internet Group Management Protocol (IGMP) / Multicast
              Listener Discovery (MLD)-Based Multicast Forwarding
              ("IGMP/MLD Proxying")", RFC 4605, DOI 10.17487/RFC4605,
              August 2006, <https://www.rfc-editor.org/info/rfc4605>.

   [RFC4963]  Heffner, J., Mathis, M., and B. Chandler, "IPv4 Reassembly
              Errors at High Data Rates", RFC 4963,
              DOI 10.17487/RFC4963, July 2007,
              <https://www.rfc-editor.org/info/rfc4963>.

   [RFC5175]  Haberman, B., Ed. and R. Hinden, "IPv6 Router
              Advertisement Flags Option", RFC 5175,
              DOI 10.17487/RFC5175, March 2008,
              <https://www.rfc-editor.org/info/rfc5175>.

   [RFC5213]  Gundavelli, S., Ed., Leung, K., Devarapalli, V.,
              Chowdhury, K., and B. Patil, "Proxy Mobile IPv6",
              RFC 5213, DOI 10.17487/RFC5213, August 2008,
              <https://www.rfc-editor.org/info/rfc5213>.

   [RFC5214]  Templin, F., Gleeson, T., and D. Thaler, "Intra-Site
              Automatic Tunnel Addressing Protocol (ISATAP)", RFC 5214,
              DOI 10.17487/RFC5214, March 2008,
              <https://www.rfc-editor.org/info/rfc5214>.

   [RFC5558]  Templin, F., Ed., "Virtual Enterprise Traversal (VET)",
              RFC 5558, DOI 10.17487/RFC5558, February 2010,
              <https://www.rfc-editor.org/info/rfc5558>.

   [RFC5798]  Nadas, S., Ed., "Virtual Router Redundancy Protocol (VRRP)
              Version 3 for IPv4 and IPv6", RFC 5798,
              DOI 10.17487/RFC5798, March 2010,
              <https://www.rfc-editor.org/info/rfc5798>.

   [RFC5880]  Katz, D. and D. Ward, "Bidirectional Forwarding Detection
              (BFD)", RFC 5880, DOI 10.17487/RFC5880, June 2010,
              <https://www.rfc-editor.org/info/rfc5880>.



Templin & Whyman        Expires December 4, 2020               [Page 36]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   [RFC6081]  Thaler, D., "Teredo Extensions", RFC 6081,
              DOI 10.17487/RFC6081, January 2011,
              <https://www.rfc-editor.org/info/rfc6081>.

   [RFC6543]  Gundavelli, S., "Reserved IPv6 Interface Identifier for
              Proxy Mobile IPv6", RFC 6543, DOI 10.17487/RFC6543, May
              2012, <https://www.rfc-editor.org/info/rfc6543>.

   [RFC7084]  Singh, H., Beebee, W., Donley, C., and B. Stark, "Basic
              Requirements for IPv6 Customer Edge Routers", RFC 7084,
              DOI 10.17487/RFC7084, November 2013,
              <https://www.rfc-editor.org/info/rfc7084>.

   [RFC7421]  Carpenter, B., Ed., Chown, T., Gont, F., Jiang, S.,
              Petrescu, A., and A. Yourtchenko, "Analysis of the 64-bit
              Boundary in IPv6 Addressing", RFC 7421,
              DOI 10.17487/RFC7421, January 2015,
              <https://www.rfc-editor.org/info/rfc7421>.

   [RFC7542]  DeKok, A., "The Network Access Identifier", RFC 7542,
              DOI 10.17487/RFC7542, May 2015,
              <https://www.rfc-editor.org/info/rfc7542>.

   [RFC7739]  Gont, F., "Security Implications of Predictable Fragment
              Identification Values", RFC 7739, DOI 10.17487/RFC7739,
              February 2016, <https://www.rfc-editor.org/info/rfc7739>.

   [RFC7847]  Melia, T., Ed. and S. Gundavelli, Ed., "Logical-Interface
              Support for IP Hosts with Multi-Access Support", RFC 7847,
              DOI 10.17487/RFC7847, May 2016,
              <https://www.rfc-editor.org/info/rfc7847>.

   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, "Guidelines for
              Writing an IANA Considerations Section in RFCs", BCP 26,
              RFC 8126, DOI 10.17487/RFC8126, June 2017,
              <https://www.rfc-editor.org/info/rfc8126>.

   [RFC8402]  Filsfils, C., Ed., Previdi, S., Ed., Ginsberg, L.,
              Decraene, B., Litkowski, S., and R. Shakir, "Segment
              Routing Architecture", RFC 8402, DOI 10.17487/RFC8402,
              July 2018, <https://www.rfc-editor.org/info/rfc8402>.

   [RFC8415]  Mrugalski, T., Siodelski, M., Volz, B., Yourtchenko, A.,
              Richardson, M., Jiang, S., Lemon, T., and T. Winters,
              "Dynamic Host Configuration Protocol for IPv6 (DHCPv6)",
              RFC 8415, DOI 10.17487/RFC8415, November 2018,
              <https://www.rfc-editor.org/info/rfc8415>.




Templin & Whyman        Expires December 4, 2020               [Page 37]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   [RFC8754]  Filsfils, C., Ed., Dukes, D., Ed., Previdi, S., Leddy, J.,
              Matsushima, S., and D. Voyer, "IPv6 Segment Routing Header
              (SRH)", RFC 8754, DOI 10.17487/RFC8754, March 2020,
              <https://www.rfc-editor.org/info/rfc8754>.

Appendix A.  Type 1 ifIndex-tuple Traffic Classifier Preference Encoding

   Adaptation of the OMNI option Type 1 ifIndex-tuple's traffic
   classifier Bitmap to specific Internetworks such as the Aeronautical
   Telecommunications Network with Internet Protocol Services (ATN/IPS)
   may include link selection preferences based on other traffic
   classifiers (e.g., transport port numbers, etc.) in addition to the
   existing DSCP-based preferences.  Nodes on specific Internetworks
   maintain a map of traffic classifiers to additional P[*] preference
   fields beyond the first 64.  For example, TCP port 22 maps to P[67],
   TCP port 443 maps to P[70], UDP port 8060 maps to P[76], etc.

   Implementations use Simplex or Indexed encoding formats for P[*]
   encoding in order to encode a given set of traffic classifiers in the
   most efficient way.  Some use cases may be more efficiently coded
   using Simplex form, while others may be more efficient using Indexed.
   Once a format is selected for preparation of a single ifIndex-tuple
   the same format must be used for the entire Sub-Option.  Different
   Sub-Options may use different formats.

   The following figures show coding examples for various Simplex and
   Indexed formats:

        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Sub-Type=2  | Sub-length=4+N|    ifIndex    |    ifType     |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |  Provider ID  | Link  |S|0|RSV| Bitmap(0)=0xff|P00|P01|P02|P03|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |P04|P05|P06|P07|P08|P09|P10|P11|P12|P13|P14|P15|P16|P17|P18|P19|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |P20|P21|P22|P23|P24|P25|P26|P27|P28|P29|P30|P31| Bitmap(1)=0xff|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |P32|P33|P34|P35|P36|P37|P38|P39|P40|P41|P42|P43|P44|P45|P46|P47|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |P48|P49|P50|P51|P52|P53|P54|P55|P56|P57|P58|P59|P60|P61|P62|P63|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       | Bitmap(2)=0xff|P64|P65|P67|P68| ...
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

               Figure 17: Example 1: Dense Simplex Encoding




Templin & Whyman        Expires December 4, 2020               [Page 38]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Sub-Type=2  | Sub-length=4+N|    ifIndex    |    ifType     |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |  Provider ID  | Link  |S|0|RSV| Bitmap(0)=0x00| Bitmap(1)=0x0f|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |P48|P49|P50|P51|P52|P53|P54|P55|P56|P57|P58|P59|P60|P61|P62|P63|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       | Bitmap(2)=0x00| Bitmap(3)=0x00| Bitmap(4)=0x00| Bitmap(5)=0x00|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       | Bitmap(6)=0xf0|192|193|194|195|196|197|198|199|200|201|202|203|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |204|205|206|207| Bitmap(7)=0x00| Bitmap(8)=0x0f|272|273|274|275|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |276|277|278|279|280|281|282|283|284|285|286|287| Bitmap(9)=0x00|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |Bitmap(10)=0x00| ...
       +-+-+-+-+-+-+-+-+-+-+-

               Figure 18: Example 2: Sparse Simplex Encoding

        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   Sub-Type=2  | Sub-length=4+N|    ifIndex    |    ifType     |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |  Provider ID  | Link  |S|1|RSV|  Index = 0x00 | Bitmap = 0x80 |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |P00|P01|P02|P03|  Index = 0x01 | Bitmap = 0x01 |P60|P61|P62|P63|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |  Index = 0x10 | Bitmap = 0x80 |512|513|514|515|  Index = 0x18 |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       | Bitmap = 0x01 |796|797|798|799| ...
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

                  Figure 19: Example 3: Indexed Encoding

Appendix B.  VDL Mode 2 Considerations

   ICAO Doc 9776 is the "Technical Manual for VHF Data Link Mode 2"
   (VDLM2) that specifies an essential radio frequency data link service
   for aircraft and ground stations in worldwide civil aviation air
   traffic management.  The VDLM2 link type is "multicast capable"
   [RFC4861], but with considerable differences from common multicast
   links such as Ethernet and IEEE 802.11.





Templin & Whyman        Expires December 4, 2020               [Page 39]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   First, the VDLM2 link data rate is only 31.5Kbps - multiple orders of
   magnitude less than most modern wireless networking gear.  Second,
   due to the low available link bandwidth only VDLM2 ground stations
   (i.e., and not aircraft) are permitted to send broadcasts, and even
   so only as compact layer 2 "beacons".  Third, aircraft employ the
   services of ground stations by performing unicast RS/RA exchanges
   upon receipt of beacons instead of listening for multicast RA
   messages and/or sending multicast RS messages.

   This beacon-oriented unicast RS/RA approach is necessary to conserve
   the already-scarce available link bandwidth.  Moreover, since the
   numbers of beaconing ground stations operating within a given spatial
   range must be kept as sparse as possible, it would not be feasible to
   have different classes of ground stations within the same region
   observing different protocols.  It is therefore highly desirable that
   all ground stations observe a common language of RS/RA as specified
   in this document.

   Note that links of this nature may benefit from compression
   techniques that reduce the bandwidth necessary for conveying the same
   amount of data.  The IETF lpwan working group is considering possible
   alternatives: [https://datatracker.ietf.org/wg/lpwan/documents].

Appendix C.  MN / AR Isolation Through L2 Address Mapping

   Per [RFC4861], IPv6 ND messages may be sent to either a multicast or
   unicast link-scoped IPv6 destination address.  However, IPv6 ND
   messaging should be coordinated between the MN and AR only without
   invoking other nodes on the ANET.  This implies that MN / AR control
   messaging should be isolated and not overheard by other nodes on the
   link.

   To support MN / AR isolation on some ANET links, ARs can maintain an
   OMNI-specific unicast L2 address ("MSADDR").  For Ethernet-compatible
   ANETs, this specification reserves one Ethernet unicast address TBD2
   (see: Section 19).  For non-Ethernet statically-addressed ANETs,
   MSADDR is reserved per the assigned numbers authority for the ANET
   addressing space.  For still other ANETs, MSADDR may be dynamically
   discovered through other means, e.g., L2 beacons.

   MNs map the L3 addresses of all IPv6 ND messages they send (i.e.,
   both multicast and unicast) to MSADDR instead of to an ordinary
   unicast or multicast L2 address.  In this way, all of the MN's IPv6
   ND messages will be received by ARs that are configured to accept
   packets destined to MSADDR.  Note that multiple ARs on the link could
   be configured to accept packets destined to MSADDR, e.g., as a basis
   for supporting redundancy.




Templin & Whyman        Expires December 4, 2020               [Page 40]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   Therefore, ARs must accept and process packets destined to MSADDR,
   while all other devices must not process packets destined to MSADDR.
   This model has well-established operational experience in Proxy
   Mobile IPv6 (PMIP) [RFC5213][RFC6543].

Appendix D.  Change Log

   << RFC Editor - remove prior to publication >>

   Differences from draft-templin-6man-omni-interface-20 to draft-
   templin-6man-omni-interface-21:

   o  Safety-Based Multilink (SBM) and Performance-Based Multilink
      (PBM).

   Differences from draft-templin-6man-omni-interface-18 to draft-
   templin-6man-omni-interface-19:

   o  SEND/CGA.

   Differences from draft-templin-6man-omni-interface-17 to draft-
   templin-6man-omni-interface-18:

   o  Teredo

   Differences from draft-templin-6man-omni-interface-14 to draft-
   templin-6man-omni-interface-15:

   o  Prefix length discussions removed.

   Differences from draft-templin-6man-omni-interface-12 to draft-
   templin-6man-omni-interface-13:

   o  Teredo

   Differences from draft-templin-6man-omni-interface-11 to draft-
   templin-6man-omni-interface-12:

   o  Major simplifications and clarifications on MTU and fragmentation.

   o  Document now updates RFC4443 and RFC8201.

   Differences from draft-templin-6man-omni-interface-10 to draft-
   templin-6man-omni-interface-11:

   o  Removed /64 assumption, resulting in new OMNI address format.





Templin & Whyman        Expires December 4, 2020               [Page 41]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   Differences from draft-templin-6man-omni-interface-07 to draft-
   templin-6man-omni-interface-08:

   o  OMNI MNs in the open Internet

   Differences from draft-templin-6man-omni-interface-06 to draft-
   templin-6man-omni-interface-07:

   o  Brought back L2 MSADDR mapping text for MN / AR isolation based on
      L2 addressing.

   o  Expanded "Transition Considerations".

   Differences from draft-templin-6man-omni-interface-05 to draft-
   templin-6man-omni-interface-06:

   o  Brought back OMNI option "R" flag, and discussed its use.

   Differences from draft-templin-6man-omni-interface-04 to draft-
   templin-6man-omni-interface-05:

   o  Transition considerations, and overhaul of RS/RA addressing with
      the inclusion of MSE addresses within the OMNI option instead of
      as RS/RA addresses (developed under FAA SE2025 contract number
      DTFAWA-15-D-00030).

   Differences from draft-templin-6man-omni-interface-02 to draft-
   templin-6man-omni-interface-03:

   o  Added "advisory PTB messages" under FAA SE2025 contract number
      DTFAWA-15-D-00030.

   Differences from draft-templin-6man-omni-interface-01 to draft-
   templin-6man-omni-interface-02:

   o  Removed "Primary" flag and supporting text.

   o  Clarified that "Router Lifetime" applies to each ANET interface
      independently, and that the union of all ANET interface Router
      Lifetimes determines MSE lifetime.

   Differences from draft-templin-6man-omni-interface-00 to draft-
   templin-6man-omni-interface-01:

   o  "All-MSEs" OMNI LLA defined.  Also reserved fe80::ff00:0000/104
      for future use (most likely as "pseudo-multicast").





Templin & Whyman        Expires December 4, 2020               [Page 42]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   o  Non-normative discussion of alternate OMNI LLA construction form
      made possible if the 64-bit assumption were relaxed.

   Differences from draft-templin-atn-aero-interface-21 to draft-
   templin-6man-omni-interface-00:

   o  Minor clarification on Type-2 ifIndex-tuple encoding.

   o  Draft filename change (replaces draft-templin-atn-aero-interface).

   Differences from draft-templin-atn-aero-interface-20 to draft-
   templin-atn-aero-interface-21:

   o  OMNI option format

   o  MTU

   Differences from draft-templin-atn-aero-interface-19 to draft-
   templin-atn-aero-interface-20:

   o  MTU

   Differences from draft-templin-atn-aero-interface-18 to draft-
   templin-atn-aero-interface-19:

   o  MTU

   Differences from draft-templin-atn-aero-interface-17 to draft-
   templin-atn-aero-interface-18:

   o  MTU and RA configuration information updated.

   Differences from draft-templin-atn-aero-interface-16 to draft-
   templin-atn-aero-interface-17:

   o  New "Primary" flag in OMNI option.

   Differences from draft-templin-atn-aero-interface-15 to draft-
   templin-atn-aero-interface-16:

   o  New note on MSE OMNI LLA uniqueness assurance.

   o  General cleanup.

   Differences from draft-templin-atn-aero-interface-14 to draft-
   templin-atn-aero-interface-15:

   o  General cleanup.



Templin & Whyman        Expires December 4, 2020               [Page 43]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   Differences from draft-templin-atn-aero-interface-13 to draft-
   templin-atn-aero-interface-14:

   o  General cleanup.

   Differences from draft-templin-atn-aero-interface-12 to draft-
   templin-atn-aero-interface-13:

   o  Minor re-work on "Notify-MSE" (changed to Notification ID).

   Differences from draft-templin-atn-aero-interface-11 to draft-
   templin-atn-aero-interface-12:

   o  Removed "Request/Response" OMNI option formats.  Now, there is
      only one OMNI option format that applies to all ND messages.

   o  Added new OMNI option field and supporting text for "Notify-MSE".

   Differences from draft-templin-atn-aero-interface-10 to draft-
   templin-atn-aero-interface-11:

   o  Changed name from "aero" to "OMNI"

   o  Resolved AD review comments from Eric Vyncke (posted to atn list)

   Differences from draft-templin-atn-aero-interface-09 to draft-
   templin-atn-aero-interface-10:

   o  Renamed ARO option to AERO option

   o  Re-worked Section 13 text to discuss proactive NUD.

   Differences from draft-templin-atn-aero-interface-08 to draft-
   templin-atn-aero-interface-09:

   o  Version and reference update

   Differences from draft-templin-atn-aero-interface-07 to draft-
   templin-atn-aero-interface-08:

   o  Removed "Classic" and "MS-enabled" link model discussion

   o  Added new figure for MN/AR/MSE model.

   o  New Section on "Detecting and responding to MSE failure".

   Differences from draft-templin-atn-aero-interface-06 to draft-
   templin-atn-aero-interface-07:



Templin & Whyman        Expires December 4, 2020               [Page 44]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   o  Removed "nonce" field from AR option format.  Applications that
      require a nonce can include a standard nonce option if they want
      to.

   o  Various editorial cleanups.

   Differences from draft-templin-atn-aero-interface-05 to draft-
   templin-atn-aero-interface-06:

   o  New Appendix C on "VDL Mode 2 Considerations"

   o  New Appendix D on "RS/RA Messaging as a Single Standard API"

   o  Various significant updates in Section 5, 10 and 12.

   Differences from draft-templin-atn-aero-interface-04 to draft-
   templin-atn-aero-interface-05:

   o  Introduced RFC6543 precedent for focusing IPv6 ND messaging to a
      reserved unicast link-layer address

   o  Introduced new IPv6 ND option for Aero Registration

   o  Specification of MN-to-MSE message exchanges via the ANET access
      router as a proxy

   o  IANA Considerations updated to include registration requests and
      set interim RFC4727 option type value.

   Differences from draft-templin-atn-aero-interface-03 to draft-
   templin-atn-aero-interface-04:

   o  Removed MNP from aero option format - we already have RIOs and
      PIOs, and so do not need another option type to include a Prefix.

   o  Clarified that the RA message response must include an aero option
      to indicate to the MN that the ANET provides a MS.

   o  MTU interactions with link adaptation clarified.

   Differences from draft-templin-atn-aero-interface-02 to draft-
   templin-atn-aero-interface-03:

   o  Sections re-arranged to match RFC4861 structure.

   o  Multiple aero interfaces

   o  Conceptual sending algorithm



Templin & Whyman        Expires December 4, 2020               [Page 45]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   Differences from draft-templin-atn-aero-interface-01 to draft-
   templin-atn-aero-interface-02:

   o  Removed discussion of encapsulation (out of scope)

   o  Simplified MTU section

   o  Changed to use a new IPv6 ND option (the "aero option") instead of
      S/TLLAO

   o  Explained the nature of the interaction between the mobility
      management service and the air interface

   Differences from draft-templin-atn-aero-interface-00 to draft-
   templin-atn-aero-interface-01:

   o  Updates based on list review comments on IETF 'atn' list from
      4/29/2019 through 5/7/2019 (issue tracker established)

   o  added list of opportunities afforded by the single virtual link
      model

   o  added discussion of encapsulation considerations to Section 6

   o  noted that DupAddrDetectTransmits is set to 0

   o  removed discussion of IPv6 ND options for prefix assertions.  The
      aero address already includes the MNP, and there are many good
      reasons for it to continue to do so.  Therefore, also including
      the MNP in an IPv6 ND option would be redundant.

   o  Significant re-work of "Router Discovery" section.

   o  New Appendix B on Prefix Length considerations

   First draft version (draft-templin-atn-aero-interface-00):

   o  Draft based on consensus decision of ICAO Working Group I Mobility
      Subgroup March 22, 2019.

Authors' Addresses










Templin & Whyman        Expires December 4, 2020               [Page 46]

Internet-Draft          IPv6 over OMNI Interfaces              June 2020


   Fred L. Templin (editor)
   The Boeing Company
   P.O. Box 3707
   Seattle, WA  98124
   USA

   Email: fltemplin@acm.org


   Tony Whyman
   MWA Ltd c/o Inmarsat Global Ltd
   99 City Road
   London  EC1Y 1AX
   England

   Email: tony.whyman@mccallumwhyman.com



































Templin & Whyman        Expires December 4, 2020               [Page 47]
