xmlns="http://purl.org/atom/ns#draft-ietf-atompub-format-06">

atom ="http://purl.org/atom/ns#draft-ietf-atompub-format-06"

start = atomFeed | atomEntry

atomCommonAttributes =
      attribute xml:base { atomUri }?,
      attribute xml:lang { atomLanguageTag }?

atomPlainTextConstruct =
      atomCommonAttributes,
      attribute type { "text" | "html" }?,
      text

atomXHTMLTextConstruct =
      atomCommonAttributes,
      attribute type { "xhtml" },
      (text|anyElement)*

atomTextConstruct = atomPlainTextConstruct | atomXHTMLTextConstruct


atomPersonConstruct =
      atomCommonAttributes,
         (element atom:name { text } &
          element atom:uri { atomUri }?  &
          element atom:email { atomEmailAddress }?)

atomDateConstruct =
      atomCommonAttributes,
      xsd:dateTime
atomFeed =
      element atom:feed {
         atomCommonAttributes,
         (atomAuthor?
          & atomCategory*
          & atomContributor*
          & atomCopyright?
          & atomGenerator?
          & atomIcon?
          & atomId?
          & atomImage?
          & atomLink+
          & atomSubtitle?
          & atomTitle
          & atomUpdated
          & anyElement* ),
         atomEntry*
      }

type="alternate" resolves to an HTML document, then that document
atomEntry =
      element atom:entry {
         atomCommonAttributes,
         (atomAuthor?
          & atomCategory*
          & atomContent?
          & atomContributor*
          & atomCopyright?
          & atomId
          & atomLink*
          & atomPublished?
          & atomSourceFeed?
          & atomSummary?
          & atomTitle
          & atomUpdated &
          anyElement*)
      }

atomInlineTextContent =
      element atom:content {
         atomCommonAttributes,
         attribute type { "text" | "html" | atomMediaType }?,
         (text)*
      }

atomInlineXHTMLContent =
      element atom:content {
         atomCommonAttributes,
         attribute type {
            "xhtml" |
            atomMediaType
         }?,
         (text|anyElement)*
      }

atomOutOfLineContent =
      element atom:content {
         atomCommonAttributes,
         attribute type {
            "text" |
            "html" |
            "xhtml" |
            atomMediaType }?,
         attribute src { atomUri },
         empty
      }

atomContent =
      atomInlineTextContent |
      atomInlineXHTMLContent |
      atomOutOfLineContent

atomAuthor = element atom:author { atomPersonConstruct }

atomCategory =
      element atom:category {
         atomCommonAttributes, attribute term { text },
         attribute scheme { atomUri }?,
         attribute label { text }?,
         empty
      }

atomContributor = element atom:contributor { atomPersonConstruct }

atomCopyright = element atom:copyright { atomTextContstruct }
atomGenerator =
      element atom:generator {
         atomCommonAttributes,
         attribute uri { atomUri }?,
         attribute version { text }?,
         text
      }

atomIcon = element atom:icon { atomCommonAttributes, (atomUri) }

atomId = element atom:id { atomCommonAttributes, (atomUri) }

atomImage = element atom:image { atomCommonAttributes, (atomUri) }

atomLink =
      element atom:link {
         atomCommonAttributes,
         attribute href { atomUri },
         attribute rel { atomNCName | atomUri }?,
         attribute type { atomMediaType }?,
         attribute hreflang { atomLanguageTag }?,
         attribute title { text }?,
         attribute length { text }?,
         empty
      }

rel_attribute = segment-nz-nc / IRI

atomPublished = element atom:published { atomDateConstruct }

atomSourceFeed =
      element atom:source-feed {
         atomCommonAttributes,
         (atomAuthor?
          & atomCategory*
          & atomContributor*
          & atomCopyright?
          & atomGenerator?
          & atomIcon?
          & atomId?
          & atomImage?
          & atomLink+
          & atomSubtitle?
          & atomTitle
          & atomUpdated
          & anyElement* )
      }

atomSubtitle = element atom:subtitle { atomTextConstruct }

atomSummary = element atom:summary { atomTextConstruct }

atomTitle = element atom:title { atomTextConstruct }

atomUpdated = element atom:updated { atomDateConstruct }

atom = "http://purl.org/atom/ns#draft-ietf-atompub-format-06"

start = atomFeed | atomEntry

atomCommonAttributes =
      attribute xml:base { atomUri }?,
      attribute xml:lang { atomLanguageTag }?

atomPlainTextConstruct =
      atomCommonAttributes,
      attribute type { "TEXT" | "HTML" }?,
      text

atomXHTMLTextConstruct =
      atomCommonAttributes,
      attribute type { "XHTML" },
      (text|anyElement)*

atomTextConstruct =
      atomPlainTextConstruct | atomXHTMLTextConstruct

atomPersonConstruct =
      atomCommonAttributes,
         (element atom:name { text }
          & element atom:uri { atomUri }?
          & element atom:email { atomEmailAddress }?)

atomDateConstruct =
      atomCommonAttributes,
      xsd:dateTime
atomFeed =
      [
         s:rule [
context = "atom:feed"
test = "atom:link[@rel='alternate']"
context = "atom:feed"
test = "atom:author or not(../atom:entry[count(atom:author) = 0])"
atomEntry =
      [
         s:rule [
context = "atom:entry"
test = "atom:link[@rel='alternate']"
context = "atom:entry"
test = "atom:author or ../atom:author"
atomInlineTextContent =
      element atom:content {
         atomCommonAttributes,
         attribute type { "text | "html" | atomMediaType }?,
         (text)*
      }

atomInlineXHTMLContent =
      element atom:content {
         atomCommonAttributes,
         attribute type { "xhtml" | atomMediaType }?,
         (text|anyElement)*
      }


atomOutOfLineContent =
      element atom:content {
         atomCommonAttributes,
         attribute type { "text" | "html" | "xhtml" | atomMediaType }?,
         attribute src { atomUri },
         empty
      }

atomContent = atomInlineTextContent
    | atomInlineXHTMLContent
    | atomOutOfLineContent



atomAuthor = element atom:author { atomPersonConstruct }

atomCategory = element atom:category {
      atomCommonAttributes,
      attribute term { text },
      attribute scheme { atomUri }?,
      attribute label { text }?,
      empty
atomContributor = element atom:contributor { atomPersonConstruct }

atomCopyright = element atom:copyright { atomTextConstruct }

atomGenerator = element atom:generator {
      atomCommonAttributes,
      attribute uri { atomUri }?,
      attribute version { text }?,
      text
atomIcon = element atom:icon { atomCommonAttributes, (atomUri) }

atomId = element atom:id {  }

atomImage = element atom:image { atomCommonAttributes, (atomUri) }

atomLink = element atom:link {
      atomCommonAttributes,
      attribute href { atomUri },
      attribute rel { atomNCName | atomUri }?,
      attribute type { atomMediaType }?,
      attribute hreflang { atomLanguageTag }?,
      attribute title { text }?,
      attribute length { text }?,
      empty
atomPublished = element atom:published { atomDateConstruct }

atomSourceFeed =
      element atom:source-feed {
         atomCommonAttributes,
         (  atomTitle
         & atomUpdated
         & atomLink+
         & atomIcon
         & atomId?
         & atomImage?
         & atomSubtitle?
         & atomAuthor?
         & atomContributor*
         & atomCopyright?
         & atomCategory*
         & atomGenerator?
         & anyElement* )
      }

atomSubtitle = element atom:subtitle { atomTextConstruct }

atomSummary = element atom:summary { atomTextConstruct }

atomTitle = element atom:title { atomTextConstruct }

atomUpdated = element atom:updated { atomDateConstruct }


atomNCName = xsd:string { minLength = "1" pattern = "[^:]*" }
atomMediaType = text
atomLanguageTag = text
atomUri = text
atomEmailAddress = text

anyForeignElement =
      element * - (atom:* | local:*)
      {
         (attribute * { text }
          | text
          | anyForeignElement)*
      }

anyForeignAttribute =
      attribute * - (atom:* | local:* | xml:*) { text }

anyElement =
      element * - atom:*
      {
         (attribute * { text }
          | text
          | anyElement)*
      }

