adif-file            = header-spec *SEP 1*( SEP adif-record )
header-spec          = required-info SEP [optional-info SEP]
required-info        = device-spec SEP start-spec SEP
optional-info        = [version-spec SEP ] [description SEP] [def-protocol SEP]
                       [oid-def-spec SEP ]
device-spec          = "device:" *SP value
description          = "description:" *SP value
oid-def-spec         = "oid-define:" *SP 1*(oid-name "=" oid-num ";")
def-protocol         = "defaultProtocol:" *SP protocol
protocol             = <protocol keyword, defined by IANA>
version-spec         = "version:" *SP number
number               = 1*Digit ; number MUST be "1" for the
                               ; ADIF format described in this document
start-spec           = "date:" *SP datetime
datetime             = date SP time
date                 = Dd SP Mon SP YYYY
time                 = hh ":" mm ":" ss SP zone
Dd                   = <the one or two decimal integer day of the month in
                       the range 1 to 31.>
Mon                  = "JAN" / "FEB" / "MAR" / "APR" / "MAY" / "JUN" /
                       "JUL" / "AUG" / "SEP" / "OCT" / "NOV" / "DEC"
YYYY                 = <the four decimal integer year in the range 0000 to
                       9999>
hh                   = <the two decimal integer hour of the day in the
                       range 00 to 24>
mm                   = <the two decimal integer minute of the hour in the
                       range 00 to 59>
ss                   = <the two decimal integer second of the minute in the
                       range 00 to 59>
zone                 = <A four digit, signed time zone offset, such as -0600 for
                       US Eastern Standard Time.  This may be supplemented by a
                       time zone name in parentheses, e.g., "-0800 (PDT)">
adif-record          = 1*(attrval-series SEP)
attrval-series       = [rdate-spec SEP] 1*(attrval-spec)
rdate-spec           = "rdate:" *SP datetime
                       ; date at which accounting data was received
attrval-spec         = attr ( (std-encoding / base-64-encoding) [sub-attr-encoding])
comment              = ("#" *safe)
std-encoding         = (":" *SP value )
base-64-encoding     = ("::" *SP base64-value )
base64-value         = <base-64-encoded value, defined in [11]>
sub-attr-encoding    = *(";" sub-attr "=" <value>)
sub-attr             = "M" / "H" / "VID" / "VT" / Digit
                       ; Mandatory, Hidden, Vendor ID, Vendor Type
                       ; well known sub-attributes or digit
attr                 = [protocol "//"] attribute-number
attribute-number     = number / oid
oid                  = [ oid-name "." ] oid-num
oid-name             = Alpha *(ldh-str)
oid-num              = *(number "." ) number
value                = IPv4Address / IPv6Address / Boolean / Char /
                       Integer16 / Unsigned16 / Unsigned24 / Integer32 / Unsigned32 /
                       Integer64 / Unsigned64 / Float32 / Float64 /
                       Float128 / Time / Text
                       ; Octet-String values encoded in Base-64
value                = 1*safe-initval *safe
safe                 = <ASCII values 040 - 0176 octal (32 - 126 decimal),
                       excluding semi-colon (";", ASCII 59 decimal)
safe-initval         = <ASCII values 040 - 0176 octal (32 - 126 decimal),
                       excluding colon (":", ASCII 58 decimal), SP,
                       and semi-colon (";", ASCII 59 decimal)
SP                   = %x20 ; Space character
SEP                  = (CR LF) / LF
CR                   = <ASCII CR, carriage return>
LF                   = <ASCII LF, line feed>
ldh-str              = *( Alpha / Digit / "-" ) let-dig
let-dig              = Alpha / Digit
Alpha                = %x41-5A / %x61-7A   ; A-Z / a-z
Digit                = %x30-39  ;0-9

