extended-response = type 1*(":" argument) newline
type		    = token
argument	    = token
token		    = 1*<any CHAR except ":" and CTLs>
newline	    = CRLF / CR / LF / <other appropriate new line sequence>

hex-response = "hex:" hex-64bit newline
hex-64bit	  = 16(hex-char *LWSP-char)
hex-char	  = ("A" / "B" / "C" / "D" / "E" / "F" /
		     "a" / "b" / "c" / "d" / "e" / "f" /
		     "0" / "1" / "2" / "3" / "4" / "5" /
		     "6" / "7" / "8" / "9")

word-response = "word:" word-64bit newline
word-64bit	   = 6(otp-word 1*LWSP-char)
otp-word	   = <any valid word in the standard OTP coding dictionary>
init-response	  = "init:" old-OTP ":" new-params ":" new-OTP
		    1*0(":" check-update ":" check-value) newline

old-OTP	  = hex-64bit
new-OTP	  = hex-64bit
check-update	  = hex-64bit
check-value	  = hex-64bit

new-params	  = algorithm SPACE sequence-number SPACE seed
algorithm	  = "md4" / "md5" / "sha1"
sequence-number = 4*3DIGIT
seed		  = 16*1(ALPHA / DIGIT)

init-word-response = "init-word:" old-OTP ":" new-params ":" new-OTP
		    1*0(":" check-update ":" check-value) newline

old-OTP	  = word-64bit
new-OTP	  = word-64bit
check-update	  = word-64bit
check-value	  = word-64bit

new-params	  = algorithm SPACE sequence-number SPACE seed
algorithm	  = "md4" / "md5" / "sha1"
sequence-number = 4*3DIGIT
seed		  = 16*1(ALPHA / DIGIT)

