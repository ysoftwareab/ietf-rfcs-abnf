PrevUnAcct = (HighACK - OldHighACK) - 
		     AmountSACKed (OldHighACK + 1,HighACK)

        PrevUnAcct represents the amount of data that was not previously
        covered by the cumulative ACK, less the amount of that data that
        is known to have been SACKed.

        If the incoming acknowledgment does not include SACK
        information we conclude that the newly cumulatively ACKed
        data does not contain any retransmissions and this routine
        MUST NOT conduct any of the following calculations and MUST
        return PrevUnAcct.

        Otherwise, we calculate the number of octets that have been
        retransmitted and ACKed.  Since retransmissions increase the
        estimate of the number of octets in the pipe we have to
        decrement the pipe twice when a retransmission is cumulatively
        ACKed (once for the original transmission and once for the
        retransmission).

        Note: Segments can be retransmitted more than once by TCP, but
        not by the algorithm presented in this document.  Therefore, the
        assumption that a segment was retransmitted only once in the
        calculations specified is safe.
RxtBytesACKed = min (PrevUnAcct,RxtBytes)

        We expect that all previously unaccounted for octets have been
        retransmitted in the general case.  However, dropped ACKs (with
        useful SACK information) can cause this number to be an
        overestimate of the actual number of octets retransmitted.
        Thus, we bound RxtBytesACKed to the actual number of octets
        retransmitted.

