





Network Working Group                                      J. F. Reschke
Internet Draft                                                greenbytes
Expires: December 2002                                          S. Reddy
                                                                  Oracle
                                                                J. Davis
                                                     Intelligent Markets
                                                               A. Babich
                                                                 Filenet
                                                               June 2002


                             WebDAV SEARCH
                     draft-reschke-webdav-search-01



Status of this Memo

   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC2026. Internet-Drafts are working
   documents of the Internet Engineering Task Force (IETF), its areas,
   and its working groups. Note that other groups may also distribute
   working documents as Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time. It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress".

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire in December 2002.


Copyright Notice

   Copyright (C) The Internet Society (2002). All Rights Reserved.


Abstract

   This document specifies a set of methods, headers, properties and
   content-types composing WebDAV SEARCH, an application of the HTTP/1.1
   protocol to efficiently search for DAV resources based upon a set of



Reschke, et al.           Expires December 2002                 [Page 1]
.
Internet Draft                WebDAV SEARCH                    June 2002


   client-supplied criteria.

   Distribution of this document is unlimited. Please send comments to
   the Distributed Authoring and Versioning (WebDAV) DASL mailing list
   at www-webdav-dasl@w3.org, which may be joined by sending a message
   with subject "subscribe" to www-webdav-dasl-request@w3.org.
   Discussions of the WebDAV DASL mailing list are archived at URL:
   http://www.w3.org/pub/WWW/Archives/Public/www-webdav-dasl/.











































Reschke, et al.           Expires December 2002                 [Page 2]
.
Internet Draft                WebDAV SEARCH                    June 2002


   Table of Contents

      Abstract . . . . . . . . . . . . . . . . . . . . . . . . . . .   1
      Table of Contents  . . . . . . . . . . . . . . . . . . . . . .   3
      1 Introduction . . . . . . . . . . . . . . . . . . . . . . . .   5
        1.1 DASL . . . . . . . . . . . . . . . . . . . . . . . . . .   5
        1.2 Relationship to DAV  . . . . . . . . . . . . . . . . . .   5
        1.3 Terms  . . . . . . . . . . . . . . . . . . . . . . . . .   5
        1.4 Notational Conventions . . . . . . . . . . . . . . . . .   6
        1.5 An Overview of DASL at Work  . . . . . . . . . . . . . .   6
      2 The SEARCH Method  . . . . . . . . . . . . . . . . . . . . .   7
        2.1 Overview . . . . . . . . . . . . . . . . . . . . . . . .   7
        2.2 The Request  . . . . . . . . . . . . . . . . . . . . . .   7
          2.2.1 The Request-URI  . . . . . . . . . . . . . . . . . .   7
          2.2.2 The Request Body . . . . . . . . . . . . . . . . . .   7
        2.3 The DAV:searchrequest XML Element  . . . . . . . . . . .   8
        2.4 The Successful 207 (Multistatus) Response  . . . . . . .   8
          2.4.1 Extending the PROPFIND Response  . . . . . . . . . .   8
          2.4.2 Example: A Simple Request and Response . . . . . . .   8
          2.4.3 Example: Result Set Truncation . . . . . . . . . . .   9
        2.5 Unsuccessful Responses . . . . . . . . . . . . . . . . .  11
        2.6 Invalid Scopes . . . . . . . . . . . . . . . . . . . . .  11
          2.6.1 Indicating an Invalid Scope  . . . . . . . . . . . .  11
          2.6.2 Example of an Invalid Scope  . . . . . . . . . . . .  12
      3 Discovery of Supported Query Grammars  . . . . . . . . . . .  13
        3.1 The OPTIONS Method . . . . . . . . . . . . . . . . . . .  13
        3.2 The DASL Response Header . . . . . . . . . . . . . . . .  13
        3.3 DAV:supported-query-grammar-set (protected)  . . . . . .  14
        3.4 Example: Grammar Discovery . . . . . . . . . . . . . . .  14
      4 Query Schema Discovery: QSD  . . . . . . . . . . . . . . . .  17
        4.1 Additional SEARCH semantics  . . . . . . . . . . . . . .  17
          4.1.1 Example of query schema discovery  . . . . . . . . .  18
      5 The DAV:basicsearch Grammar  . . . . . . . . . . . . . . . .  20
        5.1 Introduction . . . . . . . . . . . . . . . . . . . . . .  20
        5.2 The DAV:basicsearch DTD  . . . . . . . . . . . . . . . .  20
          5.2.1 Example Query  . . . . . . . . . . . . . . . . . . .  21
        5.3 DAV:select . . . . . . . . . . . . . . . . . . . . . . .  22
        5.4 DAV:from . . . . . . . . . . . . . . . . . . . . . . . .  23
          5.4.1 Relationship to the Request-URI  . . . . . . . . . .  23
          5.4.2 Scope  . . . . . . . . . . . . . . . . . . . . . . .  23
        5.5 DAV:where  . . . . . . . . . . . . . . . . . . . . . . .  24
          5.5.1 Use of Three-Valued Logic in Queries . . . . . . . .  24
          5.5.2 Handling Optional operators  . . . . . . . . . . . .  24
          5.5.3 Treatment of NULL Values . . . . . . . . . . . . . .  25
          5.5.4 Treatment of properties with mixed/element content .  25
          5.5.5 Example: Testing for Equality  . . . . . . . . . . .  25
          5.5.6 Example: Relative Comparisons  . . . . . . . . . . .  25
        5.6 DAV:orderby  . . . . . . . . . . . . . . . . . . . . . .  26



Reschke, et al.           Expires December 2002                 [Page 3]
.
Internet Draft                WebDAV SEARCH                    June 2002


          5.6.1 Comparing Natural Language Strings.  . . . . . . . .  26
          5.6.2 Example of Sorting . . . . . . . . . . . . . . . . .  27
        5.7 Boolean Operators: DAV:and, DAV:or, and DAV:not  . . . .  27
        5.8 DAV:eq . . . . . . . . . . . . . . . . . . . . . . . . .  27
        5.9 DAV:lt, DAV:lte, DAV:gt, DAV:gte . . . . . . . . . . . .  28
        5.10 DAV:literal . . . . . . . . . . . . . . . . . . . . . .  28
        5.11 DAV:is-collection . . . . . . . . . . . . . . . . . . .  28
          5.11.1 Example of DAV:is-collection  . . . . . . . . . . .  28
        5.12 DAV:isdefined . . . . . . . . . . . . . . . . . . . . .  28
        5.13 DAV:like  . . . . . . . . . . . . . . . . . . . . . . .  29
          5.13.1 Syntax for the Literal Pattern  . . . . . . . . . .  29
          5.13.2 Example of DAV:like . . . . . . . . . . . . . . . .  30
        5.14 DAV:contains  . . . . . . . . . . . . . . . . . . . . .  30
          5.14.1 Examples  . . . . . . . . . . . . . . . . . . . . .  31
        5.15 The DAV:limit XML Element . . . . . . . . . . . . . . .  32
        5.16 The DAV:nresults XML Element  . . . . . . . . . . . . .  32
        5.17 The "casesensitive" XML attribute . . . . . . . . . . .  32
        5.18 The DAV:score Property  . . . . . . . . . . . . . . . .  32
        5.19 Query schema for DAV:basicsearch  . . . . . . . . . . .  33
          5.19.1 DTD for DAV:basicsearch QSD . . . . . . . . . . . .  33
          5.19.2 DAV:propdesc Element  . . . . . . . . . . . . . . .  34
            5.19.2.1 DAV:any-other-property  . . . . . . . . . . . .  34
          5.19.3 The DAV:datatype Property Description . . . . . . .  34
          5.19.4 The DAV:searchable Property Description . . . . . .  35
          5.19.5 The DAV:selectable Property Description . . . . . .  35
          5.19.6 The DAV:sortable Property Description . . . . . . .  36
          5.19.7 The DAV:casesensitive Property Description  . . . .  36
          5.19.8 The DAV:operators XML Element . . . . . . . . . . .  36
          5.19.9 Example of Query Schema for DAV:basicsearch . . . .  37
      6 Internationalization Considerations  . . . . . . . . . . . .  39
      7 Security Considerations  . . . . . . . . . . . . . . . . . .  40
      8 Scalability  . . . . . . . . . . . . . . . . . . . . . . . .  41
      9 Authentication . . . . . . . . . . . . . . . . . . . . . . .  42
      10 IANA Considerations . . . . . . . . . . . . . . . . . . . .  43
      11 Copyright . . . . . . . . . . . . . . . . . . . . . . . . .  44
      12 Intellectual Property . . . . . . . . . . . . . . . . . . .  45
      Normative References . . . . . . . . . . . . . . . . . . . . .  46
      Informative References . . . . . . . . . . . . . . . . . . . .  46
      Author's Addresses . . . . . . . . . . . . . . . . . . . . . .  47
      A Three-Valued Logic in DAV:basicsearch  . . . . . . . . . . .  48
      B Change Log . . . . . . . . . . . . . . . . . . . . . . . . .  50
        B.1 From draft-davis-dasl-protocol-xxx . . . . . . . . . . .  50
        B.2 since start of draft-reschke-webdav-search . . . . . . .  51
        B.3 since draft-reschke-webdav-search-00 . . . . . . . . . .  53
      Index  . . . . . . . . . . . . . . . . . . . . . . . . . . . .  54






Reschke, et al.           Expires December 2002                 [Page 4]
.
Internet Draft                WebDAV SEARCH                    June 2002


1 Introduction


1.1 DASL

   This document defines WebDAV SEARCH, an application of HTTP/1.1
   forming a lightweight search protocol to transport queries and result
   sets and allows clients to make use of server-side search facilities.
   It is based on the expired draft for WebDAV DASL [DASL]. [DASLREQ]
   describes the motivation for DASL.

   DASL will minimize the complexity of clients so as to facilitate
   widespread deployment of applications capable of utilizing the DASL
   search mechanisms.

   DASL consists of:

   o  the SEARCH method,

   o  the DASL response header,

   o  the DAV:searchrequest XML element,

   o  the DAV:queryschema property,

   o  the DAV:basicsearch XML element and query grammar, and

   o  the DAV:basicsearchschema XML element.

   For WebDAV-compliant servers, it also defines a new live property
   DAV:supported-query-grammar-set.


1.2 Relationship to DAV

   DASL relies on the resource and property model defined by [RFC2518].
   DASL does not alter this model. Instead, DASL allows clients to
   access DAV-modeled resources through server-side search.


1.3 Terms

   This draft uses the terms defined in [RFC2616], [RFC2518], and
   [DASLREQ].







Reschke, et al.           Expires December 2002                 [Page 5]
.
Internet Draft                WebDAV SEARCH                    June 2002


1.4 Notational Conventions

   The augmented BNF used by this document to describe protocol elements
   is exactly the same as the one described in Section 2.1 of [RFC2616].
   Because this augmented BNF uses the basic production rules provided
   in Section 2.2 of [RFC2616], those rules apply to this document as
   well.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT"
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   When an XML element type in the "DAV:" namespace is referenced in
   this document outside of the context of an XML fragment, the string
   "DAV:" will be prefixed to the element type.

   Note that this draft currently defines elements and properties in the
   WebDAV namespace "DAV:", which it shouldn't do as it isn't a work
   item of the WebDAV working group. The reason for this is the desire
   for some kind of backward compatibility to the expired DASL drafts
   and the assumption that the draft may become an official RFC
   submission of the WebDAV working group at a later point of time.

   Similarily, when an XML element type in the namespace
   "http://www.w3.org/2001/XMLSchema" is referenced in this document
   outside of the context of an XML fragment, the string "xs:" will be
   prefixed to the element type.


1.5 An Overview of DASL at Work

   One can express the basic usage of DASL in the following steps:

   o  The client constructs a query using the DAV:basicsearch grammar.

   o  The client invokes the SEARCH method on a resource that will
      perform the search (the search arbiter) and includes a text/xml or
      application/xml request entity that contains the query.

   o  The search arbiter performs the query.

   o  The search arbiter sends the results of the query back to the
      client in the response. The server MUST send an entity that
      matches the [RFC2518] PROPFIND response.







Reschke, et al.           Expires December 2002                 [Page 6]
.
Internet Draft                WebDAV SEARCH                    June 2002


2 The SEARCH Method


2.1 Overview

   The client invokes the SEARCH method to initiate a server-side
   search. The body of the request defines the query. The server MUST
   emit an entity matching the [RFC2518] PROPFIND response.

   The SEARCH method plays the role of transport mechanism for the query
   and the result set. It does not define the semantics of the query.
   The type of the query defines the semantics.


2.2 The Request

   The client invokes the SEARCH method on the resource named by the
   Request-URI.


2.2.1 The Request-URI

   The Request-URI identifies the search arbiter. Any HTTP resource may
   function as search arbiter. It is not a new type of resource (in the
   sense of DAV:resourcetype as defined in [RFC2518]), nor does it have
   to be a WebDAV-compliant resource.

   The SEARCH method defines no relationship between the arbiter and the
   scope of the search, rather the particular query grammar used in the
   query defines the relationship. For example, the FOO query grammar
   may force the request-URI to correspond exactly to the search scope.


2.2.2 The Request Body

   The server MUST process a text/xml or application/xml request body,
   and MAY process request bodies in other formats. See [RFC3023] for
   guidance on packaging XML in requests.

   If the client sends a text/xml or application/xml body, it MUST
   include the DAV:searchrequest XML element. The DAV:searchrequest XML
   element identifies the query grammar, defines the criteria, the
   result record, and any other details needed to perform the search.








Reschke, et al.           Expires December 2002                 [Page 7]
.
Internet Draft                WebDAV SEARCH                    June 2002


2.3 The DAV:searchrequest XML Element




   <!ELEMENT searchrequest ANY >



   The DAV:searchrequest XML element contains a single XML element that
   defines the query. The name of the query element defines the type of
   the query. The value of that element defines the query itself.


2.4 The Successful 207 (Multistatus) Response

   If the server returns 207 (Multistatus), then the search proceeded
   successfully and the response MUST match that of a PROPFIND. The
   results of this method SHOULD NOT be cached.

   There MUST be one DAV:response for each resource that matched the
   search criteria. For each such response, the DAV:href element
   contains the URI of the resource, and the response MUST include a
   DAV:propstat element.

   In addition, the server MAY include DAV:response items in the reply
   where the DAV:href element contains a URI that is not a matching
   resource, e.g. that of a scope or the query arbiter. Each such
   response item MUST NOT contain a DAV:propstat element, and MUST
   contain a DAV:status element (unless no property was selected).


2.4.1 Extending the PROPFIND Response

   A response MAY include more information than PROPFIND defines so long
   as the extra information does not invalidate the PROPFIND response.
   Query grammars SHOULD define how the response matches the PROPFIND
   response.


2.4.2 Example: A Simple Request and Response

   This example demonstrates the request and response framework. The
   following XML document shows a simple (hypothetical) natural language
   query. The name of the query element is natural-language-query in the
   XML namespace "http://example.com/foo". The actual query is "Find the
   locations of good Thai restaurants in Los Angeles". For this
   hypothetical query, the arbiter returns two properties for each



Reschke, et al.           Expires December 2002                 [Page 8]
.
Internet Draft                WebDAV SEARCH                    June 2002


   selected resource.


   >> Request:

   SEARCH / HTTP/1.1
   Host: ryu.com
   Content-Type: application/xml
   Content-Length: xxx

   <?xml version="1.0" encoding="UTF-8"?>
   <D:searchrequest xmlns:D="DAV:" xmlns:F="http://example.com/foo">
     <F:natural-language-query>
       Find the locations of good Thai restaurants in Los Angeles
     </F:natural-language-query>
   </D:searchrequest>




   >> Response:

   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml; charset="utf-8"
   Content-Length: xxx

   <?xml version="1.0" encoding="UTF-8"?>
   <D:multistatus xmlns:D="DAV:" xmlns:R="http://ryu.com/propschema">
     <D:response>
       <D:href>http://siamiam.com/</D:href>
       <D:propstat>
         <D:prop>
           <R:location>259 W. Hollywood</R:location>
           <R:rating><R:stars>4</R:stars></R:rating>
         </D:prop>
       </D:propstat>
     </D:response>
   </D:multistatus>




2.4.3 Example: Result Set Truncation

   A server MAY limit the number of resources in a reply, for example to
   limit the amount of resources expended in processing a query. If it
   does so, the reply MUST use status code 207, return a DAV:multistatus
   response body and indicate a status of 507 (Insufficient Storage) for



Reschke, et al.           Expires December 2002                 [Page 9]
.
Internet Draft                WebDAV SEARCH                    June 2002


   the search arbiter URI. It SHOULD include the partial results.

   When a result set is truncated, there may be many more resources that
   satisfy the search criteria but that were not examined.

   If partial results are included and the client requested an ordered
   result set in the original request, then any partial results that are
   returned MUST be ordered as the client directed.

   Note that the partial results returned MAY be any subset of the
   result set that would have satisfied the original query.


   >> Request:

   SEARCH / HTTP/1.1
   Host: gdr.com
   Content-Type: text/xml; charset="utf-8"
   Content-Length: xxx

    ... the query goes here ...




   >> Response:

   HTTP/1.1 207 Multistatus
   Content-Type: text/xml; charset="utf-8"
   Content-Length: xxx

   <?xml version="1.0" encoding="utf-8"?>
   <D:multistatus xmlns:D="DAV:">
     <D:response>
       <D:href>http://www.gdr.com/sounds/unbrokenchain.au</D:href>
       <D:propstat>
         <D:prop/>
         <D:status>HTTP/1.1 200 OK</D:status>
       </D:propstat>
     </D:response>
     <D:response>
       <D:href>http://tech.mit.edu/archive96/photos/Lesh1.jpg</D:href>
       <D:propstat>
         <D:prop/>
         <D:status>HTTP/1.1 200 OK</D:status>
       </D:propstat>
     </D:response>
     <D:response>



Reschke, et al.           Expires December 2002                [Page 10]
.
Internet Draft                WebDAV SEARCH                    June 2002


       <D:href>http://gdr.com</D:href>
       <D:status>HTTP/1.1 507 Insufficient Storage</D:status>
       <D:responsedescription xml:lang="en">
          Only first two matching records were returned
       </D:responsedescription>
     </D:response>
   </D:multistatus>




2.5 Unsuccessful Responses

   If an error occurred that prevented execution of the query, the
   server MUST indicate the failure with the appropriate status code and
   SHOULD include a DAV:multistatus element to point out errors
   associated with scopes.

   400 Bad Request. The query could not be executed. The request may be
   malformed (not valid XML for example). Additionally, this can be used
   for invalid scopes and search redirections.

   422 Unprocessable entity. The query could not be executed. If a
   application/xml or text/xml request entity was provided, then it may
   have been well-formed but may have contained an unsupported or
   unimplemented query operator.


2.6 Invalid Scopes


2.6.1 Indicating an Invalid Scope

   A client may submit a scope that the arbiter may be unable to query.
   The inability to query may be due to network failure, administrative
   policy, security, etc. This raises the condition described as an
   "invalid scope".

   To indicate an invalid scope, the server MUST respond with a 400 (Bad
   Request).

   The response includes a body with a DAV:multistatus element. Each
   DAV:response in the DAV:multistatus identifies a scope. To indicate
   that this scope is the source of the error, the server MUST include
   the DAV:scopeerror element.






Reschke, et al.           Expires December 2002                [Page 11]
.
Internet Draft                WebDAV SEARCH                    June 2002


2.6.2 Example of an Invalid Scope


   >> Response:

   HTTP/1.1 400 Bad-Request
   Content-Type: text/xml; charset="utf-8"
   Content-Length: xxx

   <?xml version="1.0" encoding="UTF-8"?>

   <d:multistatus xmlns:d="DAV:">
     <d:response>
       <d:href>http://www.foo.com/X</d:href>
         <d:status>HTTP/1.1 404 Object Not Found</d:status>
       <d:scopeerror/>
     </d:response>
   </d:multistatus>

































Reschke, et al.           Expires December 2002                [Page 12]
.
Internet Draft                WebDAV SEARCH                    June 2002


3 Discovery of Supported Query Grammars

   Servers MUST support discovery of the query grammars supported by a
   search arbiter resource.

   Clients can determine which query grammars are supported by an
   arbiter by invoking OPTIONS on the search arbiter. If the resource
   supports SEARCH, then the DASL response header will appear in the
   response. The DASL response header lists the supported grammars.

   Servers supporting the WebDAV extensions [RFC3253] and/or [ACL] MUST
   also

   o  report SEARCH in the live property DAV:supported-method-set for
      all search arbiter resources and

   o  support the live property DAV:supported-query-grammar-set as
      defined in Section del-13.3.


3.1 The OPTIONS Method

   The OPTIONS method allows the client to discover if a resource
   supports the SEARCH method and to determine the list of search
   grammars supported for that resource.

   The client issues the OPTIONS method against a resource named by the
   Request-URI. This is a normal invocation of OPTIONS defined in
   [RFC2616].

   If a resource supports the SEARCH method, then the server MUST list
   SEARCH in the OPTIONS response as defined by [RFC2616].

   DASL servers MUST include the DASL header in the OPTIONS response.
   This header identifies the search grammars supported by that
   resource.


3.2 The DASL Response Header


   >> Response:

   DASLHeader = "DASL" ":" Coded-URL-List
   Coded-URL-List : Coded-URL [ "," Coded-URL-List ]
   Coded-URL ; defined in section 9.4 of [RFC2518]





Reschke, et al.           Expires December 2002                [Page 13]
.
Internet Draft                WebDAV SEARCH                    June 2002


   The DASL response header indicates server support for a query grammar
   in the OPTIONS method. The value is a URI that indicates the type of
   grammar. Note that although the URI can be used to identify each
   supported search grammar, there is not necessarily a direct
   relationship between the URI and the XML element name that can be
   used in XML based SEARCH requests (the element name itself is
   identified by it's namespace name (a URI reference) and the element's
   local name).

   This header MAY be repeated.


   For example:

   DASL: <http://foo.bar.com/syntax1>
   DASL: <http://akuma.com/syntax2>
   DASL: <DAV:basicsearch>
   DASL: <http://example.com/foo/natural-language-query>




3.3 DAV:supported-query-grammar-set (protected)

   This WebDAV property is required for any server supporting either
   [RFC3253] and/or [ACL] and identifies the XML based query grammars
   that are supported by the search arbiter resource.




   <!ELEMENT supported-query-grammar-set (supported-query-grammar*)>

   <!ELEMENT supported-query-grammar grammar>

   <!ELEMENT grammar ANY>



   ANY value: a query grammar element type


3.4 Example: Grammar Discovery

   This example shows that the server supports search on the /somefolder
   resource with the query grammars: DAV:basicsearch,
   http://foo.bar.com/syntax1 and http://akuma.com/syntax2. Note that
   every server MUST support DAV:basicsearch.



Reschke, et al.           Expires December 2002                [Page 14]
.
Internet Draft                WebDAV SEARCH                    June 2002


   >> Request:

   OPTIONS /somefolder HTTP/1.1
   Host: ryu.com




   >> Response:

   HTTP/1.1 200 OK
   Date: Tue, 20 Jan 1998 20:52:29 GMT
   Allow: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE,
          MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH
   DASL: <DAV:basicsearch>
   DASL: <http://foo.bar.com/syntax1>
   DASL: <http://akuma.com/syntax2>



   This example shows the equivalent taking advantage of a server's
   support for DAV:supported-method-set and DAV:supported-query-grammar-
   set.


   >> Request:

   PROPFIND /somefolder HTTP/1.1
   Host: ryu.com
   Depth: 0
   Content-Type: text/xml; charset="utf-8"
   Content-Length: xxx

   <?xml version="1.0" encoding="UTF-8" ?>
   <propfind xmlns="DAV:">
     <prop>
       <supported-query-grammar-set/>
       <supported-method-set/>
     </prop>
   </propfind>




   >> Response:

   HTTP/1.1 207 Multi-Status
   Content-Type: text/xml; charset="utf-8"



Reschke, et al.           Expires December 2002                [Page 15]
.
Internet Draft                WebDAV SEARCH                    June 2002


   Content-Length: xxx

   <?xml version="1.0" encoding="utf-8" ?>
   <multistatus xmlns="DAV:">
     <response>
       <href>http://ryu.com/somefolder</href>
       <propstat>
         <prop>
           <supported-query-grammar-set>
             <supported-query-grammar>
               <grammar><basicsearch/></grammar>
             </supported-query-grammar>
             <supported-query-grammar>
               <grammar><syntax1 xmlns="http://foo.bar.com" /></grammar>
             </supported-query-grammar>
             <supported-query-grammar>
               <grammar><syntax2 xmlns="http://akuma.com/"/></grammar>
             </supported-query-grammar>
           </supported-query-grammar-set>
           <supported-method-set>
             <supported-method name="COPY" />
             <supported-method name="DELETE" />
             <supported-method name="GET" />
             <supported-method name="HEAD" />
             <supported-method name="LOCK" />
             <supported-method name="MKCOL" />
             <supported-method name="MOVE" />
             <supported-method name="OPTIONS" />
             <supported-method name="POST" />
             <supported-method name="PROPFIND" />
             <supported-method name="PROPPATCH" />
             <supported-method name="PUT" />
             <supported-method name="SEARCH" />
             <supported-method name="TRACE" />
             <supported-method name="UNLOCK" />
           </supported-method-set>
         </prop>
         <status>HTTP/1.1 200 OK</status>
       </propstat>
     </response>
   </multistatus>



   Note that the query grammar element names marshalled as part of the
   DAV:supported-query-grammar-set can be directly used as element names
   in an XML based query.




Reschke, et al.           Expires December 2002                [Page 16]
.
Internet Draft                WebDAV SEARCH                    June 2002


4 Query Schema Discovery: QSD

   Servers MAY support the discovery of the schema for a query grammar.

   The DASL response header and the DAV:supported-query-grammar-set
   property provide means for clients to discover the set of query
   grammars supported by a resource. This alone is not sufficient
   information for a client to generate a query. For example, the
   DAV:basicsearch grammar defines a set of queries consisting of a set
   of operators applied to a set of properties and values, but the
   grammar itself does not specify which properties may be used in the
   query. QSD for the DAV:basicsearch grammar allows a client to
   discover the set of properties that are searchable, selectable, and
   sortable. Moreover, although the DAV:basicsearch grammar defines a
   minimal set of operators, it is possible that a resource might
   support additional operators in a query. For example, a resource
   might support a optional operator that can be used to express
   content-based queries in a proprietary syntax. QSD allows a client to
   discover these operators and their syntax. The set of discoverable
   quantities will differ from grammar to grammar, but each grammar can
   define a means for a client to discover what can be discovered.

   In general, the schema for a given query grammar depends on both the
   resource (the arbiter) and the scope. A given resource might have
   access to one set of properties for one potential scope, and another
   set for a different scope. For example, consider a server able to
   search two distinct collections, one holding cooking recipes, the
   other design documents for nuclear weapons. While both collections
   might support properties such as author, title, and date, the first
   might also define properties such as calories and preparation time,
   while the second defined properties such as yield and applicable
   patents. Two distinct arbiters indexing the same collection might
   also have access to different properties. For example, the recipe
   collection mentioned above might also indexed by a value-added server
   that also stored the names of chefs who had tested the recipe. Note
   also that the available query schema might also depend on other
   factors, such as the identity of the principal conducting the search,
   but these factors are not exposed in this protocol.


4.1 Additional SEARCH semantics

   Each query grammar supported by DASL defines its own syntax for
   expressing the possible query schema. A client retrieves the schema
   for a given query grammar on an arbiter resource with a given scope
   by invoking the SEARCH method on that arbiter with that grammar and
   scope and with a root element of DAV:query-schema-discovery rather
   than DAV:searchrequest.



Reschke, et al.           Expires December 2002                [Page 17]
.
Internet Draft                WebDAV SEARCH                    June 2002


   Marshalling:

      The requst body MUST be DAV:query-schema-discovery element.



         <!ELEMENT query-schema-discovery ANY>
         ANY value: XML element defining a valid query




      The response body takes the form of a RFC2518 DAV:multistatus
      element, where DAV:response is extended to hold the returned query
      grammar inside a DAV:query-schema container element.




      <!ELEMENT response (href, ((href*, status)|(propstat+)),
        query-schema?, responsedescription?) >
      <!ELEMENT query-schema ANY>




   The content of this container is an XML element whose name and syntax
   depend upon the grammar, and whose value may (and likely will) vary
   depending upon the grammar, arbiter, and scope.


4.1.1 Example of query schema discovery

   In this example, the arbiter is recipes.com, the grammar is
   DAV:basicsearch, the scope is also recipes.com.


   >> Request:

   SEARCH / HTTP/1.1
   Host: recipes.com
   Content-Type: application/xml
   Content-Length: xxx

   <?xml version="1.0"?>
   <query-schema-discovery xmlns="DAV:">
     <basicsearch>
       <from>



Reschke, et al.           Expires December 2002                [Page 18]
.
Internet Draft                WebDAV SEARCH                    June 2002


         <scope>
           <href>http://recipes.com</href>
           <depth>infinity</depth>
         </scope>
       </from>
     </basicsearch>
   </query-schema-discovery>




   >> Response:

   HTTP/1.1 207 Multistatus
   Content-Type: application/xml
   Content-Length: xxx

   <?xml version="1.0"?>
   <multistatus xmlns="DAV:">
     <response>
       <href>http://recipes.com</href>
       <status>HTTP/1.1 200 OK</status>
       <query-schema>
         <basicsearchschema>
           (See section "Query schema for DAV:basicsearch" for
           the actual contents)
         </basicsearchschema>
       </query-schema>
     </response>
   </multistatus>




   The query schema for DAV:basicsearch is defined in Section 5.19.
















Reschke, et al.           Expires December 2002                [Page 19]
.
Internet Draft                WebDAV SEARCH                    June 2002


5 The DAV:basicsearch Grammar


5.1 Introduction

   DAV:basicsearch uses an extensible XML syntax that allows clients to
   express search requests that are generally useful for WebDAV
   scenarios. DASL-extended servers MUST accept this grammar, and MAY
   accept others grammars.

   DAV:basicsearch has several components:



   o  DAV:select provides the result record definition.

   o  DAV:from defines the scope.

   o  DAV:where defines the criteria.

   o  DAV:orderby defines the sort order of the result set.

   o  DAV:limit provides constraints on the query as a whole.


5.2 The DAV:basicsearch DTD




   <!ELEMENT basicsearch   (select, from, where?, orderby?, limit?) >

   <!ELEMENT select        (allprop | prop) >

   <!ELEMENT from  (scope) >
   <!ELEMENT scope (href, depth) >

   <!ENTITY %comp_ops      "eq | lt | gt| lte | gte">
   <!ENTITY %log_ops       "and | or | not">
   <!ENTITY %special_ops   "is-collection | isdefined">
   <!ENTITY %string_ops    "like">
   <!ENTITY %content_ops   "contains">

   <!ENTITY %all_ops       "%comp_ops; | %log_ops; | %special_ops; |
                               %string_ops; | %content_ops;">

   <!ELEMENT where ( %all_ops; ) >




Reschke, et al.           Expires December 2002                [Page 20]
.
Internet Draft                WebDAV SEARCH                    June 2002


   <!ELEMENT and   ( ( %all_ops; ) +) >

   <!ELEMENT or    ( ( %all_ops; ) +) >

   <!ELEMENT not   ( %all_ops; ) >

   <!ELEMENT lt    ( prop , literal ) >
   <!ATTLIST lt    casesensitive   (1|0) "1" >

   <!ELEMENT lte   ( prop , literal ) >
   <!ATTLIST lte   casesensitive   (1|0) "1" >

   <!ELEMENT gt    ( prop , literal) >
   <!ATTLIST gt    casesensitive   (1|0) "1" >

   <!ELEMENT gte   ( prop , literal ) >
   <!ATTLIST gte   casesensitive   (1|0) "1" >

   <!ELEMENT eq    ( prop , literal ) >
   <!ATTLIST eq    casesensitive   (1|0) "1" >

   <!ELEMENT literal       (#PCDATA)>

   <!ELEMENT isdefined     (prop) >
   <!ELEMENT like  (prop, literal) >
   <!ATTLIST like   casesensitive   (1|0) "1" >

   <!ELEMENT contains      (#PCDATA)>

   <!ELEMENT orderby       (order+) >
   <!ELEMENT order (prop, (ascending | descending)?)

   <!ATTLIST order casesensitive   (1|0) "1" >
   <!ELEMENT ascending     EMPTY>

   <!ELEMENT descending    EMPTY>


   <!ELEMENT limit (nresults) >
   <!ELEMENT nresults      (#PCDATA) >




5.2.1 Example Query

   This query retrieves the content length values for all resources
   located under the server's "/container1/" URI namespace whose length



Reschke, et al.           Expires December 2002                [Page 21]
.
Internet Draft                WebDAV SEARCH                    June 2002


   exceeds 10000.




   <d:searchrequest xmlns:d="DAV:">
     <d:basicsearch>
       <d:select>
         <d:prop><d:getcontentlength/></d:prop>
       </d:select>
       <d:from>
         <d:scope>
           <d:href>/container1/</d:href>
           <d:depth>infinity</d:depth>
         </d:scope>
       </d:from>
       <d:where>
         <d:gt>
           <d:prop><d:getcontentlength/></d:prop>
           <d:literal>10000</d:literal>
         </d:gt>
       </d:where>
         <d:orderby>
           <d:order>
           <d:prop><d:getcontentlength/></d:prop>
           <d:ascending/>
         </d:order>
       </d:orderby>
     </d:basicsearch>
   </d:searchrequest>




5.3 DAV:select

   DAV:select defines the result record, which is a set of properties
   and values. This document defines two possible values: DAV:allprop
   and DAV:prop, both defined in [RFC2518].

   If the value is DAV:allprop, the result record for a given resource
   includes all the properties for that resource.

   If the value is DAV:prop, then the result record for a given resource
   includes only those properties named by the DAV:prop element. Each
   property named by the DAV:prop element must be referenced in the
   Multistatus response.




Reschke, et al.           Expires December 2002                [Page 22]
.
Internet Draft                WebDAV SEARCH                    June 2002


   The rules governing the status codes for each property match those of
   the PROPFIND method defined in [RFC2518].


5.4 DAV:from

   DAV:from defines the query scope. This contains exactly one DAV:scope
   element. The scope element contains mandatory DAV:href and DAV:depth
   elements.

   DAV:href indicates the URI for a collection to use as a scope.

   When the scope is a collection, if DAV:depth is "0", the search
   includes only the collection. When it is "1", the search includes the
   (toplevel) members of the collection. When it is "infinity", the
   search includes all recursive members of the collection.


5.4.1 Relationship to the Request-URI

   If the DAV:scope element is an absolute URI, the scope is exactly
   that URI.

   If the DAV:scope element is is an absolute URI reference, the scope
   is taken to be relative to the request-URI.


5.4.2 Scope

   A Scope can be an arbitrary URI.

   Servers, of course, may support only particular scopes. This may
   include limitations for particular schemes such as "http:" or "ftp:"
   or certain URI namespaces.

   If a scope is given that is not supported the server MUST respond
   with a 400 status code that includes a Multistatus error. A scope in
   the query appears as a resource in the response and must include an
   appropriate status code indicating its validity with respect to the
   search arbiter.


   Example:

   HTTP/1.1 400 Bad Request
   Content-Type: text/xml; charset="utf-8"
   Content-Length: xxx




Reschke, et al.           Expires December 2002                [Page 23]
.
Internet Draft                WebDAV SEARCH                    June 2002


   <?xml version="1.0" encoding="UTF-8"?>
   <d:multistatus xmlns:d="DAV:">
     <d:response>
       <d:href>http://www.foo.com/scope1</d:href>
       <d:status>HTTP/1.1 502 Bad Gateway</d:status>
     </d:response>
   </d:multistatus>



   This example shows the response if there is a scope error. The
   response provides a Multistatus with a status for the scope. In this
   case, the scope cannot be reached because the server cannot search
   another server (502).


5.5 DAV:where

   DAV:where element defines the search condition for inclusion of
   resources in the result set. The value of this element is an XML
   element that defines a search operator that evaluates to one of the
   Boolean truth values TRUE, FALSE, or UNKNOWN. The search operator
   contained by DAV:where may itself contain and evaluate additional
   search operators as operands, which in turn may contain and evaluate
   additional search operators as operands, etc. recursively.


5.5.1 Use of Three-Valued Logic in Queries

   Each operator defined for use in the where clause that returns a
   Boolean value MUST evaluate to TRUE, FALSE, or UNKNOWN. The resource
   under scan is included as a member of the result set if and only if
   the search condition evaluates to TRUE.

   Consult Appendix A for details on the application of three-valued
   logic in query expressions.


5.5.2 Handling Optional operators

   If a query contains an operator that is not supported by the server,
   then the server MUST respond with a 422 (Unprocessable Entity) status
   code.








Reschke, et al.           Expires December 2002                [Page 24]
.
Internet Draft                WebDAV SEARCH                    June 2002


5.5.3 Treatment of NULL Values

   If a PROPFIND for a property value would yield a 404 or 403 response
   for that property, then that property is considered NULL.

   NULL values are "less than" all other values in comparisons.

   Empty strings (zero length strings) are not NULL values. An empty
   string is "less than" a string with length greater than zero.

   The DAV:isdefined operator is defined to test if the value of a
   property is NULL.


5.5.4 Treatment of properties with mixed/element content

   Comparisons of properties that do not have simple types (text-only
   content) is out-of-scope for DAV:basicsearch. For querying the
   DAV:resourcetype property, see Section 5.11.


5.5.5 Example: Testing for Equality

   The example shows a single operator (DAV:eq) applied in the criteria.




   <d:where>
     <d:eq>
       <d:prop>
         <d:getcontentlength/>
       </d:prop>
       <d:literal>100</d:literal>
     </d:eq>
   </d:where>




5.5.6 Example: Relative Comparisons

   The example shows a more complex operation involving several
   operators (DAV:and, DAV:eq, DAV:gt) applied in the criteria. This
   DAV:where expression matches those resources that are "image/gifs"
   over 4K in size.





Reschke, et al.           Expires December 2002                [Page 25]
.
Internet Draft                WebDAV SEARCH                    June 2002


   <D:where>
     <D:and>
       <D:eq>
         <D:prop>
           <D:getcontenttype/>
         </D:prop>
         <D:literal>image/gif</D:literal>
       </D:eq>
       <D:gt>
         <D:prop>
           <D:getcontentlength/>
         </D:prop>
         <D:literal>4096</D:literal>
       </D:gt>
     </D:and>
   </D:where>




5.6 DAV:orderby

   The DAV:orderby element specifies the ordering of the result set. It
   contains one or more DAV:order elements, each of which specifies a
   comparison between two items in the result set. Informally, a
   comparison specifies a test that determines whether one resource
   appears before another in the result set. Comparisons are applied in
   the order they occur in the DAV:orderby element, earlier comparisons
   being more significant.

   The comparisons defined here use only a single property from each
   resource, compared using the same ordering as the DAV:lt operator
   (ascending) or DAV:gt operator (descending). If neither direction is
   specified, the default is DAV:ascending.

   In the context of the DAV:orderby element, null values are considered
   to collate before any actual (i.e., non null) value, including
   strings of zero length ( as in [SQL99]).


5.6.1 Comparing Natural Language Strings.

   Comparisons on strings take into account the language defined for
   that property. Clients MAY specify the language using the xml:lang
   attribute. If no language is specified either by the client or
   defined for that property by the server or if a comparison is
   performed on strings of two different languages, the results are
   undefined.



Reschke, et al.           Expires December 2002                [Page 26]
.
Internet Draft                WebDAV SEARCH                    June 2002


   The "casesensitive" attribute may be used to indicate case-
   sensitivity for comparisons. Servers SHOULD do caseless matching as
   defined in [CaseMap].


5.6.2 Example of Sorting

   This sort orders first by last name of the author, and then by size,
   in descending order, so that the largest works appear first.




   <d:orderby>
     <d:order>
       <d:prop><r:lastname/></d:prop>
       <d:ascending/>
     </d:order>
     <d:order>
       <d:prop><d:getcontentlength/></d:prop>
       <d:descending/>
     </d:order>
   </d:orderby>




5.7 Boolean Operators: DAV:and, DAV:or, and DAV:not

   The DAV:and operator performs a logical AND operation on the
   expressions it contains.

   The DAV:or operator performs a logical OR operation on the values it
   contains.

   The DAV:not operator performs a logical NOT operation on the values
   it contains.


5.8 DAV:eq

   The DAV:eq operator provides simple equality matching on property
   values.

   The "casesensitive" attribute may be used with this element.






Reschke, et al.           Expires December 2002                [Page 27]
.
Internet Draft                WebDAV SEARCH                    June 2002


5.9 DAV:lt, DAV:lte, DAV:gt, DAV:gte

   The DAV:lt, DAV:lte, DAV:gt, and DAV:gte operators provide
   comparisons on property values, using less-than, less-than or equal,
   greater-than, and greater-than or equal respectively. The
   "casesensitive" attribute may be used with these elements.


5.10 DAV:literal

   DAV:literal allows literal values to be placed in an expression.

   White space in literal values is significant in comparisons. For
   consistency with [RFC2518], clients SHOULD NOT specify the attribute
   "xml:space" (section 2.10 of [XML]) to override this behaviour.


5.11 DAV:is-collection

   The DAV:is-collection operator allows clients to determine whether a
   resource is a collection (that is, whether it's DAV:resourcetype
   element contains the element DAV:collection).

   Rationale: This operator is provided in lieu of defining generic
   structure queries, which would suffice for this and for many more
   powerful queries, but seems inappropriate to standardize at this
   time.


5.11.1 Example of DAV:is-collection

   This example shows a search criterion that picks out all and only the
   resources in the scope that are collections.




   <where xmlns="DAV:">
     <is-collection/>
   </where>




5.12 DAV:isdefined

   The DAV:isdefined operator allows clients to determine whether a
   property is defined on a resource. The meaning of "defined on a



Reschke, et al.           Expires December 2002                [Page 28]
.
Internet Draft                WebDAV SEARCH                    June 2002


   resource" is found in Section 5.5.3.

   Example:




   <d:isdefined>
     <d:prop><x:someprop/></d:prop>
   </d:isdefined>



   The DAV:isdefined operator is optional.


5.13 DAV:like

   The DAV:like is an optional operator intended to give simple
   wildcard-based pattern matching ability to clients.

   The operator takes two arguments.

   The first argument is a DAV:prop element identifying a single
   property to evaluate.

   The second argument is a DAV:literal element that gives the pattern
   matching string.


5.13.1 Syntax for the Literal Pattern




   Pattern := [wildcard] 0*( text [wildcard] )
   wildcard := exactlyone | zeroormore
   text := 1*( <character> | escapesequence )
   exactlyone : = "?"
   zeroormore := "%"
   escapechar := "\"
   escapesequence := "\" ( exactlyone | zeroormore | escapechar )
   character: see section 2.2 of [XML]



   The value for the literal is composed of wildcards separated by
   segments of text. Wildcards may begin or end the literal. Wildcards



Reschke, et al.           Expires December 2002                [Page 29]
.
Internet Draft                WebDAV SEARCH                    June 2002


   may not be adjacent.

   The "?" wildcard matches exactly one character.

   The "%" wildcard matches zero or more characters

   The "


5.13.2 Example of DAV:like

   This example shows how a client might use DAV:like to identify those
   resources whose content type was a subtype of image.




   <D:where>
     <D:like>
       <D:prop><D:getcontenttype/></D:prop>
       <D:literal>image%</D:literal>
     </D:like>
   </D:where>




5.14 DAV:contains

   The DAV:contains operator is an optional operator that provides
   content-based search capability. This operator implicitly searches
   against the text content of a resource, not against content of
   properties. The DAV:contains operator is intentionally not overly
   constrained, in order to allow the server to do the best job it can
   in performing the search.

   The DAV:contains operator evaluates to a Boolean value. It evaluates
   to TRUE if the content of the resource satisfies the search.
   Otherwise, It evaluates to FALSE.

   Within the DAV:contains XML element, the client provides a phrase: a
   single word or whitespace delimited sequence of words. Servers MAY
   ignore punctuation in a phrase. Case-sensitivity is left to the
   server.

   The following things may or may not be done as part of the search:
   Phonetic methods such as "soundex" may or may not be used. Word
   stemming may or may not be performed. Thesaurus expansion of words



Reschke, et al.           Expires December 2002                [Page 30]
.
Internet Draft                WebDAV SEARCH                    June 2002


   may or may not be done. Right or left truncation may or may not be
   performed. The search may be case insensitive or case sensitive. The
   word or words may or may not be interpreted as names. Multiple words
   may or may not be required to be adjacent or "near" each other.
   Multiple words may or may not be required to occur in the same order.
   Multiple words may or may not be treated as a phrase. The search may
   or may not be interpreted as a request to find documents "similar" to
   the string operand.

   The DAV:score property is intended to be useful to rank documents
   satisfying the DAV:contains operator.


5.14.1 Examples

   The example below shows a search for the phrase "Peter Forsberg".

   Depending on its support for content-based searching, a server MAY
   treat this as a search for documents that contain the words "Peter"
   and "Forsberg".




   <D:where>
     <D:contains>Peter Forsberg</D:contains>
   </D:where>



   The example below shows a search for resources that contain "Peter"
   and "Forsberg".




   <D:where>
     <D:and>
       <D:contains>Peter</D:contains>
       <D:contains>Forsberg</D:contains>
     </D:and>
   </D:where>









Reschke, et al.           Expires December 2002                [Page 31]
.
Internet Draft                WebDAV SEARCH                    June 2002


5.15 The DAV:limit XML Element




   <!ELEMENT limit (nresults) >



   The DAV:limit XML element contains requested limits from the client
   to limit the size of the reply or amount of effort expended by the
   server.


5.16 The DAV:nresults XML Element




   <!ELEMENT nresults (#PCDATA)> ;only digits



   The DAV:nresults XML element contains a requested maximum number of
   records to be returned in a reply. The server MAY disregard this
   limit. The value of this element is an integer.


5.17 The "casesensitive" XML attribute

   The "casesensitive" attribute allows clients to specify case-
   sensitive or case-insensitive behavior for DAV:basicsearch operators.

   The possible values for "casesensitive" are "1" or "0". The "1" value
   indicates case-sensitivity. The "0" value indicates case-
   insensitivity. The default value is server-specified. Case-
   insensitivity SHOULD implemented using caseless matching as defined
   in [CaseMap].

   Support for the "casesensitive" attribute is optional. A server
   should respond with a status of 422 if it is used but cannot be
   supported.


5.18 The DAV:score Property






Reschke, et al.           Expires December 2002                [Page 32]
.
Internet Draft                WebDAV SEARCH                    June 2002


   <!ELEMENT score (#PCDATA)>



   The DAV:score XML element is a synthetic property whose value is
   defined only in the context of a query result where the server
   computes a score, e.g. based on relevance. It may be used in
   DAV:select or DAV:orderby elements. Servers SHOULD support this
   property. The value is a string representing the score, an integer
   from zero to 10000 inclusive, where a higher value indicates a higher
   score (e.g. more relevant).

   Clients should note that, in general, it is not meaningful to compare
   the numeric values of scores from two different query results unless
   both were executed by the same underlying search system on the same
   collection of resources.


5.19 Query schema for DAV:basicsearch

   The DAV:basicsearch grammar defines a search criteria that is a
   Boolean-valued expression, and allows for an arbitrary set of
   properties to be included in the result record. The result set may be
   sorted on a set of property values. Accordingly the DTD for schema
   discovery for this grammar allows the server to express:



   1. the set of properties that may be either searched, returned, or
      used to sort, and a hint about the data type of such properties

   2. the set of optional operators defined by the resource.


5.19.1 DTD for DAV:basicsearch QSD




   <!ELEMENT basicsearchschema  (properties, operators)>

   <!ELEMENT any-other-property EMPTY>
   <!ELEMENT properties         (propdesc*)>
   <!ELEMENT propdesc           (prop|any-other-property), datatype?,
                                 searchable?, selectable?, sortable?,
                                 casesensitive?)>
   <!ELEMENT operators          (opdesc*)>
   <!ELEMENT opdesc             ANY>



Reschke, et al.           Expires December 2002                [Page 33]
.
Internet Draft                WebDAV SEARCH                    June 2002


   <!ELEMENT operand-literal    EMPTY>
   <!ELEMENT operand-property   EMPTY>



   The DAV:properties element holds a list of descriptions of
   properties.

   The DAV:operators element describes the optional operators that may
   be used in a DAV:where element.


5.19.2 DAV:propdesc Element

   Each instance of a DAV:propdesc element describes the property or
   properties in the DAV:prop element it contains. All subsequent
   elements are descriptions that apply to those properties. All
   descriptions are optional and may appear in any order. Servers SHOULD
   support all the descriptions defined here, and MAY define others.

   DASL defines five descriptions. The first, DAV:datatype, provides a
   hint about the type of the property value, and may be useful to a
   user interface prompting for a value. The remaining four
   (DAV:searchable, DAV:selectable, DAV:sortable, and DAV:casesensitive)
   identify portions of the query (DAV:where, DAV:select, and
   DAV:orderby, respectively). If a property has a description for a
   section, then the server MUST allow the property to be used in that
   section. These descriptions are optional. If a property does not have
   such a description, or is not described at all, then the server MAY
   still allow the property to be used in the corresponding section.


5.19.2.1 DAV:any-other-property

   This element can be used in place of DAV:prop to describe properties
   of WebDAV properties not mentioned in any other DAV:prop element. For
   instance, this can be used to indicate that all other properties are
   searchable and selectable without giving details about their types (a
   typical scenario for dead properties).


5.19.3 The DAV:datatype Property Description

   The DAV:datatype element contains a single XML element that provides
   a hint about the domain of the property, which may be useful to a
   user interface prompting for a value to be used in a query. Datatypes
   are identified by an element name. Where appropriate, a server SHOULD
   use the simple datatypes defined in [XS2].



Reschke, et al.           Expires December 2002                [Page 34]
.
Internet Draft                WebDAV SEARCH                    June 2002


   <!ELEMENT datatype ANY >



   Examples from [XS2], section 3:




   Qualified name      Example

   xs:boolean          true, false, 1, 0
   xs:string           Foobar
   xs:dateTime         1994-11-05T08:15:5Z
   xs:float            .314159265358979E+1
   xs:integer          -259, 23



   If the data type of a property is not given, then the data type
   defaults to xs:string.


5.19.4 The DAV:searchable Property Description




   <!ELEMENT searchable EMPTY>



   If this element is present, then the server MUST allow this property
   to appear within a DAV:where element where an operator allows a
   property. Allowing a search does not mean that the property is
   guaranteed to be defined on every resource in the scope, it only
   indicates the server's willingness to check.


5.19.5 The DAV:selectable Property Description




   <!ELEMENT selectable EMPTY>






Reschke, et al.           Expires December 2002                [Page 35]
.
Internet Draft                WebDAV SEARCH                    June 2002


   This element indicates that the property may appear in the DAV:select
   element.


5.19.6 The DAV:sortable Property Description

   This element indicates that the property may appear in the
   DAV:orderby element.




   <!ELEMENT sortable EMPTY>




5.19.7 The DAV:casesensitive Property Description

   This element only applies to properties whose data type is
   "xs:string" and derived data types as per the DAV:datatype property
   description. Its presence indicates that compares performed for
   searches, and the comparisons for ordering results on the string
   property will be case sensitive. (The default is case insensitive.)




   <!ELEMENT casesensitive EMPTY>




5.19.8 The DAV:operators XML Element

   The DAV:operators element describes every optional operator supported
   in a query. (Mandatory operators are not listed since they are
   mandatory and permit no variation in syntax.). All optional operators
   that are supported MUST be listed in the DAV:operators element. The
   listing for an operator consists of the operator (as an empty
   element), followed by one element for each operand. The operand MUST
   be either DAV:operand-property or DAV:operand-literal, which indicate
   that the operand in the corresponding position is a property or a
   literal value, respectively. If an operator is polymorphic (allows
   more than one operand syntax) then each permitted syntax MUST be
   listed separately.





Reschke, et al.           Expires December 2002                [Page 36]
.
Internet Draft                WebDAV SEARCH                    June 2002


   <operators xmlns='DAV:'>
     <opdesc>
       <like/><operand-property/><operand-literal/>
     </opdesc>
   </operators>




5.19.9 Example of Query Schema for DAV:basicsearch




   <D:basicsearchschema xmlns:D="DAV:"
     xmlns:xs="http://www.w3.org/2001/XMLSchema"">
     <D:properties>
       <D:propdesc>
         <D:prop><D:getcontentlength/></D:prop>
         <D:datatype><xs:nonNegativeInteger/></D:datatype>
         <D:searchable/><D:selectable/><D:sortable/>
       </D:propdesc>
       <D:propdesc>
         <D:prop><D:getcontenttype/><D:displayname/></D:prop>
         <D:searchable/><D:selectable/><D:sortable/>
       </D:propdesc>
       <D:propdesc>
         <D:prop><fstop xmlns="http://jennicam.org"/></D:prop>
         <D:selectable/>
       </D:propdesc>
       <D:propdesc>
         <D:any-other-property/>
         <D:searchable/><D:selectable/>
       </D:propdesc>
     </D:properties>
     <D:operators>
       <D:opdesc>
         <D:isdefined/><D:operand-property/>
       </D:opdesc>
       <D:opdesc>
         <D:like/><D:operand-property/><D:operand-literal/>
       </D:opdesc>
     </D:operators>
   </D:basicsearchschema>







Reschke, et al.           Expires December 2002                [Page 37]
.
Internet Draft                WebDAV SEARCH                    June 2002


   This response lists four properties. The datatype of the last three
   properties is not given, so it defaults to xs:string. All are
   selectable, and the first three may be searched. All but the last may
   be used in a sort. Of the optional DAV operators, DAV:isdefined and
   DAV:like are supported.

   Note: The schema discovery defined here does not provide for
   discovery of supported values of the "casesensitive" attribute. This
   may require that the reply also list the mandatory operators.










































Reschke, et al.           Expires December 2002                [Page 38]
.
Internet Draft                WebDAV SEARCH                    June 2002


6 Internationalization Considerations

   Clients have the opportunity to tag properties when they are stored
   in a language. The server SHOULD read this language-tagging by
   examining the xml:lang attribute on any properties stored on a
   resource.

   The xml:lang attribute specifies a nationalized collation sequence
   when properties are compared.

   Comparisons when this attribute differs have undefined order.








































Reschke, et al.           Expires December 2002                [Page 39]
.
Internet Draft                WebDAV SEARCH                    June 2002


7 Security Considerations

   This section is provided to detail issues concerning security
   implications of which DASL applications need to be aware. All of the
   security considerations of HTTP/1.1 also apply to DASL. In addition,
   this section will include security risks inherent in searching and
   retrieval of resource properties and content.

   A query must not allow one to retrieve information about values or
   existence of properties that one could not obtain via PROPFIND. (e.g.
   by use in DAV:orderby, or in expressions on properties.)

   A server should prepare for denial of service attacks. For example a
   client may issue a query for which the result set is expensive to
   calculate or transmit because many resources match or must be
   evaluated. 7.1 Implications of XML External Entities

   XML supports a facility known as "external entities", defined in
   section 4.2.2 of [XML], which instruct an XML processor to retrieve
   and perform an inline include of XML located at a particular URI. An
   external XML entity can be used to append or modify the document type
   declaration (DTD) associated with an XML document. An external XML
   entity can also be used to include XML within the content of an XML
   document. For non-validating XML, such as the XML used in this
   specification, including an external XML entity is not required by
   [XML]. However, [XML] does state that an XML processor may, at its
   discretion, include the external XML entity.

   External XML entities have no inherent trustworthiness and are
   subject to all the attacks that are endemic to any HTTP GET request.
   Furthermore, it is possible for an external XML entity to modify the
   DTD, and hence affect the final form of an XML document, in the worst
   case significantly modifying its semantics, or exposing the XML
   processor to the security risks discussed in [RFC3023]. Therefore,
   implementers must be aware that external XML entities should be
   treated as untrustworthy.

   There is also the scalability risk that would accompany a widely
   deployed application which made use of external XML entities. In this
   situation, it is possible that there would be significant numbers of
   requests for one external XML entity, potentially overloading any
   server which fields requests for the resource containing the external
   XML entity.








Reschke, et al.           Expires December 2002                [Page 40]
.
Internet Draft                WebDAV SEARCH                    June 2002


8 Scalability

   Query grammars are identified by URIs. Applications SHOULD not
   attempt to retrieve these URIs even if they appear to be retrievable
   (for example, those that begin with "http://")














































Reschke, et al.           Expires December 2002                [Page 41]
.
Internet Draft                WebDAV SEARCH                    June 2002


9 Authentication

   Authentication mechanisms defined in WebDAV will also apply to DASL.
















































Reschke, et al.           Expires December 2002                [Page 42]
.
Internet Draft                WebDAV SEARCH                    June 2002


10 IANA Considerations

   This document uses the namespace defined by [RFC2518] for XML
   elements. All other IANA considerations mentioned in [RFC2518]are
   also applicable to DASL.














































Reschke, et al.           Expires December 2002                [Page 43]
.
Internet Draft                WebDAV SEARCH                    June 2002


11 Copyright

   To be supplied.
















































Reschke, et al.           Expires December 2002                [Page 44]
.
Internet Draft                WebDAV SEARCH                    June 2002


12 Intellectual Property

   To be supplied.
















































Reschke, et al.           Expires December 2002                [Page 45]
.
Internet Draft                WebDAV SEARCH                    June 2002


Normative References


   [ACL]      Clemm, G., Hopkins, A., Sedlar, E. and Whitehead, J.,
              "WebDAV Access Control Protocol", ID draft-ietf-webdav-
              acl-07, November 2001.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2518]  Goland, Y., Whitehead, E., Faizi, A., Carter, S.R. and
              Jensen, D., "HTTP Extensions for Distributed Authoring --
              WEBDAV", RFC 2518, February 1999.

   [RFC2616]  Fielding, R.T., Gettys, J., Mogul, J.C., Nielsen, H.F.,
              Masinter, L., Leach, P.J. and Berners-Lee, T., "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.

   [RFC3023]  Makoto, M., St.Laurent, S. and Kohn, D., "XML Media
              Types", RFC 3023, January 2001.

   [RFC3253]  Clemm, G., Amsden, J., Ellison, T., Kaler, C. and
              Whitehead, J., "Versioning Extensions to WebDAV", RFC
              3253, March 2002.

   [XML]      Bray, T., Paoli, J., Sperberg-McQueen, C.M. and Maler, E.,
              "Extensible Markup Language (XML) 1.0 (2nd ed)", W3C REC-
              xml, October 2000.

   [XMLNS]    Bray, T., Hollander, D. and Layman, A., "Namespaces in
              XML", W3C REC-xml-names, January 1999.

   [XS2]      Biron, P. V., Malhotra, A. and World Wide Web Consortium,
              "XML Schema Part 2: Datatypes", W3C XS2, May 2001.


Informative References


   [CaseMap]  Davis, M., "Case Mappings", Unicode Techical Reports 21,
              February 2001.

   [DASL]     Reddy, S., Lowry, D., Reddy, S., Henderson, R., Davis, J.
              and Babich, A., "DAV Searching & Locating", ID draft-dasl-
              protocol-00, July 1999.

   [DASLREQ]  Davis, J., Reddy, S. and Slein, J., "Requirements for DAV
              Searching and Locating", ID draft-dasl-requirements-01,



Reschke, et al.           Expires December 2002                [Page 46]
.
Internet Draft                WebDAV SEARCH                    June 2002


              February 1999.

   [SQL99]    Milton, J., "Database Language SQL Part 2: Foundation
              (SQL/Foundation)", ISO ISO/IEC 9075-2:1999 (E), July 1999.


Author's Addresses

   Julian F. Reschke
   greenbytes GmbH
   Salzmannstrasse 152
   Muenster, NW 48159
   Germany

   Phone: +49 251 2807760
   Fax:   +49 251 2807761
   EMail: julian.reschke@greenbytes.de
   URI:   http://greenbytes.de/tech/webdav/

   Surendra Reddy
   Oracle Corporation
   600 Oracle Parkway, M/S 6op3
   Redwoodshores, CA 94065

   Phone: +1 650 506 5441
   EMail: Surendra.Reddy@oracle.com

   Jim Davis
   Intelligent Markets
   410 Jessie Street 6th floor
   San Francisco, CA 94103

   EMail: jrd3@alum.mit.edu

   Alan Babich
   FileNET Corp.
   3565 Harbor Blvd.
   Costa Mesa, CA 92626

   Phone: +1 714 327 3403
   EMail: ababich@filenet.com










Reschke, et al.           Expires December 2002                [Page 47]
.
Internet Draft                WebDAV SEARCH                    June 2002


A Three-Valued Logic in DAV:basicsearch

   ANSI standard three valued logic is used when evaluating the search
   condition (as defined in the ANSI standard SQL specifications, for
   example in ANSI X3.135-1992, section 8.12, pp. 188-189, section 8.2,
   p. 169, General Rule 1)a), etc.).

   ANSI standard three valued logic is undoubtedly the most widely
   practiced method of dealing with the issues of properties in the
   search condition not having a value (e.g., being null or not defined)
   for the resource under scan, and with undefined expressions in the
   search condition (e.g., division by zero, etc.). Three valued logic
   works as follows.

   Undefined expressions are expressions for which the value of the
   expression is not defined. Undefined expressions are a completely
   separate concept >from the truth value UNKNOWN, which is, in fact,
   well defined. Property names and literal constants are considered
   expressions for purposes of this section. If a property in the
   current resource under scan has not been set to a value (either
   because the property is not defined for the current resource, or
   because it is null for the current resource), then the value of that
   property is undefined for the resource under scan. DASL 1.0 has no
   arithmetic division operator, but if it did, division by zero would
   be an undefined arithmetic expression.

   If any subpart of an arithmetic, string, or datetime subexpression is
   undefined, the whole arithmetic, string, or datetime subexpression is
   undefined.

   There are no manifest constants to explicitly represent undefined
   number, string, or datetime values.

   Since a Boolean value is ultimately returned by the search condition,
   arithmetic, string, and datetime expressions are always arguments to
   other operators. Examples of operators that convert arithmetic,
   string, and datetime expressions to Boolean values are the six
   relational operators ("greater than", "less than", "equals", etc.).
   If either or both operands of a relational operator have undefined
   values, then the relational operator evaluates to UNKNOWN. Otherwise,
   the relational operator evaluates to TRUE or FALSE, depending upon
   the outcome of the comparison.

   The Boolean operators DAV:and, DAV:or and DAV:not are evaluated
   according to the following rules:

   UNKNOWN and UNKNOWN = UNKNOWN




Reschke, et al.           Expires December 2002                [Page 48]
.
Internet Draft                WebDAV SEARCH                    June 2002


   UNKNOWN or UNKKNOWN = UNKNOWN

   not UNKNOWN = UNKNOWN

   UNKNOWN and TRUE = UNKNOWN

   UNKNOWN and FALSE = FALSE

   UNKNOWN and UNKNOWN = UNKNOWN

   UNKNOWN or TRUE = TRUE

   UNKNOWN or FALSE = UNKNOWN

   UNKNOWN or UNKNOWN = UNKNOWN




































Reschke, et al.           Expires December 2002                [Page 49]
.
Internet Draft                WebDAV SEARCH                    June 2002


B Change Log


B.1 From draft-davis-dasl-protocol-xxx



   Feb 14, 1998       Initial Draft
   Feb 28, 1998       Referring to DASL as an extension to HTTP/1.1
                      rather than DAV.
                      Added new sections "Notational Conventions",
                      "Protocol Model", "Security Considerations".
                      Changed section 3 to "Elements of Protocol".
                      Added some stuff to introduction.
                      Added "result set" terminology.
                      Added "IANA Considerations".
   Mar 9, 1998        Moved sub-headings of "Elements of Protocol" to
                      first level and removed "Elements of Protocol"
                      Heading.
                      Added an sentence in introduction explaining that
                      this is a "sketch" of a protocol.
   Mar 11, 1998       Added orderby, data typing, three valued logic,
                      query schema property, and element definitions for
                      schema for basicsearch.
   April 8, 1998      - made changes based on last week's DASL BOF.
   May 8, 1998        Removed most of DAV:searcherror; converted to
                      DAV:searchredirect
                      Altered DAV:basicsearch grammar to use avoid use
                      of ANY in DTD
   June 17, 1998      -Added details on Query Schema Discovery
                      -Shortened list of data types
   June 23, 1998      moved data types before change history
                      rewrote the data types section
                      removed the casesensitive element and replace with
                      the casesensitive attribute
                      added the casesensitive attribute to the DTD for
                      all operations that might work on a string
   Jul 20, 1998       A series of changes. See Author's meeting minutes
                      for details.
   July 28, 1998      Changes as per author's meeting. QSD uses SEARCH,
                      not PROPFIND.
                      Moved text around to keep concepts nearby.
                      Boolean literals are 1 and 0, not T and F.
                      contains changed to contentspassthrough.
                      Renamed rank to score.
   July 28, 1998      Added Dale Lowry as Author
   September 4, 1998  Added 422 as response when query lists
                      unimplemented operators.



Reschke, et al.           Expires December 2002                [Page 50]
.
Internet Draft                WebDAV SEARCH                    June 2002


                      DAV:literal declares a default value for
                      xml:space, 'preserve' (see XML spec, section 2.10)
                      moved to new XML namespace syntax
   September 22, 1998 Changed "simplesearch" to "basicsearch"
                      Changed isnull to isdefined
                      Defined NULLness as having a 404 or 403 response
                      used ENTITY syntax in DTD
                      Added redirect
   October 9, 1998    Fixed a series of typographical and formatting
                      errors.
                      Modified the section of three-valued logic to use
                      a table rather than a text description of the role
                      of UNKNOWN in expressions.
   November 2, 1998   Added the DAV:contains operator.
                      Removed the DAV:contentpassthrough operator.
   November 18, 1998  Various author comments for submission
   June 3, 1999       Cosmetic and minor editorial changes only. Fix
                      nits reported by Jim Whitehead in email of April
                      26, 1999. Converted to HTML from Word 97,
                      manually.
   April 20, 2000     Removed redirection feature, since 301/302
                      suffices. Removed Query Schema Discovery (former
                      chapter 4). Everyone agrees this is a useful
                      feature, but it is apparently too difficult to
                      define at this time, and it is not essential for
                      DASL.




B.2 since start of draft-reschke-webdav-search



   October 09, 2001  Added Julian Reschke as author.
                     Chapter about QSD re-added.
                     Formatted into RFC2629-compliant XML document.
                     Added first comments.
                     ID version number kicked up to draft-dasl-
                     protocol-03.
   October 17, 2001  Updated address information for Jim Davis.
                     Added issue of datatype vocabularies.
                     Updated issue descriptions for grammar discovery,
                     added issues on query schema DTD.
                     Fixed typos in XML examples.
   December 17, 2001 Re-introduced split between normative and non-
                     normative references.




Reschke, et al.           Expires December 2002                [Page 51]
.
Internet Draft                WebDAV SEARCH                    June 2002


   January 05, 2002  Version bumbed up to 04. Started work on resolving
                     the issues identified in the previous version.
   January 14, 2002  Fixed some XML typos.
   January 22, 2002  Closed issues naming-of-elements. Fixed query
                     search DTD and added option to discover properties
                     of "other" (non-listed) properties.
   January 25, 2002  Changed into private submission and added reference
                     to historic DASL draft. Marked reference to DASL
                     requirements non-normative.
                     Updated reference to latest deltav spec.
   January 29, 2002  Added feedback from and updated contact info for
                     Alan Babich.
                     Included open issues collected in
                     http://www.webdav.org/dasl/protocol/issues.html.
   February 8, 2002  Made sure that all artwork fits into 72 characters
                     wide text.
   February 18, 2002 Changed Insufficient storage handling
                     (multistatus). Moved is-collection to operators and
                     added to DTD. Made scope/depth mandatory.
   February 20, 2002 Updated reference to SQL99.
   February 28, 2002 "Non-normative References" -> "Informative
                     References". Abstract updated. Consistently specify
                     a charset when using text/xml (no change bars). Do
                     not attempt to define PROPFIND's entity encoding
                     (take out specific references to text/xml). Remove
                     irrelevant headers (Connection:) from examples (no
                     change bars). Added issue on querying based on
                     DAV:href. Updated introduction to indicate
                     relationship to DASL draft. Updated HTTP reference
                     from RFC2068 to RFC2616. Updated XML reference to
                     XML 1.0 2nd edition.
   March 1, 2002     Removed superfluous namespace decl in 2.4.2.
                     Reopened JW14 and suggest to drop xml:space
                     support.
   March 3, 2002     Removed "xml:space" feature on DAV:literal. Added
                     issue about string comparison vs. collations vs.
                     xml:lang. Updated some of the open issues with
                     details from JimW's original mail in April 1999.
                     Resolved scope vs relative URI references. Resolved
                     issues about DAV:ascending (added to index) and the
                     BNF for DAV:like (changed "octets" to
                     "characters").
   March 8, 2002     Updated reference to DeltaV (now RFC3253). Added
                     Martin Wallmer's comments, moved JW5 into
                     DAV:basicsearch section.
   March 11, 2002    Closed open issues regaring the type of search
                     arbiters (JW3) and their discovery (JW9). Rephrased
                     requirements on multistatus response bodies



Reschke, et al.           Expires December 2002                [Page 52]
.
Internet Draft                WebDAV SEARCH                    June 2002


                     (propstat only if properties were selected, removed
                     requirement for responsedescription).
   March 23, 2002    RFC2376 -> RFC3023. Added missing first names of
                     authors. OPTIONS added to example for
                     DAV:supported-method-set.




B.3 since draft-reschke-webdav-search-00



   March 29, 2002 Abstract doesn't refer to DASL WG anymore.
   April 7, 2002  Fixed section title (wrong property name supported-
                  search-grammar-set. Changed DAV:casesensitve to
                  "casesensitive" (it wasn't in the DAV: namespace after
                  all).
   May 28, 2002   Updated some issues with Jim Davis's comments.
   June 10, 2002  Added proposal for different method for query schema
                  discovery, not using pseudo-properties.
   June 25, 2002  QSD marshalling rewritten. Added issue "isdefined-
                  optional".




























Reschke, et al.           Expires December 2002                [Page 53]
.
Internet Draft                WebDAV SEARCH                    June 2002


Index

   D                                     R


   DAV:ascending                         Result Set Truncation
      XML element   5.6                     Example   2.4.3

   DAV:descending
      XML element   5.6

   DAV:searchrequest                     S
      XML element   2.3

   DAV:supported-query-grammar-set       Scope
      property   3.3                        Invalid   2.6

   DAV:supported-search-grammar-         SEARCH method
   set                                      2
      property




   O


   OPTIONS method
      3.1DASL response header
      3.2




   Q


   Query Grammar Discovery
      3using OPTIONS   3.1
      using live property   3.3
      using live property   3.3










Reschke, et al.           Expires December 2002                [Page 54]
.
Internet Draft                WebDAV SEARCH                    June 2002


   Full Copyright Statement
      Copyright (C) The Internet Society (2002). All Rights Reserved.

      This document and translations of it may be copied and furnished
      to others, and derivative works that comment on or otherwise
      explain it or assist in its implementation may be prepared,
      copied, published and distributed, in whole or in part, without
      restriction of any kind, provided that the above copyright notice
      and this paragraph are included on all such copies and derivative
      works. However, this document itself may not be modified in any
      way, such as by removing the copyright notice or references to the
      Internet Society or other Internet organizations, except as needed
      for the purpose of developing Internet standards in which case the
      procedures for copyrights defined in the Internet Standards
      process must be followed, or as required to translate it into
      languages other than English.

      The limited permissions granted above are perpetual and will not
      be revoked by the Internet Society or its successors or assigns.

      This document and the information contained herein is provided on
      an "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET
      ENGINEERING TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR
      IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
      THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
      WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


   Acknowledgement

      Funding for the RFC editor function is currently provided by the
      Internet Society.


















Reschke, et al.           Expires December 2002                [Page 55]

