role        = models.ForeignKey(Role)
frequency   = models.IntegerField(help_text=
                                   "Can review every N days")
available   = models.DateTimeField(blank=True,null=True, help_text=
                         "When will this reviewer be available again")
filter_re   = models.CharField(blank=True)
skip_next   = models.IntegerField(help_text=
                          "Skip the next N review assignments")

team        = models.ForeignKey(Group)
valid       = models.ManyToManyField(ReviewResultName)

time          = models.DateTimeField(auto_now_add=True)
type          = models.ReviewTypeName()
doc           = models.ForeignKey(Document,
related_name='review_request_set')
team          = models.ForeignKey(Group)
deadline      = models.DateTimeField()
requested_rev = models.CharField(verbose_name="requested_revision",
max_length=16, blank=True)
state         = models.ForeignKey(ReviewRequestStateName)
reviewer      = models.ForeignKey(Reviewer, null=True, blank=True)
review        = models.OneToOneField(Document, null=True,
blank=True)
reviewed_rev  = models.CharField(verbose_name="reviewed_revision",
max_length=16, blank=True)
result        = models.ForeignKey(ReviewResultName)


