BWS           = <BWS, defined in [Part1], Section 1.2.2>
OWS           = <OWS, defined in [Part1], Section 1.2.2>
quoted-string = <quoted-string, defined in [Part1], Section 3.2.3>
token         = <token, defined in [Part1], Section 3.2.3>

auth-scheme    = token

auth-param     = token BWS "=" BWS ( token / quoted-string )

b64token       = 1*( ALPHA / DIGIT /
                          "-" / "." / "_" / "~" / "+" / "/" ) *"="

challenge   = auth-scheme [ 1*SP ( b64token / #auth-param ) ]

      Note: User agents will need to take special care in parsing the
      WWW-Authenticate and Proxy-Authenticate header field values
      because they can contain more than one challenge, or if more than
      one of each is provided, since the contents of a challenge can
      itself contain a comma-separated list of authentication
      parameters.

      Note: Many browsers fail to parse challenges containing unknown
      schemes.  A workaround for this problem is to list well-supported
      schemes (such as "basic") first.

credentials = auth-scheme [ 1*SP ( b64token / #auth-param ) ]

Authorization = credentials

Proxy-Authenticate = 1#challenge

Proxy-Authorization = credentials

WWW-Authenticate = 1#challenge

title="Login to \"apps\"", Basic realm="simple"

Authorization = credentials

BWS = <BWS, defined in [Part1], Section 1.2.2>

OWS = <OWS, defined in [Part1], Section 1.2.2>

Proxy-Authenticate = *( "," OWS ) challenge *( OWS "," [ OWS
    challenge ] )
Proxy-Authorization = credentials

WWW-Authenticate = *( "," OWS ) challenge *( OWS "," [ OWS challenge
    ] )

auth-param = token BWS "=" BWS ( token / quoted-string )
auth-scheme = token

b64token = 1*( ALPHA / DIGIT / "-" / "." / "_" / "~" / "+" / "/" )
    *"="

challenge = auth-scheme [ 1*SP ( b64token / [ ( "," / auth-param ) *(
    OWS "," [ OWS auth-param ] ) ] ) ]
credentials = auth-scheme [ 1*SP ( b64token / [ ( "," / auth-param )
    *( OWS "," [ OWS auth-param ] ) ] ) ]

quoted-string = <quoted-string, defined in [Part1], Section 3.2.3>

token = <token, defined in [Part1], Section 3.2.3>
