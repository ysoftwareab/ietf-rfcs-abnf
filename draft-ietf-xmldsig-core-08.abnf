xmlns="http://www.w3.org/2000/07/xmldsig#"

version='0.1'
xmlns='http://www.w3.org/1999/XMLSchema'
elementFormDefault='qualified'>

URI="http://example.com/bar.xml"
          Identifies the external XML resource
          'http://example.com/bar.xml'.
          
URI="http://example.com/bar.xml#chapter1"
          Identifies the element with ID attribute value 'chapter1' of
          the external XML resource 'http://example.com/bar.xml'.
          
URI=""
          Identifies the XML resource containing the signature..
          
URI="#chapter1"
          Identifies the element with ID attribute value 'chapter1' of
          the XML resource containing the signature.
          
Type="http://www.w3.org/2000/07/xmldsig#Object"
Type="http://www.w3.org/2000/07/xmldsig#Manifest"
Type="http://www.w3.org/2000/07/xmldsig#SignatureProperty"
   
axOccurs='1'/>
         <element name='X509CRL' type='ds:CryptoBinary' minOccurs='1' maxOccurs
   ='1'/>
       </choice>
     </complexType>
   </element>

   <element name='X509IssuerSerial'>
      <complexType content='elementOnly'>
       <sequence minOccurs='1' maxOccurs='1'>
         <element name='X509IssuerName' type='string' minOccurs='1' maxOccurs='
   1'/>
         <element name='X509SerialNumber' type='integer' minOccurs='1' maxOccur
s='1'/>
       </sequence>
     </complexType>
ccurs='1'/>
       </sequence>
     </complexType>
   </element>
   DTD:

   <!ELEMENT PGPData (PGPKeyID, PGPKeyPacket?)  >
   <!ELEMENT PGPKeyPacket  (#PCDATA)  >
   <!ELEMENT PGPKeyID  (#PCDATA)  >

  4.4.6 The SPKIData element
  
   The SPKIData element within KeyInfo is used to convey information
   related to SPKI public key pairs, certificates and other SPKI data.
   The content of this element type is open and can be defined elsewhere.
   Schema Definition:

   <element name='SPKIData'>
     <complexType content='elementOnly'>
       <any namespace='##other' minOccurs='1' maxOccurs='unbounded'/>
     </complexType>
   </element>
   DTD:

   <!ELEMENT SPKIData (#PCDATA) >

  4.4.6 The MgmtData element
  
   The MgmtData element within KeyInfo is a string value used to convey
   in-band key distribution or agreement data. For example, DH key
   exchange, RSA key encryption, etc.
   Schema Definition:

   <!-- type declared in KeyInfo -->
   DTD:

   <!ELEMENT MgmtData (#PCDATA)>

  4.5 The Object Element
  
   Identifier
Type="http://www.w3.org/2000/07/xmldsig#Object"
Type="http://www.w3.org/2000/07/xmldsig#Manifest"
Type="http://www.w3.org/2000/07/xmldsig#SignatureProperty"
r = 8BAC1AB6 6410435C B7181F95 B16AB97C 92B341C0
s = 41E2345F 1F56DF24 58F426D1 55B4BA2D B6DCD8C8

ccurs='1'/>
       </sequence>
     </complexType>
   </element>

   DTD:

   <!ELEMENT DSAKeyValue (P, Q, G, Y, J?, (Seed, PgenCounter)?) >
   <!ELEMENT P (#PCDATA) >
   <!ELEMENT Q (#PCDATA) >
   <!ELEMENT G (#PCDATA) >
   <!ELEMENT Y (#PCDATA) >
   <!ELEMENT J (#PCDATA) >
   <!ELEMENT Seed (#PCDATA) >
   <!ELEMENT PgenCounter (#PCDATA) >

    6.4.2 PKCS1
    
   Identifier:
          http://www.w3.org/2000/07/xmldsig#rsa-sha1
          
   Arbitrary-length integers (e.g. "bignums" such as RSA modulii) are
   represented in XML as octet strings. The integer value is first
   converted to a "big endian" bitstring. The bitstring is then padded
   with leading zero bits so that the total number of bits == 0 mod 8 (so
   that there are an even number of bytes). If the bitstring contains
   entire leading bytes that are zero, these are removed (so the
   high-order byte is always non-zero). This octet string is then Base64
   encoded. (The conversion from integer to octet string is equivalent to
   IEEE P1363's I2OSP [P1363] with minimal length).
   
   The expression "RSA algorithm" as used in this draft refers to the
   RSASSA-PKCS1-v1_5 algorithm described in RFC 2437 [PKCS1]. (Note that
   support for PKCS1 Version 2 is planned as soon as that standard is
   finalized). The RSA algorithm takes no explicit parameters. An example
   of an RSA SignatureMethod element is:
   <SignatureMethod Algorithm="&dsig;rsa-sha1"/>

   The SignatureValue content for an RSA signature shall be the base64
   encoding of the octet string. Signatures are interpreted as unsigned
   integers. A signature MAY contain a pre-pended algorithm object
   identifier, but the availability of an ASN.1 parser and recognition of
   OIDs is not required of a signature verifier.
   <SignatureValue>F8aupsHjmbIApjAH4AVYjcsmQkXChyjGYleVJe1KLAmmXWww
   3PqkDPUMojithbwbVWVJJ0UhdT407nl0fBrohvkunDq8gzfGkjvO+zDJws1HkRtZ
   vl1IIBLVWf/qgcLJOgid/2A66niC20GwKcJgIp3o1L+6l7LlSKiZ/CkgDO4=
   </SignatureValue>

   RSA key values have two fields: Modulus and Exponent
   <RSAKeyValue>
     <Exponent>AQAB</Exponent>
     <Modulus>xA7SEU+e0yQH5rm9kbCDN9o3aPIo7HbP7tX6WOocLZAtNfyxSZDU16ksL6W
     jubafOqNEpcwR3RdFsT7bCqnXPBe5ELh5u4VEy19MzxkXRgrMvavzyBpVRgBUwUlV
     5foK5hhmbktQhyNdy/6LpQRhDUDsTvK+g9Ucj47es9AQJ3U=
     </Modulus>
   </RSAKeyValue>
   Schema:

   <element name='RSAKeyValue'>
     <complexType content='elementOnly'>
       <element name='Modulus' type='ds:CryptoBinary' minOccurs='1' maxOccurs='
   1'/>
       <element name='Exponent' type='ds:CryptoBinary' minOccurs='1' maxOccurs=
   '1'/>
     </complexType>
   </element>
   DTD:

   <!ELEMENT RSAKeyValue (Modulus, Exponent) >
   <!ELEMENT Modulus (#PCDATA) >
   <!ELEMENT Exponent (#PCDATA) >

  6.5 Canonicalization Algorithms
  
   Canonicalization algorithms take one implicit parameter when they
   appear as a CanonicalizationMethod within the SignedInfo element.
   
    6.5.1 Minimal Canonicalization
    
   Identifier:
          http://www.w3.org/2000/07/xmldsig#minimal
          
   An example of a minimal canonicalization element is:
   <CanonicalizationMethod Algorithm="&dsig;minimal"/>

   The minimal canonicalization algorithm:
     * converts the character encoding to UTF-8 (without any byte order
       mark (BOM)).
     * normalizes line endings as provided by [XML]. (See section 7: XML
       and Canonicalization and Syntactical Considerations.)
       
    6.5.2 Canonical XML
    
   Identifier:
          http://www.w3.org/TR/2000/WD-xml-c14n-20000710
          
   An example of an XML canonicalization element is:
   <CanonicalizationMethod Algorithm="http://www.w3.org/TR/2000/WD-xml-c14n-200
Algorithm="http://www.w3.org/TR/1999/REC-xpath-19991116">
                <XPath xmlns:dsig="&dsig;">
                 (//. | //@* |
Algorithm="http://www.w3.org/2000/07/xmldsig#sha1"/>
            <DigestValue></DigestValue>
          </Reference>
        </SignedInfo>
        <SignatureValue></SignatureValue>
       </Signature>
       ...
      </Document>
   
