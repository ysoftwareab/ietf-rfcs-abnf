y = H(x)
       a binary string of arbitrary length, x, is given to a function H
       which produces a fixed-length output, y.

pwd-seed = H(username | password  | counter |
                        ClientHello.random | ServerHello.random)

pwd-value = PRF(pwd-seed, "TLS-PWD Hunting And Pecking",
                          "TLS-PWD seed") [0..p];

found = 0
counter = 1
pwd-seed = H(username | password | counter)
pwd-value = PRF(pwd-seed, "TLS-PWD Hunting And Pecking",
                            ClientHello.random | ServerHello.random)
x = pwd-value
PE = (x, y)
PE = (x, p-y)
found = 1
counter = counter + 1
found = 0
counter = 1
pwd-seed = H(username | password | counter)
pwd-value = PRF(pwd-seed, "TLS-PWD Hunting And Pecking",
                            ClientHello.random | ServerHello.random)
PE = pwd-value ^ ((p-1)/q) mod p
found = 1
counter = counter + 1
scalar = (private + mask) mod q

Element = inverse(scalar-op(mask, PE))

z = F(scalar-op(client.private,
                   element-op(ServerKeyExchange.Element,
                              scalar-op(ServerKeyExchange.scalar, PE))))

z = F(scalar-op(server.private,
                   element-op(ClientKeyExchange.Element,
                              scalar-op(ClientKeyExchange.scalar, PE))))

