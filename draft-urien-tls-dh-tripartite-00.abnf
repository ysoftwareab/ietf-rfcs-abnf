pre-master-secret = abP (or g^ab with multiplicative notations) 
    
Sclient = e(aP,cP)^b  
Sserver = e(bP,cP)^a  
Sttp    = e(aP,bP)^c, 
    
S = Sserver = Sclient = Sttp = shared-secret 
    
pre-master-secret = h(S), h a hash function producing p bits 
    
master_secret = PRF(pre-master-secret, 
                       "master secret", 
                        ClientHello.random + ServerHello.random). 
    
bP==> 
S= e(aP,cP)^b                S= e(bP,cP)^a 
S= e(aP,bP)^c 
PreMasterSecret = h(e(bP,cP)^a) 
    
PreMasterSecret = h(e(aP,cP)^b) 
    
PreMasterSecret = h(e(aP,bP)^c) 
    
h = sha1(a0 || a1), a0 and a1 are values of exactly q bits. 
    
r = order of G1 = prime factor of q+1. 
h = cofactor = #ECC(Fq) / r  
    
q=8780710799663312522437781984754049815806883199414208211028653399266
h=1201601226489114607938882136674053420480295440125131182291961513104
r= 730750818665451621361119245571504901405976559617 
    

 
          TLS tripartite Diffie-Hellman Key Exchange      June 2010 
 
a = 321231739573260508064943282038854866624801566274 
    
aP = 
b = 591069617759232948334516538341133684003963967541 
    
bP = 
c = 332790059747456431829511198714114673843901104395 
    
cP = 
S= f(aP,bP)^c = f(bP,cP)^a= f(cP,aP)^b = 
