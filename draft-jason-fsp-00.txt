<Working Group Name>                                        Jason Gao
Internet Draft                                           <Affiliation>
Intended status: Informational                            July 3, 2017
Expires: January 2018



                         Flexible Session Protocol
                           draft-jason-fsp-00.txt


Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   This document may contain material from IETF Documents or IETF
   Contributions published or made publicly available before November 10,
   2008. The person(s) controlling the copyright in some of this
   material may not have granted the IETF Trust the right to allow
   modifications of such material outside the IETF Standards Process.
   Without obtaining an adequate license from the person(s) controlling
   the copyright in such materials, this document may not be modified
   outside the IETF Standards Process, and derivative works of it may
   not be created outside the IETF Standards Process, except to format
   it for publication as an RFC or to translate it into languages other
   than English.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html

   This Internet-Draft will expire on January 3, 2018.



Gao                   Expires January 3, 2018                [Page 1]

Internet-Draft        Flexible Session Protocol              July 2017


Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors. All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document. Please review these documents carefully,
   as they describe your rights and restrictions with respect to this
   document. Code Components extracted from this document must include
   Simplified BSD License text as described in Section 4.e of the Trust
   Legal Provisions and are provided without warranty as described in
   the Simplified BSD License.

Abstract

   FSP is a connection-oriented transport layer protocol that provides
   mobility, multihoming and multipath support by introducing the
   concept of 'upper layer thread ID', which was firstly suggested in
   [Gao2002].

   Authencity of an FSP packet is protected by some algorithm that
   requires a shared key. The upper layer thread ID is assigned roughly
   the same semantics as the Security Parameter Index (SPI) in MOBIKE
   [RFC4555] to index the key. The key is either a weak one agreed by
   the FSP participants, or cryptographically established and installed
   by the upper layer application.

   FSP facilitates such key installation by introducing the concept of
   transmit transaction, which makes it flexible for the application
   layer protocols to adopt new establishment algorithm.

Table of Contents

   1. Introduction ................................................ 5
      1.1. Mobility support ........................................ 6
      1.2. Resistance against connection redirection ............... 6
      1.3. Ubiquitous encryption and/or authentication of data...... 7
      1.4. Flexibility of Key Establishment ........................ 8
      1.5. Elimination of IPv6 routing scalability problem.......... 9
      1.6. Zero round-trip connection cloning ..................... 10
   2. Conventions and Definitions................................. 10


Gao                   Expires January 3, 2018                [Page 2]

Internet-Draft        Flexible Session Protocol              July 2017


   3. Packet Structure ........................................... 13
      3.1. FSP over IPv6 ......................................... 13
      3.2. FSP over UDP/IPv4...................................... 15
      3.3. Header Signature....................................... 16
      3.4. Connect Initialization................................. 19
      3.5. Acknowledgment to Connect Initialization ...............20
      3.6. Connect Request........................................ 21
      3.7. Sink Parameters........................................ 22
      3.8. Normal fixed header.................................... 24
      3.9. Acknowledgment to Connect Request ......................26
      3.10. RESET ................................................ 26
      3.11. Selective Negative Acknowledgment .....................27
   4. The Finite States .......................................... 28
      4.1. NON_EXISTENT .......................................... 28
      4.2. LISTENING ............................................. 28
      4.3. CONNECT_BOOTSTRAP...................................... 29
      4.4. CHALLENGING ........................................... 29
      4.5. CONNECT_AFFIRMING...................................... 29
      4.6. ACTIVE{A.K.A. ESTABLISHED}............................. 29
      4.7. COMMITTING ............................................ 30
      4.8. PEER_COMMIT ........................................... 30
      4.9. COMMITTING2 ........................................... 31
      4.10. COMMITTED ............................................ 31
      4.11. CLOSABLE ............................................. 32
      4.12. PRE_CLOSED ........................................... 32
      4.13. CLOSED ............................................... 32
      4.14. CLONING .............................................. 32
      4.15. {Cloned} ............................................. 33
   5. End-to-End Negotiation ..................................... 33
      5.1. Init Check Code, Salt and Cookie ...................... 33
      5.2. Connect Initialization ................................ 34
      5.3. Response to Connect Initialization .................... 34
      5.4. Week Session Key Exchange: Initiator to Responder...... 34
      5.5. Week Session Key Exchange: Responder to Initiator...... 35
      5.6. Retransmission ........................................ 36
   6. Packet Protection Agreement................................. 36
      6.1. CRC64 ................................................. 37
      6.2. Payload Encryption and Decryption ..................... 37
      6.3. Packet Authentication Only............................. 39
   7. Send and Receive ........................................... 39
      7.1. Start a new Transmit Transaction ...................... 39
      7.2. Send pure data packet ................................. 39
      7.3. Flow Control .......................................... 40
      7.4. SNACK and selective retransmission ..................... 40
         7.4.1. Calculation of RTT ................................ 40
         7.4.2. Generation and transmission of SNACK .............. 41
         7.4.3. Negative acknowledgment of Packets Sent ........... 41


Gao                   Expires January 3, 2018                [Page 3]

Internet-Draft        Flexible Session Protocol              July 2017


         7.4.4. Retransmission .................................... 42
      7.5. Commit a Transmit Transaction .......................... 42
      7.6. Respond to Transmit Transaction Commitment ............. 42
      7.7. Finalize a Transmit Transaction Commitment ............. 43
   8. Graceful Close ............................................. 43
      8.1. Initiation of Connection Close ......................... 43
      8.2. Acknowledgment of Connection Close ..................... 43
      8.3. Finalization of Connection Close ....................... 43
      8.4. Retry of Connection Close .............................. 43
   9. Mobility Support ........................................... 44
      9.1. Heartbeat Signals ...................................... 44
      9.2. IP Address Change Detection ............................ 45
      9.3. IP Address Change Notification ......................... 45
   10. Connection Multiplication .................................. 46
      10.1. Request to Multiply Connection ........................ 46
      10.2. Response to Connection Multiplication Request.......... 46
      10.3. Duplicate Detection of Connection Multiplication Request47
      10.4. Retransmission........................................ 47
   11. Timeouts and abruptly Shutdown............................. 48
      11.1. Timeouts in End-to-End Negotiation .................... 48
      11.2. Timeouts in Multiply .................................. 48
      11.3. Timeout of Transmit Transaction Commitment ............ 48
      11.4. Timeout of Graceful Shutdown .......................... 49
      11.5. Idle Timeout ......................................... 49
      11.6. Session Key Timeout ................................... 49
      11.7. Abrupt Shutdown ....................................... 49
   12. Issues Should Have Resolved ................................ 49
      12.1. Resolution of ULTID ................................... 49
      12.2. Integrated Proxy Mode of Host Name Resolution.......... 50
      12.3. Path selection ........................................ 51
      12.4. Multipath MTU discovery ............................... 52
      12.5. Milk-type Payload and Minimal Delay Service ........... 52
      12.6. Explicit Congestion Notification and Congest Control ... 53
   13. Security Considerations .................................... 53
      13.1. Resistance against Deny of Service Attack ............. 53
      13.2. Resistance against Replay Attack ...................... 53
      13.3. Resistance against Passive Attacks .................... 53
      13.4. Resistance against Masquerade Attack .................. 53
      13.5. Resistance against Active Man-In-The-Middle Attack..... 54
   14. IANA Considerations........................................ 54
   15. Conclusions ............................................... 54
   16. References ................................................ 55
      16.1. Normative References.................................. 55
      16.2. Informative References................................ 56
   17. Acknowledgments ........................................... 61




Gao                   Expires January 3, 2018                [Page 4]

Internet-Draft        Flexible Session Protocol              July 2017


1. Introduction

   Flexible Session Protocol is a connection-oriented transport layer
   provides mobility, multihoming and multipath support by introducing
   the concept of 'upper layer thread ID' (ULTID), which was firstly
   suggested in [Gao2002]. One FSP connection MAY associate with up to 4
   lower layer addresses. Besides the IP addresses associated with an
   FSP connection MAY change after the FSP connection is established.

   When FSP is applied over IPv6 networks, the lower layer addresses
   SHALL be IPv6. The rightmost 32 bits of each IPv6 address is
   designated as the ULTID which MUST keep unchanged across IPv6 address
   migration or translation. The leftmost 96 bits still holds the
   routing locator semantics. It can be argued that the routing
   scalability problem in the IPv6 network is effectively eliminated by
   such tuning of IPv6.

   An integrity check code (ICC) field associated with the ULTID is
   designed in the FSP header to protect authencity and optionally
   privacy of the FSP packet. An FSP packet is assumed to originate from
   the same source if the ICC value associated with certain destination
   ULTID passes validation, regardless of the source or destination
   address in the underlying layer.

   ICC is either calculated by [CRC64] which protects FSP against
   unintended modification, or cryptographically calculated with some
   Authenticated Encryption with Additional Data ([R01]) algorithm (for
   current version of FSP the algorithm chosen is [AES]-[GCM]) or a
   cryptographic hash function (for current version of FSP it is BLAKE2
   [RFC7693]) that requires a shared secret key.

   In the former case a weak key meant to obfuscate the CRC64 checksum
   is agreed by the FSP participants. In the latter case, the shared
   secret key is assumed to be installed by the upper layer application
   (ULA).

   The ULTID is assigned roughly the same semantics with Security
   Parameter Index (SPI) in MOBIKE [RFC4555]. Either the weak key or the
   shared secret key is indexed by the source or destination ULTID in
   the local context of the sender or the receiver, respectively.




Gao                   Expires January 3, 2018                [Page 5]

Internet-Draft        Flexible Session Protocol              July 2017


   FSP facilitates secret key installation by introducing the concept of
   transmit transaction. Mechanism to facilitate transmit transaction
   also provides the session-connection synchronization service to the
   upper layer.

   FSP is a transport layer protocol as specified in [RFC1122], provides
   services alike TCP [STD5] to ULA, with session layer features as
   suggested in [OSI/RM], most noticeably session-connection
   synchronization. It can be argued that FSP makes it much more
   flexible for the application layer protocols to adopt new key
   establishment protocol/algorithm while offloading routine
   authentication and optionally encryption of the data to the
   underlying layers where it may be much easier to exploit hardware-
   acceleration.

1.1. Mobility support

   At present, mobility, multihoming and multipath issues are active
   concerns in the Internet research and development community. FSP
   directly supports node mobility and node multihoming, indirectly
   support multipath, site mobility and site multihoming.

   To make mobility support work reasonably stable it is assumed that
   one end-node MUST keep its lower layer address reasonably stable
   while the other end-node SHOULD NOT change its lower layer address
   too frequently so that the packet to inform the remote end to update
   the lower layer address association could reach its destination in a
   satisfying success rate. Thus FSP solves somewhat coarse-grain or
   low-speed mobility problem. Fine-grain or high-speed mobility is left
   to the underlying physical network. Here 'physical network' has
   semantics specified in [RFC1122].

   It can be argued in the prevailing cloud-computing scenarios and the
   emerging Internet of Things use cases such assumption is naturally
   held.

1.2. Resistance against connection redirection

   To defend against possible connection redirection or dirty data
   injection (message insertion, deletion, modification and replaying),
   each FSP connection prepares a pair of ULTIDs. An ULTID is assigned



Gao                   Expires January 3, 2018                [Page 6]

Internet-Draft        Flexible Session Protocol              July 2017


   roughly the same semantics with the Security Parameter Index (SPI) in
   MOBIKE [RFC4555].

   An integrity check code (ICC) field is designed in FSP header to
   protect authencity and optionally privacy of the FSP packet.

   On initiating FSP takes use of [CRC64] to make checksum of the FSP
   packet to protect it against unintentional modification. The checksum
   is taken as the ICC.

   After the ULA has installed a secret key, value of ICC is calculated
   by firstly getting the secret key associated with the local ULTID,
   then calculating the tag value with the AES-GCM [GCM] authenticated
   encryption with additional data algorithm [R01], or calculating the
   message authentication code with the BLAKE2 algorithm [RFC7693].

   FSP facilitates secret key installation by introducing the concept of
   transmit transaction.

   An ULTID is effective in the local context of an FSP connection only.
   The source ULTID and the destination ULTID of an FSP packet usually
   differ in their values. However, the secret keys indexed in the local
   contexts of the two end-points must have the same value.

1.3. Ubiquitous encryption and/or authentication of data

   It assumes that in the scenarios applying FSP it is the ULA to do key
   establishment and/or end-point authentication while the FSP layer
   provides authenticated, optionally encrypted data transfer service.
   Together they establish a secure channel between two application end-
   points.

   The ULA SHOULD install a shared secret key as soon as possible.
   Whenever the new secret key is installed, by default FSP utilize a
   pre-determined Authenticated Encryption with Additional Data (AEAD)
   algorithm to protect both authencity of the full FSP packet and
   privacy of the payload. In this FSP version the algorithm chosen is
   AES-GCM.

   Optionally the ULA MAY make FSP to just apply message authentication
   code (MAC) generation and verification. In this version the algorithm



Gao                   Expires January 3, 2018                [Page 7]

Internet-Draft        Flexible Session Protocol              July 2017


   chosen to generate and verify the MAC is BLAKE2 (RFC7693). Typically
   when the ULA does its own stream encryption it chooses this option.

1.4. Flexibility of Key Establishment

   Transmit transaction is introduced in FSP to facilitate ULA to do
   end-point authentication and/or key establishment. A dedicate
   application program interface (API) is designed for the ULA to
   install the secret key established by the ULA.

   A flag called 'End of Transaction' (EoT) is designed in the FSP
   header. When it is set, it marks that the transmit transaction in the
   direction from the source of the FSP packet towards the destination
   of the FSP packet is committed.

   By committing a transmit transaction the ULA clearly tells the
   underlying FSP layer that the next packet sent MAY adopt a new secret
   key. The ULA SHOULD install a new secret key instantly after it has
   committed a transmit transaction. After the ULA install a new secret
   key every packet sent later than the one with the EoT flag set MUST
   adopt the new secret key.

   On receiving an FSP packet with the EoT flag set the ULA is informed
   that the next packet received MAY adopt a new shared secret key. The
   ULA SHOULD have installed the new shared secret key, or install it
   instantly after accepting the packet with the EoT flag set. If the
   new secret key has ever been installed the packet received after the
   one with the EoT flag set MUST adopt the new secret key.

   In a typical scenario the ULA endpoints first setup the FSP
   connection where resistance against connection redirection is weakly
   enforced by CRC64. After the pair of ULA endpoints establish a shared
   secret key, install the secret key and commit current transmit
   transactions, authencity of the FSP packets sent later is
   cryptographically protected and resistance against various attacks is
   secured.

   The shared secret key could be derived from a preshared secret, where
   zero round-trip of initial data packet is required. The key could be
   generated by the initiator side of the FSP connection and transported
   to the responder side by encrypted it in the public key which may be
   published in the payload piggybacked on the acknowledgment packet of


Gao                   Expires January 3, 2018                [Page 8]

Internet-Draft        Flexible Session Protocol              July 2017


   the FSP connection request packet, or may be queried in DNS [RFC4398].
   And it could be agreed by the ULA participants after a few round-
   trips of data packets were exchanged as well.

   It is arguably much more flexible for the application layer protocols
   to adopt new key establishment algorithm while offloading routine
   authentication and optionally encryption of the data to the
   underlying layers where it may be much easier to exploit hardware-
   acceleration.

1.5. Elimination of IPv6 routing scalability problem

   To utilize IPv6 address space more efficiently FSP makes some slight
   tuning of address architecture when working over the IPv6 network. In
   an IPv6 packet that carries FSP payload each of the source and
   destination 128-bit IPv6 address is split into three parts: the 64-
   bit network prefix, the 32-bit aggregation host id and the 32-bit
   ULTID.

   It requires some further subtle tuning of the IPv6 architecture:

   o Each physically network interface that has IPv6 address configured
      SHALL NOT have the network prefix configured longer than 96 bits,
      no matter that the IPv6 address is assigned by Stateless Address
      Autoconfiguration ([RFC4862]), stateful Dynamic Host Configuration
      Protocol for IPv6 ([RFC3315], [RFC3633]) or by some other means.

   o The ULA is the ultimate IPv6 end-point.

   o Every network node is effectively a router. Especially when FSP
      over UDP in the IPv4 network is exploited the two end point host
      nodes are treated as if they were routers connecting the IPv6
      addressed ULAs across the IPv4 network.

   o Whenever an IPv6 interface is reconfigured, the leftmost 64 bits
      of any IPv6 address MAY change freely, the centermost 32 bits
      SHOULD be stable while the rightmost 32 bits MUST keep unmodified.

   And thus it may be argued that the routing scalability problem does
   not exist at all for FSP over such tuned IPv6.





Gao                   Expires January 3, 2018                [Page 9]

Internet-Draft        Flexible Session Protocol              July 2017


1.6. Zero round-trip connection cloning

   An FSP connection MAY be multiplied to get a clone or clones of the
   connection. In this version of FSP a clone connection MAY NOT be
   cloned further, and only the connection where authencity of the
   packets is cryptographically protected may be multiplied.

   The packet that carries the command to multiply an established FSP
   connection MUST be sent from a new allocated local ULTID towards the
   destination ULTID of the cloned connection. It is an out-of-band
   packet in the context of the cloned connection and it MUST be
   cryptographically protected by the secret key of the cloned
   connection. The packet MAY carry payload as it usually does.

   The receiver of the packet MUST allocate a new local ULTID, accept
   the optional payload in the new context associated with the new ULTID,
   derive a new secret key from the secret key of the cloned connection,
   and responds from the new context. The response MAY carry payload as
   it usually does. The very first response packet MUST be protected by
   the new secret key. The sender of the multiply command packet MUST
   automatically inaugurate the same secret key, derived from the secret
   key of the same cloned connection. And it MUST treat the response
   packet as though a transmit transaction have been committed by the
   responder, i.e. authencity of the response packet is verified with
   the new secret key.

   Thus the new clone connection is established at a new pair of ULTIDs
   with zero round-trip overhead. This mechanism may be exploited to
   provide expedited data transfer service or parallel data transfer.

2. Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

   In this document, these words will appear with that interpretation
   only when in ALL CAPS. Lower case uses of these words are not to be
   interpreted as carrying significance described in RFC 2119.

   Integers, no matter 16-bit, 32-bit or 64-bit, signed or unsigned MUST
   be conveyed in network byte order.


Gao                   Expires January 3, 2018               [Page 10]

Internet-Draft        Flexible Session Protocol              July 2017


   Well-known acronyms that may be applied in forming words are:

    ID            Identification
    RTT           Round-Trip Time
    SN            Sequence Number

   o ULTID

   The Upper Layer Thread Identification. It is a 32-bit word that was
   allocated by one end point of an FSP connection and it unique in the
   local context of the end point.

   o Session

   A full FSP session consists of one connection that was originally
   established from scratch and all of its clones. However for this
   version of FSP session and connection are effectively interchangeable.
   A session is identified by an ULTID in the local context of the ULA
   endpoint.

   o Transmit Transaction

   An FSP packet is the data segment of the underlying IPv6 packet, or
   the payload of one UDP datagram without segmentation in the
   underlying IPv4 layer, while a transmit transaction of FSP is a
   sequence of FSP packets that were sent and marked by ULA as one
   continuous stream where all packets in the stream must be
   acknowledged before any further packet is allowed to be sent.

   A PERSIST or MULTIPLY packet always starts a transmit transaction.

   An ACK_CONNECT_REQ packet itself makes a singular particular transmit
   transaction.

   o EoT

   A transmit transaction is said to reach End of Transaction (EoT) if
   the 'End of Transaction' flag is set in a legitimate PURE_DATA,
   PERSIST or MULTIPLY packet. We said that the packet terminates the
   transmit transaction if the EoT flag is set.





Gao                   Expires January 3, 2018               [Page 11]

Internet-Draft        Flexible Session Protocol              July 2017


   An out-of-band KEEP_ALIVE or ACK_FLUSH packet whose sequence number
   equals that of the last received packet and whose EoT flag is set
   forcefully terminates the transmit transaction even if the EoT flag
   of the last received packet is unset.

   An ACK_CONNECT_REQ packet itself marks end of the singular transmit
   transaction.

   EOT/Termination of transmit transaction is unilateral. An FSP end
   node may not send further data if it has initiated EOT of its
   transmit direction unless the ACK_FLUSH packet in response of the EOT
   initiative is received.

   o Session Key

   The session key is a bit string of at least 128 bits that means to
   resist against masquerade attack, either initially established during
   the negotiation phase or installed by the ULA after the FSP
   connection is set up.

   Initially CRC64 is exploited to make a checksum that weekly protects
   the FSP packet against unintentional modification. The checksum is
   obfuscated with the initial session key. The initial session key is
   neither generated nor applied cryptographically.

   After the FSP session is set up the ULA SHOULD establish a shared
   secret key to encrypt payload and/or authenticate the FSP packet. The
   installed key would be called the long-term session key. Here long-
   term means that the key could be used until the packet sequence space
   is exhausted. The packet sequence space is exhausted if the number of
   packets that use the same key reaches or exceeds 2,147,483,647(2^31-
   1).

   o ICC

   The Identity Check Code is a 64-bit value that depends on both the
   aforementioned session key and the FSP packet headers, optionally the
   payload as well, calculated with the same algorithm in the context of
   each FSP participant.

   Only a packet with correct ICC can be accepted by any FSP participant
   unless even the initial session key had not been established.


Gao                   Expires January 3, 2018               [Page 12]

Internet-Draft        Flexible Session Protocol              July 2017


3. Packet Structure

3.1. FSP over IPv6

   When FSP is implemented over IPv6, the IPv6 address is split into
   three parts. The leftmost 64-bit long word is the network prefix
   which acts as the routing locator, the centermost 32-bit word is the
   aggregation host id, and the rightmost 32-bit word is the ULTID.

   When an endpoint is roaming, the routing locator part MAY vary at
   different access points, but the ULTID SHALL be kept stable. The
   endpoint SHOULD immediately notify its peer when its IPv6 address is
   changed. The peer SHOULD send packet to the endpoint with the new
   address.
































Gao                   Expires January 3, 2018               [Page 13]

Internet-Draft        Flexible Session Protocol              July 2017



   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   ~                          IPv6 Header:                         ~
    0                            15 16                           31
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Version| Traffic Class |           Flow Label                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Payload Length        |  Next Header  |   Hop Limit   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                                        Source Network Prefix  +
   |                                                               |
   +                 Source Address    ----------------------------+
   |                                   Source Aggregation Host ID  |
   +                                   ----------------------------+
   |                                 Source Upper Layer Thread ID  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                                   Destination Network Prefix  +
   |                                                               |
   +        Destination Address   ---------------------------------+
   |                              Destination Aggregation Host ID  |
   +                              ---------------------------------+
   |                            Destination Upper Layer Thread ID  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                                                               ~
   ~                    Optional IPv6 Headers                      ~
   ~                                                               ~
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   ~                          FSP Fix Header                       ~
   ~                                                               ~
   ~               Optional FSP Headers and/or FSP payload         ~
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                          Figure 1 FSP over IPv6









Gao                   Expires January 3, 2018               [Page 14]

Internet-Draft        Flexible Session Protocol              July 2017


3.2. FSP over UDP/IPv4

   When FSP is implemented in the IPv4 network, every FSP packet MUST be
   encapsulated in a UDP datagram. The UDP datagram encapsulated the FSP
   packet SHALL have checksum disabled. The Source and the destination
   ULTIDs are put at the leading position of the UDP payload. Normal FSP
   packet header, optional extension headers and FSP payload follow the
   ULTIDs.

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   ~         Start of UDP Header with checksum disabled            ~
    0                            15 16                           31
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Source Port           |        Destination Port       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |            Length             |             0                 |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~            End of UDP Header with checksum disabled           ~
   ~              Start of FSP Header with ULTID Pair              ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 Source Upper Layer Thread ID                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               Destination Upper Layer Thread ID               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                                                               ~
   ~                          FSP Fix Header                       ~
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                End of FSP Header with ULTID Pair              ~
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   ~               Optional FSP Headers and/or FSP payload         ~
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                           Figure 2 FSP over UDP

   When FSP is implemented over UDP/IPv4 for compatibility with the IPv6
   addressed ULA the 64-bit word of the addressable network prefix
   specified in section 3.7 is composed as in Figure 3:






Gao                   Expires January 3, 2018               [Page 15]

Internet-Draft        Flexible Session Protocol              July 2017


    0                                                            31
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  0x2002 (IPv6 6to4 prefix)    |IPv4 address (lestmost 16 bits)|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |IPv4 address(rightmost 16 bits)|   UDP port number (16 bits)   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          Figure 3 Addressable Network Prefix of FSP over UDP/IPv4



3.3. Header Signature


   FSP headers include fixed headers and extension headers. A general
   fixed header consists of 20-byte operation-code specific fields and a
   32-bit FSP Header Signature. An extension header consists an
   operation-code specific content and a 32-bit FSP Header Signature.
   The length of the extension header content may be variable, provided
   that the tail of the full extension header align on 64-bit boundary.

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                                                               ~
   ~              Operation Code Specific Fields                   ~
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Header Signature                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                            Figure 4 FSP Header


   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      Header Stack Pointer     |     Major     | Operation Code|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                       Figure 5 FSP Header Signature



   o Header Stack Pointer

   A 16-bit unsigned integer that specifies the offset of the octet that
   immediately follows the next topmost header, while the first topmost
   header is the one that has the largest offset.


Gao                   Expires January 3, 2018               [Page 16]

Internet-Draft        Flexible Session Protocol              July 2017


   o Major

   An octet states current FSP major version. For this FSP version it
   MUST be 0.

   It is not mandatory for different major versions of FSP to be
   compatible.

   o Operation Code

   An octet that stores the code of the command which indicates the
   function of the packet.

Synonym          Code  Meaning

INIT_CONNECT    1   Initialize Connection

ACK_INIT_CONNECT  2   Acknowledge Initialization of Connection

CONNECT_REQUEST  3   Formally Request to Connect

ACK_CONNECT_REQ 4   Acknowledge the Connection Request.

RESET          5   Reset a connection. Refuse to establish the
                       connection, or abort connection.

PERSIST        6   Make a connection persistent. It is to start a
                       transmit transaction. Besides, it is the very
                       acknowledgement to ACK_CONNECT_REQ or MULTIPLY,
                       to confirm that the connection has been
                       established or cloned. It may carry optional
                       headers or payload, but not both. It always
                       consumes a slot of the send sequence space.

KEEP_ALIVE      7   Keep the peer alive. It is an out-of-band
                       control packet acting as the heart-beating
                       signal. An out-of-band control packet does not
                       consume send sequence space itself. FSP takes
                       use of the KEEP_ALIVE packet to inform the peer
                       about the change of the source IP addresses.
                       Besides, when the MIND flag is set, the
                       KEEP_ALIVE packet is meant to tell the peer



Gao                   Expires January 3, 2018               [Page 17]

Internet-Draft        Flexible Session Protocol              July 2017


                       which packets should be retransmitted. If the
                       End of Transaction flag of the KEEP_ ALIVE
                       packet is set it is meant to forcefully commit
                       current transmit transaction of the sender of
                       the KEEP_ALIVE packet.

PURE_DATA     9   Pure Data. Only carry non-empty payload.

ACK_FLUSH    10   ACKnowledge to remote end's commitment (FLUSHing)
                       of transmit transaction. It is an out-of-band
                       control packet like KEEP_ALIVE. It is sent
                       instantly on having every packet of the last
                       transmit transaction received, meant to make
                       acknowledgment to the remote end and let the
                       remote end stop sending heart-beat signals. If
                       the End of Transaction flag of the ACK_FLUSH
                       packet is set it is meant to commit current
                       transmit transaction of the sender of the
                       ACK_FLUSH packet as well.

RELEASE       11   Release the connection. RELEASE packet MAY NOT
                       carry payload but it always consumes a slot of
                       the send sequence space. Only when each peer has
                       committed the transmit transaction may a RELEASE
                       packet sent under the request of the ULA.

MULTIPLY       12   Multiply the connection. It is sent in the
                       context of the cloned connection and may carry
                       payload and/or optional headers as an out-of-
                       band packet.

PEER_SUBNETS  17   Tell the remote end how to address the sender of
                       the packet in the reverse direction. It is the
                       code of the Sink Parameters extension header.

SELECTIVE_NACK   18   Tell the remote end to retransmit the packets
                       that were negatively acknowledged. It is the
                       code of the Selective Negative Acknowledgment
                       extension header.





Gao                   Expires January 3, 2018               [Page 18]

Internet-Draft        Flexible Session Protocol              July 2017


3.4. Connect Initialization

   Operation Code in this type of packet is INIT_CONNECT.

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                         Time Stamp                            +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                       Init Check Code                         +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                              Salt                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Header Signature                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                                                               ~
   ~           Host Name of the Responder (optional)               ~
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                      Figure 6 Connect Initialization

   o Timestamp

   The timestamp is a 64-bit unsigned integer that represents number of
   microseconds elapsed since 00:00, Jan.1, 1970, Coordinated Universal
   Time. It may be exploited to synchronize the clocks of the
   participants and/or estimate delay during data transmission in the
   network.

   o Init Check Code

   A 64-bit random bit string that means to uniquely associated with the
   connection initiated.

   o Salt

   A 32-bit random bit string that may be exploited to make secret key
   agreement.

   o Host Name of the Responder


Gao                   Expires January 3, 2018               [Page 19]

Internet-Draft        Flexible Session Protocol              July 2017


   The optional payload of the Connect Initialization packet.

3.5. Acknowledgment to Connect Initialization

   Operation Code of this type of packet is ACK_INIT_CONNECT.

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                            Cookie                             +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                       Init Check Code                         +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                           Time Delta                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Header Signature                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             Figure 7 Acknowledgment to Connect Initialization

   o Cookie

   A 64-bit bit string cryptographically generated by the responder in a
   represent-transfer state manner. More specifically when the same
   timestamp, time delta, init check code, salt, source and destination
   ULTIDs are sent to the responder, the responder MUST be able to
   generate the identical cookie value.

   o Init Check Code

   MUST be identical to the corresponding field in the Connect
   Initialization packet acknowledged.

   o Time Delta

   A 32-bit signed integer which is the difference between the near-
   end's time and the timestamp value sent in the Connection
   Initialization packet. The range of time difference represented by a
   time-delta value is about -2147 to +2147 seconds, slightly more than
   half an hour. If the real time difference, clock error included, is



Gao                   Expires January 3, 2018               [Page 20]

Internet-Draft        Flexible Session Protocol              July 2017


   out of the aforementioned range the FSP participants may not
   established the connection.

   Value of the near-end's time MUST be with the same granularity of the
   timestamp field, and it must be Universal Time Coordinated.

3.6. Connect Request

   Operation Code of this type of packet is CONNECT_REQUEST.

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                         Time Stamp                            +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                       Init Check Code                         +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                              Salt                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Header Signature                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Initial Sequence Number                    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                           Time Delta                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                            Cookie                             +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                                                               ~
   ~                         Sink Parameters                       ~
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                                                               ~
   ~           Host Name of the Initiator (optional)               ~
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                         Figure 8 Connect Request




Gao                   Expires January 3, 2018               [Page 21]

Internet-Draft        Flexible Session Protocol              July 2017






   'Sink Parameters' is an extension header.

   Host Name of the Initiator is optional, it could be exploited by the
   responder to look up the address of the initiator that may receive
   packets in the reverse direction.

   Values of other fields of the packet MUST be identical with the ones
   in the associated Connect Initialization and Acknowledgment to
   Connect Initialization packet.

3.7. Sink Parameters

   Operation Code in the Header Signature of this extension header is
   PEER_SUBNETS.

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                                                               ~
   ~               Addressable Network Prefixes                    ~
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        Listener ID                            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          Host ID                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Advertised Receive Window Size        |   Block Size  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Header Signature                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                         Figure 9 Sink Parameters

   o Addressable Network Prefixes

   Up to 4 64-bit words that specify the network prefixes of the lower
   layer interfaces that are addressable by the receiver in the reverse
   direction.

   In this version of the FSP 'Addressable Network Prefixes' field is of
   fixed length. The last network prefix which is non-zero is the last


Gao                   Expires January 3, 2018               [Page 22]

Internet-Draft        Flexible Session Protocol              July 2017


   resort one. There MUST be at least one non-zero network prefix. If
   there are more than one non-zero network prefixes those other than
   the last resort are load-balanced preferred.

   In an IPv6 network, the addressable network prefix is the leftmost 64
   bits of the IPv6 address. The receiver of the Addressable Network
   Prefixes SHALL send packet in the reverse direction, i.e. to the
   sender of the field with the destination IPv6 address generated by
   combining a preferred network prefix with the aggregation host id and
   the ULTID part of the source address in the IPv6 header of the
   received packet that eventually carries the Addressable Network
   Prefixes.

   o Listener ID

   The ULTID of the responder that is in LISTENING state.

   o Host ID

   The aggregation host id of the sender of the Sink Parameters
   extension header. It MAY differ with the aggregation host id in the
   source address of the underlying IPv6 address in the IPv6 network. It
   SHALL be 0 if it is in the IPv4 network.

   o Advertised Receive Window Size

   Stores number of the free blocks in the receive buffer of the sender
   of the packet contains the receive window size field. The advertised
   receive window size is count from the slot meant to accept the packet
   with the expected sequence number. The sender must ensure that the
   difference between the latest sequence number sent out and the
   largest expected sequence number received does not exceed the value
   of the latest advertised receive window size received.

   It is a 20-bit unsigned integer. The unit is buffer block.

   In the Sink Parameters this field advertise the initial receive
   window size of the sender of this extension header.

   o Block Size





Gao                   Expires January 3, 2018               [Page 23]

Internet-Draft        Flexible Session Protocol              July 2017


   A 8-bit unsigned integer that counts number of 512-octet memory
   sectors that a block of the receive buffer holds.

   Size of the buffer block SHALL be the minimal of multiple path MTU,
   if multipath network packet transfer is exploited.

3.8. Normal fixed header

   Operation Code of a normal fixed header may be ACK_CONNECT_REQUEST,
   PURE_DATA, PERSIST, KEEP_ALIVE, ACK_FLUSH, RELEASE or MULTIPLY.

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Sequence Number                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Expected Sequence Number                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   +                     Integrity Check Code                      +
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      Flags    |         Advertised Receive Window Size        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Header Signature                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


   o Sequence Number

   The assigned sequence number of the packet. An out-of-band packet
   that has the operation code of KEEP_ALIVE, ACK_FLUSH or MULTIPLY MUST
   be assigned a sequence number that falls in the receive window as
   well.

   Each in-band FSP packet is assigned a 32-bit unsigned integer as the
   sequence number. Difference of two sequence number is represented by
   a 32-bit signed integer. If the result of sequence number B
   subtracting sequence number A is greater than zero, we say that B is
   greater than A and the packet of the sequence number B is later than
   the packet of the sequence number A, although the unsigned integer
   representation of B may be far less that A. Consequently, as the
   result of A subtracting B is less than zero, we say that A is less



Gao                   Expires January 3, 2018               [Page 24]

Internet-Draft        Flexible Session Protocol              July 2017


   than B and the packet of the sequence number A is earlier than the
   packet of the sequence number A.

   o Expected Sequence Number

   The field 'Expected Sequence Number' stores the earliest sequence
   number of the packets that were not yet received in the receive
   window of the sender. It is an accumulative acknowledgment. Any
   packet with the sequence number before the received Expected Sequence
   Number is supposed to have been received by the remote end.

   o Integrity Check Code

   The ICC.

   o Flags

   It is bit-field of width 8. From left to right:

   End of Transaction(EoT): if the EoT flag of a packet is set, it is
   the last, maybe as well the single packet of the transmit transaction.

   Minimal-Delay (MIND): if the MIND flag of the Connect Request or
   Acknowledgment to Connect Request packet is set, the ULA prefers
   minimal delay and is willing to tolerate packet loss. FSP SHALL drop
   the packet received earliest when there is no enough receive buffer
   so that the latest packet received can be saved and the delay to
   deliver data to ULA is minimized.  If the MIND flags has been set the
   EoT flag is simply ignored. Payload of each FSP packet is delivered
   to the ULA as an independent message.

   HMAC: if the HMAC flag of a packet is set the cryptographic hash
   algorithm SHALL be applied to get the message authentication code of
   the whole packet. Each FSP version MUST designate one particular
   cryptographic hash algorithm.

   Explicit Congestion Notification(ECN): Currently yet to be studied.

   The remaining 4 bits are reserved.

   o Advertised Receive Window Size

   As in the Sink Parameters extension header.


Gao                   Expires January 3, 2018               [Page 25]

Internet-Draft        Flexible Session Protocol              July 2017


3.9. Acknowledgment to Connect Request

   The operation code of this type of packet is ACK_CONNECT_REQUEST.

   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                                                               ~
   ~               Normal Fixed Headers (24 bytes)                 ~
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                                                               ~
   ~                  Sink Parameters (48 bytes)                   ~
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                                                               ~
   ~          Payload (0 up to (Path MTU - 72) bytes)              ~
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


   An Acknowledgment to Connect Request packet is an FSP packet with the
   normal fixed header AND the Sink Parameters extension header,
   optionally some payload. The EoT flag of this type of packet MUST be
   set, i.e. the Acknowledgment to Connect Request packet always
   automatically commit a transmit transaction.

3.10. RESET

   The 'RESET' packet is a special command packet meant to interrupt
   connection setup process or disconnect abruptly. Operation Code of
   the packet is RESET.

   Structure of a RESET packet in C code snippet with unnamed union
   applied:

        struct FSP_RejectConnect
        {
         union
         {
           timestamp_t timeStamp;
           struct
           {
             uint32_t initial;


Gao                   Expires January 3, 2018               [Page 26]

Internet-Draft        Flexible Session Protocol              July 2017


             uint32_t expected;
           } sn;
         };
         //
         union
         {
           uint64_t integrityCode;
           uint64_t cookie;
           uint64_t initCheckCode;
         };
         //
         uint32_t reasons; // bit field
         $FSP_HeaderSignature hs;
        };

   When the RESET packet is the response to a Connect Initialization
   packet both the timeStamp and the initCheckCode fields of the RESET
   packet MUST be set to the same values as in the Connect
   Initialization packet.

   When the RESET packet is the response to a Connect Request packet
   both the timeStamp and the cookie fields of the RESET packet MUST be
   set to the same value as in the Connect Request packet.

   When the RESET packet is the response to a packet with a normal fixed
   header, the sn.initial, the sn.expected and the integrityCode of the
   RESET packet MUST be set as to specification of normal fixed header
   field Sequence Number, Expected Sequence Number and Integrity Check
   Code, respectively.

3.11. Selective Negative Acknowledgment

   The operation code of this type of extension header is SNACK. The
   SNACK header contains the descriptor of the receive window gaps:










Gao                   Expires January 3, 2018               [Page 27]

Internet-Draft        Flexible Session Protocol              July 2017


   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Gap Width                          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                           Data Length                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                                                               ~
   ~          Further pairs of  (Gap Width, Data Length)           ~
   ~                                                               ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     Out-band Serial Number                    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       Header Signature                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


   The descriptor itself is a list of entries. The length of the list
   can be zero which means that there is no gap in the receive window.
   If the list is not empty, each entry contains the width of one gap in
   the receive window and the length of the continuously received data
   following the gap, respectively. The unit of aforementioned length of
   gaps or number of packets is buffer block.

   The SNACK header contains a 32-bit out-band serial number as well.
   Each time a packet that contains the SNACK header is sent the serial
   number shall increase by one. It is assumed that in the life of the
   session no two packets have both the same sequence number and the
   same SNACK header serial number.

4. The Finite States

4.1. NON_EXISTENT

   ---[API: Listen]-->LISTENING
   |--[API: Connect]-->CONNECT_BOOTSTRAP-->[Send INIT_CONNECT]
   |--[API: Multiply]-->CLONING-->[Send MULTIPLY]

4.2. LISTENING

   ---[API: Reset]-->NON_EXISTENT
   |<-->[Rcv.INIT_CONNECT]{&& resource available}[Send ACK_INIT_CONNECT]
   |<-->[Rcv.INIT_CONNECT]{&& resource unavailable}[Send RESET]
   |<-->[Rcv.CONNECT_REQUEST]{&& duplication detected}


Gao                   Expires January 3, 2018               [Page 28]

Internet-Draft        Flexible Session Protocol              July 2017


         [Retransmit ACK_CONNECT_REQ]
   |--[Rcv.CONNECT_REQUEST]-->[API{new context, Callback}]
         |-->[{return}Accept]
               -->{new context}CHALLENGING-->[Send ACK_CONNECT_REQ]
         |-->[{return}Reject]-->[Send RESET] {abort creating new context}

4.3. CONNECT_BOOTSTRAP

   ---[API: Reset]-->NON_EXISTENT-->[Send RESET]
   |--[Rcv.ACK_INIT_CONNECT]-->CONNECT_AFFIRMING-->[Send CONNECT_REQUEST]
   |--[Rcv.RESET]-->NON_EXISTENT-->[Notify]
   |<-->{on retransmit timeout}[Retransmit INIT_CONNECT]
   |--[Transient State timeout]-->NON_EXISTENT-->[Notify]

4.4. CHALLENGING

   ---[API: Reset]-->NON_EXISTENT-->[Send RESET]
   |<-->[API: Send{new data}]{just prebuffer}
   |--[Rcv.PERSIST]
     |--{Not EOT}-->COMMITTED-->[Send SNACK]{start keep-alive}[Notify]
     |--{EOT}-->CLOSABLE-->[Send ACK_FLUSH]-->[Notify]
   |--[Rcv.RESET]-->NON_EXISTENT-->[Notify]
   |--[Transient State timeout]-->NON_EXISTENT-->[Notify]
   In the CHALLENGING state the keep-alive timer is not started yet.

4.5. CONNECT_AFFIRMING

---[API: Reset]-->NON_EXISTENT-->[Send RESET]
|<-->[API: Send{new data}]{just prebuffer}
|--[Rcv.ACK_CONNECT_REQ]-->PEER_COMMIT-->[API{callback}]
    |-->{Return Accept}
        |-->{Not EOT}-->[Send PERSIST]
        |-->{EOT}-->COMMITTING2-->[Send PERSIST with the EoT flag set]
    |-->{Return Reject}-->NON_EXISTENT-->[Send RESET]
|--[Rcv.RESET]-->NON_EXISTENT-->[Notify]
|<-->{on retransmit timeout}[Retransmit CONNECT_REQUEST]
|--[Transient State timeout]-->NON_EXISTENT-->[Notify]

4.6. ACTIVE{A.K.A. ESTABLISHED}

---[API: Reset]-->NON_EXISTENT-->[Send RESET]



Gao                   Expires January 3, 2018               [Page 29]

Internet-Draft        Flexible Session Protocol              July 2017


|--[API: Send{transact}]-->COMMITTING-->[Urge Commit]
|<-->[API: Send{more data}][Send PURE_DATA]
|--[Rcv.PURE_DATA]
    |--{Not EOT}-->{keep state}[Send SNACK]-->[Notify]
    |--{EOT}
       |-->{stop keep-alive}PEER_COMMIT-->[Send ACK_FLUSH]-->[Notify]
|--[Rcv.PERSIST]
    |--{Not EOT}-->{keep state}[Send SNACK early]
    |--[EOT]
       |-->{stop keep-alive}PEER_COMMIT-->[Send ACK_FLUSH]-->[Notify]
|--[Rcv.EOT]
    |-->{stop keep-alive}PEER_COMMIT-->[Send ACK_FLUSH]-->[Notify]
|--[Rcv.MULTIPLY]{passive cloning}
|--[Rcv.RESET]-->NON_EXISTENT-->[Notify]
|--[Idle timeout]-->NON_EXISTENT-->[Notify]

4.7. COMMITTING

---[API: Reset]-->NON_EXISTENT-->[Send RESET]
|--[Rcv.ACK_FLUSH]-->COMMITTED-->[Notify]
|--[Rcv.PURE_DATA]
    |--{Not EOT}-->{keep state}[Send SNACK]-->[Notify]
    |--{EOT}-->COMMITTING2-->[Send ACK_FLUSH]-->[Notify]
|--[Rcv.EOT]-->COMMITTING2-->[Send ACK_FLUSH]-->[Notify]
|--[Rcv.MULTIPLY]{passive cloning}
|--[Rcv.RESET]-->NON_EXISTENT-->[Notify]
|--[Short-Idled timeout]-->NON_EXISTENT-->[Notify]
Note that we may not transmit further data until former transaction
acknowledged.

4.8. PEER_COMMIT

---[API: Reset]-->NON_EXISTENT-->[Send RESET]
|--[API: Send{flush}]-->COMMITTING2-->[Urge COMMIT]{enable retry}
|<-->[API: Send{more data}][Send PURE_DATA]
|<-->[Rcv.PURE_DATA]{just prebuffer}
|--[Rcv.PERSIST]
    |-->{Not EOT}-->ACTIVE-->[Send SNACK]
    |-->{EOT}-->{keep state}-->[Send ACK_FLUSH]
        |-->{Not a new transaction}[End.]
        |-->{A new transaction}-->[Notify]



Gao                   Expires January 3, 2018               [Page 30]

Internet-Draft        Flexible Session Protocol              July 2017


|--[Rcv.EOT]-->[Send ACK_FLUSH]-->[Notify]{with duplication suppressed}
|--[Rcv.MULTIPLY]{passive cloning}
|--[Rcv.RELEASE]-->CLOSED-->[Send ACK_FLUSH]-->[Notify]
|--[Rcv.RESET]-->NON_EXISTENT-->[Notify]
|--[Idle timeout]-->NON_EXISTENT-->[Notify]

4.9. COMMITTING2

---[API: Reset]-->NON_EXISTENT-->[Send RESET]
|<-->[Rcv.PURE_DATA]{just prebuffer}
|--[Rcv.ACK_FLUSH]-->{stop keep-alive}CLOSABLE-->[Notify]
|--[Rcv.PERSIST]
    |-->{Not EOT}-->COMMITTING-->[Send SNACK]
    |-->{EOT}-->{keep state}-->[Send ACK_FLUSH]
        |-->{Not a new transaction}[End.]
        |-->{A new transaction}-->[Notify]
|--[Rcv.EOT]-->[Send ACK_FLUSH]-->[Notify]{with duplication suppressed}
|--[Rcv.MULTIPLY]{passive cloning}
|--[Rcv.RELEASE]-->CLOSED{stop keep-alive}-->[Send RELEASE]-->[Notify]
|--[Rcv.RESET]-->NON_EXISTENT-->[Notify]
|--[Short-Idled timeout]-->NON_EXISTENT-->[Notify]

4.10. COMMITTED

---[API: Reset]-->NON_EXISTENT-->[Send RESET]
|--[API: Send{more data}]-->ACTIVE-->[Send PERSIST]
|--[API: Send{flush}]-->COMMITTING-->[Urge COMMIT]
|--[Rcv.PURE_DATA]
    |-->{Not EOT}-->{keep state}[Send SNACK]-->[Notify]
    |-->{EOT}
       |-->{stop keep-alive}CLOSABLE-->[Send ACK_FLUSH]-->[Notify]
|--[Rcv.PERSIST]
    |-->{Not EOT}-->{keep state}[Send SNACK]
    |-->{EOT}-->{stop keep-alive}CLOSABLE-->[Send ACK_FLUSH]-->[Notify]
|--[Rcv.EOT]
       |-->{stop keep-alive}CLOSABLE-->[Send ACK_FLUSH]-->[Notify]
|--[Rcv.MULTIPLY]{passive cloning}
|--[Rcv.RESET]-->NON_EXISTENT-->[Notify]
|--[Idle timeout]-->NON_EXISTENT





Gao                   Expires January 3, 2018               [Page 31]

Internet-Draft        Flexible Session Protocol              July 2017


4.11. CLOSABLE

---[API: Reset]-->NON_EXISTENT-->[Send RESET]
|--[API: Send{more data}]-->PEER_COMMIT-->[Send PURE_DATA]{enable retry}
|--[API: Send{flush}]-->COMMITTING2-->[Urge COMMIT]{enable retry}
|--[API: Shutdown]-->[Send RELEASE]-->PRE_CLOSED-->[Notify]
|<-->[Rcv.PURE_DATA]{just prebuffer}
|--[Rcv.PERSIST]
    |-->{Not EOT}-->COMMITTED-->[Send SNACK]
    |-->{EOT}-->{keep state}[Send ACK_FLUSH]
        |-->{Not a new transaction}[End.]
        |-->{A new transaction}-->[Notify]
|--[Rcv.EOT]-->[Send ACK_FLUSH]-->[Notify]{with duplication suppressed}
|--[Rcv.MULTIPLY]{passive cloning}
|--[Rcv.RELEASE]-->CLOSED-->[Notify]
|--[Rcv.RESET]-->NON_EXISTENT-->[Notify]
|--[Idle timeout]-->NON_EXISTENT-->[Notify]

4.12. PRE_CLOSED

---[API: Reset]-->NON_EXISTENT-->[Send RESET]
|--[Rcv.RELEASE]-->CLOSED{stop Keep-alive}-->[Send RELEASE]-->[Notify]
|--[Retransmission timeout][Retransmit RELEASE]
|--[Transient timeout]-->NON_EXISTENT

4.13. CLOSED

|--[Timeout of Session Key]-->NON_EXISTENT

4.14. CLONING

---[API: Reset]-->NON_EXISTENT
|<-->[API: Send{new data}]{just prebuffer}
|<-->[Rcv.PURE_DATA]{just prebuffer}
|--[Rcv.PERSIST]
    |-->{Not EOT}
        |-->{Not ULA-flushing}-->ACTIVE
           |-->[Send SNACK]-->[Notify]
        |-->{ULA-flushing}-->COMMITTED
           |-->[Send SNACK]-->[Notify]
    |-->{EOT}



Gao                   Expires January 3, 2018               [Page 32]

Internet-Draft        Flexible Session Protocol              July 2017


        |-->{Not ULA-flushing}-->PEER_COMMIT
           |-->{stop keep-alive}[Send ACK_FLUSH]-->[Notify]
        |-->{ULA-flushing}-->CLOSABLE
           |-->{stop keep-alive}[Send ACK_FLUSH]-->[Notify]
|--[Rcv.RESET]-->NON_EXISTENT-->[Notify]
|<-->{on retransmit timeout}[Retransmit MULTIPLY]
|--[Transient State timeout]-->NON_EXISTENT-->[Notify]

4.15. {Cloned}

{ACTIVE, COMMITTING, PEER_COMMIT, COMMITTING2, COMMITTED, CLOSABLE,
PRE_CLOSED, CLOSED}
|<-->[Rcv.MULTIPLY]{&& collision detected}[Send RESET]
|<-->[Rcv.MULTIPLY]{&& duplication detected}
    [Retransmit]{the head packet of the new connection send queue}
|--[Rcv.MULTIPLY]{&& new connection request}-->[API{Callback}]
     |-->[{Return Accept}]-->{new context}ACTIVE/COMMITTING
          -->[Send PERSIST]{with/without EOT}{start keep-alive}
     |-->[{Return}:Reject]-->[Send RESET] {abort creating new context}


5. End-to-End Negotiation

   End-to-end negotiation is the essential part of FSP connection
   establishment procedure. It consists of two and a half pairs of
   packet exchanges for connection initialization, session key
   establishment and the last confirmation.

5.1. Init Check Code, Salt and Cookie

   The init check code is an arbitrary 64-bit random number generated by
   the initiator of a connection.

   The salt is some 32-bit random number generated by the initiator as
   well.

   The cookie is a value computed by the responder with a private secret
   and an algorithm that is assumed known by the responder only. The
   algorithm chosen MUST make the cookie value depend on the salt and
   the responder's ULTID, and the value MUST be independent of any
   participant's IP address. The computation of the cookie MUST be


Gao                   Expires January 3, 2018               [Page 33]

Internet-Draft        Flexible Session Protocol              July 2017


   recoverable in the sense that in some limit time period when the
   responder's ULTID, the salt and the private secret remain unchanged
   the cookie generated MUST be unchanged as well. Cookie SHOULD NOT be
   stored by the responder.

5.2. Connect Initialization

   The initiator sends the INIT_CONNECT packet to the responder:

   (INIT_CONNECT, Timestamp, Init Check Code, Salt [, Responder's Host
   Name])

5.3. Response to Connect Initialization

   The responder sends acknowledgment to the initiator:

   Case 1: (ACK_INIT_CONNECT, Cookie, Echo of Initiator's Check Code,
   Time-delta)

   Case 2: (RESET, Echo of Timestamp, Echo of Initiator's Check Code,
   Reason of Failure)

   In case 1 the responder is ready to accept the connection. It MUST
   not make state transition on receiving INIT_CONNECT packet. It just
   generates a cookie which is meant to be echoed back by the initiator.
   The responder MUST send the ACK_INIT_CONNECT packet with the new
   allocated local ULTID instead of the original listening ULTID. The
   initiator should be able to find out the original listening ULTID by
   searching its own connection context.

   In case 2 the responder refuses to accept the connection. It SHALL
   send back a RESET packet with the listening ULTID as the source ULTID.

5.4. Week Session Key Exchange: Initiator to Responder

   (CONNECT_REQUEST, Timestamp, Initiator's Check Code, Salt, Echo of
   Cookie, Echo of Time-delta, Initial SN, Initiator's Sink Parameters [,
   Initiator's Host Name])



Gao                   Expires January 3, 2018               [Page 34]

Internet-Draft        Flexible Session Protocol              July 2017


   The initiator checks that the echo of the initiator's check code in
   the ACK_INIT_CONNECT packet. If the code is correct, the initiator
   formally requests to establish the connection by sending the
   CONECT_REQUEST packet. In the packet the value of the Timestamp, the
   Initiator's Check Code and the Salt field MUST be the same as in the
   INIT_CONNECT packet while the value of the Echo of Cookie field and
   the Echo of Time-delta field MUST be the same as in the ACK_INIT_
   CONNECT packet, respectively.

   The initiator MUST send the packet towards the remote ULTID that the
   responder has preserved and sent with the ACK_INIT_CONNECT packet. It
   MUST fill the original listener ID field in the Initiator's Sink
   Parameters with the right value.

   The initiator SHALL save the cookie value that the responder has
   given to make up the session key.

   The initiator MUST fill the Initial SN field with the sequence number
   of the packet that will follow CONNECT_REQUEST. The CONNECT_REQUEST
   packet is payload free and does not consume the sequence space. The
   following packet can only be PERSIST and it may carry payload.

   The initiator should retransmit the CONNECT_REQUEST packet if it does
   not receive the ACK_CONNECT_REQ packet in the limit time (by default
   5 seconds).

   If in a longer time (by default 60 seconds) starting from the first
   INIT_CONNECT packet was transmitted no legitimate ACK_CONNECT_REQ
   packet was received the initiator should give up setting up the
   connection.

5.5. Week Session Key Exchange: Responder to Initiator

   Case 1: (ACK_CONNECT_REQ, Initial SN, Expected SN, Timestamp, Flags
   and Receive Window Size, Responder's Sink Parameters[, Payload])

   Case 2: (RESET, Echo of Timestamp, Echo of Echo of Cookie, Reason of
   Failure)




Gao                   Expires January 3, 2018               [Page 35]

Internet-Draft        Flexible Session Protocol              July 2017


   The responder responds as in case 1 if the echo of cookie was valid,
   resources were successfully allocated and the initial context of the
   connection was setup. Otherwise it should respond as in case 2.

   The Initial SN in case 1 is the initial sequence number of the
   responder. The responder should fill in the field with a random 32-
   bit unsigned integer.

   As the ACK_CONNECT_REQ packet may carry payload the sequence number
   of the responder starts from the ACK_CONNECT_REQ packet.

   The Expected SN MUST equal to the Initial SN specified in the
   corresponding CONNECT_ REQUEST packet.

   In the Responder's Sink Parameters the original listener ULTID MUST
   be set to the right value.

5.6. Retransmission

   The initiator SHALL retransmit the INIT_CONNECT packet if the
   corresponding ACK_INIT_CONNECT packet is not received in some limit
   time (by default 15 seconds).

   The initiator SHALL retransmit the CONNECT_CONNECT packet if the
   corresponding ACK_CONNECT_REQ packet is not received in some limit
   time (by default 15 seconds).

   The responder SHALL NOT retransmit ACK_INIT_CONNECT or
   ACK_CONNECT_REQ packet.

6. Packet Protection Agreement

   In a typical scenario the ULA endpoints first setup the FSP
   connection where resistance against connection redirection attack is
   weakly endorsed by CRC64. After the pair of ULA endpoints establish a
   shared secret key, install the secret key and commit current transmit
   transactions, authencity of the FSP packets sent later are
   cryptographically protected.






Gao                   Expires January 3, 2018               [Page 36]

Internet-Draft        Flexible Session Protocol              July 2017


6.1. CRC64

   After the FSP participants have finished End-to-End negotiation,
   before the ULAs have installed the shared secret CRC64 is applied to
   calculate the value of the ICC field. The algorithm:

   1. Take pair of the ULDs as the initial value of accumulative CRC64.
      The pair of the ULDs is composed of the near end's ULTID and the
      remote end's ULTID, where the former is the leftmost 32 bits and
      the latter is the rightmost 32 bits of initial value for the send
      direction, and the order is reversed for the receive direction.

   2. Accumulate the value of the Init Check Code field, the value of
      the Cookie field successively by CRC64.

   3. Accumulate the combined value of the salt and the timeDelta field,
      where the former is the leftmost 32 bits and the latter is the
      rightmost 32 bits by CRC64.

   4. Accumulate the value of the Time Stamp field by CRC64.

   5. Save the accumulated CRC64 value as the precomputed CRC64 value.

   6. When calculate the value ICC of a particular FSP packet, firstly
      set ICC to the precomputed CRC64 value, then calculate the CRC64
      checksum of the FSP fixed header. The final result is set as the
      value of the ICC field.

6.2. Payload Encryption and Decryption

   FSP provides per-packet authenticated encryption service. Only one
   authenticated encryption algorithm is allowed for a determined
   version of FSP. For this FSP version, the authenticated encryption
   algorithm selected is GCM-AES, it is applied to protect integrity of
   the full FSP packets and privacy of the payload. The length of the
   session key is determined by the ULA. The four inputs to GCM-AES
   authenticated encryption are:

   K: the key installed by ULA.

   IV: the initial vector, 96-bit string consisted of the internal 32-
   bit salt, the 32-bit sequence number of the packet and the 32-bit



Gao                   Expires January 3, 2018               [Page 37]

Internet-Draft        Flexible Session Protocol              July 2017


   expected sequence number field of the packet. The internal 32-bit
   salt MUST be the XOR result of the leftmost 32-bit word of the
   internal AES hash sub-key and the leftmost 32-bit word of the
   original key, or a 32-bit word installed by the ULA.

   P: the plaintext are the bytes following the fixed header up to the
   end of the original payload

   AAD: additional authenticated data, from the source ULTID to the last
   byte of the fixed header. The source ULTID is stored in the leftmost
   32-bit of the ICC field while the destination ULTID is stored in the
   rightmost 32-bit of the ICC field before the ICC value is calculated.

   The length of the authentication tag MUST be 64 bits for FSP version
   0 and 1. The authentication tag is stored in the ICC finally.

   The inputs to GCM-AES decryption are:

   K: the key installed by ULA.

   IV: the initial vector, 96-bit string consisted of the internal 32-
   bit salt, the 32-bit sequence number of the packet and the 32-bit
   expected sequence number field of the packet. The internal 32-bit
   salt MUST be the XOR result of the leftmost two 32-bit words of the
   hash sub-key.

   C: the ciphertext are the bytes following the fixed header up to the
   end of the received payload

   AAD: additional authenticated data, from the source ULTID to the last
   byte of the fixed header. The source ULTID is stored in the leftmost
   32-bit of the ICC field while the destination ULTID is stored in the
   rightmost 32-bit of the ICC field before the ICC value is calculated

   T: The authentication tag, which is fetched from the ICC field
   received

   Only when the outputs of GCM-AES decryption tell that the
   authentication tag passed verification may the receiver deliver the
   decrypted payload to the ULA.





Gao                   Expires January 3, 2018               [Page 38]

Internet-Draft        Flexible Session Protocol              July 2017


6.3. Packet Authentication Only

   If the HMAC flag of a packet is set the pre-designated cryptographic
   hash function SHALL be applied to get the message authentication code
   (MAC) of the whole packet. Each FSP version MUST designate one and
   only one particular cryptographic hash function.

   The ULA designates the FSP layer to either getting MAC or applying
   AEAD.

   For this FSP version, BLAKE2 is designated as the cryptographic hash
   function. The input key is the secret key that has been installed by
   the ULA. The input data is the full FSP packet, where the ICC field
   is pre-filled the pair of the ULDs. As in making CRC64 checksum, the
   pair of the ULDs is composed of the near end's ULTID and the remote
   end's ULTID, where the former is the leftmost 32 bits and the latter
   is the rightmost 32 bits of initial value for the send direction, and
   the order is reversed for the receive direction.

   The hash result is truncated to 64 bits to get the final ICC.

7. Send and Receive

   Hereafter 'FREWS' stands for the Flag and advertised REceive Window
   Size. It is the 32-bit combined word next to the ICC field in the
   normal FSP fixed header.

7.1. Start a new Transmit Transaction

   The responder starts AND terminates a transmit transaction by send
   the ACK_CONNECT_REQ packet.

   The initiator starts a new transmit transaction by sending a PERSIST
   packet:

   (PERSIST, SN, ExpectedSN, ICC, FREWS [, Payload])

7.2. Send pure data packet

   (PURE_DATA, SN, ExpectedSN, ICC, FREWS, Payload)





Gao                   Expires January 3, 2018               [Page 39]

Internet-Draft        Flexible Session Protocol              July 2017


7.3. Flow Control

   The participants of an FSP connection negotiate the initial receive
   window size with the FREWS field in the ACK_CONNECT_REQUEST packet
   and the first PERSIST packet, respectively. The receive window size
   SHALL NOT be less than 4 and SHALL be less than 2^24.

   An FSP participant advertises the receive window size in the FREWS
   field.

   An FSP participant SHALL NOT send a packet whose sequence number is
   later than its peer's ExpectedSN plus its peer's advertised receive
   window size.

7.4. SNACK and selective retransmission

7.4.1. Calculation of RTT

   Initial RTT for the Connection Initiator: Equals to the mean of the
   time elapsed till ACK_ INIT_CONNECT was received since INIT_ CONNECT
   was sent, and the time elapsed till ACK_CONNECT_REQ was received
   since CONNECT_ REQUEST was sent.

   Initial RTT for the Connection Responder: Equals to the time elapsed
   till the first PERSIST packet was received since ACK_CONNECT_REQ was
   sent.

   Initial RTT for the Initiator of Connection Multiplication: Equals to
   the time elapsed till the first PERSIST packet was received since
   MULTIPLY was sent.

   Initial RTT for the Responder of Connection Multiplication: Equals to
   the most recent RTT of the multiplied connection.

   Each time a SNACK or an accumulated acknowledgment is received mean
   round trip time of the packets acknowledged is calculated. Suppose
   the result is RTT_now, then:

   RTT_new = (RTT_old + RTT_now) / 2






Gao                   Expires January 3, 2018               [Page 40]

Internet-Draft        Flexible Session Protocol              July 2017


7.4.2. Generation and transmission of SNACK

   Whenever the receiver receives a packet it SHALL shift the time to
   send next heartbeat signal earlier to the time of RTT since current
   time, if the time to send next heartbeat signal used to be later. If
   the time is already earlier than the time of RTT since current time,
   it needs not be shifted.

   On the time to send the heartbeat signal the FSP node generates the
   SNACK header, then generate and send a new KEEP_ALIVE or ACK_FLUSH
   packet to carry the SNACK header. It SHALL send an ACK_FLUSH if it is
   in PEER_COMMIT, COMMITTING2 or CLOSABLE state, otherwise it SHALL
   send a KEEP_ALIVE packet.

7.4.3. Negative acknowledgment of Packets Sent

   Both the ACK_FLUSH and the KEEP_ALIVE packet in FSP carry the SNACK
   extension header, although number of gap descriptors in the SNACK
   extension header in the ACK_FLUSH packet MUST be 0. We call them
   SNACK packets.

   A SNACK packet P1 is said to be later than P0, if and only if SN of
   P1 is later than SN of P0, or SN of P1 equals SN of P0 while the out-
   of-band sequence number of P1 is later than the out-of-band sequence
   number of P0.

   If the latest SNACK packet is ACK_FLUSH, all the packets with the
   sequence number later that the expected field of the packet are
   assumed to be negatively acknowledged.

   If the latest SNACK packet is KEEP_ALIVE, the packets with SN in the
   ranges:

   [expectedSN, expectedSN + 1st Gap Width),

   [expectedSN + 1st Gap Width + 1st Data Length, expectedSN + 1st Gap
   Width + 1st DataLength + 2nd Gap Width),

   ...






Gao                   Expires January 3, 2018               [Page 41]

Internet-Draft        Flexible Session Protocol              July 2017


   [expectedSN + 1st Gap Width + 1st Data Length + ... + (n-1)th Gap
   Width + (n-1)th Data Length, expectedSN + 1st Gap Width + 1st
   DataLength + ... + n-th Gap Width),

   Together with the packets with SN later than expectedSN + 1st Gap
   Width + 1st DataLength + ... + n-th Gap Width are assumed to be
   negatively acknowledged

   When we specify the range, the left square bracket meant to be
   inclusive, while the right parenthesis meant to be exclusive by
   convention.

7.4.4. Retransmission

   Any packet sent 4RTT earlier that is negatively acknowledged MUST be
   retransmitted instantly.

7.5. Commit a Transmit Transaction

   A participant of an FSP connection MAY notify its peer that a batch
   of data transmission is finished by setting the EoT flag of the last
   packet of the transmit transaction be it PERSIST, PURE_DATA or
   MULTIPLY, or by setting the EoT flag of an out-of-band KEEP_ALIVE or
   ACK_FLUSH packet.

7.6. Respond to Transmit Transaction Commitment

   (ACK_FLUSH, SN, ExpectedSN, ICC, FREWS)

   The receiver of the packet with EoT flag set SHALL modify the
   operation code of the decrypted packet with the corresponding
   sequence number to a pseudo operation code _COMMIT AND set the EoT
   flag of the _COMMIT packet as well, if the ULA has not fetch the
   packet yet. No matter whether the packet has already been fetched the
   FSP layer MUST immediately notify the ULA that a transmit transaction
   has been committed.

   The receiver SHALL send the ACK_FLUSH packet as soon as all packets
   of the transmit transaction has been received.






Gao                   Expires January 3, 2018               [Page 42]

Internet-Draft        Flexible Session Protocol              July 2017


7.7. Finalize a Transmit Transaction Commitment

   After receiving the ACK_FLUSH packet the sender of the EoT flag
   migrates to the COMMITTED or CLOSABLE state from the COMMITTING or
   COMMITTING2 state, respectively.

8. Graceful Close

   Shutdown is asymmetric in the sense that one side may unilaterally
   terminate the session without accept all of its peer's packets.

8.1. Initiation of Connection Close

   (RELEASE, SN, ExpectedSN, ICC, FREWS)

   Connection close initiation packet can be sent in the PEER_COMMIT,
   COMMITTING2 or CLOSABLE state only. FSP migrates to the PRE_CLOSED
   state when Shutdown was called in these states.

8.2. Acknowledgment of Connection Close

   (RELEASE, SN, ExpectedSN, ICC, FREWS)

   The RELEASE packet may be accepted in the COMMITTING, COMMITTED,
   CLOSABLE or PRE_CLOSED state only.

8.3. Finalization of Connection Close

   Connection close initiated in the CLOSABLE state needs not be
   acknowledged before the FSP node migrates to the CLOSED state.

   The FSP node in the PRE_CLOSED state migrates to the CLOSED state
   after the corresponding RELEASE packet is received.

8.4. Retry of Connection Close

   The RELEASE packet that was sent in the CLOSABLE state is never
   retransmitted. Loss of the RELEASE packet would simply let the peer
   in CLOSABLE state timeout.






Gao                   Expires January 3, 2018               [Page 43]

Internet-Draft        Flexible Session Protocol              July 2017


9. Mobility Support

   During communication process the participant whose IP address changed
   should inform its peer by transmit a packet with the Sink Parameters
   header and the optional SNACK header so that the peer can retransmit
   the negatively acknowledged packets.

   FSP requires that the participants periodically send the heartbeat
   signals.

9.1. Heartbeat Signals

   The participant in the ACTIVE, COMMITTING or COMMITTED state MUST
   send the KEEP_ ALIVE packet as the heart-beat signal periodically to
   retain the connection and make selective negative acknowledgment to
   its peer's data transmission:

   (KEEP_ALIVE, SN, ExpectedSN, ICC, FREWS [, Sink Parameters] [, SNACK])

   Heartbeat signal is an out-of-band control packet. It may not carry
   payload and it always borrows the sequence number of the first packet
   waiting to be send at the first try.

   Only the FSP node in the ACTIVE, COMMITTING, PEER_COMMIT or
   COMMITTING2 state may process the heartbeat signal.

   In the CONNECT_BOOTSTRAP or CONNECT_CONFIRMING state before the
   connection is established it is only required to retransmit
   INITIATE_CONNECT or CONNECT_REQUEST packet. None of them is assumed
   as the heartbeat signal.

   If the head packet in the send queue is an unacknowledged COMMIT
   packet it MUST be retransmitted before sending the KEEP_ALIVE packet.

   In the ACTIVE state if the head packet in the send queue is an
   unacknowledged PERSIST packet it MUST be retransmitted instead of the
   KEEP_ALIVE packet when it is time to transmit the heartbeat signal.

   There is no heartbeat signal in the CLOSABLE or CLOSED state.






Gao                   Expires January 3, 2018               [Page 44]

Internet-Draft        Flexible Session Protocol              July 2017


9.2. IP Address Change Detection

   A participant of FSP connection should set the source address of the
   packet to transmit or retransmit to new IP address as soon as the
   near-end IPv4 address or IPv6 network prefix has changed. The ULTID
   field MUST remain the same.

   When a packet with a later sequence number is received and the source
   IP address of the packet is found to be different with the preserved
   remote-end IP address the receiver should automatically update the
   preserved remote-end IP address to the source IP address of the
   packet, unless there is a Sink Parameters header in the packet.

   Any participant of the communication does not make discrimination of
   the source or destination IP address of any packet provided that both
   the source ULTID and the destination ULTID keep unchanged and the ICC
   field passes verification.

   If the sequence number of the packet received is not the latest in
   the receive window the preserved remote-end IP address may not be
   updated even if the source address of the received packet has changed.

9.3. IP Address Change Notification

   If there is one participant whose receiving interface is not the same
   as the transmission interface the participant is called asymmetric-
   transmission node. Asymmetric-transmission itself is asymmetric in
   the sense that one participant may be asymmetric-transmission node
   while its peer is normal node of symmetric transmission.

   The sender is an asymmetric-transmission node if the ACK_CONNECT_REQ
   packet or PERSIST packet received has a Sink Parameters header and
   the source IP address of the packet that the network interface of the
   receiver reports is not in the allowed IP address list in the Sink
   Parameters header in the packet during connection negotiation. For a
   remote-end asymmetric-transmission node, the near-end cannot rely on
   automatic IP address change detection. Instead IP address change
   notification mechanism should be utilized:

   (KEEP_ALIVE, SN, ExpectedSN, ICC, FREWS, Sink Parameters [, SNACK])




Gao                   Expires January 3, 2018               [Page 45]

Internet-Draft        Flexible Session Protocol              July 2017


   Both the host ID and the list of the allowed IP addresses MUST be the
   new refreshed.

10. Connection Multiplication

   Connection multiplication is the process of incarnating a new
   connection context. Only connection that provides reliable byte-
   stream delivery service may be multiplied. In the future version the
   clone connection MAY provide different class of service with the
   initiating connection.

10.1. Request to Multiply Connection

   (MULTIPLY, SN, Salt, ICC, FREWS [, payload])

   The initiator's initial sequence number of the new connection is the
   sequence number of the packet that piggybacks the connection
   multiplication header. The ExpectedSN field of the normal packet
   store a Salt value instead.

   The FREWS field MUST be processed in the new connection context while
   the ICC MUST be calculated with the session key of the original
   connection.

   The new connection inherits the remaining key life. ULA SHOULD
   negotiate new session key and/or install new session key as soon as
   possible.

   The optional payload of the MULTIPLY packet MUST be processed in the
   new connection context.

   The MULTIPLY packet is an out-of-band command packet in the original
   connection context.

10.2. Response to Connection Multiplication Request

   Case 1: (PERSIST, SN, ExpectedSN, ICC, FREWS [, Sink Parameters] [,
   Payload])

   Case 2: (RESET, SN, ExpectedSN, ICC, FREWS, Reason of Failure)

   In all of these cases the ULTID of the remote-end MUST be the value
   of the initiator's ULTID in the connection multiplication header.


Gao                   Expires January 3, 2018               [Page 46]

Internet-Draft        Flexible Session Protocol              July 2017


   In case 1 the responder admits the multiplication request and the new
   connection enters into the ESTABLISHED or COMMITTING state
   immediately, on request of ULA.

   In case 2 the responder rejects the multiplication request. To defend
   against spoofing attack ICC MUST be valid. The value of the SN field
   MUST equal the value of the 'Expected SN' field of the requesting
   MULTIPLY packet while the value of ExpectedSN field MUST equal the
   value of the 'Sequence No' field.

   The new connection MUST reuse the session key of the original
   connection where the out-of-band requesting MULTIPLY packet is
   received and ULA may negotiate and install the new session key
   afterward.

10.3. Duplicate Detection of Connection Multiplication Request

   Every time the responder of connection multiplication receives a
   MULTIPLY packet it MUST check the suggested responder's ULTID and the
   initiator's ULTID.

   The responder MUST reject the multiplication request if the suggested
   responder's ULTID equals the near-end ULTID of some connection and
   the remote-end ULTID of that connection does not equal the
   initiator's ULTID.

   The responder MUST recognize the MULTIPLY packet as a duplicate
   connection request if some connection matches the request and SHOULD
   response by retransmitting the head packet of the send queue of the
   matching connection, be it a PERSIST or an COMMIT packet. A
   connection matches the MULTIPLY request if and only if the suggested
   responder's ULTID in the MULTIPLY packet equals the near-end ULTID of
   the connection and the initiator's ULTID equals the remote-end ULTID
   of the connection.

10.4. Retransmission

   The initiating side SHALL retransmit the MULTIPLY packet if the
   corresponding PERSIST packet is not received in some limit time (by
   default 15 seconds).




Gao                   Expires January 3, 2018               [Page 47]

Internet-Draft        Flexible Session Protocol              July 2017


11. Timeouts and abruptly Shutdown

11.1. Timeouts in End-to-End Negotiation

   Initially the initiator is in the CONNECT_BOOTSTRAP state. It
   migrates to the CONNECT_ AFFIRMING state after it received the
   legitimate ACK_INIT_CONNECT packet. Then it migrates to the
   PEER_COMMIT or CLOSABLE state after it received the legitimate
   ACK_CONNECT _REQ packet, depending on the hint of ULA.

   The responder incarnates a new connection context which is initially
   in the CHALLENGING state after accepting a legitimate Conect Request
   packet. Then it migrates to the COMMITTING or CLOSABLE state,
   depending on the packet received from its peer.

   If the initiator or the responder is unable to migrate to a new state
   in some limit time (by default 60 seconds, except in LISTENING state)
   it aborts the connection by recycling the connection context.

11.2. Timeouts in Multiply

   Initially the initiating side of Connection Multiplication is in the
   CLONING state. It migrates to the ACTIVE, COMMITTED, PEER_COMMIT or
   CLOSABLE state after it received the legitimate PERSIST packet. Which
   state to migrated depends on the EoT flag of the initiating MULTIPLY
   packet and the responding PERSIST packet.

   If the initiating side is unable to migrate to a new state in some
   limit time (by default 60 seconds) it aborts multiplication by
   recycling the new connection context.

11.3. Timeout of Transmit Transaction Commitment

   The FSP node MUST abort the connection if the time of no packet
   having arrived has exceed certain limit in the COMMITTING or
   COMMITTING2 state.

   In this FSP version, timeout of transmit transaction commitment is
   set to 5 minutes.






Gao                   Expires January 3, 2018               [Page 48]

Internet-Draft        Flexible Session Protocol              July 2017


11.4. Timeout of Graceful Shutdown

   It simply migrates to the NON_EXISTENT pseudo-state if timeout in the
   PRE_CLOSED state.

   In this FSP version, timeout of Graceful Shutdown is set to 1 minute.

11.5. Idle Timeout

   If one participant has not received any packet is a limit time, it
   MUST abruptly shutdown.

   In this FSP version idle timeout is set to 4 hours.

11.6. Session Key Timeout

   For this FSP version if a secret key is applied for more than 2^30
   times the FSP node MUST abruptly shutdown instantly.

11.7. Abrupt Shutdown

   An FSP node abruptly shutdown a session by sending a RESET packet and
   release all of the resource occupied by the the session immediately.

   (RESET, SN, ExpectedSN, ICC, Reason of Failure)

12. Issues Should Have Resolved

12.1. Resolution of ULTID

   There are two patterns of IP address resolution in FSP: the DNS-
   compatible pattern and the proxy pattern. The former pattern relies
   on some name service to resolve the IP address of the responder for
   the initiator before they exchange end-to-end packets.

   The latter embeds the address resolution information in the
   connection bootstrap packets and works in the FSP over IPv6 only.

   In the DNS-compatible pattern, the responder side of the FSP
   participants registered its address identification, such as 'domain
   name' in some name service such as DNS, according to some pre-
   agreement at first. The initiator resolves the current IP address of


Gao                   Expires January 3, 2018               [Page 49]

Internet-Draft        Flexible Session Protocol              July 2017


   the responder by consulting the name service, such as looking after
   the A or AAAA record of the domain name in DNS.

   In IPv6 network the rightmost 32 bits of the IPv6 address directly
   maps to the ULTID so FSP does not need additional multiplexing
   mechanism such as port number. Here it needs not consult SRV record
   or look for some entry in some 'services' file.

   If UDP over IPv4 is exploited as the layer data packet delivery
   service the port number of the responder is firstly resolved just
   alike normal network application such as HTTP and is extended to 32-
   bit ULTID. Here ULTIDs of FSP can be considered as the superset of
   TCP port numbers.

   If the string representation of IPv4/IPv6 address is applied directly
   as the peer's address identification instead of the domain name there
   is no need for some real address resolution. But from the API caller'
   s point of view it is a DNS-compatible mode address resolution.

12.2. Integrated Proxy Mode of Host Name Resolution

   The proxy pattern can only work in the FSP over IPv6. FSP over IPv6
   MUST support both the proxy pattern and the DNS-compatible pattern,
   and it MUST try the proxy pattern at first. Only when no response is
   received after several retries in some arbitrary time can it try the
   DNS-compatible pattern.

   In IPv6 network if the global unicast IP address of the default
   gateway is configured the initiator of the FSP connection chooses the
   IPv6 address of the default gateway as the destination IP address of
   the INIT_CONNECT packet.

   If the global unicast IP address of the default gateway is not
   configured the default link-local gateway address, FE80::1, is
   applied instead.

   The gateway that connects the IPv6 host should be able to resolve the
   IP address of the responder. If there are multiple IP addresses
   resolvable the gateway may arbitrarily select one.




Gao                   Expires January 3, 2018               [Page 50]

Internet-Draft        Flexible Session Protocol              July 2017


   If the gateway found that the responder is on the same link-local
   network with the initiator it must change the source and the
   destination IP addresses of the INIT_CONNECT packet to the link-local
   IP addresses of the initiator and the responder, respectively, and
   relay the packet onto the same link-local network.

   If the gateway found that the responder is not on the same link-local
   network with the initiator it must select one public global unicast
   IP address resolved for the initiator and one public global unicast
   IP address resolved for the responder, and correspondingly update the
   64-bit network prefix part of the source and the destination IP
   address field of the underlying IPv6 header of the packet,
   respectively, and relay the packet to the next gateway/router or the
   responder itself.

   If the gateway is unable to resolve the IP address of the responder,
   it must not respond to the INIT_CONNECT packet.

   The initiator decides whether to apply path selection according to
   the packet acknowledged. If the 64-bit prefix source address of the
   acknowledgment packet is already in the allowed address list field of
   the acknowledgment packet path selection is assumed done. Otherwise
   path selection is applied to determine the source and destination
   addresses of the CONNECT_REQUEST packet during end-to-end negotiation.

12.3. Path selection

   The source and destination IP address of the first packet received
   from the peer are selected as the primary sink and source end point
   address of the initial path, respectively.

   If UDP over IPv4 is exploited as the layer data packet delivery
   service and no response is receive in some arbitrary time it fails to
   establish the connection.

   In the FSP-IPv6 integration mode the proxy pattern is applied at
   first. If it fails the DNS-compatible pattern is tried, and matching
   of the loopback addresses is preferred over matching of the link-
   local address, while the latter is preferred over matching of the
   global unicast addresses in path selection.




Gao                   Expires January 3, 2018               [Page 51]

Internet-Draft        Flexible Session Protocol              July 2017


   After the communication is established the IP address may be changed
   dynamically, and one more alternate IP address may be added or
   removed dynamically for individual endpoint as well, provided that
   the behavior conforms to the protocol.

   The sender may choose as the source IP address any IP address it has
   most-recently sent to its peer in the allowed address list field of
   the sink paramters header, and choose as the destination IP address
   any IP address in the allowed address list field of the sink
   parameters header most- recently received from its peer, thus
   multipath load-balance is possible.

12.4. Multipath MTU discovery

   Te FSP node SHALL choose the minimal path MTU if multipath is
   exploited.

12.5. Milk-type Payload and Minimal Delay Service

   An ordinary data flow is wine-type in the sense that the older data
   are of leftmost value. If it has to, data packet sent latest are
   dropped first.

   In the contrary, milk-type payload is that the newer data are more
   precious and outdated data packet can be discarded.

   Only in the FSP over IPv6 mode does FSP support milk-type payload.
   IPv6 packet of a milk-type FSP payload should take a mark at the IPv6
   traffic class field to let the underlying network layer to minimize
   delay.

   When ULA is willing to accept incomplete message the peer of the
   underling FSP node should set the MIND flag of every FSP PURE_DATA
   packet, while set the Traffic Class of the underlying IPv6 packet to
   some registered value.

   In the transmission path, any relaying middle box, be it router or
   switch, should reserve a reasonably short queue for the packet flow
   of such flow to minimize delay.

   When the receive buffer overflows the receiver discards the
   undelivered packet received first to free buffer space for the latest


Gao                   Expires January 3, 2018               [Page 52]

Internet-Draft        Flexible Session Protocol              July 2017


   packet received. However it keeps order on delivering the packets to
   he ULA. ULA may choose to discard packets received earlier than some
   threshold.

   Optional forward-error-correction feature should be exploited to
   enhance reliability of data transfer under MIND mode.

12.6. Explicit Congestion Notification and Congest Control

   This FSP version has not design congestion control mechanism yet.

13. Security Considerations

   <A lot more further discussions needed!>

13.1. Resistance against Deny of Service Attack

   FSP is designed to resist against DoS attack by exploiting concept of
   Cookie.

   However, distributed DoS attack remains an unresolved issue.

13.2. Resistance against Replay Attack

   In-band sequence number and out-of-band sequence number are exploited
   to resist aginst replay attack.

13.3. Resistance against Passive Attacks

   AEAD MAY be exploited by the ULA to protect it against passive
   attacks such as eavesdropping, gaining advantage by analyzing the
   data sent over the line iSCSI implementations MUST provide.

   MAC only service MAY also be utilized. Together with application
   layer stream-mode encryption it protects the ULA  against passive
   attacks as well.

13.4.  Resistance against Masquerade Attack

   Both AEAD and MAC only service may be exploited to protect the
   endpoints against masquerade attack.





Gao                   Expires January 3, 2018               [Page 53]

Internet-Draft        Flexible Session Protocol              July 2017


13.5.  Resistance against Active Man-In-The-Middle Attack

   The ULA SHALL take account to protect itself against MITM attack when
   making client authentication and key establishment.

14. IANA Considerations

   <Add any IANA considerations>

   If Minimal-Delay service is implemented, a special traffic class code
   value should be registered.

15. Conclusions

   Flexible Session Protocol is a transport layer protocol as suggested
   in [RFC1122], with session layer semantic as specified in [OSI/RM].

   Alike TCP [STD7], FSP primarily provides reliable byte-stream
   transfer service. Unlike TCP, the byte-stream may be segmented into
   almost unlimited number of transmit transaction.

   FSP provides token management service by cooperating with ULA to
   manage the shared secret key.

   The clone connection MAY be utilized to provide expedited data
   transfer service.

   The concept of transmit transaction has some semantics of uni-
   direction adjournment of session. Symmetrical commitment of transmit
   transaction provides session-connection synchronization.

   It may be argued that by implements FSP over IPv6 it provides more
   reasons to transit towards IPv6:

   o Infrastructure-independent mobility support

   To support mobility FSP does not assume any infrastructure
   prerequisite. However, it may take advantages of physical network
   mobility support or legacy IP mobility support for IPv4/IPv6
   ([RFC3344]/[RFC6275]) to enhance reliability of FSP mobility support.

   o Elimination of routing scalability issue



Gao                   Expires January 3, 2018               [Page 54]

Internet-Draft        Flexible Session Protocol              July 2017


   o Network-level fault tolerance through inherent multihoming and
      multipath support

   o Resist against masquerade attacks

   o Ubiquitous encryption and/or authentication of data

   o Performance gains: clone connection makes it easy to avoid head-
      of-line congestion, while mechanism of transmit transaction may
      save substantial acknowledgment overheads in the application layer.

16. References

16.1. Normative References

   [STD5]   Postel, J., "Internet Protocol", STD 5, RFC 791, September
             1981.

   [STD6]   Postel, J., "User Datagram Protocol", STD 6, RFC 768,
             August 1980.

   [STD7]    Postel, J., "Transmission Control Protocol", STD 7, RFC
             793, September 1981.

   [OSI/RM]  ISO and IEC, "Information technology-Open Systems
             Interconnection - Basic Reference Model: The Basic Model",
             ISO/IEC 7498-1 Second edition, November 1994.
             <https://www.iso.org/standard/20269.html>
             <http://standards.iso.org/ittf/PubliclyAvailableStandards/s
             014258_ISO_IEC_7498-4_1989(E).zip>

   [RFC1122] Braden, R., Ed., "Requirements for Internet Hosts -
             Communication Layers", STD 3, RFC 1122, October 1989.

   [RFC2119] Bradner, S., "Key words for use in RFCs to Indicate
             Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2460] Deering, S. and Hinden, R., "Internet Protocol, Version 6
             (IPv6) Specification", RFC 2460, December 1998.

   [R01]  Rogaway, P., "Authenticated encryption with Associated-Data",
             ACM Conference on Computer and Communication Security
             (CCS'02), pp. 98-107, ACM Press, 2002.


Gao                   Expires January 3, 2018               [Page 55]

Internet-Draft        Flexible Session Protocol              July 2017


   [RFC3629] Yergeau, F., "UTF-8, a transformation format of ISO 10646",
             STD 63, RFC 3629, November 2003.

   [RFC4291] Hinden, R. and Deering S., "IP Version 6 Addressing
             Architecture", RFC 4291, February 2006.

   [RFC5226] Narten, T. and H. Alvestrand, "Guidelines for Writing an
             IANA Considerations Section in RFCs", BCP 26, RFC 5226, May
             2008.

   [RFC7693] Saarinen, M-J., Ed. and Aumasson, J-P., "The BLAKE2
             Cryptographic Hash and Message Authentication Code (MAC)",
             RFC 7693, November 2015.

   [AES]   NIST, "Advanced Encryption Standard (AES)", November 2001.
             <https://doi.org/10.6028/NIST.FIPS.197>

   [GCM]   NIST, "Recommendation for Block Cipher Modes of Operation:
             Galois/Counter Mode (GCM) and GMAC", November 2007.
             <http://dx.doi.org/10.6028/NIST.SP.800-38D>

   [CRC64]  ECMA, "Data Interchange on 12.7 mm 48-Track Magnetic Tape
             Cartridges - DLT1 Format Standard, Annex B", ECMA-182,
             December 1992.

16.2. Informative References

   [Gao2002] Gao, J., "Fuzzy-layering and its suggestion", IETF Mail
             Archive, September 2002,
             https://mailarchive.ietf.org/arch/msg/ietf/u-6i-6f-Etuvh80-
             SUuRbSCDTwg

   [Fab1999] Faber, T., Touch, J. and W. Yue, "The TIME-WAIT state in
             TCP and Its Effect on Busy Servers", Proc. Infocom 1999 pp.
             1573-1583.

   [tcpcrypt]Bittau, A., Hamburg, M., Handley, M., Mazieres, D., and
             Boneh,D., "The case for ubiquitous transport-level
             encryption", USENIX Security , 2010.

   [RFC1034] Mockapetris, P., "DOMAIN NAMES - CONCEPTS AND FACILITIES",
             RFC 1034, November 1987.



Gao                   Expires January 3, 2018               [Page 56]

Internet-Draft        Flexible Session Protocol              July 2017


   [RFC1035] Mockapetris, P., "DOMAIN NAMES - IMPLEMENTATION AND
             SPECIFICATION", RFC 1035, November 1987.

   [RFC1644] Braden, R., "T/TCP -- TCP Extensions for Transactions
             Functional Specification", RFC 1644, July 1994.

   [RFC2827] Ferguson, P. and D. Senie, "Network Ingress Filtering:
             Defeating Denial of Service Attacks which employ IP Source
             Address Spoofing", BCP 38, RFC 2827, May 2000.

   [RFC3056] Carpenter, B. and K. Moore, "Connection of IPv6 Domains via
             IPv4 Clouds", RFC 3056, February 2001.

   [RFC3168] Ramakrishnan, K., Floyd, S., and D. Black, "The Addition of
             Explicit Congestion Notification (ECN) to IP", RFC 3168,
             September 2001.

   [RFC3315] Droms, R., Ed., Bound, J., Volz, B., Lemon, T., Perkins, C.,
             and M. Carney, "Dynamic Host Configuration Protocol for
             IPv6 (DHCPv6)", RFC 3315, , July 2003.

   [RFC3344] Perkins, C., "IP Mobility Support for IPv4", RFC 3344,
             August 2002.

   [RFC3596] Thomson, S., Huitema, C., Ksinant V. and Souissi, M. , "DNS
             Extensions to Support IP Version 6", RFC 3596, October 2003.

   [RFC3633] Troan, O. and R. Droms, "IPv6 Prefix Options for Dynamic
             Host Configuration Protocol (DHCP) version 6", RFC 3633,
             December 2003.

   [RFC3720] J. Satran, K. Meth, C. Sapuntzakis, M. Chadalapaka and E.
             Zeidner, "Internet Small Computer Systems Interface
             (iSCSI)", RFC 3720, April 2004.

   [RFC3828] Larzon, L-A., Degermark, M., Pink, S., Jonsson, L-E., Ed.,
             and G. Fairhurst, Ed., "The Lightweight User Datagram
             Protocol (UDP-Lite)", RFC 3828, July 2004.

   [RFC3963] Devarapalli, V., Wakikawa, R., Petrescu, A., and P. Thubert,
             "Network Mobility (NEMO) Basic Support Protocol", RFC 3963,
             January 2005.



Gao                   Expires January 3, 2018               [Page 57]

Internet-Draft        Flexible Session Protocol              July 2017


   [RFC3986] Berners-Lee, T., Fielding R. and Masinter L., "Uniform
             Resource Identifier (URI): Generic Syntax", STD 66, RFC
             3986, January 2005.

   [RFC4086] Eastlake 3rd, D., Schiller, J., and S. Crocker, "Randomness
             Requirements for Security", BCP 106, RFC 4086, June 2005.

   [RFC4301] Kent, S. and K. Seo, "Security Architecture for the
             Internet Protocol", RFC 4301, December 2005.

   [RFC4302] Kent, S., "IP Authentication Header", RFC 4302, December
             2005.

   [RFC4303] Kent, S., "IP Encapsulating Security Payload (ESP)", RFC
             4303, December 2005.

   [RFC4380] Huitema, C., "Teredo: Tunneling IPv6 over UDP through
             Network Address Translations (NATs)", RFC 4380, February
             2006.

   [RFC4422] Melnikov, A., Ed. and Zeilenga, K., Ed., "Simple
             Authentication and Security Layer (SASL)", RFC 4422, June
             2006.

   [RFC4555] Eronen, P., Ed., "IKEv2 Mobility and Multihoming Protocol
             (MOBIKE)", RFC 4555, June 2006.

   [RFC4821] Mathis, M. and J. Heffner, "Packetization Layer Path MTU
             Discovery", RFC 4821, March 2007.

   [RFC4861] Narten, T., Nordmark, E., Simpson, W., and H. Soliman,
             "Neighbor Discovery for IP version 6 (IPv6)", RFC 4861,
             September 2007.

   [RFC4862] Thomson, S., Narten, T., and T. Jinmei, "IPv6 Stateless
             Address Autoconfiguration", RFC 4862, September 2007.

   [RFC4960] Stewart, R., Ed., "Stream Control Transmission Protocol",
             RFC 4960, September 2007.

   [RFC5056] Williams, N., "On the Use of Channel Bindings to Secure
             Channels", RFC 5056, November 2007.



Gao                   Expires January 3, 2018               [Page 58]

Internet-Draft        Flexible Session Protocol              July 2017


   [RFC5072] Varada, S., Ed., Haskins, D., and E. Allen, "IP Version 6
             over PPP", RFC 5072, September 2007.

   [RFC5116] McGrew, D., "An Interface and Algorithms for Authenticated
             Encryption", RFC 5116, January 2008.

   [RFC5226] Narten, T. and H. Alvestrand, "Guidelines for Writing an
             IANA Considerations Section in RFCs", BCP 26, RFC 5226, May
             2008.

   [RFC5246] Dierks, T. and E. Rescorla, "The Transport Layer Security
             (TLS) Protocol Version 1.2", RFC 5246, August 2008.

   [RFC5889] Baccelli, E., Ed. and M. Townsley, Ed., "IP Addressing
             Model in Ad Hoc Networks", RFC 5889, September 2010.

   [RFC5942] Singh, H., Beebee, W., and E. Nordmark, "IPv6 Subnet Model:
             The Relationship between Links and Subnet Prefixes", RFC
             5942, July 2010.

   [RFC6177] Narten, T., Huston, G., and L. Roberts, "IPv6 Address
             Assignment to End Sites", BCP 157, RFC 6177, March 2011.

   [RFC6275] Perkins, C., Ed., Johnson, D., and J. Arkko, "Mobility
             Support in IPv6", RFC 6275, July 2011.

   [RFC6347] E. Rescorla,  N. Modadugu, "Datagram Transport Layer
             Security Version 1.2", RFC 6347, January 2012.

   [RFC6434] Jankiewicz, E., Loughney, J., and T. Narten, "IPv6 Node
             Requirements", RFC 6434, December 2011.

   [RFC6740] Atkinson, RJ and Bhatti, SN, "Identifier-Locator Network
             Protocol (ILNP) Architectural Description", RFC 6740,
             November 2012.

   [RFC6824] Ford, A., Raiciu, C., Handley, M., and O. Bonaventure, "TCP
             Extensions for Multipath Operation with Multiple Addresses",
             RFC 6824, January 2013.






Gao                   Expires January 3, 2018               [Page 59]

Internet-Draft        Flexible Session Protocol              July 2017


   [RFC6830] Farinacci, D., Fuller, V., Meyer, D., and D. Lewis, "The
             Locator/ID Separation Protocol (LISP)", RFC 6830, January
             2013.

   [RFC7050] Savolainen, T., Korhonen, J., and D. Wing, "Discovery of
             the IPv6 Prefix Used for IPv6 Address Synthesis", RFC 7050,
             November 2013.

   [RFC7157] Troan, O., Ed., Miles, D., Matsushima, S., Okimoto, T., and
             D. Wing, "IPv6 Multihoming without Network Address
             Translation", RFC 7157, March 2014.

   [RFC7228] Bormann, C., Ersue, M., and A. Keranen, "Terminology for
             Constrained-Node Networks", RFC 7228, May 2014.

   [RFC7296] Kaufman, C., Hoffman, P., Nir, Y., Eronen, P. and Kivinen
             T., "Internet Key Exchange Protocol Version 2 (IKEv2)", STD
             79, RFC 7296, October 2014.

   [RFC7540] Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext
             Transfer Protocol Version 2 (HTTP/2)", RFC 7540, May 2015.

   [RFC7608] Boucadair, M., Petrescu, A., and F. Baker, "IPv6 Prefix
             Length Recommendation for Forwarding", BCP 198, RFC 7608,
             July 2015.

   [RFC7721] Cooper, A., Gont, F., and D. Thaler, "Security and Privacy
             Considerations for IPv6 Address Generation Mechanisms", RFC
             7721, March 2016.

   [RFC7849] Binet, D., Boucadair, M., Vizdal, A., Chen, G., Heatley, N.,
             Chandler, R., Michaud, D., Lopez, D., and W. Haeffner, "An
             IPv6 Profile for 3GPP Mobile Devices", RFC 7849, May 2016.

   [RFC8084] Fairhurst, G., "Network Transport Circuit Breakers", BCP
             208, RFC 8084, March 2017.

   [RFC8085] Eggert, L., Fairhurst, G. and G. Shepherd, "UDP Usage
             Guidelines", BCP 145, RFC 8085, March 2017.

   [RFC8087] Fairhurst, G. and M. Welzl, "The Benefits of Using Explicit
             Congestion Notification (ECN)", RFC 8087, March 2017.



Gao                   Expires January 3, 2018               [Page 60]

Internet-Draft        Flexible Session Protocol              July 2017


   [RFC8170] D. Thaler, Ed., "Planning for Protocol Adoption and
             Subsequent Transitions", RFC 8170, May 2017.

   [NGMN2015]"5G White Paper", NGMN Alliance, February 2015.
             <https://www.ngmn.org/fileadmin/ngmn/content/downloads/Tech
             nical/2015/NGMN_5G_White_Paper_V1_0.pdf>

   [I-D.ila-mobility]

             Mueller, J. and Herbert, T., "Mobility Management Using
             Identifier Locator Addressing",  Internet-Draft draft-
             mueller-ila-mobility-03, February 2017.
             <https://www.ietf.org/id/draft-mueller-ila-mobility-03.txt>

   [I-D.irtf-t2trg-iot-seccons]

             Garcia-Morchon, O., Kumar, S. and Sethi, M., "State of the
             Art and Challenges for the Internet of Things", Internet-
             Draft draft-irtf-t2trg-iot-seccons-03, May 2017.
             <https://www.ietf.org/id/draft-irtf-t2trg-iot-seccons-
             03.txt>

   [I-D.ietf-quic-transport]

             Iyengar, J. and M. Thomson, "QUIC: A UDP-Based Multiplexed
             and Secure Transport", Internet-Draft draft-ietf-quic-
             transport-03, May 2017.
             <https://github.com/quicwg/base-drafts/wiki/QUIC-Versions>

17. Acknowledgments

   <Add any acknowledgements>



   This document was prepared using 2-Word-v2.0.template.dot.





   Copyright (c) 2017 IETF Trust and the persons identified as authors
   of the code. All rights reserved.


Gao                   Expires January 3, 2018               [Page 61]

Internet-Draft        Flexible Session Protocol              July 2017


   Redistribution and use in source and binary forms, with or without
   modification, is permitted pursuant to, and subject to the license
   terms contained in, the Simplified BSD License set forth in Section
   4.c of the IETF Trust's Legal Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info).










































Gao                   Expires January 3, 2018               [Page 62]

Internet-Draft        Flexible Session Protocol              July 2017


Authors' Addresses

   Jason Gao
   Software Architect

   Email: jagao@outlook.com









































Gao                   Expires January 3, 2018               [Page 63]

