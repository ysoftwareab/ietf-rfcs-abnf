schema = [WS] user-types [WS]

user-type =  "type" WS user-type-name WS non-enum-type
user-type =/ "enum" WS user-type-name WS enum-type
user-types = user-type / (user-types WS user-type)

type            = non-enum-type / enum-type
non-enum-type   = primitive-type / aggregate-type / user-type-name

user-type-name  = UPPER *(ALPHA / DIGIT) ; First letter is uppercase

primitive-type  =  "int" / "i8"  / "i16" / "i32" / "i64"
primitive-type  =/ "uint" / "u8"  / "u16" / "u32" / "u64"
primitive-type  =/ "f32" / "f64"
primitive-type  =/ "bool"
primitive-type  =/ "string"
primitive-type  =/ "data" / ("data<" integer ">")
primitive-type  =/ "void"

enum-type       =  "{" [WS] enum-values [WS] "}"
enum-values     =  enum-value / (enum-values WS enum-value)
enum-value      =  enum-value-name
enum-value      =/ (enum-value-name [WS] "=" [WS] integer)
enum-value-name =  UPPER *(UPPER / DIGIT / "_")

aggregate-type  =  optional-type
aggregate-type  =/ array-type
aggregate-type  =/ map-type
aggregate-type  =/ union-type
aggregate-type  =/ struct-type

optional-type   = "optional<" type ">"

array-type      = "[" [integer] "]" type
integer         = 1*DIGIT

map-type        = "map[" type "]" type

union-type      =  "(" union-members ")"
union-members   =  union-member
union-members   =/ (union-members [WS] "|" [WS] union-member)
union-member    =  type [[WS] "=" [WS] integer]

struct-type     = "{" [WS] fields [WS] "}"
fields          = field / (fields WS field)
field           = 1*ALPHA [WS] ":" [WS] type

UPPER           = %x41-5A ; uppercase ASCII letters
ALPHA           = %x41-5A / %x61-7A ; A-Z / a-z
DIGIT           = %x30-39 ; 0-9

WS              = 1*(%x0A / %x09 / " ") ; whitespace

JSMITH = 99
