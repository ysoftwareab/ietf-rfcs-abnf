Audio/Video Transport Working Group                      Bruce Thompson
Internet Draft                                           Bruce Buffam
November 23, 2000                                        Tmima Koren
Expires June 2001                                        Cisco Systems
draft-buffam-avt-crtp-over-aal2-01.txt 


             PPP (and IP/UDP/RTP Header Compression) over AAL2

Status of this memo

This document is an Internet Draft and is in full conformance with all 
provisions of Section 10 of RFC 2026. Internet Drafts are working 
documents of the Internet Engineering Task Force (IETF), its Areas, and 
its Working Groups. Note that other groups may also distribute working 
documents as Internet Drafts.

Internet Drafts are draft documents valid for a maximum of six months. 
Internet Drafts may be updated, replaced, or obsolete by other 
documents at any time. It is not appropriate to use Internet Drafts as 
reference material or to cite them other than as "work in progress".

The list of current Internet-Drafts can be accessed at: 
http://www.ietf.org/ietf/1id-abstracts.txt

The list of Internet-Draft Shadow Directories can be accessed at: 
http://www.ietf.org/shadow.txt

This draft is being submitted as a possible work item to the IETF 
Audio/Video Transport working group.  To subscribe to the mailing list 
send a message to rem-conf-request@es.net with the line "subscribe" in 
the body of the message. Archives are available from:
ftp://ftp.es.net/pub/mail-archive/rem-conf

Copyright Notice

Copyright (C) The Internet Society (1999-2000). All Rights Reserved.

Abstract

   The Point-to-Point Protocol (PPP) [1] provides a standard method for
   transporting multi-protocol datagrams over point-to-point links.

   This document describes the use of ATM Adaptation Layer 2 (AAL2) for
   framing PPP encapsulated packets.

Applicability

   This specification is intended for those implementations which desire
   to use the facilities which are defined for PPP, such as the Link
   Control Protocol, Network-layer Control Protocols, authentication,
   and compression.  These capabilities require a point-to-point
   relationship between the peers, and are not designed for the multi-
   point relationships which are available in ATM and other multi-access
   environments.

2. Introduction

PPP over AAL5 [2] describes the encapsulation format and operation of PPP 
when used with the ATM AAL5 adaptation layer. While this encapsulation 
format is well suited to PPP transport of IP, it is bandwidth inefficient 
when used for transporting small payloads such as voice. PPP over AAL5 is 
especially bandwidth inefficient when used with RTP header compression [3].

PPP over AAL2 addresses the bandwidth efficiency issues of PPP over AAL5 for 
small packet transport by making use of the AAL2 Common Part Sublayer 
(CPS)[4] to allow multiple PPP payloads to be multiplexed into a set of ATM 
cells.

2. Conventions

   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,
   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this
   document, are to be interpreted as described in [6].

3. AAL2 Layer Service Interface

   The PPP layer treats the underlying ATM AAL2 layer service as a bit-
   synchronous point-to-point link.  In this context, the PPP link
   corresponds to an ATM AAL2 virtual connection.  The virtual
   connection MUST be full-duplex, point to point, and it MAY be either
   dedicated (i.e. permanent, set up by provisioning) or switched (set
   up on demand).  In addition, the PPP/AAL2 service interface boundary
   MUST meet the following requirements:

        Interface Format - The PPP/AAL2 layer boundary presents an octet
        service interface to the AAL2 layer.  There is no provision for
        sub-octets to be supplied or accepted.

        Transmission Rate - The PPP layer does not impose any
        restrictions regarding transmission rate or the underlying ATM
        layer traffic descriptor parameters.

        Control Signals - The AAL2 layer MUST provide control signals to
        the PPP layer which indicate when the virtual connection link
        has become connected or disconnected.  These provide the "Up"
        and "Down" events to the LCP state machine [1] within the PPP layer.
        In the case of PPP over AAL2, the state of the link can be derived
        from the type 3 fault management packets carried in-band within a
        given AAL2 CID flow.

4. PPP Operation with AAL2

PPP over AAL2 uses 2 encapsulations within the Segmentation and Reassembly 
Service Specific Convergence Sublayer (SSSAR) [5] for the AAL type 2. PPP 
packets with long payloads use the SSSAR sublayer with a four byte CRC as 
described in section 3.2.2. PPP packets with short payloads use the SSSAR 
sublayer with a two byte CRC as described in section 3.2.1. The use of the 
SSSAR sublayer with a two byte CRC is required to allow bandwidth efficient 
transport of small PPP payloads over AAL2.

The SSSAR sublayer is used to segment PPP packets into frames that can be 
transported using the AAL2 CPS. The SSSAR sublayer uses different AAL2 UUI 
code-points to indicate whether a segment is the last segment of a packet or 
not. All frames but the last frame of a packet segmented with the SSSAR 
sublayer are identified using UUI code-point 27. The final frame of a packet 
segmented with SSSAR is identified using a UUI code-point in the range 0-26.

Within the SSSAR sublayer, PPP packets using the short payload encapsulation 
MUST use AAL2 UUI code-point 2 to indicate the final frame of a series of 
SSSAR frames. PPP packets using the long payload encapsulation MUST use AAL2 
UUI code-point 3 to indicate the final frame of a series of SSSAR frames. 
All other frames of both the short and long payload encapsulations of PPP 
MUST use AAL2 UUI code-point 27.

An implementation of PPP over AAL2 MAY use a single AAL2 Channel Identifier 
(CID) for transport of all PPP packets. To minimize delay for small packets, 
implementations of PPP over AAL2 SHOULD use at least 2 AAL2 CIDs. An 
implementation using 2 AAL2 CIDs SHOULD transport PPP packets less than or 
equal to 256 bytes on one AAL2 CID and PPP packets greater than 256 bytes on 
the other AAL2 CID. Implementations of PPP over AAL2 MAY use more than 2 
AAL2 CIDs for transport of PPP packets. The allocation of PPP packets to 
AAL2 CIDs for implementations supporting more than 2 AAL2 CIDs is 
implementation dependent.

PPP operation with AAL2 will perform basic PPP encapsulation with the PPP 
protocol ID. It MAY then perform a test on the resulting payload to 
determine whether the payload will be sent using the short payload 
encapsulation or the long payload encapsulation. Both payload encapsulations 
MUST use the SSSAR sublayer of AAL2 for transport. PPP frames less than or 
equal to 256 bytes MAY be encapsulated using the short payload 
encapsulation. PPP frames greater than 256 bytes MUST be encapsulated using 
the long payload encapsulation. Any PPP frames that do not use the short 
payload encapsulation MUST use the long payload encapsulation.

5.0 Comparison of PPP over AAL2 with existing encapsulations

This document proposes the substitution of AAL2 transport for PPP in 
scenarios where small packets are being transported over an ATM network. 
This is most critical in applications such as voice transport using RTP [9] 
where RTP Header compression [5] is used. In applications such as voice 
transport, both bandwidth efficiency and low delay are very important.

This section provides justification for the PPP over AAL2 service for ATM 
transport by comparing it to existing PPP encapsulation formats used for 
transport over ATM. Two encapsulation formats that will be examined here. 
They are: PPP over AAL5 [2], and PPP with PPPMUX [8] over AAL5.

5.1 Comparison with PPP over AAL5

This proposal uses ATM AAL2 rather than AAL5 as the transport for PPP. The 
header efficiency of the short payload encapsulation with SSSAR and the AAL2 
CPS provides for less ATM encapsulation overhead per PPP payload. The short 
payload encapsulation consists of a two byte CRC. The AAL2 CPS header 
consists of 3 bytes, and the Offset field is 1 byte. This is a total 
encapsulation overhead of 6 bytes. This compares to 8 bytes of overhead for 
the AAL5 trailer used for PPP over AAL5.

The multiplexing function of the AAL2 CPS layer allows more bandwidth 
efficient transport of CRTP frames by multiplexing multiple CRTP frames into 
one or more ATM cells using the AAL2 CPS function. The removes the pad 
overhead of AAL5 when used to transport short frames.

The byte stream characteristic of AAL2 transport coupled with the use of 
separate AAL2 CIDs for short and long payloads reduces the latency of 
processing short packets over an AAL5 based solution. In PPP over AAL2 
implementations that use separate AAL2 CIDs for short and long packets, a 
short packet will be naturally interleaved into a long packet. This will 
happen because the functionality of the SSSAR sublayer causes both long and 
short packets to be segmented into short frames of 64 bytes or less. Since 
long and short packets will be segmented and transmitted on separate AAL2 
CIDs, the AAL2 CPS layer will interleave the segments from the 2 packets. 
This will allow the short PPP payload to be transmitted and received on the 
short payload CID without having to wait for the large PPP payload to be 
sent/received on the long payload CID.

2.2 Comparison with PPPMUX over AAL5

A new method for doing multiplexing in the PPP layer has been adopted in the 
PPP Extensions working group. The draft is called the PPP Multiplexed Frame 
Option [8]. PPP Multiplexing provides similar functionality to the CPS based 
multiplexing function of AAL2. Using PPP multiplexing, a PPP stack would 
look like PPP/PPPMUX/AAL5.

Both PPP/PPPMUX/AAL5 and PPP/AAL2 use multiplexing to reduce the overhead of 
cell padding when frames are sent over an ATM virtual circuit. However, the 
bandwidth utilization of PPP/AAL2 will typically be better than the 
bandwidth used by PPP/PPPMUX/AAL5. This is because multiplexed frames in 
PPP/PPPMUX/AAL5 must always be encapsulated within an AAL5 frame before 
being sent. This encapsulation causes an additional 8 bytes of AAL5 trailer 
to be added to the PPPMUX encapsulation. In addition to the 8 bytes of AAL5 
trailer, PPPMUX will incur an average of 24 additional bytes of AAL5 PAD. 
These 2 factors will end up reducing the effective efficiency of PPPMUX when 
it is used over AAL5.

With PPP/AAL2, the AAL2 CPS layer treats individual PPP frames as a series 
of CPS payloads that can be multiplexed. As long as PPP frames arrive at the 
CPS layer before the CPS TIMER_CU expires, all ATM cells coming from the CPS 
layer will be filled. Under these conditions, PPP/AAL2 will have no PAD 
associated with it. When the AAL2 CPS function causes a PAD to be generated, 
PPP/AAL2 will be more bandwidth efficient than PPP/PPPMUX/AAL2.

In PPP/PPPMUX/AAL5, the AAL5 SAR and the PPP MUX/DEMUX are performed in two 
different layers. Thus, the PPPMUX/AAL5 receiver must reassemble a full AAL5 
frame from the ATM layer before the PPPMUX layer can extract the PPP 
payloads. To derive maximum PPP Multiplexing efficiency, many PPP payloads 
may be multiplexed together. This increases the size of the multiplexed 
frame to many ATM cells. If one of these ATM cells is lost, the whole PPPMUX 
packet will be discarded. Also, there may be a significant delay incurred 
while the AAL5 layer waits for many ATM cell arrival times until a full 
frame has been assembled before the full frame is passed up to the PPP 
Multiplexing layer where the inverse PPP demux then occurs. This same issue 
incurs for the PPPMUX/AAL5 frames progressing down the stack.

With AAL2, both the segmentation and reassembly and multiplexing functions 
are performed in the AAL2 CPS layer. Because of the definition of the AAL2 
CPS function, a multiplexed payload will be extracted as soon as it is 
received. The CPS receiver does not wait until the many payloads of an AAL2 
multiplexed frame are received before removing payloads from the multiplexed 
stream. The same benefit also applies to AAL2 CPS sender implementations. 
Also, the loss of an ATM cell causes the loss of the packets that are 
included in that cell only. 

The AAL2 CPS function provides multiplexing in AAL2. This function often 
needs to be implemented in hardware for performance reasons. Because of 
this, a PPP/AAL2 implementation that takes advantage of an AAL-2 SAR 
implemented in hardware will have significant performance benefits over a 
PPP/PPPMUX/AAL5 implementation where PPPMUX is implemented in software. 
Also, the AAL2 specification has been available significantly longer than 
the PPP Multiplexing specification and because of this, optimized software 
and hardware implementations of the AAL2 CPS function are further in 
development than PPP Multiplexing implementations.

3. Detailed Protocol Operation Description

3.1 Background

3.1.1 AAL2 Multiplexing

ITU-T I.363.2 specifies ATM Adaptation Layer Type 2.  This AAL type 
provides for bandwidth efficient transmission of low-rate, short and 
variable length packets in delay sensitive applications. More than one 
AAL type 2 user information stream can be supported on a single ATM 
connection.  There is only one definition for the sub-layer because it 
implements the interface to the ATM layer and is shared by more than 
one SSCS layer.

3.1.2 AAL2 Service Specific Convergence Sub-layers

ITU-T I.366.1 and I.366.2 define Service Specific Convergence Sub-layers 
(SSCS) that operate above the Common Part Sub-layer defined in I.363.2.  
This 
layer specifies packet formats and procedures to encode the different 
information streams in bandwidth efficient transport. As the name 
implies, this sub-layer implements those elements of service specific 
transport.  While there is only one definition of the Common Part Layer 
there can be more than one SSCS function defined to run over the CPS 
Layer.  Different CIDs within an AAL-2 virtual circuit MAY run different 
SSCSs.

This proposal uses the SSSAR sublayer of I.366.1 for transport.

3.1.4 AAL2 CPS-PKT Format 

The CPS-PKT format over AAL2 as defined in I.363.2:

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
|           +          +         +         +                          | 
|    CID    +    LI    +   UUI   +   HEC   +        CPS-INFO          | 
|           +          +         +         +                          | 
|           +          +         +         +                          | 
|    (8)    +    (6)   +   (5)   +   (5)   +       (45/64 * 8)        | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
      Note: The size of the fields denote bit-width


The Channel ID (CID) identifies the sub-stream within the AAL2 
connection. The Length indication (LI) indicates the length of the 
CPS-INFO payload. The User-to-User Indication (UUI) carries information 
between the SSCS/Application running above the CPS. The SSSAR sublayer as 
defined in I.366.1 uses the following code points:

UUI Code-point       Packet Content
++++++++++++++       ++++++++++++++

   0-26              Framed mode data, final packet.

27                Framed mode data, more to come.

This proposal uses UUI code-point 2 to indicate the final payload of a PPP 
packet using the short payload encapsulation. UUI code-point 3 is used to 
indicate the final payload of a PPP packet using the long payload 
encapsulation. UUI code-point 27 is used for payloads besides the final 
payload for both short and long payload encapsulations.

3.1.5 AAL2 CPS-PDU Format

The CPS-PDU format over AAL2 as defined in I.363.2:

                      +-+-+-+~+~+-+-+
                      +CPS+ CPS-INFO+
                      +PKT+         +
                      +HDR+         +
                      +-+-+-+~+~+-+-+
                      |             |

                      |             +-+-+-+~+~+-+-+
                                    +CPS+ CPS-INFO+
                      |             +PKT+         +
                                    +HDR+         +
                      |             +-+-+-+~+~+-+-+

                      |             |             +-+-+-+~+~+-+-+
                                                  +CPS+ CPS-INFO+
                      |             |             +PKT+         +
                                                  +HDR+         +
                      |             |             +-+-+-+~+~+-+-+

                      V             V             V             V
+-+-+-+-+-+-+-+~+~+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  Cell    +       +S+ +                                         |     +
  Header  +  OSF  + +P+             CPS-PDU Payload             | PAD +
          +  (6)  +N+ +                                         |     +
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+~+~+
        Note: The size of the fields denote bitwidth


The CPS-PDU format is used to carry one or more CPS-PKT's multiplexed 
on a single CPS-PDU. The offset field (OSF) carries the binary value of 
the offset, measured in number of octets, between the end of the STF 
and the first start of a CPS-Packet, or in the absence of a first 
start, to the start of the pad field. The SN bit is used to number (mod 
2) the CPS-PDUs.  The Parity(P) bit is set to 1 if the parity over the 
8 bit STF is odd.

3.2 PPP over AAL2 Encapsulation

PPP encapsulation over AAL2 uses the AAL2 CPS with no change.

PPP over AAL2 uses 2 encapsulations within the SSSAR sublayer of AAL2. PPP 
packets with long payloads use the SSSAR sublayer with a four byte CRC. PPP 
packets with short payloads will use the SSSAR sublayer with a two byte CRC.

This solution proposes the use of 2 I.366.1 sublayers for transporting short 
and long PPP frames over AAL2. PPP frames less than or equal to 256 bytes 
MAY be transported using the I.366.1 SSSAR sublayer with a two byte CRC. PPP 
frames greater than 256 bytes MUST be transported using the using the long 
payload encapsulation. Any PPP frames that do not use the short payload 
encapsulation MUST use the long payload encapsulation..

Some PPP encapsulated protocols such as RTP header compression require that 
the link layer provide packet error detection. Because of this, both the 
short and the long frame encapsulations of PPP over AAL2 provide packet 
error detection. Because the maximum frame length for the short and long 
frame encapsulations is different, each format requires a different CRC 
length.

The 2 encapsulations used for PPP over AAL2 are described below.

3.2.1 Short Payload Encapsulation

The short payload encapsulation mode MAY be used for PPP packets when the 
combined length of the PPP Protocol ID and information fields is less than 
or equal to 256 bytes.

The short payload encapsulation of PPP appends a two byte CRC to each PPP 
frame before using the SSSAR layer to send the PPP packet as a series of 
AAL2 frames. The CRC-16 field is computed using the polynomial x^16 + x^12 + 
x^5 + 1.

The format of a PPP over AAL2 packet using the short payload encapsulation 
format is shown in the diagram below. Note that the diagram below shows the 
short payload encapsulation when the packet is not segmented (UUI=26). When 
the PPP packet is segmented, the PPP Protocol ID, Information field, and 
CRC-16 fields will be split across multiple SSSAR frames. In this case, the 
UUI field will be set to 27 for all frames except the last frame. In the 
last frame, the UUI field will be set to 2.

Short Payload Encapsulation
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- 
|           +          +         +         +          +             +        | 
|    CID    +    LI    +   UUI   +   HEC   + Protocol +             +        | 
|           +          +         +         +    ID    + Information + CRC-16 | 
|           +          +         +         +          +             +        | 
|    (8)    +    (6)   +   (5)   +   (5)   +  (8/16)  +             +  (16)  | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- 
      Note: The size of the fields denote bit-width

The CRC-16 field is filled with the value of a CRC calculation which is 
performed over the contents of the PPP packet, including the PPP Payload ID 
and the information field. The CRC field shall contain the ones complement 
of the sum (modulo 2) of:
1) the remainder of x^k (x^15 + x^14 + ... + x + 1) divided (modulo 2) by 
the generator polynomial, where k is the number of bits of the information 
over which the CRC is calculated; and
2) the remainder of the division (modulo 2) by the generator polynomial of 
the product of x^16 by the information over which the CRC is calculated.

The CRC-16 generator polynomial is:
G(x) = x^16 + x^12 + x^5 + 1

The result of the CRC calculation is placed with the least significant bit 
right justified in the CRC field. As a typical implementation at the 
transmitter, the initial content of the register of the device computing the 
remainder of the division is preset to all "1"s and is then modified by 
division by the generator polynomial (as described above) on the information 
over which the CRC is to be calculated; the ones complement of the resulting 
remainder is put into the CRC field.

As a typical implementation at the receiver, the initial content of the 
register of the device computing the remainder of the division is preset to 
all "1"s. The final remainder, after multiplication by x^16 and then 
division (modulo 2) by the generator polynomial of the serial incoming PPP 
packet, will be (in the absence of errors):
C(x) = x^15 + x^14 + x^12 + x^11 + x^10 + x^8 + x^6 + x^5 + x^4 + x^3 + x + 
1

3.2.2 Long Payload Encapsulation

The long payload encapsulation mode MUST be used for PPP packets when the 
combined length of the PPP Protocol ID and information fields is greater 
than 256 bytes.

The long payload encapsulation of PPP appends a four byte CRC to each PPP 
frame before using the SSSAR layer to send the PPP packet as a series of 
AAL2 frames.

The format of a PPP over AAL2 packet using the long encapsulation format is 
shown in the diagram below. Note that the diagram below shows the long 
payload encapsulation when the packet is not segmented (UUI=3). When the PPP 
packet is segmented, the PPP Protocol ID, Information field, and CRC-32 
fields will be split across multiple SSSAR frames. In this case, the UUI 
field will be set to 27 for all frames except the last frame. In the last 
frame, the UUI field will be set to 3.

Long Payload Encapsulation
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- 
|           +          +         +         +          +             +        | 
|    CID    +    LI    +   UUI   +   HEC   + Protocol +             +        | 
|           +          +         +         +    ID    + Information + CRC-32 | 
|           +          +         +         +          +             +        | 
|    (8)    +    (6)   +   (5)   +   (5)   +  (8/16)  +             +  (32)  | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- 
      Note: The size of the fields denote bit-width

The CRC-32 field is filled with the value of a CRC calculation which is 
performed over the contents of the PPP packet, including the PPP Payload ID 
and the information field. The CRC field shall contain the ones complement 
of the sum (modulo 2) of:
1) the remainder of x^k (x^31 + x^30 + ... + x + 1) divided (modulo 2) by 
the generator polynomial, where k is the number of bits of the information 
over which the CRC is calculated; and
2) the remainder of the division (modulo 2) by the generator polynomial of 
the product of x^32 by the information over which the CRC is calculated.

The CRC-32 generator polynomial is:
G(x) = x^32 + x^26 + x^23 + x^22 + x^16 + x^12 + x^11 + x^10 + x^8 + x^7 + 
       x^5 + x^4 + x^2 + x + 1

The result of the CRC calculation is placed with the least significant bit 
right justified in the CRC field. As a typical implementation at the 
transmitter, the initial content of the register of the device computing the 
remainder of the division is preset to all "1"s and is then modified by 
division by the generator polynomial (as described above) on the information 
over which the CRC is to be calculated; the ones complement of the resulting 
remainder is put into the CRC field.

As a typical implementation at the receiver, the initial content of the 
register of the device computing the remainder of the division is preset to 
all "1"s. The final remainder, after multiplication by x^32 and then 
division (modulo 2) by the generator polynomial of the serial incoming PPP 
packet, will be (in the absence of errors):
C(x) = x^31 + x^30 + x^26 + x^25 + x^24 + x^18 + x^15 + x^14 + x^12 + x^11 +               
       x^10 + x^8 + x^6 + x^5 + x^4 + x^3 + x + 1

3.3 Use of AAL2 CPS-PKT CIDs

An implementation of PPP over AAL2 MAY use a single AAL2 Channel Identifier 
(CID) for transport of all PPP packets. To minimize delay for small packets, 
implementations of PPP over AAL2 SHOULD use at least 2 AAL2 CIDs. An 
implementation using 2 AAL2 CIDs SHOULD transport PPP packets less than or 
equal to 256 bytes on one AAL2 CID and PPP packets greater than 256 bytes on 
the other AAL2 CID. Implementations of PPP over AAL2 MAY use more than 2 
AAL2 CIDs for transport of PPP packets. The allocation of PPP packets to 
AAL2 CIDs for implementations supporting more than 2 AAL2 CIDs is 
implementation dependent.

In order for the endpoints of a PPP session to work with AAL2, they MUST 
both agree on the number, SSCS mapping,and values of AAL2 CIDs that will be 
used for a PPP session. The values of AAL2 CIDs to be used for a PPP session 
MAY be obtained from either static provisioning in the case of a dedicated 
AAL2 connection (PVC) or from Q.2630.1 [7] signaling in the case of an AAL2 
switched virtual ciruit (SPVC or SVC). Extensions to Q.2630.1 are required 
allow the specification of an application type in the Segmentation and 
Reassembly sublayers (SSSAR) field of the AAL type 2 signaling protocol 
parameters. The specification of this field can be found in sections 7.4.8 
and 7.4.9 of Q.2630.1.

Using this proposal it is possible to support the use of conventional AAL2 
in CIDs that are not used to support PPP over AAL2. There is nothing in this 
proposal to preclude the co-existence of multiple types of SSCS function 
within the same AAL2 VCC.

3.3 PPP over AAL2 Operation

PPP operation with AAL2 will perform basic PPP encapsulation with the PPP 
protocol ID. It MAY then perform a test on the resulting payload to 
determine whether the payload will be sent using the short payload 
encapsulation or the long payload encapsulation. Both payload encapsulations 
MUST use the SSSAR sublayer of AAL2 for transport. PPP frames less than or 
equal to 256 bytes MAY be encapsulated using the short payload 
encapsulation. PPP frames greater than 256 bytes MUST be encapsulated using 
the long payload encapsulation. Any PPP frames that do not use the short 
payload encapsulation MUST use the long payload encapsulation.

Applications implementing PPP over AAL2 MUST meet all the requirements of 
PPP [1].

4.0 Example implementation of PPP/AAL2

This section describes an example implementation of how PPP can be 
carried over AAL2 using the short and long payload encapsulations described 
in this document. The example shows 2 application stacks generating IP 
packets that are sent to the same interface running PPP/AAL2. One 
application stack is generating RTP packets and another application is 
generating IP Datagrams. The PPP/AAL2 interface shown in this example is 
running an RFC 2508 compliant version of RTP header compression.

Here are the paths an Application packet can take in this implementation:

    +---+---+---+---+--+                                        +
    |   Application A  |                                        |
    +---+---+---+---+--+                                        |
    |       RTP        |                                        |
    +---+---+---+---+--+       +---+---+---+---+---+       Application
    |       UDP        |       |   Application B   |            |
    +---+---+---+---+--+       +---+---+---+---+---+            |
    |        IP        |       |        IP         |            |
    +---+---+---+---+--+       +---+---+---+---+---+            +
            |                            |
            +---------------+------------+
                            |
                            |
                  +---+---+---+---+---+--+                      + 
                  |  Compression Filter  |                      |
                  +---+---+---+---+---+--+                      | 
                            |                                   |
                            |                                   |
                  +---------+-----------+                       |
                  |                     |                       |
     Compression  |                     | Non-Compression       |
      Interface   V                     |  Interface            |
    +---+---+---+---+---+---+           |                       |
    |            CRTP       |           |                       |
    +---+---+---+---+---+---+---+---+---+---+---+---+       Transport
    |                      PPP                      |           |
    +---+---+---+---+---+---+---+---+---+---+---+---+           |
                            |                                   |
                +---+---+---+---+---+--+                        |
                |     Length Filter    |                        |
                +---+---+---+---+---+--+                        |
                            |                                   |
          +-----------------+----------------------+            |
          |                                        |            |
    +---+---+---+---+---+---+---+ +--+---+---+---+---+--+--+-+  |
    |Short Encapsulation (SSSAR)| |Long Encapsulation (SSSAR)|  |
    +---+---+---+---+---+---+---+ +--+---+---+---+---+--+--+-+  |
                   |                          |                 |                                   
                   | CID 1                    | CID 2           |
                   |                          |                 |
    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+   |
    |                   AAL2 CPS                            |   |
    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+   |
    |                   ATM Layer                   |       |   |
    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+   +


In the picture above, application A is an RTP application generating RTP 
packets. Application B is an IP application generating IP datagrams. 
Application A gathers the RTP data and formats an RTP packet. Lower level 
layers of application A add UDP and IP headers to form a complete IP packet. 
Application B is generating datagrams to the IP layer. These datagrams have 
neither a UDP header or an RTP header.

In the above picture, a protocol stack is configured to apply CRTP/PPP/AAL2 
compression on an interface to a destination host. All packets that are sent 
to this interface will be tested to see if they can be compressed using RTP 
header compression. As packets appear at the interface, they will be tested 
by a compression filter to determine if they are candidates for header 
compression. If the compression filter determines that the packet is a 
candidate for compression, the packet will be sent to the CRTP compressor. 
If the packet is not a candidate for compression, it will be sent directly 
to the PPP layer for encapsulation as an IP packet encapsulated in PPP.

The destination UDP port number and packet length are examples of criteria 
that may be used by the compression filter to select the interface.

Packets from application A will be sent to the compression interface. The 
compression interface applies RFC 2508 compliant header compression and then 
hands the compressed packet to the PPP layer for encapsulation as one of the 
compressed header types of CRTP. The PPP layer will add the appropriate CRTP 
payload type for the compressed packet.

Packets from application B will be sent directly to the PPP layer for 
encapsulation as an IP/PPP packet. The PPP layer will add the PPP payload 
type for an IP packet encapsulated in PPP.

The PPP layer next checks the size of the result PPP packet. PPP packets 
less than or equal to 256 bytes will use the short payload encapsulation and 
I.366.1 segmentation with SSSAR. These packets will be sent using an AAL2 
CID allocated for short packets. PPP packets greater than 256 bytes will use 
the long payload encapsulation and I.366.1 segmentation with SSSAR. These 
packets will be sent using an AAL2 CID allocated for long packets.

The resulting AAL2 frame mode PDU is passed down as a CPS SDU to the CPS 
Layer for multiplexing accompanied by the CPS-UUI and the CPS-CID. The CPS 
Layer multiplexes the CPS-PKT onto a CPS-PDU. CPS-PDUs are passed to the ATM 
layer as ATM SDUs to be carried end-to-end across the ATM network.

At the receiving end, the ATM SDU's arrive and are passed up to the AAL2 
CPS. As the AAL2 CPS PDU is accumulated, complete CPS-PKT's are reassembled 
by the SSSAR SSCS. Reassembled packets are checked for errors using the CRC 
algorithm for short or long payloads depending on the UUI code-point used in 
the final frame in the SSSAR sequence.
  
At this point, the PPP layer on the receiving side uses the PPP payload type 
to deliver the packet to either the CRTP decompressor or the IP layer 
depending on the value of the PPP payload type.

4. Acknowledgements

The authors would like to thank Rajesh Kumar, Mike Mclaughlin and Pietro 
Schicker for their contributions to this proposal. 

5. References

   [1]   Simpson, W., Editor, "The Point-to-Point Protocol (PPP)", STD
         51, RFC 1661, July 1994.

   [2]   Gross, G., Editor, "PPP over AAL5", STD
         51, RFC 2364, July 1998.

       [3]   S. Casner, V. Jacobson, "Compressing IP/UDP/RTP Headers for
         Low-Speed Serial Links", RFC2508, February 1999.

   [4]   ITU-T, "BISDN ATM Adaptation layer specification:
         Type 2 AAL(AAL2)", September 1997.

   [5]   ITU-T, "Segmentation and Reassembly Service Specific Convergence                      
         Sublayer for the AAL type 2", June 1998.

     [6]   Bradner, S., "Key words for use in RFCs to Indicate Requirement
         Levels", BCP 14, RFC 2119, March 1997.

        [7]   ITU-T, "DRAFT NEW ITU-T RECOMMENDATION Q.2630.1", July 1999

   [8]    R. Pazhyannur, I. Ali, Craig Fox, "PPP Multiplexed Frame
          Option", draft-ietf-pppext-pppmux-00.txt, January 2000.

   [9]    H. Schulzrinne, S. Casner, R. Frederick, V. Jacobson, "RTP: A
          Transport Protocol for Real-Time Applications", RFC1889, January
          1996.

      



6. Authors' Addresses

   Bruce Thompson
   170 Tasman Drive
   Santa Clara, CA
   USA
   Phone: +1 408 527-0446
   Email: brucet@cisco.com

   Bruce Buffam
   365 March Road
   Kanata, Ontario, 
   Canada, K2K-2C9
   Phone: +1 613 271-3412
   Email: bbuffam@cisco.com 

   Tmima Koren
   170 Tasman Drive
   Santa Clara, CA
   USA
   Phone: +1 408 527-6169
   Email: tmima@cisco.com 


7.  Full Copyright Statement

   Copyright (C) The Internet Society (2000).  All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph
   are included on all such copies and derivative works. However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.





















