rounds = RoundsDerivation(password, bonus)

seed = SeedDerivation(rounds, username, password, salt)

master_key = KeyDerivation(seed, rounds, username, password, \
     salt)
password_key = KeyDerivation(master_key, rounds, username, \
     password, salt)

verification_token = TokenDerivation(password_key, username, \
     salt)
ephemeral_login_token = TokenDerivation(verification_token, \
     username, salt, nonce)

realm_key = RealmKeyDerivation(master_key, realm, salt)

vector_key = RealmVectorKeyExtraction(realm_key)
tag_key = RealmTagKeyExtraction(realm_key)
cipher_key = RealmCipherKeyExtraction(realm_key)


characters = len(password.decode("utf-8"))

dynamic = operator.sub(24, characters)

dynamic = max(1, dynamic)

variable = pow(2, dynamic)

total = operator.add(variable, bonus)

total = max(8, total)

total = min(pow(2, 24), total)

salt = SHA512.new(username).digest()

key = \
               SHA512.new(salt + struct.pack('>I', 0)[1:4]).digest() + \
               SHA512.new(salt + struct.pack('>I', 1)[1:4]).digest()
key = salt

hmac = HMAC(key, None, SHA512)

seed = hmac.digest()

count = 0
hashed = ""

hashed = SHA512.new(hashed + seed + username + salt + \
               password + struct.pack('>I', count)[1:4]).digest()
count = operator.add(count, 1)

count = 0
rounds = 8
hashed = ""

hashed = SHA512.new(hashed + seed + username + salt + \
               nonce + struct.pack('>I', count)[1:4]).digest()
count = operator.add(count, 1)

realm_hash = SHA512.new(master_key + label + salt).digest()
realm_key = str().join(chr(operator.xor(ord(a), ord(b))) \
         for a,b in zip(realm_hash, shard))

vector_key = realm_key[0:16]

tag_key = realm_key[16:32]

cipher_key = realm_key[32:64]

count = 0

vector_shard = get_random_bytes(16)

iv = str().join(chr(operator.xor(ord(a), ord(b))) \
           for a,b in zip(vector_key, vector_shard))

size = len(buffer)
pad = (16 - operator.mod(size + 4, 16))

count = operator.add(count, 1)

encryptor = Cipher(algorithms.AES(cipher_key), modes.GCM(iv), \
backend=default_backend()).encryptor()
ciphertext = encryptor.update(struct.pack(">I", size)[1:4] \
           + struct.pack(">I", pad)[3:4] + buffer) \
           + encryptor.finalize()

tag_shard = str().join(chr(operator.xor(ord(a), ord(b))) \
           for a,b in zip(tag_key, encryptor.tag))

count = 0

vector_shard = buffer[2:18]
tag_shard = buffer[18:34]
ciphertext = buffer[34:]

iv = str().join(chr(operator.xor(ord(a), ord(b))) \
           for a,b in zip(vector_key, vector_shard))

tag = str().join(chr(operator.xor(ord(a), ord(b))) \
           for a,b in zip(tag_key, tag_shard))

decryptor = Cipher(algorithms.AES(cipher_key), \
           modes.GCM(iv, tag), backend=default_backend()).decryptor()
plaintext = decryptor.update(ciphertext) + decryptor.finalize()

size = struct.unpack(">I", '\x00' + plaintext[0:3])[0]
pad = struct.unpack(">I", '\x00' + '\x00' + '\x00' + \
           plaintext[3:4])[0]

realm_hash = SHA512.new(new_master_key + label + new_salt).digest()
realm_shard = str().join(chr(operator.xor(ord(a), ord(b))) \
         for a,b in zip(realm_hash, realm_shard))

password = "password"
username = "user@example.tld"

bonus = 131072
salt = "lyrtpzN8cBRZvsiHX6y4j-pJOjIyJeuw5aVXzrItw1G4EOa-6CA4R" \
       "9BhVpinkeH0UeXyOeTisHR3Ik3yuOhxbWPyesMJvfp0IBtx0f0uorb8w" \
       "Pnhw5BxDJVCb1TOSE50PFKGBFMkc63Koa7vMDj-WEoDj2X0kkTtlW6cU" \
       "vF8i-M"
nonce = "oDdYAHOsiX7Nl2qTwT18onW0hZdeTO3ebxzZp6nXMTo__0_vr_" \
       "AsmAm3vYRwWtSCPJz0sA2o66uhNm6YenOGz0NkHcSAVgQhKdEBf_BT" \
       "YkyULDuw2fSkbO7mlnxEhxqrJEc27ZVam6ogYABfHZjgVUTAi_SICy" \
       "KAN7KOMuImL2g"

realm = "mail"
shard = "gD65Kdeda1hB2Q6gdZl0fetGg2viLXWG0vmKN4HxE3Jp3Z" \
       "0Gkt5prqSmcuY2o8t24iGSCOnFDpP71c3xl9SX9Q"

encrypted-data = "AADgUtNbxGHrQEI3hLFx6otzATOda5IeP7-a_wxJUEE" \
       "UXJ3xSwis3mph6D7iqTfJXwFQDN9gqVAdsxWw_zLC00jM"
rounds = 196608

seed = "5f-3mTGTSf-sFPfMkGqHTyydDjJU-cqahwDmHWyh6DLQ2oLBlz3ht" \
       "PTZS6V-TYVBiwJxuTYmQv3fCZN3Fb8brg"

master-key = "SDt67ZfTr8c1KO1Ym6BI69i7TQNNq5J2irym6gPQlEo0MGc" \
       "5x-b43bi1uXJDF4rhJJvfl9NFBQkDQ_X_2n66RA"
password-key = "lYmvC3qutKIb6QrnxnTi_WuJR_PSiyMZ0CdH18DAxHIgw" \
       "jj0_e4W6X8bKckKNGugWMMXmNgXDYb_7LlvtfN3HQ"
realm-key = "exoUw4lFSz_RU0uTSQTM22jEdjaP-rvjvrXMbhyqNPq8o9vL" \
       "Rg9pcuKaAj_JFzQenY13XGKwxPHKULrVjrCJKQ"

verification-token = "-Eu5mUcA7ko2BysV965hrf9bvMlh_S_iiI3tfMr" \
       "0Qc7hf4oPmBCdGOU9VCeQ1qBrga-WyR-rko5l0-feoWuuuA"
ephemeral-login-token = "8YEH_6kBdAdR5vlBaxs3KR3pZ429bEzF3AVF" \
       "hkA0P2WPt2h94omJq-d8NhX0rNLBESn2yTu_z0ugJcSVLyz5iQ"

tag-key = "aMR2No_6u-O-tcxuHKo0-g"
vector-key = "exoUw4lFSz_RU0uTSQTM2w"
cipher-key = "vKPby0YPaXLimgI_yRc0Hp2Nd1xisMTxylC61Y6wiSk"

decrypted-data = "Attack at dawn!"


