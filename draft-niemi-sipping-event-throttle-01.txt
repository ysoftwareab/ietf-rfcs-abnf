

Network Working Group                                           A. Niemi
Internet-Draft                                                     Nokia
Expires: January 17, 2005                                  July 19, 2004


     Session Initiation Protocol (SIP) Event Notification Throttles
                 draft-niemi-sipping-event-throttle-01

Status of this Memo

   By submitting this Internet-Draft, I certify that any applicable
   patent or other IPR claims of which I am aware have been disclosed,
   and any of which I become aware will be disclosed, in accordance with
   RFC 3668.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as
   Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on January 17, 2005.

Copyright Notice

   Copyright (C) The Internet Society (2004).  All Rights Reserved.

Abstract

   This memo specifies a throttle mechanism for limiting the rate of
   Session Initiation Protocol (SIP) event notifications.  This
   mechanism can be applied in subscriptions to all SIP event packages.










Niemi                   Expires January 17, 2005                [Page 1]

Internet-Draft               Event Throttle                    July 2004


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Definitions and Document Conventions . . . . . . . . . . . . .  3
   3.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . . .  3
     3.1   Use Case . . . . . . . . . . . . . . . . . . . . . . . . .  4
       3.1.1   Pre-conditions . . . . . . . . . . . . . . . . . . . .  4
       3.1.2   Normal Flow  . . . . . . . . . . . . . . . . . . . . .  4
       3.1.3   Alternative Flow I . . . . . . . . . . . . . . . . . .  4
       3.1.4   ALternative Flow II  . . . . . . . . . . . . . . . . .  5
       3.1.5   Post-conditions  . . . . . . . . . . . . . . . . . . .  5
     3.2   Requirements . . . . . . . . . . . . . . . . . . . . . . .  5
     3.3   Event Throttle Model . . . . . . . . . . . . . . . . . . .  6
     3.4   Basic Operation  . . . . . . . . . . . . . . . . . . . . .  7
   4.  Operation of Event Throttles . . . . . . . . . . . . . . . . .  8
     4.1   Negotiating the Use of Throttle  . . . . . . . . . . . . .  8
     4.2   Setting the Throttle . . . . . . . . . . . . . . . . . . .  8
       4.2.1   Subscriber Behavior  . . . . . . . . . . . . . . . . .  8
       4.2.2   Notifier Behavior  . . . . . . . . . . . . . . . . . .  9
     4.3   Selecting the Throttle Interval  . . . . . . . . . . . . .  9
   5.  Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . .  9
     5.1   "event-throttle" SIP Option Tag  . . . . . . . . . . . . . 10
     5.2   "throttle" Header Parameter  . . . . . . . . . . . . . . . 10
     5.3   Augmented BNF Definitions  . . . . . . . . . . . . . . . . 10
   6.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 10
   7.  Security Considerations  . . . . . . . . . . . . . . . . . . . 10
   8.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 10
   9.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 10
   9.1   Normative References . . . . . . . . . . . . . . . . . . . . 10
   9.2   Informative References . . . . . . . . . . . . . . . . . . . 11
       Author's Address . . . . . . . . . . . . . . . . . . . . . . . 11
       Intellectual Property and Copyright Statements . . . . . . . . 12



















Niemi                   Expires January 17, 2005                [Page 2]

Internet-Draft               Event Throttle                    July 2004


1.  Introduction

   The SIP events framework [1] defines a generic framework for
   subscriptions to and notifications of events related to SIP systems.
   This framework defines the methods SUBSCRIBE and NOTIFY, and
   introduces the concept of an event package, which is a concrete
   application of the SIP events framework to a particular class of
   events.

   One of the things the SIP events framework mandates is that each
   event package specification defines an absolute maximum on the rate
   at which notifications are allowed to be generated by a single
   notifier.  Such a limit is provided in order to reduce network
   congestion.

   All of the existing event package specifications include a maximum
   notification rate recommendation, ranging from once in every five
   seconds [4], [5], [6] to once per second [7].

   Per the SIP events framework, each event package specification is
   also allowed to define additional throttle mechanisms which allow the
   subscriber to further limit the rate of event notification.  So far
   none of the event package specifications have defined such a
   mechanism.

   This document defines an extension to the SIP events framework that
   allows a subscriber to set a throttle to event notifications
   generated by the notifier.  The requirements and model for generic
   event throttles are further discussed in Section 3.  A throttle is
   simply a timer value that indicates the minimum time period allowed
   between two notifications.  As a result of this throttle, a compliant
   notifier will limit the rate at which it generates notifications.

2.  Definitions and Document Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [2] and
   indicate requirement levels for compliant implementations.

      Indented passages such as this one are used in this document to
      provide additional information and clarifying text.  They do not
      contain normative protocol behavior.


3.  Overview





Niemi                   Expires January 17, 2005                [Page 3]

Internet-Draft               Event Throttle                    July 2004


3.1  Use Case

   There are many applications that potentially would make use of a
   throttle mechanism.  This chapter only illustrates one possible use
   case, in which a device uses the event throttling mechanism to limit
   the amount of traffic it may receive.

3.1.1  Pre-conditions

   A presence application in Lisa's device contains a list of 100
   presentities.  In order to decrease the processing and network load
   of watching 100 presentities, Lisa's presence application has
   included an event throttle to each of the subscriptions, to limit the
   maximum rate at which notifications are to be generated to once per
   20 seconds.

   Heikki is one of the presentities Lisa is watching.  Heikki's
   presence agent conforms to the throttling policy requested by Lisa's
   presence application.  The event package includes only full-state
   notifications.

3.1.2  Normal Flow

   o  Heikki publishes a presence status of "red", which results in a
      presence notification to be sent to Lisa.

   o  In 10 seconds, Heikki publishes a presence status of "blue".  As
      the throttling policy set by Lisa only allows the presence agent
      to generate notifications at a maximum of once per 20 seconds, the
      notification is put on hold.

   o  After another 10 seconds, the notification is allowed to be sent
      to Lisa.

   o  Lisa receives a presence update conforming to the set throttling
      policy.


3.1.3  Alternative Flow I

   o  Heikki publishes a presence status of "red", which results in a
      presence notification to be sent to Lisa.

   o  In 10 seconds, Heikki publishes a presence status of "blue".  As
      the throttling policy set by Lisa only allows the presence agent
      to generate notifications at a maximum rate of once per 20
      seconds, the notification is put on hold.




Niemi                   Expires January 17, 2005                [Page 4]

Internet-Draft               Event Throttle                    July 2004


   o  After another 5 seconds, Heikki publishes a presence status of
      "green".  The resulting notification is not conformant to the
      throttling policy set by Lisa and is therefore put on hold,
      replacing the earlier queued notification (the one containing the
      status of "blue").

   o  Lisa receives a presence update conforming to the set throttling
      policy and containing the "green" status.


3.1.4  ALternative Flow II

   Instead of full state, the notifications now contain partial-state.

   o  Heikki publishes a presence status of "red", which results in a
      presence notification to be sent to Lisa.

   o  In 10 seconds, Heikki publishes a changed presence status of
      "blue".  As the throttling policy set by Lisa only allows the
      presence agent to generate notifications at a maximum rate of once
      per 20 seconds, the notification is put on hold.

   o  After another 5 seconds, Heikki publishes an additional presence
      status of "bitter".  The resulting notification is not conformant
      to the throttling policy set by Lisa and is therefore put on hold.
      Since there already exists a queued notification (that of the
      "blue" status"), the notifier merges the two notifications into a
      single notification (containing both "blue" and "bitter"
      statuses).

   o  Lisa receives a presence update conforming to the set throttling
      policy and containing the "blue" and "bitter" status.


3.1.5  Post-conditions

   Lisa receives notifications of Heikki's presence at a maximum of once
   per 20 seconds.  Only newest notifications containing full-state are
   ever sent to Lisa.  With partial-notifications, the notifier merges
   the states of all notifications generated within a single 20 second
   period.

3.2  Requirements

   REQ1: The subscriber MUST be able to set using a throttle mechanism
         the minimum time period between two notifications in a specific
         subscription.




Niemi                   Expires January 17, 2005                [Page 5]

Internet-Draft               Event Throttle                    July 2004


   REQ2: The subscriber MUST be able to indicate that it requires the
         notifier to comply with the suggested throttling policy in a
         specific subscription.

   REQ3: The notifier MUST be able to indicate that it does not support
         the use of a throttle mechanism in the subscription.

   REQ4: It MUST be possible to use the throttle mechanism in
         subscriptions to all events.

   REQ5: It MUST be possible to use the throttle mechanism together with
         any event filtering mechanism.

   REQ6: The notifier MUST be allowed to use a throttling policy in
         which the minimum time period between two notifications is
         longer than the one given by the subscriber.

            For example, due to congestion reasons, local policy at the
            notifier could temporarily dictate a throttling policy that
            in effect increases the subscriber-configured minimum time
            period between two notifications.

   REQ7: The throttle mechanism MUST provide a reasonable resolution for
         setting the minimum period between two notifications.  At a
         minimum, the throttling mechanism MUST include discussion of
         the situation resulting from a minimum time period which
         exceeds the subscription duration, and SHOULD provide
         mechanisms for avoiding this situation.

   REQ8: A throttle mechanism MUST allow for the application of
         authentication and integrity protection mechanisms to
         subscriptions invoking that mechanism.

      Note that Section 7 contains further discussion on the security
      implications of the throttle mechanism.


3.3  Event Throttle Model

   Using notations from traffic theory, we can model the notifier as a
   statistical multiplexer with an input rate of Ci (i = 1,...,n), and
   an output rate of C <= C1 + ...  + Cn.  Typically, the statistical
   multiplexer is lossy, with a finite buffer size.  The loss
   probability of the statistical multiplexer can be decreased by
   enlarging this buffer.  Figure 1 illustrates the model.






Niemi                   Expires January 17, 2005                [Page 6]

Internet-Draft               Event Throttle                    July 2004


                      C1 |\
              1 ---------|  \
                ---------|    \        C
                ---------| ||||O---------- 1
                ---------|    /
              n ---------|  /
                      Cn |/


        Figure 1: Notifier modeled as a statistical multiplexer

   The output connection has a default rate that is generally dictated
   by each individual event package.  The rate can also be set using the
   throttle mechanism described in this document.  A notifer that
   accepts a subscriber-defined throttle, adjusts its output rate
   accordingly.

   There is typically only a single input connection, characterized by
   the event package, and consisting of a stream of event notifications.
   In general, applying a throttle MUST NOT alter the properties of the
   buffer.  I.e., the event notifications are expected to deliver
   consistent information even when throttled.

   In practice, there are only two viable buffer policies for SIP event
   notifiers:

   Full-state:  Last one in is sent out, and all others in the buffer
      are discarded.  This policy applies to those event packages that
      carry full-state notifications.

   Partial-state:  The states of buffered notifications are merged, and
      the resulting notification is sent out.  This policy applies to
      those event packages that carry partial-state notifications.


3.4  Basic Operation

   A subscriber that wants to limit the rate of event notification in a
   specific subscription does so by suggesting a throttle as part of the
   SUBSCRIBE message.  The throttle indicating the minimum time allowed
   between two notifications in a subscription is given as an Event
   header parameter in the SUBSCRIBE request.

   The subscriber also indicates that it requires the throttle to be
   applied to the subscription.  This is done using the SIP option-tag
   mechanism, by insisting that the notifier applies the event throttle
   extension when processing the request.  A notifier that does not
   support the event throttle extension will reject the subscription.



Niemi                   Expires January 17, 2005                [Page 7]

Internet-Draft               Event Throttle                    July 2004


   A notifier that supports the throttle mechanism will comply with
   value given in the throttle, and adjust its rate of notification
   accordingly.

   Throttled notifications will have exactly the same properties as the
   un-throttled ones, with the exception that they will not be generated
   more frequent than what the throttle allows.

4.  Operation of Event Throttles

4.1  Negotiating the Use of Throttle

   This specification uses the SIP option-tag mechanism for negotiating
   use of the throttle mechanism.  Use of the "Require" header field and
   the 420 (Bad Extension) are according to SIP [3].

   A subscriber that wishes to apply a throttle to notifications in a
   subscription insists that the notifier applies this throttle by
   including an "event-throttle" option-tag to the Require header field
   of the SUBSCRIBE request.

   A notifier that does not understand the event-throttle extension,
   will respond with a 420 (Bad Extension) response.  Otherwise, the
   throttle is processed by the notifier, and the notification rate is
   adjusted accordingly.

4.2  Setting the Throttle

4.2.1  Subscriber Behavior

   In general, the way in which a subscriber generates SUBSCRIBE
   requests and processes NOTIFY requests is according to RFC 3265 [1].

   A subscriber that wishes to throttle the notifications in a
   subscription includes a "throttle" Event header parameter in the
   SUBSCRIBE request, indicating in seconds the throttle value.  The
   value of this parameter is an integral number of seconds in decimal.

   In case the notifier does not support the "event-throttle" extension,
   the subscriber SHOULD retry the subscription without that extension.

      In this case the subscriber can resort to other means of limiting
      the notification rate.  For example, instead of a subscription, it
      can fetch or poll the event state.







Niemi                   Expires January 17, 2005                [Page 8]

Internet-Draft               Event Throttle                    July 2004


4.2.2  Notifier Behavior

   In general, the way in which a notifier processes SUBSCRIBE requests
   and generates NOTIFY requests is according to RFC 3265 [1].

   A notifier that supports the "event-throttle" extension extracts the
   value of the "throttle" Event header parameter, and uses it as the
   minimum time allowed between two notifications.

   A notifier MUST include the selected throttle value in a "throttle"
   parameter to the Subscription-State header field of the NOTIFY
   requests sent to the subscriber.

   A compliant notifier MUST NOT generate notifications more frequent
   than what the throttle allows for, except when generating the
   notification either upon receipt of a SUBSCRIBE request (the first
   notification) or upon termination of the subscription (the last
   notification).

   As specified in RFC 3261 [3] a notifier that supports event throttles
   SHOULD advertise its support by including the "event-throttle"
   option-tag in the Supported header field of a response to an OPTIONS
   request.

4.3  Selecting the Throttle Interval

   Special care needs to be taken when selecting the throttle value.
   Using the throttle syntax it is possible to insist both very short
   and very long throttles to be applied to the subscription.  For
   example, a throttle could potentially set a minimum time value
   between notifications that exceeds the subscription expiration value.
   Such a configuration would effectively quench the notifier, resulting
   in exactly two notifications to be generated.

      OPEN ISSUE: Should we give recommendations to reasonable throttle
      resolutions, or define what behavior to exhibit if an unreasonable
      throttle value is given to the notifier?


5.  Syntax

   This section describes the syntax extensions required for watcherinfo
   history.  Note that the formal syntax definitions described in this
   section are expressed in the Augmented BNF format used in SIP [3],
   and contain references to elements defined therein.






Niemi                   Expires January 17, 2005                [Page 9]

Internet-Draft               Event Throttle                    July 2004


5.1  "event-throttle" SIP Option Tag

   The "event-throttle" SIP option-tag is added to the "option-tag"
   definition in the SIP grammar.  Usage of this option-tag is defined
   in Section 4.1.

5.2  "throttle" Header Parameter

   The "throttle" header parameter is added to the "generic-param"
   definition in the SIP grammar.  Usage of this Event header parameter
   is described in section Section 4.2.

5.3  Augmented BNF Definitions

   This section describes the Augmented BNF definitions for the new
   syntax element.  The notation is as used in SIP [3] and the documents
   to which is refers.

      generic-param  =  throttle-param / token [ EQUAL gen-value ]
      throttle-param =  "throttle" EQUAL delta-seconds
      option-tag     =  throttle-tag / token
      throttle-tag   =  "event-throttle"


6.  IANA Considerations

   TBD: New SIP option tag (event-throttle), and possibly new header
   parameter (throttle) need to be registered with IANA.

7.  Security Considerations

   Naturally, the security considerations listed in SIP events [1],
   which the throttle mechanism extends, apply in entirety.  In
   particular, authentication and message integrity SHOULD be applied to
   subscriptions with the event-throttle extension.

8.  Acknowledgements

   Thanks to Pekka Pessi, Dean Willis, Eric Burger, Alex Audu ,
   Alexander Milinski, and the SIPPING WG for support and review of this
   work.

9.  References

9.1  Normative References

   [1]  Roach, A., "Session Initiation Protocol (SIP)-Specific Event
        Notification", RFC 3265, June 2002.



Niemi                   Expires January 17, 2005               [Page 10]

Internet-Draft               Event Throttle                    July 2004


   [2]  Bradner, S., "Key words for use in RFCs to Indicate Requirement
        Levels", BCP 14, RFC 2119, March 1997.

   [3]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,
        Peterson, J., Sparks, R., Handley, M. and E. Schooler, "SIP:
        Session Initiation Protocol", RFC 3261, June 2002.

9.2  Informative References

   [4]  Rosenberg, J., "A Presence Event Package for the Session
        Initiation Protocol (SIP)", draft-ietf-simple-presence-10 (work
        in progress), January 2003.

   [5]  Rosenberg, J., "A Session Initiation Protocol (SIP) Event
        Package for Registrations", draft-ietf-sipping-reg-event-00
        (work in progress), October 2002.

   [6]  Rosenberg, J., "A Watcher Information Event Template-Package for
        the Session Initiation  Protocol (SIP)",
        draft-ietf-simple-winfo-package-05 (work in progress), January
        2003.

   [7]  Mahy, R., "A Message Summary and Message Waiting Indication
        Event Package for the  Session Initiation Protocol (SIP)",
        draft-ietf-sipping-mwi-04 (work in progress), December 2003.


Author's Address

   Aki Niemi
   Nokia
   P.O. Box 100
   NOKIA GROUP, FIN  00045
   Finland

   Phone: +358 50 389 1644
   EMail: aki.niemi@nokia.com














Niemi                   Expires January 17, 2005               [Page 11]

Internet-Draft               Event Throttle                    July 2004


Intellectual Property Statement

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.


Disclaimer of Validity

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Copyright Statement

   Copyright (C) The Internet Society (2004).  This document is subject
   to the rights, licenses and restrictions contained in BCP 78, and
   except as set forth therein, the authors retain all their rights.


Acknowledgment

   Funding for the RFC Editor function is currently provided by the
   Internet Society.




Niemi                   Expires January 17, 2005               [Page 12]


