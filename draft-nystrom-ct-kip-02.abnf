dsLen = (desired length of K_TOKEN)
K_TOKEN = CT-KIP-PRF (R_C, "Key generation" || k || R_S, dsLen)

dsLen = len(R_C)

DS = CT-KIP-PRF(K_SHARED, "Encryption" || R_S, dsLen)

Enc-R_C = DS ^ R_C

use="required"/>
type="TokenPlatformInfoType" minOccurs="0"/
minOccurs="0"/>
type="InitializationTriggerType"/>
type="xs:base64Binary" minOccurs="0"/>
type="xs:base64Binary" minOccurs="0"/>
type="NonceType" minOccurs="0"/>
type="NonceType" minOccurs="0"/>
type="AlgorithmsType"/>
type="AlgorithmsType"/>
type="AlgorithmsType"/>
type="ExtensionsType" minOccurs="0"/>
type="AlgorithmType"/>
type="AlgorithmType"/>
type="AlgorithmType"/>
type="ds:KeyInfoType"/>
type="PayloadType>
type="ExtensionsType" minOccurs="0"/>
minOccurs="0"/>
dsLen = len(R_S)

MAC = CT-KIP-PRF (K_AUTH, "MAC 1 computation" || [R ||] R_S,
type="xs:base64Binary"/>
type="ExtensionsType" minOccurs="0"/>
use="required"/>
type="xs:base64Binary"/>
type="xs:base64Binary"/>
type="xs:dateTime" minOccurs="0"/>
type="IdentifierType" minOccurs="0"/>
type="LogoType" minOccurs="0"/>
type="IdentifierType" minOccurs="0"/>
type="ExtensionsType" minOccurs="0"/>
type="MacType"/>
dsLen = len(R_C)

MAC = CT-KIP-PRF (K_AUTH, "MAC 2 computation" || R_C, dsLen)

type="xs:base64Binary"/>
type="xs:base64Binary"/>
type="OTPFormatType"/>
type="xs:positiveInteger"/>
type="OTPModeType" minOccurs="0"/>
targetNamespace=
xmlns=
schemaLocation=
use="required"/>
type="xs:anyURI"/>
minOccurs="0"/>
minOccurs="0"/>
type="InitializationTriggerType"/>
minOccurs="0"/>
minOccurs="0"/>
minOccurs="0"/>
minOccurs="0"/>
type="AlgorithmsType"/>
type="AlgorithmsType"/>
minOccurs="0"/>
minOccurs="0"/>
minOccurs="0"/>
use="required"/>
minOccurs="0"/>
minOccurs="0"/>
minOccurs="0"/>
minOccurs="0"/>
minOccurs="0"/>
xmlns=
Version="1.0">
xmlns=
Version="1.0">
xmlns=
Version="1.0" SessionID="4114" Status="Success">
xmlns="http://www.rsasecurity.com/rsalabs/otps/schemas/
Version="1.0" SessionID="4114">
xmlns="http://www.rsasecurity.com/rsalabs/otps/schemas/
Version="1.0" SessionID="4114" Status="Success">
bLen = (AES output block length in octets)

n = ROUND( dsLen / bLen )

j = dsLen - (n - 1) * bLen

B1 = F (k, s, 1) ,

B2 = F (k, s, 2) ,

Bn = F (k, s, n)

DS = B1 || B2 || ... || Bn<0..j-1>

n = 16 / 16 = 1

j = 16 - (1 - 1) * 16 = 16

DS = B1 = F (k, s, 1) = OMAC1-AES (k, INT (1) || S)
bLen = 32

n = ROUND ( dsLen / bLen )

j = dsLen - (n - 1) * bLen
B1 = F (k, s, 1) ,

B2 = F (k, s, 2) ,

Bn = F (k, s, n)

DS = B1 || B2 || ... || Bn<0..j-1>

n = ROUND ( 16 / 32 ) = 1

j = 16 - (1 - 1) * 32 = 16

B1 = F (k, s, 1) = HMAC-SHA256 (k, INT (1) || s )

DS = B1<0 ... 15>

