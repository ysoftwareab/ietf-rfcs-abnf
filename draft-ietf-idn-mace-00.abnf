MODE = `Non-Literal'
SUBMODE = `BMP-A'
PREV = U+0000

C = read_one_character(INPUT)
MODE = `Literal'
	       endif
	       output(C)
MODE = `Non-Literal'
	       endif

	       if (compressible(SUBMODE, C, PREV, INPUT) == TRUE)
NEW_SUBMODE = `Compress'
V = xor(codepoint(PREV), codepoint(C))
V = V + 0x200
LEN = 2
LEN = 1
V = codepoint(C)
NEW_SUBMODE = `BMP-A'


                      Expires December 21th, 2001              [Page  7]
LEN = 3
NEW_SUBMODE = `BMP-A'
V = V - 0x8000
LEN = 3
NEW_SUBMODE = `BMP-B'
V = V - 0x2000
LEN = 3
NEW_SUBMODE == `Non-BMP'
V = V - 0x10000
LEN = 4
SUBMODE = NEW_SUBMODE
	       endif
	       output(base32_encode(V, LEN))
PREV = C
MODE = `Non-Literal'
SUBMODE = `BMP-A'
PREV = U+0000

C = read_one_character(INPUT)
NXT = read_one_character(INPUT)
MODE = `Non-Literal'
MODE = `Literal'
SUBMODE = <corresponding submode>
S = read_string_of_length(INPUT, 3)
V = base32_decode(S)
V = V + 0x8000
S = read_string_of_length(INPUT, 3)
V = base32_decode(S) + 0x2000
	       else if (SUBMODE == `Non-BMP')
S = read_string_of_length(INPUT, 4)
V = base32_decode(S) + 0x10000
	       else if (SUBMODE == `Compress')
	           if (<C is either 0-9, a-f or A-F>)
S = read_string_of_length(INPUT, 1)
V = base32_decode(S)
S = read_string_of_length(INPUT, 2)
V = base32_decode(S) - 0x200
V = PREV xor V
	       endif
	       output(character(V))
PREV = character(V)
