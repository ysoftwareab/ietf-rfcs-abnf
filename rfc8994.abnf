acp-node-name = local-part "@" acp-domain-name
local-part = [ acp-address ] [ "+" rsub extensions ]
acp-address = 32HEXDIG / "0" ; HEXDIG as of [RFC5234], Appendix B.1
rsub = [ <subdomain> ] ; <subdomain> as of [RFC1034], Section 3.5
acp-domain-name = <domain> ; as of [RFC1034], Section 3.5
extensions = *( "+" extension )
extension  = 1*etext  ; future standard definition.
etext      = ALPHA / DIGIT /  ; Printable US-ASCII
                  "!" / "#" / "$" / "%" / "&" / "'" /
                  "*" / "-" / "/" / "=" / "?" / "^" /
                  "_" / "`" / "{" / "|" / "}" / "~"

routing-subdomain = [ rsub "." ] acp-domain-name

                        Figure 2: ACP Node Name ABNF

acp-node-name      = fd89b714f3db00000200000064000000
                          +area51.research@acp.example.com
acp-domain-name    = acp.example.com
routing-subdomain  = area51.research.acp.example.com

flood-message = [M_FLOOD, session-id, initiator, ttl,
                    +[objective, (locator-option / [])]]
                                ; See example above and explanation
                                ; below for initiator and ttl.

objective = ["SRV.est", objective-flags, loop-count,
                                          objective-value]

objective-flags = sync-only  ; As in [RFC8990].
sync-only       = 4          ; M_FLOOD only requires synchronization.
loop-count      = 255        ; Recommended as there is no mechanism
                                ; to discover network diameter.
objective-value = any        ; Reserved for future extensions.

                    Figure 5: GRASP "SRV.est" Definition

flood-message = [M_FLOOD, session-id, initiator, ttl,
                      +[objective, (locator-option / [])]]

objective = ["AN_ACP", objective-flags, loop-count,
                                            objective-value]

objective-flags = sync-only ; as in [RFC8990]
sync-only =  4    ; M_FLOOD only requires synchronization
loop-count = 1    ; limit to link-local operation

objective-value = method-name / [ method, *extension ]
method = method-name / [ method-name, *method-param ]
method-name = "IKEv2" / "DTLS" / id
extension = any
method-param = any
id = text .regexp "[A-Za-z@_$]([-.]*[A-Za-z0-9@_$])*"

                    Figure 7: GRASP "AN_ACP" Definition

TSi = (0, 0-65535, :: - FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)
TSr = (0, 0-65535, :: - FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)

TSi = (47, 0-65535, Initiator-IPv6-LL-addr ... Initiator-IPv6-LL-addr)
TSr = (47, 0-65535, Responder-IPv6-LL-addr ... Responder-IPv6-LL-addr)

   If the IKEv2 initiator and responder support IPsec over GRE, it will
   be preferred over native IPsec because of how IKEv2 negotiates
   transport mode (as used by this IPsec over GRE profile) versus tunnel
   mode as used by native IPsec (see Section 1.3.1 of [RFC7296]).  The
   ACP IPv6 traffic has to be carried across GRE according to "IPv6
   Support for Generic Routing Encapsulation (GRE)" [RFC7676].

V=1 is the host with preexisting transport endpoints on it that could
connection = method "," local-addr "," remote-addr [ "," pmtu ]
method =    "any"
                / ( "IKEv2" [ ":" port ] )
                / (  "DTLS"  [ ":"  port ] )
port = 1*DIGIT
local-addr  = [ address  [ ":" vrf  ] ]
remote-addr =   address
address =  "any"
                / IPv4address / IPv6address  ; From [RFC5954]
vrf = system-dependent ; Name of VRF for local-address

               Figure 16: Parameters for Remote ACP Neighbors

