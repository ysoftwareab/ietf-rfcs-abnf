TRUE   == 1
FALSE  == 0


TRUE                == 1
FALSE               == 0

NO_ERROR            == 0
NOT_SET             == 1
HALTED              == 2
LIFETIME_EXCEEDED   == 3
NO_RESOURCES_LEFT   == 4
LANGUAGE_ERROR      == 5
RUNTIME_ERROR       == 6
INVALID_ARGUMENT    == 7
SECURITY_VIOLATION  == 8
GENERIC_ERROR       == 9
TRIGGER_OVERFLOW    == 10

ctl_index = rmon_control_index(
          "", _TARGET_CONTEXT_NAME, 0, "",
          hlMatrixControlEntry, if_index, 1);
nl_pdir_index = rmon_pdir_index_by_name(
         "", _TARGET_CONTEXT_NAME, 0, "", "wild-ether2.ip");
al_pdir_index = rmon_pdir_index_by_name(
          "", _TARGET_CONTEXT_NAME, 0, "", "wild-ether2.ip.tcp.http");
pkts_oid = alMatrixSDEntry.2.ctl_index.0;
octets_oid = alMatrixSDEntry.3.ctl_index.0;
rev_pkts_oid = alMatrixSDEntry.2.ctl_index.0;
rev_octets_oid = alMatrixSDEntry.3.ctl_index.0;
T0 = trigger event occurs. For synchronous tasks,
        this represents the desired polling interval.
        For asynchronous tasks, this represents the
        time the actual trigger event took place.
T1 = agent detects that the trigger event occurred;
        _TRIGGER_SYS_UPTIME = _TRIGGER_TIME_OF_DAY = T1
T2 = script execution starts
T3 = script execution completes
T4 = trigger frame cleanup completes

a = for asynchronous tasks, the  internal trigger event
        discovery latency. For synchronous tasks, the
        value of T1 should be equal to T0.
b = internal script invocation latency and startup
c = script invocation lifetime, must not
        exceed seeTaskControlLifetime
d = internal script termination and cleanup
e = entire trigger frame, For synchronous tasks,
        this should not exceed seeTaskControlTriggerInt

sysUpTime                  = "1.3.6.1.2.1.1.3"
ifIndex                    = "1.3.6.1.2.1.2.2.1.1"
ifInOctets                 = "1.3.6.1.2.1.2.2.1.10"
ifInUcastPkts              = "1.3.6.1.2.1.2.2.1.11"
ifInDiscards               = "1.3.6.1.2.1.2.2.1.13"
ifInErrors                 = "1.3.6.1.2.1.2.2.1.14"
ifInUnknownProtos          = "1.3.6.1.2.1.2.2.1.15"
ifOutOctets                = "1.3.6.1.2.1.2.2.1.16"
ifOutUcastPkts             = "1.3.6.1.2.1.2.2.1.17"
ifOutDiscards              = "1.3.6.1.2.1.2.2.1.19"
ifOutErrors                = "1.3.6.1.2.1.2.2.1.20"
ifInMulticastPkts          = "1.3.6.1.2.1.31.1.1.1.2"
ifInBroadcastPkts          = "1.3.6.1.2.1.31.1.1.1.3"
ifOutMulticastPkts         = "1.3.6.1.2.1.31.1.1.1.4"
ifOutBroadcastPkts         = "1.3.6.1.2.1.31.1.1.1.5"
ifHCInOctets               = "1.3.6.1.2.1.31.1.1.1.6"
ifHCInUcastPkts            = "1.3.6.1.2.1.31.1.1.1.7"
ifHCInMulticastPkts        = "1.3.6.1.2.1.31.1.1.1.8"
ifHCInBroadcastPkts        = "1.3.6.1.2.1.31.1.1.1.9"
ifHCOutOctets              = "1.3.6.1.2.1.31.1.1.1.10"
ifHCOutUcastPkts           = "1.3.6.1.2.1.31.1.1.1.11"
ifHCOutMulticastPkts       = "1.3.6.1.2.1.31.1.1.1.12"
ifHCOutBroadcastPkts       = "1.3.6.1.2.1.31.1.1.1.13"
ifCounterDiscontinuityTime = "1.3.6.1.2.1.31.1.1.1.19"

seeTaskControlDescr = "IF-MIB counters example"
seeTaskControlAppProfile = 'appNotifyFilter(4)'
seeTaskControlExecPermissions = { getPDUs(4) }
seeTaskControlGroupId = 100
seeTaskControlRunMode = 'normalRunMode(1)'
seeTaskControlStartFn = "linkUp_main"
seeTaskControlLifetime = 5
seeTaskControlEngineId = ""
seeTaskControlContextName = ""
seeTaskControlTriggerOid = "1.3.6.1.6.3.1.1.5.4"
seeTaskControlTriggerInt = 0
seeTaskControlTriggerOvflAct = 'queueTrigger(3)'
seeTaskControlScratchpadSize = 0
seeTaskControlResultType = "Null"
seeTaskControlLogWriteMode = 'WrapWhenFull(2)'
seeTaskControlMaxLogSize = 1000000
seeTaskControlMaxLogChunkSize = 1000
seeTaskControlStorageType = 'nonVolatile(3)'

res = snmp_get("", "", 0, "", vb_count, vb_oid,
         err_idx, any_null, vb_type, vb_val);
res = str2int(_TRIGGER_NOTIF_VB_CNT, "Integer32", vb_cnt);
done = FALSE;
res = str2oid(_TRIGGER_NOTIF_VB_OID[i], vb);
if_index = vb[oidlen(vb)-1];
done = TRUE;
res = add_varbinds(9, vb_oid);
res = add_varbinds(5, vb_oid);
res = add_varbinds(2, vb_oid);
res = add_varbinds(4, vb_oid);
res = add_varbinds(6, vb_oid);
FALSE == all compared bits were the same
TRUE == not all compared bits were the same."

target_engine    = zero-length string
target_addr_type = 'unknown(0)'
target_addr      = zero-length string   "

target_addr_type = 'unknown(0)'
target_addr      = zero-length string   "
