K = MD4(UNICODE(password)) 
         
T = 1 for TS-ENC-TS in the AS-Request 
T = 8 for the AS-Reply  
T = 7 for the Authenticator in the TGS-Request 
T = 8 for the TGS-Reply  
T = 2 for the Server Ticket in the AP-Request 
T = 11 for the Authenticator in the AP-Request 
T = 12 for the Server returned AP-Reply 
T = 15 in the generation of checksum for the MIC token 
T = 0 in the generation of sequence number for the MIC token  
T = 13 in the generation of checksum for the WRAP token 
T = 0 in the generation of sequence number for the WRAP token  
T = 0 in the generation of encrypted data for the WRAPPED token 
    
Ksign = HMAC(K, "signaturekey")  //includes zero octet at end 
tmp = MD5(concat(T, data)) 
CHKSUM = HMAC(Ksign, tmp) 
    
    
T = the message type, encoded as a little-endian four byte integer. 
    
        BYTE L40[14] = "fortybits"; 
        BYTE SK = "signaturekey"; 
         
        ENCRYPT (K, fRC4_EXP, T, data, data_len, edata, edata_len) 
        { 
            if (fRC4_EXP){ 
                *((DWORD *)(L40+10)) = T; 
                HMAC (K, L40, 10 + 4, K1); 
            }else{ 
                HMAC (K, &T, 4, K1); 
            } 
            memcpy (K2, K1, 16); 
            if (fRC4_EXP) memset (K1+7, 0xAB, 9); 
            add_8_random_bytes(data, data_len, conf_plus_data); 
            HMAC (K2, conf_plus_data, 8 + data_len, checksum); 
            HMAC (K1, checksum, 16, K3); 
            RC4(K3, conf_plus_data, 8 + data_len, edata + 16); 
            memcpy (edata, checksum, 16); 
edata_len = 16 + 8 + data_len; 
data_len = edata_len - 16 - 8; 
T = 15; 
T = 0; 
T = 13; 
PAD = 1; 
T = 0; 
T = 0; 
edata_len = 8 + msg_len + 1; // conf + msg_len + pad 
