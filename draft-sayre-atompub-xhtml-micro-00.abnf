categories = [{'term':u'\u201CHello World!\u201D',
                  'label':u'Not much to describe',
                  'scheme':None},
                 {'term':u'Hello World!',
                  'label':None,
                  'scheme':None},
                 {'term':u'Hello World!',
                  'label':u'Not much to describe',
                  'scheme':None},
                 {'term':u'Hello World!',
                  'label':u'An example label',
                  'scheme':u'http://example.com'}]

hcat_template = u"""
method='post' accept-charset='utf-8'>
herror_template = u"""
cat_template = u"""
resp = hcat_template % self.get_cats()
cat = categories[int(self.path[8])]
resp = cat_template % cat
data = self._read_data()
form = cgi.parse_qs(data)
redirect = "/"
host = self.headers.getheader('host')
redirect = "http://" + host + redirect
data = self._read_data()
form = cgi.parse_qs(data)
con_type = self.headers.getheader('content-type')
msg = "The content type was %s" % con_type
clen = self.headers.getheader('content-length')
clen = int(clen)
prefer = 'application/xhtml+xml'
template = '%s; charset=utf-8'
accept = self.headers.get('Accept')
ctype = prefer
ctype = 'text/html'
ctype = prefer
res = u""
cat = categories[i]
long_desc=None, err_id=None):

message = "%s id: %s" % (short,err_id)
hError =  "<p id='hError'>%s</p>"  % long_desc
hError = ''
hErrorId = """<p>The identifier for this error is:
hErrorId = ''
content = (herror_template %
                      {'code':code,
                       'shortDesc': short_desc,
                       'hError': hError,
                       'hErrorId': hErrorId})

lnd='0123456789'
PORT = 8888

httpd = BaseHTTPServer.HTTPServer(("", PORT), HCatHandler)
s = u'term: %s label: %s, scheme: %s'
ret = s % (self.term,self.label,self.scheme)
HCAT_PROFILE = u'http://www.example.org/2005/Atom/hCat'
HERROR_PROFILE = u'http://www.example.org/2005/Atom/hError'
XHTML_NS = u'http://www.w3.org/1999/xhtml'
CLOSE = 0
UE = 'unicode-escape'
FORM_ENCODED='application/x-www-form-urlencoded'

profile = attrs.get((None,u'profile'))
cat = Category(self._buf)
class_att = attrs.get((None,u'class'))
uri = attrs.get((None,u'action'))
csets = attrs.get((None,u'accept-charset'))
csets = [x for subseq in
                        [x.split(',') for x in csets.split()]
                        for x in subseq if x != '']
params = ('term','scheme','label')
input_id = attrs.get((None,u'id'))
name = attrs.get((None,u'name'))
rel = attrs.get((None,u'rel'))
href = attrs.get((None,u'href'))
trans_func = self.transitions[self.state][name]
event = (name[0],name[1],CLOSE)
trans_func = self.transitions[self.state][event]
profile = attrs.get((None,u'profile'))
trans_func = self.transitions[self.state][name]
event = (name[0],name[1],CLOSE)
trans_func = self.transitions[self.state][event]
request = urllib2.Request(self.uri)
data = self.make_request(request).read()
hCat_handler = HCatHandler(self.uri)
parser = xml.sax.make_parser()
accept_list = 'application/xhtml+xml,text/html,'
opener = urllib2.build_opener()
curr = current.encode(UE)
new = prompt('Enter a %s [%s]' % (noun,curr))
new = prompt('Enter a %s' % noun)
params = {}
term = unicode(self.enter_field('term',term),UE)
label = self.enter_field('label',label)
label = unicode(label,UE)
scheme = self.enter_field('scheme',scheme)
scheme = unicode(scheme,UE)
params = self.enter_fields()
request = urllib2.Request(self._form.uri,
                                     urllib.urlencode(params))
resp = self.make_request(request)
cat_num = int(prompt('Pick a number from the list')) - 1
cat_num = self.pick_cat()
parts = urlparse.urlsplit(self._cats[cat_num].uri)
conn = httplib.HTTPConnection(parts[1])
response = conn.getresponse()
data = response.read()
cat_num = self.pick_cat()
label = self._cats[cat_num].label
scheme = self._cats[cat_num].scheme
label = label.encode(UE)
scheme = scheme.encode(UE)
term = self._cats[cat_num].term
p = self.enter_fields(term.encode(UE),
                                     label, scheme)
body = urllib.urlencode(p)
headers = {'Content-Type':FORM_ENCODED,
                          'Content-Length':len(body)}
parts = urlparse.urlsplit(self._cats[cat_num].uri)
conn = httplib.HTTPConnection(parts[1])
response = conn.getresponse()
data = response.read()
hError_handler = HErrorHandler()
parser = xml.sax.make_parser()
args = sys.argv[1:]
editor = HCatEditor(args[0])
msg = "Choose: [a]dd, [e]dit, [d]elete, [r]efresh, [q]uit"
x = prompt(msg)
