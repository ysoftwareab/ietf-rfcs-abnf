dtn-uri = "dtn:" ("none"/dtn-hier-part)

dtn-hier-part = "//" node-name name-delim demux ; a path-rootless

node-name = 1*(ALPHA/DIGIT/"-"/"."/"_") reg-name

name-delim = "/"

demux = *VCHAR

ipn-uri = "ipn:" ipn-hier-part

ipn-hier-part = node-nbr nbr-delim service-nbr ; a path-rootless

node-nbr = 1*DIGIT

nbr-delim = "."

service-nbr = 1*DIGIT

start = bundle / #6.55799(bundle)

dtn-time = uint

crc-type = &(

     crc-none: 0,

     crc-16bit: 1,

     crc-32bit: 2

crc-value = (bstr .size 2) / (bstr .size 4)



creation-timestamp = [

     dtn-time, ; absolute time of creation

     sequence: uint ; sequence within the time

eid = $eid .within eid-structure

eid-structure = [

     uri-code: uint,




     SSP: any

bundle = [primary-block, *extension-block, payload-block]

primary-block = [

     version: 7,

     bundle-control-flags,

     crc-type,

     destination: eid,

     source-node: eid,

     report-to: eid,

     creation-timestamp,

     lifetime: uint,




     ? (

       fragment-offset: uint,

       total-application-data-length: uint

     ),

     ? crc-value,

bundle-control-flags = uint .bits bundleflagbits

bundleflagbits = &(

     reserved: 21,

     reserved: 20,

     reserved: 19,

     bundle-deletion-status-reports-are-requested: 18,

     bundle-delivery-status-reports-are-requested: 17,

     bundle-forwarding-status-reports-are-requested: 16,

     reserved: 15,

     bundle-reception-status-reports-are-requested: 14,

     reserved: 13,

     reserved: 12,

     reserved: 11,

     reserved: 10,

     reserved: 9,

     reserved: 8,

     reserved: 7,






     status-time-is-requested-in-all-status-reports: 6,

     user-application-acknowledgement-is-requested: 5,

     reserved: 4,

     reserved: 3,

     bundle-must-not-be-fragmented: 2,

     payload-is-an-administrative-record: 1,

     bundle-is-a-fragment: 0

canonical-block-structure = [

     block-type-code: uint,

     block-number: uint,

     block-control-flags,

     crc-type,

     ; Each block type defines the content within the bytestring

     block-type-specific-data,

     ? crc-value

block-control-flags = uint .bits blockflagbits

blockflagbits = &(

     reserved: 7,

     reserved: 6,

     reserved: 5,

     block-must-be-removed-from-bundle-if-it-cannot-be-processed: 4,




     reserved: 3,

     bundle-must-be-deleted-if-block-cannot-be-processed: 2,

     status-report-must-be-transmitted-if-block-cannot-be-processed: 1,



     block-must-be-replicated-in-every-fragment: 0

block-type-specific-data = bstr / #6.24(bstr)

extension-block = $extension-block-structure .within canonical-
payload-block = payload-block-structure .within canonical-block-
payload-block-structure = [

     block-type-code: 1,

     block-number: 1,

     block-control-flags,

     crc-type,

     $payload-block-data,

     ? crc-value

admin-record = $admin-record .within admin-record-structure

admin-record-structure = [

     record-type-code: uint,

     record-content: any

status-record-content = [

     bundle-status-information,

     status-report-reason-code: uint,

     source-node-eid: eid,

     subject-creation-timestamp: creation-timestamp,




     ? (

       subject-payload-offset: uint,

       subject-payload-length: uint

     )

bundle-status-information = [

     reporting-node-received-bundle: status-info-content,

     reporting-node-forwarded-bundle: status-info-content,

     reporting-node-delivered-bundle: status-info-content,

     reporting-node-deleted-bundle: status-info-content

status-info-content = [

     status-indicator: bool,

     ? timestamp: dtn-time

ext-data-previous-node = eid

ext-data-bundle-age = uint

ext-data-hop-count = [

     hop-limit: uint,

     hop-count: uint

