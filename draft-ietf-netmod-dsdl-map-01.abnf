name="_dhcp__default-lease-time"/> then results in a new rule
name="yam:ARGUMENT">.

k_i=current()/k_i

ns="urn:ietf:params:xml:ns:netmod:dsdl-annotations:1"
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

config-attribute = attribute config { xsd:boolean }
default-attribute = attribute default { text }
default-case-attribute = attribute default-case { xsd:boolean }
error-app-tag-element = element error-app-tag { text }?
error-message-element = element error-message { text }?
instance-identifier-element =
     element instance-identifier {
       attribute require-instance { xsd:boolean }?
     }
key-attribute =
     attribute key {
       list { xsd:QName }
     }
leafref-element =
     element leafref {
       attribute require-instance { xsd:boolean }?,
       xsd:string
     }
min-elements-attribute = attribute min-elements { xsd:integer }
max-elements-attribute = attribute max-elements { xsd:integer }
must-element =
     element must {
       attribute assert { xsd:string },
       (err-app-tag-element & err-message-element)
     }
ordered-by-attribute = attribute ordered-by { "user" | "system" }
status-attribute =
     attribute status { "current" | "deprecated" | "obsolete" }
unique-attribute =
     attribute unique {
       list { xsd:string }
     }
units-attribute = attribute units { xsd:string }
when-attribute = attribute when { xsd:string }
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

message-id-attribute =
     attribute message-id {
       xsd:string { maxLength = "4095" }
     }
ok-element = element nc:ok { empty }
eventTime-element = element en:eventTime { xsd:dateTime }
xmlns="http://relaxng.org/ns/structure/1.0"
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
assert=". &lt;= ../dhcp:max-lease-time">
start =
     element nmt:netmod-tree {
       element nmt:top {

         ## configuration and operational parameters for a DHCP server.
         element dhcp:dhcp {
           [ nma:default = "7200" nma:units = "seconds" ]
           element dhcp:max-lease-time { xsd:unsignedInt }?,
           [ nma:default = "600" nma:units = "seconds" ]
           element dhcp:default-lease-time {
             xsd:unsignedInt
             >> nma:must [
assert = ". <= ../dhcp:max-lease-time"
inet-types__ip-prefix =
     inet-types__ipv4-prefix | inet-types__ipv6-prefix
inet-types__ipv4-prefix =
     xsd:string {
pattern =
         "(([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.)" ~
         "{3}([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])/\p{N}+"
inet-types__ipv6-prefix =
     xsd:string {
pattern =
         "((([0-9a-fA-F]{1,4}:){7})([0-9a-fA-F]{1,4})/" ~
         "\p{N}+)|((([0-9a-fA-F]{1,4}:){6})(([0-9]{1,3}\." ~
         "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))/\p{N}+)|" ~
         "((([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*(::)" ~
         "(([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*/\p{N}+)" ~
         "((([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*(::)" ~
         "(([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*(([0-9]" ~
         "{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))/\p{N}+)"
inet-types__ip-address =
     inet-types__ipv4-address | inet-types__ipv6-address
inet-types__ipv4-address =
     xsd:string {
pattern =
         "(([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-1]?" ~
         "[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"
inet-types__ipv6-address =
     xsd:string {
pattern =
         "((([0-9a-fA-F]{1,4}:){7})([0-9a-fA-F]{1,4})(%[\p{N}" ~
         "\p{L}]+)?)|((([0-9a-fA-F]{1,4}:){6})(([0-9]{1,3}\." ~
         "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(%[\p{N}\p{L}]+)?)|" ~
         "((([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*(::)" ~
         "(([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*(%[\p{N}" ~
         "\p{L}]+)?)((([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*" ~
         "(::)(([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*(([0-9]{1,3}" ~
         "\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(%[\p{N}\p{L}]+)?)"
inet-types__host = inet-types__ip-address | inet-types__domain-name
inet-types__domain-name =
     xsd:string {
pattern =
         "([a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9]\.)*" ~
         "[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9]"
pattern =
         "([r-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9]\.)*" ~
         "[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9]"
yang-types__date-and-time =
     xsd:string {
pattern =
         "\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}" ~
         "(\.d*)?(Z|(\+|-)\d{2}:\d{2})"
yang-types__phys-address = xsd:string

xmlns="http://relaxng.org/ns/structure/1.0"
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
ns="urn:ietf:params:xml:ns:netconf:base:1.0">
href="./relaxng-lib.rng"/>
name="rpc-reply">
start =
     element rpc-reply {
       message-id-attribute,
       element data {
         element dhcp:dhcp {
           element dhcp:max-lease-time { xsd:unsignedInt }?,
           element dhcp:default-lease-time { xsd:unsignedInt }?,
           _dhcp__subnet-list,
           element dhcp:shared-networks {
             element dhcp:shared-network {
               element dhcp:name { xsd:string },
               _dhcp__subnet-list
             }*
           }?,
           element dhcp:status {
             element dhcp:leases {
               element dhcp:address { inet-types__ip-address },
               element dhcp:starts { yang-types__date-and-time }?,
               element dhcp:ends { yang-types__date-and-time }?,
               element dhcp:hardware {
                 element dhcp:type { "ethernet"
                                   | "token-ring"
                                   | "fddi"
                                   }?,
                 element dhcp:address { yang-types__phys-address }?
               }?
             }*
           }?
         }?
       }
     }
inet-types__ip-prefix =
     inet-types__ipv4-prefix | inet-types__ipv6-prefix
inet-types__ipv4-prefix =
     xsd:string {
pattern =
         "(([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.)" ~
         "{3}([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])/\p{N}+"
inet-types__ipv6-prefix =
     xsd:string {
pattern =
         "((([0-9a-fA-F]{1,4}:){7})([0-9a-fA-F]{1,4})/" ~
         "\p{N}+)|((([0-9a-fA-F]{1,4}:){6})(([0-9]{1,3}\." ~
         "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))/\p{N}+)|" ~
         "((([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*(::)" ~
         "(([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*/\p{N}+)" ~
         "((([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*(::)" ~
         "(([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*(([0-9]" ~
         "{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))/\p{N}+)"
inet-types__ip-address =
     inet-types__ipv4-address | inet-types__ipv6-address
inet-types__ipv4-address =
     xsd:string {
pattern =
         "(([0-1]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-1]?" ~
         "[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?"
inet-types__ipv6-address =
     xsd:string {
pattern =
         "((([0-9a-fA-F]{1,4}:){7})([0-9a-fA-F]{1,4})(%[\p{N}" ~
         "\p{L}]+)?)|((([0-9a-fA-F]{1,4}:){6})(([0-9]{1,3}\." ~
         "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(%[\p{N}\p{L}]+)?)|" ~
         "((([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*(::)" ~
         "(([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*(%[\p{N}" ~
         "\p{L}]+)?)((([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*" ~
         "(::)(([0-9a-fA-F]{1,4}:)*([0-9a-fA-F]{1,4}))*(([0-9]{1,3}" ~
         "\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(%[\p{N}\p{L}]+)?)"
inet-types__host = inet-types__ip-address | inet-types__domain-name
inet-types__domain-name =
     xsd:string {
pattern =
         "([a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9]\.)*" ~
         "[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9]"
pattern =
         "([r-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9]\.)*" ~
         "[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9]"
yang-types__date-and-time =
     xsd:string {
pattern =
         "\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}" ~
         "(\.d*)?(Z|(\+|-)\d{2}:\d{2})"
yang-types__phys-address = xsd:string

prefix="nc"/>
