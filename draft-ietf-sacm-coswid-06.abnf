concise-software-identity = {
     global-attributes,
     tag-id,
     tag-version,
     ? corpus,
     ? patch,
     ? supplemental,
     swid-name,
     ? software-version,
     ? version-scheme,
     ? media,
     ? software-meta-entry,
     ? entity-entry,
     ? link-entry,
     ? ( payload-entry / evidence-entry ),
     ? any-element-entry,
tag-id = (0: text)
swid-name = (1: text)
entity-entry = (2: entity / [ 2* entity ])
evidence-entry = (3: evidence)
link-entry = (4: link / [ 2* link ])
software-meta-entry = (5: software-meta / [ 2* software-meta ])
payload-entry = (6: payload)
any-element-entry = (7: any-element-map / [ 2* any-element-map ])
corpus = (8: bool)
patch = (9: bool)
media = (10: text)
supplemental = (11: bool)
tag-version = (12: integer)
software-version = (13: text)
version-scheme = (14: text)

global-attributes = (
     ? lang,
     * any-attribute,
label = text / int

any-attribute = (
label => text / int / [ 2* text ] / [ 2* int ]
lang = (15: text)

any-element-map = {
     global-attributes,
     * label => any-element-map / [ 2* any-element-map ],
any-element-entry = (7: any-element-map / [ 2* any-element-map ])

entity = {
     global-attributes,
     entity-name,
     ? reg-id,
     role,
     ? thumbprint,
     extended-data,
any-uri = text

extended-data = (30: any-element-map / [ 2* any-element-map ])
entity-name = (31: text)
reg-id = (32: any-uri)
role = (33: text / [2* text])
thumbprint = (34: hash-entry)

link = {
     global-attributes,
     ? artifact,
     href,
     ? media
     ? ownership,
     rel,
     ? media-type,
     ? use,
artifact = (37: text)
href = (38: any-uri)
media = (10: any-uri)
ownership = (39: "shared" / "private" / "abandon")
rel = (40: text)
media-type = (41: text)
use = (42: "optional" / "required" / "recommended")

entId='b0c55172-38e9-4e36-be86-92206ad8eddb'] would match
software-meta = {
     global-attributes,
     ? activation-status,
     ? channel-type,
     ? colloquial-version,
     ? description,
     ? edition,
     ? entitlement-data-required,
     ? entitlement-key,
     ? generator,
     ? persistent-id,
     ? product,
     ? product-family,
     ? revision,
     ? summary,
     ? unspsc-code,
     ? unspsc-version,
activation-status = (43: text)
channel-type = (44: text)
colloquial-version = (45: text)
description = (46: text)
edition = (47: text)
entitlement-data-required = (48: bool)
entitlement-key = (49: text)
generator = (50: text)
persistent-id = (51: text)
product = (52: text)
product-family = (53: text)
revision = (54: text)
summary = (55: text)
unspsc-code = (56: text)
unspsc-version = (57: text)

hash-entry = (58: [ hash-alg-id: int, hash-value: bstr ] )

resource-collection = (
     ? directory-entry,
     ? file-entry,
     ? process-entry,
     ? resource-entry
directory = {
     filesystem-item,
     path-elements,
file = {
     filesystem-item,
     ? size,
     ? file-version,
     ? hash-entry,
process = {
     global-attributes,
     process-name,
     ? pid,
resource = {
     global-attributes,
     type,
filesystem-item = (
     global-attributes,
     ? key,
     ? location,
     fs-name,
     ? root,
directory-entry = (16: directory / [ 2* directory ])
file-entry = (17: file / [ 2* file ])
process-entry = (18: process / [ 2* process ])
resource-entry = (19: resource / [ 2* resource ])
size = (20: integer)
file-version = (21: text)
key = (22: bool)
location = (23: text)
fs-name = (24: text)
root = (25: text)
path-elements = (26: { * file-entry,
                          * directory-entry,
                        }
                   )
process-name = (27: text)
pid = (28: integer)
type = (29: text)

payload = {
     global-attributes,
     resource-collection,
     * $$payload-extension
evidence = {
     global-attributes,
     resource-collection,
     ? date,
     ? device-id,
     * $$evidence-extension
date = (35: time)
device-id = (36: text)

concise-software-identity = {
  global-attributes,
  tag-id,
  tag-version,
  ? corpus,
  ? patch,
  ? supplemental,
  swid-name,
  ? software-version,
  ? version-scheme,
  ? media,
  ? software-meta-entry,
  entity-entry,
  ? link-entry,
  ? ( payload-entry // evidence-entry ),
  ? any-element-entry,
any-uri = text
label = text / int

any-attribute = (
label => text / int / [ 2* text ] / [ 2* int ]
any-element-map = {
  global-attributes,
  * label => any-element-map / [ 2* any-element-map ],
global-attributes = (
  ? lang,
  * any-attribute,
resource-collection = (
  ? directory-entry,
  ? file-entry,
  ? process-entry,
  ? resource-entry
file = {
  filesystem-item,
  ? size,
  ? file-version,
  ? hash-entry,
filesystem-item = (
  global-attributes,
  ? key,
  ? location,
  fs-name,
  ? root,
directory = {
  filesystem-item,
  path-elements,
process = {
  global-attributes,
  process-name,
  ? pid,
resource = {
  global-attributes,
  type,
entity = {
  global-attributes,
  entity-name,
  ? reg-id,
  role,
  ? thumbprint,
  extended-data,
evidence = {
  global-attributes,
  resource-collection,
  ? date,
  ? device-id,
  * $$evidence-extension
link = {
  global-attributes,
  ? artifact,
  href,
  ? media
  ? ownership,
  rel,
  ? media-type,
  ? use,
software-meta = {
  global-attributes,
  ? activation-status,
  ? channel-type,
  ? colloquial-version,
  ? description,
  ? edition,
  ? entitlement-data-required,
  ? entitlement-key,
  ? generator,
  ? persistent-id,
  ? product,
  ? product-family,
  ? revision,
  ? summary,
  ? unspsc-code,
  ? unspsc-version,
payload = {
  global-attributes,
  resource-collection,
  * $$payload-extension
tag-id = (0: text)
swid-name = (1: text)
entity-entry = (2: entity / [ 2* entity ])
evidence-entry = (3: evidence)
link-entry = (4: link / [ 2* link ])
software-meta-entry = (5: software-meta / [ 2* software-meta ])
payload-entry = (6: payload)
any-element-entry = (7: any-element-map / [ 2* any-element-map ])
corpus = (8: bool)
patch = (9: bool)
media = (10: [ + [ media-expression,
                     ? [ media-operation,
                         media-expression,
                       ]
                 ]
             ])
media-operation = text
media-expression = media-environment / [ media-prefix,
                                         media-environment,
                                         media-attribute,
                                         media-value,
                                       ]
media-prefix = text
media-environment = text
media-attribute = text
media-value = text
supplemental = (11: bool)
tag-version = (12: integer)
software-version = (13: text)
version-scheme = (14: text / int)
lang = (15: text)
directory-entry = (16: directory / [ 2* directory ])
file-entry = (17: file / [ 2* file ])
process-entry = (18: process / [ 2* process ])
resource-entry = (19: resource / [ 2* resource ])
size = (20: integer)
file-version = (21: text)
key = (22: bool)
location = (23: text)
fs-name = (24: text)
root = (25: text)
path-elements = (26: { * file-entry,
                       * directory-entry,
                     }
                )
process-name = (27: text)
pid = (28: integer)
type = (29: text)
extended-data = (30: any-element-map / [ 2* any-element-map ])
entity-name = (31: text)
reg-id = (32: any-uri)
role = (33: roles / [ 2* roles ] / text / [ 2* text ])
roles= aggregator / distributor / licensor / software-creator / tag-creator
aggregator=0
distributor=1
licensor=2
software-creator=3
tag-creator=4
thumbprint = (34: [ hash-alg-id: int,
                    hash-value: bstr,
                  ]
             )
date = (35: time)
device-id = (36: text)
artifact = (37: text)
href = (38: any-uri)
ownership = (39: shared / private / abandon)
shared=0
private=1
abandon=2
rel = (40: rels / [ 2* rels ])
rels = ancestor / component / feature / installationmedia / packageinstaller / parent / patches / requires / see-also / supersedes / rel-supplemental
ancestor=0
component=1
feature=2
installationmedia=3
packageinstaller=4
parent=5
patches=6
requires=7
see-also=8
supersedes=9
rel-supplemental=10
media-type = (41: text)
use = (42: optional / required / recommended)
optional=0
required=1
recommended=2
activation-status = (43: text)
channel-type = (44: text)
colloquial-version = (45: text)
description = (46: text)
edition = (47: text)
entitlement-data-required = (48: bool)
entitlement-key = (49: text)
generator = (50: text)
persistent-id = (51: text)
product = (52: text)
product-family = (53: text)
revision = (54: text)
summary = (55: text)
unspsc-code = (56: text)
unspsc-version = (57: text)
hash-entry = (58: [ hash-alg-id: int,
                    hash-value: bstr,
                  ]
             )
firmware-manifest = {
  firmware-manifest-id,
  firmware-manifest-creation-timestamp,
  firmware-manifest-version,
  firmware-manifest-description,
  firmware-manifest-nonce,
  ? firmware-manifest-aliases,
  ? firmware-manifest-dependencies,
  firmware-target-device-identifier,
  firmware-payload-entry,
  ? simple-firmware-manifest-extensions,
  $$firmware-manifest-extensions,
firmware-payload = {
  firmware-payload-id,
  ? firmware-package-identifier,
  firmware-payload-description,
  firmware-payload-format,
  firmware-payload-size,
  ? firmware-payload-simple-version,
  ? firmware-payload-version,
  firmware-payload-digests,
  ? firmware-target-component-index,
  firmware-target-storage-identifier,
  firmware-payload-conditions,
  ? firmware-payload-directives,
  ? firmware-target-dependency,
  ? firmware-target-minimal-version,
  ? firmware-payload-relationships,
  firmware-payload-package,
  ? simple-firmware-payload-extensions,
  $$firmware-payload-extensions,
firmware-entry = (59: firmware-manifest / [ 2* firmware-manifest ])
firmware-payload-entry = (60: firmware-payload / [ 2* firmware-payload ])
firmware-payload-id = (61: bytes / text / uint)
firmware-package-identifier = (62: text)
firmware-manifest-id = (63: bytes / text / int)
firmware-manifest-creation-timestamp = (64: time)
firmware-manifest-version = (65: uint)
firmware-manifest-description = (66: text)
firmware-manifest-nonce = (67: bytes)
firmware-manifest-dependencies = (68: resource-reference)
firmware-manifest-aliases = (69: resource-reference)
resource-reference = [ + [ resource-reference-uri: uri,
                           resource-reference-digest: bytes,
                         ],
                     ]
firmware-payload-description = (70: text)
firmware-payload-format = (71: { firmware-payload-format-type,
                                 ? firmware-payload-format-guidance,
                               }
                          )
firmware-payload-format-type = (72: int)
firmware-payload-format-guidance = (73: bytes)
firmware-payload-size = (74: uint)
firmware-payload-package = (75: { ? firmware-package-compression-type,
                                  ? firmware-package-compression-guidance,
                                  firmware-package,
                                }
                           )
firmware-package-compression-type = (76: text / int)
firmware-package-compression-guidance = (77: bytes)
firmware-package = (78: bytes)
firmware-target-component-index = (79: text)
firmware-target-storage-identifier = (80: bytes / text / int)
firmware-target-dependency = (81: [ ? { firmware-target-major-version,
                                        version-comparison,
                                        required-version,
                                      },
                                    ? { firmware-target-minor-version,
                                        version-comparison,
                                        required-version,
                                      },
                                    ? { firmware-target-revision-version,
                                        version-comparison,
                                        required-version,
                                      },
                                    ? { firmware-target-build-version,
                                        version-comparison,
                                        required-version,
                                      },
                                  ]
                             )
firmware-payload-relationships = (82: [ + { firmware-payload-relationship-type,
                                            firmware-payload-ids,
                                          },
                                      ]
                                )
firmware-payload-ids = (83: [ + ( bytes / text / int )])
firmware-payload-relationship-type = (84: $firmware-payload-relationship-types)
patches-firmware = 1
requires-firmware = 2
supersedes-firmware = 3
firmware-target-device-identifier = (85: { firmware-target-vendor-identifier,
                                           ? firmware-target-type-identifier,
                                           firmware-target-model-identifier,
                                           ? firmware-target-class-identifier,
                                           ? firmware-target-rfc4122-identifier,
                                           ? firmware-target-8021AR-identifier,
                                           $$firmware-target-identifier-extensions,
                                         }
                                    )
firmware-target-vendor-identifier = (86: text)
firmware-target-type-identifier = (87: text)
firmware-target-model-identifier = (88: text)
firmware-target-class-identifier = (89: text)
firmware-target-rfc4122-identifier = (90: text)
firmware-target-8021AR-identifier = (91: bytes)
firmware-target-minimal-version  = (92: { firmware-target-major-version,
                                          firmware-target-minor-version,
                                          ? firmware-target-revision-version,
                                          ? firmware-target-build-version,
                                          ? firmware-target-storage-identifier,
                                        },
                                   )
firmware-target-major-version = (93: uint)
firmware-target-minor-version = (94: uint)
firmware-target-revision-version = (95: uint)
firmware-target-build-version = (96: uint)
firmware-payload-digests = (97: [ + { firmware-digest-type,
                                      ? firmware-digest-config-guidance,
                                      firmware-digest,
                                    },
                                ]
                           )
firmware-digest-type = (98: $firmware-digest-types)
raw-payload-digest = 1
installed-payload-digest = 2
ciphertext-digest = 3
pre-image-digest = 4
firmware-digest-config-guidance = (99: bytes)
firmware-digest = (100: bytes)
firmware-payload-conditions = (101: [ + { firmware-payload-condition-type,
                                          firmware-payload-condition-parameters,
                                        },
                                    ]
                              )
firmware-payload-condition-parameters = (102: bytes)
firmware-payload-condition-type = (103: $firmware-payload-condition-types)
vendor-id-condition = 1
class-id-condition = 2
device-id-condition = 3
best-before-condition = 4
firmware-payload-directives = (104: [ + { firmware-payload-directive-type,
                                          firmware-payload-directive-parameters,
                                        },
                                    ]
                              )
firmware-payload-directive-parameters = (105: bytes)
firmware-payload-directive-type = (106: $firmware-payload-directive-types)
apply-immediately-directive = 1
apply-after-directive = 2
firmware-payload-simple-version = (107: uint)
firmware-payload-version = (108: { firmware-payload-major-version,
                                   firmware-payload-minor-version,
                                   ? firmware-payload-revision-version,
                                   ? firmware-payload-build-version,
                                 }
                           )
firmware-payload-major-version = (109: uint)
firmware-payload-minor-version = (110: uint)
firmware-payload-revision-version = (111: uint)
firmware-payload-build-version = (112: uint)
version-comparison = (113: eq / ne / lt / le / gt / ge)
required-version = (114: uint)
simple-firmware-manifest-extensions = (115: { + int => bytes })
simple-firmware-payload-extensions = (116: { + int => bytes })
eq = 0
ne = 1
lt = 2
le = 3
gt = 4
ge = 5
signed-coswid = #6.997(COSE-Sign1-coswid) ; see TBS7 in current COSE I-D

label = int / tstr  ; see COSE I-D 1.4.
values = any        ; see COSE I-D 1.4.

unprotected-signed-coswid-header = {
    1 => int,                   ; algorithm identifier
    3 => "application/coswid",  ; request for CoAP IANA registry to become an int
    * label => values,
protected-signed-coswid-header = {
    4 => bstr,                  ; key identifier
    * label => values,
COSE-Sign1-coswid = [
    protected: bstr .cbor protected-signed-coswid-header,
    unprotected: unprotected-signed-coswid-header,
    payload: bstr .cbor concise-software-identity,
    signature: bstr,
RIMM = [ + concise-software-identity / signed-coswid ]

