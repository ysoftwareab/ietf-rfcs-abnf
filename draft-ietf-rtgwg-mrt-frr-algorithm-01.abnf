dfs_number = 0
dfs_number = 0
max_block_id = 0
explore_list = { computing_rtr }
next_rtr = remove_head(explore_list)
ear_list = empty
cur_node = intf.remote_node
cur_intf = intf
not_done = true

cur_intf = cur_node.lowpoint_parent_intf
cur_node = cur_node.lowpoint_parent
cur_intf = cur_node.dfs_parent_intf
cur_node = cur_node.dfs_parent
not_done = false

localroot = x
localroot = cur_node.localroot
y = remove_end_item_from_list(ear_list)
x = pop(Stack)
y = remove_start_item_from_list(working_list)
next_topo_order = 1
y = remove_start_item_from_list(topo_order_list)
min_node = remove_lowest(spf_heap)
path_metric = min_node.spf_metric + intf.metric
max_block_id = 0
D_lower = D.order_proxy.lower
D_higher = D.order_proxy.higher
D_topo_order = D.order_proxy.topo_order
D_lower = D.lower
D_higher = D.higher
D_topo_order = D.topo_order
X=A.local_root, and if A is the local root, let that be strictly
A=X.order_proxy
B=Y.order_proxy
A=Y.order_proxy
B=X.order_proxy

found_in_gadag = false
min_node = remove_lowest(spf_heap)
found_in_gadag = true
path_metric = min_node.spf_metric + intf.metric
end_ear = Mod_SPF(spf_root, block_root)
y = end_ear.spf_prev_hop
y = y.local_node.spf_prev_intf
direction = A_TO_B
direction = B_TO_A
direction = B_TO_A
block_has_ear = false
            for all interfaces of x
               if (intf.remote_node.block_id == block_id) &&
              (intf.remote_node.IN_GADAG is true)
block_has_ear = true
cand_intf = remove_lowest(ordered_intfs_tree)
ear_end = SPF_for_Ear(cand_intf.local_node,
                      cand_intf.remote_node,
                      cand_intf.remote_node.localroot,
                      SPF method)
y = ear_end.spf_prev_hop
y = y.local_node.spf_prev_intf


end_ear = SPF_for_Ear(x,y,block_root,hybrid)
cur = end_ear
intf = cur.spf_prev_hop
prev = intf.local_node
cur = prev
            xy_intf.UNDIRECTED = false
            xy_intf.remote_intf.UNDIRECTED = false
            xy_intf.OUTGOING = true
            xy_intf.remote_intf.INCOMING = true
            return

x = pop(Stack)
y = intf.remote_node
