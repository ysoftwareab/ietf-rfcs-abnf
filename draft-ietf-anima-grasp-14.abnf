grasp-message = (message .within message-structure) / noop-message

message-structure = [MESSAGE_TYPE, session-id, ?initiator,
                          *grasp-option]

MESSAGE_TYPE = 1..255
session-id = 0..4294967295 ;up to 32 bits
grasp-option = any

discovery-message = [M_DISCOVERY, session-id, initiator, objective]

response-message = [M_RESPONSE, session-id, initiator, ttl,
                        (+locator-option // divert-option), ?objective)]

ttl = 0..4294967295 ; in milliseconds

request-negotiation-message = [M_REQ_NEG, session-id, objective]

request-synchronization-message = [M_REQ_SYN, session-id, objective]


negotiate-message = [M_NEGOTIATE, session-id, objective]

end-message = [M_END, session-id, accept-option / decline-option]

wait-message = [M_WAIT, session-id, waiting-time]
waiting-time = 0..4294967295 ; in milliseconds

synch-message = [M_SYNCH, session-id, objective]

flood-message = [M_FLOOD, session-id, initiator, ttl,
                     +[objective, (locator-option / [])]]

ttl = 0..4294967295 ; in milliseconds

invalid-message = [M_INVALID, session-id, ?any]

noop-message = [M_NOOP]

divert-option = [O_DIVERT, +locator-option]

accept-option = [O_ACCEPT]

decline-option = [O_DECLINE, ?reason]
reason = text  ;optional UTF-8 error message

ipv6-locator-option = [O_IPv6_LOCATOR, ipv6-address,
                            transport-proto, port-number]
ipv6-address = bytes .size 16

transport-proto = IPPROTO_TCP / IPPROTO_UDP
IPPROTO_TCP = 6
IPPROTO_UDP = 17
port-number = 0..65535

ipv4-locator-option = [O_IPv4_LOCATOR, ipv4-address,
                            transport-proto, port-number]
ipv4-address = bytes .size 4

fqdn-locator-option = [O_FQDN_LOCATOR, text,
                            transport-proto, port-number]

uri-locator = [O_URI_LOCATOR, text,
                    transport-proto / null, port-number / null]

objective = [objective-name, objective-flags, loop-count, ?objective-value]

objective-name = text
objective-value = any
loop-count = 0..255

   All objectives are identified by a unique name which is a UTF-8
   string [RFC3629], to be compared byte by byte.

   The names of generic objectives MUST NOT include a colon (":") and
   MUST be registered with IANA (Section 6).

   The names of privately defined objectives MUST include at least one
   colon (":").  The string preceding the last colon in the name MUST be
   globally unique and in some way identify the entity or person
   defining the objective.  The following three methods MAY be used to
   create such a globally unique string:

   1.  The unique string is a decimal number representing a registered
       32 bit Private Enterprise Number (PEN) [RFC5612] that uniquely
       identifies the enterprise defining the objective.

   2.  The unique string is a fully qualified domain name that uniquely
       identifies the entity or person defining the objective.

   3.  The unique string is an email address that uniquely identifies
       the entity or person defining the objective.

   The GRASP protocol treats the objective name as an opaque string.
   For example, "EX1", "32473:EX1", "example.com:EX1", "example.org:EX1
   and "user@example.org:EX1" would be five different objectives.
   The 'objective-flags' field is described below.

   The 'loop-count' field is used for terminating negotiation as
   described in Section 2.8.7.  It is also used for terminating
   discovery as described in Section 2.5.4, and for terminating flooding
   as described in Section 2.5.6.2.  It is placed in the objective
   rather than in the GRASP message format because, as far as the ASA is
   concerned, it is a property of the objective itself.

   The 'objective-value' field is to express the actual value of a
   negotiation or synchronization objective.  Its format is defined in
   the specification of the objective and may be a simple value or a
   data structure of any kind, as long as it can be represented in CBOR.
   It is optional because it is optional in a Discovery or Discovery
   Response message.

objective-flags = uint .bits objective-flag
objective-flag = &(
grasp-message = (message .within message-structure) / noop-message

message-structure = [MESSAGE_TYPE, session-id, ?initiator,
                     *grasp-option]

MESSAGE_TYPE = 0..255
session-id = 0..4294967295 ;up to 32 bits
grasp-option = any

discovery-message = [M_DISCOVERY, session-id, initiator, objective]

response-message = [M_RESPONSE, session-id, initiator, ttl,
                   (+locator-option // divert-option), ?objective]

synch-message = [M_SYNCH, session-id, objective]

flood-message = [M_FLOOD, session-id, initiator, ttl,
                +[objective, (locator-option / [])]]

request-negotiation-message = [M_REQ_NEG, session-id, objective]

request-synchronization-message = [M_REQ_SYN, session-id, objective]

negotiation-message = [M_NEGOTIATE, session-id, objective]

end-message = [M_END, session-id, accept-option / decline-option ]

wait-message = [M_WAIT, session-id, waiting-time]

invalid-message = [M_INVALID, session-id, ?any]

noop-message = [M_NOOP]

divert-option = [O_DIVERT, +locator-option]

accept-option = [O_ACCEPT]

decline-option = [O_DECLINE, ?reason]
reason = text  ;optional UTF-8 error message

waiting-time = 0..4294967295 ; in milliseconds
ttl = 0..4294967295 ; in milliseconds

ipv4-address = bytes .size 4

ipv6-address = bytes .size 16

transport-proto = IPPROTO_TCP / IPPROTO_UDP
IPPROTO_TCP = 6
IPPROTO_UDP = 17
port-number = 0..65535

initiator = ipv4-address / ipv6-address

objective-flags = uint .bits objective-flag
objective-flag = &(
  F_DISC: 0    ; valid for discovery
  F_NEG: 1     ; valid for negotiation
  F_SYNCH: 2   ; valid for synchronization
  F_NEG_DRY: 3 ; negotiation is dry-run
objective = [objective-name, objective-flags, loop-count, ?objective-value]

objective-name = text ;see section "Format of Objective Options"

objective-value = any

loop-count = 0..255

M_NOOP = 0
M_DISCOVERY = 1
M_RESPONSE = 2
M_REQ_NEG = 3
M_REQ_SYN = 4
M_NEGOTIATE = 5
M_END = 6
M_WAIT = 7
M_SYNCH = 8
M_FLOOD = 9
M_INVALID = 99

O_DIVERT = 100
O_ACCEPT = 101
O_DECLINE = 102
O_IPv6_LOCATOR = 103
O_IPv4_LOCATOR = 104
O_FQDN_LOCATOR = 105
O_URI_LOCATOR = 106
M_NOOP = 0
M_DISCOVERY = 1
M_RESPONSE = 2
M_REQ_NEG = 3
M_REQ_SYN = 4
M_NEGOTIATE = 5
M_END = 6
M_WAIT = 7
M_SYNCH = 8
M_FLOOD = 9
M_INVALID = 99

O_DIVERT = 100
O_ACCEPT = 101
O_DECLINE = 102
O_IPv6_LOCATOR = 103
O_IPv4_LOCATOR = 104
O_FQDN_LOCATOR = 105
O_URI_LOCATOR = 106

