SEPARATE=Set|Unset;
CARRY_DEVICE_ID=Unset;
SEPARATE=Unset;
SEPARATE==Set &&         PSA.insert_avp("Cookie");
SEPARATE==Set &&         Tx:PSA();
SEPARATE==Unset) &&      Tx:PSA();
SEPARATE==Unset) &&      SEPARATE=Unset;
SEPARATE==Set &&
SEPARATE==Set &&
SEPARATE==Set &&
SEPARATE==Set &&
SEPARATE==Set &&
SEPARATE==Unset &&           ("Device-Id"))
SEPARATE==Unset &&
SEPARATE==Unset &&
USE_COOKIE=Set|Unset;
EAP_PIGGYBACK=Set|Unset;
SEPARATE=Set|Unset;
SEPARATE=Unset;
ABORT_ON_1ST_EAP_FAILURE=Set|Unset;
CARRY_LIFETIME=Set|Unset;
CARRY_DEVICE_ID=Set|Unset;
CARRY_NAP_INFO=Set|Unset;
CARRY_ISP_INFO=Set|Unset;
CARRY_PPAC=Set|Unset;
PROTECTION_CAP_IN_PSR=Set|Unset;
PROTECTION_CAP_IN_PBR=Set|Unset;
PROTECTION_CAP_IN_PSR=Unset;
CARRY_DEVICE_ID=Set;
NAP_AUTH=Unset;
RTX_COUNTER=0;
USE_COOKIE==Unset &&
EAP_PIGGYBACK==Set

USE_COOKIE==Unset &&     if (CARRY_NAP_INFO==Set)
EAP_PIGGYBACK==Unset       PSR.insert_avp
                              ("NAP-Information");
                            if (CARRY_ISP_INFO==Set)
                              PSR.insert_avp
                              ("ISP-Information");
                            if (CARRY_PPAC==Set)
                              PSR.insert_avp
                              ("Post-PANA-Address-
                                Configuration");
                            if (PROTECTION_CAP_IN_PSR
                                ==Set)
                              PSR.insert_avp
                              ("Protection-Cap.");
                            Tx:PSR();
                            RtxTimerStart();
USE_COOKIE==Set          PSR.insert_avp
                            ("Cookie");
                            if (CARRY_NAP_INFO==Set)
                              PSR.insert_avp
                              ("NAP-Information");
                            if (CARRY_ISP_INFO==Set)
                              PSR.insert_avp
                              ("ISP-Information");
                            if (CARRY_PPAC==Set)
                              PSR.insert_avp
                              ("Post-PANA-Address-
                                Configuration");
                            if (PROTECTION_CAP_IN_PSR
                                ==Set)
                              PSR.insert_avp
                              ("Protection-Cap.");
                            Tx:PSR();
USE_COOKIE==Set              PSA.S_flag==0)
SEPARATE=Unset;
NAP_AUTH=Set|Unset;
SEPARATE=Unset;
NAP_AUTH=Set|Unset;
SEPARATE==Unset          if (key_available())
                              PBR.insert_avp("MAC");
                            Tx:PBR();
                            RtxTimerStart();

SEPARATE==Unset &&       if (CARRY_DEVICE_ID==Set)
SEPARATE==Unset &&       if (new_key_available())
SEPARATE==Unset          Tx:PER();
                            RtxTimerStart();

SEPARATE==Set &&         ("EAP-Payload");
SEPARATE==Set &&         ("EAP-Payload");
SEPARATE==Set            ("EAP-Payload");
                            if (new_key_available())
                              PFER.insert_avp
                              ("Key-Id");
                            if (key_available())
                              PFER.insert_avp("MAC");
                            PFER.S_flag=1;
                            if (NAP_AUTH)
                              PFER.N_flag=1;
                            Tx:PFER();
                            RtxTimerStart();

SEPARATE==Set &&           PFER.insert_avp("MAC");
SEPARATE==Set &&           PFER.insert_avp("MAC");
SEPARATE==Set            if (key_available())
                              PBR.insert_avp("MAC");
                            PBR.S_flag=1;
                            if (NAP_AUTH)
                              PBR.N_flag=1;
                            Tx:PBR();
                            RtxTimerStart();

SEPARATE==Set &&         if (CARRY_DEVICE_ID==Set)
SEPARATE==Set &&         if (key_available())
SEPARATE==Set &&         if (CARRY_DEVICE_ID==Set)
SEPARATE==Set &&         if (new_key_available())
SEPARATE==Set &&         if (CARRY_DEVICE_ID==Set)
SEPARATE==Set &&         if (new_key_available())
SEPARATE==Set            PBR.S_flag=1;
                            if (NAP_AUTH)
                              PBR.N_flag=1;
                            Tx:PBR();
                            RtxTimerStart();

SEPARATE==Set &&           ("Device-Id");
SEPARATE==Set &&         PBR.S_flag=1;
NAP_AUTH=Set;

CARRY_DEVICE_ID==Set &&     PANA_MISSING_AVP
NAP_AUTH=Set|Unset;
NAP_AUTH=Set|Unset;
SEPARATE==Unset          Tx:PER();
                            RtxTimerStart();
SEPARATE==Set &&           PFER.insert_avp("MAC");
SEPARATE==Set &&           PFER.insert_avp("MAC");
SEPARATE==Set            PBR.S_flag=1;
                            if (NAP_AUTH)
                              PBR.N_flag=1;
                            Tx:PBR();
                            RtxTimerStart();

SEPARATE==Set &&           ("Device-Id");
SEPARATE==Set &&         PBR.S_flag=1;
MOBILITY=Set|Unset;
PANA_SA_RESUMED=Unset;

MOBILITY==Set &&         SEPARATE=Unset;
MOBILITY==Set &&         PSA.insert_avp("MAC");
PANA_SA_RESUMED=Unset;
PANA_SA_RESUMED=Unset;
SEPARATE==Unset &&           ("Device-Id"))
SEPARATE==Unset &&       if (PBR.exist_avp
PANA_SA_RESUMED==Set &&  Tx:PBA();
PANA_SA_RESUMED=Unset;
PANA_SA_RESUMED=Unset;
PANA_SA_RESUMED=Unset;
MOBILITY=Set|Unset;

MOBILITY==Unset ||      if (SEPARATE==Set)
MOBILITY==Set &&           PBR.insert_avp
