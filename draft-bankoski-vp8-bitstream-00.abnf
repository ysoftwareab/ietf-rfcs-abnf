split = 1 + ((("range" - 1) * "probability")]] >> 8)

c = 4;
retval = 1;
retval = 0;
v = (v << 1) + read_bool( d, 128);
v = -1;
v = (v << 1) + read_bool( d, 128);
num_uv_modes = B_PRED,  /* first four modes apply to chroma */
H_PRED = "101" */
B_PRED = "111" */
V_PRED = "101" */
TM_PRED = "111" */
TM_PRED = "111" */
Ymode = (intra_mbmode) treed_read( d, ymode_tree,
     pretend_its_huffman);

yac_qi     = L(7);           /* Y ac index always specified */
ydc_delta  = F? delta(): 0;  /* Y dc delta specified if
                                   flag is true */

y2dc_delta = F? delta(): 0;  /* Y2 dc delta specified if
                                   flag is true */
y2ac_delta = F? delta(): 0;  /* Y2 ac delta specified if
                                   flag is true */

uvdc_delta = F? delta(): 0;  /* chroma dc delta specified
                                   if flag is true */
uvac_delta = F? delta(): 0;  /* chroma ac delta specified
                                   if flag is true */

num_uv_modes = B_PRED,  /* first four modes apply to chroma */
V_PRED = "101" */
TM_PRED = "111" */
Ymode = (intra_mbmode) treed_read( d, kf_ymode_tree, kf_ymode_prob);

B_VR_PRED = "111101" */
HU = "11111111" */
Bmode = (intra_bmode) treed_read( d, bmode_tree, kf_bmode_prob
     [A] [L]);

TM_PRED = "111" */
uv_mode = (intra_mbmode) treed_read( d, uv_mode_tree,
     kf_uv_mode_prob);

i = 0;  do {    /* fill prediction buffer with constant DC
                              value */
               int j = 0;  do { B[i][j] = v;}  while( ++j < 4);
v = avg3p( L + r);  /* upper 3 rows use average of
                                      3 pixels */
cat2 = "111101" */
cat4 = "1111101" */
cat4 = "1111111" */
v = -v;

ctx2 = coef_bands[i];
probTable = coef_probs[plane][ctx2][ctx3];

token = treed_read ( d, **coef_tree_without_eob**,
             probTable );
token = treed_read ( d, coef_tree, probTable );

currentBlockHasCoeffs = true;
extraBits = DCTextra( token );
absValue =
             categoryBase[**token_to_cat_index(token)**] +
absValue = **token_to_abs_value(token)**;
sign = read_bool(d, 128);
           block[i] = sign ? -absValue : absValue;
       }
       else
       {
absValue = 0;
prevCoeffWasZero = true;
a1 = ip[0] + ip[12];
b1 = ip[4] + ip[8];
c1 = ip[4] - ip[8];
d1 = ip[0] - ip[12];
ip = output;
op = output;
a1 = ip[0] + ip[3];
b1 = ip[1] + ip[2];
c1 = ip[1] - ip[2];
d1 = ip[0] - ip[3];

a2 = a1 + b1;
b2 = c1 + d1;
c2 = a1 - b1;
d2 = d1 - c1;

a1 = ((input[0] + 3)>>3);

a1 = ip[0]+ip[8];
b1 = ip[0]-ip[8];
temp1 = (ip[4] * sinpi8sqrt2)>>16;
temp2 = ip[12]+((ip[12] * cospi8sqrt2minus1)>>16);
c1 = temp1 - temp2;

temp1 = ip[4] + ((ip[4] * cospi8sqrt2minus1)>>16);
temp2 = (ip[12] * sinpi8sqrt2)>>16;
d1 = temp1 + temp2;

ip = output;
op = output;
a1 = ip[0]+ip[2];
b1 = ip[0]-ip[2];

temp1 = (ip[1] * sinpi8sqrt2)>>16;
temp2 = ip[3]+((ip[3] * cospi8sqrt2minus1)>>16);
c1 = temp1 - temp2;

temp1 = ip[1] + ((ip[1] * cospi8sqrt2minus1)>>16);
temp2 = (ip[3] * sinpi8sqrt2)>>16;
d1 = temp1 + temp2;

a = c( a + 4) >> 3;

p0 = u2s(*P0);
q3 = u2s(*Q3);

p0 = u2s(*P0);
q3 = u2s(*Q3);

a = c( (18*w + 63) >> 7);

a = c( (9*w + 63) >> 7);

interior_limit = 9 - sharpness_level;
interior_limit = 1;

hev_threshold = 2;
hev_threshold = 1;
hev_threshold = 3;
hev_threshold = 2;
hev_threshold = 1;
H_PRED = "101" */
B_PRED = "111" */
mv_nearest = num_ymodes, /* use "nearest" motion vector
                                   for entire MB */
num_mv_refs = mv_split + 1 - mv_nearest
xmv = x->mbmi.mv.as_mv;
tmp = cnt[CNT_NEAREST];
tmp = near_mvs[CNT_NEAREST].as_int;
mvr = (mv_ref) treed_read( d, mv_ref_tree, mv_ref_p);

left_right = "111" */
part = (MVpartition) treed_read( d, mvpartition_tree,
     mvpartition_probs);

LEFT4x4 = num_intra_bmodes,   /* use already-coded MV to
                                        my left */
sub_ref = (sub_mv_ref) treed_read( d, sub_mv_ref_tree,
         sub_mv_ref_prob[context]);

MVPbits = MVPshort + 7,      /* 8 long value bits
                                       w/independent probs */

MVPcount = MVPbits + 8       /* 17 probabilities in total */
i = 7;
A = treed_read( d, small_mvtree, p + MVPshort);

x = x & (~7);
y = y & (~7);

tmp = (c[2] << 16) | (c[1] << 8) | c[0];

key_frame = tmp & 0x1;
version = (tmp >> 1) & 0x7;
show_frame = (tmp >> 4) & 0x1;
first_part_size = (tmp >> 5) & 0x7FFFF;


tmp = (c[1] << 8) | c[0];

width = tmp & 0x3FFF;
horizontal_scale = tmp >> 14;

tmp = (c[3] << 8) | c[2];

height = tmp & 0x3FFF;
vertical_scale = tmp >> 14;

