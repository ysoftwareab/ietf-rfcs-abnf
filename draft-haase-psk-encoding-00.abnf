bytes = [b for b in k]
kInt = k;
result = [];
n = 0
kInt = kInt >> 8
n = n + 1
table = b'0123456789ABCDEFGHJKNMPQRSTVWXYZ'
result = b""
ctr = 0
index = val & 0x1f
val = val >> 5
ctr = 0

table = b'0123456789'
result = b""
ctr = 0
index = val % 10
val = round((val - index) / 10)
ctr = 0

keyAsInt = LEStringToInteger(key)
result = b""
chunkNo = 0
chunk = keyAsInt - ((keyAsInt >> 43) << 43)
keyAsInt = keyAsInt >> 43
crc = libscrc.mmc(domainSeparator + bytes([chunkNo])
                            + bytes(IntegerToLEString(chunk)))
chunkWithCrc = chunk + (crc << 43)
keyAsInt = LEStringToInteger(key)
result = b""
debugPrints = 0
chunkNo = 0
chunk = keyAsInt - ((keyAsInt >> 32) << 32)
keyAsInt = keyAsInt >> 32

crc = libscrc.mmc(domainSeparator + bytes([chunkNo])
                            + bytes(IntegerToLEString(chunk)))
chunkWithCrc = chunk  + (crc << 32)

toDecode = x.upper();
table = b'0123456789ABCDEFGHJKNMPQRSTVWXYZ'

toDecode = b'0'

toDecode = b'1'

result = 0

characters = x;

result = 0

remainingDigits = digits
result = 0

factor = 1
chunkNo = 0
remainingDigits = remainingDigits.lstrip()

subChunk1 = remainingDigits[0:6]
remainingDigits = (remainingDigits[6:]).lstrip()

subChunk2 = remainingDigits[0:6]
remainingDigits = (remainingDigits[6:]).lstrip()

ChunkWithCrc = (decodeDigits(subChunk1)
                          + (10**6) * decodeDigits(subChunk2))

chunk = ChunkWithCrc & 0xffffffff
decodedCrc = ChunkWithCrc >> 32

calculatedCrc = libscrc.mmc(domainSeparator + bytes([chunkNo])
                                      + bytes(IntegerToLEString(chunk)))
factor = factor << 32
remainingDigits = digits
result = 0

factor = 1
chunkNo = 0
remainingDigits = remainingDigits.lstrip()

subChunk1 = remainingDigits[0:5]
remainingDigits = (remainingDigits[5:]).lstrip()

subChunk2 = remainingDigits[0:5]
remainingDigits = (remainingDigits[5:]).lstrip()


ChunkWithCrc = (decodeString(subChunk1)
                         + (decodeString(subChunk2) << (5*5)))

decodedCrc = ChunkWithCrc >> 43
chunk = ChunkWithCrc - (decodedCrc << 43)

calculatedCrc = libscrc.mmc(domainSeparator + bytes([chunkNo])
                                      + bytes(IntegerToLEString(chunk)))
factor = factor << 43
