ns="http://example.com/ns/foo"
ns="urn:ietf:params:xml:ns:netmod:dsdl-annotations:1"
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

config-attribute = attribute config { xsd:boolean }
default-attribute = attribute default { text }
default-case-attribute = attribute default-case { xsd:boolean }
error-app-tag-element = element error-app-tag { text }?
error-message-element = element error-message { text }?
instance-identifier-element =
     element instance-identifier {
       attribute require-instance { xsd:boolean }?
     }
key-attribute =
     attribute key {
       list { xsd:QName }
     }
leafref-element =
     element leafref {
       attribute require-instance { xsd:boolean }?,
       xsd:string
     }
min-elements-attribute = attribute min-elements { xsd:integer }
max-elements-attribute = attribute max-elements { xsd:integer }
must-element =
     element must {
       attribute assert { xsd:string },
       (err-app-tag-element & err-message-element)
     }
ordered-by-attribute = attribute ordered-by { "user" | "system" }
status-attribute =
     attribute status { "current" | "deprecated" | "obsolete" }
unique-attribute =
     attribute unique {
       list { xsd:string }
     }
units-attribute = attribute units { xsd:string }
when-attribute = attribute when { xsd:string }
xmlns="http://relaxng.org/ns/structure/1.0"
datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
assert="current() &lt;= ../max-lease-time">
start =
  element nmt:netmod-tree {
    element nmt:top {

      ## configuration and operational parameters for a DHCP server.
      element dhcp:dhcp {
        [ nma:default = "7200" nma:units = "seconds" ]
        element dhcp:max-lease-time { xsd:unsignedInt }?,
        [ nma:default = "600" nma:units = "seconds" ]
        element dhcp:default-lease-time {
          xsd:unsignedInt
          >> nma:must [
assert = "current() <= ../max-lease-time"
dhcp__subnet-list =
  [ nma:key = "net" ]
  element dhcp:subnet {
    element dhcp:net { inet-types__ip-prefix },
    element dhcp:range {

      ## Allows BOOTP clients to get addresses in this range
      element dhcp:dynamic-bootp { empty }?,
      element dhcp:low { inet-types__ip-address },
      element dhcp:high { inet-types__ip-address }
    }?,

    ## Options in the DHCP protocol
    element dhcp:dhcp-options {
      [ nma:ordered-by = "user" ]
      element dhcp:router {
        inet-types__host
        >> a:documentation [ "See: RFC 2132, sec. 3.8" ]
      }*,
      element dhcp:domain-name {
        inet-types__domain-name
        >> a:documentation [ "See: RFC 2132, sec. 3.17" ]
      }?
    }?,
    [ nma:default = "7200" nma:units = "seconds" ]
    element dhcp:max-lease-time { xsd:unsignedInt }?
  }*
inet-types__ip-prefix =
  inet-types__ipv4-prefix | inet-types__ipv6-prefix
inet-types__ipv4-prefix =
  xsd:string {
pattern = "... removed ..."
inet-types__ipv6-prefix =
  xsd:string {
pattern = "... removed ..."
inet-types__ip-address =
  inet-types__ipv4-address | inet-types__ipv6-address
inet-types__ipv4-address =
  xsd:string {
pattern = "... removed ..."
inet-types__ipv6-address =
  xsd:string {
pattern = "... removed ..."
inet-types__host = inet-types__ip-address | inet-types__domain-name
inet-types__domain-name =
  xsd:string {
pattern = "... removed ..."
yang-types__date-and-time =
  xsd:string {
pattern = "... removed ..."
yang-types__phys-address =
  xsd:string {
pattern = "([0-9a0-fA-F]{2}(:[0-9a0-fA-F]{2})*)?"
