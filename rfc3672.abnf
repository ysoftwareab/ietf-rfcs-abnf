SubtreeSpecification = "{"    [ sp ss-base ]
                             [ sep sp ss-specificExclusions ]
                             [ sep sp ss-minimum ]
                             [ sep sp ss-maximum ]
                             [ sep sp ss-specificationFilter ]
                                   sp "}"

ss-base                = id-base                msp LocalName
ss-specificExclusions  = id-specificExclusions  msp
                               SpecificExclusions
ss-minimum             = id-minimum             msp BaseDistance
ss-maximum             = id-maximum             msp BaseDistance
ss-specificationFilter = id-specificationFilter msp Refinement

id-base                = %x62.61.73.65 ; "base"
id-specificExclusions  = %x73.70.65.63.69.66.69.63.45.78.63.6C.75.73
                               %x69.6F.6E.73 ; "specificExclusions"
id-minimum             = %x6D.69.6E.69.6D.75.6D ; "minimum"
id-maximum             = %x6D.61.78.69.6D.75.6D ; "maximum"
id-specificationFilter = %x73.70.65.63.69.66.69.63.61.74.69.6F.6E.46
                               %x69.6C.74.65.72 ; "specificationFilter"

SpecificExclusions = "{" [ sp SpecificExclusion
                           *( "," sp SpecificExclusion ) ] sp "}"
SpecificExclusion  = chopBefore / chopAfter
chopBefore         = id-chopBefore ":" LocalName
chopAfter          = id-chopAfter  ":" LocalName
id-chopBefore      = %x63.68.6F.70.42.65.66.6F.72.65 ; "chopBefore"
id-chopAfter       = %x63.68.6F.70.41.66.74.65.72    ; "chopAfter"
Refinement  = item / and / or / not
item        = id-item ":" OBJECT-IDENTIFIER
and         = id-and  ":" Refinements
or          = id-or   ":" Refinements
not         = id-not  ":" Refinement
Refinements = "{" [ sp Refinement
                    *( "," sp Refinement ) ] sp "}"
id-item     = %x69.74.65.6D ; "item"
id-and      = %x61.6E.64    ; "and"
id-or       = %x6F.72       ; "or"
id-not      = %x6E.6F.74    ; "not"

BaseDistance = INTEGER-0-MAX

