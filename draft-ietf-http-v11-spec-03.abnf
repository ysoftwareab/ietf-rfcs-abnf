name = definition
     The name of a rule	is simply the name itself (without any enclosing
     "<" and ">") and is separated from	its definition by the equal
     character "=". Whitespace is only significant in that indentation
     of	continuation lines is used to indicate a rule definition that
     spans more	than one line. Certain basic rules are in uppercase,
     such as SP, LWS, HT, CRLF,	DIGIT, ALPHA, etc. Angle brackets are
     used within definitions whenever their presence will facilitate
     discerning	the use	of rule	names.

OCTET	      =	<any 8-bit sequence of data>
CHAR	      =	<any US-ASCII character	(octets	0 - 127)>
UPALPHA	      =	<any US-ASCII uppercase	letter "A".."Z">
LOALPHA	      =	<any US-ASCII lowercase	letter "a".."z">
ALPHA	      =	UPALPHA	| LOALPHA
DIGIT	      =	<any US-ASCII digit "0".."9">
CTL	      =	<any US-ASCII control character
CR	      =	<US-ASCII CR, carriage return (13)>
LF	      =	<US-ASCII LF, linefeed (10)>
SP	      =	<US-ASCII SP, space (32)>
HT	      =	<US-ASCII HT, horizontal-tab (9)>
CRLF	      =	CR LF

LWS	      =	[CRLF] 1*( SP |	HT )

TEXT	      =	<any OCTET except CTLs,
HEX	      =	"A" | "B" | "C"	| "D" |	"E" | "F"
		      |	"a" | "b" | "c"	| "d" |	"e" | "f" | DIGIT

word	      =	token |	quoted-string

token	      =	1*<any CHAR except CTLs	or tspecials>

tspecials      =	"(" | ")" | "<"	| ">" |	"@"
		      |	"," | ";" | ":"	| "\" |	<">
		      |	"/" | "[" | "]"	| "?" |	"="
		      |	"{" | "}" | SP | HT
comment	      =	"(" *( ctext | comment ) ")"
ctext	      =	<any TEXT excluding "("	and ")">

quoted-string  =	( <"> *(qdtext)	<"> )


qdtext	      =	<any CHAR except <"> and CTLs,
quoted-pair    =	"\" CHAR


HTTP-Version   =	"HTTP" "/" 1*DIGIT "." 1*DIGIT

URI	      =	( absoluteURI |	relativeURI ) [	"#" fragment ]

absoluteURI    =	scheme ":" *( uchar | reserved )

relativeURI    =	net_path | abs_path | rel_path

net_path	      =	"//" net_loc [ abs_path	]	abs_path
		      =	"/" rel_path
rel_path	      =	[ path ] [ ";" params ]	[ "?" query ]

path	      =	fsegment *( "/"	segment	)
fsegment	      =	1*pchar
segment	      =	*pchar

params	      =	param *( ";" param )
param	      =	*( pchar | "/" )
scheme	      =	1*( ALPHA | DIGIT | "+"	| "-" |	"." )
net_loc	      =	*( pchar | ";" | "?" )
query	      =	*( uchar | reserved )
fragment	      =	*( uchar | reserved )

pchar	      =	uchar |	":" | "@" | "&amp;" | "=" | "+"
uchar	      =	unreserved | escape
unreserved     =	ALPHA |	DIGIT |	safe | extra | national

escape	      =	"%" HEX	HEX
reserved	      =	";" | "/" | "?"	| ":" |	"@" | "&amp;" |	"=" | "+"
extra	      =	"!" | "*" | "'"	| "(" |	")" | ","
safe	      =	"$" | "-" | "_"	| "."
unsafe	      =	CTL | SP | <"> | "#" | "%" | "<" | ">"
national	      =	<any OCTET excluding ALPHA, DIGIT,
http_URL	      =	"http:"	"//" host [ ":"	port ] [ abs_path ]

host	      =	<A legal Internet host domain name
port	      =	*DIGIT
HTTP-date      =	rfc1123-date | rfc850-date | asctime-date

rfc1123-date   =	wkday "," SP date1 SP time SP "GMT"
rfc850-date    =	weekday	"," SP date2 SP	time SP	"GMT"
asctime-date   =	wkday SP date3 SP time SP 4DIGIT

date1	      =	2DIGIT SP month	SP 4DIGIT
date2	      =	2DIGIT "-" month "-" 2DIGIT
date3	      =	month SP ( 2DIGIT | ( SP 1DIGIT	))
time	      =	2DIGIT ":" 2DIGIT ":" 2DIGIT
wkday	      =	"Mon" |	"Tue" |	"Wed"
		      |	"Thu" |	"Fri" |	"Sat" |	"Sun"

weekday	      =	"Monday" | "Tuesday" | "Wednesday"
		      |	"Thursday" | "Friday" |	"Saturday" | "Sunday"

month	      =	"Jan" |	"Feb" |	"Mar" |	"Apr"
		      |	"May" |	"Jun" |	"Jul" |	"Aug"
		      |	"Sep" |	"Oct" |	"Nov" |	"Dec"

delta-seconds  =	1*DIGIT


charset = "US-ASCII"
	       | "ISO-8859-1" |	"ISO-8859-2" | "ISO-8859-3"
	       | "ISO-8859-4" |	"ISO-8859-5" | "ISO-8859-6"
	       | "ISO-8859-7" |	"ISO-8859-8" | "ISO-8859-9"
	       | "ISO-2022-JP" | "ISO-2022-JP-2" | "ISO-2022-KR"
	       | "UNICODE-1-1" | "UNICODE-1-1-UTF-7"
	       | "UNICODE-1-1-UTF-8" | token

content-coding	= "gzip" | "x-gzip"
transfer-coding	       = "chunked" | transfer-extension

transfer-extension      = token

Chunked-Body   =	*chunk
chunk	      =	chunk-size [ chunk-ext ] CRLF
chunk-size     =	hex-no-zero *HEX
chunk-ext      =	*( ";" chunk-ext-name [	"=" chunk-ext-value ] )
chunk-ext-name =	token
chunk-ext-val  =	token |	quoted-string
chunk-data     =	chunk-size(OCTET)

footer	      =	*<<Content-MD5 and future headers that specify
hex-no-zero    =	<HEX excluding "0">

media-type     =	type "/" subtype *( ";"	parameter )
type	      =	token
subtype	      =	token

parameter      =	attribute "=" value
attribute      =	token
value	      =	token |	quoted-string

product	       = token ["/" product-version]
product-version = token

qvalue	      =	( "0" [	"." 0*3DIGIT ] )
		      |	( "1" [	"." 0*3("0") ] )
language-tag  =	primary-tag *( "-" subtag )

primary-tag   =	1*8ALPHA
subtag	      =	1*8ALPHA

entity-tag = strong-entity-tag | weak-entity-tag
			      |	null-entity-tag
strong-entity-tag	= quoted-string
weak-entity-tag =	quoted-string "/W"
null-entity-tag =	<"> <">

variant-id = quoted-string

variant-set = 1#variant-set-item
variant-set-item = opaque-validator ";" variant-id


range-unit       = bytes-unit | other-range-unit

bytes-unit       = "bytes"
other-range-unit = token

ranges-specifier	= byte-ranges-specifier

byte-ranges-specifier = bytes-unit "=" byte-range-set

byte-range-set =	1#( byte-range-spec | suffix-byte-range-spec )

byte-range-spec = first-byte-pos	"-" [last-byte-pos]

first-byte-pos =	1*DIGIT

last-byte-pos = 1*DIGIT

suffix-byte-range-spec =	"-" suffix-length

suffix-length = 1*DIGIT

bytes=0-499

bytes=500-999

bytes=-500

bytes=9500-

bytes=0-0,-1

bytes=500-600,601-999

bytes=500-700,601-999


content-range-spec      = byte-content-range-spec

byte-content-range-spec = bytes-unit SP first-byte-pos "-"
				      last-byte-pos "/"	entity-length

entity-length		= 1*DIGIT
HTTP-message   =	Full-Request		  ; HTTP/1.1 messages
		      |	Full-Response

HTTP-header    =	field-name ":" [ field-value ] CRLF
field-name     =	token
field-value    =	*( field-content | LWS )

field-content  =	<the OCTETs making up the field-value
General-Header =	Cache-Control		 ; Section 18.10
		      |	Connection		 ; Section 18.11
		      |	Date			 ; Section 18.20
		      |	Via			 ; Section 18.47
		      |	Keep-Alive		 ; Section 23.5.2.5.1
		      |	Pragma			 ; Section 18.34
		      |	Upgrade			 ; Section 18.44

Request	      =	Full-Request
Full-Request   =	Request-Line		  ; Section 9.1
Request-Line   =	 CRLF |	Method SP Request-URI SP HTTP-Version CRLF

Method	      =	"OPTIONS"		 ; Section 13.1
		      |	"GET"			 ; Section 13.2
		      |	"HEAD"			 ; Section 13.3
		      |	"POST"			 ; Section 13.4
		      |	"PUT"			 ; Section 13.5
		      |	"DELETE"		 ; Section 13.6
		      |	"TRACE"			 ; Section 13.7
		      |	extension-method

extension-method	= token

Request-URI    =	"*" | absoluteURI | abs_path

Request-Header =	Accept			 ; Section 18.1
		      |	Accept-Charset		 ; Section 18.2
		      |	Accept-Encoding		 ; Section 18.3
		      |	Accept-Language		 ; Section 18.4
		      |	Authorization		 ; Section 18.8
		      |	From			 ; Section 18.23
		      |	Host			 ; Section 18.24
		      |	If-Modified-Since	 ; Section 18.25
		      |	If-Range		 ; Section 18.28
		      |	Proxy-Authorization	 ; Section 18.36
		      |	Range			 ; Section 18.38
		      |	Referer			 ; Section 18.39
		      |	User-Agent		 ; Section 18.45
		      |	Max-Forwards		 ; Section 18.32

Response	       = Full-Response

Full-Response   = Status-Line		   ; Section 10.1
Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF


Status-Code    =	"100"	; Continue
		      |	"101"	; Switching Protocols
		      |	"200"	; OK
		      |	"201"	; Created
		      |	"202"	; Accepted
		      |	"203"	; Non-Authoritative Information
		      |	"204"	; No Content
		      |	"205"	; Reset	Content
		      |	"206"	; Partial Content
		      |	"300"	; Multiple Choices
		      |	"301"	; Moved	Permanently
		      |	"302"	; Moved	Temporarily
		      |	"303"	; See Other
		      |	"304"	; Not Modified
		      |	"305"	; Use Proxy
		      |	"400"	; Bad Request
		      |	"401"	; Unauthorized
		      |	"402"	; Payment Required
		      |	"403"	; Forbidden
		      |	"404"	; Not Found
		      |	"405"	; Method Not Allowed
		      |	"406"	; Not Acceptable
		      |	"407"	; Proxy	Authentication Required
		      |	"408"	; Request Time-out
		      |	"409"	; Conflict
		      |	"410"	; Gone
		      |	"411"	; Length Required
		      |	"412"	; Precondition Failed
		      |	"413"	; Request Entity Too Large
		      |	"414"	; Request URI Too Large
		      |	"415"	; Unsupported Media Type
		      |	"500"	; Internal Server Error
		      |	"501"	; Not Implemented
		      |	"502"	; Bad Gateway
		      |	"503"	; Service Unavailable
		      |	"504"	; Gateway Time-out
		      |	"505"	; HTTP Version not supported
		      |	extension-code

extension-code =	3DIGIT

Reason-Phrase  =	*<TEXT,	excluding CR, LF>

Response-Header = Location		 ; Section 18.31
		       | Proxy-Authenticate	 ; Section 18.35
		       | Public			 ; Section 18.37
		       | Retry-After		 ; Section 18.40
		       | Server			 ; Section 18.41
		       | WWW-Authenticate	 ; Section 18.46

Entity-Header  =	Allow			 ; Section 18.7
		      |	Content-Base		 ; Section 18.12
		      |	Content-Encoding	 ; Section 18.3
		      |	Content-Language	 ; Section 18.14
		      |	Content-Length		 ; Section 18.15
		      |	Content-Location	 ; Section 18.16
		      |	Content-MD5		 ; Section 0
		      |	Content-Range		 ; Section 18.18
		      |	Content-Type		 ; Section 18.19
		      |	Expires			 ; Section 18.22
		      |	Last-Modified		 ; Section 18.30
		      |	Title			 ; Section 18.42
		      |	Transfer-Encoding	 ; Section 18.43
		      |	extension-header

extension-header	= HTTP-header

Entity-Body    =	*OCTET

auth-scheme    =	token

auth-param     =	token "=" quoted-string

challenge      =	auth-scheme 1*SP realm *( "," auth-param )

realm	      =	"realm"	"=" realm-value
realm-value    =	quoted-string

credentials    =	basic-credentials
		      |	auth-scheme 0#auth-param
basic-credentials = "Basic" SP basic-cookie
basic-cookie   =	<base64	[7] encoding of	user-pass,
user-pass = userid ":" password

userid	 = [ token ]

password	 = *TEXT

stale=3600" or "Cache-Control: reload" to every	request. We recognize
corrected_received_age =	max(now	- date_value, age_value)

corrected_initial_age = corrected_received_age
			    + (now - request_time)

apparent_age = max(0, now	- date_value);
corrected_received_age = max(apparent_age, age_value);
response_delay = now - request_time;
corrected_initial_age = corrected_received_age + response_delay;
resident_time = now - response_time;
current_age   = corrected_initial_age + resident_time;

freshness_lifetime = max_age_value

freshness_lifetime = expires_value - date_value

response_is_fresh	= (freshness_lifetime >	current_age)


Accept	      =	"Accept" ":" #(
			     media-range
			     [ ( ":" | ";" )

			       range-parameter

			       *( ";" range-parameter )	]

media-range    =	( "*/*"
range-parameter = ( "q" "=" qvalue )
		       | extension-range-parameter

extension-range-parameter = ( token "=" token )

extension-token = token

Accept-Charset =	"Accept-Charset" ":"

Accept-Encoding	= "Accept-Encoding" ":"
Accept-Language	= "Accept-Language" ":"
language-range	= ( ( 1*8ALPHA *( "-" 1*8ALPHA ) )
Accept-Ranges	 = "Accept-Ranges" ":" acceptable-ranges

acceptable-ranges = 1#range-unit	| "none"

Age = "Age" ":"	age-value

age-value = delta-seconds

Allow	      =	"Allow"	":" 1#method

Alternates	    = "Alternates" ":" opaque-field

opaque-field	    = field-value

Authorization  =	"Authorization"	":" credentials
Cache-Control   = "Cache-Control" ":" 1#cache-directive

cache-directive = "public"
		       | "private" [ "=" <"> 1#field-name <"> ]
		       | "no-cache" [ "=" <"> 1#field-name <"> ]
		       | "no-store"
		       | "no-transform"
		       | "must-revalidate"
		       | "proxy-revalidate"
		       | "only-if-cached"
		       | "max-age" "=" delta-seconds
		       | "max-stale" "=" delta-seconds
		       | "min-fresh" "=" delta-seconds
		       | "min-vers" "="	HTTP-Version

Connection-header = "Connection"	":" 1#(connection-token)
connection-token	 = token
Content-Base	      =	"Content-Base" ":" absoluteURI

Content-Encoding	       = "Content-Encoding" ":"
Content-Language	       = "Content-Language" ":"	1#language-tag

Content-Length =	"Content-Length" ":" 1*DIGIT

Content-Location = "Content-Location" ":" absoluteURI

ContentMD5	= "Content-MD5"	":" md5-digest

md5-digest	= <base64 of 128 bit MD5 digest	as per RFC
Content-Range = "Content-Range" ":" content-range-spec

boundary=THIS_STRING_SEPARATES

       --THIS_STRING_SEPARATES
       Content-type: application/pdf
      Content-range: bytes 500-999/8000

       ...the first range...
       --THIS_STRING_SEPARATES
       Content-type: application/pdf
      Content-range: bytes 7000-7999/8000

       ...the second range
       --THIS_STRING_SEPARATES_


Content-Type   =	"Content-Type" ":" media-type


Date	      =	"Date" ":" HTTP-date

ETag = "ETag" ":"	etag-info
etag-info	= entity-tag [ ";" variant-id ]

Expires =	"Expires" ":" HTTP-date

From   =	"From" ":" mailbox

Host = "Host" ":" host [	":" port ]    ;	Section	7.2.2

If-Modified-Since = "If-Modified-Since" ":" HTTP-date

If-Match = "If-Match" ":"	if-match-rhs
if-match-rhs = opaque-validator |	variant-set

If-NoneMatch = "If-NoneMatch" ":"	if-nonematch-rhs
if-nonematch-rhs = opaque-validator | variant-set

Range-If = "Range-If" ":" (if-valid-rhs	| HTTP-date)

If-Unmodified-Since = "If-Unmodified-Since" ":" HTTP-date

Last-Modified  =	"Last-Modified"	":" HTTP-date

Location	      =	"Location" ":" absoluteURI


Max-Forwards   =	"Max-Forwards" ":" 1*DIGIT

Persist-header =	"Persist" ":" 0#pers-param

pers-param = param-name "=" word
param-name = token

Pragma		       = "Pragma" ":" 1#pragma-directive

pragma-directive	       = "no-cache" | extension-pragma
extension-pragma	       = token [ "=" word ]

Proxy-Authentication    = "Proxy-Authentication"	":" challenge

Proxy-Authorization     = "Proxy-Authorization" ":" credentials

Public	      =	"Public" ":" 1#method

Range = "Range" ":" ranges-specifier

Referer	      =	"Referer" ":" (	absoluteURI | relativeURI )

Retry-After    =	"Retry-After" ":" ( HTTP-date |	delta-seconds )

Server	      =	"Server" ":" 1*( product | comment )

Title	      =	"Title"	":" *TEXT

Transfer-Encoding       = "Transfer-Encoding" ":" 1#transfer- coding

Upgrade	      =	"Upgrade" ":" 1#product

User-Agent     =	"User-Agent" ":" 1*( product | comment )

Vary		    = "Vary" ":" 1#selection-parameter



selection-parameter  = request-header-name
request-header-name  = field-name

extension-parameter  = token

Via   =	"Via" ":" 1#( received-protocol	received-by [ comment ]
received-protocol	= [ protocol-name "/" ]	protocol-version
protocol-name	= token
protocol-version	= token
received-by	= ( host [ ":" port ] )	| pseudonym
pseudonym		= token

Warning	  = "Warning" ":" warn-code SP warn-agent SP warn-text
warn-code  = 2DIGIT
warn-agent = ( host [ ":" port ]	) | pseudonym
		       ; the name or pseudonym of the server adding
		       ; the Warning header, for use in	debugging
warn-text  = quoted-string

WWW-Authenticate	       = "WWW-Authenticate" ":"	1#challenge

MIME-Version   =	"MIME-Version" ":" 1*DIGIT "." 1*DIGIT

Content-Version = "Content-Version" ":" quoted-string

Derived-From   =	"Derived-From" ":" quoted-string

Link	      =	"Link" ":" #("<" URI ">" *( ";"	link-param )



link-param     =	( ( "rel" "=" relationship )
link-extension =	token [	"=" ( token | quoted-string ) ]

relationship   =	sgml-name
		      |	( <"> sgml-name	*( SP sgml-name) <"> )

sgml-name      =	ALPHA *( ALPHA | DIGIT | "." | "-" )

URI-header    = "URI" ":" 1#( "<" URI ">" )


Keep-Alive-header = "Keep-Alive"	":" 0# keepalive-param

keepalive-param = param-name "="	value

