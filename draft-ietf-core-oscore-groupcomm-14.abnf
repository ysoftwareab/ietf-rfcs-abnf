IKM-Sender    = Sender Auth Cred | Recipient Auth Cred | Shared Secret
IKM-Recipient = Recipient Auth Cred | Sender Auth Cred | Shared Secret

   where:

   *  The Pairwise Sender Key is the AEAD key for processing outgoing
      messages addressed to endpoint X.

   *  The Pairwise Recipient Key is the AEAD key for processing incoming
      messages from endpoint X.

   *  HKDF is the OSCORE HKDF algorithm [RFC8613] from the Common
      Context.

   *  The Sender Key from the Sender Context is used as salt in the
      HKDF, when deriving the Pairwise Sender Key.

   *  The Recipient Key from the Recipient Context associated with
      endpoint X is used as salt in the HKDF, when deriving the Pairwise
      Recipient Key.

   *  Sender Auth Cred is the endpoint's own authentication credential
      from the Sender Context.

   *  Recipient Auth Cred is the endpoint X's authentication credential
      from the Recipient Context associated with the endpoint X.

   *  The Shared Secret is computed as a cofactor Diffie-Hellman shared
      secret, see Section 5.7.1.2 of [NIST-800-56A], using the Pairwise
      Key Agreement Algorithm.  The endpoint uses its private key from
      the Sender Context and the other endpoint's public key included in
      Recipient Auth Cred.  Note the requirement of validation of public
      keys in Section 12.15.  For X25519 and X448, the procedure is
      described in Section 5 of [RFC7748] using public keys mapped to
      Montgomery coordinates, see Section 2.4.2.

   *  IKM-Sender is the Input Keying Material (IKM) used in the HKDF for
      the derivation of the Pairwise Sender Key. IKM-Sender is the byte
      string concatenation of Sender Auth Cred, Recipient Auth Cred and
      the Shared Secret.  The authentication credentials Sender Auth
      Cred and Recipient Auth Cred are binary encoded as defined in
      Section 2.3.
   *  IKM-Recipient is the Input Keying Material (IKM) used in the HKDF
      for the derivation of the Pairwise Recipient Key. IKM-Recipient is
      the byte string concatenation of Recipient Auth Cred, Sender Auth
      Cred and the Shared Secret.  The authentication credentials
      Recipient Auth Cred and Sender Auth Cred are binary encoded as
      defined in Section 2.3.

   *  info and L are as defined in Section 3.2.1 of [RFC8613].  That is:

      -  The 'alg_aead' element of the 'info' array takes the value of
         AEAD Algorithm from the Common Context (see Section 2.1.1).

      -  L and the 'L' element of the 'info' array are the size of the
         key for the AEAD Algorithm from the Common Context (see
         Section 2.1.1), in bytes.

   If EdDSA asymmetric keys are used, the Edward coordinates are mapped
   to Montgomery coordinates using the maps defined in Sections 4.1 and
   4.2 of [RFC7748], before using the X25519 and X448 functions defined
   in Section 5 of [RFC7748].  For further details, see Section 2.4.2.
   ECC asymmetric keys in Montgomery or Weirstrass form are used
   directly in the key agreement algorithm without coordinate mapping.

   After establishing a partially or completely new Security Context
   (see Section 2.5 and Section 3.2), the old pairwise keys MUST be
   deleted.  Since new Sender/Recipient Keys are derived from the new
   group keying material (see Section 2.2), every group member MUST use
   the new Sender/Recipient Keys when deriving new pairwise keys.

   As long as any two group members preserve the same asymmetric keys,
   their Diffie-Hellman shared secret does not change across updates of
   the group keying material.

ENC_SIGNATURE = SIGNATURE XOR KEYSTREAM
KEYSTREAM = HKDF(salt, IKM, info, L)

info = [
     id : bstr,
     id_context : bstr,
     type : bool,
     L: uint
external_aad = bstr .cbor aad_array

aad_array = [
        oscore_version : uint,
        algorithms : [alg_aead : int / tstr / null,
                      alg_signature_enc : int / tstr / null,
                      alg_signature : int / tstr / null,
                      alg_pairwise_key_agreement : int / tstr / null],
        request_kid : bstr,
        request_piv : bstr,
        options : bstr,
        request_kid_context : bstr,
        OSCORE_option: bstr,
        sender_cred: bstr,
        gm_cred: bstr / null
SIGNATURE = ENC_SIGNATURE XOR KEYSTREAM

SIGNATURE = ENC_SIGNATURE XOR KEYSTREAM

SIGNATURE = ENC_SIGNATURE XOR KEYSTREAM

