TLS_RSA_WITH_CHACHA_SHA1                 = {0xTBD, 0xTBD}  {0xE5, 0x00}
TLS_ECDHE_RSA_WITH_CHACHA_SHA1           = {0xTBD, 0xTBD}  {0xE5, 0x01}
TLS_ECDHE_ECDSA_WITH_CHACHA_SHA1         = {0xTBD, 0xTBD}  {0xE5, 0x02}

TLS_PSK_WITH_CHACHA_SHA1                 = {0xTBD, 0xTBD}  {0xE5, 0x03}
TLS_ECDHE_PSK_WITH_CHACHA_SHA1           = {0xTBD, 0xTBD}  {0xE5, 0x04}
TLS_RSA_PSK_WITH_CHACHA_SHA1             = {0xTBD, 0xTBD}  {0xE5, 0x05}

TLS_DHE_PSK_WITH_CHACHA_SHA1             = {0xTBD, 0xTBD}  {0xE5, 0x06}
TLS_DHE_RSA_WITH_CHACHA_SHA1             = {0xTBD, 0xTBD}  {0xE5, 0x07}

   Note that Chacha requires a 64-bit nonce.  That nonce is updated on
   the encryption of every TLS record, and is set to be the 64-bit TLS
   record sequence number.  In case of DTLS the 64-bit nonce is formed
   as the concatenation of the 16-bit epoch with the 48-bit sequence
   number.

   The RSA, DHE_RSA, ECDHE_RSA, ECDHE_ECDSA, PSK, DHE_PSK, RSA_PSK,
   ECDHE_PSK key exchanges are performed as defined in [RFC5246],
   [RFC4492], and [RFC5489].

   The MAC algorithm used in the ciphersuites above is HMAC-SHA1
   [RFC6234].
TLS_RSA_WITH_CHACHA_SHA1                 = {0xTBD, 0xTBD}  {0xE5, 0x00}
TLS_ECDHE_RSA_WITH_CHACHA_SHA1           = {0xTBD, 0xTBD}  {0xE5, 0x01}
TLS_ECDHE_ECDSA_WITH_CHACHA_SHA1         = {0xTBD, 0xTBD}  {0xE5, 0x02}

TLS_PSK_WITH_CHACHA_SHA1                 = {0xTBD, 0xTBD}  {0xE5, 0x03}
TLS_ECDHE_PSK_WITH_CHACHA_SHA1           = {0xTBD, 0xTBD}  {0xE5, 0x04}
TLS_RSA_PSK_WITH_CHACHA_SHA1             = {0xTBD, 0xTBD}  {0xE5, 0x05}

TLS_DHE_PSK_WITH_CHACHA_SHA1             = {0xTBD, 0xTBD}  {0xE5, 0x06}
TLS_DHE_RSA_WITH_CHACHA_SHA1             = {0xTBD, 0xTBD}  {0xE5, 0x07}
