nonce-type = bstr .size (8..64)

nonce-claim = (
nonce => nonce-type / [ 2* nonce-type ]
ueid-type = bstr .size (7..33)

ueid-claim = (
ueid => ueid-type
sueids-type = {
       + tstr => ueid-type
sueids-claim = (
sueids => sueids-type
oemid-claim = (
oemid => bstr
chip-version-claim = (
chip-version => tstr
chip-version-scheme-claim = (
chip-version-scheme => $version-scheme
board-version-claim = (
board-version => tstr
board-version-scheme-claim = (
board-version-scheme => $version-scheme
device-version-claim = (
device-version => tstr
device-version-scheme-claim = (
device-version-scheme => $version-scheme
hardware-version-claims = (
       ? chip-version-claim,
       ? board-version-claim,
       ? device-version-claim,
       ? chip-version-scheme-claim,
       ? board-version-scheme-claim,
       ? device-version-scheme-claim,
security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
security-level-json-type =
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
security-level => security-level-cbor-type / security-level-json-type
secure-boot-claim = (
secure-boot => bool
debug-status-cbor-type = &(
       enabled: 0,
       disabled: 1,
       disabled-since-boot: 2,
       disabled-permanently: 3,
       disabled-fully-and-permanently: 4
debug-status-json-type =
       "enabled" /
       "disabled" /
       "disabled-since-boot" /
       "disabled-permanently" /
       "disabled-fully-and-permanently"

debug-status-claim = (
debug-status => debug-status-cbor-type / debug-status-json-type
location-type = {
latitude => number,
longitude => number,
latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
location-label => location-type
uptime-claim = (
uptime => uint
boot-seed-claim = (
boot-seed => bytes
intended-use-cbor-type = &(
       generic: 1,
       registration: 2,
       provisioning: 3,
       csr: 4,
       pop:  5
intended-use-json-type =
       "generic" /
       "registration" /
       "provisioning" /
       "csr" /
       "pop"

intended-use-claim = (
intended-use => intended-use-cbor-type / intended-use-json-type
oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
profile => ~uri / ~oid
manifests-claim = (
manifests => manifests-type
manifests-type = [+ $manifest-formats]

swevidence-claim = (
swevidence => swevidence-type
swevidence-type = [+ $swevidence-formats]

submods-part = (
submods => submods-type
submods-type = { + submod-type }


submod-type = (
submod-name => eat-claim-set / nested-token
nested-token = bstr / tstr;


submod-name = tstr



string-or-uri = tstr

time-int = #6.1(int)

issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7


eat-claim-set = {
    ? ueid-claim,
    ? sueids-claim,
    ? nonce-claim,
    ? oemid-claim,
    ? hardware-version-claims,
    ? security-level-claim,
    ? secure-boot-claim,
    ? debug-status-claim,
    ? location-claim,
    ? intended-use-claim,
    ? profile-claim,
    ? uptime-claim,
    ? manifests-claim,
    ? swevidence-claim,
    ? submods-part,
    * $$eat-extension,
eat-token = EAT_Tagged_Message / EAT_Untagged_Message / JWT_Message


EAT_Tagged_Message = #6.61(COSE_Tagged_Message) / #6.601(eat-claim-set)


EAT_Untagged_Message = COSE_Tagged_Message / COSE_Untagged_Message / UCCS_Untagged_Message
UCCS_Untagged_Message = eat-claim-set

string-or-uri = tstr

time-int = #6.1(int)
issuer = 1
subject = 2
audience = 3
expiration = 4
not-before = 5
issued-at = 6
cwt-id = 7

debug-status-cbor-type = &(
    enabled: 0,
    disabled: 1,
    disabled-since-boot: 2,
    disabled-permanently: 3,
    disabled-fully-and-permanently: 4
debug-status-json-type =
    "enabled" /
    "disabled" /
    "disabled-since-boot" /
    "disabled-permanently" /
    "disabled-fully-and-permanently"

debug-status-claim = (
debug-status => debug-status-cbor-type / debug-status-json-type
location-type = {
latitude => number,
longitude => number,
latitude = 1 / "latitude"
longitude = 2 / "longitude"
altitude = 3 / "altitude"
accuracy = 4 / "accuracy"
altitude-accuracy = 5 / "altitude-accuracy"
heading = 6 / "heading"
speed = 7 / "speed"
timestamp = 8 / "timestamp"
age = 9 / "age"

location-claim = (
location-label => location-type
nonce-type = bstr .size (8..64)

nonce-claim = (
nonce => nonce-type / [ 2* nonce-type ]
oemid-claim = (
oemid => bstr
chip-version-claim = (
chip-version => tstr
chip-version-scheme-claim = (
chip-version-scheme => $version-scheme
board-version-claim = (
board-version => tstr
board-version-scheme-claim = (
board-version-scheme => $version-scheme
device-version-claim = (
device-version => tstr
device-version-scheme-claim = (
device-version-scheme => $version-scheme
hardware-version-claims = (
    ? chip-version-claim,
    ? board-version-claim,
    ? device-version-claim,
    ? chip-version-scheme-claim,
    ? board-version-scheme-claim,
    ? device-version-scheme-claim,
secure-boot-claim = (
secure-boot => bool
security-level-cbor-type = &(
    unrestricted: 1,
    restricted: 2,
    secure-restricted: 3,
    hardware: 4
security-level-json-type =
    "unrestricted" /
    "restricted" /
    "secure-restricted" /
    "hardware"

security-level-claim = (
security-level => security-level-cbor-type / security-level-json-type
submods-part = (
submods => submods-type
submods-type = { + submod-type }


submod-type = (
submod-name => eat-claim-set / nested-token
nested-token = bstr / tstr;


submod-name = tstr


ueid-type = bstr .size (7..33)

ueid-claim = (
ueid => ueid-type
sueids-type = {
    + tstr => ueid-type
sueids-claim = (
sueids => sueids-type
intended-use-cbor-type = &(
    generic: 1,
    registration: 2,
    provisioning: 3,
    csr: 4,
    pop:  5
intended-use-json-type =
    "generic" /
    "registration" /
    "provisioning" /
    "csr" /
    "pop"

intended-use-claim = (
intended-use => intended-use-cbor-type / intended-use-json-type
oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

uptime-claim = (
uptime => uint
manifests-claim = (
manifests => manifests-type
manifests-type = [+ $manifest-formats]

swevidence-claim = (
swevidence => swevidence-type
swevidence-type = [+ $swevidence-formats]

oid = #6.4000(bstr) ; TODO: fill this in with correct CDDL from OID RFC

profile-claim = (
profile => ~uri / ~oid
boot-seed-claim = (
boot-seed => bytes
p = 1 - e^{-k^2/(2n)}

p = k^2 / 2n

t = 1 / ((k / 10) * p)

