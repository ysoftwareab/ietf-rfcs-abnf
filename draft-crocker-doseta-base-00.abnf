WSP  =  SP / HTAB
LWSP =  *(WSP / CRLF WSP)
FWS  =  [*WSP CRLF] 1*WSP

hyphenated-word =  ALPHA
                      [ *(ALPHA / DIGIT / "-")
                      (ALPHA / DIGIT) ]
ALPHADIGITPS    =  (ALPHA / DIGIT / "+" / "/")
base64string    =  ALPHADIGITPS *([FWS] ALPHADIGITPS)
                      [ [FWS] "=" [ [FWS] "=" ] ]
hdr-name        =  field-name
qp-hdr-value    =  D-quoted-printable
                           ; with "|" encoded

D-quoted-printable =  *(FWS / hex-octet / D-safe-char)
                            ; hex-octet is from RFC2045
D-safe-char        =  %x21-3A / %x3C / %x3E-7E
                            ; '!' - ':', '<', '>' - '~'
                            ; Characters not listed as "mail-safe"
                            ; in [RFC2049] are also not
                            ; recommended.

tag-list  =  tag-spec 0*( ";" tag-spec ) [ ";" ]
tag-spec  =  [FWS] tag-name [FWS] "=" [FWS] tag-value [FWS]
tag-name  =  ALPHA 0*ALNUMPUNC
tag-value =  [ tval 0*( 1*(WSP / FWS) tval ) ]
                   ; WSP and FWS prohibited at beginning and end
tval      =  1*VALCHAR
VALCHAR   =  %x21-3A / %x3C-7E
                   ; EXCLAMATION to TILDE except SEMICOLON
ALNUMPUNC =  ALPHA / DIGIT / "_"

Tag=value pairs that represent the default value MAY be included to
public-key = D-find-key(q-val, d-val, s-val)
      where:

      q-val:   The type of the lookup, as specified in the "q" parameter
         (Section 4.2)

      d-val:   The domain of the signature, as specified in the "d"
         parameter (Section 4.2)
      s-val:   The selector of the lookup as specified in the "s"
         parameter (Section 4.2)

      D-find-key:   A function that uses q-val to determine the specific
         details for accessing the desired stored Key record.

selector =  sub-domain *( "." sub-domain )

dns-record =  s "._domainkey." d
      where:

      s:    is the selector of the lookup as specified in the "s"
         parameter (Section 4.2)

      d:    is the domain of the signature, as specified in the "d"
         parameter (Section 4.2)

v=    Version of the DOSETA key record (plain-text; RECOMMENDED,
         default is "DKIM1").  If specified, this tag MUST be set to
         "DKIM1" (without the quotes).  This tag MUST be the first tag
         in the record.  Records beginning with a "v" parameter with any
         other value MUST be discarded.  Note that verifiers MUST do a
         string comparison on this value; for example, "DKIM1" is not
         the same as "DKIM1.0".
            ABNF:
key-v-tag    = %x76 [FWS] "=" [FWS] %x44 %x4B %x49 %x4D %x31

         NOTE:   The version string "DKIM1" is retained from the
            original DKIM specification, in order to preserve the
            installed base of records.  In addition, there is no
            functional benefit in defining a new string, since the key
            record is not application-specific.  Another use of the
            string is to distinguish the Domainkeys use of a TXT RR from
            other, unrelated uses.

k=    Key type (plain-text; OPTIONAL, default is "rsa").  Signers
         and verifiers MUST support the "rsa" key type.  The "rsa" key
         type indicates that an ASN.1 DER-encoded [ITU-X660-1997]
         RSAPublicKey [RFC3447] (see Sections Section 3.5 and A.1.1) is
         being used in the "p" parameter.  (Note: the "p" parameter
         further encodes the value using the base64 algorithm.)
         Unrecognized key types MUST be ignored.





            ABNF:
key-k-tag        = %x76 [FWS] "=" [FWS] key-k-tag-type
key-k-tag-type   = "rsa" / x-key-k-tag-type
x-key-k-tag-type = hyphenated-word   ; for future extension

n=    Notes that might be of interest to a human (qp-section;
         OPTIONAL, default is empty).  No interpretation is made by any
         program.  This tag should be used sparingly in any key server
         mechanism that has space limitations (notably DNS).  This is
         intended for use by administrators, not end users.





            ABNF:
key-n-tag    = %x6e [FWS] "=" [FWS] qp-section

p=    Public-key data (base64; REQUIRED).  An empty value means
         that this public key has been revoked.  The syntax and
         semantics of this tag value before being encoded in base64 are
         defined by the "k" parameter.
            ABNF:
key-p-tag    = %x70 [FWS] "=" [ [FWS] base64string]

         NOTE:   If a private key has been compromised or otherwise
            disabled (for example, an outsourcing contract has been
            terminated), a signer might want to explicitly state that it
            knows about the selector, but also have all queries using
            that selector result in a failed verification.  Verifiers
            SHOULD ignore any DOSETA-Signature header fields with a
            selector referencing a revoked key.

         NOTE:   A base64string is permitted to include white space
            (FWS) at arbitrary places; however, any CRLFs MUST be
            followed by at least one WSP character.  Implementors and
            administrators are cautioned to ensure that selector TXT
            records conform to this specification.


v=    Version (MUST be included).  This tag defines the version of
         this specification that applies to the signature record.  It
         MUST have the value "1".  Note that verifiers MUST do an exact
         string comparison on this value; for example, "1" is not the
         same as "1.0".



            ABNF:
sig-v-tag       = %x76 [FWS] "=" [FWS] "1"

         NOTE:   DOSETA-Signature version numbers are expected to
            increase arithmetically as new versions of this
            specification are released.

a=    The algorithm used to generate the signature (plain-text;
         REQUIRED).  Verifiers MUST support "rsa-sha1" and "rsa-sha256";
         signers SHOULD sign using "rsa-sha256".  See Section 4.1 for a
         description of algorithms.





            ABNF:

sig-a-tag       = %x61 [FWS] "=" [FWS] sig-a-tag-alg
sig-a-tag-alg   = sig-a-tag-k "-" sig-a-tag-h
sig-a-tag-k     = "rsa" / x-sig-a-tag-k
sig-a-tag-h     = "sha1" / "sha256" / x-sig-a-tag-h
x-sig-a-tag-k   = ALPHA *(ALPHA / DIGIT)
                        ; for later extension
x-sig-a-tag-h   = ALPHA *(ALPHA / DIGIT)
                        ; for later extension

b=    The signature data (base64; REQUIRED).  Whitespace is
         ignored in this value and MUST be ignored when reassembling the
         original signature.  In particular, the signing process can
         safely insert FWS in this value in arbitrary places to conform
         to line-length limits.  See Signer Actions (Section 4.4) for
         how the signature is computed.
            ABNF:
sig-b-tag       = %x62 [FWS] "=" [FWS] sig-b-tag-data
sig-b-tag-data  = base64string

bh=    The hash of the canonicalized Content (body), as limited by
         the "l" parameter (base64; REQUIRED).  Whitespace is ignored in
         this value and MUST be ignored when reassembling the original
         signature.  In particular, the signing process can safely
         insert FWS in this value in arbitrary places to conform to
         line-length limits.  See Section 4.3 for how the Content hash
         is computed.



            ABNF:
sig-bh-tag      = %x62 %x68 [FWS] "=" [FWS] sig-bh-tag-data
sig-bh-tag-data = base64string

c=    Data canonicalization (plain-text; OPTIONAL, default is
         "simple/simple").  This tag informs the verifier of the type of
         canonicalization used to prepare the message for signing.  It
         consists of two names separated by a "slash" (%d47) character,
         corresponding to the header and Content canonicalization
         algorithms respectively:



            ABNF:
sig-bh-tag      = %x63 [FWS] "=" [FWS] sig-c-header "/" sig-c-content
            where:

            sig-c-header:   A value from Header Canonicalization IANA
               registry defined in [DKIMSign]

            sig-c-content:   A value from Message Canonicalization IANA
               registry defined in [DKIMSign]

         These algorithms are described in Section 3.2.  If only one
         algorithm is named, that algorithm is used for the header and
         "simple" is used for the Content.  For example, "c=relaxed" is
         treated the same as "c=relaxed/simple".
            ABNF:
sig-c-tag       = %x63 [FWS] "=" [FWS] sig-c-tag-alg
                     ["/" sig-c-tag-alg]
sig-c-tag-alg   = "simple" / "relaxed" / x-sig-c-tag-alg
x-sig-c-tag-alg = hyphenated-word    ; for later extension

d=    The DDI doing the signing (plain-text; REQUIRED).  Hence,
         the DDI value is used to form the query for the public key.
         The DDI MUST correspond to a valid DNS name under which the
         DOSETA key record is published.  The conventions and semantics
         used by a signer to create and use a specific DDI are outside
         the scope of the DOSETA Signing specification, as is any use of
         those conventions and semantics.  When presented with a
         signature that does not meet these requirements, verifiers MUST
         consider the signature invalid.

         Internationalized domain names MUST be encoded as described in
         [RFC5890].





            TEMPLATE:   (Semantics) The service incorporating DOSETA
               MUST define the semantics of a signature.





            ABNF:

sig-d-tag       = %x64 [FWS] "=" [FWS] domain-name
domain-name     = sub-domain 1*("." sub-domain)
                        ; from RFC 5321 Domain,
                        ; but excluding address-literal

h=    Signed Header fields (plain-text, but see description;
         REQUIRED).  A colon-separated list of header field names that
         identify the Header fields presented to the signing algorithm.
         The field MUST contain the complete list of Header fields in
         the order presented to the signing algorithm.  The field MAY
         contain names of Header fields that do not exist when signed;
         nonexistent Header fields do not contribute to the signature
         computation (that is, they are treated as the null input,
         including the header field name, the separating colon, the
         header field value, and any CRLF terminator).  The field MUST
         NOT include the DOSETA Signature header field that is being
         created or verified, but might include others.  Folding
         whitespace (FWS) MAY be included on either side of the colon
         separator.  Header field names MUST be compared against actual
         header field names in a case-insensitive manner.  This list
         MUST NOT be empty.  See Section 4.4.3 for a discussion of
         choosing Header fields to sign.





            ABNF:
sig-h-tag       = %x68 [FWS] "=" [FWS] hdr-name
                      0*( [FWS] ":" [FWS] hdr-name )

         By "signing" Header fields that do not actually exist, a signer
         can prevent insertion of those Header fields before
         verification.  However, since a signer cannot possibly know all
         possible Header fields that might be created in the future, the
         security of this solution is not total.

         The exclusion of the header field name and colon as well as the
         header field value for non-existent Header fields prevents an
         attacker from inserting an actual header field with a null
         value.

q=    A colon-separated list of query methods used to retrieve the
         public key (plain-text; OPTIONAL, default is "dns/txt").  Each
         query method is of the form "type[/options]", where the syntax
         and semantics of the options depend on the type and specified
         options.  If there are multiple query mechanisms listed, the
         choice of query mechanism MUST NOT change the interpretation of
         the signature.  Implementations MUST use the recognized query
         mechanisms in the order presented.  Unrecognized query
         mechanisms MUST be ignored.

         Currently, the only valid value is "dns/txt", which defines the
         DNS TXT record lookup algorithm described elsewhere in this
         document.  The only option defined for the "dns" query type is
         "txt", which MUST be included.  Verifiers and signers MUST
         support "dns/txt".
            ABNF:
sig-q-tag        = %x71 [FWS] "=" [FWS] sig-q-tag-method
                         *([FWS] ":" [FWS] sig-q-tag-method)
sig-q-tag-method = "dns/txt" / x-sig-q-tag-type
                      ["/" x-sig-q-tag-args]
x-sig-q-tag-type = hyphenated-word  ; for future extension
x-sig-q-tag-args = qp-hdr-value

s=    The selector subdividing the namespace for the "d=" (domain)
         tag (plain-text; REQUIRED).





            ABNF:
sig-s-tag    = %x73 [FWS] "=" [FWS] selector

t=    Signature Timestamp (plain-text unsigned decimal integer;
         RECOMMENDED, default is an unknown creation time).  The time
         that this signature was created.  The format is the number of
         seconds since 00:00:00 on January 1, 1970 in the UTC time zone.
         The value is expressed as an unsigned integer in decimal ASCII.
         This value is not constrained to fit into a 31- or 32-bit
         integer.  Implementations SHOULD be prepared to handle values
         up to at least 10^12 (until approximately AD 200,000; this fits
         into 40 bits).  To avoid denial-of-service attacks,
         implementations MAY consider any value longer than 12 digits to
         be infinite.  Leap seconds are not counted.  Implementations
         MAY ignore signatures that have a timestamp in the future.





            ABNF:
sig-t-tag    = %x74 [FWS] "=" [FWS] 1*12DIGIT

x=    Signature Expiration (plain-text unsigned decimal integer;
         RECOMMENDED, default is no expiration).  The format is the same
         as in the "t" parameter, represented as an absolute date, not
         as a time delta from the signing timestamp.  The value is
         expressed as an unsigned integer in decimal ASCII, with the
         same constraints on the value in the "t=" tag.  Signatures MAY
         be considered invalid if the verification time at the verifier
         is past the expiration date.  Ideally verification time is when
         a message is first received at the administrative domain of the
         verifier; otherwise the current time SHOULD be used.  The value
         of the "x" parameter MUST be greater than the value of the "t"
         parameter if both are present.



         NOTE:   The "x" parameter is not intended as an anti-replay
            defense.

         NOTE:   Due to clock drift, the receiver's notion of when to
            consider the signature expired might not match exactly when
            the sender is expecting.  Receivers MAY add a 'fudge factor'
            to allow for such possible drift.



            ABNF:
sig-x-tag    = %x78 [FWS] "=" [FWS]
                  1*12DIGIT

content-hash =  hash-alg (canon-content, l-param)
data-hash    =  hash-alg (h-headers, D-SIG, content-hash)
signature    =  sig-alg (d-domain, selector, data-hash)

