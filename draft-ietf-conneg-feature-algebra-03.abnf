Pen-1=black, pen-2=red, etc.

pix-x=n      (Image size, in pixels)
pix-y=m

res-x=n      (Image resolution, pixels per inch)
res-y=m

media= screen/screen-paged/stationary/transparency/
            envelope/envelope-plain/envelope-window/
            continuous-long/continuous-short
            tab-stock/multi-part-form/labels/multi-layer
papersize= na-letter|iso-A4|iso-B4|iso-A3|na-legal

color=n      (Colour depth in bits)
grey=n       (Grey scale depth in bits)

tiff=S/F/J/C/L/M

Qvalue=1.

Qvalue=0.9.

Qvalue=0.8.

filter     =  "(" filtercomp *( ";" parameter ) )"
parameter  =  "q" "=" qvalue
                /  ext-param "=" ext-value
qvalue     =  ( "0" [ "." 0*3DIGIT ] )
                /  ( "1" [ "." 0*3("0") ] )
ext-param  =  ALPHA *( ALPHA / DIGIT / "-" )
ext-value  =  <parameter value, according to the named parameter>
filtercomp =  and / or / not / item
and        =  "&" filterlist
or         =  "|" filterlist
not        =  "!" filter
filterlist =  1*filter
item       =  simple / set / ext-pred
set        =  attr "=" "[" setentry *( "," setentry ) "]"
setentry   =  value "/" range
range      =  value ".." value
simple     =  attr filtertype value
filtertype =  equal / greater / less
equal      =  "="
approx     =  "~="
greater    =  ">="
less       =  "<="
attr       =  ftag
value      =  fvalue
ftag       =  <Feature tag, as defined in [3]>
fvalue     =  number / token / string
number     =  integer / rational
integer    =  1*DIGIT
rational   =  1*DIGIT "." 1*DIGIT
token      =  ALPHA *( ALPHA / DIGIT / "-" )
string     =  DQUOTE *(%x20-21 / %x23-7E) DQUOTE
                   ; quoted string of SP and VCHAR without DQUOTE
ext-pred   =  <Extension constraint predicate, not defined here>

named-pred =  "(" fname *pname ")" ":-" filter
fname      =  ftag        ; Feature predicate name
pname      =  token       ; Formal parameter name

ext-pred   =  fname *param
param      =  expr

filter     =/ "(" filtercomp *( ";" parameter ) ")"
                   "where" 1*( named-pred ) "end"

filter     =  orlist
orlist     =  "(" "|" andlist ")" / term
andlist    =  "(" "&" termlist ")" / term
termlist   =  1*term
term       =  "(" "!" simple ")" / simple

T = [ E1, E2, ... En ]  -->  (| (T=[E1]) (T=[E2]) ... (T=[En]) )
