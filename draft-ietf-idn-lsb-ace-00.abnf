n = reorder(n)   //  ******** ADDED **********

c1 = *s1;
c2 = *s2;
SBase = 0xAC00, LBase = 0x1100, VBase = 0x1161, TBase = 0x11A7,
LCount = 19, VCount = 21, TCount = 28, NCount, SCount;
idx  = idx - (SCount -0x400);
zIndex  = zIndex - 0x400;
T = JAMO_T_FREQ[(zIndex / MCount)][1];
V = JAMO_V_FREQ[(zIndex % MCount) / LCount][1];
L = JAMO_L_FREQ[(zIndex % LCount)][1];
prev = 0x60;
max_out = *output_size;
 
codept = input[in];

codept = reorder(codept); // by LSB

diff = prev^codept;


shift = uppercase_flags && uppercase_flags[in] ? 32 : 0;
prev = codept;  
prev = 0x60;
max_out = *output_length;

q = base32_decode(c);
diff = (diff << 4) | (q & 0xF);
prev = prev ^ diff;
scratch_size = ++in;
status = dude_encode(out, output, uppercase_flags,
                       &scratch_size, scratch_space);
unicode_max_length = 256,
ace_max_size = 256,
test_case_sensitivity = case_insensitive
                          /* suitable for host names */
input_length = 0;

r = scanf("%2s%lx", uplus, &codept);
output_size = ace_max_size;
status = dude_encode(input_length, input, uppercase_flags,
                         &output_size, output);
i = *p;
r = puts(output);
input_length = strlen(input);
pp = strchr(ldh_ascii, *p);
output_length = unicode_max_length;
status = dude_decode(test_case_sensitivity, scratch, input,
                         &output_length, output, uppercase_flags);
r = printf("%s+%04lX\n",
                 uppercase_flags[i] ? "U" : "u",
                 (unsigned long) output[i] );
