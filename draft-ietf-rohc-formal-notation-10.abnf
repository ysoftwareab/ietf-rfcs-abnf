field   =:=   encoding_method;

ctrl_field_2 =:= encoding_method_2;
field_1      =:= encoding_method_1;
field_2      =:= encoding_method_2;
field_3      =:= encoding_method_3;
ctrl_field_1 =:= encoding_method_4;
field_2      =:= encoding_method_3;
field_3      =:= encoding_method_4;
ctrl_field_2 =:= encoding_method_5;
ctrl_field_3 =:= encoding_method_6;
header_length  =:= uncompressed_value(4, 5);
version        =:= uncompressed_value(4, 4);
reserved       =:= uncompressed_value(1, 0);
offset         =:= uncompressed_value(13, 0);
more_fragments =:= uncompressed_value(1, 0);

src_addr       =:= irregular(32);
dest_addr      =:= irregular(32);
length         =:= irregular(16);
id             =:= irregular(16);
ttl            =:= irregular(8);
protocol       =:= irregular(8);
tos            =:= irregular(6);
ecn            =:= irregular(2);
dont_frag      =:= irregular(1);

checksum       =:= inferred_ip_v4_header_checksum [ 0 ];
SOME_CONSTANT = 3;

tcp_list_length =:= (data_offset + 20) / 4;

o  ==, !=, for equality and its negative. "x == y" returns true if x
      is equal to y.  Returns false otherwise. "x != y" returns true if
      x is not equal to y.  Returns false otherwise.
field     =:= uncompressed_value(<uncomp_length_expression>,
                                      <uncomp_value_expression>);

version   =:=   uncompressed_value(4, 6);

padding =:= uncompressed_value(nbits - 8, 0);

field     =:= compressed_value(<comp_length_expression>,
                                    <comp_value_expression>);

pad_to_octet_boundary      =:=   compressed_value(3, 0);

discriminator     =:=   '01101';

discriminator     =:=   compressed_value(5, 13);

field         =:=   irregular(<expression>);

tcp_checksum  =:=   irregular(16);

field            =:=   static;
src_port  =:=   static;

field  =:=   lsb(<num_lsbs_param>, <offset_param>);

offset_param = 0 then the field value can only stay the same or
offset_param = -1 then it can only increase, whereas if offset_param
tcp_sequence_number   =:=   lsb(14, 8192);

field   =:=   crc(<num_bits>, <bit_pattern>, <initial_value>,
                       <block_data_value>, <block_data_length>);

bit_pattern = 0xe0

bit_pattern = 0x79

bit_pattern = 0x06

crc_field =:= crc(3, 0x6, 0xF, THIS.CVALUE, THIS.CLENGTH);

field_2 =:= uncompressed_value(12, 9); //  0 bits
field_1 =:= irregular(4);              //  4 bits
field_2 =:= uncompressed_value(12, 9);  // 12 bits
field_1 =:= irregular(4);              //  4 bits
variable_bits =:= irregular(variable_length);
constant_bits =:= static;
field_1 =:= uncompressed_value(4, 1);
field_2 =:= uncompressed_value(4, 2);
field_3 =:= lsb(3, -1);
field_4 =:= irregular(3);      // set ULENGTH to 3
field_4 =:= '1010';            // set ULENGTH to zero
field_1 =:= static;
field_2 =:= uncompressed_value(4, 2);
field_3 =:= lsb(4, 0);
discriminator =:= '0'; // 1 bit
discriminator =:= '1';           //  1 bit
field_1       =:= irregular(4);  //  4 bits
field_3       =:= irregular(24); // 24 bits
field_1 =:= some_encoding;
scaled_field =:= lsb(4, 0);
field_3 =:= lsb(16, 16)  [ 26 ];

field_3 =:= lsb(16, 16); ENFORCE(field_3.ULENGTH == 26);

version_no  =:= irregular(2);
type        =:= irregular(2);
flow_id     =:= irregular(4);
sequence_no =:= irregular(4);
flag_bits   =:= irregular(4);
version_no  =:= irregular(2);
type        =:= irregular(2);
flow_id     =:= irregular(4);
sequence_no =:= irregular(4);
flag_bits   =:= irregular(4);
version_no    =:= uncompressed_value(2, 1)  [ 0 ];
type          =:= irregular(2)              [ 2 ];
flow_id       =:= irregular(4)              [ 4 ];
sequence_no   =:= irregular(4)              [ 4 ];
abc_flag_bits =:= irregular(3)              [ 3 ];
reserved_flag =:= uncompressed_value(1, 0)  [ 0 ];
version_no    =:= uncompressed_value(2, 1);
type          =:= irregular(2);
flow_id       =:= static;
sequence_no   =:= lsb(0, -3);
abc_flag_bits =:= irregular(3);
reserved_flag =:= uncompressed_value(1, 0);
version_no    =:= uncompressed_value(2, 1) [ 2 ];
reserved_flag =:= uncompressed_value(1, 0) [ 1 ];
discriminator =:= '0'          [ 1 ];
type          =:= irregular(2) [ 2 ];
flow_id       =:= irregular(4) [ 4 ];
sequence_no   =:= irregular(4) [ 4 ];
abc_flag_bits =:= irregular(3) [ 3 ];
discriminator =:= '1'          [ 1 ];
type          =:= irregular(2) [ 2 ];
flow_id       =:= static       [ 0 ];
sequence_no   =:= lsb(2, -3)   [ 2 ];
abc_flag_bits =:= static       [ 0 ];
version_no    =:= uncompressed_value(2, 1) [ 2 ];
reserved_flag =:= uncompressed_value(1, 0) [ 1 ];
discriminator =:= '00'         [ 2 ];
type          =:= irregular(2) [ 2 ];
flow_id       =:= irregular(4) [ 4 ];
sequence_no   =:= irregular(4) [ 4 ];
abc_flag_bits =:= irregular(3) [ 3 ];
discriminator =:= '01'                     [ 2 ];
type          =:= irregular(2)             [ 2 ];
flow_id       =:= static                   [ 0 ];
sequence_no   =:= lsb(2, -3)               [ 2 ];
abc_flag_bits =:= uncompressed_value(3, 7) [ 3 ];
discriminator =:= '1'          [ 1 ];
type          =:= irregular(2) [ 2 ];
flow_id       =:= static       [ 0 ];
sequence_no   =:= lsb(2, -3)   [ 2 ];
abc_flag_bits =:= static       [ 0 ];
version_no    =:= uncompressed_value(2, 1) [ 2 ];
reserved_flag =:= uncompressed_value(1, 0) [ 1 ];
type          =:= irregular(2);
flow_id       =:= static;
sequence_no   =:= lsb(2, -3);
discriminator =:= '00'         [ 2 ];
flow_id       =:= irregular(4) [ 4 ]; // Overrides default
sequence_no   =:= irregular(4) [ 4 ]; // Overrides default
abc_flag_bits =:= irregular(3) [ 3 ];
discriminator =:= '01' [ 2 ];
abc_flag_bits =:= uncompressed_value(3, 7);
discriminator =:= '1' [ 1 ];
abc_flag_bits =:= static;
version_no    =:= uncompressed_value(2, 1) [ 2 ];
reserved_flag =:= uncompressed_value(1, 0) [ 1 ];
type          =:= irregular(2);
flow_id       =:= static;
scaled_seq_no =:= lsb(1, -1);
discriminator =:= '00'         [ 2 ];
flow_id       =:= irregular(4) [ 4 ];
scaled_seq_no =:= irregular(4) [ 4 ]; // Overrides default
abc_flag_bits =:= irregular(3) [ 3 ];
discriminator =:= '01' [ 2 ];
abc_flag_bits =:= uncompressed_value(3, 7);
discriminator =:= '1' [ 1 ];
abc_flag_bits =:= static;
version_no    =:= uncompressed_value(2, 1) [ 2 ];
reserved_flag =:= uncompressed_value(1, 0) [ 1 ];
scaled_seq_no =:= uncompressed_value
                             (4, (((15 - sequence_no.UVALUE) % 3)
                                  * 16 + sequence_no.UVALUE) / 3);
type          =:= irregular(2);
scaled_seq_no =:= lsb(1, -1);
flow_id       =:= static;
discriminator =:= '00'         [ 2 ];
flow_id       =:= irregular(4) [ 4 ];
scaled_seq_no =:= irregular(4) [ 4 ];
abc_flag_bits =:= irregular(3) [ 3 ];
discriminator =:= '01'                      [ 2 ];
type          =:= uncompressed_value(2, 3)  [ 0 ];
abc_flag_bits =:= uncompressed_value(3, 7)  [ 0 ];
discriminator =:= '1'    [ 1 ];
abc_flag_bits =:= static [ 0 ];
