

Network Working Group                                          M.T. Rose
Internet-Draft                                    Invisible Worlds, Inc.
Expires: March 26, 2001                               September 25, 2000


                  Mapping the BEEP Framework onto TCP
                     draft-ietf-beep-tcpmapping-02

Status of this Memo

   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC2026.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups. Note that
   other groups may also distribute working documents as
   Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six
   months and may be updated, replaced, or obsoleted by other documents
   at any time. It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on March 26, 2001.

Copyright Notice

   Copyright (C) The Internet Society (2000). All Rights Reserved.

Abstract

   This memo describes how a BEEP session is mapped onto a single TCP
   connection.













Rose                     Expires March 26, 2001                 [Page 1]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


Table of Contents

   1.    Introduction . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.    Session Management . . . . . . . . . . . . . . . . . . . . .  4
   3.    Message Exchange . . . . . . . . . . . . . . . . . . . . . .  5
   3.1   Flow Control . . . . . . . . . . . . . . . . . . . . . . . .  6
   3.1.1 Channel Creation . . . . . . . . . . . . . . . . . . . . . .  6
   3.1.2 Sending Messages . . . . . . . . . . . . . . . . . . . . . .  7
   3.1.3 Processing SEQ Frames  . . . . . . . . . . . . . . . . . . .  8
   3.1.4 Use of Flow Control  . . . . . . . . . . . . . . . . . . . .  9
         References . . . . . . . . . . . . . . . . . . . . . . . . . 10
         Author's Address . . . . . . . . . . . . . . . . . . . . . . 10
   A.    Changes from draft-ietf-beep-tcpmapping-01 . . . . . . . . . 11
   B.    Changes from draft-ietf-beep-tcpmapping-00 . . . . . . . . . 12
   C.    Changes from draft-mrose-bxxp-tcpmapping-01  . . . . . . . . 13
   D.    Changes from draft-mrose-bxxp-tcpmapping-00  . . . . . . . . 14
   E.    Acknowledgements . . . . . . . . . . . . . . . . . . . . . . 15
         Full Copyright Statement . . . . . . . . . . . . . . . . . . 16

































Rose                     Expires March 26, 2001                 [Page 2]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


1. Introduction

   This memo describes how a BEEP[1] session is mapped onto a single
   TCP[2] connection. Refer to Section 2.5 of [1] for an explanation of
   the mapping requirements.














































Rose                     Expires March 26, 2001                 [Page 3]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


2. Session Management

   The mapping of BEEP session management onto the TCP service is
   straight-forward.

   A BEEP session is established when a TCP connection is established
   between two BEEP peers: 

   o  the BEEP peer that issues a passive OPEN call is termed the
      listener; and,

   o  the BEEP peer that issues an active OPEN call is termed the
      initiator.

   A BEEP session is released when either peer issues the CLOSE call,
   and the TCP connection is subsequently closed.

   A BEEP session is terminated when either peer issues the ABORT call,
   and the TCP connection is subsequently aborted.
































Rose                     Expires March 26, 2001                 [Page 4]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


3. Message Exchange

   The mapping of BEEP exchanges onto the TCP service is less
   straight-forward.

   Messages are reliably sent and received using the SEND and RECEIVE
   calls. (This also provides ordered delivery of messages on the same
   channel.)

   Although TCP imposes flow control on a per-connection basis, if
   multiple channels are simultaneously in use on a BEEP session, BEEP
   must provide a mechanism to avoid starvation and deadlock. To
   achieve this, BEEP re-introduces a mechanism used by the TCP:
   window-based flow control -- each channel has a sliding window that
   indicates the number of payload octets that a peer may transmit
   before receiving further permission.



































Rose                     Expires March 26, 2001                 [Page 5]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


3.1 Flow Control

   Recall from Section 2.2.1.2 of [1] that every payload octet sent in
   each direction on a channel has an associated sequence number.
   Numbering of payload octets within a data frame is such that the
   first payload octet is the lowest numbered, and the following
   payload octets are numbered consecutively.

   The actual sequence number space is finite, though very large,
   ranging from 0..4294967295 (2**32 - 1). Since the space is finite,
   all arithmetic dealing with sequence numbers is performed modulo
   2**32. This unsigned arithmetic preserves the relationship of
   sequence numbers as they cycle from 2**32 - 1 to 0 again.

3.1.1 Channel Creation

   When a channel is created, the sequence number associated with the
   first payload octet of the first data frame is 0, and the initial
   window size for that channel is 4096 octets. After channel creation,
   a BEEP peer may update the window size by sending a SEQ frame
   (Section 3.1.3).

   If a BEEP peer is asked to create a channel and it is unable to
   allocate at least 4096 octets for that channel, it must decline
   creation of the channel, as specified in Section 2.3.1.2 of [1].
   Similarly, during establishment of the BEEP session, if the BEEP
   peer acting in the listening role is unable to allocate at least
   4096 octets for channel 0, then it must return a negative reply, as
   specified in Section 2.4 of [1]. instead of a greeting.






















Rose                     Expires March 26, 2001                 [Page 6]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


3.1.2 Sending Messages

   Before a message is sent, the sending BEEP peer must ensure that the
   size of the payload is within the window advertised by the receiving
   BEEP peer. If not, it has three choices: 

   o  if the window would allow for at least one payload octet to be
      sent, the BEEP peer may segment the message and start by sending
      a smaller data frame (up to the size of the remaining window);

   o  the BEEP peer may delay sending the message until the window
      becomes larger; or,

   o  the BEEP peer may signal to its application that it is unable to
      send the message, allowing the application to try again at a
      later time (or perhaps signaling its application when a larger
      window is available.)

   The choice is implementation-dependent, although it is recommended
   that the application using BEEP be given a mechanism for influencing
   the decision.






























Rose                     Expires March 26, 2001                 [Page 7]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


3.1.3 Processing SEQ Frames

   As an application accepts responsibility for incoming data frames,
   its BEEP peer should send SEQ frames to advertise a new window.

   The ABNF[3] for a SEQ frame is:

       seq        = "SEQ" SP channel SP ackno SP window CR LF

       ackno      = seqno

       window     = size

       ; channel, seqno, and size are defined in Section 2.2.1 of [1].

   The SEQ frame has three parameters: 

   o  a channel number;

   o  an acknowledgement number, that indicates the value of the next
      sequence number that the sender is expecting to receive on this
      channel; and,

   o  a window size, that indicates the number of payload octets
      beginning with the one indicated by the acknowledgement number
      that the sender is expecting to receive on this channel.

   A single space character (decimal code 32, " ") separates each
   component. The SEQ frame is terminated with a CRLF pair.

   When a SEQ frame is received, if any of the channel number,
   acknowledgement number, or window size cannot be determined or is
   invalid, then the BEEP session is terminated without generating a
   response, and it is recommended that a diagnostic entry be logged.

















Rose                     Expires March 26, 2001                 [Page 8]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


3.1.4 Use of Flow Control

   The key to successful use of flow control within BEEP is to balance
   performance and fairness: 

   o  large messages should be segmented into multiple frames (e.g.,
      the ideal BEEP segment size should be no larger than TCP's
      negotiated maximum segment size minus some small constant);

   o  frames for different channels with traffic ready to send should
      be sent in a round-robin fashion; and,

   o  each time a message is received, a SEQ frame should be sent
      whenever the window size is at least one half of the available
      buffer space (if the transport service presents multiple messages
      to a BEEP peer simultaneously, then a single consolidating SEQ
      frame may be sent).

   In order to avoid pathological interactions with the transport
   service, it is important that a BEEP peer advertise windows based on
   available buffer space, to allow data to be read from the transport
   service as soon as available. Further, SEQ frames for a channel
   should have higher priority than messages for that channel.

   Implementations may wish to provide queue management facilities to
   the application using BEEP, e.g., channel priorities, (relative)
   buffer allocations, and so on. In particular, implementations should
   not allow a given channel to monopolize the underlying transport
   window (e.g., slow readers should get small windows).

   In addition, where possible, implementations should support
   transport layer APIs that convey congestion information.

   Finally, implementors should follow the guidelines given in the
   relevant portions of RFC1122[4] that deal with flow control (and
   bear in mind that issues such as retransmission, while they interact
   with flow control in TCP, are not applicable to this memo). For
   example, Section 4.2.2.16 of RFC1122[4] indicates that a "receiver
   SHOULD NOT shrink the window, i.e., move the right window edge to
   the left" and then discusses the impact of this rule on
   unacknowledged data. In the context of mapping BEEP onto a single
   TCP connection, only the portions concerning flow control should be
   implemented.








Rose                     Expires March 26, 2001                 [Page 9]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


References

   [1]  Rose, M.T., "The Blocks Extensible Exchange Protocol
        Framework", draft-ietf-beep-framework-02 (work in progress),
        September 2000.

   [2]  Postel, J., "Transmission Control Protocol", RFC 793, STD 7,
        Sep 1981.

   [3]  Crocker, D. H. and P. Overell, "Augmented BNF for Syntax
        Specifications: ABNF", RFC 2234, November 1997.

   [4]  Braden, R.T., "Requirements for Internet hosts - communication
        layers", RFC 1122, STD 3, Oct 1989.


Author's Address

   Marshall T. Rose
   Invisible Worlds, Inc.
   1179 North McDowell Boulevard
   Petaluma, CA  94954-6559
   US

   Phone: +1 707 789 3700
   EMail: mrose@invisible.net
   URI:   http://invisible.net/
























Rose                     Expires March 26, 2001                [Page 10]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


Appendix A. Changes from draft-ietf-beep-tcpmapping-01

   o  s/BXXP/BEEP/g

   o  Refer to data frames as "data frames".














































Rose                     Expires March 26, 2001                [Page 11]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


Appendix B. Changes from draft-ietf-beep-tcpmapping-00

   o  References to "REQ" and "RSP" messages are generalized.
















































Rose                     Expires March 26, 2001                [Page 12]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


Appendix C. Changes from draft-mrose-bxxp-tcpmapping-01

   o  A reference to RFC1122, along with instructions on how to
      interpret that specification, is added to Section 3.1.4.















































Rose                     Expires March 26, 2001                [Page 13]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


Appendix D. Changes from draft-mrose-bxxp-tcpmapping-00

   o  The IPR notice is changed to be in full compliance of Section 10
      of RFC 2026.

   o  SEQ messages are now (correcty) called SEQ frames.

   o  In Section 3.1.4, the explanation of when to send a SEQ frame is
      clarified.

   o  In Section 3.1.4, the illustration of queue management facilities
      is expanded.







































Rose                     Expires March 26, 2001                [Page 14]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


Appendix E. Acknowledgements

   The author gratefully acknowledges the contributions of: Dave
   Crocker, Steve Harris, Eliot Lear, Keith McCloghrie, Craig
   Partridge, Vernon Schryver, and, Joe Touch. In particular, Dave
   Crocker provided helpful suggestions on the nature of flow control
   in the mapping.












































Rose                     Expires March 26, 2001                [Page 15]

Internet-Draft    Mapping the BEEP Framework onto TCP     September 2000


Full Copyright Statement

   Copyright (C) The Internet Society (2000). All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph
   are included on all such copies and derivative works. However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Acknowledgement

   Funding for the RFC editor function is currently provided by the
   Internet Society.



















Rose                     Expires March 26, 2001                [Page 16]

