a = "a" / "b" / "c" / "d" / "e" / "f" / "g" / "h" / "i" / "j" /
          "k" / "l" / "m" / "n" / "o" / "p" / "q" / "r" / "s" / "t" /
          "u" / "v" / "w" / "x" / "y" / "z" / "A" / "B" / "C" / "D" /
          "E" / "F" / "G" / "H" / "I" / "J" / "K" / "L" / "M" / "N" /
          "O" / "P" / "Q" / "R" / "S" / "T" / "U" / "V" / "W" / "X" /
          "Y" / "Z"

d = "0" / "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9"

hex-digit = d / "a" / "b" / "c" / "d" / "e" / "f" /
                 "A" / "B" / "C" / "D" / "E" / "F"

k = a / d / "-" 

p = a / d / "'" / "(" / ")" / "+" / "," / "-" / "." / "="/
          "/" / ":" / "?" / " "

numericstring = 1*d

anhstring = 1*k

keystring = a [ anhstring ]

printablestring = 1*p

space = 1*" "

whsp = [ space ]

utf8 = <any sequence of octets formed from the UTF-8[9]

             transformation of a character from ISO 10646[10]
 
             except "'">

dstring = 1*( utf8 / "''" )  ; escaped utf8 string, each "'"
 
                         ; appearing in the value to be encoded is
 
                         ; escaped by a preceding "'"


qdstring = "'" dstring "'"


qdstringlist = [ qdstring *( space qdstring ) ]


qdstrings = qdstring / ( "(" whsp qdstringlist whsp ")" )


oid = descr / numericoid

descr = keystring

numericoid = numericstring *( "." numericstring ) 

noidlen = numericoid [ "{" len "}" ]

len = numericstring

oids = oid / ( "(" space oidlist space ")" )  ; set of oids of 
                                                    ; either form

oidlist = oid *( space "$" space oid )

qdescrs = qdescr / ( "(" whsp qdescrlist whsp ")" )  ;  object 
                  ;  descriptors used as schema element names

qdescrlist = [ qdescr *( whsp qdescr ) ]

qdescr = "'" descr "'"

xstring = "X-" 1*( a / "-" / "_" )

extensions = *( space xstring space qdstrings )

SyntaxDescription = "(" whsp 
          numericoid 
          [ space "DESC" space qdstring ] 
          extensions
          whsp ")"

MatchingRuleDescription = "(" whsp 
         numericoid           ; MatchingRule identifier
         [ space "NAME" space qdescrs ]
         [ space "DESC" space qdstring ]
         [ space "OBSOLETE" ]
         space "SYNTAX" space numericoid
                              ;  oid corrected to numericoid
         extensions
         whsp ")"

AttributeTypeDescription = "(" whsp
         numericoid                       ; AttributeType identifier
         [ space "NAME" qdescrs ]         ; name used in AttributeType
         [ space "DESC" qdstring ]        ; description
         [ space "OBSOLETE" ]
         [ space "SUP" space oid ]        ; derived from this other
                                          ; AttributeType
         [ space "EQUALITY" space oid ]        ; Matching Rule name
         [ space "ORDERING" space oid ]        ; Matching Rule name
         [ space "SUBSTR" space oid ]          ; Matching Rule name
         [ space "SYNTAX" space noidlen ]   ; see section 2.3
         [ space "SINGLE-VALUE" ]           ; default multi-valued
         [ space "COLLECTIVE" ]            ; default not collective
         [ space "NO-USER-MODIFICATION" ]  ; default user modifiable
         [ space "USAGE" space AttributeUsage ]  
                                          ; default userApplications
         extensions
         whsp ")"

ObjectClassDescription = "(" whsp 
         numericoid           ; ObjectClass identifier
         [ space "NAME" space qdescrs ]
         [ space "DESC" space qdstring ]
         [ space "OBSOLETE" ]
         [ space "SUP" space oids ]       ; Superior ObjectClasses
         [ space ( "ABSTRACT" / "STRUCTURAL" / "AUXILIARY" ) ]
                              ; default structural
         [ space "MUST" space oids ]      ; AttributeTypes
         [ space "MAY" space oids ]       ; AttributeTypes
         extensions
         whsp ")" 

bitstring = "'" *binary-digit "'B"

binary-digit = "0" / "1"

boolean = "TRUE" / "FALSE"

CountryString  = p p

delivery-value = pdm / ( whsp pdm space "$" space delivery-value )

pdm = "any" / "mhs" / "physical" / "telex" / "teletex" /
                "g3fax" / "g4fax" / "ia5" / "videotex" / "telephone"

DITContentRuleDescription = "(" whsp
         numericoid           ; Structural ObjectClass identifier
         [ space "NAME" space qdescrs ]
         [ space "DESC" space qdstring ]
         [ space "OBSOLETE" ]
         [ space "AUX" space oids ]       ; Auxiliary ObjectClasses
         [ space "MUST" space oids ]      ; AttributeType identifiers
         [ space "MAY" space oids ]       ; AttributeType identifiers
         [ space "NOT" space oids ]       ; AttributeType identifiers
         extensions
         whsp ")"
DITStructureRuleDescription = "(" whsp
         ruleidentifier                  ; DITStructureRule identifier
         [ space "NAME" space qdescrs ]
         [ space "DESC" space qdstring ]
         [ space "OBSOLETE" ]
         space "FORM" space oid                     ; NameForm
         [ space "SUP" ruleidentifiers ]  ; superior DITStructureRules
         extensions
         whsp ")"

ruleidentifier = numericstring

ruleidentifiers = ruleidentifier | "(" whsp ruleidentifierlist 
         whsp ")"

ruleidentifierlist = [ ruleidentifier *( space ruleidentifier ) ]

CN=Steve Kille,O=Isode Limited,C=GB

OU=Sales+CN=J. Smith,O=Widget Inc.,C=US

CN=L. Eagle,O=Sue\, Grabbit and Runn,C=GB

CN=Before\0DAfter,O=Test,C=GB

SN=Lu\C4\8Di\C4\87

EnhancedGuide = space oid whsp "#" whsp criteria whsp "#" whsp subset

subset = "baseobject" / "oneLevel" / "wholeSubtree"

criteria = or-term / "(" or-term ")"

or-term = and-term *( "|" and-term )
and-term = not-term *( "&" not-term )

not-term = "!" not-term / 
                 attributetype "$" match-type /
                 "(" or-term ")" /
                 "?true" / ; an empty "and" in the Criteria ASN.1 type
                 "?false"  ; an empty "or" in the Criteria ASN.1 type

match-type = "EQ" / "SUBSTR" / "GE" / "LE" / "APPROX"

fax-number = printablestring [ "$" faxparameters ]  ; telephone 
                                            $ number, optionally 
                                            $ followed by facsimile 
                                            $parameters

faxparameters = faxparm / ( faxparm "$" faxparameters )

faxparm = "twoDimensional" / "fineResolution" / "unlimitedLength" 
         / "b4Length" / "a3Width" / "b4Width" / "uncompressed"

guide-value = [ object-class "#" ] criteria

object-class = space oid
MatchingRuleUseDescription = "(" whsp
         numericoid              ;  MatchingRule identifier
         [ space "NAME" space qdescrs ]
         [ space "DESC" space qdstring ]
         [ space "OBSOLETE" ]
         space "APPLIES" space oids    ;  AttributeType identifiers
         extensions
         whsp ")" 

NameAndOptionalUID = DistinguishedName [ "#" bitstring ]

NameFormDescription = "(" whsp
         numericoid             ; NameForm identifier
         [ space "NAME" space qdescrs ]
         [ space "DESC" space qdstring ]
         [ space "OBSOLETE" ]
         space "OC" space oid              ; Structural ObjectClass
         space "MUST" space oids           ; AttributeTypes
         [ space "MAY" space oids ]        ; AttributeTypes
         extentions
         whsp ")"

otherMailbox = mailbox-type "$" mailbox
mailbox-type = printablestring

mailbox = <an encoded IA5 String>

postal-address = dstring *( "$" dstring )

substring = [initial] any [final]

initial = value

any = "*" *(value "*")

final = value

teletex-id = ttx-term  0*("$" ttx-param)

ttx-term   = printablestring

ttx-param  = ttx-key ":" ttx-value

ttx-key    = "graphic" / "control" / "misc" / "page" / "private"

ttx-value  = octetstring

telex-number  = actual-number "$" country "$" answerback

actual-number = printablestring

country       = printablestring

answerback    = printablestring

