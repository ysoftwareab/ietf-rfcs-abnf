text            = %d1-%d9 /        ; all octets except
                            %d11-%d12 /      ; US-ASCII NUL, CR and LF
                            %d14-%d255
ctext           = NO-WS-CTL /       ; all of <text> except
                            %d33-%d39 /      ; SP, HTAB, "(", ")"
                            %d42-%d91 /      ; and "\"
                            %d93-%d255
qtext           = NO-WS-CTL /       ; all of <text> except
                            %d33 /            ; SP, HTAB, "\" and <">
                            %d35-%d91 /
                            %d93-%d255
ftext           = %d33-%d57 /      ; all octets except
                            %d59-%d126 /     ; CTL, SP and ":"
                            %d128-%d255
token           = 1*<any ftext except tspecials>
tspecials       = "(" / ")" / "<" / ">" / "@"
                            "," / ";" / ":" / "
                            "/" / "[" / "]" / "?" / "="

ALPHA           = %x41-%x5A /      ; A-Z
                            %x61-%x7A        ; a-z
CR              = %x0D              ; carriage return
CRLF            = CR LF
DIGIT           = %x30-%x39        ; 0-9
HTAB            = %x09              ; horizontal tab
LF              = %x0A              ; line feed
SP              = %x20              ; space
NO-WS-CTL       = %d1-%d8 /        ; US-ASCII control characters
                            %d11 /            ; which do not include the
                            %d12 /            ; carriage return, line feed,
                            %d14-%d41 /      ; and whitespace characters
                            %d127
WSP             = SP / HTAB          ; Whitespace characters
FWS             = ([*WSP CRLF] 1*WSP)   ; Folding whitespace
comment         = "(" *([FWS] (ctext / quoted-pair / comment))
                            [FWS] ")"
CFWS            = *([FWS] comment) (([FWS] comment) / FWS )
quoted-pair     = "\" text
quoted-string   = *CFWS <"> *(FWS (qtext / quoted-pair)) <"> *CFWS
unstructured    = *( [FWS] text )


article         = 1*header separator body
header          = header-name ":" SP header-content CRLF
header-name     = 1*name-character *( "-" 1*name-character )
name-character  = ALPHA / DIGIT
header-content  = usenet-header-content / unstructured
separator       = CRLF
body            = *( *998text CRLF )
nonblank-text   = 1*( [FWS] nbtext )
nbtext          = qtext /           ; all of <text> except
                            "\" / <">         ; SP and HTAB

Date-content = date-time  

From-content = <address>

Message-ID-content = msg-id

subject-content = [ back-reference ] pure-subject CRLF
pure-subject = nonblank-text 
back-reference = %x52.65 ": " ; "Re: " in case sensitive format

Newsgroups-content = newsgroup-name *( ng-delim newsgroup-name) 
newsgroup-name = *FWS component *( "." component ) *FWS
component = component-start [*component-rest component-start]
component-start = lowercase / digit 
lowercase = <Unicode Letter, Lowercase> / <Unicode Letter, Other> 
uppercase = <Unicode Letter, Uppercase> / <Unicode Letter, Titlecase>
digit = <Unicode Number, Decimal Digit> / <Unicode Number, Other> 
component-rest = component-start / "+" / "-" / "_" 
ng-delim = ","

path-content    =       old-path / new-path
          
old-id          =       1*( ALPHA / digit / "-" | "." | "_")  
old-path        =       old-id *(punctuation old-id)
punctuation     =       LWSP / %x21-2f / %x3a-40 / %x5b-60 / %x7b-7f
                                              ; These are ! " # $ % & ' ( ) *
                                              ;   + , - . / : ; < = > ? @ [ \
                                              ;   ] ^ _ ` { | } ~ DEL
new-delims      =       [FWS] ("@" / "/" / "," ) [FWS]
new-path        =       post-injection "%" pre-injection
delim-plus-id   =       [FWS] "!" [FWS] old-id
                                  / new-delims site-id
post-injection  =       *(site-id 1*new-delims) site-id
pre-injection   =       site-id *delim-plus-id
site-id         =       ALPHA word      ; UUCP name
                                  / ALPHA         ; for "x" tail entry
                                  / "." word      ; other registered name
                                  / <FQDN>        ; as per RFC 1034
                                  / <dotted-quad> ; numeric IP address rep
                                                  ; specified in rfc820 etc.
                                  / "[" dotted-quad "]"
                                  / "[" <ipv6-numeric> "]" ; per RFC1884
word            =       1*(ALPHA / digit / "-" / "_")


Followup-To-content = Newsgroups-content / "poster"


expires-content = date-time

Reply-To-content = From-content

References-content = msg-id [msg-id...]

Control-content = verb *( FWS argument ) verb = 1*( ALPHA /
newgroup-ctrl         = "newgroup" FWS groupname [ FWS flags ]
flags                 = "moderated" 
groupinfo-body     = descriptor-tag CRLF 1*( description-line CRLF )
descriptor-tag     = %x46.6F.72 SP %x79.6F.75.72 SP 
                               %x6E.65.77.73.67.72.6F.75.70.73 SP 
                               %x66.69.6C.6E ":"
                             ; case sensitive "For your newsgroups file:"    
description-line    = newsgroup-name [ 1*WSP description
                             [ 1*SP group-flags ] ] 
description         = nonblank-text / encoded-word 
moderation-flags    = [ moderated-literal ]
moderated-literal   = "(" %x4D.6F.64.65.72.61.74.65.64 ")"
                                ; case sensitive "(Moderated)"
    
group-flags = [ "<" addr-spec ">" 1*SP ] "(Moderated)"

rmgroup-ctrl  = "rmgroup" FWS groupname

mvgroup-ctrl  = "mvgroup" FWS ( mvgrp-groups / mvgrp-hrchy)
mvgrp-groups  = groupname [ FWS groupname ]
mvgrp-hrchy   = groupnamepart ".*" FWS groupnamepart
groupnamepart = groupname    ; syntactically
 
checkgroup-ctrl = "checkgroups" [ FWS chkscope ] [ FWS chksernr ]
chkscope        = 1*( ["!"] newsgroup-name-part ) 
chksernr        = "#" 1*DIGIT

checkgroups-body = *( invalidation CRLF ) 1*( valid-group CRLF )
invalidation     = "!" groupname *( "," *WSP groupname )
valid-group      = description-line 
differences = content-language ;
boundary = nxtlang
cancel-arguments  = 1*( message-id CFWS )
cancel-body       = body


ihave-arguments   = *( message-id space ) relayer-name
sendme-arguments  = ihave-arguments
ihave-body        = *( message-id CRLF )
sendme-body       = ihave-body

Distribution-content = distribution *( dist-delim distribution)
dist-delim = ","
distribution = positive-distribution / negative-distribution
positive-distribution = *FWS distribution-name *FWS
negative-distribution = *FWS "!" distribution-name *FWS
distribution-name = 1*letter

summary-content  =  non-blank-text CRLF 
non-blank-text = 1*(FWS text)

Approved-content = From-content

Lines-content = 1*digit

Xref-content = server 1*( CFWS location ) 
server = server-name
location = newsgroup-name ":" article-locator
article-locator  = 1*
 
organization-content = nonblank-text CRLF

User-Agent = "User-Agent:" SP User-Agent-content
User-Agent-content = product *(CFWS product) [CFWS]

product = token ["/" product-version] product-version = token

Supersedes-content = message-id *( FWS message-id )

Kristian =?ISO-8859-1?Q?K=F6hntopp?= (KRIS@koehntopp.de)

Peter =?ISO-8859-1?Q?Br=FClls?= (pb@Ecce-Terram.DE)

