c = a {+2s} b;                          # sum value
r = (c & 0xFFFF) {+2s} (c >> 16);       # sum carry

Out0 = a0 ^ b0 ^ (g3       + g2p3     + g1p2p3   + g0p1p2p3)

Out1 = a1 ^ b1 ^ (g3p0     + g2p3p0   + g1p2p3p0 + g0)

Out2 = a2 ^ b2 ^ (g3p0p1   + g2p3p0p1 + g1       + g0p1)

Out3 = a3 ^ b3 ^ (g3p0p1p2 + g2       + g1p2     + g0p1p2)

CLR    = zero the register
OE     = write the register onto the data bus
CLK    = clock to cycle the pipeline operation
ICLK   = input data latch clock
ADD    = initiating an add of latched input data

sum = (word32)(*(CKSUMLOC));             /* read sum     */
sum = (sum & 0xFFFF) + (sum >> 16);      /* fold halves  */
sum = (sum & 0xFFFF) + (sum >> 16);      /* add in carry */
ipcksum = (halfword16)(~(sum & 0xFFFF)); /* 1's negative */
