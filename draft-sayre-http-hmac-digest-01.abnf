challenge         = "HMACDigest" digest-challenge
digest-challenge  = 1#( realm | snonce | [domain] | [reason] |
                          [algorithm] | [pw-algorithm] |
                          [salt] | [auth-param] )
realm             = "realm" "=" quoted-string
snonce            = "snonce" "=" quoted-string
domain            = "domain" "=" <"> URI *( 1*SP URI ) <">
URI               = absoluteURI | abs_path
reason            = "reason" "=" ("unauthorized" | "integrity" |
                           token)
algorithm         = "algorithm" "=" ( "HMAC-SHA-1" | "HMAC-MD5" |
                           token )
pw-algorithm      = "pw-algorithm" "=" ( "SHA-1" | "MD5" |
                           token )
salt              = "salt" "=" quoted-string
credentials      = "HMACDigest" digest-response
digest-response  = 1#( username | realm | cnonce | snonce |
                         digest-uri | created | response | [headers] |
                         [auth-param] )
username         = "username" "=" quoted-string
cnonce           = "cnonce" "=" quoted-string
digest-uri       = "uri" "=" request-uri
response         = "response" "=" request-digest
request-digest   = <"> *LHEX <">
LHEX             =  "0" | "1" | "2" | "3" |
                          "4" | "5" | "6" | "7" |
                          "8" | "9" | "a" | "b" |
                          "c" | "d" | "e" | "f"
headers          = "headers" "=" header-list
header-list      = <"> field-name *( 1*SP field-name ) <">
PORT = 8888
user = "user"
password = "password"
salt = 'xyzzy'
realm = "HMACDigest Sample"
algo = "HMAC-SHA-1"
pw_algo = "MD5"
key_str = "%s:%s:%s" % (user,
                           md5.new(password+salt).hexdigest(),
                           realm)
key = md5.new(key_str).hexdigest()

secret_key = "moo"
digest_header = 'HMACDigest realm="%s", '
auth = self.headers.getheader('authorization')
result = self.check(auth)
cred = urllib2.parse_http_list(fields)
cred = urllib2.parse_keqv_list(cred)
snonce = cred['snonce']
test_hash = md5.new(nonce_time +
                               ":fake_etag:" + secret_key).hexdigest()
now = time.mktime(time.gmtime())
names = cred.get('headers','').split()
vals = ''.join([self.headers.getheader(h) for h in names])
msg = "%s:%s:%s:%s:%s" % (self.command, self.path,
                                     cred['cnonce'], snonce,
                                     vals)
the_hmac = hmac.new(key, msg, sha).hexdigest()
auth_header = digest_header % (realm, self.snonce(),
                                          reason, algo, pw_algo, salt)
now = str(time.mktime(time.gmtime()))
h = md5.new(now+":fake_etag:"+secret_key).hexdigest()
httpd = BaseHTTPServer.HTTPServer(("", PORT), HMACDigestHandler)
PORT = 8888
username = "user"
password = "password"
params = {}
headers = {"accept": "text/X-Oh-Several-Things+xml, */*",
              "user-agent": "libwww-perl/5.803",
              "x-hopbyhop": "some proxy information",
              "x-fooproxy": "some more proxy info",
              "x-freedom-is-what-you-think-it-is":
              "But there ain't no train to Stockholm",
              "connection": "close, x-hopbyhop, x-fooproxy"}

conn = httplib.HTTPConnection("localhost",PORT)
response = conn.getresponse()
data = response.read()

wa = response.getheader('WWW-Authenticate')
challenge = urllib2.parse_keqv_list(urllib2.parse_http_list(kv))
realm = challenge['realm']
snonce = challenge['snonce']
algorithm = challenge.get('algorithm', 'HMAC-SHA-1')
pw_algorithm = challenge.get('pw-algorithm', 'SHA-1')
salt = challenge.get('salt','')

hashmod = sha
hashmod = md5

pwhashmod = sha
pwhashmod = md5

key = "%s:%s:%s" % (username,
                       pwhashmod.new(password+salt).hexdigest(),
                       realm)
key = pwhashmod.new(key).hexdigest()

keys = set(headers.keys())
hop_by_hops = set(['connection', 'keep-alive', 'proxy-authenticate',
                      'proxy-authorization', 'te', 'trailers',
                      'transfer-encoding', 'upgrade'])
ext_hop_heads = urllib2.parse_http_list(headers['connection'])
hop_by_hops = hop_by_hops.union(ext_hop_heads)
keys = keys.difference(hop_by_hops)
keylist = ''.join(["%s " % k for k in keys])
header_vals = ''.join([headers[k] for k in keys])

created = time.strftime('%Y-%m-%dT%H:%M%SZ',time.gmtime())
cnonce = sha.new(str(random.getrandbits(512))+created).hexdigest()

msg = "%s:%s:%s:%s:%s" % ("GET", "/", cnonce, snonce, header_vals)
response = hmac.new(key, msg, hashmod).hexdigest()

auth = 'username="%s", realm="%s", cnonce="%s", uri="%s", ' \
          'snonce="%s", response="%s", headers="%s"'
auth = auth % (username, realm, cnonce, "/",
                  snonce, response, keylist)
response = conn.getresponse()
data = response.read()

