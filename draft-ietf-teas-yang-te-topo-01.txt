






 TEAS Working Group                                           Xufeng Liu 
 Internet Draft                                                 Ericsson 
 Intended status: Standards Track                           Igor Bryskin 
                                                 ADVA Optical Networking 
                                                     Vishnu Pavan Beeram 
                                                        Juniper Networks 
                                                              Tarek Saad 
                                                       Cisco Systems Inc 
                                                           Himanshu Shah 
                                                                   Ciena 
                                                  Oscar Gonzalez De Dios 
                                                              Telefonica 
                                                                                 
 Expires: January 6, 2016                                   July 6, 2015 
                                     
  
                      YANG Data Model for TE Topologies 
                       draft-ietf-teas-yang-te-topo-01 


 Status of this Memo 

    This Internet-Draft is submitted in full conformance with the 
    provisions of BCP 78 and BCP 79. 
     
    Internet-Drafts are working documents of the Internet Engineering 
    Task Force (IETF), its areas, and its working groups.  Note that 
    other groups may also distribute working documents as Internet-
    Drafts. 
     
    Internet-Drafts are draft documents valid for a maximum of six 
    months and may be updated, replaced, or obsoleted by other documents 
    at any time.  It is inappropriate to use Internet-Drafts as 
    reference material or to cite them other than as "work in progress." 
     
    The list of current Internet-Drafts can be accessed at 
    http://www.ietf.org/ietf/1id-abstracts.txt 
     
    The list of Internet-Draft Shadow Directories can be accessed at 
    http://www.ietf.org/shadow.html 
     
    This Internet-Draft will expire on January 6, 2016. 
     
 Copyright Notice 

    Copyright (c) 2015 IETF Trust and the persons identified as the 
    document authors. All rights reserved.  

  
  
 Liu, et al             Expires January 6, 2016                 [Page 1] 
  






 Internet-Draft            YANG - TE Topology                  July 2015 
     

    This document is subject to BCP 78 and the IETF Trust's Legal 
    Provisions Relating to IETF Documents  
    (http://trustee.ietf.org/license-info) in effect on the date of 
    publication of this document. Please review these documents 
    carefully, as they describe your rights and restrictions with 
    respect to this document.  Code Components extracted from this 
    document must include Simplified BSD License text as described in 
    Section 4.e of the Trust Legal Provisions and are provided without 
    warranty as described in the Simplified BSD License. 
      
 Abstract 

    This document defines a YANG data model for representing, retrieving 
    and manipulating TE Topologies. The model serves as a base model 
    that other technology specific TE Topology models can augment. 

 Conventions used in this document 

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", 
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this 
    document are to be interpreted as described in RFC-2119 [RFC2119]. 
     

 Table of Contents 

    1. Introduction...................................................3 
       1.1. Terminology...............................................3 
       1.2. Tree Structure - Legend...................................4 
       1.3. Prefixes in Data Node Names...............................4 
    2. Characterizing TE Topologies...................................5 
    3. Model Applicability............................................6 
       3.1. Native TE Topologies......................................6 
       3.2. Customized TE Topologies..................................8 
    4. Modeling Considerations.......................................10 
       4.1. Generic extensible Model.................................10 
       4.2. Model Structure..........................................10 
       4.3. Topology Identifiers.....................................11 
       4.4. Generic TE Link Attributes...............................12 
       4.5. Generic TE Node Attributes...............................12 
       4.6. TED Information Sources..................................13 
       4.7. Overlay/Underlay Relationship............................14 
       4.8. Scheduling Parameters....................................15 
       4.9. Templates................................................15 
       4.10. Notifications...........................................16 
       4.11. Open Items..............................................17 
    5. Tree Structure................................................17 
   
  
 Liu, et al             Expires January 6, 2016                 [Page 2] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

    6. TE Topology Yang Module.......................................42 
    7. Security Considerations.......................................78 
    8. IANA Considerations...........................................78 
    9. References....................................................78 
       9.1. Normative References.....................................78 
       9.2. Informative References...................................79 
    10. Acknowledgments..............................................79 
     
 1. Introduction 

    The Traffic Engineering Database (TED) is an essential component of 
    Traffic Engineered (TE) systems that are based on MPLS-TE [RFC2702] 
    and GMPLS [RFC3945]. The TED is a collection of all TE information 
    about all TE nodes and TE links in the network. The TE Topology is a 
    schematic arrangement of TE nodes and TE links present in a given 
    TED. There could be one or more TE Topologies present in a given 
    Traffic Engineered system. The TE Topology is the topology on which 
    path computational algorithms are run to compute Traffic Engineered 
    Paths (TE Paths). 

    This document defines a YANG [RFC6020] data model for representing 
    and manipulating TE Topologies. This model contains technology 
    agnostic TE Topology building blocks that can be augmented and used 
    by other technology-specific TE Topology models. 

 1.1. Terminology 

    TED: The Traffic Engineering Database is a collection of all TE 
    information about all TE nodes and TE links in a given network. 

    TE-Topology: The TE Topology is a schematic arrangement of TE nodes 
    and TE links in a given TED. It forms the basis for a graph suitable 
    for TE path computations. 

    Native TE Topology: Native TE Topology is a topology that is native 
    to a given provider network. This is the topology on which path 
    computational algorithms are run to compute TE Paths. 

    Customized TE Topology: Customized TE Topology is a custom topology 
    that is produced by a provider for a given Client. This topology 
    typically augments the Client's Native TE Topology. Path 
    computational algorithms aren't typically run on the Customized TE 
    Topology; they are run on the Client's augmented Native TE Topology.   



  
  
 Liu, et al             Expires January 6, 2016                 [Page 3] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

 1.2. Tree Structure - Legend 

    A simplified graphical representation of the data model is presented 
    in Section 5 of this document. The following notations are used for 
    the YANG model data tree representation. 
     
       <status> <flags> <name> <opts> <type> 
     
         <status> is one of: 
           +  for current 
           x  for deprecated 
           o  for obsolete 
     
         <flags> is one of: 
           rw  for read-write configuration data 
           ro  for read-only non-configuration data 
           -x  for execution rpcs 
           -n  for notifications 
     
         <name> is the name of the node 
     
          If the node is augmented into the tree from another module, 
          its name is printed as <prefix>:<name> 
     
         <opts> is one of: 
           ? for an optional leaf or node 
           ! for a presence container 
           * for a leaf-list or list 
           Brackets [<keys>] for a list's keys 
           Curly braces {<condition>} for optional feature that make 
           node conditional 
            
           Colon : for marking case nodes 
           Ellipses ("...") subtree contents not shown 
     
           Parentheses enclose choice and case nodes, and case nodes are 
           also marked with a colon (":"). 
     
         <type> is the name of the type for leafs and leaf-lists. 
     
 1.3. Prefixes in Data Node Names 

    In this document, names of data nodes and other data model objects 
    are prefixed using the standard prefix associated with the 
    corresponding YANG imported modules, as shown in Table 1. 
     
  
  
 Liu, et al             Expires January 6, 2016                 [Page 4] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

                +--------+-----------------+-----------+ 
                | Prefix | YANG module     | Reference | 
                +--------+-----------------+-----------+ 
                | yang   | ietf-yang-types | [RFC6991] | 
                | inet   | ietf-inet-types | [RFC6991] | 
                +--------+-----------------+-----------+ 
     
              Table 1: Prefixes and corresponding YANG modules 
     
 2. Characterizing TE Topologies 

    The data model proposed by this document takes the following 
    characteristics of TE Topologies into account: 

    - TE Topology is an abstract control-plane representation of the 
      data-plane topology. Hence attributes specific to the data-plane 
      must make their way into the corresponding TE Topology modeling. 
      The TE Topology comprises of dynamic auto-discovered data (data 
      that may change frequently - example: unreserved bandwidth 
      available on data-plane links) as well as fairly static data (data 
      that rarely changes- examples: layer network identification, 
      switching and adaptation capabilities and limitations, fate 
      sharing, administrative colors) associated with data-plane nodes 
      and links. It is possible for a single TE Topology to encompass TE 
      information at multiple switching layers. 
       
    - TE Topologies are protocol independent. Information about 
      topological elements may be learnt via link-state protocols, but 
      the topology can exist without being dependent on any particular 
      protocol. 
       
    - TE Topology may not be congruent to the routing topology (topology 
      constructed based on routing adjacencies) in a given TE System. 
      There isn't always a one-to-one association between a TE-link and 
      a routing adjacency. For example, the presence of a TE link 
      between a pair of nodes doesn't necessarily imply the existence of 
      a routing-adjacency between these nodes. 
       
    - Each TE Topological element has an information source associated 
      with it. In some scenarios, there could be more than one 
      information source associated with each topological element. 
       
    - TE Topologies can be hierarchical. Each node and link of a given 
      TE Topology can be associated with respective underlay topology. 
      This means that each node and link of a given TE Topology can be 
      associated with an independent stack of supporting TE Topologies. 
  
  
 Liu, et al             Expires January 6, 2016                 [Page 5] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       
    - TE Topologies can be customized. TE topologies of a given network 
      presented by the network provider to its client could be 
      customized on per-client request basis. This customization could 
      be performed by provider, by client or by provider/client 
      negotiation. The relationship between a customized topology (as 
      presented to the client) and provider's native topology (as known 
      in its entirety to the provider itself) could be captured as 
      hierarchical (overlay-underlay), but otherwise the two topologies 
      are decoupled from each other. 
       
 3. Model Applicability 

 3.1. Native TE Topologies 

    The model discussed in this draft can be used to represent and 
    retrieve native TE topologies on a given TE system.  

                                           
      +---+       +---+        +---+         +---+         +---+ 
      | R1|-------| R2|--------| R3|---------| R4|---------| R5|  
      +---+       +---+        +---+         +---+         +---+  
        |                      /   \         /   \         / 
        |                     /     \       /     \       / 
        |                    /       \     /       \     / 
        |                   /         \   /         \   / 
        |                  /           \ /           \ / 
      +---+             +---+         +---+         +---+ 
      | R6|-------------| R7|         | R8|---------| R9| 
      +---+             +---+         +---+         +---+  
     
                     Figure 1a: Example Network Topology 
     
     
           --------------- 
           | Native      |                   |  [ ] TE Node  
           | TE-Topology |                   |  +++ TE Link  
           ---------------                   o--------------
    __________________     
             [R1] ++++ [R2] ++++ [R3] ++++ [R4] ++++ [R5] 
               +                +    +    +    +    + 
               +               +      +  +      +  + 
               +              +        ++        ++ 
             [R6] +++++++++ [R7]      [R8] ++++ [R9] 
           
                 Figure 1b: Native TE Topology as seen on Node R3 
  
  
 Liu, et al             Expires January 6, 2016                 [Page 6] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

           
     

    Consider the network topology depicted in Figure 1a (R1 .. R9 are 
    nodes representing routers). An implementation MAY choose to 
    construct a native TE Topology using all nodes and links present in 
    the given TED as depicted in Figure 1b. The data model proposed in 
    this document can be used to retrieve/represent this TE topology. 

                                      : 
    TE info distributed via ISIS-TE   :  TE info distributed via OSPF-TE 
                                      : 
           +---+       +---+        +---+         +---+         +---+ 
           | R1|-------| R2|--------| R3|---------| R4|---------| R5|  
           +---+       +---+        +---+         +---+         +---+  
             |                      / : \         /   \         / 
             |                     /  :  \       /     \       / 
             |                    /   :   \     /       \     / 
             |                   /    :    \   /         \   / 
             |                  /     :     \ /           \ / 
           +---+             +---+    :    +---+         +---+ 
           | R6|-------------| R7|    :    | R8|---------| R9| 
           +---+             +---+    :    +---+         +---+  
                                      : 
          

                     Figure 2a: Example Network Topology 
                                       
                                       
            -----------------------   :  ----------------------- 
            |Native TE Topology   |   :  |Native TE Topology   | 
            |Info-Source: ISIS-TE |   :  |Info-Source: OSPF-TE | 
            -----------------------   :  ----------------------- 
                                      : 
             [R1] ++++ [R2] ++++ [R3] : [R3'] ++++ [R4] ++++ [R5] 
              +                +      :      +    +    +    + 
              +               +       :       +  +      +  + 
              +              +        :        ++        ++ 
             [R6] +++++++++ [R7]      :       [R8] ++++ [R9] 
          

                Figure 2b: Native TE Topologies as seen on Node R3 
          

    Consider the case of the topology being split in a way that some 
    nodes participate in OSPF-TE while others participate in ISIS-TE 
  
  
 Liu, et al             Expires January 6, 2016                 [Page 7] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

    (Figure 2a). An implementation MAY choose to construct separate TE 
    Topologies based on the information source. The native TE Topologies 
    constructed using only nodes and links that were learnt via a 
    specific information source are depicted in Figure 2b. The data 
    model proposed in this document can be used to retrieve/represent 
    these TE topologies. 

    Similarly, the data model can be used to represent/retrieve a TE 
    Topology that is constructed using only nodes and links that belong 
    to a particular technology layer. The data model is flexible enough 
    to retrieve and represent many such native TE Topologies. 

 3.2. Customized TE Topologies 

    The model discussed in this draft can be used to represent, retrieve 
    and manipulate customized TE Topologies. The model allows the 
    provider to present the network in abstract TE Terms on a per client 
    basis. These customized topologies contain sufficient information 
    for the path computing client to select paths according to its 
    policies.  

                                   | +---+            /-\  
                                   | |   | Router    (   ) WDM   
                                   | +---+ Node       \-/  node  
                                   | 
                                   o----------------------------_____ 
    __                                        
      +---+        /-\          /-\           /-\          +---+  
      | R1|-------( A )--------( C )---------( E )---------| R3|  
      +---+        \-/          \-/           \-/          +---+  
                               /   \         /   \  
                              /     \       /     \  
                             /       \     /       \  
                            /         \   /         \  
                           /           \ /           \  
          +---+          /-\           /-\           /-\          +---+  
          | R2|---------( B )---------( D )---------( F )---------| R4|  
          +---+          \-/           \-/           \-/          +---+ 
     
                  Figure 3: Example packet optical topology  
     
    Consider the network topology depicted in Figure 3. This is a 
    typical packet optical transport deployment scenario where the WDM 
    layer network domain serves as a Server Network Domain providing 
    transport connectivity to the packet layer network Domain (Client 
    Network Domain). Nodes R1, R2, R3 and R4 are IP routers that are 
  
  
 Liu, et al             Expires January 6, 2016                 [Page 8] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

    connected to an Optical WDM transport network. A, B, C, D, E and F 
    are WDM nodes that constitute the Server Network Domain. 
     
                                             | *****  B-F WDM Path                
                                             | @@@@@  B-E WDM Path 
                                             | $$$$$  A-E WDM Path   
                                             o--------------------_  
                                           
      +---+        /-\ $$$$$$$$ /-\ $$$$$$$$$ /-\          +---+  
      | R1|-------( A )--------( C )---------( E )---------| R3|  
      +---+        \-/         @\-/ @@@@@@@@@ \-/          +---+  
                              @/   \         /   \  
                             @/     \       /     \  
                            @/       \     /       \  
                           @/         \   /         \  
                          @/           \ /           \  
          +---+          /-\ ********* /-\ ********* /-\          +---+  
          | R2|---------( B )---------( D )---------( F )---------| R4|  
          +---+          \-/           \-/           \-/          +---+ 
     
                 Figure 4a: Paths within the provider domain 
     
     
     
                  ++++++++ [A] ++++++++++++++++++++ [E] +++++++++  
                                               +++++   
                                           ++++          
                                       ++++     
                                   ++++       
                               ++++            
                  ++++++++ [B] ++++++++++++++++++++ [F] +++++++++  
     
          Figure 4b: Customized TE Topology provided to the Client 
                                               
     
                     
             [R1] ++++++++ [A] ++++++++++++++++++++ [E] +++++++++ [R3]  
                                               +++++   
                                           ++++          
                                       ++++     
                                   ++++       
                               ++++            
             [R2] ++++++++ [B] ++++++++++++++++++++ [F] +++++++++ [R4]   
                   
    Figure 4c: Customized TE Topology merged with the Client's Native TE 
                                  Topology 
  
  
 Liu, et al             Expires January 6, 2016                 [Page 9] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

  

    The goal here is to augment the Client TE Topology with a customized 
    TE Topology provided by the WDM network. Given the availability of 
    the paths A-E, B-F and B-E (Figure 4a), a customized TE Topology as 
    depicted in Figure 4b is provided to the Client. This customized TE 
    Topology is merged with the Client's Native TE Topology and the 
    resulting topology is depicted in Figure 4c.  

    The data model proposed in this document can be used to 
    retrieve/represent/manipulate the customized TE Topology depicted in 
    Figure 4b. 
                                       
 4. Modeling Considerations 

 4.1. Generic extensible Model 

    The TE Topology model proposed in this document is meant to be 
    technology agnostic. Other technology specific TE Topology models 
    can augment and use the building blocks provided by the proposed 
    model. 

                      +-------------------+ 
                      |     Generic       | 
                      | TE Topology Model | 
                      +-------------------+ 
                                | 
             +-------------+-------------+-------------+ 
             |             |             |             | 
             V             V             V             V 
       +------------+                            +------------+ 
       | Technology |                            | Technology | 
       |  Specific  |   ......................   |  Specific  | 
       | TE Topology|                            | TE Topology| 
       |   Model 1  |                            |   Model n  | 
       +------------+                            +------------+ 
     
                    Figure 5: Extending the generic model 
     
 4.2. Model Structure 

    The high-level model structure proposed by this document is as shown 
    below: 

       +--rw te-topologies 
       |  +--rw topology* [provider-id client-id te-topology-id] 
  
  
 Liu, et al             Expires January 6, 2016                [Page 10] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       |  |  .......... 
       |  |  +--rw node* [te-node-id] 
       |  |  |  .......... 
       |  |  |  +--rw te-link* [te-link-id] 
       |  |  |     .......... 
       |  |  +--rw link* [source-te-node-id source-te-link-id dest-te-
    node-id dest-te-link-id] 
       |  |  |  .......... 
       |  +--rw node-template* [name] {template}? 
       |  |  .......... 
       |  +--rw link-template* [name] {template}? 
       |  |  .......... 
       +--ro te-topologies-state 
          +--ro topology* [provider-id client-id te-topology-id] 
             |  .......... 
             +--ro node* [te-node-id] 
             |  |  .......... 
             |  +--ro te-node-state 
             |     .......... 
             +--ro link* [source-te-node-id source-te-link-id dest-te-
    node-id dest-te-link-id] 
             |  |  .......... 
             |  +--ro te-link-state 
             |     .......... 
                                
    notifications: 
       +---n te-node-event     
       |   .......... 
       +---n te-link-event  
           ..........    
     
 4.3. Topology Identifiers 

    The TE-Topology is uniquely identified by a key that has 3 
    constituents - te-topology-id, provider-id and client-id. The 
    combination of provider-id and te-topology-id uniquely identifies a 
    native TE Topology on a given provider. The client-id is used only 
    when Customized TE Topologies come into play; a value of "0" is used 
    as the client-id for native TE Topologies. 

       +--rw topology* [provider-id client-id te-topology-id] 
       |  +--rw provider-id       te-global-id 
       |  +--rw client-id         te-global-id 
       |  +--rw te-topology-id    te-topology-id 
     

  
  
 Liu, et al             Expires January 6, 2016                [Page 11] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

 4.4. Generic TE Link Attributes 

    The model covers the definitions for generic TE Link attributes - 
    bandwidth, admin groups, SRLGs, switching capabilities, TE metric 
    extensions etc. 

      +--rw te-link-attributes 
      |  .......... 
      |  +--rw performance-metric-throttle {te-performance-metric}? 
      |  |  ..........      
      |  +--rw administrative-group?               te-types:admin-groups 
      |  +--rw max-link-bandwidth?                 decimal64 
      |  +--rw max-resv-link-bandwidth?            decimal64 
      |  +--rw unreserved-bandwidth* [priority] 
      |  |  .......... 
      |  +--rw te-default-metric?                  uint32 
      |  +--rw performance-metric {te-performance-metric}? 
      |  |  .......... 
      |  +--rw link-protection-type?               enumeration 
      |  +--rw interface-switching-capabilities* [switching-capability] 
      |  |  .......... 
      |  +--rw te-srlgs 
      |  |  .......... 
     
 4.5. Generic TE Node Attributes 

    The model covers the definitions for generic TE Node attributes. The 
    definition of a generic connectivity matrix is shown below: 

      +--rw te-node-attributes 
      |  ..........   
      |  +--rw connectivity-matrix* [id] 
      |     +--rw id            uint32 
      |     +--rw from-link 
      |     |  +--rw provider-id-ref?   leafref 
      |     |  +--rw client-id-ref?     leafref 
      |     |  +--rw topology-id-ref?   leafref 
      |     |  +--rw node-ref?          leafref 
      |     |  +--rw link-end-ref?      leafref 
      |     +--rw to-link 
      |     |  +--rw provider-id-ref?   leafref 
      |     |  +--rw client-id-ref?     leafref 
      |     |  +--rw topology-id-ref?   leafref 
      |     |  +--rw node-ref?          leafref 
      |     |  +--rw link-end-ref?      leafref 
      |     +--rw is-allowed?   Boolean 
  
  
 Liu, et al             Expires January 6, 2016                [Page 12] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

     
 4.6. TED Information Sources 

    The model allows each TE topological element to have multiple TE 
    information sources (OSPF-TE, ISIS-TE, BGP-LS, User-Configured, 
    System-Processed, Other). Each information source is associated with 
    a credibility preference to indicate precedence. In scenarios where 
    a customized TE Topology is merged into a Client's native TE 
    Topology, the merged topological elements would point to the 
    corresponding customized TE Topology as its information source. 

       +--ro te-topologies-state 
          +--ro topology* [provider-id client-id te-topology-id] 
             |  .......... 
             +--ro node* [te-node-id] 
             |  .......... 
             |  +--ro te-node-state 
             |     +--ro information-source?         enumeration 
             |     +--ro information-source-state 
             |        +--ro credibility-preference?   uint16 
             |        +--ro topology 
             |        |  +--ro provider-id-ref?   leafref 
             |        |  +--ro client-id-ref?     leafref 
             |        |  +--ro topology-id-ref?   leafref 
             |        +--ro routing-instance?         string 
            

       +--ro te-topologies-state 
          +--ro topology* [provider-id client-id te-topology-id] 
             |  .......... 
             +--ro link* [source-te-node-id source-te-link-id dest-te-
    node-id dest-te-link-id] 
             |  ..........      
             |   +--ro te-link-state 
             |      +--ro information-source?         enumeration 
             |      +--ro information-source-state 
             |      |  +--ro credibility-preference?   uint16 
             |      |  +--ro topology 
             |      |  |  +--ro provider-id-ref?   leafref 
             |      |  |  +--ro client-id-ref?     leafref 
             |      |  |  +--ro topology-id-ref?   leafref 
             |      |  +--ro routing-instance?         string 
             |      +--ro alt-information-sources* [information-source] 
             |         +--ro information-source                  
    enumeration 
             |         +--ro information-source-state 
  
  
 Liu, et al             Expires January 6, 2016                [Page 13] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

             |         |  +--ro credibility-preference?   uint16 
             |         |  +--ro topology 
             |         |  |  +--ro provider-id-ref?   leafref 
             |         |  |  +--ro client-id-ref?     leafref 
             |         |  |  +--ro topology-id-ref?   leafref 
             |         |  +--ro routing-instance?         string 
             |         |  .......... 
     
 4.7. Overlay/Underlay Relationship 

    The model captures overlay and underlay relationship for TE 
    nodes/links. For example - in networks where multiple TE Topologies 
    are built hierarchically, this model allows the user to start from a 
    specific topological element in the top most topology and traverse 
    all the way down to the supporting topological elements in the 
    bottom most topology.  

    This relationship is captured via the "underlay-topology" field for 
    the node and via the "underlay" field for the link. The use of these 
    fields is optional and this functionality is tagged as a "feature" 
    ("te-topology-hierarchy"). 

      +--rw node* [te-node-id] 
      |  .......... 
      |  +--rw te-node-attributes 
      |  |  .......... 
      |  |  +--rw underlay-topology {te-topology-hierarchy}? 
      |  |  |  +--rw provider-id-ref?   leafref 
      |  |  |  +--rw client-id-ref?     leafref 
      |  |  |  +--rw topology-id-ref?   leafref 
     

      +--rw link* [source-te-node-id source-te-link-id dest-te-node-id 
    dest-te-link-id] 
      |  .......... 
      |  +--rw te-link-attributes 
      |  |  ....... 
      |  |  +--rw underlay! {te-topology-hierarchy}? 
      |  |  |  +--rw underlay-primary-path 
      |  |  |  |  +--rw provider-id-ref?   leafref 
      |  |  |  |  +--rw client-id-ref?     leafref 
      |  |  |  |  +--rw topology-id-ref?   leafref 
      |  |  |  |  +--rw path-element* [path-element-id] 
      |  |  |  |     .......... 
      |  |  |  +--rw underlay-backup-path* [index] 
      |  |  |  |  +--rw index              uint32 
  
  
 Liu, et al             Expires January 6, 2016                [Page 14] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

      |  |  |  |  +--rw provider-id-ref?   leafref 
      |  |  |  |  +--rw client-id-ref?     leafref 
      |  |  |  |  +--rw topology-id-ref?   leafref 
      |  |  |  |  +--rw path-element* [path-element-id] 
      |  |  |  |     .......... 
      |  |  |  +--rw underlay-protection-type?   uint16 
      |  |  |  +--rw underlay-trail-src 
      |  |  |     .......... 
      |  |  |  +--rw underlay-trail-des 
      |  |  |     .......... 
     

     
 4.8. Scheduling Parameters 

    The model allows time scheduling parameters to be specified for each 
    topological element or for the topology as a whole. These parameters 
    allow the provider to present different topological views to the 
    client at different time slots. The use of "scheduling parameters" 
    is optional and this functionality is tagged as a "feature" 
    ("configuration-schedule"). [Editor's Note: The notion of 
    "scheduling parameters" has wider applicability. The expectation is 
    that this will eventually be discussed in a separate document.] 

       +--rw schedules* [schedule-id] {configuration-schedule}? 
       |  +--rw schedule-id          uint32 
       |  +--rw start?               yang:date-and-time 
       |  +--rw schedule-duration?   string 
       |  +--rw repeat-interval?     string 
     
 4.9. Templates 

    The data model provides the users with the ability to define 
    templates and apply them to link and node configurations. The use of 
    "template" configuration is optional and this functionality is 
    tagged as a "feature" ("template").  

      +--rw topology* [provider-id client-id te-topology-id] 
      |  ........... 
      |  +--rw node* [te-node-id] 
      |  |  +--rw te-node-template?     leafref {template}?  
      |  |     .......... 
      |  +--rw link* [source-te-node-id source-te-link-id dest-te-node-
    id dest-te-link-id] 
      |     +--rw te-link-template?     leafref {template}? 
      |        .......... 
  
  
 Liu, et al             Expires January 6, 2016                [Page 15] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

      | 
      +--rw node-template* [name] {template}? 
      |  +--rw name                       te-template-name 
      |  +--rw priority?                  uint16 
      |  +--rw reference-change-policy?   enumeration 
      |  +--rw te-node-template*          leafref 
      |  +--rw te-node-attributes 
      |     .......... 
      +--rw link-template* [name] {template}? 
         +--rw name                       te-template-name 
         +--rw priority?                  uint16 
         +--rw reference-change-policy?   enumeration 
         +--rw te-link-template*          leafref 
         +--rw te-link-attributes 
            .......... 
     
    A template can be constructed using multiple other templates. When 
    two or more templates specify values for the same configuration 
    field, the value from the template with the highest priority is 
    used. The reference-change-policy specifies the action that needs to 
    be taken when the template changes on a configuration node that has 
    a reference to this template. The choices of action include taking 
    no action, rejecting the change to the template and applying the 
    change to the corresponding configuration. [Editor's Note: The 
    notion of "templates" has wider applicability. It is possible for 
    this to be discussed in a separate document.] 
     
 4.10. Notifications 

    Notifications are a key component of any topology data model.  

    [YANG-PUSH] defines a subscription and push mechanism for YANG 
    datastores. This mechanism currently allows the user to: 

    - Subscribe notifications on a per client basis 
    - Specify subtree filters or xpath filters so that only interested 
      contents will be sent. 
    - Specify either periodic or on-demand notifications. 

    The authors would like to recommend the use of this mechanism for 
    the TE-Topology notifications. They would also like to suggest the 
    following extensions to [YANG-PUSH] 

    - Specify specific entities that will trigger the push 
      notifications. These entities can be specified by xpath, like the 
      way a filter is specified. 
  
  
 Liu, et al             Expires January 6, 2016                [Page 16] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       
    - Specify or limit the triggering event type, e.g. "add", "delete", 
      "modify", or "all". The system sends the push notifications only 
      when such events happen on the triggering entities. 
       
    - Have an option to request either "incremental" or "full" 
      notifications for an entity. For "incremental", the notification 
      will contain only the changed attributes. 

     
 4.11. Open Items 

    - Augmenting [YANG-NET-TOPO]: The generic network topology building 
      blocks are discussed in [YANG-NET-TOPO]. This version of the 
      document does not use any of those constructs. The next revision 
      of this document should augment these constructs. 
       
    - Coordinating changes to [YANG-PUSH]: The changes to [YANG-PUSH] 
      discussed in Section 4.10 will need to be coordinated with the 
      authors of that draft. 

 5. Tree Structure 

    module: ietf-te-topology 
       +--rw te-topologies 
       |  +--rw topology* [provider-id client-id te-topology-id] 
       |  |  +--rw provider-id       te-global-id 
       |  |  +--rw client-id         te-global-id 
       |  |  +--rw te-topology-id    te-topology-id 
       |  |  +--rw schedules* [schedule-id] {configuration-schedule}? 
       |  |  |  +--rw schedule-id          uint32 
       |  |  |  +--rw start?               yang:date-and-time 
       |  |  |  +--rw schedule-duration?   string 
       |  |  |  +--rw repeat-interval?     string 
       |  |  +--rw topology-types 
       |  |  |  +--rw te-topology! 
       |  |  +--rw node* [te-node-id] 
       |  |  |  +--rw te-node-id            te-node-id 
       |  |  |  +--rw te-node-template?     leafref {template}? 
       |  |  |  +--rw te-node-attributes 
       |  |  |  |  +--rw schedules* [schedule-id] {configuration-
    schedule}? 
       |  |  |  |  |  +--rw schedule-id          uint32 
       |  |  |  |  |  +--rw start?               yang:date-and-time 
       |  |  |  |  |  +--rw schedule-duration?   string 
       |  |  |  |  |  +--rw repeat-interval?     string 
  
  
 Liu, et al             Expires January 6, 2016                [Page 17] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       |  |  |  |  +--rw name?                  inet:domain-name 
       |  |  |  |  +--rw signaling-address*     inet:ip-address 
       |  |  |  |  +--rw flag*                  flag-type 
       |  |  |  |  +--rw is-abstract?           boolean 
       |  |  |  |  +--rw underlay-topology {te-topology-hierarchy}? 
       |  |  |  |  |  +--rw provider-id-ref?   leafref 
       |  |  |  |  |  +--rw client-id-ref?     leafref 
       |  |  |  |  |  +--rw topology-id-ref?   leafref 
       |  |  |  |  +--rw connectivity-matrix* [id] 
       |  |  |  |     +--rw id            uint32 
       |  |  |  |     +--rw from-link 
       |  |  |  |     |  +--rw provider-id-ref?   leafref 
       |  |  |  |     |  +--rw client-id-ref?     leafref 
       |  |  |  |     |  +--rw topology-id-ref?   leafref 
       |  |  |  |     |  +--rw node-ref?          leafref 
       |  |  |  |     |  +--rw link-end-ref?      leafref 
       |  |  |  |     +--rw to-link 
       |  |  |  |     |  +--rw provider-id-ref?   leafref 
       |  |  |  |     |  +--rw client-id-ref?     leafref 
       |  |  |  |     |  +--rw topology-id-ref?   leafref 
       |  |  |  |     |  +--rw node-ref?          leafref 
       |  |  |  |     |  +--rw link-end-ref?      leafref 
       |  |  |  |     +--rw is-allowed?   boolean 
       |  |  |  +--rw te-link* [te-link-id] 
       |  |  |     +--rw te-link-id         te-link-id 
       |  |  |     +--rw (stack-level)? 
       |  |  |        +--:(bundle) 
       |  |  |        |  +--rw bundled-links 
       |  |  |        |     +--rw bundled-link* [sequence] 
       |  |  |        |        +--rw sequence       uint32 
       |  |  |        |        +--rw te-link-ref?   leafref 
       |  |  |        +--:(component) 
       |  |  |           +--rw component-links 
       |  |  |              +--rw component-link* [sequence] 
       |  |  |                 +--rw sequence              uint32 
       |  |  |                 +--rw component-link-ref?   leafref 
       |  |  +--rw link* [source-te-node-id source-te-link-id dest-te-
    node-id dest-te-link-id] 
       |  |     +--rw source-te-node-id     leafref 
       |  |     +--rw source-te-link-id     leafref 
       |  |     +--rw dest-te-node-id       leafref 
       |  |     +--rw dest-te-link-id       leafref 
       |  |     +--rw te-link-template?     leafref {template}? 
       |  |     +--rw te-link-attributes 
       |  |        +--rw schedules* [schedule-id] {configuration-
    schedule}? 
  
  
 Liu, et al             Expires January 6, 2016                [Page 18] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       |  |        |  +--rw schedule-id          uint32 
       |  |        |  +--rw start?               yang:date-and-time 
       |  |        |  +--rw schedule-duration?   string 
       |  |        |  +--rw repeat-interval?     string 
       |  |        +--rw name?                               string 
       |  |        +--rw flag*                               flag-type 
       |  |        +--rw is-abstract?                        boolean 
       |  |        +--rw underlay! {te-topology-hierarchy}? 
       |  |        |  +--rw underlay-primary-path 
       |  |        |  |  +--rw provider-id-ref?   leafref 
       |  |        |  |  +--rw client-id-ref?     leafref 
       |  |        |  |  +--rw topology-id-ref?   leafref 
       |  |        |  |  +--rw path-element* [path-element-id] 
       |  |        |  |     +--rw path-element-id     uint32 
       |  |        |  |     +--rw (type)? 
       |  |        |  |        +--:(ipv4-address) 
       |  |        |  |        |  +--rw v4-address?         inet:ipv4-
    address 
       |  |        |  |        |  +--rw v4-prefix-length?   uint8 
       |  |        |  |        |  +--rw v4-loose?           boolean 
       |  |        |  |        +--:(ipv6-address) 
       |  |        |  |        |  +--rw v6-address?         inet:ipv6-
    address 
       |  |        |  |        |  +--rw v6-prefix-length?   uint8 
       |  |        |  |        |  +--rw v6-loose?           boolean 
       |  |        |  |        +--:(as-number) 
       |  |        |  |        |  +--rw as-number?          uint16 
       |  |        |  |        +--:(unnumbered-link) 
       |  |        |  |        |  +--rw router-id?          inet:ip-
    address 
       |  |        |  |        |  +--rw interface-id?       uint32 
       |  |        |  |        +--:(label) 
       |  |        |  |           +--rw value?              uint32 
       |  |        |  +--rw underlay-backup-path* [index] 
       |  |        |  |  +--rw index              uint32 
       |  |        |  |  +--rw provider-id-ref?   leafref 
       |  |        |  |  +--rw client-id-ref?     leafref 
       |  |        |  |  +--rw topology-id-ref?   leafref 
       |  |        |  |  +--rw path-element* [path-element-id] 
       |  |        |  |     +--rw path-element-id     uint32 
       |  |        |  |     +--rw (type)? 
       |  |        |  |        +--:(ipv4-address) 
       |  |        |  |        |  +--rw v4-address?         inet:ipv4-
    address 
       |  |        |  |        |  +--rw v4-prefix-length?   uint8 
       |  |        |  |        |  +--rw v4-loose?           boolean 
  
  
 Liu, et al             Expires January 6, 2016                [Page 19] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       |  |        |  |        +--:(ipv6-address) 
       |  |        |  |        |  +--rw v6-address?         inet:ipv6-
    address 
       |  |        |  |        |  +--rw v6-prefix-length?   uint8 
       |  |        |  |        |  +--rw v6-loose?           boolean 
       |  |        |  |        +--:(as-number) 
       |  |        |  |        |  +--rw as-number?          uint16 
       |  |        |  |        +--:(unnumbered-link) 
       |  |        |  |        |  +--rw router-id?          inet:ip-
    address 
       |  |        |  |        |  +--rw interface-id?       uint32 
       |  |        |  |        +--:(label) 
       |  |        |  |           +--rw value?              uint32 
       |  |        |  +--rw underlay-protection-type?   uint16 
       |  |        |  +--rw underlay-trail-src 
       |  |        |  |  +--rw provider-id-ref?   leafref 
       |  |        |  |  +--rw client-id-ref?     leafref 
       |  |        |  |  +--rw topology-id-ref?   leafref 
       |  |        |  |  +--rw node-ref?          leafref 
       |  |        |  |  +--rw link-end-ref?      leafref 
       |  |        |  +--rw underlay-trail-des 
       |  |        |     +--rw provider-id-ref?   leafref 
       |  |        |     +--rw client-id-ref?     leafref 
       |  |        |     +--rw topology-id-ref?   leafref 
       |  |        |     +--rw node-ref?          leafref 
       |  |        |     +--rw link-end-ref?      leafref 
       |  |        +--rw admin-status?                       enumeration 
       |  |        +--rw performance-metric-throttle {te-performance-
    metric}? 
       |  |        |  +--rw unidirectional-delay-offset?           
    uint32 
       |  |        |  +--rw measure-interval?                      
    uint32 
       |  |        |  +--rw advertisement-interval?                
    uint32 
       |  |        |  +--rw suppression-interval?                  
    uint32 
       |  |        |  +--rw threshold-out 
       |  |        |  |  +--rw unidirectional-delay?                 
    uint32 
       |  |        |  |  +--rw unidirectional-min-delay?             
    uint32 
       |  |        |  |  +--rw unidirectional-max-delay?             
    uint32 
       |  |        |  |  +--rw unidirectional-delay-variation?       
    uint32 
  
  
 Liu, et al             Expires January 6, 2016                [Page 20] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       |  |        |  |  +--rw unidirectional-packet-loss?           
    decimal64 
       |  |        |  |  +--rw unidirectional-residual-bandwidth?    
    decimal64 
       |  |        |  |  +--rw unidirectional-available-bandwidth?   
    decimal64 
       |  |        |  |  +--rw unidirectional-utilized-bandwidth?    
    decimal64 
       |  |        |  +--rw threshold-in 
       |  |        |  |  +--rw unidirectional-delay?                 
    uint32 
       |  |        |  |  +--rw unidirectional-min-delay?             
    uint32 
       |  |        |  |  +--rw unidirectional-max-delay?             
    uint32 
       |  |        |  |  +--rw unidirectional-delay-variation?       
    uint32 
       |  |        |  |  +--rw unidirectional-packet-loss?           
    decimal64 
       |  |        |  |  +--rw unidirectional-residual-bandwidth?    
    decimal64 
       |  |        |  |  +--rw unidirectional-available-bandwidth?   
    decimal64 
       |  |        |  |  +--rw unidirectional-utilized-bandwidth?    
    decimal64 
       |  |        |  +--rw threshold-accelerated-advertisement 
       |  |        |     +--rw unidirectional-delay?                 
    uint32 
       |  |        |     +--rw unidirectional-min-delay?             
    uint32 
       |  |        |     +--rw unidirectional-max-delay?             
    uint32 
       |  |        |     +--rw unidirectional-delay-variation?       
    uint32 
       |  |        |     +--rw unidirectional-packet-loss?           
    decimal64 
       |  |        |     +--rw unidirectional-residual-bandwidth?    
    decimal64 
       |  |        |     +--rw unidirectional-available-bandwidth?   
    decimal64 
       |  |        |     +--rw unidirectional-utilized-bandwidth?    
    decimal64 
       |  |        +--rw link-index?                         uint64 
       |  |        +--rw administrative-group?               te-
    types:admin-groups 
       |  |        +--rw max-link-bandwidth?                 decimal64 
  
  
 Liu, et al             Expires January 6, 2016                [Page 21] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       |  |        +--rw max-resv-link-bandwidth?            decimal64 
       |  |        +--rw unreserved-bandwidth* [priority] 
       |  |        |  +--rw priority     uint8 
       |  |        |  +--rw bandwidth?   decimal64 
       |  |        +--rw te-default-metric?                  uint32 
       |  |        +--rw performance-metric {te-performance-metric}? 
       |  |        |  +--rw measurement 
       |  |        |  |  +--rw unidirectional-delay?                 
    uint32 
       |  |        |  |  +--rw unidirectional-min-delay?             
    uint32 
       |  |        |  |  +--rw unidirectional-max-delay?             
    uint32 
       |  |        |  |  +--rw unidirectional-delay-variation?       
    uint32 
       |  |        |  |  +--rw unidirectional-packet-loss?           
    decimal64 
       |  |        |  |  +--rw unidirectional-residual-bandwidth?    
    decimal64 
       |  |        |  |  +--rw unidirectional-available-bandwidth?   
    decimal64 
       |  |        |  |  +--rw unidirectional-utilized-bandwidth?    
    decimal64 
       |  |        |  +--rw normality 
       |  |        |     +--rw unidirectional-delay?                 
    performance-metric-normality 
       |  |        |     +--rw unidirectional-min-delay?             
    performance-metric-normality 
       |  |        |     +--rw unidirectional-max-delay?             
    performance-metric-normality 
       |  |        |     +--rw unidirectional-delay-variation?       
    performance-metric-normality 
       |  |        |     +--rw unidirectional-packet-loss?           
    performance-metric-normality 
       |  |        |     +--rw unidirectional-residual-bandwidth?    
    performance-metric-normality 
       |  |        |     +--rw unidirectional-available-bandwidth?   
    performance-metric-normality 
       |  |        |     +--rw unidirectional-utilized-bandwidth?    
    performance-metric-normality 
       |  |        +--rw link-protection-type?               enumeration 
       |  |        +--rw interface-switching-capabilities* [switching-
    capability] 
       |  |        |  +--rw switching-capability               
    identityref 

  
   
 Liu, et al             Expires January 6, 2016                [Page 22] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       |  |        |  +--rw encoding?                          
    identityref 
       |  |        |  +--rw max-lsp-bandwidth* [priority] 
       |  |        |  |  +--rw priority     uint8 
       |  |        |  |  +--rw bandwidth?   decimal64 
       |  |        |  +--rw packet-switch-capable 
       |  |        |  |  +--rw minimum-lsp-bandwidth?   decimal64 
       |  |        |  |  +--rw interface-mtu?           uint16 
       |  |        |  +--rw time-division-multiplex-capable 
       |  |        |     +--rw minimum-lsp-bandwidth?   decimal64 
       |  |        |     +--rw indication?              enumeration 
       |  |        +--rw te-srlgs 
       |  |           +--rw values*   te-types:srlg 
       |  +--rw node-template* [name] {template}? 
       |  |  +--rw name                       te-template-name 
       |  |  +--rw priority?                  uint16 
       |  |  +--rw reference-change-policy?   enumeration 
       |  |  +--rw te-node-template*          leafref 
       |  |  +--rw te-node-attributes 
       |  |  |  +--rw schedules* [schedule-id] {configuration-schedule}? 
       |  |  |  |  +--rw schedule-id          uint32 
       |  |  |  |  +--rw start?               yang:date-and-time 
       |  |  |  |  +--rw schedule-duration?   string 
       |  |  |  |  +--rw repeat-interval?     string 
       |  |  |  +--rw name?                  inet:domain-name 
       |  |  |  +--rw signaling-address*     inet:ip-address 
       |  |  |  +--rw flag*                  flag-type 
       |  |  |  +--rw is-abstract?           boolean 
       |  |  |  +--rw underlay-topology {te-topology-hierarchy}? 
       |  |  |  |  +--rw provider-id-ref?   leafref 
       |  |  |  |  +--rw client-id-ref?     leafref 
       |  |  |  |  +--rw topology-id-ref?   leafref 
       |  |  |  +--rw connectivity-matrix* [id] 
       |  |  |     +--rw id            uint32 
       |  |  |     +--rw from-link 
       |  |  |     |  +--rw provider-id-ref?   leafref 
       |  |  |     |  +--rw client-id-ref?     leafref 
       |  |  |     |  +--rw topology-id-ref?   leafref 
       |  |  |     |  +--rw node-ref?          leafref 
       |  |  |     |  +--rw link-end-ref?      leafref 
       |  |  |     +--rw to-link 
       |  |  |     |  +--rw provider-id-ref?   leafref 
       |  |  |     |  +--rw client-id-ref?     leafref 
       |  |  |     |  +--rw topology-id-ref?   leafref 
       |  |  |     |  +--rw node-ref?          leafref 
       |  |  |     |  +--rw link-end-ref?      leafref 
  
  
 Liu, et al             Expires January 6, 2016                [Page 23] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       |  |  |     +--rw is-allowed?   boolean 
       |  |  +--rw te-link* [te-link-id] 
       |  |     +--rw te-link-id         te-link-id 
       |  |     +--rw (stack-level)? 
       |  |        +--:(bundle) 
       |  |        |  +--rw bundled-links 
       |  |        |     +--rw bundled-link* [sequence] 
       |  |        |        +--rw sequence       uint32 
       |  |        |        +--rw te-link-ref?   leafref 
       |  |        +--:(component) 
       |  |           +--rw component-links 
       |  |              +--rw component-link* [sequence] 
       |  |                 +--rw sequence              uint32 
       |  |                 +--rw component-link-ref?   leafref 
       |  +--rw link-template* [name] {template}? 
       |     +--rw name                       te-template-name 
       |     +--rw priority?                  uint16 
       |     +--rw reference-change-policy?   enumeration 
       |     +--rw te-link-template*          leafref 
       |     +--rw te-link-attributes 
       |        +--rw schedules* [schedule-id] {configuration-schedule}? 
       |        |  +--rw schedule-id          uint32 
       |        |  +--rw start?               yang:date-and-time 
       |        |  +--rw schedule-duration?   string 
       |        |  +--rw repeat-interval?     string 
       |        +--rw name?                               string 
       |        +--rw flag*                               flag-type 
       |        +--rw is-abstract?                        boolean 
       |        +--rw underlay! {te-topology-hierarchy}? 
       |        |  +--rw underlay-primary-path 
       |        |  |  +--rw provider-id-ref?   leafref 
       |        |  |  +--rw client-id-ref?     leafref 
       |        |  |  +--rw topology-id-ref?   leafref 
       |        |  |  +--rw path-element* [path-element-id] 
       |        |  |     +--rw path-element-id     uint32 
       |        |  |     +--rw (type)? 
       |        |  |        +--:(ipv4-address) 
       |        |  |        |  +--rw v4-address?         inet:ipv4-
    address 
       |        |  |        |  +--rw v4-prefix-length?   uint8 
       |        |  |        |  +--rw v4-loose?           boolean 
       |        |  |        +--:(ipv6-address) 
       |        |  |        |  +--rw v6-address?         inet:ipv6-
    address 
       |        |  |        |  +--rw v6-prefix-length?   uint8 
       |        |  |        |  +--rw v6-loose?           boolean 
  
  
 Liu, et al             Expires January 6, 2016                [Page 24] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       |        |  |        +--:(as-number) 
       |        |  |        |  +--rw as-number?          uint16 
       |        |  |        +--:(unnumbered-link) 
       |        |  |        |  +--rw router-id?          inet:ip-address 
       |        |  |        |  +--rw interface-id?       uint32 
       |        |  |        +--:(label) 
       |        |  |           +--rw value?              uint32 
       |        |  +--rw underlay-backup-path* [index] 
       |        |  |  +--rw index              uint32 
       |        |  |  +--rw provider-id-ref?   leafref 
       |        |  |  +--rw client-id-ref?     leafref 
       |        |  |  +--rw topology-id-ref?   leafref 
       |        |  |  +--rw path-element* [path-element-id] 
       |        |  |     +--rw path-element-id     uint32 
       |        |  |     +--rw (type)? 
       |        |  |        +--:(ipv4-address) 
       |        |  |        |  +--rw v4-address?         inet:ipv4-
    address 
       |        |  |        |  +--rw v4-prefix-length?   uint8 
       |        |  |        |  +--rw v4-loose?           boolean 
       |        |  |        +--:(ipv6-address) 
       |        |  |        |  +--rw v6-address?         inet:ipv6-
    address 
       |        |  |        |  +--rw v6-prefix-length?   uint8 
       |        |  |        |  +--rw v6-loose?           boolean 
       |        |  |        +--:(as-number) 
       |        |  |        |  +--rw as-number?          uint16 
       |        |  |        +--:(unnumbered-link) 
       |        |  |        |  +--rw router-id?          inet:ip-address 
       |        |  |        |  +--rw interface-id?       uint32 
       |        |  |        +--:(label) 
       |        |  |           +--rw value?              uint32 
       |        |  +--rw underlay-protection-type?   uint16 
       |        |  +--rw underlay-trail-src 
       |        |  |  +--rw provider-id-ref?   leafref 
       |        |  |  +--rw client-id-ref?     leafref 
       |        |  |  +--rw topology-id-ref?   leafref 
       |        |  |  +--rw node-ref?          leafref 
       |        |  |  +--rw link-end-ref?      leafref 
       |        |  +--rw underlay-trail-des 
       |        |     +--rw provider-id-ref?   leafref 
       |        |     +--rw client-id-ref?     leafref 
       |        |     +--rw topology-id-ref?   leafref 
       |        |     +--rw node-ref?          leafref 
       |        |     +--rw link-end-ref?      leafref 
       |        +--rw admin-status?                       enumeration 
  
  
 Liu, et al             Expires January 6, 2016                [Page 25] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       |        +--rw performance-metric-throttle {te-performance-
    metric}? 
       |        |  +--rw unidirectional-delay-offset?           uint32 
       |        |  +--rw measure-interval?                      uint32 
       |        |  +--rw advertisement-interval?                uint32 
       |        |  +--rw suppression-interval?                  uint32 
       |        |  +--rw threshold-out 
       |        |  |  +--rw unidirectional-delay?                 uint32 
       |        |  |  +--rw unidirectional-min-delay?             uint32 
       |        |  |  +--rw unidirectional-max-delay?             uint32 
       |        |  |  +--rw unidirectional-delay-variation?       uint32 
       |        |  |  +--rw unidirectional-packet-loss?           
    decimal64 
       |        |  |  +--rw unidirectional-residual-bandwidth?    
    decimal64 
       |        |  |  +--rw unidirectional-available-bandwidth?   
    decimal64 
       |        |  |  +--rw unidirectional-utilized-bandwidth?    
    decimal64 
       |        |  +--rw threshold-in 
       |        |  |  +--rw unidirectional-delay?                 uint32 
       |        |  |  +--rw unidirectional-min-delay?             uint32 
       |        |  |  +--rw unidirectional-max-delay?             uint32 
       |        |  |  +--rw unidirectional-delay-variation?       uint32 
       |        |  |  +--rw unidirectional-packet-loss?           
    decimal64 
       |        |  |  +--rw unidirectional-residual-bandwidth?    
    decimal64 
       |        |  |  +--rw unidirectional-available-bandwidth?   
    decimal64 
       |        |  |  +--rw unidirectional-utilized-bandwidth?    
    decimal64 
       |        |  +--rw threshold-accelerated-advertisement 
       |        |     +--rw unidirectional-delay?                 uint32 
       |        |     +--rw unidirectional-min-delay?             uint32 
       |        |     +--rw unidirectional-max-delay?             uint32 
       |        |     +--rw unidirectional-delay-variation?       uint32 
       |        |     +--rw unidirectional-packet-loss?           
    decimal64 
       |        |     +--rw unidirectional-residual-bandwidth?    
    decimal64 
       |        |     +--rw unidirectional-available-bandwidth?   
    decimal64 
       |        |     +--rw unidirectional-utilized-bandwidth?    
    decimal64 
       |        +--rw link-index?                         uint64 
  
  
 Liu, et al             Expires January 6, 2016                [Page 26] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       |        +--rw administrative-group?               te-
    types:admin-groups 
       |        +--rw max-link-bandwidth?                 decimal64 
       |        +--rw max-resv-link-bandwidth?            decimal64 
       |        +--rw unreserved-bandwidth* [priority] 
       |        |  +--rw priority     uint8 
       |        |  +--rw bandwidth?   decimal64 
       |        +--rw te-default-metric?                  uint32 
       |        +--rw performance-metric {te-performance-metric}? 
       |        |  +--rw measurement 
       |        |  |  +--rw unidirectional-delay?                 uint32 
       |        |  |  +--rw unidirectional-min-delay?             uint32 
       |        |  |  +--rw unidirectional-max-delay?             uint32 
       |        |  |  +--rw unidirectional-delay-variation?       uint32 
       |        |  |  +--rw unidirectional-packet-loss?           
    decimal64 
       |        |  |  +--rw unidirectional-residual-bandwidth?    
    decimal64 
       |        |  |  +--rw unidirectional-available-bandwidth?   
    decimal64 
       |        |  |  +--rw unidirectional-utilized-bandwidth?    
    decimal64 
       |        |  +--rw normality 
       |        |     +--rw unidirectional-delay?                 
    performance-metric-normality 
       |        |     +--rw unidirectional-min-delay?             
    performance-metric-normality 
       |        |     +--rw unidirectional-max-delay?             
    performance-metric-normality 
       |        |     +--rw unidirectional-delay-variation?       
    performance-metric-normality 
       |        |     +--rw unidirectional-packet-loss?           
    performance-metric-normality 
       |        |     +--rw unidirectional-residual-bandwidth?    
    performance-metric-normality 
       |        |     +--rw unidirectional-available-bandwidth?   
    performance-metric-normality 
       |        |     +--rw unidirectional-utilized-bandwidth?    
    performance-metric-normality 
       |        +--rw link-protection-type?               enumeration 
       |        +--rw interface-switching-capabilities* [switching-
    capability] 
       |        |  +--rw switching-capability               identityref 
       |        |  +--rw encoding?                          identityref 
       |        |  +--rw max-lsp-bandwidth* [priority] 
       |        |  |  +--rw priority     uint8 
  
  
 Liu, et al             Expires January 6, 2016                [Page 27] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       |        |  |  +--rw bandwidth?   decimal64 
       |        |  +--rw packet-switch-capable 
       |        |  |  +--rw minimum-lsp-bandwidth?   decimal64 
       |        |  |  +--rw interface-mtu?           uint16 
       |        |  +--rw time-division-multiplex-capable 
       |        |     +--rw minimum-lsp-bandwidth?   decimal64 
       |        |     +--rw indication?              enumeration 
       |        +--rw te-srlgs 
       |           +--rw values*   te-types:srlg 
       +--ro te-topologies-state 
          +--ro topology* [provider-id client-id te-topology-id] 
             +--ro provider-id        te-global-id 
             +--ro client-id          te-global-id 
             +--ro te-topology-id     te-topology-id 
             +--ro server-provided?   boolean 
             +--ro topology-types 
             |  +--ro te-topology! 
             +--ro node* [te-node-id] 
             |  +--ro te-node-id            te-node-id 
             |  +--ro te-node-template?     leafref {template}? 
             |  +--ro te-node-attributes 
             |  |  +--ro schedules* [schedule-id] {configuration-
    schedule}? 
             |  |  |  +--ro schedule-id          uint32 
             |  |  |  +--ro start?               yang:date-and-time 
             |  |  |  +--ro schedule-duration?   string 
             |  |  |  +--ro repeat-interval?     string 
             |  |  +--ro name?                  inet:domain-name 
             |  |  +--ro signaling-address*     inet:ip-address 
             |  |  +--ro flag*                  flag-type 
             |  |  +--ro is-abstract?           boolean 
             |  |  +--ro underlay-topology {te-topology-hierarchy}? 
             |  |  |  +--ro provider-id-ref?   leafref 
             |  |  |  +--ro client-id-ref?     leafref 
             |  |  |  +--ro topology-id-ref?   leafref 
             |  |  +--ro connectivity-matrix* [id] 
             |  |     +--ro id            uint32 
             |  |     +--ro from-link 
             |  |     |  +--ro provider-id-ref?   leafref 
             |  |     |  +--ro client-id-ref?     leafref 
             |  |     |  +--ro topology-id-ref?   leafref 
             |  |     |  +--ro node-ref?          leafref 
             |  |     |  +--ro link-end-ref?      leafref 
             |  |     +--ro to-link 
             |  |     |  +--ro provider-id-ref?   leafref 
             |  |     |  +--ro client-id-ref?     leafref 
  
  
 Liu, et al             Expires January 6, 2016                [Page 28] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

             |  |     |  +--ro topology-id-ref?   leafref 
             |  |     |  +--ro node-ref?          leafref 
             |  |     |  +--ro link-end-ref?      leafref 
             |  |     +--ro is-allowed?   boolean 
             |  +--ro te-link* [te-link-id] 
             |  |  +--ro te-link-id         te-link-id 
             |  |  +--ro (stack-level)? 
             |  |     +--:(bundle) 
             |  |     |  +--ro bundled-links 
             |  |     |     +--ro bundled-link* [sequence] 
             |  |     |        +--ro sequence       uint32 
             |  |     |        +--ro te-link-ref?   leafref 
             |  |     +--:(component) 
             |  |        +--ro component-links 
             |  |           +--ro component-link* [sequence] 
             |  |              +--ro sequence              uint32 
             |  |              +--ro component-link-ref?   leafref 
             |  +--ro te-node-state 
             |     +--ro information-source?         enumeration 
             |     +--ro information-source-state 
             |        +--ro credibility-preference?   uint16 
             |        +--ro topology 
             |        |  +--ro provider-id-ref?   leafref 
             |        |  +--ro client-id-ref?     leafref 
             |        |  +--ro topology-id-ref?   leafref 
             |        +--ro routing-instance?         string 
             +--ro link* [source-te-node-id source-te-link-id dest-te-
    node-id dest-te-link-id] 
                +--ro source-te-node-id     leafref 
                +--ro source-te-link-id     leafref 
                +--ro dest-te-node-id       leafref 
                +--ro dest-te-link-id       leafref 
                +--ro te-link-template?     leafref {template}? 
                +--ro te-link-attributes 
                |  +--ro schedules* [schedule-id] {configuration-
    schedule}? 
                |  |  +--ro schedule-id          uint32 
                |  |  +--ro start?               yang:date-and-time 
                |  |  +--ro schedule-duration?   string 
                |  |  +--ro repeat-interval?     string 
                |  +--ro name?                               string 
                |  +--ro flag*                               flag-type 
                |  +--ro is-abstract?                        boolean 
                |  +--ro underlay! {te-topology-hierarchy}? 
                |  |  +--ro underlay-primary-path 
                |  |  |  +--ro provider-id-ref?   leafref 
  
   
 Liu, et al             Expires January 6, 2016                [Page 29] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

                |  |  |  +--ro client-id-ref?     leafref 
                |  |  |  +--ro topology-id-ref?   leafref 
                |  |  |  +--ro path-element* [path-element-id] 
                |  |  |     +--ro path-element-id     uint32 
                |  |  |     +--ro (type)? 
                |  |  |        +--:(ipv4-address) 
                |  |  |        |  +--ro v4-address?         inet:ipv4-
    address 
                |  |  |        |  +--ro v4-prefix-length?   uint8 
                |  |  |        |  +--ro v4-loose?           boolean 
                |  |  |        +--:(ipv6-address) 
                |  |  |        |  +--ro v6-address?         inet:ipv6-
    address 
                |  |  |        |  +--ro v6-prefix-length?   uint8 
                |  |  |        |  +--ro v6-loose?           boolean 
                |  |  |        +--:(as-number) 
                |  |  |        |  +--ro as-number?          uint16 
                |  |  |        +--:(unnumbered-link) 
                |  |  |        |  +--ro router-id?          inet:ip-
    address 
                |  |  |        |  +--ro interface-id?       uint32 
                |  |  |        +--:(label) 
                |  |  |           +--ro value?              uint32 
                |  |  +--ro underlay-backup-path* [index] 
                |  |  |  +--ro index              uint32 
                |  |  |  +--ro provider-id-ref?   leafref 
                |  |  |  +--ro client-id-ref?     leafref 
                |  |  |  +--ro topology-id-ref?   leafref 
                |  |  |  +--ro path-element* [path-element-id] 
                |  |  |     +--ro path-element-id     uint32 
                |  |  |     +--ro (type)? 
                |  |  |        +--:(ipv4-address) 
                |  |  |        |  +--ro v4-address?         inet:ipv4-
    address 
                |  |  |        |  +--ro v4-prefix-length?   uint8 
                |  |  |        |  +--ro v4-loose?           boolean 
                |  |  |        +--:(ipv6-address) 
                |  |  |        |  +--ro v6-address?         inet:ipv6-
    address 
                |  |  |        |  +--ro v6-prefix-length?   uint8 
                |  |  |        |  +--ro v6-loose?           boolean 
                |  |  |        +--:(as-number) 
                |  |  |        |  +--ro as-number?          uint16 
                |  |  |        +--:(unnumbered-link) 
                |  |  |        |  +--ro router-id?          inet:ip-
    address 
  
  
 Liu, et al             Expires January 6, 2016                [Page 30] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

                |  |  |        |  +--ro interface-id?       uint32 
                |  |  |        +--:(label) 
                |  |  |           +--ro value?              uint32 
                |  |  +--ro underlay-protection-type?   uint16 
                |  |  +--ro underlay-trail-src 
                |  |  |  +--ro provider-id-ref?   leafref 
                |  |  |  +--ro client-id-ref?     leafref 
                |  |  |  +--ro topology-id-ref?   leafref 
                |  |  |  +--ro node-ref?          leafref 
                |  |  |  +--ro link-end-ref?      leafref 
                |  |  +--ro underlay-trail-des 
                |  |  |  +--ro provider-id-ref?   leafref 
                |  |  |  +--ro client-id-ref?     leafref 
                |  |  |  +--ro topology-id-ref?   leafref 
                |  |  |  +--ro node-ref?          leafref 
                |  |  |  +--ro link-end-ref?      leafref 
                |  |  +--ro dynamic?                    boolean 
                |  |  +--ro committed?                  boolean 
                |  +--ro admin-status?                       enumeration 
                |  +--ro performance-metric-throttle {te-performance-
    metric}? 
                |  |  +--ro unidirectional-delay-offset?           
    uint32 
                |  |  +--ro measure-interval?                      
    uint32 
                |  |  +--ro advertisement-interval?                
    uint32 
                |  |  +--ro suppression-interval?                  
    uint32 
                |  |  +--ro threshold-out 
                |  |  |  +--ro unidirectional-delay?                 
    uint32 
                |  |  |  +--ro unidirectional-min-delay?             
    uint32 
                |  |  |  +--ro unidirectional-max-delay?             
    uint32 
                |  |  |  +--ro unidirectional-delay-variation?       
    uint32 
                |  |  |  +--ro unidirectional-packet-loss?           
    decimal64 
                |  |  |  +--ro unidirectional-residual-bandwidth?    
    decimal64 
                |  |  |  +--ro unidirectional-available-bandwidth?   
    decimal64 
                |  |  |  +--ro unidirectional-utilized-bandwidth?    
    decimal64 
  
  
 Liu, et al             Expires January 6, 2016                [Page 31] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

                |  |  +--ro threshold-in 
                |  |  |  +--ro unidirectional-delay?                 
    uint32 
                |  |  |  +--ro unidirectional-min-delay?             
    uint32 
                |  |  |  +--ro unidirectional-max-delay?             
    uint32 
                |  |  |  +--ro unidirectional-delay-variation?       
    uint32 
                |  |  |  +--ro unidirectional-packet-loss?           
    decimal64 
                |  |  |  +--ro unidirectional-residual-bandwidth?    
    decimal64 
                |  |  |  +--ro unidirectional-available-bandwidth?   
    decimal64 
                |  |  |  +--ro unidirectional-utilized-bandwidth?    
    decimal64 
                |  |  +--ro threshold-accelerated-advertisement 
                |  |     +--ro unidirectional-delay?                 
    uint32 
                |  |     +--ro unidirectional-min-delay?             
    uint32 
                |  |     +--ro unidirectional-max-delay?             
    uint32 
                |  |     +--ro unidirectional-delay-variation?       
    uint32 
                |  |     +--ro unidirectional-packet-loss?           
    decimal64 
                |  |     +--ro unidirectional-residual-bandwidth?    
    decimal64 
                |  |     +--ro unidirectional-available-bandwidth?   
    decimal64 
                |  |     +--ro unidirectional-utilized-bandwidth?    
    decimal64 
                |  +--ro link-index?                         uint64 
                |  +--ro administrative-group?               te-
    types:admin-groups 
                |  +--ro max-link-bandwidth?                 decimal64 
                |  +--ro max-resv-link-bandwidth?            decimal64 
                |  +--ro unreserved-bandwidth* [priority] 
                |  |  +--ro priority     uint8 
                |  |  +--ro bandwidth?   decimal64 
                |  +--ro te-default-metric?                  uint32 
                |  +--ro performance-metric {te-performance-metric}? 
                |  |  +--ro measurement 

  
  
 Liu, et al             Expires January 6, 2016                [Page 32] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

                |  |  |  +--ro unidirectional-delay?                 
    uint32 
                |  |  |  +--ro unidirectional-min-delay?             
    uint32 
                |  |  |  +--ro unidirectional-max-delay?             
    uint32 
                |  |  |  +--ro unidirectional-delay-variation?       
    uint32 
                |  |  |  +--ro unidirectional-packet-loss?           
    decimal64 
                |  |  |  +--ro unidirectional-residual-bandwidth?    
    decimal64 
                |  |  |  +--ro unidirectional-available-bandwidth?   
    decimal64 
                |  |  |  +--ro unidirectional-utilized-bandwidth?    
    decimal64 
                |  |  +--ro normality 
                |  |     +--ro unidirectional-delay?                 
    performance-metric-normality 
                |  |     +--ro unidirectional-min-delay?             
    performance-metric-normality 
                |  |     +--ro unidirectional-max-delay?             
    performance-metric-normality 
                |  |     +--ro unidirectional-delay-variation?       
    performance-metric-normality 
                |  |     +--ro unidirectional-packet-loss?           
    performance-metric-normality 
                |  |     +--ro unidirectional-residual-bandwidth?    
    performance-metric-normality 
                |  |     +--ro unidirectional-available-bandwidth?   
    performance-metric-normality 
                |  |     +--ro unidirectional-utilized-bandwidth?    
    performance-metric-normality 
                |  +--ro link-protection-type?               enumeration 
                |  +--ro interface-switching-capabilities* [switching-
    capability] 
                |  |  +--ro switching-capability               
    identityref 
                |  |  +--ro encoding?                          
    identityref 
                |  |  +--ro max-lsp-bandwidth* [priority] 
                |  |  |  +--ro priority     uint8 
                |  |  |  +--ro bandwidth?   decimal64 
                |  |  +--ro packet-switch-capable 
                |  |  |  +--ro minimum-lsp-bandwidth?   decimal64 
                |  |  |  +--ro interface-mtu?           uint16 
  
  
 Liu, et al             Expires January 6, 2016                [Page 33] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

                |  |  +--ro time-division-multiplex-capable 
                |  |     +--ro minimum-lsp-bandwidth?   decimal64 
                |  |     +--ro indication?              enumeration 
                |  +--ro te-srlgs 
                |     +--ro values*   te-types:srlg 
                +--ro te-link-state 
                   +--ro oper-status?                enumeration 
                   +--ro information-source?         enumeration 
                   +--ro information-source-state 
                   |  +--ro credibility-preference?   uint16 
                   |  +--ro topology 
                   |  |  +--ro provider-id-ref?   leafref 
                   |  |  +--ro client-id-ref?     leafref 
                   |  |  +--ro topology-id-ref?   leafref 
                   |  +--ro routing-instance?         string 
                   +--ro alt-information-sources* [information-source] 
                      +--ro information-source                  
    enumeration 
                      +--ro information-source-state 
                      |  +--ro credibility-preference?   uint16 
                      |  +--ro topology 
                      |  |  +--ro provider-id-ref?   leafref 
                      |  |  +--ro client-id-ref?     leafref 
                      |  |  +--ro topology-id-ref?   leafref 
                      |  +--ro routing-instance?         string 
                      +--ro link-index?                         uint64 
                      +--ro administrative-group?               te-
    types:admin-groups 
                      +--ro max-link-bandwidth?                 
    decimal64 
                      +--ro max-resv-link-bandwidth?            
    decimal64 
                      +--ro unreserved-bandwidth* [priority] 
                      |  +--ro priority     uint8 
                      |  +--ro bandwidth?   decimal64 
                      +--ro te-default-metric?                  uint32 
                      +--ro performance-metric {te-performance-metric}? 
                      |  +--ro measurement 
                      |  |  +--ro unidirectional-delay?                 
    uint32 
                      |  |  +--ro unidirectional-min-delay?             
    uint32 
                      |  |  +--ro unidirectional-max-delay?             
    uint32 
                      |  |  +--ro unidirectional-delay-variation?       
    uint32 
  
  
 Liu, et al             Expires January 6, 2016                [Page 34] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

                      |  |  +--ro unidirectional-packet-loss?           
    decimal64 
                      |  |  +--ro unidirectional-residual-bandwidth?    
    decimal64 
                      |  |  +--ro unidirectional-available-bandwidth?   
    decimal64 
                      |  |  +--ro unidirectional-utilized-bandwidth?    
    decimal64 
                      |  +--ro normality 
                      |     +--ro unidirectional-delay?                 
    performance-metric-normality 
                      |     +--ro unidirectional-min-delay?             
    performance-metric-normality 
                      |     +--ro unidirectional-max-delay?             
    performance-metric-normality 
                      |     +--ro unidirectional-delay-variation?       
    performance-metric-normality 
                      |     +--ro unidirectional-packet-loss?           
    performance-metric-normality 
                      |     +--ro unidirectional-residual-bandwidth?    
    performance-metric-normality 
                      |     +--ro unidirectional-available-bandwidth?   
    performance-metric-normality 
                      |     +--ro unidirectional-utilized-bandwidth?    
    performance-metric-normality 
                      +--ro link-protection-type?               
    enumeration 
                      +--ro interface-switching-capabilities* 
    [switching-capability] 
                      |  +--ro switching-capability               
    identityref 
                      |  +--ro encoding?                          
    identityref 
                      |  +--ro max-lsp-bandwidth* [priority] 
                      |  |  +--ro priority     uint8 
                      |  |  +--ro bandwidth?   decimal64 
                      |  +--ro packet-switch-capable 
                      |  |  +--ro minimum-lsp-bandwidth?   decimal64 
                      |  |  +--ro interface-mtu?           uint16 
                      |  +--ro time-division-multiplex-capable 
                      |     +--ro minimum-lsp-bandwidth?   decimal64 
                      |     +--ro indication?              enumeration 
                      +--ro te-srlgs 
                         +--ro values*   te-types:srlg 
    notifications: 
       +---n te-node-event     
  
  
 Liu, et al             Expires January 6, 2016                [Page 35] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       |  +--ro event-type?           te-topology-event-type 
       |  +--ro provider-id-ref?      leafref 
       |  +--ro client-id-ref?        leafref 
       |  +--ro topology-id-ref?      leafref 
       |  +--ro node-ref?             leafref 
       |  +--ro te-topology! 
       |  +--ro te-node-attributes 
       |  |  +--ro schedules* [schedule-id] {configuration-schedule}? 
       |  |  |  +--ro schedule-id          uint32 
       |  |  |  +--ro start?               yang:date-and-time 
       |  |  |  +--ro schedule-duration?   string 
       |  |  |  +--ro repeat-interval?     string 
       |  |  +--ro name?                  inet:domain-name 
       |  |  +--ro signaling-address*     inet:ip-address 
       |  |  +--ro flag*                  flag-type 
       |  |  +--ro is-abstract?           boolean 
       |  |  +--ro underlay-topology {te-topology-hierarchy}? 
       |  |  |  +--ro provider-id-ref?   leafref 
       |  |  |  +--ro client-id-ref?     leafref 
       |  |  |  +--ro topology-id-ref?   leafref 
       |  |  +--ro connectivity-matrix* [id] 
       |  |     +--ro id            uint32 
       |  |     +--ro from-link 
       |  |     |  +--ro provider-id-ref?   leafref 
       |  |     |  +--ro client-id-ref?     leafref 
       |  |     |  +--ro topology-id-ref?   leafref 
       |  |     |  +--ro node-ref?          leafref 
       |  |     |  +--ro link-end-ref?      leafref 
       |  |     +--ro to-link 
       |  |     |  +--ro provider-id-ref?   leafref 
       |  |     |  +--ro client-id-ref?     leafref 
       |  |     |  +--ro topology-id-ref?   leafref 
       |  |     |  +--ro node-ref?          leafref 
       |  |     |  +--ro link-end-ref?      leafref 
       |  |     +--ro is-allowed?   boolean 
       |  +--ro te-link* [te-link-id] 
       |  |  +--ro te-link-id         te-link-id 
       |  |  +--ro (stack-level)? 
       |  |     +--:(bundle) 
       |  |     |  +--ro bundled-links 
       |  |     |     +--ro bundled-link* [sequence] 
       |  |     |        +--ro sequence       uint32 
       |  |     |        +--ro te-link-ref?   leafref 
       |  |     +--:(component) 
       |  |        +--ro component-links 
       |  |           +--ro component-link* [sequence] 
  
  
 Liu, et al             Expires January 6, 2016                [Page 36] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

       |  |              +--ro sequence              uint32 
       |  |              +--ro component-link-ref?   leafref 
       |  +--ro te-node-state 
       |     +--ro information-source?         enumeration 
       |     +--ro information-source-state 
       |        +--ro credibility-preference?   uint16 
       |        +--ro topology 
       |        |  +--ro provider-id-ref?   leafref 
       |        |  +--ro client-id-ref?     leafref 
       |        |  +--ro topology-id-ref?   leafref 
       |        +--ro routing-instance?         string 
       +---n te-link-event     
          +--ro event-type?              te-topology-event-type 
          +--ro provider-id-ref?         leafref 
          +--ro client-id-ref?           leafref 
          +--ro topology-id-ref?         leafref 
          +--ro source-te-node-id-ref?   leafref 
          +--ro source-te-link-id-ref?   leafref 
          +--ro dest-te-node-id-ref?     leafref 
          +--ro dest-te-link-id-ref?     leafref 
          +--ro te-topology! 
          +--ro te-link-attributes 
          |  +--ro schedules* [schedule-id] {configuration-schedule}? 
          |  |  +--ro schedule-id          uint32 
          |  |  +--ro start?               yang:date-and-time 
          |  |  +--ro schedule-duration?   string 
          |  |  +--ro repeat-interval?     string 
          |  +--ro name?                               string 
          |  +--ro flag*                               flag-type 
          |  +--ro is-abstract?                        boolean 
          |  +--ro underlay! {te-topology-hierarchy}? 
          |  |  +--ro underlay-primary-path 
          |  |  |  +--ro provider-id-ref?   leafref 
          |  |  |  +--ro client-id-ref?     leafref 
          |  |  |  +--ro topology-id-ref?   leafref 
          |  |  |  +--ro path-element* [path-element-id] 
          |  |  |     +--ro path-element-id     uint32 
          |  |  |     +--ro (type)? 
          |  |  |        +--:(ipv4-address) 
          |  |  |        |  +--ro v4-address?         inet:ipv4-address 
          |  |  |        |  +--ro v4-prefix-length?   uint8 
          |  |  |        |  +--ro v4-loose?           boolean 
          |  |  |        +--:(ipv6-address) 
          |  |  |        |  +--ro v6-address?         inet:ipv6-address 
          |  |  |        |  +--ro v6-prefix-length?   uint8 
          |  |  |        |  +--ro v6-loose?           boolean 
  
  
 Liu, et al             Expires January 6, 2016                [Page 37] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

          |  |  |        +--:(as-number) 
          |  |  |        |  +--ro as-number?          uint16 
          |  |  |        +--:(unnumbered-link) 
          |  |  |        |  +--ro router-id?          inet:ip-address 
          |  |  |        |  +--ro interface-id?       uint32 
          |  |  |        +--:(label) 
          |  |  |           +--ro value?              uint32 
          |  |  +--ro underlay-backup-path* [index] 
          |  |  |  +--ro index              uint32 
          |  |  |  +--ro provider-id-ref?   leafref 
          |  |  |  +--ro client-id-ref?     leafref 
          |  |  |  +--ro topology-id-ref?   leafref 
          |  |  |  +--ro path-element* [path-element-id] 
          |  |  |     +--ro path-element-id     uint32 
          |  |  |     +--ro (type)? 
          |  |  |        +--:(ipv4-address) 
          |  |  |        |  +--ro v4-address?         inet:ipv4-address 
          |  |  |        |  +--ro v4-prefix-length?   uint8 
          |  |  |        |  +--ro v4-loose?           boolean 
          |  |  |        +--:(ipv6-address) 
          |  |  |        |  +--ro v6-address?         inet:ipv6-address 
          |  |  |        |  +--ro v6-prefix-length?   uint8 
          |  |  |        |  +--ro v6-loose?           boolean 
          |  |  |        +--:(as-number) 
          |  |  |        |  +--ro as-number?          uint16 
          |  |  |        +--:(unnumbered-link) 
          |  |  |        |  +--ro router-id?          inet:ip-address 
          |  |  |        |  +--ro interface-id?       uint32 
          |  |  |        +--:(label) 
          |  |  |           +--ro value?              uint32 
          |  |  +--ro underlay-protection-type?   uint16 
          |  |  +--ro underlay-trail-src 
          |  |  |  +--ro provider-id-ref?   leafref 
          |  |  |  +--ro client-id-ref?     leafref 
          |  |  |  +--ro topology-id-ref?   leafref 
          |  |  |  +--ro node-ref?          leafref 
          |  |  |  +--ro link-end-ref?      leafref 
          |  |  +--ro underlay-trail-des 
          |  |  |  +--ro provider-id-ref?   leafref 
          |  |  |  +--ro client-id-ref?     leafref 
          |  |  |  +--ro topology-id-ref?   leafref 
          |  |  |  +--ro node-ref?          leafref 
          |  |  |  +--ro link-end-ref?      leafref 
          |  |  +--ro dynamic?                    boolean 
          |  |  +--ro committed?                  boolean 
          |  +--ro admin-status?                       enumeration 
  
   
 Liu, et al             Expires January 6, 2016                [Page 38] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

          |  +--ro performance-metric-throttle {te-performance-metric}? 
          |  |  +--ro unidirectional-delay-offset?           uint32 
          |  |  +--ro measure-interval?                      uint32 
          |  |  +--ro advertisement-interval?                uint32 
          |  |  +--ro suppression-interval?                  uint32 
          |  |  +--ro threshold-out 
          |  |  |  +--ro unidirectional-delay?                 uint32 
          |  |  |  +--ro unidirectional-min-delay?             uint32 
          |  |  |  +--ro unidirectional-max-delay?             uint32 
          |  |  |  +--ro unidirectional-delay-variation?       uint32 
          |  |  |  +--ro unidirectional-packet-loss?           decimal64 
          |  |  |  +--ro unidirectional-residual-bandwidth?    decimal64 
          |  |  |  +--ro unidirectional-available-bandwidth?   decimal64 
          |  |  |  +--ro unidirectional-utilized-bandwidth?    decimal64 
          |  |  +--ro threshold-in 
          |  |  |  +--ro unidirectional-delay?                 uint32 
          |  |  |  +--ro unidirectional-min-delay?             uint32 
          |  |  |  +--ro unidirectional-max-delay?             uint32 
          |  |  |  +--ro unidirectional-delay-variation?       uint32 
          |  |  |  +--ro unidirectional-packet-loss?           decimal64 
          |  |  |  +--ro unidirectional-residual-bandwidth?    decimal64 
          |  |  |  +--ro unidirectional-available-bandwidth?   decimal64 
          |  |  |  +--ro unidirectional-utilized-bandwidth?    decimal64 
          |  |  +--ro threshold-accelerated-advertisement 
          |  |     +--ro unidirectional-delay?                 uint32 
          |  |     +--ro unidirectional-min-delay?             uint32 
          |  |     +--ro unidirectional-max-delay?             uint32 
          |  |     +--ro unidirectional-delay-variation?       uint32 
          |  |     +--ro unidirectional-packet-loss?           decimal64 
          |  |     +--ro unidirectional-residual-bandwidth?    decimal64 
          |  |     +--ro unidirectional-available-bandwidth?   decimal64 
          |  |     +--ro unidirectional-utilized-bandwidth?    decimal64 
          |  +--ro link-index?                         uint64 
          |  +--ro administrative-group?               te-types:admin-
    groups 
          |  +--ro max-link-bandwidth?                 decimal64 
          |  +--ro max-resv-link-bandwidth?            decimal64 
          |  +--ro unreserved-bandwidth* [priority] 
          |  |  +--ro priority     uint8 
          |  |  +--ro bandwidth?   decimal64 
          |  +--ro te-default-metric?                  uint32 
          |  +--ro performance-metric {te-performance-metric}? 
          |  |  +--ro measurement 
          |  |  |  +--ro unidirectional-delay?                 uint32 
          |  |  |  +--ro unidirectional-min-delay?             uint32 
          |  |  |  +--ro unidirectional-max-delay?             uint32 
  
  
 Liu, et al             Expires January 6, 2016                [Page 39] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

          |  |  |  +--ro unidirectional-delay-variation?       uint32 
          |  |  |  +--ro unidirectional-packet-loss?           decimal64 
          |  |  |  +--ro unidirectional-residual-bandwidth?    decimal64 
          |  |  |  +--ro unidirectional-available-bandwidth?   decimal64 
          |  |  |  +--ro unidirectional-utilized-bandwidth?    decimal64 
          |  |  +--ro normality 
          |  |     +--ro unidirectional-delay?                 
    performance-metric-normality 
          |  |     +--ro unidirectional-min-delay?             
    performance-metric-normality 
          |  |     +--ro unidirectional-max-delay?             
    performance-metric-normality 
          |  |     +--ro unidirectional-delay-variation?       
    performance-metric-normality 
          |  |     +--ro unidirectional-packet-loss?           
    performance-metric-normality 
          |  |     +--ro unidirectional-residual-bandwidth?    
    performance-metric-normality 
          |  |     +--ro unidirectional-available-bandwidth?   
    performance-metric-normality 
          |  |     +--ro unidirectional-utilized-bandwidth?    
    performance-metric-normality 
          |  +--ro link-protection-type?               enumeration 
          |  +--ro interface-switching-capabilities* [switching-
    capability] 
          |  |  +--ro switching-capability               identityref 
          |  |  +--ro encoding?                          identityref 
          |  |  +--ro max-lsp-bandwidth* [priority] 
          |  |  |  +--ro priority     uint8 
          |  |  |  +--ro bandwidth?   decimal64 
          |  |  +--ro packet-switch-capable 
          |  |  |  +--ro minimum-lsp-bandwidth?   decimal64 
          |  |  |  +--ro interface-mtu?           uint16 
          |  |  +--ro time-division-multiplex-capable 
          |  |     +--ro minimum-lsp-bandwidth?   decimal64 
          |  |     +--ro indication?              enumeration 
          |  +--ro te-srlgs 
          |     +--ro values*   te-types:srlg 
          +--ro te-link-state 
             +--ro oper-status?                enumeration 
             +--ro information-source?         enumeration 
             +--ro information-source-state 
             |  +--ro credibility-preference?   uint16 
             |  +--ro topology 
             |  |  +--ro provider-id-ref?   leafref 
             |  |  +--ro client-id-ref?     leafref 
  
  
 Liu, et al             Expires January 6, 2016                [Page 40] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

             |  |  +--ro topology-id-ref?   leafref 
             |  +--ro routing-instance?         string 
             +--ro alt-information-sources* [information-source] 
                +--ro information-source                  enumeration 
                +--ro information-source-state 
                |  +--ro credibility-preference?   uint16 
                |  +--ro topology 
                |  |  +--ro provider-id-ref?   leafref 
                |  |  +--ro client-id-ref?     leafref 
                |  |  +--ro topology-id-ref?   leafref 
                |  +--ro routing-instance?         string 
                +--ro link-index?                         uint64 
                +--ro administrative-group?               te-
    types:admin-groups 
                +--ro max-link-bandwidth?                 decimal64 
                +--ro max-resv-link-bandwidth?            decimal64 
                +--ro unreserved-bandwidth* [priority] 
                |  +--ro priority     uint8 
                |  +--ro bandwidth?   decimal64 
                +--ro te-default-metric?                  uint32 
                +--ro performance-metric {te-performance-metric}? 
                |  +--ro measurement 
                |  |  +--ro unidirectional-delay?                 uint32 
                |  |  +--ro unidirectional-min-delay?             uint32 
                |  |  +--ro unidirectional-max-delay?             uint32 
                |  |  +--ro unidirectional-delay-variation?       uint32 
                |  |  +--ro unidirectional-packet-loss?           
    decimal64 
                |  |  +--ro unidirectional-residual-bandwidth?    
    decimal64 
                |  |  +--ro unidirectional-available-bandwidth?   
    decimal64 
                |  |  +--ro unidirectional-utilized-bandwidth?    
    decimal64 
                |  +--ro normality 
                |     +--ro unidirectional-delay?                 
    performance-metric-normality 
                |     +--ro unidirectional-min-delay?             
    performance-metric-normality 
                |     +--ro unidirectional-max-delay?             
    performance-metric-normality 
                |     +--ro unidirectional-delay-variation?       
    performance-metric-normality 
                |     +--ro unidirectional-packet-loss?           
    performance-metric-normality 

  
  
 Liu, et al             Expires January 6, 2016                [Page 41] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

                |     +--ro unidirectional-residual-bandwidth?    
    performance-metric-normality 
                |     +--ro unidirectional-available-bandwidth?   
    performance-metric-normality 
                |     +--ro unidirectional-utilized-bandwidth?    
    performance-metric-normality 
                +--ro link-protection-type?               enumeration 
                +--ro interface-switching-capabilities* [switching-
    capability] 
                |  +--ro switching-capability               identityref 
                |  +--ro encoding?                          identityref 
                |  +--ro max-lsp-bandwidth* [priority] 
                |  |  +--ro priority     uint8 
                |  |  +--ro bandwidth?   decimal64 
                |  +--ro packet-switch-capable 
                |  |  +--ro minimum-lsp-bandwidth?   decimal64 
                |  |  +--ro interface-mtu?           uint16 
                |  +--ro time-division-multiplex-capable 
                |     +--ro minimum-lsp-bandwidth?   decimal64 
                |     +--ro indication?              enumeration 
                +--ro te-srlgs 
                   +--ro values*   te-types:srlg 
     
 6. TE Topology Yang Module 

    <CODE BEGINS> 

    module ietf-te-topology { 
      yang-version 1; 
      namespace "urn:ietf:params:xml:ns:yang:ietf-te-topology"; 
      // replace with IANA namespace when assigned 
       
      prefix "tet"; 
     
      import ietf-yang-types {  
        prefix "yang";  
      } 
     
      import ietf-inet-types { 
        prefix "inet"; 
      } 
     
      import ietf-interfaces { 
        prefix "if"; 
      } 
     
  
  
 Liu, et al             Expires January 6, 2016                [Page 42] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

      import ietf-te-types { 
        prefix "te-types"; 
      } 
     
      organization "TBD"; 
      contact "TBD"; 
      description "TE topology model"; 
       
      revision "2015-07-02" { 
        description "Initial revision"; 
        reference "TBD"; 
      } 
     
      /* 
       * Features 
       */ 
     
      feature te-topology-hierarchy { 
        description 
          "This feature indicates that the system allows underlay 
          and/or overlay TE topology hierarchy."; 
      } 
     
      feature te-performance-metric { 
        description 
          "This feature indicates that the system supports 
          TE performance metric defined in 
          draft-ietf-ospf-te-metric-extensions."; 
      } 
     
      feature configuration-schedule { 
        description 
          "This feature indicates that the system supports  
          configuration scheduling."; 
      } 
     
      feature template { 
        description 
          "This feature indicates that the system supports  
          template configuration."; 
      } 
     
      /* 
       * Typedefs 
       */ 
     
  
  
 Liu, et al             Expires January 6, 2016                [Page 43] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

      typedef te-global-id { 
        type uint32; 
        description 
          "An identifier to uniquely identify an operator, which can be 
          either a provider or a client. 
          The definition of this type is taken from RFC6370 and RFC503. 
          This attribute type is used solely to provide a globally 
          unique context for TE topologies."; 
      } 
     
      typedef te-topology-id { 
        type string { 
          pattern '/?([a-zA-Z0-9\-_.]+)(/[a-zA-Z0-9\-_.]+)*'; 
        } 
        description 
          "An identifier for a topology."; 
      } 
     
      typedef te-template-name { 
        type string { 
          pattern '/?([a-zA-Z0-9\-_.]+)(/[a-zA-Z0-9\-_.]+)*'; 
        } 
        description 
          "A type for the name of a TE node template or TE link 
          template."; 
      } 
     
      typedef te-node-id { 
        type inet:ip-address; 
        description 
          "An identifier for a node in a topology. 
           The identifier is represented as an IPv4 or IPv6 address. 
           The identifier SHOULD be chosen such that the same node in a 
           real network topology will always be identified through the 
           same identifier, even if the model is instantiated in 
           separate 
           datastores. An implementation MAY choose to capture semantics 
           in the identifier, for example to indicate the type of node 
           and/or the type of topology that the node is a part of."; 
      } 
     
      typedef te-link-id { 
        type union { 
          type uint32;          // Unnumbered 
          type inet:ip-address; // IPv4 or IPv6 address 
        } 
  
   
 Liu, et al             Expires January 6, 2016                [Page 44] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

        description 
          "An identifier for a TE link on a node. 
           The identifier may be opaque. 
           The identifier SHOULD be chosen such that the same TP in a 
           real network topology will always be identified through the 
           same identifier, even if the model is instantiated in 
           separate 
           datastores. An implementation MAY choose to capture semantics 
           in the identifier, for example to indicate the type of TP 
           and/or the type of node and topology that the TP is a part 
           of."; 
      } 
       
      typedef te-topology-event-type { 
        type enumeration { 
          enum "add" { 
            value 0; 
            description  
              "A TE node or te-link has 
              been added"; 
          } 
          enum "remove" { 
            value 1; 
            description  
              "A TE node or te-link has 
              been removed"; 
          } 
          enum "update" { 
            value 2; 
            description  
              "A TE node or te-link has 
              been updated"; 
          } 
        } 
        description "TE  Event type for notifications"; 
      } // te-topology-event-type 
     
      typedef performance-metric-normality { 
        type enumeration { 
          enum "unknown" {         
            value 0; 
            description 
              "Unknown"; 
          } 
          enum "normal" {         
            value 1; 
  
  
 Liu, et al             Expires January 6, 2016                [Page 45] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

            description 
              "Normal"; 
          } 
          enum "abnormal" {         
            value 2; 
            description 
              "Abnormal. The anomalous bit is set."; 
          } 
        } 
        description 
          "Indicates whether a performance metric is normal, abnormal, 
          or unknown."; 
      } 
     
      /* 
       * Identities 
       */ 
     
      identity flag-identity { 
        description "Base type for flags"; 
      } 
     
      identity undefined-flag { 
        base "flag-identity"; 
        description "Undefined flag"; 
      } 
       
      typedef flag-type { 
        type identityref { 
          base "flag-identity"; 
        } 
        description "Type for flags"; 
      } 
     
      /* 
       * Groupings 
       */ 
     
      grouping topo-ref { 
        description 
          "Grouping for an absolute reference to a topology instance."; 
        leaf provider-id-ref { 
          type leafref { 
            path "/tet:te-topologies/tet:topology/tet:provider-id"; 
          } 
  
  
 Liu, et al             Expires January 6, 2016                [Page 46] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

          description 
            "An absolute reference to a provider-id."; 
        } 
        leaf client-id-ref { 
          type leafref { 
            path "/tet:te-topologies/tet:topology/tet:client-id"; 
          } 
          description 
            "An absolute reference to a client-id."; 
        } 
        leaf topology-id-ref { 
          type leafref { 
            path "/tet:te-topologies/tet:topology/tet:te-topology-id"; 
          } 
          description 
            "An absolute reference to a te-topology-id."; 
        } 
      } // topo-ref 
     
      grouping link-ref { 
        description 
          "Grouping for an absolute reference to a link instance."; 
        uses topo-ref; 
        leaf source-te-node-id-ref { 
          type leafref { 
            path "/tet:te-topologies/tet:topology" 
              +"[tet:provider-id = current()/../provider-id-ref]" 
              +"[tet:client-id = current()/../client-id-ref]" 
              +"[tet:te-topology-id = current()/../topology-id-ref]" 
              +"/tet:link/tet:source-te-node-id"; 
          } 
          description 
            "An absolute reference to a link instance."; 
        } 
        leaf source-te-link-id-ref { 
          type leafref { 
            path "/tet:te-topologies/tet:topology" 
              +"[tet:provider-id = current()/../provider-id-ref]" 
              +"[tet:client-id = current()/../client-id-ref]" 
              +"[tet:te-topology-id = current()/../topology-id-ref]" 
              +"/tet:link/tet:source-te-link-id"; 
          } 
          description 
            "An absolute reference to a link instance."; 
        } 
        leaf dest-te-node-id-ref { 
  
  
 Liu, et al             Expires January 6, 2016                [Page 47] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

          type leafref { 
            path "/tet:te-topologies/tet:topology" 
              +"[tet:provider-id = current()/../provider-id-ref]" 
              +"[tet:client-id = current()/../client-id-ref]" 
              +"[tet:te-topology-id = current()/../topology-id-ref]" 
              +"/tet:link/tet:dest-te-node-id"; 
          } 
          description 
            "An absolute reference to a link instance."; 
        } 
        leaf dest-te-link-id-ref { 
          type leafref { 
            path "/tet:te-topologies/tet:topology" 
              +"[tet:provider-id = current()/../provider-id-ref]" 
              +"[tet:client-id = current()/../client-id-ref]" 
              +"[tet:te-topology-id = current()/../topology-id-ref]" 
              +"/tet:link/tet:dest-te-link-id"; 
          } 
          description 
            "An absolute reference to a link instance."; 
        } 
      } // link-ref 
     
      grouping node-ref { 
        description 
          "Grouping for an absolute reference to a node instance."; 
        uses topo-ref; 
        leaf node-ref { 
          type leafref { 
            path "/tet:te-topologies/tet:topology" 
              +"[tet:provider-id = current()/../provider-id-ref]" 
              +"[tet:client-id = current()/../client-id-ref]" 
              +"[tet:te-topology-id = current()/../topology-id-ref]" 
              +"/tet:node/tet:te-node-id"; 
          } 
          description 
            "An absolute reference to a node instance."; 
        } 
      } // node-ref 
     
      grouping link-end-ref { 
        description 
          "Grouping for an absolute reference to a TE link end, which is 
          the local representation of a TE link on a node."; 
        uses node-ref; 
        leaf link-end-ref { 
  
  
 Liu, et al             Expires January 6, 2016                [Page 48] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

          type leafref { 
            path "/tet:te-topologies/tet:topology" 
              +"[tet:provider-id = current()/../provider-id-ref]" 
              +"[tet:client-id = current()/../client-id-ref]" 
              +"[tet:te-topology-id = current()/../topology-id-ref]" 
              +"/tet:node[tet:te-node-id = current()/../node-ref]" 
              +"/tet:te-link/tet:te-link-id"; 
          } 
          description 
            "Grouping for an absolute reference to a TE link end."; 
        } 
      } // link-end-ref 
     
      grouping te-topology-type { 
        description 
          "Identifies the TE topology type."; 
        container te-topology { 
          presence "indicates TE topology"; 
          description 
            "Its presence identifies the TE topology type."; 
        } 
      } // te-topology-type 
       
      grouping te-path-element { 
        description 
          "A group of attributes defining an element in a TE path 
          such as TE node, TE link, TE atomic resource or label."; 
        uses te-types:explicit-route-subobject; 
      } // te-path-element 
       
      grouping config-schedule-attributes { 
        description 
          "A list of schedules defining when a particular  
           configuration takes effect."; 
        list schedules { 
          if-feature configuration-schedule; 
          key "schedule-id"; 
          description "A list of schedule elements."; 
           
          leaf schedule-id { 
            type uint32; 
            description "Identifies the schedule element."; 
          } 
          leaf start { 
            type yang:date-and-time; 
            description "Start time."; 
  
  
 Liu, et al             Expires January 6, 2016                [Page 49] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

          } 
          leaf schedule-duration { 
            type string { 
              pattern  
                'P(\d+Y)?(\d+M)?(\d+W)?(\d+D)?T(\d+H)?(\d+M)?(\d+S)?'; 
            } 
            description "Schedule duration in ISO 8601 format."; 
          } 
          leaf repeat-interval { 
            type string { 
              pattern  
                'R\d*/P(\d+Y)?(\d+M)?(\d+W)?(\d+D)?T(\d+H)?(\d+M)?' 
                + '(\d+S)?'; 
            } 
            description "Repeat interval in ISO 8601 format."; 
         } 
        } 
      } // config-schedule-attributes 
     
      grouping information-source-attributes { 
        description 
          "The attributes identifying source that has provided the  
          related information, and the source credibility."; 
        leaf information-source { 
          type enumeration { 
            enum "unknown" { 
              description "The source is unknown"; 
            } 
            enum "locally-configured" { 
              description "Configured entity"; 
            } 
            enum "ospfv2" { 
              description "OSPFv2"; 
            } 
            enum "ospfv3" { 
              description "OSPFv3"; 
            } 
            enum "isis" { 
              description "ISIS"; 
            } 
            enum "system-processed" { 
              description "System processed entity."; 
            } 
            enum "other" { 
              description "Other source"; 
            } 
  
  
 Liu, et al             Expires January 6, 2016                [Page 50] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

          } 
          description  
            "Indicates the source of the information."; 
        } 
        container information-source-state { 
          description 
            "The container contains state attributes related to  
            the information source."; 
          leaf credibility-preference { 
            type uint16; 
            description 
              "The preference value to calculate the traffic  
              engineering database credibility value used for  
              tie-break selection between different  
              information-source values. 
              Higher value is more preferable."; 
          }       
          container topology { 
            description  
              "When the information is processed by the system, 
              the attributes in this container indicate which topology 
              is used to process to generate the result information."; 
            leaf provider-id-ref { 
              type leafref { 
                path "/tet:te-topologies/tet:topology/tet:provider-id"; 
              } 
              description 
                "A reference to a provider-id."; 
            } 
            leaf client-id-ref { 
              type leafref { 
                path "/tet:te-topologies/tet:topology/tet:client-id"; 
              } 
              description 
                "A reference to a client-id."; 
            } 
            leaf topology-id-ref { 
              type leafref { 
                path "/tet:te-topologies/tet:topology" 
                  +"/tet:te-topology-id"; 
              } 
              description 
                "A reference to a te-topology-id."; 
            } 
          } // topology 
          leaf routing-instance { 
  
  
 Liu, et al             Expires January 6, 2016                [Page 51] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

            type string; 
            description 
              "When applicable, this is the name of a routing instance 
                from which the information is learned."; 
          } // routing-information 
        } 
      } // information-source-attributes 
     
      grouping te-node-attributes { 
        description "Node attributes in a TE topology."; 
        container te-node-attributes { 
          description "Node attributes in a TE topology."; 
          uses config-schedule-attributes; 
          leaf name { 
            type inet:domain-name; 
            description "Node name."; 
          } 
          leaf-list signaling-address { 
            type inet:ip-address; 
            description "Node signaling address."; 
          } 
          leaf-list flag { 
            type flag-type; 
            description "Node operational flags."; 
          }       
          leaf is-abstract { 
            type boolean; 
            description  
              "true if the node is abstract, false when the node is 
              actual."; 
          } 
          container underlay-topology { 
            if-feature te-topology-hierarchy; 
            description  
              "When an abstract node encapsulates a topology,  
              the attributes in this container point to said topology."; 
            leaf provider-id-ref { 
              type leafref { 
                path "/tet:te-topologies/tet:topology/tet:provider-id"; 
              } 
              description 
                "A reference to a provider-id."; 
            } 
            leaf client-id-ref { 
              type leafref { 
                path "/tet:te-topologies/tet:topology/tet:client-id"; 
  
  
 Liu, et al             Expires January 6, 2016                [Page 52] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

              } 
              description 
                "A reference to a client-id."; 
            } 
            leaf topology-id-ref { 
              type leafref { 
                path "/tet:te-topologies/tet:topology" 
                  +"/tet:te-topology-id"; 
              } 
              description 
                "A reference to a te-topology-id."; 
            } 
          } 
     
          list connectivity-matrix { 
            key "id"; 
            description 
              "Represents node's switching limitations, i.e. limitations 
               in interconnecting network TE links across the node."; 
            leaf id { 
              type uint32; 
              description "Identifies the connectivity-matrix entry."; 
            } 
            container from-link { 
              uses tet:link-end-ref; 
              description  
                "Reference to source NTP."; 
            } 
            container to-link { 
              uses tet:link-end-ref; 
              description  
                "Reference to destination NTP."; 
            } 
            leaf is-allowed { 
              type boolean; 
              description 
                "true  - switching is allowed,  
                 false - switching is disallowed."; 
            } 
          } 
        } 
        list te-link { 
          key "te-link-id"; 
          description 
            "The local representation of a TE link, which 
            interconnect TE nodes."; 
  
  
 Liu, et al             Expires January 6, 2016                [Page 53] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

          leaf te-link-id { 
            type te-link-id; 
            description 
              "TE link identifier."; 
          } 
          choice stack-level { 
            description  
              "The TE link can be partitioned into bundled 
              links, or component links."; 
            case bundle { 
              container bundled-links { 
                description 
                  "A set of bundled links"; 
                list bundled-link { 
                  key "sequence"; 
                  description 
                    "Specify a bundled interface that is 
                    further partitioned."; 
                  leaf sequence { 
                    type uint32; 
                    description 
                      "Identify the sequence in the bundle."; 
                  } 
                  leaf te-link-ref { 
                    type leafref { 
                      path "../../../te-link-id"; 
                      require-instance true; 
                    } 
                    description 
                      "Reference to TE link on this node."; 
                  } 
                } 
              } 
            } 
            case component { 
              container component-links { 
                description 
                  "A set of component links"; 
                list component-link { 
                  key "sequence"; 
                  description 
                    "Specify a component interface that is 
                    sufficient to unambiguously identify the 
                    appropriate resources"; 
                     
                  leaf sequence { 
  
  
 Liu, et al             Expires January 6, 2016                [Page 54] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

                    type uint32; 
                    description 
                      "Identify the sequence in the bundle."; 
                  } 
                  leaf component-link-ref { 
                    type leafref { 
                      path "/if:interfaces/if:interface/if:name"; 
                      require-instance false; 
                    } 
                    description 
                      "Reference to component link on this 
                      node."; 
                  } 
                } 
              } 
            } 
          } 
        } 
      } // te-node-attributes 
         
      grouping te-node-state-attributes { 
        description "Node state attributes in a TE topology."; 
        container te-node-state { 
          description "Node state attributes in a TE topology."; 
          uses information-source-attributes; 
        } 
      } // te-node-state-attributes 
     
      grouping te-link-underlay-attributes { 
        description "Attributes for  te-link underlay."; 
        container underlay-primary-path { 
          description  
            "The service path on the underlay topology that 
             supports this link."; 
          leaf provider-id-ref { 
            type leafref { 
              path "/tet:te-topologies/tet:topology/tet:provider-id"; 
              require-instance false; 
            } 
            description 
              "A reference to a provider-id."; 
          } 
          leaf client-id-ref { 
            type leafref { 
              path "/tet:te-topologies/tet:topology/tet:client-id"; 
              require-instance false; 
  
   
 Liu, et al             Expires January 6, 2016                [Page 55] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

            } 
            description 
              "A reference to a client-id."; 
          } 
          leaf topology-id-ref { 
            type leafref { 
              path "/tet:te-topologies/tet:topology/tet:te-topology-id"; 
              require-instance false; 
            } 
            description  
              "Identifies the topology where the path belongs."; 
          } 
          list path-element { 
            key "path-element-id"; 
            description  
              "A list of path elements describing the service path"; 
            leaf path-element-id { 
              type uint32; 
              description "To identify the element in a path."; 
            } 
            uses te-path-element; 
          } 
        } // underlay-primary-path 
        list underlay-backup-path { 
          key "index"; 
          description  
            "A list of backup service paths on the underlay topology 
            that 
            protect the underlay primary path. If the primary path is 
            not protected, the list contains zero elements. If the  
            primary path is protected, the list contains one or more 
            elements."; 
          leaf index { 
            type uint32; 
            description 
              "A sequence number to identify a backup path."; 
          } 
          leaf provider-id-ref { 
            type leafref { 
              path "/tet:te-topologies/tet:topology/tet:provider-id"; 
              require-instance false; 
            } 
            description 
              "A reference to a provider-id."; 
          } 
          leaf client-id-ref { 
  
  
 Liu, et al             Expires January 6, 2016                [Page 56] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

            type leafref { 
              path "/tet:te-topologies/tet:topology/tet:client-id"; 
              require-instance false; 
            } 
            description 
              "A reference to a client-id."; 
          } 
          leaf topology-id-ref { 
            type leafref { 
              path "/tet:te-topologies/tet:topology/tet:te-topology-id"; 
              require-instance false; 
            } 
            description  
              "Identifies the topology where the path belongs."; 
          } 
          list path-element { 
            key "path-element-id"; 
            description  
              "A list of path elements describing the backup service  
               path"; 
            leaf path-element-id { 
              type uint32; 
              description "To identify the element in a path."; 
            } 
            uses te-path-element; 
          } 
        } // underlay-backup-path 
        leaf underlay-protection-type { 
          type uint16; 
          description 
            "Underlay protection type desired for this link"; 
        } 
        container underlay-trail-src { 
          uses tet:link-end-ref; 
          description 
            "Source TE link of the underlay trail."; 
        } 
        container underlay-trail-des { 
          uses tet:link-end-ref; 
          description 
            "Destination TE link of the underlay trail."; 
        } 
      } // te-link-underlay-attributes 
     
      grouping te-link-state-underlay-attributes { 
        description "State attributes for te-link underlay."; 
  
  
 Liu, et al             Expires January 6, 2016                [Page 57] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

        leaf dynamic { 
          type boolean; 
          description  
            "true if the underlay is dynamically created."; 
        } 
        leaf committed { 
          type boolean; 
          description  
            "true if the underlay is committed."; 
        } 
      } // te-link-state-underlay-attributes 
         
      grouping performance-metric-attributes { 
        description 
          "Link performance information in real time."; 
        reference  
          "draft-ietf-ospf-te-metric-extensions."; 
        leaf unidirectional-delay { 
          type uint32 { 
            range 0..16777215; 
          } 
          description "Delay or latency in micro seconds."; 
        } 
        leaf unidirectional-min-delay { 
          type uint32 { 
            range 0..16777215; 
          } 
          description "Minimum delay or latency in micro seconds."; 
        } 
        leaf unidirectional-max-delay { 
          type uint32 { 
            range 0..16777215; 
          } 
          description "Maximum delay or latency in micro seconds."; 
        } 
        leaf unidirectional-delay-variation { 
          type uint32 { 
            range 0..16777215; 
          } 
          description "Delay variation in micro seconds."; 
        } 
        leaf unidirectional-packet-loss { 
          type decimal64 { 
            fraction-digits 6; 
            range "0 .. 50.331642"; 
          } 
  
   
 Liu, et al             Expires January 6, 2016                [Page 58] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

          description  
            "Packet loss as a percentage of the total traffic sent 
            over a configurable interval. The finest precision is 
            0.000003%."; 
        } 
        leaf unidirectional-residual-bandwidth { 
          type decimal64 { 
            fraction-digits 2; 
          } 
          description  
            "Residual bandwidth that subtracts tunnel 
            reservations from Maximum Bandwidth (or link capacity) 
            [RFC3630] and provides an aggregated remainder across QoS 
            classes."; 
        } 
        leaf unidirectional-available-bandwidth { 
          type decimal64 { 
            fraction-digits 2; 
          } 
          description  
            "Available bandwidth that is defined to be residual 
            bandwidth minus the measured bandwidth used for the 
            actual forwarding of non-RSVP-TE LSP packets.  For a 
            bundled link, available bandwidth is defined to be the 
            sum of the component link available bandwidths."; 
        } 
        leaf unidirectional-utilized-bandwidth { 
          type decimal64 { 
            fraction-digits 2; 
          } 
          description 
            "Bandwidth utilization that represents the actual 
            utilization of the link (i.e. as measured in the router). 
            For a bundled link, bandwidth utilization is defined to 
            be the sum of the component link bandwidth 
            utilizations."; 
        } 
      } // performance-metric-attributes 
     
      grouping performance-metric-normality-attributes { 
        description 
          "Link performance metric normality attributes."; 
        reference  
          "draft-ietf-ospf-te-metric-extensions."; 
        leaf unidirectional-delay { 
          type performance-metric-normality; 
  
  
 Liu, et al             Expires January 6, 2016                [Page 59] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

          description "Delay normality."; 
        } 
        leaf unidirectional-min-delay { 
          type performance-metric-normality; 
          description "Minimum delay or latency normality."; 
        } 
        leaf unidirectional-max-delay { 
          type performance-metric-normality; 
          description "Maximum delay or latency normality."; 
        } 
        leaf unidirectional-delay-variation { 
          type performance-metric-normality; 
          description "Delay variation normality."; 
        } 
        leaf unidirectional-packet-loss { 
          type performance-metric-normality; 
          description "Packet loss normality."; 
        } 
        leaf unidirectional-residual-bandwidth { 
          type performance-metric-normality; 
          description "Residual bandwidth normality."; 
        } 
        leaf unidirectional-available-bandwidth { 
          type performance-metric-normality; 
          description "Available bandwidth normality."; 
        } 
        leaf unidirectional-utilized-bandwidth { 
          type performance-metric-normality; 
          description "Bandwidth utilization normality."; 
        } 
      } // performance-metric-normality-attributes 
     
      grouping performance-metric-throttle-container { 
        description 
          "A container controlling performance metric throttle."; 
        container performance-metric-throttle { 
          if-feature te-performance-metric; 
          must "suppression-interval >= measure-interval" { 
            error-message  
              "suppression-interval cannot be less then  
                measure-interval"; 
            description 
              "Constraint on suppression-interval and  
                measure-interval."; 
          } 
          description 
  
  
 Liu, et al             Expires January 6, 2016                [Page 60] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

            "Link performance information in real time."; 
          reference  
            "draft-ietf-ospf-te-metric-extensions."; 
          leaf unidirectional-delay-offset { 
            type uint32 { 
              range 0..16777215; 
            } 
            description  
              "Offset value to be added to the measured delay value."; 
          } 
          leaf measure-interval { 
            type uint32; 
            default 30; 
            description  
              "Interval in seconds to measure the extended metric 
              values."; 
          } 
          leaf advertisement-interval { 
            type uint32; 
            description  
              "Interval in seconds to advertise the extended metric 
              values."; 
          } 
          leaf suppression-interval { 
            type uint32 { 
              range "1 .. max"; 
            } 
            default 120; 
            description  
              "Interval in seconds to suppress advertising the extended 
              metric values."; 
          } 
          container threshold-out { 
            uses performance-metric-attributes; 
            description 
              "If the measured parameter falls outside an upper bound 
              for all but the min delay metric (or lower bound for 
              min-delay metric only) and the advertised value is not 
              already outside that bound, anomalous announcement will be 
              triggered."; 
          } 
          container threshold-in { 
            uses performance-metric-attributes; 
            description 
              "If the measured parameter falls inside an upper bound 
              for all but the min delay metric (or lower bound for 
  
  
 Liu, et al             Expires January 6, 2016                [Page 61] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

              min-delay metric only) and the advertised value is not 
              already inside that bound, normal (anomalous-flag cleared) 
              announcement will be triggered."; 
          } 
          container threshold-accelerated-advertisement { 
            description 
              "When the difference between the last advertised value and 
              current measured value exceed this threshold, anomalous 
              announcement will be triggered."; 
            uses performance-metric-attributes; 
          } 
        } 
      } // performance-metric-throttle-container 
     
      grouping te-link-info-attributes { 
        description 
          "Advertised TE information attributes."; 
        leaf link-index { 
          type uint64; 
          description 
            "The link identifier.  If OSPF is used, this represents an 
            ospfLsdbID.  If IS-IS is used, this represents an isisLSPID. 
            If a locally configured link is used, this object represents 
            a unique value, which is locally defined in a router."; 
        } 
        leaf administrative-group { 
          type te-types:admin-groups; 
          description 
            "Administrative group or color of the link.  
            This attribute covers both administrative group (defined in 
            RFC3630, RFC5329, and RFC5305), and extended administrative 
            group (defined in RFC7308)."; 
        } 
        leaf max-link-bandwidth { 
          type decimal64 { 
            fraction-digits 2; 
          } 
          description 
            "Maximum bandwidth that can be seen on this link in this 
            direction. Units in bytes per second"; 
        } 
        leaf max-resv-link-bandwidth { 
          type decimal64 { 
            fraction-digits 2; 
          } 
          description 
  
  
 Liu, et al             Expires January 6, 2016                [Page 62] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

            "Maximum amount of bandwidth that can be reserved in this 
             direction in this link. Units in bytes per second"; 
        } 
        list unreserved-bandwidth { 
          key "priority"; 
          max-elements "8"; 
          description 
            "Unreserved bandwidth for 0-7 priority levels. Units in 
            bytes per second"; 
          leaf priority { 
            type uint8 { 
              range "0..7"; 
            } 
            description "Priority"; 
          } 
          leaf bandwidth { 
            type decimal64 { 
              fraction-digits 2; 
            } 
            description 
              "Unreserved bandwidth for this level"; 
          } 
        } 
        leaf te-default-metric { 
          type uint32; 
          description 
            "Traffic Engineering Metric"; 
        } 
        container performance-metric { 
          if-feature te-performance-metric; 
          description 
            "Link performance information in real time."; 
          reference  
            "draft-ietf-ospf-te-metric-extensions."; 
          container measurement { 
            description 
              "Measured performance metric values. Static configuration 
              and manual overrides of these measurements are also  
              allowed."; 
            uses performance-metric-attributes; 
          } 
          container normality 
          { 
            description 
              "Performance metric normality values."; 
            uses performance-metric-normality-attributes; 
  
  
 Liu, et al             Expires January 6, 2016                [Page 63] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

          } 
        } 
        leaf link-protection-type { 
          type enumeration { 
            enum "unprotected" { 
              description "unprotected"; 
            } 
            enum "extra-traffic" { 
              description "Extra traffic"; 
            } 
            enum "shared" { 
              description "Shared"; 
            } 
            enum "1-for-1" { 
              description "One for one protection"; 
            } 
            enum "1-plus-1" { 
              description "One plus one protection"; 
            } 
            enum "enhanced" { 
              description "Enhanced protection"; 
            } 
          } 
          description 
            "Link Protection Type desired for this link"; 
        } 
        list interface-switching-capabilities { 
          key "switching-capability"; 
          description 
            "List of interface capabilities for this interface"; 
          leaf switching-capability { 
            type identityref { 
              base te-types:switching-capabilities; 
            } 
            description 
              "Switching Capability for this interface"; 
          } 
          leaf encoding { 
            type identityref { 
              base te-types:lsp-encoding-types; 
            } 
            description 
              "Encoding supported by this interface"; 
          } 
          list max-lsp-bandwidth { 
            key "priority"; 
  
  
 Liu, et al             Expires January 6, 2016                [Page 64] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

            max-elements "8"; 
            description 
              "Maximum LSP Bandwidth at priorities 0-7"; 
            leaf priority { 
              type uint8 { 
                range "0..7"; 
              } 
              description "Priority"; 
            } 
            leaf bandwidth { 
              type decimal64 { 
                fraction-digits 2; 
              } 
              description 
                "Max LSP Bandwidth for this level"; 
            } 
          } 
          container packet-switch-capable { 
            when "../switching-capability = 'PSC-1'  or " 
              +"../switching-capability = 'PSC-2' or " 
              +"../switching-capability = 'PSC-3' or " 
              +"../switching-capability = 'PSC-4'" { 
              description "Valid only for PSC"; 
            } 
            description 
              "Interface has packet-switching capabilities"; 
            leaf minimum-lsp-bandwidth { 
              type decimal64 { 
                fraction-digits 2; 
              } 
              description 
                "Minimum LSP Bandwidth. Units in bytes per second"; 
            } 
            leaf interface-mtu { 
              type uint16; 
              description 
                "Interface MTU"; 
            } 
          } 
          container time-division-multiplex-capable { 
            when "../switching-capability = 'TDM'" { 
              description "Valid only for TDM"; 
            } 
            description 
              "Interface has time-division multiplex capabilities"; 
     
   
  
 Liu, et al             Expires January 6, 2016                [Page 65] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

            leaf minimum-lsp-bandwidth { 
              type decimal64 { 
                fraction-digits 2; 
              } 
              description 
                "Minimum LSP Bandwidth. Units in bytes per second"; 
            } 
            leaf indication { 
              type enumeration { 
                enum "standard" { 
                  description "Indicates support of standard SONET/SDH"; 
                } 
                enum "arbitrary" { 
                  description "Indicates support of arbitrary 
                               SONET/SDH"; 
                } 
              } 
              description 
                "Indication whether the interface supports Standard or 
                 Arbitrary SONET/SDH"; 
            } 
          } 
        } 
        container te-srlgs { 
          description 
            "A list of SLRGs."; 
          leaf-list values { 
            type te-types:srlg; 
            description "SRLG value"; 
          } 
        } 
      } // te-link-info-attributes 
     
      grouping te-link-attributes { 
        description  
          "Link attributes in a TE topology."; 
        container te-link-attributes { 
          description "Link attributes in a TE topology."; 
          uses config-schedule-attributes; 
          leaf name { 
            type string; 
            description "Link Name"; 
          } 
          leaf-list flag { 
            type flag-type; 
            description "Link flags"; 
  
  
 Liu, et al             Expires January 6, 2016                [Page 66] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

          } 
          leaf is-abstract { 
            type boolean; 
            description "true if the link is abstract."; 
          } 
          container underlay { 
            if-feature te-topology-hierarchy; 
            presence  
              "Indicates the underlay exists for this link."; 
            description "State of the underlay of this link."; 
     
            uses te-link-underlay-attributes; 
          } // underlay 
          leaf admin-status { 
            type enumeration { 
              enum up { 
                value 1; 
                description 
                "Enabled."; 
              } 
              enum down { 
                value 2; 
                description 
                "Disabled."; 
              } 
              enum testing { 
                value 3; 
                description 
                "In some test mode."; 
              } 
            } 
            description 
              "The desired state of the link."; 
          } 
           
          uses performance-metric-throttle-container; 
          uses te-link-info-attributes; 
        } 
      } // te-link-attributes 
     
      grouping te-link-state-attributes { 
        description  
          "Link state attributes in a TE topology."; 
        container te-link-state { 
          description "Link state attributes in a TE topology."; 
          leaf oper-status { 
  

 Liu, et al             Expires January 6, 2016                [Page 67] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

            type enumeration { 
              enum up { 
                value 1; 
                description 
                "Operational up"; 
              } 
              enum down { 
                value 2; 
                description 
                "Operational down."; 
              } 
              enum testing { 
                value 3; 
                description 
                "In some test mode"; 
              } 
              enum unknown { 
                value 4; 
                description 
                "Status cannot be determined for some reason."; 
              } 
            } 
            description 
              "The current operational state of the link."; 
          } 
          uses information-source-attributes; 
          list alt-information-sources { 
            key "information-source"; 
            description 
              "A list of information sources learned but not used."; 
            uses information-source-attributes; 
            uses te-link-info-attributes; 
          }             
        } 
      } // te-link-state-attributes 
     
      grouping template-attributes { 
        description  
          "Common attributes for all templates."; 
     
        leaf priority { 
          type uint16; 
          description 
            "The preference value to resolve conflicts between different 
            templates. When two or more templates specify values for  
            one configuration attribute, the value from the template 

  
 Liu, et al             Expires January 6, 2016                [Page 68] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

            with the highest priority is used."; 
        } 
        leaf reference-change-policy { 
          type enumeration { 
            enum no-action { 
              description 
                "When an attribute changes in this template, the  
                configuration node referring to this template does  
                not take any action."; 
            } 
            enum not-allowed { 
              description 
                "When any configuration object has a reference to this 
                template, changing this template is not allowed."; 
            } 
            enum cascade { 
              description 
                "When an attribute changes in this template, the  
                configuration object referring to this template applies 
                the new attribute value to the corresponding  
                configuration."; 
            } 
          } 
          description 
            "This attribute specifies the action taken to a 
    configuration 
            node that has a reference to this template."; 
        } 
      } // template-attributes 
     
      /* 
       * Configuration data nodes 
       */ 
     
      container te-topologies { 
        description 
          "This container acts as the top-level data element of  
           configuration data."; 
        list topology { 
          key "provider-id client-id te-topology-id"; 
          description 
            "This is the model of an abstract topology. A topology 
            contains nodes and links. Each topology MUST be identified 
            by a unique te-topology-id for reason that a network could 
            contain many topologies."; 
          leaf provider-id { 

  
 Liu, et al             Expires January 6, 2016                [Page 69] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

            type te-global-id; 
            description 
              "An identifier to uniquely identify a provider."; 
          } 
          leaf client-id { 
            type te-global-id; 
            description 
              "An identifier to uniquely identify a client."; 
          } 
          leaf te-topology-id { 
            type te-topology-id; 
            description 
              "It is presumed that a datastore will contain many 
              topologies. To distinguish between topologies it is 
              vital to have UNIQUE topology identifiers."; 
          } 
          uses config-schedule-attributes; 
          container topology-types { 
            description 
              "This container is used to identify the type, or types (as 
              a topology can support several types simultaneously), of 
              the topology. 
              Topology types are the subject of several integrity 
              constraints that an implementing server can validate in 
              order to maintain integrity of the datastore. 
              Topology types are indicated through separate data nodes; 
              the set of topology types is expected to increase over 
              time. 
              To add support for a new topology, an augmenting module 
              needs to augment this container with a new empty optional 
              container to indicate the new topology type. 
              The use of a container allows to indicate a 
              subcategorization of topology types. 
              The container SHALL NOT be augmented with any data nodes 
              that serve a purpose other than identifying a particular 
              topology type."; 
            uses te-topology-type; // Defines the TE topology type. 
          } 
          list node { 
            key "te-node-id"; 
            leaf te-node-id { 
              type te-node-id; 
              description 
                "The identifier of a node in the topology. 
                A node is specific to a topology to which it belongs."; 
            } 
  

 Liu, et al             Expires January 6, 2016                [Page 70] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

            description 
              "The list of network nodes defined for the topology."; 
            leaf te-node-template { 
              if-feature template; 
              type leafref { 
                path "/te-topologies/node-template/name"; 
              } 
              description 
                "The reference to a TE node template."; 
            } 
            uses te-node-attributes; 
          } 
          list link { 
            key "source-te-node-id source-te-link-id " 
              + "dest-te-node-id dest-te-link-id"; 
            leaf source-te-node-id { 
              type leafref { 
                path "../../node/te-node-id"; 
              } 
              mandatory true; 
              description 
                "Source node identifier, must be in same topology."; 
            } 
            leaf source-te-link-id { 
              type leafref { 
                path "../../node[te-node-id = " 
                  + "current()/../source-te-node-id]/" 
                  + "te-link/te-link-id"; 
              } 
              mandatory true; 
              description 
                "Source TE link identifier, must be in same topology."; 
            } 
            leaf dest-te-node-id { 
              type leafref { 
                path "../../node/te-node-id"; 
              } 
              mandatory true; 
              description 
                "Destination node identifier, must be in the same 
                topology."; 
            } 
            leaf dest-te-link-id { 
              type leafref { 
                path "../../node[te-node-id = " 
                  + "current()/../dest-te-node-id]/" 
  
 
 Liu, et al             Expires January 6, 2016                [Page 71] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

                  + "te-link/te-link-id"; 
              } 
              mandatory true; 
              description 
                "Destination TE link identifier, must be in same 
                topology."; 
            } 
            description 
              "TE link is a logical construct that represents a way 
              to group/map information about certain physical 
              resources (and their properties) that interconnect TE 
              nodes. 
              A Network Link connects a by Local (Source) node and 
              a Remote (Destination) Network Nodes via a set of the 
              nodes' TE links. 
              As it is possible to have several links between the 
              same source and destination nodes, and as a link 
              could potentially be re-homed, to ensure that we 
              would always know to distinguish between 
              links, every link is identified by a dedicated link 
              identifier. 
              Note that a link models a point-to-point link, not a 
              multipoint link."; 
            leaf te-link-template { 
              if-feature template; 
              type leafref { 
                path "/te-topologies/link-template/name"; 
              } 
              description 
                "The reference to a TE link template."; 
            } 
            uses te-link-attributes; 
          } // link 
        } // topology 
     
        list node-template { 
          if-feature template; 
          key "name"; 
          leaf name { 
            type te-template-name; 
            description 
              "The name to identify a TE node template."; 
          } 
          description 
            "The list of TE node templates used to define sharable 
            and reusable TE node attributes."; 
  

 Liu, et al             Expires January 6, 2016                [Page 72] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

          uses template-attributes; 
          leaf-list te-node-template { 
            type leafref { 
              path "/te-topologies/node-template/name"; 
            } 
            description 
              "The reference to a TE node template."; 
          } 
          uses te-node-attributes; 
        } // node 
     
        list link-template { 
          if-feature template; 
          key "name"; 
          leaf name { 
            type te-template-name; 
            description 
              "The name to identify a TE link template."; 
          } 
          description 
            "The list of TE link templates used to define sharable 
            and reusable TE link attributes."; 
          uses template-attributes; 
          leaf-list te-link-template { 
            type leafref { 
              path "/te-topologies/link-template/name"; 
            } 
            description 
              "The reference to a TE link template."; 
          } 
          uses te-link-attributes; 
        } // link 
      } // te-topologies 
     
      /* 
       * Operational state data nodes 
       */ 
     
      container te-topologies-state { 
        config false; 
        description 
          "This container acts as the top-level state data element of  
           operational data."; 
        list topology { 
          key "provider-id client-id te-topology-id"; 
          description 

  
 Liu, et al             Expires January 6, 2016                [Page 73] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

            "This is the model of an abstract topology. A topology 
            contains nodes and links. Each topology MUST be identified 
            by a unique te-topology-id for reason that a network could 
            contain many topologies."; 
          leaf provider-id { 
            type te-global-id; 
            description 
              "An identifier to uniquely identify a provider."; 
          } 
          leaf client-id { 
            type te-global-id; 
            description 
              "An identifier to uniquely identify a client."; 
          } 
          leaf te-topology-id { 
            type te-topology-id; 
            description 
              "It is presumed that a datastore will contain many 
              topologies. To distinguish between topologies it is 
              vital to have UNIQUE topology identifiers."; 
          } 
          leaf server-provided { 
            type boolean; 
            config false; 
            description 
              "Indicates whether the topology is configurable by 
              clients, 
              or whether it is provided by the server.  This leaf is 
              populated by the server implementing the model. 
              It is set to false for topologies that are created by a 
              client; it is set to true otherwise.  If it is set to 
    true, 
              any attempt to edit the topology MUST be rejected."; 
          } 
          container topology-types { 
            description 
              "This container is used to identify the type, or types (as 
              a topology can support several types simultaneously), of 
              the topology. 
              Topology types are the subject of several integrity 
              constraints that an implementing server can validate in 
              order to maintain integrity of the datastore. 
              Topology types are indicated through separate data nodes; 
              the set of topology types is expected to increase over 
              time. 
              To add support for a new topology, an augmenting module 

  
 Liu, et al             Expires January 6, 2016                [Page 74] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

              needs to augment this container with a new empty optional 
              container to indicate the new topology type. 
              The use of a container allows to indicate a 
              subcategorization of topology types. 
              The container SHALL NOT be augmented with any data nodes 
              that serve a purpose other than identifying a particular 
              topology type."; 
            uses te-topology-type; // Defines the TE topology type. 
          } 
          list node { 
            key "te-node-id"; 
            leaf te-node-id { 
              type te-node-id; 
              description 
                "The identifier of a node in the topology. 
                A node is specific to a topology to which it belongs."; 
            } 
            description 
              "The list of network nodes defined for the topology."; 
            leaf te-node-template { 
              if-feature template; 
              type leafref { 
                path "/te-topologies/node-template/name"; 
              } 
              description 
                "The reference to a TE node template."; 
            } 
            uses te-node-attributes; 
            uses te-node-state-attributes; 
          } 
          list link { 
            key "source-te-node-id source-te-link-id " 
              + "dest-te-node-id dest-te-link-id"; 
            leaf source-te-node-id { 
              type leafref { 
                path "../../node/te-node-id"; 
              } 
              mandatory true; 
              description 
                "Source node identifier, must be in same topology."; 
            } 
            leaf source-te-link-id { 
              type leafref { 
                path "../../node[te-node-id = " 
                  + "current()/../source-te-node-id]/" 
                  + "te-link/te-link-id"; 
  

 Liu, et al             Expires January 6, 2016                [Page 75] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

              } 
              mandatory true; 
              description 
                "Source TE link identifier, must be in same topology."; 
            } 
            leaf dest-te-node-id { 
              type leafref { 
                path "../../node/te-node-id"; 
              } 
              mandatory true; 
              description 
                "Destination node identifier, must be in the same 
                topology."; 
            } 
            leaf dest-te-link-id { 
              type leafref { 
                path "../../node[te-node-id = " 
                  + "current()/../dest-te-node-id]/" 
                  + "te-link/te-link-id"; 
              } 
              mandatory true; 
              description 
                "Destination TE link identifier, must be in same 
                topology."; 
            } 
            description 
              "TE link is a logical construct that represents a way 
              to group/map information about certain physical 
              resources (and their properties) that interconnect TE 
              nodes. 
              A Network Link connects a by Local (Source) node and 
              a Remote (Destination) Network Nodes via a set of the 
              nodes' TE links. 
              As it is possible to have several links between the 
              same source and destination nodes, and as a link 
              could potentially be re-homed, to ensure that we 
              would always know to distinguish between 
              links, every link is identified by a dedicated link 
              identifier. 
              Note that a link models a point-to-point link, not a 
              multipoint link."; 
            leaf te-link-template { 
              if-feature template; 
              type leafref { 
                path "/te-topologies/link-template/name"; 
              } 

  
 Liu, et al             Expires January 6, 2016                [Page 76] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

              description 
                "The reference to a TE link template."; 
            } 
            uses te-link-attributes; 
            uses te-link-state-attributes; 
          } // link 
        } // topology 
      } // te-topologies 
     
      augment "/te-topologies-state/topology/link/te-link-attributes/" 
        + "underlay" { 
        description "Add state attributes to te-link underlay."; 
        uses te-link-state-underlay-attributes; 
      } 
     
      /* 
       * Notifications 
       */ 
     
      notification te-node-event { 
        description "Notification event for TE node"; 
        leaf event-type { 
          type te-topology-event-type; 
          description "Event type"; 
        } 
        uses node-ref; 
        uses te-topology-type; 
        uses tet:te-node-attributes; 
        uses tet:te-node-state-attributes; 
      } 
       
      notification te-link-event { 
        description "Notification event for TE link"; 
        leaf event-type { 
          type te-topology-event-type; 
          description "Event type"; 
        } 
        uses link-ref; 
        uses te-topology-type; 
        uses tet:te-link-attributes; 
        uses tet:te-link-state-attributes; 
      } 
     
      augment "/te-link-event/te-link-attributes/underlay" { 
        description "Add state attributes to te-link underlay."; 
        uses te-link-state-underlay-attributes; 
 
  
 Liu, et al             Expires January 6, 2016                [Page 77] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

      } 
    } 
     
    <CODE ENDS> 
     
 7. Security Considerations 

    The transport protocol used for retrieving/manipulating the TE 
    topology data MUST support authentication and SHOULD support 
    encryption. The data-model by itself does not create any security 
    implications. 
     
 8. IANA Considerations 

    This document registers the following URIs in the IETF XML registry 
    [RFC3688]. Following the format in [RFC3688], the following 
    registration is requested to be made. 
     
    URI: urn:ietf:params:xml:ns:yang:ietf-te-topology  
    XML: N/A, the requested URI is an XML namespace. 
     
    This document registers a YANG module in the YANG Module Names 
    registry [RFC6020]. 
     
    name: ietf-te-topology  
    namespace: urn:ietf:params:xml:ns:yang:ietf-te-topology  
    prefix: tet 
     
        
 9. References 

 9.1. Normative References 

    [RFC2119]   Bradner, S., "Key words for use in RFCs to Indicate 
                Requirement Levels", BCP 14, RFC 2119, March 1997. 
     
    [RFC3688]   Mealling, M., "The IETF XML Registry", BCP 81, RFC 3688, 
                January 2004. 
     
    [RFC6020]   Bjorklund, M., "YANG - A Data Modeling Language for the 
                Network Configuration Protocol (NETCONF)", RFC 6020, 
                October 2010. 
     
    [RFC6991]   Schoenwaelder, J., "Common YANG Data Types", RFC 6991, 
                July 2013. 
     

 Liu, et al             Expires January 6, 2016                [Page 78] 
     






 Internet-Draft            YANG - TE Topology                  July 2015 
     

    [RFC3945]   Mannie, E., "Generalized Multi-Protocol Label Switching  
                (GMPLS) Architecture", October 2004. 
     
    [YANG-NET-TOPO]   Clemm, A., "A Data Model for Network Topologies", 
                draft-ietf-i2rs-yang-network-topo (Work in Progress). 
     
    [YANG-PUSH] Clemm, A., "Subscribing to YANG datastore push updates",  
                draft-clemm-netconf-yang-push (Work in Progress). 
     
 9.2. Informative References 

    [RFC2702]   Awduche, D., "Requirements for Traffic Engineering Over  
                MPLS", RFC 2702, September 1999. 
     

 10. Acknowledgments 
     
    The authors would like to thank Lou Berger, Sue Hares, Mazen 
    Khaddam, Cyril Margaria and Zafar Ali for participating in design 
    discussions and providing valuable insights. 
     
 Authors' Addresses 

    Xufeng Liu 
    Ericsson 
    Email: xufeng.liu@ericsson.com 
     
    Igor Bryskin 
    ADVA Optical Networking 
    Email: ibryskin@advaoptical.com 
     
    Vishnu Pavan Beeram 
    Juniper Networks 
    Email: vbeeram@juniper.net 
     
    Tarek Saad 
    Cisco Systems Inc 
    Email: tsaad@cisco.com 
     
    Himanshu Shah 
    Ciena 
    Email: hshah@ciena.com 
     
    Oscar Gonzalez De Dios 
    Telefonica 
    Email: oscar.gonzalezdedios@telefonica.com 
  
 Liu, et al             Expires January 6, 2016                [Page 79] 
     
