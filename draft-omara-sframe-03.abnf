sframe_secret = HKDF-Extract(K, 'SFrame10')
sframe_key = HKDF-Expand(sframe_secret, 'key', AEAD.Nk)
sframe_salt = HKDF-Expand(sframe_secret, 'salt', AEAD.Nn)
frame_ctr = encode_big_endian(CTR, AEAD.Nn)
frame_nonce = xor(sframe_salt, frame_ctr)

header = encode_sframe_header(S, CTR, KID)
frame_aad = header + frame_metadata

encrypted_frame = AEAD.Encrypt(sframe_key, frame_nonce, frame_aad, frame)
frame_ctr = encode_big_endian(CTR, AEAD.Nn)
frame_nonce = xor(sframe_salt, frame_ctr)
frame_aad = header + frame_metadata

aead_secret = HKDF-Extract(sframe_key, 'SFrame10 AES CM AEAD')
enc_key = HKDF-Expand(aead_secret, 'enc', Nk)
auth_key = HKDF-Expand(aead_secret, 'auth', Nh)
aad_len = encode_big_endian(len(aad), 8)
ct_len = encode_big_endian(len(ct), 8)
auth_data = aad_len + ct_len + nonce + aad + ct
tag = HMAC(auth_key, auth_data)
ct = AES-CM.Encrypt(enc_key, nonce, pt)
tag = compute_tag(auth_key, nonce, aad, ct)
candidate_tag = compute_tag(auth_key, nonce, aad, inner_ct)
sframe_epoch_secret = MLS-Exporter("SFrame 10 MLS", "", AEAD.Nk)

KID = (sender_index << E) + (epoch % (1 << E))

OverheadPerPacket = 11 + MAC length Overhead bps = PacketPerSecond *
