



SACM Working Group                                           H. Birkholz
Internet-Draft                                            Fraunhofer SIT
Intended status: Standards Track                     J. Fitzgerald-McKay
Expires: November 13, 2019                         Department of Defense
                                                              C. Schmidt
                                                   The MITRE Corporation
                                                           D. Waltermire
                                                                    NIST
                                                            May 12, 2019


                  Concise Software Identification Tags
                       draft-ietf-sacm-coswid-09

Abstract

   This document defines a concise representation of ISO/IEC
   19770-2:2015 Software Identification (SWID) tags that are
   interoperable with the XML schema definition of ISO/IEC 19770-2:2015.
   Next to the inherent capability of SWID tags to express arbitrary
   context information, Concise SWID (CoSWID) tags support the
   definition of additional semantics via well-defined data definitions
   incorporated by extension points.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 13, 2019.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents



Birkholz, et al.        Expires November 13, 2019               [Page 1]

Internet-Draft                   COSWID                         May 2019


   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  The SWID and CoSWID Tag Lifecycle . . . . . . . . . . . .   4
     1.2.  Concise SWID Format . . . . . . . . . . . . . . . . . . .   6
     1.3.  Requirements Notation . . . . . . . . . . . . . . . . . .   7
   2.  Concise SWID Data Definition  . . . . . . . . . . . . . . . .   7
     2.1.  Concise SWID Extensions . . . . . . . . . . . . . . . . .   8
     2.2.  The concise-swid-tag Group  . . . . . . . . . . . . . . .   9
     2.3.  concise-swid-tag Co-constraints . . . . . . . . . . . . .  13
     2.4.  The global-attributes Group . . . . . . . . . . . . . . .  14
     2.5.  The entity-entry Group  . . . . . . . . . . . . . . . . .  14
     2.6.  The link-entry Map  . . . . . . . . . . . . . . . . . . .  16
     2.7.  The software-meta-entry Map . . . . . . . . . . . . . . .  19
     2.8.  The Resource Collection Definition  . . . . . . . . . . .  22
       2.8.1.  The hash-entry Array  . . . . . . . . . . . . . . . .  22
       2.8.2.  The resource-collection Group . . . . . . . . . . . .  23
       2.8.3.  The payload-entry Group . . . . . . . . . . . . . . .  26
       2.8.4.  The evidence-entry Group  . . . . . . . . . . . . . .  26
     2.9.  Full CDDL Definition  . . . . . . . . . . . . . . . . . .  27
   3.  Determining the Type of CoSWID  . . . . . . . . . . . . . . .  33
   4.  CoSWID Indexed Label Values . . . . . . . . . . . . . . . . .  33
     4.1.  Version Scheme  . . . . . . . . . . . . . . . . . . . . .  33
     4.2.  Entity Role Values  . . . . . . . . . . . . . . . . . . .  34
     4.3.  Use Values  . . . . . . . . . . . . . . . . . . . . . . .  35
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  36
     5.1.  CoSWID Items Registry . . . . . . . . . . . . . . . . . .  36
     5.2.  SWID/CoSWID Version Schema Values Registry  . . . . . . .  39
     5.3.  SWID/CoSWID Entity Role Values Registry . . . . . . . . .  40
     5.4.  SWID/CoSWID Link Use Values Registry  . . . . . . . . . .  41
     5.5.  swid+cbor Media Type Registration . . . . . . . . . . . .  42
     5.6.  CoAP Content-Format Registration  . . . . . . . . . . . .  43
     5.7.  CBOR Tag Registration . . . . . . . . . . . . . . . . . .  44
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .  44
   7.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  46
   8.  Change Log  . . . . . . . . . . . . . . . . . . . . . . . . .  46
   9.  Contributors  . . . . . . . . . . . . . . . . . . . . . . . .  50
   10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  50
     10.1.  Normative References . . . . . . . . . . . . . . . . . .  50
     10.2.  Informative References . . . . . . . . . . . . . . . . .  51



Birkholz, et al.        Expires November 13, 2019               [Page 2]

Internet-Draft                   COSWID                         May 2019


   Appendix A.  Signed Concise SWID Tags using COSE  . . . . . . . .  52
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  53

1.  Introduction

   SWID tags have several use-applications including but not limited to:

   o  Software Inventory Management, a part of a Software Asset
      Management [SAM] process, which requires an accurate list of
      discernible deployed software components.

   o  Vulnerability Assessment, which requires a semantic link between
      standardized vulnerability descriptions and software components
      installed on IT-assets [X.1520].

   o  Remote Attestation, which requires a link between reference
      integrity measurements (RIM) and security logs of measured
      software components [I-D.birkholz-rats-tuda].

   SWID tags, as defined in ISO-19770-2:2015 [SWID], provide a
   standardized XML-based record format that identifies and describes a
   specific release of a software component.  Different software
   components, and even different releases of a particular software
   component, each have a different SWID tag record associated with
   them.  SWID tags are meant to be flexible and able to express a broad
   set of metadata about a software component.

   While there are very few required fields in SWID tags, there are many
   optional fields that support different use scenarios.  A SWID tag
   consisting of only required fields might be a few hundred bytes in
   size; however, a tag containing many of the optional fields can be
   many orders of magnitude larger.  Thus, real-world instances of SWID
   tags can be fairly large, and the communication of SWID tags in use-
   applications such as those described earlier can cause a large amount
   of data to be transported.  This can be larger than acceptable for
   constrained devices and networks.  Concise SWID (CoSWID) tags
   significantly reduce the amount of data transported as compared to a
   typical SWID tag.  This reduction is enabled through the use of CBOR,
   which maps the human-readable labels of SWID data items to more
   concise integer labels (indices).  The use of CBOR to express SWID
   information in CoSWID tags allows both CoSWID and SWID tags to be
   part of an enterprise security solution for a wider range of
   endpoints and environments.








Birkholz, et al.        Expires November 13, 2019               [Page 3]

Internet-Draft                   COSWID                         May 2019


1.1.  The SWID and CoSWID Tag Lifecycle

   In addition to defining the format of a SWID tag record, ISO/IEC
   19770-2:2015 defines requirements concerning the SWID tag lifecycle.
   Specifically, when a software component is installed on an endpoint,
   that software component's SWID tag is also installed.  Likewise, when
   the software component is uninstalled or replaced, the SWID tag is
   deleted or replaced, as appropriate.  As a result, ISO/IEC
   19770-2:2015 describes a system wherein there is a correspondence
   between the set of installed software components on an endpoint, and
   the presence of the corresponding SWID tags for these components on
   that endpoint.  CoSWIDs share the same lifecycle requirements as a
   SWID tag.

      The SWID specification and supporting guidance provided in NIST
      Internal Report (NISTIR) 8060: Guidelines for the Creation of
      Interoperable SWID Tags [SWID-GUIDANCE] defines four types of SWID
      tags: primary, patch, corpus, and supplemental.

   1.  Primary Tag - A SWID or CoSWID tag that identifies and describes
       a software component is installed on a computing device.  A
       primary tag is intended to be installed on an endpoint along with
       the corresponding software component.

   2.  Patch Tag - A SWID or CoSWID tag that identifies and describes an
       installed patch which has made incremental changes to a software
       component installed on an endpoint.  A patch tag is intended to
       be installed on an endpoint along with the corresponding software
       component patch.

   3.  Corpus Tag - A SWID or CoSWID tag that identifies and describes
       an installable software component in its pre-installation state.
       A corpus tag can be used to represent metadata about an
       installation package or installer for a software component, a
       software update, or a patch.

   4.  Supplemental Tag - A SWID or CoSWID tag that allows additional
       information to be associated with a referenced SWID tag.  This
       helps to ensure that SWID Primary and Patch Tags provided by a
       software provider are not modified by software management tools,
       while allowing these tools to provide their own software
       metadata.

   The type of a tag is determined by specific data elements, which is
   discussed in Section 3.

      Corpus, primary, and patch tags have similar functions in that
      they describe the existence and/or presence of different types of



Birkholz, et al.        Expires November 13, 2019               [Page 4]

Internet-Draft                   COSWID                         May 2019


      software (e.g., software installers, software installations,
      software patches), and, potentially, different states of software
      components.  In contrast, supplemental tags furnish additional
      information not contained in corpus, primary, or patch tags.  All
      four tag types come into play at various points in the software
      lifecycle, and support software management processes that depend
      on the ability to accurately determine where each software
      component is in its lifecycle.

                                    +------------+
                                    v            |
  Installation     Product       Product      Product       Product
    Media      -> Installed  ->  Patched   -> Upgraded   -> Removed
   Deployed

   Corpus         Primary        Primary      xPrimary      xPrimary
                  Supplemental   Supplemental xSupplemental xSuplemental
                                 Patch        xPatch
                                              Primary
                                              Supplemental


           Figure 1: Use of Tag Types in the Software Lifecycle

      Figure 1 illustrates the steps in the software lifecycle and the
      relationships among those lifecycle events supported by the four
      types of SWID and CoSWID tags, as follows:



      *  Software Deployment.  Before the software component is
         installed (i.e., pre-installation), and while the product is
         being deployed, a corpus tag provides information about the
         installation files and distribution media (e.g., CD/DVD,
         distribution package).

      *  Software Installation.  A primary tag will be installed with
         the software component (or subsequently created) to uniquely
         identify and describe the software component.  Supplemental
         tags are created to augment primary tags with additional site-
         specific or extended information.  While not illustrated in the
         figure, patch tags can also be installed during software
         installation to provide information about software fixes
         deployed along with the base software installation.

      *  Software Patching.  When a new patch is applied to the software
         component, a new patch tag is provided, supplying details about
         the patch and its dependencies.  While not illustrated in the



Birkholz, et al.        Expires November 13, 2019               [Page 5]

Internet-Draft                   COSWID                         May 2019


         figure, a corpus tag can also provide information about the
         patch installer, and patching dependencies that need to be
         installed before the patch.

      *  Software Upgrading.  As a software component is upgraded to a
         new version, new primary and supplemental tags replace existing
         tags, enabling timely and accurate tracking of updates to
         software inventory.  While not illustrated in the figure, a
         corpus tag can also provide information about the upgrade
         installer, and dependencies that need to be installed before
         the upgrade.

      *  Software Removal.  Upon removal of the software component,
         relevant SWID tags are removed.  This removal event can trigger
         timely updates to software inventory reflecting the removal of
         the product and any associated patch or supplemental tags.

   Note: While not fully illustrated in the figure, supplemental tags
   can be associated with any corpus, primary, or patch tag to provide
   additional metadata about an installer, installed software, or
   installed patch respectively.

   Understanding the use of CoSWIDs in the software lifecycle provides a
   basis for understanding the information provided in a CoSWID and the
   associated semantics of this information.  Each of the different SWID
   and CoSWID tag types provide different sets of information.  For
   example, a "corpus tag" is used to describe a software component's
   installation image on an installation media, while a "patch tag" is
   meant to describe a patch that modifies some other software
   component.

1.2.  Concise SWID Format

   This document defines the CoSWID tag format, a more concise
   representation of SWID information in the Concise Binary Object
   Representation (CBOR) [RFC7049].  The structure of a CoSWID is
   described via the Concise Data Definition Language (CDDL)
   [I-D.ietf-cbor-cddl].  The resulting CoSWID data definition is
   aligned to the information able to be expressed with the XML schema
   definition of ISO-19770-2:2015 [SWID].  This alignment allows both
   SWID and CoSWID tags to represent a common set of SWID information
   and to support all SWID tag use cases.  To achieve this end, the CDDL
   representation includes every SWID tag field and attribute.

   The vocabulary, i.e., the CDDL names of the types and members used in
   the CoSWID data definition, are mapped to more concise labels
   represented as small integer values.  The names used in the CDDL data
   definition and the mapping to the CBOR representation using integer



Birkholz, et al.        Expires November 13, 2019               [Page 6]

Internet-Draft                   COSWID                         May 2019


   labels is based on the vocabulary of the XML attribute and element
   names defined in ISO/IEC 19770-2:2015.

1.3.  Requirements Notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Concise SWID Data Definition

   The following is a CDDL representation for a CoSWID tag.  The
   CamelCase [CamelCase] notation used in the XML schema definition is
   changed to a hyphen-separated notation [KebabCase] (e.g.
   ResourceCollection is named resource-collection) in the CoSWID data
   definition.  In essence, [KebabCase] "looks-like-this".  This
   deviation from the original notation used in the XML representation
   reduces ambiguity when referencing certain attributes in
   corresponding textual descriptions.  An attribute referred by its
   name in CamelCase notation explicitly relates to XML SWID tags, an
   attribute referred by its name in KebabCase notation explicitly
   relates to CoSWID tags.  This approach simplifies the composition of
   further work that reference both XML SWID and CoSWID documents.

   Human-readable labels of members in CDDL map data definitions are
   mapped to integer indices via a block of rules at the bottom of the
   definition.  The 57 character strings of the SWID vocabulary that
   would have to be stored or transported in full if using the original
   vocabulary are replaced.

   In CBOR, an array is encoded using bytes that identify the array, and
   the array's length or stop point (see [RFC7049]).  To make items that
   support 1 or more values, the following CDDL notion is used.

   _name_ = (_label_: _data_ / [ 2* _data_ ])

   The CDDL rule above allows for a more efficient CBOR encoding of the
   data when a single value is used by avoiding the need to first encode
   the array.  Conversely, an array is used for two or more values.
   This modeling pattern is used frequently in the CoSWID CDDL data
   definition in such cases.

   The following subsections describe the different parts of the CoSWID
   model.





Birkholz, et al.        Expires November 13, 2019               [Page 7]

Internet-Draft                   COSWID                         May 2019


2.1.  Concise SWID Extensions

   The corresponding CoSWID data definition includes two kinds of
   augmentation.

   o  The explicit definition of types for attributes that are typically
      stored in the "any attribute" of an ISO-19770-2:2015 in XML
      representation.  These are covered in Section 2.4.

   o  The inclusion of extension points in the CoSWID data definition
      using CDDL sockets (see [I-D.ietf-cbor-cddl] section 3.9).  The
      use of CDDL sockets allow for well-formed extensions to be defined
      in supplementary CDDL descriptions that support additional uses of
      CoSWID tags that go beyond the original scope of ISO-19770-2:2015
      tags.  This extension mechanism can also be used to update the
      CoSWID format as revisions to ISO-19770-2 are published.

   The following CDDL sockets (extension points) are defined in this
   document, which allow the addition of new information structures to
   their respective CDDL groups.

      +---------------------+-----------------------+---------------+
      | Map Name            | CDDL Socket           | Defined in    |
      +---------------------+-----------------------+---------------+
      | concise-swid-tag    | $$coswid-extension    | Section 2.2   |
      |                     |                       |               |
      | entity-entry        | $$entity-extension    | Section 2.5   |
      |                     |                       |               |
      | link-entry          | $$link-extension      | Section 2.6   |
      |                     |                       |               |
      | software-meta-entry | $$meta-extension      | Section 2.7   |
      |                     |                       |               |
      | file-entry          | $$file-extension      | Section 2.8.2 |
      |                     |                       |               |
      | directory-entry     | $$directory-extension | Section 2.8.2 |
      |                     |                       |               |
      | process-entry       | $$process-extension   | Section 2.8.2 |
      |                     |                       |               |
      | resource-entry      | $$resource-extension  | Section 2.8.2 |
      |                     |                       |               |
      | payload-entry       | $$payload-extension   | Section 2.8.3 |
      |                     |                       |               |
      | evidence-entry      | $$evidence-extension  | Section 2.8.4 |
      +---------------------+-----------------------+---------------+

   The following CDDL sockets defined in this document allow for adding
   new values to corresponding type-choices (i.e. to represent
   enumerations) via custom CDDL data definitions.



Birkholz, et al.        Expires November 13, 2019               [Page 8]

Internet-Draft                   COSWID                         May 2019


           +------------------+-----------------+-------------+
           | Enumeration Name | CDDL Socket     | Defined in  |
           +------------------+-----------------+-------------+
           | version-scheme   | $version-scheme | Section 4.1 |
           |                  |                 |             |
           | role             | $role           | Section 4.2 |
           |                  |                 |             |
           | ownership        | $ownership      | Section 2.6 |
           |                  |                 |             |
           | rel              | $rel            | Section 4.3 |
           |                  |                 |             |
           | use              | $use            | Section 2.6 |
           +------------------+-----------------+-------------+

   The CoSWID Items Registry defined in Section 5.1 provides a
   registration mechanism allowing new items, and their associated index
   values, to be added to the CoSWID model through the use of the CDDL
   sockets described above.  This registration mechanism will provide
   for well-known index values for data items in CoSWID extensions,
   allowing these index values to be recognized by implementations
   supporting a given extension.

2.2.  The concise-swid-tag Group

   The CDDL data definition for the root concise-swid-tag map is as
   follows and this rule and its constraints MUST be followed when
   creating or validating a CoSWID tag:
























Birkholz, et al.        Expires November 13, 2019               [Page 9]

Internet-Draft                   COSWID                         May 2019


 concise-swid-tag = {
   global-attributes,
   tag-id => text,
   tag-version => integer,
   ? corpus => bool,
   ? patch => bool,
   ? supplemental => bool,
   swid-name => text,
   ? software-version => text,
   ? version-scheme => $version-scheme,
   ? media => text,
   ? software-meta =>  software-meta-entry / [ 2* software-meta-entry ],
   entity => entity-entry / [ 2* entity-entry ],
   ? link => link-entry / [ 2* link-entry ],
   ? (( payload => payload-entry ) // ( evidence => evidence-entry )),
   * $$coswid-extension
 }

 tag-id = 0
 swid-name = 1
 entity = 2
 evidence = 3
 link = 4
 software-meta = 5
 payload = 6
 corpus = 8
 patch = 9
 media = 10
 supplemental = 11
 tag-version = 12
 software-version = 13
 version-scheme = 14

 $version-scheme /= multipartnumeric
 $version-scheme /= multipartnumeric-suffix
 $version-scheme /= alphanumeric
 $version-scheme /= decimal
 $version-scheme /= semver
 $version-scheme /= uint / text
 multipartnumeric = 1
 multipartnumeric-suffix = 2
 alphanumeric = 3
 decimal = 4
 semver = 16384

   The following describes each member of the concise-swid-tag root map.





Birkholz, et al.        Expires November 13, 2019              [Page 10]

Internet-Draft                   COSWID                         May 2019


   o  global-attributes: A list of items including an optional language
      definition to support the processing of text-string values and an
      unbounded set of any-attribute items.  Described in Section 2.4.

   o  tag-id (index 0): A textual identifier uniquely referencing a
      (composite) software component.  The tag identifier MUST be
      globally unique.  There are no strict guidelines on how this
      identifier is structured, but examples include a 16 byte GUID
      (e.g.  class 4 UUID) [RFC4122], or a text string appended to a DNS
      domain name to ensure uniqueness across organizations.

   o  tag-version (index 12): An integer value that indicates if a
      specific release of a software component has more than one tag
      that can represent that specific release.  Typically, the initial
      value of this field is set to 0, and the value is monotonically
      increased for subsequent tags produced for the same software
      component release.  This value is changed when a CoSWID tag
      producer creates and releases an incorrect tag that they
      subsequently want to fix, but no underlying changes have been made
      to the product the CoSWID tag represents.  This could happen if,
      for example, a patch is distributed that has a link reference that
      does not cover all the various software releases it can patch.  A
      newer CoSWID tag for that patch can be generated and the tag-
      version value incremented to indicate that the data has been
      updated.

   o  corpus (index 8): A boolean value that indicates if the tag
      identifies and describes an installable software component in its
      pre-installation state.  Installable software includes a
      installation package or installer for a software component, a
      software update, or a patch.  If the CoSWID tag represents
      installable software, the corpus item MUST be set to "true".  If
      not provided the default value MUST be considered "false".

   o  patch (index 9): A boolean value that indicates if the tag
      identifies and describes an installed patch which has made
      incremental changes to a software component installed on a
      computing device.  Typically, an installed patch has made a set of
      file modifications to pre-installed software, and does not alter
      the version number or the descriptive metadata of an installed
      software component.  If a CoSWID tag is for a patch, the patch
      item MUST be set to "true".  If not provided the default value
      MUST be considered "false".

   o  supplemental (index 11): A boolean value that indicates if the tag
      is providing additional information to be associated with another
      referenced SWID or CoSWID tag.  Tags using this item help to
      ensure that primary and patch tags provided by a software provider



Birkholz, et al.        Expires November 13, 2019              [Page 11]

Internet-Draft                   COSWID                         May 2019


      are not modified by software management tools, while allowing
      these tools to provide their own software metadata for a software
      component.  If a CoSWID tag is a supplemental tag, the
      supplemental item MUST be set to "true".  If not provided the
      default value MUST be considered "false".

   o  swid-name (index 1): This textual item provides the software
      component name as it would typically be referenced.  For example,
      what would be seen in the add/remove software dialog in an
      operating system, or what is specified as the name of a packaged
      software component or a patch identifier name.

   o  software-version (index 13): A textual value representing the
      specific release or development version of the software component.

   o  version-scheme (index 14): An 8-bit integer or textual value
      representing the versioning scheme used for the software-version
      item.  If an integer value is used it MUST be a value from the
      SWID/CoSWID Version Schema Values Registry (see section
      Section 5.2 or a value in the private use range: 32768-65535.

   o  media (index 10): This text value is a hint to the tag consumer to
      understand what this tag applies to.  This item represents a query
      as defined by the W3C Media Queries Recommendation (see
      [W3C.REC-css3-mediaqueries-20120619]).

   o  software-meta (index 5): An open-ended map of key/value data
      pairs.  A number of predefined keys can be used within this item
      providing for common usage and semantics across the industry.  The
      data definition of this entry allows for any additional attribute
      to be included, though it is recommended that industry norms for
      new attributes are defined and followed to the degree possible.
      Described in Section 2.7.

   o  entity (index 2): Provides information about one or more
      organizations related to the CoSWID tag or the software component
      referenced by this CoSWID tag.  Described in Section 2.5.

   o  link (index 4): Provides a means to establish relationship arcs
      between the tag and another items.  A given link can be used to
      establish the relationship between tags or to reference another
      resource that is related to the CoSWID tag, e.g.  vulnerability
      database association, ROLIE feed [RFC8322], MUD resource
      [RFC8520], software download location, etc).  This is modeled
      after the HTML "link" element.  Described in Section 2.6.

   o  payload (index 6): This item represents the software artifacts
      that compose the target software.  For example, the files included



Birkholz, et al.        Expires November 13, 2019              [Page 12]

Internet-Draft                   COSWID                         May 2019


      with an installer for a corpus tag or installed on an endpoint
      when the software component is installed for a primary or patch
      tag.  Note that the payload can represent a superset of the
      software artifacts installed.  Based on user selections at install
      time, an installation might not include every artifact that could
      be created or executed on the endpoint when the software component
      is installed (i.e. if a particular optional sub-component is not
      installed, the files associated with that software component might
      be included in payload, but not installed on the endpoint).
      Described in Section 2.8.3.

   o  evidence (index 3): This item is used to provide results from a
      scan of a system where software that does not have a CoSWID tag is
      discovered.  In such a case, a CoSWID tag can be created by the
      discovery process when the endpoint is scanned.  This item
      represents evidence for why software is believed to be installed
      on the endpoint.  Described in Section 2.8.4.

   o  $$coswid-extension: This CDDL socket is used to add new
      information structures to the concise-swid-tag root map.  See
      Section 2.1.

2.3.  concise-swid-tag Co-constraints

   The following co-constraints apply to the information provided by in
   the concise-swid-tag group.

   o  Only one of the patch and supplemental items MUST be set to
      "true", or the patch and supplemental items MUST be set to "false"
      or be omitted.

   o  If the patch item is set to "true", the tag SHOULD contain at
      least one link item with the rel(ation) item value of "patches"
      and an href item specifying an association with the software that
      was patched.

   o  If the supplemental item is set to "true", the tag SHOULD contain
      at least one link item with the rel(ation) item value of
      "supplements" and an href item specifying an association with the
      software that is supplemented.

   o  If all of the corpus, patch, and supplemental items are "false",
      or if the corpus item is set to "true", then a software-version
      item MUST be included with a value set to the version of the
      software component.  This ensures that primary and corpus tags
      have an identifiable software version.





Birkholz, et al.        Expires November 13, 2019              [Page 13]

Internet-Draft                   COSWID                         May 2019


2.4.  The global-attributes Group

   The global-attributes group provides a list of items including an
   optional language definition to support the processing of text-string
   values and an unbounded set of any-attribute items allowing for
   additional items to be provided as a general point of extension in
   the model.

   The CDDL for the global-attributes follows:

   global-attributes = (
     ? lang,
     * any-attribute,
   )

   any-attribute = (
     label => text / int / [ 2* text ] / [ 2* int ]
   )

   label = text / int

   The following describes each child item of this group.

   o  lang (index 15): A textual language tag that conforms with IANA
      "Language Subtag Registry" [RFC5646].  The context of the
      specified language applies to all sibling and descendant textual
      values, unless a descendant object has defined a different
      language tag.  Thus, a new context is established when a
      descendant object redefines a new language tag.  All textual
      values within a given context MUST be considered expressed in the
      specified language.

   o  any-attribute: This sub-group provides a means to include
      arbitrary information via label ("key") value pairs.  Labels can
      be either a single integer or text string.  Values can be either a
      single integer or text string, or an array of integers or text
      strings.

2.5.  The entity-entry Group

   The CDDL for the entity-entry group follows:










Birkholz, et al.        Expires November 13, 2019              [Page 14]

Internet-Draft                   COSWID                         May 2019


   entity-entry = {
     global-attributes,
     entity-name => text,
     ? reg-id => any-uri,
     role => $role / [ 2* $role ],
     ? thumbprint => hash-entry,
     * $$entity-extension,
   }
   entity-name = 31
   reg-id = 32
   role = 33
   thumbprint = 34

   $role /= tag-creator
   $role /= software-creator
   $role /= aggregator
   $role /= distributor
   $role /= licensor
   $role /= uint / text
   tag-creator=1
   software-creator=2
   aggregator=3
   distributor=4
   licensor=5

   The following describes each child item of this group.

   o  global-attributes: The global-attributes group described in
      Section 2.4.

   o  entity-name (index 32): The text-string name of the organization
      claiming a particular role, specified by the role item, in the
      CoSWID tag.

   o  reg-id (index 32): The registration id value is intended to
      uniquely identify a naming authority in a given scope (e.g.
      global, organization, vendor, customer, administrative domain,
      etc.) for the referenced entity.  The value of an registration ID
      MUST be a RFC 3986 URI.  The scope SHOULD be the scope of an
      organization.  In a given scope, the registration id MUST be used
      consistently for CoSWID tag production.

   o  role (index 33): The relationship(s) between this organization and
      this tag or the referenced software component.  The role of an
      entity MAY include any role value, but the pre-defined roles
      include: "aggregator", "distributor", "licensor", "software-
      creator", and "tag-creator".  All pre-defined role index and text
      values are defined in the IANA "SWID/CoSWID Entity Role Values"



Birkholz, et al.        Expires November 13, 2019              [Page 15]

Internet-Draft                   COSWID                         May 2019


      registry Section 4.2.  Use of index values instead of text for
      these pre-defined roles allows a CoSWID to be more concise.

      An entity item MUST be provided with the role of "tag-creator" for
      every CoSWID tag.  This indicates the organization that created
      the CoSWID tag.

      An entity item SHOULD be provided with the role of "software-
      creator" for every CoSWID tag, if this information is known to the
      tag creator.  This indicates the organization that created the
      referenced software component.

   o  thumbprint (index 34): The value of the thumbprint item provides
      an integer-based hash algorithm identifier (hash-alg-id) and a
      byte string value (hash-value) that contains the corresponding
      hash value (i.e. the thumbprint) of the signing entity's public
      key certificate.  This provides an indicator of which entity
      signed the CoSWID tag, which will typically be the tag creator.
      If the hash-alg-id is not known, then the integer value "0" MUST
      be used.  This ensures parity between the SWID tag specification
      [SWID], which does not allow an algorithm to be identified for
      this field.  See Section 2.8.1 for more details on the use of the
      hash-entry data structure.

   o  $$entity-extension: This CDDL socket can be used to extend the
      entity-entry group model.  See Section 2.1.

2.6.  The link-entry Map

   The CDDL for the link-entry map follows:

   link-entry = {
     global-attributes,
     ? artifact => text,
     href => any-uri,
     ? media => text,
     ? ownership => $ownership,
     rel => $rel,
     ? media-type => text,
     ? use => $use,
     * $$link-extension,
   }
   media = 10
   artifact = 37
   href = 38
   ownership = 39
   rel = 40
   media-type = 41



Birkholz, et al.        Expires November 13, 2019              [Page 16]

Internet-Draft                   COSWID                         May 2019


   use = 42

   $ownership /= shared
   $ownership /= private
   $ownership /= abandon
   $ownership /= uint / text
   shared=1
   private=2
   abandon=3

   $rel /= ancestor
   $rel /= component
   $rel /= feature
   $rel /= installationmedia
   $rel /= packageinstaller
   $rel /= parent
   $rel /= patches
   $rel /= requires
   $rel /= see-also
   $rel /= supersedes
   $rel /= rel-supplemental
   $rel /= uint / text
   ancestor=1
   component=2
   feature=3
   installationmedia=4
   packageinstaller=5
   parent=6
   patches=7
   requires=8
   see-also=9
   supersedes=10
   rel-supplemental=11

   $use /= optional
   $use /= required
   $use /= recommended
   $use /= uint / text
   optional=1
   required=2
   recommended=3

   The following describes each member of this map.

   o  global-attributes: The global-attributes group described in
      Section 2.4.





Birkholz, et al.        Expires November 13, 2019              [Page 17]

Internet-Draft                   COSWID                         May 2019


   o  artifact (index 37): For installation media (rel="installation-
      media"), this item value indicates the path of the installer
      executable or script that can be run to launch the referenced
      installation.  Links with the same artifact name SHOULD be
      considered mirrors of each other, allowing the installation media
      to be acquired from any of the described sources.

   o  href (index 38): A URI for the item being referenced.  The "href"
      item's value can point to several different things, and can be any
      of the following:

      *  If no URI scheme is provided, then the URI is to be interpreted
         as being relative to the URI of the CoSWID tag.  For example,
         "./folder/supplemental.coswid".

      *  a physical resource location with any acceptable URI scheme
         (e.g., file:// http:// https:// ftp://)

      *  a URI with "coswid:" as the scheme, which refers to another
         CoSWID by tag-id.  This URI would need to be resolved in the
         context of the endpoint by software that can lookup other
         CoSWID tags.  For example, "coswid:2df9de35-0aff-
         4a86-ace6-f7dddd1ade4c" references the tag with the tag-id
         value "2df9de35-0aff-4a86-ace6-f7dddd1ade4c".

      *  a URI with "swidpath:" as the scheme, which refers to another
         CoSIWD via an XPATH query.  This URI would need to be resolved
         in the context of the system entity via software components
         that can lookup other CoSWID tags and select the appropriate
         tag based on an XPATH query [W3C.REC-xpath20-20101214].
         Examples include:

      *  swidpath://SoftwareIdentity[Entity/@regid='http://contoso.com']
         would retrieve all CoSWID tags that include an entity where the
         regid is "Contoso" or swidpath://SoftwareIdentity[Meta/@persist
         entId='b0c55172-38e9-4e36-be86-92206ad8eddb'] would match
         CoSWID tags with the persistent-id value
         "b0c55172-38e9-4e36-be86-92206ad8eddb".

   o  media (index 10): A hint to the consumer of the link to what the
      target item is applicable for.  This item represents a query as
      defined by the W3C Media Queries Recommendation (see
      [W3C.REC-css3-mediaqueries-20120619]).  See also media defined in
      Section 2.2.

   o  ownership (index 39): Determines the relative strength of
      ownership between the software component referenced by the COSWID




Birkholz, et al.        Expires November 13, 2019              [Page 18]

Internet-Draft                   COSWID                         May 2019


      tag and the software component referenced by the link.  Valid
      enumerations are: abandon, private, shared.

   The enumerated values have the following meanings:

   +-----------+-------------------------------------------------------+
   | ownership | semantics                                             |
   +-----------+-------------------------------------------------------+
   | abandon   | If the software component referenced by the CoSWID    |
   |           | tag is uninstalled, then the referenced software      |
   |           | SHOULD not be uninstalled                             |
   |           |                                                       |
   | private   | If the software component referenced by the CoSWID    |
   |           | tag is uninstalled, then the referenced software      |
   |           | SHOULD be uninstalled too.                            |
   |           |                                                       |
   | shared    | If the software component referenced by the CoSWID    |
   |           | tag is uninstalled, then the referenced software      |
   |           | SHOULD be uninstalled if no other components sharing  |
   |           | the software.                                         |
   +-----------+-------------------------------------------------------+

   o  rel (index 40): The relationship between this CoSWID and the
      target resource as defined by [RFC8288].  Relationships can be
      identified by referencing a "Relation Name" from the IANA "Link
      Relation Types" registry: https://www.iana.org/assignments/link-
      relations/link-relations.xhtml.

   o  media-type (index 41): The media type for the target resource.
      This provides the consumer with a hint of what type of resource to
      expect.  Media types are identified by referencing a "Name" from
      the IANA "Media Types" registry: http://www.iana.org/assignments/
      media-types/media-types.xhtml.

   o  use (index 42): Determines if the target software is a hard
      requirement or not to be installed before installing the tagged
      software component.  Valid enumerations are: required,
      recommended, optional, which are defined in Section 4.3.

   o  $$link-extension: This CDDL socket can be used to extend the link-
      entry map model.  See Section 2.1.

2.7.  The software-meta-entry Map

   The CDDL for the software-meta-entry map follows:






Birkholz, et al.        Expires November 13, 2019              [Page 19]

Internet-Draft                   COSWID                         May 2019


   software-meta-entry = {
     global-attributes,
     ? activation-status => text,
     ? channel-type => text,
     ? colloquial-version => text,
     ? description => text,
     ? edition => text,
     ? entitlement-data-required => bool,
     ? entitlement-key => text,
     ? generator => text,
     ? persistent-id => text,
     ? product => text,
     ? product-family => text,
     ? revision => text,
     ? summary => text,
     ? unspsc-code => text,
     ? unspsc-version => text,
     * $$meta-extension,
   }
   activation-status = 43
   channel-type = 44
   colloquial-version = 45
   description = 46
   edition = 47
   entitlement-data-required = 48
   entitlement-key = 49
   generator = 50
   persistent-id = 51
   product = 52
   product-family = 53
   revision = 54
   summary = 55
   unspsc-code = 56
   unspsc-version = 57

   The following describes each child item of this group.

   o  global-attributes: The global-attributes group described in
      Section 2.4.

   o  activation-status (index 43): A textual value that identifies the
      activation status of this software title (e.g.  Trial, Serialized,
      Licensed, Unlicensed, etc).  Typically, this is used in
      supplemental tags.

   o  channel-type (index 44): A textual value that provides information
      on which channel this particular software was targeted for (e.g.




Birkholz, et al.        Expires November 13, 2019              [Page 20]

Internet-Draft                   COSWID                         May 2019


      Volume, Retail, OEM, Academic, etc).  Typically used in
      supplemental tags.

   o  colloquial-version (index 45): A textual value for an informal or
      colloquial version of the product (i.e. 2013).  Note that this
      version can be the same through multiple releases of a software
      component, while the software-version specified in the concise-
      swid-tag group is much more specific and will change for each
      software release.  This representation of version is typically
      used to identify a group of specific software releases that are
      part of the same release/support infrastructure (i.e.  Fabrikam
      Office 2013).  This version is used for string comparisons only
      and is not compared to be an earlier or later release (that is
      done via the concise-swid-tag group's software-version item).

   o  description (index 46): A longer, detailed textual description of
      the software.  This description can be multiple sentences
      (differentiated from summary, which is a very short, one-sentence
      description).

   o  edition (index 47): A textual value indicating the variation of
      the product (e.g., Extended, Enterprise, Professional, Standard,
      etc).

   o  entitlement-data-required (index 48): A boolean indicator to
      determine if accompanying proof of entitlement is needed when a
      software license reconciliation is completed.

   o  entitlement-key (index 49): A vendor-specific textual key that can
      be used to reconcile the validity of an entitlement. (e.g., serial
      number, product or license key).

   o  generator (index 50): The name of the software tool that created
      the CoSWID tag.

   o  persistent-id (index 51): A GUID used to represent products
      installed where the products are related, but can be different
      versions.

   o  product (index 52): The base name of the product.

   o  product-family (index 53): A textual value indicating the overall
      product family this software belongs to.  Product family is not
      used to identify that a product is part of a suite, but is instead
      used when a set of products that are all related can be installed
      on multiple different endpoints.  For example, an enterprise
      backup system can consist of a backup services, multiple different
      backup services that support mail services, databases and ERP



Birkholz, et al.        Expires November 13, 2019              [Page 21]

Internet-Draft                   COSWID                         May 2019


      systems, as well as individual software components that backup
      client system entities.  In such an usage scenario, all software
      components that are part of the backup system would have the same
      product-family name so they can be grouped together in respect to
      reporting systems.

   o  revision (index 54): A textual value indicating the informal or
      colloquial representation of the sub-version of the given product
      (ie, SP1, R2, RC1, Beta 2, etc).  Note that the software-version
      specified in the concise-swid-tag group will provide very exact
      version details.  Conversely, the revision item is intended for
      use in environments where reporting on the informal or colloquial
      representation of the software is important.  For example, when an
      organization needs "ServicePack 1" or later of a specific product
      installed on all devices, they can use the revision data value to
      quickly identify any devices that do not meet this requirement.

   Depending on how a software organizations distributes revisions, this
   value could be specified in a primary (if distributed as an upgrade)
   or supplemental (if distributed as a patch) CoSWID tag.

   o  summary (index 55): A short (one-sentence) description of the
      software.

   o  unspsc-code (index 56): An 8 digit code that provides UNSPSC
      classification of the software component this SWID tag identifies.
      For more information see, http://www.unspsc.org/.

   o  unspsc-version (index 57): The version of the UNSPSC code used to
      define the UNSPSC code value.  For more information see,
      http://www.unspsc.org/.

   o  $$meta-extension: This CDDL socket can be used to extend the
      software-meta-entry group model.  See Section 2.1.

2.8.  The Resource Collection Definition

2.8.1.  The hash-entry Array

   CoSWID adds explicit support for the representation of hash entries
   using algorithms that are registered in the IANA "Named Information
   Hash Algorithm Registry" using the hash-entry member (label 58).

   hash-entry = [ hash-alg-id: int, hash-value: bytes, ]

   The number used as a value for hash-alg-id MUST refer an ID in the
   "Named Information Hash Algorithm Registry" (see
   https://www.iana.org/assignments/named-information/named-



Birkholz, et al.        Expires November 13, 2019              [Page 22]

Internet-Draft                   COSWID                         May 2019


   information.xhtml); other hash algorithms MUST NOT be used.  The
   hash-value MUST represent the raw hash value of the hashed resource
   generated using the hash algorithm indicated by the hash-alg-id.

2.8.2.  The resource-collection Group

   A list of items both used in evidence (created by a software
   discovery process) and payload (installed in an endpoint) content of
   a CoSWID tag document to structure and differentiate the content of
   specific CoSWID tag types.  Potential content includes directories,
   files, processes, or resources.

   The CDDL for the resource-collection group follows:

   resource-collection = (
     ? directory => directory-entry,
     ? file => file-entry,
     ? process => process-entry,
     ? resource => resource-entry,
   )

   filesystem-item = (
     global-attributes,
     ? key => bool,
     ? location => text,
     fs-name => text,
     ? root => text,
   )

   path-elements-entry = [ [ * file-entry ],
                           [ * directory-entry ],
                         ]

   file-entry = {
     filesystem-item,
     ? size => integer,
     ? file-version => text,
     ? hash => hash-entry,
     * $$file-extension
   }

   directory-entry = {
     filesystem-item,
     path-elements => path-elements-entry,
     * $$directory-extension
   }

   process-entry = {



Birkholz, et al.        Expires November 13, 2019              [Page 23]

Internet-Draft                   COSWID                         May 2019


     global-attributes,
     process-name => text,
     ? pid => integer,
     * $$process-extension
   }

   resource-entry = {
     global-attributes,
     type => text,
     * $$resource-extension
   }

   directory = 16
   file = 17
   process = 18
   resource = 19
   size = 20
   file-version = 21
   key = 22
   location = 23
   fs-name = 24
   root = 25
   path-elements = 26
   process-name = 27
   pid = 28
   type = 29

   The following describes each member of the groups and maps
   illustrated above.

   o  filesystem-item: A list of items both used in representing the
      nodes of a file-system hierarchy (i.e., directory items that allow
      one or more directories to be defined in the file structure), and
      file items that allow one or more files to be specified for a
      given location.

   o  global-attributes: The global-attributes group described in
      Section 2.4.

   o  directory (index 16): A directory item allows one or more
      directories to be defined in the file structure.

   o  file (index 17): A file item that allows one or more files to be
      specified for a given location.

   o  process (index 18): Provides process (software component in
      execution) information for data that will show up in a devices
      process list.



Birkholz, et al.        Expires November 13, 2019              [Page 24]

Internet-Draft                   COSWID                         May 2019


   o  resource (index 19): A set of items that can be used to provide
      arbitrary resource information about an application installed on
      in endpoint, or evidence collected from an endpoint.

   o  size (index 20): The size of the file in bytes.

   o  file-version (index 21): The version of the file.

   o  key (index 22): A boolean indicator for when files or directories
      are considered important or required for the use of the software
      component referenced by the CoSWID.  Typical key files or
      directories would be those which, if not available on an endpoint,
      would cause the software component not to execute or function
      properly.  Key files or directories will typically be used to
      validate that the software component referenced by the CoSWID tag
      is actually installed on a specific endpoint.

   o  location (index 23): The location where a file was found or can
      expected to be located.  This text-string is intended to include
      the filename itself.  This SHOULD be the relative path from the
      location represented by the root item or if the root item is
      omitted be relative to the location of the CoSWID tag.

   o  fs-name (index 24): The file name or directory name without any
      path characters.

   o  root (index 25): A system-specific root folder that the location
      item is an offset from.  If this is not specified the assumption
      is the root is the same folder as the location of the CoSWID tag.
      The text-string value represents a path expression relative to the
      CoSWID tag document location in the (composite) file-system
      hierarchy.

   o  path-elements (index 26): This group provides the ability to apply
      a directory structure to the path expressions for files defined in
      a payload or evidence items.

   o  process-name (index 27): The process name as it will be found in
      the endpoint's process table.

   o  pid (index 28): The process ID for the process in execution that
      can be included in the process item as part of an evidence tag.

   o  type (index 29): The type of resource represented via a text-
      string (typically, registry-key, port or root-uri).






Birkholz, et al.        Expires November 13, 2019              [Page 25]

Internet-Draft                   COSWID                         May 2019


   o  $$resource-collection-extension: This CDDL socket can be used to
      extend the resource-collection group model.  This can be used to
      add new specialized types of resources.  See Section 2.1.

   o  $$file-extension: This CDDL socket can be used to extend the file-
      entry group model.  See Section 2.1.

   o  $$directory-extension: This CDDL socket can be used to extend the
      directory-entry group model.  See Section 2.1.

   o  $$process-extension: This CDDL socket can be used to extend the
      process-entry group model.  See Section 2.1.

   o  $$resource-extension: This CDDL socket can be used to extend the
      group model.  See Section 2.1.

   o  $$-extension: This CDDL socket can be used to extend the resource-
      entry group model.  See Section 2.1.

2.8.3.  The payload-entry Group

   The CDDL for the payload-entry group follows:

   payload-entry = {
     global-attributes,
     resource-collection,
     * $$payload-extension
   }

   The following describes each child item of this group.

   o  global-attributes: The global-attributes group described in
      Section 2.4.

   o  resource-collection: The resource-collection group described in
      Section 2.8.2.

   o  $$payload-extension: This CDDL socket can be used to extend the
      payload-entry group model.  See Section 2.1.

2.8.4.  The evidence-entry Group

   The CDDL for the evidence-entry group follows:








Birkholz, et al.        Expires November 13, 2019              [Page 26]

Internet-Draft                   COSWID                         May 2019


   evidence-entry = {
     global-attributes,
     resource-collection,
     ? date => time,
     ? device-id => text,
     * $$evidence-extension
   }
   date = 35
   device-id = 36

   The following describes each child item of this group.

   o  global-attributes: The global-attributes group described in
      Section 2.4.

   o  resource-collection: The resource-collection group described in
      Section 2.8.2.

   o  date (index 35): The date and time evidence represented by an
      evidence item was gathered.

   o  device-id (index 36): A textual identifier for a device evidence
      was gathered from.

   o  $$evidence-extension: This CDDL socket can be used to extend the
      evidence-entry group model.  See Section 2.1.

2.9.  Full CDDL Definition

   In order to create a valid CoSWID document the structure of the
   corresponding CBOR message MUST adhere to the following CDDL data
   definition.

 concise-swid-tag = {
   global-attributes,
   tag-id => text,
   tag-version => integer,
   ? corpus => bool,
   ? patch => bool,
   ? supplemental => bool,
   swid-name => text,
   ? software-version => text,
   ? version-scheme => $version-scheme,
   ? media => text,
   ? software-meta =>  software-meta-entry / [ 2* software-meta-entry ],
   entity => entity-entry / [ 2* entity-entry ],
   ? link => link-entry / [ 2* link-entry ],
   ? (( payload => payload-entry ) // ( evidence => evidence-entry )),



Birkholz, et al.        Expires November 13, 2019              [Page 27]

Internet-Draft                   COSWID                         May 2019


   * $$coswid-extension
 }

 any-uri = text
 label = text / int

 $version-scheme /= multipartnumeric
 $version-scheme /= multipartnumeric-suffix
 $version-scheme /= alphanumeric
 $version-scheme /= decimal
 $version-scheme /= semver
 $version-scheme /= uint / text

 any-attribute = (
   label => text / int / [ 2* text ] / [ 2* int ]
 )

 global-attributes = (
   ? lang => text,
   * any-attribute,
 )

 hash-entry = [ hash-alg-id: int,
                hash-value: bytes,
              ]

 entity-entry = {
   global-attributes,
   entity-name => text,
   ? reg-id => any-uri,
   role => $role / [ 2* $role ],
   ? thumbprint => hash-entry,
   * $$entity-extension,
 }

 $role /= tag-creator
 $role /= software-creator
 $role /= aggregator
 $role /= distributor
 $role /= licensor
 $role /= uint / text

 link-entry = {
   global-attributes,
   ? artifact => text,
   href => any-uri,
   ? media => text,
   ? ownership => $ownership,



Birkholz, et al.        Expires November 13, 2019              [Page 28]

Internet-Draft                   COSWID                         May 2019


   rel => $rel,
   ? media-type => text,
   ? use => $use,
   * $$link-extension
 }

 $ownership /= shared
 $ownership /= private
 $ownership /= abandon
 $ownership /= uint / text

 $rel /= ancestor
 $rel /= component
 $rel /= feature
 $rel /= installationmedia
 $rel /= packageinstaller
 $rel /= parent
 $rel /= patches
 $rel /= requires
 $rel /= see-also
 $rel /= supersedes
 $rel /= rel-supplemental
 $rel /= uint / text

 $use /= optional
 $use /= required
 $use /= recommended
 $use /= uint / text

 software-meta-entry = {
   global-attributes,
   ? activation-status => text,
   ? channel-type => text,
   ? colloquial-version => text,
   ? description => text,
   ? edition => text,
   ? entitlement-data-required => bool,
   ? entitlement-key => text,
   ? generator => text,
   ? persistent-id => text,
   ? product => text,
   ? product-family => text,
   ? revision => text,
   ? summary => text,
   ? unspsc-code => text,
   ? unspsc-version => text,
   * $$meta-extension,
 }



Birkholz, et al.        Expires November 13, 2019              [Page 29]

Internet-Draft                   COSWID                         May 2019


 resource-collection = (
   ? directory => directory-entry,
   ? file => file-entry,
   ? process => process-entry,
   ? resource => resource-entry,
   * $$resource-collection-extension
 )

 file-entry = {
   filesystem-item,
   ? size => integer,
   ? file-version => text,
   ? hash => hash-entry,
   * $$file-extension
 }

 path-elements-entry = [ [ * file-entry ],
                         [ * directory-entry ],
                       ]

 directory-entry = {
   filesystem-item,
   path-elements => path-elements-entry,
   * $$directory-extension
 }

 process-entry = {
   global-attributes,
   process-name => text,
   ? pid => integer,
   * $$process-extension
 }

 resource-entry = {
   global-attributes,
   type => text,
   * $$resource-extension
 }

 filesystem-item = (
   global-attributes,
   ? key => bool,
   ? location => text,
   fs-name => text,
   ? root => text,
 )

 payload-entry = {



Birkholz, et al.        Expires November 13, 2019              [Page 30]

Internet-Draft                   COSWID                         May 2019


   global-attributes,
   resource-collection,
   * $$payload-extension
 }

 evidence-entry = {
   global-attributes,
   resource-collection,
   ? date => time,
   ? device-id => text,
   * $$evidence-extension
 }

 ; "global map member" integer indexes
 tag-id = 0
 swid-name = 1
 entity = 2
 evidence = 3
 link = 4
 software-meta = 5
 payload = 6
 hash = 7
 corpus = 8
 patch = 9
 media = 10
 supplemental = 11
 tag-version = 12
 software-version = 13
 version-scheme = 14
 lang = 15
 directory = 16
 file = 17
 process = 18
 resource = 19
 size = 20
 file-version = 21
 key = 22
 location = 23
 fs-name = 24
 root = 25
 path-elements = 26
 process-name = 27
 pid = 28
 type = 29
 entity-name = 31
 reg-id = 32
 role = 33
 thumbprint = 34



Birkholz, et al.        Expires November 13, 2019              [Page 31]

Internet-Draft                   COSWID                         May 2019


 date = 35
 device-id = 36
 artifact = 37
 href = 38
 ownership = 39
 rel = 40
 media-type = 41
 use = 42
 activation-status = 43
 channel-type = 44
 colloquial-version = 45
 description = 46
 edition = 47
 entitlement-data-required = 48
 entitlement-key = 49
 generator = 50
 persistent-id = 51
 product = 52
 product-family = 53
 revision = 54
 summary = 55
 unspsc-code = 56
 unspsc-version = 57

 ; "version-scheme" integer indexes
 multipartnumeric = 1
 multipartnumeric-suffix = 2
 alphanumeric = 3
 decimal = 4
 semver = 16384

 ; "role" integer indexes
 tag-creator=1
 software-creator=2
 aggregator=3
 distributor=4
 licensor=5

 ; ownership integer indexes
 shared=1
 private=2
 abandon=3

 ; "rel" integer indexes
 ancestor=1
 component=2
 feature=3
 installationmedia=4



Birkholz, et al.        Expires November 13, 2019              [Page 32]

Internet-Draft                   COSWID                         May 2019


 packageinstaller=5
 parent=6
 patches=7
 requires=8
 see-also=9
 supersedes=10
 rel-supplemental=11

 ; "use" integer indexes
 optional=1
 required=2
 recommended=3

3.  Determining the Type of CoSWID

   The operational model for SWID and CoSWID tags was introduced in
   Section 1.1, which described four different CoSWID tag types.  The
   following additional rules apply to the use of CoSWID tags to ensure
   that created tags properly identify the tag type.

   The first matching rule MUST determine the type of the CoSWID tag.

   1.  Primary Tag: A CoSWID tag MUST be considered a primary tag if the
       corpus, patch, and supplemental items are "false".

   2.  Supplemental Tag: A CoSWID tag MUST be considered a supplemental
       tag if the supplemental item is set to "true".

   3.  Corpus Tag: A CoSWID tag MUST be considered a corpus tag if the
       corpus item is "true".

   4.  Patch Tag: A CoSWID tag MUST be considered a patch tag if the
       patch item is "true".

4.  CoSWID Indexed Label Values

4.1.  Version Scheme

   The following table contains a set of values for use in the concise-
   swid-tag group's version-scheme item.  These values match the version
   schemes defined in the ISO/IEC 19770-2:2015 [SWID] specification.
   Index value indicates the value to use as the version-scheme item's
   value.  The Version Scheme Name provides human-readable text for the
   value.  The Definition describes the syntax of allowed values for
   each entry.






Birkholz, et al.        Expires November 13, 2019              [Page 33]

Internet-Draft                   COSWID                         May 2019


   +-------+-------------------------+---------------------------------+
   | Index | Version Scheme Name     | Definition                      |
   +-------+-------------------------+---------------------------------+
   | 1     | multipartnumeric        | Numbers separated by dots,      |
   |       |                         | where the numbers are           |
   |       |                         | interpreted as integers         |
   |       |                         | (e.g.,1.2.3, 1.4.5,             |
   |       |                         | 1.2.3.4.5.6.7)                  |
   |       |                         |                                 |
   | 2     | multipartnumeric+suffix | Numbers separated by dots,      |
   |       |                         | where the numbers are           |
   |       |                         | interpreted as integers with an |
   |       |                         | additional textual suffix       |
   |       |                         | (e.g., 1.2.3a)                  |
   |       |                         |                                 |
   | 3     | alphanumeric            | Strictly a string, sorting is   |
   |       |                         | done alphanumerically           |
   |       |                         |                                 |
   | 4     | decimal                 | A floating point number (e.g.,  |
   |       |                         | 1.25 is less than 1.3)          |
   |       |                         |                                 |
   | 16384 | semver                  | Follows the [SEMVER]            |
   |       |                         | specification                   |
   +-------+-------------------------+---------------------------------+

   The values above are registered in the IANA "SWID/CoSWID Version
   Schema Values" registry defined in section Section 5.2.  Additional
   entires will likely be registered over time in this registry.
   Additionally, the index values 32768 through 65535 have been reserved
   for private use.

4.2.  Entity Role Values

   The following table indicates the index value to use for the entity-
   entry group's role item (see Section 2.5).  These values match the
   entity roles defined in the ISO/IEC 19770-2:2015 [SWID]
   specification.  Index value indicates the value to use as the role
   item's value.  The Role Name provides human-readable text for the
   value.  The Definition describes the semantic meaning of each entry.












Birkholz, et al.        Expires November 13, 2019              [Page 34]

Internet-Draft                   COSWID                         May 2019


   +-------+-----------------+-----------------------------------------+
   | Index | Role Name       | Definition                              |
   +-------+-----------------+-----------------------------------------+
   | 1     | tagCreator      | The person or organization that created |
   |       |                 | the containing SWID or CoSWID tag       |
   |       |                 |                                         |
   | 2     | softwareCreator | From [SAM], "person or organization     |
   |       |                 | that creates a software product (3.46)  |
   |       |                 | or package"                             |
   |       |                 |                                         |
   | 3     | aggregator      | From {{SWID}, "An organization or       |
   |       |                 | system that encapsulates software from  |
   |       |                 | their own and/or other organizations    |
   |       |                 | into a different distribution process   |
   |       |                 | (as in the case of virtualization), or  |
   |       |                 | as a completed system to accomplish a   |
   |       |                 | specific task (as in the case of a      |
   |       |                 | value added reseller)."                 |
   |       |                 |                                         |
   | 4     | distributor     | From [SWID], "An entity that furthers   |
   |       |                 | the marketing, selling and/or           |
   |       |                 | distribution of software from the       |
   |       |                 | original place of manufacture to the    |
   |       |                 | ultimate user without modifying the     |
   |       |                 | software, its packaging or its          |
   |       |                 | labelling."                             |
   |       |                 |                                         |
   | 5     | licensor        | From [SAM] as "software licensor", a    |
   |       |                 | "person or organization who owns or     |
   |       |                 | holds the rights to issue a software    |
   |       |                 | license for a specific software         |
   |       |                 | package"                                |
   +-------+-----------------+-----------------------------------------+

   The values above are registered in the IANA "SWID/CoSWID Entity Role
   Values" registry defined in section Section 5.3.  Additional valid
   values will likely be registered over time.  Additionally, the index
   values 128 through 255 have been reserved for private use.

4.3.  Use Values

   The following table indicates the index value to use for the link-
   entry group's use item (see Section 2.6).  These values match the
   link use values defined in the ISO/IEC 19770-2:2015 [SWID]
   specification.  Index value indicates the value to use as the link-
   entry group use item's value.  The Use Type provides human-readable
   text for the value.  The Definition describes the semantic meaning of
   each entry.



Birkholz, et al.        Expires November 13, 2019              [Page 35]

Internet-Draft                   COSWID                         May 2019


   +-------+-------------+---------------------------------------------+
   | Index | Use Type    | Definition                                  |
   +-------+-------------+---------------------------------------------+
   | 1     | optional    | From [SWID], "Not absolutely required; the  |
   |       |             | [Link]'d software is installed only when    |
   |       |             | specified."                                 |
   |       |             |                                             |
   | 2     | required    | From [SWID], "The [Link]'d software is      |
   |       |             | absolutely required for an operation        |
   |       |             | software installation."                     |
   |       |             |                                             |
   | 3     | recommended | From [SWID], "Not absolutely required; the  |
   |       |             | [Link]'d software is installed unless       |
   |       |             | specified otherwise."                       |
   +-------+-------------+---------------------------------------------+

   The values above are registered in the IANA "SWID/CoSWID Link Use
   Values" registry defined in section Section 5.4.  Additional valid
   values will likely be registered over time.  Additionally, the index
   values 128 through 255 have been reserved for private use.

5.  IANA Considerations

   This document has a number of IANA considerations, as described in
   the following subsections.

5.1.  CoSWID Items Registry

   This document uses integer values as index values in CBOR maps.

   This document defines a new a new registry titled "CoSWID Items".
   Future registrations for this registry are to be made based on
   [RFC8126] as follows:

              +------------------+-------------------------+
              | Range            | Registration Procedures |
              +------------------+-------------------------+
              | 0-32767          | Standards Action        |
              |                  |                         |
              | 32768-4294967295 | Specification Required  |
              +------------------+-------------------------+

   All negative values are reserved for Private Use.

   Initial registrations for the "CoSWID Items" registry are provided
   below.  Assignments consist of an integer index value, the item name,
   and a reference to the defining specification.




Birkholz, et al.        Expires November 13, 2019              [Page 36]

Internet-Draft                   COSWID                         May 2019


       +---------------+---------------------------+---------------+
       | Index         | Item Name                 | Specification |
       +---------------+---------------------------+---------------+
       | 0             | tag-id                    | RFC-AAAA      |
       |               |                           |               |
       | 1             | swid-name                 | RFC-AAAA      |
       |               |                           |               |
       | 2             | entity                    | RFC-AAAA      |
       |               |                           |               |
       | 3             | evidence                  | RFC-AAAA      |
       |               |                           |               |
       | 4             | link                      | RFC-AAAA      |
       |               |                           |               |
       | 5             | software-meta             | RFC-AAAA      |
       |               |                           |               |
       | 6             | payload                   | RFC-AAAA      |
       |               |                           |               |
       | 7             | hash                      | RFC-AAAA      |
       |               |                           |               |
       | 8             | corpus                    | RFC-AAAA      |
       |               |                           |               |
       | 9             | patch                     | RFC-AAAA      |
       |               |                           |               |
       | 10            | media                     | RFC-AAAA      |
       |               |                           |               |
       | 11            | supplemental              | RFC-AAAA      |
       |               |                           |               |
       | 12            | tag-version               | RFC-AAAA      |
       |               |                           |               |
       | 13            | software-version          | RFC-AAAA      |
       |               |                           |               |
       | 14            | version-scheme            | RFC-AAAA      |
       |               |                           |               |
       | 15            | lang                      | RFC-AAAA      |
       |               |                           |               |
       | 16            | directory                 | RFC-AAAA      |
       |               |                           |               |
       | 17            | file                      | RFC-AAAA      |
       |               |                           |               |
       | 18            | process                   | RFC-AAAA      |
       |               |                           |               |
       | 19            | resource                  | RFC-AAAA      |
       |               |                           |               |
       | 20            | size                      | RFC-AAAA      |
       |               |                           |               |
       | 21            | file-version              | RFC-AAAA      |
       |               |                           |               |
       | 22            | key                       | RFC-AAAA      |



Birkholz, et al.        Expires November 13, 2019              [Page 37]

Internet-Draft                   COSWID                         May 2019


       |               |                           |               |
       | 23            | location                  | RFC-AAAA      |
       |               |                           |               |
       | 24            | fs-name                   | RFC-AAAA      |
       |               |                           |               |
       | 25            | root                      | RFC-AAAA      |
       |               |                           |               |
       | 26            | path-elements             | RFC-AAAA      |
       |               |                           |               |
       | 27            | process-name              | RFC-AAAA      |
       |               |                           |               |
       | 28            | pid                       | RFC-AAAA      |
       |               |                           |               |
       | 29            | type                      | RFC-AAAA      |
       |               |                           |               |
       | 31            | entity-name               | RFC-AAAA      |
       |               |                           |               |
       | 32            | reg-id                    | RFC-AAAA      |
       |               |                           |               |
       | 33            | role                      | RFC-AAAA      |
       |               |                           |               |
       | 34            | thumbprint                | RFC-AAAA      |
       |               |                           |               |
       | 35            | date                      | RFC-AAAA      |
       |               |                           |               |
       | 36            | device-id                 | RFC-AAAA      |
       |               |                           |               |
       | 37            | artifact                  | RFC-AAAA      |
       |               |                           |               |
       | 38            | href                      | RFC-AAAA      |
       |               |                           |               |
       | 39            | ownership                 | RFC-AAAA      |
       |               |                           |               |
       | 40            | rel                       | RFC-AAAA      |
       |               |                           |               |
       | 41            | media-type                | RFC-AAAA      |
       |               |                           |               |
       | 42            | use                       | RFC-AAAA      |
       |               |                           |               |
       | 43            | activation-status         | RFC-AAAA      |
       |               |                           |               |
       | 44            | channel-type              | RFC-AAAA      |
       |               |                           |               |
       | 45            | colloquial-version        | RFC-AAAA      |
       |               |                           |               |
       | 46            | description               | RFC-AAAA      |
       |               |                           |               |
       | 47            | edition                   | RFC-AAAA      |



Birkholz, et al.        Expires November 13, 2019              [Page 38]

Internet-Draft                   COSWID                         May 2019


       |               |                           |               |
       | 48            | entitlement-data-required | RFC-AAAA      |
       |               |                           |               |
       | 49            | entitlement-key           | RFC-AAAA      |
       |               |                           |               |
       | 50            | generator                 | RFC-AAAA      |
       |               |                           |               |
       | 51            | persistent-id             | RFC-AAAA      |
       |               |                           |               |
       | 52            | product                   | RFC-AAAA      |
       |               |                           |               |
       | 53            | product-family            | RFC-AAAA      |
       |               |                           |               |
       | 54            | revision                  | RFC-AAAA      |
       |               |                           |               |
       | 55            | summary                   | RFC-AAAA      |
       |               |                           |               |
       | 56            | unspsc-code               | RFC-AAAA      |
       |               |                           |               |
       | 57            | unspsc-version            | RFC-AAAA      |
       |               |                           |               |
       | 58-4294967295 | Unassigned                |               |
       +---------------+---------------------------+---------------+

5.2.  SWID/CoSWID Version Schema Values Registry

   This document uses unsigned 16-bit index values to version-scheme
   item values.  The initial set of version-scheme values are derived
   from the textual version scheme names defined in the ISO/IEC
   19770-2:2015 specification [SWID].

   This document defines a new a new registry titled "SWID/CoSWID
   Version Schema Values".  Future registrations for this registry are
   to be made based on [RFC8126] as follows:

   [TO BE REMOVED: This registration should take place at the following
   location: https://www.iana.org/assignments/swid]

                +-------------+--------------------------+
                | Range       | Registration Procedures  |
                +-------------+--------------------------+
                | 0-16383     | Standards Action         |
                |             |                          |
                | 16384-32767 | Specification Required   |
                |             |                          |
                | 32768-65535 | Reserved for Private Use |
                +-------------+--------------------------+




Birkholz, et al.        Expires November 13, 2019              [Page 39]

Internet-Draft                   COSWID                         May 2019


   Initial registrations for the "SWID/CoSWID Version Schema Values"
   registry are provided below.  Assignments consist of an integer index
   value, the version scheme name, and a reference to the defining
   specification.

       +-------------+--------------------------+-----------------+
       | Index       | Version Scheme Name      | Specification   |
       +-------------+--------------------------+-----------------+
       | 0           | Reserved                 |                 |
       |             |                          |                 |
       | 1           | multipartnumeric         | See Section 4.1 |
       |             |                          |                 |
       | 2           | multipartnumeric+suffix  | See Section 4.1 |
       |             |                          |                 |
       | 3           | alphanumeric             | See Section 4.1 |
       |             |                          |                 |
       | 4           | decimal                  | See Section 4.1 |
       |             |                          |                 |
       | 5-16383     | Unassigned               |                 |
       |             |                          |                 |
       | 16384       | semver                   | [SEMVER]        |
       |             |                          |                 |
       | 16385-32767 | Unassigned               |                 |
       |             |                          |                 |
       | 32768-65535 | Reserved for Private Use |                 |
       +-------------+--------------------------+-----------------+

5.3.  SWID/CoSWID Entity Role Values Registry

   This document uses unsigned 8-bit index values to represent entity-
   role values.  The initial set of Entity roles are derived from the
   textual role names defined in the ISO/IEC 19770-2:2015 specification
   [SWID].

   This document defines a new a new registry titled "SWID/CoSWID Entity
   Role Values".  Future registrations for this registry are to be made
   based on [RFC8126] as follows:

   [TO BE REMOVED: This registration should take place at the following
   location: https://www.iana.org/assignments/swid]











Birkholz, et al.        Expires November 13, 2019              [Page 40]

Internet-Draft                   COSWID                         May 2019


                  +---------+--------------------------+
                  | Range   | Registration Procedures  |
                  +---------+--------------------------+
                  | 0-31    | Standards Action         |
                  |         |                          |
                  | 32-127  | Specification Required   |
                  |         |                          |
                  | 128-255 | Reserved for Private Use |
                  +---------+--------------------------+

   Initial registrations for the "SWID/CoSWID Entity Role Values"
   registry are provided below.  Assignments consist of an integer index
   value, a role name, and a reference to the defining specification.

         +---------+--------------------------+-----------------+
         | Index   | Role Name                | Specification   |
         +---------+--------------------------+-----------------+
         | 0       | Reserved                 |                 |
         |         |                          |                 |
         | 1       | tagCreator               | See Section 4.2 |
         |         |                          |                 |
         | 2       | softwareCreator          | See Section 4.2 |
         |         |                          |                 |
         | 3       | aggregator               | See Section 4.2 |
         |         |                          |                 |
         | 4       | distributor              | See Section 4.2 |
         |         |                          |                 |
         | 5       | licensor                 | See Section 4.2 |
         |         |                          |                 |
         | 6-31    | Unassigned               |                 |
         |         |                          |                 |
         | 32-127  | Unassigned               |                 |
         |         |                          |                 |
         | 128-255 | Reserved for Private Use |                 |
         +---------+--------------------------+-----------------+

5.4.  SWID/CoSWID Link Use Values Registry

   This document uses unsigned 8-bit index values to represent link-use
   values.  The initial set of Link use values are derived from the
   textual names defined in the ISO/IEC 19770-2:2015 specification
   [SWID].

   This document defines a new a new registry titled "SWID/CoSWID Link
   Use Values".  Future registrations for this registry are to be made
   based on [RFC8126] as follows:





Birkholz, et al.        Expires November 13, 2019              [Page 41]

Internet-Draft                   COSWID                         May 2019


   [TO BE REMOVED: This registration should take place at the following
   location: https://www.iana.org/assignments/swid]

                  +---------+--------------------------+
                  | Range   | Registration Procedures  |
                  +---------+--------------------------+
                  | 0-31    | Standards Action         |
                  |         |                          |
                  | 32-127  | Specification Required   |
                  |         |                          |
                  | 128-255 | Reserved for Private Use |
                  +---------+--------------------------+

   Initial registrations for the "SWID/CoSWID Entity Role Values"
   registry are provided below.  Assignments consist of an integer index
   value, the link use name, and a reference to the defining
   specification.

         +---------+--------------------------+-----------------+
         | Index   | Link Use Name            | Specification   |
         +---------+--------------------------+-----------------+
         | 0       | Reserved                 |                 |
         |         |                          |                 |
         | 1       | optional                 | See Section 4.3 |
         |         |                          |                 |
         | 2       | required                 | See Section 4.3 |
         |         |                          |                 |
         | 3       | recommended              | See Section 4.3 |
         |         |                          |                 |
         | 4-31    | Unassigned               |                 |
         |         |                          |                 |
         | 32-127  | Unassigned               |                 |
         |         |                          |                 |
         | 128-255 | Reserved for Private Use |                 |
         +---------+--------------------------+-----------------+

5.5.  swid+cbor Media Type Registration

   IANA is requested add the following to the IANA "Media Types"
   registry.

   Type name: application

   Subtype name: swid+cbor

   Required parameters: none

   Optional parameters: none



Birkholz, et al.        Expires November 13, 2019              [Page 42]

Internet-Draft                   COSWID                         May 2019


   Encoding considerations: Must be encoded as using [RFC7049].  See
   RFC-AAAA for details.

   Security considerations: See Section 6 of RFC-AAAA.

   Interoperability considerations: Applications MAY ignore any key
   value pairs that they do not understand.  This allows backwards
   compatible extensions to this specification.

   Published specification: RFC-AAAA

   Applications that use this media type: The type is used by Software
   asset management systems, Vulnerability assessment systems, and in
   applications that use remote integrity verification.

   Fragment identifier considerations: Fragment identification for
   application/swid+cbor is supported by using fragment identifiers as
   specified by RFC-AAAA.  [Section to be defined]

   Additional information:

   Magic number(s): first five bytes in hex: da 53 57 49 44

   File extension(s): coswid

   Macintosh file type code(s): none

   Macintosh Universal Type Identifier code: org.ietf.coswid conforms to
   public.data

   Person & email address to contact for further information: Henk
   Birkholz <henk.birkholz@sit.fraunhofer.de>

   Intended usage: COMMON

   Restrictions on usage: None

   Author: Henk Birkholz <henk.birkholz@sit.fraunhofer.de>

   Change controller: IESG

5.6.  CoAP Content-Format Registration

   IANA is requested to assign a CoAP Content-Format ID for the CoSWID
   media type in the "CoAP Content-Formats" sub-registry, from the "IETF
   Review or IESG Approval" space (256..999), within the "CoRE
   Parameters" registry [RFC7252]:




Birkholz, et al.        Expires November 13, 2019              [Page 43]

Internet-Draft                   COSWID                         May 2019


          +-----------------------+----------+------+-----------+
          | Media type            | Encoding | ID   | Reference |
          +-----------------------+----------+------+-----------+
          | application/swid+cbor | -        | TBD1 | RFC-AAAA  |
          +-----------------------+----------+------+-----------+

                     Table 1: CoAP Content-Format IDs

5.7.  CBOR Tag Registration

   IANA is requested to allocate a tag in the "CBOR Tags" registry",
   preferably with the specific value requested:

   +------------+----------+-------------------------------------------+
   | Tag        | Data     | Semantics                                 |
   |            | Item     |                                           |
   +------------+----------+-------------------------------------------+
   | 1398229316 | map      | Concise Software Identifier (CoSWID)      |
   |            |          | [RFC-AAAA]                                |
   +------------+----------+-------------------------------------------+

6.  Security Considerations

   SWID and CoSWID tags contain public information about software
   components and, as such, do not need to be protected against
   disclosure on an endpoint.  Similarly, SWID tags are intended to be
   easily discoverable by applications and users on an endpoint in order
   to make it easy to identify and collect all of an endpoint's SWID
   tags.  As such, any security considerations regarding SWID tags focus
   on the application of SWID tags to address security challenges, and
   the possible disclosure of the results of those applications.

   A signed SWID tag whose signature has been validated can be relied
   upon to be unchanged since it was signed.  If the SWID tag was
   created by the software provider, is signed, and the software
   provider can be authenticated as the originator of the signature,
   then the tag can be considered authoritative.  In this way, an
   authoritative SWID tag contains information about a software product
   provided by the maintainer of the product, who is expected to be an
   expert in their own product.  Thus, authoritative SWID tags can be
   trusted to represent authoritative information about the software
   product.  Having an authoritative SWID tag can be useful when the
   information in the tag needs to be trusted, such as when the tag is
   being used to convey reference integrity measurements for software
   components.  By contrast, the data contained in unsigned tags cannot
   be trusted to be unmodified.





Birkholz, et al.        Expires November 13, 2019              [Page 44]

Internet-Draft                   COSWID                         May 2019


   SWID tags are designed to be easily added and removed from an
   endpoint along with the installation or removal of software
   components.  On endpoints where addition or removal of software
   components is tightly controlled, the addition or removal of SWID
   tags can be similarly controlled.  On more open systems, where many
   users can manage the software inventory, SWID tags can be easier to
   add or remove.  On such systems, it can be possible to add or remove
   SWID tags in a way that does not reflect the actual presence or
   absence of corresponding software components.  Similarly, not all
   software products automatically install SWID tags, so products can be
   present on an endpoint without providing a corresponding SWID tag.
   As such, any collection of SWID tags cannot automatically be assumed
   to represent either a complete or fully accurate representation of
   the software inventory of the endpoint.  However, especially on
   devices that more strictly control the ability to add or remove
   applications, SWID tags are an easy way to provide an preliminary
   understanding of that endpoint's software inventory.

   Any report of an endpoint's SWID tag collection provides information
   about the software inventory of that endpoint.  If such a report is
   exposed to an attacker, this can tell them which software products
   and versions thereof are present on the endpoint.  By examining this
   list, the attacker might learn of the presence of applications that
   are vulnerable to certain types of attacks.  As noted earlier, SWID
   tags are designed to be easily discoverable by an endpoint, but this
   does not present a significant risk since an attacker would already
   need to have access to the endpoint to view that information.
   However, when the endpoint transmits its software inventory to
   another party, or that inventory is stored on a server for later
   analysis, this can potentially expose this information to attackers
   who do not yet have access to the endpoint.  As such, it is important
   to protect the confidentiality of SWID tag information that has been
   collected from an endpoint, not because those tags individually
   contain sensitive information, but because the collection of SWID
   tags and their association with an endpoint reveals information about
   that endpoint's attack surface.

   Finally, both the ISO-19770-2:2015 XML schema definition and the
   Concise SWID data definition allow for the construction of "infinite"
   SWID tags or SWID tags that contain malicious content with the intent
   if creating non-deterministic states during validation or processing
   of SWID tags.  While software product vendors are unlikely to do
   this, SWID tags can be created by any party and the SWID tags
   collected from an endpoint could contain a mixture of vendor and non-
   vendor created tags.  For this reason, tools that consume SWID tags
   ought to treat the tag contents as potentially malicious and employ
   input sanitizing on the tags they ingest.




Birkholz, et al.        Expires November 13, 2019              [Page 45]

Internet-Draft                   COSWID                         May 2019


7.  Acknowledgments

   TBD

8.  Change Log

   Changes from version 03 to version 09:

   o  Reduced representation complexity of the media-entry type and
      removed the section describing the older data structure.

   o  Added more signature schemes from COSE

   o  Included a minimal required set of normative language

   o  Reordering of attribute name to integer label by priority
      according to semantics.

   o  Added an IANA registry for CoSWID items supporting future
      extension.

   o  Cleaned up IANA registrations, fixing some inconsistencies in the
      table labels.

   o  Added additional CDDL sockets for resource collection entries
      providing for additional extension points to address future SWID/
      CoSWID extensions.

   o  Updated section on extension points to address new CDDL sockets
      and to reference the new IANA registry for items.

   o  Removed unused references and added new references to address
      placeholder comments.

   o  Added table with semantics for the link ownership item.

   o  Clarified language, made term use more consistent, fixed
      references, and replacing lowercase RFC2119 keywords.

   o  Added enumeration table

   o  Moved CBOR specific indexes to the end of the CDDL data definition

   o  Updated Examples

   Changes from version 02 to version 03:





Birkholz, et al.        Expires November 13, 2019              [Page 46]

Internet-Draft                   COSWID                         May 2019


   o  Updated core CDDL including the CDDL design pattern according to
      RFC 8428.

   Changes from version 01 to version 02:

   o  Enforced a more strict separation between the core CoSWID
      definition and additional usage by moving content to corresponding
      appendices.

   o  Removed artifacts inherited from the reference schema provided by
      ISO (e.g.  NMTOKEN(S))

   o  Simplified the core data definition by removing group and type
      choices where possible

   o  Minor reordering of map members

   o  Added a first extension point to address requested flexibility for
      extensions beyond the any-element

   Changes from version 00 to version 01:

   o  Ambiguity between evidence and payload eliminated by introducing
      explicit members (while still

   o  allowing for "empty" SWID tags)

   o  Added a relatively restrictive COSE envelope using cose_sign1 to
      define signed CoSWID (single signer only, at the moment)

   o  Added a definition how to encode hashes that can be stored in the
      any-member using existing IANA tables to reference hash-algorithms

   Changes since adopted as a WG I-D -00:

   o  Removed redundant any-attributes originating from the ISO-
      19770-2:2015 XML schema definition

   o  Fixed broken multi-map members

   o  Introduced a more restrictive item (any-element-map) to represent
      custom maps, increased restriction on types for the any-attribute,
      accordingly

   o  Fixed X.1520 reference

   o  Minor type changes of some attributes (e.g.  NMTOKENS)




Birkholz, et al.        Expires November 13, 2019              [Page 47]

Internet-Draft                   COSWID                         May 2019


   o  Added semantic differentiation of various name types (e,g. fs-
      name)

   Changes from version 06 to version 07:

   o  Added type choices/enumerations based on textual definitions in
      19770-2:2015

   o  Added value registry request

   o  Added media type registration request

   o  Added content format registration request

   o  Added CBOR tag registration request

   o  Removed RIM appedix to be addressed in complementary draft

   o  Removed CWT appendix

   o  Flagged firmware resource colletion appendix for revision

   o  Made use of terminology more consistent

   o  Better defined use of extension points in the CDDL

   o  Added definitions for indexed values

   o  Added IANA registry for Link use indexed values

   Changes from version 05 to version 06:

   o  Improved quantities

   o  Included proposals for implicet enumerations that were NMTOKENS

   o  Added extension points

   o  Improved exemplary firmware-resource extension

   Changes from version 04 to version 05:

   o  Clarified language around SWID and CoSWID to make more consistent
      use of these terms.

   o  Added language describing CBOR optimizations for single vs. arrays
      in the model front matter.




Birkholz, et al.        Expires November 13, 2019              [Page 48]

Internet-Draft                   COSWID                         May 2019


   o  Fixed a number of grammatical, spelling, and wording issues.

   o  Documented extension points that use CDDL sockets.

   o  Converted IANA registration tables to markdown tables, reserving
      the 0 value for use when a value is not known.

   o  Updated a number of references to their current versions.

   Changes from version 03 to version 04:

   o  Re-index label values in the CDDL.

   o  Added a section describing the CoSWID model in detail.

   o  Created IANA registries for entity-role and version-scheme

   Changes from version 02 to version 03:

   o  Updated CDDL to allow for a choice between a payload or evidence

   o  Re-index label values in the CDDL.

   o  Added item definitions

   o  Updated references for COSE, CBOR Web Token, and CDDL.

   Changes from version 01 to version 02:

   o  Added extensions for Firmware and CoSWID use as Reference
      Integrity Measurements (CoSWID RIM)

   o  Changes meta handling in CDDL from use of an explicit use of items
      to a more flexible unconstrained collection of items.

   o  Added sections discussing use of COSE Signatures and CBOR Web
      Tokens

   Changes from version 00 to version 01:

   o  Added CWT usage for absolute SWID paths on a device

   o  Fixed cardinality of type-choices including arrays

   o  Included first iteration of firmware resource-collection






Birkholz, et al.        Expires November 13, 2019              [Page 49]

Internet-Draft                   COSWID                         May 2019


9.  Contributors

10.  References

10.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC5646]  Phillips, A., Ed. and M. Davis, Ed., "Tags for Identifying
              Languages", BCP 47, RFC 5646, DOI 10.17487/RFC5646,
              September 2009, <https://www.rfc-editor.org/info/rfc5646>.

   [RFC7049]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", RFC 7049, DOI 10.17487/RFC7049,
              October 2013, <https://www.rfc-editor.org/info/rfc7049>.

   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, "The Constrained
              Application Protocol (CoAP)", RFC 7252,
              DOI 10.17487/RFC7252, June 2014,
              <https://www.rfc-editor.org/info/rfc7252>.

   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, "Guidelines for
              Writing an IANA Considerations Section in RFCs", BCP 26,
              RFC 8126, DOI 10.17487/RFC8126, June 2017,
              <https://www.rfc-editor.org/info/rfc8126>.

   [RFC8152]  Schaad, J., "CBOR Object Signing and Encryption (COSE)",
              RFC 8152, DOI 10.17487/RFC8152, July 2017,
              <https://www.rfc-editor.org/info/rfc8152>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8288]  Nottingham, M., "Web Linking", RFC 8288,
              DOI 10.17487/RFC8288, October 2017,
              <https://www.rfc-editor.org/info/rfc8288>.

   [SAM]      "Information technology - Software asset management - Part
              5: Overview and vocabulary", ISO/IEC 19770-5:2015,
              November 2013.

   [SEMVER]   Preston-Werner, T., "Semantic Versioning 2.0.0", n.d.,
              <https://semver.org/spec/v2.0.0.html>.




Birkholz, et al.        Expires November 13, 2019              [Page 50]

Internet-Draft                   COSWID                         May 2019


   [SWID]     "Information technology - Software asset management - Part
              2: Software identification tag", ISO/IEC 19770-2:2015,
              October 2015.

   [SWID-GUIDANCE]
              Waltermire, D., Cheikes, B., Feldman, L., and G. Witte,
              "Guidelines for the Creation of Interoperable Software
              Identification (SWID) Tags", NISTIR 8060, April 2016,
              <https://doi.org/10.6028/NIST.IR.8060>.

   [W3C.REC-css3-mediaqueries-20120619]
              Rivoal, F., "Media Queries", World Wide Web Consortium
              Recommendation REC-css3-mediaqueries-20120619, June 2012,
              <http://www.w3.org/TR/2012/
              REC-css3-mediaqueries-20120619>.

   [W3C.REC-xpath20-20101214]
              Berglund, A., Boag, S., Chamberlin, D., Fernandez, M.,
              Kay, M., Robie, J., and J. Simeon, "XML Path Language
              (XPath) 2.0 (Second Edition)", World Wide Web Consortium
              Recommendation REC-xpath20-20101214, December 2010,
              <http://www.w3.org/TR/2010/REC-xpath20-20101214>.

   [X.1520]   "Recommendation ITU-T X.1520 (2014), Common
              vulnerabilities and exposures", April 2011.

10.2.  Informative References

   [CamelCase]
              "UpperCamelCase", August 2014,
              <http://wiki.c2.com/?CamelCase>.

   [I-D.birkholz-rats-tuda]
              Fuchs, A., Birkholz, H., McDonald, I., and C. Bormann,
              "Time-Based Uni-Directional Attestation", draft-birkholz-
              rats-tuda-00 (work in progress), March 2019.

   [I-D.ietf-cbor-cddl]
              Birkholz, H., Vigano, C., and C. Bormann, "Concise data
              definition language (CDDL): a notational convention to
              express CBOR and JSON data structures", draft-ietf-cbor-
              cddl-08 (work in progress), March 2019.

   [KebabCase]
              "KebabCase", December 2014,
              <http://wiki.c2.com/?KebabCase>.





Birkholz, et al.        Expires November 13, 2019              [Page 51]

Internet-Draft                   COSWID                         May 2019


   [RFC4122]  Leach, P., Mealling, M., and R. Salz, "A Universally
              Unique IDentifier (UUID) URN Namespace", RFC 4122,
              DOI 10.17487/RFC4122, July 2005,
              <https://www.rfc-editor.org/info/rfc4122>.

   [RFC8322]  Field, J., Banghart, S., and D. Waltermire, "Resource-
              Oriented Lightweight Information Exchange (ROLIE)",
              RFC 8322, DOI 10.17487/RFC8322, February 2018,
              <https://www.rfc-editor.org/info/rfc8322>.

   [RFC8520]  Lear, E., Droms, R., and D. Romascanu, "Manufacturer Usage
              Description Specification", RFC 8520,
              DOI 10.17487/RFC8520, March 2019,
              <https://www.rfc-editor.org/info/rfc8520>.

Appendix A.  Signed Concise SWID Tags using COSE

   SWID tags, as defined in the ISO-19770-2:2015 XML schema, can include
   cryptographic signatures to protect the integrity of the SWID tag.
   In general, tags are signed by the tag creator (typically, although
   not exclusively, the vendor of the software component that the SWID
   tag identifies).  Cryptographic signatures can make any modification
   of the tag detectable, which is especially important if the integrity
   of the tag is important, such as when the tag is providing reference
   integrity measurements for files.

   The ISO-19770-2:2015 XML schema uses XML DSIG to support
   cryptographic signatures.  CoSWID tags require a different signature
   scheme than this.  COSE (CBOR Object Signing and Encryption) provides
   the required mechanism [RFC8152].  Concise SWID can be wrapped in a
   COSE Single Signer Data Object (COSE_Sign1) that contains a single
   signature.  The following CDDL defines a more restrictive subset of
   header attributes allowed by COSE tailored to suit the requirements
   of Concise SWID tags.

















Birkholz, et al.        Expires November 13, 2019              [Page 52]

Internet-Draft                   COSWID                         May 2019


   <CODE BEGINS>
   signed-coswid = #6.18(COSE-Sign1-coswid)

   cose-label = int / tstr
   cose-values = any

   protected-signed-coswid-header = {
       1 => int,                      ; algorithm identifier
       3 => "application/swid+cbor",
       * cose-label => cose-values,
   }

   unprotected-signed-coswid-header = {
       4 => bstr,                     ; key identifier
       * cose-label => cose-values,
   }

   COSE-Sign1-coswid = [
       protected: bstr .cbor protected-signed-coswid-header,
       unprotected: unprotected-signed-coswid-header,
       payload: bstr .cbor concise-swid-tag,
       signature: bstr,
   ]
   <CODE ENDS>

   Optionally, the COSE_Sign structure that allows for more than one
   signature to be applied to a CoSWID tag MAY be used.  The
   corresponding usage scenarios are domain-specific and require well-
   defined application guidance.  Representation of the corresponding
   guidance is out-of-scope of this document.

   Additionally, the COSE Header counter signature MAY be used as an
   attribute in the unprotected header map of the COSE envelope of a
   CoSWID.  The application of counter signing enables second parties to
   provide a signature on a signature allowing for a proof that a
   signature existed at a given time (i.e., a timestamp).

Authors' Addresses

   Henk Birkholz
   Fraunhofer SIT
   Rheinstrasse 75
   Darmstadt  64295
   Germany

   Email: henk.birkholz@sit.fraunhofer.de





Birkholz, et al.        Expires November 13, 2019              [Page 53]

Internet-Draft                   COSWID                         May 2019


   Jessica Fitzgerald-McKay
   Department of Defense
   9800 Savage Road
   Ft. Meade, Maryland
   USA

   Email: jmfitz2@nsa.gov


   Charles Schmidt
   The MITRE Corporation
   202 Burlington Road
   Bedford, Maryland  01730
   USA

   Email: cmschmidt@mitre.org


   David Waltermire
   National Institute of Standards and Technology
   100 Bureau Drive
   Gaithersburg, Maryland  20877
   USA

   Email: david.waltermire@nist.gov


























Birkholz, et al.        Expires November 13, 2019              [Page 54]
