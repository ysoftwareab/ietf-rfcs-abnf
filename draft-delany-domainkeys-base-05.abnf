tag=value pairs separated by semicolons, e.g.:

g = granularity of the key. If present with a non-zero length
        value, this value MUST exactly match the local part of the
        sending address. This tag is optional.

        The intent of this tag is to constrain which sending address
        can legitimately use this selector. An email with a sending
        address that does not match the value of this tag constitutes
        a failed verification.

k = key type (rsa is the default). Signers and verifiers MUST
        support the 'rsa' key type. This tag is optional.

n = Notes that may be of interest to a human. No interpretation is
        made by any program. This tag is optional.

p = public key data, encoded as a Base64 string. An empty value
        means that this public key has been revoked. This tag MUST be
        present.

t = a set of flags that define boolean attributes. Valid
        attributes are:

y = testing mode. This domain is testing DomainKeys and
            unverified email MUST NOT be treated differently from
            verified email. Recipient systems MAY wish to track
            testing mode results to assist the sender.)

tag=value pairs separated by semicolons, e.g.:

    DomainKey-Signature: a=rsa-sha1; s=brisbane; d=example.net; q=dns; c=simple

a = The algorithm used to generate the signature. The default is
        "rsa-sha1", an RSA signed SHA1 digest. Signers and verifiers
        MUST support "rsa-sha1".

b = The signature data, encoded as a Base64 string. This tag MUST
        be present.

        Whitespace is ignored in this value and MUST be removed when
        re-assembling the original signature. This is another way of
        saying that the signing process can safely insert folding
        whitespace in this value to conform to line-length limits.

c = Canonicalization algorithm. The method by which the headers
        and content are prepared for presentation to the signing
        algorithm. This tag MUST be present. Verifiers MUST support
        "simple" and "nofws". Signers MUST support at least one of
        the verifier supported algorithms.

d = The domain name of the signing domain. This tag MUST be
        present. In conjunction with the selector tag, this domain
        forms the basis of the public key query. The value in this tag
        MUST match the domain of the sending email address or MUST be
        one of the parent domains of the sending email address. Domain
        name comparison is case insensitive.

h = A colon separated list of header field names that identify the
        headers presented to the signing algorithm. If present, the
        value MUST contain the complete list of headers in the order
        presented to the signing algorithm.

        If present, this tag MUST include the header that was used to
        identify the sending domain, ie, the "From:" or "Sender:"
        header, thus this tag can never contain an empty value.

        If this tag is not present, all headers subsequent to the
        signature header are included in the order found in the email.
        A verifier MUST support this tag. A signer MAY support this
        tag. If a signer generates this tag it MUST include all email
        headers in the original email as a verifier MAY remove or
        render suspicious, lines that are not included in the
        signature.

        In the presence of duplicate headers, a signer may include
        duplicate entries in the list of headers in this tag. If a
        header is included in this list, a verifier must include all
        occurrences of that header, subsequent to the
        "DomainKey-Signature:" header in the verification.

        If a header identified in this list is not found after the
        "DomainKey-Signature:" header in the verification process, a
        verifier may "look" for a matching header prior to the
        "DomainKey-Signature:" header, however signers should not
        rely on this as early experience suggests that most verifiers
        do not try to "look" back before the "DomainKey-Signature:"
        header.

        Whitespace is ignored in this value and header comparisons
        are case insensitive.

q = The query method used to retrieve the public key. This tag
        MUST be present. Currently the only valid value is "dns" which
        defines the DNS lookup algorithm described in this
        document. Verifiers and signers MUST support "dns".

s = The selector used to form the query for the public key. This
        tag MUST be present. In the DNS query type, this value is
        prepended to the "_domainkey."  namespace of the sending
        domain.

c=simple; q=dns;
b=dzdVyOfAKCdLXdJOc9G2q8LoXSlEniSbav+yuU4zGeeruD00lszZ
       VoG4ZHRNiYzR;

n = Notes that may be of interest to a human. No interpretation is
        made by any program.

o = Outbound Signing policy ("-" means that this domain signs all
        email, "~" is the default and means that this domain may sign
        some email with DomainKeys).

r = A reporting email address. If present, this defines the email
        address where invalid verification results are reported. This
        tag is primarily intended for early implementors - the content
        and frequency of the reports will be defined in a separate
        document.
t = a set of flags that define boolean attributes. Valid
        attributes are:

y = testing mode. This domain is testing DomainKeys and
            unverified email MUST NOT be treated differently from
            verified email. Recipient systems MAY wish to track
            testing mode results to assist the sender.)

c=simple; q=dns;
b=dzdVyOfAKCdLXdJOc9G2q8LoXSlEniSbav+yuU4zGeeruD00lszZ
        VoG4ZHRNiYzR;
from=joe@football.example.com; domainkeys=pass
c=simple; q=dns;
b=dzdVyOfAKCdLXdJOc9G2q8LoXSlEniSbav+yuU4zGeeruD00lszZ
       VoG4ZHRNiYzR;
d=largebank.example.com; c=simple; q=dns;
b=dzdVyOfAKCdLXdJOc9G2q8LoXSlEniSbav+yuU4zGeeruD00lszZ
        VoG4ZHRNiYzR;
