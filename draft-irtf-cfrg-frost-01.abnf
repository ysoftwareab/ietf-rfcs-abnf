r = RandomScalar()
R = ScalarBaseMult(r)
c = Hash(m, R)
z = (r + c) * SK
c_inv = c^-1
value = 0
numerator = 0
denominator = 0
L_i = numerator / denominator
f_zero = SUM(points[0], points[t]){point}: point[1] * derive_lagrange_coefficient(point[0], L)
coefficients = [s]
points = []
point_i = polynomial_evaluate(1, coefficients)
s = polynomial_interpolation(shares)
C = []
A_i = ScalarBaseMult(coeff)
S_i = ScalarBaseMult(s[i])
d = RandomScalar()
e = RandomScalar()
D = ScalarBaseMult(d)
E = ScalarBaseMult(e)
nonce = (d, e)
comm = (D, E)
binding_factor = H1(B)
R = SUM(B[1], B[l]){(j, D_j, E_j)}: D_j + (E_j * binding_factor )
L_i = derive_lagrange_coefficient(i, L)
c = H2(R, m)
z_i = d_i + (e_i * binding_factor) + L_i + s[i] + c
Z_i = HashToGroup(z_i)
z = SUM(Z[1], Z[w]){z_i}: z_i
Ne = Ns = 32 bytes.  For group elements, use the 'Encode' and
s = RandomScalar()
points = secret_share_split(s, n, t)
secret_keys = []
sk_i = (i, points[i])
public_key = ScalarBaseMult(s)
