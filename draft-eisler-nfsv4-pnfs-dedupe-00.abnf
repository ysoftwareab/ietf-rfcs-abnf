read_offset_A = read_offset;
read_length_A = logr_layout[i].lo_length;
read_offset_B = logr_layout[i+1].lo_offset;
read_length_B = read_length -
           read_length_A;

last_offset = read_offset + read_length - 1;

last_offset = ddl_lastoff;
read_offset = ddl_firstoff;
first_bit = trunc_read_off /
           ddli_slab_size; last_bit =
           (round_last_off + 1) / ddli_slab_size;

k = j / 32;
l = j mod 32;
bit = l << 1;

read_offset_A = read_offset;
read_length_A = trunc_read_off +
               ddli_slab_size - read_offset;

read_offset_A = ddl_firstoff + (j *
               ddli_slab_size);
read_length_A = ddli_slab_size;
next_layout_off = j * ddli_slab_size +
               trunc_read_off;

next_layout_length = ddli_slab_size;
next_layout_type = ddli_next_level;

bits_for_blknum = ddll_blockmap_partition
           [DDLL4_BITS_FOR_BLK_NUM_IDX];

mask_for_blknum = 0;
mask_for_blknum = (mask_for_blknum
             << 1) | 1;
bits_for_fh = ddll_blockmap_partition
           [DDLL4_BITS_FOR_FH_IDX];

mask_for_fh = 0;
mask_for_fh = (mask_for_blknum <<
             1) | 1;
mask_for_fh = mask_for_fh <<
           bits_for_blknum;

bits_for_dev = ddll_blockmap_partition
           [DDLL4_BITS_FOR_DEVID_IDX];

mask_for_dev = 0;
mask_for_dev = (mask_for_dev << 1)
             | 1;
mask_for_dev = mask_for_dev <<
           (bits_for_blknum + mask_for_fh);

first_block = trunc_read_off /
           ddll_block_size;
last_block = (round_last_off + 1) /
           ddll_block_size;
slopoff = read_offset - trunc_read_off;
sloplen = round_last_off - last_offset;

read_offset_A = trunc_read_off;

blockmap = ddll_blockmap[j] &
               DDLL4_BLKMAP_MASK_PARTITIONED;

source_length = ddll_block_size;
source_change = 0;
source_dev = 0;

source_offset = ddl_firstoff + j *
                 ddll_block_size;
source_offset = (blockmap &
                 mask_for_blknum) * ddll_block_size;
read_offset_B = read_offset;
read_offset_B = read_offset_A;
source_fh = target_fh;
source_change = ddl_change_attr[0];
fhidx = (blockmap & mask_for_fh) >>
                 bits_for_blknum;
source_fh = ddll_fhlist[fhidx];
source_change =
                   ddl_change_attr[fhidx];
read_source_fh = source_fh concatenated
               with ddll_fhsuffix;
source_ltype = 0;
source_mds = MDS of target_fh;
devidx = (blockmap & mask_for_dev) >>
                 bits_for_blknum;
source_dev = ddll_devlist[devidx];

source_ltype = ddldp_ltype;

source_ltype = 0;
