common-structure = 1* ( identifier dictionary )

dictionary = * ( identifier value )

value = identifier /
             number /
             ascii_string /
             unicode_string /
             blob /
             timestamp /
             common-structure

identifier = token  [ "/" token ]

number = ["-"] 1*15 DIGIT
             # XXX: Not sure how to do this in ABNF:
             # XXX: A single "." allowed between any two digits
             # The range is limited is to ensure it can be
             # correctly represented in IEEE754 64 bit
             # binary floating point format.

ascii_string = * %x20-7e
             # This is a "safe" string in the sense that it
             # contains no control characters or multi-byte
             # sequences.  If that is not fancy enough, use
             # unicode_string.

unicode_string = * unicode_codepoint
             # XXX: Is there a place to import this from ?
             # Unrestricted unicode, because there is no sane
             # way to restrict or otherwise make unicode "safe".

blob = * %0x00-ff
             # Intended for cryptographic data and as a general
             # escape mechanism for unmet requirements.

timestamp = POSIX time_t with optional millisecond resolution
             # XXX: Is there a place to import this from ?

h1_common-structure-header =
             ( field-name ":" OWS ">" h1_common_structure "<" )
h1_common_structure = h1_element  * ("," h1_element)

h1_element = identifier * (";" identifier ["=" h1_value])

h1_value = identifier /
             number /
             h1_ascii_string /
             h1_unicode_string /
             h1_blob /
             h1_timestamp /
             h1_common-structure

h1_ascii_string = DQUOTE *(
                       ( "\" DQUOTE ) /
                       ( "\" "\" ) /
                       0x20-21 /
                       0x23-5B /
                       0x5D-7E
                       ) DQUOTE
h1_unicode_string = DQUOTE *(
                         ( "\" DQUOTE )
                         ( "\" "\" ) /
                         ( "\" "u" 4*HEXDIG ) /
                         0x20-21 /
                         0x23-5B /
                         0x5D-7E /
                         UTF8-2 /
                         UTF8-3 /
                         UTF8-4
                         ) DQUOTE
h1_blob = "'" base64 "'"
h1_timestamp = number
h1_common_structure = ">" h1_common_structure "<"

qualified_token = token_or_asterix [ "/" token_or_asterix ]

token_or_asterix = token from {{RFC7230}}, but also allowing "*"

qualified_token = token_or_asterix [ "/" token_or_asterix ]

Common_Structure_Header = field-name ":" 1#named_dictionary

named_dictionary = qualified_token [ *(";" param) ]

param = token [ "=" value ]

value = we'll get back to this in a moment.

