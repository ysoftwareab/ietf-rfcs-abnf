lamba_bu = max (1/T_cell,1/T_lt) (1)
B_pb = T_flow ((s +H_ip )Pi + h lamba_bu )
Bwo = T_flow ((s +H_ip )Pi + H_bu lamba_bu )
r_pb = ----  = -----------------------------
       B_wo     (s+H_ip)Pi + H_bu lambda_bu

        h           1 - h/H_bu
     = ----  + --------------------------------       (2)
       H_bu     1 + lambda_bu (H_bu/Pi(s+H_ip))

   This last quantity decreases from 1 for lamba_bu = 0 to (h/H_bu) as
   lamba_bu grows to infinity.  The inflexion point (or cutoff value as
   this diagram is that of a lowpass filter plus some fixed gain) in the
   Bode diagram is for


            (s+H_ip)Pi
lamba_bu = -------------                              (3)
               H_bu

   and achieves a ratio
r_pb = 0.66     (4) We plot the Bode diagram in Figure 1.


lamba_bu = 1/T_lt .  T_lt is typically of the order of 60 s, which
lamba_bu = --------------------- = 33 BU per second                 (5)
                  H_bu

   For lambda_bu equal to 1 BU per second, we attain r_pb = 0.98, for
   lambda_bu equal to 10 BU per second (one BU every 100 ms), r_pb is
   about 80%.

   For these values of the parameter, a significant gain is achieved for
   more than one BU per second.  Note that the assumption is of one BU
   per flow to the CN. If a MN has several flows to the same CN, then,
   as far as average bandwidth is concerned, they can be aggregated into
   one single flow with larger packet size s.  The larger the packet
   size, the smaller the gain from piggybacking.


   3.3. Conclusion

   Piggybacking has an impact of 0.2% for one BU every 10s, 2% for a BU
   every second and for small packet sizes (20 bytes).  This means that:

    -  if VoIP in cellular network is the goal, there is no need for
       piggybacking, as handoff frequency is in the order of the minute.

    -  if bigger packets are transmitted, for video streaming, then
       there is no need for piggybacking either, as the packet size
       increase cancels the increase in the BU frequency induced by
       smaller cells

    -  if several streams are transmitted from the CN to the MN, then
       there is less need for piggybacking either.

    -  for packets that do not belong to a stream, there is no use for
       piggybacking.

    -  if LMM mechanism is used to reduce the frequency of the binding
       updates, then it makes piggybacking less valuable.  For instance,
       BETH with a 5 hops tunnel brings a potential gain of 5% down
       to 1%.  item if Header Compression is applied, it reduces H_ip
       adding to the value of piggybacking.  However, H_bu most probably
       can be compressed as well (at least static info is the same).
       A decrease of H_bu from 90 to 60 bytes decreases the maximal
       gain from 66% to 50% for infinite BU rate.  For a BU rate of one
       BU per second, if H_ip is compressed to 0 byte and H_bu to 60
       bytes, then the achieved ratio is r_pb = 1 - 0.03, or a 3% saved
       bandwidth, instead of 2%.  The gain is not significant.

   This is a very simple analysis.  However, I think it is telling not
   to go to war for piggybacking on the ground of bandwidth gain.


   4. Jitter Induced by Piggybacking

   4.1. Analysis

   A quantity of interest affected by piggybacked BUs is the jitter
   perceived by a stream of packets.  Keeping the notations from section
   II, and denoting by c the capacity per unit of time of the channel,
   and t_a the time to access and to release the channel.  In this
   situation, the added delay between two packets from the same flow
   caused by the BU is:
delta_wo = t_a + H_bu/c without piggybacked BUs
delta_pb = h/c with piggybacking   (6)

r_j = ------------- = --------------                       (7)
        delta_wo       c t_a + H_bu

   The minimum improvement, corresponding to the maximal value of r_j
   , is for a link with no delay to access or release the channel, or
   for links with little capacity.  The maximum value is ( h/H_bu ).
   For link with some delay to access or release the channel and large
   capacity, the gain of piggybacking the BUs increases with the link
   capacity c as r_j (c) decreases to 0.


   4.2. Numerical values

   We consider again the values h = 30, H_bu = 90.  In a slow link
   or when there is no delay to access the channel, namely t_a = 0,
   piggybacking the BUs reduces the jitter created by the BU by a
   factor 3.  Assume the capacity to be 100 kbits per second.  Not
   piggybacking the BUs adds a delay delta_wo - delta_pb of 4.8 ms.
   Assume the capacity to by 25 kbits per second, the extra delay of
   sending a separate BU is about 20 ms.  Assume now the time to release
   and access the channel t_a to be 20 ms.  Then for the capacity 100
   kbits/s, the extra delay delta_wo - delta_pb is 25 ms, for the
   capacity 25 kbits/s, the extra delay is 45 ms.  The relative gain r_j
   is 0.09 for c = 100 kbits :  the jitter is reduced by more than 90 %
   by piggybacking the BUs.  For the capacity 25 kbits/s, the gain is an
   80 % reduction of the jitter.

   As for instance [1] and other references point out, an access delay
   of 10 ms is a quite common occurrence.  For a 2Mb/s station with 25
   MNs, a 20 ms delay is attained for a total load of 1 Mb/s.  As the
   load increase to 1.5Mb/s, so does the delay to 40ms.  A value of t a
   equals to 40ms would mean the user would perceive this delay.  Note
   the system is loaded with 1.5Mb/s, but is far from being saturated.
   Note that the throughput degrades, and thus c diminishes.  However,
   the delay (H_bu - h)/c is never significant with respect to t_a .

   In figure 3, we present the additional delay induced by not
   piggybacking.  To obtain this delay, we extracted from [1] the time
   to access the channel and added the time to transmit the H_bu- h over
   the channel.  Figure 3 plots the additional delay against the load
   of the network.  The load in the network varies from 0% to 100%, at
   ms
