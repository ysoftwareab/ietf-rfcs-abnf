Network Working Group                                     Jeffrey Altman
Internet-Draft                                       Columbia University
draft-altman-telnet-enc-cast128-cfb-00.txt                 February 1999

             Telnet Encryption: CAST-128 64 bit Cipher Feedback

Status of this Memo

   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC2026.  Internet-Drafts are working
   documents of the Internet Engineering Task Force (IETF), its areas,
   and its working groups.  Note that other groups may also distribute
   working documents as Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119.

Abstract

   This document specifies how to use the CAST-128 encryption algorithm
   in cipher feedback mode with the telnet encryption option.  Two key
   sizes are defined: 40 bit and 128 bit.

1.  Command Names and Codes

   Encryption Type

      CAST5_40_CFB64   8
      CAST128_CFB64   10

   Suboption Commands

      CFB64_IV         1
      CFB64_IV_OK      2
      CFB64_IV_BAD     3

2.  Command Meanings

   IAC SB ENCRYPT IS CAST5_40_CFB64 CFB64_IV <initial vector> IAC SE
   IAC SB ENCRYPT IS CAST128_CFB64 CFB64_IV <initial vector> IAC SE

      The sender of this command generates a random 8 byte initial vec-
      tor, and sends it to the other side of the connection using the
      CFB64_IV command.  The initial vector is sent in clear text.  Only
      the side of the connection that is WILL ENCRYPT may send the
      CFB64_IV command.

   IAC SB ENCRYPT REPLY CAST5_40_CFB64 CFB64_IV_OK IAC SE
   IAC SB ENCRYPT REPLY CAST128_CFB64 CFB64_IV_OK IAC SE
   IAC SB ENCRYPT REPLY CAST5_40_CFB64 CFB64_IV_BAD IAC SE
   IAC SB ENCRYPT REPLY CAST128_CFB64 CFB64_IV_BAD IAC SE

      The sender of these commands either accepts or rejects the initial
      vector received in a CFB64_IV command.  Only the side of the con-
      nection that is DO ENCRYPT may send the CFB64_IV_OK and
      CFB64_IV_BAD commands.  The CFB64_IV_OK command MUST be sent for
      backwards compatibility with existing implementations; there real-
      ly isn't any reason why a sender would need to send the
      CFB64_IV_BAD command except in the case of a protocol violation
      where the IV sent was not of the correct length (i.e., 8 bytes).

3.  Implementation Rules

   Once a CFB64_IV_OK command has been received, the WILL ENCRYPT side
   of the connection should do keyid negotiation using the ENC_KEYID
   command.  Once the keyid negotiation has successfully identified a
   common keyid, then START and END commands may be sent by the side of
   the connection that is WILL ENCRYPT.  Data will be encrypted using
   the CAST128 64 bit Cipher Feedback algorithm.

   If encryption (decryption) is turned off and back on again, and the
   same keyid is used when re-starting the encryption (decryption), the
   intervening clear text must not change the state of the encryption
   (decryption) machine.

   If a START command is sent (received) with a different keyid, the en-
   cryption (decryption) machine must be re-initialized immediately fol-
   lowing the end of the START command with the new key and the initial
   vector sent (received) in the last CFB64_IV command.

   If a new CFB64_IV command is sent (received), and encryption (decryp-
   tion) is enabled, the encryption (decryption) machine must be re-ini
   tialized immediately following the end of the CFB64_IV command with
   the new initial vector, and the keyid sent (received) in the last
   START command.

   If encryption (decryption) is not enabled when a CFB64_IV command is
   sent (received), the encryption (decryption) machine must be re-ini
   tialized after the next START command, with the keyid sent (received)
   in that START command, and the initial vector sent (received) in this
   CFB64_IV command.

4.  Algorithm

   CAST 64 bit Cipher Feedback

       key --->+------+
            +->| CAST |--+
            |  +------+  |
            |            v
    INPUT --(---------->(+)+---> DATA
            |              |
        +--------------+


   Given:
   iV: Initial vector, 64 bits (8 bytes) long.
   Dn: the nth chunk of 64 bits (8 bytes) of data to encrypt (decrypt).
   On: the nth chunk of 64 bits (8 bytes) of encrypted (decrypted) output.

   V0 = CAST(iV, key)
   On = Dn ^ Vn
   V(n+1) = CAST(On, key)

5.  Integration with the AUTHENTICATION telnet option

   As noted in the telnet ENCRYPTION option specifications, a keyid val-
   ue of zero indicates the default encryption key, as might be derived
   from the telnet AUTHENTICATION option.  If the default encryption key
   negotiated as a result of the telnet AUTHENTICATION option contains
   less than 16 (5) bytes, then the CAST128_CFB64 (CAST5_40_CFB64)
   option must not be offered or used as a valid telnet encryption option.

   If there are less than 32 (10) bytes of key data, the first 16 (5)
   bytes of key data are used as keyid 0 in each direction.  If there
   are at least 32 (10) bytes of key data, the first 16 (5) bytes of
   key data are used to encrypt the data sent by the telnet client to
   the telnet server; the second 16 (5) bytes of key data are used to
   encrypt the data sent by the telnet server to the telnet client.

   Any extra key data is used as random data to be sent as an
   initialization vector.

6.  Security considerations

   Encryption using Cipher Feedback does not ensure data integrity; the
   active attacker has a limited ability to modify text, if he can
   predict the clear-text that was being transmitted.  The limitations
   faced by the attacker (that only 8 bytes can be modified at a time,
   and the following 8-byte block of data will be corrupted, thus making
   detection likely) are significant, but it is possible that an active
   attacker still might be able to exploit this weakness.

   The tradeoff here is that adding a message authentication code (MAC)
   will significantly increase the number of bytes needed to send a sin-
   gle character in the telnet protocol, which will impact performance
   on slow (i.e. dialup) links.

   Encryption modes using 40-bit keys are not to be considered secure.
   The 40 bit key mode CAST5_40_CFB64 is listed here simply to document
   the implementations that are already prevalent on the Internet but
   have never been documented.

7.  Acknowledgments

   This document was based on the "Telnet Encryption: DES 64 bit Cipher
   Feedback" draft originally written by Dave Borman of Cray Research
   with the assistance of the IETF Telnet Working Group.

8.  References

   [1] Adams, C., "The CAST-128 Encryption Algorithm", RFC 2144, May
       1997.

Author's Address

    Jeffrey Altman, ditor
    Columbia Univrsity
    612 West 115th Street Room 716
    New York NY 10025 USA

    Phone: +1 (212) 854-1344

    EMail: jaltman@columbia.edu

    Jeffrey Altman * Sr.Software Designer * Kermit-95 for Win32 and OS/2
                 The Kermit Project * Columbia University
              612 West 115th St #716 * New York, NY * 10025
  http://www.kermit-project.org/k95.html * kermit-support@kermit-project.org
