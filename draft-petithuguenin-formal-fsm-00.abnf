LWS   =  [*WSP CRLF] 1*WSP
name  =  ALPHA *ALPHA / DIGIT / "-" / "_"

constant =  name [LWS] "<-" [LWS] "constant"

state =  name [LWS] "<-" [LWS] "state" *(LWS name)
state =  name [LWS] "<-" [LWS] "state" *(LWS name)

action   =  name [LWS] "<-" [LWS] "action" *(LWS name)

num-value            =  "0" / (%x31-39 *DIGIT)

str-value            =  DQUOTE *( %x01-21 / %x32-5B / %x5D-7F /
                              ("\" DQUOTE) / ("\" "\") ) DQUOTE

bool-value           =  "true" / "false"

value                =  num-value / str-value / bool-value

pattern              =  "*" / name / value

positional-patterns  =  pattern *(LWS pattern)

named-pattern  =  name [[LWS] "=" [LWS] pattern]

named-patterns =  "{" [LWS] [named-pattern *([LWS] "," [LWS]
                        named-pattern)] [LWS] "}"
patterns =  "*" / ("(" [LWS] "*" [LWS] ")") / name / ("(" [LWS]
                  name [LWS] ")") / ("(" [LWS] name [LWS
                  positional-patterns] [LWS named-patterns] [LWS] ")")

ops-1 =  "||"

ops-2 =  "&&"

ops-3 =  "<" / "<=" / "==" / "!=" / ">" / ">="

ops-4 =  "+" / "-"

ops-5 =  "*" / "/" / "%"

ops   =  ops-1 / ops-2 / ops-3 / ops-4 / ops-5

un-ops   =  "!" / "-"

sub-expr =  ([un-ops [LWS]] name) / ([un-ops [LWS]] value) /
                  ( [un-ops [LWS]] ("(" [LWS] ops [LWS] ")") )

expr     =  sub-expr *([LWS] ops [LWS] sub-expr)

named-assignment  =  name [[LWS] "=" [LWS] expr]

named-assignment  =  ("{" [LWS] "}") / ("{" [LWS] named-assignment
                           *([LWS] "," [LWS] named-assignment) [LWS]
                           "}")

state-assignment  =  name named-assignment

action-assignment =  name *(LWS expr)

transition  =  patterns LWS patterns [[LWS] "|" [LWS] expr] [LWS]
                     "->" [[LWS] state-assignment] *(LWS
                     action-assignment)
element        =  constant / state / event / action / transition /
                        ("#" *VCHAR)

state-machine  =  [element] *(CRLF [element])

LWS                  =  [*WSP CRLF] 1*WSP

name                 =  ALPHA *ALPHA / DIGIT / "-" / "_"

constant             =  name [LWS] "<-" [LWS] "constant"

state                =  name [LWS] "<-" [LWS] "state" *(LWS name)

event                =  name [LWS] "<-" [LWS] "event" *(LWS name)

action               =  name [LWS] "<-" [LWS] "action" *(LWS name)

num-value            =  "0" / (%x31-39 *DIGIT)

str-value            =  DQUOTE *( %x01-21 / %x32-5B / %x5D-7F / ("\"
                           DQUOTE) / ("\" "\") ) DQUOTE

bool-value           =  "true" / "false"

value                =  num-value / str-value / bool-value

pattern              =  "*" / name / value

positional-patterns  =  pattern *(LWS pattern)

named-pattern        =  name [[LWS] "=" [LWS] pattern]

named-patterns       =  "{" [LWS] [named-pattern *([LWS] "," [LWS]
                           named-pattern)] [LWS] "}"

patterns             =  "*" / ("(" [LWS] "*" [LWS] ")") / name / ("("
                           [LWS] name [LWS] ")") / ("(" [LWS] name [LWS
                           positional-patterns] [LWS named-patterns]
                           [LWS] ")")

ops-1                =  "||"

ops-2                =  "&&"

ops-3                =  "<" / "<=" / "==" / "!=" / ">" / ">="

ops-4                =  "+" / "-"

ops-5                =  "*" / "/" / "%"

un-ops               =  "!" / "-"

sub-expr             =  ([un-ops [LWS]] name) / ([un-ops [LWS]]
                           value) / ( [un-ops [LWS]] ("(" [LWS] ops
                           [LWS] ")") )

expr                 =  sub-expr *([LWS] ops [LWS] sub-expr)

named-assignment     =  name [[LWS] "=" [LWS] expr]

named-assignment     =  ("{" [LWS] "}") / ("{" [LWS] named-assignment
                           *([LWS] "," [LWS] named-assignment) [LWS]
                           "}")

state-assignment     =  name named-assignment

action-assignment    =  name *(LWS expr)

transition           =  patterns LWS patterns [[LWS] "|" [LWS] expr]
                           [LWS] "->" [[LWS] state-assignment] *(LWS
                           action-assignment)

element              =  constant / state / event / action /
                           transition / ("#" *VCHAR)

state-machine        =  [element] *(CRLF [element])

