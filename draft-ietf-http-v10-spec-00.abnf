name = definition

       The name of a rule is simply the name itself (without any 
       enclosing "<" and ">") and is separated from its definition by 
       the equal character "=". Whitespace is only significant in that 
       indentation of continuation lines is used to indicate a rule 
       definition that spans more than one line. Certain basic rules 
       are in uppercase, such as SP, LWS, HTAB, CRLF, DIGIT, ALPHA, 
       etc. Angle brackets are used within definitions whenever their 
       presence will facilitate discerning the use of rule names.

OCTET          = <any 8-bit character>
CHAR           = <any US-ASCII character (octets 0 - 127)>
UPALPHA        = <any US-ASCII uppercase letter "A".."Z">
LOALPHA        = <any US-ASCII lowercase letter "a".."z">
ALPHA          = UPALPHA | LOALPHA
DIGIT          = <any US-ASCII digit "0".."9">
CTL            = <any US-ASCII control character
                        (octets 0 - 31) and DEL (127)>
CR             = <US-ASCII CR, carriage return (13)>
LF             = <US-ASCII LF, linefeed (10)>
SP             = <US-ASCII SP, space (32)>
HTAB           = <US-ASCII HT, horizontal-tab (9)>
CRLF           = CR LF

LWS            = [CRLF] 1*( SP | HTAB )

word           = token | quoted-string

token          = 1*<any CHAR except CTLs or tspecials>

tspecials      = "(" | ")" | "<" | ">" | "@"
                      | "," | ";" | ":" | "\" | <">
                      | "/" | "[" | "]" | "?" | "="
                      | SP | HTAB

quoted-string  = ( <"> *(qdtext) <"> )
                      | ( "<" *(qatext) ">" )

qdtext         = <any CHAR except <"> and CTLs,
                        but including LWS>

qatext         = <any CHAR except "<", ">", and CTLs,
                        but including LWS>

text           = <any OCTET except CTLs,
                        but including LWS>

HTTP-Version   = "HTTP" "/" 1*DIGIT "." 1*DIGIT

URI            = <As defined in RFC 1630>

HTTP-date      = rfc1123-date | rfc850-date | asctime-date

rfc1123-date   = wkday "," SP date1 SP time SP "GMT"
rfc850-date    = weekday "," SP date2 SP time SP "GMT"
asctime-date   = wkday SP date3 SP time SP 4DIGIT

date1          = 2DIGIT SP month SP 4DIGIT
                        ; day month year (e.g. 02 Jun 1982)
date2          = 2DIGIT "-" month "-" 2DIGIT
                        ; day-month-year (e.g. 02-Jun-82)
date3          = month SP ( 2DIGIT | ( SP 1DIGIT ))
                        ; month day (e.g. Jun  2)

time           = 2DIGIT ":" 2DIGIT ":" 2DIGIT
                        ; 00:00:00 - 23:59:59

wkday          = "Mon" | "Tue" | "Wed"
                      | "Thu" | "Fri" | "Sat" | "Sun"

weekday        = "Monday" | "Tuesday" | "Wednesday"
                      | "Thursday" | "Friday" | "Saturday" | "Sunday"

month          = "Jan" | "Feb" | "Mar" | "Apr"
                      | "May" | "Jun" | "Jul" | "Aug"
                      | "Sep" | "Oct" | "Nov" | "Dec"

delta-seconds  = 1*DIGIT

HTTP-message   = Simple-Request           ; HTTP/0.9 messages
                      | Simple-Response
                      | Full-Request             ; HTTP/1.0 messages
                      | Full-Response

Full-Request   = Request-Line              ; Section 5.1
                        *( General-Header         ; Section 4.3
                        |  Request-Header         ; Section 5.4
                        |  Entity-Header )        ; Section 7.1
                        CRLF
                        [ Entity-Body ]           ; Section 7.2

Full-Response  = Status-Line               ; Section 6.1
                        *( General-Header         ; Section 4.3
                        |  Response-Header        ; Section 6.3
                        |  Entity-Header )        ; Section 7.1
                        CRLF
                        [ Entity-Body ]           ; Section 7.2

Simple-Request  = "GET" SP Request-URI CRLF

Simple-Response = [ Entity-Body ]

HTTP-header    = field-name ":" [ field-value ] CRLF

field-name     = 1*<any CHAR, excluding CTLs, SP, and ":">
field-value    = *( field-content | comment | LWS )

field-content  = <the OCTETs making up the field-value
                        and consisting of either *text or combinations
                        of token, tspecials, and quoted-string>

comment        = "(" *( ctext | comment ) ")"
ctext          = <any text excluding "(" and ")">

General-Header = Date
                      | Forwarded
                      | Message-ID
                      | MIME-Version
                      | extension-header

Date           = "Date" ":" HTTP-date

Forwarded      = "Forwarded" ":" "by" URI [ "(" product ")" ]
                        [ "for" FQDN ]

FQDN           = <Fully-Qualified Domain Name>

Message-ID     = "Message-ID" ":" "<" addr-spec ">"
addr-spec      = <as defined in RFC 822 [8]>

MIME-Version   = "MIME-Version" ":" 1*DIGIT "." 1*DIGIT

Request        = Simple-Request | Full-Request

Simple-Request = "GET" SP Request-URI CRLF

Full-Request   = Request-Line              ; Section 5.1
                        *( General-Header         ; Section 4.3
                        |  Request-Header         ; Section 5.4
                        |  Entity-Header )        ; Section 7.1
                        CRLF
                        [ Entity-Body ]           ; Section 7.2

Request-Line   = Method SP Request-URI SP HTTP-Version CRLF

Method         = "GET" | "HEAD" | "PUT" | "POST"
                      | "DELETE" | "LINK" | "UNLINK"
                      | extension-method

extension-method = token

Request-URI    = URI

Request-Header = Accept
                      | Accept-Charset
                      | Accept-Encoding
                      | Accept-Language
                      | Authorization
                      | From
                      | If-Modified-Since
                      | Pragma
                      | Referer
                      | User-Agent
                      | extension-header

Accept         = "Accept" ":" 1#(
                             media-range
                             [ ";" "q" "=" ( "0" | "1" | float ) ]
                             [ ";" "mxb" "=" 1*DIGIT ] )

media-range    = ( "*/*"
                      |   ( type "/" "*" )
                      |   ( type "/" subtype )
                        ) *( ";" parameter )

float          = < ANSI-C floating point text representation,
                        where (0.0 < float < 1.0) >

Accept-Charset = "Accept-Charset" ":" 1#charset

Accept-Encoding = "Accept-Encoding" ":" 
                         1#( encoding-mechanism | transfer-encoding )

Accept-Language = "Accept-Language" ":" 1#language-tag

Authorization  = "Authorization" ":" credentials

From           = "From" ":" addr-spec

If-Modified-Since = "If-Modified-Since" ":" HTTP-date

Pragma           = "Pragma" ":" 1#pragma-directive

pragma-directive = "no-cache" | extension-pragma
extension-pragma = token

Referer        = "Referer" ":" URI

User-Agent      = "User-Agent" ":" 1*( product )

product         = token ["/" product-version]
product-version = token

Response       = Simple-Response | Full-Response

Simple-Response= [ Entity-Body ]

Full-Response  = Status-Line               ; Section 6.1
                        *( General-Header         ; Section 4.3
                        |  Response-Header        ; Section 6.3
                        |  Entity-Header )        ; Section 7.1
                        CRLF
                        [ Entity-Body ]           ; Section 7.2

Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF

Status-Code    = "200"   ; OK
                      | "201"   ; Created
                      | "202"   ; Accepted
                      | "203"   ; Provisional Information
                      | "204"   ; No Content
                      | "300"   ; Multiple Choices
                      | "301"   ; Moved Permanently
                      | "302"   ; Moved Temporarily
                      | "303"   ; Method
                      | "304"   ; Not Modified
                      | "400"   ; Bad Request
                      | "401"   ; Unauthorized
                      | "402"   ; Payment Required
                      | "403"   ; Forbidden
                      | "404"   ; Not Found
                      | "405"   ; Method Not Allowed
                      | "406"   ; None Acceptable
                      | "407"   ; Proxy Authentication Required
                      | "408"   ; Request Timeout
                      | "409"   ; Conflict
                      | "410"   ; Gone
                      | "500"   ; Internal Server Error
                      | "501"   ; Not Implemented
                      | "502"   ; Bad Gateway
                      | "503"   ; Service Unavailable
                      | "504"   ; Gateway Timeout
                      | extension-code

extension-code = 3DIGIT

Reason-Phrase  = token *( SP token )

Response-Header= Public
                      | Retry-After
                      | Server
                      | WWW-Authenticate
                      | extension-header

Public         = "Public" ":" 1#method

Retry-After    = "Retry-After" ":" ( HTTP-date | delta-seconds )

Server         = "Server" ":" 1*( product )

WWW-Authenticate        = "WWW-Authenticate" ":" challenge

Entity-Header  = Allow
                      | Content-Encoding
                      | Content-Language
                      | Content-Length
                      | Content-Transfer-Encoding
                      | Content-Type
                      | Derived-From
                      | Expires
                      | Last-Modified
                      | Link
                      | Location
                      | Title
                      | URI-header
                      | Version
                      | extension-header

extension-header = HTTP-header

Allow          = "Allow" ":" 1#method

Content-Encoding = "Content-Encoding" ":" encoding-mechanism

Content-Language = "Content-Language" ":" 1#language-tag

Content-Length = "Content-Length" ":" 1*DIGIT

Content-Type = "Content-Type" ":" media-type

Derived-From   = "Derived-From" ":" version-tag

Expires        = "Expires" ":" HTTP-date

Last-Modified  = "Last-Modified" ":" HTTP-date

Link           = "Link" ":" 1#("<" URI ">"
                        [ ";" "rel" "=" relation ]
                        [ ";" "rev" "=" relation ]
                        [ ";" "title" "=" quoted-string ] )

relation       = sgml-name

sgml-name      = ALPHA *( ALPHA | DIGIT | "." | "-" )

Location       = "Location" ":" URI

Title          = "Title" ":" *text

URI-header     = "URI" ":" 1#( "<" URI ">" [ ";" vary ] )

vary           = "vary" "=" <"> 1#vary-dimension <">
vary-dimension = "type" | "language" | "version" | "encoding"
                      | "charset" | "user-agent" | extension-vary

extension-vary = token

vary="type,language"

Version        = "Version" ":" version-tag

version-tag    = token | quoted-string

Entity-Body    = *OCTET

media-type     = type "/" subtype *( ";" parameter )
type           = token
subtype        = token

parameter      = attribute "=" value
attribute      = token
value          = token | quoted-string

language-tag  = primary-tag *( "-" subtag )

primary-tag   = 1*8ALPHA
subtag        = 1*8ALPHA

charset = "US-ASCII"
             | "ISO-8859-1" | "ISO-8859-2" | "ISO-8859-3"
             | "ISO-8859-4" | "ISO-8859-5" | "ISO-8859-6"
             | "ISO-8859-7" | "ISO-8859-8" | "ISO-8859-9"
             | "ISO-2022-JP" | "ISO-2022-JP-2" | "ISO-2022-KR"
             | "UNICODE-1-1" | "UNICODE-1-1-UTF-7" | "UNICODE-1-1-UTF-8"
             | token

encoding-mechanism      = "gzip" | "compress" | token

transfer-encoding       = "binary" | "8bit" | "7bit"
                               | "quoted-printable" | "base64"
                               | token

auth-scheme    = "Basic" | token

auth-param     = token "=" quoted-string

challenge      = auth-scheme 1*LWS realm [ "," 1#auth-param ]

realm          = "Realm" "=" quoted-string

credentials    = auth-scheme [ 1*LWS encoded-cookie ] #auth-param

encoded-cookie = 1*<any CHAR except CTLs or tspecials,
                           but including "=" and "/">

basic-challenge   = "Basic" SP realm

basic-credentials = "Basic" SP basic-cookie
basic-cookie      = <base64 encoding of userid-password>
userid-password   = [ token ] ":" *text

