Network Working Group                                       J. Cucchiara
Internet-Draft                                             Brix Networks
Expires February 2001                                       H. Sjostrand
                                                                Ericsson
                                                              J. Luciani
                                                 TollBridge Technologies
                                                             August 2000

                   Definitions of Managed Objects for
 the Multiprotocol Label Switching, Label Distribution Protocol (LDP)

                    <draft-ietf-mpls-ldp-mib-07.txt>

Status of this Memo

   This document is an Internet-Draft and is in full conformance with
   all provisions of Section 10 of RFC 2026.  Internet-Drafts are
   working documents of the Internet Engineering Task Force (IETF), its
   areas, and its working groups.  Note that other groups may also
   distribute working documents as Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress".

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html

   Distribution of this document is unlimited. Please send comments to
   the Multiprotocol Label Switching (mpls) Working Group, mpls@uu.net.

Copyright Notice

   Copyright (C) The Internet Society (1999, 2000).  All Rights
   Reserved.

Abstract

   This memo defines a portion of the Management Information Base (MIB)
   for use with network management protocols in the Internet community.
   In particular, it describes managed objects for the Multiprotocol
   Label Switching, Label Distribution Protocol (LDP).





Expires February 2001                                           [Page 1]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


   Table of Contents

   1 Introduction .................................................    3
   2 The SNMP Management Framework ................................    3
   3 Structure of the MIB .........................................    5
   3.1 Overview ...................................................    5
   3.2 Future Considerations ......................................    5
   3.3 Interface Indexing .........................................    5
   3.4 Differences from the LDP Specification .....................    6
   3.5 Discussion of MIB Groups ...................................    6
   3.6 The MPLS LDP General Group .................................    6
   3.6.1 The LDP Entity Table .....................................    7
   3.6.2 Changing Values After Session Establishment ..............    7
   3.6.3 mplsLdpEntityAdminStatus and mplsLdpEntityRowStatus ......    7
   3.6.4 The LDP Entity Generic Objects ...........................    8
   3.6.5 The LDP Entity ATM Objects ...............................    8
   3.6.6 The LDP Entity Frame Relay Objects .......................    8
   3.6.7 The LDP Entity Statistics Table ..........................    9
   3.6.8 The LDP Peer Table .......................................    9
   3.6.9 The LDP Hello Adjacencies Table ..........................    9
   3.6.10 The LDP Session Table ...................................    9
   3.6.11 The LDP ATM Session Table ...............................    9
   3.6.12 The LDP Frame Relay Session Table .......................   10
   3.6.13 The LDP Session Statistics Table ........................   10
   3.6.14 The LDP Session Peer Address Table ......................   10
   3.6.15 The Mapping Tables ......................................   10
   3.6.15.1 The LDP Session In Label Map Table ....................   11
   3.6.15.2 The LDP Session Out Label Map Table ...................   11
   3.6.15.3 The LDP Session XC Map Table ..........................   11
   3.6.16 The FEC Table ...........................................   12
   3.7 The LDP Notifications Group ................................   12
   3.7.1 LDP Notifications ........................................   12
   4 MPLS Label Distribution Protocol MIB Definitions .............   13
   5 Revision History .............................................   71
   5.1 Changes from <draft-ietf-mpls-ldp-mib-06.txt> ..............   71
   5.2 Changes from <draft-ietf-mpls-ldp-mib-05.txt> ..............   71
   5.3 Changes from <draft-ietf-mpls-ldp-mib-04.txt> ..............   73
   5.4 Changes from <draft-ietf-mpls-ldp-mib-03.txt> ..............   75
   5.5 Changes from <draft-ietf-mpls-ldp-mib-02.txt> ..............   76
   5.6 Changes from <draft-ietf-mpls-ldp-mib-01.txt> ..............   77
   5.7 Changes from <draft-ietf-mpls-ldp-mib-00.txt> ..............   78
   6 Acknowledgments ..............................................   79
   7 References ...................................................   80
   8 Security Considerations ......................................   82
   9 Authors' Addresses ...........................................   83
   10 Full Copyright Statement ....................................   84





Expires February 2001                                           [Page 2]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


1.  Introduction

   This memo defines a portion of the Management Information Base (MIB)
   for use with network management protocols in the Internet community.
   In particular, it describes managed objects for the Multiprotocol
   Label Switching, Label Distribution Protocol (LDP) [18].

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [21].


2.  The SNMP Management Framework

   The SNMP Management Framework presently consists of five major
   components:

    o   An overall architecture, described in RFC 2571 [RFC2571].

    o   Mechanisms for describing and naming objects and events for the
        purpose of management.  The first version of this Structure of
        Management Information (SMI) is called SMIv1 and described in
        STD 16, RFC 1155 [RFC1155], STD 16, RFC 1212 [RFC1212] and RFC
        1215 [RFC1215].  The second version, called SMIv2, is described
        in STD 58, RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and
        STD 58, RFC 2580 [RFC2580].

    o   Message protocols for transferring management information.  The
        first version of the SNMP message protocol is called SNMPv1 and
        described in STD 15, RFC 1157 [RFC1157].  A second version of
        the SNMP message protocol, which is not an Internet standards
        track protocol, is called SNMPv2c and described in RFC 1901
        [RFC1901] and RFC 1906 [RFC1906].  The third version of the
        message protocol is called SNMPv3 and described in RFC 1906
        [RFC1906], RFC 2572 [RFC2572] and RFC 2574 [RFC2574].

    o   Protocol operations for accessing management information.  The
        first set of protocol operations and associated PDU formats is
        described in STD 15, RFC 1157 [RFC1157].  A second set of
        protocol operations and associated PDU formats is described in
        RFC 1905 [RFC1905].

    o   A set of fundamental applications described in RFC 2573
        [RFC2573] and the view-based access control mechanism described
        in RFC 2575 [RFC2575].

   A more detailed introduction to the current SNMP Management Framework
   can be found in RFC 2570 [RFC2570].

   Managed objects are accessed via a virtual information store, termed


Expires February 2001                                           [Page 3]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


   the Management Information Base or MIB.  Objects in the MIB are
   defined using the mechanisms defined in the SMI.

   This memo specifies a MIB module that is compliant to the SMIv2.  A
   MIB conforming to the SMIv1 can be produced through the appropriate
   translations.  The resulting translated MIB must be semantically
   equivalent, except where objects or events are omitted because no
   translation is possible (use of Counter64).  Some machine readable
   information in SMIv2 will be converted into textual descriptions in
   SMIv1 during the translation process.  However, this loss of machine
   readable information is not considered to change the semantics of the
   MIB.







































Expires February 2001                                           [Page 4]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


3.  Structure of the MIB

   This memo defines a portion of the Management Information Base (MIB)
   for use with network management protocols in the Internet community.
   In particular, it describes managed objects for the Multiprotocol
   Label Switching, Label Distribution Protocol (LDP) as defined in
   [18].


3.1.  Overview

   The MIB provides objects to configure/set-up potential LDP sessions
   on a specific LSR.  A table is used to configure potential LDP
   Sessions, where each row in the table initiates an LDP Session.  This
   is the mplsLdpEntityTable.

   Another table, the mplsLdpPeerTable, is a read-only table which
   records information learned via discovery or from the session
   initialization message.  Each row in the Peer Table represents a peer
   which is known to a specific Entity.  This table carries information
   which is specific to the Entity-Peer interactions but is not
   appropriate for the mplsLdpSessionTable.

   A third table is used to show the actual sessions which have been, or
   are in the process of being established.  Each row represents a
   specific session between an Entity (on this LSR) and a peer.


3.2.  Future Considerations

   The LDP Specification [18] does not specify the use of VPNs or
   multicast for LDP, and thus, objects related to these areas have not
   been included in the MIB.

   This MIB does not include VP merge configuration either.  [30] does
   not yet describe this capability and so it has been excluded from the
   MIB.

   These areas need to be specified in the LDP Specification prior to
   being added in this or any other MIB.


3.3.  Interface Indexing

   Interface Indexes as specified in [27] are used in the MIB.  The
   descriptions of the ifIndexes denote which ifIndex is being used.
   NOTE:  the use of ifIndex is for actual existing connections.




Expires February 2001                                           [Page 5]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


3.4.  Differences from the LDP Specification

   Currently, there are 3 differences between this specification and the
   LDP Specification.  As previously mentioned, this MIB is almost
   entirely based on the LDP specification.  The differences are
   documented here in the hope to avoid any confusion between the two
   documents.

   The first difference is that the LDP Entity Table contains some
   DEFVAL clauses which are not specified explicitely in the LDP
   Specification.  These values, although not documented in the LDP
   Specification are widely used by existing LDP MIB implementations and
   thus, have been adopted within this MIB.  Please note, they can
   certainly be changed during row creation or a subsequent "set
   request".

   A second difference is the mplsLdpEntityConfGenericLabelRangeTable.
   This table, although provided as a way to reserve a range of generic
   labels, does not exist in the LDP Specification.  It was added to the
   MIB due to a request from the working group and because this table
   was considered useful for reserving a range of generic labels.

   The third difference is documented by the TEXTUAL-CONVENTION,
   MplsAtmVcIdentifier. This TC was added to restrict vci values to be
   greater than 31 as described in [30].


3.5.  Discussion of MIB Groups

   Currently, there are six groups: the MPLS LDP General Group, the MPLS
   LDP Generic Group, the MPLS LDP ATM Group, the MPLS LDP Frame Relay
   Group, the MPLS Mapping Group and the MPLS LDP Notifications Group.
   The MPLS LDP General Group and the MPLS LDP Notifications Group
   should always be supported.  The MPLS LDP Generic Group is specific
   to Generic labels and should be supported only if LDP is using
   Generic Labels.  The MPLS LDP ATM Group is specific to ATM and should
   be supported only if LDP is using ATM.  Likewise, the MPLS LDP Frame
   Relay group is specific to Frame Relay and should be supported only
   if LDP is using Frame Relay.  The MPLS LDP Mapping group should be
   supported if and only if the tables, mplsInSegmentTable,
   mplsOutSegmentTable and mplsXCTable from the LSR MIB are supported.


3.6.  The MPLS LDP General Group

   This group contains information about the specific LDP Entities which
   are associated with this agent. Each LSR must have one LDP Entity.




Expires February 2001                                           [Page 6]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


3.6.1.  The LDP Entity Table

   The LDP Entity Table provides a way to configure the LSR for using
   LDP.  There must be at least one LDP Entity for the LSR to support
   LDP.

   Each entry/row in this table represents a single LDP Entity.


3.6.2.  Changing Values After Session Establishment

   According to the LDP specification [18] there is no way to manually
   modify a session once session initialization starts.  One way to
   manually modify a session's parameters is by using SNMP to change the
   MIB objects related to that session.  Please note special care should
   be taken if MIB objects which are used in the MPLS LDP Session
   Initialization need to be modified.  If the modification of any of
   these MIB variables takes place anytime after the start of session
   intialization, then the entire session must be halted.  Any
   information learned by that session must be discarded. The objects
   should then be modified, and session initialization started.

   For example, assume that a user wishes to change the configuration of
   a Label Range which is used by a Session that has already been
   established.  The user should change the mplsLdpEntityAdminStatus to
   'disable(2)'.  Setting the mplsLdpEntityAdminStatus to 'disable(2)'
   will cause the session to be torn down and all LSPs established due
   to that session will also be torn down.  Also, all information
   related to that session should be removed from this MIB, and if the
   LSR MIB is implemented and the optional Mapping Table objects are
   implemented, then all information related to the LSPs in this session
   should be removed from these MIBs. [For more information please see
   the section on "The Mapping Tables".]   At this point, the user could
   modify the Label Range.  Lastly, the user should set the
   mplsLdpEntityAdminStatus to 'enable(1)'.  At this point session
   initialization should occur.  The LDP Entity goes through the Session
   Initialization in order to communicate the new Label Ranges to the
   Peer and establish new LSPs.


3.6.3.  mplsLdpEntityAdminStatus and mplsLdpEntityRowStatus

   The mplsLdpEntityAdminStatus object could be viewed as having a
   subset of the functionality of the mplsLdpEntityRowStatus object.
   For example, the AdminStatus object has states of enable(1) and
   disable(2).  Setting the mplsLdpEntityAdminStatus object to
   disable(2) and setting the mplsLdpEntityRowStatus object to
   notInService(2) are functionally the same.  The motivation behind
   keeping the mplsLdpEntityAdminStatus object is that there could be
   situations where a user would be given write permission to the


Expires February 2001                                           [Page 7]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


   mplsLdpEntityAdminStatus object, but would not be given write
   permission to the mplsLdpEntityRowStatus object.   Having write
   permission to the mplsLdpEntityRowStatus object would mean that a
   user would be able to destroy a row.  This was the motivation for
   keeping the two objects.


3.6.4.  The LDP Entity Generic Objects

   The mplsLdpEntityConfGenericLabelRangeTable is for configuring LDP
   for using Generic Labels ranges.  Although the LDP Specification does
   not provide a way for configuring Label Ranges for Generic Labels,
   the MIB does provide a way to reserve a range of generic labels
   because this may be useful for LDP implementations which deploy
   generic labels.  Also, this was requested by the MPLS working group.


3.6.5.  The LDP Entity ATM Objects

   There exists two tables to configure LDP for using ATM.  These tables
   are the mplsLdpEntityAtmParmsTable and the
   mplsLdpEntityConfAtmLabelRangeTable.

   The mplsLdpEntityAtmParmsTable provides a way to configure
   information which would be contained in the 'Optional Parameter'
   portion of an LDP PDU Initialization Message.

   The mplsLdpEntityConfAtmLabelRangeTable provides a way to configure
   information which would be contained in the 'ATM Label Range
   Components' portion of an LDP PDU Intialization Message.


3.6.6.  The LDP Entity Frame Relay Objects

   There exists two tables to configure LDP for using Frame Relay.
   These tables are the mplsLdpEntityFrameRelayParmsTable and the
   mplsLdpEntityConfFrLabelRangeTable.

   The mplsLdpEntityFrameRelayParmsTable provides a way to configure
   information which would be contained in the 'Optional Parameter'
   portion of an LDP PDU Initialization Message.

   The mplsLdpEntityConfFrLabelRangeTable provides a way to configure
   information which would be contained in the portion of an LDP PDU
   Intialization Message.






Expires February 2001                                           [Page 8]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


3.6.7.  The LDP Entity Statistics Table

   The LDP Entity Statistics Table is a read-only table which contains
   statistical information related to failed sessions.  Each row in this
   table is related to a single LDP entity and this table AUGMENTS an
   mplsLdpEntityEntry.  The purpose of this table is to count errors
   related to session failures.  This table could be used to give insite
   into how to reconfigure values so that a session could be
   successfully established.


3.6.8.  The LDP Peer Table

   The LDP Peer Table is a read-only table which contains information
   about LDP Peers known to LDP Entities. A row in this table is related
   to one or more rows in the Hello Adjacency Table and related to a
   single row in the Session Table. The values in the Peer table are
   relevant to a Peer and may or may not be the same values used in the
   session.  For example, the Peer's PathLimit information is learned
   from the session initialization phase.  The actual value for the
   PathVectorLimit is the Peer's value and may not be part of the
   session.  There could be a mismatch in this value between the Entity
   and the Peer. In the event of a mismatch, then the session will use
   the PathLimit set by the Entity (and not the Peer).

   A separate table allows for a  more comprehensive and coherent MIB
   model.


3.6.9.  The LDP Hello Adjacencies Table

   This is a table of all adjacencies between all LDP Entities and all
   LDP Peers.  A Session may have one or more adjacencies.


3.6.10.  The LDP Session Table

   The LDP Session Table is a read-only table.  Each entry in this table
   represents a single session between an LDP Entity and a Peer. The
   mplsLdpPeerEntry AUGMENTS entries in this table.


3.6.11.  The LDP ATM Session Table

   The MPLS LDP ATM Session Table is a read-only table which contains
   session information specific to ATM.





Expires February 2001                                           [Page 9]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


3.6.12.  The LDP Frame Relay Session Table

   The MPLS LDP Frame Relay Session Table is a read-only table which
   contains session information specific to Frame Relay.


3.6.13.  The LDP Session Statistics Table

   The MPLS LDP Session Stats Table is a read-only table which contains
   statistical information on sessions.


3.6.14.  The LDP Session Peer Address Table

   The MPLS LDP Session Peer Address Table is a table which 'extends'
   the mplsLdpSessionTable.  This table is a read-only table which
   stores Addresses learned after session initialization via "Address
   Message" advertisement.


3.6.15.  The Mapping Tables

   Originally, this MIB contained a LIB (Label Information Base) table.
   The LIB table's entry contained information relating an LDP Session
   to one of its LSPs.  In other words, the LDP Session that created the
   LSP and the LSP's (ingress label, egress label) pair along with other
   information. The request came from the authors' of the LSR MIB [23]
   to remove the LIB table from this MIB and to 'point' to the LSR MIB's
   mplsXCTable. [ASIDE:  the mplsXCTable contains LIB information for
   LSPs created statically or created by any MPLS protocols (LDP, CR-LDP
   and MPLS-RSVP) whereas the LIB table which was presented in this MIB
   was only concerned with LIB information for LSPs created by the LDP
   protocol.]  The removal of the LDP MIB's LIB table has necessitated a
   way to associate (or map) LDP sessions with LDP LSPs created as a
   result of those LDP sessions.

   As discussed in the section, "Changing Values after Session
   Establishment", if a session is torn down, then all the information
   related to this session, must be removed from the both LDP MIB and,
   if implemented, from the LSR MIB.

   The mplsInSegmentTable, the mplsOutSegmentTable and the mplsXCTable
   in the LSR MIB could contain rows which were created as a result of
   an LDP LSPs.  Three mapping tables were added to this MIB to map LDP
   Sessions to these tables in the LSR MIB.  These mapping tables are
   described in the next few subsections.  Please note, these mapping
   tables are optional and need only to be implemented if the
   mplsInSegmentTable, mplsOutSegmentTable and mplsXCTable are from the
   LSR MIB are implemented.


Expires February 2001                                          [Page 10]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


   In order to expedite development, these mapping objects have been
   made optional in the conformance section of the MIB.


3.6.15.1.  The LDP Session In Label Map Table

   The mplsLdpSessionInLabelMapTable provides a way to map LDP LSPs in
   the LSR MIB's mplsInSegmentTable to the LDP session which created
   them in this MIB's mplsLdpSessionTable.  When a session is torn down,
   the mapping table, mplsLdpSessionInLabelMapTable, provides a way to
   clean up the related LDP entries in the mplsInSegmentTable.  If an
   LSP is terminated on this LSR then there will be an entry in the
   mapping table which maps the session and the entry in the
   mplsInSegmentTable.  Please note, there may be entries which are also
   effected by session teardown in the mplsXCTable. (The relationship
   between the mplsInSegmentTable and the mplsXCTable and cleanup
   scenarios will need to be handled and are outside of the scope of
   this MIB.)

   This table is optional and only needs to be implemented if the LSR
   MIB's mplsInSegmentTable and/or mplsXCTable are implemented.


3.6.15.2.  The LDP Session Out Label Map Table

   The mplsLdpSessionOutLabelMapTable provides a way to map a LDP LSPs
   in the LSR MIB's mplsOutSegmentTable to the LDP session which created
   them in this MIB's mplsLdpSessionTable.  When a session is torn down,
   the mapping table, mplsLdpSessionOutLabelMapTable, provides a way to
   clean up the related LDP entries in the mplsOutSegmentTable.  If an
   LSP is created by this LSR then there will be an entry in this table
   which maps the session and the entry in the mplsOutSegmentTable.
   Please note, there may be entries which are also effected by session
   teardown in the mplsXCTable.  (The relationship between the
   mplsOutSegmentTable and the mplsXCTable and cleanup scenarios will
   need to be handled and are outside the scope of this MIB.)

   This table is optional and only needs to be implemented if the LSR
   MIB's mplsOutSegmentTable and/or mplsXCTable are implemented.


3.6.15.3.  The LDP Session XC Map Table

   The mplsLdpSessionXCMapTable provides a way to map LDP LSPs in the
   LSR MIB's mplsXCTable to the LDP session which created them in this
   MIB's mplsLdpSessionTable. When a session is torn down, the mapping
   table, mplsLdpSessionXCMapTable, provides a way to clean up the
   related LDP entries in the mplsXCTable.  If an LSP is cross-connected
   on this LSR, then there will be an entry in this mapping table which
   maps the session and the entry in the mplsXCTable. Please note, only


Expires February 2001                                          [Page 11]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


   true cross-connects are represented in the mplsLdpSessionXCMapTable.

   This table is optional and only needs to be implemented if the LSR
   MIB's mplsXCTable is implemented.


3.6.16.  The FEC Table

   The FEC Table is a table which contains FEC (Forwarding Equivalence
   Class) information.  Each entry/row represents a single FEC Element.
   There is also a FEC Mapping table which maps FECs associated with the
   Cross-connects.


3.7.  The LDP Notifications Group


3.7.1.  LDP Notifications

   Currently, there are several notifications which are specific for
   LDP.  These are described in this section.  Also, there are objects
   which enable/disable the sending of the traps.  If the value is
   enabled then the trap will be sent. Otherwise, if the value is
   disabled, then the trap will not be sent.

   The 'mplsLdpEntityFailedInitSessionTrapEnable' object is used to
   enable or disable the sending of the If enabled, then this trap is
   sent when the 'mplsLdpEntityFailedInitSessionThreshold' is exceeded.
   This notification should indicate to the operator that there may be a
   misconfigured mplsLdpEntityEntry because the session associated with
   this Entity is not being established, and the Entity keeps trying to
   establish the session.  A side effect of this situation is that a row
   in the mplsLdpSessionTable may not be reaching the operational state
   as indicated by the

   The object, 'mplsLdpEntityPVLimitMismatchTrapEnable' is used to
   enable or disable the sending of the trap is sent when there is a
   mismatch in the PathVectorLimits between the Entity and Peer during
   session initialization between that Entity and that Peer. In this
   situation a session could still be established between that entity
   and that peer.  The session uses the value which is configured as the
   Entity's Path Vector Limit.  However, a trap should be sent to
   indicate that a mismatch occurred.  For further details, please see
   Section 3.5.3 of the LDP Specification [18].

   The object, 'mplsLdpSessionUpDownTrapEnable' is used to enable or
   disable the sending of the 'mplsLdpSessionUp' and are sent when there
   is an appropriate change in the change state (Up to Down for the
   'mplsLdpSessionDown' trap, or Down to Up for the 'mplsLdpSessionUp'
   trap).


Expires February 2001                                          [Page 12]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


4.  MPLS Label Distribution Protocol MIB Definitions

     MPLS-LDP-MIB DEFINITIONS ::= BEGIN

     IMPORTS
         OBJECT-TYPE, MODULE-IDENTITY, NOTIFICATION-TYPE,
         experimental,
         Integer32, Counter32, Unsigned32
             FROM SNMPv2-SMI
         MODULE-COMPLIANCE, OBJECT-GROUP, NOTIFICATION-GROUP
             FROM SNMPv2-CONF

         TEXTUAL-CONVENTION, RowStatus, TimeInterval, TruthValue,
         TimeStamp, StorageType
             FROM SNMPv2-TC
         InterfaceIndex, InterfaceIndexOrZero
             FROM IF-MIB
         -- AtmInterfaceType, AtmVcIdentifier,
         AtmVpIdentifier
         FROM ATM-TC-MIB
         AddressFamilyNumbers
             FROM IANA-ADDRESS-FAMILY-NUMBERS-MIB
         ;


     mplsLdpMIB MODULE-IDENTITY
         LAST-UPDATED "200008291200Z"  -- August 29, 2000
         ORGANIZATION "Multiprotocol Label Switching (mpls)
                       Working Group"
         CONTACT-INFO
             "Joan Cucchiara (jcucchiara@brixnet.com)
              Brix Networks

              Hans Sjostrand (hans.sjostrand@ericsson.com)
              Ericsson

              James V. Luciani (jluciani@tollbridgetech.com)
              TollBridge Technologies"
         DESCRIPTION
             "This MIB contains managed object definitions for the
             'Multiprotocol Label Switching, Label Distribution
             Protocol, LDP' document."
         ::= { experimental XXXX} -- to be assigned

     --****************************************************************
     -- MPLS LDP Textual Conventions
     --****************************************************************
     --

     MplsLsrIdentifier ::= TEXTUAL-CONVENTION


Expires February 2001                                          [Page 13]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         STATUS      current
         DESCRIPTION
             "The Label Switch Router (LSR) identifier
             is the first 4 bytes or the Router Id component
             of the Label Distribution Protocol (LDP) identifier."
         SYNTAX      OCTET STRING (SIZE (4))


     --
     -- A similar TC is also used in RFC2677.txt.  NOTE:  since
     -- MPLS's goal is to be any layer2 over any layer3, this
     -- MIB makes every attempt to define a TC which would
     -- satisfy L2 and L3 address sizes for now and in
     -- the future.  0..64 seems was adopted from RFC2677.
     --

     MplsLdpGenAddr ::= TEXTUAL-CONVENTION
         STATUS      current
         DESCRIPTION
             "The value of an network layer or data link
             layer address."
         SYNTAX      OCTET STRING (SIZE (0..64))

     -- following Textual Convention was
     -- originally copied from the LSR MIB.

     -- It is reproduced here and modified slightly.

     MplsLabel ::= TEXTUAL-CONVENTION
         STATUS        current
         DESCRIPTION
             "This value represents an MPLS label.
             The label contents are specific to
             the label being represented.

             The label carried in an MPLS shim header
             (for LDP, the Generic Label) is a 20-bit number
             represented by 4 octets. Bits 0-19 contain a
             label or a reserved label value.  Bits 20-31 MUST
             be zero.

             The frame relay label can be either 10-bits or
             23-bits depending on the DLCI field size and the
             upper 22-bits or upper 9-bits must be zero, respectively.

             For an ATM label the lower 16-bits represents the VCI,
             the next 12-bits represents the VPI and the remaining
             bits MUST be zero."
        SYNTAX       Integer32(0..2147483647)


Expires February 2001                                          [Page 14]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


     MplsLdpIdentifier ::= TEXTUAL-CONVENTION
         STATUS      current
         DESCRIPTION
             "The LDP identifier is a six octet quantity
             which is used to identify an Label Switch Router
             (LSR) label space.

             The first four octets encode an IP address
             assigned to the LSR, and the last two octets
             identify a specific label space within the LSR."
         SYNTAX      OCTET STRING (SIZE (6))


     MplsLdpLabelTypes ::= TEXTUAL-CONVENTION
         STATUS      current
         DESCRIPTION
             "The Layer 2 label types which are defined for
             MPLS LDP are generic(1), atm(2), or frameRelay(3)."
         SYNTAX              INTEGER {
                                generic(1),
                                atm(2),
                                frameRelay(3)
                             }


     -- This was taken from rfc2514.txt (AtmVcIdentifier) and
     -- modified here for MPLS.
     -- This TC agrees with "MPLS using LDP and ATM VC Switching"
     -- document which specifies that VC values need
     -- to be greater than 31, or in other words, 0-31 are
     -- reserved for other uses by the ITU and ATM Forum.
     MplsAtmVcIdentifier ::= TEXTUAL-CONVENTION
             STATUS  current
             DESCRIPTION
                 "The VCI value for a VCL. The maximum VCI value
                 cannot exceed the value allowable by
                 atmInterfaceMaxVciBits defined in ATM-MIB.
                 The minimum value is 32, values 0 to 31 are
                 reserved for other uses by the ITU and ATM
                 Forum.  32 is typically the default value
                 for the Control VC."
             SYNTAX   Integer32 (32..65535)


     -- Top-level structure of the MIB (the following is proposed)
     mpls                 OBJECT IDENTIFIER ::= { mplsProtocols }

     mplsProtocols        OBJECT IDENTIFIER ::= { mplsLdpObjects }
     -- under mplsProtocols will be LDP, CR-LDP,
     --       and other MPLS "Protocols".


Expires February 2001                                          [Page 15]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


     mplsLdpObjects       OBJECT IDENTIFIER ::= { mplsLdpMIB 1 }
     mplsLdpNotifications OBJECT IDENTIFIER ::= { mplsLdpMIB 2 }
     mplsLdpConformance   OBJECT IDENTIFIER ::= { mplsLdpMIB 3 }

     --****************************************************************
     -- MPLS LDP Objects
     --****************************************************************

     mplsLdpLsrObjects    OBJECT IDENTIFIER ::= { mplsLdpObjects 1 }

     mplsLdpEntityObjects OBJECT IDENTIFIER ::= { mplsLdpObjects 2 }

     --
     -- The MPLS Label Distribution Protocol's
     -- Label Switch Router Objects
     --

     mplsLdpLsrId OBJECT-TYPE
         SYNTAX      MplsLsrIdentifier
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "The LSR's Identifier."
         ::= { mplsLdpLsrObjects 1 }

     mplsLdpLsrLoopDetectionCapable OBJECT-TYPE
         SYNTAX      INTEGER {
                                none(1),
                                other(2),
                                hopCount(3),
                                pathVector(4),
                                hopCountAndPathVector(5)
                             }
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "A indication of whether this LSR supports
             loop detection.

             none(1) -- Loop Detection is not supported
                        on this LSR.

             other(2) -- Loop Detection is supported but
                         by a method other than those
                         listed below.

             hopCount(3) -- Loop Detection is supported by
                            Hop Count only.

             pathVector(4) -- Loop Detection is supported by


Expires February 2001                                          [Page 16]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


                             Path Vector only.

             hopCountAndPathVector(5) -- Loop Detection is
                                  supported by both Hop Count
                                  And Path Vector.

             Since Loop Detection is determined during
             Session Initialization, an individual session
             may not be running with loop detection.  This
             object simply gives an indication of whether or not the
             LSR has the ability to support Loop Detection and
             which types."
         ::= { mplsLdpLsrObjects 2 }


     --
     -- The MPLS Label Distribution Protocol Entity Objects
     --


     mplsLdpEntityIndexNext  OBJECT-TYPE
         SYNTAX      Unsigned32 (0..4294967295)
         MAX-ACCESS     read-only
         STATUS         current
         DESCRIPTION
             "This object contains an appropriate value to
             be used for mplsLdpEntityIndex when creating
             entries in the mplsLdpEntityTable. The value
             0 indicates that no unassigned entries are
             available. To obtain the mplsLdpEntityIndex
             value for a new entry, the manager issues a
             management protocol retrieval operation to obtain
             the current value of this object.  After each
             retrieval, the agent should modify the value to
             the next unassigned index."
        ::= { mplsLdpEntityObjects 1 }


     mplsLdpEntityTable OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpEntityEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "This table contains information about the
             MPLS Label Distribution Protocol Entities which
             exist on this Label Switch Router (LSR)."
         ::= { mplsLdpEntityObjects 2 }

     mplsLdpEntityEntry OBJECT-TYPE
         SYNTAX      MplsLdpEntityEntry


Expires February 2001                                          [Page 17]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "An entry in this table represents an LDP entity.
             An entry can be created by a network administrator
             or by an SNMP agent as instructed by LDP."
         INDEX       {  mplsLdpEntityLdpId, mplsLdpEntityIndex  }
         ::= { mplsLdpEntityTable 1 }

     MplsLdpEntityEntry ::= SEQUENCE {
         mplsLdpEntityLdpId                       MplsLdpIdentifier,
         mplsLdpEntityIndex                       Unsigned32,
         mplsLdpEntityProtocolVersion             Integer32,
         mplsLdpEntityAdminStatus                 INTEGER,
         mplsLdpEntityOperStatus                  INTEGER,
         mplsLdpEntityWellKnownTcpDiscoveryPort      Unsigned32,
         mplsLdpEntityWellKnownUdpDiscoveryPort      Unsigned32,
         mplsLdpEntityMaxPduLength                Unsigned32,
         mplsLdpEntityKeepAliveHoldTimer          Integer32,
         mplsLdpEntityHelloHoldTimer              Integer32,
         mplsLdpEntityFailedInitSessionTrapEnable INTEGER,
         mplsLdpEntityFailedInitSessionThreshold  Integer32,
         mplsLdpEntityLabelDistributionMethod     INTEGER,
         mplsLdpEntityLabelRetentionMode          INTEGER,
         mplsLdpEntityPVLimitMismatchTrapEnable   INTEGER,
         mplsLdpEntityPathVectorLimit             Integer32,
         mplsLdpEntityHopCountLimit               Integer32,
         mplsLdpEntityTargetedPeer                TruthValue,
         mplsLdpEntityTargetedPeerAddrType        AddressFamilyNumbers,
         mplsLdpEntityTargetedPeerAddr            MplsLdpGenAddr,
         mplsLdpEntityOptionalParameters          MplsLdpLabelTypes,
         mplsLdpEntityDiscontinuityTime           TimeStamp,
         mplsLdpEntityStorageType                 StorageType,
         mplsLdpEntityRowStatus                   RowStatus
     }


     mplsLdpEntityLdpId OBJECT-TYPE
         SYNTAX      MplsLdpIdentifier
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "The LDP identifier.

             The first four octets encode an IP address
             assigned to the LSR, and the last two octets
             identify a specific label space within the
             LSR."
         REFERENCE
             "LDP Specification, Section on LDP Identifiers."


Expires February 2001                                          [Page 18]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         ::= { mplsLdpEntityEntry 1 }

     mplsLdpEntityIndex OBJECT-TYPE
         SYNTAX      Unsigned32 (1..4294967295)
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "This index is used as a secondary index to uniquely
             identify this row.  Before creating a row in this table,
             the 'mplsLdpEntityIndexNext' object should be retrieved.
             That value should be used for the value of this index
             when creating a row in this table.  (NOTE:  if a value
             of zero (0) is retrieved, that indicates that no rows
             can be created in this table at this time.

             A secondary index (this object) is needed by some
             but not all, LDP implementations.  For example
             in an LDP implementation which uses PPP, this
             index may be needed."
         ::= { mplsLdpEntityEntry 2 }

     mplsLdpEntityProtocolVersion OBJECT-TYPE
         SYNTAX      Integer32
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
            "The version number of the protocol.  The value of 0 on a
            read indicates that the version of the protocol is unknown.
            Otherwise, the value of this object represents the version
            of the LDP protocol."
         DEFVAL { 1 }
         ::= { mplsLdpEntityEntry 3 }

     mplsLdpEntityAdminStatus OBJECT-TYPE
         SYNTAX      INTEGER {
                       enable(1),
                       disable(2)
                     }
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "The administrative status of this LDP Entity.
             If this object is changed from 'enable' to 'disable'
             and this entity has already attempted to establish
             contact with a Peer (which implies that the
             'mplsLdpEntityRowStatus' object has been set to
             'active'), then all contact with that
             Peer is lost and all information from that Peer
             needs to be removed from the MIB.


Expires February 2001                                          [Page 19]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             At this point the user is able to change values
             which are related to this entity.

             When the admin status is set back to 'up', then
             this Entity will attempt to establish new sessions
             with the Peer."
         DEFVAL  { enable }
         ::= { mplsLdpEntityEntry 4 }


     mplsLdpEntityOperStatus OBJECT-TYPE
         SYNTAX      INTEGER {
                       unknown(0),
                       enabled(1),
                       disabled(2)
                     }
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "The operational status of this LDP Entity."
         ::= { mplsLdpEntityEntry 5 }

     mplsLdpEntityWellKnownTcpDiscoveryPort OBJECT-TYPE
         SYNTAX      Unsigned32
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "The well known TCP Discovery Port for
             LDP."
         DEFVAL { 646 }
         ::= { mplsLdpEntityEntry 6 }

     mplsLdpEntityWellKnownUdpDiscoveryPort OBJECT-TYPE
         SYNTAX      Unsigned32
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "The well known UDP Discovery Port for
             LDP."
         DEFVAL { 646 }
         ::= { mplsLdpEntityEntry 7 }

     mplsLdpEntityMaxPduLength OBJECT-TYPE
         SYNTAX      Unsigned32 (0..65535)
         UNITS       "octets"
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
            "The maximum PDU Length that is sent in
            the Common Session Parameters of an Initialization


Expires February 2001                                          [Page 20]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


            Message. A value of 255 or less specifies the
            default maximum length of 4096 octets."
         REFERENCE
            "See Section on the 'Initialization Message' in the
            LDP Specification."
         DEFVAL { 4096 }
         ::= { mplsLdpEntityEntry 8 }

     mplsLdpEntityKeepAliveHoldTimer OBJECT-TYPE
         SYNTAX      Integer32 (1..65535)
         UNITS       "seconds"
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "The two octet value which is the proposed keep alive hold
             timer for this LDP Entity."
         DEFVAL { 40 }
         ::= { mplsLdpEntityEntry 9 }

     mplsLdpEntityHelloHoldTimer OBJECT-TYPE
         SYNTAX      Integer32 (0..65535)
         UNITS       "seconds"
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "The two octet value which is the proposed Hello hold
             timer for this LDP Entity. A value of 0 means use the
             default, which is 15 seconds for Link Hellos and 45
             seconds for Targeted Hellos.  A value of 65535 means
             infinite."
         DEFVAL { 0 }
         ::= { mplsLdpEntityEntry 10 }

     mplsLdpEntityFailedInitSessionTrapEnable OBJECT-TYPE
         SYNTAX      INTEGER {
                                enabled(1),
                                disabled(2)
                             }
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "Indicates whether the
             'mplsLdpFailedInitSessionThresholdExceeded'
             trap should be generated.

             If the value of this object is 'enabled(1)'
             then the trap will generated.  If the value
             of this object is 'disabled(2)' then the
             trap will not be generated.  The DEFVAL
             is set to 'enabled(1)'."


Expires February 2001                                          [Page 21]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         DEFVAL { enabled }
         ::= { mplsLdpEntityEntry 11 }


     mplsLdpEntityFailedInitSessionThreshold OBJECT-TYPE
         SYNTAX      Integer32
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "When attempting to establish a session with a
             given Peer, the given LDP Entity should
             send out the SNMP notification,
             'mplsLdpFailedInitSessionThresholdExceeded', when
             the number of Session Initialization messages sent
             exceeds this threshold.

             A value of 0 (zero) for this object
             indicates that the threshold is infinity, and
             the SNMP notification will never be sent
             when the value of this object is 0 (zero)."
         DEFVAL { 8 }
         ::= { mplsLdpEntityEntry 12 }


     mplsLdpEntityLabelDistributionMethod OBJECT-TYPE
         SYNTAX      INTEGER {
                        downstreamOnDemand(1),
                        downstreamUnsolicited(2)
                     }
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "For any given LDP session, the method of
             label distribution must be specified."
         ::= { mplsLdpEntityEntry 13 }

     mplsLdpEntityLabelRetentionMode OBJECT-TYPE
         SYNTAX      INTEGER {
                         conservative(1),
                         liberal(2)
                     }
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "The LDP Entity can be configured to use either
             conservative or liberal label retention mode.

             If the value of this object is conservative(1)
             then advertized label mappings are retained
             only if they will be used to forward packets,


Expires February 2001                                          [Page 22]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             i.e. if label came from a valid next hop.

             If the value of this object is liberal(2)
             then all advertized label mappings are retained
             whether they are from a valid next hop or not."
         ::= { mplsLdpEntityEntry 14 }

     mplsLdpEntityPVLimitMismatchTrapEnable OBJECT-TYPE
         SYNTAX      INTEGER {
                                enabled(1),
                                disabled(2)
                             }
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "Indicates whether the 'mplsLdpPathVectorLimitMismatch'
             trap should be generated.

             If the value of this object is 'enabled(1)'
             then the trap will generated.  If the value
             of this object is 'disabled(2)' then the
             trap will not be generated.  The DEFVAL
             is set to 'enabled(1)'."
         DEFVAL { enabled }
         ::= { mplsLdpEntityEntry 15 }


     mplsLdpEntityPathVectorLimit OBJECT-TYPE
         SYNTAX      Integer32 (0..255)
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "If the value of this object is 0 (zero) then
             Loop Dection for Path Vectors is disabled.

             Otherwise, if this object has a value greater than
             zero, then Loop Dection for Path Vectors is enabled,
             and the Path Vector Limit is this value.
             Also, the value of the object,
             'mplsLdpLsrLoopDetectionCapable', must be set to
             either 'pathVector(4)' or 'hopCountAndPathVector(5)',
             if this object has a value greater than 0 (zero)."
         ::= { mplsLdpEntityEntry 16 }


     mplsLdpEntityHopCountLimit OBJECT-TYPE
         SYNTAX       Integer32 (0..255)
         MAX-ACCESS   read-create
         STATUS       current
         DESCRIPTION


Expires February 2001                                          [Page 23]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             "If the value of this object is 0 (zero),
             then Loop Detection using Hop Counters is
             disabled.

             If the value of this object is greater than
             0 (zero) then Loop Detection using Hop
             Counters is enabled, and this object
             specifies this Entity's maximum allowable
             value for the Hop Count.
             Also, the value of the object
             mplsLdpLsrLoopDetectionCapable must be set
             to either 'hopCount(3)' or
             'hopCountAndPathVector(5)' if this object
             has a value greater than 0 (zero)."
         ::= { mplsLdpEntityEntry 17 }

     mplsLdpEntityTargetedPeer OBJECT-TYPE
         SYNTAX      TruthValue
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "If this LDP entity uses targeted peer then set
             this to true."
         DEFVAL { false }
         ::= { mplsLdpEntityEntry 18 }

     mplsLdpEntityTargetedPeerAddrType OBJECT-TYPE
         SYNTAX      AddressFamilyNumbers
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "The type of the internetwork layer address used for
             the Extended Discovery. This object indicates how
             the value of mplsLdpEntityTargetedPeerAddr is to
             be interpreted."
         ::= { mplsLdpEntityEntry 19 }

     mplsLdpEntityTargetedPeerAddr OBJECT-TYPE
         SYNTAX      MplsLdpGenAddr
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "The value of the internetwork layer address used for
             the Extended Discovery."
        ::= { mplsLdpEntityEntry 20 }

     mplsLdpEntityOptionalParameters OBJECT-TYPE
         SYNTAX      MplsLdpLabelTypes
         MAX-ACCESS  read-create
         STATUS      current


Expires February 2001                                          [Page 24]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         DESCRIPTION
             "Specifies the optional parameters for the LDP
             Initialization Message.  If the value is generic(1)
             then no optional parameters will be sent in
             the LDP Initialization message associated with
             this Entity.

             If the value is atmParameters(2) then
             a row must be created in the mplsLdpEntityAtmParms
             Table, which corresponds to this entry.

             If the value is frameRelayParameters(3) then
             a row must be created in the mplsLdpEntityFrameRelayParms
             Table, which corresponds to this entry."
         ::= { mplsLdpEntityEntry 21 }


     mplsLdpEntityDiscontinuityTime OBJECT-TYPE
         SYNTAX      TimeStamp
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "The value of sysUpTime on the most recent occasion
             at which any one or more of this entity's counters
             suffered a discontinuity.  The relevant counters are the
             specific instances associated with this entity of
             any Counter32, or Counter64 object contained
             in the 'mplsLdpEntityStatsTable'.  If no such
             discontinuities have occurred since the last
             re-initialization of the local management
             subsytem, then this object contains a zero
             value."
         ::= { mplsLdpEntityEntry 22 }

     mplsLdpEntityStorageType  OBJECT-TYPE
         SYNTAX      StorageType
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
                  "The storage type for this entry."
         ::= { mplsLdpEntityEntry 23 }

     mplsLdpEntityRowStatus OBJECT-TYPE
         SYNTAX      RowStatus
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "An object that allows entries in this table to
              be created and deleted using the
              RowStatus convention.


Expires February 2001                                          [Page 25]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


              Once the 'mplsLdpEntityAdminStatus' object has
              the value of 'up' and this object has the value
              of 'active' then the Entity will atttempt to
              contact an LDP Peer.  If the value of this object
              is changed to 'notInService', then the Entity looses
              contact with the LDP Peer and all information related
              to that Peer must be removed from the MIB.  This has
              the same effect as changing 'mplsLdpEntityAdminStatus'
              from 'enable' to 'disable'.

              When this object is set to 'active' and the value of
              the 'mplsLdpEntityAdminStatus' is 'enable' then
              this Entity will attempt to contact the Peer and
              establish new sessions."
         ::= { mplsLdpEntityEntry 24 }

     --
     -- Ldp Entity Objects for Generic Labels
     --


     mplsLdpEntityGenericObjects  OBJECT IDENTIFIER ::=
                                   { mplsLdpEntityObjects 3 }


     --
     -- The MPLS LDP Entity Configurable Generic Label Range Table
     --

     mplsLdpEntityConfGenericLabelRangeTable OBJECT-TYPE
         SYNTAX SEQUENCE OF MplsLdpEntityConfGenericLabelRangeEntry
         MAX-ACCESS not-accessible
         STATUS current
         DESCRIPTION
             "The MPLS LDP Entity Configurable Generic Label Range Table.
             The purpose of this table is to provide a mechanism
             for specifying a contiguous range of generic labels,
             or a 'label range' for LDP Entities.

             LDP Entities which use Generic Labels must have at least one
             entry in this table."
         ::= { mplsLdpEntityGenericObjects 1 }

     mplsLdpEntityConfGenericLabelRangeEntry OBJECT-TYPE
         SYNTAX MplsLdpEntityConfGenericLabelRangeEntry
         MAX-ACCESS not-accessible
         STATUS current
         DESCRIPTION
             "A row in the LDP Entity Configurable Generic Label
             Range Table.  One entry in this table contains


Expires February 2001                                          [Page 26]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             information on a single range of labels
             represented by the configured Upper and Lower
             Bounds pairs.  NOTE: there is NO corresponding
             LDP message which relates to the information
             in this table, however, this table does provide
             a way for a user to 'reserve' a generic label
             range.

             NOTE:  The ranges for a specific LDP Entity
             are UNIQUE and non-overlapping.

             A row will not be created unless a unique and
             non-overlapping range is specified.  Thus, row
             creation implies a one-shot row creation of
             LDP EntityID and LowerBound and
             UpperBound."
         INDEX       {  mplsLdpEntityLdpId,
                        mplsLdpEntityIndex,
                        mplsLdpEntityConfGenericLabelRangeMinimum,
                        mplsLdpEntityConfGenericLabelRangeMaximum
                     }
         ::= { mplsLdpEntityConfGenericLabelRangeTable 1 }

     MplsLdpEntityConfGenericLabelRangeEntry ::= SEQUENCE {
         mplsLdpEntityConfGenericLabelRangeMinimum     Unsigned32,
         mplsLdpEntityConfGenericLabelRangeMaximum     Unsigned32,
         mplsLdpEntityConfGenericIfIndexOrZero         InterfaceIndexOrZero,
         mplsLdpEntityConfGenericLabelRangeStorageType StorageType,
         mplsLdpEntityConfGenericLabelRangeRowStatus   RowStatus
     }

     mplsLdpEntityConfGenericLabelRangeMinimum OBJECT-TYPE
         SYNTAX     Unsigned32(0..1048575)
         MAX-ACCESS not-accessible
         STATUS     current
         DESCRIPTION
             "The minimum label configured for this range."
         ::= { mplsLdpEntityConfGenericLabelRangeEntry 1 }

     mplsLdpEntityConfGenericLabelRangeMaximum OBJECT-TYPE
         SYNTAX     Unsigned32(0..1048575)
         MAX-ACCESS not-accessible
         STATUS     current
         DESCRIPTION
             "The maximum label configured for this range."
         ::= { mplsLdpEntityConfGenericLabelRangeEntry 2 }


     mplsLdpEntityConfGenericIfIndexOrZero OBJECT-TYPE
         SYNTAX      InterfaceIndexOrZero


Expires February 2001                                          [Page 27]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
            "This value represents either the InterfaceIndex of
            the 'ifLayer' where these Generic Label would be created, or
            0 (zero).  The value of zero means that the InterfaceIndex
            is not known.  For example, if the InterfaceIndex is
            created subsequent to the Generic Label's creation, then
            it would not be known.  However, if the InterfaceIndex
            is known, then it must be represented by this value.

            If an InterfaceIndex becomes known, then the
            network management entity (e.g. SNMP agent) responsible
            for this object MUST change the value from 0 (zero) to the
            value of the InterfaceIndex.  If this Generic Label is
            being used in forwarding data, then the value of this
            object MUST be the InterfaceIndex."
         ::= { mplsLdpEntityConfGenericLabelRangeEntry 3 }

     mplsLdpEntityConfGenericLabelRangeStorageType  OBJECT-TYPE
         SYNTAX      StorageType
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
                  "The storage type for this entry."
         ::= { mplsLdpEntityConfGenericLabelRangeEntry 4 }

     mplsLdpEntityConfGenericLabelRangeRowStatus OBJECT-TYPE
         SYNTAX RowStatus
         MAX-ACCESS read-create
         STATUS current
         DESCRIPTION
             "An object that allows entries in this
             table to be created and deleted using
             the RowStatus convention.

             There must exist at least one entry in this
             table for every LDP Entity that has a
             generic label configured.

             NOTE:  This RowStatus object should
             have the same value of the 'mplsLdpEntityRowStatus'
             related to this entry."
         ::= { mplsLdpEntityConfGenericLabelRangeEntry 5 }


     --
     -- Ldp Entity Objects for ATM
     --


Expires February 2001                                          [Page 28]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


     mplsLdpEntityAtmObjects  OBJECT IDENTIFIER ::=
                                   { mplsLdpEntityObjects 4 }

     mplsLdpEntityAtmParmsTable  OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpEntityAtmParmsEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "This table contains information about the
             ATM specific information which could be used
             in the 'Optional Parameters' and other ATM specific
             information."
         ::= { mplsLdpEntityAtmObjects 1 }

     mplsLdpEntityAtmParmsEntry OBJECT-TYPE
         SYNTAX      MplsLdpEntityAtmParmsEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "An entry in this table represents the ATM parameters
             and ATM information for this LDP entity."
         INDEX       {  mplsLdpEntityLdpId,
                        mplsLdpEntityIndex
                     }
         ::= { mplsLdpEntityAtmParmsTable 1 }


     MplsLdpEntityAtmParmsEntry ::= SEQUENCE {
         mplsLdpEntityAtmIfIndexOrZero        InterfaceIndexOrZero,
         mplsLdpEntityAtmMergeCap             INTEGER,
         mplsLdpEntityAtmLabelRangeComponents Unsigned32,
         mplsLdpEntityAtmVcDirectionality     INTEGER,
         mplsLdpEntityAtmLsrConnectivity      INTEGER,
         mplsLdpEntityDefaultControlVpi       AtmVpIdentifier,
         mplsLdpEntityDefaultControlVci       MplsAtmVcIdentifier,
         mplsLdpEntityUnlabTrafVpi            AtmVpIdentifier,
         mplsLdpEntityUnlabTrafVci            MplsAtmVcIdentifier,
         mplsLdpEntityAtmStorageType          StorageType,
         mplsLdpEntityAtmRowStatus            RowStatus
     }


     mplsLdpEntityAtmIfIndexOrZero  OBJECT-TYPE
         SYNTAX      InterfaceIndexOrZero
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
            "This value represents either the InterfaceIndex of
            the 'ifLayer' where the ATM Labels 'owned' by this
            entry were created, or 0 (zero).  The value of zero


Expires February 2001                                          [Page 29]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


            means that the InterfaceIndex is not known.  For example,
            if the InterfaceIndex is created subsequent to the
            ATM Label's creation, then it would not be known.
            However, if the InterfaceIndex is known, then it must
            be represented by this value.

            If an InterfaceIndex becomes known, then the
            network management entity (e.g. SNMP agent) responsible
            for this object MUST change the value from 0 (zero) to the
            value of the InterfaceIndex.  If an ATM Label is
            being used in forwarding data, then the value of this
            object MUST be the InterfaceIndex."
         ::= { mplsLdpEntityAtmParmsEntry 1 }


     mplsLdpEntityAtmMergeCap OBJECT-TYPE
         SYNTAX      INTEGER {
                         notSupported(0),
                         vcMerge(2)
                     }
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
                  "Denotes the Merge Capability of this Entity."
         ::= { mplsLdpEntityAtmParmsEntry 2 }

     mplsLdpEntityAtmLabelRangeComponents OBJECT-TYPE
         SYNTAX      Unsigned32 (1..65535)
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "Number of LabelRange Components in the Initialization
             message.  This also represents the number of entries
             in the mplsLdpLabelRangeComponentsTable which correspond
             to this entry."
         ::= { mplsLdpEntityAtmParmsEntry 3 }

     mplsLdpEntityAtmVcDirectionality OBJECT-TYPE
         SYNTAX      INTEGER {
                                bidirectional(0),
                                unidirectional(1)
                             }
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "If the value of this object is 'bidirectional(0)',
             a given VCI, within a given VPI, is used as a
             label for both directions independently.

             If the value of this object is 'unidirectional(1)',


Expires February 2001                                          [Page 30]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             a given VCI within a VPI designates one direction."
         ::= { mplsLdpEntityAtmParmsEntry 4 }

     mplsLdpEntityAtmLsrConnectivity OBJECT-TYPE
         SYNTAX      INTEGER {
                        direct(1),
                        indirect(2)
                     }
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "The peer LSR may be connected indirectly by means of an
             ATM VP so that the VPI values may be different on either
             endpoint so the label MUST be encoded entirely within the
             VCI field."
         DEFVAL { direct }
         ::= { mplsLdpEntityAtmParmsEntry 5 }

     mplsLdpEntityDefaultControlVpi OBJECT-TYPE
         SYNTAX      AtmVpIdentifier
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "The default VPI value for the non-MPLS connection.  The
             default value of this is 0 (zero) but other values may
             be configured.  This object allows a different value
             to be configured."
         DEFVAL
             { 0 }
         ::= { mplsLdpEntityAtmParmsEntry 6 }

     mplsLdpEntityDefaultControlVci OBJECT-TYPE
         SYNTAX      MplsAtmVcIdentifier
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "The Default VCI value for a non-MPLS connection.  The
             default value of this is 32 but other values may be
             configured.  This object allows a different value to
             be configured."
         DEFVAL
             { 32 }
         ::= { mplsLdpEntityAtmParmsEntry 7 }

     mplsLdpEntityUnlabTrafVpi OBJECT-TYPE
         SYNTAX      AtmVpIdentifier
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "VPI value of the VCC supporting unlabelled traffic.  This


Expires February 2001                                          [Page 31]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             non-MPLS connection is used to carry unlabelled (IP)
             packets.  The default value is the same as the default
             value of the 'mplsLdpEntityDefaultControlVpi', however
             another value may be configured."
         DEFVAL  { 0 }
         ::= { mplsLdpEntityAtmParmsEntry 8 }

     mplsLdpEntityUnlabTrafVci OBJECT-TYPE
         SYNTAX      MplsAtmVcIdentifier
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "VCI value of the VCC supporting unlabelled traffic.
             This non-MPLS connection is used to carry unlabelled (IP)
             packets. The default value is the same as the default
             value of the 'mplsLdpEntityDefaultControlVci', however
             another value may be configured."
         DEFVAL  { 32 }
         ::= { mplsLdpEntityAtmParmsEntry 9 }

     mplsLdpEntityAtmStorageType  OBJECT-TYPE
         SYNTAX      StorageType
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
                  "The storage type for this entry."
         ::= { mplsLdpEntityAtmParmsEntry 10 }

     mplsLdpEntityAtmRowStatus OBJECT-TYPE
         SYNTAX      RowStatus
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "An object that allows entries in this table to
             be created and deleted using the
             RowStatus convention.

             NOTE:  This RowStatus object should
             have the same value of the 'mplsLdpEntityRowStatus'
             related to this entry."
         ::= { mplsLdpEntityAtmParmsEntry 11 }

     --
     -- The MPLS LDP Entity Configurable ATM Label Range Table
     --

     mplsLdpEntityConfAtmLabelRangeTable OBJECT-TYPE
         SYNTAX SEQUENCE OF MplsLdpEntityConfAtmLabelRangeEntry
         MAX-ACCESS not-accessible
         STATUS current


Expires February 2001                                          [Page 32]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         DESCRIPTION
             "The MPLS LDP Entity Configurable ATM Label Range Table.
             The purpose of this table is to provide a mechanism
             for specifying a contiguous range of vpi's
             with a contiguous range of vci's, or a 'label range'
             for LDP Entities.

             LDP Entities which use ATM must have at least one
             entry in this table."
         ::= { mplsLdpEntityAtmObjects 2 }

     mplsLdpEntityConfAtmLabelRangeEntry OBJECT-TYPE
         SYNTAX MplsLdpEntityConfAtmLabelRangeEntry
         MAX-ACCESS not-accessible
         STATUS current
         DESCRIPTION
             "A row in the LDP Entity Configurable ATM Label
             Range Table.  One entry in this table contains
             information on a single range of labels
             represented by the configured Upper and Lower
             Bounds VPI/VCI pairs.  These are the same
             data used in the Initialization Message.

             NOTE:  The ranges for a specific LDP Entity
             are UNIQUE and non-overlapping.  For example,
             for a specific LDP Entity index, there could
             be one entry having ConfLowerBound vpi/vci == 0/32, and
             ConfUpperBound vpi/vci == 0/100, and a second entry
             for this same interface with ConfLowerBound
             vpi/vci == 0/101 and ConfUpperBound vpi/vci == 0/200.
             However, there could not be a third entry with
             ConfLowerBound vpi/vci == 0/200 and
             ConfUpperBound vpi/vci == 0/300 because this label
             range overlaps with the second entry (i.e. both
             entries now have 0/200).

             A row will not be created unless a unique and
             non-overlapping range is specified.  Thus, row
             creation implies a one-shot row creation of
             LDP EntityID and ConfLowerBound vpi/vci and
             ConfUpperBound vpi/vci.  At least one label
             range entry for a specific LDP Entity MUST
             include the default VPI/VCI  values denoted
             in the LDP Entity Table."
         INDEX       {  mplsLdpEntityLdpId,
                        mplsLdpEntityIndex,
                        mplsLdpEntityConfAtmLabelRangeMinimumVpi,
                        mplsLdpEntityConfAtmLabelRangeMinimumVci
                     }
         ::= { mplsLdpEntityConfAtmLabelRangeTable 1 }


Expires February 2001                                          [Page 33]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000



     MplsLdpEntityConfAtmLabelRangeEntry ::= SEQUENCE {
         mplsLdpEntityConfAtmLabelRangeMinimumVpi  AtmVpIdentifier,
         mplsLdpEntityConfAtmLabelRangeMinimumVci  MplsAtmVcIdentifier,
         mplsLdpEntityConfAtmLabelRangeMaximumVpi  AtmVpIdentifier,
         mplsLdpEntityConfAtmLabelRangeMaximumVci  MplsAtmVcIdentifier,
         mplsLdpEntityConfAtmLabelRangeStorageType StorageType,
         mplsLdpEntityConfAtmLabelRangeRowStatus   RowStatus
     }

     mplsLdpEntityConfAtmLabelRangeMinimumVpi OBJECT-TYPE
         SYNTAX AtmVpIdentifier
         MAX-ACCESS not-accessible
         STATUS current
         DESCRIPTION
             "The minimum VPI number configured for this range."
         ::= { mplsLdpEntityConfAtmLabelRangeEntry 1 }

     mplsLdpEntityConfAtmLabelRangeMinimumVci OBJECT-TYPE
         SYNTAX MplsAtmVcIdentifier
         MAX-ACCESS not-accessible
         STATUS current
         DESCRIPTION
             "The minimum VCI number configured for this range."
         ::= { mplsLdpEntityConfAtmLabelRangeEntry 2 }

     mplsLdpEntityConfAtmLabelRangeMaximumVpi OBJECT-TYPE
         SYNTAX AtmVpIdentifier
         MAX-ACCESS read-create
         STATUS current
         DESCRIPTION
             "The maximum VPI number configured for this range."
         ::= { mplsLdpEntityConfAtmLabelRangeEntry 3 }

     mplsLdpEntityConfAtmLabelRangeMaximumVci OBJECT-TYPE
         SYNTAX MplsAtmVcIdentifier
         MAX-ACCESS read-create
         STATUS current
         DESCRIPTION
             "The maximum VCI number configured for this range."
        ::= { mplsLdpEntityConfAtmLabelRangeEntry 4 }


     mplsLdpEntityConfAtmLabelRangeStorageType  OBJECT-TYPE
         SYNTAX      StorageType
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
                  "The storage type for this entry."
         ::= { mplsLdpEntityConfAtmLabelRangeEntry 5 }


Expires February 2001                                          [Page 34]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


     mplsLdpEntityConfAtmLabelRangeRowStatus OBJECT-TYPE
         SYNTAX RowStatus
         MAX-ACCESS read-create
         STATUS current
         DESCRIPTION
             "An object that allows entries in this
             table to be created and deleted using
             the RowStatus convention.

             There must exist at least one entry in this
             table for every LDP Entity that has
             'mplsLdpEntityOptionalParameters' object with
             a value of 'atmSessionParameters'.

             NOTE:  This RowStatus object should
             have the same value of the 'mplsLdpEntityRowStatus'
             related to this entry."
         ::= { mplsLdpEntityConfAtmLabelRangeEntry 6 }


     --
     -- Ldp Entity Objects for Frame Relay
     --

     mplsLdpEntityFrameRelayObjects OBJECT IDENTIFIER ::=
                                         { mplsLdpEntityObjects 5 }

     mplsLdpEntityFrameRelayParmsTable  OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpEntityFrameRelayParmsEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "This table contains information about the
             Optional Parameters to specify what this Entity is
             going to specify for Frame Relay specific
             LDP Intialization Messages."
         ::= { mplsLdpEntityFrameRelayObjects 1 }

     mplsLdpEntityFrameRelayParmsEntry OBJECT-TYPE
         SYNTAX      MplsLdpEntityFrameRelayParmsEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "An entry in this table represents the Frame Relay
             optional parameters associated with the LDP entity."
         INDEX       {  mplsLdpEntityLdpId,
                        mplsLdpEntityIndex
                     }
         ::= { mplsLdpEntityFrameRelayParmsTable 1 }


Expires February 2001                                          [Page 35]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


     MplsLdpEntityFrameRelayParmsEntry ::= SEQUENCE {
         mplsLdpEntityFrIfIndexOrZero        InterfaceIndexOrZero,
         mplsLdpEntityFrMergeCap             INTEGER,
         mplsLdpEntityFrLabelRangeComponents Unsigned32,
         mplsLdpEntityFrLen                  INTEGER,
         mplsLdpEntityFrVcDirectionality     INTEGER,
         mplsLdpEntityFrParmsStorageType     StorageType,
         mplsLdpEntityFrParmsRowStatus       RowStatus
     }

     mplsLdpEntityFrIfIndexOrZero OBJECT-TYPE
         SYNTAX      InterfaceIndexOrZero
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
            "This value represents either the InterfaceIndex of
            the 'ifLayer' where the Frame Relay Labels 'owned' by this
            entry were created, or 0 (zero).  The value of zero
            means that the InterfaceIndex is not known.  For example,
            if the InterfaceIndex is created subsequent to the
            Frame Relay Label's creation, then it would not be known.
            However, if the InterfaceIndex is known, then it must
            be represented by this value.

            If an InterfaceIndex becomes known, then the
            network management entity (e.g. SNMP agent) responsible
            for this object MUST change the value from 0 (zero) to the
            value of the InterfaceIndex.  If an Frame Relay Label is
            being used in forwarding data, then the value of this
            object MUST be the InterfaceIndex."
         ::= { mplsLdpEntityFrameRelayParmsEntry 1 }

     mplsLdpEntityFrMergeCap OBJECT-TYPE
         SYNTAX      INTEGER {
                         notSupported(0),
                         supported(1)
                     }
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "This represents whether or not Frame Relay merge
             capability is supported."
         ::= { mplsLdpEntityFrameRelayParmsEntry 2 }

     mplsLdpEntityFrLabelRangeComponents OBJECT-TYPE
         SYNTAX      Unsigned32 (1..65535)
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "Number of LabelRange Components in the Initialization


Expires February 2001                                          [Page 36]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             message.  This also represents the number of entries
             in the mplsLdpEntityConfFrLabelRangeTable which correspond
             to this entry."
         ::= { mplsLdpEntityFrameRelayParmsEntry 3 }

     mplsLdpEntityFrLen OBJECT-TYPE
         SYNTAX      INTEGER {
                         tenDlciBits(0),
                         twentyThreeDlciBits(2)
                     }
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "This object specifies the DLCI bits."
         ::= { mplsLdpEntityFrameRelayParmsEntry 4 }

     mplsLdpEntityFrVcDirectionality OBJECT-TYPE
         SYNTAX      INTEGER {
                               bidirectional(0),
                               unidirection(1)
                             }
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "If the value of this object is 'bidirectional(0)', then
             the LSR supports the use of a given DLCI as a label for
             both directions independently.  If the value of
             this object is 'unidirectional(1)', then the LSR
             uses the given DLCI as a label in only one direction."
         ::= { mplsLdpEntityFrameRelayParmsEntry 5 }


     mplsLdpEntityFrParmsStorageType  OBJECT-TYPE
         SYNTAX      StorageType
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
                  "The storage type for this entry."
         ::= { mplsLdpEntityFrameRelayParmsEntry 6 }


     mplsLdpEntityFrParmsRowStatus OBJECT-TYPE
         SYNTAX      RowStatus
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "An object that allows entries in this table to
             be created and deleted using the
             RowStatus convention.


Expires February 2001                                          [Page 37]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             NOTE:  This RowStatus object should
             have the same value of the 'mplsLdpEntityRowStatus'
             related to this entry."
         ::= { mplsLdpEntityFrameRelayParmsEntry 7 }


     --
     -- Frame Relay Label Range Components
     --

     mplsLdpEntityConfFrLabelRangeTable  OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpEntityConfFrLabelRangeEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "This table contains information about the
             Optional Parameters to specify what this Entity is
             going to specify for Frame Relay specific
             LDP Intialization Messages."
         ::= { mplsLdpEntityFrameRelayObjects 2 }

     mplsLdpEntityConfFrLabelRangeEntry OBJECT-TYPE
         SYNTAX      MplsLdpEntityConfFrLabelRangeEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "An entry in this table represents the Frame Relay
             optional parameters associated with the LDP entity."
         INDEX       {  mplsLdpEntityLdpId,
                        mplsLdpEntityIndex,
                        mplsLdpConfFrMinimumDlci
                     }
         ::= { mplsLdpEntityConfFrLabelRangeTable 1 }

     MplsLdpEntityConfFrLabelRangeEntry ::= SEQUENCE {
         mplsLdpConfFrMinimumDlci                  Integer32,
         mplsLdpConfFrMaximumDlci                  Integer32,
         mplsLdpConfFrStorageType                  StorageType,
         mplsLdpConfFrRowStatus                    RowStatus
     }

     mplsLdpConfFrMinimumDlci OBJECT-TYPE
         SYNTAX      Integer32(0..4194303)
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "The lower bound which is supported.  This value should
             be the same as that in the Frame Relay Label Range
             Component's Minimum DLCI field."
         ::= { mplsLdpEntityConfFrLabelRangeEntry 1 }


Expires February 2001                                          [Page 38]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000



     mplsLdpConfFrMaximumDlci OBJECT-TYPE
         SYNTAX      Integer32 (0..4194303)
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "The upper bound which is supported.  This value should
             be the same as that in the Frame Relay Label Range
             Component's Maximum DLCI field."
         ::= { mplsLdpEntityConfFrLabelRangeEntry 2 }


     mplsLdpConfFrStorageType  OBJECT-TYPE
         SYNTAX      StorageType
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
                  "The storage type for this entry."
         ::= { mplsLdpEntityConfFrLabelRangeEntry 3 }


     mplsLdpConfFrRowStatus OBJECT-TYPE
         SYNTAX      RowStatus
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "An object that allows entries in this table to
             be created and deleted using the
             RowStatus convention.

             If the value of the object
             'mplsLdpEntityOptionalParameters' contains the
             value of 'frameRelaySessionParameters(3)' then
             there must be at least one corresponding entry
             in this table.

             NOTE:  This RowStatus object should
             have the same value of the 'mplsLdpEntityRowStatus'
             related to this entry."
         ::= { mplsLdpEntityConfFrLabelRangeEntry 4 }

     --
     -- The MPLS LDP Entity Statistics Table
     --

     mplsLdpEntityStatsTable OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpEntityStatsEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION


Expires February 2001                                          [Page 39]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             "This table is a read-only table which augments
             the mplsLdpEntityTable.  The purpose of this
             table is to keep statistical information about
             the LDP Entities on the LSR."
         ::= { mplsLdpEntityObjects 6 }

     mplsLdpEntityStatsEntry OBJECT-TYPE
         SYNTAX      MplsLdpEntityStatsEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "A row in this table contains statistical information
             about an LDP Entity.  Some counters contained in a
             row are for fatal errors received during a former
             LDP Session associated with this entry.  For example,
             an Ldp Pdu received on a TCP connection during an
             LDP Session contains a fatal error.  That
             error is counted here, because the
             session is terminated.

             If the error is NOT fatal (i.e. and the Session
             remains), then the error is counted in the
             mplsLdpSessionStatsEntry."
         AUGMENTS       {   mplsLdpEntityEntry  }
         ::= { mplsLdpEntityStatsTable 1 }

     MplsLdpEntityStatsEntry ::= SEQUENCE {
         mplsLdpAttemptedSessions                  Counter32,
         mplsLdpSessionRejectedNoHelloErrors       Counter32,
         mplsLdpSessionRejectedAdvertisementErrors Counter32,
         mplsLdpSessionRejectedMaxPduErrors        Counter32,
         mplsLdpSessionRejectedLabelRangeErrors    Counter32,
         mplsLdpBadLdpIdentifierErrors             Counter32,
         mplsLdpBadPduLengthErrors                 Counter32,
         mplsLdpBadMessageLengthErrors             Counter32,
         mplsLdpBadTlvLengthErrors                 Counter32,
         mplsLdpMalformedTlvValueErrors            Counter32,
         mplsLdpKeepAliveTimerExpiredErrors        Counter32,
         mplsLdpShutdownNotifReceived              Counter32,
         mplsLdpShutdownNotifSent                  Counter32
     }

     mplsLdpAttemptedSessions OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "A count of the total attempted sessions for
             this LDP Entity."
         ::= { mplsLdpEntityStatsEntry 1 }


Expires February 2001                                          [Page 40]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


     mplsLdpSessionRejectedNoHelloErrors OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "A count of the Session Rejected/No Hello Error
             Notification Messages sent or received by
             this LDP Entity."
         ::= { mplsLdpEntityStatsEntry 2 }

     mplsLdpSessionRejectedAdvertisementErrors OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "A count of the Session Rejected/Parameters
             Advertisement Mode Error Notification Messages sent
             or received by this LDP Entity."
         ::= { mplsLdpEntityStatsEntry 3 }


     mplsLdpSessionRejectedMaxPduErrors OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "A count of the Session Rejected/Parameters
             Max Pdu Length Error Notification Messages sent
             or received by this LDP Entity."
         ::= { mplsLdpEntityStatsEntry 4 }

     mplsLdpSessionRejectedLabelRangeErrors OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "A count of the Session Rejected/Parameters
             Label Range Notification Messages sent
             or received by this LDP Entity."
         ::= { mplsLdpEntityStatsEntry 5 }


     mplsLdpBadLdpIdentifierErrors OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "This object counts the number of Bad LDP Identifier
             Fatal Errors detected by the session(s)
             (past and present) associated with this LDP Entity."


Expires February 2001                                          [Page 41]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         REFERENCE
            "LDP Specification, Section 3.5.1.2."
         ::= { mplsLdpEntityStatsEntry 6 }

     mplsLdpBadPduLengthErrors OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "This object counts the number of Bad Pdu Length
             Fatal Errors detected by the session(s)
             (past and present) associated with this LDP Entity."
         REFERENCE
            "LDP Specification, Section 3.5.1.2."
         ::= { mplsLdpEntityStatsEntry 7 }

     mplsLdpBadMessageLengthErrors OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "This object counts the number of Bad Message
             Length Fatal Errors detected by the session(s)
             (past and present) associated with this LDP Entity."
         REFERENCE
            "LDP Specification, Section 3.5.1.2."
         ::= { mplsLdpEntityStatsEntry 8 }

     mplsLdpBadTlvLengthErrors OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "This object counts the number of Bad TLV
             Length Fatal Errors detected by the session(s)
             (past and present) associated with this LDP Entity."
         REFERENCE
            "LDP Specification, Section 3.5.1.2."
         ::= { mplsLdpEntityStatsEntry 9 }

     mplsLdpMalformedTlvValueErrors OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "This object counts the number of Malformed TLV
             Value Fatal Errors detected by the session(s)
             (past and present) associated with this
             LDP Entity."
         REFERENCE


Expires February 2001                                          [Page 42]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


            "LDP Specification, Section 3.5.1.2."
         ::= { mplsLdpEntityStatsEntry 10 }

     mplsLdpKeepAliveTimerExpiredErrors OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "This object counts the number of Session Keep Alive
             Timer Expired Errors detected by the session(s)
             (past and present) associated with this LDP Entity."
         REFERENCE
            "LDP Specification, Section 3.5.1.2."
         ::= { mplsLdpEntityStatsEntry 11 }

     mplsLdpShutdownNotifReceived OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "This object counts the number of Shutdown Notfications
             received related to session(s) (past and present)
             associated with this LDP Entity."
         ::= { mplsLdpEntityStatsEntry 12 }

     mplsLdpShutdownNotifSent OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "This object counts the number of Shutdown Notfications
             sent related to session(s) (past and present) associated
             with this LDP Entity."
         ::= { mplsLdpEntityStatsEntry 13 }


     --
     -- The MPLS LDP Peer Table
     --

     mplsLdpSessionObjects OBJECT IDENTIFIER ::=
                                              { mplsLdpObjects 3 }

     mplsLdpPeerTable OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpPeerEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "Information about LDP peers known by Entities in
             the mplsLdpEntityTable.  The information in this table


Expires February 2001                                          [Page 43]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             is based on information from the Entity-Peer interaction
             during session initialization but is not appropriate
             for the mplsLdpSessionTable, because objects in this
             table may or may not be used in session establishment."
         ::= { mplsLdpSessionObjects 1 }

     mplsLdpPeerEntry OBJECT-TYPE
         SYNTAX      MplsLdpPeerEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "Information about a single Peer which is related
             to a Session.  NOTE:  this table is used to
             augment the mplsLdpSessionTable."
         INDEX       { mplsLdpEntityLdpId,
                       mplsLdpEntityIndex,
                       mplsLdpPeerLdpId }
         ::= { mplsLdpPeerTable 1 }

     MplsLdpPeerEntry ::= SEQUENCE {
         mplsLdpPeerLdpId                      MplsLdpIdentifier,
         mplsLdpPeerLabelDistributionMethod    INTEGER,
         mplsLdpPeerLoopDetectionForPV         INTEGER,
         mplsLdpPeerPathVectorLimit            Integer32
     }

     mplsLdpPeerLdpId OBJECT-TYPE
         SYNTAX      MplsLdpIdentifier
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "The LDP identifier of this LDP Peer."
         ::= { mplsLdpPeerEntry 1 }

     mplsLdpPeerLabelDistributionMethod OBJECT-TYPE
         SYNTAX      INTEGER {
                        downstreamOnDemand(1),
                        downstreamUnsolicited(2)
                     }
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "For any given LDP session, the method of
             label distribution must be specified."
         ::= { mplsLdpPeerEntry 2 }

     mplsLdpPeerLoopDetectionForPV OBJECT-TYPE
         SYNTAX      INTEGER {
                        disabled(0),
                        enabled(1)


Expires February 2001                                          [Page 44]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


                     }
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "An indication of whether loop detection based
             on path vectors is disabled or enabled for this Peer.

             If this object has a value of disabled(0),
             then loop detection is disabled.  Otherwise, if this
             object has a value of enabled(1), then loop detection
             based on path vectors is enabled."
         ::= { mplsLdpPeerEntry 3 }


     mplsLdpPeerPathVectorLimit OBJECT-TYPE
         SYNTAX      Integer32 (0..255)
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "If the value of 'mplsLdpPeerLoopDetectionForPV' for
             this entry is 'enabled(1)', the this object represents
             that Path Vector Limit for this peer.

             If the value of 'mplsLdpPeerLoopDetectionForPV' for
             this entry is 'disabled(0)', then this value should
             be 0 (zero)."
         ::= { mplsLdpPeerEntry 4 }



     --
     -- The MPLS LDP Hello Adjacency Table
     --

     mplsLdpHelloAdjacencyObjects OBJECT IDENTIFIER ::=
                                   { mplsLdpSessionObjects 2 }

     mplsLdpHelloAdjacencyTable OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpHelloAdjacencyEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "A table of Hello Adjacencies for Sessions."
         ::= { mplsLdpHelloAdjacencyObjects 1 }

     mplsLdpHelloAdjacencyEntry OBJECT-TYPE
         SYNTAX      MplsLdpHelloAdjacencyEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION


Expires February 2001                                          [Page 45]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             "Each row represents a single LDP Hello Adjacency.
             An LDP Session can have one or more Hello adjacencies."
              INDEX       { mplsLdpEntityLdpId,
                            mplsLdpEntityIndex,
                            mplsLdpPeerLdpId,
                            mplsLdpHelloAdjacencyIndex }
         ::= { mplsLdpHelloAdjacencyTable 1 }

     MplsLdpHelloAdjacencyEntry ::= SEQUENCE {
         mplsLdpHelloAdjacencyIndex                  Unsigned32,
         mplsLdpHelloAdjacencyHoldTimeRemaining      TimeInterval,
         mplsLdpHelloAdjacencyType                   INTEGER
     }

     mplsLdpHelloAdjacencyIndex OBJECT-TYPE
         SYNTAX      Unsigned32 (1..4294967295)
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "An identifier for this specific adjacency."
         ::= { mplsLdpHelloAdjacencyEntry 1 }

     mplsLdpHelloAdjacencyHoldTimeRemaining OBJECT-TYPE
         SYNTAX      TimeInterval
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "The time remaining for this Hello Adjacency.
             This interval will change when the 'next'
             Hello message which corresponds to this
             Hello Adjacency is received."
         ::= { mplsLdpHelloAdjacencyEntry 2 }

     mplsLdpHelloAdjacencyType OBJECT-TYPE
         SYNTAX      INTEGER {
                        link(1),
                        targeted(2)
                     }
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "This adjacency is the result of a 'link'
             hello if the value of this object is link(1).
             Otherwise, it is a result of a 'targeted'
             hello, targeted(2)."
         ::= { mplsLdpHelloAdjacencyEntry 3 }





Expires February 2001                                          [Page 46]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


     --
     -- The MPLS LDP Sessions Table
     --

     mplsLdpSessionUpDownTrapEnable OBJECT-TYPE
         SYNTAX      INTEGER {
                                enabled(1),
                                disabled(2)
                             }
         MAX-ACCESS  read-write
         STATUS      current
         DESCRIPTION
             "Indicates whether the traps, 'mplsLdpSessionUp' and
             'mplsLdpSessionDown' will be generated or not.

             If the value of this object is 'enabled(1)'
             then the traps will generated.  If the value
             of this object is 'disabled(2)' then the
             traps will not be generated.  The DEFVAL
             is set to 'disabled(2)'."
         DEFVAL { disabled }
         ::= { mplsLdpSessionObjects 3 }


     mplsLdpSessionTable OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpSessionEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "A table of Sessions between the LDP Entities and
             LDP Peers.  Each row represents a single session."
         ::= { mplsLdpSessionObjects 4 }

     mplsLdpSessionEntry OBJECT-TYPE
         SYNTAX      MplsLdpSessionEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "An entry in this table represents information on a
             single session between an LDP Entity and LDP Peer.
             The information contained in a row is read-only.

             Please note:  the Path Vector Limit for the
             Session is the value which is configured in
             the corresponding mplsLdpEntityEntry. The
             Peer's Path Vector Limit is in noted in the
             mplsLdpPeerTable.

             Values which may differ from those configured are
             noted in the objects of this table, the


Expires February 2001                                          [Page 47]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             mplsLdpAtmSessionTable and the
             mplsLdpFrameRelaySessionTable. A value will
             differ if it was negotiated between the
             Entity and the Peer. Values may or may not
             be negotiated. For example, if the values
             are the same then no negotiation takes place.
             If they are negotiated, then they may differ."
         AUGMENTS { mplsLdpPeerEntry }
         ::= { mplsLdpSessionTable 1 }

     MplsLdpSessionEntry ::= SEQUENCE {
         mplsLdpSessionState                          INTEGER,
         mplsLdpSessionProtocolVersion                Integer32,
         mplsLdpSessionKeepAliveHoldTimeRemaining     TimeInterval,
         mplsLdpSessionMaxPduLength                   Unsigned32,
         mplsLdpSessionDiscontinuityTime              TimeStamp
     }


     mplsLdpSessionState OBJECT-TYPE
         SYNTAX      INTEGER {
                        nonexistent(1),
                        initialized(2),
                        openrec(3),
                        opensent(4),
                        operational(5)
                     }
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "The current state of the session, all of the
             states 1 - 5 are based on the state machine for
             session negotiation behavior."
         ::= { mplsLdpSessionEntry 1 }

     mplsLdpSessionProtocolVersion OBJECT-TYPE
         SYNTAX      Integer32(1..65535)
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "The version of the LDP Protocol which
             this session is using."
         ::= { mplsLdpSessionEntry 2 }

     mplsLdpSessionKeepAliveHoldTimeRemaining OBJECT-TYPE
         SYNTAX      TimeInterval
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "The keep alive hold time remaining for this session."


Expires February 2001                                          [Page 48]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         ::= { mplsLdpSessionEntry 3 }

     mplsLdpSessionMaxPduLength OBJECT-TYPE
         SYNTAX      Unsigned32 (1..65535)
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "The value of maximum allowable length for LDP PDUs for
             this session.  This value may have been negotiated during
             the Session Initialization."
         ::= { mplsLdpSessionEntry 4 }

     mplsLdpSessionDiscontinuityTime OBJECT-TYPE
         SYNTAX      TimeStamp
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "The value of sysUpTime on the most recent occasion at
             which any one or more of this session's counters
             suffered a discontinuity.  The relevant counters are
             the specific instances associated with this session
             of any Counter32 or Counter64 object contained in the
             mplsLdpSessionStatsTable.  If no such discontinuities have
             occurred since the last re-initialization of the local
             management subsystem, then this object contains a zero
             value.

             Also, an NMS can distinguish when a session
             between a given Entity and Peer goes away and then is
             're-established'.  This value would change and
             thus indicate to the NMS that this is a
             different session."
         ::= { mplsLdpSessionEntry 5 }


     --
     -- MPLS LDP ATM Session Information
     --

     mplsLdpAtmSessionTable OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpAtmSessionEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "A table which relates Sessions in the
             'mplsLdpSessionTable' and their label
             range intersections.  There could be one
             or more label range intersections between an
             LDP Entity and LDP Peer using ATM as the underlying
             media. Each row represents a single label range


Expires February 2001                                          [Page 49]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             intersection.

             NOTE:  this table cannot use the 'AUGMENTS'
             clause because there is not necessarily a one-to-one
             mapping between this table and the mplsLdpSessionTable."
         ::= { mplsLdpSessionObjects 5 }

     mplsLdpAtmSessionEntry OBJECT-TYPE
         SYNTAX      MplsLdpAtmSessionEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "An entry in this table represents information on a
             single label range intersection between an LDP Entity
             and LDP Peer.

             The information contained in a row is read-only."
         INDEX       { mplsLdpEntityLdpId,
                       mplsLdpEntityIndex,
                       mplsLdpPeerLdpId,
                       mplsLdpSessionAtmLabelRangeLowerBoundVpi,
                       mplsLdpSessionAtmLabelRangeLowerBoundVci

                     }
         ::= { mplsLdpAtmSessionTable 1 }

     MplsLdpAtmSessionEntry ::= SEQUENCE {
         mplsLdpSessionAtmLabelRangeLowerBoundVpi     AtmVpIdentifier,
         mplsLdpSessionAtmLabelRangeLowerBoundVci     MplsAtmVcIdentifier,
         mplsLdpSessionAtmLabelRangeUpperBoundVpi     AtmVpIdentifier,
         mplsLdpSessionAtmLabelRangeUpperBoundVci     MplsAtmVcIdentifier
     }

     mplsLdpSessionAtmLabelRangeLowerBoundVpi OBJECT-TYPE
         SYNTAX AtmVpIdentifier
         MAX-ACCESS not-accessible
         STATUS current
         DESCRIPTION
             "The minimum VPI number for this range."
         ::= { mplsLdpAtmSessionEntry 1 }

     mplsLdpSessionAtmLabelRangeLowerBoundVci OBJECT-TYPE
         SYNTAX MplsAtmVcIdentifier
         MAX-ACCESS not-accessible
         STATUS current
         DESCRIPTION
             "The minimum VCI number for this range."
         ::= { mplsLdpAtmSessionEntry 2 }

     mplsLdpSessionAtmLabelRangeUpperBoundVpi OBJECT-TYPE


Expires February 2001                                          [Page 50]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         SYNTAX AtmVpIdentifier
         MAX-ACCESS read-only
         STATUS current
         DESCRIPTION
             "The maximum VPI number for this range."
         ::= { mplsLdpAtmSessionEntry 3 }

     mplsLdpSessionAtmLabelRangeUpperBoundVci OBJECT-TYPE
         SYNTAX MplsAtmVcIdentifier
         MAX-ACCESS read-only
         STATUS current
         DESCRIPTION
             "The maximum VCI number for this range."
         ::= { mplsLdpAtmSessionEntry 4 }


     --
     -- MPLS LDP Frame Relay Session Information
     --

     mplsLdpFrameRelaySessionTable OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpFrameRelaySessionEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "A table of Frame Relay label range intersections
             between the LDP Entities and LDP Peers.
             Each row represents a single label range intersection.

             NOTE:  this table cannot use the 'AUGMENTS'
             clause because there is not necessarily a one-to-one
             mapping between this table and the mplsLdpSessionTable."
         ::= { mplsLdpSessionObjects 6 }

     mplsLdpFrameRelaySessionEntry OBJECT-TYPE
         SYNTAX      MplsLdpFrameRelaySessionEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "An entry in this table represents information on a
             single label range intersection between an
             LDP Entity and LDP Peer.

             The information contained in a row is read-only."
         INDEX       { mplsLdpEntityLdpId,
                       mplsLdpEntityIndex,
                       mplsLdpPeerLdpId,
                       mplsLdpFrSessionMinDlci
                     }
         ::= { mplsLdpFrameRelaySessionTable 1 }


Expires February 2001                                          [Page 51]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


     MplsLdpFrameRelaySessionEntry ::= SEQUENCE {
         mplsLdpFrSessionMinDlci    Integer32,
         mplsLdpFrSessionMaxDlci    Integer32,
         mplsLdpFrSessionLen        INTEGER
     }


     mplsLdpFrSessionMinDlci OBJECT-TYPE
         SYNTAX      Integer32(0..4194303)
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "The lower bound of DLCIs which are supported."
         ::= { mplsLdpFrameRelaySessionEntry 1 }

     mplsLdpFrSessionMaxDlci OBJECT-TYPE
         SYNTAX      Integer32 (0..4194303)
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "The upper bound of DLCIs which are supported."
         ::= { mplsLdpFrameRelaySessionEntry 2 }

     mplsLdpFrSessionLen OBJECT-TYPE
         SYNTAX      INTEGER {
                         tenDlciBits(0),
                         twentyThreeDlciBits(2)
                     }
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "This object specifies the DLCI bits."
         ::= { mplsLdpFrameRelaySessionEntry 3 }


     --
     -- The MPLS LDP Session Statistics Table
     --


     mplsLdpSessionStatsTable OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpSessionStatsEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "A table of statistics for Sessions between
             LDP Entities and LDP Peers."
         ::= { mplsLdpSessionObjects 7 }

     mplsLdpSessionStatsEntry OBJECT-TYPE


Expires February 2001                                          [Page 52]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         SYNTAX      MplsLdpSessionStatsEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "An entry in this table represents statistical
             information on a single session between an LDP
             Entity and LDP Peer."
         AUGMENTS       { mplsLdpPeerEntry }
         ::= { mplsLdpSessionStatsTable 1 }

     MplsLdpSessionStatsEntry ::= SEQUENCE {
         mplsLdpSessionStatsUnknownMessageTypeErrors Counter32,
         mplsLdpSessionStatsUnknownTlvErrors         Counter32
     }

     mplsLdpSessionStatsUnknownMessageTypeErrors OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "This object counts the number of Unknown Message Type
             Errors detected during this session.

             Discontinuities in the value of this counter can occur
             at re-initialization of the management system, and at
             other times as indicated by the value of
             mplsLdpSeeionDiscontinuityTime."
         ::= { mplsLdpSessionStatsEntry 1 }

     mplsLdpSessionStatsUnknownTlvErrors OBJECT-TYPE
         SYNTAX      Counter32
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "This object counts the number of Unknown TLV Errors
             detected during this session.

             Discontinuities in the value of this counter can occur
             at re-initialization of the management system, and at
             other times as indicated by the value of
             mplsLdpSeeionDiscontinuityTime."
         ::= { mplsLdpSessionStatsEntry 2 }




     --
     -- Mpls FEC Table
     --


Expires February 2001                                          [Page 53]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


     mplsFecObjects OBJECT IDENTIFIER ::=
                                           { mplsLdpSessionObjects 8 }

     mplsFecIndexNext  OBJECT-TYPE
         SYNTAX      Unsigned32 (0..4294967295)
         MAX-ACCESS     read-only
         STATUS         current
         DESCRIPTION
             "This object contains an appropriate value to
             be used for mplsFecIndex when creating
             entries in the mplsFecTable. The value
             0 indicates that no unassigned entries are
             available. To obtain the mplsFecIndex
             value for a new entry, the manager issues a
             management protocol retrieval operation to obtain
             the current value of this object.  After each
             retrieval, the agent should modify the value to
             the next unassigned index."
        ::= { mplsFecObjects 1 }


     mplsFecTable OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsFecEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "This table represents the FEC
             (Forwarding Equivalence Class)
             Information associated with an LSP."
         ::= { mplsFecObjects 2 }

     mplsFecEntry OBJECT-TYPE
         SYNTAX      MplsFecEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "Each row represents a single FEC Element."
         INDEX       { mplsFecIndex }
         ::= { mplsFecTable 1 }

     MplsFecEntry ::= SEQUENCE {
         mplsFecIndex             Unsigned32,
         mplsFecType              INTEGER,
         mplsFecAddressLength     Integer32,
         mplsFecAddressFamily     AddressFamilyNumbers,
         mplsFecAddress           MplsLdpGenAddr,
         mplsFecStorageType       StorageType,
         mplsFecRowStatus         RowStatus
     }



Expires February 2001                                          [Page 54]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


     mplsFecIndex OBJECT-TYPE
         SYNTAX      Unsigned32(1..4294967295)
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "The index which uniquely identifies this entry."
         ::= { mplsFecEntry 1 }

     mplsFecType  OBJECT-TYPE
         SYNTAX      INTEGER {
                        prefix(1),
                        hostAddress(2)
                     }
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "The type of the FEC.  If the value of this object
             is 'prefix(1)' then the FEC type described by this
             row is for address prefixes.

             If the value of this object is 'hostAddress(2)' then
             the FEC type described by this row is a host address."
         ::= { mplsFecEntry 2 }

     mplsFecAddressLength  OBJECT-TYPE
         SYNTAX      Integer32(0..255)
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "If the value of 'mplsFecType' is 'prefix(1)'
             then the value of this object is the length in
             bits of the address prefix represented by
             'mplsFecAddress', or if the length is zero then
             this is a special value which indicates that the
             prefix matches all addresses.  In this case the
             prefix is also zero (i.e. 'mplsFecAddress' will
             have the value of zero.)"
         ::= { mplsFecEntry 3 }

     mplsFecAddressFamily  OBJECT-TYPE
         SYNTAX      AddressFamilyNumbers
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "The value of this object is from the Address Family
             Numbers."
         ::= { mplsFecEntry 4 }


     mplsFecAddress  OBJECT-TYPE


Expires February 2001                                          [Page 55]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         SYNTAX      MplsLdpGenAddr
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "If the value of 'mplsFecType' is 'prefix(1)'
             then the value of this object is the address prefix.
             If the value of the 'mplsFecAddressLength'
             is object is zero, then this object should also be
             zero.

             If the value of the 'mplsFecType' is 'host(2)'
             then this is the host address."
         ::= { mplsFecEntry 5 }

     mplsFecStorageType  OBJECT-TYPE
         SYNTAX      StorageType
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
                  "The storage type for this entry."
         ::= { mplsFecEntry 6 }

     mplsFecRowStatus OBJECT-TYPE
         SYNTAX      RowStatus
         MAX-ACCESS  read-create
         STATUS      current
         DESCRIPTION
             "An object that allows entries in this table to
              be created and deleted using the
              RowStatus convention."
         ::= { mplsFecEntry 7 }


     --
     --  Mapping Tables between Sessions and the LSR MIB.
     --


     --
     --  SessionInLabels and InSegment
     --

     mplsLdpSessionInLabelMapTable OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpSessionInLabelMapEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "A table of Session's Ingress Labels which
             are Mapped to the LSR MIB's mplsInSegmentTable.
             Each row represents a single Ingress Label."


Expires February 2001                                          [Page 56]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         ::= { mplsLdpSessionObjects 9 }

     mplsLdpSessionInLabelMapEntry OBJECT-TYPE
         SYNTAX      MplsLdpSessionInLabelMapEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "An entry in this table represents information on a
             single LDP LSP which is represented by
             a session's index triple (mplsLdpEntityLdpId,
             mplsLdpEntityIndex, mplsLdpPeerLdpId) AND the
             index tuple (mplsLdpSessionInLabel, mplsInSegmentIfIndex)
             from the LSR MIB's mplsInSegmentTable.
             The information contained in a row is read-only."
         INDEX       { mplsLdpEntityLdpId,
                       mplsLdpEntityIndex,
                       mplsLdpPeerLdpId,
                       mplsLdpSessionInLabelIfIndex,
                       mplsLdpSessionInLabel
                     }
         ::= { mplsLdpSessionInLabelMapTable 1 }

     MplsLdpSessionInLabelMapEntry ::= SEQUENCE {
         mplsLdpSessionInLabelIfIndex           InterfaceIndex,
         mplsLdpSessionInLabel                  MplsLabel,
         mplsLdpSessionInLabelType              MplsLdpLabelTypes,
         mplsLdpSessionInLabelConnectionType    INTEGER
     }

     mplsLdpSessionInLabelIfIndex OBJECT-TYPE
         SYNTAX       InterfaceIndex
         MAX-ACCESS   not-accessible
         STATUS       current
         DESCRIPTION
             "The ifIndex of the 'mplsLdpSessionInLabel' which should
             have the same value as the 'mplsInSegmentIfIndex' in
             the LSR MIB."
         ::= { mplsLdpSessionInLabelMapEntry 1 }

     mplsLdpSessionInLabel OBJECT-TYPE
         SYNTAX        MplsLabel
         MAX-ACCESS    not-accessible
         STATUS        current
         DESCRIPTION
             "The incoming label of this LSP.  This has the same value
             as the 'mplsInSegmentLabel' in the LSR MIB."
         ::= { mplsLdpSessionInLabelMapEntry 2 }

     mplsLdpSessionInLabelType  OBJECT-TYPE
         SYNTAX        MplsLdpLabelTypes


Expires February 2001                                          [Page 57]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         MAX-ACCESS    read-only
         STATUS        current
         DESCRIPTION
             "The Layer 2 Label Type for 'mplsLdpInLabel'."
         ::= { mplsLdpSessionInLabelMapEntry 3 }

     mplsLdpSessionInLabelConnectionType OBJECT-TYPE
         SYNTAX         INTEGER {
                           unknown(1),
                           xconnect(2),
                           terminates(3)
                        }
         MAX-ACCESS    read-only
         STATUS        current
         DESCRIPTION
             "The type of LSP connection.
             The possible values are:

             unknown(1) --    this may be the value if the LSP
                              is in a state of flux.  It is
                              considered to be a temporary
                              situation.
             xconnect(2) --   if the mapping between the
                              session and the insegment
                              is associated with an LSP which
                              is a true cross-connection.
             terminates(3) -- if the mapping between the
                              session and the insegment
                              is associated with an LSP which
                              terminates on this LSR and is
                              not a cross-connection."
         ::= { mplsLdpSessionInLabelMapEntry 4 }


     --
     --  SessionOutLabels and OutSegment
     --

     mplsLdpSessionOutLabelMapTable OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpSessionOutLabelMapEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "A table of Session's Egress Labels which
             are Mapped to the LSR MIB.
             Each row represents a single Egress Label."
         ::= { mplsLdpSessionObjects 10 }

     mplsLdpSessionOutLabelMapEntry OBJECT-TYPE
         SYNTAX      MplsLdpSessionOutLabelMapEntry


Expires February 2001                                          [Page 58]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "An entry in this table represents information on a
             single session between an LDP Entity and LDP Peer.
             The information contained in a row is read-only."
         INDEX       { mplsLdpEntityLdpId,
                       mplsLdpEntityIndex,
                       mplsLdpPeerLdpId,
                       mplsLdpSessionOutLabelIfIndex,
                       mplsLdpSessionOutLabel
                     }
         ::= { mplsLdpSessionOutLabelMapTable 1 }

     MplsLdpSessionOutLabelMapEntry ::= SEQUENCE {
         mplsLdpSessionOutLabelIfIndex        InterfaceIndex,
         mplsLdpSessionOutLabel               MplsLabel,
         mplsLdpSessionOutLabelType           MplsLdpLabelTypes,
         mplsLdpSessionOutLabelConnectionType INTEGER,
         mplsLdpSessionOutSegmentIndex        Integer32
     }

     mplsLdpSessionOutLabelIfIndex OBJECT-TYPE
         SYNTAX       InterfaceIndex
         MAX-ACCESS   not-accessible
         STATUS       current
         DESCRIPTION
             "The ifIndex of the 'mplsLdpSessionOutLabel'."
         ::= { mplsLdpSessionOutLabelMapEntry 1 }

     mplsLdpSessionOutLabel OBJECT-TYPE
         SYNTAX        MplsLabel
         MAX-ACCESS    not-accessible
         STATUS        current
         DESCRIPTION
             "The outgoing label of this LSP."
         ::= { mplsLdpSessionOutLabelMapEntry 2 }


     mplsLdpSessionOutLabelType  OBJECT-TYPE
         SYNTAX        MplsLdpLabelTypes
         MAX-ACCESS    read-only
         STATUS        current
         DESCRIPTION
             "The Layer 2 Label Type for 'mplsLdpOutLabel'."
         ::= { mplsLdpSessionOutLabelMapEntry 3 }

     mplsLdpSessionOutLabelConnectionType OBJECT-TYPE
         SYNTAX         INTEGER {
                           unknown(1),


Expires February 2001                                          [Page 59]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


                           xconnect(2),
                           starts(3)
                        }
         MAX-ACCESS    read-only
         STATUS        current
         DESCRIPTION
             "The type of LSP connection.
             The possible values are:

             unknown(1) --  this may be the value if the LSP
                            is in a state of flux.  It is
                            considered to be a temporary
                            situation.
             xconnect(2) -- if the mapping between the
                            session and the outsegment
                            is associated with an LSP which
                            is a true cross-connection.
             starts(3) -- if the mapping between the
                           session and the insegment
                           is associated with an LSP which
                           starts on this LSR and is
                           considered an ingress to the LSP."
         ::= { mplsLdpSessionOutLabelMapEntry 4 }

     mplsLdpSessionOutSegmentIndex  OBJECT-TYPE
        SYNTAX        Integer32(1..2147483647)
        MAX-ACCESS    read-only
        STATUS        current
        DESCRIPTION
            "This value should contain the same value as
            the 'mplsOutSegmentIndex' in the LSR MIB.

            NOTE: this value will never be zero, because
            this table only maps from Sessions to true
            outsegments."
        ::= { mplsLdpSessionOutLabelMapEntry 5 }


     --
     --  Sessions and XConnects  (LIB Information)
     --

     mplsLdpSessionXCMapTable OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpSessionXCMapEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "A table of Session's Labels which
             are Mapped to the LSR MIB 's XConnect table.
             Each row represents a single cross connect."


Expires February 2001                                          [Page 60]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         ::= { mplsLdpSessionObjects 11 }

     mplsLdpSessionXCMapEntry OBJECT-TYPE
         SYNTAX      MplsLdpSessionXCMapEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "An entry in this table represents information on a
             single session between an LDP Entity and LDP Peer.
             The information contained in a row is read-only."
         INDEX       { mplsLdpEntityLdpId,
                       mplsLdpEntityIndex,
                       mplsLdpPeerLdpId,
                       mplsLdpSessionInLabelIfIndex,
                       mplsLdpSessionInLabel,
                       mplsLdpSessionOutLabelIfIndex,
                       mplsLdpSessionOutLabel
                     }
         ::= { mplsLdpSessionXCMapTable 1 }

     MplsLdpSessionXCMapEntry ::= SEQUENCE {
         mplsLdpSessionXCIndex                 Integer32
     }

     mplsLdpSessionXCIndex  OBJECT-TYPE
        SYNTAX        Integer32(1..2147483647)
        MAX-ACCESS    read-only
        STATUS        current
        DESCRIPTION
            "This value should contain the same value as
            the 'mplsXCIndex' in the LSR MIB.

            NOTE: this value will never be zero, because
            this table only maps from Sessions to true
            cross connects."
        ::= { mplsLdpSessionXCMapEntry 1 }



     --
     --  XcrossConnectsFECs Table
     --

     mplsXCsFecsTable OBJECT-TYPE
        SYNTAX      SEQUENCE OF MplsXCsFecsEntry
        MAX-ACCESS  not-accessible
        STATUS      current
        DESCRIPTION
           "A table which shows the relationship between
           cross-connects and FECs.  Each row represents


Expires February 2001                                          [Page 61]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


           a single cross connect to FEC association.
           This table is read-only."
       ::= { mplsLdpSessionObjects 13 }

     mplsXCsFecsEntry OBJECT-TYPE
        SYNTAX     MplsXCsFecsEntry
        MAX-ACCESS not-accessible
        STATUS     current
        DESCRIPTION
           "An entry represents a single cross connect
           to FEC association."
        INDEX       { mplsLdpEntityLdpId,
                      mplsLdpEntityIndex,
                      mplsLdpPeerLdpId,
                      mplsLdpSessionInLabelIfIndex,
                      mplsLdpSessionInLabel,
                      mplsLdpSessionOutLabelIfIndex,
                      mplsLdpSessionOutLabel,
                      mplsFecIndex
        }
        ::= { mplsXCsFecsTable 1 }

     MplsXCsFecsEntry ::= SEQUENCE {
        mplsXCFecOperStatus           INTEGER,
        mplsXCFecOperStatusLastChange TimeStamp

     }

     mplsXCFecOperStatus  OBJECT-TYPE
        SYNTAX      INTEGER {
                              unknown(1),
                              inUse(2),
                              notInUse(3)
                            }
        MAX-ACCESS  read-only
        STATUS      current
        DESCRIPTION
           "An indication of the operational status of
           the FEC associated with this cross connect.

           unknown(1) - this is a temporary state which
                        may indicate the LSP-FEC association
                        is in a state of transition.

           inUse(2) - the FEC associated with the XC is
                      currently being applied.

           notInUse(3) - the FEC associated with the XC is
                         not being applied.  Eventually, this
                         entry may be aged out."


Expires February 2001                                          [Page 62]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


        ::= { mplsXCsFecsEntry 1 }

     mplsXCFecOperStatusLastChange  OBJECT-TYPE
        SYNTAX     TimeStamp
        MAX-ACCESS read-only
        STATUS     current
        DESCRIPTION
           "This value of sysUpTime when the
           mplsXCFecOperStatus last changed state."
        ::= { mplsXCsFecsEntry 2 }


     --
     -- Address Message/Address Withdraw Message Information
     --
     -- This information is associated with a specific Session
     -- because Label Address Messages are sent after session
     -- initialization has taken place.
     --

     mplsLdpSessionPeerAddressTable OBJECT-TYPE
         SYNTAX      SEQUENCE OF MplsLdpSessionPeerAddressEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "This table 'extends' the mplsLdpSessionTable.
             This table is used to store Label Address Information
             from Label Address Messages received by this LSR from
             Peers.  This table is read-only and should be updated
             when Label Withdraw Address Messages are received, i.e.
             Rows should be deleted as apropriate.

             NOTE:  since more than one address may be contained
             in a Label Address Message, this table 'extends',
             rather than 'AUGMENTS' the mplsLdpSessionTable's
             information."
         ::= { mplsLdpSessionObjects 12 }

     mplsLdpSessionPeerAddressEntry OBJECT-TYPE
         SYNTAX      MplsLdpSessionPeerAddressEntry
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "An entry in this table represents information on
             session's for a single next hop address which was
             advertised in an Address Message from the LDP peer.
             The information contained in a row is read-only."
         INDEX       { mplsLdpEntityLdpId,
                       mplsLdpEntityIndex,
                       mplsLdpPeerLdpId,


Expires February 2001                                          [Page 63]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


                       mplsLdpSessionPeerAddressIndex
                     }
         ::= { mplsLdpSessionPeerAddressTable 1 }

     MplsLdpSessionPeerAddressEntry ::= SEQUENCE {
         mplsLdpSessionPeerAddressIndex           Unsigned32,
         mplsLdpSessionPeerNextHopAddressType     AddressFamilyNumbers,
         mplsLdpSessionPeerNextHopAddress         MplsLdpGenAddr
     }

     mplsLdpSessionPeerAddressIndex OBJECT-TYPE
         SYNTAX      Unsigned32 (1..4294967295)
         MAX-ACCESS  not-accessible
         STATUS      current
         DESCRIPTION
             "An index which uniquely identifies this entry within
             a given session."
         ::= { mplsLdpSessionPeerAddressEntry 1 }

     mplsLdpSessionPeerNextHopAddressType OBJECT-TYPE
         SYNTAX      AddressFamilyNumbers
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "The internetwork layer address type of this Next Hop
             Address as specified in the Label Address Message
             associated with this Session. The value of this
             object indicates how to interpret the value of
             mplsLdpSessionPeerNextHopAddress."
         ::= { mplsLdpSessionPeerAddressEntry 2 }

     mplsLdpSessionPeerNextHopAddress OBJECT-TYPE
         SYNTAX      MplsLdpGenAddr
         MAX-ACCESS  read-only
         STATUS      current
         DESCRIPTION
             "The value of the next hop address."
         REFERENCE
             "LDP Specification [18] defines only IPv4 for LDP Protocol
             Version 1, see section 3.4.3."
         ::= { mplsLdpSessionPeerAddressEntry 3 }


     ---
     --- Notifications
     ---

     mplsLdpNotificationPrefix   OBJECT IDENTIFIER ::=
                                      { mplsLdpNotifications 0 }


Expires February 2001                                          [Page 64]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


     mplsLdpFailedInitSessionThresholdExceeded NOTIFICATION-TYPE
          OBJECTS     {
                        mplsLdpEntityFailedInitSessionThreshold
                      }
          STATUS      current
          DESCRIPTION
             "This notification is generated when the value of
             the 'mplsLdpEntityFailedInitSessionTrapEnable' object
             is 'enabled(1)' and the value of the
             'mplsLdpEntityFailedInitSessionThreshold' object has
             been exceeded."
          ::= { mplsLdpNotificationPrefix 1 }

     mplsLdpPathVectorLimitMismatch NOTIFICATION-TYPE
          OBJECTS     {
                        mplsLdpEntityPathVectorLimit,
                        mplsLdpPeerPathVectorLimit
                      }
          STATUS      current
          DESCRIPTION
             "This notification is generated when the value
             of the value of the
             'mplsLdpEntityFailedInitSessionTrapEnable'
             object is 'enabled(1)' and the
             'mplsLdpEntityPathVectorLimit' does NOT match
             the value of the 'mplsLdpPeerPathVectorLimit' for
             a specific Entity."
          REFERENCE
             "LDP Specification, Section 3.5.3."
          ::= { mplsLdpNotificationPrefix 2 }

     mplsLdpSessionUp NOTIFICATION-TYPE
          OBJECTS     {
                         mplsLdpSessionState
                      }
          STATUS      current
          DESCRIPTION
             "Generation of this trap occurs when the
             'mplsLdpSessionUpDownTrapEnable' object is 'enabled(1)'
             and the value of 'mplsLdpSessionState' changes from
             any state except 'nonexistent(1)' to 'operational(5)'."
          ::= { mplsLdpNotificationPrefix 3 }

     mplsLdpSessionDown NOTIFICATION-TYPE
          OBJECTS     {
                         mplsLdpSessionState
                      }
          STATUS      current
          DESCRIPTION
             "Generation of this trap occurs when the


Expires February 2001                                          [Page 65]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             'mplsLdpSessionUpDownTrapEnable' object is
             'enabled(1)' and the value of
             'mplsLdpSessionState' changes from
             'operational(5)' to any other state."
          ::= { mplsLdpNotificationPrefix 4 }


     --****************************************************************
     -- Module Conformance Statement
     --****************************************************************


     mplsLdpGroups
         OBJECT IDENTIFIER ::= { mplsLdpConformance 1 }

     mplsLdpCompliances
         OBJECT IDENTIFIER ::= { mplsLdpConformance 2 }

     --
     -- Compliance Statements
     --

     mplsLdpModuleCompliance MODULE-COMPLIANCE
         STATUS current
         DESCRIPTION
             "The basic implentation requirements for agents that
             support the MPLS LDP MIB."
         MODULE -- this module
             MANDATORY-GROUPS    { mplsLdpGeneralGroup,
                                   mplsLdpNotificationsGroup
                                 }

         GROUP mplsLdpGenericGroup
         DESCRIPTION
             "This group must be supported if Generic Labels
             are used in the MPLS LDP implementation."

         GROUP mplsLdpAtmGroup
         DESCRIPTION
             "This group must be supported if ATM is used in the
             MPLS LDP implementation."

         GROUP mplsLdpFrameRelayGroup
         DESCRIPTION
             "This group must be supported if Frame Relay is used
             in the MPLS LDP implementation."

         GROUP mplsLdpMappingGroup
         DESCRIPTION
             "This group must be supported if the LSR MIB is


Expires February 2001                                          [Page 66]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


             implemented, specifically the mplsInSegmentTable,
             the mplsOutSegmentTable or the mplsXCTable."

         ::= { mplsLdpCompliances 1 }



     -- units of conformance

     mplsLdpGeneralGroup OBJECT-GROUP
         OBJECTS {
         mplsLdpLsrId,
         mplsLdpLsrLoopDetectionCapable,
         mplsLdpEntityIndexNext,
         mplsLdpEntityProtocolVersion,
         mplsLdpEntityAdminStatus,
         mplsLdpEntityOperStatus,
         mplsLdpEntityWellKnownTcpDiscoveryPort,
         mplsLdpEntityWellKnownUdpDiscoveryPort,
         mplsLdpEntityMaxPduLength,
         mplsLdpEntityKeepAliveHoldTimer,
         mplsLdpEntityHelloHoldTimer,
         mplsLdpEntityFailedInitSessionTrapEnable,
         mplsLdpEntityFailedInitSessionThreshold,
         mplsLdpEntityLabelDistributionMethod,
         mplsLdpEntityLabelRetentionMode,
         mplsLdpEntityPVLimitMismatchTrapEnable,
         mplsLdpEntityPathVectorLimit,
         mplsLdpEntityHopCountLimit,
         mplsLdpEntityTargetedPeer,
         mplsLdpEntityTargetedPeerAddrType,
         mplsLdpEntityTargetedPeerAddr,
         mplsLdpEntityOptionalParameters,
         mplsLdpEntityDiscontinuityTime,
         mplsLdpEntityStorageType,
         mplsLdpEntityRowStatus,
         mplsLdpAttemptedSessions,
         mplsLdpSessionRejectedNoHelloErrors,
         mplsLdpSessionRejectedAdvertisementErrors,
         mplsLdpSessionRejectedMaxPduErrors,
         mplsLdpSessionRejectedLabelRangeErrors,
         mplsLdpBadLdpIdentifierErrors,
         mplsLdpBadPduLengthErrors,
         mplsLdpBadMessageLengthErrors,
         mplsLdpBadTlvLengthErrors,
         mplsLdpMalformedTlvValueErrors,
         mplsLdpKeepAliveTimerExpiredErrors,
         mplsLdpShutdownNotifReceived,
         mplsLdpShutdownNotifSent,
         mplsLdpPeerLabelDistributionMethod,


Expires February 2001                                          [Page 67]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         mplsLdpPeerLoopDetectionForPV,
         mplsLdpPeerPathVectorLimit,
         mplsLdpHelloAdjacencyHoldTimeRemaining,
         mplsLdpHelloAdjacencyType,
         mplsLdpSessionUpDownTrapEnable,
         mplsLdpSessionState,
         mplsLdpSessionProtocolVersion,
         mplsLdpSessionKeepAliveHoldTimeRemaining,
         mplsLdpSessionMaxPduLength,
         mplsLdpSessionDiscontinuityTime,
         mplsLdpSessionStatsUnknownMessageTypeErrors,
         mplsLdpSessionStatsUnknownTlvErrors,
         mplsLdpSessionPeerNextHopAddressType,
         mplsLdpSessionPeerNextHopAddress,
         mplsFecIndexNext,
         mplsFecType,
         mplsFecAddressFamily,
         mplsFecAddressLength,
         mplsFecAddress,
         mplsFecStorageType,
         mplsFecRowStatus
         }
         STATUS    current
         DESCRIPTION
             "Objects that apply to all MPLS LDP implementations."
         ::= { mplsLdpGroups 1 }


     mplsLdpGenericGroup OBJECT-GROUP
         OBJECTS {
         mplsLdpEntityConfGenericIfIndexOrZero,
         mplsLdpEntityConfGenericLabelRangeStorageType,
         mplsLdpEntityConfGenericLabelRangeRowStatus
         }
         STATUS    current
         DESCRIPTION
             "Objects that apply to all MPLS LDP implementations
             using Generic Lables."
         ::= { mplsLdpGroups 2 }


     mplsLdpAtmGroup OBJECT-GROUP
         OBJECTS {
         mplsLdpEntityAtmIfIndexOrZero,
         mplsLdpEntityAtmMergeCap,
         mplsLdpEntityAtmLabelRangeComponents,
         mplsLdpEntityAtmVcDirectionality,
         mplsLdpEntityAtmLsrConnectivity,
         mplsLdpEntityDefaultControlVpi,
         mplsLdpEntityDefaultControlVci,


Expires February 2001                                          [Page 68]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         mplsLdpEntityUnlabTrafVpi,
         mplsLdpEntityUnlabTrafVci,
         mplsLdpEntityAtmStorageType,
         mplsLdpEntityAtmRowStatus,
         mplsLdpEntityConfAtmLabelRangeMaximumVpi,
         mplsLdpEntityConfAtmLabelRangeMaximumVci,
         mplsLdpEntityConfAtmLabelRangeStorageType,
         mplsLdpEntityConfAtmLabelRangeRowStatus,
         mplsLdpSessionAtmLabelRangeUpperBoundVpi,
         mplsLdpSessionAtmLabelRangeUpperBoundVci

         }
         STATUS    current
         DESCRIPTION
             "Objects that apply to all MPLS LDP implementations
             over ATM."
         ::= { mplsLdpGroups 3 }

     mplsLdpFrameRelayGroup OBJECT-GROUP
         OBJECTS {
         mplsLdpEntityFrIfIndexOrZero,
         mplsLdpEntityFrMergeCap,
         mplsLdpEntityFrLabelRangeComponents,
         mplsLdpEntityFrLen,
         mplsLdpEntityFrVcDirectionality,
         mplsLdpEntityFrParmsStorageType,
         mplsLdpEntityFrParmsRowStatus,
         mplsLdpConfFrMaximumDlci,
         mplsLdpConfFrStorageType,
         mplsLdpConfFrRowStatus,
         mplsLdpFrSessionMaxDlci,
         mplsLdpFrSessionLen
         }
         STATUS    current
         DESCRIPTION
             "Objects that apply to all MPLS LDP implementations over
             Frame Relay."
         ::= { mplsLdpGroups 4 }


     mplsLdpMappingGroup OBJECT-GROUP
         OBJECTS {
         mplsLdpSessionInLabelType,
         mplsLdpSessionInLabelConnectionType,
         mplsLdpSessionOutLabelType,
         mplsLdpSessionOutLabelConnectionType,
         mplsLdpSessionOutSegmentIndex,
         mplsLdpSessionXCIndex,
         mplsXCFecOperStatus,
         mplsXCFecOperStatusLastChange


Expires February 2001                                          [Page 69]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


         }
         STATUS    current
         DESCRIPTION
             "These objects are optional and only need to be supported
             for LDP implementations which support the
             tables, mplsInSegmentTable, mplsOutSegmentTable
             and mplsXCTable, in the LSR MIB."
         ::= { mplsLdpGroups 5 }


     mplsLdpNotificationsGroup NOTIFICATION-GROUP
         NOTIFICATIONS { mplsLdpFailedInitSessionThresholdExceeded,
                         mplsLdpPathVectorLimitMismatch,
                         mplsLdpSessionUp,
                         mplsLdpSessionDown
                            }
         STATUS   current
         DESCRIPTION
             "The notification(s) which an MPLS LDP implemention
              is required to implement."
         ::= { mplsLdpGroups 6 }


     END



























Expires February 2001                                          [Page 70]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


5.  Revision History

   This section should be removed when this document is published as an
   RFC.


5.1.  Changes from <draft-ietf-mpls-ldp-mib-06.txt>

   All changes were from the second last call which took place Thursday,
   July 20th, until Thursday, July 27th, 2000 and are described in the
   remainder of this section.

   Remove the reference to the MPLS framework document.

   Add an mplsFecIndexNext type of object.

   Change the conformance of the FEC table objects to be part of the
   mplsLdpGeneralGroup.

   The mplsLdpEntityConfGenericTable is no longer needed because the
   functionality has been absorbed by the
   mplsLdpEntityConfGenericLabelRangeTable. The
   mplsLdpEntityConfGenericTable has been removed and the front section
   was updated accordingly.

   Other editorial issues, updating references, typos and so forth.


5.2.  Changes from <draft-ietf-mpls-ldp-mib-05.txt>

   The majority of changes in this revision are based on Last Call
   comments which were received during the last call from Thursday,
   March 9, 2000 to Friday, March 17, 2000, or slightly thereafter.
   Also, changes were made to agree with the latest specifications.
   These changes are described in this section.

   Changes due to draft-ietf-mpls-ldp-07.txt and draft-ietf-mpls-ldp-
   08.txt. Specifically, removing references to IPv4/IP and using router
   id, as appropriate.

   Removed vpMerge and vpAndVcMerge choices from the object,
   mplsLdpEntityAtmMergeCap.  VP Merge is not described in [30].

   The LIB Table was removed and replaced by mapping tables to map LDP
   LSPs created by LDP sessions to the mplsInSegment, mplsOutSegment and
   mplsXC  tables in the LSR MIB.  The conformance section was updated
   to include a Mapping Group which is to be implemented iff these LSR
   MIB tables (mplsInSegmentTable, mplsOutSegmentTable and mplsXCTable)
   are implemented.


Expires February 2001                                          [Page 71]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


   The front section was updated to include information on the Generic
   label table.

   Added more in the front section on on Row
   Creation/adminStatus/OperStatus in the LDP Entity and related tables.

   Added a generic label range table. NOTE: there is NO corresponding
   LDP message which relates to the information in this table, however,
   this table does provide a way for a user to 'reserve' a generic label
   range.

   A new TEXTUAL-CONVENTION, MplsAtmVcIdentifier was added.  This TC has
   the same upper bounds as AtmVcIdentifier (from rfc2514) except that
   the lower bound is 32 (and not 0).  The lower bound is 32 since this
   value is specified by [30].

   Removed the scalar object mplsLsrLabelRetentionMode and added
   mplsLdpEntityLabelRetentionMode.  The change was made to allow
   configuring the retention mode on a per LDP Entity basis, as opposed
   for the entire LSR.

   Typo in section 3.5.2 was fixed.

   Typo in the mplsLdpSessionUp notification description was fixed.

   Section 'LDP Notifications' was expanded to cover both the
   'mplsLdpSessionUp' and 'mplsLdpSessionDown' traps.  Also, the objects
   which enable and disable these traps have been described in this
   Section:

   The 'mplsLdpEntityHopCountLoopDetection' object and the
   'mplsLdpEntityHopCount' object have been combined into the new
   object, 'mplsLdpEntityHopCountLimit'.

   MplsLabel has been updated to reflect the VPI value of 12 bits and
   not 8.

   Added DEFVAL clause to the 'mplsLdpEntityWellKnownDiscoveryPort'
   object.  The default value is 646.

   Added UNITS and DEFVAL clauses to the 'mplsLdpEntityMaxPduLength'
   object.  The default value is 4096 and the units is octets.

   Added DEFVAL clause to 'mplsLdpEntityProtocolVersion' object.  The
   default value is 1.

    Added DEFVAL clause to 'mplsLdpEntityKeepAliveHoldTimer' of 40
   seconds.

   Added DEFVAL clause to 'mplsLdpEntityFailedInitSessionThreshold'


Expires February 2001                                          [Page 72]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


   object.  The default value is 8.

   The mplsLdpEntityWellKnownDiscoveryPort was changed into two objects,
   one for TCP and one for UDP.  The names are

   Typo in the description for the

   The mplsLdpEntityPeerTable was (re-)named mplsLdpPeerTable.  The
   mplsLdpSessionTable now AUGMENTs the mplsLdpPeerTable in order to
   show that these two tables are related.  There has been wording added
   to the mplsLdpSessionEntry description and to the description for the
   mplsLdpPeerTable.


5.3.  Changes from <draft-ietf-mpls-ldp-mib-04.txt>

   Editorial changes, fixing typo's, fixing wrapping lines, etc.

   Updated references for latest drafts, and added [31] and [32] to
   Reference Section.

   Added to the Acknowledgements Section.

   Changed the SYNTAX and DESCRIPTION of the
   'mplsLdpLsrLoopDetectionCapable' object, so that it will also support
   the loop detection by hop count.

   Combined the 'mplsLdpEntityLoopDetectionForPV' and
   'mplsLdpEntityPathVectorLimit' objects.  The functionality of the
   'mplsLdpEntityLoopDectionForPV' is now denoted by the value of 0
   (zero) in the 'mplsLdpEntityPathVectorLimit' object.  This results in
   one less object 'mplsLdpEntityLoopDectionForPV' but does not
   sacrifice functionality.

   Changed 'mplsLdpLibLabelType' into two objects:
   'mplsLdpLibInLabelType' and differ from the egress label type.  The
   MIB now reflects this.

   The following items were changed as a result of the Frame Relay Forum
   dropping support for 17-bit DLCIs:  the MplsLabel TC description has
   been modified, and other Frame Relay Object descriptions were also
   modified (as specified in this section).

   The MplsLabel TC was also modified and reference 3. was added to the
   REFERENCE Clause.

   MplsLdpLabelTypes TC was modified to use an enum.

   InterfaceIndex support was added to the Entity information.  This was
   specifically requested by several members of the working group.  An


Expires February 2001                                          [Page 73]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


   additional table, mplsLdpEntityConfGenericTable as a way to configure
   Generic Labels, and an object, 'mplsLdpConfGenericIfIndexOrZero was
   added to map the InterfaceIndex used by Generic Labels.  Objects were
   also added to the 'mplsLdpEntityAtmParmsTable' and the and
   'mplsLdpEntityFrIfIndex', respectively.

   Changed the name of the 'mplsLdpEntityMtu' object to be
   'mplsLdpEntityMaxPduLength' which is more consistent with the LDP
   Specification.  Also, the description and SYNTAX were changed.

   Changed the SYNTAX of the 'mplsLdpSessionMaxPduLength' to unsigned32
   and changed the Range from (0..65535) to (1..65535).

   Added and improved the front section discussion on SNMP
   Notifications.

   Also, modified the DESCRIPTION clause of the

   Added objects to enable/disable the sending of traps:

   Added an object to enable/disable sending traps for Sessions changing
   from Up to Down, or Down to Up.

   Added notifications to generate traps from session changing from Up
   to Down, or Down to up.

   Added a StorageType object to the Entity and associated tables which
   are configurable.

   Added a Discontinuity Time object to the Entity Table,

   Added discussion on row creation in the Entity and other associated
   Entity tables.  This is a new Section in the Front part of the
   document called:

   Removed the 'mplsLdpEntityControlMethod'.

   Made 'mplsLdpFecLspId' as part of the INDEX for the FEC table.  This
   is to allow FECs to map to multiple LSPs.  Also add a RowPointer to a
   row in the Session Table.

   Added an operation status object, 'mplsLdpLspOperStatus' and a last
   Change object, 'mplsLdpLspLastChangeto the LIB Table.  This will be
   used to detect whether an LSP has changed its status.

   Changed the name of the mplsLdpPeerTable to the
   mplsLdpEntityPeerTable.  This table contains information relevant to
   Peers which are known to specific Entities.  The indexing of this
   table has also changed to include the Row in the Entity Table that
   this Peer is known by.  The mplsLdpHelloAdjacencyTable and the


Expires February 2001                                          [Page 74]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


   mplsLdpSessionTable have been moved under this table.  Since Hello
   Adjacencies are related to Entity-Peer information and Sessions are
   related to Entity-Peer information this was seen as a comprehensive
   and coherent modelling.  Associated descriptions in the front section
   and in the tables have been changed to reflect this change.

   Moved the 'mplsLdpConfFrLen' object from the
   'mplsLdpEntityConfFrLabelRangeTable' to the
   'mplsLdpEntityFrameRelayParmsTable' since the Frame Relay
   interface/port can only use one header length at a time, i.e. a
   specific FR interface supports one address length for all VCs on that
   interface. Also, changed the object so that it only supports 10 and
   23 bit DLCI lengths. (The 17 bit length was dropped by the Frame
   Relay Forum and thus, is no longer required.)  The name of this
   object was changed from 'mplsLdpConfFrLen' to 'mplsLdpEntityFrLen' to
   fit in with the 'mplsLdpEntityFrameRelayParmsTable'.

   Removed the seventeenDlciBits(1) value from the mplsLdpFrSessionLen
   object.  (The 17 bit length was dropped by the Frame Relay Forum and
   thus, is no longer required.)

   Corrected the range of the 'mplsLdpEntityIndexNext' object to include
   0 (zero).


5.4.  Changes from <draft-ietf-mpls-ldp-mib-03.txt>

   Reworded the description of the mplsLdpAtmSessionTable to clarify
   that one or MORE label range intersection(s) is/are represented in
   this table.

   Reworded the description of the mplsLdpFrameRelaySessionTable to
   clarify that one or MORE label range intersection(s) is/are
   represented in this table.

   Added a new index, mplsLdpSessionPeerIndex, to the
   mplsLdpSessionPeerAddressTable.  This new index uniquely identifies
   the entry within a given session.  (Since  adding
   mplsLdpSessionPeerNextHopAddressType,
   mplsLdpSessionPeerNextHopAddress to the INDEX clause of the
   mplsLdpSessionPeerAddressTable leaves a table with only indices and
   no objects, the work around was to add a new index which uniquely
   differentiates an entry within a given session.)

   Quite a few changes to the mplsLdpPeerTable. First, removed the
   mplsLdpPeerIndex from the mplsLdpPeerTable and other tables.  This
   index served no purpose, so was removed.  Second, removed the
   objects:  mplsLdpPeerInternetworkAddrType, and
   mplsLdpPeerInternetworkAddr. Third, reworded the description of this
   table to include information which is known during Session


Expires February 2001                                          [Page 75]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


   Intialization attempts, the specific information has to do with Loop
   Dection based on Path Vectors.  Since Section 3.5.3 of the LDP Spec
   when describing the PVLim says:  "Although knowledge of a peer's path
   vector limit will not change an LSR's behavior, it does enable the
   LSR to alert an operator to a possible misconfiguration." and the
   object mplsLdpPeerPathVectorLimit is sent as a varbind in the
   mplsLdpPathVectorLimitMismatch notification.

   Removed the mplsLdpPeerIndex from the mplsLdpHelloAdjacencyTable.

   Removed the "IANA Address Family Numbers MIB" section.

   Updated the boiler.me from the ops web page dated Weds., Dec 22,
   1999.

   Updated the Security Section from the ops web page.

   Added the following objects to the mplsLdpEntityTable:
   mplsLdpEntityControlMethod, mplsLdpEntityLoopDectionForPV, and
   mplsLdpEntityPathVectorLimit.

   Removed mplsLdpSessionLabelAdvertisement,
   mplsLdpSessionLoopDetectionForPV, and mplsLdpSessionPathVectorLimit
   from the mplsLdpSessionTable.

   Changed the mplsLdpPathVectorLimitMismatch Notification to send
   mplsLdpEntityPathVectorLimit (instead of
   mplsLdpSessionPathVectorLimit).

   Copied the MplsLabel TC from draft-ietf-mpls-lsr-mib-00.txt and
   replaced the MplsLdpGenAddr for mplsLdpLibInLabel and
   mpslLdpLibOutLabel with MplsLabel.

   The mplsLdpSessionIndex was removed throughout the MIB. This was
   replaced by the object mplsLdpSessionDiscontinuityTime.  The
   motivation was to reduce the number of indices.

   The descriptions for the objects in the mplsLdpSessionStatsTable,
   mplsLdpSessionStatsUnknownMessageTypeErrors and
   mplsLdpSessionStatsUnknownTlvErrors, have been updated to include a
   reference to the mplsLdpSessionDiscontinuityTime object.


5.5.  Changes from <draft-ietf-mpls-ldp-mib-02.txt>

   Added Scalar Objects:  mplsLdpLsrLoopDetectionPresent, and
   mplsLdpEntityIndexNext.

   Added the following objects to the mplsLdpEntityTable:
   mplsLdpEntityProtocolVersion, mplsLdpEntityAdminStatus,


Expires February 2001                                          [Page 76]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


   mplsLdpEntityOperStatus, mplsLdpEntityTargetedPeer,
   mplsLdpEntityTargetedPeerAddrType, mplsLdpEntityTargetedPeerAddr, and
   mplsLdpEntityHelloHoldTimer.

   Changed the description of the mplsLdpEntityAtmParmsTable and added
   the following objects to this table:
   mplsLdpEntityAtmLsrConnectivity, mplsLdpEntityDefaultControlVpi,
   mplsLdpEntityDefaultControlVci, mplsLdpEntityUnlabTrafVpi, and
   mplsLdpEntityUnlabTrafVci.  NOTE:  the last four objects were in
   Version 01 of the MIB but were mistakenly omitted from Version 02.
   Now, they are back.

   Changed the indexing of the mplsLdpEntityConfAtmLabelRangeTable to
   include the minimum VPI/VCI.  This is to ensure that indices in this
   table are unique.

   Changed the indexing of the mplsLdpEntityConfFrLabelRangeTable, to
   include the minimum DLCI value.  This is to ensure that indices in
   this table are unique.

   Added [30] to Reference Section.


5.6.  Changes from <draft-ietf-mpls-ldp-mib-01.txt>

   The MIB was updated to correspond to draft-ietf-mpls-ldp-06.txt of
   the LDP Specification [18].

   The front section was updated.

   The MIB was made to be less ATM-centric.  Essentially, the ATM
   specific objects where removed from the tables and placed in ATM
   specific Tables.  A "type" was added to the "base" tables and a row
   is to be created in the ATM/FR/etc.  "type" table.  Apropos
   compliance statements were added to reflect the separation of ATM and
   Frame Relay objects into their respective tables.

   Objects for Loop Detection were removed from describing the LDP
   implementation (i.e. the scalars were removed) and Loop Dection
   objects were added to the Session Table.  (Although as the LDP
   Specification indicates loop detection should be for an LSR within a
   domain.)

   The following tables were added:  mplsLdpEntityAtmParmsTable,
   mplsLdpEntityConfAtmLabelRangeTable, mplsLdpFrameRelayParmsTable,
   mplsLdpConfFrLabelRangeTable, mplsLdpAtmSessionTable,
   mpslLdpFrameRelaySessionTable, mplsLdpSessionPeerAddressTable,
   mplsLdpLibTable, and the mplsLdpFecTable.

   The following notifications were added:  notification for Session


Expires February 2001                                          [Page 77]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


   removal.

   The following objects were removed from the Session Table:
   mplsLdpSessionRole was removed (this can be determined by comparing
   LSR Ids and does not need to be explicitely in the MIB.)  ATM
   specific objects (mplsLdpSessionAtmLabelRangeLowerBoundVpi
   mplsLdpSessionAtmLabelRangeLowerBoundVci,
   mplsLdpSessionAtmLabelRangeUpperBoundVpi
   mplsLdpSessionAtmLabelRangeUpperBoundVci) were removed and put into a
   separate table.  Frame Relay objects were added in a separate table.

   Hello Adjacency Table was updated.

   The objects, mplsLdpSessionRejectedParamErrors,
   mplsLdpSessionRejectedNoHelloErrors, mplsLdpBadLdpIdentifierErrors,
   mplsLdpBadPduLengthErrors, mplsLdpBadMessageLengthErrors,
   mplsLdpBadTlvLengthErrors, mplsLdpMalformedTlvValueErrors,
   mplsLdpKeepAliveTimerExpiredErrors, mplsLdpShutdownNotifReceived, and
   mplsLdpShutdownNotifSent were added to the mplsLdpEntityStatsTable.

   The mplsLdpSessionStatsTable was added to count statics based on a
   per Session basis.

   The mplLdpPeerConfAtmLabelRangeTable has been removed.  There is no
   need to configure information for a Peer.  All information for a peer
   is learned, thus peer information is read-only.

   (Editorial) References were updated to reflect the documents which
   this version was based on.


5.7.  Changes from <draft-ietf-mpls-ldp-mib-00.txt>

   Textual conventions were added for the LSR Identifier and the LDP
   Identifier.

   Top-level mib structure was added. The LDP MIB falls under a proposed
   hierarchy of mpls.mplsProtocols.

   The mib hierarchy within the LDP MIB was also changed.  A new branch,
   under mpls.mplsProtocols.mplsLdpMIB.mplsLdpObjects was added.  This
   branch is mplsLdpLsrObjects.  Currently, this contains several new
   scalar objects:  mplsLdpLsrID, mplsLdpLsrLoopDetectionPresent,
   mplsLdpLsrLoopDetectinAdminStatus, mplsLdpLsrPathVectorLimit,
   mplsLdpLsrHopCountLimit, mplsLdpLsrLoopPreventionPresent,
   mplsLdpLsrLoopPreventionAdminStatus, and
   mplsLdpLsrLabelRetentionMode.

   mplsLdpEntityTable is now indexed by mplsLdpEntityIdentifier, which
   is the LDP Identifier used in Session establishment.


Expires February 2001                                          [Page 78]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


   mplsLdpEntityLoopDetection and mplsLdpEntityLoopPrevention objects
   were removed from this table.

   The following objects were added to the mplsLdpEntityTable:
   mplsLdpEntityLabelSpaceType, mplsLdpEntityUnlabTrafVpi,
   mplsLdpEntityUnlabTrafVci, mplsLdpEntityMergeCapability,
   mplsLdpEntityVcDirectionality, and
   mplsLdpEntityLabelDistributionMethod.

   The following objects were added to the mplsLdpPeerEntityTable:
   mplsLdpPeerLabelDistributionMethod.

   The following object was removed from the mplsLdpEntityStatsTable:
   mplsLdpEntityEstablishedSessions.

   References were added and revised.


6.  Acknowledgments

   The authors would like to thank the following people:  Leigh
   McLellan, Geetha Brown, Geping Chen and Charlan Zhou from Nortel
   Networks, and Zoltan Takacs and Bo Augustsson from Ericsson.  Also,
   some members of the working group were very helpful with comments and
   corrections to the MIB; the authors would like to thank Adrian Farrel
   of Data Connection, and Alan Kullberg from Harris & Jeffries.

























Expires February 2001                                          [Page 79]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


7.  References

[RFC2571]   Harrington, D., Presuhn, R., and B. Wijnen, "An Architecture
            for Describing SNMP Management Frameworks", RFC 2571, April
            1999.

[RFC1155]   Rose, M., and K. McCloghrie, "Structure and Identification
            of Management Information for TCP/IP-based Internets", STD
            16, RFC 1155, May 1990.

[RFC1212]   Rose, M., and K. McCloghrie, "Concise MIB Definitions", STD
            16, RFC 1212, March 1991.

[RFC1215]   M. Rose, "A Convention for Defining Traps for use with the
            SNMP", RFC 1215, March 1991.

[RFC2578]   McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J.,
            Rose, M., and S. Waldbusser, "Structure of Management
            Information Version 2 (SMIv2)", STD 58, RFC 2578, April
            1999.

[RFC2579]   McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J.,
            Rose, M., and S. Waldbusser, "Textual Conventions for
            SMIv2", STD 58, RFC 2579, April 1999.

[RFC2580]   McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J.,
            Rose, M., and S. Waldbusser, "Conformance Statements for
            SMIv2", STD 58, RFC 2580, April 1999.

[RFC1157]   Case, J., Fedor, M., Schoffstall, M., and J. Davin, "Simple
            Network Management Protocol", STD 15, RFC 1157, May 1990.

[RFC1901]   Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,
            "Introduction to Community-based SNMPv2", RFC 1901, January
            1996.

[RFC1906]   Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,
            "Transport Mappings for Version 2 of the Simple Network
            Management Protocol (SNMPv2)", RFC 1906, January 1996.

[RFC2572]   Case, J., Harrington D., Presuhn R., and B. Wijnen, "Message
            Processing and Dispatching for the Simple Network Management
            Protocol (SNMP)", RFC 2572, April 1999.

[RFC2574]   Blumenthal, U., and B. Wijnen, "User-based Security Model
            (USM) for version 3 of the Simple Network Management
            Protocol (SNMPv3)", RFC 2574, April 1999.

[RFC1905]   Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,
            "Protocol Operations for Version 2 of the Simple Network


Expires February 2001                                          [Page 80]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


            Management Protocol (SNMPv2)", RFC 1905, January 1996.

[RFC2573]   Levi, D., Meyer, P., and B. Stewart, "SNMPv3 Applications",
            RFC 2573, April 1999.

[RFC2575]   Wijnen, B., Presuhn, R., and K. McCloghrie, "View-based
            Access Control Model (VACM) for the Simple Network
            Management Protocol (SNMP)", RFC 2575, April 1999.

[RFC2570]   Case, J., Mundy, R., Partain, D., and B. Stewart,
            "Introduction to Version 3 of the Internet-standard Network
            Management Framework", RFC 2570, April 1999.

[17] Narten, T., and H. Alvestrand, "Guidelines for Writing an IANA
     Considerations Section in RFCs.", RFC 2434, IBM, Maxware, October
     1998

[18] Andersson, L., Doolan, P., Feldman, N., Fredette, A., and B.
     Thomas, "LDP Specification.", draft-ietf-mpls-ldp-11.txt, August
     2000.

[19] Rosen, E., Viswananthan, A., and R. Callon, "Multiprotocol Label
     Switching Architecture", draft-ietf-mpls-arch-07.txt, July 2000.

[20] Jamoussi, B., editor, "Constraint-Based LSP Setup using LDP",
     draft-ietf-mpls-cr-ldp-04.txt, July 2000.

[21] Bradner, S., "Key words for use in RFCs to Indicate Requirement
     Levels", BCP 14, RFC 2119, Harvard University, March 1997

[22] Bradner, S., "The Internet Standards Process -- Revision 3", BCP 9,
     RFC 2026, Harvard University, October 1996

[23] Srinivansan, C., Viswanathan, A., and T. Nadeau "MPLS Label Switch
     Router Management Information Base Using SMIv2", draft-ietf-mpls-
     lsr-mib-06.txt, July 2000.

[24] Greene, M., Cucchiara, J., and J. Luciani, "Definition of Managed
     Objects for the NBMA Next Hop Resolution Protocol (NHRP)", RFC
     2677, August 1999.

[25] Internet Assigned Numbers Authority (IANA), ADDRESS FAMILY NUMBERS,
     (http://www.isi.edu/in-notes/iana/assignments/address-family-
     numbers), for MIB
     (ftp://ftp.isi.edu/mib/ianaaddressfamilynumbers.mib).

[26] Noto, M., E. Spiegel, K. Tesink, "Definition of Textual Conventions
     and OBJECT-IDENTITIES for ATM Management", RFC 2514, February 1999.



Expires February 2001                                          [Page 81]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


[27] McCloghrie, K., F. Kastenholz,  "The Interfaces Group MIB using
     SMIv2", RFC 2233, November 1997.

[28] Tesink, K. (ed.) "Definitions of Managed Objects for ATM
     Management", RFC 2515, February 1999.

[29] Grossman, D., and J. Heinanen, "Multiprotocol Encapsulation over
     ATM Adaptation Layer 5", RFC 2684, September 1999.

[30] Davie, B., Lawrence, J., McCloghrie, K., Rekhter, Y., Rosen, E.,
     Swallow, G.  and P. Doolan, "MPLS using LDP and ATM VC Switching",
     draft-ietf-mpls-atm-04.txt, June 2000.

[31] Rosen, E., Rekhter, Y., Tappan, D., Farinacci, D., Fedorkow, G.,
     Li, T. and A. Conta, "MPLS Label Stack Encoding", draft-ietf-mpls-
     label-encaps-08.txt, July 2000.

[32] Conta, A., Doolan, P., and A. Malis, "Use of Label Switching on
     Frame Relay Networks Specification", draft-ietf-mpls-fr-06.txt,
     June 2000.

[33] Boscher, C., Cheval, P., Liwen, W. and E. Gray, "LDP State
     Machine", draft-ietf-mpls-ldp-state-03.txt, January 2000.

[34] Thomas, B. and E. Gray, "LDP Applicability", draft-ietf-mpls-ldp-
     applic-02.txt, August 2000.

[35] Daniele, M., Haberman, B., Routhier, S. and J. Schoenwaelder,
     "Textual Coventions for Internet Network Addresses", RFC 2851, June
     2000.



8.  Security Considerations


There are a number of management objects defined in this MIB that have a
   MAX-ACCESS clause of read-write and/or read-create.  Such objects may
   be considered sensitive or vulnerable in some network environments.
   The support for SET operations in a non-secure environment without
   proper protection can have a negative effect on network operations.


There are a number of managed objects in this MIB that may contain
   sensitive information. These are contained in the mplsLdpEntityTable.
   The objects contained in this table are responsible for setting up or
   tearing down LSPs.

   It is thus important to control even GET access to these objects and
   possibly to even encrypt the values of these object when sending them


Expires February 2001                                          [Page 82]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


   over the network via SNMP.  Not all versions of SNMP provide features
   for such a secure environment.


SNMPv1 by itself is not a secure environment.  Even if the network
   itself is secure (for example by using IPSec), even then, there is no
   control as to who on the secure network is allowed to access and
   GET/SET (read/change/create/delete) the objects in this MIB.

   It is recommended that the implementers consider the security
   features as provided by the SNMPv3 framework.  Specifically, the use
   of the User-based Security Model RFC 2574 [RFC2574] and the View-
   based Access Control Model RFC 2575 [RFC2575] is recommended.

   It is then a customer/user responsibility to ensure that the SNMP
   entity giving access to an instance of this MIB, is properly
   configured to give access to the objects only to those principals
   (users) that have legitimate rights to indeed GET or SET
   (change/create/delete) them.


9.  Authors' Addresses


                  James V. Luciani
                  TollBridge Technologies
                  PO BOX 1010
                  Concord, MA 01742
                  USA
                  Phone: (978) 266-2854
                  Email: jluciani@tollbridgetech.com

                  Hans Sjostrand
                  Ericsson Telecom AB
                  Business Unit Data Backbone and Optical Networks
                  S-126 25 Stockholm, Sweden
                  Phone: +46 8 719 9960
                  Email: hans.sjostrand@ericsson.com

                  Joan Cucchiara
                  Brix Networks
                  300 Concord Ave.
                  Billerica, MA  01821
                  USA
                  Phone: (978) 439-1523
                  Email: jcucchiara@brixnet.com





Expires February 2001                                          [Page 83]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000


10.  Full Copyright Statement

   Copyright (C) The Internet Society (1999, 2000). All Rights Reserved.


   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the  purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.























Expires February 2001                                          [Page 84]


INTERNET-DRAFT                MPLS LDP MIB                   August 2000



