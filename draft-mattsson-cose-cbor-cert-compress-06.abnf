CBORCertificate = [
   TBSCertificate,
   issuerSignatureValue : any,
TBSCertificate = (
   cborCertificateType: int,
   certificateSerialNumber: CertificateSerialNumber,
   issuer: Name,
   validityNotBefore: Time,
   validityNotAfter: Time,
   subject: Name,
   subjectPublicKeyAlgorithm: AlgorithmIdentifier,
   subjectPublicKey: any,
   extensions: Extensions,
   issuerSignatureAlgorithm: AlgorithmIdentifier,
CertificateSerialNumber = ~biguint

Name = [ * RelativeDistinguishedName ] / text / bytes

RelativeDistinguishedName = Attribute / [ 2* Attribute ]

Attribute = ( attributeType: int, attributeValue: text ) //
            ( attributeType: ~oid, attributeValue: bytes )

Time = ~time / null

AlgorithmIdentifier = int / [ algorithm: ~oid, ? parameters: bytes ]

Extensions = [ * Extension ] / int

Extension = ( extensionID: int, extensionValue: any ) //
            ( extensionID: ~oid, critical: bool, extensionValue: bytes )
GeneralNames = [ + GeneralName ] / text
GeneralName = ( GeneralNameType : int, GeneralNameValue : any )

extensionValue = -1, and if 'cA' = true and 'pathLenConstraint' is
ExtValueEKU = [ + int / ~oid ] / int

ExtValueAKI = [ keyIdentifier: bytes / null, certIssuer: GeneralNames / null, certSerialNumber: CertificateSerialNumber / null ] / bytes

ExtValueAIA = [ + ( ocsp : 1 // caIssuers : 2 , uri : text ) ]

