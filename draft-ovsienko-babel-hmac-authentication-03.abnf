First-Hash = H(Ko XOR Ipad || Text)

Second-Hash = H(Ko XOR Opad || First-Hash)

R = St + MaxDigestsOut * Sh =
                      = 8  + MaxDigestsOut * (4 + Lmax)

AuthKeyOctets=Key70}}}

AuthKeyOctets=Key26}}}

This=key=is=exactly=70=octets=long.=ABCDEFGHIJKLMNOPQRSTUVWXYZ01234567

       *  Key70 in hexadecimal:

   54:68:69:73:3d:6b:65:79:3d:69:73:3d:65:78:61:63
   74:6c:79:3d:37:30:3d:6f:63:74:65:74:73:3d:6c:6f
   6e:67:2e:3d:41:42:43:44:45:46:47:48:49:4a:4b:4c
   4d:4e:4f:50:51:52:53:54:55:56:57:58:59:5a:30:31
   32:33:34:35:36:37

       *  Key26 in ASCII:

   ABCDEFGHIJKLMNOPQRSTUVWXYZ
       *  Key26 in hexadecimal:

   41:42:43:44:45:46:47:48:49:4a:4b:4c:4d:4e:4f:50
   51:52:53:54:55:56:57:58:59:5a

       KeyStartAccept, KeyStopAccept, KeyStartGenerate and
       KeyStopGenerate were set to make both authentication keys valid.
       The length of each key was picked to relate (in the terms of
       Section 2.4) with the properties of respective hash algorithm as
       follows:

       *  Key70 is 70 octets long.  The digest length (L) of SHA-512 is
          64 octets.  The internal block size (B) of SHA-512 is 128
          octets.

       *  Key26 is 26 octets long.  The digest length (L) of Whirlpool
          is 64 octets.  The internal block size (B) of Whirlpool is 64
          octets.

   2.  The instance of the original protocol of the speaker produced a
       Babel packet (PktO) to be sent from the interface.  Table 2
       provides a decoding of PktO, contents of which is below:

   2a:02:00:14:04:06:00:00:7d:60:01:90:08:0a:00:40
   00:00:ff:ff:7c:88:ff:ff

   3.  The authentication mechanism appended one TS/PC TLV and two HMAC
       TLVs to the packet body, updated the "Body length" packet header
       field and padded the Digest field of the HMAC TLVs using the
       link-local IPv6 address of the interface and necessary amount of
       zeroes.  Table 3 provides a decoding of the resulting temporary
       packet (PktT), contents of which is below:

   2a:02:00:a4:04:06:00:00:7d:60:01:90:08:0a:00:40
   00:00:ff:ff:7c:88:ff:ff:0b:06:00:01:51:5a:68:ee
   0c:42:00:c8:fe:80:00:00:00:00:00:00:0a:11:96:ff
   fe:1c:10:c8:00:00:00:00:00:00:00:00:00:00:00:00
   00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
   00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
   00:00:00:00:0c:42:00:64:fe:80:00:00:00:00:00:00
   0a:11:96:ff:fe:1c:10:c8:00:00:00:00:00:00:00:00
   00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
   00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
   00:00:00:00:00:00:00:00

   4.  The authentication mechanism produced two HMAC results,
       performing the computations as follows:
       *  For H=SHA-512, K=Key70, and Text=PktT the HMAC result is:

   4c:72:34:27:23:1a:9a:26:71:0c:6b:24:40:58:cb:cb
   e5:a6:c2:80:9d:31:13:00:3c:a3:52:0d:c6:07:13:69
   0a:6e:32:84:44:b6:97:8b:0d:85:e6:8f:80:d1:ec:c0
   dc:db:28:c2:15:42:51:36:04:15:3b:37:7f:3d:e1:72

       *  For H=Whirlpool, K=Key26, and Text=PktT the HMAC result is:

   ea:b3:e0:80:18:70:1a:a3:9c:d7:cf:1d:dd:06:51:5d
   e6:ab:02:99:82:2f:cd:b5:a4:b6:f0:c6:a9:fc:04:50
   1b:bd:82:4d:0d:28:90:a8:90:32:dc:f6:5e:ad:7c:74
   c2:68:0c:8a:89:2a:bb:9e:09:ae:b0:a6:60:98:5d:9b

   5.  The authentication mechanism placed each HMAC result into
       respective HMAC TLV, producing the final authenticated Babel
       packet (PktA), which was eventually sent from the interface.
       Table 4 provides a decoding of PktA, contents of which is below:

   2a:02:00:a4:04:06:00:00:7d:60:01:90:08:0a:00:40
   00:00:ff:ff:7c:88:ff:ff:0b:06:00:01:51:5a:68:ee
   0c:42:00:c8:4c:72:34:27:23:1a:9a:26:71:0c:6b:24
   40:58:cb:cb:e5:a6:c2:80:9d:31:13:00:3c:a3:52:0d
   c6:07:13:69:0a:6e:32:84:44:b6:97:8b:0d:85:e6:8f
   80:d1:ec:c0:dc:db:28:c2:15:42:51:36:04:15:3b:37
   7f:3d:e1:72:0c:42:00:64:ea:b3:e0:80:18:70:1a:a3
   9c:d7:cf:1d:dd:06:51:5d:e6:ab:02:99:82:2f:cd:b5
   a4:b6:f0:c6:a9:fc:04:50:1b:bd:82:4d:0d:28:90:a8
   90:32:dc:f6:5e:ad:7c:74:c2:68:0c:8a:89:2a:bb:9e
   09:ae:b0:a6:60:98:5d:9b

   Interpretation of this process is to be done in the view of Figure 1,
   differently for the sending and the receiving directions.

   For the sending direction, given a Babel speaker configured using the
   IPv6 address and the sequence of CSAs as described above, the
   implementation MUST produce exactly the temporary packet PktT if the
   original protocol instance produces exactly the packet PktO to be
   sent from the interface.  The HMAC results computed afterwards MUST
   exactly match respective results above and the final authenticated
   packet MUST exactly match the PktA above.

   For the receiving direction, given a Babel speaker configured using
   the sequence of CSAs (but not the IPv6 address) as described above,
   the implementation MUST (assuming the TS/PC check didn't fail)
   produce exactly the temporary packet PktT above if the local IPv6
   stack receives through the interface exactly the packet PktA above
   with the source IPv6 address above.  The first HMAC result computed
   afterwards MUST match the first result above.  The receiving
   procedure doesn't compute the second HMAC result in this case, but if
   the implementor decides to compute it anyway for the verification
   purpose, it MUST exactly match the second result above.


