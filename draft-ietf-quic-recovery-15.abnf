handshake_count = 0
tlp_count = 0
rto_count = 0
reordering_threshold = infinite
time_reordering_fraction = kTimeReorderingFraction
reordering_threshold = kReorderingThreshold
time_reordering_fraction = infinite
loss_time = 0
smoothed_rtt = 0
rttvar = 0
min_rtt = infinite
largest_sent_before_rto = 0
time_of_last_sent_retransmittable_packet = 0
time_of_last_sent_handshake_packet = 0
largest_sent_packet = 0

largest_sent_packet = packet_number
time_of_last_sent_handshake_packet = now
time_of_last_sent_retransmittable_packet = now
largest_acked_packet = ack.largest_acked
latest_rtt = now - sent_packets[ack.largest_acked].time
newly_acked_packets = DetermineNewlyAckedPackets(ack)
smallest_newly_acked =
           FindSmallestNewlyAcked(newly_acked_packets)
handshake_count = 0
tlp_count = 0
rto_count = 0

min_rtt = min(min_rtt, latest_rtt)
smoothed_rtt = latest_rtt
rttvar = latest_rtt / 2
rttvar_sample = abs(smoothed_rtt - latest_rtt)
rttvar = 3/4 * rttvar + 1/4 * rttvar_sample
smoothed_rtt = 7/8 * smoothed_rtt + 1/8 * latest_rtt
timeout = 2 * kInitialRtt
timeout = 2 * smoothed_rtt
timeout = max(timeout, kMinTLPTimeout)
timeout = timeout * (2 ^ handshake_count)
timeout = loss_time -
           time_of_last_sent_retransmittable_packet
timeout =
           smoothed_rtt + 4 * rttvar + max_ack_delay
timeout = max(timeout, kMinRTOTimeout)
timeout = timeout * (2 ^ rto_count)
tlp_timeout = max(1.5 * smoothed_rtt
                              + max_ack_delay, kMinTLPTimeout)
timeout = min(tlp_timeout, timeout)

largest_sent_before_rto = largest_sent_packet
loss_time = 0
lost_packets = {}
delay_until_lost = infinite
delay_until_lost =
         (1 + time_reordering_fraction) *
             max(latest_rtt, smoothed_rtt)
delay_until_lost = 9/8 * max(latest_rtt, smoothed_rtt)
time_since_sent = now() - unacked.time_sent
delta = largest_acked.packet_number - unacked.packet_number
loss_time = now() + delay_until_lost - time_since_sent

congestion_window = kInitialWindow
bytes_in_flight = 0
end_of_recovery = 0
ssthresh = infinite
ecn_ce_counter = 0

end_of_recovery = largest_sent_packet
congestion_window = max(congestion_window, kMinimumWindow)
ssthresh = congestion_window

ecn_ce_counter = ack.ce_counter
largest_lost_packet = lost_packets.last()

congestion_window = kMinimumWindow
