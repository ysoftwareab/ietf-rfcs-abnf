y = H(x)
       a binary string of arbitrary length, x, is given to a function H
       which produces a fixed-length output, y.

base = HMAC-SHA256(salt, username | password)

S = scalar-op(s, G)

C = scalar-op(c, G)

Z = scalar-op(c, S)

k = HKDF-expand(HKDF-extract(NULL, Z.x), "", l)

u = SIV-encrypt(k, username)

Z = scalar-op(s, C)

k = HKDF-expand(HKDF-extract(NULL, Z.x), "", l)

username = SIV-decrypt(k, u)

pwd-seed = H(base | counter | p)

n = len(p) + 64
pwd-tmp = PRF(pwd-seed, "TLS-PWD Hunting And Pecking",
                     ClientHello.random | ServerHello.random) [0..n];
pwd-value = (pwd-tmp mod (p-1)) + 1

found = 0
counter = 0
base = H(username | password | salt)
n = len(p) + 64
counter = counter + 1
pwd-seed = H(base | counter | p)
pwd-tmp = PRF(pwd-seed, "TLS-PWD Hunting And Pecking",
                       ClientHello.random | ServerHello.random) [0..n]
pwd-value = (pwd-tmp mod (p-1)) + 1
x = pwd-value
PE = (x, y)
PE = (x, p-y)
found = 1
base = random()
found = 0
counter = 0
base = H(username | password | salt)
n = len(p) + 64
counter = counter + 1
pwd-seed = H(base | counter | p)
pwd-tmp = PRF(pwd-seed, "TLS-PWD Hunting And Pecking",
                       ClientHello.random | ServerHello.random) [0..n]
pwd-value = (pwd-tmp mod (p-1)) + 1
PE = pwd-value ^ ((p-1)/q) mod p
found = 1
base = random()
scalar = (private + mask) mod q

Element = inverse(scalar-op(mask, PE))
z = F(scalar-op(client.private,
                   element-op(ServerKeyExchange.Element,
                              scalar-op(ServerKeyExchange.scalar, PE))))

z = F(scalar-op(server.private,
                   element-op(ClientKeyExchange.Element,
                              scalar-op(ClientKeyExchange.scalar, PE))))

