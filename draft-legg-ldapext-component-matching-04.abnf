component-reference = ComponentId *( "." ComponentId )
ComponentId         = identifier /
                         from-beginning /
                         count /
                         from-end /       ; extends Clause 14
                         content /        ; extends Clause 14
                         select /         ; extends Clause 14
                         all

identifier          = lowercase *alphanumeric
                            *(hyphen 1*alphanumeric)
alphanumeric        = uppercase / lowercase / decimal-digit
uppercase           = %x41-5A  ; "A" to "Z"
lowercase           = %x61-7A  ; "a" to "z"
hyphen              = "-"

from-beginning      = positive-number
count               = "0"
from-end            = "-" positive-number
content             = %x63.6F.6E.74.65.6E.74 ; "content"
select              = "(" Value *( "," Value ) ")"
all                 = "*"


positive-number     = non-zero-digit *decimal-digit

decimal-digit       = %x30-39  ; "0" to "9"
non-zero-digit      = %x31-39  ; "1" to "9"

ComponentAssertion = "{" sp component ","
                          [ sp useDefaultValues "," ]
                            sp rule ","
                            sp assertion-value sp "}"
component          = component-label msp
                            dquote component-reference dquote
useDefaultValues   = use-defaults-label msp BooleanValue
rule               = rule-label msp ObjectIdentifierValue
assertion-value    = value-label msp Value

component-label    = %x63.6F.6D.70.6F.6E.65.6E.74 ; "component"
use-defaults-label = %x75.73.65.44.65.66.61.75.6C.74.56.61.6C.75.65.73
                                                     ; "useDefaultValues"
rule-label         = %x72.75.6C.65                ; "rule"
value-label        = %x76.61.6C.75.65             ; "value"

sp                 =  *%x20  ; zero, one or more space characters
msp                = 1*%x20  ; one or more space characters
dquote             =   %x22  ; " (double quote)

ComponentFilter = filter-item / and-filter / or-filter / not-filter

filter-item     = item-chosen ComponentAssertion
and-filter      = and-chosen  SequenceOfComponentFilter
or-filter       = or-chosen   SequenceOfComponentFilter
not-filter      = not-chosen  ComponentFilter

item-chosen     = %x69.74.65.6D.3A  ; "item:"
and-chosen      = %x61.6E.64.3A     ; "and:"
or-chosen       = %x6F.72.3A        ; "or:"
not-chosen      = %x6E.6F.74.3A     ; "not:"

SequenceOfComponentFilter = "{" [ sp ComponentFilter
                                   *( "," sp ComponentFilter) ] sp "}"

Value = BitStringValue /
           BooleanValue /
           ChoiceValue /
           EmbeddedPDVValue /
           EnumeratedValue /
           ExternalValue /
           GeneralizedTimeValue /
           IntegerValue /
           InstanceOfValue /
           NullValue /
           ObjectDescriptorValue /
           ObjectIdentifierValue /
           OctetStringValue /
           RealValue /
           SequenceOfValue /
           SequenceValue /
           SetOfValue /
           SetValue /
           StringValue /
           UTCTimeValue /
           VariantEncoding

identifier    = lowercase *alphanumeric *(hyphen 1*alphanumeric)
alphanumeric  = uppercase / lowercase / decimal-digit
uppercase     = %x41-5A  ; "A" to "Z"
lowercase     = %x61-7A  ; "a" to "z"
decimal-digit = %x30-39  ; "0" to "9"
hyphen        = "-"

BitStringValue = bstring / hstring / bit-list

bit-list          = "{" [ sp identifier
                          *( "," sp identifier ) ] sp "}"

hstring           = squote *hexadecimal-digit squote %x48  ; '...'H
hexadecimal-digit = %x30-39 /  ; "0" to "9"
                       %x41-46    ; "A" to "F"

bstring           = squote *binary-digit squote %x42  ; '...'B
binary-digit      = "0" / "1"

sp                = *%x20  ; zero, one or more space characters
squote            =  %x27  ; ' (single quote)

BooleanValue = %x54.52.55.45 /   ; "TRUE"
                  %x46.41.4C.53.45  ; "FALSE"

IntegerValue    = "0" /
                     positive-number /
                     ("-" positive-number) /
                     identifier

positive-number = non-zero-digit *decimal-digit
non-zero-digit  = %x31-39  ; "1" to "9"

EnumeratedValue = identifier

NullValue = %x4E.55.4C.4C  ; "NULL"

ObjectIdentifierValue = oid

OctetStringValue = hstring

StringValue       = dquote *SafeUTF8Character dquote

dquote            = %x22 ; " (double quote)

SafeUTF8Character = %x00-21 / %x23-7F /   ; ASCII minus dquote
                       dquote dquote /       ; escaped double quote
                       %xC0-DF %x80-BF /     ; 2 byte UTF8 character
                       %xE0-EF 2(%x80-BF) /  ; 3 byte UTF8 character
                       %xF0-F7 3(%x80-BF) /  ; 4 byte UTF8 character
                       %xF8-FB 4(%x80-BF) /  ; 5 byte UTF8 character
                       %xFC-FD 5(%x80-BF)    ; 6 byte UTF8 character

GeneralizedTimeValue  = StringValue
UTCTimeValue          = StringValue
ObjectDescriptorValue = StringValue

ChoiceValue           = IdentifiedChoiceValue /
                           ChoiceOfStringsValue

IdentifiedChoiceValue = identifier ":" Value
ChoiceOfStringsValue  = StringValue

SequenceValue = ComponentList

ComponentList = "{" [ sp NamedValue *( "," sp NamedValue) ] sp "}"
NamedValue    = identifier msp Value
msp           = 1*%x20  ; one or more space characters

SetValue = ComponentList

SequenceOfValue = "{" [ sp Value *( "," sp Value) ] sp "}"

SetOfValue      = "{" [ sp Value *( "," sp Value) ] sp "}"

EmbeddedPDVValue = SequenceValue
ExternalValue    = SequenceValue
InstanceOfValue  = SequenceValue

RealValue = "0" /          ; zero REAL value
               SequenceValue  ; non-zero REAL value

VariantEncoding = RDNSequenceValue /
                     RelativeDistinguishedNameValue /
                     ORAddressValue

RDNSequenceValue = StringValue

RelativeDistinguishedNameValue = StringValue

ORAddressValue = StringValue


