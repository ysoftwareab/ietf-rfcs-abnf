achar            = uchar / "&" / "=" / "~"
                             ; see [BASIC-URL] for "uchar" definition

bchar            = achar / ":" / "@" / "/"

enc_auth_type    = 1*achar
                           ; encoded version of [IMAP-AUTH] "auth_type"

enc_list_mailbox = 1*bchar
                             ; encoded version of [IMAP4] "list_mailbox"

enc_mailbox      = 1*bchar
                             ; encoded version of [IMAP4] "mailbox"

enc_search       = 1*bchar
                             ; encoded version of search_program below

enc_section      = 1*bchar
                             ; encoded version of section below
enc_user         = 1*achar
                             ; encoded version of [IMAP4] "userid"

imapurl          = "imap://" iserver "/" [ icommand ]

iauth            = ";AUTH=" ( "*" / enc_auth_type )

icommand         = imailboxlist / imessagelist / imessagepart

imailboxlist     = [enc_list_mailbox] ";TYPE=" list_type

imessagelist     = enc_mailbox [ "?" enc_search ] [uidvalidity]

imessagepart     = enc_mailbox [uidvalidity] iuid [isection]

isection         = "/;SECTION=" enc_section

iserver          = [iuserauth "@"] hostport
                             ; See [BASIC-URL] for "hostport" definition

iuid             = "/;UID=" nz_number
                             ; See [IMAP4] for "nz_number" definition

iuserauth        = enc_user [iauth] / [enc_user] iauth

list_type        = "LIST" / "LSUB"

search_program   = ["CHARSET" SPACE astring SPACE]
                        search_key *(SPACE search_key)
                           ; IMAP4 literals may not be used
                           ; See [IMAP4] for "astring" and "search_key"

section          = section_text / (nz_number *["." nz_number]
                         ["." (section_text / "MIME")])
                        ; See [IMAP4] for "section_text" and "nz_number"

uidvalidity      = ";UIDVALIDITY=" nz_number
                             ; See [IMAP4] for "nz_number" definition

c = *src++;
bitbuf = 0;
bitcount = 0;
ucs4 = 0;
bitbuf = (bitbuf << 6) | c;
utf16 = (bitcount ? bitbuf >> bitcount
                             : bitbuf) & 0xffff;
ucs4 = (utf16 - UTF16HIGHSTART) << UTF16SHIFT;
ucs4 = utf16;
i = 1;
i = 2;
i = 3;
i = 4;
utf7mode = 0;
utf8total = 0;
bitstogo = 0;
c = (hextab[src[0]] << 4) | hextab[src[1]];
utf7mode = 0;
utf7mode = 1;
ucs4 = c;
utf8total = 1;
ucs4 = (ucs4 << 6) | (c & 0x3FUL);
utf8pos = 1;
utf8total = 2;
ucs4 = c & 0x1F;
utf8total = 3;
ucs4 = c & 0x0F;
utf8total = 4;
ucs4 = c & 0x03;
utf8total = 0;
bitbuf = (bitbuf << 16) | ((ucs4 >> UTF16SHIFT)
                                           + UTF16HIGHSTART);
ucs4 = (ucs4 & UTF16MASK) + UTF16LOSTART;
utf16flag = 1;
bitbuf = (bitbuf << 16) | ucs4;
utf16flag = 0;
