PTO = smoothed_rtt + max(4*rttvar, kGranularity) + max_ack_delay

smoothed_rtt = 1 rttvar = 0 max_ack_delay = 0
kPersistentCongestionThreshold = 2

crypto_count = 0
pto_count = 0
smoothed_rtt = 0
rttvar = 0
min_rtt = infinite
time_of_last_sent_ack_eliciting_packet = 0
time_of_last_sent_crypto_packet = 0
time_of_last_sent_crypto_packet = now
time_of_last_sent_ack_eliciting_packet = now
latest_rtt =
         now - sent_packets[pn_space][ack.largest_acked].time_sent
newly_acked_packets = DetermineNewlyAckedPackets(ack, pn_space)
crypto_count = 0
pto_count = 0

min_rtt = min(min_rtt, latest_rtt)
ack_delay = min(ack_delay, max_ack_delay)
smoothed_rtt = latest_rtt
rttvar = latest_rtt / 2
rttvar_sample = abs(smoothed_rtt - latest_rtt)
rttvar = 3/4 * rttvar + 1/4 * rttvar_sample
smoothed_rtt = 7/8 * smoothed_rtt + 1/8 * latest_rtt
time = loss_time[Initial]
space = Initial
time = loss_time[pn_space];
space = pn_space
timeout = 2 * kInitialRtt
timeout = 2 * smoothed_rtt
timeout = max(timeout, kGranularity)
timeout = timeout * (2 ^ crypto_count)
timeout =
       smoothed_rtt + max(4 * rttvar, kGranularity) + max_ack_delay
timeout = timeout * (2 ^ pto_count)

lost_packets = {}
loss_delay = kTimeThreshold * max(latest_rtt, smoothed_rtt)

lost_send_time = now() - loss_delay

lost_pn = largest_acked_packet[pn_space] - kPacketThreshold

congestion_window = kInitialWindow
bytes_in_flight = 0
recovery_start_time = 0
ssthresh = infinite
ecn_ce_counter = 0

recovery_start_time = Now()
congestion_window = max(congestion_window, kMinimumWindow)
ssthresh = congestion_window

ecn_ce_counter = ack.ce_counter
pto = smoothed_rtt + max(4 * rttvar, kGranularity) +
          max_ack_delay
congestion_period =
          pto * (2 ^ kPersistentCongestionThreshold - 1)
largest_lost_packet = lost_packets.last()

congestion_window = kMinimumWindow

