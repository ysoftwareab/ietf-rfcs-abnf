action = reject / discard / fileinto / forward / keep / reply / stop

address = string
           ;; any legal [IMAIL] address.

anyof = "anyof" test-list

allof = "allof" test-list

block = "{" [WSP] commands [WSP] "}"
           ;; C-style block

CHAR-NOT-DOT = (%x01-2d / %x2f-%xff)
           ;; all the characters that aren't "."

control-structure = if

command = ( action ";" ) / block / control-structure
commands = *([WSP] command [WSP])

comment = "#" *VCHAR CRLF

comparator = "octet"
           ;; octet is the only comparator mandated by this specification
           ;; but others may be defined by the ACAP registry.

discard = "discard"

exists = "exists" WSP string

false = "false"

fileinto = "fileinto" WSP string
           ;; string is a mailbox; semantics are defined by the
           ;; underlying mail system

forward = "forward" WSP address

if = "if" WSP test WSP command [ "else" command ]
           ;; Commands are typically blocks.

header = "header" WSP string-list WSP match-keyword WSP string-list

keep = "keep"

match-keyword = ("contains" / "matches" / "is") ["-" comparator]

multi-line = "text:" [WSP] CRLF
           *((1*CHAR-NOT-DOT *CHAR CRLF) / ("." 1*CHAR-NOT-DOT *CHAR CRLF) /
             (".." *CHAR CRLF) / CRLF)
           "." CRLF
           ;; Note when used,
           ;; a leading ".." on a line is mapped to ".".

not = "not" WSP test

number = 1*DIGIT [QUANTIFIER]
           ;; quantifier is a multiplier (or bit shift)

QUANTIFIER = "K" / "M" / "G"
           ;; K == 2^10; M == 2^20; G = 2^30

quoted-string = DQUOTE *CHAR DQUOTE
           ;; \" inside a string maps to "
           ;; \\ inside a string maps to \
           ;; All other characters map to themselves.
           ;; Note that newlines and other weird characters
           ;; are all allowed strings.

reject = "reject" WSP string
           ;; string is the reason contained in the DSN.

reply = "reply" WSP string

size = "size" WSP ( "over" / "under" ) WSP number

stop = "stop"

string = quoted-string / multi-line

string-list = "(" [WSP] *(string [WSP] "," [WSP]) string [WSP] ")" / string
           ;; if there is only a single string, the parens are optional

support = "support" WSP string

test = [WSP] (anyof / allof / exists / false / header /
       not / size / support) [WSP]

test-list = [WSP] "(" [WSP] *(test [WSP] "," [WSP])
       test [WSP] ")" [WSP]

true = "true"

WSP = 1*(SP / CRLF / HTAB) / comment
           ;; just whitespace.  anyplace this is allowed, a comment is
           ;; as well

