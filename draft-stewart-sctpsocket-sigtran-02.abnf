sd = socket(PF_INET, SOCK_SEQPACKET, IPPROTO_SCTP);

sd = socket(PF_INET6, SOCK_SEQPACKET, IPPROTO_SCTP);

ret = bind(int sd, struct sockaddr *addr, int addrlen);

ret = close(int sd);

sd = socket(PF_INET, SOCK_STREAM, IPPROTO_SCTP);

sd = socket(PF_INET6, SOCK_STREAM, IPPROTO_SCTP);

ret = bind(int sd, struct sockaddr *addr, int addrlen);

ret = listen(int sd, int backlog);

new_sd = accept(int sd, struct sockaddr *addr, socklen_t *addrlen);

ret = connect(int sd, const struct sockaddr *addr, int addrlen);

ret = close(int sd);

cmsgptr = CMSG_NXTHDR(&msg, cmsgptr)) {
ptr = CMSG_DATA(cmsgptr);
total = CMSG_SPACE(sizeof (struct sctp_initmsg)) +
            CMSG_SPACE(sizeof (struct sctp_sndrcvinfo)) +
            CMSG_SPACE(sizeof (struct sctp_assoc_change)) +
            CMSG_SPACE(sizeof (struct in6_pktinfo));

buf = malloc(total);

size = send(int sd, connst void *msg, size_t len, int flags);
size = sendto(int sd, const void *msg, size_t len, int flags,
                const struct sockaddr *to, int tolen);
size = recv(int sd, void *buf, size_t len, int flags);
size = recvfrom(int sd, void *buf, size_t len, int flags,
                  struct sockaddr *from, int *fromlen);

ret = getsockopt(int sd, int level, int optname, void *optval,
                   size_t *optlen); 
ret = setsockopt(int sd, int level, int optname, const void *optval,
                   size_t optlen);

ret = sctp_bindx(int sd,
                   struct sockaddr_storage *addrs,
		   int addrcnt,
		   int flags);

new_sd = sctp_peeloff(int sd, sctp_assoc_t *assoc_id, int *addrlen)

