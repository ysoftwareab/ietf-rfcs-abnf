angle =  random() * 2 * pi
distance =  sqrt(random()) * size
distance =  (1 - |random() - random()|) * size

change = (1 - (m - 1.5 * 2^((3 - n)/2)) / m)^n

grid =  m * obscuring distance * 9e-6

random = H(secret key | target identity | identifier
                 | grid coordinate | grid coordinate | ...)

tx = (x - x1) / (x2 - x1)
ty = (y - y1) / (y2 - y1)
w1 = o[x1,y1] * (1 - tx) + o[x2,y1] * tx
w2 = o[x1,y1] * (1 - tx) + o[x2,y1] * tx
offset = w1 * (1 - ty) + w2 * ty

r = a * (1 - t) + b * t
r = r * r / 2 / t / (1 - t)
r = 1 - (1 - r) * (1 - r) / t / (1 - t)
r = (2 * r - t) / 2 / (1 - t)
r = (2 * r - 1 + t) / 2 / t

tx_1 = (x - x1_1) / (x2_1 - x1_1)
w1 = uniformDistInterp(r[x1_1,y1], r[x2_1,y1], tx_1)
tx_2 = (x - x1_2) / (x2_2 - x1_2)
w2 = uniformDistInterp(r[x1_2,y2], r[x2_2,y2], tx_2)

overlap = grid interval          overlap = grid interval

                 Figure 6: Interpolation About 180 Degrees

grid = m * obscuring distance * 9e-6 / cos(latitude)
t = ((longitude + 360) % 360 - 180 - grid / 2) / grid
r = r * r / 2 / t / (1 - t);
r = 1 - (1 - r) * (1 - r) / 2 / t / (1 - t);
r = 0.5 + (r - 0.5) / Math.max(t, 1 - t);
