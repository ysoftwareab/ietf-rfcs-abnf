NSIS                                                           T. Tsenov
Internet-Draft                                             H. Tschofenig
Expires: May 11, 2005                                            Siemens
                                                                   X. Fu
                                                               I. Juchem
                                                        Univ. Goettingen
                                                       November 10, 2004



                          GIMPS State Machine
                 draft-fu-nsis-ntlp-statemachine-00.txt


Status of this Memo


   This document is an Internet-Draft and is subject to all provisions
   of section 3 of RFC 3667.  By submitting this Internet-Draft, each
   author represents that any applicable patent or other IPR claims of
   which he or she is aware have been or will be disclosed, and any of
   which he or she become aware will be disclosed, in accordance with
   RFC 3668.


   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as
   Internet-Drafts.


   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."


   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.


   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.


   This Internet-Draft will expire on May 11, 2005.


Copyright Notice


   Copyright (C) The Internet Society (2004).


Abstract


   This document describes the state machines for the General Internet
   Messaging Protocol for Signaling (GIMPS).  The states of GIMPS nodes
   for a given flow and their transitions are presented in order to
   illustrate how GIMPS may be implemented.




Tsenov, et al.            Expires May 11, 2005                  [Page 1]
Internet-Draft            GIMPS State Machine              November 2004



Table of Contents


   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Terminology  . . . . . . . . . . . . . . . . . . . . . . . . .  4
   3.  Notational conventions used in state diagrams  . . . . . . . .  5
   4.  State Machine Symbols  . . . . . . . . . . . . . . . . . . . .  7
   5.  Common Rules . . . . . . . . . . . . . . . . . . . . . . . . .  8
     5.1   Common Procedures  . . . . . . . . . . . . . . . . . . . .  8
     5.2   Common Variables . . . . . . . . . . . . . . . . . . . . .  8
     5.3   Constants  . . . . . . . . . . . . . . . . . . . . . . . .  9
   6.  Default state machines for soft state refreshes and
       teardowns  . . . . . . . . . . . . . . . . . . . . . . . . . . 10
     6.1   State machine for soft state refreshes . . . . . . . . . . 10
     6.2   State machine for soft state teardowns . . . . . . . . . . 10
   7.  State machine for the first GIMPS node in the flow path  . . . 12
   8.  State machine for intermediate GIMPS nodes . . . . . . . . . . 14
   9.  State machine for the last GIMPS node in the flow path . . . . 18
   10.   Security Considerations  . . . . . . . . . . . . . . . . . . 20
   11.   Open Issues  . . . . . . . . . . . . . . . . . . . . . . . . 21
   12.   Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . 22
   13.   References . . . . . . . . . . . . . . . . . . . . . . . . . 23
   13.1  Normative References . . . . . . . . . . . . . . . . . . . . 23
   13.2  Informative References . . . . . . . . . . . . . . . . . . . 23
       Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . 23
       Intellectual Property and Copyright Statements . . . . . . . . 25



























Tsenov, et al.            Expires May 11, 2005                  [Page 2]
Internet-Draft            GIMPS State Machine              November 2004



1.  Introduction


   This document describes the state machines for GIMPS [1], trying to
   show how GIMPS can be implemented to support its deployment.  The
   state machines described in this document are illustrative of how the
   GIMPS protocol defined in [1] may be implemented for the GIMPS nodes
   in different locations of a flow path.  Where there are differences
   [1] are authoritative.  The state machines are informative only.
   Implementations may achieve the same results using different methods.


   There are 3 types of possible entities for GIMPS signaling:
      The first node that speaks GIMPS in the path from FlowSender to
      the FlowReceiver (it is assumed that it has only downstream
      RoutingState or MessagingAssociation for the given flow);
      Intermediate GIMPS node;
      The last node that speaks GIMPS in the path from the FlowSender to
      the FlowReceiver (it is assumed that it has only upstream
      RoutingState or MessagingAssociation for the given flow).


   We describe a set of state machines for these entities to illustrate
   how GIMPS may be implemented.































Tsenov, et al.            Expires May 11, 2005                  [Page 3]
Internet-Draft            GIMPS State Machine              November 2004



2.  Terminology


   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [2].















































Tsenov, et al.            Expires May 11, 2005                  [Page 4]
Internet-Draft            GIMPS State Machine              November 2004



3.  Notational conventions used in state diagrams


   The following text is reused from [3] and the state diagrams are
   based on the conventions specified in [4], Section 8.2.1.  Additional
   state machine details are taken from [5].


   The complete text is reproduced here:



      State diagrams are used to represent the operation of the protocol
      by a number of cooperating state machines each comprising a group
      of connected, mutually exclusive states.  Only one state of each
      machine can be active at any given time.


      All permissible transitions between states are represented by
      arrows, the arrowhead denoting the direction of the possible
      transition.  Labels attached to arrows denote the condition(s)
      that must be met in order for the transition to take place.  All
      conditions are expressions that evaluate to TRUE or FALSE; if a
      condition evaluates to TRUE, then the condition is met.  The label
      UCT denotes an unconditional transition (i.e., UCT always
      evaluates to TRUE).  A transition that is global in nature (i.e.,
      a transition that occurs from any of the possible states if the
      condition attached to the arrow is met) is denoted by an open
      arrow; i.e., no specific state is identified as the origin of the
      transition.  When the condition associated with a global
      transition is met, it supersedes all other exit conditions
      including UCT.  The special global condition BEGIN supersedes all
      other global conditions, and once asserted remains asserted until
      all state blocks have executed to the point that variable
      assignments and other consequences of their execution remain
      unchanged.


      On entry to a state, the procedures defined for the state (if any)
      are executed exactly once, in the order that they appear on the
      page.  Each action is deemed to be atomic; i.e., execution of a
      procedure completes before the next sequential procedure starts to
      execute.  No procedures execute outside of a state block.  The
      procedures in only one state block execute at a time, even if the
      conditions for execution of state blocks in different state
      machines are satisfied, and all procedures in an executing state
      block complete execution before the transition to and execution of
      any other state block occurs, i.e., the execution of any state
      block appears to be atomic with respect to the execution of any
      other state block and the transition condition to that state from
      the previous state is TRUE when execution commences.  The order of
      execution of state blocks in different state machines is undefined
      except as constrained by their transition conditions.  A variable




Tsenov, et al.            Expires May 11, 2005                  [Page 5]
Internet-Draft            GIMPS State Machine              November 2004



      that is set to a particular value in a state block retains this
      value until a subsequent state block executes a procedure that
      modifies the value.


      On completion of all of the procedures within a state, all exit
      conditions for the state (including all conditions associated with
      global transitions) are evaluated continuously until one of the
      conditions is met.  The label ELSE denotes a transition that
      occurs if none of the other conditions for transitions from the
      state are met (i.e., ELSE evaluates to TRUE if all other possible
      exit conditions from the state evaluate to FALSE).  Where two or
      more exit conditions with the same level of precedence become TRUE
      simultaneously, the choice as to which exit condition causes the
      state transition to take place is arbitrary.


   In addition to the above notation, there are a couple of
   clarifications specific to this document.  First, all boolean
   variables are initialized to FALSE before the state machine execution
   begins.  Second, the following notational shorthand is specific to
   this document:


   <variable> = <expression1> | <expression2> | ...
      Execution of a statement of this form will result in <variable>
      having a value of exactly one of the expressions.  The logic for
      which of those expressions gets executed is outside of the state
      machine and could be environmental, configurable, or based on
      another state machine such as that of the method.

























Tsenov, et al.            Expires May 11, 2005                  [Page 6]
Internet-Draft            GIMPS State Machine              November 2004



4.  State Machine Symbols


   *_up means the message is sent in upstream direction or received from
      upstream direction
   *_down means the message is sent in downstream direction or received
      from downstream direction
   MA means "Messaging Association"
   RS means "Routing State"
   ( ) Used to force the precedence of operators in Boolean expressions
      and to delimit the argument(s) of actions within state boxes.
   ;  Used as a terminating delimiter for actions within state boxes.
      Where a state box contains multiple actions, the order of
      execution follows the normal language conventions for reading
      text.
   =  Assignment action.  The value of the expression to the right of
      the operator is assigned to the variable to the left of the
      operator.  Where this operator is used to define multiple
      assignments, e.g., a = b = X the action causes the value of the
      expression following the right-most assignment operator to be
      assigned to all of the variables that appear to the left of the
      right-most assignment operator.
   !  Logical NOT operator.
   && Logical AND operator.
   || Logical OR operator.
   if...then...  Conditional action.  If the Boolean expression
      following the if evaluates to TRUE, then the action following the
      then is executed.
   \{ statement 1, ...  statement N \} Compound statement.  Braces are
      used to group statements that are executed together as if they
      were a single statement.
   != Inequality.  Evaluates to TRUE if the expression to the left of
      the operator is not equal in value to the expression to the right.
   == Equality.  Evaluates to TRUE if the expression to the left of the
      operator is equal in value to the expression to the right.
   >  Greater than.  Evaluates to TRUE if the value of the expression to
      the left of the operator is greater than the value of the
      expression to the right.
   <= Less than or equal to.  Evaluates to TRUE if the value of the
      expression to the left of the operator is either less than or
      equal to the value of the expression to the right.
   ++ Increment the preceding integer operator by 1.











Tsenov, et al.            Expires May 11, 2005                  [Page 7]
Internet-Draft            GIMPS State Machine              November 2004



5.  Common Rules


   Throughout the document we use terms defined in the [1], such as
   Query, Response, Confirm.


5.1  Common Procedures


   Tg_SendMsg: NSLP/GIMPS API message that request transmission of a
      NSLP message
   Tg_SetStateLifetime(time_period): NSLP/GIMPS API message providing
      info for the Lifetime of an RS, required by the application.
      "Time_period = 0" represents the cancellation of established
      RSs/MAs (invoked by NSLP application).
   Tg_MessageDeliveryError: NSLP/GIMPS API message informing NSLP
      application of unsuccessful delivery of a message
   Tg_RecvMsg: NSLP/GIMPS API message that provides received message to
      the NSLP
   Tg_NetworkNotification: NSLP/GIMPS API message that informs NSLP for
      change in RS
   Tx_Query_Dmode: Transmit of Query message in Dmode
   Tx_Response_Dmode: Transmit of Response message in Dmode
   Rx_Response_Dmode: Receive of Response message in Dmode
   Tx_Confirm_Cmode: Transmit of Confirm message in Cmode (via MA)
   Rx_Query_Dmode: Receive of Query message in Dmode
   Rx_Confirm_Cmode: Receive of Confirm message in Cmode (via MA)
   Queue NSLP msg info: Save NLSP messages in a queue until a required
      MA association is established
   Tx_Msg_Cmode: Transmit message in Cmode (via MA)
   TIMEOUT_MAState: Expiration of an established MA state lifetime
      timer.
   TIMEOUT_RSState: Expiration of an established RS state lifetime
      timer.
   TIMEOUT_Refresh: Refresh interval timer expiration
   ESTABLISH RS: Establish Downstream/Upstream Routing State at the node
   ESTABLISH MA: Establish Downstream/Upstream Message Association at
      the node
   REFRESH RS: Refreshes established RS


5.2  Common Variables


   It is assumed that the type of mode and destination info (which need
   to be taken from the application parameters and local GIMPS policy)
   is provided.  This is represented by the common variables Dmode,
   Cmode, MArequest, MAinfo, MApresent and Refresh.
   Dmode: The message MUST be transmitted in Dmode.  This is specified
      by "Message transfer attributes" set to the following values:






Tsenov, et al.            Expires May 11, 2005                  [Page 8]
Internet-Draft            GIMPS State Machine              November 2004



      Reliability: is set to FALSE
      Security: is set to values that do not request special security
         handling of a message.
      Local processing: is set to values that do not require services
         offered by Cmode [1]
   Cmode: The message MUST be transmitted in Cmode.  This is specified
      by "Message transfer attributes" set to any of the following
      values:
      Reliability: is set to TRUE
      Security: is set to values that request secure handling of a
         message.
      Local processing: is set to values that require services offered
         by Cmode (e.g., congestion control) [1]
   MApresent: Used for re-use of MAs.  It shows that there is a perfect
      match between the Node Addressing Object (NAO) of an existing
      association and the NAO provided in the GIMPS Query Dmode message
      (section 4.4.2 of [1]).
   MArequest: Request for MA establishment.  Its mapping to specific
      GIMPS message parameters is left for future version of the
      document.
   MAinfo: Information for establishment of the requested MA.  Its
      mapping to specific GIMPS message parameters is left for future
      version of the document.
   NSLPinfo: NSLP application information
   Refresh: This variable specifies that the message is for refresh
      purposes
   Downstream: Specifies that message must be sent in downstream
      direction
   Upstream: Specifies that message must be sent in upstream direction.


5.3  Constants





















Tsenov, et al.            Expires May 11, 2005                  [Page 9]
Internet-Draft            GIMPS State Machine              November 2004



6.  Default state machines for soft state refreshes and teardowns


   This section presents the state machines for any "established state"
   in a GIMPS nodes.  Whenever possible, they are not repeated in
   subsequent sections for simplicity.


   Note: since in GIMPS there can be different combinations of RS
   (established or not) and MA (etablished or not) states in both
   DIRECTIONs (up- and downstream), there are 8 sub-states in total, all
   being soft states (subject to expiration unless refreshes), thus
   yield the state machine presented in this section (and the
   combination of different state variables, which are not fully
   elaborated here for simplicity).


6.1  State machine for soft state refreshes


   This subsection presents the single state for a given "established
   state" and transitions to itself under refresh conditions.  By
   default, "refresh the established state" action is performed for all
   these transitions.


      -------------------
      State: State_Estab (any established MA/RS state)
      -------------------


      Condition                Action                    State
      ------------------------+-------------------------+------------
      (tg_SendMsg) && (Cmode) |tx_Msg_Cmode_up          |State_Estab
         && (Upstream)        |                         |
                              |                         |
      (tg_SendMsg) && (Cmode) |tx_Msg_Cmode_down        |State_Estab
         && (Downstream)      |                         |
                              |                         |
      (tg_SendMsg) && (Dmode) |tx_Msg_Dmode_up          |State_Estab
         && (Upstream)        |                         |
                              |                         |
      (tg_SendMsg) && (Dmode) |tx_Msg_Dmode_down        |State_Estab
         && (Downstream)      |                         |
                              |                         |
      rx_Response_Dmode       | Refresh RS              |State_Estab
        (Refresh)             |                         |
      ------------------------+-------------------------+------------



6.2  State machine for soft state teardowns


   This subsection presents the state machine for transitions for any
   established MA state and RS state under their timer teardown




Tsenov, et al.            Expires May 11, 2005                 [Page 10]
Internet-Draft            GIMPS State Machine              November 2004



   conditions.


      ----------------------------------
      STATE: RS_Established in DIRECTION (DIRECTION = {up, down})
      ----------------------------------


      Condition                Action                     State
      ------------------------+-------------------------+------------
      (TIMEOUT_RSstate)||     |Clear RS,                |IDLE in
      (tg_SetStateLifetime(0))| tg_Network Notification |DIRECTION
                              |                         |(Note 1)
      ------------------------+-------------------------+------------



      ----------------------------------
      STATE: MA_Established in DIRECTION (DIRECTION = {up, down})
      ----------------------------------


      Condition                Action                     State
      ------------------------+-------------------------+------------
      (TIMEOUT_MAstate)||     |(Clear MS)||             |IDLE in
      (tg_SetStateLifetime(0))|(Stop_using_existing MA) |DIRECTION
                              |tg_Network Notification  |(Note 1)
      ------------------------+-------------------------+------------
      Note 1: If both downstream and upstream states are established,
              then this transition goes to RS/MA Established state
              only for the other DIRECTION.

























Tsenov, et al.            Expires May 11, 2005                 [Page 11]
Internet-Draft            GIMPS State Machine              November 2004



7.  State machine for the first GIMPS node in the flow path



      -----------
      State: INIT
      -----------


      Condition                Action                    State
      ------------------------+-------------------------+------------
      UCT                     | initialize variables    |IDLE
      ------------------------+-------------------------+------------



      -----------
      State: IDLE
      -----------


      Condition                Action                    State
      ------------------------+-------------------------+-------------
      (tg_SendMsg) && (Dmode) |tx_Query_Dmode(NSLPinfo) |WAITRESP2
                              |                         |
      (tg_SendMsg) && (Cmode) |tx_Query_Dmode(MArequest)|WAITRESP1
                              |  Queue NSLP msg info    |
      ------------------------+-------------------------+-------------



      ----------------
      State: WAITRESP1
      ----------------


      Condition                Action                    State
      ------------------------+-------------------------+------------
      (TIMEOUT_Refresh) &&    |tx_Query_Dmode(MArequest)|WAITRESP1
         (!MaxRetry)          |                         |
                              |                         |
      (TIMEOUT_Refresh) &&    |tg_MessageDeliveryError  |IDLE
         (MaxRetry)           |                         |
                              |                         |
      (rx_RESPONSE_Dmode      |tx_Confirm_Cmode,        |DownMA_Estab
         (MAinfo)) ||         |  tx_queued_Msg_cmode,   |
         (rx_RESPONSE_Cmode   |  (Establish MA) ||      |
         (MAinfo))            |  (Re-use existing MA)   |
      ------------------------+-------------------------+------------









Tsenov, et al.            Expires May 11, 2005                 [Page 12]
Internet-Draft            GIMPS State Machine              November 2004



      -------------------
      State: DownMA_Estab (Downstream MA Established)
      -------------------


      Condition                Action                    State
      ------------------------+-------------------------+------------
      rx_Msg_Cmode            |tg_RecvMsg to Application|DownMA_Estab
                              |                         |
      (tg_SendMsg) && (Cmode) |tx_Msg_Cmode             |DownMA_Estab
      ------------------------+-------------------------+------------



      ----------------
      State: WAITRESP2
      ----------------


      Condition                Action                    State
      ------------------------+-------------------------+------------
      (TIMEOUT_Refresh) &&    |tx_Query_Dmode(NSLPinfo) |WAITRESP2
         (!MaxRetry)          |                         |
                              |                         |
      (TIMEOUT_Refresh) &&    |tg_MessageDeliveryError  |IDLE
         (MaxRetry)           |                         |
                              |                         |
      rx_Response_Dmode       |(establish downstream RS)|DownRS_Estab
      ------------------------+-------------------------+------------



      -------------------
      State: DownRS_Estab (Downstream RS Established)
      -------------------


      Condition                Action                    State
      ------------------------+-------------------------+------------
      TIMEOUT_Refresh         |tx_Query_Dmode(Refresh)  |DownRS_Estab
                              |                         |
      rx_Response_Dmode       |Refresh RS               |DownRS_Estab
        (Refresh)             |                         |
                              |                         |
      (tg_SendMsg) && (Dmode) |tx_Msg_Dmode             |DownRS_Estab
      ------------------------+-------------------------+------------











Tsenov, et al.            Expires May 11, 2005                 [Page 13]
Internet-Draft            GIMPS State Machine              November 2004



8.  State machine for intermediate GIMPS nodes



      -----------
      State: INIT
      -----------


      Condition                Action                    State
      ------------------------+-------------------------+------------
      UCT                     | initialize variables    |IDLE
      ------------------------+-------------------------+------------



      -----------
      State: IDLE
      -----------


      Condition                Action                    State
      ------------------------+-------------------------+-------------
      (rx_Query_Dmode_up      |tg_RecvMsg to App.,      |UpRS_Estab
        (MArequest)) &&       |  tx_Response_Dmode_up   |
        (!MApresent)          |  (MAinfo), establish RS |
                              |                         |
      rx_Query_Dmode_up       |tg_RecvMsg(NSLPinfo) to  |UpRS_Estab
        (NSLPinfo)            |  Application,           |
                              |  tx_Response_Dmode_up,  |
                              |  establish RS           |
                              |                         |
      (rx_Query_Dmode_up      |tg_RecvMsg to Application|UpMA_Estab
        (MArequest)) &&       |  , tx_Response_Cmode_up |
        (MApresent)           |  (MAinfo), re-use       |
        (MApresent)           |  existing MA            |
      ------------------------+-------------------------+-------------



















Tsenov, et al.            Expires May 11, 2005                 [Page 14]
Internet-Draft            GIMPS State Machine              November 2004



      -----------------
      State: UpRS_Estab (UPstream RS Established)
      -----------------


      Condition                Action                    State
      ------------------------+-------------------------+-------------
      (tg_SendMsg) && (Dmode) |tx_Query_Dmode_down      |UpRS_Estab +
                              |  (NSLPinfo)             | WaitResp for
                              |                         | DownRS
                              |                         |
      (tg_SendMsg) && (Cmode) |tx_Query_Dmode_down      |UpRS_Estab +
                              |  (MArequest), queue NSLP| WaitResp for
                              |  msg info               | DownRS
                              |                         |
      rx_Confirm_Cmode_up     |Estabsh MA               |UpMA_Estab
      ------------------------+-------------------------+-------------



      ---------------------------------------
      State: UpRS_Estab + WaitResp for DownRS
      ---------------------------------------


      Condition                Action                    State
      ------------------------+-------------------------+-------------
      (rx_Response_Dmode_down |tx_Confirm_Cmode_down,   |UpRS_Estab +
       (MAinfo)) ||           | tx_queued_Msg_Cmode_down| DownMA_Estab
       (rx_Response_Cmode_down| estblish MA             |
       (MAinfo))              |                         |
                              |                         |
      rx_Response_Dmode_down  |Establish RS             |UpRS_Estab +
                              |                         | DownRS_Estab
      ------------------------+-------------------------+-------------



      --------------------------------
      State: UpRS_Estab + DownRS_Estab
      --------------------------------


      Condition                Action                    State
      ------------------------+-------------------------+-------------
      rx_Confirm_Cmode_up     |Establish MA             |DownRS_Estab +
                              |                         | UpMA_Estab
      ------------------------+-------------------------+-------------









Tsenov, et al.            Expires May 11, 2005                 [Page 15]
Internet-Draft            GIMPS State Machine              November 2004



      --------------------------------
      State: DownRS_Estab + UpMA_Estab
      --------------------------------


      Condition                Action                    State
      ------------------------+-------------------------+-------------
      TIMEOUT_Refresh_down    |tx_Query_Dmode_down      |DownRS_Estab +
                              |  (Refresh)              |  UpMA_Estab
      ------------------------+-------------------------+-------------



      --------------------------------
      State: UpRS_Estab + DownMA_Estab
      --------------------------------


      Condition                Action                    State
      ------------------------+-------------------------+-------------
      rx_Confirm_Cmode_up     |Establish MA,            |DownMA_Estab +
                              |  rx_Confirm_Cmode_up    | UpMA_Estab
      ------------------------+-------------------------+-------------



      --------------------------------
      State: DownMA_Estab + UpMA_Estab
      --------------------------------
      (Refer Section "State machine for soft state")



      -----------------
      State: UpMA_Estab
      -----------------


      Condition                Action                    State
      ------------------------+-------------------------+-------------
      (tg_SendMsg) && (Dmode) |tx_Query_Dmode_down      |UpMA_Estab +
                              |  (NSLPinfo)             | WaitResp for
                              |                         | DownRS
                              |                         |
      (tg_SendMsg) && (Cmode) |tx_Query_Dmode_down      |UpMA_Estab +
                              |  (MArequest), queue NSLP| WaitResp for
                              |  msg info               | DownRS
                              |                         |
      rx_Confirm_Cmode_up     |                         |UpMA_Estab
      ------------------------+-------------------------+-------------








Tsenov, et al.            Expires May 11, 2005                 [Page 16]
Internet-Draft            GIMPS State Machine              November 2004



      ---------------------------------------
      State: UpMA_Estab + WaitResp for DownRS
      ---------------------------------------


      Condition                Action                    State
      ------------------------+-------------------------+-------------
      (rx_Response_Dmode_down |tx_Confirm_Cmode_down,   |UpMA_Estab +
       (MAinfo)) ||           | tx_queued_Msg_Cmode_down| DownMA_Estab
       (rx_Response_Cmode_down| , estblish MA           |
       (MAinfo))              |                         |
                              |                         |
      rx_Response_Dmode_down  |Establish RS             |UpMA_Estab +
                              |                         | DownRS_Estab
      ------------------------+-------------------------+-------------






































Tsenov, et al.            Expires May 11, 2005                 [Page 17]
Internet-Draft            GIMPS State Machine              November 2004



9.  State machine for the last GIMPS node in the flow path



      -----------
      State: INIT
      -----------


      Condition                Action                    State
      ------------------------+-------------------------+------------
      UCT                     | initialize variables    |IDLE
      ------------------------+-------------------------+------------



      -----------
      State: IDLE
      -----------


      Condition                Action                    State
      ------------------------+-------------------------+-------------
      (rx_Query_Dmode_up      |tg_RecvMsg to App.,      |UpRS_Estab
        (MArequest)) &&       |  tx_Response_Dmode_up   |
        (!MApresent)          |  (MAinfo), Establish RS |
                              |                         |
      rx_Query_Dmode          |tg_RecvMsg(NSLP info) to |UpRS_Estab
        (NSLPinfo)            | Appl., tx_Response_Dmode|
                              | establish RS            |
                              |                         |
      rx_Query_Dmode          |tg_RecvMsg to Application|UpMA_Estab
        (MArequest)           | , tx_Response_Dmode_up  |
                              | (MAinfo), Re-use        |
                              | existing MA             |
      ------------------------+-------------------------+-------------



      -----------------
      State: UpRS_Estab
      -----------------


      Condition                Action                    State
      ------------------------+-------------------------+------------
      (TIMEOUT_RSstate) ||    |Clear RS,                |IDLE
      (tg_SetStateLifeTime(0))|  tg_NetworkNotification |
                              |                         |
      rx_Query_Dmode(Refresh) |Refresh RS,              |UpRS_Estab
                              |  tx_Response(Refresh)   |
                              |                         |
      rx_Confirm_Cmode        |Establish MA             |UpMA_Estab
      ------------------------+-------------------------+------------




Tsenov, et al.            Expires May 11, 2005                 [Page 18]
Internet-Draft            GIMPS State Machine              November 2004



      -----------------
      State: UpMA_Estab (Upstream MA Established)
      -----------------


      Condition                Action                    State
      ------------------------+-------------------------+------------
      rx_Confirm_Cmode        |Refresh MA               |UpMA_Estab
      ------------------------+-------------------------+------------












































Tsenov, et al.            Expires May 11, 2005                 [Page 19]
Internet-Draft            GIMPS State Machine              November 2004



10.  Security Considerations


   This document does not raise new security considerations.  Any
   security concerns with GIMPS are likely reflected in security related
   NSIS work already (such as [1] or [6]).


   For the time being, the state machines described in this document do
   not consider the security aspect of GMIPS protocol itself.  A future
   versions of this document will add security relevant states and state
   transitions.










































Tsenov, et al.            Expires May 11, 2005                 [Page 20]
Internet-Draft            GIMPS State Machine              November 2004



11.  Open Issues


   At this stage, normal GIMPS messages that carry NSLP data are not
   presented for all states.  A default rules for handling of such
   messages at any "ESTABLISHED STATE" is provided.  Messages exchanged
   through NSLP/GIMPS API and Refresh state messages are not completely
   described, too.  These issues needs further consideration in the
   future version of the document.


   Route change and local repair need further consideration.


   Refreshment of Messaging Association (MA) state is currently not
   elaborated in the document (according to current GIMPS spec, there
   can be an idle timer but tearing down a MA can depend on a node's
   local policy).


   State machine represents handling of GIMPS messages that match the
   node address and NSLPID for the given flow.


   Bypass handling is left for future version of the document.


   There are further unclear issues with processing rules and message
   definition, e.g., soft state handling for both RS and MA states (and
   their combinations), which will be described in more detail in a
   future version of this document.



























Tsenov, et al.            Expires May 11, 2005                 [Page 21]
Internet-Draft            GIMPS State Machine              November 2004



12.  Acknowledgments


   The authors would like to thank Andreas Westermaier and Alex Zrim for 
   helpful discussions with them.
















































Tsenov, et al.            Expires May 11, 2005                 [Page 22]
Internet-Draft            GIMPS State Machine              November 2004



13.  References


13.1  Normative References


   [1]  Schulzrinne, H., "GIMPS: General Internet Messaging Protocol for
        Signaling", draft-ietf-nsis-ntlp-04 (work in progress), October
        2004.


   [2]  Bradner, S., "Key words for use in RFCs to Indicate Requirement
        Levels", March 1997.


13.2  Informative References


   [3]  Vollbrecht, J., Eronen, P., Petroni, N. and Y. Ohba, "State
        Machines for Extensible Authentication Protocol (EAP) Peer and
        Authenticator", draft-ietf-eap-statemachine-05 (work in
        progress), September 2004.


   [4]  Institute of Electrical and Electronics Engineers, "DRAFT
        Standard for Local and Metropolitan Area Networks: Port-Based
        Network Access Control (Revision)", IEEE 802-1X-REV/D9, January
        2004.


   [5]  Ohba, Y., "State Machines for Protocol for Carrying
        Authentication for Network Access  (PANA)",
        draft-ohba-pana-statemachine-00 (work in progress), July 2004.


   [6]  Tschofenig, H. and D. Kroeselberg, "Security Threats for NSIS",
        draft-ietf-nsis-threats-06 (work in progress), October 2004.



Authors' Addresses


   Tseno Tsenov
   Siemens
   Otto-Hahn-Ring 6
   Munich, Bayern  81739
   Germany


   EMail: tseno.tsenov@mytum.de












Tsenov, et al.            Expires May 11, 2005                 [Page 23]
Internet-Draft            GIMPS State Machine              November 2004



   Hannes Tschofenig
   Siemens
   Otto-Hahn-Ring 6
   Munich, Bayern  81739
   Germany


   EMail: Hannes.Tschofenig@siemens.com



   Xiaoming Fu
   University of Goettingen
   Telematics Group
   Lotzestr. 16-18
   Goettingen  37083
   Germany


   EMail: fu@cs.uni-goettingen.de



   Ingo Juchem
   University of Goettingen
   Telematics Group
   Lotzestr. 16-18
   Goettingen  37083
   Germany


   EMail: ijuchem@cs.uni-goettingen.de

























Tsenov, et al.            Expires May 11, 2005                 [Page 24]
Internet-Draft            GIMPS State Machine              November 2004



Intellectual Property Statement


   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.


   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.


   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.



Disclaimer of Validity


   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.



Copyright Statement


   Copyright (C) The Internet Society (2004).  This document is subject
   to the rights, licenses and restrictions contained in BCP 78, and
   except as set forth therein, the authors retain all their rights.



Acknowledgment


   Funding for the RFC Editor function is currently provided by the
   Internet Society.




Tsenov, et al.            Expires May 11, 2005                 [Page 25] 