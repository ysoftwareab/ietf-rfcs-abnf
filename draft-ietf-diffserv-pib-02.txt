Network Working Group                             M. Fine
Internet Draft                                    K. McCloghrie
Expires May 2001                                     Cisco Systems
                                                  J. Seligson
                                                  K. Chan
                                                      Nortel Networks
                                                  S. Hahn
                                                      Intel
                                                  A. Smith
                                                      Allegro Networks
                                                  Francis Reichmeyer
                                                      IPHighway


                                                  November 24, 2000




   Differentiated Services Quality of Service Policy Information Base



                     draft-ietf-diffserv-pib-02.txt




Status of this Memo


This document is an Internet-Draft and is in full conformance with all
provisions of Section 10 of RFC2026.  Internet-Drafts are working
documents of the Internet Engineering Task Force (IETF), its areas, and
its working groups.  Note that other groups may also distribute working
documents as Internet-Drafts.


Internet-Drafts are draft documents valid for a maximum of six months
and may be updated, replaced, or obsoleted by other documents at any
time.  It is inappropriate to use Internet-Drafts as reference material
or to cite them other than as ``work in progress.''


To view the current status of any Internet-Draft, please check the











DiffServ QoS Policy Information Base                       November 2000


``1id-abstracts.txt'' listing contained in an Internet-Drafts Shadow
Directory, see http://www.ietf.org/shadow.html.
















































                                                                [Page 2]





DiffServ QoS Policy Information Base                       November 2000


1.  Glossary

PRC     Provisioning Class.  A type of policy data.
PRI     Provisioning Instance.  An instance of a PRC.
PIB     Policy Information Base.  The database of policy information.
PDP     Policy Decision Point. See [RAP-FRAMEWORK].
PEP     Policy Enforcement Point. See [RAP-FRAMEWORK].
PRID    Provisioning Instance Identifier.  Uniquely identifies an
        instance of a a PRC.

2.  Introduction


[SPPI] describes a structure for specifying policy information that can
then be transmitted to a network device for the purpose of configuring
policy at that device.  The model underlying this structure is one of
well defined policy rule classes and instances of these classes residing
in a virtual information store called the Policy Information Base (PIB).


This document specifies a set of policy rule classes specifically for
configuring QoS Policy for Differentiated Services [DSARCH].


One way to provision policy is by means of the COPS protocol [COPS] with
the extensions for provisioning [COPS-PR].  This protocol supports
multiple clients, each of which may provision policy for a specific
policy domain such as QoS.  The PRCs defined in this DiffServ QoS PIB
are intended for use by the COPS-PR QoS client type.  Furthemore, these
PRCs are in addition to any other PIBs that may be defined for the QoS
client type in the future, as well as the PRCs defined in the Framework
PIB [FR-PIB].




3.  Relationship to the Diffserv Informal Management Model

This PIB is designed according to the Differentiated Services Informal
Management Model documented in [MODEL]. The model describes the way that
ingress and egress interfaces of an 'n'-port router are modelled. It
describes the configuration and management of a Diffserv interface in
terms of a Transmission Control Block (TCB) which contains, by
definition, zero or more classifiers, meters, actions, algorithmic
droppers, queues and schedulers. These elements are arranged according





                                                                [Page 3]





DiffServ QoS Policy Information Base                       November 2000


to the QoS policy being expressed, always in that order. Traffic may be
classified; classified traffic may be metered; each stream of traffic
identified by a combination of classifiers and meters may have some set
of actions performed on it; it may have dropping algorithms applied and
it may ultimately be stored into a queue before being scheduled out to
its next destination, either onto a link or to another TCB. When the
treatment for a given packet must have any of those elements repeated in
a way that breaks the permitted sequence {classifier, meter, action,
algorithmic dropper, queue, scheduler}, this must be modelled by
cascading multiple TCBs.

The PIB represents this cascade by following the "Next" attributes of
the various elements. They indicate what the next step in Diffserv
processing will be, whether it be a classifier, meter, action,
algorithmic dropper, queue, scheduler or a decision to now forward a
packet.

The PIB models the individual elements that make up the TCBs.  The
higher level concept of a TCB is not required in the parameterization or
in the linking together of the individual elements, hence it is not used
in the PIB itself and only mentioned in the text for relating the PIB
with the [MODEL].  The actual distinguishing of which TCB a specific
element is a part of is not needed for the instructmentation of a device
to support the functionalities of DiffServ, but it is useful for
conceptual reasons.  By not including the TCB notion in its parameters,
this PIB allow any grouping of elements to construct TCBs, using rules
indicated by the [MODEL].  This will minimize changes to this PIB if
rules in [MODEL] changes.

The notion of a Data Path is used in this PIB to indicate the DiffServ
processing a packet may experience.  This Data Path is distinguished
based on the Role Combination and the Direction of the flow the packet
is part of.  A Data Path Table Entry indicates the first of possibly
multiple elements that will apply DiffServ treatment to the packet.


3.1.  PIB Overview


This PIB is structured based on the need to configure the sequential
DiffServ treatments being applied to a packet, and the parameterization
of these treatments.  These two aspects of the configuration are kept
separate throughout the design of the PIB, and are fulfilled using
separate tables and data definitions.






                                                                [Page 4]





DiffServ QoS Policy Information Base                       November 2000


In addition, the PIB includes tables describing the capabilities and
limitations of the device using a general extensible framework.  These
tables are reported to the PDP and assist the PDP with the configuration
of functional elements that can be realized by the device.

In this PIB, the ingress and egress portions of a router are configured
independently but in the same manner. The difference is distinguished by
an attribute in a table describing the start of the data path.  Each
interface performs some or all of the following high-level functions:

o    Classify each packet according to some set of rules

o    Determine whether the data stream the packet is part of is within
     or outside its rate

o    Perform a set of resulting actions such as application of an
     appropriate drop policy and marking of the traffic with a
     Differentiated Services Code Point (DSCP) as defined in [DSFIELD].

o    Enqueue the traffic for output in the appropriate queue, whose
     scheduler may shape the traffic or simply forward it with some
     minimum rate or maximum latency.

The PIB therefore contains the following elements:

Data Path Table
     A general extensible framework for describing the starting point of
     DiffServ datapaths within a single DiffServ device.  This table
     descibes interface role combination and interface direction
     specific data paths.

Classifier Tables
     A general extensible framework for specifying a group of filters.

Meter Tables
     A general extensible framework and one example of a
     parameterization table - TBMeter table, applicable for Simple Token
     Bucket Meter, Average Rate Meter, Single Rate Three Color Meter,
     Two Rate Three Color Meter, and Sliding Window Three Color Meter.

Action Tables
     A general extensible framework and examples of parameterization
     tables for Absolute Drop, Mark and Count actions.  The
     "multiplexer", "replicator" and "null" actions described in [MODEL]
     are accomplished implicitly by means of the RowPointer structures





                                                                [Page 5]





DiffServ QoS Policy Information Base                       November 2000


     of the other elements.

Queue, Scheduler and Algorithmic Dropper Tables
     A general extensible framework for parameterizing queuing and
     scheduler systems.  The queue measurement dependent algorithmic
     droppers are also described here.

Capabilities Tables
     A general extensible framework for defining the capabilities and
     limitations of the elements listed above. The capability tables
     allow intelligent configuration of the elements by a PDP.


4.  Structure of the PIB

4.1.  General Conventions


The PIB consists of classes that represent functional elements in the
data path (e.g. classifiers, meters, actions), and classes that specify
parameters that apply to a certain type of functional element (e.g. a
Token Bucket meter or a Mark action).  Parameters are typically
specified in a separate PRC to enable the use of parameter classes by
multiple policies.

Functional element PRC's use the Prid TC (defined in [SPPI]) to indicate
indirection.  A Prid is a object identifier that is used to specify an
instance of a PRC in another table.  A Prid is used to point to
parameter PRC that applies to a functional element, such as which filter
should be used for a classifier element.   A Prid is also used to
specify an instance of a functional element PRC that describes what
treatment should be applied next for a packet in the data path.

Note that the use of Prid's to specify parameter PRC's allows the same
funtional element PRC to be extended with a number of different types of
parameter PRC's.  In addition, using Prids to indicate the next
functional datapath element allows the elements to be ordered in any
way.

4.2.  DiffServ Data Paths

This part of the PIB provides instrumentation for connecting the
DiffServ Functional Elements within a single DiffServ device.  Please
refer to the [MODEL] for discussions on the valid sequencing and
grouping of DiffServ Functional Elements.  Given some basic information,





                                                                [Page 6]





DiffServ QoS Policy Information Base                       November 2000


e.g. the interface role combination and direction, the first DiffServ
Functional Element is determined.  Subsequent DiffServ Functional
Elements are provided by the "Next" pointer attribute of each entry of
data path tables.  A description of how this "Next" pointer is used in
each table is provided in their respective sections.


4.2.1.  Data Path PRC

The Data Path PRC provides the DiffServ treatment starting points for
all packets of this DiffServ device. Each instance of this PRC specifies
the interface role combination and direction for the packet flow.  There
should be at most two entries for each role combination, one for ingress
and one for egress.  Each instance provides the first DiffServ
Functional Element each packet at a specific interface (identified by
the roles assigned to the interface) traveling in a specific relative
direction should experience.  Notice this table is interface specific,
with the use of RoleCombination.  To indicate explicitly that there are
no Diffserv treatments for a particular role combination and direction,
an instance of the Data Path PRC can be created with zeroDotZero in the
qosDataPathStart attribute.  This situation can also be indicated
implicitly by not supplying an instance of a Data Path PRC for that
particular role combination and direction.  The explicit/implicit
selection is up to the implementation.  This means that the PEP should
perform normal IP device processing when zeroDotZero is used in the
qosDataPathStart attribute, or when the entry does not exist.  Normal IP
device processing will depend on the device, for example, this can be
forwarding the packet.



4.3.  Classifiers


The classifier and classifier element tables determine how traffic is
sorted out. They identify separable classes of traffic, by reference to
appropriate filters, which may select anything from an individual micro-
flow to aggregates identified by DSCP.

The classification is used to send these separate streams to appropriate
Meter, Action, Queue, Scheduler and Algorithmic Dropper elements.  For
example, to indicate a multi-stage meter, sub-classes of traffic may be
sent to different meter stages: e.g. in an implementation of the Assured
Forwarding (AF) PHB [AF-PHB], AF11 traffic might be sent to the first
meter, AF12 traffic might be sent to the second and AF13 traffic sent to





                                                                [Page 7]





DiffServ QoS Policy Information Base                       November 2000


the second meter stage's out-of-profile action.

The concept of a classifier is the same as described in [MODEL].  The
structure of the classifier and classifier element tables, is the same
as the classifier described in [MODEL].  Classifier elements have an
associated precedence order solely for the purpose of resolving
ambiguity between overlapping filters.  Filter with higher values of
order are compared first; the order of tests for entries of the same
precedence is unimportant.

A datapath may consist of more than one classifier.  There may be
overlap of filter specification between filters of different
classifiers.  The first classifier functional datapath element
encountered, as determined by the sequencing of diffserv functional
datapath elements, will be used first.

An important form of classifier is "everything else": the final stage of
the classifier i.e. the one with the lowest precedence, must be
"complete" since the result of an incomplete classifier is not
necessarily deterministic - see [MODEL] section 4.1.2.

The definition of the actual filter to be used by the classifier is
referenced via a Prid: this enables the use of any sort of filter table
that one might wish to design, standard or proprietary.  No filters are
defined in this PIB.  However, standard filters for IP packets are
defined in the Framework PIB [FR-PIB].


4.3.1.  Classifier PRC


Classifiers are organized by instances of the Classifier PRC. Each
instance corresponds to a single Classifier.  Instances of the
Classifier PRC get linked from the upstream diffserv functional datapath
element, e.g., a qosDataPathentry instance.  A data path may consist of
more than one Classifier, and the order in which the classifiers are
applied to the traffic is the same as the order the classifier table
entries are linked in the data path.


4.3.2.   Classifier Element PRC


While the Classifier PRC specifies the input side of the Classifier, the
Classifier Element PRC enumerates each branch of the fan-out of a





                                                                [Page 8]





DiffServ QoS Policy Information Base                       November 2000


Classifier, associating each fan-out branch with a Filter for
discriminating the traffic for that branch. Each Classifier Element PRI
is part of a Classifier, indicated by qosClfrElementClfrId.

The definition of the actual filter to be used by the classifier is
referenced via a Prid: this enables the use of any sort of filter table
that one might wish to design, standard or proprietary.  An example of a
filter that may be pointed to by a Classifier Element PRI is the
frwkIpFilter PRC, defined in [FR-PIB].



4.4.  Meters


A meter, according to [MODEL] section 5, measures the rate at which
packets making up a stream of traffic pass it, compares this rate to
some set of thresholds and produces some number (two or more) of
potential results. A given packet is said to "conform" to the meter if,
at the time that the packet is being looked at, the stream appears to be
within the meter's profile. PIB syntax makes it easiest to define this
as a sequence of one or more cascaded pass/fail tests, modeled here as
if-then-else constructs. It is important to understand that this way of
modelling does not imply anything about the implementation being
"sequential": multi-rate/multi-profile meters e.g. those designed to
support [SRTCM] or [TRTCM], can still be modelled this way even if they,
of necessity, share information between the stages: the stages are
introduced merely as a notational convenience in order to simplify the
PIB structure.



4.4.1.  Meter PRC


The generic meter PRC is used as a base for all more specific forms of
meter.  The definition of parameters specific to the type of meter used
is referenced via a pointer to an instance of a PRC containing those
specifics.  This enables the use of any sort of specific meter table
that one might wish to design, standard or proprietary. The specific
meter table may be, but does not need to be, defined in this PIB module.









                                                                [Page 9]





DiffServ QoS Policy Information Base                       November 2000


4.4.2.  Token-Bucket Meter PRC


This is included as an example of a common type of meter.  Entries in
this table are referenced from the qosMeterSpecific attributes of meter
PRC instances.  The parameters are represented by a rate qosTBMeterRate,
a burst size qosTBMeterBurstSize, and an interval qosTBMeterInterval.
The type of meter being parameterized is indicated by the qosTBMeterType
attribute.  This is used to determine how the rate, burst and rate
interval parameters are used.  Additional meter parameterization classes
can be defined in this or another PIB when necessary.



4.5.  Actions

Actions include "no action", "mark the traffic with a DSCP" or "drop the
traffic". Other tasks such as "shape the traffic" or "drop based on some
algorithm" are handled elsewhere as queueing mechanisms, rather than
actions, consistent with [MODEL].  The "multiplexer", "replicator" and
"null" actions described in [MODEL] are accomplished implicitly through
various combinations of the other elements.

This PIB uses the Action PRC qosActionTable to organize one Action's
relationship with the element(s) before and after it. It allows Actions
to be cascaded to enable multiple Actions be applied to a single traffic
stream by using each entry's qosActionNext attribute.  The qosActionNext
attribute of the last action entry in the chain points to the next
element in the TCB, if any, e.g.  a Queueing element.  It may also point
at a next TCB.

The parameters needed for the Action element will depend on the type of
Action to be taken. Hence the PIB allows for specific Action Tables for
the different Action types.  This flexibility allows additional Actions
be specified in future revisions of this PIB, or in other PIBs and also
allows for the use of proprietary Actions without impact on those
defined here.

There is one action - the absolute drop action - that does not require
additional parameters.  This action silently discards all traffic
presented to it.  To accommodate this action, the qosAction PRC contains
an attribute, qosActionType, that indicates whether the absolute drop
action is to be used or if the action is described by a specific action
table.






                                                               [Page 10]





DiffServ QoS Policy Information Base                       November 2000


4.5.1.  DSCP Mark Action PRC

This Action is applied to traffic in order to mark it with a Diffserv
Codepoint (DSCP) value, specified in the qosDscpMarkActTable.  Other
marking actions might be specified elsewhere - these are outside the
scope of this PIB.



4.5.2.  Absolute Drop Action

This action just silently discards all traffic presented to it.  This
action has no additional parameters and so is represented only within
diffServActionType without its specific table.



4.6.  Queueing Elements

These include Algorithmic Droppers, Queues and Schedulers which are all
inter-related in their use of queueing techniques.


4.6.1.  Algorithmic Dropper PRC

Algorithmic Droppers have a close relationship with queueing: they are
represented in this PIB by instances of an Algorithmic Dropper PRC.
Entries contain a qosAlgDropNext attribute which indicates to which
queue they sink their traffic.

An Algorithmic Dropper is assumed to operate indiscriminately on all
packets that are presented at its input. If it is necessary to perform
additional classification on the stream then a separate TCB must be
introduced at this point: Classifier elements here can then distinguish
the different types of traffic on which dropping is to act and the
treatment for each type is described by a separate qosAlgDropEntry.

Algorithmic Droppers may also contain a pointer to specific detail of
the drop algorithm. This PIB defines the detail for three drop
algorithms: Tail Drop, Head Drop and Random Drop; other algorithms are
outside the scope of this PIB modele but the general framework is
intended to allow for their inclusion via other PIB modules.

One generally-applicable parameter of a dropper is the specification of
a queue-depth threshold at which some drop action is to start. This is





                                                               [Page 11]





DiffServ QoS Policy Information Base                       November 2000


represented in this PIB, as a base attribute of the Algorithmic Dropper
entry, by pointing to the queue for which depth is to be compared and
the depth threshold to compare against.

o    A Tail Dropper requires the specification of a maximum queue depth
     threshold: when the queue pointed at by diffServAlgDropQMeasure
     reaches that depth threshold, qosAlgDropQThresh, any new
     traffic arriving at the dropper is discarded. This algorithm uses
     only parameters that are part of the qosAlgDropEntry.

o    A Head Dropper requires the specification of a maximum queue depth
     threshold: when the queue pointed at by qosAlgDropQMeasure
     reaches that depth threshold, qosAlgDropQThresh, traffic
     currently at the head of the queue is discarded. This algorithm
     uses only parameters that are part of the qosAlgDropEntry.

o    Random Droppers are recommended as a way to control congestion, in
     [QUEUEMGMT] and called for in the [AF-PHB]. Various implementations
     exist, which agree on marking or dropping just enough traffic to
     communicate with TCP-like protocols about congestion avoidance, but
     differ markedly on their specific parameters. This PIB attempts to
     offer a minimal set of controls for any random dropper, but expects
     that vendors will augment the PRC with additional controls and
     status in accordance with their implementation. This algorithm
     requires additional parameters on top of those in
     qosAlgDropEntry; these are discussed below.



4.6.2.  Random Dropper PRC


One example of a random dropper is a RED-like dropper.  An example of
the representation chosen in this PIB for this element is shown in
Figure 1.

Random droppers often have their drop probability function described as
a plot of drop probability (P) against averaged queue length (Q).
(Qmin,Pmin) then defines the start of the characteristic plot.  Normally
Pmin=0, meaning with average queue length below Qmin, there will be no
drops.  (Qmax,Pmax) defines a "knee" on the plot, after which point the
drop probability become more progressive (greater slope).  (Qclip,1)
defines the queue length at which all packets will be dropped. Notice
this is different from Tail Drop because this uses an averaged queue
length.  although it is possible for Qclip = Qmax. In the PIB module,





                                                               [Page 12]





DiffServ QoS Policy Information Base                       November 2000


qosRandomDropMinThreshBytes and qosRandomDropMinThreshPkts represent
Qmin.  qosRandomDropMaxThreshBytes and qosRandomDropMaxThreshPkts
represent Qmax.


      +-------------+      +-----------+
  --->| Next   --------+-->| Next    ---------> to Scheduler
      | Thresh=100k |  |   | Min=none  |
      | Measure -------+   | Max=none  |
      | Type=random |      | Pri=10    |
      | Specif  -------+   | Type=fifo |
      +-------------+  |   +-----------+
        AlgDrop.3      |    Queue.4
                       |
                       |   +--------------+
                       +-->| Minthresh=10k|
                           | Maxthresh=80k|
                           | Weight=1/16  |
                           | ProbMax= 0.5 |
                           +--------------+
                            RandomDrop.3


    Figure 1: Example Use of the RandomDropTable for Random Droppers

qosRandomDropProbMax represents Pmax. This PIB does not represent Pmin
(assumed to be zero unless otherwise represented) or Qclip (assumed to
be Qmax unless otherwise represented).

Each random dropper specification is associated with a queue. This
allows multiple drop processes (of same or different types) be
associated with the same queue, as different PHB implementations may
require.  This also allows for sequences of multiple droppers if
necessary.

The calculation of a smoothed queue length may also have an important
bearing on the behaviour of the dropper: parameters may include the
sampling interval and the weight of each sample. The performance may be
very sensitive to the values of these parameters and a wide range of
possible values may be required due to a wide range of link speeds. Most
algorithms include a sample weight, represented here by
qosRandomDropInvWeight. Note however that there is ongoing research on
this topic, see e.g. [ACTQMGMT].

Additional parameters may be added in an enterprise PIB module, e.g. by





                                                               [Page 13]





DiffServ QoS Policy Information Base                       November 2000


using AUGMENTS or EXTENDS on this table, to handle aspects of random
drop algorithms that are not standardised here.

NOTE: Deterministic Droppers can be viewed as a special case of Random
Droppers with the drop probability restricted to 0 and 1. Hence
Deterministic Droppers might be described by a Random Dropper with Pmin
= 0, Pmax = 1, Qmin = Qmax = Qclip, the averaged queue length at which
dropping occurs.


4.6.3.  Queues and Schedulers

The Queue PRC models simple FIFO queues, as described in [MODEL] section
7.1.1.  The Scheduler PRC allows flexibility in constructing both simple
and somewhat more complex queueing hierarchies from those queues.  Of
course, since TCBs can be cascaded multiple times on an interface, even
more complex hierarchies can be constructed that way also.

Queue PRC instances are pointed at by the "next" attributes of the
upstream elements e.g. qosMeterSucceedNext.  Note that multiple upstream
elements may direct their traffic to the same Queue PRI.  For example,
the Assured Forwarding PHB suggests that all traffic marked AF11, AF12
or AF13 be placed in the same queue, after metering, without reordering.
This would be represented by having the qosMeterSucceedNext of each
upstream meter point at the same Queue PRI.

Queue Table entries specify the scheduler it wants service from by use
of its Next pointer.

Each Scheduler Table entry represents the algorithm in use for servicing
the one or more queues that feed it. The [MODEL] section 7.1.2 describes
a scheduler with multiple inputs: this is represented in the PIB by
having the scheduling parameters be associated with each input.  In this
way, sets of Queues can be grouped together as inputs to the same
Scheduler.  This table serves to represent the example scheduler
described in the [MODEL]: other more complex representations might be
created outside of this PIB.

Both the Queue PRC and the Scheduler PRC use instances of the Scheduler
Parameterization PRC to specify diffserv treatment parameterization.
Scheduler Parameter PRC instances are used to parameterize each input
that feeds into a scheduler.  The inputs can be a mixture of Queue PRI's
and Scheduler PRI's.  Scheduler Parameter PRI's can be used/reused by
one or more Queue and/or Scheduler Table entries.






                                                               [Page 14]





DiffServ QoS Policy Information Base                       November 2000


For representing a Strict Priority scheduler, each scheduler input is
assigned a priority with respect to all the other inputs feeding the
same scheduler, with default values for the other parameters.  A higher-
priority input will be serviced first over a lower-priority input,
assuming that all guarantees have already been met.

For Weighted Queueing algorithms e.g. WFQ, WRR, the "weight" of a given
scheduler input is represented with a Minimum Service Rate leaky-bucket
profile which provides guaranteed bandwidth to that input, if required.
This is represented, as were token-bucket meters, by a rate
qosSchdParamMinRateAbs. The rate may, alternatively, be represented by a
relative value, as a fraction of the interface's current line rate,
qosSchdParamMinRateRel to assist in cases where line rates are variable
or where a higher-level policy might be expressed in terms of fractions
of network resources. The two rate parameters are inter- related and
changes in one may be reflected in the other.

An input may also be capable of acting as a non-work-conserving [MODEL]
traffic shaper: this is done by defining a Maximum Service Rate leaky-
bucket profile in order to limit the scheduler bandwidth available to
that input. This is represented, similarly to the minimum rate, by a
rate qosSchdParamMaxRateAbs. The rate may, alternatively, be represented
by a relative value, as a fraction of the interface's current line rate,
qosSchdParamMaxRateRel.

Notice hierarchical schedulers can be parameterized using these PRC's by
having Scheduler PRI's feed into other Scheduler PRI's.



4.7.  Specifying Device Capabilities


The Diffserv PIB uses the Base PRC classes frwkPrcSupportTable and
frwkCompLimitsTable defined in [FR-PIB] to specify what PRC's are
supported by a PEP and to specify any limitations on that support.  The
PIB also uses the capability PRC's frwkIfCapSetTable and
frwkIfCapSetRoleComboTable defined in [FR-PIB] to specify the device's
interface types and role combinations.  Each instance of the capability
PRC frwkIfCapSetTable contains an OID that points to an instance of a
PRC that describes some capability of that interface type.  The Diffserv
PIB defines several of these capability PRC's, which assist the PDP with
the configuration of Diffserv functional elements that can be
implemented by the device.






                                                               [Page 15]





DiffServ QoS Policy Information Base                       November 2000


Classification capabilities, such as which directions (ingress or egress
support IP classification and whether the interface is capable of
classifying on layer 4 information, are reported using
qosIfClassificationCapsTable.  Metering capabilities, such as which
directions support metering, are specified using qosIfMeteringCapsTable.
Scheduling capabilities, such as the maximum number of queues and
priorities supported, are reported using qosIfSchedulingCapsTable.

Two PRC's are defined to allow specification of the element linkage
capabilities of the PEP.  The qosIfElmDepthCaps PRC indicates the
maximum number of functional datapath elements that can be linked
consecutively in a datapath.  The qosIfElmLinkCaps PRC indicates what
functional datapath elements are may follow a specific type of element
in a datapath.



5.  PIB Usage Example

This section provides some examples on how the different table entries
of this PIB may be used to parameterize a DiffServ Device.  For the
figures, all the PRC and attribute names are assumed to have the PRC
(table entry) name as the common initial part of the name.


+---------------------+
|DataPath             |
| Roles="A+B"           |
| IfDirection=Ingress |    +------+
| Start --------------+--->|Clfr  |
+---------------------+    | Id=1 |
                           +------+

  +------------+      +--------------+      +-----------+
  |ClfrElement |  +-->|Meter         |  +-->|Action     |
  | Id=101     |  |   | Id=101       |  |   | Id=101    |
  | ClfrId=1   |  |   | SucceedNext -+--+   | Next -----+---->...
  | Order=NA   |  |   | FailNext ----+->... | Specific -+-+
  | Next ------+--+   | Specific -+  |      | Type=Spcf | |
  | Specific --+-+    +-----------+--+      +-----------+ |
  +------------+ |                |               +-------+
                 |   +-------+    |   +--------+  |   +------------+
                 +-->|Filter1|    +-->|TBMeter1|  +-->|DscpMarkAct1|
                     +-------+        +--------+      +------------+






                                                               [Page 16]





DiffServ QoS Policy Information Base                       November 2000


  +------------+      +--------------+      +-----------+
  |ClfrElement |  +-->|Meter         |  +-->|Action     |
  | Id=102     |  |   | Id=102       |  |   | Id=102    |
  | ClfrId=1   |  |   | SucceedNext -+--+   | Next -----+---->...
  | Order=NA   |  |   | FailNext ----+->... | Specific -+-+
  | Next ------+--+   | Specific -+  |      | Type=Spcf | |
  | Specific --+-+    +-----------+--+      +-----------+ |
  +------------+ |                |               +-------+
                 |   +-------+    |   +--------+  |   +------------+
                 +-->|Filter2|    +-->|TBMeter2|  +-->|DscpMarkAct2|
                     +-------+        +--------+      +------------+

  +------------+      +--------------+      +-----------+
  |ClfrElement |  +-->|Meter         |  +-->|Action     |
  | Id=103     |  |   | Id=103       |  |   | Id=103    |
  | ClfrId=1   |  |   | SucceedNext -+--+   | Next -----+---->...
  | Order=NA   |  |   | FailNext ----+->... | Specific -+-+
  | Next ------+--+   | Specific -+  |      | Type=Spcf | |
  | Specific --+-+    +-----------+--+      +-----------+ |
  +------------+ |                |               +-------+
                 |   +-------+    |   +--------+  |   +------------+
                 +-->|Filter3|    +-->|TBMeter3|  +-->|DscpMarkAct3|
                     +-------+        +--------+      +------------+


                   Figure 3: Data Path Example Part 1

     +-------------+      +------------------+     +----------------------+
---->|Q            |   +->|Scheduler         |  +->|Scheduler             |
     | Id=EF       |   |  | Id=DiffServ      |  |  | Id=Shaping           |
     | Next -------+---+  | Next ------------+--+  | Next=zeroDotZero     |
     | SchdParam -+|   |  | Method=priorityq |     | Method=priorityq     |
     +------------++   |  | SchdParam -+     |     | SchdParam=zeroDotZero|
                  |    |  +------------+-----+     +----------------------+
     +------------+    |               |
     |                 |  +------------+
     |  +-----------+  |  |
     +->|SchdParamEF|  |  |  +----------------+
        +-----------+  |  +->|SchdParamShaping|
                       |     +----------------+
                       |
                       |
                       +-----------------------------------------+
                                                                 |
                                                                 |





                                                               [Page 17]





DiffServ QoS Policy Information Base                       November 2000


    +----------------+       +-------------+                     |
--->|AlgDrop         |    +->|Q            |                     |
    | Id=AF11        |    |  | Id=AF1X     |    +-------------+  |
    | Type=randomDrop|    |  | Next -------+--->|Scheduler    |  |
    | Next ----------+-+--+  | SchdParam -+|    | Id=AF       |  |
    | QMeasure ------+-+  |  +------------++    | Next -------+--+
    | QThreshold     |    |               |     | Method=wfq  |
    | Specific -+    |    |  +------------+     | SchdParam -+|
    +-----------+----+    |  |                  +------------++
                |         |  |  +-------------+              |
    +-----------+         |  +->|SchdParamAF1X| +------------+
    |  +--------------+   |     +-------------+ |
    +->|RandomDropAF11|   |                     |  +-----------+
       +--------------+   |                     +->|SchdParamAF|
                          |                        +-----------+
    +----------------+    |
--->|AlgDrop         |    |
    | Id=AF12        |    |
    | Type=randomDrop|    |
    | Next ----------+-+--+
    | QMeasure ------+-+
    | QThreshold     |
    | Specific -+    |
    +-----------+----+
                |
    +-----------+
    |  +--------------+
    +->|RandomDropAF12|
       +--------------+


                   Figure 4: Data Path Example Part 2

5.1.  Data Path and Classifier Example Discussion

The example in Figure 4 shows a single DataPathEntry PRI feeding into a
single Classifier PRI, with three ClfrElement and Filter PRI pairs
belonging to this Classifier 1.  Notice the three Filters used here must
completely classify all the traffic presented to this data path.

Another level of classification can be defined that follows the Action
function datapath elements in Figure 3.  This second level of
classifiers and their subsequent function datapath elements would be
considered as in another TCB.






                                                               [Page 18]





DiffServ QoS Policy Information Base                       November 2000


This multi-level classification allow the construction of traffic
separations like:
  if (dept1)
  {
    if (appl1) then take dept1-appl1-action.
    if (appl2) then take dept1-appl2-action.
    if (appl3) then take dept1-appl3-action.
  }
  if (dept2)
  {
    if (appl1) then take dept2-appl1-action.
    if (appl2) then take dept2-appl2-action.
    if (appl3) then take dept2-appl3-action.
  }
  if (dept3)
  {
    if (appl1) then take dept3-appl1-action.
    if (appl2) then take dept3-appl2-action.
    if (appl3) then take dept3-appl3-action.
  }

The filters for appl1, appl2, appl3 may be reused for the above setup.



5.2.  Meter and Action Example Discussion

A simple Meter that can be parameterized by a single TBMeter entry is
shown here.  For Metering types that require mutliple TBMeter entries
for parameterization, a second level Meter and TBMeter table entries may
be used.  For example, for trTCM, with the first level TBMeter entry
used for Peak Information Token Bucket, the first level SucceedNext
points to the second level Meter entry, with second level TBMeter entry
used for Committed Information Token Bucket.



5.3.  Queue and Scheduler Example Discussion

Example in Figure 4 shows three classified input traffic streams, EF,
AF11, and AF12, feeding into their respective queue and algorithmic
droppers.  After their respective dropping process, the AF traffic
streams feed into the same queue, QAF1X.

A Scheduler, AF, is shown in Figure 4, as the sink for AF1X queue





                                                               [Page 19]





DiffServ QoS Policy Information Base                       November 2000


traffic, servicing AF1X queue with scheduling parameters indicated by
SchdParamAF1X.  This scheduler is used to service traffic from AF1X,
AF2X, AF3X queues using weighted fair queueing method.  The AF2X and
AF3X queues are not shown in Figure 4, they can be very much like AF1X
queue setup.

Another traffic stream, EF, is handled by the EF queue.  Scheduler
DiffServ services output of EF queue using SchdParamEF, and output of AF
scheduler using SchdParamAF, with Weighted Fair Queueing method.

Notice all the diffserv traffic may go out on a link with traffic
shaping.  The traffic shaping can be parameterize using the Shaping
Scheduler in Figure 4.  For shaping, the qosSchdParamMaxRate attributes
should be used.  The output of the Shaping Scheduler is indicated using
its Next pointer with value of zeroDotZero, the output port.





6.  Summary of the DiffServ PIB

The DiffServ PIB consists of one module containing the base PRCs for
setting DiffServ policy, queues, classifiers, meters, etc.,  and also
contains capability PRC's that allow a PEP to specify its device
characteristics to the PDP.  This module contains two groups, which are
summarized in this section.

QoS Capabilities Group
     This group consists of PRCs to indicate to the PDP the types of
     interface supported on the PEP in terms of their QoS capabilities
     and PRCs that the PDP can install in order to configure these
     interfaces (queues, scheduling parameters, buffer sizes, etc.) to
     affect the desired policy.  This group describes capabilities in
     terms of the types of interfaces and takes configuration in terms
     of interface types and role combinations [FR-PIB]; it does not deal
     with individual interfaces on the device.

QoS Policy Group
     This group contains configuration of the functonal elements that
     comprise the QoS policy that applies to an interface and the
     specific parameters that describe those elements.  This group
     contains classifiers, meters, actions, droppers, queues and
     schedulers. This group also contains the PRC that associates the
     datapath elements with role combinations.





                                                               [Page 20]





DiffServ QoS Policy Information Base                       November 2000


7.  PIB Operational Overview

This section provides an operation overview of configuring DiffServ QoS
policy.

After initial PEP to PDP communication setup, using [COPS-PR] for
example, the PEP will provide to the PDP the PIB Provisioning Classes
(PRCs), interface types, and interface type capabilities it supports.

The PRCs supported by the PEP are reported to the PDP in the PRC Support
Table, frwkPrcSupportTable defined in the framework PIB [FR-PIB].  Each
instance of the frwkPrcSupportTable indicates a PRC that the PEP
understands and for which the PDP can send class instances as part of
the policy information.

The interface types the PEP supports are described by rows in the
interface type table, frwkIfCapsSetTable.  Each row, or instance of this
class contains a pointer to a instance of a PRC that describes the
capabilities of the interface type.  The capability objects may reside
in the qosIfClassifierCapsTable, the qosIfMeterCapsTable, the
qosIfSchedulerCapsTable, the qosIfElmDepthCapsTable, the
qosIfElmOutputCapsTable, or in a table defined in another PIB.

The PDP, with knowledge of the PEP's capabilities, then provides the PEP
with administration domain and interface-specific policy information.

Instances of the qosDataPathTable are used to specify the first element
in the set of functional elements applied to an interface.  Each
instance of the qosDataPathTable applies to an interface type defined by
its roles and direction (ingress or egress).




















                                                               [Page 21]





DiffServ QoS Policy Information Base                       November 2000


8.  PIB Definitions




8.1.  The DiffServ Base PIB

DIFFSERV-PIB PIB-DEFINITIONS ::= BEGIN


IMPORTS
    Unsigned32, Integer32,
    MODULE-IDENTITY, OBJECT-TYPE
            FROM COPS-PR-SPPI
    zeroDotZero
         FROM SNMPv2-SMI
    TruthValue, TEXTUAL-CONVENTION
            FROM SNMPv2-TC
    InstanceId, ReferenceId, TagId, TagReference
            FROM COPS-PR-SPPI
    RoleCombination
            FROM FRAMEWORK-PIB
    Dscp, IfDirection
            FROM DIFF-SERV-MIB;


qosPolicyPib  MODULE-IDENTITY
    CLIENT-TYPE { tbd   -- QoS Client Type
                }
    LAST-UPDATED "200011241800Z"
    ORGANIZATION "IETF DIFFSERV WG"
    CONTACT-INFO "
                  Michael Fine
                  Cisco Systems, Inc.
                  170 West Tasman Drive
                  San Jose, CA  95134-1706 USA
                  Phone: +1 408 527 8218
                  Email: mfine@cisco.com


                  Keith McCloghrie
                  Cisco Systems, Inc.
                  170 West Tasman Drive,
                  San Jose, CA 95134-1706 USA
                  Phone: +1 408 526 5260





                                                               [Page 22]





DiffServ QoS Policy Information Base                       November 2000


                  Email: kzm@cisco.com


                  John Seligson
                  Nortel Networks, Inc.
                  4401 Great America Parkway
                  Santa Clara, CA 95054 USA
                  Phone: +1 408 495 2992
                  Email: jseligso@nortelnetworks.com"
    DESCRIPTION
            "The PIB module containing a set of policy rule classes
            that describe quality of service (QoS) policies for
            DiffServ. It includes general classes that may be extended
            by other PIB specifications as well as a set of PIB
            classes related to IP processing."

    ::= { tbd }


qosCapabilityClasses  OBJECT IDENTIFIER ::= { qosPolicyPib 1 }
qosPolicyClasses   OBJECT IDENTIFIER ::= { qosPolicyPib 2 }



--
-- Interface Capabilities Group
--

--
-- Interface Type Capability Tables
--
-- The Interface type capability tables define capabilities that may
-- be associated with an interface of a specific type.  This PIB
-- defines three such tables: a classification capabilities table, a
-- metering capabilities table and a scheduling capabilities table.
-- Other PIBs may define other capability tables to augment the
-- capability definitions of these tables or to introduce completely
-- new capabilities.


--
-- Classification Capabilities
--







                                                               [Page 23]





DiffServ QoS Policy Information Base                       November 2000


qosIfClassificationCapsTable OBJECT-TYPE
    SYNTAX         SEQUENCE OF QosIfClassificationCapsEntry
    PIB-ACCESS     notify, 3
    STATUS         current
    DESCRIPTION
        "This table specifies the classification capabilities of an
        interface type"
    ::= { qosCapabilityClasses 1 }


qosIfClassificationCapsEntry OBJECT-TYPE
    SYNTAX         QosIfClassificationEntry
    STATUS         current
    DESCRIPTION
        "An instance of this class describes the classification
        capabilities of an interface."


    PIB-INDEX { qosIfClassificationCapsPrid }
    UNIQUENESS { qosIfClassificationCapsSpec }
    ::= { qosIfClassificationCapsTable 1 }


QosIfClassificationCapsEntry ::= SEQUENCE {
        qosIfClassificationCapsPrid InstanceId,
        qosIfClassificationCapsSpec BITS
}


qosIfClassificationCapsPrid OBJECT-TYPE
    SYNTAX         InstanceId
    STATUS         current
    DESCRIPTION
        "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosIfClassificationCapsEntry 1 }


qosIfClassificationCapsSpec OBJECT-TYPE
    SYNTAX         BITS {
                        inputIpClassification(1),
                        outputIpClassification(2),
                        -- Indicates the ability to classify IP
                        -- packets on ingress and on egress,
                        -- respectively.





                                                               [Page 24]





DiffServ QoS Policy Information Base                       November 2000


                        ipSrcAddrClassification(3),
                        -- indicates the ability to classify based on
                        -- IP source addresses
                        ipDstAddrClassification(4),
                        -- indicates the ability to classify based on
                        -- IP destination addresses
                        ipProtoClassification(5),
                        -- indicates the ability to classify based on
                        -- IP protocol numbers
                        ipDscpClassification(6)
                        -- indicates the ability to classify based on
                        -- IP DSCP
                        ipL4Classification(7)
                        -- indicates the ability to classify based on
                        -- IP layer 4 port numbers for UDP and TCP
                   }
    STATUS         current
    DESCRIPTION
        "Bit set of supported classification capabilities.  In
        addition to these capabilities, other PIBs may define other
        capabilities that can then be specified in addition to the
        ones specified here (or instead of the ones specified here if
        none of these are specified)."
    ::= { qosIfClassificationCapsEntry 2 }


--
-- Metering Capabilities
--


qosIfMeteringCapsTable OBJECT-TYPE
    SYNTAX         SEQUENCE OF QosIfMeteringCapsEntry
    PIB-ACCESS     notify, 3
    STATUS         current
    DESCRIPTION
        "This table specifies the metering capabilities of an
        interface type"
    ::= { qosCapabilityClasses 2 }


qosIfMeteringCapsEntry OBJECT-TYPE
    SYNTAX         QosIfMeteringCapsEntry
    STATUS         current
    DESCRIPTION





                                                               [Page 25]





DiffServ QoS Policy Information Base                       November 2000


        "An instance of this class describes the classification
        capabilities of an interface."


    PIB-INDEX { qosIfMeteringCapsPrid }
    UNIQUENESS { qosIfMeteringCapsSpec }
    ::= { qosIfMeteringCapsTable 1 }


QosIfMeteringCapsEntry ::= SEQUENCE {
        qosIfMeteringCapsPrid       InstanceId,
        qosIfMeteringCapsSpec       BITS
}


qosIfMeteringCapsPrid OBJECT-TYPE
    SYNTAX         InstanceId
    STATUS         current
    DESCRIPTION
        "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosIfMeteringCapsEntry 1 }


qosIfMeteringCapsSpec OBJECT-TYPE
    SYNTAX      BITS {
                    meterByRemarking (1),
                    meterByDropping (2),
                    -- These capabilities indicate if the interface
                    -- can remark out of profile packets or drop them,
                    -- respectively


                    inputShaping (3),
                    outputShaping (4)
                    -- indicate if the interface can shape on ingress
                    -- or on egress, respectively.


                   }
    STATUS         current
    DESCRIPTION
        "Bit set of supported metering capabilities.  As with
        classification capabilities, these metering capabilities may
        be augmented by capabilities specified in other PRCs (in other





                                                               [Page 26]





DiffServ QoS Policy Information Base                       November 2000


        PIBs)."
    ::= { qosIfMeteringCapsEntry 2 }



--
-- Scheduling Capabilities
--


qosIfSchedulingCapsTable OBJECT-TYPE
    SYNTAX         SEQUENCE OF QosIfSchedulingCapsEntry
    PIB-ACCESS     notify, 10
    STATUS         current
    DESCRIPTION
        "This table specifies the scheduling capabilities of an
        interface type"
    ::= { qosCapabilityClasses 3 }


qosIfSchedulingCapsEntry OBJECT-TYPE
    SYNTAX         QosIfSchedulingCapsEntry
    STATUS         current
    DESCRIPTION
        "An instance of this class describes the classification
        capabilities of an interface."


    PIB-INDEX { qosIfSchedulingCapsPrid }
    UNIQUENESS { qosIfSchedulingCapsMaxQueues,
                 qosIfSchedulingCapsMaxThresholds,
                 qosIfSchedulingCapsMaxPriorities,
                 qosIfSchedulingCapsServiceDisc,
                 qosIfSchedulingCapsMinQueueSize,
                 qosIfSchedulingCapsMaxQueueSize,
                 qosIfSchedulingCapsTotalQueueSize,
                 qosIfSchedulingCapsWredCapable }
    ::= { qosIfSchedulingCapsTable 1 }


QosIfSchedulingCapsEntry ::= SEQUENCE {
        qosIfSchedulingCapsPrid             InstanceId,
        qosIfSchedulingCapsMaxQueues        INTEGER,
        qosIfSchedulingCapsMaxThresholds    INTEGER,
        qosIfSchedulingCapsMaxPriorities    INTEGER,





                                                               [Page 27]





DiffServ QoS Policy Information Base                       November 2000


        qosIfSchedulingCapsServiceDisc      BITS,
        qosIfSchedulingCapsMinQueueSize     INTEGER,
        qosIfSchedulingCapsMaxQueueSize     INTEGER,
        qosIfSchedulingCapsTotalQueueSize   INTEGER,
        qosIfSchedulingCapsAlgDropSupported BITS
}


qosIfSchedulingCapsPrid OBJECT-TYPE
    SYNTAX         InstanceId
    STATUS         current
    DESCRIPTION
        "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosIfSchedulingCapsEntry 1 }


qosIfSchedulingCapsMaxQueues OBJECT-TYPE
    SYNTAX      INTEGER
    STATUS      current
    DESCRIPTION
        "The maximum number of queues that this interface type can
        support.  A value of zero means that there is no maximum."
    ::= { qosIfSchedulingCapsEntry 2 }


qosIfSchedulingCapsMaxThresholds OBJECT-TYPE
    SYNTAX      INTEGER
    STATUS      current
    DESCRIPTION
        "The maximum number of drop thresholds that each queue
        supports.  If the interface has a different number of
        thresholds for each of its queues, it must report the maximum
        number of thresholds any of the queues supports.  The value of
        this attribute must be one or more."
    ::= { qosIfSchedulingCapsEntry 3 }


qosIfSchedulingCapsMaxPriorities OBJECT-TYPE
    SYNTAX      INTEGER
    STATUS      current
    DESCRIPTION
        "The maximum number of priority levels that the the queues of
        the interface may be grouped into.  A value of zero means
        there is no maximum."





                                                               [Page 28]





DiffServ QoS Policy Information Base                       November 2000


    ::= { qosIfSchedulingCapsEntry 4 }


qosIfSchedulingCapsServiceDisc OBJECT-TYPE
    SYNTAX      BITS {
                    other(1),        -- Unspecified or specified in
                                     -- another capability
                    priorityq(2),    -- Priority Queueing
                    rr(3),           -- Strict Round Robin
                    wrr(3),          -- Weighted Round Robin
                    fq(4),           -- Strict Fair Queuing
                    wfq(4),          -- Weighted Fair Queuing
                    wirr(5),         -- Weighted Interleaved Round Robin
                    bsp(6)           -- Bounded Strict Priority
    STATUS      current
    DESCRIPTION
        "The scheduling disciplines supported for servicing queues in
        the same priority group that the interface supports.  Several
        general purpose and well-known queuing disciplines are
        supported by this attribute. Other queueing disciplines may be
        specified instead of, or in addition to, these disciplines by
        setting and providing another capabilities PRC specifying the
        other scheduling discipline.

        If none is specified then the service discipline is either
        unspecified or specified by another capabilities PRC."
    ::= { qosIfSchedulingCapsEntry 5 }


qosIfSchedulingCapsMinQueueSize OBJECT-TYPE
    SYNTAX      INTEGER
    STATUS      current
    DESCRIPTION
        "Some interfaces may allow the size of a queue to be
        configured.  This attribute specifies the minimum size the
        queue can be configured to specified in bytes.


        Some interfaces set queue size in terms of packets.  These
        devices must report the minimum queue size in bytes by
        assuming an average packet size suitable for the particular
        interface."
    ::= { qosIfSchedulingCapsEntry 6 }







                                                               [Page 29]





DiffServ QoS Policy Information Base                       November 2000


qosIfSchedulingCapsMaxQueueSize OBJECT-TYPE
    SYNTAX      INTEGER
    STATUS      current
    DESCRIPTION
        "Some interfaces may allow the size of a queue to be
        configured.  This attribute specifies the maximum size the
        queue can be configured to specified in bytes.  As with
        qosIfSchedulingCapsMinQueueSize, devices that set
        queue size in terms of packets must report the maximum queue
        size in bytes by assuming an average packet size suitable for
        the particular interface."
    ::= { qosIfSchedulingCapsEntry 7 }


qosIfSchedulingCapsTotalQueueSize OBJECT-TYPE
    SYNTAX      INTEGER
    STATUS      current
    DESCRIPTION
        "Some interfaces may have a limited buffer space to be share
        amoung all queues of that interface while also allowing the
        size of each queue to be configurable.  To prevent the
        situation where the PDP configures the sizes of the queues in
        excess of the total buffer available to the interface, the PEP
        can report the total buffer space available with this
        capability.  The value is the total number of bytes."
    ::= { qosIfSchedulingCapsEntry 8 }


qosIfSchedulingCapsAlgDropSupported OBJECT-TYPE
    SYNTAX      BITS {
                     tailDrop(2),
                     headDrop(3),
                     randomDrop(4)
    STATUS      current
    DESCRIPTION
       "The type of algorithm that droppers associated with this queue
       may use.

       The tailDrop(2) algorithm means that packets are dropped from
       the tail of the queue when the associated threshold is
       exceeded.  The headDrop(3) algorithm means that packets are
       dropped from the head of the queue when the associated
       threshold is exceeded. The randomDrop(4) algorithm means that,
       on packet arrival, an algorithm is executed which may randomly
       drop the packet, or  drop  other  packet(s) from  the  queue





                                                               [Page 30]





DiffServ QoS Policy Information Base                       November 2000


       in  its place.  The specifics of the algorithm may be
       proprietary.  However, parameters would be specified in the
       qosRandomDropTable."
    ::= { qosIfSchedulingCapsEntry 9 }


--
-- Datapath Element Linkage Capabilities
--

--
-- Datapath Element Cascade Depth
--


qosIfElmDepthCapsTable OBJECT-TYPE
    SYNTAX         SEQUENCE OF QosIfElmDepthCapsEntry
    PIB-ACCESS     notify, 4
    STATUS         current
    DESCRIPTION
        "This table specifies the number of elements of the same
        type that can be cascaded together in a data path."
    ::= { qosCapabilityClasses 4 }


qosIfElmDepthCapsEntry OBJECT-TYPE
    SYNTAX         QosIfElmDepthCapsEntry
    STATUS         current
    DESCRIPTION
        "An instance of this class describes the cascade depth
        for a particular datapath functional element PRC.  A
        functional datapath element not represented in this
        table can be assumed to have no specific maximum
        depth."


    PIB-INDEX { qosIfElmDepthCapsPrid }
    UNIQUENESS { qosIfElmDepthCapsPrc }
    ::= { qosIfElmDepthCapsTable 1 }


QosIfElmDepthCapsEntry ::= SEQUENCE {
        qosIfElmDepthCapsPrid               InstanceId,
        qosIfElmDepthCapsPrc                OBJECT IDENTIFIER,
        qosIfElmDepthCapsCascadeMax         Unsigned32





                                                               [Page 31]





DiffServ QoS Policy Information Base                       November 2000


}


qosIfElmDepthCapsPrid OBJECT-TYPE
    SYNTAX         InstanceId
    STATUS         current
    DESCRIPTION
        "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosIfElmDepthCapsEntry 1 }


qosIfElmDepthCapsPrc OBJECT-TYPE
    SYNTAX         OBJECT IDENTIFIER
    STATUS         current
    DESCRIPTION
        "The object identifier of a PRC that represents a datapath
        functional element.  This may be one of:  qosClfrElementEntry,
        qosMeterEntry, qosActionEntry, qosAlgDropEntry, qosQEntry, or
        qosSchedulerEntry.  The value is the OID of the table entry.
        There may not be more than one instance of this class with
        the same value of qosIfElmDepthCapsPrc."
    ::= { qosIfElmDepthCapsEntry 2 }


qosIfElmDepthCapsCascadeMax OBJECT-TYPE
    SYNTAX         Unsigned32
    STATUS         current
    DESCRIPTION
        "The maximum number of elements of type qosIfElmDepthCapsPrc
        that can be linked consecutively in a data path."  A value of
        zero indicates there is no specific maximum."
    ::= { qosIfElmDepthCapsEntry 3 }


--
-- Datapath Element Linkage Types
--


qosIfElmLinkCapsTable OBJECT-TYPE
    SYNTAX         SEQUENCE OF QosIfElmLinkCapsEntry
    PIB-ACCESS     notify, 5
    STATUS         current
    DESCRIPTION





                                                               [Page 32]





DiffServ QoS Policy Information Base                       November 2000


        "This table specifies what types of datapath functional
        elements may be used as the next downstream element for
        a specific type of functional element."
    ::= { qosCapabilityClasses 5 }


qosIfElmLinkCapsEntry OBJECT-TYPE
    SYNTAX         QosIfElmLinkCapsEntry
    STATUS         current
    DESCRIPTION
        "An instance of this class specifies a PRC that may
         be used as the next functional element after a specific
         type of element in a data path."


    PIB-INDEX { qosIfElmLinkCapsPrid }
    UNIQUENESS { qosIfElmLinkCapsPrc,
                 qosIfElmLinkCapsAttr,
                 qosIfElmLinkCapsNextPrc }
    ::= { qosIfElmLinkCapsTable 1 }


QosIfElmLinkCapsEntry ::= SEQUENCE {
        qosIfElmLinkCapsPrid              InstanceId,
        qosIfElmLinkCapsPrc               OBJECT IDENTIFIER,
        qosIfElmLinkCapsAttr              Unsigned32,
        qosIfElmLinkCapsNextPrc           OBJECT IDENTIFIER
}


qosIfElmLinkCapsPrid OBJECT-TYPE
    SYNTAX         InstanceId
    STATUS         current
    DESCRIPTION
        "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosIfElmLinkCapsEntry 1 }


qosIfElmLinkCapsPrc OBJECT-TYPE
    SYNTAX         OBJECT IDENTIFIER
    STATUS         current
    DESCRIPTION
        "The value is the OID of a PRC that represents a
        functional datapath element."





                                                               [Page 33]





DiffServ QoS Policy Information Base                       November 2000


    ::= { qosIfElmLinkCapsEntry 2 }


qosIfElmLinkCapsAttr OBJECT-TYPE
    SYNTAX         Unsigned32
    STATUS         current
    DESCRIPTION
        "The value represents the attribute in the the PRC
         indicated by qosIfElmLinkCapsPrc that is used to
         specify the next functional element in the datapath.

         The attribute value corresponds to the order in which
         the attribute appears in the definition of the PRC.
         A value of 1 indicates the first attribute of the PRC,
         a value of 2 indicates the second attribute of the
         PRC, and so forth."
    ::= { qosIfElmLinkCapsEntry 3 }


qosIfElmLinkCapsNextPrc OBJECT-TYPE
    SYNTAX         OBJECT IDENTIFIER
    STATUS         current
    DESCRIPTION
        "The value is the OID of a PRC table entry from which
        instances can be referenced by the attribute indicated
        by qosIfElmLinkCapsPrc and qosIfElmLinkAttr.

        For example, suppose a meter's success output can be an
        action or another meter, and the fail output can only be
        an action.  This can be expressed as follows:

        Prid Prc             Attr                  NextPrc
        1    qosMeterEntry   qosMeterSucceedNext   qosActionEntry
        2    qosMeterEntry   qosMeterSucceedNext   qosMeterEntry
        3    qosMeterEntry   qosMeterFailNext      qosActionEntry."
    ::= { qosIfElmLinkCapsEntry 4 }


--
-- Data Path
--


--
-- Data Path Table





                                                               [Page 34]





DiffServ QoS Policy Information Base                       November 2000


--
-- The Data Path Table enumerates the Differentiated Services
-- Data Paths within this device.  Each entry specifies
-- the first functional datapath element to process data flow
-- for each specific datapath.  Each datapath is defined by the
-- interface role combination and direction. This table can
-- therefore have up to two entries for each role combination,
-- ingress and egress.


qosDataPathTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF QosDataPathEntry
    PIB-ACCESS   install, 5
    STATUS       current
    DESCRIPTION
       "The data path table defines the data paths  in  this
       device.   Each  data path is defined by the interface,
       role combination and traffic direction.  The first
       functional datapath element  to  handle  traffic  for
       this  data path is defined by  a  Prid in the entries
       of this table."
    ::= { qosPolicyClasses 1 }


qosDataPathEntry OBJECT-TYPE
    SYNTAX       QosDataPathEntry
    STATUS       current
    DESCRIPTION
       "An entry in the data path table describes  a  single
       data path in this device."
    PIB-INDEX { qosDataPathPrid }
    UNIQUENESS { qosDataPathRoles,
                 qosDataPathIfDirection }
    ::= { qosDataPathTable 1 }


QosDataPathEntry ::= SEQUENCE  {
    qosDataPathPrid           InstanceId,
    qosDataPathRoles          RoleCombination,
    qosDataPathIfDirection    IfDirection,
    qosDataPathStart          Prid
}


qosDataPathPrid OBJECT-TYPE





                                                               [Page 35]





DiffServ QoS Policy Information Base                       November 2000


    SYNTAX       InstanceId
    STATUS       current
    DESCRIPTION
       "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosDataPathEntry 1 }


qosDataPathRoles OBJECT-TYPE
    SYNTAX       RoleCombination
    STATUS       current
    DESCRIPTION
       "The interfaces to which this data path entry applies,
        specified in terms of roles.  The role combination
        specified by this attribute must exist in the
        frwkIfCapSetRoleComboTable [FR-PIB] prior to association
        with an instance of this class."
    ::= { qosDataPathEntry 2 }


qosDataPathIfDirection OBJECT-TYPE
    SYNTAX       IfDirection
    STATUS       current
    DESCRIPTION
       "Specifies the direction for  which  this  data  path
       entry applies on this interface."
    ::= { qosDataPathEntry 3 }


qosDataPathStart OBJECT-TYPE
    SYNTAX       Prid
    STATUS       current
    DESCRIPTION
       "This selects the first functional  datapath  element
       to   handle   traffic   for  this  data  path.   This
       Prid should point to an instance of one of:
         qosClfrEntry
         qosMeterEntry
         qosActionEntry
         qosAlgDropEntry
         qosQEntry

       The PRI to must exist prior to the installation of
       this datapath start element."
    ::= { qosDataPathEntry 4 }





                                                               [Page 36]





DiffServ QoS Policy Information Base                       November 2000


--
-- Classifiers
--

--
-- Classifier Table
--
-- Classifier allows multiple classifier elements, of same or different
-- types, to be used together.
-- A classifier must completely classify all packets presented to it.
-- This means all traffic handled by a classifier must match
-- at least one classifier element within the classifier,
-- with the classifier element parameters specified by a filter.


qosClfrTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF QosClfrEntry
    PIB-ACCESS   install, 3
    STATUS       current
    DESCRIPTION
       ""
    REFERENCE
        "[MODEL] section 4.1"
    ::= { qosPolicyClasses 2 }


qosClfrEntry OBJECT-TYPE
    SYNTAX       QosClfrEntry
    STATUS       current
    DESCRIPTION
       "An entry in the classifier table  describes  a
       single classifier, all classifier elements belong-
       ing  to  the same classifier must have its
       qosClfrElementClfrId attribute have the same
       value, one of qosClfrId."
    PIB-INDEX { qosClfrPrid }
    UNIQUENESS { qosClfrId }
    ::= { qosClfrTable 1 }


QosClfrEntry ::= SEQUENCE  {
    qosClfrPrid            InstanceId,
    qosClfrId              TagReference
}






                                                               [Page 37]





DiffServ QoS Policy Information Base                       November 2000


qosClfrPrid OBJECT-TYPE
    SYNTAX       InstanceId
    STATUS       current
    DESCRIPTION
       "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosClfrEntry 1 }


qosClfrId OBJECT-TYPE
    SYNTAX       TagReference
    PIB-TAG      qosClfrElementClfrId
    STATUS       current
    DESCRIPTION
       "Identifies a Classifier.  A  Classifier must be
       complete, this means all traffic handled by a
       Classifier must match at least  one  Classifier
       Element within  the  Classifier,  with  the Classifier
       parameters specified by a Filter.

       If there is ambiguity between Classifiers Elements of
       different Classifiers, the precedence is indicated
       by the order the Classifiers are  linked,  the
       first  Classifier in the link is applied to the
       traffic first.
    ::= { qosClfrEntry 2 }


--
-- Classifier Element Table
--
-- Entries in the classifier element table serves as
-- the anchor for each classification pattern, defined
-- in filter table entries.  Each classifier element
-- table entry also specifies the subsequent downstream
-- diffserv functional datapath element when the
-- classification pattern is satisfied.
-- Each entry in the classifier element table describes
-- one branch of the fan-out characteristic of a classifier
-- indicated in [MODEL] section 4.1.  A classifier is madeup
-- of one or more classifier elements.
--


qosClfrElementTable OBJECT-TYPE





                                                               [Page 38]





DiffServ QoS Policy Information Base                       November 2000


    SYNTAX       SEQUENCE OF QosClfrElementEntry
    PIB-ACCESS   install, 6
    STATUS       current
    DESCRIPTION
       "The classifier element table  enumerates  the  rela-
       tionship  between  classification patterns and subse-
       quent downstream diffserv  functional  datapath  ele-
       ments.   Classification  parameters  are  defined  by
       entries   of   filter   tables    pointed    to    by
       qosClfrElementSpecific.   There  can  be  filter
       tables of different types, and  they  can  be  inter-
       mixed  and used within a classifier.  An example of a
       filter table is the frwkIpFilterTable, defined in
       [FR-PIB],  for IP Multi-Field Classifiers (MFCs).
       Filter tables for other filter types may  be  defined
       elsewhere."
    REFERENCE
        "[MODEL] section 4.1"
    ::= { qosPolicyClasses 3 }


qosClfrElementEntry OBJECT-TYPE
    SYNTAX       QosClfrElementEntry
    STATUS       current
    DESCRIPTION
       "An entry in the classifier element table describes a
       single element of the classifier."
    PIB-INDEX { qosClfrElementPrid }
    UNIQUENESS { qosClfrElementClfrId,
                 qosClfrElementOrder,
                 qosClfrElementSpecific }
    ::= { qosClfrElementTable 1 }


QosClfrElementEntry ::= SEQUENCE  {
    qosClfrElementPrid        InstanceId,
    qosClfrElementClfrId      TagId,
    qosClfrElementOrder       Unsigned32,
    qosClfrElementNext        Prid,
    qosClfrElementSpecific    Prid
}


qosClfrPrid OBJECT-TYPE
    SYNTAX       InstanceId





                                                               [Page 39]





DiffServ QoS Policy Information Base                       November 2000


    STATUS       current
    DESCRIPTION
       "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosClfrElementEntry 1 }


qosClfrElementClfrId OBJECT-TYPE
    SYNTAX       TagId
    STATUS       current
    DESCRIPTION
       "A classifier Id  identifies  which  classifier  this
       classifier  element  is  a part of.  This needs to be
       the value of qosClfrId attribute for an existing
       instance of qosClfrEntry."
    ::= { qosClfrElementEntry 2 }


qosClfrElementOrder OBJECT-TYPE
    SYNTAX       Unsigned32
    STATUS       current
    DESCRIPTION
       "The relative order in which classifier elements are
       applied:  higher  numbers  represent classifier elements
       with higher precedence.  Classifier elements with the same
       order  must  be  unambiguous  i.e. they must define
       non-overlapping patterns, and are  considered  to  be
       applied  simultaneously  to the traffic stream. Clas-
       sifier elements with different order  may  overlap in
       their  filters:  the classifier element with the highest
       order that matches is taken.

       On a given interface, there must be a complete  clas-
       sifier  in  place  at  all  times in   the
       ingress direction.  This means that there will always
       be one or more filters that match every possible pat-
       tern  that  could be presented in an incoming packet.
       There is no such requirement in the egress direction."
    DEFVAL { 0 }
    ::= { qosClfrElementEntry 3 }


qosClfrElementNext OBJECT-TYPE
    SYNTAX       Prid
    STATUS       current





                                                               [Page 40]





DiffServ QoS Policy Information Base                       November 2000


    DESCRIPTION
       "This attribute provides one branch  of  the  fan-out
       functionality  of  a  classifier described in [MODEL]
       section 4.1.

       This selects the next  diffserv  functional  datapath
       element  to  handle traffic for this data path.

       A value of zeroDotZero marks the end of DiffServ processing
       for this data path.  Any other value must point to a
       valid (pre-existing) instance of one of:"
         qosClfrEntry
         qosMeterEntry
         qosActionEntry
         qosAlgDropEntry
         qosQEntry."
    DEFVAL      { zeroDotZero }
    ::= { qosClfrElementEntry 4 }


qosClfrElementSpecific OBJECT-TYPE
    SYNTAX       Prid
    STATUS       current
    DESCRIPTION
       "A pointer to a valid entry  in  another  table  that
       describes  the applicable classification filter, e.g.
       an entry in frwkIpFilterTable [FR-PIB].

       The PRI pointed to must exist prior to the installation of
       this classifier element.

       The value zeroDotZero is interpreted  to  match  any-
       thing  not  matched  by another classifier element - only one
       such entry may exist for each classifier."
    DEFVAL { zeroDotZero }
    ::= { qosClfrElementEntry 5 }


--
-- Meters
--
-- This PIB supports a variety of Meters.  It includes a
-- specific definition for Meters whose parameter set can
-- be modelled using Token Bucket parameters.
-- Other metering parameter sets can be defined and used





                                                               [Page 41]





DiffServ QoS Policy Information Base                       November 2000


-- when necessary.
--
-- Multiple meter elements may be logically cascaded
-- using their qosMeterSucceedNext pointers if
-- a multi-rate Meter is required.
-- One example of this might be for an AF PHB implementation
-- that uses two-rate meters.
--
-- Cascading of individual meter elements in the PIB is intended
-- to be functionally equivalent to determining the conformance
-- level of a packet using a multi-rate meter.  The sequential
-- nature of the representation is merely a notational
-- convenience for this PIB.
--
-- For example:
-- Conforming to RFC 2697, srTCM can be parameterized using
-- two sets of qosMeterEntry and qosTBMeterEntry.
-- With the first set parameterizing the Committed Burst Size
-- token-bucket, second set parameterizing the Excess Burst Size
-- token-bucket.  With both set's qosTBMeterRate parameters
-- being used to reflect the Committed Information Rate value.
--
-- Conforming to RFC 2698, trTCM can be parameterized using
-- two sets of qosMeterEntry and qosTBMeterEntry.
-- With the first set parameterizing the Peak Information Rate
-- and Peak Burst Size token-bucket, second set parameterizing
-- the Committed Information Rate and Committed Burst Size
-- token-bucket.
--
-- Conforming to RFC 2859, tswTCM can be parameterized using
-- two sets of qosMeterEntry and qosTBMeterEntry.
-- With the first set parameterizing the Committed Target Rate,
-- second set parametering the Peak Target Rate.
-- With both set's qosTBMeterInterval being used to
-- reflect the Average Interval as specified by RFC 2859.
--


qosMeterTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF QosMeterEntry
    PIB-ACCESS   install, 5
    STATUS       current
    DESCRIPTION
       "This table enumerates specific meters that a  system
       may  use  to  police a stream of traffic. The traffic





                                                               [Page 42]





DiffServ QoS Policy Information Base                       November 2000


       stream to be metered is determined by the  element(s)
       upstream  of  the  meter  i.e.  by the object(s) that
       point to each entry in this table. This  may  include
       all traffic on an interface.

       Specific meter details are to be found  in
       qosMeterSpecific."
           REFERENCE
               "[MODEL] section 5.1"
    ::= { qosPolicyClasses 4 }


qosMeterEntry OBJECT-TYPE
    SYNTAX       QosMeterEntry
    STATUS       current
    DESCRIPTION
       "An entry in the  meter  table  describing  a  single
       meter."
    PIB-INDEX { qosMeterPrid }
    UNIQUENESS { }
    ::= { qosMeterTable 1 }


QosMeterEntry ::= SEQUENCE  {
    qosMeterPrid              InstanceId,
    qosMeterSucceedNext       Prid,
    qosMeterFailNext          Prid,
    qosMeterSpecific          Prid
}


qosMeterPrid OBJECT-TYPE
    SYNTAX       InstanceId
    STATUS       current
    DESCRIPTION
       "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosMeterEntry 1 }


qosMeterSucceedNext OBJECT-TYPE
    SYNTAX       Prid
    STATUS       current
    DESCRIPTION
       "If the traffic does conform, this selects  the  next





                                                               [Page 43]





DiffServ QoS Policy Information Base                       November 2000


       diffserv   functional   datapath  element  to  handle
       traffic for this data path.

       The value zeroDotZero in this variable  indicates  no
       further Diffserv treatment is performed on traffic of
       this datapath.  Any other value must point to a valid
       (pre-existing) instance of one of:"
         qosClfrEntry
         qosMeterEntry
         qosActionEntry
         qosAlgDropEntry
         qosQEntry."
    DEFVAL      { zeroDotZero }
    ::= { qosMeterEntry 2 }


qosMeterFailNext OBJECT-TYPE
    SYNTAX       Prid
    STATUS       current
    DESCRIPTION
       "If the traffic does not conform,  this  selects  the
       next  diffserv  functional datapath element to handle
       traffic for this data path.

       The value zeroDotZero in this variable  indicates  no
       further Diffserv treatment is performed on traffic of
       this datapath.  Any other value must point to a valid
       (pre-existing) instance of one of:"
         qosClfrEntry
         qosMeterEntry
         qosActionEntry
         qosAlgDropEntry
         qosQEntry."
    DEFVAL      { zeroDotZero }
    ::= { qosMeterEntry 3 }


qosMeterSpecific OBJECT-TYPE
    SYNTAX       Prid
     STATUS       current
    DESCRIPTION
       "This indicates the behaviour of the meter by  point-
       ing  to an entry containing detailed parameters. Note
       that entries in that specific table must  be  managed
       explicitly.





                                                               [Page 44]





DiffServ QoS Policy Information Base                       November 2000


       For example, qosMeterSpecific may  point  to  an
       entry  in  qosTBMeterTable,  which  contains  an
       instance of a single set of Token Bucket parameters.

       The PRI pointed to must exist prior to installing this
       Meter datapath element."
    ::= { qosMeterEntry 5 }


--
-- Token-Bucket Meter Table
--
-- Each entry in the Token Bucket Meter Table parameterize
-- a single token bucket.  Multiple token buckets can be
-- used together to parameterize multiple levels of
-- conformance.
--


qosTBMeterTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF QosTBMeterEntry
    PIB-ACCESS   install, 6
    STATUS       current
    DESCRIPTION
       "This table enumerates specific  token-bucket  meters
       that  a system may use to police a stream of traffic.
       Such meters are modelled here as having a single rate
       and a single burst size."
    REFERENCE
        "[MODEL] section 5.1"
    ::= { qosPolicyClasses 5 }


qosTBMeterEntry OBJECT-TYPE
    SYNTAX       QosTBMeterEntry
    STATUS       current
    DESCRIPTION
       "An entry that describes a single token-bucket meter,
       indexed  by  the same variables as a qosMeterEn-
       try."
    PIB-INDEX { qosTBMeterPrid }
    UNIQUENESS { qosTBMeterType,
                 qosTBMeterRate,
                 qosTBMeterBurstSize,
                 qosTBMeterInterval }





                                                               [Page 45]





DiffServ QoS Policy Information Base                       November 2000


    ::= { qosTBMeterTable 1 }


QosTBMeterEntry ::= SEQUENCE  {
    qosTBMeterPrid            InstanceId,
    qosTBMeterType            INTEGER,
    qosTBMeterRate            Unsigned32,
    qosTBMeterBurstSize       BurstSize,
    qosTBMeterInterval        Unsigned32
}


qosTBMeterPrid OBJECT-TYPE
    SYNTAX       InstanceId
    STATUS       current
    DESCRIPTION
       "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosTBMeterEntry 1 }


qosTBMeterType OBJECT-TYPE
    SYNTAX       INTEGER {
                     tokenBucket(2),  -- Simple Token Bucket
                     avgRate(3),      -- Average Rate
                     srTCMBlind(4),   -- srTCM, Color-blind
                     srTCMAware(5),   -- srTCM, Color-aware
                     trTCMBlind(6),   -- trTCM, Color-blind
                     trTCMAware(7),   -- trTCM, Color-aware
                     tswTCM(8)        -- tswTCM
                 }
    STATUS       current
    DESCRIPTION
       "The type of meter using parameters specified by this
       TBMeter entry.

       Value of tokenBucket(2)  indicates  the  use  of  Two
       Parameter  Token Bucket Meter as described in [MODEL]
       section 5.2.3.

       Value of avgRate(3) indicates the use of Average Rate
       Meter as described in [MODEL] section 5.2.1.

       Value of srTCMBlind(4)  and  srTCMAware(5)  indicates
       the use of Single Rate Three Color Marker Metering as





                                                               [Page 46]





DiffServ QoS Policy Information Base                       November 2000


       defined by RFC 2697, with `Color  Blind'  and  `Color
       Aware' mode as described by the RFC.

       Value of trTCMBlind(6)  and  trTCMAware(7)  indicates
       the  use  of  Two Rate Three Color Marker Metering as
       defined by RFC 2698, with `Color  Blind'  and  `Color
       Aware' mode as described by the RFC.

       Value of tswTCM(8) indicates the use of Time  Sliding
       Window  Three Color Marker Metering as defined by RFC
       2859."
    REFERENCE
        "[MODEL] section 5"
    ::= { qosTBMeterEntry 2 }


qosTBMeterRate OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "kilobits per second"
    STATUS       current
    DESCRIPTION
       "The  token-bucket  rate,  in  kilobits  per   second
       (kbps).   This  attribute  is used for: 1. CIR in RFC
       2697 for srTCM 2. PIR and CIR in FRC 2698  for  trTCM
       3.  CTR and PTR in RFC 2859 for TSWTCM 4. AverageRate
       used in [MODEL] section 5."
    ::= { qosTBMeterEntry 3 }


qosTBMeterBurstSize OBJECT-TYPE
    SYNTAX       BurstSize
    UNITS        "Bytes"
    STATUS       current
    DESCRIPTION
       "The maximum number of bytes in a single transmission
       burst.  This attribute is used for: 1. CBS and EBS in
       RFC 2697 for srTCM 2. CBS and PBS  in  FRC  2698  for
       trTCM 3. Burst Size used in [MODEL] section 5."
    ::= { qosTBMeterEntry 4 }


qosTBMeterInterval OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "microseconds"
    STATUS       current





                                                               [Page 47]





DiffServ QoS Policy Information Base                       November 2000


    DESCRIPTION
       "The time interval used with the token bucket.   For:
       1.  Average  Rate  Meter,  [MODEL]  section  5.2.1, -
       Delta.  2. Simple Token Bucket Meter, [MODEL] section
       5.1, -  time  interval  t. 3.  RFC  2859  TSWTCM, -
       AVG_INTERVAL.   4.  RFC 2697 srTCM, RFC 2698 trTCM, -
       token bucket update time interval."
    ::= { qosTBMeterEntry 5 }




--
-- Actions
--


--
-- The Action Table allows enumeration of the different
-- types of actions to be applied to a traffic flow.
--


qosActionTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF QosActionEntry
    PIB-ACCESS   install, 5
    STATUS       current
    DESCRIPTION
       "The Action Table enumerates actions that can be per-
       formed  to  a stream of traffic. Multiple actions can
       be concatenated.  For example, after marking a stream
       of  traffic  exiting  from a meter, a device can then
       perform a mark  action  of  the  conforming  or  non-
       conforming traffic.

       Specific actions  are  indicated  by  qosAction-
       Specific  which  points  to  an  entry  of a specific
       action type parameterizing the action in detail."
    REFERENCE
        "[MODEL] section 6."
    ::= { qosPolicyClasses 6 }


qosActionEntry OBJECT-TYPE
    SYNTAX       QosActionEntry





                                                               [Page 48]





DiffServ QoS Policy Information Base                       November 2000


    STATUS       current
    DESCRIPTION
       "Each entry in the action table allows description of
       one specific action to be applied to traffic."
    PIB-INDEX { qosActionPrid }
    UNIQUENESS { }
    ::= { qosActionTable 1 }


QosActionEntry ::= SEQUENCE  {
    qosActionPrid              InstanceId,
    qosActionNext              Prid,
    qosActionSpecific          Prid,
    qosActionType              INTEGER
}


qosActionPrid OBJECT-TYPE
    SYNTAX       InstanceId
    STATUS       current
    DESCRIPTION
       "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosActionEntry 1 }


qosActionNext OBJECT-TYPE
    SYNTAX       Prid
    STATUS       current
    DESCRIPTION
       "This selects the next diffserv  functional  datapath
       element  to  handle traffic for this data path.

       The value zeroDotZero in this variable  indicates  no
       further Diffserv treatment is performed on traffic of
       this datapath.  Any other value must point to a valid
       (pre-existing) instance of one of:"
         qosClfrEntry
         qosMeterEntry
         qosActionEntry
         qosAlgDropEntry
         qosQEntry."
    DEFVAL      { zeroDotZero }
    ::= { qosActionEntry 2 }






                                                               [Page 49]





DiffServ QoS Policy Information Base                       November 2000


qosActionSpecific OBJECT-TYPE
    SYNTAX       Prid
    STATUS       current
    DESCRIPTION
       "A pointer to an object instance providing additional
       information  for the type of action indicated by this
       action table entry.

       This attribute is meaningful only if qosActionType is
       specific(3).  For other action types, this attribute
       should be NULL.

       For the standard actions defined by this PIB  module,
       this should  point  to  an instance of
       qosDscpMarkActEntry.  For  other actions, it may point
       to an instance of a PRC defined in some other PIB.
       The PRI pointed to must exist prior to installing this
       action datapath entry."
    ::= { qosActionEntry 3 }


qosActionType OBJECT-TYPE
    SYNTAX       INGEGER {
                   specific(2),
                   absoluteDrop(3)
                 }
    STATUS       current
    DESCRIPTION
       "This attribute indicates how the parameters of the
        action are to be specified.

        A value of specific(2) indicates that the action
        paramters are described in the instance of the PRC
        pointed to by qosActionSpecific.

        A value of absoluteDrop(3) indicates that the absolute
        drop action to be taken, and that no additional
        parameters apply to this action.  For this action
        type, the value of qosActionSpecific should be
        zeroDotZero."
    ::= { qosActionEntry 4 }


-- DSCP Mark Action Table
--





                                                               [Page 50]





DiffServ QoS Policy Information Base                       November 2000


-- Rows of this table are pointed to by qosActionSpecific
-- to provide detailed parameters specific to the DSCP
-- Mark action.
--


qosDscpMarkActTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF QosDscpMarkActEntry
    PIB-ACCESS   install, 3
    STATUS       current
    DESCRIPTION
       "This table enumerates specific DSCPs used for  mark-
       ing  or  remarking  the DSCP field of IP packets. The
       entries of this table may be referenced by a
       qosActionSpecific attribute."
    REFERENCE
        "[MODEL] section 6.1"
    ::= { qosPolicyClasses 7 }


qosDscpMarkActEntry OBJECT-TYPE
    SYNTAX       QosDscpMarkActEntry
    STATUS       current
    DESCRIPTION
       "An  entry  in  the  DSCP  mark  action  table   that
       describes a single DSCP used for marking."
    PIB-INDEX { qosDscpMarkActPrid }
    INDEX { qosDscpMarkActDscp }
    UNIQUENESS { qosDscpMarkActDscp }
    ::= { qosDscpMarkActTable 1 }


QosDscpMarkActEntry ::= SEQUENCE  {
    qosDscpMarkActPrid          InstanceId,
    qosDscpMarkActDscp          Dscp
}


qosDscpMarkActPrid OBJECT-TYPE
    SYNTAX       InstanceId
    STATUS       current
    DESCRIPTION
       "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosDscpMarkActEntry 1 }





                                                               [Page 51]





DiffServ QoS Policy Information Base                       November 2000


qosDscpMarkActDscp OBJECT-TYPE
    SYNTAX       Dscp
    STATUS       current
    DESCRIPTION
       "The DSCP that this Action uses for marking/remarking
       traffic.  Note that a DSCP value of -1 is not permit-
       ted in this table.  It is  quite  possible  that  the
       only  packets  subject  to  this  Action  are already
       marked with this DSCP. Note also  that  Diffserv  may
       result  in packet remarking both on ingress to a net-
       work and on egress from it and it is  quite  possible
       that  ingress  and  egress  would  occur  in the same
       router."
    ::= { qosDscpMarkActEntry 2 }



--
-- Algorithmic Drop Table
--


qosAlgDropTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF QosAlgDropEntry
    PIB-ACCESS   install, 7
    STATUS       current
    DESCRIPTION
       "The algorithmic drop table contains entries describ-
       ing  an  element that drops packets according to some
       algorithm."
    REFERENCE
        "[MODEL] section 7.1.3"
    ::= { qosPolicyClasses 9 }


qosAlgDropEntry OBJECT-TYPE
    SYNTAX       QosAlgDropEntry
    STATUS       current
    DESCRIPTION
       "An entry describes  a  process  that  drops  packets
       according  to some algorithm.  Further details of the
       algorithm type are to be found in qosAlgDropType
       and  with  more  detail parameter entry pointed to by
       qosAlgDropSpecific when necessary."
    PIB-INDEX { qosAlgDropPrid }





                                                               [Page 52]





DiffServ QoS Policy Information Base                       November 2000


    UNIQUENESS { }
    ::= { qosAlgDropTable 1 }


QosAlgDropEntry ::= SEQUENCE  {
    qosAlgDropPrid             InstanceId,
    qosAlgDropType             INTEGER,
    qosAlgDropNext             Prid,
    qosAlgDropQMeasure         Prid,
    qosAlgDropQThreshold       Unsigned32,
    qosAlgDropSpecific         Prid
}


qosAlgDropPrid OBJECT-TYPE
    SYNTAX       InstanceId
    STATUS       current
    DESCRIPTION
       "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosAlgDropEntry 1 }


qosAlgDropType OBJECT-TYPE
    SYNTAX       INTEGER {
                     other(1),
                     tailDrop(2),
                     headDrop(3),
                     randomDrop(4)
                 }
    STATUS       current
    DESCRIPTION
       "The type of algorithm used by this dropper. A  value
       of tailDrop(2) or headDrop(3) represents an algorithm
       that is completely specified by this PIB.

       A value of other(1) indicates that the specifics of
       the drop algorithm are specified in some other PIB
       module, and that the qosAlgDropSpecific attribute
       points to an instance of a PRC in that PIB that
       specifies the information necessary to implement the
       algorithm.

       The tailDrop(2) algorithm is  described  as  follows:
       qosAlgDropQThreshold represents the depth of the





                                                               [Page 53]





DiffServ QoS Policy Information Base                       November 2000


       queue,  pointed  to  by  qosAlgDropQMeasure,  at
       which all newly arriving packets will be dropped.

       The headDrop(3) algorithm is described as follows: if
       a packet arrives when the current depth of the queue,
       pointed to by qosAlgDropQMeasure, is at
       qosAlgDropQThreshold,  packets currently at the head of
       the queue are dropped to make room for the new packet
       to be enqueued at the tail of the queue.

       The randomDrop(4) algorithm is described as  follows:
       on packet arrival, an algorithm is executed which may
       randomly drop the packet,  or  drop  other  packet(s)
       from  the  queue  in  its place. The specifics of the
       algorithm may be  proprietary.  For  this  algorithm,
       qosAlgDropSpecific  points  to a qosRandomDropEntry
       that describes  the  algorithm.   For  this
       algorithm,  qosAlgQThreshold is understood to be
       the absolute maximum size of the queue and additional
       parameters are described in qosRandomDropTable."
    ::= { qosAlgDropEntry 2 }


qosAlgDropNext OBJECT-TYPE
    SYNTAX       Prid
    STATUS       current
    DESCRIPTION
       "This selects the next diffserv  functional  datapath
       element  to  handle traffic for this data path.

       The value zeroDotZero in this variable  indicates  no
       further Diffserv treatment is performed on traffic of
       this datapath.  Any other value must point to a valid
       (pre-existing) instance of one of:"
         qosClfrEntry
         qosMeterEntry
         qosActionEntry
         qosAlgDropEntry
         qosQEntry."
    DEFVAL      { zeroDotZero }
    ::= { qosAlgDropEntry 3 }


qosAlgDropQMeasure OBJECT-TYPE
    SYNTAX       Prid





                                                               [Page 54]





DiffServ QoS Policy Information Base                       November 2000


    STATUS       current
    DESCRIPTION
       "Points to an entry in the qosQTable to indicate
       the  queue  that  a drop algorithm is to monitor when
       deciding whether  to  drop  a  packet.

       The PRI pointed to must exist prior to installing
       this dropper element."
    ::= { qosAlgDropEntry 4 }


qosAlgDropQThreshold OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "Bytes"
    STATUS       current
    DESCRIPTION
       "A threshold on the depth in bytes of the queue being
       measured at which a trigger is generated to the drop-
       ping algorithm.

       For the tailDrop(2) or headDrop(3)  algorithms,  this
       represents  the  depth  of  the  queue, pointed to by
       qosAlgDropQMeasure, at  which  the  drop  action
       will take place. Other algorithms will need to define
       their own semantics for this threshold."
    ::= { qosAlgDropEntry 5 }


qosAlgDropSpecific OBJECT-TYPE
    SYNTAX       Prid
    STATUS       current
    DESCRIPTION
       "Points to a table entry that provides further detail
       regarding a drop algorithm.  The PRI pointed to
       must exist prior to installing this dropper element.

       Entries with qosAlgDropType  equal  to  other(1)
       must have this point to an instance of a PRC
       defined in another PIB module.

       Entries with  qosAlgDropType  equal  to  random-
       Drop(4)   must   have  this  point  to  an  entry  in
       qosRandomDropTable.

       For all other algorithms, this should take the  value





                                                               [Page 55]





DiffServ QoS Policy Information Base                       November 2000


       zeroDotzero."
    ::= { qosAlgDropEntry 6 }


--
-- Random Drop Table
--

qosRandomDropTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF QosRandomDropEntry
    PIB-ACCESS   install, 9
    STATUS       current
    DESCRIPTION
       "The random drop table contains entries describing  a
       process  that drops packets randomly. Entries in this
       table is  intended  to  be  pointed  to  by
       qosAlgDropSpecific."
    REFERENCE
        "[MODEL] section 7.1.3"
    ::= { qosPolicyClasses 10 }


qosRandomDropEntry OBJECT-TYPE
    SYNTAX       QosRandomDropEntry
    STATUS       current
    DESCRIPTION
       "An entry describes  a  process  that  drops  packets
       according to a random algorithm."
    PIB-INDEX { qosRandomDropPrid }
    UNIQUENESS { qosRandomDropMinThreshBytes,
                 qosRandomDropMinThreshPkts,
                 qosRandomDropMaxThreshBytes,
                 qosRandomDropMaxThreshPkts,
                 qosRandomDropInvProbMax,
                 qosRandomDropInvWeight,
                 qosRandomDropSamplingRate
    ::= { qosRandomDropTable 1 }


QosRandomDropEntry ::= SEQUENCE  {
    qosRandomDropPrid             InstanceId,
    qosRandomDropMinThreshBytes   Unsigned32,
    qosRandomDropMinThreshPkts    Unsigned32,
    qosRandomDropMaxThreshBytes   Unsigned32,
    qosRandomDropMaxThreshPkts    Unsigned32,





                                                               [Page 56]





DiffServ QoS Policy Information Base                       November 2000


    qosRandomDropInvProbMax       Unsigned32,
    qosRandomDropInvWeight        Unsigned32,
    qosRandomDropSamplingRate     Unsigned32
}


qosRandomDropPrid OBJECT-TYPE
    SYNTAX       InstanceId
    STATUS       current
    DESCRIPTION
       "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosRandomDropEntry 1 }


qosRandomDropMinThreshBytes OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "bytes"
    STATUS       current
    DESCRIPTION
       "The average  queue  depth  in  bytes,  beyond  which
       traffic  has a non-zero probability of being dropped.
       Changes in this variable may or may not be  reflected
       in the reported value of qosRandomDropMinThreshPkts."
    ::= { qosRandomDropEntry 2 }


qosRandomDropMinThreshPkts OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "packets"
    STATUS       current
    DESCRIPTION
       "The average queue depth  in  packets,  beyond  which
       traffic  has a non-zero probability of being dropped.
       Changes in this variable may or may not be  reflected
       in the reported value of qosRandomDropMinThreshBytes."
    ::= { qosRandomDropEntry 3 }


qosRandomDropMaxThreshBytes OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "bytes"
    STATUS       current
    DESCRIPTION
       "The average queue depth beyond which traffic  has  a





                                                               [Page 57]





DiffServ QoS Policy Information Base                       November 2000


       probability indicated by qosRandomDropInvProbMax
       of being dropped or marked. Note  that  this  differs
       from  the  physical  queue  limit, which is stored in
       qosAlgDropQThreshold.  Changes in this  variable
       may  or may not be reflected in the reported value of
       qosRandomDropMaxThreshPkts."
    ::= { qosRandomDropEntry 4 }


qosRandomDropMaxThreshPkts OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "packets"
    STATUS       current
    DESCRIPTION
       "The average queue depth beyond which traffic  has  a
       probability indicated by qosRandomDropInvProbMax
       of being dropped or marked. Note  that  this  differs
       from  the  physical  queue  limit, which is stored in
       qosAlgDropQThreshold.  Changes in this  variable
       may  or may not be reflected in the reported value of
       qosRandomDropMaxThreshBytes."
    ::= { qosRandomDropEntry 5 }


qosRandomDropInvProbMax OBJECT-TYPE
    SYNTAX       Unsigned32
    STATUS       current
    DESCRIPTION
       "The worst case random drop probability, expressed as
       the  inverse  of  the drop probability.  With special
       case of the value zero meaning  zero  probability  of
       drop.

       For example, if every packet may be  dropped  in  the
       worst   case   (100%),   this   has   the   value  of
       4,294,967,295."
    ::= { qosRandomDropEntry 6 }


qosRandomDropInvWeight OBJECT-TYPE
    SYNTAX       Unsigned32
    STATUS       current
    DESCRIPTION
       "The weighting of past history in affecting the  cal-
       culation  of  the  current queue average.  The moving





                                                               [Page 58]





DiffServ QoS Policy Information Base                       November 2000


       average of the queue depth uses the inverse  of  this
       value  as the factor for the new queue depth, and one
       minus that inverse as the factor for  the  historical
       average.

       Implementations may choose to  limit  the  acceptable
       set  of  values to a specified set, such as powers of
       2."
    ::= { qosRandomDropEntry 7 }


qosRandomDropSamplingRate OBJECT-TYPE
    SYNTAX       Unsigned32
    STATUS       current
    DESCRIPTION
       "The number of times per second the queue is  sampled
       for queue average calculation.  A value of zero means
       the queue is sampled approximately each time a packet
       is enqueued (or dequeued)."
    ::= { qosRandomDropEntry 8 }


--
-- Queue Table
--

--
-- An entry in qosQTable represents a FIFO queue diffserv
-- functional datapath element as described in [MODEL] section
-- 7.1.1.
-- Notice the specification of scheduling parameters for a queue
-- as part of the input to a scheduler functional datapath
-- element as described in [MODEL] section 7.1.2.  This allows
-- building of hierarchical queueing/scheduling.
-- A queue therefore is parameterized by:
-- 1. Which scheduler will service this queue, qosQNext.
-- 2. How the scheduler will service this queue, with respect
--    to all the other queues the same scheduler needs to service,
--    qosQSchdParam.
--


qosQTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF QosQEntry
    PIB-ACCESS   install, 4





                                                               [Page 59]





DiffServ QoS Policy Information Base                       November 2000


    STATUS       current
    DESCRIPTION
       "The Queue Table enumerates the individual queues  on
       an interface."
    ::= { qosPolicyClasses 11 }


qosQEntry OBJECT-TYPE
    SYNTAX       QosQEntry
    STATUS       current
    DESCRIPTION
       "An entry in the Queue Table describes a single queue
       in one direction on an interface."
    PIB-INDEX { qosQPrid }
    UNIQUENESS { }
    ::= { qosQTable 1 }


QosQEntry ::= SEQUENCE  {
    qosQPrid                    InstanceId,
    qosQNext                    Prid,
    qosQSchdParam               Prid
}


qosQPrid OBJECT-TYPE
    SYNTAX       InstanceId
    STATUS       current
    DESCRIPTION
        "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosQEntry 1 }


qosQNext OBJECT-TYPE
    SYNTAX       Prid
    STATUS       current
    DESCRIPTION
       "This selects the next diffserv  functional  datapath
       element  to  handle traffic for this data path.  This
       value must point to a valid (pre-existing) instance
       of one of:
         qosSchedulerEntry"
    ::= { qosQEntry 2 }






                                                               [Page 60]





DiffServ QoS Policy Information Base                       November 2000


qosQSchdParam OBJECT-TYPE
    SYNTAX       Prid
    STATUS       current
    DESCRIPTION
       "This   Prid    indicates    the    entry    in
       qosSchdParamTable  the  scheduler, pointed to by
       qosQNext, should use to service this queue.  The PRI
       pointed to must exist prior to installing this queue
       element."
    ::= { qosQEntry 3 }



--
-- Scheduler Table
--
-- The Scheduler Table is used for representing packet schedulers:
-- it provides flexibility for multiple scheduling algorithms, each
-- servicing multiple queues, to be used on the same logical/physical
-- interface.
-- Notice the servicing parameters the scheduler uses is
-- specified by each of its upstream functional datapath elements,
-- most likely queues or schedulers.
-- The coordination and coherency between the servicing parameters
-- of the scheduler's upstream functional datapath elements must
-- be maintained for the scheduler to function correctly.
--
-- The qosSchedulerSchdParam attribute is used for specifying
-- the servicing parameters for output of a scheduler when its
-- downstream functional datapath element is another scheduler.
-- This is used for building hierarchical queue/scheduler.
--


qosSchedulerTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF QosSchedulerEntry
    PIB-ACCESS   install, 5
    STATUS       current
    DESCRIPTION
       "The Scheduler Table  enumerates  packet  schedulers.
       Multiple scheduling algorithms can be used on a given
       interface,  with  each  algorithm  described  by  one
       qosSchedulerEntry."
    REFERENCE
        "[MODEL] section 7.1.2"





                                                               [Page 61]





DiffServ QoS Policy Information Base                       November 2000


    ::= { qosPolicyClasses 12 }


qosSchedulerEntry OBJECT-TYPE
    SYNTAX       QosSchedulerEntry
    STATUS       current
    DESCRIPTION
       "An entry in the Scheduler Table describing a  single
       instance of a scheduling algorithm."
    PIB-INDEX { qosSchedulerPrid }
    UNIQUENESS { }
    ::= { qosSchedulerTable 1 }


QosSchedulerEntry ::= SEQUENCE  {
    qosSchedulerPrid                 InstanceId,
    qosSchedulerNext                 Prid,
    qosSchedulerMethod               INTEGER,
    qosSchedulerSchdParam            Prid
}


qosSchedulerPrid OBJECT-TYPE
    SYNTAX       InstanceId
    STATUS       current
    DESCRIPTION
        "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosSchedulerEntry 1 }


qosSchedulerNext OBJECT-TYPE
    SYNTAX       Prid
    STATUS       current
    DESCRIPTION
       "This selects the next diffserv  functional  datapath
       element  to  handle traffic for this data path.

       A value of zeroDotZero in this attribute indicates no
       further Diffserv treatment is performed on traffic of
       this datapath.  The use of zeroDotZero is the  normal
       usage for the last functional datapath element.  Any
       value other than zeroDotZero must point to a valid
       (pre-existing) instance of one of:
        qosSchedulerEntry





                                                               [Page 62]





DiffServ QoS Policy Information Base                       November 2000


         qosQEntry  (as  indicated  by  [MODEL]  section
       7.1.4).

       This can point to  another  qosSchedulerEntry
       for  implementation of multiple scheduler methods for
       the  same  datapath,  and   for   implementation   of
       hierarchical schedulers."
    DEFVAL       { zeroDotZero }
    ::= { qosSchedulerEntry 2 }


qosSchedulerMethod OBJECT-TYPE
    SYNTAX       INTEGER {
                     priorityq(2),    -- Priority Queueing
                     wrr(3),          -- Weighted Round Robin
                     wfq(4),          -- Weighted Fair Queuing
                     wirr(5),         -- Weighted Interleaved Round Robin
                     bsp(6)           -- Bounded Strict Priority
                 }
    STATUS       current
    DESCRIPTION
       "The scheduling algorithm used by this Scheduler.

       A value of priorityq(2) is used  to  indicate  strict
       priority queueing: only the qosSchdParamPriority
       attributes of the queues feeding this  scheduler  are
       used when determining the next packet to schedule.

       A value  of  wrr(3)  indicates  weighted  round-robin
       scheduling.  Packets  are  scheduled from each of the
       queues feeding this scheduler according to all of the
       parameters of the qosSchdParam entry.

       A value of wfq(4) indicates  weighted  fair  queueing
       scheduling.   Packets  are scheduled from each of the
       queues feeding this scheduler according  to  all  the
       parameters  of  the  QosSchdParamEntry  directed
       from qosQueue entry.

       A value of  wirr(5)  indicates  weighted  interleaved
       roundrobin    queueing   scheduling.    Packets   are
       scheduled  from  each  of  the  queues  feeding  this
       scheduler  according  to  all  the  parameters of the
       QosSchdParamEntry  directed  from  qosQueue
       entry.





                                                               [Page 63]





DiffServ QoS Policy Information Base                       November 2000


       A value of bsp(6) indicates bounded  strict  priority
       scheduling.   Packets  are scheduled from each of the
       queues feeding this scheduler according  to  all  the
       parameters  of  the  QosSchdParamEntry  directed
       from qosQueue entry."
    REFERENCE
        "[MODEL] section 7.1.2"
    ::= { qosSchedulerEntry 3 }


qosSchedulerSchdParam OBJECT-TYPE
    SYNTAX       Prid
    STATUS       current
    DESCRIPTION
       "This   Prid    indicates    the    entry    in
       qosSchdParamTable  the  higher  level scheduler,
       pointed to by qosSchedulerNext,  should  use  to
       service the output of this scheduler.  This attribute
       is only used when there is more  than  one  level  of
       scheduler.   A value of 0.0 should be sent to indicate
       that this attribute is not used."
    ::= { qosSchedulerEntry 4 }



--
-- Scheduling Parameter Table
--
-- The scheduling parameters are separate from the Queue Entries
-- for reusability and for usage by both queues and schedulers,
-- and this follows the separation of datapath elements from
-- parameterization approach used throught out this PIB.
-- Usage of scheduling parameter table entry by schedulers allow
-- building of hierarchical scheduling.
--
-- The qosSchdParamMaxRateAbs/Rel attributes are used to
-- construct non-work-conserving scheduler for the purpose of
-- traffic shaping.  These attributes limits the servicing of
-- the queue/scheduler, in affect, shaping the output of the
-- queue/scheduler, as described in [MODEL] section 7.2.
--


qosSchdParamTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF QosSchdParamEntry





                                                               [Page 64]





DiffServ QoS Policy Information Base                       November 2000


    PIB-ACCESS   install, 7
    STATUS       current
    DESCRIPTION
       "The Scheduling Parameter Table enumerates individual
       sets  of scheduling parameter that can be used/reused
       by Queues and Schedulers."
    ::= { qosPolicyClasses 13 }


qosSchdParamEntry OBJECT-TYPE
    SYNTAX       QosSchdParamEntry
    STATUS       current
    DESCRIPTION
       "An entry in the Scheduling Parameter Table describes
       a  single  set  of  scheduling  parameter  for use by
       queues and schedulers.

       Notice multiple inter-mixed Queue  and  Scheduler
       entries can use the same Scheduler Parameter entry."
    PIB-INDEX { qosSchdParamPrid }
    UNIQUENESS { qosSchdParamPriority,
                 qosSchdParamMinRateAbs,
                 qosSchdParamMinRateRel,
                 qosSchdParamMaxRateAbs,
                 qosSchdParamMaxRateRel }
    ::= { qosSchdParamTable 1 }


QosSchdParamEntry ::= SEQUENCE  {
    qosSchdParamPrid            InstanceId,
    qosSchdParamPriority        Unsigned32,
    qosSchdParamMinRateAbs      Unsigned32,
    qosSchdParamMinRateRel      Unsigned32,
    qosSchdParamMaxRateAbs      Unsigned32,
    qosSchdParamMaxRateRel      Unsigned32
}


qosSchdParamPrid OBJECT-TYPE
    SYNTAX       InstanceId
    STATUS       current
    DESCRIPTION
        "An arbitrary integer index that uniquely identifies an
        instance of the class."
    ::= { qosSchdParamEntry 1 }





                                                               [Page 65]





DiffServ QoS Policy Information Base                       November 2000


qosSchdParamPriority OBJECT-TYPE
    SYNTAX       Unsigned32
     STATUS       current
    DESCRIPTION
       "The priority of this queue, to be used as a  parame-
       ter  to  the  next  scheduler element downstream from
       this one."
    ::= { qosSchdParamEntry 2 }


qosSchdParamMinRateAbs OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "kilobits per second"
    STATUS       current
    DESCRIPTION
       "The minimum absolute rate, in kilobits/sec,  that  a
       downstream  scheduler element should allocate to this
       queue.  If the value is zero, then  there  is  effec-
       tively  no  minimum  rate guarantee.  If the value is
       non-zero, the scheduler will assure the servicing  of
       this queue to at least this rate.

       Note that this attribute's value is coupled  to  that
       of  qosSchdParamMinRateRel:  changes to one will
       affect the value of the other. They are linked by the
       following equation:

         qosSchdParamMinRateRel = qosSchdParamMinRateAbs * 10,000,000/ifSpeed

       or, if appropriate:

         qosSchdParamMinRateRel = qosSchdParamMinRateAbs * 10 / ifHighSpeed"
    REFERENCE
        "ifSpeed, ifHighSpeed from [IFMIB]"
    ::= { qosSchdParamEntry 3 }


qosSchdParamMinRateRel OBJECT-TYPE
    SYNTAX       Unsigned32
     STATUS       current
    DESCRIPTION
       "The minimum rate that a downstream scheduler element
       should  allocate  to this queue, relative to the max-
       imum rate of the interface as reported by ifSpeed  or
       ifHighSpeed, in units of 1/10,000 of 1.  If the value





                                                               [Page 66]





DiffServ QoS Policy Information Base                       November 2000


       is zero, then there is effectively  no  minimum  rate
       guarantee.   If  the value is non-zero, the scheduler
       will assure the servicing of this queue to  at  least
       this rate.

       Note that this attribute's value is coupled  to  that
       of  qosSchdParamMinRateAbs:  changes to one will
       affect the value of the other. They are linked by the
       following equation:

         qosSchdParamMinRateAbs = ifSpeed * qosSchdParamMinRateRel/10,000,000

       or, if appropriate:

         qosSchdParamMinRateAbs = ifHighSpeed * qosSchdParamMinRateRel / 10"
    REFERENCE
        "ifSpeed, ifHighSpeed from [IFMIB]"
    ::= { qosSchdParamEntry 4 }


qosSchdParamMaxRateAbs OBJECT-TYPE
    SYNTAX       Unsigned32
    UNITS        "kilobits per second"
    STATUS       current
    DESCRIPTION
       "The maximum rate in kilobits/sec that  a  downstream
       scheduler  element  should allocate to this queue. If
       the value is zero, then there is effectively no  max-
       imum rate limit and that the scheduler should attempt
       to be work-conserving for this queue.  If  the  value
       is  non-zero,  the scheduler will limit the servicing
       of this queue to, at most, this rate in  a  non-work-
       conserving manner.

       Note that this attribute's value is coupled  to  that
       of  qosSchdParamMaxRateRel:  changes to one will
       affect the value of the other. They are linked by the
       following equation:

         qosSchdParamMaxRateRel = qosSchdParamMaxRateAbs * 10,000,000/ifSpeed

       or, if appropriate:

         qosSchdParamMaxRateRel = qosSchdParamMaxRateAbs * 10 / ifHighSpeed"
    REFERENCE





                                                               [Page 67]





DiffServ QoS Policy Information Base                       November 2000


        "ifSpeed, ifHighSpeed from [IFMIB]"
    ::= { qosSchdParamEntry 5 }


qosSchdParamMaxRateRel OBJECT-TYPE
    SYNTAX       Unsigned32
    STATUS       current
    DESCRIPTION
       "The maximum rate that a downstream scheduler element
       should  allocate  to this queue, relative to the max-
       imum rate of the interface as reported by ifSpeed  or
       ifHighSpeed, in units of 1/10,000 of 1.  If the value
       is zero, then there is effectively  no  maximum  rate
       limit  and  the  scheduler should attempt to be work-
       conserving for this queue.  If the value is non-zero,
       the  scheduler will limit the servicing of this queue
       to, at  most,  this  rate  in  a  non-work-conserving
       manner.

       Note that this attribute's value is coupled  to  that
       of  qosSchdParamMaxRateAbs:  changes to one will
       affect the value of the other. They are linked by the
       following equation:

         qosSchdParamMaxRateAbs = ifSpeed * qosSchdParamMaxRateRel/10,000,000

       or, if appropriate:

         qosSchdParamMaxRateAbs = ifHighSpeed * qosSchdParamMaxRateRel / 10"
    REFERENCE
        "ifSpeed, ifHighSpeed from [IFMIB]"
    ::= { qosSchdParamEntry 6 }



--
-- Conformance Section
--


qosPolicyPibConformance
                OBJECT IDENTIFIER ::= { qosPolicyPib 3 }


qosPolicyPibCompliances





                                                               [Page 68]





DiffServ QoS Policy Information Base                       November 2000


                OBJECT IDENTIFIER ::= { qosPolicyPibConformance 1 }
qosPolicyPibGroups
                OBJECT IDENTIFIER ::= { qosPolicyPibConformance 2 }

qosPolicyPibCompliance MODULE-COMPLIANCE
    STATUS  current
    DESCRIPTION
            "Describes the requirements for conformance to the
            QoS Policy PIB."


    MODULE  -- this module
        MANDATORY-GROUPS {
            qosPibDataPathGroup,
            qosPibClfrGroup,
            qosPibClfrElementGroup,
            qosPibActionGroup,
            qosPibAlgDropGroup,
            qosPibQGroup,
            qosPibSchedulerGroup,
            qosPibSchdParamGroup }


    GROUP qosPibMeterGroup
    DESCRIPTION
       "This group is mandatory for devices  that  implement
       metering functions."


    GROUP qosPibTBMeterGroup
    DESCRIPTION
       "This group is mandatory for devices  that  implement
       token-bucket metering functions."


    GROUP qosPibDscpMarkActGroup
    DESCRIPTION
       "This group is mandatory for devices  that  implement
       DSCP-Marking functions."


    GROUP qosPibRandomDropGroup
    DESCRIPTION
       "This group is mandatory for devices  that  implement
       Random Drop functions."





                                                               [Page 69]





DiffServ QoS Policy Information Base                       November 2000


    OBJECT qosClfrId
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosClfrElementClfrId
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosClfrElementOrder
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosClfrElementNext
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosClfrElementSpecific
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosMeterSucceedNext
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosMeterFailNext
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosMeterSpecific
    MIN-ACCESS notify
    DESCRIPTION





                                                               [Page 70]





DiffServ QoS Policy Information Base                       November 2000


       "Install support is not required."


    OBJECT qosTBMeterType
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosTBMeterRate
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosTBMeterBurstSize
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosTBMeterInterval
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosActionNext
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosActionSpecific
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosAlgDropType
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."







                                                               [Page 71]





DiffServ QoS Policy Information Base                       November 2000


    OBJECT qosAlgDropNext
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosAlgDropQMeasure
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosAlgDropQThreshold
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosAlgDropSpecific
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosRandomDropMinThreshBytes
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosRandomDropMinThreshPkts
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosRandomDropMaxThreshBytes
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosRandomDropMaxThreshPkts
    MIN-ACCESS notify
    DESCRIPTION





                                                               [Page 72]





DiffServ QoS Policy Information Base                       November 2000


       "Install support is not required."


    OBJECT qosRandomDropInvWeight
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosRandomDropSamplingRate
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosRandomDropInvProbMax
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosQNext
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosQSchdParam
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosSchedulerMethod
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosSchedulerSchdParam
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."







                                                               [Page 73]





DiffServ QoS Policy Information Base                       November 2000


    OBJECT qosSchedulerNext
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosSchdParamPriority
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosSchdParamMinRateAbs
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosSchdParamMinRateRel
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosSchdParamMaxRateAbs
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    OBJECT qosSchdParamMaxRateRel
    MIN-ACCESS notify
    DESCRIPTION
       "Install support is not required."


    ::= { qosPibCompliances 1 }


qosPibDataPathGroup OBJECT-GROUP
    OBJECTS {
        qosDataPathStart
    }
    STATUS current
    DESCRIPTION





                                                               [Page 74]





DiffServ QoS Policy Information Base                       November 2000


       "The Data Path Group defines  the  PIB  Objects  that
       describe a data path."
    ::= { qosPibGroups 1 }


qosPibClfrGroup OBJECT-GROUP
    OBJECTS {
        qosClfrId
    }
    STATUS current
    DESCRIPTION
       "The Classifier Group defines the  PIB  Objects  that
       describe a generic classifier."
    ::= { qosPibGroups 2 }


qosPibClfrElementGroup OBJECT-GROUP
    OBJECTS {
        qosClfrElementClfrId,  qosClfrElementOrder,
        qosClfrElementNext, qosClfrElementSpecific
    }
    STATUS current
    DESCRIPTION
       "The Classifier Group defines the  PIB  Objects  that
       describe a generic classifier."
    ::= { qosPibGroups 3 }


qosPibMeterGroup OBJECT-GROUP
    OBJECTS {
        qosMeterSucceedNext, qosMeterFailNext,
        qosMeterSpecific
    }
    STATUS current
    DESCRIPTION
       "The Meter Group defines the objects used in describ-
       ing a generic meter element."
    ::= { qosPibGroups 5 }


qosPibTBMeterGroup OBJECT-GROUP
    OBJECTS {
        qosTBMeterType, qosTBMeterRate,
        qosTBMeterBurstSize, qosTBMeterInterval
    }





                                                               [Page 75]





DiffServ QoS Policy Information Base                       November 2000


    STATUS current
    DESCRIPTION
       "The Token-Bucket Meter  Group  defines  the  objects
       used  in  describing a single-rate token bucket meter
       element."
    ::= { qosPibGroups 6 }


qosPibActionGroup OBJECT-GROUP
    OBJECTS {
        qosActionNext, qosActionSpecific
    }
    STATUS current
    DESCRIPTION
       "The  Action  Group  defines  the  objects  used   in
       describing a generic action element."
    ::= { qosPibGroups 7 }


qosPibDscpMarkActGroup OBJECT-GROUP
    OBJECTS {
        qosDscpMarkActDscp
    }
    STATUS current
    DESCRIPTION
       "The DSCP Mark Action Group defines the objects  used
       in describing a DSCP Marking Action element."
    ::= { qosPibGroups 8 }


qosPibAlgDropGroup OBJECT-GROUP
    OBJECTS {
        qosAlgDropType, qosAlgDropNext,
        qosAlgDropQMeasure, qosAlgDropQThreshold,
        qosAlgDropSpecific
    }
    STATUS current
    DESCRIPTION
       "The Algorithmic Drop Group contains the objects that
       describe algorithmic dropper operation and configura-
       tion."
    ::= { qosPibGroups 12 }


qosPibRandomDropGroup OBJECT-GROUP





                                                               [Page 76]





DiffServ QoS Policy Information Base                       November 2000


    OBJECTS {
        qosRandomDropMinThreshBytes,
        qosRandomDropMinThreshPkts,
        qosRandomDropMaxThreshBytes,
        qosRandomDropMaxThreshPkts,
        qosRandomDropInvProbMax,
        qosRandomDropInvWeight,
        qosRandomDropSamplingRate
    }
    STATUS current
    DESCRIPTION
       "The Random Drop Group augments the Algorithmic Drop Group for
       random dropper operation and configuration."
    ::= { qosPibGroups 13 }


qosPibQGroup OBJECT-GROUP
    OBJECTS {
        qosQNext, qosQSchdParam
    }
    STATUS current
    DESCRIPTION
       "The Queue Group contains the objects  that  describe
       an interface's queues."
    ::= { qosPibGroups 14 }


qosPibSchedulerGroup OBJECT-GROUP
    OBJECTS {
        qosSchedulerMethod, qosSchedulerSchdParam,
        qosSchedulerNext
    }
    STATUS current
    DESCRIPTION
       "The  Scheduler  Group  contains  the  objects   that
       describe packet schedulers on interfaces."
    ::= { qosPibGroups 15 }


qosPibSchdParamGroup OBJECT-GROUP
    OBJECTS {
        qosSchdParamPriority,
        qosSchdParamMinRateAbs, qosSchdParamMinRateRel,
        qosSchdParamMaxRateAbs, qosSchdParamMaxRateRel,
    }





                                                               [Page 77]





DiffServ QoS Policy Information Base                       November 2000


    STATUS current
    DESCRIPTION
       "The Scheduler Parameter Group contains  the  objects
       that describe packet schedulers' parameters on inter-
       faces."
    ::= { qosPibGroups 16 }


END









































                                                               [Page 78]





DiffServ QoS Policy Information Base                       November 2000


9.  Security Considerations

The information contained in a PIB when transported by the COPS protocol
[COPS-PR] may be sensitive, and its function of provisioning a PEP
requires that only authorized communication take place.  The use of
IPSEC between PDP and PEP, as described in [COPS], provides the
necessary protection against these threats.



10.  Intellectual Property Considerations

The IETF is being notified of intellectual property rights claimed in
regard to some or all of the specification contained in this document.
For more information consult the online list of claimed rights.

11.  Authors' Addresses

     Michael Fine
     Cisco Systems, Inc.
     170 West Tasman Drive
     San Jose, CA  95134-1706 USA
     Phone: +1 408 527 8218
     Email: mfine@cisco.com


     Keith McCloghrie
     Cisco Systems, Inc.
     170 West Tasman Drive
     San Jose, CA  95134-1706 USA
     Phone: +1 408 526 5260
     Email: kzm@cisco.com


     John Seligson
     Nortel Networks, Inc.
     4401 Great America Parkway
     Santa Clara, CA 95054 USA
     Phone: +1 408 495 2992
     Email: jseligso@nortelnetworks.com


     Kwok Ho Chan
     Nortel Networks, Inc.
     600 Technology Park Drive





                                                               [Page 79]





DiffServ QoS Policy Information Base                       November 2000


     Billerica, MA 01821 USA
     Phone: +1 978 288 8175
     Email: khchan@nortelnetworks.com


     Scott Hahn
     Intel
     2111 NE 25th Avenue
     Hillsboro, OR 97124 USA
     Phone: +1 503 264 8231
     Email: scott.hahn@intel.com


     Andrew Smith
     Allegro Networks
     6399 San Ignacio Ave
     San Jose, CA 95119
     andrew@allegronetworks.com


     Francis Reichmeyer
     University Park at MIT
     26 Landsdowne Street
     Cambridge, MA  02139
     Phone: +1 617 494 9980
     Email:  franr@pfn.com



12.  References

[COPS] Boyle, J., Cohen, R., Durham, D., Herzog, S., Rajan, R., and
       A. Sastry, "The COPS (Common Open Policy Service) Protocol"
       RFC 2748, January 2000.

[COPS-PR] K. Chan, D. Durham, S. Gai, S. Herzog, K. McCloghrie,
        F. Reichmeyer, J. Seligson, A. Smith, R. Yavatkar,
        "COPS Usage for Policy Provisioning,"
        draft-ietf-rap-cops-pr-05.txt, October 2000.

[SPPI] K. McCloghrie, et.al., "Structure of Policy Provisioning
        Information," draft-ietf-rap-sppi-03.txt, November 2000.

[DSARCH] M. Carlson, W. Weiss, S. Blake, Z. Wang, D. Black, and
         E. Davies, "An Architecture for Differentiated Services",





                                                               [Page 80]





DiffServ QoS Policy Information Base                       November 2000


         RFC 2475, December 1998

[DSFIELD] K. Nichols, S. Blake, F. Baker, D. Black, "Definition of the
          Differentiated Services Field (DS Field) in the IPv4 and
          IPv6 Headers", RFC 2474, December 1998.


[FR-PIB] M. Fine, K. McCloghrie, J. Seligson, K. Chan, S. Hahn,
         A. Smith, F. Reichmeyer "Framework Policy Information Base",
         Internet Draft <draft-ietf-rap-frameworkpib-03.txt>,
         November 2000

[RAP-FRAMEWORK] R. Yavatkar, D. Pendarakis, "A Framework for
        Policy-based Admission Control",
        RFC 2753, January 2000.

[SNMP-SMI]  K. McCloghrie, D. Perkins, J. Schoenwaelder, J. Case,
        M. Rose and S. Waldbusser, "Structure of Management Information
        Version 2 (SMIv2)", STD 58, RFC 2578, April 1999.

[MODEL] Y. Bernet, A. Smith, S. Blake, D. Grossman "A Conceptual Model
        for DiffServ Routers", draft-ietf-diffserv-model-04.txt,
        July 2000.

[IFMIB] K. McCloghrie, F. Kastenholz, "The Interfaces Group MIB using
        SMIv2", RFC 2233, November 1997.
























                                                               [Page 81]





DiffServ QoS Policy Information Base                       November 2000


Table of Contents


1 Glossary ........................................................    3
2 Introduction ....................................................    3
3 Relationship to the Diffserv Informal Management Model ..........    3
3.1 PIB Overview ..................................................    4
4 Structure of the PIB ............................................    6
4.1 General Conventions ...........................................    6
4.2 DiffServ Data Paths ...........................................    6
4.2.1 Data Path PRC ...............................................    7
4.3 Classifiers ...................................................    7
4.3.1 Classifier PRC ..............................................    8
4.3.2  Classifier Element PRC .....................................    8
4.4 Meters ........................................................    9
4.4.1 Meter PRC ...................................................    9
4.4.2 Token-Bucket Meter PRC ......................................   10
4.5 Actions .......................................................   10
4.5.1 DSCP Mark Action PRC ........................................   11
4.5.2 Absolute Drop Action ........................................   11
4.6 Queueing Elements .............................................   11
4.6.1 Algorithmic Dropper PRC .....................................   11
4.6.2 Random Dropper PRC ..........................................   12
4.6.3 Queues and Schedulers .......................................   14
4.7 Specifying Device Capabilities ................................   15
5 PIB Usage Example ...............................................   16
5.1 Data Path and Classifier Example Discussion ...................   18
5.2 Meter and Action Example Discussion ...........................   19
5.3 Queue and Scheduler Example Discussion ........................   19
6 Summary of the DiffServ PIB .....................................   20
7 PIB Operational Overview ........................................   21
8 PIB Definitions .................................................   22
8.1 The DiffServ Base PIB .........................................   22
9 Security Considerations .........................................   79
10 Intellectual Property Considerations ...........................   79
11 Authors' Addresses .............................................   79
12 References .....................................................   80













                                                               [Page 82]


