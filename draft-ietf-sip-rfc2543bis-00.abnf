SIP-URL         = "sip:" [ userinfo "@" ] hostport
                    url-parameters [ headers ]
userinfo        = [ user | telephone-subscriber ] [ ":" password ]
user            = *( unreserved | escaped
                  | "&" | "=" | "+" | "$" | "," | ";" | "?" | "/" )
password        = *( unreserved | escaped
                  | "&" | "=" | "+" | "$" | "," )
hostport        = host [ ":" port ]
host            = hostname | IPv4address | IPv6reference
hostname        = *( domainlabel "." ) toplabel [ "." ]
domainlabel     = alphanum | alphanum *( alphanum | "-" ) alphanum
toplabel        = alpha | alpha *( alphanum | "-" ) alphanum
IPv4address     = 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT
IPv6reference   = "[" IPv6address "]"
IPv6address     = hexpart [ ":" IPv4address ]
hexpart         = hexseq | hexseq "::" [ hexseq ] | "::" [ hexseq ]
hexseq          = hex4 *( ":" hex4)
hex4            = 1*4HEX
port            = 1*DIGIT
url-parameters  = *( ";" url-parameter )
url-parameter   = transport-param | user-param | method-param
                  | ttl-param | maddr-param | other-param
transport-param = "transport=" 
                    ( "udp" | "tcp" | "sctp" | "tls" | other-transport )
other-transport = token
ttl-param       = "ttl=" ttl
ttl             = 1*3DIGIT       ; 0 to 255
maddr-param     = "maddr=" host
user-param      = "user=" ( "phone" | "ip" | other-user )
other-user      = token
method-param    = "method=" Method
tag-param       = "tag=" UUID
UUID            = 1*( HEX | "-" )
other-param     = pname [ "=" pvalue ]
pname           = 1*paramchar
pvalue          = 1*paramchar
paramchar       = param-reserved | unreserved | escaped
param-reserved  = "[" | "]" | "/" | "?" | ":" | "@" | "&" | "+" | "$"
headers         = "?" header *( "&" header )
header          = hname "=" hvalue
hname           = 1*( hnv-unreserved | unreserved | escaped )
hvalue          = *( hnv-unreserved | unreserved | escaped )
hnv-unreserved  = "[" | "]" | "/" | "?" | ":" | "@" | "+" | "$"


   Figure 3: SIP URL syntax
             multicast address and the transport protocol is UDP. The
             user parameter was described above. For example, to specify
             to call j.doe@big.com using multicast to 239.255.255.1 with
             a ttl of 15, the following URL would be used:


               sip:j.doe@big.com;maddr=239.255.255.1;ttl=15



             The transport, maddr, and ttl parameters MUST NOT be used
             in the From and To header fields and the Request-URI; they
             are ignored if present.

        Headers: Headers of the SIP request can be defined with the "?"
             mechanism within a SIP URL. The special hname "body"
             indicates that the associated hvalue is the message-body of
             the SIP INVITE request. Headers MUST NOT be used in the
             From and To header fields and the Request-URI; they are
             ignored if present.  hname and hvalue are encodings of a
             SIP header name and value, respectively. All URL reserved
             characters in the header names and values MUST be escaped.

        Method: The method of the SIP request can be specified with the
             method parameter.  This parameter MUST NOT be used in the
             From and To header fields and the Request-URI; they are
             ignored if present.

   Table 2 summarizes where the components of the SIP URL can be used.
   Entries marked "m" are mandatory, those marked "o" are optional, and
   those marked "-" are not allowed. For optional elements, the second
   column indicates the default value if the element is not present.


   Examples of SIP URLs are:

     sip:j.doe@big.com
     sip:j.doe:secret@big.com;transport=tcp
     sip:j.doe@big.com?subject=project
     sip:+1-212-555-1212:1234@gateway.com;user=phone
     sip:1212@gateway.com
     sip:alice@10.1.2.3
     sip:alice@example.com
     sip:alice
     sip:alice@registrar.com;method=REGISTER
                  default    Req.-URI  To  From  Contact  Rec.-Route  external
   user           --            o      o    o       o         o          o
   password       --            o      o    -       o         o          o
   host           mandatory     m      m    m       m         m          m
   port           5060          o      o    o       o         o          o
   user-param     ip            o      o    o       o         o          o
   method         INVITE        -      -    -       o         -          o
   maddr-param    --            o      -    -       o         m          o
   ttl-param      1             o      -    -       o         -          o
   transp.-param  udp           o      -    -       o         -          o
   other-param    o             o      o    o       o         o          o
   headers        --            -      -    -       o         -          o


   Table 2: Use and default values of URL components  for  SIP  headers,
   Request-URI and references

   Within a SIP message, URLs are used to indicate the source and
   intended destination of a request, redirection addresses and the
   current destination of a request. Normally all these fields will
   contain SIP URLs.

SIP-message  =  Request | Response


generic-message  =  start-line
                            *message-header
                            CRLF
                            [ message-body ]

start-line       =  Request-Line |     ;Section 4.1
                            Status-Line        ;Section 5.1




message-header  =  ( general-header
                           | request-header
                           | response-header
                           | entity-header )



Request  =  Request-Line       ;  Section 4.1
                    *( general-header
                    | request-header
                    | entity-header )
                    CRLF
                    [ message-body ]   ;  Section 8


Request-Line  =  Method SP Request-URI SP SIP-Version CRLF
Request-URI   =  SIP-URL | absoluteURI


general-header   =  Accept               ; Section 6.7
                         |  Accept-Encoding      ; Section 6.8
                         |  Accept-Language      ; Section 6.9
                         |  Call-ID              ; Section 6.13
                         |  Contact              ; Section 6.15
                         |  CSeq                 ; Section 6.21
                         |  Date                 ; Section 6.22
                         |  Encryption           ; Section 6.23
                         |  From                 ; Section 6.25
                         |  Organization         ; Section 6.30
                         |  Record-Route         ; Section 6.35
                         |  Require              ; Section 6.36
                         |  Supported            ; Section 6.42
                         |  Timestamp            ; Section 6.43
                         |  To                   ; Section 6.44
                         |  User-Agent           ; Section 6.46
                         |  Via                  ; Section 6.47
entity-header    =  Allow                ; Section 6.11
                         |  Content-Disposition  ; Section 6.16
                         |  Content-Encoding     ; Section 6.17
                         |  Content-Language     ; Section 6.18
                         |  Content-Length       ; Section 6.19
                         |  Content-Type         ; Section 6.20
                         |  Expires              ; Section 6.24
request-header   =  Authorization        ; Section 6.12
                         |  Hide                 ; Section 6.26
                         |  In-Reply-To          ; Section 6.27
                         |  Max-Forwards         ; Section 6.28
                         |  Priority             ; Section 6.31
                         |  Proxy-Authorization  ; Section 6.33
                         |  Proxy-Require        ; Section 6.34
                         |  Route                ; Section 6.39
                         |  Response-Key         ; Section 6.37
                         |  Subject              ; Section 6.41
response-header  =  Proxy-Authenticate   ; Section 6.32
                         |  Retry-After          ; Section 6.38
                         |  Server               ; Section 6.40
                         |  Unsupported          ; Section 6.45
                         |  Warning              ; Section 6.48
                         |  WWW-Authenticate     ; Section 6.49


Method            =  "INVITE" | "ACK" | "OPTIONS" | "BYE"
                             | "CANCEL" | "REGISTER" | extension-method
extension-method  =  token


option-tag  =  token


Response  =  Status-Line        ;  Section 5.1
                     *( general-header
                     | response-header
                     | entity-header )
                     CRLF
                     [ message-body ]   ;  Section 8


Status-Line  =  SIP-version SP Status-Code SP Reason-Phrase CRLF


Status-Code     =  Informational                     ;Fig. 4
                       |   Success                           ;Fig. 4
                       |   Redirection                       ;Fig. 5
                       |   Client-Error                      ;Fig. 6
                       |   Server-Error                      ;Fig. 7
                       |   Global-Failure                    ;Fig. 8
                       |   extension-code
extension-code  =  3DIGIT
Reason-Phrase   =  *<TEXT-UTF8,  excluding CR, LF>


Informational  =  "100"  ;  Trying
                      |   "180"  ;  Ringing
                      |   "181"  ;  Call Is Being Forwarded
                      |   "182"  ;  Queued
                      |   "183"  ;  Session Progress
Success        =  "200"  ;  OK


Redirection  =  "300"  ;  Multiple Choices
                    |   "301"  ;  Moved Permanently
                    |   "302"  ;  Moved Temporarily
                    |   "305"  ;  Use Proxy
                    |   "380"  ;  Alternative Service


Client-Error  =  "400"  ;  Bad Request
                     |   "401"  ;  Unauthorized
                     |   "402"  ;  Payment Required
                     |   "403"  ;  Forbidden
                     |   "404"  ;  Not Found
                     |   "405"  ;  Method Not Allowed
                     |   "406"  ;  Not Acceptable
                     |   "407"  ;  Proxy Authentication Required
                     |   "408"  ;  Request Timeout
                     |   "409"  ;  Conflict
                     |   "410"  ;  Gone
                     |   "411"  ;  Length Required
                     |   "413"  ;  Request Entity Too Large
                     |   "414"  ;  Request-URI Too Large
                     |   "415"  ;  Unsupported Media Type
                     |   "420"  ;  Bad Extension
                     |   "480"  ;  Temporarily not available
                     |   "481"  ;  Call Leg/Transaction Does Not Exist
                     |   "482"  ;  Loop Detected
                     |   "483"  ;  Too Many Hops
                     |   "484"  ;  Address Incomplete
                     |   "485"  ;  Ambiguous
                     |   "486"  ;  Busy Here
                     |   "487"  ;  Request Cancelled
                     |   "488"  ;  Not Acceptable Here


Server-Error  =  "500"  ;  Internal Server Error
                     |   "501"  ;  Not Implemented
                     |   "502"  ;  Bad Gateway
                     |   "503"  ;  Service Unavailable
                     |   "504"  ;  Gateway Time-out
                     |   "505"  ;  SIP Version not supported


Global-Failure  =  "600"  ;  Busy Everywhere
                       |   "603"  ;  Decline
                       |   "604"  ;  Does not exist anywhere
                       |   "606"  ;  Not Acceptable


message-header  =  field-name ":" [ field-value ] CRLF
field-name      =  token
field-value     =  *( field-content | LWS )
field-content   =  < the OCTETs  making up the field-value
                            and consisting of either *TEXT-UTF8
                            or combinations of token,
                            separators, and quoted-string>


Alert-Info  =  "Alert-Info" ":" # ( "<" URI ">" *(";" generic-param ))


Allow  =  "Allow" ":" 1#Method


callid   =  token [ "@" token ]
Call-ID  =  ( "Call-ID" | "i" ) ":" callid


Call-Info  =  "Call-Info" ":" # ( "<" URI ">"
                      [ ";" purpose "=" ( "icon" | "info" | "card" | token) ]
                      *(";" generic-param ))


Contact = ( "Contact" | "m" ) ":" 
             ("*" | (1# (( name-addr | addr-spec )
             *( ";" contact-params ) )))

name-addr      = [ display-name ] "<" addr-spec ">"
addr-spec      = SIP-URL | URI
display-name   = *token | quoted-string

contact-params = "q"       "=" qvalue
                  | "action"  "=" "proxy" | "redirect"
                  | "expires" "=" delta-seconds | <"> SIP-date <">
                  | contact-extension

contact-extension = generic-param


Content-Disposition  =  "Content-Disposition" ":"
                                disposition-type *(";" disposition-parm)
disposition-type     =  "render" | "session" | extension-token
disposition-parm     =  handling-parm | parameter
handling-parm        =  "handling" "="
                                ( "optional" | "required" | other-handling )
other-handling       =  token


Content-Encoding  =  ( "Content-Encoding" | "e" ) ":"
                             1#content-coding


Content-Length  =  ( "Content-Length" | "l" ) ":" 1*DIGIT


Content-Type  =  ( "Content-Type" | "c" ) ":" media-type


CSeq  =  "CSeq" ":" 1*DIGIT Method



Date      =  "Date" ":" SIP-date
SIP-date  =  rfc1123-date


Encryption         =  "Encryption" ":" encryption-scheme 1*SP
                              #encryption-params
encryption-scheme  =  token
encryption-params  =  generic-param
generic-param      =  token [ "=" ( token | quoted-string ) ]

Expires  =  "Expires" ":" ( SIP-date | delta-seconds )


From            =  ( "From" | "f" ) ":" ( name-addr | addr-spec )
                           [ ";" tag-param ] *( ";" addr-extension )
tag-param       =  "tag=" token
addr-extension  =  generic-param


Hide        =  "Hide" ":" ( "route" | "hop" | other-hide )
other-hide  =  token


In-Reply-To  =  "In-Reply-To" ":" 1# callid


Max-Forwards  =  "Max-Forwards" ":" 1*DIGIT


Organization  =  "Organization" ":" TEXT-UTF8-TRIM


Priority        =  "Priority" ":" priority-value
priority-value  =  "emergency" | "urgent" | "normal"
                        |  "non-urgent" | other-priority
Record-Route  =  "Record-Route" ":" 1# name-addr [ rr-extension]
rr-extension  =  token [ "=" ( token | quoted-string ) ]


Require  =  "Require" ":" 1#option-tag


Response-Key  =  "Response-Key" ":" key-scheme 1*SP #key-param
key-scheme    =  token
key-param     =  generic-param


Retry-After  =  "Retry-After" ":" ( SIP-date | delta-seconds )
                        [ comment ] [ ";" "duration" "=" delta-seconds ]


Route            =  "Route" ":" 1# name-addr [ route-extension ]
route-extension  =  generic-param


Subject  =  ( "Subject" | "s" ) ":" TEXT-UTF8-TRIM


Supported  =  ( "Supported" | "k" ) ":" 1#option-tag


Timestamp  =  "Timestamp" ":" *(DIGIT) [ "." *(DIGIT) ] [ delay ]
delay      =  *(DIGIT) [ "." *(DIGIT) ]


To  =  ( "To" | "t" ) ":" ( name-addr | addr-spec )
               [ ";" tag-param ] *( ";" addr-extension )


Unsupported  =  "Unsupported" ":" 1#option-tag


Via              = ( "Via" | "v") ":" 1#( sent-protocol sent-by
                     *( ";" via-params ) [ comment ] )
via-params       = via-hidden | via-ttl | via-maddr 
                   | via-received | via-branch | via-extension
via-hidden       = "hidden"
via-ttl          = "ttl" "=" ttl
via-maddr        = "maddr" "=" maddr
via-received	   = "received" "=" host [ ":" port ]
via-branch       = "branch" "=" token
via-extension    = token [ "=" ( token | quoted-string ) ]
sent-protocol    = protocol-name "/" protocol-version "/" transport
protocol-name    = "SIP" | token
protocol-version = token
transport        = "UDP" | "TCP" | token
sent-by          = ( host [ ":" port ] ) | ( concealed-host )
concealed-host   = token
ttl              = 1*3DIGIT     ; 0 to 255


   Figure 10: Syntax of Via header field



   The "branch" parameter is included by every proxy. The token MUST be
   unique for each distinct request. The precise format of the token is
   implementation-defined. In order to be able to both detect loops and
   associate responses with the corresponding request, the parameter
   SHOULD consist of two parts separable by the implementation. One
   part, used for loop detection (Section 12.3.1), MAY be computed as a
   cryptographic hash of the To, From, Call-ID header fields, the
   Request-URI of the request received (before translation) and the
   sequence number from the CSeq header field. The algorithm used to
   compute the hash is implementation-dependent, but MD5 [38], expressed
   in hexadecimal, is a reasonable choice. (Note that base64 is not
   permissible for a token.) The other part, used for matching responses
   to requests, is a function of the branch taken, for example, a
   sequence number or the MD5 hash of the request-URI of the request
   sent on the branch.

   For example: 7a83e5750418bce23d5106b4c06cc632.1


        The "branch" parameter MUST depend on the incoming
        request-URI to distinguish looped requests from requests
        whose request-URI is changed and which then reach a server
        visited earlier.
   CANCEL requests MUST have the same branch value as the corresponding
   forked request. When a response arrives at the proxy it can use the
   branch value to figure out which branch the response corresponds to.


     Via: SIP/2.0/UDP first.example.com:4000;ttl=16
       ;maddr=224.2.0.1 ;branch=a7c6a8dlze.1 (Acme server)
     Via: SIP/2.0/UDP adk8



Warning        =  "Warning" ":" 1#warning-value
warning-value  =  warn-code SP warn-agent SP warn-text
warn-code      =  3DIGIT
warn-agent     =  ( host [ ":" port ] ) | pseudonym
                          ;  the name or pseudonym of the server adding
                          ;  the Warning header, for use in debugging
warn-text      =  quoted-string


v=0
o=user1 53655765 2353687637 IN IP4 128.3.4.5
s=Mbone Audio
i=Discussion of Mbone Engineering Issues
e=mbone@somewhere.com
c=IN IP4 224.2.0.1/127
t=0 0
m=audio 3456 RTP/AVP 0
a=rtpmap:0 PCMU/8000
r = await_response();
class = r.status / 100;

multicast = 0;
best = r;
best = r;
v=0
o=bell 53655765 2353687637 IN IP4 128.3.4.5
s=Mr. Watson, come here.
t=0 0
c=IN IP4 135.180.144.94
m=audio 3456 RTP/AVP 0 3 4 5



v=0
o=bell 53655765 2353687637 IN IP4 128.3.4.5
s=Mr. Watson, come here.
t=0 0
c=IN IP4 135.180.144.94
m=audio 3456 RTP/AVP 0 3 4 5



URI  =  SIP-URL


digest-uri-value  =  Request-URI ; as defined in Section
WWW-Authenticate  =  "WWW-Authenticate" ":" "pgp" pgp-challenge
pgp-challenge     =  # pgp-params
pgp-params        =  realm | pgp-version | pgp-micalgorithm
                         |   pgp-pubalgorithm | nonce
realm             =  "realm" "=" realm-value
realm-value       =  quoted-string
pgp-version       =  "version" "="
                             <"> digit *( "." digit ) *letter <">
pgp-micalgorithm  =  "algorithm" "=" ( "md5" | "sha1" | token
                             | "ripemd160" | "MD2" | "TIGER192" | "HAVAL-5-160")
pgp-pubalgorithm  =  "pubkey" "=" ( "rsa" | "rsa-encrypt"
                             | "rsa-sign" | "elgamal" | "dsa" | token )
nonce             =  "nonce" "=" nonce-value
nonce-value       =  quoted-string


realm="Your Startrek identity, please", algorithm=md5,
nonce="913082051"



Authorization  =  "Authorization" ":" "pgp" # pgp-response
pgp-response   =  realm | pgp-version | pgp-signature
                          | signed-by | nonce
pgp-signature  =  "signature" "=" quoted-string
signed-by      =  "signed-by" "=" <"> URI <">


realm="Your Startrek identity, please",
nonce="913082051"
signature="iQB1AwUBNNJiUaYBnHmiiQh1AQFYsgL/Wt3dk6TWK81/b0gcNDf
Encryption    =  "Encryption" ":" "pgp" pgp-eparams
pgp-eparams   =  1# ( pgp-version | pgp-encoding )
pgp-encoding  =  "encoding" "=" "ascii" | token


Response-Key  =  "Response-Key" ":" "pgp" pgp-eparams
pgp-eparams   =  1# ( pgp-version | pgp-encoding | pgp-key)
pgp-key       =  "key" "=" quoted-string


key="mQBtAzNWHNYAAAEDAL7QvAdK2utY05wuUG+ItYK5tCF8HNJM60sU4rLaV+eUnkMk
bmVAY3MuY29sdW1iaWEuZWR1Pg==
v=0
o=user1 53655765 2353687637 IN IP4 128.3.4.5
s=Mbone Audio
t=3149328700 0
i=Discussion of Mbone Engineering Issues
e=mbone@somewhere.com
c=IN IP4 224.2.0.1/127
t=0 0
m=audio 3456 RTP/AVP 0
a=rtpmap:0 PCMU/8000



v=0
o=bell 53655765 2353687637 IN IP4 128.3.4.5
s=Mr. Watson, come here.
t=3149328600 0
c=IN IP4 kton.bell-tel.com
m=audio 3456 RTP/AVP 0 3 4 5
a=rtpmap:0 PCMU/8000
a=rtpmap:3 GSM/8000
a=rtpmap:4 G723/8000
a=rtpmap:5 DVI4/8000

v=0
o=watson 4858949 4858949 IN IP4 192.1.2.3
s=I'm on my way
t=3149329600 0
c=IN IP4 boston.bell-tel.com
m=audio 5004 RTP/AVP 0 3
a=rtpmap:0 PCMU/8000
a=rtpmap:3 GSM/8000



v=0
o=schooler 3149329138 3149329165 IN IP4 38.245.76.2
s=Let's talk
t=3149328630 0
b=CT:128
c=IN IP4 north.east.isi.edu
m=audio 3456 RTP/AVP 5 0 7
a=rtpmap:5 DVI4/8000
a=rtpmap:0 PCMU/8000
a=rtpmap:7 LPC/8000
m=video 2232 RTP/AVP 31
a=rtpmap:31 H261/90000



v=0
o=alice 3149329138 3149329165 IN IP4 24.124.37.3
s=Security problems
t=3149328650 0
c=IN IP4 24.124.37.3
m=audio 0 RTP/AVP 0 1 3 99
a=rtpmap:0 PCMU/8000
a=rtpmap:1 1016/8000
a=rtpmap:3 GSM/8000
a=rtpmap:99 SX7300/8000
m=video 0 RTP/AVP 31 34
a=rtpmap:31 H261/90000
a=rtpmap:34 H263/90000



v=0
o=alice 2890844526 2890844526 IN IP4 host.anywhere.com
s=New board design
t=0 0
c=IN IP4 host.anywhere.com
m=audio 49170 RTP/AVP 0
a=rtpmap:0 PCMU/8000
m=video 51372 RTP/AVP 31
a=rtpmap:31 H261/90000
m=video 53000 RTP/AVP 32
a=rtpmap:32 MPV/90000



v=0
o=bob 2890844730 2890844730 IN IP4 host.example.com
s=New board design
t=0 0
c=IN IP4 host.example.com
m=audio 47920 RTP/AVP 0 1
a=rtpmap:0 PCMU/8000
m=video 0 RTP/AVP 31
m=video 53000 RTP/AVP 32
a=rtpmap:32 MPV/90000



name  =  definition


OCTET     =  %x00-ff ; any 8-bit sequence of data
CHAR      =  %x00-7f ; any US-ASCII character (octets 0 - 127)
upalpha   =  "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" |
                     "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" |
                     "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
lowalpha  =  "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" |
                     "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" |
                     "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
alpha     =  lowalpha | upalpha
DIGIT     =  "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |
                     "8" | "9"
alphanum  =  alpha | DIGIT
CTL       =  %x00-1f | 0x7f ; (octets 0 -- 31) and DEL (127)
CR        =  %d13 ; US-ASCII CR, carriage return character
LF        =  %d10 ; US-ASCII LF, line feed character
SP        =  %d32 ; US-ASCII SP, space character
HT        =  %d09 ; US-ASCII HT, horizontal tab character
CRLF      =  CR LF ; typically the end of a line


unreserved  =  alphanum | mark
mark        =  "-" | "_" | "." | "!" | "~" | "*" | "'"
                   |   "(" | ")"
escaped     =  "%" hex hex


LWS  =  [CRLF] 1*( SP | HT ) ; linear whitespace


TEXT-UTF8       =  *(TEXT-UTF8char | LWS)
TEXT-UTF8-TRIM  =  *TEXT-UTF8char *(*LWS TEXT-UTF8char)
TEXT-UTF8char   =  %x21-7e
                        |  UTF8-NONASCII
UTF8-NONASCII   =  %xc0-df 1UTF8-CONT
                        |  %xe0-ef 2UTF8-CONT
                        |  %xf0-f7 3UTF8-CONT
                        |  %xf8-fb 4UTF8-CONT
                        |  %xfc-fd 5UTF8-CONT
UTF8-CONT       =  %x80-bf


HEX  =  "A" | "B" | "C" | "D" | "E" | "F"
                | "a" | "b" | "c" | "d" | "e" | "f" | DIGIT
token                            =  1*(alphanum | "-" | "." | "!" | "%" | "*"
separators                       =  "(" | ")" | "<" | ">" | "@" |
                                            "," | ";" | ":" | "\" | <"> |
                                            "/" | "[" | "]" | "?" | "=" |
                                            "{" | "}" | SP | HT


comment  =  "(" *(ctext | quoted-pair | comment) ")"
ctext    =  < any TEXT-UTF8  excluding "("  and ")">


quoted-string  =  ( <"> *(qdtext | quoted-pair ) <"> )
qdtext         =  LWS | %x21 | %x23-5b | %x5d-7e
                       |  UTF8-NONASCII


quoted-pair  =  " \ " CHAR


return = (CR | LF | CRLF)

