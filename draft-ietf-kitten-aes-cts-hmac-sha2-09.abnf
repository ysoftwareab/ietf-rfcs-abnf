k = 192 as 0x000000C0, k = 256 as 0x00000100,
k = 384 as 0x00000180)

K1 = HMAC-SHA-256(key, 0x00000001 | label | 0x00 | k)

K1 = HMAC-SHA-384(key, 0x00000001 | label | 0x00 | k)

iter_count = string-to-key parameter, default is decimal 32768
saltp = enctype-name | 0x00 | salt
tkey = random-to-key(PBKDF2(passphrase, saltp,
                                 iter_count, keylength))
base-key = random-to-key(KDF-HMAC-SHA2(tkey, "kerberos",
 




                                            keylength))
                where "kerberos" is the octet-string
                0x6B65726265726F73

Kc = KDF-HMAC-SHA2(base-key, usage | 0x99, 128)
Ke = KDF-HMAC-SHA2(base-key, usage | 0xAA, 128)
Ki = KDF-HMAC-SHA2(base-key, usage | 0x55, 128)

Kc = KDF-HMAC-SHA2(base-key, usage | 0x99, 192)
Ke = KDF-HMAC-SHA2(base-key, usage | 0xAA, 256)
Ki = KDF-HMAC-SHA2(base-key, usage | 0x55, 192)

N = random nonce of length 128 bits (the AES block size) 
IV = cipherstate
C = E(Ke, N | plaintext, IV)
H = HMAC(Ki, IV | C)
ciphertext = C | H[1..h]

L = length of C in bits
IV = cipherstate
cipherstate = same as described above in encryption function

PRF = KDF-HMAC-SHA2(base-key, "prf" | octet-string, 256) 

PRF = KDF-HMAC-SHA2(base-key, "prf" | octet-string, 384)

