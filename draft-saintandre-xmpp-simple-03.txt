


Network Working Group                                     P. Saint-Andre
Internet-Draft                                Jabber Software Foundation
Expires: December 11, 2005                                      A. Houri
                                                                     IBM
                                                           J. Hildebrand
                                                            Jabber, Inc.
                                                            June 9, 2005


  Basic Messaging and Presence Interoperability between the Extensible
 Messaging and Presence Protocol (XMPP) and Session Initiation Protocol
      (SIP) Extensions for Instant Messaging and Presence (SIMPLE)
                    draft-saintandre-xmpp-simple-03

Status of this Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on December 11, 2005.

Copyright Notice

   Copyright (C) The Internet Society (2005).

Abstract

   This document defines a bi-directional protocol mapping for use by
   gateways that enable the exchange of presence information and single
   instant messages between systems that implement the Extensible



Saint-Andre, et al.     Expires December 11, 2005               [Page 1]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   Messaging and Presence Protocol (XMPP) and those that implement the
   basic extensions to the Session Initiation Protocol (SIP) for instant
   messaging and presence.

Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1   Architectural Assumptions  . . . . . . . . . . . . . . . .  3
     1.2   Terminology  . . . . . . . . . . . . . . . . . . . . . . .  4
   2.  Addresses  . . . . . . . . . . . . . . . . . . . . . . . . . .  4
     2.1   Overview . . . . . . . . . . . . . . . . . . . . . . . . .  4
     2.2   XMPP to SIP  . . . . . . . . . . . . . . . . . . . . . . .  6
     2.3   SIP to XMPP  . . . . . . . . . . . . . . . . . . . . . . .  6
   3.  Instant Messages . . . . . . . . . . . . . . . . . . . . . . .  7
     3.1   Overview . . . . . . . . . . . . . . . . . . . . . . . . .  7
     3.2   XMPP to SIP  . . . . . . . . . . . . . . . . . . . . . . .  8
     3.3   SIP to XMPP  . . . . . . . . . . . . . . . . . . . . . . .  9
   4.  Presence Subscriptions . . . . . . . . . . . . . . . . . . . . 11
     4.1   Overview . . . . . . . . . . . . . . . . . . . . . . . . . 11
     4.2   XMPP to SIP  . . . . . . . . . . . . . . . . . . . . . . . 12
     4.3   SIP to XMPP  . . . . . . . . . . . . . . . . . . . . . . . 14
   5.  Presence Notifications . . . . . . . . . . . . . . . . . . . . 16
     5.1   Overview . . . . . . . . . . . . . . . . . . . . . . . . . 16
     5.2   XMPP to SIP  . . . . . . . . . . . . . . . . . . . . . . . 17
     5.3   SIP to XMPP  . . . . . . . . . . . . . . . . . . . . . . . 19
   6.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 21
   7.  Security Considerations  . . . . . . . . . . . . . . . . . . . 21
   8.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 22
   9.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 22
     9.1   Normative References . . . . . . . . . . . . . . . . . . . 22
     9.2   Informative References . . . . . . . . . . . . . . . . . . 23
       Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . 24
       Intellectual Property and Copyright Statements . . . . . . . . 25


















Saint-Andre, et al.     Expires December 11, 2005               [Page 2]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


1.  Introduction

   In order to help ensure interoperability between instant messaging
   and presence systems that conform to the requirements of RFC 2779
   [IMP-REQS], it is important to clearly define mappings between such
   protocols.  Within the IETF, work has proceeded on two such
   protocols:

   o  Various extensions to the Session Initiation Protocol ([SIP]) for
      instant messaging and presence, work on which has been formalized
      under the SIP for Instant Messaging and Presence Leveraging
      Extensions (SIMPLE) Working Group
   o  The Extensible Messaging and Presence Protocol (XMPP), which
      consists of a formalization of the core XML streaming protocols
      developed originally by the Jabber open-source community

   One approach to helping ensure interoperability between such
   protocols is to map each protocol to the abstract semantics described
   in [CPIM] and [CPP]; that is the approach taken by [SIMPLE-CPIM] and
   [XMPP-CPIM].  Another approach is that taken by [DRAFT-UMPP].  The
   approach taken in this document is to directly map semantics from one
   protocol to another (i.e., from SIP/SIMPLE to XMPP and vice-versa),
   mainly for use by gateways between systems that implement one or the
   other of these protocols.

   The mappings specified in this document cover three areas that
   address basic instant messaging and presence functionality:

   o  Mapping of addresses
   o  Mapping of single instant messages
   o  Mapping of presence subscriptions
   o  Mapping of presence notifications

   Mapping of more advanced functionality (e.g., messaging sessions
   rather than single messages) is out of scope for this document;
   however, the authors will attempt to address such issues in future
   documents.

1.1  Architectural Assumptions

   This document assumes that the mapping between protocols will most
   likely occur by means of a gateway between an XMPP network and a SIP
   network being used for instant messaging and presence.  Such a
   gateway is a dedicated translator between the XMPP and SIP/SIMPLE
   protocols.  Although such a gateway could use the [CPIM] and [CPP]
   specifications to define the common formats into which the protocols
   are translated for purposes of interworking (as specified in [SIMPLE-
   CPIM] and [XMPP-CPIM]), this document assumes that a gateway will



Saint-Andre, et al.     Expires December 11, 2005               [Page 3]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   translate directly from one protocol to the other.  Naturally, a
   gateway need not be a distinct entity on the network and may be co-
   resident with an XMPP server or a SIMPLE "server" (although there is
   no such thing as a SIMPLE server, we use the term here to refer to a
   SIP proxy, redirect, or registrar server that supports the SIP
   extensions for instant messaging and/or presence).  Within this
   document, we refer to a gateway from an XMPP network to a SIP network
   being used for instant messaging and presence as an "XMPP-SIMPLE
   gateway" and we refer to a gateway from a SIP network being used for
   instant messaging and presence to an XMPP network as a "SIMPLE-XMPP
   gateway".

1.2  Terminology

   The capitalized key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
   "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "NOT
   RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
   interpreted as described in RFC 2119 [TERMS].

2.  Addresses

2.1  Overview

   The address formats used to identify XMPP entities are different from
   those used to identify SIP entities.  The XMPP address format is
   specified in [XMPP-CORE]; as specified in [XMPP-IM], instant
   messaging and presence applications of XMPP must also support 'im:'
   and 'pres:' URIs as specified in [CPIM] and [CPP] respectively,
   although such support may simply involve leaving resolution of such
   addresses up to an XMPP server.  The SIP address format for instant
   messaging is specified in [SIP-IM]; it may use either 'sip:' or
   'sips:' URIs as specified in [SIP] or an 'im:' URI as specified in
   [CPIM].  The SIP address format for presence is specified in [SIP-
   PRES]; it may use either 'sip:' or 'sips:' URIs as specified in [SIP]
   or a 'pres:' URI as specified in [CPP].

   In this document we describe mappings for addresses of the form
   <user@domain> only, ignoring any protocol-specific extensions such as
   XMPP resource identifiers or SIP telephone numbers and passwords.  In
   addition, we have ruled the mapping of domain names as out of scope
   for now since that is a matter for the Domain Name System;
   specifically, the issue for interworking between SIP and XMPP relates
   to the translation of fully internationalized domain names (which the
   SIP address format does not allow, but which the XMPP address format
   does allow via [IDNA]) into non-internationalized domain names.
   Therefore, in the following sections we discuss local-part addresses
   only (these are called variously "usernames", "instant inboxes",
   "presentities", and "node identifiers" in the protocols at issue).



Saint-Andre, et al.     Expires December 11, 2005               [Page 4]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   The sip:/sips:, im:/pres:, and XMPP address schemes allow different
   sets of characters.  In some cases, characters allowed in one scheme
   are disallowed in others; these characters must be mapped
   appropriately in order to ensure interoperable communications across
   systems.  The table below summarizes our findings regarding the
   complement of allowable US-ASCII characters in each addressing scheme
   when compared individually to the other schemes.

   Table 1: Partial complements of allowable US-ASCII characters

      +----------+----------+-----------+-------+
      |          | SIP/SIPS |  IM/PRES  |  XMPP |
      +----------+----------+-----------+-------+
      | SIP/SIPS |  N/A     |  (),;     |  &'/  |
      +----------+----------+-----------+-------+
      | IM/PRES  | #%^`{|}  |  N/A      |  &'/  |
      +----------+----------+-----------+-------+
      | XMPP     |  none    |  none     |  N/A  |
      +----------+----------+-----------+-------+

   Note: Each cell shows US-ASCII characters that are disallowed in the
   column protocol but allowed in the row protocol; e.g., the last cell
   of the second row shows that the characters &'/ are allowed in sip:/
   sips: URIs but disallowed in XMPP addresses.

   The table below is another way of looking at the same issue, since it
   shows the intersection of allowable US-ASCII characters in each
   addressing scheme when compared individually to the other schemes.

   Table 2: Partial intersections of allowable US-ASCII characters

      +-------------------+------------------+----------------------+
      |  SIP/SIPS & XMPP  |  IM/PRES & XMPP  |  SIP/SIPS & IM/PRES  |
      +-------------------+------------------+----------------------+
      |  a-z  A-Z  0-9    |  a-z  A-Z  0-9   |  a-z  A-Z  0-9       |
      |  !$()*+,-.;=?_~   |  !#$%*+-.=?^_`   |  !$*+-.=?_~          |
      |  %hexhex          |  {|}~            |                      |
      +-------------------+------------------+----------------------+

   Therefore the following US-ASCII characters are allowed in all three
   addressing schemes (i.e., the intersection of all three sets of
   allowable characters):

      a-z  A-Z  0-9  ! $ * + - . = ?

   In addition to the US-ASCII characters described above, many non-US-
   ASCII (specifically, UTF-8) characters are allowed in XMPP addresses
   but not allowed in sip:/sips: or im:/pres: URIs, since XMPP allows



Saint-Andre, et al.     Expires December 11, 2005               [Page 5]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   internationalized local-part addresses.  A straightforward mapping of
   these characters to US-ASCII characters is provided in Section 2.2.5
   of [URL-GUIDE], namely to encode unsafe octets using the %hexhex
   encoding.

2.2  XMPP to SIP

   The following is a high-level algorithm for mapping an XMPP address
   to a sip:, sips:, im:, or pres: URI:

   1.  Split XMPP address into node identifier (local-part; mapping
       described in remaining steps), domain identifier (hostname;
       mapping is out of scope), and resource identifier (specifier for
       particular device or connection; discard this for cross-system
       interoperability)
   2.  Apply Nodeprep profile of [STRINGPREP] (as specified in [XMPP-
       CORE]) for canonicalization (OPTIONAL)
   3.  Translate "\26" to &, "\27" to ', and "\2f" to / respectively
       (this is consistent with [JEP-0106])
   4.  For each byte, if the byte is not in the set -A-Za-z0-9!$*.?_~+=
       then change to %hexhex
   5.  Combine resulting local-part with mapped hostname to form
       local@domain address
   6.  Prepend with 'im:' scheme (for XMPP <message/> stanzas) or
       'pres:' scheme (for XMPP <presence/> stanzas) if foreign domain
       supports these (discovered via [SRV] lookup as specified in
       [XMPP-IM]), else prepend with 'sip:' or 'sips:' scheme according
       to local service policy

2.3  SIP to XMPP

   The following is a high-level algorithm for mapping a sip:, sips:,
   im:, or pres: URI to an XMPP address:

   1.  Remove URI scheme
   2.  Split at the first '@' character into local-part and hostname
       (mapping the latter is out of scope)
   3.  Translate %hexhex to equivalent octets
   4.  Treat result as a UTF-8 string
   5.  Translate & to "\26", ' to "\27", and / to "\2f" respectively
       (this is consistent with [JEP-0106])
   6.  Apply Nodeprep profile of [STRINGPREP] (as specified in [XMPP-
       CORE]) for canonicalization (OPTIONAL)
   7.  Recombine local-part with mapped hostname to form local@domain
       address






Saint-Andre, et al.     Expires December 11, 2005               [Page 6]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


3.  Instant Messages

3.1  Overview

   Both XMPP and IM-aware SIP systems enable entities (often but not
   necessarily human users) to send "instant messages" to other
   entities.  The term "instant message" usually refers to messages sent
   between two entities for delivery in close to real time (rather than
   messages that are stored and forwarded to the intended recipient upon
   request).  Generally there are three kinds of instant message:

   o  Single messages, which are sent from the sender to the recipient
      outside the context of any one-to-one chat session or multi-user
      text conference.
   o  Chat messages, which are sent from the sender to the recipient in
      the context of a "messaging session" between the two entities.
   o  Groupchat messages, which are sent from a sender to multiple
      recipients in the context of a text conference (along the lines of
      [IRC]).

   This document covers single messages only, since they form the
   "lowest common denominator" for instant messaging on the Internet.
   It is likely that future documents will address chat messages as
   well, especially once the SIMPLE WG completes its work on one-to-one
   messaging sessions (a likely candidate for finalization is [MSRP]).

   Instant messaging using XMPP message stanzas of type "normal" is
   specified in [XMPP-IM].  Instant messaging using SIP requests of type
   MESSAGE (often called "pager-model" messaging) is specified in
   [SIP-IM].

   As described in [XMPP-IM], a single instant message is an XML
   <message/> stanza of type "normal" sent over an XML stream (since
   "normal" is the default for the 'type' attribute of the <message/>
   stanza, the attribute is often omitted).  In this document we will
   assume that such a message is sent from an XMPP client to an XMPP
   server over an XML stream negotiated between the client and the
   server, and that the client is controlled by a human user (this is a
   simplifying assumption introduced for explanatory purposes only; the
   XMPP sender could be a bot-controlled client, a component such as a
   workflow application, a server, etc.).  Continuing the tradition of
   Shakespeare examples in XMPP documentation, we will say that the XMPP
   user has an XMPP address of <juliet@example.com>.

   As described in [SIP-IM], a single instant message is a SIP MESSAGE
   request sent from a SIP user agent to an intended recipient who is
   most generally referenced by an Instant Message URI of the form
   <im:user@domain> but who may be referenced by a SIP or SIPS URI of



Saint-Andre, et al.     Expires December 11, 2005               [Page 7]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   the form <sip:user@domain> or <sips:user@domain>  Here again we
   introduce the simplifying assumption that the user agent is
   controlled by a human user, whom we shall dub <romeo@example.net>.

3.2  XMPP to SIP

   When Juliet wants to send an instant message to Romeo, she interacts
   with her XMPP client, which generates an XMPP <message/> stanza.  The
   syntax of the <message/> stanza, including required and optional
   elements and attributes, is defined in [XMPP-IM].  The following is
   an example of such a stanza:

   Example: XMPP user sends message:

   |  <message from='juliet@example.com/balcony'
   |           to='romeo@example.net'>
   |    <body>Art thou not Romeo, and a Montague?</body>
   |  </message>

   Upon receiving such a stanza, the XMPP server to which Juliet has
   connected either delivers it to a local recipient (if the hostname in
   the 'to' attribute matches one of the hostnames serviced by the XMPP
   server) or attempts to route it to the foreign domain that services
   the hostname in the 'to' attribute.  Naturally, in this document we
   assume that the hostname in the 'to' attribute is an IM-aware SIP
   service hosted by a separate server.  As specified in [XMPP-IM], the
   XMPP server needs to determine the identity of the foreign domain,
   which it does by performing one or more [SRV] lookups.  For message
   stanzas, the order of lookups recommended by [XMPP-IM] is to first
   try the "_xmpp-server" service as specified in [XMPP-CORE] and to
   then try the "_im" service as specified in [IMP-SRV].  Here we assume
   that the first lookup will fail but that the second lookup will
   succeed and return a resolution "_im._simple.example.net.", since we
   have already assumed that the example.net hostname is running a SIP
   instant messaging service.  (Note: The XMPP server may have
   previously determined that the foreign domain is a SIMPLE server, in
   which case it would not need to perform the SRV lookups; the caching
   of such information is a matter of implementation and local service
   policy, and is therefore out of scope for this document.)

   Once the XMPP server has determined that the foreign domain is
   serviced by a SIMPLE server, it must determine how to proceed.  We
   here assume that the XMPP server contains or has available to it an
   XMPP-SIMPLE gateway.  The XMPP server would then deliver the message
   stanza to the XMPP-SIMPLE gateway.

   The XMPP-SIMPLE gateway is then responsible for translating the XMPP
   message stanza into a SIP MESSAGE request from the XMPP user to the



Saint-Andre, et al.     Expires December 11, 2005               [Page 8]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   SIP user:

   Example: XMPP user sends message (SIP transformation):

   |  MESSAGE sip:romeo@example.net SIP/2.0
   |  Via: SIP/2.0/TCP julietpc.example.com;branch=z9hG4bK776sgdkse
   |  Max-Forwards: 70
   |  From: sip:juliet@example.com;tag=49583
   |  To: sip:romeo@example.net
   |  Call-ID: Hr0zny9l3@example.com
   |  CSeq: 1 MESSAGE
   |  Content-Type: text/plain
   |  Content-Length: 37
   |
   |  Art thou not Romeo, and a Montague?

   The mapping of XMPP syntax elements to SIP syntax elements SHOULD be
   as shown in the following table.  (Mappings for elements not
   mentioned are undefined.)

   Table 3: Message syntax mapping from XMPP to SIP

      +-----------------------------+--------------------------+
      |  XMPP Element or Attribute  |  SIP Header or Contents  |
      +-----------------------------+--------------------------+
      |  <body/>                    |  body of MESSAGE         |
      |  <subject/>                 |  Subject                 |
      |  <thread/>                  |  (no mapping)            |
      |  from                       |  From                    |
      |  id                         |  (no mapping)            |
      |  to                         |  To                      |
      |  type                       |  (no mapping)            |
      |  xml:lang                   |  Content-Language        |
      +-----------------------------+--------------------------+


3.3  SIP to XMPP

   When Romeo wants to send an instant message to Juliet, he interacts
   with his SIP user agent, which generates a SIP MESSAGE request.  The
   syntax of the MESSAGE request is defined in [SIP-IM].  The following
   is an example of such a request:









Saint-Andre, et al.     Expires December 11, 2005               [Page 9]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   Example: SIP user sends message:

   |  MESSAGE sip:juliet@example.com SIP/2.0
   |  Via: SIP/2.0/TCP romeopc.example.com;branch=eskdgs677Kb4Ghz9
   |  Max-Forwards: 70
   |  From: sip:romeo@example.net;tag=38594
   |  To: sip:juliet@example.com
   |  Call-ID: M4spr4vdu@example.net
   |  CSeq: 1 MESSAGE
   |  Content-Type: text/plain
   |  Content-Length: 26
   |
   |  Neither, fair saint, if either thee dislike.

   Section 5 of [SIP-IM] stipulates that a SIP User Agent presented with
   an im: URI should resolve it to a sip: or sips: URI.  Therefore we
   assume that the To header of a request received by a SIMPLE-XMPP
   gateway will contain a sip: or sips: URI.  The gateway SHOULD resolve
   that address to an im: URI for SIP MESSAGE requests, then follow the
   rules in [IMP-SRV] regarding the "_im" SRV service for the target
   domain contained in the To header.  If SRV address resolution fails
   for the "_im" service, the gateway MAY attempt a lookup for the
   "_xmpp-server" service as specified in [XMPP-CORE] or MAY return an
   error to the sender (the SIP "502 Bad Gateway" error seems most
   appropriate).  If SRV address resolution succeeds, the gateway is
   responsible for translating the request into an XMPP message stanza
   from the SIP user to the XMPP user and returning a SIP "200 OK"
   message to the sender:

   Example: SIP user sends message (XMPP transformation):

   |  <message from='romeo@example.net'
   |           to='juliet@example.com'>
   |    <body>Neither, fair saint, if either thee dislike.</body>
   |  </message>

   The mapping of SIP syntax elements to XMPP syntax elements SHOULD be
   as shown in the following table.  (Mappings for elements not
   mentioned in the foregoing table are undefined.)












Saint-Andre, et al.     Expires December 11, 2005              [Page 10]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   Table 4: Message syntax mapping from SIP to XMPP

      +--------------------------+-----------------------------+
      |  SIP Header or Contents  |  XMPP Element or Attribute  |
      +--------------------------+-----------------------------+
      |  Call-ID                 |  (no mapping)               |
      |  Content-Language        |  xml:lang                   |
      |  CSeq                    |  id (OPTIONAL)              |
      |  From                    |  from                       |
      |  Subject                 |  <subject/>                 |
      |  To                      |  to                         |
      |  body of MESSAGE         |  <body/>                    |
      +--------------------------+-----------------------------+

   Note: When transforming SIP pager-model messages, a SIMPLE-XMPP
   gateway SHOULD specify no XMPP 'type' attribute or a 'type' attribute
   whose value is "normal".

4.  Presence Subscriptions

4.1  Overview

   Both XMPP and presence-aware SIP systems enable entities (often but
   not necessarily human users) to subscribe to the presence of other
   entities.  XMPP presence subscriptions are specified in [XMPP-IM].
   Presence subscriptions using a SIP event package for presence are
   specified in [SIP-PRES].

   As described in [XMPP-IM], XMPP presence subscriptions are managed
   using XMPP presence stanzas of type "subscribe", "subscribed",
   "unsubscribe", and "unsubscribed".  The main subscription states are
   "none" (neither the user nor the contact is subscribed to the other's
   presence information), "from" (the user has a subscription from the
   contact), "to" (the user has a subscription to the contact's presence
   information), and "both" (both user and contact are subscribed to
   each other's presence information).

   As described in [SIP-PRES], SIP presence subscriptions are managed
   through the use of SIP SUBSCRIBE events sent from a SIP user agent to
   an intended recipient who is most generally referenced by an Instant
   Message URI of the form <pres:user@domain> but who may be referenced
   by a SIP or SIPS URI of the form <sip:user@domain> or
   <sips:user@domain>.

   The subscription models underlying XMPP and SIP are quite different.
   For instance, XMPP presence subscriptions are long-lived (indeed
   permanent if not explicitly cancelled), whereas SIP presence
   subscriptions are short-lived (the default time to live of a SIP



Saint-Andre, et al.     Expires December 11, 2005              [Page 11]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   presence subscription is 3600 seconds, as specified in Section 6.4 of
   [SIP-PRES]).  These differences are addressed below.

4.2  XMPP to SIP

   An XMPP user initiates a subscription by sending a subscription
   request to another entity (conventionally called a "contact"), which
   request the contact either accepts or declines.  If the contact
   accepts the request, the user will have a subscription to the
   contact's presence information until (1) the user unsubscribes or (2)
   the contact cancels the subscription.  The subscription request is
   encapsulated in a presence stanza of type "subscribe":

   Example: XMPP user subscribes to SIP contact:

   |  <presence from='juliet@example.com'
   |            to='romeo@example.net'
   |            type='subscribe'/>

   Upon receiving such a stanza, the XMPP server to which Juliet has
   connected needs to determine the identity of the foreign domain,
   which it does by performing one or more [SRV] lookups.  For presence
   stanzas, the order of lookups recommended by [XMPP-IM] is to first
   try the "_xmpp-server" service as specified in [XMPP-CORE] and to
   then try the "_pres" service as specified in [IMP-SRV].  Here we
   assume that the first lookup will fail but that the second lookup
   will succeed and return a resolution "_pres._simple.example.net.",
   since we have already assumed that the example.net hostname is
   running a SIP presence service.

   Once the XMPP server has determined that the foreign domain is
   serviced by a SIMPLE server, it must determine how to proceed.  We
   here assume that the XMPP server contains or has available to it an
   XMPP-SIMPLE gateway.  The XMPP server would then deliver the presence
   stanza to the XMPP-SIMPLE gateway.

   The XMPP-SIMPLE gateway is then responsible for translating the XMPP
   subscription request into a SIP SUBSCRIBE request from the XMPP user
   to the SIP user:












Saint-Andre, et al.     Expires December 11, 2005              [Page 12]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   Example: XMPP user subscribes to SIP contact (SIP transformation):

   |  SUBSCRIBE sip:romeo@example.net SIP/2.0
   |  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk
   |  From: <sip:juliet@example.com>;tag=ffd2
   |  To: <sip:romeo@example.net>
   |  Call-ID: 1h4t3s1p@example.com
   |  Event: presence
   |  Max-Forwards: 70
   |  CSeq: 123 SUBSCRIBE
   |  Contact: <sip:sipgate.example.com;maddr=192.0.2.1;transport=tls>
   |  Accept: application/pidf+xml
   |  Expires: 3600
   |  Content-Length: 0

   The SIP user then SHOULD send a response indicating acceptance of the
   subscription request:

   Example: SIP accepts subscription request:

   |  SIP/2.0 200 OK
   |  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk
   |  From: <sip:romeo@example.net>
   |  To: <sip:juliet@example.com>;tag=ffd2
   |  Call-ID: 1h4t3s1p@example.com
   |  CSeq: 123 SUBSCRIBE
   |  Contact: <sip:simple.example.net;maddr=192.0.2.2;transport=tls>
   |  Expires: 3600
   |  Content-Length: 0

   The XMPP-SIMPLE gateway SHOULD transform the 200 OK into a presence
   stanza of type "subscribed":

   Example: XMPP user receives acknowledgement from SIP contact:

   |  <presence to='romeo@example.net'
   |            from='juliet@example.com'
   |            type='subscribed'/>

   The SIP user also SHOULD immediately send a presence notification to
   the XMPP user (see Section 5).

   Note: It is the responsibility of the XMPP-SIMPLE gateway to set the
   value of the Expires header and to renew the subscription accordingly
   so that the subscription appears to be permanent to the XMPP user.

   At any time after subscribing, the XMPP user may unsubscribe from the
   contact's presence.  This is done by sending a presence stanza of



Saint-Andre, et al.     Expires December 11, 2005              [Page 13]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   type "unsubscribe":

   Example: XMPP user unsubscribes from SIP contact:

   |  <presence from='juliet@example.com'
   |            to='romeo@example.net'
   |            type='unsubscribe'/>

   The XMPP-SIMPLE gateway is responsible for translating the
   unsubscribe command into a SIP SUBSCRIBE request with the Expires
   header set to a value of zero:

   Example: XMPP user unsubscribes from SIP contact (SIP
   transformation):

   |  SUBSCRIBE sip:romeo@example.net SIP/2.0
   |  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk
   |  From: <sip:juliet@example.com>;tag=ffd2
   |  To: <sip:romeo@example.net>;tag=xfg9
   |  Call-ID: 1ckm32@example.com
   |  Event: presence
   |  Max-Forwards: 70
   |  CSeq: 789 SUBSCRIBE
   |  Contact: <sip:simple.example.net;maddr=192.0.2.2;transport=tls>
   |  Accept: application/pidf+xml
   |  Expires: 0
   |  Content-Length: 0

   Upon sending the transformed unsubscribe, the XMPP-SIMPLE gateway
   SHOULD a presence stanza of type "unsubscribed" to the XMPP user:

   Example: XMPP user receives unsubscribed notification:

   |  <presence to='romeo@example.net'
   |            from='juliet@example.com'
   |            type='unsubscribed'/>


4.3  SIP to XMPP

   A SIP user initiates a subscription to a contact's presence
   information by sending a SIP SUBSCRIBE request to the contact.  The
   following is an example of such a request:








Saint-Andre, et al.     Expires December 11, 2005              [Page 14]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   Example: SIP user subscribes to XMPP contact:

   |  SUBSCRIBE sip:juliet@example.com SIP/2.0
   |  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk
   |  From: <sip:romeo@example.net>;tag=ffd2
   |  To: <sip:juliet@example.com>;tag=xfg9
   |  Call-ID: 4wcm0n@example.net
   |  Event: presence
   |  Max-Forwards: 70
   |  CSeq: 263 SUBSCRIBE
   |  Contact: <sip:simple.example.net;maddr=192.0.2.2;transport=tls>
   |  Accept: application/pidf+xml
   |  Content-Length: 0

   Upon receiving such a request, a SIMPLE-XMPP gateway is responsible
   for translating it into an XMPP subscription request from the SIP
   user to the XMPP user:

   Example: SIP user subscribes to XMPP contact (XMPP transformation):

   |  <presence from='romeo@example.net'
   |            to='juliet@example.com'
   |            type='subscribe'/>

   Notice that the Expires header was not included in the SUBSCRIBE
   request; this means that the default value of 3600 (i.e., 3600
   seconds = 1 hour) applies.

   It is the responsibility of the SIMPLE-XMPP gateway to properly
   handle the difference between short-lived SIP presence subscriptions
   and long-lived XMPP presence subscriptions.  The gateway has two
   options when the SIP user's subscription expires:

   o  Send an XMPP presence stanza of type "unsubscribe" to the XMPP
      contact; this honors the SIP semantic but will seem rather odd to
      the XMPP contact.
   o  Send a SIP NOTIFY request to the SIP user containing a PIDF
      document specifying that the XMPP contact now has a basic status
      of closed; this violates the letter of the SIP semantic but will
      seem more natural to the XMPP contact.

   Which of these the SIMPLE-XMPP gateway chooses is up to the
   implementation.

   At any time, the SIP user may cancel the subscription by sending a
   SUBSCRIBE request whose Expires header is set to a value of zero:





Saint-Andre, et al.     Expires December 11, 2005              [Page 15]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   Example: SIP user cancels subscription:

   |  SUBSCRIBE sip:juliet@example.com SIP/2.0
   |  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk
   |  From: <sip:romeo@example.net>;tag=ffd2
   |  To: <sip:juliet@example.com>;tag=xfg9
   |  Call-ID: 1tsn1ce@example.net
   |  Event: presence
   |  Max-Forwards: 70
   |  CSeq: 987 SUBSCRIBE
   |  Contact: <sip:simple.example.net;maddr=192.0.2.2;transport=tls>
   |  Expires: 0
   |  Accept: application/pidf+xml
   |  Content-Length: 0

   Upon receiving such a request, a SIMPLE-XMPP gateway is responsible
   for translating it into an XMPP presence stanza of type "unsubscribe"
   from the SIP user to the XMPP user:

   Example: SIP user cancels subscription (XMPP transformation):

   |  <presence from='romeo@example.net'
   |            to='juliet@example.com'
   |            type='unsubscribe'/>


5.  Presence Notifications

5.1  Overview

   Both XMPP and presence-aware SIP systems enable entities (often but
   not necessarily human users) to send presence notifications to other
   entities.  At a minimum, the term "presence" refers to information
   about an entity's availability for communication on a network (on/
   off), often supplemented by information that further specifies the
   entity's communications context (e.g., "do not disturb").  Some
   systems and protocols extend this notion even further and refer to
   any relatively ephemeral information about an entity as a kind of
   presence; categories of such "extended presence" include geographical
   location (e.g., GPS coordinates), user mood (e.g., grumpy), user
   activity (e.g., walking), and ambient environment (e.g., noisy).  In
   this document, we focus on the "least common denominator" of network
   availability only, although future documents may address broader
   notions of presence, including "extended presence".

   Presence using XMPP presence stanzas of type "available" or
   "unavailable" is specified in [XMPP-IM].  SIP presence using a SIP
   event package for presence is specified in [SIP-PRES].



Saint-Andre, et al.     Expires December 11, 2005              [Page 16]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   As described in [XMPP-IM], presence information about an entity is
   communicated by means of an XML <presence/> stanza sent over an XML
   stream.  In this document we will assume that such a presence stanza
   is sent from an XMPP client to an XMPP server over an XML stream
   negotiated between the client and the server, and that the client is
   controlled by a human user (again, this is a simplifying assumption
   introduced for explanatory purposes only).  In general, XMPP presence
   is sent by the user to the user's server and then broadcasted to all
   entities who are subscribed to the user's presence information.

   As described in [SIP-PRES], presence information about an entity is
   communicated by means of a SIP NOTIFY event sent from a SIP user
   agent to an intended recipient who is most generally referenced by an
   Instant Message URI of the form <pres:user@domain> but who may be
   referenced by a SIP or SIPS URI of the form <sip:user@domain> or
   <sips:user@domain>.  Here again we introduce the simplifying
   assumption that the user agent is controlled by a human user.

5.2  XMPP to SIP

   When Juliet interacts with her XMPP client to modify her presence
   information (or when her client automatically updates her presence
   information, e.g. via an "auto-away" feature), her client generates
   an XMPP <presence/> stanza.  The syntax of the <presence/> stanza,
   including required and optional elements and attributes, is defined
   in [XMPP-IM].  The following is an example of such a stanza:

   Example: XMPP user sends presence notification:

   |  <presence from='juliet@example.com/balcony'/>

   Upon receiving such a stanza, the XMPP server to which Juliet has
   connected broadcasts it to all subscribers who are authorized to
   receive presence notifications from Juliet.  For each subscriber,
   broadcasting the presence notification involves either delivering it
   to a local recipient (if the hostname in the subscriber's address
   matches one of the hostnames serviced by the XMPP server) or
   attempting to route it to the foreign domain that services the
   hostname in the subscriber's address.  Naturally, in this document we
   assume that the hostname is a SIP presence service hosted by a
   separate server.  As specified in [XMPP-IM], the XMPP server needs to
   determine the identity of the foreign domain, which it does by
   performing one or more [SRV] lookups.  For presence stanzas, the
   order of lookups recommended by [XMPP-IM] is to first try the "_xmpp-
   server" service as specified in [XMPP-CORE] and to then try the
   "_pres" service as specified in [IMP-SRV].  Here we assume that the
   first lookup will fail but that the second lookup will succeed and
   return a resolution "_pres._simple.example.net.", since we have



Saint-Andre, et al.     Expires December 11, 2005              [Page 17]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   already assumed that the example.net hostname is running a SIP
   presence service.  (Note: The XMPP server may have previously
   determined that the foreign domain is a SIMPLE server, in which case
   it would not need to perform the SRV lookups; the caching of such
   information is a matter of implementation and local service policy,
   and is therefore out of scope for this document.)

   Once the XMPP server has determined that the foreign domain is
   serviced by a SIMPLE server, it must determine how to proceed.  We
   here assume that the XMPP server contains or has available to it an
   XMPP-SIMPLE gateway.  The XMPP server would then deliver the presence
   stanza to the XMPP-SIMPLE gateway.

   The XMPP-SIMPLE gateway is then responsible for translating the XMPP
   presence stanza into a SIP NOTIFY request and included PIDF document
   from the XMPP user to the SIP user:

   Example: XMPP user sends presence notification (SIP transformation):

   |  NOTIFY sip:192.0.2.2 SIP/2.0
   |  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk
   |  From: <sip:juliet@example.com>;tag=ffd2
   |  To: <sip:romeo@example.net>;tag=xfg9
   |  Call-ID: j4s0h4vny@example.com
   |  Event: presence
   |  Subscription-State: active;expires=599
   |  Max-Forwards: 70
   |  CSeq: 157 NOTIFY
   |  Contact: <sip:sipgate.example.com;maddr=192.0.2.1;transport=tls>
   |  Content-Type: application/pidf+xml
   |  Content-Length: 192
   |
   |  <?xml version='1.0' encoding='UTF-8'?>
   |  <presence xmlns='urn:ietf:params:xml:ns:pidf'
   |            entity='pres:juliet@example.com'>
   |    <tuple id='balcony'>
   |      <status>
   |        <basic>open</basic>
   |      </status>
   |    </tuple>
   |  </presence>

   The mapping of XMPP syntax elements to SIP syntax elements SHOULD be
   as shown in the following table.  (Mappings for elements not
   mentioned are undefined.)






Saint-Andre, et al.     Expires December 11, 2005              [Page 18]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   Table 5: Presence syntax mapping from XMPP to SIP

      +-----------------------------+---------------------------+
      |  XMPP Element or Attribute  |  SIP Header or PIDF Data  |
      +-----------------------------+---------------------------+
      |  <presence/> stanza         |  "Event: presence" [1]    |
      |  from                       |  From                     |
      |  id                         |  (no mapping)             |
      |  to                         |  To                       |
      |  type                       |  basic status [2]         |
      |  xml:lang                   |  Content-Language         |
      |  <priority/>                |  PIDF priority for tuple  |
      |  <show/>                    |  (no mapping)             |
      |  <status/>                  |  note [3]                 |
      +-----------------------------+---------------------------+

   Note the following regarding these mappings:

   1.  Only a presence stanza which lacks a 'type' attribute or whose
       'type' attribute has a value of "unavailable" should be mapped by
       an XMPP-SIMPLE gateway to a SIP NOTIFY request, since those are
       the only presence stanzas that represent notifications.
   2.  Because the lack of a 'type' attribute indicates that an XMPP
       entity is available for communications, the gateway SHOULD map
       that information to a PIDF <basic/> status of "open".  Because a
       'type' attribute with a value of "unavailable" indicates that an
       XMPP entity is not available for communications, the gateway
       SHOULD map that information to a PIDF <basic/> status of
       "closed".
   3.  The character data of the XMPP <status/> element MAY be mapped to
       the character data of the PIDF <note/> element.

5.3  SIP to XMPP

   When Romeo changes his presence, his SIP user agent generates a SIP
   NOTIFY request.  The syntax of the NOTIFY request is defined in [SIP-
   PRES].  The following is an example of such a request:














Saint-Andre, et al.     Expires December 11, 2005              [Page 19]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   Example: SIP user sends presence notification:

   |  NOTIFY sip:192.0.2.1 SIP/2.0
   |  Via: SIP/2.0/TCP simple.example.net;branch=z9hG4bKna998sk
   |  From: <sip:romeo@example.net>;tag=ffd2
   |  To: <sip:juliet@example.com>;tag=xfg9
   |  Call-ID: j0sj4sv1m@example.net
   |  Event: presence
   |  Subscription-State: active;expires=499
   |  Max-Forwards: 70
   |  CSeq: 8775 NOTIFY
   |  Contact: <sip:simple.example.net;maddr=192.0.2.2;transport=tls>
   |  Content-Type: application/pidf+xml
   |  Content-Length: 193
   |
   |  <?xml version='1.0' encoding='UTF-8'?>
   |  <presence xmlns='urn:ietf:params:xml:ns:pidf'
   |            entity='pres:romeo@example.net'>
   |    <tuple id='orchard'>
   |      <status>
   |        <basic>closed</basic>
   |      </status>
   |    </tuple>
   |  </presence>

   Upon receiving such a request, a SIMPLE-XMPP gateway is responsible
   for translating it into an XMPP presence stanza from the SIP user to
   the XMPP user:

   Example: SIP user sends presence notification (XMPP transformation):

   |  <presence from='romeo@example.net'
   |            to='juliet@example.com/balcony'
   |            type='unavailable'/>

   The mapping of SIP syntax elements to XMPP syntax elements SHOULD be
   as shown in the following table.  (Mappings for elements not
   mentioned are undefined.)













Saint-Andre, et al.     Expires December 11, 2005              [Page 20]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   Table 6: Presence syntax mapping from SIP to XMPP

      +---------------------------+-----------------------------+
      |  SIP Header or PIDF Data  |  XMPP Element or Attribute  |
      +---------------------------+-----------------------------+
      |  basic status             |  type [1]                   |
      |  Content-Language         |  xml:lang                   |
      |  CSeq                     |  id (OPTIONAL)              |
      |  From                     |  from                       |
      |  priority for tuple       |  <priority/>                |
      |  To                       |  to                         |
      |  body of MESSAGE          |  <body/>                    |
      +---------------------------+-----------------------------+

   Note the following regarding these mappings:

   1.  A PIDF basic status of "open" SHOULD be mapped to no 'type'
       attribute, and a PIDF basic status of "closed" SHOULD be mapped
       to a 'type' attribute whose value is "unavailable".

6.  IANA Considerations

   This document requires no action on the part of the IANA.

7.  Security Considerations

   Detailed security considerations for instant messaging and presence
   protocols are given in [IMP-REQS], specifically in Sections 5.1
   through 5.4.  Detailed security considerations for XMPP are given in
   XMPP Core [XMPP-CORE].  Detailed security considerations for SIP-
   based messaging are given in [SIP-IM] and for SIP-based presence are
   given in [SIP-PRES] (see also the security considerations for the
   Session Initiation Protocol given in [SIP]).

   This document specifies methods for exchanging instant messages and
   presence information through a gateway that translates between SIP
   and XMPP.  Such a gateway MUST be compliant with the minimum security
   requirements of the instant messaging and presence protocols for
   which it translates (i.e., SIP and XMPP).  The introduction of
   gateways to the security model of instant messaging and presence
   specified in [IMP-REQS] introduces some new risks.  In particular,
   end-to-end security properties (especially confidentiality and
   integrity) between instant messaging and presence user agents that
   interface through a SIMPLE-XMPP gateway can be provided only if
   common formats are supported.  Specification of those common formats
   is out of scope for this document, although it is recommended to use
   [MSGFMT] for instant messages and [PIDF] for presence.




Saint-Andre, et al.     Expires December 11, 2005              [Page 21]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   [IMP-REQS] requires that conformant technologies shall include
   methods for blocking communications from unwanted addresses.  Such
   blocking is the responsibility of conformant technology (e.g., XMPP
   or SIP) and is out of scope for this memo.

8.  Acknowledgements

   The authors wish to thank Nathaniel Borenstein and Rohan Mahy for
   suggestions and encouragement, Daniel-Constantin Mierla for earlier
   work on SIMPLE-XMPP interworking, and Sandeep Sharma for feedback
   based on implementation experience.

9.  References

9.1  Normative References

   [IMP-SRV]  Peterson, J., "Address Resolution for Instant Messaging
              and Presence", RFC 3861, August 2004.

   [PIDF]     Sugano, H., Fujimoto, S., Klyne, G., Bateman, A., Carr,
              W., and J. Peterson, "Presence Information Data Format
              (PIDF)", RFC 3863, August 2004.

   [SIP]      Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,
              A., Peterson, J., Sparks, R., Handley, M., and E.
              Schooler, "SIP: Session Initiation Protocol", RFC 3261,
              June 2002.

   [SIP-IM]   Campbell, B., Rosenberg, J., Schulzrinne, H., Huitema, C.,
              and D. Gurle, "Session Initiation Protocol (SIP) Extension
              for Instant Messaging", RFC 3428, December 2002.

   [SIP-PRES]
              Rosenberg, J., "A Presence Event Package for the Session
              Initiation Protocol (SIP)", RFC 3856, August 2004.

   [SRV]      Gulbrandsen, A., Vixie, P., and L. Esibov, "A DNS RR for
              specifying the location of services (DNS SRV)", RFC 2782,
              February 2000.

   [STRINGPREP]
              Hoffman, P. and M. Blanchet, "Preparation of
              Internationalized Strings ("STRINGPREP")", RFC 3454,
              December 2002.

   [TERMS]    Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.




Saint-Andre, et al.     Expires December 11, 2005              [Page 22]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   [URL-GUIDE]
              Masinter, L., Alvestrand, H., Zigmond, D., and R. Petke,
              "Guidelines for new URL Schemes", RFC 2718, November 1999.

   [XMPP-CORE]
              Saint-Andre, P., "Extensible Messaging and Presence
              Protocol (XMPP): Core", RFC 3920, October 2004.

   [XMPP-IM]  Saint-Andre, P., "Extensible Messaging and Presence
              Protocol (XMPP): Instant Messaging and Presence",
              RFC 3921, October 2004.

9.2  Informative References

   [CPIM]     Peterson, J., "Common Profile for Instant Messaging
              (CPIM)", RFC 3860, August 2004.

   [CPP]      Peterson, J., "Common Profile for Presence (CPP)",
              RFC 3859, August 2004.

   [DRAFT-UMPP]
              Mahy, R., "A Unified Proposal for Server-to-Server
              Presence and Instant Messaging",
              draft-mahy-impp-unified-proposal-00 (work in progress),
              February 2004.

   [IDNA]     Faltstrom, P., Hoffman, P., and A. Costello,
              "Internationalizing Domain Names in Applications (IDNA)",
              RFC 3490, March 2003.

   [IMP-MODEL]
              Day, M., Rosenberg, J., and H. Sugano, "A Model for
              Presence and Instant Messaging", RFC 2778, February 2000.

   [IMP-REQS]
              Day, M., Aggarwal, S., and J. Vincent, "Instant Messaging
              / Presence Protocol Requirements", RFC 2779,
              February 2000.

   [IRC]      Oikarinen, J. and D. Reed, "Internet Relay Chat Protocol",
              RFC 1459, May 1993.

   [JEP-0106]
              Saint-Andre, P. and J. Hildebrand, "JID Escaping", JSF
              JEP 0106, May 2005.

   [MSGFMT]   Klyne, G. and D. Atkins, "Common Presence and Instant
              Messaging (CPIM): Message Format", RFC 3862, August 2004.



Saint-Andre, et al.     Expires December 11, 2005              [Page 23]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


   [MSRP]     Campbell, B., Mahy, R., and C. Jennings, "The Message
              Session Relay Protocol",
              draft-ietf-simple-message-sessions-10 (work in progress),
              February 2005.

   [SIMPLE-CPIM]
              Rosenberg, J. and B. Campbell, "CPIM Mapping of SIMPLE
              Presence and Instant Messaging",
              draft-ietf-simple-cpim-mapping-01 (work in progress),
              June 2002.

   [XMPP-CPIM]
              Saint-Andre, P., "Mapping the Extensible Messaging and
              Presence Protocol (XMPP) to Common Presence and Instant
              Messaging (CPIM)", RFC 3922, October 2004.


Authors' Addresses

   Peter Saint-Andre
   Jabber Software Foundation


   Avshalom Houri
   IBM


   Joe Hildebrand
   Jabber, Inc.






















Saint-Andre, et al.     Expires December 11, 2005              [Page 24]

Internet-Draft          Basic XMPP-SIMPLE Interop              June 2005


Intellectual Property Statement

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.


Disclaimer of Validity

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET
   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,
   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Copyright Statement

   Copyright (C) The Internet Society (2005).  This document is subject
   to the rights, licenses and restrictions contained in BCP 78, and
   except as set forth therein, the authors retain all their rights.


Acknowledgment

   Funding for the RFC Editor function is currently provided by the
   Internet Society.




Saint-Andre, et al.     Expires December 11, 2005              [Page 25]

