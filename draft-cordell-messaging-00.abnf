id = tag "=" /  ; Normal case
                    "="  /  ; Option when parameter is following member 
                            ; in a SEQUENCE OF
                    ""      ; When "AS ?" is used to request that a tag is not used
                            ; These variations will be discussed further below

LWS = " " / tab / CRLF

sequence_no = 125

host-name = "Zebedee"

user-name = `Pete Cordell'

gUID = x0f1b6c0dbcad01230f1b6c0dbcad0123

activated = TRUE

oid-value-list = oid-value-list "-" 1*("0-9") / 1*("0-9")

protocol = 3-0-0

modes = ( highmode = TRUE lowmode = FALSE )

response = [ acknowledge = NULL ]

response = [ informGroup = 137 ]

response = [ acknowledge ]

node_alerts = 0 node_alerts = 5000 node_alerts = 12

node_alerts = 0 = 5000 = 12

complex = ( admin_node = 20 
user_id = 6
mode = ( video = TRUE audio = TRUE data = FALSE )
user_id = 5
user-name = `Pete Cordell'
gUID = x0f1b6c0dbcad01230f1b6c0dbcad0123
activated = TRUE
modes = ( highmode = TRUE lowmode = FALSE )
response = [ informGroup = 137 ]
id = 12
protocol = 3-0-0
node_alerts = 0 = 5000 = 12
complex = ( 
admin_node = 20 
user_id = 6
mode = ( video = TRUE audio = TRUE data = FALSE )
admin_node = 5
user_id = 5
activated = TRUE
node_alerts = 0 
user-name = `Pete Cordell'
sequence_no = 
modes = ( highmode = TRUE lowmode = FALSE )
id = 12
protocol = 3-0-0
node_alerts = 5000 = 12
complex = (
admin_node = 20 
user_id = 6
mode = ( video = TRUE audio = TRUE data = FALSE )
response = [ informGroup = 137 ]
complex = (
admin_node = 5
user_id = 5             -- We can have comments too
gUID = x0f1b6c0dbcad01230f1b6c0dbcad0123
Syntax-definition = *( root-def )

root-def = name "::="
                     [ "SEQUENCE" [ "SIZE" "(" digits ".." digits ")" ] 
                     "OF" ] 
                     type

name = identifier

type = compound-type / simple-type / string-type / 
                    referenced-type

compound-type = seq-type / choice-type

seq-type = "SEQUENCE" "{" seq-line-list "}"

seq-line-list = seq-line / seq-line-list "," seq-line

seq-line = seq-element / extension

seq-element = name [ "AS" ( tag / "?" ) ] [ 
                            numerical-tag ]
                        [ "SEQUENCE" [ "SIZE" "(" digits ".." digits ")" ] 
                        "OF" ] 
                        type [ "PLUGIN" ] [ "OPTIONAL" ] [ "IGNORE" ] 

choice-type = "CHOICE" "{" choice-line-list "}"

choice-line-list = choice-line / 
                                choice-line-list "," choice-line

choice-line = choice-element / extension 

choice-element = name [ "AS" tag ] [ numerical-tag ] type [ "PLUGIN" ] 

tag = identifier

numerical-tag = "[" digits "]"

integer-type = "INTEGER" [ "(" digits ".." digits ")" ]

string-type = char-string / non-char-string

char-string = ( "IA5String" / "BMPString" ) [ "(" 
                            "SIZE" "(" digits [ ".." digits ] ")" ")" ]

non-char-string = ( "OCTET STRING" / "EMBEDDED" )  
                             [ "SIZE" "(" digits [ ".." digits ] ")" ]

referenced-type = identifier

extension = "..."

identifier = ( "A-Z" / "a-z" ) *( "A-Z" / "a-z" / "0-9" / 
                            "-" / "." / "_" ) 
                            ; i.e. Alphanumeric string with leading  
                            ; alphabetic character

digits = [ "-" ] ( decimal | hex )

decimal = *( "0-9" )

hex = "0x" *( "0-9" / "A-F" / "a-f" )

wasFound = getBoolean( parseTreeRootPointer,
                                    "complex:mode:video", // Parameter name
                                    0, // Instance
                                    &myBoolean ) // Where result is placed

parameter = 
                "(" parameter-description ")" /     ; Parameter always appears once
                "[" parameter-description "]" /     ; Parameter is optional
                "*(" parameter-description ")" /    ; Appears zero or more times
                "1*(" parameter-description ")" /   ; Appears 1 or more times
                digits "*" digits "(" parameter-description ")"
                                                    ; Appears a range number of times

parameter-list = name "=" *parameter

parameter-switch = name "=" parameter-switch-list

parameter-switch-list = parameter-switch-list "/" parameter / 
                                    parameter

parameter-description = 
                    ( name type [PLUGIN] ) /     ; Tag on wire is same as name
                    ( name tag type [PLUGIN] ) / ; Use specified tag on wire
                    ( name ? type )              ; Has no tag on wire

type = "UNSIGNED8" / "UNSIGNED16" / "UNSIGNED32" / "UNSIGNED64" /
                    "SIGNED8" / "SIGNED16" / "SIGNED32" / "SIGNED64" /
                    "BOOLEAN" / "NULL" / "OID" / strings / compound / referenced

strings = string-type /                         ; Unbounded string 
                    [ digits [ * digits ] ] string-type /   ; Bounded string
                    digits string-type                      ; Fixed sized string

sting-type = "ASCII" / "Unicode" / "OCTETS" / "EMBEDDED"

compound = embedded-parameter-list / embedded-parameter-switch

embedded-parameter-list = "{" *parameter "}"

embedded-parameter-switch = "{" parameter-switch-list "}"

message-definition = 1*( parameter-list / parameter-switch )

name = tag = referenced = 
                ( "A-Z" / "a-z" ) * ("A-Z" / "a-z" / "0-9" / "-" / "." / "_" )

startup = ( sequence_no ? UNSIGNED16 )
                ( host-name ? 1*128ASCII )
                ( user-name 1*64Unicode )
                ( gUID 16OCTET )
                ( activated BOOLEAN )
                ( modes {
                        ( highmode BOOLEAN )
                        (lowmode BOOLEAN )
                        } )
                ( response {
                        ( acknowledge NULL ) / ; NULL indicates no further data
                        ( silent NULL ) /
                        ( informGroup UNSIGNED16 )  ;Address to send 
                                            ;group response to
                        })
                [ id UNSIGNED8 ]
                ( protocol OID )        ; Set to { ietf (3) wg (0) newproj (0 ) }
                * ( node_alerts UNSIGNED16 )
                1*4( complex {
                        ( admin_node UNSIGNED8 )
                        ( user_id UNSIGNED8 )
                        [ mode {
                                ( video BOOLEAN )
                                ( audio BOOLEAN )
                                ( data BOOLEAN )
                                } ]
                        } )
                [ my-extension mine.bigco.com UNSIGNED8 PLUGIN ]

